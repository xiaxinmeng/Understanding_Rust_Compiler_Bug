{"sha": "04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "node_id": "C_kwDOAAsO6NoAKDA0MDI0YmFjYmExZjc0ZjVkOGNkYjdmYjkxNzk4YmE3N2JjMmI4ZjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-13T10:30:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T07:59:24Z"}, "message": "Drop vis in Item.", "tree": {"sha": "3606fc8e90a1ccabe0b06b30cc48073af7060ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3606fc8e90a1ccabe0b06b30cc48073af7060ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "html_url": "https://github.com/rust-lang/rust/commit/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec33dfe4915a19129af765fdd53dd95f21c3788", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec33dfe4915a19129af765fdd53dd95f21c3788", "html_url": "https://github.com/rust-lang/rust/commit/6ec33dfe4915a19129af765fdd53dd95f21c3788"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "346d03ca5568f0aaf7c3593a45f721999a758ea3", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "patch": "@@ -260,7 +260,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n                     }\n                     // The `module_name_repetitions` lint should only trigger if the item has the module in its\n                     // name. Having the same name is accepted.\n-                    if item.vis.node.is_pub() && item_camel.len() > mod_camel.len() {\n+                    if cx.tcx.visibility(item.def_id).is_public() && item_camel.len() > mod_camel.len() {\n                         let matching = count_match_start(mod_camel, &item_camel);\n                         let rmatching = count_match_end(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();"}, {"sha": "e2e2400f8e267ae8e398778ed0de72ba17b1bdbb", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "patch": "@@ -1,8 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_errors::Applicability;\n-use rustc_hir::{Item, ItemKind, VisibilityKind};\n+use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::def_id::CRATE_DEF_ID;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -41,7 +43,7 @@ impl_lint_pass!(RedundantPubCrate => [REDUNDANT_PUB_CRATE]);\n \n impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let VisibilityKind::Crate { .. } = item.vis.node {\n+        if cx.tcx.visibility(item.def_id) == ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()) {\n             if !cx.access_levels.is_exported(item.def_id) && self.is_exported.last() == Some(&false) {\n                 let span = item.span.with_hi(item.ident.span.hi());\n                 let descr = cx.tcx.def_kind(item.def_id).descr(item.def_id.to_def_id());\n@@ -52,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                     &format!(\"pub(crate) {} inside private module\", descr),\n                     |diag| {\n                         diag.span_suggestion(\n-                            item.vis.span,\n+                            item.vis_span,\n                             \"consider using\",\n                             \"pub\".to_string(),\n                             Applicability::MachineApplicable,"}, {"sha": "e4abfd07866a2db615b8c2a012d3999328c66e2d", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "patch": "@@ -357,14 +357,10 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n     let did = item.def_id;\n     println!(\"item `{}`\", item.ident.name);\n-    match item.vis.node {\n-        hir::VisibilityKind::Public => println!(\"public\"),\n-        hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n-        hir::VisibilityKind::Restricted { path, .. } => println!(\n-            \"visible in module `{}`\",\n-            rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(path, false))\n-        ),\n-        hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n+    match cx.tcx.visibility(item.def_id) {\n+        ty::Visibility::Public => println!(\"public\"),\n+        ty::Visibility::Restricted(def_id) => println!(\"visible in module `{}`\", cx.tcx.def_path_str(def_id)),\n+        ty::Visibility::Invisible => println!(\"invisible\"),\n     }\n     match item.kind {\n         hir::ItemKind::ExternCrate(ref _renamed_from) => {"}, {"sha": "2f74eaf3cf5c319a9fff3f2bc0e06d06e24da1e3", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=04024bacba1f74f5d8cdb7fb91798ba77bc2b8f5", "patch": "@@ -8,6 +8,7 @@ use rustc_hir::{\n     Item, ItemKind, PathSegment, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::kw;\n use rustc_span::{sym, BytePos};\n@@ -115,7 +116,8 @@ impl LateLintPass<'_> for WildcardImports {\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n         }\n-        if item.vis.node.is_pub() || item.vis.node.is_pub_restricted() {\n+        let module = cx.tcx.parent_module_from_def_id(item.def_id);\n+        if cx.tcx.visibility(item.def_id) != ty::Visibility::Restricted(module.to_def_id()) {\n             return;\n         }\n         if_chain! {"}]}