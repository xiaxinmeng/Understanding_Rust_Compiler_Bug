{"sha": "f6fe24aab36814ee31ad9dd46fbefe1017670ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZmUyNGFhYjM2ODE0ZWUzMWFkOWRkNDZmYmVmZTEwMTc2NzBlY2U=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T14:34:47Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T14:58:50Z"}, "message": "Add HashMap::try_insert and hash_map::OccupiedError.", "tree": {"sha": "3866ca2e993b653979e3a8cddecff4605c118e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3866ca2e993b653979e3a8cddecff4605c118e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6fe24aab36814ee31ad9dd46fbefe1017670ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe24aab36814ee31ad9dd46fbefe1017670ece", "html_url": "https://github.com/rust-lang/rust/commit/f6fe24aab36814ee31ad9dd46fbefe1017670ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe24aab36814ee31ad9dd46fbefe1017670ece/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/09cbcdc2c31325ec67047c5b9ce87dee03af62dc", "html_url": "https://github.com/rust-lang/rust/commit/09cbcdc2c31325ec67047c5b9ce87dee03af62dc"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "4e6aee98647ea00e938a0d184539ed2475f66bfb", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f6fe24aab36814ee31ad9dd46fbefe1017670ece/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fe24aab36814ee31ad9dd46fbefe1017670ece/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=f6fe24aab36814ee31ad9dd46fbefe1017670ece", "patch": "@@ -842,6 +842,40 @@ where\n         self.base.insert(k, v)\n     }\n \n+    /// Tries to insert a key-value pair into the map, and returns\n+    /// a mutable reference to the value in the entry.\n+    ///\n+    /// If the map already had this key present, nothing is updated, and\n+    /// an error containing the occupied entry and the value is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(map_try_insert)]\n+    ///\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n+    ///\n+    /// let err = map.try_insert(37, \"b\").unwrap_err();\n+    /// assert_eq!(err.entry.key(), &37);\n+    /// assert_eq!(err.entry.get(), &\"a\");\n+    /// assert_eq!(err.value, \"b\");\n+    /// ```\n+    #[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+    pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>>\n+    where\n+        K: Ord,\n+    {\n+        match self.entry(key) {\n+            Occupied(entry) => Err(OccupiedError { entry, value }),\n+            Vacant(entry) => Ok(entry.insert(value)),\n+        }\n+    }\n+\n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n     ///\n@@ -1851,6 +1885,18 @@ impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n     }\n }\n \n+/// The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.\n+///\n+/// Contains the occupied entry, and the value that was not inserted.\n+#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+#[derive(Debug)]\n+pub struct OccupiedError<'a, K: 'a, V: 'a> {\n+    /// The entry in the map that was already occupied.\n+    pub entry: OccupiedEntry<'a, K, V>,\n+    /// The value which was not inserted, because the entry was already occupied.\n+    pub value: V,\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type Item = (&'a K, &'a V);"}]}