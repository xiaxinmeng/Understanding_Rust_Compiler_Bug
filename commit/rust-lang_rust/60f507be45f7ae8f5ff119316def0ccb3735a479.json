{"sha": "60f507be45f7ae8f5ff119316def0ccb3735a479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjUwN2JlNDVmN2FlOGY1ZmYxMTkzMTZkZWYwY2NiMzczNWE0Nzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T17:32:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:28Z"}, "message": "Fallout: remove unused type and region parameters.", "tree": {"sha": "29699a2d7885c825ee0a011ebb31aacf7c97d864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29699a2d7885c825ee0a011ebb31aacf7c97d864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f507be45f7ae8f5ff119316def0ccb3735a479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f507be45f7ae8f5ff119316def0ccb3735a479", "html_url": "https://github.com/rust-lang/rust/commit/60f507be45f7ae8f5ff119316def0ccb3735a479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f507be45f7ae8f5ff119316def0ccb3735a479/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872ce479550a3d805babb0ca409dfc3cf6f52309", "url": "https://api.github.com/repos/rust-lang/rust/commits/872ce479550a3d805babb0ca409dfc3cf6f52309", "html_url": "https://github.com/rust-lang/rust/commit/872ce479550a3d805babb0ca409dfc3cf6f52309"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "bab954c29596f538b194204169937be16336a4ac", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=60f507be45f7ae8f5ff119316def0ccb3735a479", "patch": "@@ -29,7 +29,6 @@ use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticClosure};\n use util::ppaux::Repr;\n \n-use std::marker;\n use syntax::{ast, ast_util};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n@@ -128,16 +127,14 @@ pub enum MatchMode {\n     MovingMatch,\n }\n \n-#[derive(PartialEq,Debug)]\n-enum TrackMatchMode<T> {\n+#[derive(Copy, PartialEq, Debug)]\n+enum TrackMatchMode {\n     Unknown,\n     Definite(MatchMode),\n     Conflicting,\n }\n \n-impl<T> marker::Copy for TrackMatchMode<T> {}\n-\n-impl<T> TrackMatchMode<T> {\n+impl TrackMatchMode {\n     // Builds up the whole match mode for a pattern from its constituent\n     // parts.  The lattice looks like this:\n     //\n@@ -931,7 +928,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         return true;\n     }\n \n-    fn arm_move_mode(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &ast::Arm) -> TrackMatchMode<Span> {\n+    fn arm_move_mode(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &ast::Arm) -> TrackMatchMode {\n         let mut mode = Unknown;\n         for pat in &arm.pats {\n             self.determine_pat_move_mode(discr_cmt.clone(), &**pat, &mut mode);\n@@ -966,7 +963,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n     fn determine_pat_move_mode(&mut self,\n                                cmt_discr: mc::cmt<'tcx>,\n                                pat: &ast::Pat,\n-                               mode: &mut TrackMatchMode<Span>) {\n+                               mode: &mut TrackMatchMode) {\n         debug!(\"determine_pat_move_mode cmt_discr={} pat={}\", cmt_discr.repr(self.tcx()),\n                pat.repr(self.tcx()));\n         return_if_err!(self.mc.cat_pattern(cmt_discr, pat, |_mc, cmt_pat, pat| {"}, {"sha": "a729156c88b3588e3d85e442d6878b6c526fcd15", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=60f507be45f7ae8f5ff119316def0ccb3735a479", "patch": "@@ -31,7 +31,7 @@ pub trait HigherRankedRelations<'tcx> {\n         where T : Combineable<'tcx>;\n }\n \n-trait InferCtxtExt<'tcx> {\n+trait InferCtxtExt {\n     fn tainted_regions(&self, snapshot: &CombinedSnapshot, r: ty::Region) -> Vec<ty::Region>;\n \n     fn region_vars_confined_to_snapshot(&self,\n@@ -371,7 +371,7 @@ fn fold_regions_in<'tcx, T, F>(tcx: &ty::ctxt<'tcx>,\n     }))\n }\n \n-impl<'a,'tcx> InferCtxtExt<'tcx> for InferCtxt<'a,'tcx> {\n+impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> {\n     fn tainted_regions(&self, snapshot: &CombinedSnapshot, r: ty::Region) -> Vec<ty::Region> {\n         self.region_vars.tainted(&snapshot.region_vars_snapshot, r)\n     }"}, {"sha": "796da951439bc4c4632d440bfb688bf355dd34ac", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=60f507be45f7ae8f5ff119316def0ccb3735a479", "patch": "@@ -306,10 +306,10 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n         // Crate-local:\n         //\n         // meh.\n-        struct Visitor<'a, 'b: 'a, 'tcx: 'a + 'b> {\n+        struct Visitor<'a> {\n             traits: &'a mut AllTraitsVec,\n         }\n-        impl<'v,'a, 'b, 'tcx> visit::Visitor<'v> for Visitor<'a, 'b, 'tcx> {\n+        impl<'v, 'a> visit::Visitor<'v> for Visitor<'a> {\n             fn visit_item(&mut self, i: &'v ast::Item) {\n                 match i.node {\n                     ast::ItemTrait(..) => {"}, {"sha": "9655da92e56971e03d038d55e10e8194136cce65", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=60f507be45f7ae8f5ff119316def0ccb3735a479", "patch": "@@ -433,7 +433,7 @@ pub enum IoErrorKind {\n }\n \n /// A trait that lets you add a `detail` to an IoError easily\n-trait UpdateIoError<T> {\n+trait UpdateIoError {\n     /// Returns an IoError with updated description and detail\n     fn update_err<D>(self, desc: &'static str, detail: D) -> Self where\n         D: FnOnce(&IoError) -> String;\n@@ -446,7 +446,7 @@ trait UpdateIoError<T> {\n     fn update_desc(self, desc: &'static str) -> Self;\n }\n \n-impl<T> UpdateIoError<T> for IoResult<T> {\n+impl<T> UpdateIoError for IoResult<T> {\n     fn update_err<D>(self, desc: &'static str, detail: D) -> IoResult<T> where\n         D: FnOnce(&IoError) -> String,\n     {"}, {"sha": "fcb1cdf216b42ab066b644e333504fa886c67afb", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f507be45f7ae8f5ff119316def0ccb3735a479/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=60f507be45f7ae8f5ff119316def0ccb3735a479", "patch": "@@ -45,11 +45,11 @@ fn no_prelude(attrs: &[ast::Attribute]) -> bool {\n     attr::contains_name(attrs, \"no_implicit_prelude\")\n }\n \n-struct StandardLibraryInjector<'a> {\n-    alt_std_name: Option<String>\n+struct StandardLibraryInjector {\n+    alt_std_name: Option<String>,\n }\n \n-impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n+impl fold::Folder for StandardLibraryInjector {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n \n         // The name to use in `extern crate \"name\" as std;`\n@@ -80,9 +80,10 @@ fn inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>) -> ast::Cr\n     fold.fold_crate(krate)\n }\n \n-struct PreludeInjector<'a>;\n+struct PreludeInjector;\n \n-impl<'a> fold::Folder for PreludeInjector<'a> {\n+\n+impl fold::Folder for PreludeInjector {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n         // only add `use std::prelude::*;` if there wasn't a\n         // `#![no_implicit_prelude]` at the crate level."}]}