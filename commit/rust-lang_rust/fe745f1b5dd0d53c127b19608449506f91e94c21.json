{"sha": "fe745f1b5dd0d53c127b19608449506f91e94c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzQ1ZjFiNWRkMGQ1M2MxMjdiMTk2MDg0NDk1MDZmOTFlOTRjMjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-30T21:05:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-30T21:05:25Z"}, "message": "rustdoc: Use fewer unique pointers", "tree": {"sha": "80bcf4812c64a15cadf82958721a5e323865c90f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80bcf4812c64a15cadf82958721a5e323865c90f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe745f1b5dd0d53c127b19608449506f91e94c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe745f1b5dd0d53c127b19608449506f91e94c21", "html_url": "https://github.com/rust-lang/rust/commit/fe745f1b5dd0d53c127b19608449506f91e94c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe745f1b5dd0d53c127b19608449506f91e94c21/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e498da47e265b5bb7a4f59bbed53bc843bd83cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e498da47e265b5bb7a4f59bbed53bc843bd83cc", "html_url": "https://github.com/rust-lang/rust/commit/0e498da47e265b5bb7a4f59bbed53bc843bd83cc"}], "stats": {"total": 247, "additions": 124, "deletions": 123}, "files": [{"sha": "de6f36e75ec39cdb269f21408f198b302a76b306", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -44,10 +44,10 @@ fn fold_crate(\n         attr_parser::parse_crate(attrs)\n     };\n \n-    ~{\n-        topmod: ~{\n+    {\n+        topmod: {\n             name: option::from_maybe(doc.topmod.name, attrs.name)\n-            with *doc.topmod\n+            with doc.topmod\n         }\n     }\n }\n@@ -91,10 +91,10 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n         doc: doc::moddoc,\n         attrs: attr_parser::mod_attrs\n     ) -> doc::moddoc {\n-        ~{\n+        {\n             brief: attrs.brief,\n             desc: attrs.desc\n-            with *doc\n+            with doc\n         }\n     }\n }\n@@ -133,13 +133,13 @@ fn fold_fn(\n         doc: doc::fndoc,\n         attrs: attr_parser::fn_attrs\n     ) -> doc::fndoc {\n-        ret ~{\n+        ret {\n             brief: attrs.brief,\n             desc: attrs.desc,\n             args: merge_arg_attrs(doc.args, attrs.args),\n             return: merge_ret_attrs(doc.return, attrs.return),\n             failure: attrs.failure\n-            with *doc\n+            with doc\n         };\n     }\n \n@@ -152,9 +152,9 @@ fn fold_fn(\n                 attr.name == doc.name\n             } {\n                 some(attr) {\n-                    ~{\n+                    {\n                         desc: some(attr.desc)\n-                        with *doc\n+                        with doc\n                     }\n                 }\n                 none { doc }\n@@ -233,10 +233,10 @@ fn fold_const(\n     let srv = fold.ctxt;\n     let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_const);\n \n-    ~{\n+    {\n         brief: attrs.brief,\n         desc: attrs.desc\n-        with *doc\n+        with doc\n     }\n }\n \n@@ -259,7 +259,7 @@ fn fold_enum(\n     let srv = fold.ctxt;\n     let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_enum);\n \n-    ~{\n+    {\n         brief: attrs.brief,\n         desc: attrs.desc,\n         variants: vec::map(doc.variants) {|variant|\n@@ -278,12 +278,12 @@ fn fold_enum(\n                 }\n             };\n \n-            ~{\n+            {\n                 desc: attrs.desc\n-                with *variant\n+                with variant\n             }\n         }\n-        with *doc\n+        with doc\n     }\n }\n \n@@ -317,23 +317,23 @@ fn fold_res(\n     let srv = fold.ctxt;\n     let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_fn);\n \n-    ~{\n+    {\n         brief: attrs.brief,\n         desc: attrs.desc,\n         args: vec::map(doc.args) {|doc|\n             alt vec::find(attrs.args) {|attr|\n                 attr.name == doc.name\n             } {\n                 some(attr) {\n-                    ~{\n+                    {\n                         desc: some(attr.desc)\n-                        with *doc\n+                        with doc\n                     }\n                 }\n                 none { doc }\n             }\n         }\n-        with *doc\n+        with doc\n     }\n }\n "}, {"sha": "488432718e33fba8336ad0699fca1d10fbae55ea", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -33,69 +33,69 @@ fn maybe_apply_op(op: op, s: option<str>) -> option<str> {\n fn fold_mod(fold: fold::fold<op>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n \n-    ~{\n+    {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc)\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_const(fold: fold::fold<op>, doc: doc::constdoc) -> doc::constdoc {\n     let doc = fold::default_seq_fold_const(fold, doc);\n \n-    ~{\n+    {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc)\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_fn(fold: fold::fold<op>, doc: doc::fndoc) -> doc::fndoc {\n     let doc = fold::default_seq_fold_fn(fold, doc);\n \n-    ~{\n+    {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc),\n         args: vec::map(doc.args) {|doc|\n-            ~{\n+            {\n                 desc: maybe_apply_op(fold.ctxt, doc.desc)\n-                with *doc\n+                with doc\n             }\n         },\n         return: {\n             desc: maybe_apply_op(fold.ctxt, doc.return.desc)\n             with doc.return\n         },\n         failure: maybe_apply_op(fold.ctxt, doc.failure)\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n-    ~{\n+    {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc),\n         variants: vec::map(doc.variants) {|variant|\n-            ~{\n+            {\n                 desc: maybe_apply_op(fold.ctxt, variant.desc)\n-                with *variant\n+                with variant\n             }\n         }\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n-    ~{\n+    {\n         brief: maybe_apply_op(fold.ctxt, doc.brief),\n         desc: maybe_apply_op(fold.ctxt, doc.desc),\n         args: vec::map(doc.args) {|arg|\n-            ~{\n+            {\n                 desc: maybe_apply_op(fold.ctxt, arg.desc)\n-                with *arg\n+                with arg\n             }\n         }\n-        with *doc\n+        with doc\n     }\n }\n "}, {"sha": "21d52736c96377f416af88b61cc016a9286dd7c5", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -32,54 +32,54 @@ fn fold_mod(fold: fold::fold<()>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     let (brief, desc) = modify(doc.brief, doc.desc);\n \n-    ~{\n+    {\n         brief: brief,\n         desc: desc\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_const(fold: fold::fold<()>, doc: doc::constdoc) -> doc::constdoc {\n     let doc = fold::default_seq_fold_const(fold, doc);\n     let (brief, desc) = modify(doc.brief, doc.desc);\n \n-    ~{\n+    {\n         brief: brief,\n         desc: desc\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_fn(fold: fold::fold<()>, doc: doc::fndoc) -> doc::fndoc {\n     let doc = fold::default_seq_fold_fn(fold, doc);\n     let (brief, desc) = modify(doc.brief, doc.desc);\n \n-    ~{\n+    {\n         brief: brief,\n         desc: desc\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_enum(fold: fold::fold<()>, doc: doc::enumdoc) -> doc::enumdoc {\n     let doc = fold::default_seq_fold_enum(fold, doc);\n     let (brief, desc) = modify(doc.brief, doc.desc);\n \n-    ~{\n+    {\n         brief: brief,\n         desc: desc\n-        with *doc\n+        with doc\n     }\n }\n \n fn fold_res(fold: fold::fold<()>, doc: doc::resdoc) -> doc::resdoc {\n     let doc = fold::default_seq_fold_res(fold, doc);\n     let (brief, desc) = modify(doc.brief, doc.desc);\n \n-    ~{\n+    {\n         brief: brief,\n         desc: desc\n-        with *doc\n+        with doc\n     }\n }\n "}, {"sha": "a171bbc36d12a128807c3181615e29444fdd3125", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -2,7 +2,7 @@\n \n type ast_id = int;\n \n-type cratedoc = ~{\n+type cratedoc = {\n     topmod: moddoc,\n };\n \n@@ -14,24 +14,25 @@ enum itemtag {\n     restag(resdoc)\n }\n \n-type moddoc = ~{\n+type moddoc = {\n     id: ast_id,\n     name: str,\n     path: [str],\n     brief: option<str>,\n     desc: option<str>,\n-    items: [itemtag]\n+    // This box exists to break the structural recursion\n+    items: ~[itemtag]\n };\n \n-type constdoc = ~{\n+type constdoc = {\n     id: ast_id,\n     name: str,\n     brief: option<str>,\n     desc: option<str>,\n     ty: option<str>\n };\n \n-type fndoc = ~{\n+type fndoc = {\n     id: ast_id,\n     name: str,\n     brief: option<str>,\n@@ -42,7 +43,7 @@ type fndoc = ~{\n     sig: option<str>\n };\n \n-type argdoc = ~{\n+type argdoc = {\n     name: str,\n     desc: option<str>,\n     ty: option<str>\n@@ -53,21 +54,21 @@ type retdoc = {\n     ty: option<str>\n };\n \n-type enumdoc = ~{\n+type enumdoc = {\n     id: ast_id,\n     name: str,\n     brief: option<str>,\n     desc: option<str>,\n     variants: [variantdoc]\n };\n \n-type variantdoc = ~{\n+type variantdoc = {\n     name: str,\n     desc: option<str>,\n     sig: option<str>\n };\n \n-type resdoc = ~{\n+type resdoc = {\n     id: ast_id,\n     name: str,\n     brief: option<str>,\n@@ -79,7 +80,7 @@ type resdoc = ~{\n impl util for moddoc {\n \n     fn mods() -> [moddoc] {\n-        vec::filter_map(self.items) {|itemtag|\n+        vec::filter_map(*self.items) {|itemtag|\n             alt itemtag {\n               modtag(moddoc) { some(moddoc) }\n               _ { none }\n@@ -88,7 +89,7 @@ impl util for moddoc {\n     }\n \n     fn fns() -> [fndoc] {\n-        vec::filter_map(self.items) {|itemtag|\n+        vec::filter_map(*self.items) {|itemtag|\n             alt itemtag {\n               fntag(fndoc) { some(fndoc) }\n               _ { none }\n@@ -97,7 +98,7 @@ impl util for moddoc {\n     }\n \n     fn consts() -> [constdoc] {\n-        vec::filter_map(self.items) {|itemtag|\n+        vec::filter_map(*self.items) {|itemtag|\n             alt itemtag {\n               consttag(constdoc) { some(constdoc) }\n               _ { none }\n@@ -106,7 +107,7 @@ impl util for moddoc {\n     }\n \n     fn enums() -> [enumdoc] {\n-        vec::filter_map(self.items) {|itemtag|\n+        vec::filter_map(*self.items) {|itemtag|\n             alt itemtag {\n               enumtag(enumdoc) { some(enumdoc) }\n               _ { none }\n@@ -115,7 +116,7 @@ impl util for moddoc {\n     }\n \n     fn resources() -> [resdoc] {\n-        vec::filter_map(self.items) {|itemtag|\n+        vec::filter_map(*self.items) {|itemtag|\n             alt itemtag {\n               restag(resdoc) { some(resdoc) }\n               _ { none }\n@@ -127,11 +128,11 @@ impl util for moddoc {\n impl util for itemtag {\n     fn name() -> str {\n         alt self {\n-          doc::modtag(~{name, _}) { name }\n-          doc::fntag(~{name, _}) { name }\n-          doc::consttag(~{name, _}) { name }\n-          doc::enumtag(~{name, _}) { name }\n-          doc::restag(~{name, _}) { name }\n+          doc::modtag({name, _}) { name }\n+          doc::fntag({name, _}) { name }\n+          doc::consttag({name, _}) { name }\n+          doc::enumtag({name, _}) { name }\n+          doc::restag({name, _}) { name }\n         }\n     }\n }"}, {"sha": "d992bc32cd535bbffa158f7a167d60020b7c8e58", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -20,7 +20,7 @@ fn extract(\n     crate: @ast::crate,\n     default_name: str\n ) -> doc::cratedoc {\n-    ~{\n+    {\n         topmod: top_moddoc_from_crate(crate, default_name),\n     }\n }\n@@ -37,13 +37,13 @@ fn moddoc_from_mod(\n     name: ast::ident,\n     id: ast::node_id\n ) -> doc::moddoc {\n-    ~{\n+    {\n         id: id,\n         name: name,\n         path: [],\n         brief: none,\n         desc: none,\n-        items: vec::filter_map(module.items) {|item|\n+        items: ~vec::filter_map(module.items) {|item|\n             alt item.node {\n               ast::item_mod(m) {\n                 some(doc::modtag(\n@@ -83,7 +83,7 @@ fn fndoc_from_fn(\n     name: ast::ident,\n     id: ast::node_id\n ) -> doc::fndoc {\n-    ~{\n+    {\n         id: id,\n         name: name,\n         brief: none,\n@@ -113,7 +113,7 @@ fn argdocs_from_args(args: [ast::arg]) -> [doc::argdoc] {\n }\n \n fn argdoc_from_arg(arg: ast::arg) -> doc::argdoc {\n-    ~{\n+    {\n         name: arg.ident,\n         desc: none,\n         ty: none\n@@ -124,7 +124,7 @@ fn constdoc_from_const(\n     name: ast::ident,\n     id: ast::node_id\n ) -> doc::constdoc {\n-    ~{\n+    {\n         id: id,\n         name: name,\n         brief: none,\n@@ -147,7 +147,7 @@ fn enumdoc_from_enum(\n     id: ast::node_id,\n     variants: [ast::variant]\n ) -> doc::enumdoc {\n-    ~{\n+    {\n         id: id,\n         name: name,\n         brief: none,\n@@ -163,7 +163,7 @@ fn variantdocs_from_variants(\n }\n \n fn variantdoc_from_variant(variant: ast::variant) -> doc::variantdoc {\n-    ~{\n+    {\n         name: variant.node.name,\n         desc: none,\n         sig: none\n@@ -192,7 +192,7 @@ fn resdoc_from_resource(\n     name: str,\n     id: ast::node_id\n ) -> doc::resdoc {\n-    ~{\n+    {\n         id: id,\n         name: name,\n         brief: none,"}, {"sha": "0516a753ff35524244acf5a71689e1eb3f64f6e6", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -69,7 +69,7 @@ fn default_seq_fold_crate<T>(\n     fold: fold<T>,\n     doc: doc::cratedoc\n ) -> doc::cratedoc {\n-    ~{\n+    {\n         topmod: fold.fold_mod(fold, doc.topmod)\n     }\n }\n@@ -78,8 +78,8 @@ fn default_seq_fold_mod<T>(\n     fold: fold<T>,\n     doc: doc::moddoc\n ) -> doc::moddoc {\n-    ~{\n-        items: vec::map(doc.items) {|itemtag|\n+    {\n+        items: ~vec::map(*doc.items) {|itemtag|\n             alt itemtag {\n               doc::modtag(moddoc) {\n                 doc::modtag(fold.fold_mod(fold, moddoc))\n@@ -98,7 +98,7 @@ fn default_seq_fold_mod<T>(\n               }\n             }\n         }\n-        with *doc\n+        with doc\n     }\n }\n "}, {"sha": "9ee9533af163032e454bcbff428368b288966a1a", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -130,7 +130,7 @@ fn write_mod_contents(\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n \n-    for itemtag in doc.items {\n+    for itemtag in *doc.items {\n         alt itemtag {\n           doc::modtag(moddoc) { write_mod(ctxt, moddoc) }\n           doc::fntag(fndoc) { write_fn(ctxt, fndoc) }\n@@ -203,15 +203,15 @@ fn should_insert_blank_line_after_fn_signature() {\n #[test]\n fn should_correctly_indent_fn_signature() {\n     let doc = test::create_doc(\"fn a() { }\");\n-    let doc = ~{\n-        topmod: ~{\n-            items: [doc::fntag(~{\n+    let doc = {\n+        topmod: {\n+            items: ~[doc::fntag({\n                 sig: some(\"line 1\\nline 2\")\n-                with *doc.topmod.fns()[0]\n+                with doc.topmod.fns()[0]\n             })]\n-            with *doc.topmod\n+            with doc.topmod\n         }\n-        with *doc\n+        with doc\n     };\n     let markdown = test::write_markdown_str(doc);\n     assert str::contains(markdown, \"    line 1\\n    line 2\");"}, {"sha": "0da88fbac42002a5d368a2b9e0d3d3bb4227a0b8", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -32,9 +32,9 @@ fn fold_mod(fold: fold::fold<ctxt>, doc: doc::moddoc) -> doc::moddoc {\n     if !is_topmod { vec::push(fold.ctxt.path, doc.name); }\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     if !is_topmod { vec::pop(fold.ctxt.path); }\n-    ~{\n+    {\n         path: fold.ctxt.path\n-        with *doc\n+        with doc\n     }\n }\n "}, {"sha": "41464592a7564120fc10843c2995b7184662f8b6", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -32,8 +32,8 @@ fn fold_mod(\n     fold: fold::fold<ctxt>,\n     doc: doc::moddoc\n ) -> doc::moddoc {\n-    let doc = ~{\n-        items: vec::filter_map(doc.items) {|itemtag|\n+    let doc = {\n+        items: ~vec::filter_map(*doc.items) {|itemtag|\n             alt itemtag {\n               doc::modtag(moddoc) {\n                 let doc = fold.fold_mod(fold, moddoc);\n@@ -78,12 +78,12 @@ fn fold_mod(\n               _ { some(itemtag) }\n             }\n         }\n-        with *fold::default_seq_fold_mod(fold, doc)\n+        with fold::default_seq_fold_mod(fold, doc)\n     };\n     fold.ctxt.have_docs =\n         doc.brief != none\n         || doc.desc != none\n-        || vec::is_not_empty(doc.items);\n+        || vec::is_not_empty(*doc.items);\n     ret doc;\n }\n \n@@ -92,7 +92,7 @@ fn fold_fn(\n     doc: doc::fndoc\n ) -> doc::fndoc {\n     let have_arg_docs = false;\n-    let doc = ~{\n+    let doc = {\n         args: vec::filter_map(doc.args) {|doc|\n             if option::is_some(doc.desc) {\n                 have_arg_docs = true;\n@@ -109,7 +109,7 @@ fn fold_fn(\n             }\n             with doc.return\n         }\n-        with *doc\n+        with doc\n     };\n \n     fold.ctxt.have_docs =\n@@ -221,15 +221,15 @@ fn should_elide_undocumented_consts() {\n }\n \n fn fold_enum(fold: fold::fold<ctxt>, doc: doc::enumdoc) -> doc::enumdoc {\n-    let doc = ~{\n+    let doc = {\n         variants: vec::filter_map(doc.variants) {|variant|\n             if variant.desc != none {\n                 some(variant)\n             } else {\n                 none\n             }\n         }\n-        with *fold::default_seq_fold_enum(fold, doc)\n+        with fold::default_seq_fold_enum(fold, doc)\n     };\n     fold.ctxt.have_docs =\n         doc.brief != none\n@@ -269,15 +269,15 @@ fn should_not_elide_enums_with_documented_variants() {\n }\n \n fn fold_res(fold: fold::fold<ctxt>, doc: doc::resdoc) -> doc::resdoc {\n-    let doc = ~{\n+    let doc = {\n         args: vec::filter_map(doc.args) {|arg|\n             if arg.desc != none {\n                 some(arg)\n             } else {\n                 none\n             }\n         }\n-        with *fold::default_seq_fold_res(fold, doc)\n+        with fold::default_seq_fold_res(fold, doc)\n     };\n     fold.ctxt.have_docs =\n         doc.brief != none"}, {"sha": "be999fc592c1806e9b92cf82dae95f6d12aa973f", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -20,9 +20,9 @@ fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n \n fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n-    ~{\n-        items: exported_items(fold.ctxt, doc)\n-        with *doc\n+    {\n+        items: ~exported_items(fold.ctxt, doc)\n+        with doc\n     }\n }\n \n@@ -66,13 +66,13 @@ fn exported_items_from(\n     doc: doc::moddoc,\n     is_exported: fn(astsrv::srv, str) -> bool\n ) -> [doc::itemtag] {\n-    vec::filter_map(doc.items) { |itemtag|\n+    vec::filter_map(*doc.items) { |itemtag|\n         let itemtag = alt itemtag {\n           doc::enumtag(enumdoc) {\n             // Also need to check variant exportedness\n-            doc::enumtag(~{\n+            doc::enumtag({\n                 variants: exported_variants_from(srv, enumdoc, is_exported)\n-                with *enumdoc\n+                with enumdoc\n             })\n           }\n           _ { itemtag }"}, {"sha": "d309bf56ab6a1a2a7e30cbc3ab84fdb3f8b095c0", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -44,29 +44,29 @@ fn test_run_passes() {\n         _srv: astsrv::srv,\n         doc: doc::cratedoc\n     ) -> doc::cratedoc {\n-        ~{\n-            topmod: ~{\n+        {\n+            topmod: {\n                 id: 0,\n                 name: doc.topmod.name + \"two\",\n                 path: [],\n                 brief: none,\n                 desc: none,\n-                items: []\n+                items: ~[]\n             }\n         }\n     }\n     fn pass2(\n         _srv: astsrv::srv,\n         doc: doc::cratedoc\n     ) -> doc::cratedoc {\n-        ~{\n-            topmod: ~{\n+        {\n+            topmod: {\n                 id: 0,\n                 name: doc.topmod.name + \"three\",\n                 path: [],\n                 brief: none,\n                 desc: none,\n-                items: []\n+                items: ~[]\n             }\n         }\n     }"}, {"sha": "01432869ea63993a1906e32f49925e7f90163340", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -29,9 +29,9 @@ fn fold_mod(\n     doc: doc::moddoc\n ) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n-    ~{\n-        items: sort::merge_sort(fold.ctxt, doc.items)\n-        with *doc\n+    {\n+        items: ~sort::merge_sort(fold.ctxt, *doc.items)\n+        with doc\n     }\n }\n "}, {"sha": "19b6d5c441b4c5bae9347c930d8789af85c006f8", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe745f1b5dd0d53c127b19608449506f91e94c21/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=fe745f1b5dd0d53c127b19608449506f91e94c21", "patch": "@@ -32,11 +32,11 @@ fn fold_fn(\n \n     let srv = fold.ctxt;\n \n-    ~{\n+    {\n         args: merge_arg_tys(srv, doc.id, doc.args),\n         return: merge_ret_ty(srv, doc.id, doc.return),\n         sig: get_fn_sig(srv, doc.id)\n-        with *doc\n+        with doc\n     }\n }\n \n@@ -122,9 +122,9 @@ fn merge_arg_tys(\n     vec::map2(args, tys) {|arg, ty|\n         // Sanity check that we're talking about the same args\n         assert arg.name == tuple::first(ty);\n-        ~{\n+        {\n             ty: some(tuple::second(ty))\n-            with *arg\n+            with arg\n         }\n     }\n }\n@@ -163,7 +163,7 @@ fn fold_const(\n ) -> doc::constdoc {\n     let srv = fold.ctxt;\n \n-    ~{\n+    {\n         ty: some(astsrv::exec(srv) {|ctxt|\n             alt ctxt.ast_map.get(doc.id) {\n               ast_map::node_item(@{\n@@ -173,7 +173,7 @@ fn fold_const(\n               }\n             }\n         })\n-        with *doc\n+        with doc\n     }\n }\n \n@@ -192,7 +192,7 @@ fn fold_enum(\n ) -> doc::enumdoc {\n     let srv = fold.ctxt;\n \n-    ~{\n+    {\n         variants: vec::map(doc.variants) {|variant|\n             let sig = astsrv::exec(srv) {|ctxt|\n                 alt ctxt.ast_map.get(doc.id) {\n@@ -209,12 +209,12 @@ fn fold_enum(\n                 }\n             };\n \n-            ~{\n+            {\n                 sig: some(sig)\n-                with *variant\n+                with variant\n             }\n         }\n-        with *doc\n+        with doc\n     }\n }\n \n@@ -233,7 +233,7 @@ fn fold_res(\n ) -> doc::resdoc {\n     let srv = fold.ctxt;\n \n-    ~{\n+    {\n         args: merge_arg_tys(srv, doc.id, doc.args),\n         sig: some(astsrv::exec(srv) {|ctxt|\n             alt ctxt.ast_map.get(doc.id) {\n@@ -244,7 +244,7 @@ fn fold_res(\n               }\n             }\n         })\n-        with *doc\n+        with doc\n     }\n }\n "}]}