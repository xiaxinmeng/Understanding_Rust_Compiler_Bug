{"sha": "2389cf96dd07d8c94da349b10f6f2b750707dfd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODljZjk2ZGQwN2Q4Yzk0ZGEzNDliMTBmNmYyYjc1MDcwN2RmZDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-11T08:01:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-11T08:01:00Z"}, "message": "G: Never type", "tree": {"sha": "169041219a8b2ba592db7820dcfe988bf362b93b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169041219a8b2ba592db7820dcfe988bf362b93b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2389cf96dd07d8c94da349b10f6f2b750707dfd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2389cf96dd07d8c94da349b10f6f2b750707dfd9", "html_url": "https://github.com/rust-lang/rust/commit/2389cf96dd07d8c94da349b10f6f2b750707dfd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2389cf96dd07d8c94da349b10f6f2b750707dfd9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19d038a0e1d9af8270450c5fe8fbbdf0f15cb24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19d038a0e1d9af8270450c5fe8fbbdf0f15cb24", "html_url": "https://github.com/rust-lang/rust/commit/e19d038a0e1d9af8270450c5fe8fbbdf0f15cb24"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "d6c3753b32059c1cdd0b1e9808b258a4dc69fabb", "filename": "src/parser/grammar/items/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Fitems%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Fitems%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fconsts.rs?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -14,7 +14,7 @@ fn const_or_static(p: &mut Parser, kw: SyntaxKind) {\n     p.eat(MUT_KW); // TODO: validator to forbid const mut\n     name(p);\n     p.expect(COLON);\n-    types::ty(p);\n+    types::type_(p);\n     p.expect(EQ);\n     expressions::expr(p);\n     p.expect(SEMI);"}, {"sha": "b1edf2f2207619ddbe5e0ef0587765aab4febce3", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -247,7 +247,7 @@ fn type_item(p: &mut Parser) {\n     type_params::where_clause(p);\n \n     p.expect(EQ);\n-    types::ty(p);\n+    types::type_(p);\n     p.expect(SEMI);\n }\n "}, {"sha": "c72b50808cfca21df951c5a6a438bfb1394bf8b2", "filename": "src/parser/grammar/items/structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fstructs.rs?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -89,7 +89,7 @@ fn named_fields(p: &mut Parser) {\n         if p.at(IDENT) {\n             name(p);\n             p.expect(COLON);\n-            types::ty(p);\n+            types::type_(p);\n             field.complete(p, NAMED_FIELD);\n         } else {\n             field.abandon(p);\n@@ -105,7 +105,7 @@ fn pos_fields(p: &mut Parser) {\n     while !p.at(R_PAREN) && !p.at(EOF) {\n         let pos_field = p.start();\n         visibility(p);\n-        types::ty(p);\n+        types::type_(p);\n         pos_field.complete(p, POS_FIELD);\n \n         if !p.at(R_PAREN) {"}, {"sha": "9ea08a55ca034d64d74cb036d3d613ffd6fd20d8", "filename": "src/parser/grammar/type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_params.rs?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -62,7 +62,7 @@ pub(super) fn list(p: &mut Parser) {\n             }\n         }\n         if p.at(EQ) {\n-            types::ty(p)\n+            types::type_(p)\n         }\n         m.complete(p, TYPE_PARAM);\n     }"}, {"sha": "2ae583bd124816dc0a060fdccf6418bbdb7b3e12", "filename": "src/parser/grammar/types.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/src%2Fparser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftypes.rs?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -1,24 +1,25 @@\n use super::*;\n \n-pub(super) fn ty(p: &mut Parser) {\n+pub(super) fn type_(p: &mut Parser) {\n     match p.current() {\n-        L_PAREN => paren_or_tuple_ty(p),\n+        L_PAREN => paren_or_tuple_type(p),\n+        EXCL => never_type(p),\n         IDENT => path_type(p),\n         _ => {\n             p.error(\"expected type\");\n         }\n     }\n }\n \n-fn paren_or_tuple_ty(p: &mut Parser) {\n+fn paren_or_tuple_type(p: &mut Parser) {\n     assert!(p.at(L_PAREN));\n     let m = p.start();\n     p.bump();\n     let mut n_types: u32 = 0;\n     let mut trailing_comma: bool = false;\n     while !p.at(EOF) && !p.at(R_PAREN) {\n         n_types += 1;\n-        ty(p);\n+        type_(p);\n         if p.eat(COMMA) {\n             trailing_comma = true;\n         } else {\n@@ -43,6 +44,15 @@ fn paren_or_tuple_ty(p: &mut Parser) {\n     m.complete(p, kind);\n }\n \n+// test never_type\n+// type Never = !;\n+fn never_type(p: &mut Parser) {\n+    assert!(p.at(EXCL));\n+    let m = p.start();\n+    p.bump();\n+    m.complete(p, NEVER_TYPE);\n+}\n+\n fn path_type(p: &mut Parser) {\n     assert!(p.at(IDENT));\n     let m = p.start();"}, {"sha": "de399fcf4a21b09526c873b836728e74f9a57f7f", "filename": "tests/data/parser/inline/0020_never_type.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.rs?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -0,0 +1 @@\n+type Never = !;"}, {"sha": "935f3345912820621d4e74d4b5376a466e82d016", "filename": "tests/data/parser/inline/0020_never_type.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2389cf96dd07d8c94da349b10f6f2b750707dfd9/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2389cf96dd07d8c94da349b10f6f2b750707dfd9/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0020_never_type.txt?ref=2389cf96dd07d8c94da349b10f6f2b750707dfd9", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 16)\n+  TYPE_ITEM@[0; 16)\n+    TYPE_KW@[0; 4)\n+    NAME@[4; 11)\n+      WHITESPACE@[4; 5)\n+      IDENT@[5; 10) \"Never\"\n+      WHITESPACE@[10; 11)\n+    EQ@[11; 12)\n+    NEVER_TYPE@[12; 14)\n+      WHITESPACE@[12; 13)\n+      EXCL@[13; 14)\n+    SEMI@[14; 15)\n+    WHITESPACE@[15; 16)"}]}