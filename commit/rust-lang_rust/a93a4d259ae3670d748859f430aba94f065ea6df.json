{"sha": "a93a4d259ae3670d748859f430aba94f065ea6df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5M2E0ZDI1OWFlMzY3MGQ3NDg4NTlmNDMwYWJhOTRmMDY1ZWE2ZGY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-03-27T19:27:45Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-03-27T19:27:45Z"}, "message": "Enable target_feature on any LLVM 6+\n\nIn `LLVMRustHasFeature()`, rather than using `MCInfo->getFeatureTable()`\nthat is specific to Rust's LLVM fork, we can use this in LLVM 6:\n\n    /// Check whether the subtarget features are enabled/disabled as per\n    /// the provided string, ignoring all other features.\n    bool checkFeatures(StringRef FS) const;\n\nNow rustc using external LLVM can also have `target_feature`.", "tree": {"sha": "255366011c8f4b7d758b6adadb9724190926658d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255366011c8f4b7d758b6adadb9724190926658d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93a4d259ae3670d748859f430aba94f065ea6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93a4d259ae3670d748859f430aba94f065ea6df", "html_url": "https://github.com/rust-lang/rust/commit/a93a4d259ae3670d748859f430aba94f065ea6df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93a4d259ae3670d748859f430aba94f065ea6df/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9424de51da41fd3d1077ac7810276f8dc746fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9424de51da41fd3d1077ac7810276f8dc746fa", "html_url": "https://github.com/rust-lang/rust/commit/9c9424de51da41fd3d1077ac7810276f8dc746fa"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "382ef2cc407dd93ba704457c5fee7a58073fde86", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a93a4d259ae3670d748859f430aba94f065ea6df/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a93a4d259ae3670d748859f430aba94f065ea6df/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=a93a4d259ae3670d748859f430aba94f065ea6df", "patch": "@@ -205,17 +205,13 @@ GEN_SUBTARGETS\n \n extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n                                    const char *Feature) {\n-#if LLVM_RUSTLLVM\n+#if LLVM_VERSION_GE(6, 0)\n   TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n-  const FeatureBitset &Bits = MCInfo->getFeatureBits();\n-  const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n-\n-  for (auto &FeatureEntry : FeatTable)\n-    if (!strcmp(FeatureEntry.Key, Feature))\n-      return (Bits & FeatureEntry.Value) == FeatureEntry.Value;\n-#endif\n+  return MCInfo->checkFeatures(std::string(\"+\") + Feature);\n+#else\n   return false;\n+#endif\n }\n \n enum class LLVMRustCodeModel {"}, {"sha": "b1d7e5435c4cb9b33d905aa3b78cb234a6c7a38b", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93a4d259ae3670d748859f430aba94f065ea6df/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93a4d259ae3670d748859f430aba94f065ea6df/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=a93a4d259ae3670d748859f430aba94f065ea6df", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-system-llvm -- needs MCSubtargetInfo::getFeatureTable()\n+// min-llvm-version 6.0\n+// ^ needs MCSubtargetInfo::checkFeatures()\n // ignore-cloudabi no std::env\n \n #![feature(cfg_target_feature)]\n@@ -29,4 +30,7 @@ fn main() {\n         assert!(cfg!(target_feature = \"sse2\"),\n                 \"SSE2 was not detected as available on an x86 platform\");\n     }\n+    // check a negative case too -- whitelisted on x86, but not enabled by default\n+    assert!(cfg!(not(target_feature = \"avx2\")),\n+            \"AVX2 shouldn't be detected as available by default on any platform\");\n }"}]}