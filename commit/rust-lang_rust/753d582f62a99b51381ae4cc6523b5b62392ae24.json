{"sha": "753d582f62a99b51381ae4cc6523b5b62392ae24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2Q1ODJmNjJhOTliNTEzODFhZTRjYzY1MjNiNWI2MjM5MmFlMjQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-10-28T13:52:41Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:43:56Z"}, "message": "rustc: rename CachedLayout to LayoutDetails.", "tree": {"sha": "7bfe063e4f21b3a005b876217a82e16760fb57cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfe063e4f21b3a005b876217a82e16760fb57cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753d582f62a99b51381ae4cc6523b5b62392ae24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753d582f62a99b51381ae4cc6523b5b62392ae24", "html_url": "https://github.com/rust-lang/rust/commit/753d582f62a99b51381ae4cc6523b5b62392ae24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753d582f62a99b51381ae4cc6523b5b62392ae24/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8437d7c0f13a1ebb4cb14d7174b11b44a1a45695", "url": "https://api.github.com/repos/rust-lang/rust/commits/8437d7c0f13a1ebb4cb14d7174b11b44a1a45695", "html_url": "https://github.com/rust-lang/rust/commit/8437d7c0f13a1ebb4cb14d7174b11b44a1a45695"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "904f9a091252255c2c339cdcd07a146db214eebc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/753d582f62a99b51381ae4cc6523b5b62392ae24/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d582f62a99b51381ae4cc6523b5b62392ae24/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=753d582f62a99b51381ae4cc6523b5b62392ae24", "patch": "@@ -41,7 +41,7 @@ use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predic\n use ty::RegionKind;\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n use ty::TypeVariants::*;\n-use ty::layout::{CachedLayout, TargetDataLayout};\n+use ty::layout::{LayoutDetails, TargetDataLayout};\n use ty::maps;\n use ty::steal::Steal;\n use ty::BindingMode;\n@@ -78,7 +78,7 @@ use hir;\n /// Internal storage\n pub struct GlobalArenas<'tcx> {\n     // internings\n-    layout: TypedArena<CachedLayout>,\n+    layout: TypedArena<LayoutDetails>,\n \n     // references\n     generics: TypedArena<ty::Generics>,\n@@ -918,7 +918,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     stability_interner: RefCell<FxHashSet<&'tcx attr::Stability>>,\n \n-    layout_interner: RefCell<FxHashSet<&'tcx CachedLayout>>,\n+    layout_interner: RefCell<FxHashSet<&'tcx LayoutDetails>>,\n \n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n@@ -1016,7 +1016,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         interned\n     }\n \n-    pub fn intern_layout(self, layout: CachedLayout) -> &'gcx CachedLayout {\n+    pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n         if let Some(layout) = self.layout_interner.borrow().get(&layout) {\n             return layout;\n         }"}, {"sha": "28036d90217a799431e29d163ba1152ff386c49c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/753d582f62a99b51381ae4cc6523b5b62392ae24/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d582f62a99b51381ae4cc6523b5b62392ae24/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=753d582f62a99b51381ae4cc6523b5b62392ae24", "patch": "@@ -802,7 +802,7 @@ pub enum Variants {\n     /// at a non-0 offset, after where the discriminant would go.\n     Tagged {\n         discr: Scalar,\n-        variants: Vec<CachedLayout>,\n+        variants: Vec<LayoutDetails>,\n     },\n \n     /// Multiple cases distinguished by a niche (values invalid for a type):\n@@ -818,7 +818,7 @@ pub enum Variants {\n         niche_variants: RangeInclusive<usize>,\n         niche: Scalar,\n         niche_start: u128,\n-        variants: Vec<CachedLayout>,\n+        variants: Vec<LayoutDetails>,\n     }\n }\n \n@@ -842,7 +842,7 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n }\n \n #[derive(PartialEq, Eq, Hash, Debug)]\n-pub struct CachedLayout {\n+pub struct LayoutDetails {\n     pub variants: Variants,\n     pub fields: FieldPlacement,\n     pub abi: Abi,\n@@ -851,11 +851,11 @@ pub struct CachedLayout {\n     pub size: Size\n }\n \n-impl CachedLayout {\n+impl LayoutDetails {\n     fn scalar<C: HasDataLayout>(cx: C, scalar: Scalar) -> Self {\n         let size = scalar.value.size(cx);\n         let align = scalar.value.align(cx);\n-        CachedLayout {\n+        LayoutDetails {\n             variants: Variants::Single { index: 0 },\n             fields: FieldPlacement::Union(0),\n             abi: Abi::Scalar(scalar),\n@@ -867,7 +867,7 @@ impl CachedLayout {\n \n     fn uninhabited(field_count: usize) -> Self {\n         let align = Align::from_bytes(1, 1).unwrap();\n-        CachedLayout {\n+        LayoutDetails {\n             variants: Variants::Single { index: 0 },\n             fields: FieldPlacement::Union(field_count),\n             abi: Abi::Uninhabited,\n@@ -880,7 +880,7 @@ impl CachedLayout {\n \n fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n-                        -> Result<&'tcx CachedLayout, LayoutError<'tcx>>\n+                        -> Result<&'tcx LayoutDetails, LayoutError<'tcx>>\n {\n     let (param_env, ty) = query.into_parts();\n \n@@ -892,7 +892,7 @@ fn layout_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     tcx.layout_depth.set(depth+1);\n-    let layout = CachedLayout::compute_uncached(tcx, param_env, ty);\n+    let layout = LayoutDetails::compute_uncached(tcx, param_env, ty);\n     tcx.layout_depth.set(depth);\n \n     layout\n@@ -905,7 +905,7 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n     };\n }\n \n-impl<'a, 'tcx> CachedLayout {\n+impl<'a, 'tcx> LayoutDetails {\n     fn compute_uncached(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         param_env: ty::ParamEnv<'tcx>,\n                         ty: Ty<'tcx>)\n@@ -921,13 +921,13 @@ impl<'a, 'tcx> CachedLayout {\n             }\n         };\n         let scalar = |value: Primitive| {\n-            tcx.intern_layout(CachedLayout::scalar(cx, scalar_unit(value)))\n+            tcx.intern_layout(LayoutDetails::scalar(cx, scalar_unit(value)))\n         };\n         let scalar_pair = |a: Scalar, b: Scalar| {\n             let align = a.value.align(dl).max(b.value.align(dl)).max(dl.aggregate_align);\n             let b_offset = a.value.size(dl).abi_align(b.value.align(dl));\n             let size = (b_offset + b.value.size(dl)).abi_align(align);\n-            CachedLayout {\n+            LayoutDetails {\n                 variants: Variants::Single { index: 0 },\n                 fields: FieldPlacement::Arbitrary {\n                     offsets: vec![Size::from_bytes(0), b_offset],\n@@ -1024,7 +1024,7 @@ impl<'a, 'tcx> CachedLayout {\n                 }\n \n                 if field.abi == Abi::Uninhabited {\n-                    return Ok(CachedLayout::uninhabited(fields.len()));\n+                    return Ok(LayoutDetails::uninhabited(fields.len()));\n                 }\n \n                 if field.is_unsized() {\n@@ -1110,9 +1110,9 @@ impl<'a, 'tcx> CachedLayout {\n \n                         // Two non-ZST fields, and they're both scalars.\n                         (Some((i, &TyLayout {\n-                            cached: &CachedLayout { abi: Abi::Scalar(ref a), .. }, ..\n+                            details: &LayoutDetails { abi: Abi::Scalar(ref a), .. }, ..\n                         })), Some((j, &TyLayout {\n-                            cached: &CachedLayout { abi: Abi::Scalar(ref b), .. }, ..\n+                            details: &LayoutDetails { abi: Abi::Scalar(ref b), .. }, ..\n                         })), None) => {\n                             // Order by the memory placement, not source order.\n                             let ((i, a), (j, b)) = if offsets[i] < offsets[j] {\n@@ -1147,7 +1147,7 @@ impl<'a, 'tcx> CachedLayout {\n                 }\n             }\n \n-            Ok(CachedLayout {\n+            Ok(LayoutDetails {\n                 variants: Variants::Single { index: 0 },\n                 fields: FieldPlacement::Arbitrary {\n                     offsets,\n@@ -1167,13 +1167,13 @@ impl<'a, 'tcx> CachedLayout {\n         Ok(match ty.sty {\n             // Basic scalars.\n             ty::TyBool => {\n-                tcx.intern_layout(CachedLayout::scalar(cx, Scalar {\n+                tcx.intern_layout(LayoutDetails::scalar(cx, Scalar {\n                     value: Int(I8, false),\n                     valid_range: 0..=1\n                 }))\n             }\n             ty::TyChar => {\n-                tcx.intern_layout(CachedLayout::scalar(cx, Scalar {\n+                tcx.intern_layout(LayoutDetails::scalar(cx, Scalar {\n                     value: Int(I32, false),\n                     valid_range: 0..=0x10FFFF\n                 }))\n@@ -1189,12 +1189,12 @@ impl<'a, 'tcx> CachedLayout {\n             ty::TyFnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n                 ptr.valid_range.start = 1;\n-                tcx.intern_layout(CachedLayout::scalar(cx, ptr))\n+                tcx.intern_layout(LayoutDetails::scalar(cx, ptr))\n             }\n \n             // The never type.\n             ty::TyNever => {\n-                tcx.intern_layout(CachedLayout::uninhabited(0))\n+                tcx.intern_layout(LayoutDetails::uninhabited(0))\n             }\n \n             // Potentially-fat pointers.\n@@ -1207,13 +1207,13 @@ impl<'a, 'tcx> CachedLayout {\n \n                 let pointee = tcx.normalize_associated_type_in_env(&pointee, param_env);\n                 if pointee.is_sized(tcx, param_env, DUMMY_SP) {\n-                    return Ok(tcx.intern_layout(CachedLayout::scalar(cx, data_ptr)));\n+                    return Ok(tcx.intern_layout(LayoutDetails::scalar(cx, data_ptr)));\n                 }\n \n                 let unsized_part = tcx.struct_tail(pointee);\n                 let metadata = match unsized_part.sty {\n                     ty::TyForeign(..) => {\n-                        return Ok(tcx.intern_layout(CachedLayout::scalar(cx, data_ptr)));\n+                        return Ok(tcx.intern_layout(LayoutDetails::scalar(cx, data_ptr)));\n                     }\n                     ty::TySlice(_) | ty::TyStr => {\n                         scalar_unit(Int(dl.ptr_sized_integer(), false))\n@@ -1244,7 +1244,7 @@ impl<'a, 'tcx> CachedLayout {\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n \n-                tcx.intern_layout(CachedLayout {\n+                tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: 0 },\n                     fields: FieldPlacement::Array {\n                         stride: element.size,\n@@ -1261,7 +1261,7 @@ impl<'a, 'tcx> CachedLayout {\n             }\n             ty::TySlice(element) => {\n                 let element = cx.layout_of(element)?;\n-                tcx.intern_layout(CachedLayout {\n+                tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: 0 },\n                     fields: FieldPlacement::Array {\n                         stride: element.size,\n@@ -1277,7 +1277,7 @@ impl<'a, 'tcx> CachedLayout {\n                 })\n             }\n             ty::TyStr => {\n-                tcx.intern_layout(CachedLayout {\n+                tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: 0 },\n                     fields: FieldPlacement::Array {\n                         stride: Size::from_bytes(1),\n@@ -1350,7 +1350,7 @@ impl<'a, 'tcx> CachedLayout {\n                 let align = dl.vector_align(size);\n                 let size = size.abi_align(align);\n \n-                tcx.intern_layout(CachedLayout {\n+                tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Single { index: 0 },\n                     fields: FieldPlacement::Array {\n                         stride: element.size,\n@@ -1380,7 +1380,7 @@ impl<'a, 'tcx> CachedLayout {\n                 };\n                 if inh_first.is_none() {\n                     // Uninhabited because it has no variants, or only uninhabited ones.\n-                    return Ok(tcx.intern_layout(CachedLayout::uninhabited(0)));\n+                    return Ok(tcx.intern_layout(LayoutDetails::uninhabited(0)));\n                 }\n \n                 if def.is_union() {\n@@ -1414,7 +1414,7 @@ impl<'a, 'tcx> CachedLayout {\n                         size = cmp::max(size, field.size);\n                     }\n \n-                    return Ok(tcx.intern_layout(CachedLayout {\n+                    return Ok(tcx.intern_layout(LayoutDetails {\n                         variants: Variants::Single { index: 0 },\n                         fields: FieldPlacement::Union(variants[0].len()),\n                         abi: Abi::Aggregate {\n@@ -1519,7 +1519,7 @@ impl<'a, 'tcx> CachedLayout {\n                             }).collect::<Result<Vec<_>, _>>()?;\n \n                             let offset = st[i].fields.offset(field_index) + offset;\n-                            let CachedLayout {\n+                            let LayoutDetails {\n                                 size,\n                                 mut align,\n                                 mut primitive_align,\n@@ -1543,7 +1543,7 @@ impl<'a, 'tcx> CachedLayout {\n                             align = align.max(niche_align);\n                             primitive_align = primitive_align.max(niche_align);\n \n-                            return Ok(tcx.intern_layout(CachedLayout {\n+                            return Ok(tcx.intern_layout(LayoutDetails {\n                                 variants: Variants::NicheFilling {\n                                     dataful_variant: i,\n                                     niche_variants,\n@@ -1681,7 +1681,7 @@ impl<'a, 'tcx> CachedLayout {\n                         packed: false\n                     }\n                 };\n-                tcx.intern_layout(CachedLayout {\n+                tcx.intern_layout(LayoutDetails {\n                     variants: Variants::Tagged {\n                         discr,\n                         variants\n@@ -1709,7 +1709,7 @@ impl<'a, 'tcx> CachedLayout {\n                 return Err(LayoutError::Unknown(ty));\n             }\n             ty::TyInfer(_) | ty::TyError => {\n-                bug!(\"CachedLayout::compute: unexpected type `{}`\", ty)\n+                bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n         })\n     }\n@@ -2005,13 +2005,13 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n #[derive(Copy, Clone, Debug)]\n pub struct TyLayout<'tcx> {\n     pub ty: Ty<'tcx>,\n-    cached: &'tcx CachedLayout\n+    details: &'tcx LayoutDetails\n }\n \n impl<'tcx> Deref for TyLayout<'tcx> {\n-    type Target = &'tcx CachedLayout;\n-    fn deref(&self) -> &&'tcx CachedLayout {\n-        &self.cached\n+    type Target = &'tcx LayoutDetails;\n+    fn deref(&self) -> &&'tcx LayoutDetails {\n+        &self.details\n     }\n }\n \n@@ -2082,10 +2082,10 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for (TyCtxt<'a, 'tcx, 'tcx>, ty::ParamEnv<'tcx\n         let (tcx, param_env) = self;\n \n         let ty = tcx.normalize_associated_type_in_env(&ty, param_env.reveal_all());\n-        let cached = tcx.layout_raw(param_env.reveal_all().and(ty))?;\n+        let details = tcx.layout_raw(param_env.reveal_all().and(ty))?;\n         let layout = TyLayout {\n             ty,\n-            cached\n+            details\n         };\n \n         // NB: This recording is normally disabled; when enabled, it\n@@ -2094,7 +2094,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for (TyCtxt<'a, 'tcx, 'tcx>, ty::ParamEnv<'tcx\n         // completed, to avoid problems around recursive structures\n         // and the like. (Admitedly, I wasn't able to reproduce a problem\n         // here, but it seems like the right thing to do. -nmatsakis)\n-        CachedLayout::record_layout_for_printing(tcx, ty, param_env, layout);\n+        LayoutDetails::record_layout_for_printing(tcx, ty, param_env, layout);\n \n         Ok(layout)\n     }\n@@ -2111,10 +2111,10 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for (ty::maps::TyCtxtAt<'a, 'tcx, 'tcx>,\n         let (tcx_at, param_env) = self;\n \n         let ty = tcx_at.tcx.normalize_associated_type_in_env(&ty, param_env.reveal_all());\n-        let cached = tcx_at.layout_raw(param_env.reveal_all().and(ty))?;\n+        let details = tcx_at.layout_raw(param_env.reveal_all().and(ty))?;\n         let layout = TyLayout {\n             ty,\n-            cached\n+            details\n         };\n \n         // NB: This recording is normally disabled; when enabled, it\n@@ -2123,7 +2123,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for (ty::maps::TyCtxtAt<'a, 'tcx, 'tcx>,\n         // completed, to avoid problems around recursive structures\n         // and the like. (Admitedly, I wasn't able to reproduce a problem\n         // here, but it seems like the right thing to do. -nmatsakis)\n-        CachedLayout::record_layout_for_printing(tcx_at.tcx, ty, param_env, layout);\n+        LayoutDetails::record_layout_for_printing(tcx_at.tcx, ty, param_env, layout);\n \n         Ok(layout)\n     }\n@@ -2134,8 +2134,8 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n         where C: LayoutOf<Ty<'tcx>> + HasTyCtxt<'tcx>,\n               C::TyLayout: MaybeResult<TyLayout<'tcx>>\n     {\n-        let cached = match self.variants {\n-            Variants::Single { index } if index == variant_index => self.cached,\n+        let details = match self.variants {\n+            Variants::Single { index } if index == variant_index => self.details,\n \n             Variants::Single { index } => {\n                 // Deny calling for_variant more than once for non-Single enums.\n@@ -2148,9 +2148,9 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                     ty::TyAdt(def, _) => def.variants[variant_index].fields.len(),\n                     _ => bug!()\n                 };\n-                let mut cached = CachedLayout::uninhabited(fields);\n-                cached.variants = Variants::Single { index: variant_index };\n-                cx.tcx().intern_layout(cached)\n+                let mut details = LayoutDetails::uninhabited(fields);\n+                details.variants = Variants::Single { index: variant_index };\n+                cx.tcx().intern_layout(details)\n             }\n \n             Variants::NicheFilling { ref variants, .. } |\n@@ -2159,11 +2159,11 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             }\n         };\n \n-        assert_eq!(cached.variants, Variants::Single { index: variant_index });\n+        assert_eq!(details.variants, Variants::Single { index: variant_index });\n \n         TyLayout {\n             ty: self.ty,\n-            cached\n+            details\n         }\n     }\n \n@@ -2252,9 +2252,9 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n                     Variants::Tagged { ref discr, .. } |\n                     Variants::NicheFilling { niche: ref discr, .. } => {\n                         assert_eq!(i, 0);\n-                        let layout = CachedLayout::scalar(tcx, discr.clone());\n+                        let layout = LayoutDetails::scalar(tcx, discr.clone());\n                         return MaybeResult::from_ok(TyLayout {\n-                            cached: tcx.intern_layout(layout),\n+                            details: tcx.intern_layout(layout),\n                             ty: discr.value.to_ty(tcx)\n                         });\n                     }\n@@ -2460,7 +2460,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Scalar {\n     }\n }\n \n-impl_stable_hash_for!(struct ::ty::layout::CachedLayout {\n+impl_stable_hash_for!(struct ::ty::layout::LayoutDetails {\n     variants,\n     fields,\n     abi,"}, {"sha": "2f648e8d3ff82c68e612278ec1c303b7c79e7a96", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753d582f62a99b51381ae4cc6523b5b62392ae24/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753d582f62a99b51381ae4cc6523b5b62392ae24/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=753d582f62a99b51381ae4cc6523b5b62392ae24", "patch": "@@ -264,7 +264,7 @@ define_maps! { <'tcx>\n     [] fn is_freeze_raw: is_freeze_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n     [] fn needs_drop_raw: needs_drop_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool,\n     [] fn layout_raw: layout_dep_node(ty::ParamEnvAnd<'tcx, Ty<'tcx>>)\n-                                  -> Result<&'tcx ty::layout::CachedLayout,\n+                                  -> Result<&'tcx ty::layout::LayoutDetails,\n                                             ty::layout::LayoutError<'tcx>>,\n \n     [] fn dylib_dependency_formats: DylibDepFormats(CrateNum)"}]}