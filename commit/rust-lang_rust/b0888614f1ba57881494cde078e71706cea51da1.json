{"sha": "b0888614f1ba57881494cde078e71706cea51da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODg4NjE0ZjFiYTU3ODgxNDk0Y2RlMDc4ZTcxNzA2Y2VhNTFkYTE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-27T12:59:38Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-10T14:33:00Z"}, "message": "Implement Mutation- and BorrowOfLayoutConstrainedField in thir-unsafeck", "tree": {"sha": "5e958109c6ad885aaef6c98737cbbd12d9252b70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e958109c6ad885aaef6c98737cbbd12d9252b70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0888614f1ba57881494cde078e71706cea51da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0888614f1ba57881494cde078e71706cea51da1", "html_url": "https://github.com/rust-lang/rust/commit/b0888614f1ba57881494cde078e71706cea51da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0888614f1ba57881494cde078e71706cea51da1/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84d1b21aea9863f0fc5f436b4982d145dade646", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84d1b21aea9863f0fc5f436b4982d145dade646", "html_url": "https://github.com/rust-lang/rust/commit/a84d1b21aea9863f0fc5f436b4982d145dade646"}], "stats": {"total": 571, "additions": 512, "deletions": 59}, "files": [{"sha": "7c1a592f5515efbc2d0a948e8bd3428d88a908c6", "filename": "compiler/rustc_mir_build/src/build/expr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fmod.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -65,6 +65,6 @@ mod as_operand;\n pub mod as_place;\n mod as_rvalue;\n mod as_temp;\n-mod category;\n+pub mod category;\n mod into;\n mod stmt;"}, {"sha": "60cfd73b19a6e8b5b04c5e64574d197aedee7cf2", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1131,3 +1131,5 @@ mod expr;\n mod matches;\n mod misc;\n mod scope;\n+\n+pub(crate) use expr::category::Category as ExprCategory;"}, {"sha": "9c610b88dbb5ba680158df5a3aefb06bcd61fce2", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 150, "deletions": 47, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,9 +1,11 @@\n+use crate::build::ExprCategory;\n use crate::thir::visit::{self, Visitor};\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_middle::mir::BorrowKind;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnv, TyCtxt};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -28,6 +30,8 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     is_const: bool,\n     in_possible_lhs_union_assign: bool,\n     in_union_destructure: bool,\n+    param_env: ParamEnv<'tcx>,\n+    inside_adt: bool,\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n@@ -134,6 +138,50 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n     }\n }\n \n+// Searches for accesses to layout constrained fields.\n+struct LayoutConstrainedPlaceVisitor<'a, 'tcx> {\n+    found: bool,\n+    thir: &'a Thir<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'a, 'tcx> LayoutConstrainedPlaceVisitor<'a, 'tcx> {\n+    fn new(thir: &'a Thir<'tcx>, tcx: TyCtxt<'tcx>) -> Self {\n+        Self { found: false, thir, tcx }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'a, 'tcx> for LayoutConstrainedPlaceVisitor<'a, 'tcx> {\n+    fn thir(&self) -> &'a Thir<'tcx> {\n+        self.thir\n+    }\n+\n+    fn visit_expr(&mut self, expr: &Expr<'tcx>) {\n+        match expr.kind {\n+            ExprKind::Field { lhs, .. } => {\n+                if let ty::Adt(adt_def, _) = self.thir[lhs].ty.kind() {\n+                    if (Bound::Unbounded, Bound::Unbounded)\n+                        != self.tcx.layout_scalar_valid_range(adt_def.did)\n+                    {\n+                        self.found = true;\n+                    }\n+                }\n+                visit::walk_expr(self, expr);\n+            }\n+\n+            // Keep walking through the expression as long as we stay in the same\n+            // place, i.e. the expression is a place expression and not a dereference\n+            // (since dereferencing something leads us to a different place).\n+            ExprKind::Deref { .. } => {}\n+            ref kind if ExprCategory::of(kind).map_or(true, |cat| cat == ExprCategory::Place) => {\n+                visit::walk_expr(self, expr);\n+            }\n+\n+            _ => {}\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n     fn thir(&self) -> &'a Thir<'tcx> {\n         &self.thir\n@@ -161,60 +209,82 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_pat(&mut self, pat: &Pat<'tcx>) {\n-        use PatKind::*;\n-\n         if self.in_union_destructure {\n             match *pat.kind {\n                 // binding to a variable allows getting stuff out of variable\n-                Binding { .. }\n+                PatKind::Binding { .. }\n                 // match is conditional on having this value\n-                | Constant { .. }\n-                | Variant { .. }\n-                | Leaf { .. }\n-                | Deref { .. }\n-                | Range { .. }\n-                | Slice { .. }\n-                | Array { .. } => {\n+                | PatKind::Constant { .. }\n+                | PatKind::Variant { .. }\n+                | PatKind::Leaf { .. }\n+                | PatKind::Deref { .. }\n+                | PatKind::Range { .. }\n+                | PatKind::Slice { .. }\n+                | PatKind::Array { .. } => {\n                     self.requires_unsafe(pat.span, AccessToUnionField);\n-                    return; // don't walk pattern\n+                    return; // we can return here since this already requires unsafe\n                 }\n                 // wildcard doesn't take anything\n-                Wild |\n+                PatKind::Wild |\n                 // these just wrap other patterns\n-                Or { .. } |\n-                AscribeUserType { .. } => {}\n+                PatKind::Or { .. } |\n+                PatKind::AscribeUserType { .. } => {}\n             }\n         };\n \n-        if let ty::Adt(adt_def, _) = pat.ty.kind() {\n-            // check for extracting values from union via destructuring\n-            if adt_def.is_union() {\n-                match *pat.kind {\n-                    // assigning the whole union is okay\n-                    // let x = Union { ... };\n-                    // let y = x; // safe\n-                    Binding { .. } |\n-                    // binding to wildcard is okay since that never reads anything and stops double errors\n-                    // with implict wildcard branches from `if let`s\n-                    Wild |\n-                    // doesn't have any effect on semantics\n-                    AscribeUserType { .. } |\n-                    // creating a union literal\n-                    Constant { .. } => {},\n-                    Leaf { .. } | Or { .. } => {\n-                        // pattern matching with a union and not doing something like v = Union { bar: 5 }\n-                        self.in_union_destructure = true;\n+        match &*pat.kind {\n+            PatKind::Leaf { .. } => {\n+                if let ty::Adt(adt_def, ..) = pat.ty.kind() {\n+                    if adt_def.is_union() {\n+                        let old_in_union_destructure =\n+                            std::mem::replace(&mut self.in_union_destructure, true);\n+                        visit::walk_pat(self, pat);\n+                        self.in_union_destructure = old_in_union_destructure;\n+                    } else if (Bound::Unbounded, Bound::Unbounded)\n+                        != self.tcx.layout_scalar_valid_range(adt_def.did)\n+                    {\n+                        let old_inside_adt = std::mem::replace(&mut self.inside_adt, true);\n+                        visit::walk_pat(self, pat);\n+                        self.inside_adt = old_inside_adt;\n+                    } else {\n                         visit::walk_pat(self, pat);\n-                        self.in_union_destructure = false;\n-                        return; // don't walk pattern\n                     }\n-                    Variant { .. } | Deref { .. } | Range { .. } | Slice { .. } | Array { .. } =>\n-                        unreachable!(\"impossible union destructuring type\"),\n+                } else {\n+                    visit::walk_pat(self, pat);\n                 }\n             }\n+            PatKind::Binding { mode: BindingMode::ByRef(borrow_kind), ty, .. } => {\n+                if self.inside_adt {\n+                    if let ty::Ref(_, ty, _) = ty.kind() {\n+                        match borrow_kind {\n+                            BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique => {\n+                                if !ty.is_freeze(self.tcx.at(pat.span), self.param_env) {\n+                                    self.requires_unsafe(pat.span, BorrowOfLayoutConstrainedField);\n+                                }\n+                            }\n+                            BorrowKind::Mut { .. } => {\n+                                self.requires_unsafe(pat.span, MutationOfLayoutConstrainedField);\n+                            }\n+                        }\n+                    } else {\n+                        span_bug!(\n+                            pat.span,\n+                            \"BindingMode::ByRef in pattern, but found non-reference type {}\",\n+                            ty\n+                        );\n+                    }\n+                }\n+                visit::walk_pat(self, pat);\n+            }\n+            PatKind::Deref { .. } => {\n+                let old_inside_adt = std::mem::replace(&mut self.inside_adt, false);\n+                visit::walk_pat(self, pat);\n+                self.inside_adt = old_inside_adt;\n+            }\n+            _ => {\n+                visit::walk_pat(self, pat);\n+            }\n         }\n-\n-        visit::walk_pat(self, pat);\n     }\n \n     fn visit_expr(&mut self, expr: &Expr<'tcx>) {\n@@ -361,15 +431,46 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            // don't have any special handling for AssignOp since it causes a read *and* write to lhs\n-            ExprKind::Assign { lhs, rhs } => {\n-                // assigning to a union is safe, check here so it doesn't get treated as a read later\n-                self.in_possible_lhs_union_assign = true;\n-                visit::walk_expr(self, &self.thir()[lhs]);\n-                self.in_possible_lhs_union_assign = false;\n-                visit::walk_expr(self, &self.thir()[rhs]);\n-                return; // don't visit the whole expression\n+            ExprKind::Assign { lhs, rhs } | ExprKind::AssignOp { lhs, rhs, .. } => {\n+                // First, check whether we are mutating a layout constrained field\n+                let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n+                visit::walk_expr(&mut visitor, &self.thir[lhs]);\n+                if visitor.found {\n+                    self.requires_unsafe(expr.span, MutationOfLayoutConstrainedField);\n+                }\n+\n+                // Second, check for accesses to union fields\n+                // don't have any special handling for AssignOp since it causes a read *and* write to lhs\n+                if matches!(expr.kind, ExprKind::Assign { .. }) {\n+                    // assigning to a union is safe, check here so it doesn't get treated as a read later\n+                    self.in_possible_lhs_union_assign = true;\n+                    visit::walk_expr(self, &self.thir()[lhs]);\n+                    self.in_possible_lhs_union_assign = false;\n+                    visit::walk_expr(self, &self.thir()[rhs]);\n+                    return; // we have already visited everything by now\n+                }\n             }\n+            ExprKind::Borrow { borrow_kind, arg } => match borrow_kind {\n+                BorrowKind::Shallow | BorrowKind::Shared | BorrowKind::Unique => {\n+                    if !self.thir[arg]\n+                        .ty\n+                        .is_freeze(self.tcx.at(self.thir[arg].span), self.param_env)\n+                    {\n+                        let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n+                        visit::walk_expr(&mut visitor, expr);\n+                        if visitor.found {\n+                            self.requires_unsafe(expr.span, BorrowOfLayoutConstrainedField);\n+                        }\n+                    }\n+                }\n+                BorrowKind::Mut { .. } => {\n+                    let mut visitor = LayoutConstrainedPlaceVisitor::new(self.thir, self.tcx);\n+                    visit::walk_expr(&mut visitor, expr);\n+                    if visitor.found {\n+                        self.requires_unsafe(expr.span, MutationOfLayoutConstrainedField);\n+                    }\n+                }\n+            },\n             _ => {}\n         }\n         visit::walk_expr(self, expr);\n@@ -541,6 +642,8 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         is_const,\n         in_possible_lhs_union_assign: false,\n         in_union_destructure: false,\n+        param_env: tcx.param_env(def.did),\n+        inside_adt: false,\n     };\n     visitor.visit_expr(&thir[expr]);\n }"}, {"sha": "427843f8d45ced0f1e8cc89475cd6b51e5e2b44b", "filename": "src/test/ui/unsafe/ranged_ints2.mirunsafeck.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints2.rs:8:13\n+  --> $DIR/ranged_ints2.rs:11:13\n    |\n LL |     let y = &mut x.0;\n    |             ^^^^^^^^ mutation of layout constrained field", "previous_filename": "src/test/ui/unsafe/ranged_ints2.stderr"}, {"sha": "9a6bb18f9266494cd926f8f4d05b84d5cfeac803", "filename": "src/test/ui/unsafe/ranged_ints2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "427843f8d45ced0f1e8cc89475cd6b51e5e2b44b", "filename": "src/test/ui/unsafe/ranged_ints2.thirunsafeck.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints2.rs:11:13\n+   |\n+LL |     let y = &mut x.0;\n+   |             ^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "c16550a58005f9fe31ae7287923bef3b0ed13f1a", "filename": "src/test/ui/unsafe/ranged_ints2_const.mirunsafeck.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/ranged_ints2_const.rs:11:13\n+  --> $DIR/ranged_ints2_const.rs:14:13\n    |\n LL |     let y = &mut x.0;\n    |             ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let y = &mut x.0;\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/ranged_ints2_const.rs:18:22\n+  --> $DIR/ranged_ints2_const.rs:21:22\n    |\n LL |     let y = unsafe { &mut x.0 };\n    |                      ^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     let y = unsafe { &mut x.0 };\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/ranged_ints2_const.rs:24:22\n+  --> $DIR/ranged_ints2_const.rs:27:22\n    |\n LL |     unsafe { let y = &mut x.0; }\n    |                      ^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     unsafe { let y = &mut x.0; }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints2_const.rs:11:13\n+  --> $DIR/ranged_ints2_const.rs:14:13\n    |\n LL |     let y = &mut x.0;\n    |             ^^^^^^^^ mutation of layout constrained field", "previous_filename": "src/test/ui/unsafe/ranged_ints2_const.stderr"}, {"sha": "56f5407bb6ebe6dc1e54238f1a2f293d7f9027c1", "filename": "src/test/ui/unsafe/ranged_ints2_const.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "b3f139f7213fffb7d228a0fc2857d4fec78db41e", "filename": "src/test/ui/unsafe/ranged_ints2_const.thirunsafeck.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,39 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints2_const.rs:14:13\n+   |\n+LL |     let y = &mut x.0;\n+   |             ^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/ranged_ints2_const.rs:14:13\n+   |\n+LL |     let y = &mut x.0;\n+   |             ^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/ranged_ints2_const.rs:21:22\n+   |\n+LL |     let y = unsafe { &mut x.0 };\n+   |                      ^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/ranged_ints2_const.rs:27:22\n+   |\n+LL |     unsafe { let y = &mut x.0; }\n+   |                      ^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "9eec0b09e9b18f6c68decc0a9c1ccea70fbd766f", "filename": "src/test/ui/unsafe/ranged_ints3.mirunsafeck.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints3.rs:10:13\n+  --> $DIR/ranged_ints3.rs:13:13\n    |\n LL |     let y = &x.0;\n    |             ^^^^ borrow of layout constrained field with interior mutability", "previous_filename": "src/test/ui/unsafe/ranged_ints3.stderr"}, {"sha": "76d4bfe95307d763e9b52742b3c2a919fc822a05", "filename": "src/test/ui/unsafe/ranged_ints3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "9eec0b09e9b18f6c68decc0a9c1ccea70fbd766f", "filename": "src/test/ui/unsafe/ranged_ints3.thirunsafeck.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3.rs:13:13\n+   |\n+LL |     let y = &x.0;\n+   |             ^^^^ borrow of layout constrained field with interior mutability\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "62df93330696256c2a051846a5e0e39d6c6c7e44", "filename": "src/test/ui/unsafe/ranged_ints3_const.mirunsafeck.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n-  --> $DIR/ranged_ints3_const.rs:12:13\n+  --> $DIR/ranged_ints3_const.rs:15:13\n    |\n LL |     let y = &x.0;\n    |             ^^^^\n@@ -8,7 +8,7 @@ LL |     let y = &x.0;\n    = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n-  --> $DIR/ranged_ints3_const.rs:19:22\n+  --> $DIR/ranged_ints3_const.rs:22:22\n    |\n LL |     let y = unsafe { &x.0 };\n    |                      ^^^^\n@@ -17,7 +17,7 @@ LL |     let y = unsafe { &x.0 };\n    = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n \n error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints3_const.rs:12:13\n+  --> $DIR/ranged_ints3_const.rs:15:13\n    |\n LL |     let y = &x.0;\n    |             ^^^^ borrow of layout constrained field with interior mutability", "previous_filename": "src/test/ui/unsafe/ranged_ints3_const.stderr"}, {"sha": "637198d36042239e8edb0f5aba0c9eb62540ecb1", "filename": "src/test/ui/unsafe/ranged_ints3_const.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "5dbc563aad26121ce07f4527ab0f037a4e1347c5", "filename": "src/test/ui/unsafe/ranged_ints3_const.thirunsafeck.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_const.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,30 @@\n+error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3_const.rs:15:13\n+   |\n+LL |     let y = &x.0;\n+   |             ^^^^ borrow of layout constrained field with interior mutability\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n+  --> $DIR/ranged_ints3_const.rs:15:13\n+   |\n+LL |     let y = &x.0;\n+   |             ^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n+\n+error[E0658]: cannot borrow here, since the borrowed element may contain interior mutability\n+  --> $DIR/ranged_ints3_const.rs:22:22\n+   |\n+LL |     let y = unsafe { &x.0 };\n+   |                      ^^^^\n+   |\n+   = note: see issue #80384 <https://github.com/rust-lang/rust/issues/80384> for more information\n+   = help: add `#![feature(const_refs_to_cell)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0133, E0658.\n+For more information about an error, try `rustc --explain E0133`."}, {"sha": "27c06640928fa8463a2c066c72404af4b2f55a04", "filename": "src/test/ui/unsafe/ranged_ints3_match.mirunsafeck.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3_match.rs:14:17\n+   |\n+LL |         NonZero(ref x) => { x }\n+   |                 ^^^^^ borrow of layout constrained field with interior mutability\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3_match.rs:20:23\n+   |\n+LL |     match y { NonZero(ref mut y) => { y } };\n+   |                       ^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "d9fcf0bd665c2163aec5d19b6cd7f07f4ec141b3", "filename": "src/test/ui/unsafe/ranged_ints3_match.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,22 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {\n+    let mut x = unsafe { NonZero(Cell::new(1)) };\n+    match x {\n+        NonZero(ref x) => { x }\n+        //~^ ERROR borrow of layout constrained field with interior mutability\n+    };\n+\n+    let mut y = unsafe { NonZero(42) };\n+    match y { NonZero(ref y) => { y } }; // OK, type of `y` is freeze\n+    match y { NonZero(ref mut y) => { y } };\n+    //~^ ERROR mutation of layout constrained field\n+}"}, {"sha": "27c06640928fa8463a2c066c72404af4b2f55a04", "filename": "src/test/ui/unsafe/ranged_ints3_match.thirunsafeck.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3_match.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: borrow of layout constrained field with interior mutability is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3_match.rs:14:17\n+   |\n+LL |         NonZero(ref x) => { x }\n+   |                 ^^^^^ borrow of layout constrained field with interior mutability\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints. Coupled with interior mutability, the field can be changed to invalid values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3_match.rs:20:23\n+   |\n+LL |     match y { NonZero(ref mut y) => { y } };\n+   |                       ^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "493483d2c45406fc14c3e1a1313a4b20dbb0e101", "filename": "src/test/ui/unsafe/ranged_ints4.mirunsafeck.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints4.rs:8:5\n+  --> $DIR/ranged_ints4.rs:11:5\n    |\n LL |     x.0 = 0;\n    |     ^^^^^^^ mutation of layout constrained field", "previous_filename": "src/test/ui/unsafe/ranged_ints4.stderr"}, {"sha": "fe80af454cb8d1396a097fcbc441d5e401ddf7b3", "filename": "src/test/ui/unsafe/ranged_ints4.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "493483d2c45406fc14c3e1a1313a4b20dbb0e101", "filename": "src/test/ui/unsafe/ranged_ints4.thirunsafeck.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints4_const.rs:10:5\n+  --> $DIR/ranged_ints4.rs:11:5\n    |\n LL |     x.0 = 0;\n    |     ^^^^^^^ mutation of layout constrained field", "previous_filename": "src/test/ui/unsafe/ranged_ints4_const.stderr"}, {"sha": "a06c6f479b8da031d1f59d8522ea5a6ce7f89c45", "filename": "src/test/ui/unsafe/ranged_ints4_const.mirunsafeck.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints4_const.rs:13:5\n+   |\n+LL |     x.0 = 0;\n+   |     ^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a43c8be71c4fd2e2338a4b35cb8ea12e7288cb2e", "filename": "src/test/ui/unsafe/ranged_ints4_const.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "a06c6f479b8da031d1f59d8522ea5a6ce7f89c45", "filename": "src/test/ui/unsafe/ranged_ints4_const.thirunsafeck.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints4_const.rs:13:5\n+   |\n+LL |     x.0 = 0;\n+   |     ^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "9abc51424abaf80f6c2ea6ff4b5c16183e3368fe", "filename": "src/test/ui/unsafe/unsafe-assign.mirunsafeck.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-assign.rs:12:5\n+   |\n+LL |     foo.0.0 = 0;\n+   |     ^^^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "15273165b5e1348f14cd6c2d81af054f192cfb6b", "filename": "src/test/ui/unsafe/unsafe-assign.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,25 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused,dead_code)]\n+\n+fn nested_field() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<T>(T);\n+\n+    let mut foo = unsafe { NonZero((1,)) };\n+    foo.0.0 = 0;\n+    //~^ ERROR: mutation of layout constrained field is unsafe\n+}\n+\n+fn block() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<T>(T);\n+\n+    let mut foo = unsafe { NonZero((1,)) };\n+    { foo.0 }.0 = 0;\n+    // ^ not unsafe because the result of the block expression is a new place\n+}\n+\n+fn main() {}"}, {"sha": "9abc51424abaf80f6c2ea6ff4b5c16183e3368fe", "filename": "src/test/ui/unsafe/unsafe-assign.thirunsafeck.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-assign.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-assign.rs:12:5\n+   |\n+LL |     foo.0.0 = 0;\n+   |     ^^^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "a206722495ac32dd00a1acb7543bf1b5c609244e", "filename": "src/test/ui/unsafe/unsafe-borrow.mirunsafeck.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.mirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-borrow.rs:12:13\n+   |\n+LL |     let a = &mut foo.0.0;\n+   |             ^^^^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-borrow.rs:32:13\n+   |\n+LL |     let a = &mut foo.0[2];\n+   |             ^^^^^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-borrow.rs:51:18\n+   |\n+LL |         NonZero((a,)) => *a = 0,\n+   |                  ^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "8dddc70be45c7e58373eedd6e449ae293d5eb12d", "filename": "src/test/ui/unsafe/unsafe-borrow.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.rs?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,56 @@\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused,dead_code)]\n+\n+fn tuple_struct() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<T>(T);\n+\n+    let mut foo = unsafe { NonZero((1,)) };\n+    let a = &mut foo.0.0;\n+    //~^ ERROR: mutation of layout constrained field is unsafe\n+}\n+\n+fn slice() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<'a, T>(&'a mut [T]);\n+\n+    let mut nums = [1, 2, 3, 4];\n+    let mut foo = unsafe { NonZero(&mut nums[..]) };\n+    let a = &mut foo.0[2];\n+    // ^ not unsafe because there is an implicit dereference here\n+}\n+\n+fn array() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<T>([T; 4]);\n+\n+    let nums = [1, 2, 3, 4];\n+    let mut foo = unsafe { NonZero(nums) };\n+    let a = &mut foo.0[2];\n+    //~^ ERROR: mutation of layout constrained field is unsafe\n+}\n+\n+fn block() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<T>(T);\n+\n+    let foo = unsafe { NonZero((1,)) };\n+    &mut { foo.0 }.0;\n+    // ^ not unsafe because the result of the block expression is a new place\n+}\n+\n+fn mtch() {\n+    #[rustc_layout_scalar_valid_range_start(1)]\n+    struct NonZero<T>(T);\n+\n+    let mut foo = unsafe { NonZero((1,)) };\n+    match &mut foo {\n+        NonZero((a,)) => *a = 0,\n+        //~^ ERROR: mutation of layout constrained field is unsafe\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a206722495ac32dd00a1acb7543bf1b5c609244e", "filename": "src/test/ui/unsafe/unsafe-borrow.thirunsafeck.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0888614f1ba57881494cde078e71706cea51da1/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-borrow.thirunsafeck.stderr?ref=b0888614f1ba57881494cde078e71706cea51da1", "patch": "@@ -0,0 +1,27 @@\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-borrow.rs:12:13\n+   |\n+LL |     let a = &mut foo.0.0;\n+   |             ^^^^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-borrow.rs:32:13\n+   |\n+LL |     let a = &mut foo.0[2];\n+   |             ^^^^^^^^^^^^^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/unsafe-borrow.rs:51:18\n+   |\n+LL |         NonZero((a,)) => *a = 0,\n+   |                  ^ mutation of layout constrained field\n+   |\n+   = note: mutating layout constrained fields cannot statically be checked for valid values\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}