{"sha": "2e2372c6c4a265992b0eb615ea9fdee4ab999143", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjM3MmM2YzRhMjY1OTkyYjBlYjYxNWVhOWZkZWU0YWI5OTkxNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-09T09:50:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-09T09:50:06Z"}, "message": "auto merge of #20788 : Zoxc/rust/loader, r=huonw\n\nFixes #19907", "tree": {"sha": "3e8e8a9986770ffc5ad9d6759c2b64811c6d2c91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8e8a9986770ffc5ad9d6759c2b64811c6d2c91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2372c6c4a265992b0eb615ea9fdee4ab999143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2372c6c4a265992b0eb615ea9fdee4ab999143", "html_url": "https://github.com/rust-lang/rust/commit/2e2372c6c4a265992b0eb615ea9fdee4ab999143", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2372c6c4a265992b0eb615ea9fdee4ab999143/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20bce44810eb5146f609b4362990ef8835e55bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/20bce44810eb5146f609b4362990ef8835e55bb5", "html_url": "https://github.com/rust-lang/rust/commit/20bce44810eb5146f609b4362990ef8835e55bb5"}, {"sha": "9dea210730f1e5f8de32302db786deca3381f2bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dea210730f1e5f8de32302db786deca3381f2bb", "html_url": "https://github.com/rust-lang/rust/commit/9dea210730f1e5f8de32302db786deca3381f2bb"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "a8326cc060ae75de1a50a76561ddad2d16f58811", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=2e2372c6c4a265992b0eb615ea9fdee4ab999143", "patch": "@@ -409,6 +409,7 @@ impl<'a> CrateReader<'a> {\n                     crate_name: name,\n                     hash: hash.map(|a| &*a),\n                     filesearch: self.sess.target_filesearch(kind),\n+                    target: &self.sess.target.target,\n                     triple: &self.sess.opts.target_triple[],\n                     root: root,\n                     rejected_via_hash: vec!(),\n@@ -472,6 +473,7 @@ impl<'a> CrateReader<'a> {\n             crate_name: &name[],\n             hash: None,\n             filesearch: self.sess.host_filesearch(PathKind::Crate),\n+            target: &self.sess.host,\n             triple: config::host_triple(),\n             root: &None,\n             rejected_via_hash: vec!(),\n@@ -486,6 +488,7 @@ impl<'a> CrateReader<'a> {\n                 target_only = true;\n                 should_link = info.should_link;\n \n+                load_ctxt.target = &self.sess.target.target;\n                 load_ctxt.triple = target_triple;\n                 load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n                 load_ctxt.load_library_crate()"}, {"sha": "f749721cca8c2a3da0269cb20b43e81ed42c35a8", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=2e2372c6c4a265992b0eb615ea9fdee4ab999143", "patch": "@@ -225,6 +225,7 @@ use metadata::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n use util::fs;\n+use rustc_back::target::Target;\n \n use std::ffi::CString;\n use std::cmp;\n@@ -248,6 +249,8 @@ pub struct Context<'a> {\n     pub ident: &'a str,\n     pub crate_name: &'a str,\n     pub hash: Option<&'a Svh>,\n+    // points to either self.sess.target.target or self.sess.host, must match triple\n+    pub target: &'a Target,\n     pub triple: &'a str,\n     pub filesearch: FileSearch<'a>,\n     pub root: &'a Option<CratePaths>,\n@@ -499,7 +502,7 @@ impl<'a> Context<'a> {\n \n         for lib in m.into_iter() {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n-            let metadata = match get_metadata_section(self.sess.target.target.options.is_like_osx,\n+            let metadata = match get_metadata_section(self.target.options.is_like_osx,\n                                                       &lib) {\n                 Ok(blob) => {\n                     if self.crate_matches(blob.as_slice(), &lib) {\n@@ -588,7 +591,7 @@ impl<'a> Context<'a> {\n     // Returns the corresponding (prefix, suffix) that files need to have for\n     // dynamic libraries\n     fn dylibname(&self) -> (String, String) {\n-        let t = &self.sess.target.target;\n+        let t = &self.target;\n         (t.options.dll_prefix.clone(), t.options.dll_suffix.clone())\n     }\n "}, {"sha": "26d5a9daf89b04bdfa62ec9b3ca52bcb92168623", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2e2372c6c4a265992b0eb615ea9fdee4ab999143", "patch": "@@ -25,6 +25,8 @@ use syntax::parse::token;\n use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n \n+use rustc_back::target::Target;\n+\n use std::os;\n use std::cell::{Cell, RefCell};\n \n@@ -35,6 +37,7 @@ pub mod search_paths;\n // session for a single crate.\n pub struct Session {\n     pub target: config::Config,\n+    pub host: Target,\n     pub opts: config::Options,\n     pub cstore: CStore,\n     pub parse_sess: ParseSess,\n@@ -243,6 +246,13 @@ pub fn build_session_(sopts: config::Options,\n                       local_crate_source_file: Option<Path>,\n                       span_diagnostic: diagnostic::SpanHandler)\n                       -> Session {\n+    let host = match Target::search(config::host_triple()) {\n+        Ok(t) => t,\n+        Err(e) => {\n+            span_diagnostic.handler()\n+                .fatal((format!(\"Error loading host specification: {}\", e)).as_slice());\n+    }\n+    };\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic);\n     let default_sysroot = match sopts.maybe_sysroot {\n@@ -268,6 +278,7 @@ pub fn build_session_(sopts: config::Options,\n \n     let sess = Session {\n         target: target_cfg,\n+        host: host,\n         opts: sopts,\n         cstore: CStore::new(token::get_ident_interner()),\n         parse_sess: p_s,"}]}