{"sha": "9251f181de92c64b51e34980e591d2611b030140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNTFmMTgxZGU5MmM2NGI1MWUzNDk4MGU1OTFkMjYxMWIwMzAxNDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-10T10:09:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-10T10:09:06Z"}, "message": "Merge #4832\n\n4832: Reduce OUT_DIR special casing r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9b967facb387f495acab99fc8d9850db5073cdab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b967facb387f495acab99fc8d9850db5073cdab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9251f181de92c64b51e34980e591d2611b030140", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4LFCCRBK7hj4Ov3rIwAAdHIIAJFDiRF9BRje1lnc/lo50kBf\n9XilUpJkaYps3egq6nimZ1CNB+rE24WdOPO6/4//dFCM5fN2cnnNjkec2Ihwsx/k\np0CPe8r+pxpS8I3Mmtg2frU2+id+aNZ+ZXYFsLCh20RnQRzNEBy1DuV+Q4ieYkoO\nPyoTcDrGn1jT7A5l66JNccfGfNxBn274F9g/G8NajawDRFZQjZ/tw0FEFb7dWghp\nsA6G8iRV+tm9yCJ+ZnpHN/PE3Hhg9/5G4BbcEpIdIjwz2UtdgXpkBXGIm1jjmRNI\nsS8Ovn9UAIbd1Boa7dfn9GpKnDN/ESeV/p7m1htKwD3xeqDevjlsQKvV2+HxzP4=\n=1ZRl\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b967facb387f495acab99fc8d9850db5073cdab\nparent 560b98bc505be6ff70876df661e4055e1b38a78c\nparent 27ebe5d33e08d92c1a032dc27f19094571bd19cd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591783746 +0000\ncommitter GitHub <noreply@github.com> 1591783746 +0000\n\nMerge #4832\n\n4832: Reduce OUT_DIR special casing r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9251f181de92c64b51e34980e591d2611b030140", "html_url": "https://github.com/rust-lang/rust/commit/9251f181de92c64b51e34980e591d2611b030140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9251f181de92c64b51e34980e591d2611b030140/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560b98bc505be6ff70876df661e4055e1b38a78c", "url": "https://api.github.com/repos/rust-lang/rust/commits/560b98bc505be6ff70876df661e4055e1b38a78c", "html_url": "https://github.com/rust-lang/rust/commit/560b98bc505be6ff70876df661e4055e1b38a78c"}, {"sha": "27ebe5d33e08d92c1a032dc27f19094571bd19cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ebe5d33e08d92c1a032dc27f19094571bd19cd", "html_url": "https://github.com/rust-lang/rust/commit/27ebe5d33e08d92c1a032dc27f19094571bd19cd"}], "stats": {"total": 93, "additions": 43, "deletions": 50}, "files": [{"sha": "cb0e27dce21763ad0e0b7e493be3e677df625e73", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9251f181de92c64b51e34980e591d2611b030140/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9251f181de92c64b51e34980e591d2611b030140/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=9251f181de92c64b51e34980e591d2611b030140", "patch": "@@ -47,17 +47,21 @@ pub struct PackageRoot {\n     path: PathBuf,\n     /// Is a member of the current workspace\n     is_member: bool,\n+    out_dir: Option<PathBuf>,\n }\n impl PackageRoot {\n     pub fn new_member(path: PathBuf) -> PackageRoot {\n-        Self { path, is_member: true }\n+        Self { path, is_member: true, out_dir: None }\n     }\n     pub fn new_non_member(path: PathBuf) -> PackageRoot {\n-        Self { path, is_member: false }\n+        Self { path, is_member: false, out_dir: None }\n     }\n     pub fn path(&self) -> &Path {\n         &self.path\n     }\n+    pub fn out_dir(&self) -> Option<&Path> {\n+        self.out_dir.as_deref()\n+    }\n     pub fn is_member(&self) -> bool {\n         self.is_member\n     }\n@@ -204,6 +208,7 @@ impl ProjectWorkspace {\n                 .map(|pkg| PackageRoot {\n                     path: cargo[pkg].root().to_path_buf(),\n                     is_member: cargo[pkg].is_member,\n+                    out_dir: cargo[pkg].out_dir.clone(),\n                 })\n                 .chain(sysroot.crates().map(|krate| {\n                     PackageRoot::new_non_member(sysroot[krate].root_dir().to_path_buf())\n@@ -212,17 +217,6 @@ impl ProjectWorkspace {\n         }\n     }\n \n-    pub fn out_dirs(&self) -> Vec<PathBuf> {\n-        match self {\n-            ProjectWorkspace::Json { project } => {\n-                project.crates.iter().filter_map(|krate| krate.out_dir.as_ref()).cloned().collect()\n-            }\n-            ProjectWorkspace::Cargo { cargo, sysroot: _ } => {\n-                cargo.packages().filter_map(|pkg| cargo[pkg].out_dir.as_ref()).cloned().collect()\n-            }\n-        }\n-    }\n-\n     pub fn proc_macro_dylib_paths(&self) -> Vec<PathBuf> {\n         match self {\n             ProjectWorkspace::Json { project } => project"}, {"sha": "45af963179b31b2f20194343e3f155f8c3f989f1", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9251f181de92c64b51e34980e591d2611b030140/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9251f181de92c64b51e34980e591d2611b030140/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=9251f181de92c64b51e34980e591d2611b030140", "patch": "@@ -36,28 +36,28 @@ pub fn load_cargo(\n     )?;\n \n     let mut extern_dirs = FxHashSet::default();\n-    extern_dirs.extend(ws.out_dirs());\n-\n-    let mut project_roots = ws.to_roots();\n-    project_roots.extend(extern_dirs.iter().cloned().map(PackageRoot::new_non_member));\n \n     let (sender, receiver) = unbounded();\n     let sender = Box::new(move |t| sender.send(t).unwrap());\n-    let (mut vfs, roots) = Vfs::new(\n-        project_roots\n-            .iter()\n-            .map(|pkg_root| {\n-                RootEntry::new(\n-                    pkg_root.path().to_owned(),\n-                    RustPackageFilterBuilder::default()\n-                        .set_member(pkg_root.is_member())\n-                        .into_vfs_filter(),\n-                )\n-            })\n-            .collect(),\n-        sender,\n-        Watch(false),\n-    );\n+\n+    let mut roots = Vec::new();\n+    let project_roots = ws.to_roots();\n+    for root in &project_roots {\n+        roots.push(RootEntry::new(\n+            root.path().to_owned(),\n+            RustPackageFilterBuilder::default().set_member(root.is_member()).into_vfs_filter(),\n+        ));\n+\n+        if let Some(out_dir) = root.out_dir() {\n+            extern_dirs.insert(out_dir.to_path_buf());\n+            roots.push(RootEntry::new(\n+                out_dir.to_owned(),\n+                RustPackageFilterBuilder::default().set_member(root.is_member()).into_vfs_filter(),\n+            ))\n+        }\n+    }\n+\n+    let (mut vfs, roots) = Vfs::new(roots, sender, Watch(false));\n \n     let source_roots = roots\n         .into_iter()"}, {"sha": "96d91b12d9242fe1fabfb5bbaea83845cf302714", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9251f181de92c64b51e34980e591d2611b030140/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9251f181de92c64b51e34980e591d2611b030140/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=9251f181de92c64b51e34980e591d2611b030140", "patch": "@@ -89,8 +89,7 @@ impl GlobalState {\n     ) -> GlobalState {\n         let mut change = AnalysisChange::new();\n \n-        let extern_dirs: FxHashSet<_> =\n-            workspaces.iter().flat_map(ProjectWorkspace::out_dirs).collect();\n+        let mut extern_dirs: FxHashSet<PathBuf> = FxHashSet::default();\n \n         let mut local_roots = Vec::new();\n         let roots: Vec<_> = {\n@@ -100,22 +99,22 @@ impl GlobalState {\n                     .exclude(exclude_globs.iter().cloned())\n                     .into_vfs_filter()\n             };\n-            workspaces\n-                .iter()\n-                .flat_map(ProjectWorkspace::to_roots)\n-                .map(|pkg_root| {\n-                    let path = pkg_root.path().to_owned();\n-                    if pkg_root.is_member() {\n-                        local_roots.push(path.clone());\n-                    }\n-                    RootEntry::new(path, create_filter(pkg_root.is_member()))\n-                })\n-                .chain(\n-                    extern_dirs\n-                        .iter()\n-                        .map(|path| RootEntry::new(path.to_owned(), create_filter(false))),\n-                )\n-                .collect()\n+            let mut roots = Vec::new();\n+            for root in workspaces.iter().flat_map(ProjectWorkspace::to_roots) {\n+                let path = root.path().to_owned();\n+                if root.is_member() {\n+                    local_roots.push(path.clone());\n+                }\n+                roots.push(RootEntry::new(path, create_filter(root.is_member())));\n+                if let Some(out_dir) = root.out_dir() {\n+                    extern_dirs.insert(out_dir.to_path_buf());\n+                    roots.push(RootEntry::new(\n+                        out_dir.to_path_buf(),\n+                        create_filter(root.is_member()),\n+                    ))\n+                }\n+            }\n+            roots\n         };\n \n         let (task_sender, task_receiver) = unbounded();"}]}