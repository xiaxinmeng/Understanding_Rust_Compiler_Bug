{"sha": "1bb59a7d08d10d247da265ef58835f9979ec36b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYjU5YTdkMDhkMTBkMjQ3ZGEyNjVlZjU4ODM1Zjk5NzllYzM2Yjc=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-03T19:58:29Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-04T23:30:42Z"}, "message": "Three-state enum for module origin", "tree": {"sha": "2e7af139e0703c959b236cca94e9996ec8ec04d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7af139e0703c959b236cca94e9996ec8ec04d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bb59a7d08d10d247da265ef58835f9979ec36b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb59a7d08d10d247da265ef58835f9979ec36b7", "html_url": "https://github.com/rust-lang/rust/commit/1bb59a7d08d10d247da265ef58835f9979ec36b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bb59a7d08d10d247da265ef58835f9979ec36b7/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace661bb10dbfd596a444c235f80fa43a2845239", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace661bb10dbfd596a444c235f80fa43a2845239", "html_url": "https://github.com/rust-lang/rust/commit/ace661bb10dbfd596a444c235f80fa43a2845239"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "cf2a831913bef59117c8295d595ae72aad45e0c1", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/1bb59a7d08d10d247da265ef58835f9979ec36b7/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb59a7d08d10d247da265ef58835f9979ec36b7/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=1bb59a7d08d10d247da265ef58835f9979ec36b7", "patch": "@@ -100,19 +100,83 @@ impl std::ops::Index<LocalModuleId> for CrateDefMap {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n+pub enum ModuleOrigin {\n+    /// It should not be `None` after collecting definitions.\n+    Root(Option<FileId>),\n+    /// Note that non-inline modules, by definition, live inside non-macro file.\n+    File(AstId<ast::Module>, FileId),\n+    Inline(AstId<ast::Module>),\n+    Block(AstId<ast::Block>),\n+}\n+\n+impl Default for ModuleOrigin {\n+    fn default() -> Self {\n+        ModuleOrigin::Root(None)\n+    }\n+}\n+\n+impl ModuleOrigin {\n+    pub fn root(file_id: FileId) -> Self {\n+        ModuleOrigin::Root(Some(file_id))\n+    }\n+\n+    pub fn not_sure_file(file: Option<FileId>, module: AstId<ast::Module>) -> Self {\n+        match file {\n+            None => ModuleOrigin::Inline(module),\n+            Some(file) => ModuleOrigin::File(module, file),\n+        }\n+    }\n+\n+    pub fn not_sure_mod(file: FileId, module: Option<AstId<ast::Module>>) -> Self {\n+        match module {\n+            None => ModuleOrigin::root(file),\n+            Some(module) => ModuleOrigin::File(module, file),\n+        }\n+    }\n+\n+    pub fn declaration(&self) -> Option<AstId<ast::Module>> {\n+        match self {\n+            ModuleOrigin::File(m, _) | ModuleOrigin::Inline(m) => Some(*m),\n+            ModuleOrigin::Root(_) | ModuleOrigin::Block(_) => None,\n+        }\n+    }\n+\n+    pub fn file_id(&self) -> Option<FileId> {\n+        match self {\n+            ModuleOrigin::File(_, file_id) | ModuleOrigin::Root(Some(file_id)) => Some(*file_id),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Returns a node which defines this module.\n+    /// That is, a file or a `mod foo {}` with items.\n+    pub fn definition_source(\n+        &self,\n+        db: &impl DefDatabase,\n+    ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n+        match self {\n+            ModuleOrigin::File(_, file_id) | ModuleOrigin::Root(Some(file_id)) => {\n+                let file_id = *file_id;\n+                let sf = db.parse(file_id).tree();\n+                return InFile::new(file_id.into(), Either::Left(sf));\n+            }\n+            ModuleOrigin::Root(None) => unreachable!(),\n+            ModuleOrigin::Inline(m) => InFile::new(m.file_id, Either::Right(m.to_node(db))),\n+            // FIXME: right now it's never constructed, so it's fine to omit\n+            ModuleOrigin::Block(b) => unimplemented!(),\n+        }\n+    }\n+}\n+\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ModuleData {\n     pub parent: Option<LocalModuleId>,\n     pub children: FxHashMap<Name, LocalModuleId>,\n     pub scope: ModuleScope,\n \n-    //  FIXME: these can't be both null, we need a three-state enum here.\n-    /// None for root\n-    pub declaration: Option<AstId<ast::Module>>,\n-    /// None for inline modules.\n-    ///\n-    /// Note that non-inline modules, by definition, live inside non-macro file.\n-    pub definition: Option<FileId>,\n+    /// Where does this module come from?\n+    pub origin: ModuleOrigin,\n \n     pub impls: Vec<ImplId>,\n }\n@@ -262,7 +326,7 @@ impl CrateDefMap {\n     pub fn modules_for_file(&self, file_id: FileId) -> impl Iterator<Item = LocalModuleId> + '_ {\n         self.modules\n             .iter()\n-            .filter(move |(_id, data)| data.definition == Some(file_id))\n+            .filter(move |(_id, data)| data.origin.file_id() == Some(file_id))\n             .map(|(id, _data)| id)\n     }\n \n@@ -285,18 +349,13 @@ impl ModuleData {\n         &self,\n         db: &impl DefDatabase,\n     ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n-        if let Some(file_id) = self.definition {\n-            let sf = db.parse(file_id).tree();\n-            return InFile::new(file_id.into(), Either::Left(sf));\n-        }\n-        let decl = self.declaration.unwrap();\n-        InFile::new(decl.file_id, Either::Right(decl.to_node(db)))\n+        self.origin.definition_source(db)\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n-    /// `None` for the crate root.\n+    /// `None` for the crate root or block.\n     pub fn declaration_source(&self, db: &impl DefDatabase) -> Option<InFile<ast::Module>> {\n-        let decl = self.declaration?;\n+        let decl = self.origin.declaration()?;\n         let value = decl.to_node(db);\n         Some(InFile { file_id: decl.file_id, value })\n     }"}, {"sha": "6f4a3e42e3c566f1abf1776353fe8712cc08d844", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bb59a7d08d10d247da265ef58835f9979ec36b7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb59a7d08d10d247da265ef58835f9979ec36b7/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1bb59a7d08d10d247da265ef58835f9979ec36b7", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     db::DefDatabase,\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n-        raw, BuiltinShadowMode, CrateDefMap, ModuleData, Resolution, ResolveMode,\n+        raw, BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, Resolution, ResolveMode,\n     },\n     path::{Path, PathKind},\n     per_ns::PerNs,\n@@ -131,7 +131,7 @@ where\n         let file_id = crate_graph.crate_root(self.def_map.krate);\n         let raw_items = self.db.raw_items(file_id.into());\n         let module_id = self.def_map.root;\n-        self.def_map.modules[module_id].definition = Some(file_id);\n+        self.def_map.modules[module_id].origin = ModuleOrigin::root(file_id);\n         ModCollector {\n             def_collector: &mut *self,\n             module_id,\n@@ -669,8 +669,7 @@ where\n         let modules = &mut self.def_collector.def_map.modules;\n         let res = modules.alloc(ModuleData::default());\n         modules[res].parent = Some(self.module_id);\n-        modules[res].declaration = Some(declaration);\n-        modules[res].definition = definition;\n+        modules[res].origin = ModuleOrigin::not_sure_file(definition, declaration);\n         modules[res].scope.legacy_macros = modules[self.module_id].scope.legacy_macros.clone();\n         modules[self.module_id].children.insert(name.clone(), res);\n         let resolution = Resolution {"}]}