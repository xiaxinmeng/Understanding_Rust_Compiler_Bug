{"sha": "f36355070e1bb4323a5db7bcb1297d3ed7951992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNjM1NTA3MGUxYmI0MzIzYTVkYjdiY2IxMjk3ZDNlZDc5NTE5OTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T15:57:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T15:57:31Z"}, "message": "it's C++20", "tree": {"sha": "6db5a2a431bcec2dbb394c45a523e2f00c6fbc02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db5a2a431bcec2dbb394c45a523e2f00c6fbc02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f36355070e1bb4323a5db7bcb1297d3ed7951992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f36355070e1bb4323a5db7bcb1297d3ed7951992", "html_url": "https://github.com/rust-lang/rust/commit/f36355070e1bb4323a5db7bcb1297d3ed7951992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f36355070e1bb4323a5db7bcb1297d3ed7951992/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b2362ce7000bc4e82006979bb34dfc86a9f396", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b2362ce7000bc4e82006979bb34dfc86a9f396", "html_url": "https://github.com/rust-lang/rust/commit/a2b2362ce7000bc4e82006979bb34dfc86a9f396"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "80bfb7ef614ddb4d05558c257c2673558fc9e304", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f36355070e1bb4323a5db7bcb1297d3ed7951992/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36355070e1bb4323a5db7bcb1297d3ed7951992/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f36355070e1bb4323a5db7bcb1297d3ed7951992", "patch": "@@ -18,7 +18,7 @@\n //!\n //! Each method takes an [`Ordering`] which represents the strength of\n //! the memory barrier for that operation. These orderings are the\n-//! same as the [C++ atomic orderings][1]. For more information see the [nomicon][2].\n+//! same as the [C++20 atomic orderings][1]. For more information see the [nomicon][2].\n //!\n //! [`Ordering`]: enum.Ordering.html\n //!\n@@ -218,7 +218,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// operations across all threads.\n ///\n /// Rust's memory orderings are [the same as those of\n-/// C++](https://en.cppreference.com/w/cpp/atomic/memory_order).\n+/// C++20](https://en.cppreference.com/w/cpp/atomic/memory_order).\n ///\n /// For more information see the [nomicon].\n ///\n@@ -231,7 +231,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     ///\n-    /// Corresponds to [`memory_order_relaxed`] in C++.\n+    /// Corresponds to [`memory_order_relaxed`] in C++20.\n     ///\n     /// [`memory_order_relaxed`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -246,7 +246,7 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that can perform a store.\n     ///\n-    /// Corresponds to [`memory_order_release`] in C++.\n+    /// Corresponds to [`memory_order_release`] in C++20.\n     ///\n     /// [`Release`]: #Release\n     /// [`Acquire`]: #Acquire\n@@ -264,7 +264,7 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that can perform a load.\n     ///\n-    /// Corresponds to [`memory_order_acquire`] in C++.\n+    /// Corresponds to [`memory_order_acquire`] in C++20.\n     ///\n     /// [`Acquire`]: #Acquire\n     /// [`Release`]: #Release\n@@ -281,7 +281,7 @@ pub enum Ordering {\n     ///\n     /// This ordering is only applicable for operations that combine both loads and stores.\n     ///\n-    /// Corresponds to [`memory_order_acq_rel`] in C++.\n+    /// Corresponds to [`memory_order_acq_rel`] in C++20.\n     ///\n     /// [`memory_order_acq_rel`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n     /// [`Acquire`]: #Acquire\n@@ -293,7 +293,7 @@ pub enum Ordering {\n     /// operations, respectively) with the additional guarantee that all threads see all\n     /// sequentially consistent operations in the same order.\n     ///\n-    /// Corresponds to [`memory_order_seq_cst`] in C++.\n+    /// Corresponds to [`memory_order_seq_cst`] in C++20.\n     ///\n     /// [`memory_order_seq_cst`]: https://en.cppreference.com/w/cpp/atomic/memory_order#Sequentially-consistent_ordering\n     /// [`Acquire`]: #Acquire"}]}