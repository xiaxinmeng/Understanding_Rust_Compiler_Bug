{"sha": "b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMzVjMzE0YjRiMGVjZDI0NzdmZGUyMTZkYmU3ZTg4MDFmOTRkMGQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T19:05:47Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T19:05:47Z"}, "message": "Use chalk_ir::OpaqueTyId", "tree": {"sha": "a2e152f5f16dd92f4c4be011be2399998dc7eb6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e152f5f16dd92f4c4be011be2399998dc7eb6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "html_url": "https://github.com/rust-lang/rust/commit/b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf6b7360c3f1d0e20dece5227979bc4d74a352f", "html_url": "https://github.com/rust-lang/rust/commit/1bf6b7360c3f1d0e20dece5227979bc4d74a352f"}], "stats": {"total": 116, "additions": 53, "deletions": 63}, "files": [{"sha": "8a3cc0283acde09880d9ab30aba547d6cf8f4f04", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -12,7 +12,7 @@ use la_arena::ArenaMap;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDefId, FnDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n+    Binders, CallableDefId, FnDefId, GenericPredicate, ImplTraitId, InferenceResult, PolyFnSig,\n     ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n@@ -83,7 +83,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_type_param_id(&self, param_id: TypeParamId) -> InternedTypeParamId;\n     #[salsa::interned]\n-    fn intern_impl_trait_id(&self, id: OpaqueTyId) -> InternedOpaqueTyId;\n+    fn intern_impl_trait_id(&self, id: ImplTraitId) -> InternedOpaqueTyId;\n     #[salsa::interned]\n     fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> InternedClosureId;\n "}, {"sha": "e6473586ba0bd6b00dc7b4e6113da3897375cc52", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -13,7 +13,7 @@ use hir_expand::name::Name;\n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n     to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId,\n-    CallableSig, GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId,\n+    CallableSig, GenericPredicate, ImplTraitId, Interner, Lifetime, Obligation, OpaqueTy,\n     ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n };\n \n@@ -313,22 +313,26 @@ impl HirDisplay for Ty {\n                     )?;\n                 }\n \n+                // FIXME: all this just to decide whether to use parentheses...\n                 let datas;\n                 let predicates = match t.interned(&Interner) {\n                     TyKind::Dyn(predicates) if predicates.len() > 1 => {\n                         Cow::Borrowed(predicates.as_ref())\n                     }\n-                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n-                        opaque_ty_id: OpaqueTyId::ReturnTypeImplTrait(func, idx),\n-                        ref parameters,\n-                    })) => {\n-                        datas =\n-                            f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n-                        let data = (*datas)\n-                            .as_ref()\n-                            .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        let bounds = data.subst(parameters);\n-                        Cow::Owned(bounds.value)\n+                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, ref parameters })) => {\n+                        let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty_id.into());\n+                        if let ImplTraitId::ReturnTypeImplTrait(func, idx) = impl_trait_id {\n+                            datas =\n+                                f.db.return_type_impl_traits(func)\n+                                    .expect(\"impl trait id without data\");\n+                            let data = (*datas)\n+                                .as_ref()\n+                                .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n+                            let bounds = data.subst(parameters);\n+                            Cow::Owned(bounds.value)\n+                        } else {\n+                            Cow::Borrowed(&[][..])\n+                        }\n                     }\n                     _ => Cow::Borrowed(&[][..]),\n                 };\n@@ -499,8 +503,9 @@ impl HirDisplay for Ty {\n                 write!(f, \"{}\", type_alias.name)?;\n             }\n             TyKind::OpaqueType(opaque_ty_id, parameters) => {\n-                match opaque_ty_id {\n-                    &OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                let impl_trait_id = f.db.lookup_intern_impl_trait_id((*opaque_ty_id).into());\n+                match impl_trait_id {\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)\n@@ -510,7 +515,7 @@ impl HirDisplay for Ty {\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                         // FIXME: it would maybe be good to distinguish this from the alias type (when debug printing), and to show the substitution\n                     }\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n+                    ImplTraitId::AsyncBlockTypeImplTrait(..) => {\n                         write!(f, \"impl Future<Output = \")?;\n                         parameters[0].hir_fmt(f)?;\n                         write!(f, \">\")?;\n@@ -566,8 +571,9 @@ impl HirDisplay for Ty {\n             }\n             TyKind::Alias(AliasTy::Projection(p_ty)) => p_ty.hir_fmt(f)?,\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                match opaque_ty.opaque_ty_id {\n-                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty.opaque_ty_id.into());\n+                match impl_trait_id {\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)\n@@ -576,7 +582,7 @@ impl HirDisplay for Ty {\n                         let bounds = data.subst(&opaque_ty.parameters);\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                     }\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n+                    ImplTraitId::AsyncBlockTypeImplTrait(..) => {\n                         write!(f, \"{{async block}}\")?;\n                     }\n                 };"}, {"sha": "eee3e6ec5dc3c368fff7620a5730c84d0bc46ab7", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     to_assoc_type_id,\n     traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, OpaqueTyId, Rawness,\n-    Scalar, Substs, TraitRef, Ty, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, Rawness, Scalar, Substs,\n+    TraitRef, Ty, TyKind,\n };\n \n use super::{\n@@ -179,7 +179,8 @@ impl<'a> InferenceContext<'a> {\n                 // Use the first type parameter as the output type of future.\n                 // existenail type AsyncBlockImplTrait<InnerType>: Future<Output = InnerType>\n                 let inner_ty = self.infer_expr(*body, &Expectation::none());\n-                let opaque_ty_id = OpaqueTyId::AsyncBlockTypeImplTrait(self.owner, *body);\n+                let impl_trait_id = crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n+                let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n                 TyKind::OpaqueType(opaque_ty_id, Substs::single(inner_ty)).intern(&Interner)\n             }\n             Expr::Loop { body, label } => {"}, {"sha": "d6ff968f00c798639553202dddbdc12701cb9e88", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -54,6 +54,7 @@ pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n pub type FnDefId = chalk_ir::FnDefId<Interner>;\n pub type ClosureId = chalk_ir::ClosureId<Interner>;\n+pub type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub type PlaceholderIndex = chalk_ir::PlaceholderIndex;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -875,8 +876,8 @@ impl Ty {\n     pub fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<GenericPredicate>> {\n         match self.interned(&Interner) {\n             TyKind::OpaqueType(opaque_ty_id, ..) => {\n-                match opaque_ty_id {\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(def, _expr) => {\n+                match db.lookup_intern_impl_trait_id((*opaque_ty_id).into()) {\n+                    ImplTraitId::AsyncBlockTypeImplTrait(def, _expr) => {\n                         let krate = def.module(db.upcast()).krate();\n                         if let Some(future_trait) = db\n                             .lang_item(krate, \"future_trait\".into())\n@@ -894,12 +895,13 @@ impl Ty {\n                             None\n                         }\n                     }\n-                    OpaqueTyId::ReturnTypeImplTrait(..) => None,\n+                    ImplTraitId::ReturnTypeImplTrait(..) => None,\n                 }\n             }\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                let predicates = match opaque_ty.opaque_ty_id {\n-                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                let predicates = match db.lookup_intern_impl_trait_id(opaque_ty.opaque_ty_id.into())\n+                {\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                         db.return_type_impl_traits(func).map(|it| {\n                             let data = (*it)\n                                 .as_ref()\n@@ -908,7 +910,7 @@ impl Ty {\n                         })\n                     }\n                     // It always has an parameter for Future::Output type.\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(..) => unreachable!(),\n+                    ImplTraitId::AsyncBlockTypeImplTrait(..) => unreachable!(),\n                 };\n \n                 predicates.map(|it| it.value)\n@@ -1123,7 +1125,7 @@ impl<T: TypeWalk> TypeWalk for Vec<T> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum OpaqueTyId {\n+pub enum ImplTraitId {\n     ReturnTypeImplTrait(hir_def::FunctionId, u16),\n     AsyncBlockTypeImplTrait(hir_def::DefWithBodyId, ExprId),\n }"}, {"sha": "e57d5970f8cfc189afb47ce2af531dc4e6bdc2b3", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -34,7 +34,7 @@ use crate::{\n         make_mut_slice, variant_data,\n     },\n     AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig, GenericPredicate,\n-    OpaqueTy, OpaqueTyId, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n+    ImplTraitId, OpaqueTy, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n     ReturnTypeImplTraits, Substs, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n };\n \n@@ -228,14 +228,12 @@ impl Ty {\n                             Some(GenericDefId::FunctionId(f)) => f,\n                             _ => panic!(\"opaque impl trait lowering in non-function\"),\n                         };\n-                        let impl_trait_id = OpaqueTyId::ReturnTypeImplTrait(func, idx);\n+                        let impl_trait_id = ImplTraitId::ReturnTypeImplTrait(func, idx);\n+                        let opaque_ty_id = ctx.db.intern_impl_trait_id(impl_trait_id).into();\n                         let generics = generics(ctx.db.upcast(), func.into());\n                         let parameters = Substs::bound_vars(&generics, ctx.in_binders);\n-                        TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n-                            opaque_ty_id: impl_trait_id,\n-                            parameters,\n-                        }))\n-                        .intern(&Interner)\n+                        TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, parameters }))\n+                            .intern(&Interner)\n                     }\n                     ImplTraitLoweringMode::Param => {\n                         let idx = ctx.impl_trait_counter.get();"}, {"sha": "1f3e1c07a8ded0130bb868daef505ca2283161ee", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -177,10 +177,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n \n     fn opaque_ty_data(&self, id: chalk_ir::OpaqueTyId<Interner>) -> Arc<OpaqueTyDatum> {\n-        let interned_id = crate::db::InternedOpaqueTyId::from(id);\n-        let full_id = self.db.lookup_intern_impl_trait_id(interned_id);\n+        let full_id = self.db.lookup_intern_impl_trait_id(id.into());\n         let bound = match full_id {\n-            crate::OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+            crate::ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                 let datas = self\n                     .db\n                     .return_type_impl_traits(func)\n@@ -202,7 +201,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 let num_vars = datas.num_binders;\n                 make_binders(bound, num_vars)\n             }\n-            crate::OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n+            crate::ImplTraitId::AsyncBlockTypeImplTrait(..) => {\n                 if let Some((future_trait, future_output)) = self\n                     .db\n                     .lang_item(self.krate, \"future_trait\".into())"}, {"sha": "2a66a23106674bddaf9abb15358631275f2bd6e3", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b035c314b4b0ecd2477fde216dbe7e8801f94d0d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n     AliasTy, CallableDefId, FnPointer, FnSig, GenericPredicate, InEnvironment, OpaqueTy,\n-    OpaqueTyId, ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n+    ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n };\n \n use super::interner::*;\n@@ -41,8 +41,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::AssociatedType(assoc_type_id, substitution).intern(&Interner)\n             }\n \n-            TyKind::OpaqueType(impl_trait_id, substs) => {\n-                let id = impl_trait_id.to_chalk(db);\n+            TyKind::OpaqueType(id, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n             }\n@@ -103,7 +102,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n             }\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                let opaque_ty_id = opaque_ty.opaque_ty_id.to_chalk(db);\n+                let opaque_ty_id = opaque_ty.opaque_ty_id;\n                 let substitution = opaque_ty.parameters.to_chalk(db);\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n                     opaque_ty_id,\n@@ -125,9 +124,9 @@ impl ToChalk for Ty {\n                 TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty, parameters }))\n             }\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(opaque_ty)) => {\n-                let impl_trait_id = from_chalk(db, opaque_ty.opaque_ty_id);\n+                let opaque_ty_id = opaque_ty.opaque_ty_id;\n                 let parameters = from_chalk(db, opaque_ty.substitution);\n-                TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id: impl_trait_id, parameters }))\n+                TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, parameters }))\n             }\n             chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                 num_binders,\n@@ -165,7 +164,7 @@ impl ToChalk for Ty {\n             }\n \n             chalk_ir::TyKind::OpaqueType(opaque_type_id, subst) => {\n-                TyKind::OpaqueType(from_chalk(db, opaque_type_id), from_chalk(db, subst))\n+                TyKind::OpaqueType(opaque_type_id, from_chalk(db, subst))\n             }\n \n             chalk_ir::TyKind::Scalar(scalar) => TyKind::Scalar(scalar),\n@@ -268,21 +267,6 @@ impl ToChalk for hir_def::TraitId {\n     }\n }\n \n-impl ToChalk for OpaqueTyId {\n-    type Chalk = chalk_ir::OpaqueTyId<Interner>;\n-\n-    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::OpaqueTyId<Interner> {\n-        db.intern_impl_trait_id(self).into()\n-    }\n-\n-    fn from_chalk(\n-        db: &dyn HirDatabase,\n-        opaque_ty_id: chalk_ir::OpaqueTyId<Interner>,\n-    ) -> OpaqueTyId {\n-        db.lookup_intern_impl_trait_id(opaque_ty_id.into())\n-    }\n-}\n-\n impl ToChalk for hir_def::ImplId {\n     type Chalk = ImplId;\n "}]}