{"sha": "4f6d05dc483003e89d17c539eba4fc7a503d6390", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNmQwNWRjNDgzMDAzZTg5ZDE3YzUzOWViYTRmYzdhNTAzZDYzOTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T09:33:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-06T10:14:08Z"}, "message": "Allow for re-using monomorphizations from upstream crates.", "tree": {"sha": "f01012216c790f8433bb96adb49209aa3df3755f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01012216c790f8433bb96adb49209aa3df3755f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6d05dc483003e89d17c539eba4fc7a503d6390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6d05dc483003e89d17c539eba4fc7a503d6390", "html_url": "https://github.com/rust-lang/rust/commit/4f6d05dc483003e89d17c539eba4fc7a503d6390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6d05dc483003e89d17c539eba4fc7a503d6390/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435477dc6528932ebf81e038aeceec83aa1c03b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/435477dc6528932ebf81e038aeceec83aa1c03b4", "html_url": "https://github.com/rust-lang/rust/commit/435477dc6528932ebf81e038aeceec83aa1c03b4"}], "stats": {"total": 233, "additions": 195, "deletions": 38}, "files": [{"sha": "9172c3067accd235fa7126745921cfecc747a351", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -657,6 +657,9 @@ define_dep_nodes!( <'tcx>\n     [] ProgramClausesFor(DefId),\n     [] WasmImportModuleMap(CrateNum),\n     [] ForeignModules(CrateNum),\n+\n+    [] UpstreamMonomorphizations(CrateNum),\n+    [] UpstreamMonomorphizationsFor(DefId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "f86913490258e51c11d72f1fba3fe1b08836fd68", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -53,8 +53,21 @@ for &'gcx ty::Slice<T>\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ty::subst::Kind<'gcx> {\n+impl<'a, 'gcx, T> ToStableHashKey<StableHashingContext<'a>> for &'gcx ty::Slice<T>\n+    where T: HashStable<StableHashingContext<'a>>\n+{\n+    type KeyType = Fingerprint;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> Fingerprint {\n+        let mut hasher = StableHasher::new();\n+        let mut hcx: StableHashingContext<'a> = hcx.clone();\n+        self.hash_stable(&mut hcx, &mut hasher);\n+        hasher.finish()\n+    }\n+}\n+\n+impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::subst::Kind<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {"}, {"sha": "312df69d3188f58cd94bed44a1aec2e276b9d6d8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -1304,6 +1304,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"embed LLVM bitcode in object files\"),\n     strip_debuginfo_if_disabled: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"tell the linker to strip debuginfo when building without debuginfo enabled.\"),\n+    share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+          \"make the current crate share its generic instantiations\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "8a58dad292420bb16f00ce3dd931246d742a1bc3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -1499,6 +1499,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.sess.opts.debugging_opts.mir_emit_validate > 0 ||\n             self.use_mir()\n     }\n+\n+    #[inline]\n+    pub fn share_generics(self) -> bool {\n+        match self.sess.opts.debugging_opts.share_generics {\n+            Some(true) => true,\n+            Some(false) | None => false,\n+        }\n+    }\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "16866636cd90aacae94f00970462b272dabc0409", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -131,6 +131,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::coherent_trait<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::upstream_monomorphizations<'tcx> {\n+    fn describe(_: TyCtxt, k: CrateNum) -> String {\n+        format!(\"collecting available upstream monomorphizations `{:?}`\", k)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls<'tcx> {\n     fn describe(_: TyCtxt, k: CrateNum) -> String {\n         format!(\"all inherent impls defined in crate `{:?}`\", k)"}, {"sha": "5f093bc0b488d6d1c0c81aae9167c63f4fd4deab", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -319,9 +319,14 @@ define_maps! { <'tcx>\n     //\n     // Does not include external symbols that don't have a corresponding DefId,\n     // like the compiler-generated `main` function and so on.\n-    [] fn reachable_non_generics: ReachableNonGenerics(CrateNum) -> Lrc<DefIdSet>,\n+    [] fn reachable_non_generics: ReachableNonGenerics(CrateNum)\n+        -> Lrc<DefIdMap<SymbolExportLevel>>,\n     [] fn is_reachable_non_generic: IsReachableNonGeneric(DefId) -> bool,\n \n+    [] fn upstream_monomorphizations: UpstreamMonomorphizations(CrateNum)\n+        -> Lrc<DefIdMap<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>>,\n+    [] fn upstream_monomorphizations_for: UpstreamMonomorphizationsFor(DefId)\n+        -> Option<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>,\n \n     [] fn native_libraries: NativeLibraries(CrateNum) -> Lrc<Vec<NativeLibrary>>,\n "}, {"sha": "b37628c390f5122b76235b9cfdd2c5c4be073a48", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -1094,6 +1094,13 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::WasmCustomSections => { force!(wasm_custom_sections, krate!()); }\n         DepKind::WasmImportModuleMap => { force!(wasm_import_module_map, krate!()); }\n         DepKind::ForeignModules => { force!(foreign_modules, krate!()); }\n+\n+        DepKind::UpstreamMonomorphizations => {\n+            force!(upstream_monomorphizations, krate!());\n+        }\n+        DepKind::UpstreamMonomorphizationsFor => {\n+            force!(upstream_monomorphizations_for, def_id!());\n+        }\n     }\n \n     true"}, {"sha": "51088563c7b9c0d0951ef8260577f0ece00a84c9", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -186,9 +186,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let reachable_non_generics = tcx\n             .exported_symbols(cdata.cnum)\n             .iter()\n-            .filter_map(|&(exported_symbol, _)| {\n+            .filter_map(|&(exported_symbol, export_level)| {\n                 if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n-                    return Some(def_id)\n+                    return Some((def_id, export_level))\n                 } else {\n                     None\n                 }"}, {"sha": "e93b936d4f06e72c19c76e0a4b8fded9602ca4dd", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -569,7 +569,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     ty::TyClosure(def_id, substs) => {\n                         let instance = monomorphize::resolve_closure(\n                             self.tcx, def_id, substs, ty::ClosureKind::FnOnce);\n-                        self.output.push(create_fn_mono_item(instance));\n+                        if should_monomorphize_locally(self.tcx, &instance) {\n+                            self.output.push(create_fn_mono_item(instance));\n+                        }\n                     }\n                     _ => bug!(),\n                 }\n@@ -731,14 +733,16 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n         ty::InstanceDef::Intrinsic(_) |\n         ty::InstanceDef::CloneShim(..) => return true\n     };\n-    match tcx.hir.get_if_local(def_id) {\n+\n+    return match tcx.hir.get_if_local(def_id) {\n         Some(hir_map::NodeForeignItem(..)) => {\n             false // foreign items are linked against, not translated.\n         }\n         Some(_) => true,\n         None => {\n             if tcx.is_reachable_non_generic(def_id) ||\n-                tcx.is_foreign_item(def_id)\n+                tcx.is_foreign_item(def_id) ||\n+                is_available_upstream_generic(tcx, def_id, instance.substs)\n             {\n                 // We can link to the item in question, no instance needed\n                 // in this crate\n@@ -750,6 +754,25 @@ fn should_monomorphize_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance:\n                 true\n             }\n         }\n+    };\n+\n+    fn is_available_upstream_generic<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                               def_id: DefId,\n+                                               substs: &'tcx Substs<'tcx>)\n+                                               -> bool {\n+        debug_assert!(!def_id.is_local());\n+\n+        if !tcx.share_generics() {\n+            return false\n+        }\n+\n+        if substs.types().next().is_none() {\n+            return false\n+        }\n+\n+        tcx.upstream_monomorphizations_for(def_id)\n+           .map(|set| set.contains_key(substs))\n+           .unwrap_or(false)\n     }\n }\n "}, {"sha": "c3437c8d55b53c5a0001242259e1a71c9e6d6081", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -301,6 +301,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut codegen_units = FxHashMap();\n     let is_incremental_build = tcx.sess.opts.incremental.is_some();\n     let mut internalization_candidates = FxHashSet();\n+    let share_generics = tcx.share_generics();\n \n     for trans_item in trans_items {\n         match trans_item.instantiation_mode(tcx) {\n@@ -362,6 +363,13 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 if tcx.lang_items().start_fn() == Some(def_id) {\n                                     can_be_internalized = false;\n                                     Visibility::Hidden\n+                                } else if instance.substs.types().next().is_some() {\n+                                    if share_generics {\n+                                        can_be_internalized = false;\n+                                        Visibility::Default\n+                                    } else {\n+                                        Visibility::Hidden\n+                                    }\n                                 } else if def_id.is_local() {\n                                     if tcx.is_reachable_non_generic(def_id) {\n                                         can_be_internalized = false;"}, {"sha": "69ba55ff8a93999e3d01822d6e6bff942a9c9658", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -20,6 +20,7 @@ use rustc::middle::exported_symbols::{SymbolExportLevel, ExportedSymbol, metadat\n use rustc::session::config;\n use rustc::ty::{TyCtxt, SymbolName};\n use rustc::ty::maps::Providers;\n+use rustc::ty::subst::Substs;\n use rustc::util::nodemap::{FxHashMap, DefIdMap};\n use rustc_allocator::ALLOCATOR_METHODS;\n \n@@ -240,6 +241,30 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         symbols.push((exported_symbol, SymbolExportLevel::Rust));\n     }\n \n+    if tcx.share_generics() {\n+        use rustc::mir::mono::{Linkage, Visibility, MonoItem};\n+        use rustc::ty::InstanceDef;\n+\n+        let (_, cgus) = tcx.collect_and_partition_translation_items(LOCAL_CRATE);\n+\n+        for (mono_item, &(linkage, visibility)) in cgus.iter()\n+                                                       .flat_map(|cgu| cgu.items().iter()) {\n+            if linkage == Linkage::External {\n+                if let &MonoItem::Fn(Instance {\n+                    def: InstanceDef::Item(def_id),\n+                    substs,\n+                }) = mono_item {\n+                    if substs.types().next().is_some() {\n+                        assert!(tcx.lang_items().start_fn() == Some(def_id) ||\n+                                visibility == Visibility::Default);\n+                        symbols.push((ExportedSymbol::Generic(def_id, substs),\n+                                      SymbolExportLevel::Rust));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // Sort so we get a stable incr. comp. hash.\n     symbols.sort_unstable_by(|&(ref symbol1, ..), &(ref symbol2, ..)| {\n         symbol1.compare_stable(tcx, symbol2)\n@@ -248,16 +273,55 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Arc::new(symbols)\n }\n \n+fn upstream_monomorphizations_provider<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    cnum: CrateNum)\n+    -> Lrc<DefIdMap<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>>\n+{\n+    debug_assert!(cnum == LOCAL_CRATE);\n+\n+    let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n+\n+    let mut instances = DefIdMap();\n+\n+    for &cnum in cnums.iter() {\n+        for &(ref exported_symbol, _) in tcx.exported_symbols(cnum).iter() {\n+            if let &ExportedSymbol::Generic(def_id, substs) = exported_symbol {\n+                instances.entry(def_id)\n+                         .or_insert_with(|| FxHashMap())\n+                         .insert(substs, cnum);\n+            }\n+        }\n+    }\n+\n+    Lrc::new(instances.into_iter()\n+                      .map(|(key, value)| (key, Lrc::new(value)))\n+                      .collect())\n+}\n+\n+fn upstream_monomorphizations_for_provider<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId)\n+    -> Option<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>\n+{\n+    debug_assert!(!def_id.is_local());\n+    tcx.upstream_monomorphizations(LOCAL_CRATE)\n+       .get(&def_id)\n+       .cloned()\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     providers.reachable_non_generics = reachable_non_generics_provider;\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_local;\n     providers.exported_symbols = exported_symbols_provider_local;\n     providers.symbol_export_level = symbol_export_level_provider;\n+    providers.upstream_monomorphizations = upstream_monomorphizations_provider;\n }\n \n pub fn provide_extern(providers: &mut Providers) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.symbol_export_level = symbol_export_level_provider;\n+    providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n }\n \n fn symbol_export_level_provider(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {"}, {"sha": "84c07abe49b9cc1431f82f39f70d67cc979d8513", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -148,13 +148,18 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         unsafe {\n             llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n \n-            if cx.tcx.is_translated_item(instance_def_id) {\n-                if instance_def_id.is_local() {\n-                    if !cx.tcx.is_reachable_non_generic(instance_def_id) {\n+            if cx.tcx.share_generics() && instance.substs.types().next().is_some() {\n+                // If this is a generic function and we are sharing generics\n+                // it will always have Visibility::Default\n+            } else {\n+                if cx.tcx.is_translated_item(instance_def_id) {\n+                    if instance_def_id.is_local() {\n+                        if !cx.tcx.is_reachable_non_generic(instance_def_id) {\n+                            llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+                        }\n+                    } else {\n                         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                     }\n-                } else {\n-                    llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                 }\n             }\n         }"}, {"sha": "af174f7ce8516f2eef0b536ce3313951a73ee4f4", "filename": "src/librustc_trans_utils/symbol_names.rs", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6d05dc483003e89d17c539eba4fc7a503d6390/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fsymbol_names.rs?ref=4f6d05dc483003e89d17c539eba4fc7a503d6390", "patch": "@@ -100,7 +100,7 @@\n use rustc::middle::weak_lang_items;\n use rustc_mir::monomorphize::Instance;\n use rustc_mir::monomorphize::item::{MonoItem, MonoItemExt, InstantiationMode};\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::hir::map as hir_map;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::fold::TypeVisitor;\n@@ -170,32 +170,45 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         assert!(!substs.needs_subst());\n         substs.visit_with(&mut hasher);\n \n-        let mut avoid_cross_crate_conflicts = false;\n-\n-        // If this is an instance of a generic function, we also hash in\n-        // the ID of the instantiating crate. This avoids symbol conflicts\n-        // in case the same instances is emitted in two crates of the same\n-        // project.\n-        if substs.types().next().is_some() {\n-            avoid_cross_crate_conflicts = true;\n-        }\n-\n-        // If we're dealing with an instance of a function that's inlined from\n-        // another crate but we're marking it as globally shared to our\n-        // compliation (aka we're not making an internal copy in each of our\n-        // codegen units) then this symbol may become an exported (but hidden\n-        // visibility) symbol. This means that multiple crates may do the same\n-        // and we want to be sure to avoid any symbol conflicts here.\n-        match MonoItem::Fn(instance).instantiation_mode(tcx) {\n-            InstantiationMode::GloballyShared { may_conflict: true } => {\n-                avoid_cross_crate_conflicts = true;\n-            }\n-            _ => {}\n-        }\n+        let is_generic = substs.types().next().is_some();\n+        let avoid_cross_crate_conflicts =\n+            // If this is an instance of a generic function, we also hash in\n+            // the ID of the instantiating crate. This avoids symbol conflicts\n+            // in case the same instances is emitted in two crates of the same\n+            // project.\n+            is_generic ||\n+\n+            // If we're dealing with an instance of a function that's inlined from\n+            // another crate but we're marking it as globally shared to our\n+            // compliation (aka we're not making an internal copy in each of our\n+            // codegen units) then this symbol may become an exported (but hidden\n+            // visibility) symbol. This means that multiple crates may do the same\n+            // and we want to be sure to avoid any symbol conflicts here.\n+            match MonoItem::Fn(instance).instantiation_mode(tcx) {\n+                InstantiationMode::GloballyShared { may_conflict: true } => true,\n+                _ => false,\n+            };\n \n         if avoid_cross_crate_conflicts {\n-            hasher.hash(tcx.crate_name.as_str());\n-            hasher.hash(tcx.sess.local_crate_disambiguator());\n+            let instantiating_crate = if is_generic {\n+                if !def_id.is_local() && tcx.share_generics() {\n+                    // If we are re-using a monomorphization from another crate,\n+                    // we have to compute the symbol hash accordingly.\n+                    let upstream_monomorphizations =\n+                        tcx.upstream_monomorphizations_for(def_id);\n+\n+                    upstream_monomorphizations.and_then(|monos| monos.get(&substs)\n+                                                                     .cloned())\n+                                              .unwrap_or(LOCAL_CRATE)\n+                } else {\n+                    LOCAL_CRATE\n+                }\n+            } else {\n+                LOCAL_CRATE\n+            };\n+\n+            hasher.hash(&tcx.original_crate_name(instantiating_crate).as_str()[..]);\n+            hasher.hash(&tcx.crate_disambiguator(instantiating_crate));\n         }\n     });\n "}]}