{"sha": "a78a1fc97bfa78eba0d276add37aad543e0e610d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OGExZmM5N2JmYTc4ZWJhMGQyNzZhZGQzN2FhZDU0M2UwZTYxMGQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@users.noreply.github.com", "date": "2020-03-04T12:59:58Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-04T13:08:50Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Philipp Krones <hello@philkrones.com>", "tree": {"sha": "5174d1aa1a95beafdd3ffbbff90ade121e850cdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5174d1aa1a95beafdd3ffbbff90ade121e850cdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78a1fc97bfa78eba0d276add37aad543e0e610d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78a1fc97bfa78eba0d276add37aad543e0e610d", "html_url": "https://github.com/rust-lang/rust/commit/a78a1fc97bfa78eba0d276add37aad543e0e610d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78a1fc97bfa78eba0d276add37aad543e0e610d/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246709f89e0e8050ed714dca2155adc4e8d3ab80", "url": "https://api.github.com/repos/rust-lang/rust/commits/246709f89e0e8050ed714dca2155adc4e8d3ab80", "html_url": "https://github.com/rust-lang/rust/commit/246709f89e0e8050ed714dca2155adc4e8d3ab80"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "f054c6ef67d34d9ccb066552ec27f7f5f3c6073a", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a78a1fc97bfa78eba0d276add37aad543e0e610d/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78a1fc97bfa78eba0d276add37aad543e0e610d/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=a78a1fc97bfa78eba0d276add37aad543e0e610d", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use crate::utils::paths::{OPTION, OPTION_NONE};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    higher, match_def_path, match_qpath, match_type, snippet_with_applicability, span_lint_and_then, SpanlessEq,\n+    higher, match_def_path, match_qpath, match_type, snippet_with_applicability, span_lint_and_sugg, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -58,7 +58,7 @@ impl QuestionMark {\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n-                let receiver_str = snippet_with_applicability(cx, subject.span, \"..\", &mut applicability);\n+                let receiver_str = &Sugg::hir_with_applicability(cx, subject, \"..\", &mut applicability);\n                 let mut replacement: Option<String> = None;\n                 if let Some(else_) = else_ {\n                     if_chain! {\n@@ -77,19 +77,14 @@ impl QuestionMark {\n                 }\n \n                 if let Some(replacement_str) = replacement {\n-                    span_lint_and_then(\n+                    span_lint_and_sugg(\n                         cx,\n                         QUESTION_MARK,\n                         expr.span,\n                         \"this block may be rewritten with the `?` operator\",\n-                        |db| {\n-                            db.span_suggestion(\n-                                expr.span,\n-                                \"replace it with\",\n-                                replacement_str,\n-                                applicability,\n-                            );\n-                        }\n+                        \"replace it with\",\n+                        replacement_str,\n+                        applicability,\n                     )\n                }\n             }\n@@ -124,19 +119,14 @@ impl QuestionMark {\n                     if by_ref { \".as_ref()\" } else { \"\" },\n                 );\n \n-                span_lint_and_then(\n+                span_lint_and_sugg(\n                     cx,\n                     QUESTION_MARK,\n                     expr.span,\n                     \"this if-let-else may be rewritten with the `?` operator\",\n-                    |db| {\n-                        db.span_suggestion(\n-                            expr.span,\n-                            \"replace it with\",\n-                            replacement,\n-                            applicability,\n-                        );\n-                    }\n+                    \"replace it with\",\n+                    replacement,\n+                    applicability,\n                 )\n             }\n         }"}]}