{"sha": "1c2a949736a85810127b73dbc1006565689d6fe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMmE5NDk3MzZhODU4MTAxMjdiNzNkYmMxMDA2NTY1Njg5ZDZmZTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:42Z"}, "message": "Rollup merge of #79423 - camelid:smart-punct, r=jyn514\n\nEnable smart punctuation\n\nCloses #76690.", "tree": {"sha": "be64ad8003fc2d62d60b99f9ae72aae731e73965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be64ad8003fc2d62d60b99f9ae72aae731e73965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2a949736a85810127b73dbc1006565689d6fe4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+uCRBK7hj4Ov3rIwAAdHIIAATYZ32/R2SoFkNH1DmkrRMO\nyI6q0r/hQtaXpye32LTENds3NlI7WFp2kxcUyOzp2t3g3ARWLnUkWGLLjagjizui\nvIq5Eu4rQs5Hjimg5fny1rzBfXaL/F6MNd0fRFkXZMJP4nznCJzcelhX4kK+m2dt\nO9oWwHDGQvnI0xWnYT8Mybu8RMfBwAMhWQyNmVlMHmJPSalNpZe7EPciRE5cuIC4\n/Ss51IZaS1Ze8ndVUqlUpI0+9AilSkeGmeBHEcSklmJr6zLF4UZHECOJcxg8RFF3\nDcuXiUjupzUxPD1uSXpX41W0pYqrhiIvJ2BVrSu202lJo3uE0q+XiFpum7gMeOQ=\n=QdMx\n-----END PGP SIGNATURE-----\n", "payload": "tree be64ad8003fc2d62d60b99f9ae72aae731e73965\nparent 11f838d64ae764c6016c2c00f958bec61e9a2691\nparent 1b29b2920033a48ec950a4b4b74402029a155a50\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045102 +0100\ncommitter GitHub <noreply@github.com> 1614045102 +0100\n\nRollup merge of #79423 - camelid:smart-punct, r=jyn514\n\nEnable smart punctuation\n\nCloses #76690.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2a949736a85810127b73dbc1006565689d6fe4", "html_url": "https://github.com/rust-lang/rust/commit/1c2a949736a85810127b73dbc1006565689d6fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2a949736a85810127b73dbc1006565689d6fe4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f838d64ae764c6016c2c00f958bec61e9a2691", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f838d64ae764c6016c2c00f958bec61e9a2691", "html_url": "https://github.com/rust-lang/rust/commit/11f838d64ae764c6016c2c00f958bec61e9a2691"}, {"sha": "1b29b2920033a48ec950a4b4b74402029a155a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b29b2920033a48ec950a4b4b74402029a155a50", "html_url": "https://github.com/rust-lang/rust/commit/1b29b2920033a48ec950a4b4b74402029a155a50"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "688be7aedea38a17ebfd5b456c9081f1adc2caa0", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=1c2a949736a85810127b73dbc1006565689d6fe4", "patch": "@@ -101,7 +101,7 @@ what an item is, how it is used, and for what purpose it exists.\n Let's see an example coming from the [standard library] by taking a look at the\n [`std::env::args()`][env::args] function:\n \n-``````text\n+``````markdown\n Returns the arguments which this program was started with (normally passed\n via the command line).\n \n@@ -135,7 +135,7 @@ for argument in env::args() {\n \n Everything before the first empty line will be reused to describe the component\n in searches and module overviews.  For example, the function `std::env::args()`\n-above will be shown on the [`std::env`] module documentation.  It is good\n+above will be shown on the [`std::env`] module documentation. It is good\n practice to keep the summary to one line: concise writing is a goal of good\n documentation.\n \n@@ -153,9 +153,10 @@ and finally provides a code example.\n \n ## Markdown\n \n-`rustdoc` uses the [CommonMark markdown specification]. You might be\n-interested into taking a look at their website to see what's possible to do.\n- - [commonmark quick reference]\n+`rustdoc` uses the [CommonMark Markdown specification]. You might be\n+interested in taking a look at their website to see what's possible:\n+\n+ - [CommonMark quick reference]\n  - [current spec]\n \n In addition to the standard CommonMark syntax, `rustdoc` supports several\n@@ -240,6 +241,21 @@ This will render as\n \n See the specification for the [task list extension] for more details.\n \n+### Smart punctuation\n+\n+Some ASCII punctuation sequences will be automatically turned into fancy Unicode\n+characters:\n+\n+| ASCII sequence | Unicode |\n+|----------------|---------|\n+| `--`           | \u2013       |\n+| `---`          | \u2014       |\n+| `...`          | \u2026       |\n+| `\"`            | \u201c or \u201d, depending on context |\n+| `'`            | \u2018 or \u2019, depending on context |\n+\n+So, no need to manually enter those Unicode characters!\n+\n [`backtrace`]: https://docs.rs/backtrace/0.3.50/backtrace/\n [commonmark markdown specification]: https://commonmark.org/\n [commonmark quick reference]: https://commonmark.org/help/"}, {"sha": "cb11f22d0d8593afe0c7c022066bb4f536b3a733", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1c2a949736a85810127b73dbc1006565689d6fe4", "patch": "@@ -52,11 +52,12 @@ pub(crate) fn opts() -> Options {\n         | Options::ENABLE_FOOTNOTES\n         | Options::ENABLE_STRIKETHROUGH\n         | Options::ENABLE_TASKLISTS\n+        | Options::ENABLE_SMART_PUNCTUATION\n }\n \n /// A subset of [`opts()`] used for rendering summaries.\n pub(crate) fn summary_opts() -> Options {\n-    Options::ENABLE_STRIKETHROUGH\n+    Options::ENABLE_STRIKETHROUGH | Options::ENABLE_SMART_PUNCTUATION\n }\n \n /// When `to_string` is called, this struct will emit the HTML corresponding to"}, {"sha": "6b2cfe685752da452a8452f7f3ddadf1259954e5", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=1c2a949736a85810127b73dbc1006565689d6fe4", "patch": "@@ -201,8 +201,8 @@ fn test_short_markdown_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n-    t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> ...\");\n-    t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> ...\");\n+    t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> \u2026\");\n+    t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> \u2026\");\n     t(\"# top header\", \"top header\");\n     t(\"## header\", \"header\");\n     t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n@@ -227,8 +227,8 @@ fn test_plain_text_summary() {\n     t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n     t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n     t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n-    t(\"code `let x = i32;` ...\", \"code `let x = i32;` ...\");\n-    t(\"type `Type<'static>` ...\", \"type `Type<'static>` ...\");\n+    t(\"code `let x = i32;` ...\", \"code `let x = i32;` \u2026\");\n+    t(\"type `Type<'static>` ...\", \"type `Type<'static>` \u2026\");\n     t(\"# top header\", \"top header\");\n     t(\"# top header\\n\\nfollowed by some text\", \"top header\");\n     t(\"## header\", \"header\");\n@@ -251,6 +251,6 @@ fn test_markdown_html_escape() {\n     }\n \n     t(\"`Struct<'a, T>`\", \"<p><code>Struct&lt;'a, T&gt;</code></p>\\n\");\n-    t(\"Struct<'a, T>\", \"<p>Struct&lt;'a, T&gt;</p>\\n\");\n+    t(\"Struct<'a, T>\", \"<p>Struct&lt;\u2019a, T&gt;</p>\\n\");\n     t(\"Struct<br>\", \"<p>Struct&lt;br&gt;</p>\\n\");\n }"}, {"sha": "8f0c4e5e6418485cbb4709ace79c66a9f8f38d4d", "filename": "src/test/rustdoc/inline_cross/add-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fadd-docs.rs?ref=1c2a949736a85810127b73dbc1006565689d6fe4", "patch": "@@ -4,6 +4,6 @@ extern crate inner;\n \n \n // @has add_docs/struct.MyStruct.html\n-// @has add_docs/struct.MyStruct.html \"Doc comment from 'pub use', Doc comment from definition\"\n+// @has add_docs/struct.MyStruct.html \"Doc comment from \u2018pub use\u2019, Doc comment from definition\"\n /// Doc comment from 'pub use',\n pub use inner::MyStruct;"}, {"sha": "a1ca2699554e5116c1bdc047dac87015dd31e62c", "filename": "src/test/rustdoc/smart-punct.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2a949736a85810127b73dbc1006565689d6fe4/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsmart-punct.rs?ref=1c2a949736a85810127b73dbc1006565689d6fe4", "patch": "@@ -0,0 +1,30 @@\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+\n+//! This is the \"start\" of the 'document'! How'd you know that \"it's\" the start?\n+//!\n+//! # Header with \"smart punct'\"\n+//!\n+//! [link with \"smart punct'\" -- yessiree!][]\n+//!\n+//! [link with \"smart punct'\" -- yessiree!]: https://www.rust-lang.org\n+//!\n+//! # Code should not be smart-punct'd\n+//!\n+//! `this inline code -- it shouldn't have \"smart punct\"`\n+//!\n+//! ```\n+//! let x = \"don't smart-punct me -- please!\";\n+//! ```\n+//!\n+//! ```text\n+//! I say \"don't smart-punct me -- please!\"\n+//! ```\n+\n+// @has \"foo/index.html\" \"//p\" \"This is the \u201cstart\u201d of the \u2018document\u2019! How\u2019d you know that \u201cit\u2019s\u201d the start?\"\n+// @has \"foo/index.html\" \"//h1\" \"Header with \u201csmart punct\u2019\u201d\"\n+// @has \"foo/index.html\" '//a[@href=\"https://www.rust-lang.org\"]' \"link with \u201csmart punct\u2019\u201d \u2013 yessiree!\"\n+// @has \"foo/index.html\" '//code' \"this inline code -- it shouldn't have \\\"smart punct\\\"\"\n+// @has \"foo/index.html\" '//pre' \"let x = \\\"don't smart-punct me -- please!\\\";\"\n+// @has \"foo/index.html\" '//pre' \"I say \\\"don't smart-punct me -- please!\\\"\""}]}