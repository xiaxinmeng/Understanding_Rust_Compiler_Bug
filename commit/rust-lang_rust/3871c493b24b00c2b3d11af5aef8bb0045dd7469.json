{"sha": "3871c493b24b00c2b3d11af5aef8bb0045dd7469", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzFjNDkzYjI0YjAwYzJiM2QxMWFmNWFlZjhiYjAwNDVkZDc0Njk=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-06T03:21:20Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-06T03:21:20Z"}, "message": "`in_std` -> `frame_in_std`", "tree": {"sha": "a3aa1f2b89146dafd88d05f53a4bcc643cbffda0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3aa1f2b89146dafd88d05f53a4bcc643cbffda0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3871c493b24b00c2b3d11af5aef8bb0045dd7469", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYLw/MBUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLiC3AD+My+OXAlit0vDNuKP0crcG2bSP+tY\nL1VPAasvsILroLkA/j+08YPV1lqTqHBSMOpod+I+hXfVN2u9wmRSg1OSp24D\n=ynGw\n-----END PGP SIGNATURE-----", "payload": "tree a3aa1f2b89146dafd88d05f53a4bcc643cbffda0\nparent 545101040df050dcc412d714640c95f417194600\nauthor hyd-dev <yd-huang@outlook.com> 1622949680 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1622949680 +0800\n\n`in_std` -> `frame_in_std`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3871c493b24b00c2b3d11af5aef8bb0045dd7469", "html_url": "https://github.com/rust-lang/rust/commit/3871c493b24b00c2b3d11af5aef8bb0045dd7469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3871c493b24b00c2b3d11af5aef8bb0045dd7469/comments", "author": null, "committer": null, "parents": [{"sha": "545101040df050dcc412d714640c95f417194600", "url": "https://api.github.com/repos/rust-lang/rust/commits/545101040df050dcc412d714640c95f417194600", "html_url": "https://github.com/rust-lang/rust/commit/545101040df050dcc412d714640c95f417194600"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "52176342057e48735c83a796bd7adce2d511a7fb", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -629,7 +629,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n-    fn in_std(&self) -> bool {\n+    fn frame_in_std(&self) -> bool {\n         let this = self.eval_context_ref();\n         this.tcx.lang_items().start_fn().map_or(false, |start_fn| {\n             this.tcx.def_path(this.frame().instance.def_id()).krate"}, {"sha": "2ecea4d9f41e527bd373dda8e242dfac4ae061df", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -475,7 +475,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_attr_getguardsize\"\n-            if this.in_std() => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _attr, ref guard_size] = check_arg_count(args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n@@ -488,28 +488,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             | \"pthread_attr_init\"\n             | \"pthread_attr_destroy\"\n-            if this.in_std() => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"pthread_attr_setstacksize\"\n-            if this.in_std() => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n \n             | \"signal\"\n             | \"sigaltstack\"\n-            if this.in_std() => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"sigaction\"\n             | \"mprotect\"\n-            if this.in_std() => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;"}, {"sha": "9017dc368b69cfc057f871a1c313c4368ad305ff", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -207,7 +207,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"pthread_getattr_np\" if this.in_std() => {\n+            \"pthread_getattr_np\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _thread, ref _attr] = check_arg_count(args)?;\n                 this.write_null(dest)?;"}, {"sha": "313d38c80b6f5a50a3c0f96de4fe4a67ccb8474c", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -149,7 +149,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"mmap\" if this.in_std() => {\n+            \"mmap\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let &[ref addr, _, _, _, _, _] = check_arg_count(args)?;"}, {"sha": "76657a535541adb0dcdb29b132db74738b21aa0c", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -348,27 +348,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"GetProcessHeap\" if this.in_std() => {\n+            \"GetProcessHeap\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n-            \"SetConsoleTextAttribute\" if this.in_std() => {\n+            \"SetConsoleTextAttribute\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _hConsoleOutput, ref _wAttribute] = check_arg_count(args)?;\n                 // Pretend these does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"AddVectoredExceptionHandler\" if this.in_std() => {\n+            \"AddVectoredExceptionHandler\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _First, ref _Handler] = check_arg_count(args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n-            \"SetThreadStackGuarantee\" if this.in_std() => {\n+            \"SetThreadStackGuarantee\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[_StackSizeInBytes] = check_arg_count(args)?;\n@@ -379,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"EnterCriticalSection\"\n             | \"LeaveCriticalSection\"\n             | \"DeleteCriticalSection\"\n-                if this.in_std() =>\n+                if this.frame_in_std() =>\n             {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n@@ -393,7 +393,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // (Windows locks are reentrant, and we have only 1 thread,\n                 // so not doing any futher checks here is at least not incorrect.)\n             }\n-            \"TryEnterCriticalSection\" if this.in_std() => {\n+            \"TryEnterCriticalSection\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] = check_arg_count(args)?;"}]}