{"sha": "a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Y2U5M2UxM2E5ZjFlN2Q3OTMzY2E3NmY2Y2FlOWM4ZjYxMjdjMzQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-19T00:04:01Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-09-19T00:04:01Z"}, "message": "Introduce Diverges::always constructor\n\nRename the existing Diverges.always method to Diverges.is_always", "tree": {"sha": "438916e3de7817788cc67db43c6456eb00cb1d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/438916e3de7817788cc67db43c6456eb00cb1d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl2CxgIACgkQtAh+UQ6Y\nsWT5sA//ab7aSN/n33A8xClpUOECr9gd09Vke3Bag2bvP0b71c8ETHHJkUBxsH+U\nVJymncI+sWueliFImPdHh7SuDvQBEF9FTbvIssX84QrSQRCAjoW8yeMwYGCO4r2p\nOjuzuGl7lmU5jkwL22aosnyaunWTEhTiMSO0oGngZvDE/fwhUcM/ysd+eTkE+XgS\nb/ToLP8MDhMT81CzwzCkuIWcFssEdeiFPzFMZsK8LId9fhLLmZGTpuqI8T4ctXfD\niJ89VRqxF7Sop3Q/2oTU9h2YavrS6gMasSwduc3cKRmbk68ExnQ0Zg0Dfaf8UnAl\nYLmkBuEQDcho/DC26jjCdXezuwoanQ8MiubcU7AfNiM5ZsOlMtUqjUcT0YCRVEoX\nSIKdYXbR2BNiGzHhyXCs63d4APFONfOErKE4ZXDWFEmXSU/IsqgbX6hq+PyPhmVR\nmiOPVQivD3z+9egmstp33La/bXGVLFdKc89SH9QuhohN0nJQ0jRMsKeEHxycF3fw\nZV2ot/QPOth1Um5X6WQjASkWYN+uaZzRM+WOzhex8ahEbElOp9XHqzFEBGiv2aaW\nmWPI/3dTOlrify2ln4SaiEdT/gmmlVRaq9N1fa450gIHV9oAidG2Fc5jzPuQIByN\nJ6E9dUAeCWZayC/hW1G4ZrTvW3MHrrd7bHWcHmnoKyb7pzXpM4E=\n=MI/H\n-----END PGP SIGNATURE-----", "payload": "tree 438916e3de7817788cc67db43c6456eb00cb1d57\nparent 6edcfbe59a2067df7aadc18de990b9a86216099e\nauthor Aaron Hill <aa1ronham@gmail.com> 1568851441 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1568851441 -0400\n\nIntroduce Diverges::always constructor\n\nRename the existing Diverges.always method to Diverges.is_always\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "html_url": "https://github.com/rust-lang/rust/commit/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6edcfbe59a2067df7aadc18de990b9a86216099e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6edcfbe59a2067df7aadc18de990b9a86216099e", "html_url": "https://github.com/rust-lang/rust/commit/6edcfbe59a2067df7aadc18de990b9a86216099e"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "9481638fc14d8c77d45c7f60e73d51a51bb67082", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "patch": "@@ -43,10 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If there are no arms, that is a diverging match; a special case.\n         if arms.is_empty() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always {\n-                span: expr.span,\n-                custom_note: None\n-            });\n+            self.diverges.set(self.diverges.get() | Diverges::always(expr.span));\n             return tcx.types.never;\n         }\n \n@@ -198,7 +195,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// When the previously checked expression (the scrutinee) diverges,\n     /// warn the user about the match arms being unreachable.\n     fn warn_arms_when_scrutinee_diverges(&self, arms: &'tcx [hir::Arm], source: hir::MatchSource) {\n-        if self.diverges.get().always() {\n+        if self.diverges.get().is_always() {\n             use hir::MatchSource::*;\n             let msg = match source {\n                 IfDesugar { .. } | IfLetDesugar { .. } => \"block in `if` expression\","}, {"sha": "049f2eb16bb00d8b96911f51b3ff9b9f7a07b42e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "patch": "@@ -170,10 +170,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Any expression that produces a value of type `!` must have diverged\n         if ty.is_never() {\n-            self.diverges.set(self.diverges.get() | Diverges::Always {\n-                span: expr.span,\n-                custom_note: None\n-            });\n+            self.diverges.set(self.diverges.get() | Diverges::always(expr.span));\n         }\n \n         // Record the type, which applies it effects."}, {"sha": "410eef5e092d9d1e737d15247e7e80df09bffa6f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a8ce93e13a9f1e7d7933ca76f6cae9c8f6127c34", "patch": "@@ -470,6 +470,16 @@ pub enum Diverges {\n     WarnedAlways\n }\n \n+impl Diverges {\n+    /// Creates a `Diverges::Always` with the provided span and the default note message\n+    fn always(span: Span) -> Diverges {\n+        Diverges::Always {\n+            span,\n+            custom_note: None\n+        }\n+    }\n+}\n+\n // Convenience impls for combinig `Diverges`.\n \n impl ops::BitAnd for Diverges {\n@@ -499,7 +509,7 @@ impl ops::BitOrAssign for Diverges {\n }\n \n impl Diverges {\n-    fn always(self) -> bool {\n+    fn is_always(self) -> bool {\n         // Enum comparison ignores the\n         // contents of fields, so we just\n         // fill them in with garbage here.\n@@ -3852,7 +3862,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n-                if !self.diverges.get().always() {\n+                if !self.diverges.get().is_always() {\n                     // #50009 -- Do not point at the entire fn block span, point at the return type\n                     // span, as it is the cause of the requirement, and\n                     // `consider_hint_about_removing_semicolon` will point at the last expression"}]}