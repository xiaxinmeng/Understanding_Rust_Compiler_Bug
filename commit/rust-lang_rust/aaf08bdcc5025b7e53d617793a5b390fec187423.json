{"sha": "aaf08bdcc5025b7e53d617793a5b390fec187423", "node_id": "C_kwDOAAsO6NoAKGFhZjA4YmRjYzUwMjViN2U1M2Q2MTc3OTNhNWIzOTBmZWMxODc0MjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-13T15:49:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-13T15:49:38Z"}, "message": "Shrink ProcMacroExpander size", "tree": {"sha": "4859818f9e0fb12f12d1623fc21d29bfca0fcf82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4859818f9e0fb12f12d1623fc21d29bfca0fcf82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf08bdcc5025b7e53d617793a5b390fec187423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf08bdcc5025b7e53d617793a5b390fec187423", "html_url": "https://github.com/rust-lang/rust/commit/aaf08bdcc5025b7e53d617793a5b390fec187423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf08bdcc5025b7e53d617793a5b390fec187423/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "html_url": "https://github.com/rust-lang/rust/commit/9fb9ee3b6a56764e589ff8a2b713064439cd76ad"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "6901930133f76a9332586fbfeec749ecbd808526", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaf08bdcc5025b7e53d617793a5b390fec187423/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf08bdcc5025b7e53d617793a5b390fec187423/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=aaf08bdcc5025b7e53d617793a5b390fec187423", "patch": "@@ -87,10 +87,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n                     // FIXME: a hacky way to create a Name from string.\n                     let name =\n                         tt::Ident { text: it.name.clone(), span: tt::TokenId::unspecified() };\n-                    (\n-                        name.as_name(),\n-                        ProcMacroExpander::new(def_map.krate, base_db::ProcMacroId(idx as u32)),\n-                    )\n+                    (name.as_name(), ProcMacroExpander::new(base_db::ProcMacroId(idx as u32)))\n                 })\n                 .collect()\n         }\n@@ -581,7 +578,7 @@ impl DefCollector<'_> {\n         let kind = def.kind.to_basedb_kind();\n         let (expander, kind) = match self.proc_macros.iter().find(|(n, _)| n == &def.name) {\n             Some(&(_, expander)) => (expander, kind),\n-            None => (ProcMacroExpander::dummy(self.def_map.krate), kind),\n+            None => (ProcMacroExpander::dummy(), kind),\n         };\n \n         let proc_macro_id ="}, {"sha": "45572499e84264cdf8ed44c4431e1c655ec0db43", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aaf08bdcc5025b7e53d617793a5b390fec187423/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf08bdcc5025b7e53d617793a5b390fec187423/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=aaf08bdcc5025b7e53d617793a5b390fec187423", "patch": "@@ -210,7 +210,7 @@ pub fn expand_speculative(\n     let mut speculative_expansion = match loc.def.kind {\n         MacroDefKind::ProcMacro(expander, ..) => {\n             tt.delimiter = tt::Delimiter::unspecified();\n-            expander.expand(db, loc.krate, &tt, attr_arg.as_ref())\n+            expander.expand(db, loc.def.krate, loc.krate, &tt, attr_arg.as_ref())\n         }\n         MacroDefKind::BuiltInAttr(BuiltinAttrExpander::Derive, _) => {\n             pseudo_derive_attr_expansion(&tt, attr_arg.as_ref()?)\n@@ -256,9 +256,9 @@ fn parse_macro_expansion(\n     macro_file: MacroFile,\n ) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>> {\n     let _p = profile::span(\"parse_macro_expansion\");\n-    let result = db.macro_expand(macro_file.macro_call_id);\n+    let mbe::ValueResult { value, err } = db.macro_expand(macro_file.macro_call_id);\n \n-    if let Some(err) = &result.err {\n+    if let Some(err) = &err {\n         // Note:\n         // The final goal we would like to make all parse_macro success,\n         // such that the following log will not call anyway.\n@@ -279,9 +279,9 @@ fn parse_macro_expansion(\n             parents\n         );\n     }\n-    let tt = match result.value {\n+    let tt = match value {\n         Some(tt) => tt,\n-        None => return ExpandResult { value: None, err: result.err },\n+        None => return ExpandResult { value: None, err },\n     };\n \n     let expand_to = macro_expand_to(db, macro_file.macro_call_id);\n@@ -291,7 +291,7 @@ fn parse_macro_expansion(\n \n     let (parse, rev_token_map) = token_tree_to_syntax_node(&tt, expand_to);\n \n-    ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err: result.err }\n+    ExpandResult { value: Some((parse, Arc::new(rev_token_map))), err }\n }\n \n fn macro_arg(\n@@ -504,7 +504,7 @@ fn expand_proc_macro(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandResult<t\n         _ => None,\n     };\n \n-    expander.expand(db, loc.krate, &macro_arg.0, attr_arg.as_ref())\n+    expander.expand(db, loc.def.krate, loc.krate, &macro_arg.0, attr_arg.as_ref())\n }\n \n fn hygiene_frame(db: &dyn ExpandDatabase, file_id: HirFileId) -> Arc<HygieneFrame> {"}, {"sha": "d758e9302cd87d90a8d20b048353fcd5af723499", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aaf08bdcc5025b7e53d617793a5b390fec187423/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf08bdcc5025b7e53d617793a5b390fec187423/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=aaf08bdcc5025b7e53d617793a5b390fec187423", "patch": "@@ -7,18 +7,16 @@ use crate::{db::ExpandDatabase, tt, ExpandError, ExpandResult};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n-    krate: CrateId,\n     proc_macro_id: Option<ProcMacroId>,\n }\n \n impl ProcMacroExpander {\n-    pub fn new(krate: CrateId, proc_macro_id: ProcMacroId) -> Self {\n-        Self { krate, proc_macro_id: Some(proc_macro_id) }\n+    pub fn new(proc_macro_id: ProcMacroId) -> Self {\n+        Self { proc_macro_id: Some(proc_macro_id) }\n     }\n \n-    pub fn dummy(krate: CrateId) -> Self {\n-        // FIXME: Should store the name for better errors\n-        Self { krate, proc_macro_id: None }\n+    pub fn dummy() -> Self {\n+        Self { proc_macro_id: None }\n     }\n \n     pub fn is_dummy(&self) -> bool {\n@@ -28,14 +26,15 @@ impl ProcMacroExpander {\n     pub fn expand(\n         self,\n         db: &dyn ExpandDatabase,\n+        def_crate: CrateId,\n         calling_crate: CrateId,\n         tt: &tt::Subtree,\n         attr_arg: Option<&tt::Subtree>,\n     ) -> ExpandResult<tt::Subtree> {\n         match self.proc_macro_id {\n             Some(id) => {\n                 let krate_graph = db.crate_graph();\n-                let proc_macros = match &krate_graph[self.krate].proc_macro {\n+                let proc_macros = match &krate_graph[def_crate].proc_macro {\n                     Ok(proc_macros) => proc_macros,\n                     Err(_) => {\n                         never!(\"Non-dummy expander even though there are no proc macros\");\n@@ -84,7 +83,7 @@ impl ProcMacroExpander {\n             }\n             None => ExpandResult::with_err(\n                 tt::Subtree::empty(),\n-                ExpandError::UnresolvedProcMacro(self.krate),\n+                ExpandError::UnresolvedProcMacro(def_crate),\n             ),\n         }\n     }"}]}