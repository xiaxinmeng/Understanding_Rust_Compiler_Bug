{"sha": "494264711db46c14403c66ffcbfdcd851b34f757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDI2NDcxMWRiNDZjMTQ0MDNjNjZmZmNiZmRjZDg1MWIzNGY3NTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-01T21:53:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-02T02:19:36Z"}, "message": "syntax: Stop parsing old closure syntax", "tree": {"sha": "fcaf94998b44c63815bc55ccfdafebaacf78b7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcaf94998b44c63815bc55ccfdafebaacf78b7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/494264711db46c14403c66ffcbfdcd851b34f757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/494264711db46c14403c66ffcbfdcd851b34f757", "html_url": "https://github.com/rust-lang/rust/commit/494264711db46c14403c66ffcbfdcd851b34f757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/494264711db46c14403c66ffcbfdcd851b34f757/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1fc2b5995fdef69fe1dbdbba3703398c0aa547b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fc2b5995fdef69fe1dbdbba3703398c0aa547b", "html_url": "https://github.com/rust-lang/rust/commit/d1fc2b5995fdef69fe1dbdbba3703398c0aa547b"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "754fbcd23fe32684ae11650c4ee2cebe9843ad94", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/494264711db46c14403c66ffcbfdcd851b34f757/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494264711db46c14403c66ffcbfdcd851b34f757/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=494264711db46c14403c66ffcbfdcd851b34f757", "patch": "@@ -776,8 +776,6 @@ class parser {\n                 hi = self.span.hi;\n                 self.expect(token::RBRACE);\n                 ex = expr_rec(fields, base);\n-            } else if token::is_bar(self.token) {\n-                ret pexpr(self.parse_fn_block_expr_old());\n             } else {\n                 let blk = self.parse_block_tail(lo, default_blk);\n                 ret self.mk_pexpr(blk.span.lo, blk.span.hi, expr_block(blk));\n@@ -1357,14 +1355,6 @@ class parser {\n                          expr_fn(proto, decl, body, capture_clause));\n     }\n \n-    fn parse_fn_block_expr_old() -> @expr {\n-        let lo = self.last_span.lo;\n-        let (decl, captures) = self.parse_fn_block_decl();\n-        let body = self.parse_block_tail(lo, default_blk);\n-        ret self.mk_expr(lo, body.span.hi,\n-                         expr_fn_block(decl, body, captures));\n-    }\n-\n     // `|args| { ... }` like in `do` expressions\n     fn parse_lambda_block_expr() -> @expr {\n         self.parse_lambda_expr_(|| {\n@@ -1379,22 +1369,16 @@ class parser {\n     }\n \n     fn parse_lambda_expr_(parse_body: fn&() -> @expr) -> @expr {\n-        if self.token == token::LBRACE {\n-            // Old style lambdas `{|args| ... }`\n-            self.expect(token::LBRACE);\n-            ret self.parse_fn_block_expr_old();\n-        } else {\n-            let lo = self.last_span.lo;\n-            // New style lambdas `|args| expr`\n-            let (decl, captures) = self.parse_fn_block_decl();\n-            let body = parse_body();\n-            let fakeblock = {view_items: ~[], stmts: ~[], expr: some(body),\n-                             id: self.get_id(), rules: default_blk};\n-            let fakeblock = spanned(body.span.lo, body.span.hi,\n-                                    fakeblock);\n-            ret self.mk_expr(lo, body.span.hi,\n-                             expr_fn_block(decl, fakeblock, captures));\n-        }\n+        let lo = self.last_span.lo;\n+        // New style lambdas `|args| expr`\n+        let (decl, captures) = self.parse_fn_block_decl();\n+        let body = parse_body();\n+        let fakeblock = {view_items: ~[], stmts: ~[], expr: some(body),\n+                         id: self.get_id(), rules: default_blk};\n+        let fakeblock = spanned(body.span.lo, body.span.hi,\n+                                fakeblock);\n+        ret self.mk_expr(lo, body.span.hi,\n+                         expr_fn_block(decl, fakeblock, captures));\n     }\n \n     fn parse_else_expr() -> @expr {"}]}