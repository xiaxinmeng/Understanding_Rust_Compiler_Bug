{"sha": "f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTZkODgyZmVjNjFlZjI5MGI5MDk3Zjg5NmNmYmNmMzlmNWI0YmQ=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T15:42:28Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-28T15:42:28Z"}, "message": "Fix typos and replace static vector with slice", "tree": {"sha": "e1b7c8e926f27430bf514abb5a2281602a9ab0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b7c8e926f27430bf514abb5a2281602a9ab0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "html_url": "https://github.com/rust-lang/rust/commit/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eb4fc800aaf5006f89af3af591e2aa34f469d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb4fc800aaf5006f89af3af591e2aa34f469d81", "html_url": "https://github.com/rust-lang/rust/commit/2eb4fc800aaf5006f89af3af591e2aa34f469d81"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d55813f4cc5adc455b7973788800ff60362bfc40", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e6d882fec61ef290b9097f896cfbcf39f5b4bd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=f3e6d882fec61ef290b9097f896cfbcf39f5b4bd", "patch": "@@ -160,7 +160,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n \n         let mut all_attrs = FindAllAttrs {\n             tcx,\n-            attr_names: vec![sym::rustc_dirty, sym::rustc_clean],\n+            attr_names: &[sym::rustc_dirty, sym::rustc_clean],\n             found_attrs: vec![],\n         };\n         intravisit::walk_crate(&mut all_attrs, krate);\n@@ -299,7 +299,7 @@ impl DirtyCleanVisitor<'tcx> {\n \n                     // Represents a Trait Declaration\n                     // FIXME(michaelwoerister): trait declaration is buggy because sometimes some of\n-                    // the depnodes don't exist (because they legitametely didn't need to be\n+                    // the depnodes don't exist (because they legitimately didn't need to be\n                     // calculated)\n                     //\n                     // michaelwoerister and vitiral came up with a possible solution,\n@@ -512,17 +512,17 @@ fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> Symbol {\n }\n \n // A visitor that collects all #[rustc_dirty]/#[rustc_clean] attributes from\n-// the HIR. It is used to verfiy that we really ran checks for all annotated\n+// the HIR. It is used to verify that we really ran checks for all annotated\n // nodes.\n-pub struct FindAllAttrs<'tcx> {\n+pub struct FindAllAttrs<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    attr_names: Vec<Symbol>,\n+    attr_names: &'a [Symbol],\n     found_attrs: Vec<&'tcx Attribute>,\n }\n \n-impl FindAllAttrs<'tcx> {\n+impl FindAllAttrs<'_, 'tcx> {\n     fn is_active_attr(&mut self, attr: &Attribute) -> bool {\n-        for attr_name in &self.attr_names {\n+        for attr_name in self.attr_names {\n             if self.tcx.sess.check_name(attr, *attr_name) && check_config(self.tcx, attr) {\n                 return true;\n             }\n@@ -543,7 +543,7 @@ impl FindAllAttrs<'tcx> {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n+impl intravisit::Visitor<'tcx> for FindAllAttrs<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}]}