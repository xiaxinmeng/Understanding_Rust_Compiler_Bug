{"sha": "e82be710e47a38dc303ae8f2df02d9a8c682b1b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MmJlNzEwZTQ3YTM4ZGMzMDNhZThmMmRmMDJkOWE4YzY4MmIxYjY=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-14T04:59:55Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-16T03:09:07Z"}, "message": "document how to use memory addresses as operands\n\nCo-authored-by: Amanieu <amanieu@gmail.com>", "tree": {"sha": "f6c3170c7d59701407a7cd3cbfae712dad230e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c3170c7d59701407a7cd3cbfae712dad230e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82be710e47a38dc303ae8f2df02d9a8c682b1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82be710e47a38dc303ae8f2df02d9a8c682b1b6", "html_url": "https://github.com/rust-lang/rust/commit/e82be710e47a38dc303ae8f2df02d9a8c682b1b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82be710e47a38dc303ae8f2df02d9a8c682b1b6/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d96cc238e571ef7d83dcf87239d525d644bbb69", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d96cc238e571ef7d83dcf87239d525d644bbb69", "html_url": "https://github.com/rust-lang/rust/commit/8d96cc238e571ef7d83dcf87239d525d644bbb69"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "df113f0f1613c3fd33d37a13ae1fa9fb992350b7", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e82be710e47a38dc303ae8f2df02d9a8c682b1b6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e82be710e47a38dc303ae8f2df02d9a8c682b1b6/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=e82be710e47a38dc303ae8f2df02d9a8c682b1b6", "patch": "@@ -345,6 +345,25 @@ The `h` modifier will emit the register name for the high byte of that register\n \n If you use a smaller data type (e.g. `u16`) with an operand and forget the use template modifiers, the compiler will emit a warning and suggest the correct modifier to use.\n \n+## Memory address operands\n+\n+Sometimes assembly instructions require operands passed via memory addresses/memory locations.\n+You have to manually use the memory address syntax specified by the respectively architectures.\n+For example, in x86/x86_64 and intel assembly syntax, you should wrap inputs/outputs in `[]`\n+to indicate they are memory operands:\n+\n+```rust,allow_fail\n+# #![feature(asm, llvm_asm)]\n+# fn load_fpu_control_word(control: u16) {\n+unsafe {\n+    asm!(\"fldcw [{}]\", in(reg) &control, options(nostack));\n+\n+    // Previously this would have been written with the deprecated `llvm_asm!` like this\n+    llvm_asm!(\"fldcw $0\" :: \"m\" (control) :: \"volatile\");\n+}\n+# }\n+```\n+\n ## Options\n \n By default, an inline assembly block is treated the same way as an external FFI function call with a custom calling convention: it may read/write memory, have observable side effects, etc. However in many cases, it is desirable to give the compiler more information about what the assembly code is actually doing so that it can optimize better."}]}