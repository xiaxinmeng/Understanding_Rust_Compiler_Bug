{"sha": "fc30266540d4e04c018046bb69098adf68ba9f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzAyNjY1NDBkNGUwNGMwMTgwNDZiYjY5MDk4YWRmNjhiYTlmNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T14:19:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T14:19:29Z"}, "message": "Auto merge of #1265 - RalfJung:float-cast, r=RalfJung\n\ntest floating point casting better", "tree": {"sha": "41d000594e2b8d9d57964e53e2a8c0b458d7743e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d000594e2b8d9d57964e53e2a8c0b458d7743e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc30266540d4e04c018046bb69098adf68ba9f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc30266540d4e04c018046bb69098adf68ba9f6c", "html_url": "https://github.com/rust-lang/rust/commit/fc30266540d4e04c018046bb69098adf68ba9f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc30266540d4e04c018046bb69098adf68ba9f6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89076b43c1a75a445b3ad5540c5d9503b64762b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89076b43c1a75a445b3ad5540c5d9503b64762b", "html_url": "https://github.com/rust-lang/rust/commit/c89076b43c1a75a445b3ad5540c5d9503b64762b"}, {"sha": "b8a817fc03ada9a92df7fe916f1933f5b81f84af", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a817fc03ada9a92df7fe916f1933f5b81f84af", "html_url": "https://github.com/rust-lang/rust/commit/b8a817fc03ada9a92df7fe916f1933f5b81f84af"}], "stats": {"total": 129, "additions": 98, "deletions": 31}, "files": [{"sha": "5a7413e98ea819498d008705eb2cc357d49a0be4", "filename": "tests/run-pass/floats.rs", "status": "modified", "additions": 98, "deletions": 31, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/fc30266540d4e04c018046bb69098adf68ba9f6c/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc30266540d4e04c018046bb69098adf68ba9f6c/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=fc30266540d4e04c018046bb69098adf68ba9f6c", "patch": "@@ -1,40 +1,107 @@\n+#![feature(track_caller)]\n+use std::fmt::Debug;\n+\n+// Helper function to avoid promotion so that this tests \"run-time\" casts, not CTFE.\n+// Doesn't make a big difference when running this in Miri, but when running this in\n+// rustc (with -Zmir-opt-level=0) for comparison it means we use LLVM casts.\n+#[track_caller]\n+#[inline(never)]\n+fn assert_eq<T: PartialEq + Debug>(x: T, y: T) {\n+    assert_eq!(x, y);\n+}\n+\n fn main() {\n-    assert_eq!(6.0_f32*6.0_f32, 36.0_f32);\n-    assert_eq!(6.0_f64*6.0_f64, 36.0_f64);\n-    assert_eq!(-{5.0_f32}, -5.0_f32);\n+    // basic arithmetic\n+    assert_eq(6.0_f32*6.0_f32, 36.0_f32);\n+    assert_eq(6.0_f64*6.0_f64, 36.0_f64);\n+    assert_eq(-{5.0_f32}, -5.0_f32);\n+    assert_eq(-{5.0_f64}, -5.0_f64);\n+    // infinities, NaN\n     assert!((5.0_f32/0.0).is_infinite());\n+    assert!((5.0_f64/0.0).is_infinite());\n     assert!((-5.0_f32).sqrt().is_nan());\n+    assert!((-5.0_f64).sqrt().is_nan());\n+    // byte-level transmute\n     let x: u64 = unsafe { std::mem::transmute(42.0_f64) };\n     let y: f64 = unsafe { std::mem::transmute(x) };\n-    assert_eq!(y, 42.0_f64);\n-\n-    assert_eq!(5.0f32 as u32, 5);\n-    assert_eq!(5.0f32 as i32, 5);\n-    assert_eq!(-5.0f32 as i32, -5);\n-\n-    assert_eq!((1.0 as f32).max(-1.0), 1.0);\n-    assert_eq!((1.0 as f32).min(-1.0), -1.0);\n-    assert_eq!(std::f32::NAN.min(9.0), 9.0);\n-    assert_eq!(std::f32::NAN.max(-9.0), -9.0);\n-    assert_eq!((9.0 as f32).min(std::f32::NAN), 9.0);\n-    assert_eq!((-9.0 as f32).max(std::f32::NAN), -9.0);\n-\n-    assert_eq!((1.0 as f64).max(-1.0), 1.0);\n-    assert_eq!((1.0 as f64).min(-1.0), -1.0);\n-    assert_eq!(std::f64::NAN.min(9.0), 9.0);\n-    assert_eq!(std::f64::NAN.max(-9.0), -9.0);\n-    assert_eq!((9.0 as f64).min(std::f64::NAN), 9.0);\n-    assert_eq!((-9.0 as f64).max(std::f64::NAN), -9.0);\n-\n-    assert_eq!(3.5_f32.copysign(0.42), 3.5_f32);\n-    assert_eq!(3.5_f32.copysign(-0.42), -3.5_f32);\n-    assert_eq!((-3.5_f32).copysign(0.42), 3.5_f32);\n-    assert_eq!((-3.5_f32).copysign(-0.42), -3.5_f32);\n+    assert_eq(y, 42.0_f64);\n+    let x: u32 = unsafe { std::mem::transmute(42.0_f32) };\n+    let y: f32 = unsafe { std::mem::transmute(x) };\n+    assert_eq(y, 42.0_f32);\n+\n+    // f32-to-int casts\n+    assert_eq(5.0f32 as u32, 5);\n+    assert_eq(-5.0f32 as u32, 0);\n+    assert_eq(5.0f32 as i32, 5);\n+    assert_eq(-5.0f32 as i32, -5);\n+    assert_eq(std::f32::MAX as i32, i32::MAX);\n+    assert_eq(std::f32::INFINITY as i32, i32::MAX);\n+    assert_eq(std::f32::MAX as u32, u32::MAX);\n+    assert_eq(std::f32::INFINITY as u32, u32::MAX);\n+    assert_eq(std::f32::MIN as i32, i32::MIN);\n+    assert_eq(std::f32::NEG_INFINITY as i32, i32::MIN);\n+    assert_eq(std::f32::MIN as u32, 0);\n+    assert_eq(std::f32::NEG_INFINITY as u32, 0);\n+    assert_eq(std::f32::NAN as i32, 0);\n+    assert_eq(std::f32::NAN as u32, 0);\n+    assert_eq(u128::MAX as f32, std::f32::INFINITY);\n+    assert_eq((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n+    assert_eq((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n+\n+    // f64-to-int casts\n+    assert_eq(5.0f64 as u64, 5);\n+    assert_eq(-5.0f64 as u64, 0);\n+    assert_eq(5.0f64 as i64, 5);\n+    assert_eq(-5.0f64 as i64, -5);\n+    assert_eq(std::f64::MAX as i64, i64::MAX);\n+    assert_eq(std::f64::INFINITY as i64, i64::MAX);\n+    assert_eq(std::f64::MAX as u64, u64::MAX);\n+    assert_eq(std::f64::INFINITY as u64, u64::MAX);\n+    assert_eq(std::f64::MIN as i64, i64::MIN);\n+    assert_eq(std::f64::NEG_INFINITY as i64, i64::MIN);\n+    assert_eq(std::f64::MIN as u64, 0);\n+    assert_eq(std::f64::NEG_INFINITY as u64, 0);\n+    assert_eq(std::f64::NAN as i64, 0);\n+    assert_eq(std::f64::NAN as u64, 0);\n+    assert_eq(u128::MAX as f64 as u128, u128::MAX);\n+    assert_eq((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n+    assert_eq((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n+\n+    // f32 <-> f64 casts\n+    assert_eq(5.0f64 as f32, 5.0f32);\n+    assert_eq(5.0f32 as f64, 5.0f64);\n+    assert_eq(std::f64::MAX as f32, std::f32::INFINITY);\n+    assert_eq(std::f64::MIN as f32, std::f32::NEG_INFINITY);\n+    assert_eq(std::f32::INFINITY as f64, std::f64::INFINITY);\n+    assert_eq(std::f32::NEG_INFINITY as f64, std::f64::NEG_INFINITY);\n+\n+    // f32 min/max\n+    assert_eq((1.0 as f32).max(-1.0), 1.0);\n+    assert_eq((1.0 as f32).min(-1.0), -1.0);\n+    assert_eq(std::f32::NAN.min(9.0), 9.0);\n+    assert_eq(std::f32::NAN.max(-9.0), -9.0);\n+    assert_eq((9.0 as f32).min(std::f32::NAN), 9.0);\n+    assert_eq((-9.0 as f32).max(std::f32::NAN), -9.0);\n+\n+    // f64 min/max\n+    assert_eq((1.0 as f64).max(-1.0), 1.0);\n+    assert_eq((1.0 as f64).min(-1.0), -1.0);\n+    assert_eq(std::f64::NAN.min(9.0), 9.0);\n+    assert_eq(std::f64::NAN.max(-9.0), -9.0);\n+    assert_eq((9.0 as f64).min(std::f64::NAN), 9.0);\n+    assert_eq((-9.0 as f64).max(std::f64::NAN), -9.0);\n+\n+    // f32 copysign\n+    assert_eq(3.5_f32.copysign(0.42), 3.5_f32);\n+    assert_eq(3.5_f32.copysign(-0.42), -3.5_f32);\n+    assert_eq((-3.5_f32).copysign(0.42), 3.5_f32);\n+    assert_eq((-3.5_f32).copysign(-0.42), -3.5_f32);\n     assert!(std::f32::NAN.copysign(1.0).is_nan());\n \n-    assert_eq!(3.5_f64.copysign(0.42), 3.5_f64);\n-    assert_eq!(3.5_f64.copysign(-0.42), -3.5_f64);\n-    assert_eq!((-3.5_f64).copysign(0.42), 3.5_f64);\n-    assert_eq!((-3.5_f64).copysign(-0.42), -3.5_f64);\n+    // f64 copysign\n+    assert_eq(3.5_f64.copysign(0.42), 3.5_f64);\n+    assert_eq(3.5_f64.copysign(-0.42), -3.5_f64);\n+    assert_eq((-3.5_f64).copysign(0.42), 3.5_f64);\n+    assert_eq((-3.5_f64).copysign(-0.42), -3.5_f64);\n     assert!(std::f64::NAN.copysign(1.0).is_nan());\n }"}]}