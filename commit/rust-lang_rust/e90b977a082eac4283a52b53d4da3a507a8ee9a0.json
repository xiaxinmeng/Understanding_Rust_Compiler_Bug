{"sha": "e90b977a082eac4283a52b53d4da3a507a8ee9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MGI5NzdhMDgyZWFjNDI4M2E1MmI1M2Q0ZGEzYTUwN2E4ZWU5YTA=", "commit": {"author": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-11-22T13:04:18Z"}, "committer": {"name": "Takayuki Nakata", "email": "f.seasons017@gmail.com", "date": "2020-12-07T07:42:43Z"}, "message": "Fix FP in `unnecessary_lazy_evaluations`", "tree": {"sha": "493bcdfde7d00fb02e9eb621269bc3d92c98fb2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/493bcdfde7d00fb02e9eb621269bc3d92c98fb2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e90b977a082eac4283a52b53d4da3a507a8ee9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e90b977a082eac4283a52b53d4da3a507a8ee9a0", "html_url": "https://github.com/rust-lang/rust/commit/e90b977a082eac4283a52b53d4da3a507a8ee9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e90b977a082eac4283a52b53d4da3a507a8ee9a0/comments", "author": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giraffate", "id": 17407489, "node_id": "MDQ6VXNlcjE3NDA3NDg5", "avatar_url": "https://avatars.githubusercontent.com/u/17407489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giraffate", "html_url": "https://github.com/giraffate", "followers_url": "https://api.github.com/users/giraffate/followers", "following_url": "https://api.github.com/users/giraffate/following{/other_user}", "gists_url": "https://api.github.com/users/giraffate/gists{/gist_id}", "starred_url": "https://api.github.com/users/giraffate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giraffate/subscriptions", "organizations_url": "https://api.github.com/users/giraffate/orgs", "repos_url": "https://api.github.com/users/giraffate/repos", "events_url": "https://api.github.com/users/giraffate/events{/privacy}", "received_events_url": "https://api.github.com/users/giraffate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1664c50b27a51f7a78c93ba65558e7c33eabee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1664c50b27a51f7a78c93ba65558e7c33eabee6", "html_url": "https://github.com/rust-lang/rust/commit/c1664c50b27a51f7a78c93ba65558e7c33eabee6"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "fc0db7f64ec9550dbc0dc830c6fb5c833a2a6a24", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e90b977a082eac4283a52b53d4da3a507a8ee9a0/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90b977a082eac4283a52b53d4da3a507a8ee9a0/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=e90b977a082eac4283a52b53d4da3a507a8ee9a0", "patch": "@@ -116,20 +116,27 @@ pub struct ParamBindingIdCollector {\n }\n impl<'tcx> ParamBindingIdCollector {\n     fn collect_binding_hir_ids(body: &'tcx hir::Body<'tcx>) -> Vec<hir::HirId> {\n-        let mut finder = ParamBindingIdCollector {\n-            binding_hir_ids: Vec::new(),\n-        };\n-        finder.visit_body(body);\n-        finder.binding_hir_ids\n+        let mut hir_ids: Vec<hir::HirId> = Vec::new();\n+        for param in body.params.iter() {\n+            let mut finder = ParamBindingIdCollector {\n+                binding_hir_ids: Vec::new(),\n+            };\n+            finder.visit_param(param);\n+            for hir_id in &finder.binding_hir_ids {\n+                hir_ids.push(*hir_id);\n+            }\n+        }\n+        hir_ids\n     }\n }\n impl<'tcx> intravisit::Visitor<'tcx> for ParamBindingIdCollector {\n     type Map = Map<'tcx>;\n \n-    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        if let hir::PatKind::Binding(_, hir_id, ..) = param.pat.kind {\n+    fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {\n+        if let hir::PatKind::Binding(_, hir_id, ..) = pat.kind {\n             self.binding_hir_ids.push(hir_id);\n         }\n+        intravisit::walk_pat(self, pat);\n     }\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "b05dd143bfd745f6901e2fd34109bdae5fdd611c", "filename": "tests/ui/unnecessary_lazy_eval_unfixable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e90b977a082eac4283a52b53d4da3a507a8ee9a0/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90b977a082eac4283a52b53d4da3a507a8ee9a0/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval_unfixable.rs?ref=e90b977a082eac4283a52b53d4da3a507a8ee9a0", "patch": "@@ -15,4 +15,8 @@ fn main() {\n     }\n     let _ = Ok(1).unwrap_or_else(|e::E| 2);\n     let _ = Ok(1).unwrap_or_else(|SomeStruct { .. }| 2);\n+\n+    // Fix #6343\n+    let arr = [(Some(1),)];\n+    Some(&0).and_then(|&i| arr[i].0);\n }"}]}