{"sha": "a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDAxNGJkYmMwMTU5YzZlZDYwZTI5ZGMwYzNlZjMxMTBmZjk3NzY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-06T17:33:02Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-08T10:59:36Z"}, "message": "Avoid using the `copy_nonoverlapping` wrapper through `mem::replace`.", "tree": {"sha": "41f372818dfbd78e9fead123f7b5b9b75813f6b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f372818dfbd78e9fead123f7b5b9b75813f6b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "html_url": "https://github.com/rust-lang/rust/commit/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c29cc8fd09889880880cb6081174c79744ab1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c29cc8fd09889880880cb6081174c79744ab1b6", "html_url": "https://github.com/rust-lang/rust/commit/4c29cc8fd09889880880cb6081174c79744ab1b6"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "47fad15e333570d74dbab05ecf887b330803c986", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "patch": "@@ -685,6 +685,13 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n pub const unsafe fn read<T>(src: *const T) -> T {\n+    // We are calling the intrinsics directly to avoid function calls in the generated code\n+    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n     let mut tmp = MaybeUninit::<T>::uninit();\n     // SAFETY: the caller must guarantee that `src` is valid for reads.\n     // `src` cannot overlap `tmp` because `tmp` was just allocated on"}, {"sha": "47f4fc27fd85a68e1dbaec7c45dcbcad168ca5a5", "filename": "src/test/codegen/mem-replace-direct-memcpy.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "patch": "@@ -0,0 +1,25 @@\n+// This test ensures that `mem::replace::<T>` only ever calls `@llvm.memcpy`\n+// with `size_of::<T>()` as the size, and never goes through any wrapper that\n+// may e.g. multiply `size_of::<T>()` with a variable \"count\" (which is only\n+// known to be `1` after inlining).\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn replace_byte(dst: &mut u8, src: u8) -> u8 {\n+    std::mem::replace(dst, src)\n+}\n+\n+// NOTE(eddyb) the `CHECK-NOT`s ensure that the only calls of `@llvm.memcpy` in\n+// the entire output, are the two direct calls we want, from `ptr::{read,write}`.\n+\n+// CHECK-NOT: call void @llvm.memcpy\n+// CHECK: ; core::ptr::read\n+// CHECK-NOT: call void @llvm.memcpy\n+// CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{.*}}(i8* align 1 %{{.*}}, i8* align 1 %src, i{{.*}} 1, i1 false)\n+// CHECK-NOT: call void @llvm.memcpy\n+// CHECK: ; core::ptr::write\n+// CHECK-NOT: call void @llvm.memcpy\n+// CHECK: call void @llvm.memcpy.p0i8.p0i8.i{{.*}}(i8* align 1 %dst, i8* align 1 %src, i{{.*}} 1, i1 false)\n+// CHECK-NOT: call void @llvm.memcpy"}, {"sha": "62af6a6adb64478441e7e25df9bbc1c1a24ed86f", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=a1d014bdbc0159c6ed60e29dc0c3ef3110ff9776", "patch": "@@ -1,35 +1,25 @@\n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $DIR/out_of_bounds_read.rs:13:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n    |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n \n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n@@ -42,18 +32,13 @@ LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n    |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n \n error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-   |\n-  ::: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-   |         --------------------------------------------- inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n+   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n   ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |"}]}