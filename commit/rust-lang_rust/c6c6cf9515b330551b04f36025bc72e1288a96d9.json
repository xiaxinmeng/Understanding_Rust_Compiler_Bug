{"sha": "c6c6cf9515b330551b04f36025bc72e1288a96d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YzZjZjk1MTViMzMwNTUxYjA0ZjM2MDI1YmM3MmUxMjg4YTk2ZDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-09T15:51:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-17T19:12:21Z"}, "message": "AST/HIR: Clarify what the optional name in extern crate items mean", "tree": {"sha": "226aa15ee6064f21ffa27f206ff54081829d25d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226aa15ee6064f21ffa27f206ff54081829d25d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c6cf9515b330551b04f36025bc72e1288a96d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c6cf9515b330551b04f36025bc72e1288a96d9", "html_url": "https://github.com/rust-lang/rust/commit/c6c6cf9515b330551b04f36025bc72e1288a96d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c6cf9515b330551b04f36025bc72e1288a96d9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b6bf54fdf56195baf9a8ee7383551b0d468c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b6bf54fdf56195baf9a8ee7383551b0d468c81", "html_url": "https://github.com/rust-lang/rust/commit/61b6bf54fdf56195baf9a8ee7383551b0d468c81"}], "stats": {"total": 100, "additions": 42, "deletions": 58}, "files": [{"sha": "972278bdf865fb5bd61db6acc405caa4e05f4c16", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -444,10 +444,10 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_name(item.span, item.name);\n     match item.node {\n-        ItemExternCrate(opt_name) => {\n+        ItemExternCrate(orig_name) => {\n             visitor.visit_id(item.id);\n-            if let Some(name) = opt_name {\n-                visitor.visit_name(item.span, name);\n+            if let Some(orig_name) = orig_name {\n+                visitor.visit_name(item.span, orig_name);\n             }\n         }\n         ItemUse(ref path, _) => {"}, {"sha": "41950d21c09c839f8645dbf22094f0da4ae72bb0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -1904,7 +1904,7 @@ impl<'a> LoweringContext<'a> {\n                        i: &ItemKind)\n                        -> hir::Item_ {\n         match *i {\n-            ItemKind::ExternCrate(string) => hir::ItemExternCrate(string),\n+            ItemKind::ExternCrate(orig_name) => hir::ItemExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n                 // Start with an empty prefix\n                 let prefix = Path {"}, {"sha": "46c79d03149ef632eb977c792f6bfbe82582008a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -2011,9 +2011,9 @@ pub struct Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Item_ {\n-    /// An `extern crate` item, with optional original crate name,\n+    /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n-    /// e.g. `extern crate foo` or `extern crate foo_bar as foo`\n+    /// E.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ItemExternCrate(Option<Name>),\n \n     /// `use foo::bar::*;` or `use foo::bar::baz as quux;`"}, {"sha": "3d38c0c8ed9e57f396076d84786fdc54bdc13e43", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -524,15 +524,10 @@ impl<'a> State<'a> {\n         self.print_outer_attributes(&item.attrs)?;\n         self.ann.pre(self, NodeItem(item))?;\n         match item.node {\n-            hir::ItemExternCrate(ref optional_path) => {\n+            hir::ItemExternCrate(orig_name) => {\n                 self.head(&visibility_qualified(&item.vis, \"extern crate\"))?;\n-                if let Some(p) = *optional_path {\n-                    let val = p.as_str();\n-                    if val.contains(\"-\") {\n-                        self.print_string(&val, ast::StrStyle::Cooked)?;\n-                    } else {\n-                        self.print_name(p)?;\n-                    }\n+                if let Some(orig_name) = orig_name {\n+                    self.print_name(orig_name)?;\n                     self.s.space()?;\n                     self.s.word(\"as\")?;\n                     self.s.space()?;"}, {"sha": "e764cedd658b5df4070f031fcd0f5bc33c26c663", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -851,7 +851,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {\n }\n \n impl_stable_hash_for!(enum hir::Item_ {\n-    ItemExternCrate(name),\n+    ItemExternCrate(orig_name),\n     ItemUse(path, use_kind),\n     ItemStatic(ty, mutability, body_id),\n     ItemConst(ty, body_id),"}, {"sha": "0d91074e946bda028c813aebb2804082c91569fe", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -385,7 +385,7 @@ top_level_options!(\n         externs: Externs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n         // An optional name to use as the crate for std during std injection,\n-        // written `extern crate std = \"name\"`. Default to \"std\". Used by\n+        // written `extern crate name as std`. Defaults to `std`. Used by\n         // out-of-tree drivers.\n         alt_std_name: Option<String> [TRACKED],\n         // Indicates how the compiler should treat unstable features"}, {"sha": "710fef8db40de1e244741e9b1aa9d20abbf27514", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -683,7 +683,7 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n     });\n \n     krate = time(sess, \"crate injection\", || {\n-        let alt_std_name = sess.opts.alt_std_name.clone();\n+        let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| &**s);\n         syntax::std_inject::maybe_inject_crates_ref(krate, alt_std_name)\n     });\n "}, {"sha": "ee372c0bc5d1636a4ac733fd67386398cbfd1c18", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -1052,12 +1052,14 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n     fn process_item(&mut self, item: &ast::Item, definitions: &Definitions) {\n         match item.node {\n-            ast::ItemKind::ExternCrate(rename) => {\n-                debug!(\"resolving extern crate stmt. ident: {} rename: {:?}\", item.ident, rename);\n-                let rename = match rename {\n-                    Some(rename) => {\n-                        validate_crate_name(Some(self.sess), &rename.as_str(), Some(item.span));\n-                        rename\n+            ast::ItemKind::ExternCrate(orig_name) => {\n+                debug!(\"resolving extern crate stmt. ident: {} orig_name: {:?}\",\n+                       item.ident, orig_name);\n+                let orig_name = match orig_name {\n+                    Some(orig_name) => {\n+                        validate_crate_name(Some(self.sess), &orig_name.as_str(),\n+                                            Some(item.span));\n+                        orig_name\n                     }\n                     None => item.ident.name,\n                 };\n@@ -1068,7 +1070,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n                 };\n \n                 let (cnum, ..) = self.resolve_crate(\n-                    &None, item.ident.name, rename, None, item.span, PathKind::Crate, dep_kind,\n+                    &None, item.ident.name, orig_name, None, item.span, PathKind::Crate, dep_kind,\n                 );\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();"}, {"sha": "335064402c475019bff67770b2f3c16ab4134baa", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -255,7 +255,7 @@ impl<'a> Resolver<'a> {\n                 );\n             }\n \n-            ItemKind::ExternCrate(as_name) => {\n+            ItemKind::ExternCrate(orig_name) => {\n                 self.crate_loader.process_item(item, &self.definitions);\n \n                 // n.b. we don't need to look at the path option here, because cstore already did\n@@ -274,7 +274,7 @@ impl<'a> Resolver<'a> {\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(module)),\n-                    subclass: ImportDirectiveSubclass::ExternCrate(as_name),\n+                    subclass: ImportDirectiveSubclass::ExternCrate(orig_name),\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),"}, {"sha": "f45a5b030db2bf354b0095e5ccc58c7004826bcd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -406,13 +406,13 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             // If we're inlining, skip private items.\n             _ if self.inlining && item.vis != hir::Public => {}\n             hir::ItemGlobalAsm(..) => {}\n-            hir::ItemExternCrate(ref p) => {\n+            hir::ItemExternCrate(orig_name) => {\n                 let def_id = self.cx.tcx.hir.local_def_id(item.id);\n                 om.extern_crates.push(ExternCrate {\n                     cnum: self.cx.tcx.extern_mod_stmt_cnum(def_id)\n                                 .unwrap_or(LOCAL_CRATE),\n                     name,\n-                    path: p.map(|x|x.to_string()),\n+                    path: orig_name.map(|x|x.to_string()),\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n                     whence: item.span,"}, {"sha": "7ced642482477695b0d5307e25927145f9c14e04", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -2055,7 +2055,7 @@ pub struct Item {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ItemKind {\n-    /// An `extern crate` item, with optional original crate name.\n+    /// An `extern crate` item, with optional *original* crate name if the crate was renamed.\n     ///\n     /// E.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ExternCrate(Option<Name>),"}, {"sha": "1a65fb7639a43f3b5e6e9dbcb8fee20612207df9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -886,7 +886,7 @@ pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n \n pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n     match i {\n-        ItemKind::ExternCrate(string) => ItemKind::ExternCrate(string),\n+        ItemKind::ExternCrate(orig_name) => ItemKind::ExternCrate(orig_name),\n         ItemKind::Use(use_tree) => {\n             ItemKind::Use(use_tree.map(|tree| folder.fold_use_tree(tree)))\n         }"}, {"sha": "d1234d25764d87799acd19ffe42e2428d84b047e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -6291,23 +6291,17 @@ impl<'a> Parser<'a> {\n                                lo: Span,\n                                visibility: Visibility,\n                                attrs: Vec<Attribute>)\n-                                -> PResult<'a, P<Item>> {\n-\n-        let crate_name = self.parse_ident()?;\n-        let (maybe_path, ident) = if let Some(ident) = self.parse_rename()? {\n-            (Some(crate_name.name), ident)\n+                               -> PResult<'a, P<Item>> {\n+        let orig_name = self.parse_ident()?;\n+        let (item_name, orig_name) = if let Some(rename) = self.parse_rename()? {\n+            (rename, Some(orig_name.name))\n         } else {\n-            (None, crate_name)\n+            (orig_name, None)\n         };\n         self.expect(&token::Semi)?;\n \n-        let prev_span = self.prev_span;\n-\n-        Ok(self.mk_item(lo.to(prev_span),\n-                        ident,\n-                        ItemKind::ExternCrate(maybe_path),\n-                        visibility,\n-                        attrs))\n+        let span = lo.to(self.prev_span);\n+        Ok(self.mk_item(span, item_name, ItemKind::ExternCrate(orig_name), visibility, attrs))\n     }\n \n     /// Parse `extern` for foreign ABIs"}, {"sha": "097c0fd16d0842c14e564d96066aa0237b6e32b1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -1174,15 +1174,10 @@ impl<'a> State<'a> {\n         self.print_outer_attributes(&item.attrs)?;\n         self.ann.pre(self, NodeItem(item))?;\n         match item.node {\n-            ast::ItemKind::ExternCrate(ref optional_path) => {\n+            ast::ItemKind::ExternCrate(orig_name) => {\n                 self.head(&visibility_qualified(&item.vis, \"extern crate\"))?;\n-                if let Some(p) = *optional_path {\n-                    let val = p.as_str();\n-                    if val.contains('-') {\n-                        self.print_string(&val, ast::StrStyle::Cooked)?;\n-                    } else {\n-                        self.print_name(p)?;\n-                    }\n+                if let Some(orig_name) = orig_name {\n+                    self.print_name(orig_name)?;\n                     self.s.space()?;\n                     self.s.word(\"as\")?;\n                     self.s.space()?;"}, {"sha": "59425929f7ed0533aab57bd3d0bfa622cb7c97cc", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -43,7 +43,7 @@ thread_local! {\n     static INJECTED_CRATE_NAME: Cell<Option<&'static str>> = Cell::new(None);\n }\n \n-pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<String>) -> ast::Crate {\n+pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<&str>) -> ast::Crate {\n     let name = if attr::contains_name(&krate.attrs, \"no_core\") {\n         return krate;\n     } else if attr::contains_name(&krate.attrs, \"no_std\") {\n@@ -54,14 +54,12 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<Strin\n \n     INJECTED_CRATE_NAME.with(|opt_name| opt_name.set(Some(name)));\n \n-    let crate_name = Symbol::intern(&alt_std_name.unwrap_or_else(|| name.to_string()));\n-\n     krate.module.items.insert(0, P(ast::Item {\n         attrs: vec![attr::mk_attr_outer(DUMMY_SP,\n                                         attr::mk_attr_id(),\n                                         attr::mk_word_item(Symbol::intern(\"macro_use\")))],\n         vis: dummy_spanned(ast::VisibilityKind::Inherited),\n-        node: ast::ItemKind::ExternCrate(Some(crate_name)),\n+        node: ast::ItemKind::ExternCrate(alt_std_name.map(Symbol::intern)),\n         ident: ast::Ident::from_str(name),\n         id: ast::DUMMY_NODE_ID,\n         span: DUMMY_SP,"}, {"sha": "3bf9bfab2456366d8a47c4d09458d53493363528", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c6cf9515b330551b04f36025bc72e1288a96d9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c6c6cf9515b330551b04f36025bc72e1288a96d9", "patch": "@@ -213,9 +213,9 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n     visitor.visit_vis(&item.vis);\n     visitor.visit_ident(item.span, item.ident);\n     match item.node {\n-        ItemKind::ExternCrate(opt_name) => {\n-            if let Some(name) = opt_name {\n-                visitor.visit_name(item.span, name);\n+        ItemKind::ExternCrate(orig_name) => {\n+            if let Some(orig_name) = orig_name {\n+                visitor.visit_name(item.span, orig_name);\n             }\n         }\n         ItemKind::Use(ref use_tree) => {"}]}