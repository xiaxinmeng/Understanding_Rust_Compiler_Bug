{"sha": "dfd0626dbfea6816d38e6f72ce84f567877603e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZDA2MjZkYmZlYTY4MTZkMzhlNmY3MmNlODRmNTY3ODc3NjAzZTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-07T19:53:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-07T19:53:34Z"}, "message": "Merge #6754\n\n6754: Apply environment set by build scripts r=jonas-schievink a=jonas-schievink\n\nFixes inclusion of generated files in typenum/heapless/defmt etc.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "d3c6ac0eb9ad7d3d516f532df8e607b781942709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c6ac0eb9ad7d3d516f532df8e607b781942709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd0626dbfea6816d38e6f72ce84f567877603e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfzog+CRBK7hj4Ov3rIwAAdHIIAHK85jR66p51tmXeqTkbLBhE\nL/9m1Vd3dNoCf3qB6BzW3sKq+ZswyFZXULABFnr99Id4BhDXuRkYfB/xD30/LEDO\nvYPoBCxOHaklkeFVDCQU4/BerdYKNZi6TDfhKJ4A1PQti05VL18BTZm9tK567grG\nQGa7mkf1ZGfI1LrkWJ0vrwRfsCYzSNeV5+XWNYrkzbyPSfm0q3gGQDrdHZU5eWOM\nzRMO58MjQ3cWQSoNTvwGQPB0RWakidjw/mQ6eMV1UFOqWV+Qm0hkd41lazOmkkZU\nSuVuR1aw0gD7AZUe7pGGT2WcwOCXXCZjK8udVj9cqSWphPeKu2ZEu/E28j+OxA8=\n=omax\n-----END PGP SIGNATURE-----\n", "payload": "tree d3c6ac0eb9ad7d3d516f532df8e607b781942709\nparent d6aa1ba7d4c4e7cd0f82f3d0d4f8ec3c364dfc6a\nparent eeeacc4727b9263f6ad33ae08ce38c38eb52c5f3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607370814 +0000\ncommitter GitHub <noreply@github.com> 1607370814 +0000\n\nMerge #6754\n\n6754: Apply environment set by build scripts r=jonas-schievink a=jonas-schievink\n\nFixes inclusion of generated files in typenum/heapless/defmt etc.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0626dbfea6816d38e6f72ce84f567877603e7", "html_url": "https://github.com/rust-lang/rust/commit/dfd0626dbfea6816d38e6f72ce84f567877603e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0626dbfea6816d38e6f72ce84f567877603e7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6aa1ba7d4c4e7cd0f82f3d0d4f8ec3c364dfc6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6aa1ba7d4c4e7cd0f82f3d0d4f8ec3c364dfc6a", "html_url": "https://github.com/rust-lang/rust/commit/d6aa1ba7d4c4e7cd0f82f3d0d4f8ec3c364dfc6a"}, {"sha": "eeeacc4727b9263f6ad33ae08ce38c38eb52c5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeeacc4727b9263f6ad33ae08ce38c38eb52c5f3", "html_url": "https://github.com/rust-lang/rust/commit/eeeacc4727b9263f6ad33ae08ce38c38eb52c5f3"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "e6491b75444ae63ff2d8efacda1bbf6eebccd1db", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0626dbfea6816d38e6f72ce84f567877603e7/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0626dbfea6816d38e6f72ce84f567877603e7/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=dfd0626dbfea6816d38e6f72ce84f567877603e7", "patch": "@@ -88,6 +88,7 @@ pub struct PackageData {\n     pub edition: Edition,\n     pub features: Vec<String>,\n     pub cfgs: Vec<CfgFlag>,\n+    pub envs: Vec<(String, String)>,\n     pub out_dir: Option<AbsPathBuf>,\n     pub proc_macro_dylib_path: Option<AbsPathBuf>,\n }\n@@ -173,11 +174,13 @@ impl CargoWorkspace {\n \n         let mut out_dir_by_id = FxHashMap::default();\n         let mut cfgs = FxHashMap::default();\n+        let mut envs = FxHashMap::default();\n         let mut proc_macro_dylib_paths = FxHashMap::default();\n         if config.load_out_dirs_from_check {\n             let resources = load_extern_resources(cargo_toml, config)?;\n             out_dir_by_id = resources.out_dirs;\n             cfgs = resources.cfgs;\n+            envs = resources.env;\n             proc_macro_dylib_paths = resources.proc_dylib_paths;\n         }\n \n@@ -205,6 +208,7 @@ impl CargoWorkspace {\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n                 cfgs: cfgs.get(&id).cloned().unwrap_or_default(),\n+                envs: envs.get(&id).cloned().unwrap_or_default(),\n                 out_dir: out_dir_by_id.get(&id).cloned(),\n                 proc_macro_dylib_path: proc_macro_dylib_paths.get(&id).cloned(),\n             });\n@@ -289,6 +293,7 @@ pub(crate) struct ExternResources {\n     out_dirs: FxHashMap<PackageId, AbsPathBuf>,\n     proc_dylib_paths: FxHashMap<PackageId, AbsPathBuf>,\n     cfgs: FxHashMap<PackageId, Vec<CfgFlag>>,\n+    env: FxHashMap<PackageId, Vec<(String, String)>>,\n }\n \n pub(crate) fn load_extern_resources(\n@@ -323,7 +328,13 @@ pub(crate) fn load_extern_resources(\n     for message in cargo_metadata::Message::parse_stream(output.stdout.as_slice()) {\n         if let Ok(message) = message {\n             match message {\n-                Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n+                Message::BuildScriptExecuted(BuildScript {\n+                    package_id,\n+                    out_dir,\n+                    cfgs,\n+                    env,\n+                    ..\n+                }) => {\n                     let cfgs = {\n                         let mut acc = Vec::new();\n                         for cfg in cfgs {\n@@ -341,8 +352,10 @@ pub(crate) fn load_extern_resources(\n                     if out_dir != PathBuf::default() {\n                         let out_dir = AbsPathBuf::assert(out_dir);\n                         res.out_dirs.insert(package_id.clone(), out_dir);\n-                        res.cfgs.insert(package_id, cfgs);\n+                        res.cfgs.insert(package_id.clone(), cfgs);\n                     }\n+\n+                    res.env.insert(package_id, env);\n                 }\n                 Message::CompilerArtifact(message) => {\n                     if message.target.kind.contains(&\"proc-macro\".to_string()) {"}, {"sha": "7f4a7e56b3708dba5f9a0910c16b9d514fafb466", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0626dbfea6816d38e6f72ce84f567877603e7/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0626dbfea6816d38e6f72ce84f567877603e7/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=dfd0626dbfea6816d38e6f72ce84f567877603e7", "patch": "@@ -453,13 +453,18 @@ fn add_target_crate_root(\n         opts.extend(pkg.cfgs.iter().cloned());\n         opts\n     };\n+\n     let mut env = Env::default();\n+    for (k, v) in &pkg.envs {\n+        env.set(k, v.clone());\n+    }\n     if let Some(out_dir) = &pkg.out_dir {\n         // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n         if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n             env.set(\"OUT_DIR\", out_dir);\n         }\n     }\n+\n     let proc_macro =\n         pkg.proc_macro_dylib_path.as_ref().map(|it| proc_macro_loader(&it)).unwrap_or_default();\n "}]}