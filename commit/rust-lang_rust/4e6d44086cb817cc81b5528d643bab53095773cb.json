{"sha": "4e6d44086cb817cc81b5528d643bab53095773cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNmQ0NDA4NmNiODE3Y2M4MWI1NTI4ZDY0M2JhYjUzMDk1NzczY2I=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-02T23:41:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-02T23:41:59Z"}, "message": "Merge pull request #87 from rust-lang/feat/sat-abs-neg\n\nAdd saturating abs/neg", "tree": {"sha": "d833cff6ee3b40352bb76800868d7f420b70d76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d833cff6ee3b40352bb76800868d7f420b70d76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e6d44086cb817cc81b5528d643bab53095773cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ6vHCRBK7hj4Ov3rIwAAdHIIABEalBIfVBkz3gDjADldGP+t\nAwEZIluG/JWbLyFxXzeKJIrQT0cagEmmlQZLXVUQUo2QUik3PDHnaBEVPC/Xwf8R\nWYSpoFBJL3xa5RgdzFxNxPIydXm6LmyzqO3Ywoa1v6KMgISAc1Ad2z5qk9XuV3zO\noMNBLpjzbxdq5Mzf3G3glnT5vBgjyybOgiTt4r8zFQlEwWmmMSEWgYyFBI6/yiSr\nf4PHR1CGqi9dEdDAAoEjKzqC6tt+QesoEYAyr2JTg20Ij+FDCadGh2TkxqgyJptE\ng8+PE8K9Iizri5HgaJdNiQkmEWj7CJsBS7uKJScUz0mFOCc9M9biD4dKP9ngJmc=\n=jM2t\n-----END PGP SIGNATURE-----\n", "payload": "tree d833cff6ee3b40352bb76800868d7f420b70d76b\nparent 6620015a779a5391808d16d3e65459bd0bdfb65b\nparent 331230fabff28d2c883967e2ac4ef02eaea4db5c\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1617406919 -0400\ncommitter GitHub <noreply@github.com> 1617406919 -0400\n\nMerge pull request #87 from rust-lang/feat/sat-abs-neg\n\nAdd saturating abs/neg"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e6d44086cb817cc81b5528d643bab53095773cb", "html_url": "https://github.com/rust-lang/rust/commit/4e6d44086cb817cc81b5528d643bab53095773cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e6d44086cb817cc81b5528d643bab53095773cb/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6620015a779a5391808d16d3e65459bd0bdfb65b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6620015a779a5391808d16d3e65459bd0bdfb65b", "html_url": "https://github.com/rust-lang/rust/commit/6620015a779a5391808d16d3e65459bd0bdfb65b"}, {"sha": "331230fabff28d2c883967e2ac4ef02eaea4db5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/331230fabff28d2c883967e2ac4ef02eaea4db5c", "html_url": "https://github.com/rust-lang/rust/commit/331230fabff28d2c883967e2ac4ef02eaea4db5c"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "eb46feb5c4b4c2910fee0b9a4f27b017ee32a72c", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4e6d44086cb817cc81b5528d643bab53095773cb/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e6d44086cb817cc81b5528d643bab53095773cb/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=4e6d44086cb817cc81b5528d643bab53095773cb", "patch": "@@ -78,6 +78,43 @@ macro_rules! impl_int_arith {\n             pub fn saturating_sub(self, second: Self) -> Self {\n                 unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n             }\n+\n+            /// Lanewise saturating absolute value, implemented in Rust.\n+            /// As abs(), except the MIN value becomes MAX instead of itself.\n+            ///\n+            /// # Examples\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::splat([MIN, -2, 0, 3]);\")]\n+            /// let unsat = x.abs();\n+            /// let sat = x.saturating_abs();\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, 0, 3]);\")]\n+            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, 0, 3]));\")]\n+            /// ```\n+            #[inline]\n+            pub fn saturating_abs(self) -> Self {\n+                // arith shift for -1 or 0 mask based on sign bit, giving 2s complement\n+                const SHR: $n = <$n>::BITS as $n - 1;\n+                let m = self >> SHR;\n+                (self^m).saturating_sub(m)\n+            }\n+\n+            /// Lanewise saturating negation, implemented in Rust.\n+            /// As neg(), except the MIN value becomes MAX instead of itself.\n+            ///\n+            /// # Examples\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::splat([MIN, -2, 3, MAX]);\")]\n+            /// let unsat = -x;\n+            /// let sat = x.saturating_neg();\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, -3, MIN + 1]);\")]\n+            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, -3, MIN + 1]));\")]\n+            /// ```\n+            #[inline]\n+            pub fn saturating_neg(self) -> Self {\n+                Self::splat(0).saturating_sub(self)\n+            }\n         })+\n     }\n }"}]}