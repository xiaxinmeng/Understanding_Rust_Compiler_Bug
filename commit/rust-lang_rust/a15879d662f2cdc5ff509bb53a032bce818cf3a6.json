{"sha": "a15879d662f2cdc5ff509bb53a032bce818cf3a6", "node_id": "C_kwDOAAsO6NoAKGExNTg3OWQ2NjJmMmNkYzVmZjUwOWJiNTNhMDMyYmNlODE4Y2YzYTY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-06T00:51:51Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-06T00:53:21Z"}, "message": "Emit item no type error even if type inference fails", "tree": {"sha": "38a48de8324400724e914b775cd04d6745c8e1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a48de8324400724e914b775cd04d6745c8e1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15879d662f2cdc5ff509bb53a032bce818cf3a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15879d662f2cdc5ff509bb53a032bce818cf3a6", "html_url": "https://github.com/rust-lang/rust/commit/a15879d662f2cdc5ff509bb53a032bce818cf3a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15879d662f2cdc5ff509bb53a032bce818cf3a6/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "url": "https://api.github.com/repos/rust-lang/rust/commits/55111d656f7ecd511ebfad09d3b4b41e44cbcc23", "html_url": "https://github.com/rust-lang/rust/commit/55111d656f7ecd511ebfad09d3b4b41e44cbcc23"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "cee3679d0a052207e79ba3f14e72c81dd190771a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a15879d662f2cdc5ff509bb53a032bce818cf3a6/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15879d662f2cdc5ff509bb53a032bce818cf3a6/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a15879d662f2cdc5ff509bb53a032bce818cf3a6", "patch": "@@ -752,29 +752,31 @@ fn infer_placeholder_type<'a>(\n     // us to improve in typeck so we do that now.\n     match tcx.sess.diagnostic().steal_diagnostic(span, StashKey::ItemNoType) {\n         Some(mut err) => {\n-            // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n-            // We are typeck and have the real type, so remove that and suggest the actual type.\n-            err.suggestions.clear();\n-\n-            // Suggesting unnameable types won't help.\n-            let mut mk_nameable = MakeNameable::new(tcx);\n-            let ty = mk_nameable.fold_ty(ty);\n-            let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n-            if let Some(sugg_ty) = sugg_ty {\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\"provide a type for the {item}\", item = kind),\n-                    format!(\"{}: {}\", item_ident, sugg_ty),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                err.span_note(\n-                    tcx.hir().body(body_id).value.span,\n-                    &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n-                );\n+            if !ty.references_error() {\n+                // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n+                // We are typeck and have the real type, so remove that and suggest the actual type.\n+                err.suggestions.clear();\n+\n+                // Suggesting unnameable types won't help.\n+                let mut mk_nameable = MakeNameable::new(tcx);\n+                let ty = mk_nameable.fold_ty(ty);\n+                let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n+                if let Some(sugg_ty) = sugg_ty {\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"provide a type for the {item}\", item = kind),\n+                        format!(\"{}: {}\", item_ident, sugg_ty),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.span_note(\n+                        tcx.hir().body(body_id).value.span,\n+                        &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                    );\n+                }\n             }\n \n-            err.emit_unless(ty.references_error());\n+            err.emit();\n         }\n         None => {\n             let mut diag = bad_placeholder_type(tcx, vec![span], kind);"}]}