{"sha": "aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZjM5OGYyNmE1ZWFiYmM4OWYyOGFiY2I3OWI0Nzc4YmU5ZTc0YTY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-17T19:00:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:42Z"}, "message": "Graphviz based flow graph pretty-printing.\n\nPassing `--pretty flowgraph=<NODEID>` makes rustc print a control flow graph.\n\nIn pratice, you will also need to pass the additional option:\n`-o <FILE>` to emit output to a `.dot` file for graphviz.\n\n(You can only print the flow-graph for a particular block in the AST.)\n\n----\n\nAn interesting implementation detail is the way the code puts both the\nnode index (`cfg::CFGIndex`) and a reference to the payload\n(`cfg::CFGNode`) into the single `Node` type that is used for\nlabelling and walking the graph.  I had once mistakenly thought that I\nonly wanted the `cfg::CFGNode`, but for labelling, you really want the\ncfg index too, rather than e.g. trying to use the `ast::NodeId` as the\nlabel (which breaks down e.g. due to `ast::DUMMY_NODE_ID`).\n\n----\n\nAs a drive-by fix, I had to fix `rustc::middle::cfg::construct`\ninterface to reflect changes that have happened on the master branch\nwhile I was getting this integrated into the compiler.  (The next\ncommit actually adds tests of the `--pretty flowgraph` functionality,\nso that should ensure that the `rustc::middle::cfg` code does not go\nstale again.)", "tree": {"sha": "c25c990aa95e7bb0c8e3622105f26faef2802d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25c990aa95e7bb0c8e3622105f26faef2802d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "html_url": "https://github.com/rust-lang/rust/commit/aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b65fe4480eef5ed1cd755db00217913706ea21", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b65fe4480eef5ed1cd755db00217913706ea21", "html_url": "https://github.com/rust-lang/rust/commit/65b65fe4480eef5ed1cd755db00217913706ea21"}], "stats": {"total": 237, "additions": 203, "deletions": 34}, "files": [{"sha": "943cd528fcdc95b5527a2d039ff24aad40d65050", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -59,12 +59,13 @@ TOOLS := compiletest rustdoc rustc\n DEPS_core :=\n DEPS_rlibc :=\n DEPS_std := core libc native:rustrt native:compiler-rt native:backtrace native:jemalloc\n+DEPS_graphviz := std\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize collections log fmt_macros\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n-              collections time log\n+              collections time log graphviz\n DEPS_rustdoc := rustc native:hoedown serialize sync getopts collections \\\n                 test time\n DEPS_flate := std native:miniz"}, {"sha": "cd9e50157f2e2d3c4f46643c4426d95807e3e886", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -516,12 +516,13 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         optopt( \"\",  \"out-dir\", \"Write output to compiler-chosen filename in <dir>\", \"DIR\"),\n         optflag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, or link\"),\n         optflagopt(\"\", \"pretty\",\n-                 \"Pretty-print the input instead of compiling;\n-                  valid types are: normal (un-annotated source),\n-                  expanded (crates expanded),\n-                  typed (crates expanded, with type annotations),\n-                  or identified (fully parenthesized,\n-                  AST nodes and blocks with IDs)\", \"TYPE\"),\n+                   \"Pretty-print the input instead of compiling;\n+                   valid types are: `normal` (un-annotated source),\n+                   `expanded` (crates expanded),\n+                   `typed` (crates expanded, with type annotations),\n+                   `expanded,identified` (fully parenthesized, AST nodes with IDs), or\n+                   `flowgraph=<nodeid>` (graphviz formatted flowgraph for node)\",\n+                 \"TYPE\"),\n         optflagopt(\"\", \"dep-info\",\n                  \"Output dependency info to <filename> after compiling, \\\n                   in a format suitable for use by Makefiles\", \"FILENAME\"),"}, {"sha": "5f9fd7124a9e92289804ed8e3da117b5c3fed88d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -11,19 +11,24 @@\n \n use back::link;\n use driver::session::Session;\n-use driver::config;\n+use driver::{config, PpMode};\n+use driver::PpmFlowGraph; // FIXME (#14221).\n use front;\n use lib::llvm::{ContextRef, ModuleRef};\n use metadata::common::LinkMeta;\n use metadata::creader;\n use metadata::creader::Loader;\n+use middle::cfg;\n+use middle::cfg::graphviz::LabelledCFG;\n use middle::{trans, freevars, kind, ty, typeck, lint, reachable};\n use middle::dependency_format;\n use middle;\n use util::common::time;\n use util::ppaux;\n use util::nodemap::{NodeSet};\n \n+use dot = graphviz;\n+\n use serialize::{json, Encodable};\n \n use std::io;\n@@ -582,14 +587,14 @@ impl pprust::PpAnn for TypedAnnotation {\n pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n                           input: &Input,\n-                          ppm: ::driver::PpMode,\n+                          ppm: PpMode,\n                           ofile: Option<Path>) {\n     let krate = phase_1_parse_input(&sess, cfg, input);\n     let id = link::find_crate_id(krate.attrs.as_slice(),\n                                  input.filestem().as_slice());\n \n     let (krate, ast_map, is_expanded) = match ppm {\n-        PpmExpanded | PpmExpandedIdentified | PpmTyped => {\n+        PpmExpanded | PpmExpandedIdentified | PpmTyped | PpmFlowGraph(_) => {\n             let loader = &mut Loader::new(&sess);\n             let (krate, ast_map) = phase_2_configure_and_expand(&sess,\n                                                                 loader,\n@@ -644,6 +649,18 @@ pub fn pretty_print_input(sess: Session,\n                                 &annotation,\n                                 is_expanded)\n         }\n+        PpmFlowGraph(nodeid) => {\n+            let ast_map = ast_map.expect(\"--pretty flowgraph missing ast_map\");\n+            let node = ast_map.find(nodeid).unwrap_or_else(|| {\n+                fail!(\"--pretty flowgraph=id couldn't find id: {}\", id)\n+            });\n+            let block = match node {\n+                syntax::ast_map::NodeBlock(block) => block,\n+                _ => fail!(\"--pretty=flowgraph needs block, got {:?}\", node)\n+            };\n+            let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n+            print_flowgraph(analysis, block, out)\n+        }\n         _ => {\n             pprust::print_crate(sess.codemap(),\n                                 sess.diagnostic(),\n@@ -658,6 +675,32 @@ pub fn pretty_print_input(sess: Session,\n \n }\n \n+fn print_flowgraph<W:io::Writer>(analysis: CrateAnalysis,\n+                                 block: ast::P<ast::Block>,\n+                                 mut out: W) -> io::IoResult<()> {\n+    let ty_cx = &analysis.ty_cx;\n+    let cfg = cfg::CFG::new(ty_cx, block);\n+    let lcfg = LabelledCFG { ast_map: &ty_cx.map,\n+                             cfg: &cfg,\n+                             name: format!(\"block{}\", block.id).to_strbuf(), };\n+    debug!(\"cfg: {:?}\", cfg);\n+    let r = dot::render(&lcfg, &mut out);\n+    return expand_err_details(r);\n+\n+    fn expand_err_details(r: io::IoResult<()>) -> io::IoResult<()> {\n+        r.map_err(|ioerr| {\n+            let orig_detail = ioerr.detail.clone();\n+            let m = \"graphviz::render failed\";\n+            io::IoError {\n+                detail: Some(match orig_detail {\n+                    None => m.into_owned(), Some(d) => format!(\"{}: {}\", m, d)\n+                }),\n+                ..ioerr\n+            }\n+        })\n+    }\n+}\n+\n pub fn collect_crate_types(session: &Session,\n                            attrs: &[ast::Attribute]) -> Vec<config::CrateType> {\n     // If we're generating a test executable, then ignore all other output"}, {"sha": "5a1e27a52560d701369dbd56da04070d957e82bf", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -285,20 +285,32 @@ pub enum PpMode {\n     PpmExpanded,\n     PpmTyped,\n     PpmIdentified,\n-    PpmExpandedIdentified\n+    PpmExpandedIdentified,\n+    PpmFlowGraph(ast::NodeId),\n }\n \n pub fn parse_pretty(sess: &Session, name: &str) -> PpMode {\n-    match name {\n-        \"normal\" => PpmNormal,\n-        \"expanded\" => PpmExpanded,\n-        \"typed\" => PpmTyped,\n-        \"expanded,identified\" => PpmExpandedIdentified,\n-        \"identified\" => PpmIdentified,\n+    let mut split = name.splitn('=', 1);\n+    let first = split.next().unwrap();\n+    let opt_second = split.next();\n+    match (opt_second, first) {\n+        (None, \"normal\")       => PpmNormal,\n+        (None, \"expanded\")     => PpmExpanded,\n+        (None, \"typed\")        => PpmTyped,\n+        (None, \"expanded,identified\") => PpmExpandedIdentified,\n+        (None, \"identified\")   => PpmIdentified,\n+        (Some(s), \"flowgraph\") => {\n+             match from_str(s) {\n+                 Some(id) => PpmFlowGraph(id),\n+                 None => sess.fatal(format!(\"`pretty flowgraph=<nodeid>` needs \\\n+                                             an integer <nodeid>; got {}\", s))\n+             }\n+        }\n         _ => {\n-            sess.fatal(\"argument to `pretty` must be one of `normal`, \\\n-                        `expanded`, `typed`, `identified`, \\\n-                        or `expanded,identified`\");\n+            sess.fatal(format!(\n+                \"argument to `pretty` must be one of `normal`, \\\n+                 `expanded`, `flowgraph=<nodeid>`, `typed`, `identified`, \\\n+                 or `expanded,identified`; got {}\", name));\n         }\n     }\n }"}, {"sha": "18c59a955b527a413d9e1ed4c54c0f436d106a20", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -33,6 +33,7 @@ This API is completely unstable and subject to change.\n \n extern crate flate;\n extern crate arena;\n+extern crate graphviz;\n extern crate syntax;\n extern crate serialize;\n extern crate sync;\n@@ -122,4 +123,3 @@ pub mod lib {\n pub fn main() {\n     std::os::set_exit_status(driver::main_args(std::os::args().as_slice()));\n }\n-"}, {"sha": "c9c397d3d6121141a0cc6a7dc901dfe884ff3653", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -18,7 +18,6 @@ use util::nodemap::NodeMap;\n \n struct CFGBuilder<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n     exit_map: NodeMap<CFGIndex>,\n     graph: CFGGraph,\n     fn_exit: CFGIndex,\n@@ -32,7 +31,6 @@ struct LoopScope {\n }\n \n pub fn construct(tcx: &ty::ctxt,\n-                 method_map: typeck::MethodMap,\n                  blk: &ast::Block) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = add_initial_dummy_node(&mut graph);\n@@ -49,7 +47,6 @@ pub fn construct(tcx: &ty::ctxt,\n         graph: graph,\n         fn_exit: fn_exit,\n         tcx: tcx,\n-        method_map: method_map,\n         loop_scopes: Vec::new()\n     };\n     block_exit = cfg_builder.block(blk, entry);\n@@ -551,6 +548,6 @@ impl<'a> CFGBuilder<'a> {\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n         let method_call = typeck::MethodCall::expr(expr.id);\n-        self.method_map.borrow().contains_key(&method_call)\n+        self.tcx.method_map.borrow().contains_key(&method_call)\n     }\n }"}, {"sha": "b8baeefd3d02efdfa8b8e0b75883b6bd5d969866", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// This module provides linkage between rustc::middle::graph and\n+/// libgraphviz traits.\n+\n+/// For clarity, rename the graphviz crate locally to dot.\n+use dot = graphviz;\n+\n+use syntax::ast;\n+use syntax::ast_map;\n+\n+use middle::cfg;\n+\n+pub type Node<'a> = (cfg::CFGIndex, &'a cfg::CFGNode);\n+pub type Edge<'a> = &'a cfg::CFGEdge;\n+\n+pub struct LabelledCFG<'a>{\n+    pub ast_map: &'a ast_map::Map,\n+    pub cfg: &'a cfg::CFG,\n+    pub name: StrBuf,\n+}\n+\n+fn replace_newline_with_backslash_l(s: StrBuf) -> StrBuf {\n+    // Replacing newlines with \\\\l causes each line to be left-aligned,\n+    // improving presentation of (long) pretty-printed expressions.\n+    if s.as_slice().contains(\"\\n\") {\n+        let mut s = s.replace(\"\\n\", \"\\\\l\");\n+        // Apparently left-alignment applies to the line that precedes\n+        // \\l, not the line that follows; so, add \\l at end of string\n+        // if not already present, ensuring last line gets left-aligned\n+        // as well.\n+        let mut last_two : Vec<_> = s.chars().rev().take(2).collect();\n+        last_two.reverse();\n+        if last_two.as_slice() != ['\\\\', 'l'] {\n+            s = s.append(\"\\\\l\");\n+        }\n+        s.to_strbuf()\n+    } else {\n+        s\n+    }\n+}\n+\n+impl<'a> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a> {\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(self.name.as_slice()) }\n+\n+    fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> {\n+        dot::Id::new(format!(\"N{:u}\", i.node_id()))\n+    }\n+\n+    fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> {\n+        if i == self.cfg.entry {\n+            dot::LabelStr(\"entry\".into_maybe_owned())\n+        } else if i == self.cfg.exit {\n+            dot::LabelStr(\"exit\".into_maybe_owned())\n+        } else if n.data.id == ast::DUMMY_NODE_ID {\n+            dot::LabelStr(\"(dummy_node)\".into_maybe_owned())\n+        } else {\n+            let s = self.ast_map.node_to_str(n.data.id);\n+            // left-aligns the lines\n+            let s = replace_newline_with_backslash_l(s);\n+            dot::EscStr(s.into_maybe_owned())\n+        }\n+    }\n+\n+    fn edge_label(&self, e: &Edge<'a>) -> dot::LabelText<'a> {\n+        let mut label = StrBuf::new();\n+        let mut put_one = false;\n+        for (i, &node_id) in e.data.exiting_scopes.iter().enumerate() {\n+            if put_one {\n+                label = label.append(\",\\\\l\");\n+            } else {\n+                put_one = true;\n+            }\n+            let s = self.ast_map.node_to_str(node_id);\n+            // left-aligns the lines\n+            let s = replace_newline_with_backslash_l(s);\n+            label = label.append(format!(\"exiting scope_{} {}\", i, s.as_slice()));\n+        }\n+        dot::EscStr(label.into_maybe_owned())\n+    }\n+}\n+\n+impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG {\n+    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> {\n+        let mut v = Vec::new();\n+        self.graph.each_node(|i, nd| { v.push((i, nd)); true });\n+        dot::maybe_owned_vec::Growable(v)\n+    }\n+    fn edges(&self) -> dot::Edges<'a, Edge<'a>> {\n+        self.graph.all_edges().iter().collect()\n+    }\n+    fn source(&self, edge: &Edge<'a>) -> Node<'a> {\n+        let i = edge.source();\n+        (i, self.graph.node(i))\n+    }\n+    fn target(&self, edge: &Edge<'a>) -> Node<'a> {\n+        let i = edge.target();\n+        (i, self.graph.node(i))\n+    }\n+}\n+\n+impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a>\n+{\n+    fn nodes(&self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }\n+    fn edges(&self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }\n+    fn source(&self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }\n+    fn target(&self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }\n+}"}, {"sha": "f0b912fb87bbff17b7f4aac7ebf31b8c90fd2efb", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf398f26a5eabbc89f28abcb79b4778be9e74a6/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=aaf398f26a5eabbc89f28abcb79b4778be9e74a6", "patch": "@@ -19,25 +19,25 @@ Uses `Graph` as the underlying representation.\n \n use middle::graph;\n use middle::ty;\n-use middle::typeck;\n use syntax::ast;\n use util::nodemap::NodeMap;\n \n mod construct;\n+pub mod graphviz;\n \n pub struct CFG {\n-    exit_map: NodeMap<CFGIndex>,\n-    graph: CFGGraph,\n-    entry: CFGIndex,\n-    exit: CFGIndex,\n+    pub exit_map: NodeMap<CFGIndex>,\n+    pub graph: CFGGraph,\n+    pub entry: CFGIndex,\n+    pub exit: CFGIndex,\n }\n \n pub struct CFGNodeData {\n-    id: ast::NodeId\n+    pub id: ast::NodeId\n }\n \n pub struct CFGEdgeData {\n-    exiting_scopes: Vec<ast::NodeId>\n+    pub exiting_scopes: Vec<ast::NodeId>\n }\n \n pub type CFGIndex = graph::NodeIndex;\n@@ -55,8 +55,7 @@ pub struct CFGIndices {\n \n impl CFG {\n     pub fn new(tcx: &ty::ctxt,\n-               method_map: typeck::MethodMap,\n                blk: &ast::Block) -> CFG {\n-        construct::construct(tcx, method_map, blk)\n+        construct::construct(tcx, blk)\n     }\n }"}]}