{"sha": "ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMDk4ZmRiZDJhYzlmOTNlNTUwMTIzNWZhNGZhOGUwZjY4YjNjYzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-04T12:55:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T12:55:48Z"}, "message": "Merge #4299\n\n4299: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "130289fec26dae27c7b737a75fcc5668594c30b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130289fec26dae27c7b737a75fcc5668594c30b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesBDUCRBK7hj4Ov3rIwAAdHIIAK6W7efP94eKcZp1E4hoDsaf\nS9jnS2QM+5qZpLYADtK6SXXVs5QXFSDf3oGMVVvOMJNeZFI488n77QysURcqInMW\n0mfuCZUfhPzeBeM5U4XBuB4l6B2777a+HsvLF/eZmfruOnBNOE6bSEqLWFyen6zf\nKPQ4iyo4WeAbEnhaxbc93nwCb8zN86bB7OAFI6Xwf9DNHv2NN2IZqu7Rg4f6YlJ2\nn/pdbi1ZqhDCP0KTH5rKyDHa0NWjH0sOtshIHvDF3Z/f4fuQJKeABZhnL6dLeh65\n+qLBBJSBhBVfI4gu1LM2Q0zvHHHytyBAUPAlCa50pXNTpKslSsoKBuoO78LLWuo=\n=RTbA\n-----END PGP SIGNATURE-----\n", "payload": "tree 130289fec26dae27c7b737a75fcc5668594c30b7\nparent 580c5a969de541a3fa4b1678a04a61252afe94c1\nparent d7450222a97cb9abefc4fd843ae9d6f4d0d0f93f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588596948 +0000\ncommitter GitHub <noreply@github.com> 1588596948 +0000\n\nMerge #4299\n\n4299: Simplify r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4", "html_url": "https://github.com/rust-lang/rust/commit/ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "580c5a969de541a3fa4b1678a04a61252afe94c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/580c5a969de541a3fa4b1678a04a61252afe94c1", "html_url": "https://github.com/rust-lang/rust/commit/580c5a969de541a3fa4b1678a04a61252afe94c1"}, {"sha": "d7450222a97cb9abefc4fd843ae9d6f4d0d0f93f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7450222a97cb9abefc4fd843ae9d6f4d0d0f93f", "html_url": "https://github.com/rust-lang/rust/commit/d7450222a97cb9abefc4fd843ae9d6f4d0d0f93f"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "859c70ad8ad3203c839bbc3f7ac168ef3b68dd7b", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=ea098fdbd2ac9f93e5501235fa4fa8e0f68b3cc4", "patch": "@@ -1,8 +1,8 @@\n use crate::{Assist, AssistCtx, AssistId};\n \n-use ast::{BlockExpr, Expr, ForExpr, IfExpr, LoopBodyOwner, LoopExpr, WhileExpr};\n+use ast::LoopBodyOwner;\n use ra_fmt::unwrap_trivial_block;\n-use ra_syntax::{ast, AstNode, TextRange, T};\n+use ra_syntax::{ast, match_ast, AstNode, TextRange, T};\n \n // Assist: unwrap_block\n //\n@@ -23,37 +23,38 @@ use ra_syntax::{ast, AstNode, TextRange, T};\n // ```\n pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n     let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n-\n-    let (expr, expr_to_unwrap) = if let Some(if_expr) =\n-        l_curly_token.ancestors().find_map(IfExpr::cast)\n-    {\n-        // if expression\n-        let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n-        let expr_to_unwrap = expr_to_unwrap?;\n-        // Find if we are in a else if block\n-        let ancestor = if_expr.syntax().ancestors().skip(1).find_map(ast::IfExpr::cast);\n-\n-        match ancestor {\n-            None => (ast::Expr::IfExpr(if_expr), expr_to_unwrap),\n-            Some(ancestor) => (ast::Expr::IfExpr(ancestor), expr_to_unwrap),\n+    let block = ast::BlockExpr::cast(l_curly_token.parent())?;\n+    let parent = block.syntax().parent()?;\n+    let (expr, expr_to_unwrap) = match_ast! {\n+        match parent {\n+            ast::IfExpr(if_expr) => {\n+                let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n+                let expr_to_unwrap = expr_to_unwrap?;\n+                // Find if we are in a else if block\n+                let ancestor = if_expr.syntax().parent().and_then(ast::IfExpr::cast);\n+\n+                match ancestor {\n+                    None => (ast::Expr::IfExpr(if_expr), expr_to_unwrap),\n+                    Some(ancestor) => (ast::Expr::IfExpr(ancestor), expr_to_unwrap),\n+                }\n+            },\n+            ast::ForExpr(for_expr) => {\n+                let block_expr = for_expr.loop_body()?;\n+                let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n+                (ast::Expr::ForExpr(for_expr), expr_to_unwrap)\n+            },\n+            ast::WhileExpr(while_expr) => {\n+                let block_expr = while_expr.loop_body()?;\n+                let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n+                (ast::Expr::WhileExpr(while_expr), expr_to_unwrap)\n+            },\n+            ast::LoopExpr(loop_expr) => {\n+                let block_expr = loop_expr.loop_body()?;\n+                let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n+                (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap)\n+            },\n+            _ => return None,\n         }\n-    } else if let Some(for_expr) = l_curly_token.ancestors().find_map(ForExpr::cast) {\n-        // for expression\n-        let block_expr = for_expr.loop_body()?;\n-        let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n-        (ast::Expr::ForExpr(for_expr), expr_to_unwrap)\n-    } else if let Some(while_expr) = l_curly_token.ancestors().find_map(WhileExpr::cast) {\n-        // while expression\n-        let block_expr = while_expr.loop_body()?;\n-        let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n-        (ast::Expr::WhileExpr(while_expr), expr_to_unwrap)\n-    } else if let Some(loop_expr) = l_curly_token.ancestors().find_map(LoopExpr::cast) {\n-        // loop expression\n-        let block_expr = loop_expr.loop_body()?;\n-        let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n-        (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap)\n-    } else {\n-        return None;\n     };\n \n     ctx.add_assist(AssistId(\"unwrap_block\"), \"Unwrap block\", |edit| {\n@@ -76,7 +77,7 @@ pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n     })\n }\n \n-fn extract_expr(cursor_range: TextRange, block: BlockExpr) -> Option<Expr> {\n+fn extract_expr(cursor_range: TextRange, block: ast::BlockExpr) -> Option<ast::Expr> {\n     let cursor_in_range = block.l_curly_token()?.text_range().contains_range(cursor_range);\n \n     if cursor_in_range {"}]}