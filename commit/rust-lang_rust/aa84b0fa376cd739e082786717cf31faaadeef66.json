{"sha": "aa84b0fa376cd739e082786717cf31faaadeef66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhODRiMGZhMzc2Y2Q3MzllMDgyNzg2NzE3Y2YzMWZhYWFkZWVmNjY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-17T00:24:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-17T00:24:16Z"}, "message": "Provide `help` when `T: ?Sized` can't be suggested", "tree": {"sha": "587457973c5a182e1b4ed9afe46e10f9002b9ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/587457973c5a182e1b4ed9afe46e10f9002b9ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa84b0fa376cd739e082786717cf31faaadeef66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa84b0fa376cd739e082786717cf31faaadeef66", "html_url": "https://github.com/rust-lang/rust/commit/aa84b0fa376cd739e082786717cf31faaadeef66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa84b0fa376cd739e082786717cf31faaadeef66/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2b8e6090cb694898d4481f4a55d5489fa4b279e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b8e6090cb694898d4481f4a55d5489fa4b279e", "html_url": "https://github.com/rust-lang/rust/commit/d2b8e6090cb694898d4481f4a55d5489fa4b279e"}], "stats": {"total": 164, "additions": 154, "deletions": 10}, "files": [{"sha": "33da020da8aed8803c0af8237629c8c32ee67beb", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::ty::{\n     TypeFoldable, WithConstness,\n };\n use rustc_session::DiagnosticMessageId;\n-use rustc_span::{ExpnKind, Span, DUMMY_SP};\n+use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n@@ -1740,10 +1740,36 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // Suggesting `T: ?Sized` is only valid in an ADT if `T` is only used in a\n                     // borrow. `struct S<'a, T: ?Sized>(&'a T);` is valid, `struct S<T: ?Sized>(T);`\n                     // is not.\n-                    let mut visitor = FindTypeParam { param: param.name.ident().name, valid: true };\n+                    let mut visitor = FindTypeParam {\n+                        param: param.name.ident().name,\n+                        invalid_spans: vec![],\n+                        nested: false,\n+                    };\n                     visitor.visit_item(item);\n-                    if !visitor.valid {\n-                        continue;\n+                    if !visitor.invalid_spans.is_empty() {\n+                        let mut multispan: MultiSpan = param.span.into();\n+                        multispan.push_span_label(\n+                            param.span,\n+                            format!(\"this could be changed to `{}: ?Sized`...\", param.name.ident()),\n+                        );\n+                        for sp in visitor.invalid_spans {\n+                            multispan.push_span_label(\n+                                sp,\n+                                format!(\n+                                    \"...if indirection was used here: `Box<{}>`\",\n+                                    param.name.ident(),\n+                                ),\n+                            );\n+                        }\n+                        err.span_help(\n+                            multispan,\n+                            &format!(\n+                                \"you could relax the implicit `Sized` bound on `{T}` if it were \\\n+                                 used through indirection like `&{T}` or `Box<{T}>`\",\n+                                T = param.name.ident(),\n+                            ),\n+                        );\n+                        return;\n                     }\n                 }\n                 _ => {}\n@@ -1782,7 +1808,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n /// `param: ?Sized` would be a valid constraint.\n struct FindTypeParam {\n     param: rustc_span::Symbol,\n-    valid: bool,\n+    invalid_spans: Vec<Span>,\n+    nested: bool,\n }\n \n impl<'v> Visitor<'v> for FindTypeParam {\n@@ -1794,15 +1821,24 @@ impl<'v> Visitor<'v> for FindTypeParam {\n \n     fn visit_ty(&mut self, ty: &hir::Ty<'_>) {\n         match ty.kind {\n-            hir::TyKind::Ptr(_) | hir::TyKind::Rptr(..) | hir::TyKind::TraitObject(..) => return,\n+            hir::TyKind::Ptr(_) | hir::TyKind::Rptr(..) | hir::TyKind::TraitObject(..) => {}\n             hir::TyKind::Path(hir::QPath::Resolved(None, path))\n                 if path.segments.len() == 1 && path.segments[0].ident.name == self.param =>\n             {\n-                self.valid = false;\n+                if !self.nested {\n+                    self.invalid_spans.push(ty.span);\n+                }\n+            }\n+            hir::TyKind::Path(_) => {\n+                let prev = self.nested;\n+                self.nested = true;\n+                hir::intravisit::walk_ty(self, ty);\n+                self.nested = prev;\n+            }\n+            _ => {\n+                hir::intravisit::walk_ty(self, ty);\n             }\n-            _ => {}\n         }\n-        hir::intravisit::walk_ty(self, ty);\n     }\n }\n "}, {"sha": "383cdd4979ad9ad46007915e25745e81e3b2d847", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -9,6 +9,13 @@ LL | enum Option<T> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/issue-18919.rs:7:13\n+   |\n+LL | enum Option<T> {\n+   |             ^ this could be changed to `T: ?Sized`...\n+LL |     Some(T),\n+   |          - ...if indirection was used here: `Box<T>`\n \n error: aborting due to previous error\n "}, {"sha": "cffa52361696c93c21c41727c3a2befab1c64466", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -9,6 +9,13 @@ LL | struct Vec<T> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/issue-23281.rs:8:12\n+   |\n+LL | struct Vec<T> {\n+   |            ^ this could be changed to `T: ?Sized`...\n+LL |     t: T,\n+   |        - ...if indirection was used here: `Box<T>`\n \n error: aborting due to previous error\n "}, {"sha": "ef64d799b65cfcbd374320406dee2b2cd33eef8f", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.rs?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -2,6 +2,7 @@ trait Trait {\n     fn func1() -> Struct1<Self>; //~ ERROR E0277\n     fn func2<'a>() -> Struct2<'a, Self>; //~ ERROR E0277\n     fn func3() -> Struct3<Self>; //~ ERROR E0277\n+    fn func4() -> Struct4<Self>; //~ ERROR E0277\n }\n \n struct Struct1<T>{\n@@ -14,4 +15,14 @@ struct Struct3<T>{\n     _t: T,\n }\n \n+struct X<T>(T);\n+\n+struct Struct4<T>{\n+    _t: X<T>,\n+}\n+\n+struct Struct5<T: ?Sized>{\n+    _t: X<T>, //~ ERROR E0277\n+}\n+\n fn main() {}"}, {"sha": "ee08f51f802703dc509c8f40536cf943db0d4be2", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -1,3 +1,24 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:5\n+   |\n+LL | struct X<T>(T);\n+   |          - required by this bound in `X`\n+...\n+LL | struct Struct5<T: ?Sized>{\n+   |                - this type parameter needs to be `std::marker::Sized`\n+LL |     _t: X<T>,\n+   |     ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `T`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n+   |\n+LL | struct X<T>(T);\n+   |          ^  - ...if indirection was used here: `Box<T>`\n+   |          |\n+   |          this could be changed to `T: ?Sized`...\n+\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:2:19\n    |\n@@ -49,11 +70,38 @@ LL | struct Struct3<T>{\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16\n+   |\n+LL | struct Struct3<T>{\n+   |                ^ this could be changed to `T: ?Sized`...\n+LL |     _t: T,\n+   |         - ...if indirection was used here: `Box<T>`\n help: consider further restricting `Self`\n    |\n LL |     fn func3() -> Struct3<Self> where Self: std::marker::Sized;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:5:19\n+   |\n+LL |     fn func4() -> Struct4<Self>;\n+   |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+...\n+LL | struct Struct4<T>{\n+   |                - required by this bound in `Struct4`\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `Self`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider further restricting `Self`\n+   |\n+LL |     fn func4() -> Struct4<Self> where Self: std::marker::Sized;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | struct Struct4<T: ?Sized>{\n+   |                 ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1908aee25ea7bf6e094db07ba296ff89b8937534", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -11,6 +11,13 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `U` if it were used through indirection like `&U` or `Box<U>`\n+  --> $DIR/unsized-enum.rs:4:10\n+   |\n+LL | enum Foo<U> { FooSome(U), FooNone }\n+   |          ^            - ...if indirection was used here: `Box<U>`\n+   |          |\n+   |          this could be changed to `U: ?Sized`...\n \n error: aborting due to previous error\n "}, {"sha": "e0f077d66f99c8920ea3372279d71c7706251dea", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -11,6 +11,13 @@ LL | impl<X: ?Sized> S5<X> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n+  --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n+   |\n+LL | struct S5<Y>(Y);\n+   |           ^  - ...if indirection was used here: `Box<Y>`\n+   |           |\n+   |           this could be changed to `Y: ?Sized`...\n \n error: aborting due to previous error\n "}, {"sha": "d92d1d9113e5c56377e8ac4415114357a52562a5", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -11,6 +11,13 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/unsized-struct.rs:4:12\n+   |\n+LL | struct Foo<T> { data: T }\n+   |            ^          - ...if indirection was used here: `Box<T>`\n+   |            |\n+   |            this could be changed to `T: ?Sized`...\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24"}, {"sha": "73c5439da53b67e83e3c1b66033ef78a04b7ce43", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -11,6 +11,13 @@ LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n+  --> $DIR/unsized-trait-impl-self-type.rs:8:11\n+   |\n+LL | struct S5<Y>(Y);\n+   |           ^  - ...if indirection was used here: `Box<Y>`\n+   |           |\n+   |           this could be changed to `Y: ?Sized`...\n \n error: aborting due to previous error\n "}, {"sha": "731d31ac34f628d7009c171e5d2c0977fd00a21b", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa84b0fa376cd739e082786717cf31faaadeef66/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=aa84b0fa376cd739e082786717cf31faaadeef66", "patch": "@@ -23,6 +23,13 @@ LL | struct Vec<T> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/wf-fn-where-clause.rs:16:12\n+   |\n+LL | struct Vec<T> {\n+   |            ^ this could be changed to `T: ?Sized`...\n+LL |     t: T,\n+   |        - ...if indirection was used here: `Box<T>`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n   --> $DIR/wf-fn-where-clause.rs:12:16"}]}