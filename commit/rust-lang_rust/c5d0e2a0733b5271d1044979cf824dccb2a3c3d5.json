{"sha": "c5d0e2a0733b5271d1044979cf824dccb2a3c3d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDBlMmEwNzMzYjUyNzFkMTA0NDk3OWNmODI0ZGNjYjJhM2MzZDU=", "commit": {"author": {"name": "marcell", "email": "marcell.pardavi@gmail.com", "date": "2015-06-09T21:58:00Z"}, "committer": {"name": "marcell", "email": "marcell.pardavi@gmail.com", "date": "2015-06-09T21:58:00Z"}, "message": "Add missing #[inline] to methods related to char.", "tree": {"sha": "54b884a1c3078227d77f9cfd82c32f7554e02aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b884a1c3078227d77f9cfd82c32f7554e02aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5", "html_url": "https://github.com/rust-lang/rust/commit/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5/comments", "author": {"login": "pmarcelll", "id": 1909968, "node_id": "MDQ6VXNlcjE5MDk5Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/1909968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmarcelll", "html_url": "https://github.com/pmarcelll", "followers_url": "https://api.github.com/users/pmarcelll/followers", "following_url": "https://api.github.com/users/pmarcelll/following{/other_user}", "gists_url": "https://api.github.com/users/pmarcelll/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmarcelll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmarcelll/subscriptions", "organizations_url": "https://api.github.com/users/pmarcelll/orgs", "repos_url": "https://api.github.com/users/pmarcelll/repos", "events_url": "https://api.github.com/users/pmarcelll/events{/privacy}", "received_events_url": "https://api.github.com/users/pmarcelll/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmarcelll", "id": 1909968, "node_id": "MDQ6VXNlcjE5MDk5Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/1909968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmarcelll", "html_url": "https://github.com/pmarcelll", "followers_url": "https://api.github.com/users/pmarcelll/followers", "following_url": "https://api.github.com/users/pmarcelll/following{/other_user}", "gists_url": "https://api.github.com/users/pmarcelll/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmarcelll/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmarcelll/subscriptions", "organizations_url": "https://api.github.com/users/pmarcelll/orgs", "repos_url": "https://api.github.com/users/pmarcelll/repos", "events_url": "https://api.github.com/users/pmarcelll/events{/privacy}", "received_events_url": "https://api.github.com/users/pmarcelll/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a3f5af8c98e123247a2847c52474f42874d23fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3f5af8c98e123247a2847c52474f42874d23fa", "html_url": "https://github.com/rust-lang/rust/commit/8a3f5af8c98e123247a2847c52474f42874d23fa"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "9938c2996158a6adea76ec39ee3fea6396cf9e9a", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=c5d0e2a0733b5271d1044979cf824dccb2a3c3d5", "patch": "@@ -152,10 +152,12 @@ pub trait CharExt {\n }\n \n impl CharExt for char {\n+    #[inline]\n     fn is_digit(self, radix: u32) -> bool {\n         self.to_digit(radix).is_some()\n     }\n \n+    #[inline]\n     fn to_digit(self, radix: u32) -> Option<u32> {\n         if radix > 36 {\n             panic!(\"to_digit: radix is too high (maximum 36)\");\n@@ -170,10 +172,12 @@ impl CharExt for char {\n         else { None }\n     }\n \n+    #[inline]\n     fn escape_unicode(self) -> EscapeUnicode {\n         EscapeUnicode { c: self, state: EscapeUnicodeState::Backslash }\n     }\n \n+    #[inline]\n     fn escape_default(self) -> EscapeDefault {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),"}, {"sha": "4e0d196e2f83e98b969f9d4819bb2c263fe7369b", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d0e2a0733b5271d1044979cf824dccb2a3c3d5/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=c5d0e2a0733b5271d1044979cf824dccb2a3c3d5", "patch": "@@ -119,6 +119,7 @@ impl char {\n     /// assert_eq!('f'.to_digit(16), Some(15));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> { C::to_digit(self, radix) }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a\n@@ -157,6 +158,7 @@ impl char {\n     /// assert_eq!(heart, r\"\\u{2764}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode { C::escape_unicode(self) }\n \n     /// Returns an iterator that yields the 'default' ASCII and\n@@ -195,6 +197,7 @@ impl char {\n     /// assert_eq!(quote, \"\\\\\\\"\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn escape_default(self) -> EscapeDefault { C::escape_default(self) }\n \n     /// Returns the number of bytes this character would need if encoded in\n@@ -208,6 +211,7 @@ impl char {\n     /// assert_eq!(n, 2);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn len_utf8(self) -> usize { C::len_utf8(self) }\n \n     /// Returns the number of 16-bit code units this character would need if\n@@ -221,6 +225,7 @@ impl char {\n     /// assert_eq!(n, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn len_utf16(self) -> usize { C::len_utf16(self) }\n \n     /// Encodes this character as UTF-8 into the provided byte buffer, and then\n@@ -255,6 +260,7 @@ impl char {\n     /// ```\n     #[unstable(feature = \"unicode\",\n                reason = \"pending decision about Iterator/Writer/Reader\")]\n+    #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> Option<usize> { C::encode_utf8(self, dst) }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer, and\n@@ -289,6 +295,7 @@ impl char {\n     /// ```\n     #[unstable(feature = \"unicode\",\n                reason = \"pending decision about Iterator/Writer/Reader\")]\n+    #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> Option<usize> { C::encode_utf16(self, dst) }\n \n     /// Returns whether the specified character is considered a Unicode\n@@ -451,5 +458,6 @@ impl char {\n                  since = \"1.0.0\")]\n     #[unstable(feature = \"unicode\",\n                reason = \"needs expert opinion. is_cjk flag stands out as ugly\")]\n+    #[inline]\n     pub fn width(self, is_cjk: bool) -> Option<usize> { charwidth::width(self, is_cjk) }\n }"}]}