{"sha": "3f0cb8ccffa55abd430074cf2b2d785c85c7de54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMGNiOGNjZmZhNTVhYmQ0MzAwNzRjZjJiMmQ3ODVjODVjN2RlNTQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-03T05:24:49Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-27T23:27:58Z"}, "message": "Make SyntaxExtension thread-safe", "tree": {"sha": "5d874f9b6dbd8ea0f7da153ddf695b636beb5cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d874f9b6dbd8ea0f7da153ddf695b636beb5cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f0cb8ccffa55abd430074cf2b2d785c85c7de54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0cb8ccffa55abd430074cf2b2d785c85c7de54", "html_url": "https://github.com/rust-lang/rust/commit/3f0cb8ccffa55abd430074cf2b2d785c85c7de54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f0cb8ccffa55abd430074cf2b2d785c85c7de54/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11ccc4cac6d1c8fbe27d55714a78e8118c07379c", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ccc4cac6d1c8fbe27d55714a78e8118c07379c", "html_url": "https://github.com/rust-lang/rust/commit/11ccc4cac6d1c8fbe27d55714a78e8118c07379c"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "90459fec670e3f3659fdea680a0366c1855c2351", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cb8ccffa55abd430074cf2b2d785c85c7de54/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cb8ccffa55abd430074cf2b2d785c85c7de54/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3f0cb8ccffa55abd430074cf2b2d785c85c7de54", "patch": "@@ -28,7 +28,7 @@ use std::collections::HashMap;\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{self, Lrc};\n use std::default::Default;\n use tokenstream::{self, TokenStream};\n \n@@ -529,26 +529,26 @@ pub enum SyntaxExtension {\n     /// `#[derive(...)]` is a `MultiItemDecorator`.\n     ///\n     /// Prefer ProcMacro or MultiModifier since they are more flexible.\n-    MultiDecorator(Box<MultiItemDecorator>),\n+    MultiDecorator(Box<MultiItemDecorator + sync::Sync + sync::Send>),\n \n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place. Also allows decoration, i.e., creating new items.\n-    MultiModifier(Box<MultiItemModifier>),\n+    MultiModifier(Box<MultiItemModifier + sync::Sync + sync::Send>),\n \n     /// A function-like procedural macro. TokenStream -> TokenStream.\n-    ProcMacro(Box<ProcMacro>),\n+    ProcMacro(Box<ProcMacro + sync::Sync + sync::Send>),\n \n     /// An attribute-like procedural macro. TokenStream, TokenStream -> TokenStream.\n     /// The first TokenSteam is the attribute, the second is the annotated item.\n     /// Allows modification of the input items and adding new items, similar to\n     /// MultiModifier, but uses TokenStreams, rather than AST nodes.\n-    AttrProcMacro(Box<AttrProcMacro>),\n+    AttrProcMacro(Box<AttrProcMacro + sync::Sync + sync::Send>),\n \n     /// A normal, function-like syntax extension.\n     ///\n     /// `bytes!` is a `NormalTT`.\n     NormalTT {\n-        expander: Box<TTMacroExpander>,\n+        expander: Box<TTMacroExpander + sync::Sync + sync::Send>,\n         def_info: Option<(ast::NodeId, Span)>,\n         /// Whether the contents of the macro can\n         /// directly use `#[unstable]` things (true == yes).\n@@ -563,21 +563,23 @@ pub enum SyntaxExtension {\n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n     ///\n-    IdentTT(Box<IdentMacroExpander>, Option<Span>, bool),\n+    IdentTT(Box<IdentMacroExpander + sync::Sync + sync::Send>, Option<Span>, bool),\n \n     /// An attribute-like procedural macro. TokenStream -> TokenStream.\n     /// The input is the annotated item.\n     /// Allows generating code to implement a Trait for a given struct\n     /// or enum item.\n-    ProcMacroDerive(Box<MultiItemModifier>, Vec<Symbol> /* inert attribute names */),\n+    ProcMacroDerive(Box<MultiItemModifier +\n+                        sync::Sync +\n+                        sync::Send>, Vec<Symbol> /* inert attribute names */),\n \n     /// An attribute-like procedural macro that derives a builtin trait.\n     BuiltinDerive(BuiltinDeriveFn),\n \n     /// A declarative macro, e.g. `macro m() {}`.\n     ///\n     /// The second element is the definition site span.\n-    DeclMacro(Box<TTMacroExpander>, Option<(ast::NodeId, Span)>),\n+    DeclMacro(Box<TTMacroExpander + sync::Sync + sync::Send>, Option<(ast::NodeId, Span)>),\n }\n \n impl SyntaxExtension {"}, {"sha": "ce7fa226b96ae8f003c8a3c6ee816ce838b1b1c7", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f0cb8ccffa55abd430074cf2b2d785c85c7de54/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0cb8ccffa55abd430074cf2b2d785c85c7de54/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3f0cb8ccffa55abd430074cf2b2d785c85c7de54", "patch": "@@ -28,6 +28,8 @@\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n \n+#![recursion_limit=\"256\"]\n+\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;"}]}