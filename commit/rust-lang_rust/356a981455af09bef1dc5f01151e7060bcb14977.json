{"sha": "356a981455af09bef1dc5f01151e7060bcb14977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmE5ODE0NTVhZjA5YmVmMWRjNWYwMTE1MWU3MDYwYmNiMTQ5Nzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-27T12:12:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-27T12:12:38Z"}, "message": "Rollup merge of #60307 - dima74:fix/56018, r=GuillaumeGomez\n\nMake \"Implementations on Foreign Types\" items in sidebar link to specific impls\n\nThis solves #56018 for most cases (though not work for foreign impls with same names)", "tree": {"sha": "777fee37ec7aa40c424a4fe762916a0374b50c3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777fee37ec7aa40c424a4fe762916a0374b50c3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356a981455af09bef1dc5f01151e7060bcb14977", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcxEc3CRBK7hj4Ov3rIwAAdHIIADUibWwVOuSYvQ1049EvRQ9p\nFuRvunuwzErUjQfY7WHRpj46XO0Gw+FDYpVumjW5aIf/CHlQ1zX71JxLky62DCLZ\nLlrKEmIujiMHnrfDamgeHo7JrBmUqGuoz8xL//Qz96L1EeRVeWAvYZhsBzjQK+L7\nmMxFCsExsnlFDXouOgn3llzPcsh14aeI2sz7astqDpZOkS3AoATISbkzCgOyB/lI\nJjbHt5flRI6hdEJh5CN2Q+gXYDDoaqzhZ/07FdmWZvjwXpeTDE7/AagCU3FcWJ1x\ndZLfqZDLRUi44Q/Gi7ITACvvyUBTR5k4+pkVeeZWFlCeDp/DR77A7n41l8j5pmc=\n=pW0k\n-----END PGP SIGNATURE-----\n", "payload": "tree 777fee37ec7aa40c424a4fe762916a0374b50c3d\nparent 35dbc5ec47be07d8d2f029a19ae39cf76d521369\nparent d2b4f4d4521fcbc8c30096775a2964aab088b154\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556367158 +0200\ncommitter GitHub <noreply@github.com> 1556367158 +0200\n\nRollup merge of #60307 - dima74:fix/56018, r=GuillaumeGomez\n\nMake \"Implementations on Foreign Types\" items in sidebar link to specific impls\n\nThis solves #56018 for most cases (though not work for foreign impls with same names)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356a981455af09bef1dc5f01151e7060bcb14977", "html_url": "https://github.com/rust-lang/rust/commit/356a981455af09bef1dc5f01151e7060bcb14977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356a981455af09bef1dc5f01151e7060bcb14977/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35dbc5ec47be07d8d2f029a19ae39cf76d521369", "url": "https://api.github.com/repos/rust-lang/rust/commits/35dbc5ec47be07d8d2f029a19ae39cf76d521369", "html_url": "https://github.com/rust-lang/rust/commit/35dbc5ec47be07d8d2f029a19ae39cf76d521369"}, {"sha": "d2b4f4d4521fcbc8c30096775a2964aab088b154", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b4f4d4521fcbc8c30096775a2964aab088b154", "html_url": "https://github.com/rust-lang/rust/commit/d2b4f4d4521fcbc8c30096775a2964aab088b154"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "be349de05cab6daf1f7b58e7ea3c86afccd295f3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/356a981455af09bef1dc5f01151e7060bcb14977/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a981455af09bef1dc5f01151e7060bcb14977/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=356a981455af09bef1dc5f01151e7060bcb14977", "patch": "@@ -3060,7 +3060,7 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter<'\n         _ => false,\n     };\n     render_impl(w, cx, implementor, AssocItemLink::Anchor(None), RenderMode::Normal,\n-                implementor.impl_item.stable_since(), false, Some(use_absolute))?;\n+                implementor.impl_item.stable_since(), false, Some(use_absolute), false)?;\n     Ok(())\n }\n \n@@ -3071,7 +3071,7 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter<'_>,\n         let did = i.trait_did().unwrap();\n         let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n         render_impl(w, cx, i, assoc_link,\n-                    RenderMode::Normal, containing_item.stable_since(), true, None)?;\n+                    RenderMode::Normal, containing_item.stable_since(), true, None, false)?;\n     }\n     Ok(())\n }\n@@ -3301,7 +3301,7 @@ fn item_trait(\n                 );\n                 render_impl(w, cx, &implementor, assoc_link,\n                             RenderMode::Normal, implementor.impl_item.stable_since(), false,\n-                            None)?;\n+                            None, true)?;\n             }\n             write_loading_content(w, \"\")?;\n         }\n@@ -3958,7 +3958,7 @@ fn render_assoc_items(w: &mut fmt::Formatter<'_>,\n         };\n         for i in &non_trait {\n             render_impl(w, cx, i, AssocItemLink::Anchor(None), render_mode,\n-                        containing_item.stable_since(), true, None)?;\n+                        containing_item.stable_since(), true, None, false)?;\n         }\n     }\n     if let AssocItemRender::DerefFor { .. } = what {\n@@ -4138,11 +4138,15 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n }\n \n fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocItemLink<'_>,\n-               render_mode: RenderMode, outer_version: Option<&str>,\n-               show_def_docs: bool, use_absolute: Option<bool>) -> fmt::Result {\n+               render_mode: RenderMode, outer_version: Option<&str>, show_def_docs: bool,\n+               use_absolute: Option<bool>, is_on_foreign_type: bool) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n         let id = cx.derive_id(match i.inner_impl().trait_ {\n-            Some(ref t) => format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t))),\n+            Some(ref t) => if is_on_foreign_type {\n+                get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t)\n+            } else {\n+                format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t)))\n+            },\n             None => \"impl\".to_string(),\n         });\n         if let Some(use_absolute) = use_absolute {\n@@ -4688,11 +4692,15 @@ fn sidebar_struct(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n     Ok(())\n }\n \n+fn get_id_for_impl_on_foreign_type(for_: &clean::Type, trait_: &clean::Type) -> String {\n+    small_url_encode(&format!(\"impl-{:#}-for-{:#}\", trait_, for_))\n+}\n+\n fn extract_for_impl_name(item: &clean::Item) -> Option<(String, String)> {\n     match item.inner {\n         clean::ItemEnum::ImplItem(ref i) => {\n             if let Some(ref trait_) = i.trait_ {\n-                Some((format!(\"{:#}\", i.for_), format!(\"{:#}\", trait_)))\n+                Some((format!(\"{:#}\", i.for_), get_id_for_impl_on_foreign_type(&i.for_, trait_)))\n             } else {\n                 None\n             }\n@@ -4788,9 +4796,9 @@ fn sidebar_trait(fmt: &mut fmt::Formatter<'_>, it: &clean::Item,\n                                   .map_or(false, |d| !c.paths.contains_key(&d)))\n                                   .filter_map(|i| {\n                                       match extract_for_impl_name(&i.impl_item) {\n-                                          Some((ref name, ref url)) => {\n-                                              Some(format!(\"<a href=\\\"#impl-{}\\\">{}</a>\",\n-                                                          small_url_encode(url),\n+                                          Some((ref name, ref id)) => {\n+                                              Some(format!(\"<a href=\\\"#{}\\\">{}</a>\",\n+                                                          id,\n                                                           Escape(name)))\n                                           }\n                                           _ => None,"}, {"sha": "6219a2c3b9073afd5fa74a577c441aa2291f155d", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/356a981455af09bef1dc5f01151e7060bcb14977/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a981455af09bef1dc5f01151e7060bcb14977/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=356a981455af09bef1dc5f01151e7060bcb14977", "patch": "@@ -0,0 +1,16 @@\n+// issue #56018: \"Implementations on Foreign Types\" sidebar items should link to specific impls\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Foo.html\n+// @has - '//*[@class=\"sidebar-title\"][@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n+// @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n+// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n+// @has - '//h3[@id=\"impl-Foo-for-u32\"]//code' 'impl Foo for u32'\n+// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n+// @has - '//h3[@id=\"impl-Foo-for-%26%27a%20str\"]//code' \"impl<'a> Foo for &'a str\"\n+pub trait Foo {}\n+\n+impl Foo for u32 {}\n+\n+impl<'a> Foo for &'a str {}"}]}