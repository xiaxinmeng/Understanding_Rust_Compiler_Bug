{"sha": "9165dd056b4a54293b8f3a430653d6ef953af65e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjVkZDA1NmI0YTU0MjkzYjhmM2E0MzA2NTNkNmVmOTUzYWY2NWU=", "commit": {"author": {"name": "Nadrieril Feneanar", "email": "Nadrieril@users.noreply.github.com", "date": "2019-11-12T11:47:34Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:55:37Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "940fa6dde1fe1f8d674a3d1b548cfc049c528fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/940fa6dde1fe1f8d674a3d1b548cfc049c528fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9165dd056b4a54293b8f3a430653d6ef953af65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9165dd056b4a54293b8f3a430653d6ef953af65e", "html_url": "https://github.com/rust-lang/rust/commit/9165dd056b4a54293b8f3a430653d6ef953af65e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9165dd056b4a54293b8f3a430653d6ef953af65e/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c38aad4f4b04976f4fa10418e0f71880e01d2960", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38aad4f4b04976f4fa10418e0f71880e01d2960", "html_url": "https://github.com/rust-lang/rust/commit/c38aad4f4b04976f4fa10418e0f71880e01d2960"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "69416b4e6b5e6fb46610997cd49e84d428a536f9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9165dd056b4a54293b8f3a430653d6ef953af65e/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165dd056b4a54293b8f3a430653d6ef953af65e/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=9165dd056b4a54293b8f3a430653d6ef953af65e", "patch": "@@ -737,7 +737,7 @@ impl<'tcx> Constructor<'tcx> {\n \n     /// This returns one wildcard pattern for each argument to this constructor.\n     ///\n-    /// This must be consistent with `apply`, `specialize_one_pattern` and `arity`.\n+    /// This must be consistent with `apply`, `specialize_one_pattern`, and `arity`.\n     fn wildcard_subpatterns<'a>(\n         &self,\n         cx: &MatchCheckCtxt<'a, 'tcx>,\n@@ -815,7 +815,7 @@ impl<'tcx> Constructor<'tcx> {\n     /// For instance, a tuple pattern `(_, 42, Some([]))` has the arity of 3.\n     /// A struct pattern's arity is the number of fields it contains, etc.\n     ///\n-    /// This must be consistent with `wildcard_subpatterns`, `specialize_one_pattern` and `apply`.\n+    /// This must be consistent with `wildcard_subpatterns`, `specialize_one_pattern`, and `apply`.\n     fn arity<'a>(&self, cx: &MatchCheckCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> u64 {\n         debug!(\"Constructor::arity({:#?}, {:?})\", self, ty);\n         match self {\n@@ -837,7 +837,7 @@ impl<'tcx> Constructor<'tcx> {\n     /// Apply a constructor to a list of patterns, yielding a new pattern. `pats`\n     /// must have as many elements as this constructor's arity.\n     ///\n-    /// This must be consistent with `wildcard_subpatterns`, `specialize_one_pattern` and `arity`.\n+    /// This must be consistent with `wildcard_subpatterns`, `specialize_one_pattern`, and `arity`.\n     ///\n     /// Examples:\n     /// `self`: `Constructor::Single`\n@@ -1369,7 +1369,7 @@ impl<'tcx> IntRange<'tcx> {\n                 None\n             }\n         } else {\n-            // If the range sould not be treated exhaustively, fallback to checking for inclusion.\n+            // If the range should not be treated exhaustively, fallback to checking for inclusion.\n             if other_lo <= lo && hi <= other_hi { Some(self.clone()) } else { None }\n         }\n     }"}, {"sha": "2dcf4dcaeb83f8047d861ef12a65c2ff5bae0af9", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9165dd056b4a54293b8f3a430653d6ef953af65e/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9165dd056b4a54293b8f3a430653d6ef953af65e/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs?ref=9165dd056b4a54293b8f3a430653d6ef953af65e", "patch": "@@ -160,7 +160,7 @@ fn main() {\n     match &0 {\n         &42 => {}\n         &FOO => {} //~ ERROR unreachable pattern\n-        BAR => {} // not detected as unreachable because `try_eval_bits` fails on BAR\n+        BAR => {} // Not detected as unreachable because `try_eval_bits` fails on `BAR`.\n         _ => {}\n     }\n }"}]}