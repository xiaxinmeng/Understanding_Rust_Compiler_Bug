{"sha": "be53bd838097a835ae7486d8994d721225782bf4", "node_id": "C_kwDOAAsO6NoAKGJlNTNiZDgzODA5N2E4MzVhZTc0ODZkODk5NGQ3MjEyMjU3ODJiZjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-03T03:01:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-03T08:11:17Z"}, "message": "Include enum path in variant suggestion", "tree": {"sha": "5a7838b58f1d89c1e3ebb08f6055a332cb329781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7838b58f1d89c1e3ebb08f6055a332cb329781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be53bd838097a835ae7486d8994d721225782bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be53bd838097a835ae7486d8994d721225782bf4", "html_url": "https://github.com/rust-lang/rust/commit/be53bd838097a835ae7486d8994d721225782bf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be53bd838097a835ae7486d8994d721225782bf4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0421444f8fa221864418c57603a4080f974849a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0421444f8fa221864418c57603a4080f974849a4", "html_url": "https://github.com/rust-lang/rust/commit/0421444f8fa221864418c57603a4080f974849a4"}], "stats": {"total": 504, "additions": 260, "deletions": 244}, "files": [{"sha": "7e543929b0f3ae5bedecfc308368031e62acf9e0", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts};\n use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::{Span, Symbol, DUMMY_SP};\n+use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::fmt;\n@@ -695,17 +695,32 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                 Ok(())\n             }\n             PatKind::Variant { ref subpatterns, .. } | PatKind::Leaf { ref subpatterns } => {\n-                let variant = match self.kind {\n-                    PatKind::Variant { adt_def, variant_index, .. } => {\n-                        Some(adt_def.variant(variant_index))\n-                    }\n-                    _ => self.ty.ty_adt_def().and_then(|adt| {\n-                        if !adt.is_enum() { Some(adt.non_enum_variant()) } else { None }\n+                let variant_and_name = match self.kind {\n+                    PatKind::Variant { adt_def, variant_index, .. } => ty::tls::with(|tcx| {\n+                        let variant = adt_def.variant(variant_index);\n+                        let adt_did = adt_def.did();\n+                        let name = if tcx.get_diagnostic_item(sym::Option) == Some(adt_did)\n+                            || tcx.get_diagnostic_item(sym::Result) == Some(adt_did)\n+                        {\n+                            variant.name.to_string()\n+                        } else {\n+                            format!(\"{}::{}\", tcx.def_path_str(adt_def.did()), variant.name)\n+                        };\n+                        Some((variant, name))\n+                    }),\n+                    _ => self.ty.ty_adt_def().and_then(|adt_def| {\n+                        if !adt_def.is_enum() {\n+                            ty::tls::with(|tcx| {\n+                                Some((adt_def.non_enum_variant(), tcx.def_path_str(adt_def.did())))\n+                            })\n+                        } else {\n+                            None\n+                        }\n                     }),\n                 };\n \n-                if let Some(variant) = variant {\n-                    write!(f, \"{}\", variant.name)?;\n+                if let Some((variant, name)) = &variant_and_name {\n+                    write!(f, \"{}\", name)?;\n \n                     // Only for Adt we can have `S {...}`,\n                     // which we handle separately here.\n@@ -730,8 +745,9 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                     }\n                 }\n \n-                let num_fields = variant.map_or(subpatterns.len(), |v| v.fields.len());\n-                if num_fields != 0 || variant.is_none() {\n+                let num_fields =\n+                    variant_and_name.as_ref().map_or(subpatterns.len(), |(v, _)| v.fields.len());\n+                if num_fields != 0 || variant_and_name.is_none() {\n                     write!(f, \"(\")?;\n                     for i in 0..num_fields {\n                         write!(f, \"{}\", start_or_comma())?;"}, {"sha": "115d34ff8fa2c6d1e77192f0206a1a217986ea7d", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -754,8 +754,8 @@ fn lint_non_exhaustive_omitted_patterns<'p, 'tcx>(\n     hir_id: HirId,\n     witnesses: Vec<DeconstructedPat<'p, 'tcx>>,\n ) {\n-    let joined_patterns = joined_uncovered_patterns(cx, &witnesses);\n     cx.tcx.struct_span_lint_hir(NON_EXHAUSTIVE_OMITTED_PATTERNS, hir_id, sp, |build| {\n+        let joined_patterns = joined_uncovered_patterns(cx, &witnesses);\n         let mut lint = build.build(\"some variants are not matched explicitly\");\n         lint.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n         lint.help("}, {"sha": "972c24c23b0195eec8e354f8b8e2a81c480acf3b", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     let _a = || { match l1 { L1::A => (), L1::B => () } };\n     // (except if the match is already non-exhaustive)\n     let _b = || { match l1 { L1::A => () } };\n-    //~^ ERROR: non-exhaustive patterns: `B` not covered [E0004]\n+    //~^ ERROR: non-exhaustive patterns: `L1::B` not covered [E0004]\n \n     // l2 should not be captured as it is a non-exhaustive SingleVariant\n     // defined in this crate"}, {"sha": "3a5fad15421c6fda04009f0e295ff2792b9c84f7", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `B` not covered\n+error[E0004]: non-exhaustive patterns: `L1::B` not covered\n   --> $DIR/non-exhaustive-match.rs:26:25\n    |\n LL |     let _b = || { match l1 { L1::A => () } };\n-   |                         ^^ pattern `B` not covered\n+   |                         ^^ pattern `L1::B` not covered\n    |\n note: `L1` defined here\n   --> $DIR/non-exhaustive-match.rs:12:14\n@@ -12,8 +12,8 @@ LL | enum L1 { A, B }\n    = note: the matched value is of type `L1`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL |     let _b = || { match l1 { L1::A => (), B => todo!() } };\n-   |                                         ++++++++++++++\n+LL |     let _b = || { match l1 { L1::A => (), L1::B => todo!() } };\n+   |                                         ++++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n   --> $DIR/non-exhaustive-match.rs:37:25"}, {"sha": "3de2b1a78a3dadfca2e8c0766d0db69b1eb3f2eb", "filename": "src/test/ui/empty/empty-never-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -8,7 +8,7 @@ enum Helper<T, U> {\n \n fn transmute<T, U>(t: T) -> U {\n     let Helper::U(u) = Helper::T(t, []);\n-    //~^ ERROR refutable pattern in local binding: `T(_, _)` not covered\n+    //~^ ERROR refutable pattern in local binding: `Helper::T(_, _)` not covered\n     u\n }\n "}, {"sha": "8c80b05ee3aeac9e12835da84e7e33c5ea20527f", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `T(_, _)` not covered\n+error[E0005]: refutable pattern in local binding: `Helper::T(_, _)` not covered\n   --> $DIR/empty-never-array.rs:10:9\n    |\n LL |     let Helper::U(u) = Helper::T(t, []);\n-   |         ^^^^^^^^^^^^ pattern `T(_, _)` not covered\n+   |         ^^^^^^^^^^^^ pattern `Helper::T(_, _)` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "4ac8c904f0530d47dba2731b07d86bff2910c370", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `HastaLaVistaBaby` not covered\n+error[E0004]: non-exhaustive patterns: `Terminator::HastaLaVistaBaby` not covered\n   --> $DIR/E0004.rs:9:11\n    |\n LL |     match x {\n-   |           ^ pattern `HastaLaVistaBaby` not covered\n+   |           ^ pattern `Terminator::HastaLaVistaBaby` not covered\n    |\n note: `Terminator` defined here\n   --> $DIR/E0004.rs:2:5\n@@ -15,7 +15,7 @@ LL |     HastaLaVistaBaby,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Terminator::TalkToMyHand => {}\n-LL +         HastaLaVistaBaby => todo!()\n+LL +         Terminator::HastaLaVistaBaby => todo!()\n    |\n \n error: aborting due to previous error"}, {"sha": "9b646060adfd9818153df8ffe07225a224b48db1", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -21,7 +21,7 @@ fn main() {\n         Foo::A => {}\n         Foo::B => {}\n     }\n-    //~^^^^ ERROR non-exhaustive patterns: `C` not covered\n+    //~^^^^ ERROR non-exhaustive patterns: `Foo::C` not covered\n \n     match Foo::A {\n         Foo::A => {}"}, {"sha": "3de08e215dada61894269d001e000d7a9670d0fb", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive_omitted_patterns_lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive_omitted_patterns_lint.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -99,11 +99,11 @@ LL |         #[warn(non_exhaustive_omitted_patterns)]\n    = note: see issue #89554 <https://github.com/rust-lang/rust/issues/89554> for more information\n    = help: add `#![feature(non_exhaustive_omitted_patterns_lint)]` to the crate attributes to enable\n \n-error[E0004]: non-exhaustive patterns: `C` not covered\n+error[E0004]: non-exhaustive patterns: `Foo::C` not covered\n   --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:20:11\n    |\n LL |     match Foo::A {\n-   |           ^^^^^^ pattern `C` not covered\n+   |           ^^^^^^ pattern `Foo::C` not covered\n    |\n note: `Foo` defined here\n   --> $DIR/feature-gate-non_exhaustive_omitted_patterns_lint.rs:12:15\n@@ -116,7 +116,7 @@ LL |         A, B, C,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo::B => {}\n-LL +         C => todo!()\n+LL +         Foo::C => todo!()\n    |\n \n error: aborting due to previous error; 10 warnings emitted"}, {"sha": "b3c17ce8974df3a4a80b2f229c49bff81460a57a", "filename": "src/test/ui/issue-94866.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fissue-94866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fissue-94866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-94866.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `B` not covered\n+error[E0004]: non-exhaustive patterns: `Enum::B` not covered\n   --> $DIR/issue-94866.rs:10:11\n    |\n LL |     match Enum::A {\n-   |           ^^^^^^^ pattern `B` not covered\n+   |           ^^^^^^^ pattern `Enum::B` not covered\n    |\n note: `Enum` defined here\n   --> $DIR/issue-94866.rs:7:16\n@@ -13,7 +13,7 @@ LL | enum Enum { A, B }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~     Enum::A => m!(),\n-LL +     B => todo!()\n+LL +     Enum::B => todo!()\n    |\n \n error: aborting due to previous error"}, {"sha": "f162dd60f50331c57ce164785a29a76a30376065", "filename": "src/test/ui/match/match_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     match l { L::A => (), L::B => () };\n     // (except if the match is already non-exhaustive)\n     match l { L::A => () };\n-    //~^ ERROR: non-exhaustive patterns: `B` not covered [E0004]\n+    //~^ ERROR: non-exhaustive patterns: `L::B` not covered [E0004]\n \n     // E1 is not visibly uninhabited from here\n     let (e1, e2) = bar();"}, {"sha": "46ee8d5179e6bcecb9bf1c0b4ae456f6b295a2d1", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `B` not covered\n+error[E0004]: non-exhaustive patterns: `L::B` not covered\n   --> $DIR/match_non_exhaustive.rs:23:11\n    |\n LL |     match l { L::A => () };\n-   |           ^ pattern `B` not covered\n+   |           ^ pattern `L::B` not covered\n    |\n note: `L` defined here\n   --> $DIR/match_non_exhaustive.rs:10:13\n@@ -12,8 +12,8 @@ LL | enum L { A, B }\n    = note: the matched value is of type `L`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL |     match l { L::A => (), B => todo!() };\n-   |                         ++++++++++++++\n+LL |     match l { L::A => (), L::B => todo!() };\n+   |                         +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n   --> $DIR/match_non_exhaustive.rs:28:11"}, {"sha": "5d4181a30f05220aeca7f1eab0e2cead8dee954b", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -22,22 +22,22 @@ fn main() {\n         HiddenEnum::A => {}\n         HiddenEnum::C => {}\n     }\n-    //~^^^^ non-exhaustive patterns: `B` not covered\n+    //~^^^^ non-exhaustive patterns: `HiddenEnum::B` not covered\n \n     match HiddenEnum::A {\n         HiddenEnum::A => {}\n     }\n-    //~^^^ non-exhaustive patterns: `B` and `_` not covered\n+    //~^^^ non-exhaustive patterns: `HiddenEnum::B` and `_` not covered\n \n     match None {\n         None => {}\n         Some(HiddenEnum::A) => {}\n     }\n-    //~^^^^ non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n+    //~^^^^ non-exhaustive patterns: `Some(HiddenEnum::B)` and `Some(_)` not covered\n \n     match InCrate::A {\n         InCrate::A => {}\n         InCrate::B => {}\n     }\n-    //~^^^^ non-exhaustive patterns: `C` not covered\n+    //~^^^^ non-exhaustive patterns: `InCrate::C` not covered\n }"}, {"sha": "b450a9aeddf8d71f5cfd19de3a4ab80e7e3306c3", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -16,11 +16,11 @@ LL ~         HiddenEnum::B => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `B` not covered\n+error[E0004]: non-exhaustive patterns: `HiddenEnum::B` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:21:11\n    |\n LL |     match HiddenEnum::A {\n-   |           ^^^^^^^^^^^^^ pattern `B` not covered\n+   |           ^^^^^^^^^^^^^ pattern `HiddenEnum::B` not covered\n    |\n note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n@@ -34,14 +34,14 @@ LL |     B,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         HiddenEnum::C => {}\n-LL +         B => todo!()\n+LL +         HiddenEnum::B => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n+error[E0004]: non-exhaustive patterns: `HiddenEnum::B` and `_` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:27:11\n    |\n LL |     match HiddenEnum::A {\n-   |           ^^^^^^^^^^^^^ patterns `B` and `_` not covered\n+   |           ^^^^^^^^^^^^^ patterns `HiddenEnum::B` and `_` not covered\n    |\n note: `HiddenEnum` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n@@ -55,14 +55,14 @@ LL |     B,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         HiddenEnum::A => {}\n-LL +         B | _ => todo!()\n+LL +         HiddenEnum::B | _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n+error[E0004]: non-exhaustive patterns: `Some(HiddenEnum::B)` and `Some(_)` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:32:11\n    |\n LL |     match None {\n-   |           ^^^^ patterns `Some(B)` and `Some(_)` not covered\n+   |           ^^^^ patterns `Some(HiddenEnum::B)` and `Some(_)` not covered\n    |\n note: `Option<HiddenEnum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n@@ -76,14 +76,14 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Some(HiddenEnum::A) => {}\n-LL +         Some(B) | Some(_) => todo!()\n+LL +         Some(HiddenEnum::B) | Some(_) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `C` not covered\n+error[E0004]: non-exhaustive patterns: `InCrate::C` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:38:11\n    |\n LL |     match InCrate::A {\n-   |           ^^^^^^^^^^ pattern `C` not covered\n+   |           ^^^^^^^^^^ pattern `InCrate::C` not covered\n    |\n note: `InCrate` defined here\n   --> $DIR/doc-hidden-non-exhaustive.rs:11:5\n@@ -97,7 +97,7 @@ LL |     C,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         InCrate::B => {}\n-LL +         C => todo!()\n+LL +         InCrate::C => todo!()\n    |\n \n error: aborting due to 5 previous errors"}, {"sha": "5e12bc1d22f01859a4b944d6a270986f0f91cc64", "filename": "src/test/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -105,11 +105,11 @@ LL | union NonEmptyUnion2 {\n    = note: the matched value is of type `NonEmptyUnion2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n   --> $DIR/empty-match.rs:83:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n   --> $DIR/empty-match.rs:24:5\n@@ -121,11 +121,11 @@ LL |     Foo(bool),\n    = note: the matched value is of type `NonEmptyEnum1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n   --> $DIR/empty-match.rs:84:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n   --> $DIR/empty-match.rs:27:5\n@@ -139,11 +139,11 @@ LL |     Bar,\n    = note: the matched value is of type `NonEmptyEnum2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n-error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n   --> $DIR/empty-match.rs:85:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n-   |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n+   |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n   --> $DIR/empty-match.rs:30:6\n@@ -238,11 +238,11 @@ LL ~             _ if false => {}\n LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n   --> $DIR/empty-match.rs:92:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n   --> $DIR/empty-match.rs:24:5\n@@ -255,14 +255,14 @@ LL |     Foo(bool),\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n-LL +             Foo(_) => todo!()\n+LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n   --> $DIR/empty-match.rs:93:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n   --> $DIR/empty-match.rs:27:5\n@@ -277,14 +277,14 @@ LL |     Bar,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~             _ if false => {}\n-LL +             Foo(_) | Bar => todo!()\n+LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n   --> $DIR/empty-match.rs:94:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n-   |                        ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n+   |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n   --> $DIR/empty-match.rs:30:6"}, {"sha": "5e12bc1d22f01859a4b944d6a270986f0f91cc64", "filename": "src/test/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -105,11 +105,11 @@ LL | union NonEmptyUnion2 {\n    = note: the matched value is of type `NonEmptyUnion2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n   --> $DIR/empty-match.rs:83:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n   --> $DIR/empty-match.rs:24:5\n@@ -121,11 +121,11 @@ LL |     Foo(bool),\n    = note: the matched value is of type `NonEmptyEnum1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n   --> $DIR/empty-match.rs:84:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n   --> $DIR/empty-match.rs:27:5\n@@ -139,11 +139,11 @@ LL |     Bar,\n    = note: the matched value is of type `NonEmptyEnum2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n-error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n   --> $DIR/empty-match.rs:85:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n-   |                    ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n+   |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n   --> $DIR/empty-match.rs:30:6\n@@ -238,11 +238,11 @@ LL ~             _ if false => {}\n LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n   --> $DIR/empty-match.rs:92:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo(_)` not covered\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n   --> $DIR/empty-match.rs:24:5\n@@ -255,14 +255,14 @@ LL |     Foo(bool),\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n-LL +             Foo(_) => todo!()\n+LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n   --> $DIR/empty-match.rs:93:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo(_)` and `Bar` not covered\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n   --> $DIR/empty-match.rs:27:5\n@@ -277,14 +277,14 @@ LL |     Bar,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~             _ if false => {}\n-LL +             Foo(_) | Bar => todo!()\n+LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n   --> $DIR/empty-match.rs:94:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n-   |                        ^^^^^^^^^^^^^^^^^ patterns `V1`, `V2`, `V3` and 2 more not covered\n+   |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n   --> $DIR/empty-match.rs:30:6"}, {"sha": "9cdc0413ba10ff1efb4d427cbc758a2f0f66bc5f", "filename": "src/test/ui/pattern/usefulness/empty-match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -80,16 +80,16 @@ fn main() {\n     match_no_arms!(NonEmptyStruct2(true)); //~ ERROR type `NonEmptyStruct2` is non-empty\n     match_no_arms!((NonEmptyUnion1 { foo: () })); //~ ERROR type `NonEmptyUnion1` is non-empty\n     match_no_arms!((NonEmptyUnion2 { foo: () })); //~ ERROR type `NonEmptyUnion2` is non-empty\n-    match_no_arms!(NonEmptyEnum1::Foo(true)); //~ ERROR `Foo(_)` not covered\n-    match_no_arms!(NonEmptyEnum2::Foo(true)); //~ ERROR `Foo(_)` and `Bar` not covered\n-    match_no_arms!(NonEmptyEnum5::V1); //~ ERROR `V1`, `V2`, `V3` and 2 more not covered\n+    match_no_arms!(NonEmptyEnum1::Foo(true)); //~ ERROR `NonEmptyEnum1::Foo(_)` not covered\n+    match_no_arms!(NonEmptyEnum2::Foo(true)); //~ ERROR `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n+    match_no_arms!(NonEmptyEnum5::V1); //~ ERROR `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n \n     match_guarded_arm!(0u8); //~ ERROR `_` not covered\n     match_guarded_arm!(NonEmptyStruct1); //~ ERROR `NonEmptyStruct1` not covered\n     match_guarded_arm!(NonEmptyStruct2(true)); //~ ERROR `NonEmptyStruct2(_)` not covered\n     match_guarded_arm!((NonEmptyUnion1 { foo: () })); //~ ERROR `NonEmptyUnion1 { .. }` not covered\n     match_guarded_arm!((NonEmptyUnion2 { foo: () })); //~ ERROR `NonEmptyUnion2 { .. }` not covered\n-    match_guarded_arm!(NonEmptyEnum1::Foo(true)); //~ ERROR `Foo(_)` not covered\n-    match_guarded_arm!(NonEmptyEnum2::Foo(true)); //~ ERROR `Foo(_)` and `Bar` not covered\n-    match_guarded_arm!(NonEmptyEnum5::V1); //~ ERROR `V1`, `V2`, `V3` and 2 more not covered\n+    match_guarded_arm!(NonEmptyEnum1::Foo(true)); //~ ERROR `NonEmptyEnum1::Foo(_)` not covered\n+    match_guarded_arm!(NonEmptyEnum2::Foo(true)); //~ ERROR `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n+    match_guarded_arm!(NonEmptyEnum5::V1); //~ ERROR `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n }"}, {"sha": "f02e5c0c6f8a765f7c70c93800fe4acde0ba69e1", "filename": "src/test/ui/pattern/usefulness/issue-15129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -10,7 +10,7 @@ pub enum V {\n \n fn main() {\n     match (T::T1(()), V::V2(true)) {\n-        //~^ ERROR non-exhaustive patterns: `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n+        //~^ ERROR non-exhaustive patterns: `(T::T1(()), V::V2(_))` and `(T::T2(()), V::V1(_))` not covered\n         (T::T1(()), V::V1(i)) => (),\n         (T::T2(()), V::V2(b)) => (),\n     }"}, {"sha": "ee8410b7650899532aae145c9858fad7ee9e6cf2", "filename": "src/test/ui/pattern/usefulness/issue-15129.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,14 +1,14 @@\n-error[E0004]: non-exhaustive patterns: `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n+error[E0004]: non-exhaustive patterns: `(T::T1(()), V::V2(_))` and `(T::T2(()), V::V1(_))` not covered\n   --> $DIR/issue-15129.rs:12:11\n    |\n LL |     match (T::T1(()), V::V2(true)) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `(T::T1(()), V::V2(_))` and `(T::T2(()), V::V1(_))` not covered\n    |\n    = note: the matched value is of type `(T, V)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         (T::T2(()), V::V2(b)) => (),\n-LL ~         (T1(()), V2(_)) | (T2(()), V1(_)) => todo!(),\n+LL ~         (T::T1(()), V::V2(_)) | (T::T2(()), V::V1(_)) => todo!(),\n    |\n \n error: aborting due to previous error"}, {"sha": "5b878851a3144f5a5ff6a2291c96c9c79c90ea86", "filename": "src/test/ui/pattern/usefulness/issue-31561.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -6,5 +6,5 @@ enum Thing {\n \n fn main() {\n     let Thing::Foo(y) = Thing::Foo(1);\n-    //~^ ERROR refutable pattern in local binding: `Bar` and `Baz` not covered\n+    //~^ ERROR refutable pattern in local binding: `Thing::Bar` and `Thing::Baz` not covered\n }"}, {"sha": "46aebccc5fffff44328fb2f8cd9fb8a238a2d400", "filename": "src/test/ui/pattern/usefulness/issue-31561.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `Bar` and `Baz` not covered\n+error[E0005]: refutable pattern in local binding: `Thing::Bar` and `Thing::Baz` not covered\n   --> $DIR/issue-31561.rs:8:9\n    |\n LL |     let Thing::Foo(y) = Thing::Foo(1);\n-   |         ^^^^^^^^^^^^^ patterns `Bar` and `Baz` not covered\n+   |         ^^^^^^^^^^^^^ patterns `Thing::Bar` and `Thing::Baz` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "c9781d52e6dcf529a79639257c79e9a238be0e5b", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `(Enum::B, _)`, `(Enum::C, _)`, `(Enum::D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:10:11\n    |\n LL |     match (A, ()) {\n-   |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n+   |           ^^^^^^^ patterns `(Enum::B, _)`, `(Enum::C, _)`, `(Enum::D, _)` and 2 more not covered\n    |\n    = note: the matched value is of type `(Enum, ())`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n@@ -11,11 +11,11 @@ LL ~         (A, _) => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `(_, Enum::B)`, `(_, Enum::C)`, `(_, Enum::D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:14:11\n    |\n LL |     match (A, A) {\n-   |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n+   |           ^^^^^^ patterns `(_, Enum::B)`, `(_, Enum::C)`, `(_, Enum::D)` and 2 more not covered\n    |\n    = note: the matched value is of type `(Enum, Enum)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n@@ -24,11 +24,11 @@ LL ~         (_, A) => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `((Enum::B, _), _)`, `((Enum::C, _), _)`, `((Enum::D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:18:11\n    |\n LL |     match ((A, ()), ()) {\n-   |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+   |           ^^^^^^^^^^^^^ patterns `((Enum::B, _), _)`, `((Enum::C, _), _)`, `((Enum::D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), ())`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n@@ -37,11 +37,11 @@ LL ~         ((A, ()), _) => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `((Enum::B, _), _)`, `((Enum::C, _), _)`, `((Enum::D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:22:11\n    |\n LL |     match ((A, ()), A) {\n-   |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+   |           ^^^^^^^^^^^^ patterns `((Enum::B, _), _)`, `((Enum::C, _), _)`, `((Enum::D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), Enum)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n@@ -50,11 +50,11 @@ LL ~         ((A, ()), _) => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `((Enum::B, _), _)`, `((Enum::C, _), _)`, `((Enum::D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:26:11\n    |\n LL |     match ((A, ()), ()) {\n-   |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n+   |           ^^^^^^^^^^^^^ patterns `((Enum::B, _), _)`, `((Enum::C, _), _)`, `((Enum::D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), ())`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n@@ -63,11 +63,11 @@ LL ~         ((A, _), _) => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `S(Enum::B, _)`, `S(Enum::C, _)`, `S(Enum::D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:31:11\n    |\n LL |     match S(A, ()) {\n-   |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n+   |           ^^^^^^^^ patterns `S(Enum::B, _)`, `S(Enum::C, _)`, `S(Enum::D, _)` and 2 more not covered\n    |\n note: `S` defined here\n   --> $DIR/issue-35609.rs:6:8\n@@ -81,11 +81,11 @@ LL ~         S(A, _) => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `Sd { x: Enum::B, .. }`, `Sd { x: Enum::C, .. }`, `Sd { x: Enum::D, .. }` and 2 more not covered\n   --> $DIR/issue-35609.rs:35:11\n    |\n LL |     match (Sd { x: A, y: () }) {\n-   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: Enum::B, .. }`, `Sd { x: Enum::C, .. }`, `Sd { x: Enum::D, .. }` and 2 more not covered\n    |\n note: `Sd` defined here\n   --> $DIR/issue-35609.rs:7:8\n@@ -99,11 +99,11 @@ LL ~         Sd { x: A, y: _ } => {}\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `Some(Enum::B)`, `Some(Enum::C)`, `Some(Enum::D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:39:11\n    |\n LL |     match Some(A) {\n-   |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n+   |           ^^^^^^^ patterns `Some(Enum::B)`, `Some(Enum::C)`, `Some(Enum::D)` and 2 more not covered\n    |\n note: `Option<Enum>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL"}, {"sha": "b8b17918aef8cb69c4b972153e15617f8a2cb0e9", "filename": "src/test/ui/pattern/usefulness/issue-39362.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n+error[E0004]: non-exhaustive patterns: `Foo::Bar { bar: Bar::C, .. }`, `Foo::Bar { bar: Bar::D, .. }`, `Foo::Bar { bar: Bar::E, .. }` and 1 more not covered\n   --> $DIR/issue-39362.rs:10:11\n    |\n LL |     match f {\n-   |           ^ patterns `Bar { bar: C, .. }`, `Bar { bar: D, .. }`, `Bar { bar: E, .. }` and 1 more not covered\n+   |           ^ patterns `Foo::Bar { bar: Bar::C, .. }`, `Foo::Bar { bar: Bar::D, .. }`, `Foo::Bar { bar: Bar::E, .. }` and 1 more not covered\n    |\n note: `Foo` defined here\n   --> $DIR/issue-39362.rs:2:5"}, {"sha": "4973e42b054478ff1c2110fec79427cb25501eea", "filename": "src/test/ui/pattern/usefulness/issue-40221.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `C(QA)` not covered\n+error[E0004]: non-exhaustive patterns: `P::C(PC::QA)` not covered\n   --> $DIR/issue-40221.rs:11:11\n    |\n LL |     match proto {\n-   |           ^^^^^ pattern `C(QA)` not covered\n+   |           ^^^^^ pattern `P::C(PC::QA)` not covered\n    |\n note: `P` defined here\n   --> $DIR/issue-40221.rs:2:5\n@@ -15,7 +15,7 @@ LL |     C(PC),\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         P::C(PC::Q) => (),\n-LL ~         C(QA) => todo!(),\n+LL ~         P::C(PC::QA) => todo!(),\n    |\n \n error: aborting due to previous error"}, {"sha": "9cc760e9a10d73b0a02ef4ba3001c4a4cb3fefcf", "filename": "src/test/ui/pattern/usefulness/issue-50900.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -13,7 +13,7 @@ impl Tag {\n \n fn main() {\n     match Tag::ExifIFDPointer {\n-    //~^ ERROR: non-exhaustive patterns: `Tag(Exif, _)` not covered\n+    //~^ ERROR: non-exhaustive patterns: `Tag(Context::Exif, _)` not covered\n         Tag::ExifIFDPointer => {}\n     }\n }"}, {"sha": "348246d28aacafe901b1f8d71e3e95696c349005", "filename": "src/test/ui/pattern/usefulness/issue-50900.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `Tag(Exif, _)` not covered\n+error[E0004]: non-exhaustive patterns: `Tag(Context::Exif, _)` not covered\n   --> $DIR/issue-50900.rs:15:11\n    |\n LL |     match Tag::ExifIFDPointer {\n-   |           ^^^^^^^^^^^^^^^^^^^ pattern `Tag(Exif, _)` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^ pattern `Tag(Context::Exif, _)` not covered\n    |\n note: `Tag` defined here\n   --> $DIR/issue-50900.rs:2:12\n@@ -13,7 +13,7 @@ LL | pub struct Tag(pub Context, pub u16);\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Tag::ExifIFDPointer => {}\n-LL +         Tag(Exif, _) => todo!()\n+LL +         Tag(Context::Exif, _) => todo!()\n    |\n \n error: aborting due to previous error"}, {"sha": "097cf98d0126b91a0c8dc9a6bf452a3c1fb28667", "filename": "src/test/ui/pattern/usefulness/issue-56379.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -6,7 +6,7 @@ enum Foo {\n \n fn main() {\n     match Foo::A(true) {\n-        //~^ ERROR non-exhaustive patterns: `A(false)`, `B(false)` and `C(false)` not covered\n+        //~^ ERROR non-exhaustive patterns: `Foo::A(false)`, `Foo::B(false)` and `Foo::C(false)` not covered\n         Foo::A(true) => {}\n         Foo::B(true) => {}\n         Foo::C(true) => {}"}, {"sha": "6eed6bfae4c90d512d72279ad1ae5630e5ea6903", "filename": "src/test/ui/pattern/usefulness/issue-56379.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `A(false)`, `B(false)` and `C(false)` not covered\n+error[E0004]: non-exhaustive patterns: `Foo::A(false)`, `Foo::B(false)` and `Foo::C(false)` not covered\n   --> $DIR/issue-56379.rs:8:11\n    |\n LL |     match Foo::A(true) {\n-   |           ^^^^^^^^^^^^ patterns `A(false)`, `B(false)` and `C(false)` not covered\n+   |           ^^^^^^^^^^^^ patterns `Foo::A(false)`, `Foo::B(false)` and `Foo::C(false)` not covered\n    |\n note: `Foo` defined here\n   --> $DIR/issue-56379.rs:2:5\n@@ -19,7 +19,7 @@ LL |     C(bool),\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Foo::C(true) => {}\n-LL +         A(false) | B(false) | C(false) => todo!()\n+LL +         Foo::A(false) | Foo::B(false) | Foo::C(false) => todo!()\n    |\n \n error: aborting due to previous error"}, {"sha": "b5ad3075ca725410968cc48b1e97643a84719fe9", "filename": "src/test/ui/pattern/usefulness/issue-72377.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let y = Some(X::A);\n \n     match (x, y) {\n-        //~^ ERROR non-exhaustive patterns: `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2\n+        //~^ ERROR non-exhaustive patterns: `(X::A, Some(X::A))`, `(X::A, Some(X::B))`, `(X::B, Some(X::B))` and 2\n         //~| more not covered\n         (_, None) => false,\n         (v, Some(w)) if v == w => true,"}, {"sha": "123dd051d2495186947691eda34b41a82fd58e5f", "filename": "src/test/ui/pattern/usefulness/issue-72377.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n+error[E0004]: non-exhaustive patterns: `(X::A, Some(X::A))`, `(X::A, Some(X::B))`, `(X::B, Some(X::B))` and 2 more not covered\n   --> $DIR/issue-72377.rs:8:11\n    |\n LL |     match (x, y) {\n-   |           ^^^^^^ patterns `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n+   |           ^^^^^^ patterns `(X::A, Some(X::A))`, `(X::A, Some(X::B))`, `(X::B, Some(X::B))` and 2 more not covered\n    |\n    = note: the matched value is of type `(X, Option<X>)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms"}, {"sha": "3c9c16561c0281526d3fb554302d9de84dd1d315", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -27,7 +27,7 @@ const EAST: Direction = East;\n \n fn nonexhaustive_2() {\n     match Some(Some(North)) {\n-    //~^ ERROR non-exhaustive patterns: `Some(Some(West))` not covered\n+    //~^ ERROR non-exhaustive patterns: `Some(Some(Direction::West))` not covered\n         Some(NONE) => (),\n         Some(Some(North)) => (),\n         Some(Some(EAST)) => (),\n@@ -46,7 +46,7 @@ const STATIC_FOO: Foo = Foo { bar: None, baz: NEW_FALSE };\n \n fn nonexhaustive_3() {\n     match (Foo { bar: Some(North), baz: NewBool(true) }) {\n-    //~^ ERROR non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }`\n+    //~^ ERROR non-exhaustive patterns: `Foo { bar: Some(Direction::North), baz: NewBool(true) }`\n         Foo { bar: None, baz: NewBool(true) } => (),\n         Foo { bar: _, baz: NEW_FALSE } => (),\n         Foo { bar: Some(West), baz: NewBool(true) } => (),"}, {"sha": "b0d7fe5eb6892174c9c92821a39d7abdf9cdbc31", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -11,11 +11,11 @@ LL ~         (false, true) => (),\n LL +         (true, false) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Some(Some(West))` not covered\n+error[E0004]: non-exhaustive patterns: `Some(Some(Direction::West))` not covered\n   --> $DIR/match-arm-statics-2.rs:29:11\n    |\n LL |     match Some(Some(North)) {\n-   |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(West))` not covered\n+   |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(Direction::West))` not covered\n    |\n note: `Option<Option<Direction>>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n@@ -32,14 +32,14 @@ LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         None => (),\n-LL +         Some(Some(West)) => todo!()\n+LL +         Some(Some(Direction::West)) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n+error[E0004]: non-exhaustive patterns: `Foo { bar: Some(Direction::North), baz: NewBool(true) }` not covered\n   --> $DIR/match-arm-statics-2.rs:48:11\n    |\n LL |     match (Foo { bar: Some(North), baz: NewBool(true) }) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(North), baz: NewBool(true) }` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(Direction::North), baz: NewBool(true) }` not covered\n    |\n note: `Foo` defined here\n   --> $DIR/match-arm-statics-2.rs:40:8\n@@ -50,7 +50,7 @@ LL | struct Foo {\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo { bar: Some(EAST), .. } => (),\n-LL +         Foo { bar: Some(North), baz: NewBool(true) } => todo!()\n+LL +         Foo { bar: Some(Direction::North), baz: NewBool(true) } => todo!()\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "af42fc1aeb463ed9da0c86805144f83c4f188c9b", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -35,43 +35,43 @@ enum E {\n \n fn by_val(e: E) {\n     let e1 = e.clone();\n-    match e1 { //~ ERROR non-exhaustive patterns: `B` and `C` not covered\n-        //~^ NOTE patterns `B` and `C` not covered\n+    match e1 { //~ ERROR non-exhaustive patterns: `E::B` and `E::C` not covered\n+        //~^ NOTE patterns `E::B` and `E::C` not covered\n         //~| NOTE the matched value is of type `E`\n         E::A => {}\n     }\n \n-    let E::A = e; //~ ERROR refutable pattern in local binding: `B` and `C` not covered\n-    //~^ NOTE patterns `B` and `C` not covered\n+    let E::A = e; //~ ERROR refutable pattern in local binding: `E::B` and `E::C` not covered\n+    //~^ NOTE patterns `E::B` and `E::C` not covered\n     //~| NOTE `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with\n     //~| NOTE for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n     //~| NOTE the matched value is of type `E`\n }\n \n fn by_ref_once(e: &E) {\n-    match e { //~ ERROR non-exhaustive patterns: `&B` and `&C` not covered\n-    //~^ NOTE patterns `&B` and `&C` not covered\n+    match e { //~ ERROR non-exhaustive patterns: `&E::B` and `&E::C` not covered\n+    //~^ NOTE patterns `&E::B` and `&E::C` not covered\n     //~| NOTE the matched value is of type `&E`\n         E::A => {}\n     }\n \n-    let E::A = e; //~ ERROR refutable pattern in local binding: `&B` and `&C` not covered\n-    //~^ NOTE patterns `&B` and `&C` not covered\n+    let E::A = e; //~ ERROR refutable pattern in local binding: `&E::B` and `&E::C` not covered\n+    //~^ NOTE patterns `&E::B` and `&E::C` not covered\n     //~| NOTE `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with\n     //~| NOTE for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n     //~| NOTE the matched value is of type `&E`\n }\n \n fn by_ref_thrice(e: & &mut &E) {\n-    match e { //~ ERROR non-exhaustive patterns: `&&mut &B` and `&&mut &C` not covered\n-    //~^ NOTE patterns `&&mut &B` and `&&mut &C` not covered\n+    match e { //~ ERROR non-exhaustive patterns: `&&mut &E::B` and `&&mut &E::C` not covered\n+    //~^ NOTE patterns `&&mut &E::B` and `&&mut &E::C` not covered\n     //~| NOTE the matched value is of type `&&mut &E`\n         E::A => {}\n     }\n \n     let E::A = e;\n-    //~^ ERROR refutable pattern in local binding: `&&mut &B` and `&&mut &C` not covered\n-    //~| NOTE patterns `&&mut &B` and `&&mut &C` not covered\n+    //~^ ERROR refutable pattern in local binding: `&&mut &E::B` and `&&mut &E::C` not covered\n+    //~| NOTE patterns `&&mut &E::B` and `&&mut &E::C` not covered\n     //~| NOTE `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with\n     //~| NOTE for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n     //~| NOTE the matched value is of type `&&mut &E`\n@@ -89,15 +89,15 @@ enum Opt {\n }\n \n fn ref_pat(e: Opt) {\n-    match e {//~ ERROR non-exhaustive patterns: `None` not covered\n-        //~^ NOTE pattern `None` not covered\n+    match e {//~ ERROR non-exhaustive patterns: `Opt::None` not covered\n+        //~^ NOTE pattern `Opt::None` not covered\n         //~| NOTE the matched value is of type `Opt`\n         Opt::Some(ref _x) => {}\n     }\n \n-    let Opt::Some(ref _x) = e; //~ ERROR refutable pattern in local binding: `None` not covered\n+    let Opt::Some(ref _x) = e; //~ ERROR refutable pattern in local binding: `Opt::None` not covered\n     //~^ NOTE the matched value is of type `Opt`\n-    //~| NOTE pattern `None` not covered\n+    //~| NOTE pattern `Opt::None` not covered\n     //~| NOTE `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with\n     //~| NOTE for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n }"}, {"sha": "ac2a9713e7d24325d9000524a5fa30fc500d89a2", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `B` and `C` not covered\n+error[E0004]: non-exhaustive patterns: `E::B` and `E::C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:38:11\n    |\n LL |     match e1 {\n-   |           ^^ patterns `B` and `C` not covered\n+   |           ^^ patterns `E::B` and `E::C` not covered\n    |\n note: `E` defined here\n   --> $DIR/non-exhaustive-defined-here.rs:14:5\n@@ -19,14 +19,14 @@ LL |     C\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         E::A => {}\n-LL +         B | C => todo!()\n+LL +         E::B | E::C => todo!()\n    |\n \n-error[E0005]: refutable pattern in local binding: `B` and `C` not covered\n+error[E0005]: refutable pattern in local binding: `E::B` and `E::C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:44:9\n    |\n LL |     let E::A = e;\n-   |         ^^^^ patterns `B` and `C` not covered\n+   |         ^^^^ patterns `E::B` and `E::C` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -47,11 +47,11 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n LL |     if let E::A = e { todo!() }\n    |     ++              ~~~~~~~~~~~\n \n-error[E0004]: non-exhaustive patterns: `&B` and `&C` not covered\n+error[E0004]: non-exhaustive patterns: `&E::B` and `&E::C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:52:11\n    |\n LL |     match e {\n-   |           ^ patterns `&B` and `&C` not covered\n+   |           ^ patterns `&E::B` and `&E::C` not covered\n    |\n note: `E` defined here\n   --> $DIR/non-exhaustive-defined-here.rs:14:5\n@@ -68,14 +68,14 @@ LL |     C\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         E::A => {}\n-LL +         &B | &C => todo!()\n+LL +         &E::B | &E::C => todo!()\n    |\n \n-error[E0005]: refutable pattern in local binding: `&B` and `&C` not covered\n+error[E0005]: refutable pattern in local binding: `&E::B` and `&E::C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:58:9\n    |\n LL |     let E::A = e;\n-   |         ^^^^ patterns `&B` and `&C` not covered\n+   |         ^^^^ patterns `&E::B` and `&E::C` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -96,11 +96,11 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n LL |     if let E::A = e { todo!() }\n    |     ++              ~~~~~~~~~~~\n \n-error[E0004]: non-exhaustive patterns: `&&mut &B` and `&&mut &C` not covered\n+error[E0004]: non-exhaustive patterns: `&&mut &E::B` and `&&mut &E::C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:66:11\n    |\n LL |     match e {\n-   |           ^ patterns `&&mut &B` and `&&mut &C` not covered\n+   |           ^ patterns `&&mut &E::B` and `&&mut &E::C` not covered\n    |\n note: `E` defined here\n   --> $DIR/non-exhaustive-defined-here.rs:14:5\n@@ -117,14 +117,14 @@ LL |     C\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         E::A => {}\n-LL +         &&mut &B | &&mut &C => todo!()\n+LL +         &&mut &E::B | &&mut &E::C => todo!()\n    |\n \n-error[E0005]: refutable pattern in local binding: `&&mut &B` and `&&mut &C` not covered\n+error[E0005]: refutable pattern in local binding: `&&mut &E::B` and `&&mut &E::C` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:72:9\n    |\n LL |     let E::A = e;\n-   |         ^^^^ patterns `&&mut &B` and `&&mut &C` not covered\n+   |         ^^^^ patterns `&&mut &E::B` and `&&mut &E::C` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n@@ -145,11 +145,11 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n LL |     if let E::A = e { todo!() }\n    |     ++              ~~~~~~~~~~~\n \n-error[E0004]: non-exhaustive patterns: `None` not covered\n+error[E0004]: non-exhaustive patterns: `Opt::None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:92:11\n    |\n LL |     match e {\n-   |           ^ pattern `None` not covered\n+   |           ^ pattern `Opt::None` not covered\n    |\n note: `Opt` defined here\n   --> $DIR/non-exhaustive-defined-here.rs:84:5\n@@ -163,14 +163,14 @@ LL |     None,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Opt::Some(ref _x) => {}\n-LL +         None => todo!()\n+LL +         Opt::None => todo!()\n    |\n \n-error[E0005]: refutable pattern in local binding: `None` not covered\n+error[E0005]: refutable pattern in local binding: `Opt::None` not covered\n   --> $DIR/non-exhaustive-defined-here.rs:98:9\n    |\n LL |     let Opt::Some(ref _x) = e;\n-   |         ^^^^^^^^^^^^^^^^^ pattern `None` not covered\n+   |         ^^^^^^^^^^^^^^^^^ pattern `Opt::None` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}, {"sha": "69c3c76580a7a8b6252e95091da0951bb5befbb7", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -12,7 +12,7 @@ fn match_nested_vecs<'a, T>(l1: Option<&'a [T]>, l2: Result<&'a [T], ()>) -> &'s\n \n fn main() {\n     let x = T::A(U::C);\n-    match x { //~ ERROR non-exhaustive patterns: `A(C)` not covered\n+    match x { //~ ERROR non-exhaustive patterns: `T::A(U::C)` not covered\n         T::A(U::D) => { panic!(\"hello\"); }\n         T::B => { panic!(\"goodbye\"); }\n     }"}, {"sha": "44f327421109a8b79d69f0a30aecf152f5e15f4a", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -11,11 +11,11 @@ LL ~         (None, Ok(&[_, _, ..])) => \"None, Ok(at least two elements)\",\n LL +         (Some(&[]), Err(_)) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `A(C)` not covered\n+error[E0004]: non-exhaustive patterns: `T::A(U::C)` not covered\n   --> $DIR/non-exhaustive-match-nested.rs:15:11\n    |\n LL |     match x {\n-   |           ^ pattern `A(C)` not covered\n+   |           ^ pattern `T::A(U::C)` not covered\n    |\n note: `T` defined here\n   --> $DIR/non-exhaustive-match-nested.rs:1:10\n@@ -26,7 +26,7 @@ LL | enum T { A(U), B }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         T::B => { panic!(\"goodbye\"); }\n-LL +         A(C) => todo!()\n+LL +         T::A(U::C) => todo!()\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "1cb58b8cebef71ffa3335b926593b5631825cf8f", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -4,7 +4,7 @@ enum T { A, B }\n \n fn main() {\n     let x = T::A;\n-    match x { T::B => { } } //~ ERROR non-exhaustive patterns: `A` not covered\n+    match x { T::B => { } } //~ ERROR non-exhaustive patterns: `T::A` not covered\n     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n       true => {}\n     }\n@@ -15,11 +15,11 @@ fn main() {\n                       //  and `(_, _, 5_i32..=i32::MAX)` not covered\n       (_, _, 4) => {}\n     }\n-    match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` and `(B, B)` not covered\n+    match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(T::A, T::A)` and `(T::B, T::B)` not covered\n       (T::A, T::B) => {}\n       (T::B, T::A) => {}\n     }\n-    match T::A { //~ ERROR non-exhaustive patterns: `B` not covered\n+    match T::A { //~ ERROR non-exhaustive patterns: `T::B` not covered\n       T::A => {}\n     }\n     // This is exhaustive, though the algorithm got it wrong at one point"}, {"sha": "4234600d0d02f75144dd41ef900ea1681d522aa6", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `A` not covered\n+error[E0004]: non-exhaustive patterns: `T::A` not covered\n   --> $DIR/non-exhaustive-match.rs:7:11\n    |\n LL |     match x { T::B => { } }\n-   |           ^ pattern `A` not covered\n+   |           ^ pattern `T::A` not covered\n    |\n note: `T` defined here\n   --> $DIR/non-exhaustive-match.rs:3:10\n@@ -12,8 +12,8 @@ LL | enum T { A, B }\n    = note: the matched value is of type `T`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n-LL |     match x { T::B => { }, A => todo!() }\n-   |                          ++++++++++++++\n+LL |     match x { T::B => { }, T::A => todo!() }\n+   |                          +++++++++++++++++\n \n error[E0004]: non-exhaustive patterns: `false` not covered\n   --> $DIR/non-exhaustive-match.rs:8:11\n@@ -62,24 +62,24 @@ LL ~       (_, _, 4) => {}\n LL +       (_, _, i32::MIN..=3_i32) | (_, _, 5_i32..=i32::MAX) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `(A, A)` and `(B, B)` not covered\n+error[E0004]: non-exhaustive patterns: `(T::A, T::A)` and `(T::B, T::B)` not covered\n   --> $DIR/non-exhaustive-match.rs:18:11\n    |\n LL |     match (T::A, T::A) {\n-   |           ^^^^^^^^^^^^ patterns `(A, A)` and `(B, B)` not covered\n+   |           ^^^^^^^^^^^^ patterns `(T::A, T::A)` and `(T::B, T::B)` not covered\n    |\n    = note: the matched value is of type `(T, T)`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~       (T::B, T::A) => {}\n-LL +       (A, A) | (B, B) => todo!()\n+LL +       (T::A, T::A) | (T::B, T::B) => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `B` not covered\n+error[E0004]: non-exhaustive patterns: `T::B` not covered\n   --> $DIR/non-exhaustive-match.rs:22:11\n    |\n LL |     match T::A {\n-   |           ^^^^ pattern `B` not covered\n+   |           ^^^^ pattern `T::B` not covered\n    |\n note: `T` defined here\n   --> $DIR/non-exhaustive-match.rs:3:13\n@@ -90,7 +90,7 @@ LL | enum T { A, B }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~       T::A => {}\n-LL +       B => todo!()\n+LL +       T::B => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `[]` not covered"}, {"sha": "4bd34421922bd9d83fec8145a2bac4b5ce484731", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -21,7 +21,7 @@ enum Color {\n \n fn enum_with_single_missing_variant() {\n     match Color::Red {\n-    //~^ ERROR non-exhaustive patterns: `Red` not covered\n+    //~^ ERROR non-exhaustive patterns: `Color::Red` not covered\n         Color::CustomRGBA { .. } => (),\n         Color::Green => ()\n     }\n@@ -33,7 +33,7 @@ enum Direction {\n \n fn enum_with_multiple_missing_variants() {\n     match Direction::North {\n-    //~^ ERROR non-exhaustive patterns: `East`, `South` and `West` not covered\n+    //~^ ERROR non-exhaustive patterns: `Direction::East`, `Direction::South` and `Direction::West` not covered\n         Direction::North => ()\n     }\n }\n@@ -44,15 +44,15 @@ enum ExcessiveEnum {\n \n fn enum_with_excessive_missing_variants() {\n     match ExcessiveEnum::First {\n-    //~^ ERROR `Second`, `Third`, `Fourth` and 8 more not covered\n+    //~^ ERROR `ExcessiveEnum::Second`, `ExcessiveEnum::Third`, `ExcessiveEnum::Fourth` and 8 more not covered\n \n         ExcessiveEnum::First => ()\n     }\n }\n \n fn enum_struct_variant() {\n     match Color::Red {\n-    //~^ ERROR non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n+    //~^ ERROR non-exhaustive patterns: `Color::CustomRGBA { a: true, .. }` not covered\n         Color::Red => (),\n         Color::Green => (),\n         Color::CustomRGBA { a: false, r: _, g: _, b: 0 } => (),\n@@ -68,7 +68,7 @@ enum Enum {\n fn vectors_with_nested_enums() {\n     let x: &'static [Enum] = &[Enum::First, Enum::Second(false)];\n     match *x {\n-    //~^ ERROR non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n+    //~^ ERROR non-exhaustive patterns: `[Enum::Second(true), Enum::Second(false)]` not covered\n         [] => (),\n         [_] => (),\n         [Enum::First, _] => (),"}, {"sha": "b8af566de7c680d16faee808d8a37564986932e2", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -16,11 +16,11 @@ LL ~         Foo { first: false, second: Some([1, 2, 3, 4]) } => (),\n LL +         Foo { first: false, second: Some([_, _, _, _]) } => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Red` not covered\n+error[E0004]: non-exhaustive patterns: `Color::Red` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:23:11\n    |\n LL |     match Color::Red {\n-   |           ^^^^^^^^^^ pattern `Red` not covered\n+   |           ^^^^^^^^^^ pattern `Color::Red` not covered\n    |\n note: `Color` defined here\n   --> $DIR/non-exhaustive-pattern-witness.rs:17:5\n@@ -33,14 +33,14 @@ LL |     Red,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Color::Green => (),\n-LL +         Red => todo!()\n+LL +         Color::Red => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n+error[E0004]: non-exhaustive patterns: `Direction::East`, `Direction::South` and `Direction::West` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:35:11\n    |\n LL |     match Direction::North {\n-   |           ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n+   |           ^^^^^^^^^^^^^^^^ patterns `Direction::East`, `Direction::South` and `Direction::West` not covered\n    |\n note: `Direction` defined here\n   --> $DIR/non-exhaustive-pattern-witness.rs:31:12\n@@ -56,14 +56,14 @@ LL |     North, East, South, West\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Direction::North => (),\n-LL +         East | South | West => todo!()\n+LL +         Direction::East | Direction::South | Direction::West => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n+error[E0004]: non-exhaustive patterns: `ExcessiveEnum::Second`, `ExcessiveEnum::Third`, `ExcessiveEnum::Fourth` and 8 more not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:46:11\n    |\n LL |     match ExcessiveEnum::First {\n-   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^ patterns `ExcessiveEnum::Second`, `ExcessiveEnum::Third`, `ExcessiveEnum::Fourth` and 8 more not covered\n    |\n note: `ExcessiveEnum` defined here\n   --> $DIR/non-exhaustive-pattern-witness.rs:41:6\n@@ -77,11 +77,11 @@ LL ~         ExcessiveEnum::First => (),\n LL +         _ => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n+error[E0004]: non-exhaustive patterns: `Color::CustomRGBA { a: true, .. }` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:54:11\n    |\n LL |     match Color::Red {\n-   |           ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n+   |           ^^^^^^^^^^ pattern `Color::CustomRGBA { a: true, .. }` not covered\n    |\n note: `Color` defined here\n   --> $DIR/non-exhaustive-pattern-witness.rs:19:5\n@@ -95,20 +95,20 @@ LL |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Color::CustomRGBA { a: false, r: _, g: _, b: _ } => (),\n-LL +         CustomRGBA { a: true, .. } => todo!()\n+LL +         Color::CustomRGBA { a: true, .. } => todo!()\n    |\n \n-error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n+error[E0004]: non-exhaustive patterns: `[Enum::Second(true), Enum::Second(false)]` not covered\n   --> $DIR/non-exhaustive-pattern-witness.rs:70:11\n    |\n LL |     match *x {\n-   |           ^^ pattern `[Second(true), Second(false)]` not covered\n+   |           ^^ pattern `[Enum::Second(true), Enum::Second(false)]` not covered\n    |\n    = note: the matched value is of type `[Enum]`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [_, _, ref tail @ .., _] => (),\n-LL +         [Second(true), Second(false)] => todo!()\n+LL +         [Enum::Second(true), Enum::Second(false)] => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered"}, {"sha": "03db01160ddabe95e6936be4abd65cd3c079358e", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     match UnstableEnum::Stable {\n         UnstableEnum::Stable => {}\n     }\n-    //~^^^ non-exhaustive patterns: `Stable2` and `_` not covered\n+    //~^^^ non-exhaustive patterns: `UnstableEnum::Stable2` and `_` not covered\n \n     match UnstableEnum::Stable {\n         UnstableEnum::Stable => {}"}, {"sha": "7b8588a3c73509c7ae0ef416324437757ee7222d", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `Stable2` and `_` not covered\n+error[E0004]: non-exhaustive patterns: `UnstableEnum::Stable2` and `_` not covered\n   --> $DIR/stable-gated-patterns.rs:8:11\n    |\n LL |     match UnstableEnum::Stable {\n-   |           ^^^^^^^^^^^^^^^^^^^^ patterns `Stable2` and `_` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^ patterns `UnstableEnum::Stable2` and `_` not covered\n    |\n note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:9:5\n@@ -16,7 +16,7 @@ LL |     Stable2,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         UnstableEnum::Stable => {}\n-LL +         Stable2 | _ => todo!()\n+LL +         UnstableEnum::Stable2 | _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `_` not covered"}, {"sha": "85c97be29d6d795ff270410f938569763fdfd410", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `B { x: Some(_) }` not covered\n+error[E0004]: non-exhaustive patterns: `A::B { x: Some(_) }` not covered\n   --> $DIR/struct-like-enum-nonexhaustive.rs:8:11\n    |\n LL |     match x {\n-   |           ^ pattern `B { x: Some(_) }` not covered\n+   |           ^ pattern `A::B { x: Some(_) }` not covered\n    |\n note: `A` defined here\n   --> $DIR/struct-like-enum-nonexhaustive.rs:2:5\n@@ -15,7 +15,7 @@ LL |     B { x: Option<isize> },\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         A::B { x: None } => {}\n-LL +         B { x: Some(_) } => todo!()\n+LL +         A::B { x: Some(_) } => todo!()\n    |\n \n error: aborting due to previous error"}, {"sha": "7046555e0d2f0deaed16b9ba9c48a72152beb33a", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -11,7 +11,7 @@ fn main() {\n         UnstableEnum::Stable => {}\n         UnstableEnum::Stable2 => {}\n     }\n-    //~^^^^ non-exhaustive patterns: `Unstable` not covered\n+    //~^^^^ non-exhaustive patterns: `UnstableEnum::Unstable` not covered\n \n     // Ok: all variants are explicitly matched\n     match UnstableEnum::Stable {"}, {"sha": "6dc9a4058398569a1f37af2f8e72cd045eca1153", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `Unstable` not covered\n+error[E0004]: non-exhaustive patterns: `UnstableEnum::Unstable` not covered\n   --> $DIR/unstable-gated-patterns.rs:10:11\n    |\n LL |     match UnstableEnum::Stable {\n-   |           ^^^^^^^^^^^^^^^^^^^^ pattern `Unstable` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^ pattern `UnstableEnum::Unstable` not covered\n    |\n note: `UnstableEnum` defined here\n   --> $DIR/auxiliary/unstable.rs:11:5\n@@ -16,7 +16,7 @@ LL |     Unstable,\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         UnstableEnum::Stable2 => {}\n-LL +         Unstable => todo!()\n+LL +         UnstableEnum::Unstable => todo!()\n    |\n \n error: aborting due to previous error"}, {"sha": "69a283c31633d7ae27fd39f02436a1acd8e85f7e", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -31,7 +31,7 @@ fn empty_non_exhaustive(x: EmptyNonExhaustiveEnum) {\n \n fn main() {\n     match NonExhaustiveEnum::Unit {}\n-    //~^ ERROR `Unit`, `Tuple(_)` and `Struct { .. }` not covered [E0004]\n+    //~^ ERROR `NonExhaustiveEnum::Unit`, `NonExhaustiveEnum::Tuple(_)` and `NonExhaustiveEnum::Struct { .. }` not covered [E0004]\n     match NormalEnum::Unit {}\n-    //~^ ERROR `Unit`, `Tuple(_)` and `Struct { .. }` not covered [E0004]\n+    //~^ ERROR `NormalEnum::Unit`, `NormalEnum::Tuple(_)` and `NormalEnum::Struct { .. }` not covered [E0004]\n }"}, {"sha": "de1bf8be8854ec31cd3b9dc4e6b9a1d278ac3b5a", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -10,11 +10,11 @@ note: the lint level is defined here\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n+error[E0004]: non-exhaustive patterns: `NonExhaustiveEnum::Unit`, `NonExhaustiveEnum::Tuple(_)` and `NonExhaustiveEnum::Struct { .. }` not covered\n   --> $DIR/enum_same_crate_empty_match.rs:33:11\n    |\n LL |     match NonExhaustiveEnum::Unit {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^ patterns `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonExhaustiveEnum::Unit`, `NonExhaustiveEnum::Tuple(_)` and `NonExhaustiveEnum::Struct { .. }` not covered\n    |\n note: `NonExhaustiveEnum` defined here\n   --> $DIR/enum_same_crate_empty_match.rs:5:5\n@@ -33,15 +33,15 @@ LL |     Struct { field: u32 }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match NonExhaustiveEnum::Unit {\n-LL +         Unit | Tuple(_) | Struct { .. } => todo!(),\n+LL +         NonExhaustiveEnum::Unit | NonExhaustiveEnum::Tuple(_) | NonExhaustiveEnum::Struct { .. } => todo!(),\n LL +     }\n    |\n \n-error[E0004]: non-exhaustive patterns: `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n+error[E0004]: non-exhaustive patterns: `NormalEnum::Unit`, `NormalEnum::Tuple(_)` and `NormalEnum::Struct { .. }` not covered\n   --> $DIR/enum_same_crate_empty_match.rs:35:11\n    |\n LL |     match NormalEnum::Unit {}\n-   |           ^^^^^^^^^^^^^^^^ patterns `Unit`, `Tuple(_)` and `Struct { .. }` not covered\n+   |           ^^^^^^^^^^^^^^^^ patterns `NormalEnum::Unit`, `NormalEnum::Tuple(_)` and `NormalEnum::Struct { .. }` not covered\n    |\n note: `NormalEnum` defined here\n   --> $DIR/enum_same_crate_empty_match.rs:14:5\n@@ -60,7 +60,7 @@ LL |     Struct { field: u32 }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match NormalEnum::Unit {\n-LL +         Unit | Tuple(_) | Struct { .. } => todo!(),\n+LL +         NormalEnum::Unit | NormalEnum::Tuple(_) | NormalEnum::Struct { .. } => todo!(),\n LL +     }\n    |\n "}, {"sha": "4b9f8564d2370cbd56c9ad7b78ac258b1cea4dd7", "filename": "src/test/ui/rfc-2008-non-exhaustive/omitted-patterns.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fomitted-patterns.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -81,7 +81,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:58:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `Struct { .. }` not covered\n+   |         ^ pattern `NonExhaustiveEnum::Struct { .. }` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:57:16\n@@ -95,7 +95,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:65:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `Tuple(_)` not covered\n+   |         ^ pattern `NonExhaustiveEnum::Tuple(_)` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:64:16\n@@ -109,7 +109,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:75:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `Unit` not covered\n+   |         ^ pattern `NonExhaustiveEnum::Unit` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:74:16\n@@ -123,7 +123,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:92:32\n    |\n LL |         NestedNonExhaustive::A(_) => {}\n-   |                                ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n+   |                                ^ patterns `NonExhaustiveEnum::Tuple(_)` and `NonExhaustiveEnum::Struct { .. }` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:89:12\n@@ -137,7 +137,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:94:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `C` not covered\n+   |         ^ pattern `NestedNonExhaustive::C` not covered\n    |\n    = help: ensure that all variants are matched explicitly by adding the suggested match arms\n    = note: the matched value is of type `NestedNonExhaustive` and the `non_exhaustive_omitted_patterns` attribute was found\n@@ -146,7 +146,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:132:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `A(_)` not covered\n+   |         ^ pattern `NonExhaustiveSingleVariant::A(_)` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:130:12\n@@ -160,7 +160,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:144:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `Unstable` not covered\n+   |         ^ pattern `UnstableEnum::Unstable` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:143:16\n@@ -174,7 +174,7 @@ error: some variants are not matched explicitly\n   --> $DIR/omitted-patterns.rs:168:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `Unstable2` not covered\n+   |         ^ pattern `OnlyUnstableEnum::Unstable2` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/omitted-patterns.rs:165:12"}, {"sha": "533e8abf2d68acd5850ac3bb5723c5a40c2890c0", "filename": "src/test/ui/rfc-2008-non-exhaustive/stable-omitted-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstable-omitted-patterns.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -16,7 +16,7 @@ error: some variants are not matched explicitly\n   --> $DIR/stable-omitted-patterns.rs:23:9\n    |\n LL |         _ => {}\n-   |         ^ pattern `Stable2` not covered\n+   |         ^ pattern `UnstableEnum::Stable2` not covered\n    |\n note: the lint level is defined here\n   --> $DIR/stable-omitted-patterns.rs:22:16"}, {"sha": "a9c54af0418a5ce2ca1306678114218a9a491f67", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -55,11 +55,11 @@ LL +         _ => todo!(),\n LL ~     }\n    |\n \n-error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n+error[E0004]: non-exhaustive patterns: `UninhabitedVariants::Tuple(_)` and `UninhabitedVariants::Struct { .. }` not covered\n   --> $DIR/match.rs:31:11\n    |\n LL |     match x {}\n-   |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n+   |           ^ patterns `UninhabitedVariants::Tuple(_)` and `UninhabitedVariants::Struct { .. }` not covered\n    |\n note: `UninhabitedVariants` defined here\n   --> $DIR/auxiliary/uninhabited.rs:17:23\n@@ -74,7 +74,7 @@ LL |     #[non_exhaustive] Struct { x: ! }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n-LL +         Tuple(_) | Struct { .. } => todo!(),\n+LL +         UninhabitedVariants::Tuple(_) | UninhabitedVariants::Struct { .. } => todo!(),\n LL ~     }\n    |\n "}, {"sha": "ec2a2f6f05531f4b792373fcdf707d1db7837238", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -36,11 +36,11 @@ LL +         _ => todo!(),\n LL ~     }\n    |\n \n-error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n+error[E0004]: non-exhaustive patterns: `UninhabitedVariants::Tuple(_)` and `UninhabitedVariants::Struct { .. }` not covered\n   --> $DIR/match_same_crate.rs:38:11\n    |\n LL |     match x {}\n-   |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n+   |           ^ patterns `UninhabitedVariants::Tuple(_)` and `UninhabitedVariants::Struct { .. }` not covered\n    |\n note: `UninhabitedVariants` defined here\n   --> $DIR/match_same_crate.rs:16:23\n@@ -55,7 +55,7 @@ LL |     #[non_exhaustive] Struct { x: ! }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n-LL +         Tuple(_) | Struct { .. } => todo!(),\n+LL +         UninhabitedVariants::Tuple(_) | UninhabitedVariants::Struct { .. } => todo!(),\n LL ~     }\n    |\n "}, {"sha": "b6b777ec56c43579d8fbc0527ca64484a346f97c", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -55,11 +55,11 @@ LL +         _ => todo!(),\n LL ~     }\n    |\n \n-error[E0004]: non-exhaustive patterns: `Tuple(_)` and `Struct { .. }` not covered\n+error[E0004]: non-exhaustive patterns: `UninhabitedVariants::Tuple(_)` and `UninhabitedVariants::Struct { .. }` not covered\n   --> $DIR/match_with_exhaustive_patterns.rs:34:11\n    |\n LL |     match x {}\n-   |           ^ patterns `Tuple(_)` and `Struct { .. }` not covered\n+   |           ^ patterns `UninhabitedVariants::Tuple(_)` and `UninhabitedVariants::Struct { .. }` not covered\n    |\n note: `UninhabitedVariants` defined here\n   --> $DIR/auxiliary/uninhabited.rs:17:23\n@@ -74,7 +74,7 @@ LL |     #[non_exhaustive] Struct { x: ! }\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n-LL +         Tuple(_) | Struct { .. } => todo!(),\n+LL +         UninhabitedVariants::Tuple(_) | UninhabitedVariants::Struct { .. } => todo!(),\n LL ~     }\n    |\n "}, {"sha": "1a0f3c5e5504a8be198cf0a8fdb4c637c1e0be28", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.rs?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -24,5 +24,5 @@ enum Foo {\n \n fn main() {\n     let x: Foo = Foo::D(123, 456);\n-    let Foo::D(_y, _z) = x; //~ ERROR refutable pattern in local binding: `A(_)` not covered\n+    let Foo::D(_y, _z) = x; //~ ERROR refutable pattern in local binding: `Foo::A(_)` not covered\n }"}, {"sha": "feeaa89e76f11eacd6bfe80aeeb29b2df7891e8e", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be53bd838097a835ae7486d8994d721225782bf4/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=be53bd838097a835ae7486d8994d721225782bf4", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `A(_)` not covered\n+error[E0005]: refutable pattern in local binding: `Foo::A(_)` not covered\n   --> $DIR/uninhabited-irrefutable.rs:27:9\n    |\n LL |     let Foo::D(_y, _z) = x;\n-   |         ^^^^^^^^^^^^^^ pattern `A(_)` not covered\n+   |         ^^^^^^^^^^^^^^ pattern `Foo::A(_)` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html"}]}