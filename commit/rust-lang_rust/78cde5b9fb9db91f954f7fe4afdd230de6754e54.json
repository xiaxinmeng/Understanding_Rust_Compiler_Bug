{"sha": "78cde5b9fb9db91f954f7fe4afdd230de6754e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Y2RlNWI5ZmI5ZGI5MWY5NTRmN2ZlNGFmZGQyMzBkZTY3NTRlNTQ=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-01T02:18:19Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-01T14:54:22Z"}, "message": "std: Change `Times` trait to use `do` instead of `for`\n\nChange the former repetition::\n\n    for 5.times { }\n\nto::\n\n    do 5.times { }\n\n.times() cannot be broken with `break` or `return` anymore; for those\ncases, use a numerical range loop instead.", "tree": {"sha": "524e26fcde0b5f86f453eac7768b4881d6f979fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524e26fcde0b5f86f453eac7768b4881d6f979fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cde5b9fb9db91f954f7fe4afdd230de6754e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cde5b9fb9db91f954f7fe4afdd230de6754e54", "html_url": "https://github.com/rust-lang/rust/commit/78cde5b9fb9db91f954f7fe4afdd230de6754e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cde5b9fb9db91f954f7fe4afdd230de6754e54/comments", "author": null, "committer": null, "parents": [{"sha": "7e210a8129c844e0b3aca4a28153effd0817ef41", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e210a8129c844e0b3aca4a28153effd0817ef41", "html_url": "https://github.com/rust-lang/rust/commit/7e210a8129c844e0b3aca4a28153effd0817ef41"}], "stats": {"total": 288, "additions": 137, "deletions": 151}, "files": [{"sha": "08989be871be07a6267224046ee3be821f8f587b", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -548,7 +548,7 @@ an intermediate generation has already exited:\n ~~~\n # use std::task;\n # fn sleep_forever() { loop { task::yield() } }\n-# fn wait_for_a_while() { for 1000.times { task::yield() } }\n+# fn wait_for_a_while() { do 1000.times { task::yield() } }\n # do task::try::<int> {\n do task::spawn_supervised {\n     do task::spawn_supervised {\n@@ -567,7 +567,7 @@ other at all, using `task::spawn_unlinked` for _isolated failure_.\n ~~~\n # use std::task;\n # fn random() -> uint { 100 }\n-# fn sleep_for(i: uint) { for i.times { task::yield() } }\n+# fn sleep_for(i: uint) { do i.times { task::yield() } }\n # do task::try::<()> {\n let (time1, time2) = (random(), random());\n do task::spawn_unlinked {"}, {"sha": "c9f1dfcd5a390707c1c0dd28826a5b809097c304", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -1899,7 +1899,7 @@ struct TimeBomb {\n \n impl Drop for TimeBomb {\n     fn drop(&self) {\n-        for self.explosivity.times {\n+        do self.explosivity.times {\n             println(\"blam!\");\n         }\n     }"}, {"sha": "79eb8439fba4b19395e179fda689e5c5e73bd56d", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -23,7 +23,7 @@\n  * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n  * let shared_numbers=arc::Arc::new(numbers);\n  *\n- *   for 10.times {\n+ *   do 10.times {\n  *       let (port, chan)  = stream();\n  *       chan.send(shared_numbers.clone());\n  *\n@@ -765,7 +765,7 @@ mod tests {\n \n         do task::spawn || {\n             do arc2.write |num| {\n-                for 10.times {\n+                do 10.times {\n                     let tmp = *num;\n                     *num = -1;\n                     task::yield();\n@@ -777,7 +777,7 @@ mod tests {\n \n         // Readers try to catch the writer in the act\n         let mut children = ~[];\n-        for 5.times {\n+        do 5.times {\n             let arc3 = (*arc).clone();\n             let mut builder = task::task();\n             builder.future_result(|r| children.push(r));\n@@ -811,7 +811,7 @@ mod tests {\n \n         // Reader tasks\n         let mut reader_convos = ~[];\n-        for 10.times {\n+        do 10.times {\n             let ((rp1,rc1),(rp2,rc2)) = (comm::stream(),comm::stream());\n             reader_convos.push((rc1, rp2));\n             let arcn = (*arc).clone();\n@@ -925,7 +925,7 @@ mod tests {\n             do read_mode.read |state| {\n                 // if writer mistakenly got in, make sure it mutates state\n                 // before we assert on it\n-                for 5.times { task::yield(); }\n+                do 5.times { task::yield(); }\n                 // make sure writer didn't get in.\n                 assert!(*state);\n             }\n@@ -937,6 +937,6 @@ mod tests {\n         // helped to expose the race nearly 100% of the time... but adding\n         // yields in the intuitively-right locations made it even less likely,\n         // and I wasn't sure why :( . This is a mediocre \"next best\" option.\n-        for 8.times { test_rw_write_cond_downgrade_read_race_helper() }\n+        do 8.times { test_rw_write_cond_downgrade_read_race_helper() }\n     }\n }"}, {"sha": "5d5311d232922a712777c39869ef97fa032d3cf4", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -358,9 +358,9 @@ mod test {\n         use std::rand::{task_rng, random, RngUtil};\n         use std::vec;\n \n-        for 1000.times {\n+        do 1000.times {\n             let v: ~[u8] = do vec::build |push| {\n-                for task_rng().gen_uint_range(1, 100).times {\n+                do task_rng().gen_uint_range(1, 100).times {\n                     push(random());\n                 }\n             };\n@@ -389,4 +389,4 @@ mod test {\n         bh.bytes = b.len() as u64;\n     }\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "570186b65a620b0c7daa205c55ab1c2aea6df3e2", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -674,7 +674,7 @@ impl BitvSet {\n     fn other_op(&mut self, other: &BitvSet, f: &fn(uint, uint) -> uint) {\n         fn nbits(mut w: uint) -> uint {\n             let mut bits = 0;\n-            for uint::bits.times {\n+            for uint::range(0, uint::bits) |_| {\n                 if w == 0 {\n                     break;\n                 }"}, {"sha": "b2b39d34ce2cd79f10ae7cc12ed17b63db0ed962", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -933,7 +933,7 @@ mod tests {\n \n     #[test]\n     fn test_fuzz() {\n-        for 25.times {\n+        do 25.times {\n             fuzz_test(3);\n             fuzz_test(16);\n             fuzz_test(189);"}, {"sha": "d330b0ea1639559ea7b77f16d22eb2acbd6c5252", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -90,13 +90,13 @@ mod tests {\n     fn test_flate_round_trip() {\n         let mut r = rand::rng();\n         let mut words = ~[];\n-        for 20.times {\n+        do 20.times {\n             let range = r.gen_uint_range(1, 10);\n             words.push(r.gen_bytes(range));\n         }\n-        for 20.times {\n+        do 20.times {\n             let mut input = ~[];\n-            for 2000.times {\n+            do 2000.times {\n                 input.push_all(r.choose(words));\n             }\n             debug!(\"de/inflate of %u bytes of random word-sequences\","}, {"sha": "31a73833e27ca6c8910165b6a9c0ce4d648ee422", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -662,7 +662,7 @@ pub mod groups {\n             // here we just need to indent the start of the description\n             let rowlen = row.len();\n             if rowlen < 24 {\n-                for (24 - rowlen).times {\n+                do (24 - rowlen).times {\n                     row.push_char(' ')\n                 }\n             } else {"}, {"sha": "a9f4276e79e701297cb57813fe19382ecaedf22e", "filename": "src/libextra/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -77,7 +77,7 @@ fn escape_str(s: &str) -> ~str {\n \n fn spaces(n: uint) -> ~str {\n     let mut ss = ~\"\";\n-    for n.times {\n+    do n.times {\n         ss.push_str(\" \");\n     }\n     return ss;"}, {"sha": "9cb45a2ec7af96d44a778475574c5b5f11163eb6", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -509,7 +509,7 @@ mod tests {\n     fn bench_grow(b: &mut test::BenchHarness) {\n         let mut deq = RingBuf::new();\n         do b.iter {\n-            for 65.times {\n+            do 65.times {\n                 deq.push_front(1);\n             }\n         }"}, {"sha": "9832ff7396bcbcf00b31fa12b8a98f18f00003b4", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -1081,7 +1081,7 @@ mod big_tests {\n             tim_sort(arr); // /sort\n             isSorted(arr);\n \n-            for 3.times {\n+            do 3.times {\n                 let i1 = rng.gen_uint_range(0, n);\n                 let i2 = rng.gen_uint_range(0, n);\n                 arr.swap(i1, i2);\n@@ -1100,7 +1100,7 @@ mod big_tests {\n             tim_sort(arr); // +sort\n             isSorted(arr);\n \n-            for (n/100).times {\n+            do (n/100).times {\n                 let idx = rng.gen_uint_range(0, n);\n                 arr[idx] = rng.gen();\n             }\n@@ -1153,7 +1153,7 @@ mod big_tests {\n             tim_sort(arr); // /sort\n             isSorted(arr);\n \n-            for 3.times {\n+            do 3.times {\n                 let i1 = rng.gen_uint_range(0, n);\n                 let i2 = rng.gen_uint_range(0, n);\n                 arr.swap(i1, i2);\n@@ -1172,7 +1172,7 @@ mod big_tests {\n             tim_sort(arr); // +sort\n             isSorted(arr);\n \n-            for (n/100).times {\n+            do (n/100).times {\n                 let idx = rng.gen_uint_range(0, n);\n                 arr[idx] = @rng.gen();\n             }"}, {"sha": "e539b067edd1ce01c60600ae5ddbf004e8650cff", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -106,7 +106,7 @@ impl<Q:Send> Sem<Q> {\n                 }\n             }\n             // Uncomment if you wish to test for sem races. Not valgrind-friendly.\n-            /* for 1000.times { task::yield(); } */\n+            /* do 1000.times { task::yield(); } */\n             // Need to wait outside the exclusive.\n             if waiter_nobe.is_some() {\n                 let _ = comm::recv_one(waiter_nobe.unwrap());\n@@ -143,7 +143,7 @@ impl Sem<~[WaitQueue]> {\n     fn new_and_signal(count: int, num_condvars: uint)\n         -> Sem<~[WaitQueue]> {\n         let mut queues = ~[];\n-        for num_condvars.times {\n+        do num_condvars.times {\n             queues.push(WaitQueue::new());\n         }\n         Sem::new(count, queues)\n@@ -826,11 +826,11 @@ mod tests {\n         let s2 = ~s.clone();\n         do task::spawn || {\n             do s2.access {\n-                for 5.times { task::yield(); }\n+                do 5.times { task::yield(); }\n             }\n         }\n         do s.access {\n-            for 5.times { task::yield(); }\n+            do 5.times { task::yield(); }\n         }\n     }\n     #[test]\n@@ -843,7 +843,7 @@ mod tests {\n             s2.acquire();\n             c.send(());\n         }\n-        for 5.times { task::yield(); }\n+        do 5.times { task::yield(); }\n         s.release();\n         let _ = p.recv();\n \n@@ -852,7 +852,7 @@ mod tests {\n         let s = ~Semaphore::new(0);\n         let s2 = ~s.clone();\n         do task::spawn || {\n-            for 5.times { task::yield(); }\n+            do 5.times { task::yield(); }\n             s2.release();\n             let _ = p.recv();\n         }\n@@ -895,7 +895,7 @@ mod tests {\n                     c.send(());\n                 }\n                 let _ = p.recv(); // wait for child to come alive\n-                for 5.times { task::yield(); } // let the child contend\n+                do 5.times { task::yield(); } // let the child contend\n             }\n             let _ = p.recv(); // wait for child to be done\n         }\n@@ -929,7 +929,7 @@ mod tests {\n         }\n \n         fn access_shared(sharedstate: &mut int, m: &Mutex, n: uint) {\n-            for n.times {\n+            do n.times {\n                 do m.lock {\n                     let oldval = *sharedstate;\n                     task::yield();\n@@ -975,7 +975,7 @@ mod tests {\n         let m = ~Mutex::new();\n         let mut ports = ~[];\n \n-        for num_waiters.times {\n+        do num_waiters.times {\n             let mi = ~m.clone();\n             let (port, chan) = comm::stream();\n             ports.push(port);\n@@ -1065,7 +1065,7 @@ mod tests {\n \n         let result: result::Result<(),()> = do task::try || {\n             let mut sibling_convos = ~[];\n-            for 2.times {\n+            do 2.times {\n                 let (p,c) = comm::stream();\n                 let c = Cell::new(c);\n                 sibling_convos.push(p);\n@@ -1212,7 +1212,7 @@ mod tests {\n \n         fn access_shared(sharedstate: &mut int, x: &RWLock, mode: RWLockMode,\n                          n: uint) {\n-            for n.times {\n+            do n.times {\n                 do lock_rwlock_in_mode(x, mode) {\n                     let oldval = *sharedstate;\n                     task::yield();\n@@ -1343,7 +1343,7 @@ mod tests {\n         let x = ~RWLock::new();\n         let mut ports = ~[];\n \n-        for num_waiters.times {\n+        do num_waiters.times {\n             let xi = (*x).clone();\n             let (port, chan) = comm::stream();\n             ports.push(port);"}, {"sha": "ddb3c31ec0576a24baad02b4769cebba9d16a0f4", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -102,7 +102,7 @@ fn test_task_pool() {\n         g\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);\n-    for 8.times {\n+    do 8.times {\n         pool.execute(|i| printfln!(\"Hello from thread %u!\", *i));\n     }\n }"}, {"sha": "0a2f32375f812407e020cb09104a7aee307023de", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -14,12 +14,13 @@\n use std::os;\n use std::rand::RngUtil;\n use std::rand;\n+use std::uint;\n \n /// Attempts to make a temporary directory inside of `tmpdir` whose name will\n /// have the suffix `suffix`. If no directory can be created, None is returned.\n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let mut r = rand::rng();\n-    for 1000.times {\n+    for uint::range(0, 1000) |_| {\n         let p = tmpdir.push(r.gen_str(16) + suffix);\n         if os::make_dir(&p, 0x1c0) { // 700\n             return Some(p);"}, {"sha": "9493a6fb0e0d0fe230ec6fa4d10940d3fe8e8fe6", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -16,6 +16,7 @@\n use std::num;\n use std::util::{swap, replace};\n use std::iterator::{FromIterator, Extendable};\n+use std::uint;\n \n // This is implemented as an AA tree, which is a simplified variation of\n // a red-black tree where red (horizontal) nodes can only be added\n@@ -47,7 +48,7 @@ impl<K: Eq + TotalOrd, V: Eq> Eq for TreeMap<K, V> {\n         } else {\n             let mut x = self.iter();\n             let mut y = other.iter();\n-            for self.len().times {\n+            for uint::range(0, self.len()) |_| {\n                 if x.next().unwrap() != y.next().unwrap() {\n                     return false\n                 }\n@@ -65,7 +66,7 @@ fn lt<K: Ord + TotalOrd, V: Ord>(a: &TreeMap<K, V>,\n     let mut y = b.iter();\n \n     let (a_len, b_len) = (a.len(), b.len());\n-    for num::min(a_len, b_len).times {\n+    for uint::range(0, num::min(a_len, b_len)) |_| {\n         let (key_a, value_a) = x.next().unwrap();\n         let (key_b, value_b) = y.next().unwrap();\n         if *key_a < *key_b { return true; }\n@@ -931,8 +932,8 @@ mod test_treemap {\n \n         let mut rng = rand::IsaacRng::new_seeded(&[42]);\n \n-        for 3.times {\n-            for 90.times {\n+        do 3.times {\n+            do 90.times {\n                 let k = rng.gen();\n                 let v = rng.gen();\n                 if !ctrl.iter().any(|x| x == &(k, v)) {\n@@ -943,7 +944,7 @@ mod test_treemap {\n                 }\n             }\n \n-            for 30.times {\n+            do 30.times {\n                 let r = rng.gen_uint_range(0, ctrl.len());\n                 let (key, _) = ctrl.remove(r);\n                 assert!(map.remove(&key));"}, {"sha": "e98a759d8a8d4a6954a116a788cfcf5ec20c93d7", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -189,7 +189,7 @@ impl<O:DataFlowOperator> DataFlowContext<O> {\n         };\n         if expanded {\n             let entry = if self.oper.initial_value() { uint::max_value } else {0};\n-            for self.words_per_id.times {\n+            do self.words_per_id.times {\n                 self.gens.push(0);\n                 self.kills.push(0);\n                 self.on_entry.push(entry);"}, {"sha": "c8d4901752c29153897ef26f0af4b8491470dd91", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -451,7 +451,7 @@ impl Context {\n         if doc_hidden && self.doc_hidden {\n             self.doc_hidden = false;\n         }\n-        for pushed.times {\n+        do pushed.times {\n             let (lint, lvl, src) = self.lint_stack.pop();\n             self.set_level(lint, lvl, src);\n         }"}, {"sha": "8b2171b59acd5472fdbb95c5eebf0336c3ac0d5f", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -340,7 +340,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n \n             visit::visit_mod(the_module, span, node_id, (method_map, visitor));\n \n-            for n_added.times {\n+            do n_added.times {\n                 ignore(privileged_items.pop());\n             }\n         },\n@@ -370,7 +370,7 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n \n             visit::visit_block(block, (method_map, visitor));\n \n-            for n_added.times {\n+            do n_added.times {\n                 ignore(privileged_items.pop());\n             }\n         },"}, {"sha": "40d0d77c16ecb11cfe39ddcc75bc86a059ba1823", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -188,7 +188,7 @@ pub fn const_expr(cx: @mut CrateContext, e: @ast::expr) -> ValueRef {\n         Some(@ty::AutoDerefRef(ref adj)) => {\n             let mut ty = ety;\n             let mut maybe_ptr = None;\n-            for adj.autoderefs.times {\n+            do adj.autoderefs.times {\n                 let (dv, dt) = const_deref(cx, llconst, ty, false);\n                 maybe_ptr = Some(llconst);\n                 llconst = dv;"}, {"sha": "67fc60c4912c76baa68511abfca9b418bae34b3f", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -637,7 +637,7 @@ mod test {\n         let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n         write_markdown(doc, writer_factory);\n         // We expect two pages to have been written\n-        for 2.times {\n+        do 2.times {\n             po.recv();\n         }\n     }\n@@ -649,7 +649,7 @@ mod test {\n             ~\"#[link(name = \\\"core\\\")]; mod a { }\");\n         let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n         write_markdown(doc, writer_factory);\n-        for 2.times {\n+        do 2.times {\n             let (page, markdown) = po.recv();\n             match page {\n                 doc::CratePage(_) => {"}, {"sha": "ce528bc95225584a9b2bc1f4cdf27e93d0015c69", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -14,13 +14,13 @@\n use iter::Times;\n let ten = 10 as uint;\n let mut accum = 0;\n-for ten.times { accum += 1; }\n+do ten.times { accum += 1; }\n ~~~\n \n */\n \n #[allow(missing_doc)]\n pub trait Times {\n-    fn times(&self, it: &fn() -> bool) -> bool;\n+    fn times(&self, it: &fn());\n }\n "}, {"sha": "013901d57f80e4f83e095d56f92b033b1069878c", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -18,7 +18,6 @@ implementing the `Iterator` trait.\n */\n \n use cmp;\n-use iter::Times;\n use num::{Zero, One};\n use option::{Option, Some, None};\n use ops::{Add, Mul};\n@@ -1229,8 +1228,9 @@ impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n         if self.n == 0 {\n             next\n         } else {\n-            let n = self.n;\n-            for n.times {\n+            let mut n = self.n;\n+            while n > 0 {\n+                n -= 1;\n                 match next {\n                     Some(_) => {\n                         next = self.iter.next();"}, {"sha": "275a72d6ecc051089a58c182dd099fd87e578769", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -97,22 +97,21 @@ pub fn iterate(lo: uint, hi: uint, it: &fn(uint) -> bool) -> bool {\n impl iter::Times for uint {\n     #[inline]\n     ///\n-    /// A convenience form for basic iteration. Given a uint `x`,\n-    /// `for x.times { ... }` executes the given block x times.\n+    /// A convenience form for basic repetition. Given a uint `x`,\n+    /// `do x.times { ... }` executes the given block x times.\n     ///\n     /// Equivalent to `for uint::range(0, x) |_| { ... }`.\n     ///\n     /// Not defined on all integer types to permit unambiguous\n     /// use with integer literals of inferred integer-type as\n-    /// the self-value (eg. `for 100.times { ... }`).\n+    /// the self-value (eg. `do 100.times { ... }`).\n     ///\n-    fn times(&self, it: &fn() -> bool) -> bool {\n+    fn times(&self, it: &fn()) {\n         let mut i = *self;\n         while i > 0 {\n-            if !it() { return false; }\n+            it();\n             i -= 1;\n         }\n-        return true;\n     }\n }\n \n@@ -190,6 +189,6 @@ pub fn test_times() {\n     use iter::Times;\n     let ten = 10 as uint;\n     let mut accum = 0;\n-    for ten.times { accum += 1; }\n+    do ten.times { accum += 1; }\n     assert!((accum == 10));\n }"}, {"sha": "9134d2da25785098ccdf86653538d0d203591d1b", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -695,7 +695,7 @@ impl IsaacRng {\n             }}\n         );\n \n-        for 4.times { mix!(); }\n+        do 4.times { mix!(); }\n \n         if use_rsl {\n             macro_rules! memloop (\n@@ -1092,15 +1092,15 @@ mod test {\n         }\n \n         // run against several seeds\n-        for 10.times {\n+        do 10.times {\n             unsafe {\n                 let seed = super::seed();\n                 let rt_rng = do seed.as_imm_buf |p, sz| {\n                     rustrt::rand_new_seeded(p, sz as size_t)\n                 };\n                 let mut rng = IsaacRng::new_seeded(seed);\n \n-                for 10000.times {\n+                do 10000.times {\n                     assert_eq!(rng.next(), rustrt::rand_next(rt_rng));\n                 }\n                 rustrt::rand_free(rt_rng);"}, {"sha": "79ee8405531ac820971da8f6473c0f559fc8cbcc", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -769,7 +769,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_close_stress() {\n-        for stress_factor().times {\n+        do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n                 let port_cell = Cell::new(port);\n@@ -784,7 +784,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_close_stress() {\n-        for stress_factor().times {\n+        do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n                 let chan_cell = Cell::new(chan);\n@@ -804,7 +804,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_recv_close_stress() {\n-        for stress_factor().times {\n+        do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n                 let chan_cell = Cell::new(chan);\n@@ -830,7 +830,7 @@ mod test {\n \n     #[test]\n     fn oneshot_multi_thread_send_recv_stress() {\n-        for stress_factor().times {\n+        do stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<~int>();\n                 let chan_cell = Cell::new(chan);\n@@ -849,7 +849,7 @@ mod test {\n \n     #[test]\n     fn stream_send_recv_stress() {\n-        for stress_factor().times {\n+        do stress_factor().times {\n             do run_in_mt_newsched_task {\n                 let (port, chan) = stream::<~int>();\n \n@@ -886,8 +886,8 @@ mod test {\n         // Regression test that we don't run out of stack in scheduler context\n         do run_in_newsched_task {\n             let (port, chan) = stream();\n-            for 10000.times { chan.send(()) }\n-            for 10000.times { port.recv() }\n+            do 10000.times { chan.send(()) }\n+            do 10000.times { port.recv() }\n         }\n     }\n \n@@ -897,14 +897,14 @@ mod test {\n             let (port, chan) = stream();\n             let chan = SharedChan::new(chan);\n             let total = stress_factor() + 100;\n-            for total.times {\n+            do total.times {\n                 let chan_clone = chan.clone();\n                 do spawntask_random {\n                     chan_clone.send(());\n                 }\n             }\n \n-            for total.times {\n+            do total.times {\n                 port.recv();\n             }\n         }\n@@ -919,7 +919,7 @@ mod test {\n             let end_chan = SharedChan::new(end_chan);\n             let port = SharedPort::new(port);\n             let total = stress_factor() + 100;\n-            for total.times {\n+            do total.times {\n                 let end_chan_clone = end_chan.clone();\n                 let port_clone = port.clone();\n                 do spawntask_random {\n@@ -928,11 +928,11 @@ mod test {\n                 }\n             }\n \n-            for total.times {\n+            do total.times {\n                 chan.send(());\n             }\n \n-            for total.times {\n+            do total.times {\n                 end_port.recv();\n             }\n         }\n@@ -959,7 +959,7 @@ mod test {\n             let send_total = 10;\n             let recv_total = 20;\n             do spawntask_random {\n-                for send_total.times {\n+                do send_total.times {\n                     let chan_clone = chan.clone();\n                     do spawntask_random {\n                         chan_clone.send(());\n@@ -968,7 +968,7 @@ mod test {\n             }\n             let end_chan_clone = end_chan.clone();\n             do spawntask_random {\n-                for recv_total.times {\n+                do recv_total.times {\n                     let port_clone = port.clone();\n                     let end_chan_clone = end_chan_clone.clone();\n                     do spawntask_random {\n@@ -979,7 +979,7 @@ mod test {\n             }\n \n             let mut recvd = 0;\n-            for recv_total.times {\n+            do recv_total.times {\n                 recvd += if end_port.recv() { 1 } else { 0 };\n             }\n \n@@ -998,23 +998,23 @@ mod test {\n             let pipe = megapipe();\n             let total = stress_factor() + 10;\n             let mut rng = rand::rng();\n-            for total.times {\n+            do total.times {\n                 let msgs = rng.gen_uint_range(0, 10);\n                 let pipe_clone = pipe.clone();\n                 let end_chan_clone = end_chan.clone();\n                 do spawntask_random {\n-                    for msgs.times {\n+                    do msgs.times {\n                         pipe_clone.send(());\n                     }\n-                    for msgs.times {\n+                    do msgs.times {\n                         pipe_clone.recv();\n                     }\n                 }\n \n                 end_chan_clone.send(());\n             }\n \n-            for total.times {\n+            do total.times {\n                 end_port.recv();\n             }\n         }"}, {"sha": "1d7dafc4302488eb4d702815b7c32d801bb1548c", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -371,7 +371,7 @@ mod test {\n \n             do spawntask_immediately {\n                 let mut listener = TcpListener::bind(addr);\n-                for max.times {\n+                do max.times {\n                     let mut stream = listener.accept();\n                     let mut buf = [0];\n                     stream.read(buf);\n@@ -380,7 +380,7 @@ mod test {\n             }\n \n             do spawntask_immediately {\n-                for max.times {\n+                do max.times {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n                 }\n@@ -396,7 +396,7 @@ mod test {\n \n             do spawntask_immediately {\n                 let mut listener = TcpListener::bind(addr);\n-                for max.times {\n+                do max.times {\n                     let mut stream = listener.accept();\n                     let mut buf = [0];\n                     stream.read(buf);\n@@ -405,7 +405,7 @@ mod test {\n             }\n \n             do spawntask_immediately {\n-                for max.times {\n+                do max.times {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n                 }"}, {"sha": "3bcf67878245916ba1405435c941aed029a66bea", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -255,7 +255,7 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     // sent the Shutdown message to terminate the schedulers.\n     let mut handles = ~[];\n \n-    for nscheds.times {\n+    do nscheds.times {\n         // Every scheduler is driven by an I/O event loop.\n         let loop_ = ~UvEventLoop::new();\n         let mut sched = ~Scheduler::new(loop_, work_queue.clone(), sleepers.clone());"}, {"sha": "ae4ca2b978357f12850da8dab8dd05dfa89625bb", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -1097,7 +1097,7 @@ mod test {\n \n         do run_in_mt_newsched_task {\n             let mut ports = ~[];\n-            for 10.times {\n+            do 10.times {\n                 let (port, chan) = oneshot();\n                 let chan_cell = Cell::new(chan);\n                 do spawntask_later {"}, {"sha": "aba42ee92c3f88cae3669579649c0e6aff1e9d49", "filename": "src/libstd/rt/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Frt%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fselect.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -187,7 +187,7 @@ mod test {\n         do run_in_newsched_task {\n             let (ports, _) = unzip(from_fn(10, |_| stream()));\n             let (port, chan) = stream();\n-            for 10.times { chan.send(31337); }\n+            do 10.times { chan.send(31337); }\n             let mut ports = ports;\n             let mut port = Some(port);\n             let order = [5u,0,4,3,2,6,9,8,7,1];\n@@ -268,7 +268,7 @@ mod test {\n \n             do run_in_newsched_task {\n                 // A bit of stress, since ordinarily this is just smoke and mirrors.\n-                for 4.times {\n+                do 4.times {\n                     let send_on_chans = send_on_chans.clone();\n                     do task::spawn {\n                         let mut ports = ~[];"}, {"sha": "f0c0595744c956f85df4571acffa889dbb52fff9", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -1828,7 +1828,7 @@ impl<'self> StrSlice<'self> for &'self str {\n                 do ret.as_mut_buf |rbuf, _len| {\n                     let mut rbuf = rbuf;\n \n-                    for nn.times {\n+                    do nn.times {\n                         ptr::copy_memory(rbuf, buf, len);\n                         rbuf = rbuf.offset(len as int);\n                     }"}, {"sha": "d0124407bd4a22efa1a1343ade8ab55d03455457", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -683,7 +683,7 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n         let ch = ch.clone();\n         do spawn_unlinked {\n             // Give middle task a chance to fail-but-not-kill-us.\n-            for 16.times { task::yield(); }\n+            do 16.times { task::yield(); }\n             ch.send(()); // If killed first, grandparent hangs.\n         }\n         fail!(); // Shouldn't kill either (grand)parent or (grand)child.\n@@ -698,7 +698,7 @@ fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     do spawn_supervised { fail!(); }\n     // Give child a chance to fail-but-not-kill-us.\n-    for 16.times { task::yield(); }\n+    do 16.times { task::yield(); }\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_fail_down() {\n@@ -760,7 +760,7 @@ fn test_spawn_failure_propagate_grandchild() {\n     do spawn_supervised {\n         do spawn_supervised { block_forever(); }\n     }\n-    for 16.times { task::yield(); }\n+    do 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -770,7 +770,7 @@ fn test_spawn_failure_propagate_secondborn() {\n     do spawn_supervised {\n         do spawn { block_forever(); } // linked\n     }\n-    for 16.times { task::yield(); }\n+    do 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -780,7 +780,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n     do spawn { // linked\n         do spawn_supervised { block_forever(); }\n     }\n-    for 16.times { task::yield(); }\n+    do 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -790,7 +790,7 @@ fn test_spawn_linked_sup_propagate_sibling() {\n     do spawn { // linked\n         do spawn { block_forever(); } // linked\n     }\n-    for 16.times { task::yield(); }\n+    do 16.times { task::yield(); }\n     fail!();\n }\n \n@@ -970,7 +970,7 @@ fn test_spawn_sched_blocking() {\n \n         // Testing that a task in one scheduler can block in foreign code\n         // without affecting other schedulers\n-        for 20u.times {\n+        do 20u.times {\n             let (start_po, start_ch) = stream();\n             let (fin_po, fin_ch) = stream();\n \n@@ -1076,7 +1076,7 @@ fn test_unkillable() {\n \n     // We want to do this after failing\n     do spawn_unlinked {\n-        for 10.times { yield() }\n+        do 10.times { yield() }\n         ch.send(());\n     }\n \n@@ -1111,7 +1111,7 @@ fn test_unkillable_nested() {\n \n     // We want to do this after failing\n     do spawn_unlinked || {\n-        for 10.times { yield() }\n+        do 10.times { yield() }\n         ch.send(());\n     }\n "}, {"sha": "5417af50081318282126e2de2e624624b7149ca3", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -636,7 +636,7 @@ pub mod rt {\n                 buf.push_char(c);\n             }\n             buf.push_str(s);\n-            for diff.times {\n+            do diff.times {\n                 buf.push_char(padchar);\n             }\n             return;"}, {"sha": "f5c82bad2b1d486f4b8114b42abba1c18f920f73", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -626,7 +626,7 @@ mod tests {\n             let x = Exclusive::new(~~\"hello\");\n             let x2 = x.clone();\n             do task::spawn {\n-                for 10.times { task::yield(); } // try to let the unwrapper go\n+                do 10.times { task::yield(); } // try to let the unwrapper go\n                 fail!(); // punt it awake from its deadlock\n             }\n             let _z = x.unwrap();"}, {"sha": "0fb28596e11ba78c8ac14458ca9a2c22f76d33ef", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -302,7 +302,7 @@ fn highlight_lines(cm: @codemap::CodeMap,\n         // Skip is the number of characters we need to skip because they are\n         // part of the 'filename:line ' part of the previous line.\n         let skip = fm.name.len() + digits + 3u;\n-        for skip.times() {\n+        do skip.times() {\n             s.push_char(' ');\n         }\n         let orig = fm.get_line(lines.lines[0] as int);\n@@ -323,7 +323,7 @@ fn highlight_lines(cm: @codemap::CodeMap,\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n             let num_squigglies = hi.col.to_uint()-lo.col.to_uint()-1u;\n-            for num_squigglies.times() {\n+            do num_squigglies.times() {\n                 s.push_char('~')\n             }\n         }"}, {"sha": "ad26d7b3f7eab8459689ab96022f6be48ebbffa1", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -403,7 +403,7 @@ pub fn parse(\n                 }\n                 cur_eis.push(ei);\n \n-                for rust_parser.tokens_consumed.times() || {\n+                do rust_parser.tokens_consumed.times() || {\n                     rdr.next_token();\n                 }\n             }"}, {"sha": "7a11a93abc5494b8c6d4e73d196b6d235b0c5549", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -59,7 +59,7 @@ impl Results {\n         {\n             let mut set = f();\n             do timed(&mut self.random_ints) {\n-                for num_keys.times {\n+                do num_keys.times {\n                     set.insert((rng.next() as uint) % rand_cap);\n                 }\n             }\n@@ -103,7 +103,7 @@ impl Results {\n         {\n             let mut set = f();\n             do timed(&mut self.random_strings) {\n-                for num_keys.times {\n+                do num_keys.times {\n                     let s = uint::to_str(rng.next() as uint);\n                     set.insert(s);\n                 }"}, {"sha": "e25f1bdfa78055da52ffa9643b9f80214a53e8bb", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -105,7 +105,7 @@ fn main() {\n     let symbols = [\" \", \"\u2591\", \"\u2592\", \"\u2593\", \"\u2588\", \"\u2588\"];\n     let mut pixels = [0f32, ..256*256];\n     let n2d = ~Noise2DContext::new();\n-    for 100.times {\n+    do 100.times {\n         for int::range(0, 256) |y| {\n             for int::range(0, 256) |x| {\n                 let v = n2d.get("}, {"sha": "4ad96a21b88d29a0b815eeae5697f82ff8c5410f", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -169,7 +169,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     let mut creatures_met = 0;\n \n     // set up meetings...\n-    for nn.times {\n+    do nn.times {\n         let fst_creature: CreatureInfo = from_creatures.recv();\n         let snd_creature: CreatureInfo = from_creatures.recv();\n "}, {"sha": "f7b66e9e1458f5a5f60dc4bdb2beede6c5943614", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -164,7 +164,7 @@ impl RandomFasta {\n             let chars_left = n % LINE_LEN;\n             let mut buf = [0, ..LINE_LEN + 1];\n \n-            for lines.times {\n+            do lines.times {\n                 for range(0, LINE_LEN) |i| {\n                     buf[i] = self.nextc();\n                 }"}, {"sha": "69d173c8070266315bc9f8f58fee03c52df2b427", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -54,7 +54,7 @@ impl Code {\n     fn unpack(&self, frame: i32) -> ~str {\n         let mut key = **self;\n         let mut result = ~[];\n-        for (frame as uint).times {\n+        do (frame as uint).times {\n             result.push(unpack_symbol((key as u8) & 3));\n             key >>= 2;\n         }\n@@ -251,7 +251,7 @@ fn generate_frequencies(frequencies: &mut Table,\n     let mut code = Code(0);\n \n     // Pull first frame.\n-    for (frame as uint).times {\n+    do (frame as uint).times {\n         code = code.push_char(input[0]);\n         input = next_char(input);\n     }"}, {"sha": "930439fe7f08bc03f4e1ad57b1656371f1e8cfae", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -30,7 +30,7 @@ fn main() {\n                 let Cr = 2.0 * (x as f64) / (w as f64) - 1.5;\n                 let Ci = 2.0 * (y as f64) / (h as f64) - 1.0;\n \n-                for ITER.times {\n+                for range(0, ITER as i32) |_| {\n                     if Tr + Ti > LIMIT * LIMIT {\n                         break;\n                     }"}, {"sha": "b294ca8f282c64b94ee978069e60d652dc4dce3b", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -80,7 +80,7 @@ struct Planet {\n \n fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: i32) {\n     let mut d = [ 0.0, ..3 ];\n-    for (steps as uint).times {\n+    do (steps as uint).times {\n         for range(0, N_BODIES) |i| {\n             for range(i + 1, N_BODIES) |j| {\n                 d[0] = bodies[i].x[0] - bodies[j].x[0];"}, {"sha": "5187d0352985a1a15bc37592cc3a7f7a11cf6633", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -56,7 +56,7 @@ fn main() {\n     let mut u = vec::from_elem(n, 1f64);\n     let mut v = u.clone();\n     let mut tmp = u.clone();\n-    for 8.times {\n+    do 8.times {\n         mult_AtAv(u, v, tmp);\n         mult_AtAv(v, u, tmp);\n     }"}, {"sha": "ca539d712fdefb726cc41082f7524fe2a4d53d89", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -32,7 +32,7 @@ fn main() {\n }\n \n fn run(repeat: int, depth: int) {\n-    for (repeat as uint).times {\n+    do (repeat as uint).times {\n         info!(\"starting %.4f\", precise_time_s());\n         do task::try {\n             recurse_or_fail(depth, None)"}, {"sha": "6ab83e5b3830b632b3d0474e5672c8ebfac0b918", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -32,7 +32,7 @@ fn grandchild_group(num_tasks: uint) {\n     let (po, ch) = stream();\n     let ch = SharedChan::new(ch);\n \n-    for num_tasks.times {\n+    do num_tasks.times {\n         let ch = ch.clone();\n         do task::spawn { // linked\n             ch.send(());\n@@ -41,7 +41,7 @@ fn grandchild_group(num_tasks: uint) {\n         }\n     }\n     error!(\"Grandchild group getting started\");\n-    for num_tasks.times {\n+    do num_tasks.times {\n         // Make sure all above children are fully spawned; i.e., enlisted in\n         // their ancestor groups.\n         po.recv();"}, {"sha": "1aa05a9477de9a43dc85d09de7d499bbd5a7173a", "filename": "src/test/compile-fail/block-must-not-have-result-for.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e210a8129c844e0b3aca4a28153effd0817ef41/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e210a8129c844e0b3aca4a28153effd0817ef41/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs?ref=7e210a8129c844e0b3aca4a28153effd0817ef41", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    for 2.times {  //~ ERROR A for-loop body must return (), but\n-        true\n-    }\n-}"}, {"sha": "642e4653cd0239d3065ef1efdcce824001c78ba1", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -40,7 +40,7 @@ fn block_overarching_alias_mut() {\n \n     let mut v = ~3;\n     let mut x = &mut v;\n-    for 3.times {\n+    do 3.times {\n         borrow(v); //~ ERROR cannot borrow\n     }\n     *x = ~5;"}, {"sha": "bcd8e86d1d3bb18fb0e4a3e7a4fee6c76fca3e00", "filename": "src/test/compile-fail/issue-3651-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3651-2.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    do 5.times {}; //~ ERROR Do-block body must return bool, but returns () here. Perhaps\n+    fn take_block(f: &fn() -> bool) -> bool { f() }\n+    do take_block {}; //~ ERROR Do-block body must return bool, but returns () here. Perhaps\n }"}, {"sha": "a281e9863649eb4455ea30c7496262dab4d02753", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -40,7 +40,7 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for 10u.times {\n+    do 10u.times {\n         do task::spawn {\n             let result = count(5u);\n             info!(\"result = %?\", result);"}, {"sha": "b57e179f4a9af709155d39ca87fd1d7e1a863b52", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -13,11 +13,10 @@\n extern mod extra;\n use extra::bitv::*;\n \n-fn bitv_test() -> bool {\n+fn bitv_test() {\n     let mut v1 = ~Bitv::new(31, false);\n     let v2 = ~Bitv::new(31, true);\n     v1.union(v2);\n-    true\n }\n \n pub fn main() {"}, {"sha": "c282860957a1f13b6f5f3af6be36f7b191d944fc", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -69,7 +69,7 @@ pub fn main() {\n     roundtrip::<C>();\n     roundtrip::<D>();\n \n-    for 20.times {\n+    do 20.times {\n         roundtrip::<E>();\n         roundtrip::<F>();\n         roundtrip::<G<int>>();"}, {"sha": "65bfc14406fc49e651072b0c2453b797b0290fdf", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -32,7 +32,7 @@ enum D {\n \n fn main() {\n     // check there's no segfaults\n-    for 20.times {\n+    do 20.times {\n         rand::random::<A>();\n         rand::random::<B>();\n         rand::random::<C>();"}, {"sha": "4574fbc1ff0cdbc0cf11a8ef2d06e847d57a15fa", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -39,7 +39,7 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    for 100u.times {\n+    do 100u.times {\n         do task::spawn {\n             assert_eq!(count(5u), 16u);\n         };"}, {"sha": "4722eeea3d7ccfee718b23a595d8097fc32f02fb", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -36,7 +36,7 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    for 10u.times {\n+    do 10u.times {\n         do task::spawn {\n             let result = count(5u);\n             info!(\"result = %?\", result);"}, {"sha": "49ed6de0c99992235c778170d0730e6ca442bb18", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -1,6 +1,6 @@\n pub fn main() {\n     let mut x = 0;\n-    for 4096.times {\n+    do 4096.times {\n         x += 1;\n     }\n     assert_eq!(x, 4096);"}, {"sha": "5d8405ce43336a0c9906cfdbe561e7c18ea8cada", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -68,7 +68,7 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n     let mut lines = do vec::build_sized(height) |push| {\n-            for height.times {\n+            do height.times {\n                 push(vec::from_elem(width, '.'));\n             }\n         };"}, {"sha": "f9b374e7cd21b0a693bd80d15e2d2b739b040431", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -45,7 +45,7 @@ priv fn parse_data(len: uint, io: @io::Reader) -> Result {\n \n priv fn parse_list(len: uint, io: @io::Reader) -> Result {\n   let mut list: ~[Result] = ~[];\n-    for len.times {\n+    do len.times {\n     let v =\n         match io.read_char() {\n         '$' => parse_bulk(io),"}, {"sha": "99250c4c8a24a747c90fb922ebf04108ea27216d", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -1,6 +1,6 @@\n pub fn main() {\n     let mut count = 0;\n-    for 999_999.times() {\n+    do 999_999.times() {\n         count += 1;\n     }\n     assert_eq!(count, 999_999);"}, {"sha": "3f4b732af32764f628bf341c11623f4c1a3ce3c4", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -14,7 +14,7 @@ trait Fooable {\n \n impl Fooable for uint {\n     fn yes(self) {\n-        for self.times {\n+        do self.times {\n             println(\"yes\");\n         }\n     }"}, {"sha": "569ccf5335ea037cded12a353d5671c2f6e1f286", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     assert_eq!(15u64.add(&6u64), 21u64);\n \n     // times\n-     15u.times(|| false);\n+     15u.times(|| {});\n \n // floats\n     // num"}, {"sha": "7c90b38bae1c9f6686c99216d51614cd25987c0b", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cde5b9fb9db91f954f7fe4afdd230de6754e54/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=78cde5b9fb9db91f954f7fe4afdd230de6754e54", "patch": "@@ -266,7 +266,7 @@ fn more_floats() {\n }\n \n fn pointer() {\n-    for 10.times {\n+    do 10.times {\n         let x: uint = ::std::rand::random();\n         assert_eq!(fmt!(\"%p\", x as *uint), fmt!(\"0x%x\", x));\n     }"}]}