{"sha": "d669882f386e26d214284fbe8f7696519b802778", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Njk4ODJmMzg2ZTI2ZDIxNDI4NGZiZThmNzY5NjUxOWI4MDI3Nzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-05T01:36:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-02-22T00:34:37Z"}, "message": "Do not suggest `;` if expression is side effect free\n\nWhen a tail expression isn't unit, we previously always suggested adding\na trailing `;` to turn it into a statement. This suggestion isn't\nappropriate for any expression that doesn't have side-effects, as the\nuser will have likely wanted to call something else or do something with\nthe resulting value, instead of just discarding it.", "tree": {"sha": "ed34cebfa34e64eced6e6f0bc9a572d99f169bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed34cebfa34e64eced6e6f0bc9a572d99f169bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d669882f386e26d214284fbe8f7696519b802778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d669882f386e26d214284fbe8f7696519b802778", "html_url": "https://github.com/rust-lang/rust/commit/d669882f386e26d214284fbe8f7696519b802778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d669882f386e26d214284fbe8f7696519b802778/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "020edd91a911cebf8aeada9f04dff047dc76171e", "url": "https://api.github.com/repos/rust-lang/rust/commits/020edd91a911cebf8aeada9f04dff047dc76171e", "html_url": "https://github.com/rust-lang/rust/commit/020edd91a911cebf8aeada9f04dff047dc76171e"}], "stats": {"total": 143, "additions": 92, "deletions": 51}, "files": [{"sha": "840099841839ab47f55e4f71f4d044be6ad60ebe", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -1,5 +1,6 @@\n // ignore-tidy-filelength\n use crate::def::{DefKind, Namespace, Res};\n+use crate::def::{CtorKind, DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::{itemlikevisit, LangItem};\n@@ -1554,6 +1555,63 @@ impl Expr<'_> {\n         }\n         expr\n     }\n+\n+    pub fn can_have_side_effects(&self) -> bool {\n+        match self.peel_drop_temps().kind {\n+            ExprKind::Path(_) | ExprKind::Lit(_) => false,\n+            ExprKind::Type(base, _)\n+            | ExprKind::Unary(_, base)\n+            | ExprKind::Field(base, _)\n+            | ExprKind::Index(base, _) \n+            | ExprKind::AddrOf(.., base)\n+            | ExprKind::Cast(base, _) => {\n+                // This isn't exactly true for `Index` and all `Unnary`, but we are using this\n+                // method exclusively for diagnostics and there's a *cultural* pressure against\n+                // them being used only for its side-effects.\n+                base.can_have_side_effects()\n+            }\n+            ExprKind::Struct(_, fields, init) => fields\n+                .iter()\n+                .map(|field| field.expr)\n+                .chain(init.into_iter())\n+                .all(|e| e.can_have_side_effects()),\n+\n+            ExprKind::Array(args)\n+            | ExprKind::Tup(args)\n+            | ExprKind::Call(\n+                Expr {\n+                    kind:\n+                        ExprKind::Path(QPath::Resolved(\n+                            None,\n+                            Path { res: Res::Def(DefKind::Ctor(_, CtorKind::Fn), _), .. },\n+                        )),\n+                    ..\n+                },\n+                args,\n+            ) => args.iter().all(|arg| arg.can_have_side_effects()),\n+            ExprKind::If(..)\n+            | ExprKind::Match(..)\n+            | ExprKind::MethodCall(..)\n+            | ExprKind::Call(..)\n+            | ExprKind::Closure(..)\n+            | ExprKind::Block(..)\n+            | ExprKind::Repeat(..)\n+            | ExprKind::Break(..)\n+            | ExprKind::Continue(..)\n+            | ExprKind::Ret(..)\n+            | ExprKind::Loop(..)\n+            | ExprKind::Assign(..)\n+            | ExprKind::InlineAsm(..)\n+            | ExprKind::LlvmInlineAsm(..)\n+            | ExprKind::AssignOp(..)\n+            | ExprKind::ConstBlock(..)\n+            | ExprKind::Box(..)\n+            | ExprKind::Binary(..)\n+            | ExprKind::Yield(..)\n+            | ExprKind::DropTemps(..)\n+            | ExprKind::Err => true,\n+        }\n+    }\n }\n \n /// Checks if the specified expression is a built-in range literal."}, {"sha": "159c97d8bfaa917d3a937300a80e0babe6beda42", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -1450,7 +1450,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             ) {\n                 if cond_expr.span.desugaring_kind().is_none() {\n                     err.span_label(cond_expr.span, \"expected this to be `()`\");\n-                    fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n+                    if expr.can_have_side_effects() {\n+                        fcx.suggest_semicolon_at_end(cond_expr.span, &mut err);\n+                    }\n                 }\n             }\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))"}, {"sha": "155c10e891652f1b9cf75f8f5c401bdce8091e55", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -561,7 +561,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n                 self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit(), |err| {\n-                    self.suggest_semicolon_at_end(expr.span, err);\n+                    if expr.can_have_side_effects() {\n+                        self.suggest_semicolon_at_end(expr.span, err);\n+                    }\n                 });\n             }\n             hir::StmtKind::Semi(ref expr) => {"}, {"sha": "416b75d9e2e0c0c51bbfae4c2c1753272c1dcf92", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -44,11 +44,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n-        self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        if expr.can_have_side_effects() {\n+            self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type =\n                 self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n+            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found);\n         }\n         pointing_at_return_type\n     }\n@@ -392,7 +395,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Loop(..)\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n-                | ExprKind::Block(..) => {\n+                | ExprKind::Block(..)\n+                    if expression.can_have_side_effects() =>\n+                {\n                     err.span_suggestion(\n                         cause_span.shrink_to_hi(),\n                         \"consider using a semicolon here\","}, {"sha": "7f96aa289d0abc565b87aa2ef6ae47f0abdf4c7e", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -14,9 +14,7 @@ LL | |         true\n    | |         ^^^^ expected `()`, found `bool`\n LL | |\n LL | |     }\n-   | |     -- help: consider using a semicolon here\n-   | |_____|\n-   |       expected this to be `()`\n+   | |_____- expected this to be `()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "2a70127485785783128b9bd5c905fc9d6fa4b004", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -7,10 +7,6 @@ LL |     if let Some(x) = a { true } else { false }\n    |     |                    expected `()`, found `bool`\n    |     expected this to be `()`\n    |\n-help: consider using a semicolon here\n-   |\n-LL |     if let Some(x) = a { true } else { false };\n-   |                                               ^\n help: you might have meant to return this value\n    |\n LL |     if let Some(x) = a { return true; } else { false }\n@@ -25,10 +21,6 @@ LL |     if let Some(x) = a { true } else { false }\n    |     |                                  expected `()`, found `bool`\n    |     expected this to be `()`\n    |\n-help: consider using a semicolon here\n-   |\n-LL |     if let Some(x) = a { true } else { false };\n-   |                                               ^\n help: you might have meant to return this value\n    |\n LL |     if let Some(x) = a { true } else { return false; }"}, {"sha": "3ea5ca565c5e530e9cd4525cc6dffafd6863dfab", "filename": "src/test/ui/parser/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-variant-in-if.stderr?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n LL |     if x == E::V { field } {}\n-   |     ---------------^^^^^--- help: consider using a semicolon here\n+   |     ---------------^^^^^--\n    |     |              |\n    |     |              expected `()`, found `bool`\n    |     expected this to be `()`"}, {"sha": "52c63c8e223e47ff7c9d371449fb68d13b958769", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -9,14 +9,6 @@ LL | |     }\n    |\n    = note: expected unit type `()`\n                    found enum `std::result::Result<_, {integer}>`\n-help: consider using a semicolon here\n-   |\n-LL |         Err(42);\n-   |                ^\n-help: consider using a semicolon here\n-   |\n-LL |     };\n-   |      ^\n help: you might have meant to return this value\n    |\n LL |         return Err(42);"}, {"sha": "03cbed1376ea3ed21c8513d2d7a35d5ef419c539", "filename": "src/test/ui/suggestions/match-needing-semi.fixed", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/020edd91a911cebf8aeada9f04dff047dc76171e/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/020edd91a911cebf8aeada9f04dff047dc76171e/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed?ref=020edd91a911cebf8aeada9f04dff047dc76171e", "patch": "@@ -1,18 +0,0 @@\n-// check-only\n-// run-rustfix\n-\n-fn main() {\n-    match 3 {\n-        4 => 1,\n-        3 => {\n-            2 //~ ERROR mismatched types\n-        }\n-        _ => 2\n-    };\n-    match 3 { //~ ERROR mismatched types\n-        4 => 1,\n-        3 => 2,\n-        _ => 2\n-    };\n-    let _ = ();\n-}"}, {"sha": "833555d0e406e95e8b36f1a832223ba1ad43057d", "filename": "src/test/ui/suggestions/match-needing-semi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -1,11 +1,10 @@\n // check-only\n-// run-rustfix\n \n fn main() {\n     match 3 {\n         4 => 1,\n         3 => {\n-            2 //~ ERROR mismatched types\n+            foo() //~ ERROR mismatched types\n         }\n         _ => 2\n     }\n@@ -16,3 +15,7 @@ fn main() {\n     }\n     let _ = ();\n }\n+\n+fn foo() -> i32 {\n+    42\n+}"}, {"sha": "3739c9940f0cc268c13938e49aaecd05c6752367", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d669882f386e26d214284fbe8f7696519b802778/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=d669882f386e26d214284fbe8f7696519b802778", "patch": "@@ -1,20 +1,27 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-needing-semi.rs:8:13\n+  --> $DIR/match-needing-semi.rs:7:13\n    |\n LL | /     match 3 {\n LL | |         4 => 1,\n LL | |         3 => {\n-LL | |             2\n-   | |             ^ expected `()`, found integer\n+LL | |             foo()\n+   | |             ^^^^^ expected `()`, found `i32`\n LL | |         }\n LL | |         _ => 2\n LL | |     }\n-   | |     -- help: consider using a semicolon here\n-   | |_____|\n-   |       expected this to be `()`\n+   | |_____- expected this to be `()`\n+   |\n+help: consider using a semicolon here\n+   |\n+LL |             foo();\n+   |                  ^\n+help: consider using a semicolon here\n+   |\n+LL |     };\n+   |      ^\n \n error[E0308]: mismatched types\n-  --> $DIR/match-needing-semi.rs:12:5\n+  --> $DIR/match-needing-semi.rs:11:5\n    |\n LL | /     match 3 {\n LL | |         4 => 1,"}]}