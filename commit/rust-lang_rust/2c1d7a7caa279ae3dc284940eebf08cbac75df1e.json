{"sha": "2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMWQ3YTdjYWEyNzlhZTNkYzI4NDk0MGVlYmYwOGNiYWM3NWRmMWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-20T14:15:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T17:08:36Z"}, "message": "Move the `upcast` routine into traits and use it for method selection; also\nmove get_method_index into traits and give it a better name (`get_vtable_index_of_object_method`).", "tree": {"sha": "1f08d0bd845742ff768f1f4f28c4e4f95d1fd9cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f08d0bd845742ff768f1f4f28c4e4f95d1fd9cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "html_url": "https://github.com/rust-lang/rust/commit/2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "html_url": "https://github.com/rust-lang/rust/commit/50ed6c19069606307b329ac2e7bd7d4f7a2d9719"}], "stats": {"total": 105, "additions": 66, "deletions": 39}, "files": [{"sha": "2f19a4ebb6a8e3bfd1e4e3752a130033ec112f88", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "patch": "@@ -34,10 +34,12 @@ pub use self::select::SelectionCache;\n pub use self::select::{MethodMatchResult, MethodMatched, MethodAmbiguous, MethodDidNotMatch};\n pub use self::select::{MethodMatchedData}; // intentionally don't export variants\n pub use self::util::elaborate_predicates;\n+pub use self::util::get_vtable_index_of_object_method;\n pub use self::util::trait_ref_for_builtin_bound;\n pub use self::util::supertraits;\n pub use self::util::Supertraits;\n pub use self::util::transitive_bounds;\n+pub use self::util::upcast;\n \n mod coherence;\n mod error_reporting;"}, {"sha": "541fa4dbbf716782fdee4508dff0120c21a76ecc", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "patch": "@@ -291,6 +291,58 @@ pub fn predicate_for_builtin_bound<'tcx>(\n     })\n }\n \n+/// Cast a trait reference into a reference to one of its super\n+/// traits; returns `None` if `target_trait_def_id` is not a\n+/// supertrait.\n+pub fn upcast<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                    source_trait_ref: ty::PolyTraitRef<'tcx>,\n+                    target_trait_def_id: ast::DefId)\n+                    -> Option<ty::PolyTraitRef<'tcx>>\n+{\n+    if source_trait_ref.def_id() == target_trait_def_id {\n+        return Some(source_trait_ref); // shorcut the most common case\n+    }\n+\n+    for super_trait_ref in supertraits(tcx, source_trait_ref) {\n+        if super_trait_ref.def_id() == target_trait_def_id {\n+            return Some(super_trait_ref);\n+        }\n+    }\n+\n+    None\n+}\n+\n+/// Given an object of type `object_trait_ref`, returns the index of\n+/// the method `n_method` found in the trait `trait_def_id` (which\n+/// should be a supertrait of `object_trait_ref`) within the vtable\n+/// for `object_trait_ref`.\n+pub fn get_vtable_index_of_object_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                               object_trait_ref: ty::PolyTraitRef<'tcx>,\n+                                               trait_def_id: ast::DefId,\n+                                               method_index_in_trait: uint) -> uint {\n+    // We need to figure the \"real index\" of the method in a\n+    // listing of all the methods of an object. We do this by\n+    // iterating down the supertraits of the object's trait until\n+    // we find the trait the method came from, counting up the\n+    // methods from them.\n+    let mut method_count = 0;\n+    ty::each_bound_trait_and_supertraits(tcx, &[object_trait_ref], |bound_ref| {\n+        if bound_ref.def_id() == trait_def_id {\n+            false\n+        } else {\n+            let trait_items = ty::trait_items(tcx, bound_ref.def_id());\n+            for trait_item in trait_items.iter() {\n+                match *trait_item {\n+                    ty::MethodTraitItem(_) => method_count += 1,\n+                    ty::TypeTraitItem(_) => {}\n+                }\n+            }\n+            true\n+        }\n+    });\n+    method_count + method_index_in_trait\n+}\n+\n impl<'tcx,O:Repr<'tcx>> Repr<'tcx> for super::Obligation<'tcx, O> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n         format!(\"Obligation(predicate={},depth={})\","}, {"sha": "ee859bbe8f52da9d88d5bec1cad4f9113df6f9dc", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "patch": "@@ -633,17 +633,16 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n               target_trait_def_id: ast::DefId)\n               -> ty::PolyTraitRef<'tcx>\n     {\n-        for super_trait_ref in traits::supertraits(self.tcx(), source_trait_ref.clone()) {\n-            if super_trait_ref.def_id() == target_trait_def_id {\n-                return super_trait_ref;\n+        match traits::upcast(self.tcx(), source_trait_ref.clone(), target_trait_def_id) {\n+            Some(super_trait_ref) => super_trait_ref,\n+            None => {\n+                self.tcx().sess.span_bug(\n+                    self.span,\n+                    format!(\"cannot upcast `{}` to `{}`\",\n+                            source_trait_ref.repr(self.tcx()),\n+                            target_trait_def_id.repr(self.tcx()))[]);\n             }\n         }\n-\n-        self.tcx().sess.span_bug(\n-            self.span,\n-            format!(\"cannot upcast `{}` to `{}`\",\n-                    source_trait_ref.repr(self.tcx()),\n-                    target_trait_def_id.repr(self.tcx()))[]);\n     }\n \n     fn replace_late_bound_regions_with_fresh_var<T>(&self, value: &ty::Binder<T>) -> T"}, {"sha": "257d11cc84a5ed852cdb52e204e43c2f64812b2e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c1d7a7caa279ae3dc284940eebf08cbac75df1e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=2c1d7a7caa279ae3dc284940eebf08cbac75df1e", "patch": "@@ -308,7 +308,10 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         let trait_ref = data.principal_trait_ref_with_self_ty(self.tcx(), self_ty);\n         self.elaborate_bounds(&[trait_ref.clone()], false, |this, new_trait_ref, m, method_num| {\n             let vtable_index =\n-                get_method_index(tcx, &new_trait_ref, trait_ref.clone(), method_num);\n+                traits::get_vtable_index_of_object_method(tcx,\n+                                                          trait_ref.clone(),\n+                                                          new_trait_ref.def_id(),\n+                                                          method_num);\n \n             let xform_self_ty = this.xform_self_ty(&m, new_trait_ref.substs());\n \n@@ -996,35 +999,6 @@ fn trait_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n         .and_then(|(idx, item)| item.as_opt_method().map(|m| (idx, m)))\n }\n \n-// Determine the index of a method in the list of all methods belonging\n-// to a trait and its supertraits.\n-fn get_method_index<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                          trait_ref: &ty::PolyTraitRef<'tcx>,\n-                          subtrait: ty::PolyTraitRef<'tcx>,\n-                          n_method: uint) -> uint {\n-    // We need to figure the \"real index\" of the method in a\n-    // listing of all the methods of an object. We do this by\n-    // iterating down the supertraits of the object's trait until\n-    // we find the trait the method came from, counting up the\n-    // methods from them.\n-    let mut method_count = n_method;\n-    ty::each_bound_trait_and_supertraits(tcx, &[subtrait], |bound_ref| {\n-        if bound_ref.def_id() == trait_ref.def_id() {\n-            false\n-        } else {\n-            let trait_items = ty::trait_items(tcx, bound_ref.def_id());\n-            for trait_item in trait_items.iter() {\n-                match *trait_item {\n-                    ty::MethodTraitItem(_) => method_count += 1,\n-                    ty::TypeTraitItem(_) => {}\n-                }\n-            }\n-            true\n-        }\n-    });\n-    method_count\n-}\n-\n impl<'tcx> Candidate<'tcx> {\n     fn to_unadjusted_pick(&self) -> Pick<'tcx> {\n         Pick {"}]}