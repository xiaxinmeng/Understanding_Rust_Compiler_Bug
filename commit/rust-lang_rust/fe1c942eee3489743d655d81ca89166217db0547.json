{"sha": "fe1c942eee3489743d655d81ca89166217db0547", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMWM5NDJlZWUzNDg5NzQzZDY1NWQ4MWNhODkxNjYyMTdkYjA1NDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T04:34:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T04:34:13Z"}, "message": "Auto merge of #87445 - amalik18:issue-83584-fix, r=kennytm\n\nFix may not to appropriate might not or must not\n\nI went through and changed occurrences of `may not` to be more explicit with `might not` and `must not`.", "tree": {"sha": "093f237e01769880448c5220665ea3d192d56e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/093f237e01769880448c5220665ea3d192d56e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1c942eee3489743d655d81ca89166217db0547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1c942eee3489743d655d81ca89166217db0547", "html_url": "https://github.com/rust-lang/rust/commit/fe1c942eee3489743d655d81ca89166217db0547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1c942eee3489743d655d81ca89166217db0547/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "html_url": "https://github.com/rust-lang/rust/commit/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38"}, {"sha": "ffcf8a0d7681bb5038dc00479d824d9e20f5f989", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcf8a0d7681bb5038dc00479d824d9e20f5f989", "html_url": "https://github.com/rust-lang/rust/commit/ffcf8a0d7681bb5038dc00479d824d9e20f5f989"}], "stats": {"total": 192, "additions": 96, "deletions": 96}, "files": [{"sha": "491243e22c73b4a1ca21b919f8b3fb807b8c809f", "filename": "library/alloc/benches/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbinary_heap.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -36,7 +36,7 @@ fn bench_peek_mut_deref_mut(b: &mut Bencher) {\n         let mut peek_mut = bheap.peek_mut().unwrap();\n         // The compiler shouldn't be able to optimize away the `sift_down`\n         // assignment in `PeekMut`'s `DerefMut` implementation since\n-        // the loop may not run.\n+        // the loop might not run.\n         for &i in vec.iter() {\n             *peek_mut = i;\n         }"}, {"sha": "f6886b275e172c88d24a6572bde4353a829356e6", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -409,7 +409,7 @@ impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {\n \n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n     /// Temporarily takes out another mutable reference to the same node. Beware, as\n-    /// this method is very dangerous, doubly so since it may not immediately appear\n+    /// this method is very dangerous, doubly so since it might not immediately appear\n     /// dangerous.\n     ///\n     /// Because mutable pointers can roam anywhere around the tree, the returned\n@@ -777,7 +777,7 @@ impl<BorrowType, K, V, NodeType, HandleType>\n \n impl<'a, K, V, NodeType, HandleType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, HandleType> {\n     /// Temporarily takes out another mutable handle on the same location. Beware, as\n-    /// this method is very dangerous, doubly so since it may not immediately appear\n+    /// this method is very dangerous, doubly so since it might not immediately appear\n     /// dangerous.\n     ///\n     /// For details, see `NodeRef::reborrow_mut`."}, {"sha": "8c5125d208263ae34003c1284e7f82df66e39920", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -138,7 +138,7 @@\n //! the `0` flag (see below) is specified for numerics, then the implicit fill character is\n //! `0`.\n //!\n-//! Note that alignment may not be implemented by some types. In particular, it\n+//! Note that alignment might not be implemented by some types. In particular, it\n //! is not generally implemented for the `Debug` trait.  A good way to ensure\n //! padding is applied is to format your input, then pad this resulting string\n //! to obtain your output:\n@@ -300,7 +300,7 @@\n //! count := parameter | integer\n //! parameter := argument '$'\n //! ```\n-//! In the above grammar, `text` may not contain any `'{'` or `'}'` characters.\n+//! In the above grammar, `text` must not contain any `'{'` or `'}'` characters.\n //!\n //! # Formatting traits\n //!"}, {"sha": "a1787ceac590e8cfcc29511744b252d089665da8", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -2526,7 +2526,7 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // SAFETY: since the only unsized types possible are slices, trait objects,\n     // and extern types, the input safety requirement is currently enough to\n     // satisfy the requirements of align_of_val_raw; this is an implementation\n-    // detail of the language that may not be relied upon outside of std.\n+    // detail of the language that must not be relied upon outside of std.\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n "}, {"sha": "bc5ab3637ae6ce56f0c3e3e183b96f403306e4a4", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -921,7 +921,7 @@ impl String {\n     /// assert!(s.capacity() >= 10);\n     /// ```\n     ///\n-    /// This may not actually increase the capacity:\n+    /// This might not actually increase the capacity:\n     ///\n     /// ```\n     /// let mut s = String::with_capacity(10);\n@@ -969,7 +969,7 @@ impl String {\n     /// assert!(s.capacity() >= 10);\n     /// ```\n     ///\n-    /// This may not actually increase the capacity:\n+    /// This might not actually increase the capacity:\n     ///\n     /// ```\n     /// let mut s = String::with_capacity(10);\n@@ -1517,7 +1517,7 @@ impl String {\n     }\n \n     /// Returns the length of this `String`, in bytes, not [`char`]s or\n-    /// graphemes. In other words, it may not be what a human considers the\n+    /// graphemes. In other words, it might not be what a human considers the\n     /// length of the string.\n     ///\n     /// # Examples"}, {"sha": "78671c4f64ed19c85e7294b11af1035e3cbcf2fd", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -1056,8 +1056,8 @@ impl<T: ?Sized> Arc<T> {\n     // Non-inlined part of `drop`.\n     #[inline(never)]\n     unsafe fn drop_slow(&mut self) {\n-        // Destroy the data at this time, even though we may not free the box\n-        // allocation itself (there may still be weak pointers lying around).\n+        // Destroy the data at this time, even though we must not free the box\n+        // allocation itself (there might still be weak pointers lying around).\n         unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };\n \n         // Drop the weak ref collectively held by all strong references\n@@ -2587,7 +2587,7 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // SAFETY: since the only unsized types possible are slices, trait objects,\n     // and extern types, the input safety requirement is currently enough to\n     // satisfy the requirements of align_of_val_raw; this is an implementation\n-    // detail of the language that may not be relied upon outside of std.\n+    // detail of the language that must not be relied upon outside of std.\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n "}, {"sha": "06a7c335bf05d12928b4448954aaad442c9ecc44", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -2229,7 +2229,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         unsafe {\n             let mut ptr = self.as_mut_ptr().add(self.len());\n             // Use SetLenOnDrop to work around bug where compiler\n-            // may not realize the store through `ptr` through self.set_len()\n+            // might not realize the store through `ptr` through self.set_len()\n             // don't alias.\n             let mut local_len = SetLenOnDrop::new(&mut self.len);\n "}, {"sha": "e05788d99c0df2c9ac89534ef37c24c241abd753", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -56,7 +56,7 @@ where\n \n         let src = unsafe { iterator.as_inner().as_into_iter() };\n         // check if SourceIter contract was upheld\n-        // caveat: if they weren't we may not even make it to this point\n+        // caveat: if they weren't we might not even make it to this point\n         debug_assert_eq!(src_buf, src.buf.as_ptr());\n         // check InPlaceIterable contract. This is only possible if the iterator advanced the\n         // source pointer at all. If it uses unchecked access via TrustedRandomAccess"}, {"sha": "f32118bb5637e563c02250760e4efdb53889b72b", "filename": "library/alloc/tests/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Falloc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fbinary_heap.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -408,7 +408,7 @@ fn test_retain() {\n // old binaryheap failed this test\n //\n // Integrity means that all elements are present after a comparison panics,\n-// even if the order may not be correct.\n+// even if the order might not be correct.\n //\n // Destructors must be called exactly once per element.\n // FIXME: re-enable emscripten once it can unwind again"}, {"sha": "8839a69d119afae4ad20a47be0504cb137043b89", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -99,7 +99,7 @@ use crate::ptr;\n ///   this trait are allowed to rely on the contracts defined on each method,\n ///   and implementors must ensure such contracts remain true.\n ///\n-/// * You may not rely on allocations actually happening, even if there are explicit\n+/// * You must not rely on allocations actually happening, even if there are explicit\n ///   heap allocations in the source. The optimizer may detect unused allocations that it can either\n ///   eliminate entirely or move to the stack and thus never invoke the allocator. The\n ///   optimizer may further assume that allocation is infallible, so code that used to fail due"}, {"sha": "09d8a2aac26e944052724ccdc8f7789bcbe37727", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -7,7 +7,7 @@ use crate::task::{Context, Poll};\n \n /// A future represents an asynchronous computation.\n ///\n-/// A future is a value that may not have finished computing yet. This kind of\n+/// A future is a value that might not have finished computing yet. This kind of\n /// \"asynchronous value\" makes it possible for a thread to continue doing useful\n /// work while it waits for the value to become available.\n ///"}, {"sha": "7fb80f954ff407d17d2b5013af0c1bb76017b87c", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -336,7 +336,7 @@\n //! This will print the numbers `0` through `4`, each on their own line.\n //!\n //! Bear in mind that methods on infinite iterators, even those for which a\n-//! result can be determined mathematically in finite time, may not terminate.\n+//! result can be determined mathematically in finite time, might not terminate.\n //! Specifically, methods such as [`min`], which in the general case require\n //! traversing every element in the iterator, are likely not to return\n //! successfully for any infinite iterators."}, {"sha": "f7ed811e4473329fd3ea58df4afa3523715e0514", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -277,7 +277,7 @@ macro_rules! step_integer_impls {\n                         //\n                         // Casting to isize extends the width but preserves the sign.\n                         // Use wrapping_sub in isize space and cast to usize to compute\n-                        // the difference that may not fit inside the range of isize.\n+                        // the difference that might not fit inside the range of isize.\n                         Some((*end as isize).wrapping_sub(*start as isize) as usize)\n                     } else {\n                         None"}, {"sha": "f34adb878c45f9e5796707228753084efa66576d", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -2078,7 +2078,7 @@ pub trait Iterator {\n     /// to produce a single value from it.\n     ///\n     /// Note: `fold()`, and similar methods that traverse the entire iterator,\n-    /// may not terminate for infinite iterators, even on traits for which a\n+    /// might not terminate for infinite iterators, even on traits for which a\n     /// result is determinable in finite time.\n     ///\n     /// Note: [`reduce()`] can be used to use the first element as the initial"}, {"sha": "d6eb535fd2e10a80d6d20ea853a7e035172ef6f0", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -941,7 +941,7 @@ pub fn drop<T>(_x: T) {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    // If U has a higher alignment requirement, src may not be suitably aligned.\n+    // If U has a higher alignment requirement, src might not be suitably aligned.\n     if align_of::<U>() > align_of::<T>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n         // The caller must guarantee that the actual transmutation is safe."}, {"sha": "6e8f753ce500a32f805fae177887c72b729bdde3", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -1748,7 +1748,7 @@ macro_rules! int_impl {\n \n         /// Returns the logarithm of the number with respect to an arbitrary base.\n         ///\n-        /// This method may not be optimized owing to implementation details;\n+        /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n         /// can produce results more efficiently for base 10.\n         ///\n@@ -1856,7 +1856,7 @@ macro_rules! int_impl {\n         ///\n         /// Returns `None` if the number is negative or zero, or if the base is not at least 2.\n         ///\n-        /// This method may not be optimized owing to implementation details;\n+        /// This method might not be optimized owing to implementation details;\n         /// `checked_log2` can produce results more efficiently for base 2, and\n         /// `checked_log10` can produce results more efficiently for base 10.\n         ///"}, {"sha": "91f07c63aa945c28e690a5905f87609d6bad7d4e", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -637,7 +637,7 @@ macro_rules! uint_impl {\n \n         /// Returns the logarithm of the number with respect to an arbitrary base.\n         ///\n-        /// This method may not be optimized owing to implementation details;\n+        /// This method might not be optimized owing to implementation details;\n         /// `log2` can produce results more efficiently for base 2, and `log10`\n         /// can produce results more efficiently for base 10.\n         ///\n@@ -745,7 +745,7 @@ macro_rules! uint_impl {\n         ///\n         /// Returns `None` if the number is zero, or if the base is not at least 2.\n         ///\n-        /// This method may not be optimized owing to implementation details;\n+        /// This method might not be optimized owing to implementation details;\n         /// `checked_log2` can produce results more efficiently for base 2, and\n         /// `checked_log10` can produce results more efficiently for base 10.\n         ///"}, {"sha": "6bdcda775ee8365bc2c4a1f6f950d3af49040979", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -319,7 +319,7 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     /// This should be implemented consistently with the `branch` method such\n     /// that applying the `?` operator will get back an equivalent residual:\n     /// `FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`.\n-    /// (It may not be an *identical* residual when interconversion is involved.)\n+    /// (It must not be an *identical* residual when interconversion is involved.)\n     ///\n     /// # Examples\n     ///"}, {"sha": "6a1a84bafa330acd0d0aec5d4eb13c6f1df7e623", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -159,9 +159,9 @@\n //! section needs to function correctly.\n //!\n //! Notice that this guarantee does *not* mean that memory does not leak! It is still\n-//! completely okay not ever to call [`drop`] on a pinned element (e.g., you can still\n+//! completely okay to not ever call [`drop`] on a pinned element (e.g., you can still\n //! call [`mem::forget`] on a <code>[Pin]<[Box]\\<T>></code>). In the example of the doubly-linked\n-//! list, that element would just stay in the list. However you may not free or reuse the storage\n+//! list, that element would just stay in the list. However you must not free or reuse the storage\n //! *without calling [`drop`]*.\n //!\n //! # `Drop` implementation"}, {"sha": "ac2e5ed256df3f90104050341d6cf1762a9d2c23", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -244,7 +244,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it may not\n+    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it must not\n     /// be used to read or write other allocated objects.\n     ///\n     /// In other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does *not* make `z`\n@@ -404,7 +404,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`guaranteed_ne`]: #method.guaranteed_ne\n     ///\n-    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// The return value may change depending on the compiler version and unsafe code might not\n     /// rely on the result of this function for soundness. It is suggested to only use this function\n     /// for performance optimizations where spurious `false` return values by this function do not\n     /// affect the outcome, but just the performance.\n@@ -435,7 +435,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`guaranteed_eq`]: #method.guaranteed_eq\n     ///\n-    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// The return value may change depending on the compiler version and unsafe code might not\n     /// rely on the result of this function for soundness. It is suggested to only use this function\n     /// for performance optimizations where spurious `false` return values by this function do not\n     /// affect the outcome, but just the performance.\n@@ -590,7 +590,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it may not\n+    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it must not\n     /// be used to read or write other allocated objects.\n     ///\n     /// In other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does *not* make `z`\n@@ -652,7 +652,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it may not\n+    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it must not\n     /// be used to read or write other allocated objects.\n     ///\n     /// In other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does *not* make `z`"}, {"sha": "32b6920b59d2285f01c854ff404de343d2f2f06e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -250,7 +250,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it may not\n+    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it must not\n     /// be used to read or write other allocated objects.\n     ///\n     /// In other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does *not* make `z`\n@@ -419,7 +419,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`guaranteed_ne`]: #method.guaranteed_ne\n     ///\n-    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// The return value may change depending on the compiler version and unsafe code might not\n     /// rely on the result of this function for soundness. It is suggested to only use this function\n     /// for performance optimizations where spurious `false` return values by this function do not\n     /// affect the outcome, but just the performance.\n@@ -450,7 +450,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`guaranteed_eq`]: #method.guaranteed_eq\n     ///\n-    /// The return value may change depending on the compiler version and unsafe code may not\n+    /// The return value may change depending on the compiler version and unsafe code might not\n     /// rely on the result of this function for soundness. It is suggested to only use this function\n     /// for performance optimizations where spurious `false` return values by this function do not\n     /// affect the outcome, but just the performance.\n@@ -696,7 +696,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it may not\n+    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it must not\n     /// be used to read or write other allocated objects.\n     ///\n     /// In other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does *not* make `z`\n@@ -758,7 +758,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it may not\n+    /// The resulting pointer \"remembers\" the [allocated object] that `self` points to; it must not\n     /// be used to read or write other allocated objects.\n     ///\n     /// In other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does *not* make `z`"}, {"sha": "81d5a869db5a5e057cc444dcc109769f11e86eef", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -2274,7 +2274,7 @@ impl<T> [T] {\n         self.binary_search_by(|k| f(k).cmp(b))\n     }\n \n-    /// Sorts the slice, but may not preserve the order of equal elements.\n+    /// Sorts the slice, but might not preserve the order of equal elements.\n     ///\n     /// This sort is unstable (i.e., may reorder equal elements), in-place\n     /// (i.e., does not allocate), and *O*(*n* \\* log(*n*)) worst-case.\n@@ -2309,7 +2309,7 @@ impl<T> [T] {\n         sort::quicksort(self, |a, b| a.lt(b));\n     }\n \n-    /// Sorts the slice with a comparator function, but may not preserve the order of equal\n+    /// Sorts the slice with a comparator function, but might not preserve the order of equal\n     /// elements.\n     ///\n     /// This sort is unstable (i.e., may reorder equal elements), in-place\n@@ -2364,7 +2364,7 @@ impl<T> [T] {\n         sort::quicksort(self, |a, b| compare(a, b) == Ordering::Less);\n     }\n \n-    /// Sorts the slice with a key extraction function, but may not preserve the order of equal\n+    /// Sorts the slice with a key extraction function, but might not preserve the order of equal\n     /// elements.\n     ///\n     /// This sort is unstable (i.e., may reorder equal elements), in-place"}, {"sha": "d4e30e65ef85fec2f686d66d301035e12bcaaaa2", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -123,7 +123,7 @@ impl str {\n     /// Returns the length of `self`.\n     ///\n     /// This length is in bytes, not [`char`]s or graphemes. In other words,\n-    /// it may not be what a human considers the length of the string.\n+    /// it might not be what a human considers the length of the string.\n     ///\n     /// [`char`]: prim@char\n     ///\n@@ -633,7 +633,7 @@ impl str {\n     /// string slice by [`char`]. This method returns such an iterator.\n     ///\n     /// It's important to remember that [`char`] represents a Unicode Scalar\n-    /// Value, and may not match your idea of what a 'character' is. Iteration\n+    /// Value, and might not match your idea of what a 'character' is. Iteration\n     /// over grapheme clusters may be what you actually want. This functionality\n     /// is not provided by Rust's standard library, check crates.io instead.\n     ///\n@@ -660,7 +660,7 @@ impl str {\n     /// assert_eq!(None, chars.next());\n     /// ```\n     ///\n-    /// Remember, [`char`]s may not match your intuition about characters:\n+    /// Remember, [`char`]s might not match your intuition about characters:\n     ///\n     /// [`char`]: prim@char\n     ///\n@@ -713,7 +713,7 @@ impl str {\n     /// assert_eq!(None, char_indices.next());\n     /// ```\n     ///\n-    /// Remember, [`char`]s may not match your intuition about characters:\n+    /// Remember, [`char`]s might not match your intuition about characters:\n     ///\n     /// [`char`]: prim@char\n     ///"}, {"sha": "0194c58d3393f373e7111c9bd5ac901367036bca", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -41,7 +41,7 @@\n //! instructions to implement `AtomicI8`. Note that this emulation should not\n //! have an impact on correctness of code, it's just something to be aware of.\n //!\n-//! The atomic types in this module may not be available on all platforms. The\n+//! The atomic types in this module might not be available on all platforms. The\n //! atomic types here are all widely available, however, and can generally be\n //! relied upon existing. Some notable exceptions are:\n //!"}, {"sha": "18bb932f10ea94f31dce137097bbdd16c2619ff8", "filename": "library/panic_abort/src/android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fpanic_abort%2Fsrc%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fpanic_abort%2Fsrc%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Fandroid.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -7,7 +7,7 @@ const ANDROID_SET_ABORT_MESSAGE: &[u8] = b\"android_set_abort_message\\0\";\n type SetAbortMessageType = unsafe extern \"C\" fn(*const libc::c_char) -> ();\n \n // Forward the abort message to libc's android_set_abort_message. We try our best to populate the\n-// message but as this function may already be called as part of a failed allocation, it may not be\n+// message but as this function may already be called as part of a failed allocation, it might not be\n // possible to do so.\n //\n // Some methods of core are on purpose avoided (such as try_reserve) as these rely on the correct"}, {"sha": "8ae7b6de1a63e488ac8332d73bbcd73996f00d90", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -386,7 +386,7 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n             //\n             // Note that panics should be impossible beyond this point, but\n             // this is defensively trying to avoid any accidental panicking\n-            // reaching the `extern \"C\"` (which should `abort` but may not\n+            // reaching the `extern \"C\"` (which should `abort` but might not\n             // at the moment, so this is also potentially preventing UB).\n             b.clear();\n             Ok::<_, ()>(output).encode(&mut b, &mut ());"}, {"sha": "8138c3882fc14eb5ba8139afc235452be9520fc9", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -467,10 +467,10 @@ impl SourceFile {\n     ///\n     /// ### Note\n     /// If the code span associated with this `SourceFile` was generated by an external macro, this\n-    /// macro, this may not be an actual path on the filesystem. Use [`is_real`] to check.\n+    /// macro, this might not be an actual path on the filesystem. Use [`is_real`] to check.\n     ///\n     /// Also note that even if `is_real` returns `true`, if `--remap-path-prefix` was passed on\n-    /// the command line, the path as given may not actually be valid.\n+    /// the command line, the path as given might not actually be valid.\n     ///\n     /// [`is_real`]: Self::is_real\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n@@ -657,7 +657,7 @@ pub enum Delimiter {\n     /// An implicit delimiter, that may, for example, appear around tokens coming from a\n     /// \"macro variable\" `$var`. It is important to preserve operator priorities in cases like\n     /// `$var * 3` where `$var` is `1 + 2`.\n-    /// Implicit delimiters may not survive roundtrip of a token stream through a string.\n+    /// Implicit delimiters might not survive roundtrip of a token stream through a string.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     None,\n }\n@@ -973,7 +973,7 @@ macro_rules! suffixed_int_literals {\n         /// This function will create an integer like `1u32` where the integer\n         /// value specified is the first part of the token and the integral is\n         /// also suffixed at the end.\n-        /// Literals created from negative numbers may not survive round-trips through\n+        /// Literals created from negative numbers might not survive round-trips through\n         /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n         ///\n         /// Literals created through this method have the `Span::call_site()`\n@@ -995,7 +995,7 @@ macro_rules! unsuffixed_int_literals {\n         /// specified on this token, meaning that invocations like\n         /// `Literal::i8_unsuffixed(1)` are equivalent to\n         /// `Literal::u32_unsuffixed(1)`.\n-        /// Literals created from negative numbers may not survive rountrips through\n+        /// Literals created from negative numbers might not survive rountrips through\n         /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n         ///\n         /// Literals created through this method have the `Span::call_site()`\n@@ -1044,7 +1044,7 @@ impl Literal {\n     /// This constructor is similar to those like `Literal::i8_unsuffixed` where\n     /// the float's value is emitted directly into the token but no suffix is\n     /// used, so it may be inferred to be a `f64` later in the compiler.\n-    /// Literals created from negative numbers may not survive rountrips through\n+    /// Literals created from negative numbers might not survive rountrips through\n     /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n     ///\n     /// # Panics\n@@ -1065,7 +1065,7 @@ impl Literal {\n     /// specified is the preceding part of the token and `f32` is the suffix of\n     /// the token. This token will always be inferred to be an `f32` in the\n     /// compiler.\n-    /// Literals created from negative numbers may not survive rountrips through\n+    /// Literals created from negative numbers might not survive rountrips through\n     /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n     ///\n     /// # Panics\n@@ -1085,7 +1085,7 @@ impl Literal {\n     /// This constructor is similar to those like `Literal::i8_unsuffixed` where\n     /// the float's value is emitted directly into the token but no suffix is\n     /// used, so it may be inferred to be a `f64` later in the compiler.\n-    /// Literals created from negative numbers may not survive rountrips through\n+    /// Literals created from negative numbers might not survive rountrips through\n     /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n     ///\n     /// # Panics\n@@ -1106,7 +1106,7 @@ impl Literal {\n     /// specified is the preceding part of the token and `f64` is the suffix of\n     /// the token. This token will always be inferred to be an `f64` in the\n     /// compiler.\n-    /// Literals created from negative numbers may not survive rountrips through\n+    /// Literals created from negative numbers might not survive rountrips through\n     /// `TokenStream` or strings and may be broken into two tokens (`-` and positive literal).\n     ///\n     /// # Panics"}, {"sha": "9ace3e1b60007c24dd16378358634da9817affba", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -35,13 +35,13 @@\n //! `BacktraceStatus` enum as a result of `Backtrace::status`.\n //!\n //! Like above with accuracy platform support is done on a best effort basis.\n-//! Sometimes libraries may not be available at runtime or something may go\n+//! Sometimes libraries might not be available at runtime or something may go\n //! wrong which would cause a backtrace to not be captured. Please feel free to\n //! report issues with platforms where a backtrace cannot be captured though!\n //!\n //! ## Environment Variables\n //!\n-//! The `Backtrace::capture` function may not actually capture a backtrace by\n+//! The `Backtrace::capture` function might not actually capture a backtrace by\n //! default. Its behavior is governed by two environment variables:\n //!\n //! * `RUST_LIB_BACKTRACE` - if this is set to `0` then `Backtrace::capture`\n@@ -61,7 +61,7 @@\n //! Note that the `Backtrace::force_capture` function can be used to ignore\n //! these environment variables. Also note that the state of environment\n //! variables is cached once the first backtrace is created, so altering\n-//! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime may not actually change\n+//! `RUST_LIB_BACKTRACE` or `RUST_BACKTRACE` at runtime might not actually change\n //! how backtraces are captured.\n \n #![unstable(feature = \"backtrace\", issue = \"53487\")]"}, {"sha": "79b7e2e57a371474a384caaee0de2388b16ef6f9", "filename": "library/std/src/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -682,7 +682,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and may not even exist. This means this property\n+/// set to arbitrary text, and might not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n /// [`env::args()`]: args\n@@ -698,7 +698,7 @@ pub struct Args {\n /// for more.\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and may not even exist. This means this property\n+/// set to arbitrary text, and might not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n /// [`env::args_os()`]: args_os\n@@ -711,7 +711,7 @@ pub struct ArgsOs {\n /// via the command line).\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and may not even exist. This means this property should\n+/// set to arbitrary text, and might not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n /// On Unix systems the shell usually expands unquoted arguments with glob patterns\n@@ -748,7 +748,7 @@ pub fn args() -> Args {\n /// via the command line).\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and may not even exist. This means this property should\n+/// set to arbitrary text, and might not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n /// On Unix systems the shell usually expands unquoted arguments with glob patterns"}, {"sha": "0b392897f9d8ac02b3505064f0849eca71eb457d", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -409,7 +409,7 @@ impl f32 {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n     ///\n-    /// The result may not be correctly rounded owing to implementation details;\n+    /// The result might not be correctly rounded owing to implementation details;\n     /// `self.log2()` can produce more accurate results for base 2, and\n     /// `self.log10()` can produce more accurate results for base 10.\n     ///"}, {"sha": "602cceb5d1a1ce55e13cc98faf9d0baaeaff8743", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -409,7 +409,7 @@ impl f64 {\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n     ///\n-    /// The result may not be correctly rounded owing to implementation details;\n+    /// The result might not be correctly rounded owing to implementation details;\n     /// `self.log2()` can produce more accurate results for base 2, and\n     /// `self.log10()` can produce more accurate results for base 10.\n     ///"}, {"sha": "e1ad46961c0252eb877987b58dd45b3464a05ea3", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -419,7 +419,7 @@ impl File {\n         self.inner.fsync()\n     }\n \n-    /// This function is similar to [`sync_all`], except that it may not\n+    /// This function is similar to [`sync_all`], except that it might not\n     /// synchronize file metadata to the filesystem.\n     ///\n     /// This is intended for use cases that must synchronize content, but don't\n@@ -1081,7 +1081,7 @@ impl Metadata {\n     ///\n     /// # Errors\n     ///\n-    /// This field may not be available on all platforms, and will return an\n+    /// This field might not be available on all platforms, and will return an\n     /// `Err` on platforms where it is not available.\n     ///\n     /// # Examples\n@@ -1116,7 +1116,7 @@ impl Metadata {\n     ///\n     /// # Errors\n     ///\n-    /// This field may not be available on all platforms, and will return an\n+    /// This field might not be available on all platforms, and will return an\n     /// `Err` on platforms where it is not available.\n     ///\n     /// # Examples\n@@ -1148,7 +1148,7 @@ impl Metadata {\n     ///\n     /// # Errors\n     ///\n-    /// This field may not be available on all platforms, and will return an\n+    /// This field might not be available on all platforms, and will return an\n     /// `Err` on platforms or filesystems where it is not available.\n     ///\n     /// # Examples"}, {"sha": "13dbae3b7b580016ca1667d03d32832ee29af152", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -824,7 +824,7 @@ fn symlink_noexist() {\n     };\n \n     // Use a relative path for testing. Symlinks get normalized by Windows,\n-    // so we may not get the same path back for absolute paths\n+    // so we might not get the same path back for absolute paths\n     check!(symlink_file(&\"foo\", &tmpdir.join(\"bar\")));\n     assert_eq!(check!(fs::read_link(&tmpdir.join(\"bar\"))).to_str().unwrap(), \"foo\");\n }"}, {"sha": "b336b65ad7d241bf5f23844440dcddcac7e24f62", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -555,7 +555,7 @@ pub trait Read {\n     /// contents of `buf` being true. It is recommended that *implementations*\n     /// only write data to `buf` instead of reading its contents.\n     ///\n-    /// Correspondingly, however, *callers* of this method may not assume any guarantees\n+    /// Correspondingly, however, *callers* of this method must not assume any guarantees\n     /// about how the implementation uses `buf`. The trait is safe to implement,\n     /// so it is possible that the code that's supposed to write to the buffer might also read\n     /// from it. It is your responsibility to make sure that `buf` is initialized\n@@ -1369,7 +1369,7 @@ pub trait Write {\n     /// Write a buffer into this writer, returning how many bytes were written.\n     ///\n     /// This function will attempt to write the entire contents of `buf`, but\n-    /// the entire write may not succeed, or the write may also generate an\n+    /// the entire write might not succeed, or the write may also generate an\n     /// error. A call to `write` represents *at most one* attempt to write to\n     /// any wrapped object.\n     ///"}, {"sha": "d3569710c2b4b638f9fc8d7a4c77068b5c7bf613", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -874,7 +874,7 @@ pub trait ToSocketAddrs {\n \n     /// Converts this object to an iterator of resolved `SocketAddr`s.\n     ///\n-    /// The returned iterator may not actually yield any values depending on the\n+    /// The returned iterator might not actually yield any values depending on the\n     /// outcome of any resolution performed.\n     ///\n     /// Note that this function may block the current thread while resolution is"}, {"sha": "d2088a12b2c7dcb14b0465914af3c126e865f66c", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -408,7 +408,7 @@ impl UdpSocket {\n     /// Sets the value of the `IP_MULTICAST_LOOP` option for this socket.\n     ///\n     /// If enabled, multicast packets will be looped back to the local socket.\n-    /// Note that this may not have any effect on IPv6 sockets.\n+    /// Note that this might not have any effect on IPv6 sockets.\n     ///\n     /// # Examples\n     ///\n@@ -447,7 +447,7 @@ impl UdpSocket {\n     /// this socket. The default value is 1 which means that multicast packets\n     /// don't leave the local network unless explicitly requested.\n     ///\n-    /// Note that this may not have any effect on IPv6 sockets.\n+    /// Note that this might not have any effect on IPv6 sockets.\n     ///\n     /// # Examples\n     ///\n@@ -483,7 +483,7 @@ impl UdpSocket {\n     /// Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.\n     ///\n     /// Controls whether this socket sees the multicast packets it sends itself.\n-    /// Note that this may not have any affect on IPv4 sockets.\n+    /// Note that this might not have any affect on IPv4 sockets.\n     ///\n     /// # Examples\n     ///"}, {"sha": "62bfde8bfd436595072d5c0ff11d28be2d3c7a18", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -31,7 +31,7 @@ pub(super) unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un,\n     if bytes.contains(&0) {\n         return Err(io::Error::new_const(\n             io::ErrorKind::InvalidInput,\n-            &\"paths may not contain interior null bytes\",\n+            &\"paths must not contain interior null bytes\",\n         ));\n     }\n "}, {"sha": "615290d27030766d863e0018a4aafdc0e5c87220", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -83,7 +83,7 @@ pub trait CommandExt: Sealed {\n     ///\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n-    /// locations may not appear where intended.\n+    /// locations might not appear where intended.\n     ///\n     /// [POSIX fork() specification]:\n     ///     https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html"}, {"sha": "9c597e17bb509eb694132cbcb50ab5b987383124", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -163,7 +163,7 @@ pub auto trait RefUnwindSafe {}\n /// When using [`catch_unwind`] it may be the case that some of the closed over\n /// variables are not unwind safe. For example if `&mut T` is captured the\n /// compiler will generate a warning indicating that it is not unwind safe. It\n-/// may not be the case, however, that this is actually a problem due to the\n+/// might not be the case, however, that this is actually a problem due to the\n /// specific usage of [`catch_unwind`] if unwind safety is specifically taken into\n /// account. This wrapper struct is useful for a quick and lightweight\n /// annotation that a variable is indeed unwind safe.\n@@ -406,7 +406,7 @@ impl<S: Stream> Stream for AssertUnwindSafe<S> {\n ///\n /// # Notes\n ///\n-/// Note that this function **may not catch all panics** in Rust. A panic in\n+/// Note that this function **might not catch all panics** in Rust. A panic in\n /// Rust is not always implemented via unwinding, but can be implemented by\n /// aborting the process as well. This function *only* catches unwinding panics,\n /// not those that abort the process."}, {"sha": "dc4572cd9363b04fa8c7adac5b576f504879c7af", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -303,7 +303,7 @@ mod prim_never {}\n ///\n /// [`String`]: string/struct.String.html\n ///\n-/// As always, remember that a human intuition for 'character' may not map to\n+/// As always, remember that a human intuition for 'character' might not map to\n /// Unicode's definitions. For example, despite looking similar, the '\u00e9'\n /// character is one Unicode code point while 'e\u0301' is two Unicode code points:\n ///"}, {"sha": "00a4afc57051984fdd42b71ba5d25c7c2c787414", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -254,7 +254,7 @@ impl Condvar {\n     /// except that the thread will be blocked for roughly no longer\n     /// than `ms` milliseconds. This method should not be used for\n     /// precise timing due to anomalies such as preemption or platform\n-    /// differences that may not cause the maximum amount of time\n+    /// differences that might not cause the maximum amount of time\n     /// waited to be precisely `ms`.\n     ///\n     /// Note that the best effort is made to ensure that the time waited is\n@@ -317,7 +317,7 @@ impl Condvar {\n     /// The semantics of this function are equivalent to [`wait`] except that\n     /// the thread will be blocked for roughly no longer than `dur`. This\n     /// method should not be used for precise timing due to anomalies such as\n-    /// preemption or platform differences that may not cause the maximum\n+    /// preemption or platform differences that might not cause the maximum\n     /// amount of time waited to be precisely `dur`.\n     ///\n     /// Note that the best effort is made to ensure that the time waited is\n@@ -392,7 +392,7 @@ impl Condvar {\n     /// The semantics of this function are equivalent to [`wait_while`] except\n     /// that the thread will be blocked for roughly no longer than `dur`. This\n     /// method should not be used for precise timing due to anomalies such as\n-    /// preemption or platform differences that may not cause the maximum\n+    /// preemption or platform differences that might not cause the maximum\n     /// amount of time waited to be precisely `dur`.\n     ///\n     /// Note that the best effort is made to ensure that the time waited is"}, {"sha": "cdd64a5def5064881979d6161095ed2eb978fae1", "filename": "library/std/src/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -6,7 +6,7 @@\n //!\n //! Note that the current implementation of this queue has a caveat of the `pop`\n //! method, and see the method for more information about it. Due to this\n-//! caveat, this queue may not be appropriate for all use-cases.\n+//! caveat, this queue might not be appropriate for all use-cases.\n \n // https://www.1024cores.net/home/lock-free-algorithms\n //                          /queues/non-intrusive-mpsc-node-based-queue"}, {"sha": "2a1d3f8967e995b6e0dd67624e45fc1825a94523", "filename": "library/std/src/sync/mpsc/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fstream.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -339,7 +339,7 @@ impl<T> Packet<T> {\n \n         // At this point in time, we have gated all future senders from sending,\n         // and we have flagged the channel as being disconnected. The senders\n-        // still have some responsibility, however, because some sends may not\n+        // still have some responsibility, however, because some sends might not\n         // complete until after we flag the disconnection. There are more\n         // details in the sending methods that see DISCONNECTED\n     }\n@@ -370,7 +370,7 @@ impl<T> Packet<T> {\n         // at all.\n         //\n         // Hence, because of these invariants, we immediately return `Ok(true)`.\n-        // Note that the data may not actually be sent on the channel just yet.\n+        // Note that the data might not actually be sent on the channel just yet.\n         // The other end could have flagged the upgrade but not sent data to\n         // this end. This is fine because we know it's a small bounded windows\n         // of time until the data is actually sent."}, {"sha": "a2e935a0cebc430c0f0a8dd290d7e9bf68bac0b1", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -198,7 +198,7 @@ impl Once {\n     /// routine is currently running.\n     ///\n     /// When this function returns, it is guaranteed that some initialization\n-    /// has run and completed (it may not be the closure specified). It is also\n+    /// has run and completed (it might not be the closure specified). It is also\n     /// guaranteed that any memory writes performed by the executed closure can\n     /// be reliably observed by other threads at this point (there is a\n     /// happens-before relation between the closure and code executing after the"}, {"sha": "fa950331e644af8bec01870381864bf667cea67e", "filename": "library/std/src/sync/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fpoison.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -120,7 +120,7 @@ pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;\n /// A type alias for the result of a nonblocking locking method.\n ///\n /// For more information, see [`LockResult`]. A `TryLockResult` doesn't\n-/// necessarily hold the associated guard in the [`Err`] type as the lock may not\n+/// necessarily hold the associated guard in the [`Err`] type as the lock might not\n /// have been acquired for other reasons.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;"}, {"sha": "56f91ebe5828721777df75b3bf4372545a867748", "filename": "library/std/src/sys/windows/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -1,6 +1,6 @@\n //! System Mutexes\n //!\n-//! The Windows implementation of mutexes is a little odd and it may not be\n+//! The Windows implementation of mutexes is a little odd and it might not be\n //! immediately obvious what's going on. The primary oddness is that SRWLock is\n //! used instead of CriticalSection, and this is done because:\n //!"}, {"sha": "2973951fe9004d27b301ae6f8ea046f6eb6965dd", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -169,7 +169,7 @@ impl io::Read for Stdin {\n \n // We assume that if the last `u16` is an unpaired surrogate they got sliced apart by our\n // buffer size, and keep it around for the next read hoping to put them together.\n-// This is a best effort, and may not work if we are not the only reader on Stdin.\n+// This is a best effort, and might not work if we are not the only reader on Stdin.\n fn read_u16s_fixup_surrogates(\n     handle: c::HANDLE,\n     buf: &mut [u16],"}, {"sha": "36e1d502019b72139f12c5d496a117495025e5f0", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -906,7 +906,7 @@ pub fn park() {\n /// The semantics of this function are equivalent to [`park`] except\n /// that the thread will be blocked for roughly no longer than `dur`. This\n /// method should not be used for precise timing due to anomalies such as\n-/// preemption or platform differences that may not cause the maximum\n+/// preemption or platform differences that might not cause the maximum\n /// amount of time waited to be precisely `ms` long.\n ///\n /// See the [park documentation][`park`] for more detail.\n@@ -922,7 +922,7 @@ pub fn park_timeout_ms(ms: u32) {\n /// The semantics of this function are equivalent to [`park`][park] except\n /// that the thread will be blocked for roughly no longer than `dur`. This\n /// method should not be used for precise timing due to anomalies such as\n-/// preemption or platform differences that may not cause the maximum\n+/// preemption or platform differences that might not cause the maximum\n /// amount of time waited to be precisely `dur` long.\n ///\n /// See the [park documentation][park] for more details."}, {"sha": "6d70c7270d31fba21f70f9b894c39fa28812421b", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1c942eee3489743d655d81ca89166217db0547/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=fe1c942eee3489743d655d81ca89166217db0547", "patch": "@@ -34,7 +34,7 @@ pub use core::time::Duration;\n /// benchmarks or timing how long an operation takes.\n ///\n /// Note, however, that instants are not guaranteed to be **steady**. In other\n-/// words, each tick of the underlying clock may not be the same length (e.g.\n+/// words, each tick of the underlying clock might not be the same length (e.g.\n /// some seconds may be longer than others). An instant may jump forwards or\n /// experience time dilation (slow down or speed up), but it will never go\n /// backwards.\n@@ -485,7 +485,7 @@ impl SystemTime {\n     ///\n     /// This function may fail as the underlying system clock is susceptible to\n     /// drift and updates (e.g., the system clock could go backwards), so this\n-    /// function may not always succeed. If successful, [`Ok`]`(`[`Duration`]`)` is\n+    /// function might not always succeed. If successful, [`Ok`]`(`[`Duration`]`)` is\n     /// returned where the duration represents the amount of time elapsed from\n     /// this time measurement to the current time.\n     ///"}]}