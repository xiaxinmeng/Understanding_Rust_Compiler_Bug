{"sha": "439423834713e7d10d688ef912747e3e9a2fecd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOTQyMzgzNDcxM2U3ZDEwZDY4OGVmOTEyNzQ3ZTNlOWEyZmVjZDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-13T17:47:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-13T17:47:47Z"}, "message": "rustc_resolve: only process uniform_paths canaries in namespaces they're present in.", "tree": {"sha": "54aa2ee5994a5fe930e2f0f229761c01d6ad570b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54aa2ee5994a5fe930e2f0f229761c01d6ad570b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439423834713e7d10d688ef912747e3e9a2fecd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439423834713e7d10d688ef912747e3e9a2fecd2", "html_url": "https://github.com/rust-lang/rust/commit/439423834713e7d10d688ef912747e3e9a2fecd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439423834713e7d10d688ef912747e3e9a2fecd2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994cdd918589535d705177545bf503cd0c3c5148", "url": "https://api.github.com/repos/rust-lang/rust/commits/994cdd918589535d705177545bf503cd0c3c5148", "html_url": "https://github.com/rust-lang/rust/commit/994cdd918589535d705177545bf503cd0c3c5148"}], "stats": {"total": 154, "additions": 79, "deletions": 75}, "files": [{"sha": "7ee19d0f31898f3ab56366ae4a5ae660e92e2efb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 79, "deletions": 75, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/439423834713e7d10d688ef912747e3e9a2fecd2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439423834713e7d10d688ef912747e3e9a2fecd2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=439423834713e7d10d688ef912747e3e9a2fecd2", "patch": "@@ -630,15 +630,16 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n             self.finalize_resolutions_in(module);\n         }\n \n-        #[derive(Default)]\n-        struct UniformPathsCanaryResult<'a> {\n+        struct UniformPathsCanaryResults<'a> {\n+            name: Name,\n             module_scope: Option<&'a NameBinding<'a>>,\n             block_scopes: Vec<&'a NameBinding<'a>>,\n         }\n+\n         // Collect all tripped `uniform_paths` canaries separately.\n         let mut uniform_paths_canaries: BTreeMap<\n-            (Span, NodeId),\n-            (Name, PerNS<UniformPathsCanaryResult>),\n+            (Span, NodeId, Namespace),\n+            UniformPathsCanaryResults,\n         > = BTreeMap::new();\n \n         let mut errors = false;\n@@ -665,21 +666,25 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                     import.module_path.len() > 0 &&\n                     import.module_path[0].name == keywords::SelfValue.name();\n \n-                let (prev_name, canary_results) =\n-                    uniform_paths_canaries.entry((import.span, import.id))\n-                        .or_insert((name, PerNS::default()));\n-\n-                // All the canaries with the same `id` should have the same `name`.\n-                assert_eq!(*prev_name, name);\n-\n                 self.per_ns(|_, ns| {\n                     if let Some(result) = result[ns].get().ok() {\n+                        let canary_results =\n+                            uniform_paths_canaries.entry((import.span, import.id, ns))\n+                                .or_insert(UniformPathsCanaryResults {\n+                                    name,\n+                                    module_scope: None,\n+                                    block_scopes: vec![],\n+                                });\n+\n+                        // All the canaries with the same `id` should have the same `name`.\n+                        assert_eq!(canary_results.name, name);\n+\n                         if has_explicit_self {\n                             // There should only be one `self::x` (module-scoped) canary.\n-                            assert!(canary_results[ns].module_scope.is_none());\n-                            canary_results[ns].module_scope = Some(result);\n+                            assert!(canary_results.module_scope.is_none());\n+                            canary_results.module_scope = Some(result);\n                         } else {\n-                            canary_results[ns].block_scopes.push(result);\n+                            canary_results.block_scopes.push(result);\n                         }\n                     }\n                 });\n@@ -720,77 +725,76 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         }\n \n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n-        for ((span, _), (name, results)) in uniform_paths_canaries {\n-            self.per_ns(|this, ns| {\n-                let external_crate = if ns == TypeNS && this.extern_prelude.contains(&name) {\n-                    let crate_id =\n-                        this.crate_loader.process_path_extern(name, span);\n-                    Some(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n-                } else {\n-                    None\n-                };\n-                let result_filter = |result: &&NameBinding| {\n-                    // Ignore canaries that resolve to an import of the same crate.\n-                    // That is, we allow `use crate_name; use crate_name::foo;`.\n-                    if let Some(def_id) = external_crate {\n-                        if let Some(module) = result.module() {\n-                            if module.normal_ancestor_id == def_id {\n-                                return false;\n-                            }\n+        for ((span, _, ns), results) in uniform_paths_canaries {\n+            let name = results.name;\n+            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n+                let crate_id =\n+                    self.crate_loader.process_path_extern(name, span);\n+                Some(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+            } else {\n+                None\n+            };\n+\n+            let result_filter = |result: &&NameBinding| {\n+                // Ignore canaries that resolve to an import of the same crate.\n+                // That is, we allow `use crate_name; use crate_name::foo;`.\n+                if let Some(def_id) = external_crate {\n+                    if let Some(module) = result.module() {\n+                        if module.normal_ancestor_id == def_id {\n+                            return false;\n                         }\n                     }\n+                }\n \n-                    true\n-                };\n-                let module_scope = results[ns].module_scope.filter(result_filter);\n-                let block_scopes = || {\n-                    results[ns].block_scopes.iter().cloned().filter(result_filter)\n-                };\n+                true\n+            };\n+            let module_scope = results.module_scope.filter(result_filter);\n+            let block_scopes = || {\n+                results.block_scopes.iter().cloned().filter(result_filter)\n+            };\n \n-                // An ambiguity requires more than one possible resolution.\n-                let possible_resultions =\n-                    (external_crate.is_some() as usize) +\n-                    (module_scope.is_some() as usize) +\n-                    (block_scopes().next().is_some() as usize);\n-                if possible_resultions <= 1 {\n-                    return;\n-                }\n+            // An ambiguity requires more than one possible resolution.\n+            let possible_resultions =\n+                (external_crate.is_some() as usize) +\n+                module_scope.into_iter().chain(block_scopes()).count();\n+            if possible_resultions <= 1 {\n+                return;\n+            }\n \n-                errors = true;\n+            errors = true;\n \n-                let msg = format!(\"`{}` import is ambiguous\", name);\n-                let mut err = this.session.struct_span_err(span, &msg);\n-                let mut suggestion_choices = String::new();\n-                if external_crate.is_some() {\n-                    write!(suggestion_choices, \"`::{}`\", name);\n-                    err.span_label(span,\n-                        format!(\"can refer to external crate `::{}`\", name));\n-                }\n-                if let Some(result) = module_scope {\n-                    if !suggestion_choices.is_empty() {\n-                        suggestion_choices.push_str(\" or \");\n-                    }\n-                    write!(suggestion_choices, \"`self::{}`\", name);\n-                    if uniform_paths_feature {\n-                        err.span_label(result.span,\n-                            format!(\"can refer to `self::{}`\", name));\n-                    } else {\n-                        err.span_label(result.span,\n-                            format!(\"may refer to `self::{}` in the future\", name));\n-                    }\n-                }\n-                for result in block_scopes() {\n-                    err.span_label(result.span,\n-                        format!(\"shadowed by block-scoped `{}`\", name));\n+            let msg = format!(\"`{}` import is ambiguous\", name);\n+            let mut err = self.session.struct_span_err(span, &msg);\n+            let mut suggestion_choices = String::new();\n+            if external_crate.is_some() {\n+                write!(suggestion_choices, \"`::{}`\", name);\n+                err.span_label(span,\n+                    format!(\"can refer to external crate `::{}`\", name));\n+            }\n+            if let Some(result) = module_scope {\n+                if !suggestion_choices.is_empty() {\n+                    suggestion_choices.push_str(\" or \");\n                 }\n-                err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n+                write!(suggestion_choices, \"`self::{}`\", name);\n                 if uniform_paths_feature {\n-                    err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+                    err.span_label(result.span,\n+                        format!(\"can refer to `self::{}`\", name));\n                 } else {\n-                    err.note(\"in the future, `#![feature(uniform_paths)]` may become the default\");\n+                    err.span_label(result.span,\n+                        format!(\"may refer to `self::{}` in the future\", name));\n                 }\n-                err.emit();\n-            });\n+            }\n+            for result in block_scopes() {\n+                err.span_label(result.span,\n+                    format!(\"shadowed by block-scoped `{}`\", name));\n+            }\n+            err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n+            if uniform_paths_feature {\n+                err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n+            } else {\n+                err.note(\"in the future, `#![feature(uniform_paths)]` may become the default\");\n+            }\n+            err.emit();\n         }\n \n         if !error_vec.is_empty() {"}]}