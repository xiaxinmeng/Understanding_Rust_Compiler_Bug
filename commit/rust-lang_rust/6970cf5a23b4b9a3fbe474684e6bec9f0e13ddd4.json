{"sha": "6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "node_id": "C_kwDOAAsO6NoAKDY5NzBjZjVhMjNiNGI5YTNmYmU0NzQ2ODRlNmJlYzlmMGUxM2RkZDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-25T14:05:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-25T14:05:37Z"}, "message": "Rollup merge of #91096 - compiler-errors:elaborate_opaque_trait, r=estebank\n\nPrint associated types on opaque `impl Trait` types\n\nThis PR generalizes #91021, printing associated types for all opaque `impl Trait` types instead of just special-casing for future.\n\nbefore:\n```\nerror[E0271]: type mismatch resolving `<impl Iterator as Iterator>::Item == u32`\n```\n\nafter:\n```\nerror[E0271]: type mismatch resolving `<impl Iterator<Item = usize> as Iterator>::Item == u32`\n```\n\n---\n\nQuestions:\n1. I'm kinda lost in binders hell with this one. Is all of the `rebind`ing necessary?\n2. Is there a map collection type that will give me a stable iteration order? Doesn't seem like TraitRef is Ord, so I can't just sort later..\n3. I removed the logic that suppresses printing generator projection types. It creates outputs like this [gist](https://gist.github.com/compiler-errors/d6f12fb30079feb1ad1d5f1ab39a3a8d). Should I put that back?\n4. I also added spaces between traits, `impl A+B` -> `impl A + B`. I quite like this change, but is there a good reason to keep it like that?\n\nr? ````@estebank````", "tree": {"sha": "79f8459ada4c2a19df700fc596be975e7ee3747a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f8459ada4c2a19df700fc596be975e7ee3747a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhn5gyCRBK7hj4Ov3rIwAAiicIAEAlfmXw6khZXzSwOkZqZxk+\nuCZVYD2aE/C9rPn1Debjdsjh67U9Ha8ektuJT3EZCXTCMVCAQ8d3Y15PjPSs4MI+\nDbCXZOgcbUwRzmaOYAddbZVxhwmtUb23qoLM/7RmInaAa96g3NMI6qgwiikp6xro\nBgFe9v08w0O4oGkgkviJfCjF2cBrY9JbGn1jqgzxKGq4Sm6bmLp7Wt2mBOBVg0g4\nVFlOh6RdXjI0pTF44AFMdCSkxIWcvNEhmTDM+tt4VfaNlEoz/8dDwOGZntd+SIBe\n0rQR5qbRbR3QSbq19rFn04J6OSkmzKGloeySoZARGG2Pe01FXACRCZVoVZ7sjNs=\n=39px\n-----END PGP SIGNATURE-----\n", "payload": "tree 79f8459ada4c2a19df700fc596be975e7ee3747a\nparent 07808898335b18d3c2c9ba949d2a3dc07b52eed0\nparent 9cc117930b02b86795946e6b8748166c17fd4f16\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637849137 +0100\ncommitter GitHub <noreply@github.com> 1637849137 +0100\n\nRollup merge of #91096 - compiler-errors:elaborate_opaque_trait, r=estebank\n\nPrint associated types on opaque `impl Trait` types\n\nThis PR generalizes #91021, printing associated types for all opaque `impl Trait` types instead of just special-casing for future.\n\nbefore:\n```\nerror[E0271]: type mismatch resolving `<impl Iterator as Iterator>::Item == u32`\n```\n\nafter:\n```\nerror[E0271]: type mismatch resolving `<impl Iterator<Item = usize> as Iterator>::Item == u32`\n```\n\n---\n\nQuestions:\n1. I'm kinda lost in binders hell with this one. Is all of the `rebind`ing necessary?\n2. Is there a map collection type that will give me a stable iteration order? Doesn't seem like TraitRef is Ord, so I can't just sort later..\n3. I removed the logic that suppresses printing generator projection types. It creates outputs like this [gist](https://gist.github.com/compiler-errors/d6f12fb30079feb1ad1d5f1ab39a3a8d). Should I put that back?\n4. I also added spaces between traits, `impl A+B` -> `impl A + B`. I quite like this change, but is there a good reason to keep it like that?\n\nr? ````@estebank````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "html_url": "https://github.com/rust-lang/rust/commit/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07808898335b18d3c2c9ba949d2a3dc07b52eed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/07808898335b18d3c2c9ba949d2a3dc07b52eed0", "html_url": "https://github.com/rust-lang/rust/commit/07808898335b18d3c2c9ba949d2a3dc07b52eed0"}, {"sha": "9cc117930b02b86795946e6b8748166c17fd4f16", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc117930b02b86795946e6b8748166c17fd4f16", "html_url": "https://github.com/rust-lang/rust/commit/9cc117930b02b86795946e6b8748166c17fd4f16"}], "stats": {"total": 502, "additions": 355, "deletions": 147}, "files": [{"sha": "05659e976dd44c3c2f0f4ced66daa17f9c1865d9", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -268,6 +268,7 @@ language_item_table! {\n     Future,                  sym::future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n     GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n     Generator,               sym::generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n+    GeneratorReturn,         sym::generator_return,    generator_return,           Target::AssocTy,        GenericRequirement::None;\n     Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n     Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n "}, {"sha": "49a64cb246ad0dd09af4b58d55e69b0cfcfd41d2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -7,6 +7,7 @@ pub mod query;\n pub mod select;\n pub mod specialization_graph;\n mod structural_impls;\n+pub mod util;\n \n use crate::infer::canonical::Canonical;\n use crate::thir::abstract_const::NotConstEvaluatable;"}, {"sha": "3490c6881704a62e0ca642dcaa2317fc02ed9d0b", "filename": "compiler/rustc_middle/src/traits/util.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -0,0 +1,49 @@\n+use rustc_data_structures::stable_set::FxHashSet;\n+\n+use crate::ty::{PolyTraitRef, TyCtxt};\n+\n+/// Given a PolyTraitRef, get the PolyTraitRefs of the trait's (transitive) supertraits.\n+///\n+/// A simplfied version of the same function at `rustc_infer::traits::util::supertraits`.\n+pub fn supertraits<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_ref: PolyTraitRef<'tcx>,\n+) -> impl Iterator<Item = PolyTraitRef<'tcx>> {\n+    Elaborator { tcx, visited: FxHashSet::from_iter([trait_ref]), stack: vec![trait_ref] }\n+}\n+\n+struct Elaborator<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    visited: FxHashSet<PolyTraitRef<'tcx>>,\n+    stack: Vec<PolyTraitRef<'tcx>>,\n+}\n+\n+impl<'tcx> Elaborator<'tcx> {\n+    fn elaborate(&mut self, trait_ref: PolyTraitRef<'tcx>) {\n+        let supertrait_refs = self\n+            .tcx\n+            .super_predicates_of(trait_ref.def_id())\n+            .predicates\n+            .into_iter()\n+            .flat_map(|(pred, _)| {\n+                pred.subst_supertrait(self.tcx, &trait_ref).to_opt_poly_trait_ref()\n+            })\n+            .map(|t| t.value)\n+            .filter(|supertrait_ref| self.visited.insert(*supertrait_ref));\n+\n+        self.stack.extend(supertrait_refs);\n+    }\n+}\n+\n+impl<'tcx> Iterator for Elaborator<'tcx> {\n+    type Item = PolyTraitRef<'tcx>;\n+\n+    fn next(&mut self) -> Option<PolyTraitRef<'tcx>> {\n+        if let Some(trait_ref) = self.stack.pop() {\n+            self.elaborate(trait_ref);\n+            Some(trait_ref)\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "175295b3199e8e2e2c1bf0cc5115ba53133d8657", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 229, "deletions": 74, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -643,81 +643,8 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                         return Ok(self);\n                     }\n-                    // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n-                    // by looking up the projections associated with the def_id.\n-                    let bounds = self.tcx().explicit_item_bounds(def_id);\n-\n-                    let mut first = true;\n-                    let mut is_sized = false;\n-                    let mut is_future = false;\n-                    let mut future_output_ty = None;\n-\n-                    p!(\"impl\");\n-                    for (predicate, _) in bounds {\n-                        let predicate = predicate.subst(self.tcx(), substs);\n-                        let bound_predicate = predicate.kind();\n-\n-                        match bound_predicate.skip_binder() {\n-                            ty::PredicateKind::Projection(projection_predicate) => {\n-                                let Some(future_trait) = self.tcx().lang_items().future_trait() else { continue };\n-                                let future_output_def_id =\n-                                    self.tcx().associated_item_def_ids(future_trait)[0];\n-\n-                                if projection_predicate.projection_ty.item_def_id\n-                                    == future_output_def_id\n-                                {\n-                                    // We don't account for multiple `Future::Output = Ty` contraints.\n-                                    is_future = true;\n-                                    future_output_ty = Some(projection_predicate.ty);\n-                                }\n-                            }\n-                            ty::PredicateKind::Trait(pred) => {\n-                                let trait_ref = bound_predicate.rebind(pred.trait_ref);\n-                                // Don't print +Sized, but rather +?Sized if absent.\n-                                if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait()\n-                                {\n-                                    is_sized = true;\n-                                    continue;\n-                                }\n-\n-                                if Some(trait_ref.def_id())\n-                                    == self.tcx().lang_items().future_trait()\n-                                {\n-                                    is_future = true;\n-                                    continue;\n-                                }\n-\n-                                p!(\n-                                    write(\"{}\", if first { \" \" } else { \" + \" }),\n-                                    print(trait_ref.print_only_trait_path())\n-                                );\n-\n-                                first = false;\n-                            }\n-                            _ => {}\n-                        }\n-                    }\n-\n-                    if is_future {\n-                        p!(write(\"{}Future\", if first { \" \" } else { \" + \" }));\n-                        first = false;\n \n-                        if let Some(future_output_ty) = future_output_ty {\n-                            // Don't print projection types, which we (unfortunately) see often\n-                            // in the error outputs involving async blocks.\n-                            if !matches!(future_output_ty.kind(), ty::Projection(_)) {\n-                                p!(\"<Output = \", print(future_output_ty), \">\");\n-                            }\n-                        }\n-                    }\n-\n-                    if !is_sized {\n-                        p!(write(\"{}?Sized\", if first { \" \" } else { \" + \" }));\n-                    } else if first {\n-                        p!(\" Sized\");\n-                    }\n-\n-                    Ok(self)\n+                    self.pretty_print_opaque_impl_type(def_id, substs)\n                 });\n             }\n             ty::Str => p!(\"str\"),\n@@ -826,6 +753,225 @@ pub trait PrettyPrinter<'tcx>:\n         Ok(self)\n     }\n \n+    fn pretty_print_opaque_impl_type(\n+        mut self,\n+        def_id: DefId,\n+        substs: &'tcx ty::List<ty::GenericArg<'tcx>>,\n+    ) -> Result<Self::Type, Self::Error> {\n+        define_scoped_cx!(self);\n+\n+        // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n+        // by looking up the projections associated with the def_id.\n+        let bounds = self.tcx().explicit_item_bounds(def_id);\n+\n+        let mut traits = BTreeMap::new();\n+        let mut fn_traits = BTreeMap::new();\n+        let mut is_sized = false;\n+\n+        for (predicate, _) in bounds {\n+            let predicate = predicate.subst(self.tcx(), substs);\n+            let bound_predicate = predicate.kind();\n+\n+            match bound_predicate.skip_binder() {\n+                ty::PredicateKind::Trait(pred) => {\n+                    let trait_ref = bound_predicate.rebind(pred.trait_ref);\n+\n+                    // Don't print + Sized, but rather + ?Sized if absent.\n+                    if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait() {\n+                        is_sized = true;\n+                        continue;\n+                    }\n+\n+                    self.insert_trait_and_projection(trait_ref, None, &mut traits, &mut fn_traits);\n+                }\n+                ty::PredicateKind::Projection(pred) => {\n+                    let proj_ref = bound_predicate.rebind(pred);\n+                    let trait_ref = proj_ref.required_poly_trait_ref(self.tcx());\n+\n+                    // Projection type entry -- the def-id for naming, and the ty.\n+                    let proj_ty = (proj_ref.projection_def_id(), proj_ref.ty());\n+\n+                    self.insert_trait_and_projection(\n+                        trait_ref,\n+                        Some(proj_ty),\n+                        &mut traits,\n+                        &mut fn_traits,\n+                    );\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        let mut first = true;\n+        // Insert parenthesis around (Fn(A, B) -> C) if the opaque ty has more than one other trait\n+        let paren_needed = fn_traits.len() > 1 || traits.len() > 0 || !is_sized;\n+\n+        p!(\"impl\");\n+\n+        for (fn_once_trait_ref, entry) in fn_traits {\n+            // Get the (single) generic ty (the args) of this FnOnce trait ref.\n+            let generics = self.generic_args_to_print(\n+                self.tcx().generics_of(fn_once_trait_ref.def_id()),\n+                fn_once_trait_ref.skip_binder().substs,\n+            );\n+\n+            match (entry.return_ty, generics[0].expect_ty()) {\n+                // We can only print `impl Fn() -> ()` if we have a tuple of args and we recorded\n+                // a return type.\n+                (Some(return_ty), arg_tys) if matches!(arg_tys.kind(), ty::Tuple(_)) => {\n+                    let name = if entry.fn_trait_ref.is_some() {\n+                        \"Fn\"\n+                    } else if entry.fn_mut_trait_ref.is_some() {\n+                        \"FnMut\"\n+                    } else {\n+                        \"FnOnce\"\n+                    };\n+\n+                    p!(\n+                        write(\"{}\", if first { \" \" } else { \" + \" }),\n+                        write(\"{}{}(\", if paren_needed { \"(\" } else { \"\" }, name)\n+                    );\n+\n+                    for (idx, ty) in arg_tys.tuple_fields().enumerate() {\n+                        if idx > 0 {\n+                            p!(\", \");\n+                        }\n+                        p!(print(ty));\n+                    }\n+\n+                    p!(\")\");\n+                    if !return_ty.skip_binder().is_unit() {\n+                        p!(\"-> \", print(return_ty));\n+                    }\n+                    p!(write(\"{}\", if paren_needed { \")\" } else { \"\" }));\n+\n+                    first = false;\n+                }\n+                // If we got here, we can't print as a `impl Fn(A, B) -> C`. Just record the\n+                // trait_refs we collected in the OpaqueFnEntry as normal trait refs.\n+                _ => {\n+                    if entry.has_fn_once {\n+                        traits.entry(fn_once_trait_ref).or_default().extend(\n+                            // Group the return ty with its def id, if we had one.\n+                            entry\n+                                .return_ty\n+                                .map(|ty| (self.tcx().lang_items().fn_once_output().unwrap(), ty)),\n+                        );\n+                    }\n+                    if let Some(trait_ref) = entry.fn_mut_trait_ref {\n+                        traits.entry(trait_ref).or_default();\n+                    }\n+                    if let Some(trait_ref) = entry.fn_trait_ref {\n+                        traits.entry(trait_ref).or_default();\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Print the rest of the trait types (that aren't Fn* family of traits)\n+        for (trait_ref, assoc_items) in traits {\n+            p!(\n+                write(\"{}\", if first { \" \" } else { \" + \" }),\n+                print(trait_ref.skip_binder().print_only_trait_name())\n+            );\n+\n+            let generics = self.generic_args_to_print(\n+                self.tcx().generics_of(trait_ref.def_id()),\n+                trait_ref.skip_binder().substs,\n+            );\n+\n+            if !generics.is_empty() || !assoc_items.is_empty() {\n+                p!(\"<\");\n+                let mut first = true;\n+\n+                for ty in generics {\n+                    if !first {\n+                        p!(\", \");\n+                    }\n+                    p!(print(trait_ref.rebind(*ty)));\n+                    first = false;\n+                }\n+\n+                for (assoc_item_def_id, ty) in assoc_items {\n+                    if !first {\n+                        p!(\", \");\n+                    }\n+                    p!(write(\"{} = \", self.tcx().associated_item(assoc_item_def_id).ident));\n+\n+                    // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n+                    match ty.skip_binder().kind() {\n+                        ty::Projection(ty::ProjectionTy { item_def_id, .. })\n+                            if Some(*item_def_id) == self.tcx().lang_items().generator_return() =>\n+                        {\n+                            p!(\"[async output]\")\n+                        }\n+                        _ => {\n+                            p!(print(ty))\n+                        }\n+                    }\n+\n+                    first = false;\n+                }\n+\n+                p!(\">\");\n+            }\n+\n+            first = false;\n+        }\n+\n+        if !is_sized {\n+            p!(write(\"{}?Sized\", if first { \" \" } else { \" + \" }));\n+        } else if first {\n+            p!(\" Sized\");\n+        }\n+\n+        Ok(self)\n+    }\n+\n+    /// Insert the trait ref and optionally a projection type associated with it into either the\n+    /// traits map or fn_traits map, depending on if the trait is in the Fn* family of traits.\n+    fn insert_trait_and_projection(\n+        &mut self,\n+        trait_ref: ty::PolyTraitRef<'tcx>,\n+        proj_ty: Option<(DefId, ty::Binder<'tcx, Ty<'tcx>>)>,\n+        traits: &mut BTreeMap<ty::PolyTraitRef<'tcx>, BTreeMap<DefId, ty::Binder<'tcx, Ty<'tcx>>>>,\n+        fn_traits: &mut BTreeMap<ty::PolyTraitRef<'tcx>, OpaqueFnEntry<'tcx>>,\n+    ) {\n+        let trait_def_id = trait_ref.def_id();\n+\n+        // If our trait_ref is FnOnce or any of its children, project it onto the parent FnOnce\n+        // super-trait ref and record it there.\n+        if let Some(fn_once_trait) = self.tcx().lang_items().fn_once_trait() {\n+            // If we have a FnOnce, then insert it into\n+            if trait_def_id == fn_once_trait {\n+                let entry = fn_traits.entry(trait_ref).or_default();\n+                // Optionally insert the return_ty as well.\n+                if let Some((_, ty)) = proj_ty {\n+                    entry.return_ty = Some(ty);\n+                }\n+                entry.has_fn_once = true;\n+                return;\n+            } else if Some(trait_def_id) == self.tcx().lang_items().fn_mut_trait() {\n+                let super_trait_ref = crate::traits::util::supertraits(self.tcx(), trait_ref)\n+                    .find(|super_trait_ref| super_trait_ref.def_id() == fn_once_trait)\n+                    .unwrap();\n+\n+                fn_traits.entry(super_trait_ref).or_default().fn_mut_trait_ref = Some(trait_ref);\n+                return;\n+            } else if Some(trait_def_id) == self.tcx().lang_items().fn_trait() {\n+                let super_trait_ref = crate::traits::util::supertraits(self.tcx(), trait_ref)\n+                    .find(|super_trait_ref| super_trait_ref.def_id() == fn_once_trait)\n+                    .unwrap();\n+\n+                fn_traits.entry(super_trait_ref).or_default().fn_trait_ref = Some(trait_ref);\n+                return;\n+            }\n+        }\n+\n+        // Otherwise, just group our traits and projection types.\n+        traits.entry(trait_ref).or_default().extend(proj_ty);\n+    }\n+\n     fn pretty_print_bound_var(\n         &mut self,\n         debruijn: ty::DebruijnIndex,\n@@ -2553,3 +2699,12 @@ fn trimmed_def_paths(tcx: TyCtxt<'_>, (): ()) -> FxHashMap<DefId, Symbol> {\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { trimmed_def_paths, ..*providers };\n }\n+\n+#[derive(Default)]\n+pub struct OpaqueFnEntry<'tcx> {\n+    // The trait ref is already stored as a key, so just track if we have it as a real predicate\n+    has_fn_once: bool,\n+    fn_mut_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n+    fn_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n+    return_ty: Option<ty::Binder<'tcx, Ty<'tcx>>>,\n+}"}, {"sha": "c2b32cd06ea0a66c4e28f9597bc76a25c3b3684d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -890,7 +890,7 @@ impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n ///\n /// Trait references also appear in object types like `Foo<U>`, but in\n /// that case the `Self` parameter is absent from the substitutions.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,"}, {"sha": "247d69d6ee97bdb26e50e8861ca96173e3336df3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -679,6 +679,7 @@ symbols! {\n         gen_future,\n         gen_kill,\n         generator,\n+        generator_return,\n         generator_state,\n         generators,\n         generic_arg_infer,"}, {"sha": "b527c4b04ad7f8a9bdc3c804c4e69d523c60c3f1", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -82,6 +82,7 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n+    #[cfg_attr(not(bootstrap), lang = \"generator_return\")]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "045bc720ca70126c9616819fbbe9da04d270c810", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -19,16 +19,16 @@\n +         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl std::ops::Fn<()> {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--         _2 = <impl Fn<()> as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl std::ops::Fn<()>, ()) -> <impl std::ops::Fn<()> as std::ops::FnOnce<()>>::Output {<impl std::ops::Fn<()> as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n       }\n   "}, {"sha": "3190db52286bc9f0755045bf2ed904c6d0848dd0", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -5,8 +5,8 @@\n       debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:9:5: 9:9\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:10:3: 10:3\n       let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--     let mut _3: &impl std::ops::Fn<()>;  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n--     let _4: impl std::ops::Fn<()>;       // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let mut _3: &impl Fn();              // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let _4: impl Fn();                   // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n +     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n +     let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n       let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n@@ -18,17 +18,17 @@\n           _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl std::ops::Fn<()> {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n           nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          _2 = <impl Fn<()> as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl std::ops::Fn<()>, ()) -> <impl std::ops::Fn<()> as std::ops::FnOnce<()>>::Output {<impl std::ops::Fn<()> as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "aae562ae72243d34023d060ebe4979b482b2a8b5", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -83,17 +83,17 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n-    //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived_foo());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_duplicate());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n }"}, {"sha": "c00b48abc1c330993d5755fe471e48949a225c4f", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -160,7 +160,7 @@ help: consider constraining the associated type `<impl DerivedTrait as Trait>::A\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n    |                                                 +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n    |\n LL | fn returns_opaque_foo() -> impl Trait + Foo {\n@@ -170,18 +170,18 @@ LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Trait + Foo as Trait>::Associated`\n+           found associated type `<impl Foo + Trait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl Trait + Foo as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl Foo + Trait as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n    |                                      +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n    |\n LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n@@ -191,8 +191,8 @@ LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl DerivedTrait + Foo as Trait>::Associated`\n-   = help: consider constraining the associated type `<impl DerivedTrait + Foo as Trait>::Associated` to `()`\n+           found associated type `<impl Foo + DerivedTrait as Trait>::Associated`\n+   = help: consider constraining the associated type `<impl Foo + DerivedTrait as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n@@ -221,7 +221,7 @@ help: consider constraining the associated type `<impl GenericTrait<()> as Gener\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n    |                                                    +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n@@ -231,18 +231,18 @@ LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated`\n+           found associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n-help: consider constraining the associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated` to `()`\n+help: consider constraining the associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n    |                                                        +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5\n    |\n LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n@@ -252,8 +252,8 @@ LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated`\n-   = help: consider constraining the associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n+           found associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = help: consider constraining the associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46"}, {"sha": "e3832767203bbb6c5845b92ffbfc456d5ee71a87", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -15,16 +15,16 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n+    //~^ ERROR type mismatch\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n-    //~^ ERROR mismatched types\n+    //~^ ERROR mismatched types [E0308]\n     let block = async {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "fe864c65b7cf24ca510d7366305295ad7dc021a0", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;"}, {"sha": "4a45d8d2a942344a55427e35341450aec65e3478", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -46,8 +46,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           the expected opaque type\n    |                                           the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (`async` closure body)\n-              found opaque type `impl Future` (`async` closure body)\n+   = note: expected opaque type `impl Future<Output = [async output]>` (`async` closure body)\n+              found opaque type `impl Future<Output = [async output]>` (`async` closure body)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b61694ad53e5b1a869bc521c519907aca5ae35fb", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:9\n    |"}, {"sha": "a8c2ebe12fa1837eff54e5529e839d9cb079fec7", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -44,13 +44,13 @@ LL |     require_send(send_fut);\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = [async output]>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future`\n+   = note: required because it appears within the type `impl Future<Output = [async output]>`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "6ebefbebe536260f327b9ea2c3143c8dfeb0c84e", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n    |"}, {"sha": "c731c32832222f7d480fadea359dd2a641920362", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -21,7 +21,7 @@ LL |     type MainFn = impl Fn();\n LL |     pub const BAR: MainFn = bar;\n    |                             ^^^ expected opaque type, found fn item\n    |\n-   = note: expected opaque type `impl Fn<()>`\n+   = note: expected opaque type `impl Fn()`\n                   found fn item `fn() {bar}`\n \n error: could not find defining uses"}, {"sha": "a7d7a732548869911355fdea83ebb0616c5f2bd6", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/issue-68112.rs:31:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `impl Generator` which is not `Send`\n+   |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -29,9 +29,9 @@ LL |     require_send(send_gen);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6]`\n-   = note: required because it appears within the type `impl Generator`\n-   = note: required because it appears within the type `impl Generator`\n-   = note: required because it appears within the type `{impl Generator, ()}`\n+   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `{impl Generator<Return = Arc<RefCell<i32>>>, ()}`\n    = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:48:20: 51:6]`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:22:25"}, {"sha": "37ae3c6802964212393ce02234250e4f84204d72", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -2,16 +2,16 @@ error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:13:10\n    |\n LL | fn before() -> impl Fn(i32) {\n-   |                ------------ within this `impl Fn<(i32,)>`\n+   |                ------------ within this `impl Fn(i32)`\n ...\n LL |     send(before());\n    |     ---- ^^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n-   = note: required because it appears within the type `impl Fn<(i32,)>`\n+   = note: required because it appears within the type `impl Fn(i32)`\n note: required by a bound in `send`\n   --> $DIR/auto-trait-leak2.rs:10:12\n    |\n@@ -27,11 +27,11 @@ LL |     send(after());\n    |     required by a bound introduced by this call\n ...\n LL | fn after() -> impl Fn(i32) {\n-   |               ------------ within this `impl Fn<(i32,)>`\n+   |               ------------ within this `impl Fn(i32)`\n    |\n-   = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n-   = note: required because it appears within the type `impl Fn<(i32,)>`\n+   = note: required because it appears within the type `impl Fn(i32)`\n note: required by a bound in `send`\n   --> $DIR/auto-trait-leak2.rs:10:12\n    |"}, {"sha": "a519397806e0703ee7e83076dc191016722e607f", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -13,7 +13,7 @@ impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-        //~| ERROR the trait bound `impl Future: Copy` is not satisfied [E0277]\n+        //~| ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n         async {}\n     }\n }"}, {"sha": "97545ba3d1124c755df086a10ff9195b445ef00f", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n+error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n   --> $DIR/issue-55872-2.rs:14:20\n    |\n LL |     fn foo<T>() -> Self::E {\n-   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-2.rs:14:28"}, {"sha": "e57fbf104dc6f5413643c60337b23cb82eb62bdf", "filename": "src/test/ui/impl-trait/issue-72911.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -19,14 +19,14 @@ LL |\n LL |     lint_files().flat_map(|f| gather_from_file(&f))\n    |     -----------------------------------------------\n    |     |\n-   |     returning here with type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n-   |     returning here with type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |     returning here with type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |     returning here with type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n ...\n LL | fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = Lint> {\n-   |                                                      -------------------------- returning this opaque type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |                                                      -------------------------- returning this opaque type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n ...\n LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n-   |                    -------------------------------------- returning this opaque type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n+   |                    -------------------------------------- returning this opaque type `FlatMap<impl Iterator<Item = [type error]>, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5019e544bd562566540a1a8b2a94823bfa9f6cfd", "filename": "src/test/ui/impl-trait/issue-87450.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -17,10 +17,10 @@ LL | fn foo() -> impl Fn() {\n    |             ^^^^^^^^^ recursive opaque type\n ...\n LL |     wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n-   |     ----------------------------------------------- returning here with type `impl Fn<()>`\n+   |     ----------------------------------------------- returning here with type `impl Fn()`\n ...\n LL | fn wrap(f: impl Fn()) -> impl Fn() {\n-   |                          --------- returning this opaque type `impl Fn<()>`\n+   |                          --------- returning this opaque type `impl Fn()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "130678de2370cd47ed6978b7c50ef91a15a443d9", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -15,7 +15,7 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n    = note: expected opaque type `impl Future<Output = u8>`\n-              found opaque type `impl Future`\n+              found opaque type `impl Future<Output = [async output]>`\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to previous error"}, {"sha": "a53e28f7246e64fd8f2b7b4a82152bfa6a0ea478", "filename": "src/test/ui/issues/issue-59494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     let g = |(a, _)| a;\n     let t7 = |env| |a| |b| t7p(f, g)(((env, a), b));\n     let t8 = t8n(t7, t7p(f, g));\n-    //~^ ERROR: expected a `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>\n+    //~^ ERROR: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _))` [E0277]\n }"}, {"sha": "a9284535e4dc4221a6c1faf198fc113706f2ec5c", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -1,12 +1,12 @@\n-error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n+error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _))`\n   --> $DIR/issue-59494.rs:21:22\n    |\n LL |     let t8 = t8n(t7, t7p(f, g));\n-   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n+   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn(((_, _), _))`\n    |              |\n    |              required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<(_,)>` is not implemented for `impl Fn<(((_, _), _),)>`\n+   = help: the trait `Fn<(_,)>` is not implemented for `impl Fn(((_, _), _))`\n note: required by a bound in `t8n`\n   --> $DIR/issue-59494.rs:5:45\n    |"}, {"sha": "717ca4986f700e6e0fca62692bfb1790f8eb656f", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -33,7 +33,7 @@ fn use_of_b() -> AliasB {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA`\n+    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA<Assoc = u32>`\n }\n \n fn main() {}"}, {"sha": "d7e10db441ec23eb11ca485e468a1bb96785682b", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl TraitA`, which is not FFI-safe\n+error: `extern` block uses type `impl TraitA<Assoc = u32>`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73251-2.rs:36:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;"}, {"sha": "3a62b6a21a56a6dc859d77adc2bece27ea285ebc", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -9,7 +9,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-    //~^ ERROR `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+    //~^ ERROR `extern` block uses type `impl Fn()`, which is not FFI-safe [improper_ctypes]\n }\n \n fn main() {}"}, {"sha": "5afbef778b3e35d29b38472d517b0f48729794fd", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Fn<()>`, which is not FFI-safe\n+error: `extern` block uses type `impl Fn()`, which is not FFI-safe\n   --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n    |\n LL |     pub fn a(_: A);"}, {"sha": "31168e29eb82fc583e800d035bd4e2d329c527ed", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future` cannot be used in patterns\n+error: `impl Future<Output = [async output]>` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}, {"sha": "550ed4b03b03937d2fe73fbff637f155ea662c48", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -81,7 +81,7 @@ LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n    = note:   expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = [async output]>`\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}, {"sha": "101e7aecc0226dc431b3a9175da281c6e1920d00", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n+error[E0277]: the trait bound `fn() -> impl T<O = ()> {foo}: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:17:9\n    |\n LL | fn foo() -> impl T<O=()> { S }\n    |    --- consider calling this function\n ...\n LL |     bar(foo);\n-   |     --- ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |     --- ^^^ the trait `T` is not implemented for `fn() -> impl T<O = ()> {foo}`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "5878b26fddbc78453ae0dde1501c75a310f9a9d3", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -5,7 +5,7 @@\n use std::future::Future;\n \n type G<'a, T> = impl Future<Output = ()>;\n-//~^ ERROR: type mismatch resolving `<impl Future as Future>::Output == ()`\n+//~^ ERROR: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n //~| ERROR: the trait bound `T: Trait` is not satisfied\n \n trait Trait {"}, {"sha": "19ed9a7476c1b872bded84d1f988665a2067bfca", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=6970cf5a23b4b9a3fbe474684e6bec9f0e13ddd4", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n   --> $DIR/issue-89686.rs:7:17\n    |\n LL | type G<'a, T> = impl Future<Output = ()>;\n@@ -13,8 +13,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Future as Future>::Output`\n-   = help: consider constraining the associated type `<impl Future as Future>::Output` to `()`\n+           found associated type `<impl Future<Output = [async output]> as Future>::Output`\n+   = help: consider constraining the associated type `<impl Future<Output = [async output]> as Future>::Output` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0277]: the trait bound `T: Trait` is not satisfied"}]}