{"sha": "0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZDZlNzk1ZmIzZThlNzA3NjU1NzZiOTI5ZTNlYjAzMGM0ZjEwZDM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-06T21:22:17Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-06T21:23:18Z"}, "message": "mir::Local is Copy we can pass it by value in these cases", "tree": {"sha": "2d6b5d1dd5b011fc76117f5a2b6b82dec01bc718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6b5d1dd5b011fc76117f5a2b6b82dec01bc718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl5iv1YACgkQgTGiTgx5\n768Nvg/+Kib+sLd3O5bSp1XBshizWvEZ8EsUJjEu53uGkMAV6XH453MRnovbG0Kb\nlP6B8ppFTlJJw4FGsFF/pxDgdxwcp3HPSC7kNJ/FRmGfKEZ/c0DgfiwTQwKA+l9Z\nWVkPH5lkMe3Alu0AWsq2zMhRjO2VzUh/hW5G5fbbxY3slMveRCVwcLZtuImgItb0\nGvd72Yp9r6rYI2QZwolCsqWSwOb+CijVpUAQA+XX/XIoN/Uy7iiXwuDhgSYqdhiT\nrlgx7GusZ+j7O68p/w5a4SqcTVL/BWa33tcy2Q+kDLv5qB94hkEu5PjsIF3aaBr6\nngPxnQyOJtNSlqhP+lrQLQIlFWFxAHj6IzMN7EKP8bXmYuB+QQnXfd5xcq8adD3f\nqX6mvXvmAFXUhUxj8RWFYTa0OV7rjwiqmEHu+IkFC8uM3zw7ITq5fNYGSTo9+BJp\n9hDnYkL/jHgp2DMMazeGkrYYIsKC9Dgho8fkaEnlsBHJc4MZPGT1mQkXidZerlHW\nzVszgLfGaNiO7VD3Kvgno51lD0+8nJYH+4tWwulhA5Twtzm00kiYi7ZW37FgeOqr\n7eBo+QT9zylhoPt+pJPBxWy2G2KUvo2YBW3+aRSCzOy6D9VMZHTUXzLHB+sGp8q2\nhsPFGMNrO/cxK9+eaLG26WQaMXgqVRaLWaYhxJVVBL41nfo0vD0=\n=u4VS\n-----END PGP SIGNATURE-----", "payload": "tree 2d6b5d1dd5b011fc76117f5a2b6b82dec01bc718\nparent 865b44a3e330f3ef8be0f6edf69896c9ed957ac0\nauthor Santiago Pastorino <spastorino@gmail.com> 1583529737 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1583529798 -0300\n\nmir::Local is Copy we can pass it by value in these cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "html_url": "https://github.com/rust-lang/rust/commit/0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865b44a3e330f3ef8be0f6edf69896c9ed957ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/865b44a3e330f3ef8be0f6edf69896c9ed957ac0", "html_url": "https://github.com/rust-lang/rust/commit/865b44a3e330f3ef8be0f6edf69896c9ed957ac0"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2aca6f684f4fe5e0cd19f58ec3b1a6ac29f584a5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "patch": "@@ -888,7 +888,7 @@ macro_rules! visit_place_fns {\n     () => (\n         fn visit_projection(\n             &mut self,\n-            local: &Local,\n+            local: Local,\n             projection: &[PlaceElem<'tcx>],\n             context: PlaceContext,\n             location: Location,\n@@ -898,7 +898,7 @@ macro_rules! visit_place_fns {\n \n         fn visit_projection_elem(\n             &mut self,\n-            local: &Local,\n+            local: Local,\n             proj_base: &[PlaceElem<'tcx>],\n             elem: &PlaceElem<'tcx>,\n             context: PlaceContext,\n@@ -925,15 +925,15 @@ macro_rules! visit_place_fns {\n \n             self.visit_place_base(&place.local, context, location);\n \n-            self.visit_projection(&place.local,\n+            self.visit_projection(place.local,\n                                   &place.projection,\n                                   context,\n                                   location);\n         }\n \n         fn super_projection(\n             &mut self,\n-            local: &Local,\n+            local: Local,\n             projection: &[PlaceElem<'tcx>],\n             context: PlaceContext,\n             location: Location,\n@@ -947,7 +947,7 @@ macro_rules! visit_place_fns {\n \n         fn super_projection_elem(\n             &mut self,\n-            _local: &Local,\n+            _local: Local,\n             _proj_base: &[PlaceElem<'tcx>],\n             elem: &PlaceElem<'tcx>,\n             _context: PlaceContext,"}, {"sha": "b8a7d7df487b32cea6b9ccedb19e71c749a40730", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "patch": "@@ -203,7 +203,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             }\n \n             self.visit_place_base(&place_ref.local, context, location);\n-            self.visit_projection(&place_ref.local, place_ref.projection, context, location);\n+            self.visit_projection(place_ref.local, place_ref.projection, context, location);\n         }\n     }\n }"}, {"sha": "133772407c5ddd145a7477e1bc5ab3513ad956e3", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed6e795fb3e8e70765576b929e3eb030c4f10d3/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=0ed6e795fb3e8e70765576b929e3eb030c4f10d3", "patch": "@@ -276,7 +276,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         }\n                     };\n                     self.visit_place_base(&place.local, ctx, location);\n-                    self.visit_projection(&place.local, reborrowed_proj, ctx, location);\n+                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n             }\n@@ -289,7 +289,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n                     self.visit_place_base(&place.local, ctx, location);\n-                    self.visit_projection(&place.local, reborrowed_proj, ctx, location);\n+                    self.visit_projection(place.local, reborrowed_proj, ctx, location);\n                     return;\n                 }\n             }\n@@ -408,7 +408,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n     }\n     fn visit_projection_elem(\n         &mut self,\n-        place_local: &Local,\n+        place_local: Local,\n         proj_base: &[PlaceElem<'tcx>],\n         elem: &PlaceElem<'tcx>,\n         context: PlaceContext,\n@@ -428,11 +428,11 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n \n         match elem {\n             ProjectionElem::Deref => {\n-                let base_ty = Place::ty_from(*place_local, proj_base, *self.body, self.tcx).ty;\n+                let base_ty = Place::ty_from(place_local, proj_base, *self.body, self.tcx).ty;\n                 if let ty::RawPtr(_) = base_ty.kind {\n                     if proj_base.is_empty() {\n                         if let (local, []) = (place_local, proj_base) {\n-                            let decl = &self.body.local_decls[*local];\n+                            let decl = &self.body.local_decls[local];\n                             if let LocalInfo::StaticRef { def_id, .. } = decl.local_info {\n                                 let span = decl.source_info.span;\n                                 self.check_static(def_id, span);\n@@ -452,7 +452,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {\n-                let base_ty = Place::ty_from(*place_local, proj_base, *self.body, self.tcx).ty;\n+                let base_ty = Place::ty_from(place_local, proj_base, *self.body, self.tcx).ty;\n                 match base_ty.ty_adt_def() {\n                     Some(def) if def.is_union() => {\n                         self.check_op(ops::UnionAccess);"}]}