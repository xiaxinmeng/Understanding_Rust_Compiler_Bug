{"sha": "62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZmI3ZmM1NGE2YjdjY2EyYzY5MGNhODRlZTU0ZTRhODZhYjViYTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-17T22:54:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:20Z"}, "message": "Switch logic to Span instead of HashMap", "tree": {"sha": "91e986d2342e72abcaee25205fb78e62d633b0f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e986d2342e72abcaee25205fb78e62d633b0f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "html_url": "https://github.com/rust-lang/rust/commit/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "url": "https://api.github.com/repos/rust-lang/rust/commits/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "html_url": "https://github.com/rust-lang/rust/commit/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a"}], "stats": {"total": 117, "additions": 54, "deletions": 63}, "files": [{"sha": "fe2edcad25c20d84bdea3f08805e483231f8f4e5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -521,17 +521,22 @@ impl<'a, I: IntoIterator<Item=&'a ast::NestedMetaItem>> NestedAttributesExt for\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug, Default)]\n pub struct Attributes {\n     pub doc_strings: Vec<String>,\n-    pub other_attrs: Vec<ast::Attribute>\n+    pub other_attrs: Vec<ast::Attribute>,\n+    pub span: Option<syntax_pos::Span>,\n }\n \n impl Attributes {\n     pub fn from_ast(attrs: &[ast::Attribute]) -> Attributes {\n         let mut doc_strings = vec![];\n+        let mut sp = None;\n         let other_attrs = attrs.iter().filter_map(|attr| {\n             attr.with_desugared_doc(|attr| {\n                 if let Some(value) = attr.value_str() {\n                     if attr.check_name(\"doc\") {\n                         doc_strings.push(value.to_string());\n+                        if sp.is_none() {\n+                            sp = Some(attr.span);\n+                        }\n                         return None;\n                     }\n                 }\n@@ -541,7 +546,8 @@ impl Attributes {\n         }).collect();\n         Attributes {\n             doc_strings: doc_strings,\n-            other_attrs: other_attrs\n+            other_attrs: other_attrs,\n+            span: sp,\n         }\n     }\n "}, {"sha": "e8ff8930bdd7d32eb16557c3bbfce9822eccca34", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -429,12 +429,12 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n }\n \n-pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n+pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line: usize) {\n     extern fn block(_ob: *mut hoedown_buffer,\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n                     data: *const hoedown_renderer_data,\n-                    _: libc::size_t) {\n+                    line: libc::size_t) {\n         unsafe {\n             if text.is_null() { return }\n             let block_info = if lang.is_null() {\n@@ -453,11 +453,12 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                 stripped_filtered_line(l).unwrap_or(l)\n             });\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n+            let line = tests.get_line() + line;\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness,\n                            block_info.compile_fail, block_info.error_codes,\n-                           block_info.original);\n+                           line);\n         }\n     }\n \n@@ -478,6 +479,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n         }\n     }\n \n+    tests.set_line(start_line);\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);"}, {"sha": "49497957be980734fe03a7e29713a4022b4dd319", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -154,8 +154,9 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n-                                       true, opts, maybe_sysroot, &input_str, \"input\".to_string());\n-    find_testable_code(&input_str, &mut collector);\n+                                       true, opts, maybe_sysroot, \"input\".to_string(),\n+                                       None);\n+    find_testable_code(&input_str, &mut collector, 0);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);\n     0"}, {"sha": "d5451d6a6c37d4e4a4877324da3c871aa93ba1e2", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 25, "deletions": 46, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n-use std::fs::File;\n use std::io::prelude::*;\n use std::io;\n use std::path::PathBuf;\n@@ -39,6 +37,7 @@ use rustc_trans::back::link;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax_pos::{BytePos, DUMMY_SP, Pos};\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -81,7 +80,7 @@ pub fn run(input: &str,\n     let _ignore = dep_graph.in_ignore();\n     let cstore = Rc::new(CStore::new(&dep_graph));\n     let mut sess = session::build_session_(\n-        sessopts, &dep_graph, Some(input_path.clone()), handler, codemap, cstore.clone(),\n+        sessopts, &dep_graph, Some(input_path.clone()), handler, codemap.clone(), cstore.clone(),\n     );\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     sess.parse_sess.config =\n@@ -99,23 +98,15 @@ pub fn run(input: &str,\n     });\n     let opts = scrape_test_config(hir_forest.krate());\n     let filename = input_path.to_str().unwrap_or(\"\").to_owned();\n-    let mut f = match File::open(input_path) {\n-        Ok(f) => f,\n-        _ => return 1,\n-    };\n-    let mut file_content = String::new();\n-    if let Err(_) = f.read_to_string(&mut file_content) {\n-        return 1;\n-    }\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n                                        externs,\n                                        false,\n                                        opts,\n                                        maybe_sysroot,\n-                                       &file_content,\n-                                       filename);\n+                                       filename,\n+                                       Some(codemap));\n \n     {\n         let dep_graph = DepGraph::new(false);\n@@ -399,27 +390,15 @@ pub struct Collector {\n     cratename: String,\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n-    code_blocks: HashMap<String, Vec<u32>>,\n     filename: String,\n+    start_line: usize,\n+    codemap: Option<Rc<CodeMap>>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n-               file_content: &str, filename: String) -> Collector {\n-        let mut line_number = 1;\n-        let mut block_lines = HashMap::new();\n-        for (pos, block) in file_content.split(\"```\").enumerate() {\n-            if (pos & 1) != 0 {\n-                let key = format!(\"{}\", block.replace(\"/// \", \"\").replace(\"//!\", \"\"));\n-                if !block_lines.contains_key(&key) {\n-                    block_lines.insert(key.clone(), Vec::new());\n-                }\n-                block_lines.get_mut(&key).unwrap().push(line_number);\n-            }\n-            line_number += block.lines().count() as u32 - 1;\n-        }\n-\n+               filename: String, codemap: Option<Rc<CodeMap>>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -432,30 +411,17 @@ impl Collector {\n             cratename: cratename,\n             opts: opts,\n             maybe_sysroot: maybe_sysroot,\n-            code_blocks: block_lines,\n             filename: filename,\n+            start_line: 0,\n+            codemap: codemap,\n         }\n     }\n \n-    fn get_line_from_key(&mut self, key: &String) -> u32 {\n-        let (line, need_removal) = if let Some(l) = self.code_blocks.get_mut(key) {\n-            let need_removal = l.len() > 1;\n-            (l.pop().unwrap_or(1), need_removal)\n-        } else {\n-            return 1;\n-        };\n-        if need_removal {\n-            self.code_blocks.remove(key);\n-        }\n-        line\n-    }\n-\n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    original: String) {\n-        let line_number = self.get_line_from_key(&format!(\"{}\\n{}\\n\", original, test));\n-        let name = format!(\"{} - line {}\", self.filename, line_number);\n+                    line: usize) {\n+        let name = format!(\"{} - line {}\", self.filename, line);\n         self.cnt += 1;\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n@@ -499,6 +465,18 @@ impl Collector {\n         });\n     }\n \n+    pub fn get_line(&self) -> usize {\n+        if let Some(ref codemap) = self.codemap{\n+            codemap.lookup_char_pos(BytePos(self.start_line as u32)).line - 1\n+        } else {\n+            self.start_line\n+        }\n+    }\n+\n+    pub fn set_line(&mut self, start_line: usize) {\n+        self.start_line = start_line;\n+    }\n+\n     pub fn register_header(&mut self, name: &str, level: u32) {\n         if self.use_headers && level == 1 {\n             // we use these headings as test names, so it's good if\n@@ -539,7 +517,8 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         attrs.unindent_doc_comments();\n         if let Some(doc) = attrs.doc_value() {\n             self.collector.cnt = 0;\n-            markdown::find_testable_code(doc, self.collector);\n+            markdown::find_testable_code(doc, self.collector,\n+                                         attrs.span.unwrap_or(DUMMY_SP).lo.to_usize());\n         }\n \n         nested(self);"}, {"sha": "455a6a0fb32e21ae736fd81a50579dabdb09f976", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -280,9 +280,9 @@ impl Attribute {\n                 Symbol::intern(\"doc\"),\n                 Symbol::intern(&strip_doc_comment_decoration(&comment.as_str())));\n             if self.style == ast::AttrStyle::Outer {\n-                f(&mk_attr_outer(self.id, meta))\n+                f(&mk_attr_outer(self.span, self.id, meta))\n             } else {\n-                f(&mk_attr_inner(self.id, meta))\n+                f(&mk_attr_inner(self.span, self.id, meta))\n             }\n         } else {\n             f(self)\n@@ -339,8 +339,8 @@ pub fn mk_attr_id() -> AttrId {\n }\n \n /// Returns an inner attribute with the given value.\n-pub fn mk_attr_inner(id: AttrId, item: MetaItem) -> Attribute {\n-    mk_spanned_attr_inner(DUMMY_SP, id, item)\n+pub fn mk_attr_inner(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n+    mk_spanned_attr_inner(span, id, item)\n }\n \n /// Returns an innter attribute with the given value and span.\n@@ -356,8 +356,8 @@ pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: MetaItem) -> Attribute\n \n \n /// Returns an outer attribute with the given value.\n-pub fn mk_attr_outer(id: AttrId, item: MetaItem) -> Attribute {\n-    mk_spanned_attr_outer(DUMMY_SP, id, item)\n+pub fn mk_attr_outer(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n+    mk_spanned_attr_outer(span, id, item)\n }\n \n /// Returns an outer attribute with the given value and span."}, {"sha": "9d7f57b2af934b42be9ef7d0dbd0a20a1bc21efd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -27,6 +27,7 @@ use print::pp::Breaks::{Consistent, Inconsistent};\n use ptr::P;\n use std_inject;\n use symbol::{Symbol, keywords};\n+use syntax_pos::DUMMY_SP;\n use tokenstream::{self, TokenTree};\n \n use rustc_i128::i128;\n@@ -118,12 +119,12 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n         // #![feature(prelude_import)]\n         let prelude_import_meta = attr::mk_list_word_item(Symbol::intern(\"prelude_import\"));\n         let list = attr::mk_list_item(Symbol::intern(\"feature\"), vec![prelude_import_meta]);\n-        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(), list);\n+        let fake_attr = attr::mk_attr_inner(DUMMY_SP, attr::mk_attr_id(), list);\n         s.print_attribute(&fake_attr)?;\n \n         // #![no_std]\n         let no_std_meta = attr::mk_word_item(Symbol::intern(\"no_std\"));\n-        let fake_attr = attr::mk_attr_inner(attr::mk_attr_id(), no_std_meta);\n+        let fake_attr = attr::mk_attr_inner(DUMMY_SP, attr::mk_attr_id(), no_std_meta);\n         s.print_attribute(&fake_attr)?;\n     }\n "}, {"sha": "4a2dfaf61247cb1648e5ea6ce0a3ffb049556421", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -56,7 +56,8 @@ pub fn maybe_inject_crates_ref(sess: &ParseSess,\n     let crate_name = Symbol::intern(&alt_std_name.unwrap_or(name.to_string()));\n \n     krate.module.items.insert(0, P(ast::Item {\n-        attrs: vec![attr::mk_attr_outer(attr::mk_attr_id(),\n+        attrs: vec![attr::mk_attr_outer(DUMMY_SP,\n+                                        attr::mk_attr_id(),\n                                         attr::mk_word_item(Symbol::intern(\"macro_use\")))],\n         vis: ast::Visibility::Inherited,\n         node: ast::ItemKind::ExternCrate(Some(crate_name)),"}, {"sha": "dd2756cd2b22c95aa42b715c59a095488ab4bf41", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=62fb7fc54a6b7cca2c690ca84ee54e4a86ab5ba4", "patch": "@@ -195,7 +195,8 @@ impl fold::Folder for EntryPointCleaner {\n                     let dead_code_str = Symbol::intern(\"dead_code\");\n                     let word_vec = vec![attr::mk_list_word_item(dead_code_str)];\n                     let allow_dead_code_item = attr::mk_list_item(allow_str, word_vec);\n-                    let allow_dead_code = attr::mk_attr_outer(attr::mk_attr_id(),\n+                    let allow_dead_code = attr::mk_attr_outer(DUMMY_SP,\n+                                                              attr::mk_attr_id(),\n                                                               allow_dead_code_item);\n \n                     ast::Item {"}]}