{"sha": "fa6a4f7d374f2773a58eb10bf0cfe8e00d359039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmE0ZjdkMzc0ZjI3NzNhNThlYjEwYmYwY2ZlOGUwMGQzNTkwMzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-06T07:40:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-06T08:54:43Z"}, "message": "avoid unnecessary intermediate reference and improve safety comments", "tree": {"sha": "d5e1524232f2eaa1d367660fbad87bdfa5ece74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5e1524232f2eaa1d367660fbad87bdfa5ece74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6a4f7d374f2773a58eb10bf0cfe8e00d359039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6a4f7d374f2773a58eb10bf0cfe8e00d359039", "html_url": "https://github.com/rust-lang/rust/commit/fa6a4f7d374f2773a58eb10bf0cfe8e00d359039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6a4f7d374f2773a58eb10bf0cfe8e00d359039/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69669cbdb2a98bcf8c49062b9606e14ce51ecf71", "url": "https://api.github.com/repos/rust-lang/rust/commits/69669cbdb2a98bcf8c49062b9606e14ce51ecf71", "html_url": "https://github.com/rust-lang/rust/commit/69669cbdb2a98bcf8c49062b9606e14ce51ecf71"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "ff9b1553bf2fc0014b0594e8460ec99817257895", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa6a4f7d374f2773a58eb10bf0cfe8e00d359039/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6a4f7d374f2773a58eb10bf0cfe8e00d359039/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=fa6a4f7d374f2773a58eb10bf0cfe8e00d359039", "patch": "@@ -983,10 +983,12 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n+        // SAFETY: The internal `IterMut` safety invariant is established because the\n+        // `ring` we create is a dereferencable slice for lifetime '_.\n         IterMut {\n             tail: self.tail,\n             head: self.head,\n-            ring: unsafe { self.buffer_as_mut_slice() },\n+            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n             phantom: PhantomData,\n         }\n     }\n@@ -1176,11 +1178,13 @@ impl<T> VecDeque<T> {\n         R: RangeBounds<usize>,\n     {\n         let (tail, head) = self.range_tail_head(range);\n+\n+        // SAFETY: The internal `IterMut` safety invariant is established because the\n+        // `ring` we create is a dereferencable slice for lifetime '_.\n         IterMut {\n             tail,\n             head,\n-            // The shared reference we have in &mut self is maintained in the '_ of IterMut.\n-            ring: unsafe { self.buffer_as_mut_slice() },\n+            ring: ptr::slice_from_raw_parts_mut(self.ptr(), self.cap()),\n             phantom: PhantomData,\n         }\n     }\n@@ -2688,6 +2692,7 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// [`iter_mut`]: VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n+    // Internal safety invariant: the entire slice is dereferencable.\n     ring: *mut [T],\n     tail: usize,\n     head: usize,\n@@ -2706,7 +2711,7 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // We also ensure everything is dereferencable and in-bounds.\n+        // The `IterMut` invariant also ensures everything is dereferencable.\n         let (front, back) = unsafe { (&*front, &*back) };\n         f.debug_tuple(\"IterMut\").field(&front).field(&back).finish()\n     }\n@@ -2742,7 +2747,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // We also ensure everything is dereferencable and in-bounds.\n+        // The `IterMut` invariant also ensures everything is dereferencable.\n         let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n@@ -2785,7 +2790,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // We also ensure everything is dereferencable and in-bounds.\n+        // The `IterMut` invariant also ensures everything is dereferencable.\n         let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = back.iter_mut().rfold(accum, &mut f);\n         front.iter_mut().rfold(accum, &mut f)"}]}