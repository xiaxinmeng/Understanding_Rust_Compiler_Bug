{"sha": "c973732a23da75b09dd6d35ce6f951c8bcd6cb01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NzM3MzJhMjNkYTc1YjA5ZGQ2ZDM1Y2U2Zjk1MWM4YmNkNmNiMDE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-06T20:17:35Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-06T20:25:34Z"}, "message": "Enabling pingpong benchmark.", "tree": {"sha": "33c679567201ebb8cc128b3d35d1089c7ff96163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c679567201ebb8cc128b3d35d1089c7ff96163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c973732a23da75b09dd6d35ce6f951c8bcd6cb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c973732a23da75b09dd6d35ce6f951c8bcd6cb01", "html_url": "https://github.com/rust-lang/rust/commit/c973732a23da75b09dd6d35ce6f951c8bcd6cb01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c973732a23da75b09dd6d35ce6f951c8bcd6cb01/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517ad983f9f5ac7f805dd15cf6c6a156e02e3ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/517ad983f9f5ac7f805dd15cf6c6a156e02e3ec8", "html_url": "https://github.com/rust-lang/rust/commit/517ad983f9f5ac7f805dd15cf6c6a156e02e3ec8"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "2a9a20fc07d18a056a863dccea7c118905657bb6", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c973732a23da75b09dd6d35ce6f951c8bcd6cb01/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c973732a23da75b09dd6d35ce6f951c8bcd6cb01/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=c973732a23da75b09dd6d35ce6f951c8bcd6cb01", "patch": "@@ -1,6 +1,5 @@\n // Compare bounded and unbounded protocol performance.\n \n-// xfail-test\n // xfail-pretty\n \n use std;\n@@ -33,31 +32,35 @@ proto! pingpong_unbounded {\n }\n \n // This stuff should go in libcore::pipes\n-macro_rules! move {\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n+macro_rules! move_it {\n+    { $x:expr } => { let t <- *ptr::addr_of($x); t }\n }\n \n macro_rules! follow {\n     { \n         $($message:path($($x: ident),+) -> $next:ident $e:expr)+\n     } => (\n-        |m| alt move(m) {\n-          $(some($message($($x,)* next)) {\n-            let $next = move!{next};\n-            $e })+\n-          _ { fail }\n+        |m| alt move m {\n+            $(some($message($($x,)* next)) => {\n+                // FIXME (#2329) use regular move here once move out of\n+                // enums is supported.\n+                let $next = unsafe { move_it!(next) };\n+                $e })+\n+                _ => { fail }\n         }\n     );\n \n     { \n         $($message:path -> $next:ident $e:expr)+\n     } => (\n-        |m| alt move(m) {\n-            $(some($message(next)) {\n-                let $next = move!{next};\n+        |m| alt move m {\n+            $(some($message(next)) => {\n+                // FIXME (#2329) use regular move here once move out of\n+                // enums is supported.\n+                let $next = unsafe { move_it!(next) };\n                 $e })+\n-                _ { fail }\n-        } \n+                _ => { fail }\n+        }\n     )\n }\n \n@@ -66,8 +69,6 @@ fn switch<T: send, Tb: send, U>(+endp: pipes::recv_packet_buffered<T, Tb>,\n     f(pipes::try_recv(endp))\n }\n \n-fn move<T>(-x: T) -> T { x }\n-\n // Here's the benchmark\n \n fn bounded(count: uint) {\n@@ -132,7 +133,11 @@ fn timeit(f: fn()) -> float {\n }\n \n fn main() {\n-    let count = 1000000;\n+    let count = if os::getenv(~\"RUST_BENCH\").is_some() {\n+        250000\n+    } else {\n+        100\n+    };\n     let bounded = do timeit { bounded(count) };\n     let unbounded = do timeit { unbounded(count) };\n "}]}