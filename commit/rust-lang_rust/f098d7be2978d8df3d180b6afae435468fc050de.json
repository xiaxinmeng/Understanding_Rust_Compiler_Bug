{"sha": "f098d7be2978d8df3d180b6afae435468fc050de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOThkN2JlMjk3OGQ4ZGYzZDE4MGI2YWZhZTQzNTQ2OGZjMDUwZGU=", "commit": {"author": {"name": "Hunter Praska", "email": "hunter@wiggin-labs.com", "date": "2017-06-08T03:52:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-27T21:56:40Z"}, "message": "Add tests for Option and Result Try impl", "tree": {"sha": "414346ee515ea2bd948e52ffc38b6f17676fe479", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414346ee515ea2bd948e52ffc38b6f17676fe479"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f098d7be2978d8df3d180b6afae435468fc050de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f098d7be2978d8df3d180b6afae435468fc050de", "html_url": "https://github.com/rust-lang/rust/commit/f098d7be2978d8df3d180b6afae435468fc050de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f098d7be2978d8df3d180b6afae435468fc050de/comments", "author": {"login": "huntiep", "id": 28681177, "node_id": "MDQ6VXNlcjI4NjgxMTc3", "avatar_url": "https://avatars.githubusercontent.com/u/28681177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huntiep", "html_url": "https://github.com/huntiep", "followers_url": "https://api.github.com/users/huntiep/followers", "following_url": "https://api.github.com/users/huntiep/following{/other_user}", "gists_url": "https://api.github.com/users/huntiep/gists{/gist_id}", "starred_url": "https://api.github.com/users/huntiep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huntiep/subscriptions", "organizations_url": "https://api.github.com/users/huntiep/orgs", "repos_url": "https://api.github.com/users/huntiep/repos", "events_url": "https://api.github.com/users/huntiep/events{/privacy}", "received_events_url": "https://api.github.com/users/huntiep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd104fd4ffaf2a72799b5d49fcea3931e6a9e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd104fd4ffaf2a72799b5d49fcea3931e6a9e15", "html_url": "https://github.com/rust-lang/rust/commit/2bd104fd4ffaf2a72799b5d49fcea3931e6a9e15"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "938bc3556654e5adfdd4f695e9e3b5088e769f7f", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f098d7be2978d8df3d180b6afae435468fc050de/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f098d7be2978d8df3d180b6afae435468fc050de/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f098d7be2978d8df3d180b6afae435468fc050de", "patch": "@@ -38,6 +38,7 @@\n #![feature(test)]\n #![feature(trusted_len)]\n #![feature(try_from)]\n+#![feature(try_trait)]\n #![feature(unique)]\n \n #![feature(const_atomic_bool_new)]"}, {"sha": "00700b36b698231ef40ed2c6b1f406e9136f5014", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f098d7be2978d8df3d180b6afae435468fc050de/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f098d7be2978d8df3d180b6afae435468fc050de/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=f098d7be2978d8df3d180b6afae435468fc050de", "patch": "@@ -270,3 +270,30 @@ fn test_cloned() {\n     assert_eq!(opt_ref_ref.clone().cloned(), Some(&val));\n     assert_eq!(opt_ref_ref.cloned().cloned(), Some(1));\n }\n+\n+#[test]\n+fn test_try() {\n+    fn try_option_some() -> Option<u8> {\n+        let val = Some(1)?;\n+        Some(val)\n+    }\n+    assert_eq!(try_option_some(), Some(1));\n+\n+    fn try_option_none() -> Option<u8> {\n+        let val = None?;\n+        Some(val)\n+    }\n+    assert_eq!(try_option_none(), None);\n+\n+    fn try_option_ok() -> Result<u8, Missing> {\n+        let val = Ok(1)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_option_ok(), Ok(1));\n+\n+    fn try_option_err() -> Result<u8, Missing> {\n+        let val = Err(Missing)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_option_err(), Err(Missing));\n+}"}, {"sha": "37264980dc7035bbb7b46bdb5a22ed471fa6a660", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f098d7be2978d8df3d180b6afae435468fc050de/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f098d7be2978d8df3d180b6afae435468fc050de/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=f098d7be2978d8df3d180b6afae435468fc050de", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::option::*;\n+\n fn op1() -> Result<isize, &'static str> { Ok(666) }\n fn op2() -> Result<isize, &'static str> { Err(\"sadface\") }\n \n@@ -202,3 +204,30 @@ pub fn test_unwrap_or_default() {\n     assert_eq!(op1().unwrap_or_default(), 666);\n     assert_eq!(op2().unwrap_or_default(), 0);\n }\n+\n+#[test]\n+fn test_try() {\n+    fn try_result_some() -> Option<u8> {\n+        let val = Ok(1)?;\n+        Some(val)\n+    }\n+    assert_eq!(try_result_some(), Some(1));\n+\n+    fn try_result_none() -> Option<u8> {\n+        let val = Err(Missing)?;\n+        Some(val)\n+    }\n+    assert_eq!(try_result_none(), None);\n+\n+    fn try_result_ok() -> Result<u8, u8> {\n+        let val = Ok(1)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_result_ok(), Ok(1));\n+\n+    fn try_result_err() -> Result<u8, u8> {\n+        let val = Err(1)?;\n+        Ok(val)\n+    }\n+    assert_eq!(try_result_err(), Err(1));\n+}"}]}