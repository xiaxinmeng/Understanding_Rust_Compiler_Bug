{"sha": "b4c96a9199f13c5c1c2afa6258d2b9206c151d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Yzk2YTkxOTlmMTNjNWMxYzJhZmE2MjU4ZDJiOTIwNmMxNTFkOWY=", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2020-01-28T21:28:13Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2020-01-28T21:28:13Z"}, "message": "Refine [Arc/Rc]::from_raw() docs", "tree": {"sha": "48d63f3d6135c2f875dcbe8536b5b9fead4b6753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d63f3d6135c2f875dcbe8536b5b9fead4b6753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f", "html_url": "https://github.com/rust-lang/rust/commit/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "becebf3106407b892f25807473e23d6e8f116a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/becebf3106407b892f25807473e23d6e8f116a1e", "html_url": "https://github.com/rust-lang/rust/commit/becebf3106407b892f25807473e23d6e8f116a1e"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "1d2222adb9da45907ce6d591fd12b53566cb929b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b4c96a9199f13c5c1c2afa6258d2b9206c151d9f", "patch": "@@ -570,16 +570,24 @@ impl<T: ?Sized> Rc<T> {\n         ptr\n     }\n \n-    /// Constructs an `Rc` from a raw pointer.\n+    /// Constructs an `Rc<T>` from a raw pointer.\n     ///\n-    /// The raw pointer must have been previously returned by a call to a\n-    /// [`Rc::into_raw`][into_raw] using the same `T`.\n+    /// The raw pointer must have been previously returned by a call to\n+    /// [`Rc<U>::into_raw`][into_raw] where `U` must have the same size\n+    /// and alignment as `T`. This is trivially true if `U` is `T`.\n+    /// Note that if `U` is not `T` but has the same size and alignment, this is\n+    /// basically like transmuting references of different types. See\n+    /// [`mem::transmute`][transmute] for more information on what\n+    /// restrictions apply in this case.\n+    ///\n+    /// The user of `from_raw` has to make sure a specific value of `T` is only\n+    /// dropped once.\n     ///\n     /// This function is unsafe because improper use may lead to memory unsafety,\n-    /// even if `T` is never accessed. For example, a double-free may occur if the function is\n-    /// called twice on the same raw pointer.\n+    /// even if the returned `Rc<T>` is never accessed.\n     ///\n     /// [into_raw]: struct.Rc.html#method.into_raw\n+    /// [transmute]: ../../std/mem/fn.transmute.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "f9c8da58c75c789399de0e6af7de04c32571bc68", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c96a9199f13c5c1c2afa6258d2b9206c151d9f/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b4c96a9199f13c5c1c2afa6258d2b9206c151d9f", "patch": "@@ -550,16 +550,24 @@ impl<T: ?Sized> Arc<T> {\n         ptr\n     }\n \n-    /// Constructs an `Arc` from a raw pointer.\n+    /// Constructs an `Arc<T>` from a raw pointer.\n     ///\n-    /// The raw pointer must have been previously returned by a call to a\n-    /// [`Arc::into_raw`][into_raw], using the same `T`.\n+    /// The raw pointer must have been previously returned by a call to\n+    /// [`Arc<U>::into_raw`][into_raw] where `U` must have the same size and\n+    /// alignment as `T`. This is trivially true if `U` is `T`.\n+    /// Note that if `U` is not `T` but has the same size and alignment, this is\n+    /// basically like transmuting references of different types. See\n+    /// [`mem::transmute`][transmute] for more information on what\n+    /// restrictions apply in this case.\n+    ///\n+    /// The user of `from_raw` has to make sure a specific value of `T` is only\n+    /// dropped once.\n     ///\n     /// This function is unsafe because improper use may lead to memory unsafety,\n-    /// even if `T` is never accessed. For example, a double-free may occur if the function is\n-    /// called twice on the same raw pointer.\n+    /// even if the returned `Arc<T>` is never accessed.\n     ///\n     /// [into_raw]: struct.Arc.html#method.into_raw\n+    /// [transmute]: ../../std/mem/fn.transmute.html\n     ///\n     /// # Examples\n     ///"}]}