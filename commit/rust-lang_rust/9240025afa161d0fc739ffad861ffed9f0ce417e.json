{"sha": "9240025afa161d0fc739ffad861ffed9f0ce417e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNDAwMjVhZmExNjFkMGZjNzM5ZmZhZDg2MWZmZWQ5ZjBjZTQxN2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T15:04:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T20:54:20Z"}, "message": "introduce `any_unifications` flag\n\nResetting unifications is expensive. Only do if there is something to\nreset.", "tree": {"sha": "65ab7cfae68714a838d1396633250f1f37819058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65ab7cfae68714a838d1396633250f1f37819058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9240025afa161d0fc739ffad861ffed9f0ce417e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9240025afa161d0fc739ffad861ffed9f0ce417e", "html_url": "https://github.com/rust-lang/rust/commit/9240025afa161d0fc739ffad861ffed9f0ce417e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9240025afa161d0fc739ffad861ffed9f0ce417e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/908c1f2f0cbd80d62b148ef88859655c2f28bc8f", "html_url": "https://github.com/rust-lang/rust/commit/908c1f2f0cbd80d62b148ef88859655c2f28bc8f"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "296808cea2bd733fb58b3f171937cc0c9f98652e", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9240025afa161d0fc739ffad861ffed9f0ce417e/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9240025afa161d0fc739ffad861ffed9f0ce417e/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=9240025afa161d0fc739ffad861ffed9f0ce417e", "patch": "@@ -69,6 +69,10 @@ pub struct RegionConstraintCollector<'tcx> {\n     /// would wind up with a fresh stream of region variables that\n     /// have been equated but appear distinct.\n     unification_table: ut::UnificationTable<ut::InPlace<ty::RegionVid>>,\n+\n+    /// a flag set to true when we perform any unifications; this is used\n+    /// to micro-optimize `take_and_reset_data`\n+    any_unifications: bool,\n }\n \n pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;\n@@ -234,6 +238,7 @@ pub struct RegionVariableInfo {\n pub struct RegionSnapshot {\n     length: usize,\n     region_snapshot: ut::Snapshot<ut::InPlace<ty::RegionVid>>,\n+    any_unifications: bool,\n }\n \n /// When working with skolemized regions, we often wish to find all of\n@@ -280,6 +285,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             bound_count: 0,\n             undo_log: Vec::new(),\n             unification_table: ut::UnificationTable::new(),\n+            any_unifications: false,\n         }\n     }\n \n@@ -325,6 +331,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             bound_count: _,\n             undo_log: _,\n             unification_table,\n+            any_unifications,\n         } = self;\n \n         // Clear the tables of (lubs, glbs), so that we will create\n@@ -338,7 +345,10 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         // un-unified\" state. Note that when we unify `a` and `b`, we\n         // also insert `a <= b` and a `b <= a` edges, so the\n         // `RegionConstraintData` contains the relationship here.\n-        unification_table.reset_unifications(|vid| unify_key::RegionVidKey { min_vid: vid });\n+        if *any_unifications {\n+            unification_table.reset_unifications(|vid| unify_key::RegionVidKey { min_vid: vid });\n+            *any_unifications = false;\n+        }\n \n         mem::replace(data, RegionConstraintData::default())\n     }\n@@ -358,6 +368,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         RegionSnapshot {\n             length,\n             region_snapshot: self.unification_table.snapshot(),\n+            any_unifications: self.any_unifications,\n         }\n     }\n \n@@ -385,6 +396,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         let c = self.undo_log.pop().unwrap();\n         assert!(c == OpenSnapshot);\n         self.unification_table.rollback_to(snapshot.region_snapshot);\n+        self.any_unifications = snapshot.any_unifications;\n     }\n \n     fn rollback_undo_entry(&mut self, undo_entry: UndoLogEntry<'tcx>) {\n@@ -623,6 +635,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n             if let (ty::ReVar(sub), ty::ReVar(sup)) = (*sub, *sup) {\n                 self.unification_table.union(sub, sup);\n+                self.any_unifications = true;\n             }\n         }\n     }"}]}