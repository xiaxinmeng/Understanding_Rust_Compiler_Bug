{"sha": "a7b06e81fc008750de32b9a57e292bb341d0b842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjA2ZTgxZmMwMDg3NTBkZTMyYjlhNTdlMjkyYmIzNDFkMGI4NDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-23T16:29:47Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-23T16:29:47Z"}, "message": "Fix two type mismatch bugs", "tree": {"sha": "d149c24b67e158fc4915a9ad4fa15c452adbf7c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d149c24b67e158fc4915a9ad4fa15c452adbf7c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b06e81fc008750de32b9a57e292bb341d0b842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b06e81fc008750de32b9a57e292bb341d0b842", "html_url": "https://github.com/rust-lang/rust/commit/a7b06e81fc008750de32b9a57e292bb341d0b842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b06e81fc008750de32b9a57e292bb341d0b842/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42be7975ff50d38b577013fb367195829a92c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42be7975ff50d38b577013fb367195829a92c11", "html_url": "https://github.com/rust-lang/rust/commit/c42be7975ff50d38b577013fb367195829a92c11"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "42d1a53a2bb694ee1b8ce80ed89240434e473766", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7b06e81fc008750de32b9a57e292bb341d0b842/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b06e81fc008750de32b9a57e292bb341d0b842/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=a7b06e81fc008750de32b9a57e292bb341d0b842", "patch": "@@ -250,6 +250,11 @@ fn simd_reduce_bool<'tcx>(\n         let lane = fx.bcx.ins().band_imm(lane, 1); // mask to boolean\n         res_val = f(fx, res_val, lane);\n     }\n+    let res_val = if fx.bcx.func.dfg.value_type(res_val) != types::I8 {\n+        fx.bcx.ins().ireduce(types::I8, res_val)\n+    } else {\n+        res_val\n+    };\n     let res = CValue::by_val(res_val, ret.layout());\n     ret.write_cvalue(fx, res);\n }\n@@ -284,7 +289,11 @@ macro simd_cmp {\n         if let Some(vector_ty) = vector_ty {\n             let x = $x.load_scalar($fx);\n             let y = $y.load_scalar($fx);\n-            let val = $fx.bcx.ins().icmp(IntCC::$cc, x, y);\n+            let val = if vector_ty.lane_type().is_float() {\n+                $fx.bcx.ins().fcmp(FloatCC::$cc_f, x, y)\n+            } else {\n+                $fx.bcx.ins().icmp(IntCC::$cc, x, y)\n+            };\n \n             // HACK This depends on the fact that icmp for vectors represents bools as 0 and !0, not 0 and 1.\n             let val = $fx.bcx.ins().raw_bitcast(vector_ty, val);"}]}