{"sha": "c630beaed7ed822bd576337d9e4afa20e781b994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzBiZWFlZDdlZDgyMmJkNTc2MzM3ZDllNGFmYTIwZTc4MWI5OTQ=", "commit": {"author": {"name": "Cengiz Can", "email": "cengizIO@users.noreply.github.com", "date": "2016-08-04T01:33:50Z"}, "committer": {"name": "Cengiz Can", "email": "cengizIO@users.noreply.github.com", "date": "2016-08-04T01:33:50Z"}, "message": "Be more explicit about duck typing", "tree": {"sha": "44492ebfe0b0e48574351f5da1ec176d5a612f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44492ebfe0b0e48574351f5da1ec176d5a612f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c630beaed7ed822bd576337d9e4afa20e781b994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c630beaed7ed822bd576337d9e4afa20e781b994", "html_url": "https://github.com/rust-lang/rust/commit/c630beaed7ed822bd576337d9e4afa20e781b994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c630beaed7ed822bd576337d9e4afa20e781b994/comments", "author": null, "committer": null, "parents": [{"sha": "800aa92aa3da58b82e682947024c7868650e05bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/800aa92aa3da58b82e682947024c7868650e05bc", "html_url": "https://github.com/rust-lang/rust/commit/800aa92aa3da58b82e682947024c7868650e05bc"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "c916ad930ff105988b7be772c07b45a595f3aa25", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c630beaed7ed822bd576337d9e4afa20e781b994/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c630beaed7ed822bd576337d9e4afa20e781b994/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c630beaed7ed822bd576337d9e4afa20e781b994", "patch": "@@ -229,21 +229,23 @@ macro_rules! try {\n     })\n }\n \n-/// Calls `write_fmt` function on a writer\n+/// Write formatted data into a buffer\n ///\n-/// This macro takes an implementor of [`std::fmt::Write`][fmt_write] or\n-/// [`std::io::Write`][io_write] trait, a format string, and a list of arguments.\n+/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n+/// of arguments to format.\n ///\n-/// Implementors of the `Write` trait are sometimes called 'writers'.\n+/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n+/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n ///\n-/// These arguments will be formatted according to the specified format string and\n-/// the resulting string will be passed to the writer.\n-///\n-/// Return value is either [`Result`][enum_result] or [`io::Result`][type_result] depending on\n-/// the writer.\n+/// Passed arguments will be formatted according to the specified format string and the resulting\n+/// string will be passed to the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n+/// Return value is completely dependent on the 'write_fmt' method.\n+///\n+/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+///\n /// [fmt]: ../std/fmt/index.html\n /// [fmt_write]: ../std/fmt/trait.Write.html\n /// [io_write]: ../std/io/trait.Write.html\n@@ -267,24 +269,26 @@ macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n }\n \n-/// Calls `write_fmt` function on a writer, with appending a newline.\n+/// Write formatted data into a buffer, with appending a newline.\n ///\n-/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`)\n-/// alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n+/// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n+/// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro takes an implementor of [`std::fmt::Write`][fmt_write] or\n-/// [`std::io::Write`][io_write] trait, a format string, and a list of arguments.\n+/// This macro accepts any value with `write_fmt` method as a writer, a format string, and a list\n+/// of arguments to format.\n ///\n-/// Implementors of the `Write` trait are sometimes called 'writers'.\n+/// `write_fmt` method usually comes from an implementation of [`std::fmt::Write`][fmt_write] or\n+/// [`std::io::Write`][io_write] traits. These are sometimes called 'writers'.\n ///\n-/// These arguments will be formatted according to the specified format string and\n-/// the resulting string will be passed to the writer.\n-///\n-/// Return value is either [`Result`][enum_result] or [`io::Result`][type_result] depending on\n-/// the writer.\n+/// Passed arguments will be formatted according to the specified format string and the resulting\n+/// string will be passed to the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n+/// Return value is completely dependent on the 'write_fmt' method.\n+///\n+/// Common return values are: [`Result`][enum_result], [`io::Result`][type_result]\n+///\n /// [fmt]: ../std/fmt/index.html\n /// [fmt_write]: ../std/fmt/trait.Write.html\n /// [io_write]: ../std/io/trait.Write.html"}]}