{"sha": "e8d2f629245f956ec63da04ca672f4cab3a928ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDJmNjI5MjQ1Zjk1NmVjNjNkYTA0Y2E2NzJmNGNhYjNhOTI4ZWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-14T20:10:12Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-15T08:15:37Z"}, "message": "Prefer `Symbol` to `Ident` when there's no sensible `Span`", "tree": {"sha": "a78d310f6613779a71b7cbd72443e943d7007c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78d310f6613779a71b7cbd72443e943d7007c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d2f629245f956ec63da04ca672f4cab3a928ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d2f629245f956ec63da04ca672f4cab3a928ef", "html_url": "https://github.com/rust-lang/rust/commit/e8d2f629245f956ec63da04ca672f4cab3a928ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d2f629245f956ec63da04ca672f4cab3a928ef/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca3766e2e58f462a20922e42c821a37eaf0e13db", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3766e2e58f462a20922e42c821a37eaf0e13db", "html_url": "https://github.com/rust-lang/rust/commit/ca3766e2e58f462a20922e42c821a37eaf0e13db"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "21ea4766d8e527ad134f75441e145a9885773164", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8d2f629245f956ec63da04ca672f4cab3a928ef/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d2f629245f956ec63da04ca672f4cab3a928ef/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e8d2f629245f956ec63da04ca672f4cab3a928ef", "patch": "@@ -618,24 +618,19 @@ impl UnusedImportBraces {\n             }\n \n             // Trigger the lint if the nested item is a non-self single item\n-            let node_ident;\n-            match items[0].0.kind {\n+            let node_name = match items[0].0.kind {\n                 ast::UseTreeKind::Simple(rename, ..) => {\n                     let orig_ident = items[0].0.prefix.segments.last().unwrap().ident;\n                     if orig_ident.name == kw::SelfLower {\n                         return;\n                     }\n-                    node_ident = rename.unwrap_or(orig_ident);\n+                    rename.unwrap_or(orig_ident).name\n                 }\n-                ast::UseTreeKind::Glob => {\n-                    node_ident = ast::Ident::from_str(\"*\");\n-                }\n-                ast::UseTreeKind::Nested(_) => {\n-                    return;\n-                }\n-            }\n+                ast::UseTreeKind::Glob => Symbol::intern(\"*\"),\n+                ast::UseTreeKind::Nested(_) => return,\n+            };\n \n-            let msg = format!(\"braces around {} is unnecessary\", node_ident.name);\n+            let msg = format!(\"braces around {} is unnecessary\", node_name);\n             cx.span_lint(UNUSED_IMPORT_BRACES, item.span, &msg);\n         }\n     }"}, {"sha": "74f68e514712623af4f8eda8d66831f1b706c873", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e8d2f629245f956ec63da04ca672f4cab3a928ef/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d2f629245f956ec63da04ca672f4cab3a928ef/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e8d2f629245f956ec63da04ca672f4cab3a928ef", "patch": "@@ -40,7 +40,7 @@ use rustc_metadata::cstore::CStore;\n use syntax::ext::hygiene::{ExpnId, Transparency, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n use syntax::ext::base::{SyntaxExtension, MacroKind, SpecialDerives};\n-use syntax::symbol::{Symbol, kw, sym};\n+use syntax::symbol::{kw, sym};\n \n use syntax::visit::{self, Visitor};\n use syntax::attr;\n@@ -241,7 +241,7 @@ impl Segment {\n \n     fn names_to_string(segments: &[Segment]) -> String {\n         names_to_string(&segments.iter()\n-                            .map(|seg| seg.ident)\n+                            .map(|seg| seg.ident.name)\n                             .collect::<Vec<_>>())\n     }\n }\n@@ -951,7 +951,7 @@ pub struct Resolver<'a> {\n     struct_constructors: DefIdMap<(Res, ty::Visibility)>,\n \n     /// Features enabled for this crate.\n-    active_features: FxHashSet<Symbol>,\n+    active_features: FxHashSet<Name>,\n \n     /// Stores enum visibilities to properly build a reduced graph\n     /// when visiting the correspondent variants.\n@@ -1018,8 +1018,8 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn resolve_str_path(\n         &mut self,\n         span: Span,\n-        crate_root: Option<Symbol>,\n-        components: &[Symbol],\n+        crate_root: Option<Name>,\n+        components: &[Name],\n         ns: Namespace,\n     ) -> (ast::Path, Res) {\n         let root = if crate_root.is_some() {\n@@ -2555,7 +2555,7 @@ impl<'a> Resolver<'a> {\n     fn add_suggestion_for_rename_of_use(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        name: Symbol,\n+        name: Name,\n         directive: &ImportDirective<'_>,\n         binding_span: Span,\n     ) {\n@@ -2770,38 +2770,37 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-fn names_to_string(idents: &[Ident]) -> String {\n+fn names_to_string(names: &[Name]) -> String {\n     let mut result = String::new();\n-    for (i, ident) in idents.iter()\n-                            .filter(|ident| ident.name != kw::PathRoot)\n+    for (i, name) in names.iter()\n+                            .filter(|name| **name != kw::PathRoot)\n                             .enumerate() {\n         if i > 0 {\n             result.push_str(\"::\");\n         }\n-        result.push_str(&ident.as_str());\n+        result.push_str(&name.as_str());\n     }\n     result\n }\n \n fn path_names_to_string(path: &Path) -> String {\n     names_to_string(&path.segments.iter()\n-                        .map(|seg| seg.ident)\n+                        .map(|seg| seg.ident.name)\n                         .collect::<Vec<_>>())\n }\n \n /// A somewhat inefficient routine to obtain the name of a module.\n fn module_to_string(module: Module<'_>) -> Option<String> {\n     let mut names = Vec::new();\n \n-    fn collect_mod(names: &mut Vec<Ident>, module: Module<'_>) {\n+    fn collect_mod(names: &mut Vec<Name>, module: Module<'_>) {\n         if let ModuleKind::Def(.., name) = module.kind {\n             if let Some(parent) = module.parent {\n-                names.push(Ident::with_dummy_span(name));\n+                names.push(name);\n                 collect_mod(names, parent);\n             }\n         } else {\n-            // danger, shouldn't be ident?\n-            names.push(Ident::from_str(\"<opaque>\"));\n+            names.push(Name::intern(\"<opaque>\"));\n             collect_mod(names, module.parent.unwrap());\n         }\n     }\n@@ -2810,9 +2809,8 @@ fn module_to_string(module: Module<'_>) -> Option<String> {\n     if names.is_empty() {\n         return None;\n     }\n-    Some(names_to_string(&names.into_iter()\n-                        .rev()\n-                        .collect::<Vec<_>>()))\n+    names.reverse();\n+    Some(names_to_string(&names))\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "e77e8290f1faa9f911cdaf0ecb96f43da07818a3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8d2f629245f956ec63da04ca672f4cab3a928ef/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d2f629245f956ec63da04ca672f4cab3a928ef/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e8d2f629245f956ec63da04ca672f4cab3a928ef", "patch": "@@ -1433,15 +1433,17 @@ fn import_path_to_string(names: &[Ident],\n     let global = !names.is_empty() && names[0].name == kw::PathRoot;\n     if let Some(pos) = pos {\n         let names = if global { &names[1..pos + 1] } else { &names[..pos + 1] };\n-        names_to_string(names)\n+        names_to_string(&names.iter().map(|ident| ident.name).collect::<Vec<_>>())\n     } else {\n         let names = if global { &names[1..] } else { names };\n         if names.is_empty() {\n             import_directive_subclass_to_string(subclass)\n         } else {\n-            format!(\"{}::{}\",\n-                    names_to_string(names),\n-                    import_directive_subclass_to_string(subclass))\n+            format!(\n+                \"{}::{}\",\n+                names_to_string(&names.iter().map(|ident| ident.name).collect::<Vec<_>>()),\n+                import_directive_subclass_to_string(subclass),\n+            )\n         }\n     }\n }"}]}