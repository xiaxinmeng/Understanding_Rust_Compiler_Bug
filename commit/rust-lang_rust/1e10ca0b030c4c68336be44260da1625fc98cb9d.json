{"sha": "1e10ca0b030c4c68336be44260da1625fc98cb9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMTBjYTBiMDMwYzRjNjgzMzZiZTQ0MjYwZGExNjI1ZmM5OGNiOWQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-10T06:24:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-10T06:24:04Z"}, "message": "Rollup merge of #48078 - alexcrichton:fix-required-const-and-proc-macro, r=eddyb\n\nDisallow function pointers to #[rustc_args_required_const]\n\nThis commit disallows acquiring a function pointer to functions tagged as\n`#[rustc_args_required_const]`. This is intended to be used as future-proofing\nfor the stdsimd crate to avoid taking a function pointer to any intrinsic which\nhas a hard requirement that one of the arguments is a constant value.\n\nNote that the first commit here isn't related specifically to this feature, but was necessary to get this working in stdsimd!", "tree": {"sha": "ecc388e742458fac6a193db44aa0a2373a03888f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc388e742458fac6a193db44aa0a2373a03888f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e10ca0b030c4c68336be44260da1625fc98cb9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJafpAECRBK7hj4Ov3rIwAAdHIIAEDE8G9uZAsGlE5AKlwICRYY\nPntl5ATLqqVJCYiPe5Dc2a1m+uA+kL7kkRYi/+MqlSCDQznHRoRsWokBMsx2nYyj\nNteEtrUMdl94IdPKoTYCT9I1YnGYZeEYh7GAxL4DTZdrqncRNFTURvuw1NNjNG5p\n3lHppfysPVDVijBREJRvaLqIa2goT1bO4sMzjlVmjE9qt5ARZyoWJNQNbONqbZcf\nfZFTEHNybw5G9RZwb548kF4H9adnoMkLaLUqNTGHNtPmrOE99qgZcDsHd4cLmNFA\nPAAFnHFeiE93WyqONgtq/WIj/5/z+nVQJdVSdYMjfhAuaipuSjid9slUqrBAmnk=\n=ripg\n-----END PGP SIGNATURE-----\n", "payload": "tree ecc388e742458fac6a193db44aa0a2373a03888f\nparent d6394e51a01c9617c9d33a78d66db2236d8994dc\nparent 7a20fc14ef255df1ce2c417943605015aba2b1ff\nauthor kennytm <kennytm@gmail.com> 1518243844 +0800\ncommitter GitHub <noreply@github.com> 1518243844 +0800\n\nRollup merge of #48078 - alexcrichton:fix-required-const-and-proc-macro, r=eddyb\n\nDisallow function pointers to #[rustc_args_required_const]\n\nThis commit disallows acquiring a function pointer to functions tagged as\n`#[rustc_args_required_const]`. This is intended to be used as future-proofing\nfor the stdsimd crate to avoid taking a function pointer to any intrinsic which\nhas a hard requirement that one of the arguments is a constant value.\n\nNote that the first commit here isn't related specifically to this feature, but was necessary to get this working in stdsimd!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e10ca0b030c4c68336be44260da1625fc98cb9d", "html_url": "https://github.com/rust-lang/rust/commit/1e10ca0b030c4c68336be44260da1625fc98cb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e10ca0b030c4c68336be44260da1625fc98cb9d/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6394e51a01c9617c9d33a78d66db2236d8994dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6394e51a01c9617c9d33a78d66db2236d8994dc", "html_url": "https://github.com/rust-lang/rust/commit/d6394e51a01c9617c9d33a78d66db2236d8994dc"}, {"sha": "7a20fc14ef255df1ce2c417943605015aba2b1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a20fc14ef255df1ce2c417943605015aba2b1ff", "html_url": "https://github.com/rust-lang/rust/commit/7a20fc14ef255df1ce2c417943605015aba2b1ff"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "52b87282180c4c5ad1823b82a9e6a7c41dbf69ab", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1e10ca0b030c4c68336be44260da1625fc98cb9d", "patch": "@@ -716,6 +716,10 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     ReifyFnPointer => {\n                         match self.eval_operand(operand)?.ty.sty {\n                             ty::TyFnDef(def_id, substs) => {\n+                                if self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n+                                    bug!(\"reifying a fn ptr that requires \\\n+                                          const arguments\");\n+                                }\n                                 let instance = self.resolve(def_id, substs)?;\n                                 let fn_ptr = self.memory.create_fn_alloc(instance);\n                                 let valty = ValTy {"}, {"sha": "d470f92b75231de8df503ef557b020cd83605e03", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=1e10ca0b030c4c68336be44260da1625fc98cb9d", "patch": "@@ -714,6 +714,10 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     mir::CastKind::ReifyFnPointer => {\n                         match operand.ty.sty {\n                             ty::TyFnDef(def_id, substs) => {\n+                                if tcx.has_attr(def_id, \"rustc_args_required_const\") {\n+                                    bug!(\"reifying a fn ptr that requires \\\n+                                          const arguments\");\n+                                }\n                                 callee::resolve_and_get_fn(self.cx, def_id, substs)\n                             }\n                             _ => {"}, {"sha": "2e876ec118d576d33ac2d96debc77775969d164e", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=1e10ca0b030c4c68336be44260da1625fc98cb9d", "patch": "@@ -195,6 +195,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     mir::CastKind::ReifyFnPointer => {\n                         match operand.layout.ty.sty {\n                             ty::TyFnDef(def_id, substs) => {\n+                                if bx.cx.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n+                                    bug!(\"reifying a fn ptr that requires \\\n+                                          const arguments\");\n+                                }\n                                 OperandValue::Immediate(\n                                     callee::resolve_and_get_fn(bx.cx, def_id, substs))\n                             }"}, {"sha": "165b499cc62aaad5a55ad7855f17dd3a13a0c8b6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1e10ca0b030c4c68336be44260da1625fc98cb9d", "patch": "@@ -4897,13 +4897,45 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        self.check_rustc_args_require_const(def.def_id(), node_id, span);\n+\n         debug!(\"instantiate_value_path: type of {:?} is {:?}\",\n                node_id,\n                ty_substituted);\n         self.write_substs(self.tcx.hir.node_to_hir_id(node_id), substs);\n         ty_substituted\n     }\n \n+    fn check_rustc_args_require_const(&self,\n+                                      def_id: DefId,\n+                                      node_id: ast::NodeId,\n+                                      span: Span) {\n+        // We're only interested in functions tagged with\n+        // #[rustc_args_required_const], so ignore anything that's not.\n+        if !self.tcx.has_attr(def_id, \"rustc_args_required_const\") {\n+            return\n+        }\n+\n+        // If our calling expression is indeed the function itself, we're good!\n+        // If not, generate an error that this can only be called directly.\n+        match self.tcx.hir.get(self.tcx.hir.get_parent_node(node_id)) {\n+            Node::NodeExpr(expr) => {\n+                match expr.node {\n+                    hir::ExprCall(ref callee, ..) => {\n+                        if callee.id == node_id {\n+                            return\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        self.tcx.sess.span_err(span, \"this function can only be invoked \\\n+                                      directly, not through a function pointer\");\n+    }\n+\n     /// Report errors if the provided parameters are too few or too many.\n     fn check_path_parameter_count(&self,\n                                   span: Span,"}, {"sha": "ae0556320b0efa2ed59aaf2f211ab890f4b7e45d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1e10ca0b030c4c68336be44260da1625fc98cb9d", "patch": "@@ -984,6 +984,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"wasm_import_memory attribute is currently unstable\",\n                                  cfg_fn!(wasm_import_memory))),\n \n+    (\"rustc_args_required_const\", Whitelisted, Gated(Stability::Unstable,\n+                                 \"rustc_attrs\",\n+                                 \"never will be stable\",\n+                                 cfg_fn!(rustc_attrs))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "aa63019307b5b0ff920d1e22bd53cd6eeb57106b", "filename": "src/test/compile-fail/rustc-args-required-const2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e10ca0b030c4c68336be44260da1625fc98cb9d/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-args-required-const2.rs?ref=1e10ca0b030c4c68336be44260da1625fc98cb9d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(attr_literals, rustc_attrs, const_fn)]\n+\n+#[rustc_args_required_const(0)]\n+fn foo(_a: i32) {\n+}\n+\n+fn main() {\n+    let a = foo; //~ ERROR: this function can only be invoked directly\n+    a(2);\n+}"}]}