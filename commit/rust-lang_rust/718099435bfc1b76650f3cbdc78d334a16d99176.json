{"sha": "718099435bfc1b76650f3cbdc78d334a16d99176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODA5OTQzNWJmYzFiNzY2NTBmM2NiZGM3OGQzMzRhMTZkOTkxNzY=", "commit": {"author": {"name": "Wang Xuerui", "email": "idontknw.wang@gmail.com", "date": "2016-06-02T10:16:24Z"}, "committer": {"name": "Wang Xuerui", "email": "idontknw.wang@gmail.com", "date": "2016-07-13T19:10:46Z"}, "message": "syntax_ext: format: de-duplicate argument objects", "tree": {"sha": "69acb8dbfbba280eb7ca800789cfcfd356821687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69acb8dbfbba280eb7ca800789cfcfd356821687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/718099435bfc1b76650f3cbdc78d334a16d99176", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXhpI2AAoJEHg5bO9pIxDs4XcP/j7V3eM+uIF4jfZI2D+xsa47\nB0BeZuYWlLUY4Q9fsttPGpL08c2crFLFoAnDYpzxvLl3ulWWs+I85COyqXuM8yZb\nDJY4yduepU2iJILPrrI6j/nVn9GYj9KR3yDB6MhljYi5LbBp41mdV2JQWJTgOztG\n/ls6ABGl0gKYpd3d/rG91PBmS3qaktSo7Lqkgp4OvZtDte7UN8SbSzu31CvSqw+B\nNWPX0vbCVW8O4wYXur4+WsJsjvSO4SvAsij7IO9AVr2Q6g253Dy+bLdB0/QafccO\nJwcgoc2BeKCqHYiw9gNnhp4w3PfdYzegCtqt0EuUfZMKBEDRHcFc/KQGScj+6Zie\nl0mc3Q3hhDlMNkeUqNXwFyKVueYYidiqhjzUFyH/6qsK0vvIkhhLVCsAQVD7zTaq\nTMVQsrt1h48RIJ5svkfMBUiHjoa/Ti/JLV3kmYgmWZ5fMt53cMXmFMIPP42MfYjc\ndubOaEuRxjISEZ4+zTR7qcsstC+jCww0uwJyLP1XJrJcKsksHxr6ecKrlt/OXKpb\nBdpYOXhl6WgM+5oyis/JdsDD3dep8WU51rai+hE4AElw3sCl7nTupjcbCFOHFxmk\n+i2OWoTRjnDZTs+O0KkR/llCbv9dvbSbTUxQlk8idIXeIbynvHIjs9CoBwovq5Zk\nk82GUd5ZTIrRynbnSIn9\n=hufF\n-----END PGP SIGNATURE-----", "payload": "tree 69acb8dbfbba280eb7ca800789cfcfd356821687\nparent f457e6c3e0724ba3a7d37460ea7088cf67a6af4b\nauthor Wang Xuerui <idontknw.wang@gmail.com> 1464862584 +0800\ncommitter Wang Xuerui <idontknw.wang@gmail.com> 1468437046 +0800\n\nsyntax_ext: format: de-duplicate argument objects\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/718099435bfc1b76650f3cbdc78d334a16d99176", "html_url": "https://github.com/rust-lang/rust/commit/718099435bfc1b76650f3cbdc78d334a16d99176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/718099435bfc1b76650f3cbdc78d334a16d99176/comments", "author": {"login": "xen0n", "id": 1175567, "node_id": "MDQ6VXNlcjExNzU1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1175567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen0n", "html_url": "https://github.com/xen0n", "followers_url": "https://api.github.com/users/xen0n/followers", "following_url": "https://api.github.com/users/xen0n/following{/other_user}", "gists_url": "https://api.github.com/users/xen0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen0n/subscriptions", "organizations_url": "https://api.github.com/users/xen0n/orgs", "repos_url": "https://api.github.com/users/xen0n/repos", "events_url": "https://api.github.com/users/xen0n/events{/privacy}", "received_events_url": "https://api.github.com/users/xen0n/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xen0n", "id": 1175567, "node_id": "MDQ6VXNlcjExNzU1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1175567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen0n", "html_url": "https://github.com/xen0n", "followers_url": "https://api.github.com/users/xen0n/followers", "following_url": "https://api.github.com/users/xen0n/following{/other_user}", "gists_url": "https://api.github.com/users/xen0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen0n/subscriptions", "organizations_url": "https://api.github.com/users/xen0n/orgs", "repos_url": "https://api.github.com/users/xen0n/repos", "events_url": "https://api.github.com/users/xen0n/events{/privacy}", "received_events_url": "https://api.github.com/users/xen0n/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f457e6c3e0724ba3a7d37460ea7088cf67a6af4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f457e6c3e0724ba3a7d37460ea7088cf67a6af4b", "html_url": "https://github.com/rust-lang/rust/commit/f457e6c3e0724ba3a7d37460ea7088cf67a6af4b"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "916a2aa572ccb4d7f5b7c60c360905fb4a0646f3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/718099435bfc1b76650f3cbdc78d334a16d99176/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/718099435bfc1b76650f3cbdc78d334a16d99176/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=718099435bfc1b76650f3cbdc78d334a16d99176", "patch": "@@ -50,7 +50,8 @@ struct Context<'a, 'b:'a> {\n     /// Named expressions are resolved early, and are appended to the end of\n     /// argument expressions.\n     args: Vec<P<ast::Expr>>,\n-    arg_types: Vec<Vec<ArgumentType>>,\n+    arg_types: Vec<Vec<usize>>,\n+    arg_unique_types: Vec<Vec<ArgumentType>>,\n     /// Map from named arguments to their resolved indices.\n     names: HashMap<String, usize>,\n \n@@ -69,7 +70,7 @@ struct Context<'a, 'b:'a> {\n     /// corresponding to each positional argument, and number of references\n     /// consumed so far for each argument, to facilitate correct `Position`\n     /// mapping in `trans_piece`.\n-    arg_index_map: Vec<usize>,\n+    arg_index_map: Vec<Vec<usize>>,\n \n     count_args_index_offset: usize,\n \n@@ -234,7 +235,17 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n                 match ty {\n                     Placeholder(_) => {\n-                        self.arg_types[arg].push(ty);\n+                        // record every (position, type) combination only once\n+                        let ref mut seen_ty = self.arg_unique_types[arg];\n+                        let i = match seen_ty.iter().position(|x| *x == ty) {\n+                            Some(i) => i,\n+                            None => {\n+                                let i = seen_ty.len();\n+                                seen_ty.push(ty);\n+                                i\n+                            }\n+                        };\n+                        self.arg_types[arg].push(i);\n                     }\n                     Count => {\n                         match self.count_positions.entry(arg) {\n@@ -274,8 +285,13 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         // Generate mapping for positional args\n         for i in 0..args_len {\n-            self.arg_index_map.push(sofar);\n-            sofar += self.arg_types[i].len();\n+            let ref arg_types = self.arg_types[i];\n+            let mut arg_offsets = Vec::with_capacity(arg_types.len());\n+            for offset in arg_types {\n+                arg_offsets.push(sofar + *offset);\n+            }\n+            self.arg_index_map.push(arg_offsets);\n+            sofar += self.arg_unique_types[i].len();\n         }\n \n         // Record starting index for counts, which appear just\n@@ -355,12 +371,13 @@ impl<'a, 'b> Context<'a, 'b> {\n                         parse::ArgumentIs(i) => {\n                             // Map to index in final generated argument array\n                             // in case of multiple types specified\n-                            let arg_idx = if self.args.len() > i {\n-                                let arg_idx = self.arg_index_map[i] + arg_index_consumed[i];\n-                                arg_index_consumed[i] += 1;\n-                                arg_idx\n-                            } else {\n-                                0 // error already emitted elsewhere\n+                            let arg_idx = match arg_index_consumed.get_mut(i) {\n+                                None => 0, // error already emitted elsewhere\n+                                Some(offset) => {\n+                                    let arg_idx = self.arg_index_map[i][*offset];\n+                                    *offset += 1;\n+                                    arg_idx\n+                                }\n                             };\n                             pos(\"At\", Some(arg_idx))\n                         }\n@@ -490,7 +507,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         for (i, e) in self.args.into_iter().enumerate() {\n             let name = self.ecx.ident_of(&format!(\"__arg{}\", i));\n             pats.push(self.ecx.pat_ident(DUMMY_SP, name));\n-            for ref arg_ty in self.arg_types[i].iter() {\n+            for ref arg_ty in self.arg_unique_types[i].iter() {\n                 locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty,\n                                                 self.ecx.expr_ident(e.span, name)));\n             }\n@@ -626,6 +643,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     names: HashMap<String, usize>)\n                                     -> P<ast::Expr> {\n     let arg_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n+    let arg_unique_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n     let macsp = ecx.call_site();\n     // Expand the format literal so that efmt.span will have a backtrace. This\n     // is essential for locating a bug when the format literal is generated in\n@@ -635,6 +653,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         ecx: ecx,\n         args: args,\n         arg_types: arg_types,\n+        arg_unique_types: arg_unique_types,\n         names: names,\n         curarg: 0,\n         arg_index_map: Vec::new(),"}]}