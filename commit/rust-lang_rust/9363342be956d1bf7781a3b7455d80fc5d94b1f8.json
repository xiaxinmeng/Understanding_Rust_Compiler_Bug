{"sha": "9363342be956d1bf7781a3b7455d80fc5d94b1f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNjMzNDJiZTk1NmQxYmY3NzgxYTNiNzQ1NWQ4MGZjNWQ5NGIxZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-02T18:09:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-02T18:09:20Z"}, "message": "Auto merge of #51896 - nikomatsakis:nll-liveness-dirty-list, r=Zoxc\n\nintroduce dirty list to liveness, eliminate `ins` vector\n\nAt least in my measurements, this seems to knock much of the liveness computation off the profile.\n\nr? @Zoxc\ncc @nnethercote", "tree": {"sha": "7e430b0ad2320d1b4d57ca23a3df79c8bba921a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e430b0ad2320d1b4d57ca23a3df79c8bba921a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9363342be956d1bf7781a3b7455d80fc5d94b1f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9363342be956d1bf7781a3b7455d80fc5d94b1f8", "html_url": "https://github.com/rust-lang/rust/commit/9363342be956d1bf7781a3b7455d80fc5d94b1f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9363342be956d1bf7781a3b7455d80fc5d94b1f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58b7219218f1862219e5d4d720174896f184989", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58b7219218f1862219e5d4d720174896f184989", "html_url": "https://github.com/rust-lang/rust/commit/b58b7219218f1862219e5d4d720174896f184989"}, {"sha": "78ea95258d6e3f603713ffde001334305044a4fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ea95258d6e3f603713ffde001334305044a4fb", "html_url": "https://github.com/rust-lang/rust/commit/78ea95258d6e3f603713ffde001334305044a4fb"}], "stats": {"total": 159, "additions": 120, "deletions": 39}, "files": [{"sha": "2e95a45479c4f966fd0feb956eaa538780d0f944", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -239,14 +239,20 @@ impl<T: Idx> IdxSet<T> {\n         self.words_mut().clone_from_slice(other.words());\n     }\n \n+    /// Set `self = self | other` and return true if `self` changed\n+    /// (i.e., if new bits were added).\n     pub fn union(&mut self, other: &IdxSet<T>) -> bool {\n         bitwise(self.words_mut(), other.words(), &Union)\n     }\n \n+    /// Set `self = self - other` and return true if `self` changed.\n+    /// (i.e., if any bits were removed).\n     pub fn subtract(&mut self, other: &IdxSet<T>) -> bool {\n         bitwise(self.words_mut(), other.words(), &Subtract)\n     }\n \n+    /// Set `self = self & other` and return true if `self` changed.\n+    /// (i.e., if any bits were removed).\n     pub fn intersect(&mut self, other: &IdxSet<T>) -> bool {\n         bitwise(self.words_mut(), other.words(), &Intersect)\n     }"}, {"sha": "e4d0bc596cba6fb11a41fda148c4939771466377", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -77,6 +77,7 @@ pub mod sync;\n pub mod owning_ref;\n pub mod tiny_list;\n pub mod sorted_map;\n+pub mod work_queue;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "b8e8b249bb504018d2f5037ee0072a6eabdeff27", "filename": "src/librustc_data_structures/work_queue.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_data_structures%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_data_structures%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fwork_queue.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use indexed_set::IdxSetBuf;\n+use indexed_vec::Idx;\n+use std::collections::VecDeque;\n+\n+/// A work queue is a handy data structure for tracking work left to\n+/// do. (For example, basic blocks left to process.) It is basically a\n+/// de-duplicating queue; so attempting to insert X if X is already\n+/// enqueued has no effect. This implementation assumes that the\n+/// elements are dense indices, so it can allocate the queue to size\n+/// and also use a bit set to track occupancy.\n+pub struct WorkQueue<T: Idx> {\n+    deque: VecDeque<T>,\n+    set: IdxSetBuf<T>,\n+}\n+\n+impl<T: Idx> WorkQueue<T> {\n+    /// Create a new work queue with all the elements from (0..len).\n+    #[inline]\n+    pub fn with_all(len: usize) -> Self {\n+        WorkQueue {\n+            deque: (0..len).map(T::new).collect(),\n+            set: IdxSetBuf::new_filled(len),\n+        }\n+    }\n+\n+    /// Create a new work queue that starts empty, where elements range from (0..len).\n+    #[inline]\n+    pub fn with_none(len: usize) -> Self {\n+        WorkQueue {\n+            deque: VecDeque::with_capacity(len),\n+            set: IdxSetBuf::new_empty(len),\n+        }\n+    }\n+\n+    /// Attempt to enqueue `element` in the work queue. Returns false if it was already present.\n+    #[inline]\n+    pub fn insert(&mut self, element: T) -> bool {\n+        if self.set.add(&element) {\n+            self.deque.push_back(element);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Attempt to enqueue `element` in the work queue. Returns false if it was already present.\n+    #[inline]\n+    pub fn pop(&mut self) -> Option<T> {\n+        if let Some(element) = self.deque.pop_front() {\n+            self.set.remove(&element);\n+            Some(element)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// True if nothing is enqueued.\n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.deque.is_empty()\n+    }\n+}"}, {"sha": "16506800c9e16025f63d81db5b3e0e42fe76f24e", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -263,13 +263,6 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n                     }\n                 }\n \n-                // Before each basic block, dump out the values\n-                // that are live on entry to the basic block.\n-                PassWhere::BeforeBlock(bb) => {\n-                    let s = live_variable_set(&liveness.regular.ins[bb], &liveness.drop.ins[bb]);\n-                    writeln!(out, \"    | Live variables on entry to {:?}: {}\", bb, s)?;\n-                }\n-\n                 PassWhere::BeforeLocation(location) => {\n                     let s = live_variable_set(\n                         &regular_liveness_per_location[&location],\n@@ -285,7 +278,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n                     )?;\n                 }\n \n-                PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n+                // After each basic block, dump out the values\n+                // that are live on exit from the basic block.\n+                PassWhere::AfterTerminator(bb) => {\n+                    let s = live_variable_set(&liveness.regular.outs[bb], &liveness.drop.outs[bb]);\n+                    writeln!(out, \"    | Live variables on exit from {:?}: {}\", bb, s)?;\n+                }\n+\n+                PassWhere::BeforeBlock(_) | PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n             }\n             Ok(())\n         },"}, {"sha": "4630cdae47d627d855c5e3fa5e71e2e76fa753a3", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -37,6 +37,7 @@ use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::indexed_set::IdxSetBuf;\n+use rustc_data_structures::work_queue::WorkQueue;\n use util::pretty::{dump_enabled, write_basic_block, write_mir_intro};\n use rustc::ty::item_path;\n use rustc::mir::visit::MirVisitable;\n@@ -55,9 +56,6 @@ pub struct LivenessResult {\n     /// Liveness mode in use when these results were computed.\n     pub mode: LivenessMode,\n \n-    /// Live variables on entry to each basic block.\n-    pub ins: IndexVec<BasicBlock, LocalSet>,\n-\n     /// Live variables on exit to each basic block. This is equal to\n     /// the union of the `ins` for each successor.\n     pub outs: IndexVec<BasicBlock, LocalSet>,\n@@ -124,37 +122,38 @@ pub fn liveness_of_locals<'tcx>(mir: &Mir<'tcx>, mode: LivenessMode) -> Liveness\n         .map(|b| block(mode, b, locals))\n         .collect();\n \n-    let mut ins: IndexVec<_, _> = mir.basic_blocks()\n+    let mut outs: IndexVec<_, _> = mir.basic_blocks()\n         .indices()\n         .map(|_| LocalSet::new_empty(locals))\n         .collect();\n-    let mut outs = ins.clone();\n \n-    let mut changed = true;\n     let mut bits = LocalSet::new_empty(locals);\n-    while changed {\n-        changed = false;\n-\n-        for b in mir.basic_blocks().indices().rev() {\n-            // outs[b] = \u222a {ins of successors}\n-            bits.clear();\n-            for &successor in mir.basic_blocks()[b].terminator().successors() {\n-                bits.union(&ins[successor]);\n-            }\n-            outs[b].overwrite(&bits);\n \n-            // bits = use \u222a (bits - def)\n-            def_use[b].apply(&mut bits);\n+    // queue of things that need to be re-processed, and a set containing\n+    // the things currently in the queue\n+    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_all(mir.basic_blocks().len());\n+\n+    let predecessors = mir.predecessors();\n \n-            // update bits on entry and flag if they have changed\n-            if ins[b] != bits {\n-                ins[b].overwrite(&bits);\n-                changed = true;\n+    while let Some(bb) = dirty_queue.pop() {\n+        // bits = use \u222a (bits - def)\n+        bits.overwrite(&outs[bb]);\n+        def_use[bb].apply(&mut bits);\n+\n+        // `bits` now contains the live variables on entry. Therefore,\n+        // add `bits` to the `out` set for each predecessor; if those\n+        // bits were not already present, then enqueue the predecessor\n+        // as dirty.\n+        //\n+        // (note that `union` returns true if the `self` set changed)\n+        for &pred_bb in &predecessors[bb] {\n+            if outs[pred_bb].union(&bits) {\n+                dirty_queue.insert(pred_bb);\n             }\n         }\n     }\n \n-    LivenessResult { mode, ins, outs }\n+    LivenessResult { mode, outs }\n }\n \n impl LivenessResult {\n@@ -195,8 +194,6 @@ impl LivenessResult {\n             statement_defs_uses.apply(&mut bits);\n             callback(statement_location, &bits);\n         }\n-\n-        assert_eq!(bits, self.ins[block]);\n     }\n \n     fn defs_uses<'tcx, V>(&self, mir: &Mir<'tcx>, location: Location, thing: &V) -> DefsUses\n@@ -438,7 +435,6 @@ pub fn write_mir_fn<'a, 'tcx>(\n                 .collect();\n             writeln!(w, \"{} {{{}}}\", prefix, live.join(\", \"))\n         };\n-        print(w, \"   \", &result.ins)?;\n         write_basic_block(tcx, block, mir, &mut |_, _| Ok(()), w)?;\n         print(w, \"   \", &result.outs)?;\n         if block.index() + 1 != mir.basic_blocks().len() {"}, {"sha": "6472e588bc6219053a8b30881129b14eb85be6c3", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -44,6 +44,9 @@ pub enum PassWhere {\n \n     /// We just dumped the given statement or terminator.\n     AfterLocation(Location),\n+\n+    /// We just dumped the terminator for a block but not the closing `}`.\n+    AfterTerminator(BasicBlock),\n }\n \n /// If the session is properly configured, dumps a human-readable\n@@ -351,6 +354,7 @@ where\n     })?;\n \n     extra_data(PassWhere::AfterLocation(current_location), w)?;\n+    extra_data(PassWhere::AfterTerminator(block), w)?;\n \n     writeln!(w, \"{}}}\", INDENT)\n }"}, {"sha": "5fdea4208df996ec156ca19e8416cd7f1c581c95", "filename": "src/test/mir-opt/nll/liveness-call-subtlety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -26,20 +26,20 @@ fn main() {\n //\n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb0: []\n //    bb0: {\n //            | Live variables on entry to bb0[0]: []\n //        StorageLive(_1);\n //            | Live variables on entry to bb0[1]: []\n //        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> [return: bb2, unwind: bb1];\n+//            | Live variables on exit from bb0: [_1 (drop)]\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb2: [_1 (drop)]\n //    bb2: {\n //            | Live variables on entry to bb2[0]: [_1 (drop)]\n //        StorageLive(_2);\n //            | Live variables on entry to bb2[1]: [_1 (drop)]\n //        _2 = const can_panic() -> [return: bb3, unwind: bb4];\n+//            | Live variables on exit from bb2: [_1 (drop), _2]\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "001499b657de955af53762ee984fca5058825084", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -25,7 +25,6 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//    | Live variables on entry to bb3: []\n //    bb3: {\n //            | Live variables on entry to bb3[0]: []\n //        _1 = const 55usize;\n@@ -37,5 +36,6 @@ fn main() {\n //        _4 = _1;\n //            | Live variables on entry to bb3[4]: [_4]\n //        _3 = const use_x(move _4) -> [return: bb4, unwind: bb1];\n+//            | Live variables on exit from bb3: [_3]\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "fbe20d76ea721e4406c681aa9bfcce3926138ed7", "filename": "src/test/mir-opt/nll/liveness-interblock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -29,20 +29,20 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-//     | Live variables on entry to bb3: [_1]\n //     bb3: {\n //             | Live variables on entry to bb3[0]: [_1]\n //         StorageLive(_4);\n //             | Live variables on entry to bb3[1]: [_1]\n //         _4 = _1;\n //             | Live variables on entry to bb3[2]: [_4]\n //         _3 = const make_live(move _4) -> [return: bb5, unwind: bb1];\n+//             | Live variables on exit from bb3: []\n //     }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-//     | Live variables on entry to bb4: []\n //     bb4: {\n //             | Live variables on entry to bb4[0]: []\n //         _5 = const make_dead() -> [return: bb6, unwind: bb1];\n+//             | Live variables on exit from bb4: []\n //     }\n // END rustc.main.nll.0.mir"}, {"sha": "187d9e6ca899304256d060345f37b9510c85d781", "filename": "src/test/mir-opt/nll/region-liveness-basic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9363342be956d1bf7781a3b7455d80fc5d94b1f8/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs?ref=9363342be956d1bf7781a3b7455d80fc5d94b1f8", "patch": "@@ -42,6 +42,7 @@ fn main() {\n //        _2 = &'_#2r _1[_3];\n //            | Live variables on entry to bb2[1]: [_2]\n //        switchInt(const true) -> [false: bb4, otherwise: bb3];\n+//            | Live variables on exit from bb2: [_2]\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n@@ -52,5 +53,6 @@ fn main() {\n //        _7 = (*_2);\n //            | Live variables on entry to bb3[2]: [_7]\n //        _6 = const use_x(move _7) -> [return: bb5, unwind: bb1];\n+//            | Live variables on exit from bb3: []\n //    }\n // END rustc.main.nll.0.mir"}]}