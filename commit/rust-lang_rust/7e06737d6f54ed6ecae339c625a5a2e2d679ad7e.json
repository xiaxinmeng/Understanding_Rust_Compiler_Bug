{"sha": "7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDY3MzdkNmY1NGVkNmVjYWUzMzljNjI1YTVhMmUyZDY3OWFkN2U=", "commit": {"author": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-09T20:44:07Z"}, "committer": {"name": "Joshua Holmer", "email": "holmerj@uindy.edu", "date": "2016-02-09T20:44:07Z"}, "message": "Improve testing and suggestion messages on bool_comparison", "tree": {"sha": "613960976040ede7e0917d4db01e0be974f036cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613960976040ede7e0917d4db01e0be974f036cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "html_url": "https://github.com/rust-lang/rust/commit/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e/comments", "author": null, "committer": null, "parents": [{"sha": "2687a3f6b590f7175d87a95dd49ccf2f11c9d2e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2687a3f6b590f7175d87a95dd49ccf2f11c9d2e3", "html_url": "https://github.com/rust-lang/rust/commit/2687a3f6b590f7175d87a95dd49ccf2f11c9d2e3"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "5382b8f0f0401a743578ee9737bf6e874072800d", "filename": "src/needless_bool.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "patch": "@@ -107,47 +107,43 @@ impl LateLintPass for BoolComparison {\n         if let ExprBinary(Spanned{ node: BiEq, .. }, ref left_side, ref right_side) = e.node {\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Some(true), None) => {\n-                    let side_snip = snippet(cx, right_side.span, \"..\");\n-                    let hint = format!(\"`{}`\", side_snip);\n+                    let hint = format!(\"{}\", snippet(cx, right_side.span, \"..\"));\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against booleans are unnecesary\",\n+                                       \"equality checks against true are unnecesary\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });\n                 }\n                 (None, Some(true)) => {\n-                    let side_snip = snippet(cx, left_side.span, \"..\");\n-                    let hint = format!(\"`{}`\", side_snip);\n+                    let hint = format!(\"{}\", snippet(cx, left_side.span, \"..\"));\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against booleans are unnecesary\",\n+                                       \"equality checks against true are unnecesary\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });\n                 }\n                 (Some(false), None) => {\n-                    let side_snip = snippet(cx, right_side.span, \"..\");\n-                    let hint = format!(\"`!{}`\", side_snip);\n+                    let hint = format!(\"!{}\", snippet(cx, right_side.span, \"..\"));\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against booleans are unnecesary\",\n+                                       \"equality checks against false can be replaced by a negation\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });\n                 }\n                 (None, Some(false)) => {\n-                    let side_snip = snippet(cx, left_side.span, \"..\");\n-                    let hint = format!(\"`!{}`\", side_snip);\n+                    let hint = format!(\"!{}\", snippet(cx, left_side.span, \"..\"));\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against booleans are unnecesary\",\n+                                       \"equality checks against false can be replaced by a negation\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it:\", hint);\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });\n                 }\n                 _ => (),"}, {"sha": "8a792931d02c7214642b7115665ccf83d66e1f31", "filename": "tests/compile-fail/bool_comparison.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e06737d6f54ed6ecae339c625a5a2e2d679ad7e/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=7e06737d6f54ed6ecae339c625a5a2e2d679ad7e", "patch": "@@ -5,19 +5,19 @@\n fn main() {\n     let x = true;\n     if x == true { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against booleans are unnecesary\n-    //~| HELP try simplifying it:\n-    //~| SUGGESTION x\n+    //~^ ERROR equality checks against true are unnecesary\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n     if x == false { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against booleans are unnecesary\n-    //~| HELP try simplifying it:\n-    //~| SUGGESTION !x\n+    //~^ ERROR equality checks against false can be replaced by a negation\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n     if true == x { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against booleans are unnecesary\n-    //~| HELP try simplifying it:\n-    //~| SUGGESTION x\n+    //~^ ERROR equality checks against true are unnecesary\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n     if false == x { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against booleans are unnecesary\n-    //~| HELP try simplifying it:\n-    //~| SUGGESTION !x\n+    //~^ ERROR equality checks against false can be replaced by a negation\n+    //~| HELP try simplifying it as shown:\n+    //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n }"}]}