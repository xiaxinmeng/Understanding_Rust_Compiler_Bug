{"sha": "1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMDlkYzI1OTZjODhkY2YzZmI4NDAwNDZmMDVkYjVlODU5NWU5Y2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-16T10:34:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-16T10:38:14Z"}, "message": "PlaceRef::ty: use method call syntax", "tree": {"sha": "9e923e8242ea8a38f93492dabfd0a4ceb3d2bd70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e923e8242ea8a38f93492dabfd0a4ceb3d2bd70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "html_url": "https://github.com/rust-lang/rust/commit/1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e208f6a3afb42528878b0f3464e337c4bf3bbc8", "html_url": "https://github.com/rust-lang/rust/commit/4e208f6a3afb42528878b0f3464e337c4bf3bbc8"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "fd0ff5b66e6070d3aea2d1f9743c6a7ea131a0cc", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "patch": "@@ -119,7 +119,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n                 )\n             );\n             if is_consume {\n-                let base_ty = mir::PlaceRef::ty(&place_base, self.fx.mir, cx.tcx());\n+                let base_ty = place_base.ty(self.fx.mir, cx.tcx());\n                 let base_ty = self.fx.monomorphize(base_ty);\n \n                 // ZSTs don't require any actual memory access."}, {"sha": "66d9d1a1e0c490ef2237a25e1602c92f8ceda921", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "patch": "@@ -506,7 +506,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n     pub fn monomorphized_place_ty(&self, place_ref: mir::PlaceRef<'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n-        let place_ty = mir::PlaceRef::ty(&place_ref, self.mir, tcx);\n+        let place_ty = place_ref.ty(self.mir, tcx);\n         self.monomorphize(place_ty.ty)\n     }\n }"}, {"sha": "727514b5007559fcbef1d38fc2028762d20ef624", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "patch": "@@ -287,7 +287,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 );\n             }\n \n-            let ty = PlaceRef::ty(&used_place, self.body, self.infcx.tcx).ty;\n+            let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n             let needs_note = match ty.kind() {\n                 ty::Closure(id, _) => {\n                     let tables = self.infcx.tcx.typeck(id.expect_local());\n@@ -725,6 +725,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Define a small closure that we can use to check if the type of a place\n         // is a union.\n         let union_ty = |place_base| {\n+            // Need to use fn call syntax `PlaceRef::ty` to determine the type of `place_base`;\n+            // using a type annotation in the closure argument instead leads to a lifetime error.\n             let ty = PlaceRef::ty(&place_base, self.body, self.infcx.tcx).ty;\n             ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n         };"}, {"sha": "7c7edfdb5fbaf5cb4cfe6cce3a57ff9f2e267ee4", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "patch": "@@ -1743,7 +1743,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =\n             place_span.0.last_projection()\n         {\n-            let place_ty = PlaceRef::ty(&place_base, self.body(), self.infcx.tcx);\n+            let place_ty = place_base.ty(self.body(), self.infcx.tcx);\n             if let ty::Array(..) = place_ty.ty.kind() {\n                 self.check_if_subslice_element_is_moved(\n                     location,\n@@ -1854,7 +1854,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     // assigning to `P.f` requires `P` itself\n                     // be already initialized\n                     let tcx = self.infcx.tcx;\n-                    let base_ty = PlaceRef::ty(&place_base, self.body(), tcx).ty;\n+                    let base_ty = place_base.ty(self.body(), tcx).ty;\n                     match base_ty.kind() {\n                         ty::Adt(def, _) if def.has_dtor(tcx) => {\n                             self.check_if_path_or_subpath_is_moved(\n@@ -1951,7 +1951,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // no move out from an earlier location) then this is an attempt at initialization\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n-                if let ty::Adt(def, _) = PlaceRef::ty(&base, this.body(), tcx).ty.kind() {\n+                if let ty::Adt(def, _) = base.ty(this.body(), tcx).ty.kind() {\n                     if def.is_union() {\n                         if this.move_data.path_map[mpi].iter().any(|moi| {\n                             this.move_data.moves[*moi].source.is_predecessor_of(location, this.body)\n@@ -2173,7 +2173,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((place_base, elem)) => {\n                 match elem {\n                     ProjectionElem::Deref => {\n-                        let base_ty = PlaceRef::ty(&place_base, self.body(), self.infcx.tcx).ty;\n+                        let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;\n \n                         // Check the kind of deref to decide\n                         match base_ty.kind() {"}, {"sha": "bdf2becb711264eff522a8cbe962ea5db3888cc1", "filename": "compiler/rustc_mir/src/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b09dc2596c88dcf3fb840046f05db5e8595e9ca/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fprefixes.rs?ref=1b09dc2596c88dcf3fb840046f05db5e8595e9ca", "patch": "@@ -117,7 +117,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                     // derefs, except we stop at the deref of a shared\n                     // reference.\n \n-                    let ty = PlaceRef::ty(&cursor_base, self.body, self.tcx).ty;\n+                    let ty = cursor_base.ty(self.body, self.tcx).ty;\n                     match ty.kind() {\n                         ty::RawPtr(_) | ty::Ref(_ /*rgn*/, _ /*ty*/, hir::Mutability::Not) => {\n                             // don't continue traversing over derefs of raw pointers or shared"}]}