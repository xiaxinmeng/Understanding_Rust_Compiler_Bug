{"sha": "c81d70e6bdf264c62136b571760f152be9638ec0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MWQ3MGU2YmRmMjY0YzYyMTM2YjU3MTc2MGYxNTJiZTk2MzhlYzA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-09-01T05:52:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-01T05:52:23Z"}, "message": "Merge pull request #2977 from flip1995/tool_lints\n\nImplement tool_lints", "tree": {"sha": "cb18d08b3e486d10aaf059e8ea44ed8cd452666f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb18d08b3e486d10aaf059e8ea44ed8cd452666f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c81d70e6bdf264c62136b571760f152be9638ec0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbiikXCRBK7hj4Ov3rIwAAdHIIABOo+KHkPWmeKAmUoj5UlHMN\n/vz5911VaQNM27KaYIlb2welN8c8d69mhXexhT6GtcCg5ZKvKMhwyMeKPJx68odp\nKVXZyb/dSI/wG+yjxRRh/gbhX6gin5iFYBvPJIxWyw7rz2G9p0JKjbsz/8Fuic+6\nffVU123l49ZyS14VgmZaTKx0MEWX7L+PsTig7FelAks7f91siQ+JjJYufWcQH5cV\nJxorQZ6lxs7qexnpaEqgFnmGilK2nvW/hAGWJe1D2tSpWVk4tJDJ4XGRPaVQjl3h\nuhzcnDefcqB4cT0y+wT8C+FEO80XiahVqPYsrBu5tcsBkzxGrYPOoo5drOOkERI=\n=/f6K\n-----END PGP SIGNATURE-----\n", "payload": "tree cb18d08b3e486d10aaf059e8ea44ed8cd452666f\nparent 73e8416df3fbc2872738911cdfa83662f4a2fcf8\nparent 9abf6fca9c7288cb3bb99c0f7627f94b7930ee98\nauthor Manish Goregaokar <manishsmail@gmail.com> 1535781143 +0530\ncommitter GitHub <noreply@github.com> 1535781143 +0530\n\nMerge pull request #2977 from flip1995/tool_lints\n\nImplement tool_lints"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c81d70e6bdf264c62136b571760f152be9638ec0", "html_url": "https://github.com/rust-lang/rust/commit/c81d70e6bdf264c62136b571760f152be9638ec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c81d70e6bdf264c62136b571760f152be9638ec0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e8416df3fbc2872738911cdfa83662f4a2fcf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e8416df3fbc2872738911cdfa83662f4a2fcf8", "html_url": "https://github.com/rust-lang/rust/commit/73e8416df3fbc2872738911cdfa83662f4a2fcf8"}, {"sha": "9abf6fca9c7288cb3bb99c0f7627f94b7930ee98", "url": "https://api.github.com/repos/rust-lang/rust/commits/9abf6fca9c7288cb3bb99c0f7627f94b7930ee98", "html_url": "https://github.com/rust-lang/rust/commit/9abf6fca9c7288cb3bb99c0f7627f94b7930ee98"}], "stats": {"total": 5799, "additions": 2960, "deletions": 2839}, "files": [{"sha": "3d1385244a6f89033bf2709088b1a5f346c77776", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -170,7 +170,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n     // ...\n \n-    reg.register_lint_group(\"clippy_restriction\", vec![\n+    reg.register_lint_group(\"clippy::restriction\", vec![\n         // ...\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         // ..."}, {"sha": "98f712c28d82176c4ba9cbd4fba680918d8cf2c1", "filename": "README.md", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -13,14 +13,14 @@ A collection of lints to catch common mistakes and improve your [Rust](https://g\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n \n-* `clippy` (everything that has no false positives)\n-* `clippy_pedantic` (everything)\n-* `clippy_nursery` (new lints that aren't quite ready yet)\n-* `clippy_style` (code that should be written in a more idiomatic way)\n-* `clippy_complexity` (code that does something simple but in a complex way)\n-* `clippy_perf` (code that can be written in a faster way)\n-* `clippy_cargo` (checks against the cargo manifest)\n-* **`clippy_correctness`** (code that is just outright wrong or very very useless)\n+* `clippy::all` (everything that has no false positives)\n+* `clippy::pedantic` (everything)\n+* `clippy::nursery` (new lints that aren't quite ready yet)\n+* `clippy::style` (code that should be written in a more idiomatic way)\n+* `clippy::complexity` (code that does something simple but in a complex way)\n+* `clippy::perf` (code that can be written in a faster way)\n+* `clippy::cargo` (checks against the cargo manifest)\n+* **`clippy::correctness`** (code that is just outright wrong or very very useless)\n \n More to come, please [file an issue](https://github.com/rust-lang-nursery/rust-clippy/issues) if you have ideas!\n \n@@ -106,26 +106,18 @@ define the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n \n You can add options  to `allow`/`warn`/`deny`:\n \n-*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy)]`)\n+*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`)\n \n-*   all lints using both the `clippy` and `clippy_pedantic` lint groups (`#![deny(clippy)]`,\n-    `#![deny(clippy_pedantic)]`). Note that `clippy_pedantic` contains some very aggressive\n+*   all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n+    `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive\n     lints prone to false positives.\n \n-*   only some lints (`#![deny(single_match, box_vec)]`, etc)\n+*   only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc)\n \n *   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc\n \n Note: `deny` produces errors instead of warnings.\n \n-For convenience, `cargo clippy` automatically defines a `cargo-clippy`\n-feature. This lets you set lint levels and compile with or without Clippy\n-transparently:\n-\n-```rust\n-#[cfg_attr(feature = \"cargo-clippy\", allow(needless_lifetimes))]\n-```\n-\n ## Updating rustc\n \n Sometimes, rustc moves forward without Clippy catching up. Therefore updating"}, {"sha": "99b9e79463a81aace5ed2796785f98022b8a3e13", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use std::f64::consts as f64;\n use syntax::ast::{FloatTy, Lit, LitKind};\n use syntax::symbol;"}, {"sha": "fa48b2b550612fb5587bc08a76e0eabdea339adf", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::span_lint;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::source_map::Span;\n \n /// **What it does:** Checks for plain integer arithmetic."}, {"sha": "9a1808345a5949656d4aa9e9d69eec6e23d812c8", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{higher, sugg};\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast;\n \n@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n             },\n             hir::ExprKind::Assign(ref assignee, ref e) => {\n                 if let hir::ExprKind::Binary(op, ref l, ref r) = e.node {\n-                    #[allow(cyclomatic_complexity)]\n+                    #[allow(clippy::cyclomatic_complexity)]\n                     let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {\n                         let ty = cx.tables.expr_ty(assignee);\n                         let rty = cx.tables.expr_ty(rhs);"}, {"sha": "034c2cc241ad8c802c5f9d9789bd3a7fbc64ea43", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -7,7 +7,7 @@ use crate::utils::{\n };\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, TyCtxt};\n use semver::Version;"}, {"sha": "ecac7f8250bec5d2f624db5855973e194edf33be", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast::LitKind;\n use syntax::source_map::Span;"}, {"sha": "97749e6f997a3eb6b2ea27405d8ada8869b3f831", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use crate::utils::span_lint;\n "}, {"sha": "752d640fa9eaa776dbd8c88b4cc4a972bf0ab930", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use matches::matches;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use crate::utils::*;"}, {"sha": "3d3fa7b5e738e54fe3d78cc988c1b512ac1b3d5e", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n@@ -118,7 +118,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         }\n         for (n, expr) in self.terminals.iter().enumerate() {\n             if SpanlessEq::new(self.cx).ignore_fn().eq_expr(e, expr) {\n-                #[allow(cast_possible_truncation)]\n+                #[allow(clippy::cast_possible_truncation)]\n                 return Ok(Bool::Term(n as u8));\n             }\n             let negated = match e.node {\n@@ -150,14 +150,14 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                 _ => continue,\n             };\n             if SpanlessEq::new(self.cx).ignore_fn().eq_expr(&negated, expr) {\n-                #[allow(cast_possible_truncation)]\n+                #[allow(clippy::cast_possible_truncation)]\n                 return Ok(Bool::Not(Box::new(Bool::Term(n as u8))));\n             }\n         }\n         let n = self.terminals.len();\n         self.terminals.push(e);\n         if n < 32 {\n-            #[allow(cast_possible_truncation)]\n+            #[allow(clippy::cast_possible_truncation)]\n             Ok(Bool::Term(n as u8))\n         } else {\n             Err(\"too many literals\".to_owned())"}, {"sha": "ddc017c27df20f3ef6933d1164729f677d33c74f", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use syntax::ast::{Name, UintTy};"}, {"sha": "55cc94f399f52bf5029d57175741138861d639dd", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -13,7 +13,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast;\n "}, {"sha": "83dd4c0509e607878d28f8e2cd3dedd3c099e607", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime."}, {"sha": "6f646e340a070b66458ffe942f65ebc49caf154d", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,4 @@\n-#![allow(cast_possible_truncation)]\n-#![allow(float_cmp)]\n+#![allow(clippy::float_cmp)]\n \n use rustc::lint::LateContext;\n use rustc::{span_bug, bug};"}, {"sha": "8f1823be15a4133fa574914cb9b914c31f256885", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty::Ty;\n use rustc::hir::*;\n use std::collections::HashMap;"}, {"sha": "596e83bc53935f9ab337508ce7ac7473df522268", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n use rustc::hir::{Item, ItemKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for types that implement `Copy` as well as\n /// `Iterator`."}, {"sha": "c975e31cec92cb534f02f3eab7fcb596a89e4dde", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::cfg::CFG;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::ty;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -186,7 +186,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n }\n \n #[cfg(feature = \"debugging\")]\n-#[allow(too_many_arguments)]\n+#[allow(clippy::too_many_arguments)]\n fn report_cc_bug(_: &LateContext<'_, '_>, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span, _: NodeId) {\n     span_bug!(\n         span,\n@@ -200,7 +200,7 @@ fn report_cc_bug(_: &LateContext<'_, '_>, cc: u64, narms: u64, div: u64, shorts:\n     );\n }\n #[cfg(not(feature = \"debugging\"))]\n-#[allow(too_many_arguments)]\n+#[allow(clippy::too_many_arguments)]\n fn report_cc_bug(cx: &LateContext<'_, '_>, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span, id: NodeId) {\n     if !is_allowed(cx, CYCLOMATIC_COMPLEXITY, id) {\n         cx.sess().span_note_without_error("}, {"sha": "cb79883372a0a7a37d2e942ea67940ba8339e85b", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::TyKind;\n "}, {"sha": "2a26cca21ac2cccbfd576bc41842eaf75201f131", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use rustc::hir::*;"}, {"sha": "4d603570ebed0b1c987048b798837037cdbec551", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use itertools::Itertools;\n use pulldown_cmark;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n use syntax_pos::Pos;\n@@ -86,7 +86,7 @@ impl<'a> Iterator for Parser<'a> {\n /// `syntax::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n-#[allow(cast_possible_truncation)]\n+#[allow(clippy::cast_possible_truncation)]\n pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n     const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];"}, {"sha": "1f38be4d7b72c8925b44956e528fc2fb0d869409", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::source_map::Span;\n \n use crate::utils::{snippet, span_lint_and_sugg, SpanlessEq};"}, {"sha": "42d6720d96c5d1d4034644c5b9b04c3fba165121", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for unnecessary double parentheses.\n ///"}, {"sha": "be804780ff5f2c2bb32516efe4bb0a8170aea5b9", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc::hir::*;"}, {"sha": "5853983dcf0a59e8bd79dfe925a20d141b2a2a7c", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::source_map::Spanned;\n "}, {"sha": "1c026713a5d44d1cf36cc9ee289770a3670f32d2", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! lint on if expressions with an else if, but without a final else branch\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n \n use crate::utils::span_lint_and_sugg;"}, {"sha": "195a78a89e5c370e72d1091b8fb19ea49d566c15", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! lint when there is an enum with no variants\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use crate::utils::span_lint_and_then;\n "}, {"sha": "8a2fcbaea46e78a9f49a805c3c5616932927b464", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::source_map::Span;\n use crate::utils::SpanlessEq;"}, {"sha": "0271fee8a3c9d7f882b27db15967f779ecfa05ff", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n //! don't fit into an `i32`\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::ty;\n use rustc::ty::subst::Substs;\n@@ -43,7 +43,7 @@ impl LintPass for UnportableVariant {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n-    #[allow(cast_possible_truncation, cast_sign_loss)]\n+    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;"}, {"sha": "042a4765e2b73bb1781b9f52f0f8bd73d878c971", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::NodeId;\n use syntax::source_map::Span;\n use crate::utils::span_lint;"}, {"sha": "56b99aa9449b77d81931ad6667beeaa8ddc56d7a", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, Lint};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n@@ -147,7 +147,7 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n }\n \n // FIXME: #600\n-#[allow(while_let_on_iterator)]\n+#[allow(clippy::while_let_on_iterator)]\n fn check_variant(\n     cx: &EarlyContext<'_>,\n     threshold: u64,"}, {"sha": "b6b342044806f5f66686617d9c917029693abaef", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use crate::utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for equal operands to comparison, logical and\n@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                 BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ge | BinOpKind::Gt => (cx.tcx.lang_items().ord_trait(), true),\n             };\n             if let Some(trait_id) = trait_id {\n-                #[allow(match_same_arms)]\n+                #[allow(clippy::match_same_arms)]\n                 match (&left.node, &right.node) {\n                     // do not suggest to dereference literals\n                     (&ExprKind::Lit(..), _) | (_, &ExprKind::Lit(..)) => {},"}, {"sha": "5b61a9fd8838ee17b5b05c789f01e7075bfb19ac", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant_simple, Constant};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::source_map::Span;\n use crate::utils::{in_macro, span_lint};\n "}, {"sha": "282149f81f9ea6a791beade4f582dd9b1f781eb8", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::*;\n use rustc::hir::intravisit as visit;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt_, Categorization};\n use rustc::ty::{self, Ty};"}, {"sha": "c4ffc70dbfd3d7336b592ccaa8b61a9fa1966051", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use rustc::hir::*;\n use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};"}, {"sha": "72abbddf1418a746ba2d6531b5055ca95bd0b3a1", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::ty;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast;\n use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};"}, {"sha": "e5809371e8397f6b6a83967cef55e6efb8db9b0f", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::TyKind;\n use std::f32;"}, {"sha": "77c6c1a4ad715edb70450cbd9926ff9822d73e86", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n use crate::utils::opt_def_id;"}, {"sha": "88eb880311e43a839ff527abf81c44f51498d661", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::ty;"}, {"sha": "c10d554660a733c1c2b5dc51c723ec52043f6080", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use syntax::ast::LitKind;"}, {"sha": "8b20aeed108c35b7285fe2081a4def85dd70b8dd", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast;\n use crate::utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n use syntax::ptr::P;"}, {"sha": "c170b0a1e152d407edd0e9068733ec74a0a64d33", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@ use matches::matches;\n use rustc::hir::intravisit;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use rustc::hir::def::Def;\n use std::collections::HashSet;"}, {"sha": "6adf2cd681490ab0d6b664ad5ed1a70eb79fdbd2", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use syntax::ast::NodeId;\n use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};"}, {"sha": "052275d7a4533e3cf2160e570dff320009028a2f", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant_simple, Constant};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::source_map::Span;\n use crate::utils::{in_macro, snippet, span_lint, unsext, clip};\n use rustc::ty;\n@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     }\n }\n \n-#[allow(cast_possible_wrap)]\n+#[allow(clippy::cast_possible_wrap)]\n fn check(cx: &LateContext<'_, '_>, e: &Expr, m: i8, span: Span, arg: Span) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, cx.tables, e) {\n         let check = match cx.tables.expr_ty(e).sty {"}, {"sha": "253d295567c4a4934be080bf834ec07ae526dc57", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n "}, {"sha": "3bfde1fd20d40bf85ddbf45404bcfdf0a137f256", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n //! on the condition\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n \n use crate::utils::span_help_and_lint;"}, {"sha": "bca4844aae7ed0eabb53afd981a1e9ff2ab385b3", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -6,7 +6,7 @@ use crate::utils::higher;\n use crate::utils::higher::Range;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use syntax::ast::RangeLimits;\n "}, {"sha": "208f2ec53797ada09a00a00f5d66c6b51fc7e571", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use super::utils::{get_arg_name, match_var, remove_blocks, snippet, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for matches being used to destructure a single-variant enum"}, {"sha": "bb33c48fc3fb8a6823c8c81bad1016cde1226444", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, paths, span_lint};\n \n /// **What it does:** Checks for iteration that is guaranteed to be infinite."}, {"sha": "4ca812e56bd206eb5914d5b1412b28955632ff41", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use std::collections::HashMap;\n use std::default::Default;\n use syntax_pos::Span;"}, {"sha": "4dcc4ed473d18b78f5cbdb92b81cb5a78144f4bd", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! checks for `#[inline]` on trait methods without bodies\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use syntax::ast::{Attribute, Name};\n use crate::utils::span_lint_and_then;"}, {"sha": "f94461b75a587324869158f86b3864e4f7d2d723", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! lint on blocks unnecessarily using >= with a + 1 or - 1\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n@@ -53,7 +53,7 @@ enum Side {\n }\n \n impl IntPlusOne {\n-    #[allow(cast_sign_loss)]\n+    #[allow(clippy::cast_sign_loss)]\n     fn check_lit(&self, lit: &Lit, target_value: i128) -> bool {\n         if let LitKind::Int(value, ..) = lit.node {\n             return value == (target_value as u128);"}, {"sha": "34a8939e104473ff71496d372510f6f8b6d78556", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc::hir::*;"}, {"sha": "9fe70882c867b4a0cf5c0af580d38ef624ed02b1", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n \n use matches::matches;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use crate::utils::{in_macro, span_lint};\n "}, {"sha": "63201bb2e45ca229243cbdbaa26f2b0b06d75c7c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! lint when there is a large size difference between variants on an enum\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use crate::utils::{snippet_opt, span_lint_and_then};\n use rustc::ty::layout::LayoutOf;"}, {"sha": "4c9c219828da2b4ccecd907c2202890936c6f276", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use std::collections::HashSet;\n use syntax::ast::{Lit, LitKind, Name};"}, {"sha": "8b4e2b0dec8085bc8cf27b429ec1d87e90b6225d", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::BindingAnnotation;"}, {"sha": "adc4f76fef94900be910a14ea2642242633d8bbf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -5,9 +5,10 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(range_contains)]\n-#![allow(unknown_lints, shadow_reuse, missing_docs_in_private_items)]\n+#![allow(unknown_lints, clippy::shadow_reuse, clippy::missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n #![feature(macro_at_most_once_rep)]\n+#![feature(tool_lints)]\n #![warn(rust_2018_idioms)]\n \n use toml;\n@@ -17,34 +18,34 @@ use rustc;\n \n macro_rules! declare_clippy_lint {\n     { pub $name:tt, style, $description:tt } => {\n-        declare_lint! { pub $name, Warn, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Warn, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, correctness, $description:tt } => {\n-        declare_lint! { pub $name, Deny, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Deny, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, complexity, $description:tt } => {\n-        declare_lint! { pub $name, Warn, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Warn, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, perf, $description:tt } => {\n-        declare_lint! { pub $name, Warn, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Warn, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, pedantic, $description:tt } => {\n-        declare_lint! { pub $name, Allow, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Allow, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, restriction, $description:tt } => {\n-        declare_lint! { pub $name, Allow, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Allow, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, cargo, $description:tt } => {\n-        declare_lint! { pub $name, Allow, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Allow, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, nursery, $description:tt } => {\n-        declare_lint! { pub $name, Allow, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Allow, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, internal, $description:tt } => {\n-        declare_lint! { pub $name, Allow, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Allow, $description, report_in_external_macro: true }\n     };\n     { pub $name:tt, internal_warn, $description:tt } => {\n-        declare_lint! { pub $name, Warn, $description, report_in_external_macro: true }\n+        declare_tool_lint! { pub clippy::$name, Warn, $description, report_in_external_macro: true }\n     };\n }\n \n@@ -411,7 +412,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box non_copy_const::NonCopyConst);\n     reg.register_late_lint_pass(box ptr_offset_with_cast::Pass);\n \n-    reg.register_lint_group(\"clippy_restriction\", vec![\n+    reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n@@ -434,7 +435,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         write::USE_DEBUG,\n     ]);\n \n-    reg.register_lint_group(\"clippy_pedantic\", vec![\n+    reg.register_lint_group(\"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n         attrs::INLINE_ALWAYS,\n         copies::MATCH_SAME_ARMS,\n         copy_iterator::COPY_ITERATOR,\n@@ -472,13 +473,13 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         use_self::USE_SELF,\n     ]);\n \n-    reg.register_lint_group(\"clippy_internal\", vec![\n+    reg.register_lint_group(\"clippy::internal\", Some(\"clippy_internal\"), vec![\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n         utils::internal_lints::DEFAULT_HASH_TYPES,\n     ]);\n \n-    reg.register_lint_group(\"clippy\", vec![\n+    reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec![\n         approx_const::APPROX_CONSTANT,\n         assign_ops::ASSIGN_OP_PATTERN,\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n@@ -693,7 +694,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n \n-    reg.register_lint_group(\"clippy_style\", vec![\n+    reg.register_lint_group(\"clippy::style\", Some(\"clippy_style\"), vec![\n         assign_ops::ASSIGN_OP_PATTERN,\n         bit_mask::VERBOSE_BIT_MASK,\n         blacklisted_name::BLACKLISTED_NAME,\n@@ -777,7 +778,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         write::WRITELN_EMPTY_STRING,\n     ]);\n \n-    reg.register_lint_group(\"clippy_complexity\", vec![\n+    reg.register_lint_group(\"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         booleans::NONMINIMAL_BOOL,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n@@ -845,7 +846,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n \n-    reg.register_lint_group(\"clippy_correctness\", vec![\n+    reg.register_lint_group(\"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n         approx_const::APPROX_CONSTANT,\n         attrs::DEPRECATED_SEMVER,\n         attrs::USELESS_ATTRIBUTE,\n@@ -899,7 +900,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         unused_io_amount::UNUSED_IO_AMOUNT,\n     ]);\n \n-    reg.register_lint_group(\"clippy_perf\", vec![\n+    reg.register_lint_group(\"clippy::perf\", Some(\"clippy_perf\"), vec![\n         bytecount::NAIVE_BYTECOUNT,\n         entry::MAP_ENTRY,\n         escape::BOXED_LOCAL,\n@@ -917,11 +918,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         vec::USELESS_VEC,\n     ]);\n \n-    reg.register_lint_group(\"clippy_cargo\", vec![\n+    reg.register_lint_group(\"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n         multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n     ]);\n \n-    reg.register_lint_group(\"clippy_nursery\", vec![\n+    reg.register_lint_group(\"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n         fallible_impl_from::FALLIBLE_IMPL_FROM,\n         mutex_atomic::MUTEX_INTEGER,\n@@ -933,7 +934,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n \n // only exists to let the dogfood integration test works.\n // Don't run clippy as an executable directly\n-#[allow(dead_code, print_stdout)]\n+#[allow(dead_code, clippy::print_stdout)]\n fn main() {\n     panic!(\"Please use the cargo-clippy executable\");\n }"}, {"sha": "beec9bac9403e786730f430cc0ab174add484c1d", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use crate::reexport::*;\n use matches::matches;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::hir::intravisit::*;"}, {"sha": "dcffba80b3b6cd7ced1f00fab34025bd3b268b60", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@\n //! floating-point literal expressions.\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast::*;\n use syntax_pos;"}, {"sha": "51e6327e728b4310498b2ab11870440d54c5df70", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def::Def;\n use rustc::hir::def_id;\n use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::middle::region;\n // use rustc::middle::region::CodeExtent;"}, {"sha": "1a501b39eb55530f163300d0bbe99743ab1af0c1", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::ty;"}, {"sha": "90f149a1c01d380768e5c700949e80c62e82b858", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_errors::Applicability;"}, {"sha": "3ecf5d3b5b854818c111f2714240c1648eb2ccff", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use std::cmp::Ordering;"}, {"sha": "8a56dccad2dd9b8f833dc9ef19e95a55d6d2e8a7", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::{Expr, ExprKind};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n "}, {"sha": "f428a498b4dab8658b61a007f8bd40783dbbe50e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use matches::matches;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, Lint, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use rustc::hir::def::Def;\n@@ -714,7 +714,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    #[allow(cyclomatic_complexity)]\n+    #[allow(clippy::cyclomatic_complexity)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if in_macro(expr.span) {\n             return;\n@@ -922,7 +922,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n     }\n \n     /// Check for `*or(foo())`.\n-    #[allow(too_many_arguments)]\n+    #[allow(clippy::too_many_arguments)]\n     fn check_general_case(\n         cx: &LateContext<'_, '_>,\n         name: &str,"}, {"sha": "bbbc022f08dd636c9a30c634e309908f063ed828", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@ use crate::consts::{constant_simple, Constant};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use std::cmp::Ordering;\n \n /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are"}, {"sha": "302af13630b07d623565281f9cae207261952574", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@ use matches::matches;\n use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use syntax::source_map::{ExpnFormat, Span};"}, {"sha": "c00b3d93c47529d80801f7dccae59cf65f7614dc", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, LintContext, in_external_macro};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use std::collections::HashMap;\n use std::char;"}, {"sha": "f56a8fcd8b5c33a22fdcff59ea2bb187ae2ac46d", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -20,7 +20,7 @@\n \n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use syntax::ast;\n use syntax::attr;"}, {"sha": "bf88caa6ab9e030bc1ad821a5eac3b5458fc745f", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -11,7 +11,7 @@\n \n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast;\n use syntax::source_map::Span;\n use crate::utils::span_lint;"}, {"sha": "a2ed6a1dea10014f4bce9fce9f1cc8f04676aa87", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! lint on multiple versions of a crate being used\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use crate::utils::span_lint;\n "}, {"sha": "ea3d68dfc8333f7fae820cdd948d1d5397b26911", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use crate::utils::{higher, span_lint};\n "}, {"sha": "97287aa833f4a1bf0ad577b2a3722dc9bb349bb0", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n use rustc::hir::*;"}, {"sha": "cb400ee4ee399d6a893437e95cb75b6b478a14ad", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty::{self, Ty};\n use rustc::hir::Expr;\n use syntax::ast;"}, {"sha": "5b9a479c1fc6c0f2f88e64043fd6ac089de63d56", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use syntax::ast::LitKind;\n use syntax::source_map::Spanned;"}, {"sha": "a194cb2c61b896777723c27d1ecb7de07ffafc7b", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, MutImmutable, Pat, PatKind};\n use rustc::ty;"}, {"sha": "4905dbc8e6b0feda2165828a3fc328ca2e47d886", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n use crate::utils::{in_macro, snippet, span_lint_and_then};"}, {"sha": "e14cd0fea897d4cba1a6d013500ade0479107822", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -28,7 +28,7 @@\n //!\n //! This lint is **warn** by default.\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast;\n use syntax::source_map::{original_sp, DUMMY_SP};\n use std::borrow::Cow;"}, {"sha": "340fa4d0ee0dada7622a8d1dbe712a099ad53bfa", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -2,7 +2,7 @@ use matches::matches;\n use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, RegionKind, TypeFoldable};\n use rustc::traits;"}, {"sha": "dccb7f2e0373b0c4c99363097babfabc1eda1c8e", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::ty;\n use rustc::hir::{Expr, ExprKind};\n use crate::utils::span_lint;"}, {"sha": "db61ea375c38a5f2c9b5ad034f0a5ebe8223ac95", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n \n use crate::utils::{self, paths, span_lint};"}, {"sha": "93a83fe97ba78963348516cab49299ae1e9d1cc2", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::source_map::{Span, Spanned};\n \n@@ -32,7 +32,7 @@ impl LintPass for NegMultiply {\n     }\n }\n \n-#[allow(match_same_arms)]\n+#[allow(clippy::match_same_arms)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref l, ref r) = e.node {"}, {"sha": "493e8d0f4ce5441212ffdd5806a0f9e68775416c", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use syntax::source_map::Span;"}, {"sha": "09a273307503cad89f0333199e2dea26c10d72af", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::def::Def;\n use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};"}, {"sha": "deb088d3ea4bff79c259b55e8bd4f393442a6a16", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **deny** by default.\n \n use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::ty::{self, TypeFlags};"}, {"sha": "5e106cac96759f87bd47ceecf8104269cc956fbd", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LintArray, LintPass, EarlyContext, EarlyLintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;\n use syntax::ast::*;"}, {"sha": "651ed44110fb1eb1b7b43244a67d7b9c8e33c2b4", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};"}, {"sha": "b5459059e90cda85f45c1fd64ef592dea9aa5dfb", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::LitKind;\n use syntax::source_map::{Span, Spanned};\n use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};"}, {"sha": "d33ef5e05d64015ef5c3b6992e44212b8857b2ad", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use crate::utils::{span_lint, SpanlessEq};"}, {"sha": "7a7fa3c456d960ad694cddd0f7e0e2a828416b8a", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast::LitKind;\n use syntax::ptr::P;"}, {"sha": "8b2e5f9c3569af1dbdb2bb4ad60c2d39819cdb42", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use crate::utils::{is_automatically_derived, span_lint};"}, {"sha": "0978a6b7d94929bf9d3b07c2e09726c411dab725", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use syntax::source_map::Spanned;\n use crate::utils::{in_macro, snippet, span_lint_and_sugg};"}, {"sha": "94bbfb0e5b9d84835df98de2c7b3fc18cd091a60", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ use std::borrow::Cow;\n use rustc::hir::*;\n use rustc::hir::QPath;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use syntax::ast::NodeId;"}, {"sha": "250a11dab88943248270397036f1abffded378ac", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,4 @@\n-use rustc::{declare_lint, hir, lint, lint_array};\n+use rustc::{declare_tool_lint, hir, lint, lint_array};\n use crate::utils;\n use std::fmt;\n "}, {"sha": "3134f14b194b5a65cb748fe2c85b69cc3b0ae29a", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::hir::def::Def;"}, {"sha": "95fd14162ace99df72f27fe70031233a50d8b72d", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use syntax::ast::RangeLimits;"}, {"sha": "579d2ad1423b05470ff11cff764a37dca3a47e80", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use crate::utils::{span_lint_and_sugg};\n "}, {"sha": "98de8989597641d2d3eca927a34f9418148d060d", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::{Expr, ExprKind, UnOp};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use crate::utils::{snippet, span_lint_and_sugg};\n "}, {"sha": "6ac40c5a1d26a03f194384ddf9b0deaa80a05c2a", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use regex_syntax;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use std::collections::HashSet;\n use syntax::ast::{LitKind, NodeId, StrStyle};"}, {"sha": "aaea8b6dd0ec46c7f754e80b98f9b2c5ea09dc6e", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::Def;"}, {"sha": "ddc0a9719a80eee23c7c09e785127a20df5f3d4b", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use syntax::ast;\n use syntax::source_map::Span;"}, {"sha": "0f09988c2508598890d586366ddff428200acf84", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use crate::utils::{get_trait_def_id, paths, span_lint};\n "}, {"sha": "d552c01679a8a29d86b8ccf1dae3b5c2c89212cb", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use crate::reexport::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::ty;"}, {"sha": "70d90a8fb768db104ec9a13b518eddc90b79b76c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::source_map::Spanned;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};"}, {"sha": "9f9b279a6c57a3ff5f555d2203aa13d9457dbb1c", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "9ae6ec483838911785612051a3df81046f18cbdd", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n use matches::matches;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty;\n use crate::utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};"}, {"sha": "cb9223029642ab1be43c6fb72c6feb8d61126af7", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::{Expr, ExprKind};\n use crate::utils::is_adjusted;\n use crate::utils::span_lint;"}, {"sha": "6e82bee277fe5e5fa6230a593335dcdbac05f94c", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use rustc::hir::*;"}, {"sha": "70a93e7f78a11fae6690b29de6102a81b4b55197", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -5,7 +5,7 @@ use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::TyKind;\n use rustc::session::config::Config as SessionConfig;"}, {"sha": "400a06c061e368c6ced977b9763f1191362a0e87", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, in_external_macro, LintContext};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n use rustc::ty::layout::LayoutOf;\n@@ -1525,7 +1525,7 @@ enum FullInt {\n }\n \n impl FullInt {\n-    #[allow(cast_sign_loss)]\n+    #[allow(clippy::cast_sign_loss)]\n     fn cmp_s_u(s: i128, u: u128) -> Ordering {\n         if s < 0 {\n             Ordering::Less\n@@ -1744,7 +1744,7 @@ impl LintPass for ImplicitHasher {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n-    #[allow(cast_possible_truncation)]\n+    #[allow(clippy::cast_possible_truncation)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         use syntax_pos::BytePos;\n "}, {"sha": "01c4cd83ce07ac1cc740d96198817e701b8a720c", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use syntax::ast::{LitKind, NodeId};\n use syntax::source_map::Span;"}, {"sha": "7ef235e9297af7f4726dcc3c9060d218e73d67b7", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use syntax::source_map::Span;\n use syntax::symbol::LocalInternedString;"}, {"sha": "c5507fcaca4f612695fdf35e0bef76ac53b5d4ad", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir;\n use crate::utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n "}, {"sha": "71d9520c05be47e78130eedb7649437fc2915681", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use std::collections::HashMap;"}, {"sha": "a1d24f64300f5000945ad12038f9f24558f7576c", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n \n use crate::utils::{in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};"}, {"sha": "550f88c895e3d17856f32e895423926c8d1145a3", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax_pos::symbol::keywords::SelfType;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a"}, {"sha": "fb131b9086a73178d23d6ca770ad87f19ef3917f", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,10 +1,10 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-#![allow(print_stdout, use_debug)]\n+#![allow(clippy::print_stdout, clippy::use_debug)]\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir;\n use rustc::hir::{Expr, ExprKind, QPath, TyKind, Pat, PatKind, BindingAnnotation, StmtKind, DeclKind, Stmt};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};"}, {"sha": "31e20f37e20dfab2df53f26d9dfcdbd5157d4c50", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n //! Utility functions about comparison operators.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use rustc::hir::{BinOpKind, Expr};\n "}, {"sha": "a7e73d85cf0fee3ae829251f1b0f3ac0e21e1600", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n //! Read configurations files.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use lazy_static::lazy_static;\n use std::{env, fmt, fs, io, path};"}, {"sha": "b63be9b86c8fb9bb31f50c56f9cfcb1fb6fe2977", "filename": "clippy_lints/src/utils/constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconstants.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n //! This module contains some useful constants.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n /// List of the built-in types names.\n ///"}, {"sha": "42b37568a99bccaf0a5168f19e55679b223d85d6", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n //! This module contains functions for retrieve the original AST from lowered\n //! `hir`.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use if_chain::if_chain;\n use rustc::{hir, ty};"}, {"sha": "93d73ca707e661c35c584aedb47e7658960ee390", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n         }.hash(&mut self.s);\n     }\n \n-    #[allow(many_single_char_names)]\n+    #[allow(clippy::many_single_char_names)]\n     pub fn hash_expr(&mut self, e: &Expr) {\n         if let Some(e) = constant_simple(self.cx, self.tables, e) {\n             return e.hash(&mut self.s);"}, {"sha": "b9a0435eb35b2660773319b8987993e273637c9d", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,9 @@\n-#![allow(print_stdout, use_debug)]\n+#![allow(clippy::print_stdout, clippy::use_debug)]\n \n //! checks for attributes\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir;\n use rustc::hir::print;\n use syntax::ast::Attribute;"}, {"sha": "7b2d2f15996e48321703a6d3aaf6157be28df26d", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass, EarlyContext, EarlyLintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use rustc::hir::*;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -149,13 +149,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n \n     fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n         for (lint_name, &lint_span) in &self.declared_lints {\n-            // When using the `declare_lint!` macro, the original `lint_span`'s\n+            // When using the `declare_tool_lint!` macro, the original `lint_span`'s\n             // file points to \"<rustc macros>\".\n             // `compiletest-rs` thinks that's an error in a different file and\n             // just ignores it. This causes the test in compile-fail/lint_pass\n             // not able to capture the error.\n             // Therefore, we need to climb the macro expansion tree and find the\n-            // actual span that invoked `declare_lint!`:\n+            // actual span that invoked `declare_tool_lint!`:\n             let lint_span = lint_span\n                 .ctxt()\n                 .outer()"}, {"sha": "8efee6cd964e35fc578b762415b70a662e857132", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,5 @@\n //! Contains utility functions to generate suggestions.\n-#![deny(missing_docs_in_private_items)]\n-// currently ignores lifetimes and generics\n-#![allow(use_self)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use matches::matches;\n use rustc::hir;\n@@ -40,7 +38,7 @@ impl Display for Sugg<'_> {\n     }\n }\n \n-#[allow(wrong_self_convention)] // ok, because of the function `as_ty` method\n+#[allow(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext<'_, '_>, expr: &hir::Expr) -> Option<Self> {"}, {"sha": "4cbefc29b9cccd0b467b766c5ffb75c6522b2af6", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::ty::{self, Ty};\n use syntax::source_map::Span;"}, {"sha": "5d32157238bbabd724845fd4c1c12f3787f5d455", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::*;\n use syntax::tokenstream::{ThinTokenStream, TokenStream};\n use syntax::parse::{token, parser};"}, {"sha": "73c9e64d2cb95f82be94cb9879147a59c820feef", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::{constant_simple, Constant};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use rustc::hir::*;\n use crate::utils::span_help_and_lint;"}, {"sha": "26ff846177bb0486331ee3dda5ee9cb35a7c51ed", "filename": "src/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,13 +1,14 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-#![allow(unknown_lints, missing_docs_in_private_items)]\n+#![feature(tool_lints)]\n+#![allow(unknown_lints, clippy::missing_docs_in_private_items)]\n \n use rustc_driver::{self, driver::CompileController, Compilation};\n use rustc_plugin;\n use std::process::{exit, Command};\n \n-#[allow(print_stdout)]\n+#[allow(clippy::print_stdout)]\n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }\n@@ -118,8 +119,8 @@ pub fn main() {\n                     ls.register_late_pass(Some(sess), true, pass);\n                 }\n \n-                for (name, to) in lint_groups {\n-                    ls.register_group(Some(sess), true, name, to);\n+                for (name, (to, deprecated_name)) in lint_groups {\n+                    ls.register_group(Some(sess), true, name, deprecated_name, to);\n                 }\n                 clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n "}, {"sha": "a7167ac10de4f4a599c28adef05934570d96e056", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,9 @@\n // error-pattern:cargo-clippy\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n+#![feature(tool_lints)]\n #![allow(unknown_lints)]\n-#![allow(missing_docs_in_private_items)]\n+#![allow(clippy::missing_docs_in_private_items)]\n #![warn(rust_2018_idioms)]\n \n use rustc_plugin::Registry;"}, {"sha": "12c07f60a11c1eff59b57a6621644da5d37795c2", "filename": "src/main.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,8 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-#![allow(unknown_lints, missing_docs_in_private_items)]\n+#![feature(tool_lints)]\n+#![allow(unknown_lints, clippy::missing_docs_in_private_items)]\n \n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n \n@@ -28,12 +29,12 @@ it to allow or deny lints from the code, eg.:\n     #[cfg_attr(feature = \"cargo-clippy\", allow(needless_lifetimes))]\n \"#;\n \n-#[allow(print_stdout)]\n+#[allow(clippy::print_stdout)]\n fn show_help() {\n     println!(\"{}\", CARGO_CLIPPY_HELP);\n }\n \n-#[allow(print_stdout)]\n+#[allow(clippy::print_stdout)]\n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }"}, {"sha": "2c5c90683cced053fecf8980f8c99ff71b684b63", "filename": "tests/run-pass/associated-constant-ice.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fassociated-constant-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fassociated-constant-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fassociated-constant-ice.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,3 @@\n-\n-\n-\n pub trait Trait {\n     const CONSTANT: u8;\n }"}, {"sha": "6014558a184f2104d288cdd1149cf27b40bf0847", "filename": "tests/run-pass/enum-glob-import-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fenum-glob-import-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fenum-glob-import-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenum-glob-import-crate.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![deny(clippy)]\n+#![deny(clippy::all)]\n #![allow(unused_imports)]\n \n use std::*;"}, {"sha": "fcda3814e4a8dcf87e5767afd4c9806e46e262f7", "filename": "tests/run-pass/ice-1588.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-1588.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-1588.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1588.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(clippy)]\n+#![allow(clippy::all)]\n \n fn main() {\n     match 1 {"}, {"sha": "43d6bd8bfbc1a7601d45b9f254d8260f32ae9a5e", "filename": "tests/run-pass/ice-1969.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-1969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-1969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-1969.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(clippy)]\n+#![allow(clippy::all)]\n \n fn main() { }\n "}, {"sha": "c6793a78529a62afe0179810764c18040fc6ca43", "filename": "tests/run-pass/ice-2499.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-2499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-2499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2499.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![allow(dead_code, char_lit_as_u8, needless_bool)]\n+#![feature(tool_lints)]\n+\n+#![allow(dead_code, clippy::char_lit_as_u8, clippy::needless_bool)]\n \n /// Should not trigger an ICE in `SpanlessHash` / `consts::constant`\n ///"}, {"sha": "2e9c6d527c4453a6124cf60ac2132762652d4db7", "filename": "tests/run-pass/ice-2760.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-2760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-2760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2760.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,7 @@\n-#![allow(unused_variables, blacklisted_name, needless_pass_by_value, dead_code)]\n+#![feature(tool_lints)]\n+\n+#![allow(unused_variables, clippy::blacklisted_name,\n+         clippy::needless_pass_by_value, dead_code)]\n \n // This should not compile-fail with:\n //"}, {"sha": "6b14a2b5e03b6d36370bd53d90144d58847ef6c2", "filename": "tests/run-pass/ice-2774.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-2774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-2774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-2774.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,3 +1,5 @@\n+#![feature(tool_lints)]\n+\n use std::collections::HashSet;\n \n // See https://github.com/rust-lang-nursery/rust-clippy/issues/2774\n@@ -10,7 +12,7 @@ pub struct Bar {\n #[derive(Eq, PartialEq, Debug, Hash)]\n pub struct Foo {}\n \n-#[allow(implicit_hasher)]\n+#[allow(clippy::implicit_hasher)]\n // This should not cause a 'cannot relate bound region' ICE\n pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {\n     let mut foos = HashSet::new();\n@@ -19,7 +21,7 @@ pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {\n     );\n }\n \n-#[allow(implicit_hasher)]\n+#[allow(clippy::implicit_hasher)]\n // Also this should not cause a 'cannot relate bound region' ICE\n pub fn add_barfoos_to_foos2(bars: &HashSet<&Bar>) {\n     let mut foos = HashSet::new();"}, {"sha": "3992af2c2802b4d6394e5d3f49a564d94bf38d1a", "filename": "tests/run-pass/ice-700.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice-700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-700.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![deny(clippy)]\n+#![deny(clippy::all)]\n \n fn core() {}\n "}, {"sha": "3d25aa50499930b5ba7b8427e9b74b31ad908129", "filename": "tests/run-pass/ice_exacte_size.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice_exacte_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fice_exacte_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice_exacte_size.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![deny(clippy)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::all)]\n \n #[allow(dead_code)]\n struct Foo;"}, {"sha": "b7536e250285ca9abad2fa8e529ccd18cde814e4", "filename": "tests/run-pass/if_same_then_else.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fif_same_then_else.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![deny(if_same_then_else)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::if_same_then_else)]\n \n fn main() {}\n "}, {"sha": "59b939f3e018655188c57d9c6ea7c6fa36fb054d", "filename": "tests/run-pass/match_same_arms_const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fmatch_same_arms_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fmatch_same_arms_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmatch_same_arms_const.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![deny(match_same_arms)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::match_same_arms)]\n \n const PRICE_OF_SWEETS: u32 = 5;\n const PRICE_OF_KINDNESS: u32 = 0;"}, {"sha": "bfb9cfc71703700a5ee4d02dc3484c1ee0601965", "filename": "tests/run-pass/mut_mut_macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fmut_mut_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fmut_mut_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmut_mut_macro.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![deny(mut_mut, zero_ptr, cmp_nan)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::mut_mut, clippy::zero_ptr, clippy::cmp_nan)]\n #![allow(dead_code)]\n \n // compiletest + extern crates doesn't work together"}, {"sha": "204968e48d0ac055ecdd9765d3b2d0657cd56e82", "filename": "tests/run-pass/needless_borrow_fp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fneedless_borrow_fp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fneedless_borrow_fp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fneedless_borrow_fp.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#[deny(clippy)]\n+#![feature(tool_lints)]\n+\n+#[deny(clippy::all)]\n \n #[derive(Debug)]\n pub enum Error {"}, {"sha": "f727b2547e3c5c107fc7963f2e6e41a0b1153890", "filename": "tests/run-pass/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fneedless_lifetimes_impl_trait.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,6 @@\n+#![feature(tool_lints)]\n \n-#![deny(needless_lifetimes)]\n+#![deny(clippy::needless_lifetimes)]\n #![allow(dead_code)]\n \n trait Foo {}"}, {"sha": "aa4e16d39498fe24fc73bf07779c6821e9fbbf01", "filename": "tests/run-pass/regressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregressions.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(blacklisted_name)]\n+#![allow(clippy::blacklisted_name)]\n \n pub fn foo(bar: *const u8) {\n     println!(\"{:#p}\", bar);"}, {"sha": "379a98fc3ecf8f01b40f36495666e7d1af08a8f8", "filename": "tests/run-pass/single-match-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fsingle-match-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fsingle-match-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsingle-match-else.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(single_match_else)]\n+#![warn(clippy::single_match_else)]\n \n fn main() {\n     let n = match (42, 43) {"}, {"sha": "73f48a96e777c32fba07ebcdbb8a29617eed5c92", "filename": "tests/run-pass/used_underscore_binding_macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Frun-pass%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fused_underscore_binding_macro.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,12 +1,13 @@\n+#![feature(tool_lints)]\n \n-\n+#![allow(clippy::useless_attribute)] //issue #2910\n \n #[macro_use]\n extern crate serde_derive;\n \n /// Test that we do not lint for unused underscores in a `MacroAttribute`\n /// expansion\n-#[deny(used_underscore_binding)]\n+#[deny(clippy::used_underscore_binding)]\n #[derive(Deserialize)]\n struct MacroAttributesTest {\n     _foo: u32,"}, {"sha": "fe533f521d035073a60679b0c72900e3623c08ad", "filename": "tests/ui-toml/toml_blacklist/conf_french_blacklisted_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,10 +1,10 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(dead_code)]\n-#![allow(single_match)]\n+#![allow(clippy::single_match)]\n #![allow(unused_variables)]\n-#![warn(blacklisted_name)]\n+#![warn(clippy::blacklisted_name)]\n \n fn test(toto: ()) {}\n "}, {"sha": "4229b711b0d5de71553fff03cc9c5cc49621484e", "filename": "tests/ui-toml/toml_blacklist/conf_french_blacklisted_name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: use of a blacklisted/placeholder name `toto`\n 9 | fn test(toto: ()) {}\n   |         ^^^^\n   |\n-  = note: `-D blacklisted-name` implied by `-D warnings`\n+  = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n \n error: use of a blacklisted/placeholder name `toto`\n   --> $DIR/conf_french_blacklisted_name.rs:12:9"}, {"sha": "074ca064ab5c2661ae0131710b73a2ab6be7a0f2", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,5 @@\n-#![allow(many_single_char_names)]\n+#![feature(tool_lints)]\n+#![allow(clippy::many_single_char_names)]\n \n #[derive(Copy, Clone)]\n struct Foo(u8);"}, {"sha": "cf2f15a68e674ef2d1e03669826eb7b5224f652c", "filename": "tests/ui-toml/toml_trivially_copy/test.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,15 +1,15 @@\n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/test.rs:12:11\n+  --> $DIR/test.rs:13:11\n    |\n-12 | fn bad(x: &u16, y: &Foo) {\n+13 | fn bad(x: &u16, y: &Foo) {\n    |           ^^^^ help: consider passing by value instead: `u16`\n    |\n-   = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n+   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/test.rs:12:20\n+  --> $DIR/test.rs:13:20\n    |\n-12 | fn bad(x: &u16, y: &Foo) {\n+13 | fn bad(x: &u16, y: &Foo) {\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: aborting due to 2 previous errors"}, {"sha": "d08c8008ec9a070afa2ff9a2b0362d357777ba1d", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(absurd_extreme_comparisons)]\n-#![allow(unused, eq_op, no_effect, unnecessary_operation, needless_pass_by_value)]\n+#![warn(clippy::absurd_extreme_comparisons)]\n+#![allow(unused, clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::needless_pass_by_value)]\n \n fn main() {\n     const Z: u32 = 0;\n@@ -27,7 +27,7 @@ fn main() {\n     b >= true;\n     false > b;\n     u > 0; // ok\n-    // this is handled by unit_cmp\n+    // this is handled by clippy::unit_cmp\n     () < {};\n }\n "}, {"sha": "2e5ebec757316e30e870715e605499ed268a8bc1", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: this comparison involving the minimum or maximum element for this type co\n 10 |     u <= 0;\n    |     ^^^^^^\n    |\n-   = note: `-D absurd-extreme-comparisons` implied by `-D warnings`\n+   = note: `-D clippy::absurd-extreme-comparisons` implied by `-D warnings`\n    = help: because 0 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 0 instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n@@ -141,7 +141,7 @@ error: <-comparison of unit values detected. This will always be false\n 31 |     () < {};\n    |     ^^^^^^^\n    |\n-   = note: #[deny(unit_cmp)] on by default\n+   = note: #[deny(clippy::unit_cmp)] on by default\n \n error: aborting due to 18 previous errors\n "}, {"sha": "46ca2fbfb57e523e774d685324a059619ceffe60", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(approx_constant)]\n-#[allow(unused, shadow_unrelated, similar_names, unreadable_literal)]\n+#[warn(clippy::approx_constant)]\n+#[allow(unused, clippy::shadow_unrelated, clippy::similar_names, clippy::unreadable_literal)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "3ff016b9c40caee533f90d56aef3dea81041b6d0", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: approximate value of `f{32, 64}::consts::E` found. Consider using it dire\n 7 |     let my_e = 2.7182;\n   |                ^^^^^^\n   |\n-  = note: `-D approx-constant` implied by `-D warnings`\n+  = note: `-D clippy::approx-constant` implied by `-D warnings`\n \n error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n  --> $DIR/approx_const.rs:8:20"}, {"sha": "e7aa9a18b8a058241103968bb315af60661dcf46", "filename": "tests/ui/arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(integer_arithmetic, float_arithmetic)]\n-#![allow(unused, shadow_reuse, shadow_unrelated, no_effect, unnecessary_operation)]\n+#![warn(clippy::integer_arithmetic, clippy::float_arithmetic)]\n+#![allow(unused, clippy::shadow_reuse, clippy::shadow_unrelated, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let i = 1i32;\n     1 + i;"}, {"sha": "ee7a594fa158b6b1c9b995ddeafc9224daf71f54", "filename": "tests/ui/arithmetic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Farithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Farithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: integer arithmetic detected\n 8 |     1 + i;\n   |     ^^^^^\n   |\n-  = note: `-D integer-arithmetic` implied by `-D warnings`\n+  = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n \n error: integer arithmetic detected\n  --> $DIR/arithmetic.rs:9:5\n@@ -37,7 +37,7 @@ error: floating-point arithmetic detected\n 23 |     f * 2.0;\n    |     ^^^^^^^\n    |\n-   = note: `-D float-arithmetic` implied by `-D warnings`\n+   = note: `-D clippy::float-arithmetic` implied by `-D warnings`\n \n error: floating-point arithmetic detected\n   --> $DIR/arithmetic.rs:25:5"}, {"sha": "765dbb679905d15e5b0d9c053901bc1488b8c741", "filename": "tests/ui/assign_ops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #[allow(dead_code, unused_assignments)]\n-#[warn(assign_op_pattern)]\n+#[warn(clippy::assign_op_pattern)]\n fn main() {\n     let mut a = 5;\n     a = a + 1;"}, {"sha": "fe7ccff78051571173901b53bfcb94704bb8e099", "filename": "tests/ui/assign_ops.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,57 +1,57 @@\n error: manual implementation of an assign operation\n- --> $DIR/assign_ops.rs:5:5\n+ --> $DIR/assign_ops.rs:7:5\n   |\n-5 |     a = a + 1;\n+7 |     a = a + 1;\n   |     ^^^^^^^^^ help: replace it with: `a += 1`\n   |\n-  = note: `-D assign-op-pattern` implied by `-D warnings`\n+  = note: `-D clippy::assign-op-pattern` implied by `-D warnings`\n \n error: manual implementation of an assign operation\n- --> $DIR/assign_ops.rs:6:5\n+ --> $DIR/assign_ops.rs:8:5\n   |\n-6 |     a = 1 + a;\n+8 |     a = 1 + a;\n   |     ^^^^^^^^^ help: replace it with: `a += 1`\n \n error: manual implementation of an assign operation\n- --> $DIR/assign_ops.rs:7:5\n+ --> $DIR/assign_ops.rs:9:5\n   |\n-7 |     a = a - 1;\n+9 |     a = a - 1;\n   |     ^^^^^^^^^ help: replace it with: `a -= 1`\n \n error: manual implementation of an assign operation\n- --> $DIR/assign_ops.rs:8:5\n-  |\n-8 |     a = a * 99;\n-  |     ^^^^^^^^^^ help: replace it with: `a *= 99`\n+  --> $DIR/assign_ops.rs:10:5\n+   |\n+10 |     a = a * 99;\n+   |     ^^^^^^^^^^ help: replace it with: `a *= 99`\n \n error: manual implementation of an assign operation\n- --> $DIR/assign_ops.rs:9:5\n-  |\n-9 |     a = 42 * a;\n-  |     ^^^^^^^^^^ help: replace it with: `a *= 42`\n+  --> $DIR/assign_ops.rs:11:5\n+   |\n+11 |     a = 42 * a;\n+   |     ^^^^^^^^^^ help: replace it with: `a *= 42`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:10:5\n+  --> $DIR/assign_ops.rs:12:5\n    |\n-10 |     a = a / 2;\n+12 |     a = a / 2;\n    |     ^^^^^^^^^ help: replace it with: `a /= 2`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:11:5\n+  --> $DIR/assign_ops.rs:13:5\n    |\n-11 |     a = a % 5;\n+13 |     a = a % 5;\n    |     ^^^^^^^^^ help: replace it with: `a %= 5`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:12:5\n+  --> $DIR/assign_ops.rs:14:5\n    |\n-12 |     a = a & 1;\n+14 |     a = a & 1;\n    |     ^^^^^^^^^ help: replace it with: `a &= 1`\n \n error: manual implementation of an assign operation\n-  --> $DIR/assign_ops.rs:18:5\n+  --> $DIR/assign_ops.rs:20:5\n    |\n-18 |     s = s + \"bla\";\n+20 |     s = s + \"bla\";\n    |     ^^^^^^^^^^^^^ help: replace it with: `s += \"bla\"`\n \n error: aborting due to 9 previous errors"}, {"sha": "c3f5083bb1f9428f626c128e76e2a6c978e12aa8", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #[allow(unused_assignments)]\n-#[warn(misrefactored_assign_op, assign_op_pattern)]\n+#[warn(clippy::misrefactored_assign_op, clippy::assign_op_pattern)]\n fn main() {\n     let mut a = 5;\n     a += a + 1;"}, {"sha": "93528e505773b4f541e1ff9fdd2bc2cda30090ef", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: variable appears on both sides of an assignment operation\n 8 |     a += a + 1;\n   |     ^^^^^^^^^^\n   |\n-  = note: `-D misrefactored-assign-op` implied by `-D warnings`\n+  = note: `-D clippy::misrefactored-assign-op` implied by `-D warnings`\n help: Did you mean a = a + 1 or a = a + a + 1? Consider replacing it with\n   |\n 8 |     a += 1;"}, {"sha": "b1f0ca640aab6aa2cc5fe4da16a8ee393acbca30", "filename": "tests/ui/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(inline_always, deprecated_semver)]\n+#![warn(clippy::inline_always, clippy::deprecated_semver)]\n \n #[inline(always)]\n fn test_attr_lint() {"}, {"sha": "6b6ecd675b3ca241ec0daa61bc5eb4dd846349ad", "filename": "tests/ui/attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,15 +4,15 @@ error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usuall\n 6 | #[inline(always)]\n   | ^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D inline-always` implied by `-D warnings`\n+  = note: `-D clippy::inline-always` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n   --> $DIR/attrs.rs:27:14\n    |\n 27 | #[deprecated(since = \"forever\")]\n    |              ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D deprecated-semver` implied by `-D warnings`\n+   = note: `-D clippy::deprecated-semver` implied by `-D warnings`\n \n error: the since field must contain a semver-compliant version\n   --> $DIR/attrs.rs:30:14"}, {"sha": "46618fe4065431593f1ccb61c87079647ebeff1b", "filename": "tests/ui/author/matches.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fauthor%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fauthor%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: returning the result of a let binding from a block. Consider returning th\n 9 |             x\n   |             ^\n   |\n-  = note: `-D let-and-return` implied by `-D warnings`\n+  = note: `-D clippy::let-and-return` implied by `-D warnings`\n note: this expression can be directly returned\n  --> $DIR/matches.rs:8:21\n   |"}, {"sha": "4111f344b666208c63c5aba8d2f18fef2c80ba7b", "filename": "tests/ui/bit_masks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,11 +1,11 @@\n-\n+#![feature(tool_lints)]\n \n \n const THREE_BITS : i64 = 7;\n const EVEN_MORE_REDIRECTION : i64 = THREE_BITS;\n \n-#[warn(bad_bit_mask)]\n-#[allow(ineffective_bit_mask, identity_op, no_effect, unnecessary_operation)]\n+#[warn(clippy::bad_bit_mask)]\n+#[allow(clippy::ineffective_bit_mask, clippy::identity_op, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5;\n \n@@ -44,8 +44,8 @@ fn main() {\n     ineffective();\n }\n \n-#[warn(ineffective_bit_mask)]\n-#[allow(bad_bit_mask, no_effect, unnecessary_operation)]\n+#[warn(clippy::ineffective_bit_mask)]\n+#[allow(clippy::bad_bit_mask, clippy::no_effect, clippy::unnecessary_operation)]\n fn ineffective() {\n     let x = 5;\n "}, {"sha": "dcf3f241b4b57cfb5f7135032798795fcdf196d1", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,15 +4,15 @@ error: &-masking with zero\n 12 |     x & 0 == 0;\n    |     ^^^^^^^^^^\n    |\n-   = note: `-D bad-bit-mask` implied by `-D warnings`\n+   = note: `-D clippy::bad-bit-mask` implied by `-D warnings`\n \n error: this operation will always return zero. This is likely not the intended outcome\n   --> $DIR/bit_masks.rs:12:5\n    |\n 12 |     x & 0 == 0;\n    |     ^^^^^\n    |\n-   = note: #[deny(erasing_op)] on by default\n+   = note: #[deny(clippy::erasing_op)] on by default\n \n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:15:5\n@@ -86,7 +86,7 @@ error: ineffective bit mask: `x | 1` compared to `3`, is the same as x compared\n 52 |     x | 1 > 3;\n    |     ^^^^^^^^^\n    |\n-   = note: `-D ineffective-bit-mask` implied by `-D warnings`\n+   = note: `-D clippy::ineffective-bit-mask` implied by `-D warnings`\n \n error: ineffective bit mask: `x | 1` compared to `4`, is the same as x compared directly\n   --> $DIR/bit_masks.rs:53:5"}, {"sha": "4e2e5388c989e29056ae16e4e86f7ccdf5fe9c11", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![allow(dead_code, similar_names, single_match, toplevel_ref_arg, unused_mut, unused_variables)]\n-#![warn(blacklisted_name)]\n+#![allow(dead_code, clippy::similar_names, clippy::single_match, clippy::toplevel_ref_arg, unused_mut, unused_variables)]\n+#![warn(clippy::blacklisted_name)]\n \n fn test(foo: ()) {}\n "}, {"sha": "472401d5ed6046e25c63b505c97a1dcc8d1d19d0", "filename": "tests/ui/blacklisted_name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: use of a blacklisted/placeholder name `foo`\n 7 | fn test(foo: ()) {}\n   |         ^^^\n   |\n-  = note: `-D blacklisted-name` implied by `-D warnings`\n+  = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n \n error: use of a blacklisted/placeholder name `foo`\n   --> $DIR/blacklisted_name.rs:10:9"}, {"sha": "dd0e55034370a8cc1a1b27d7670ffa36b07be88d", "filename": "tests/ui/block_in_if_condition.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,10 +1,10 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(block_in_if_condition_expr)]\n-#![warn(block_in_if_condition_stmt)]\n-#![allow(unused, let_and_return)]\n-#![warn(nonminimal_bool)]\n+#![warn(clippy::block_in_if_condition_expr)]\n+#![warn(clippy::block_in_if_condition_stmt)]\n+#![allow(unused, clippy::let_and_return)]\n+#![warn(clippy::nonminimal_bool)]\n \n \n macro_rules! blocky {"}, {"sha": "41f1e9c1681663c88536d769bc88b8293dc76f71", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -8,7 +8,7 @@ error: in an 'if' condition, avoid complex blocks or closures with blocks; inste\n 33 | |     } {\n    | |_____^\n    |\n-   = note: `-D block-in-if-condition-stmt` implied by `-D warnings`\n+   = note: `-D clippy::block-in-if-condition-stmt` implied by `-D warnings`\n    = help: try\n            let res = {\n                let x = 3;\n@@ -24,7 +24,7 @@ error: omit braces around single expression condition\n 41 |     if { true } {\n    |        ^^^^^^^^\n    |\n-   = note: `-D block-in-if-condition-expr` implied by `-D warnings`\n+   = note: `-D clippy::block-in-if-condition-expr` implied by `-D warnings`\n    = help: try\n            if true {\n                6\n@@ -48,7 +48,7 @@ error: this boolean expression can be simplified\n 67 |     if true && x == 3 {\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`\n    |\n-   = note: `-D nonminimal-bool` implied by `-D warnings`\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "144f9f4c631bfbc0472f2008d7be69977ee426d9", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(bool_comparison)]\n+#[warn(clippy::bool_comparison)]\n fn main() {\n     let x = true;\n     if x == true { \"yes\" } else { \"no\" };"}, {"sha": "2fcde94367a662950e832c15a8c053c9314ec89d", "filename": "tests/ui/bool_comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: equality checks against true are unnecessary\n 7 |     if x == true { \"yes\" } else { \"no\" };\n   |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n   |\n-  = note: `-D bool-comparison` implied by `-D warnings`\n+  = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n  --> $DIR/bool_comparison.rs:8:8"}, {"sha": "eaa686c9a901f2ba20cb570c04d8b02df84defcb", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n+#![warn(clippy::nonminimal_bool, clippy::logic_bug)]\n \n-#![warn(nonminimal_bool, logic_bug)]\n-\n-#[allow(unused, many_single_char_names)]\n+#[allow(unused, clippy::many_single_char_names)]\n fn main() {\n     let a: bool = unimplemented!();\n     let b: bool = unimplemented!();\n@@ -23,7 +23,7 @@ fn main() {\n     let _ = !(!a && b);\n }\n \n-#[allow(unused, many_single_char_names)]\n+#[allow(unused, clippy::many_single_char_names)]\n fn equality_stuff() {\n     let a: i32 = unimplemented!();\n     let b: i32 = unimplemented!();\n@@ -39,7 +39,7 @@ fn equality_stuff() {\n     let _ = a != b || !(a != b || c == d);\n }\n \n-#[allow(unused, many_single_char_names)]\n+#[allow(unused, clippy::many_single_char_names)]\n fn methods_with_negation() {\n     let a: Option<i32> = unimplemented!();\n     let b: Result<i32, i32> = unimplemented!();\n@@ -59,7 +59,7 @@ fn methods_with_negation() {\n }\n \n // Simplified versions of https://github.com/rust-lang-nursery/rust-clippy/issues/2638\n-// nonminimal_bool should only check the built-in Result and Some type, not\n+// clippy::nonminimal_bool should only check the built-in Result and Some type, not\n // any other types like the following.\n enum CustomResultOk<E> { Ok, Err(E) }\n enum CustomResultErr<E> { Ok, Err(E) }\n@@ -115,7 +115,7 @@ fn warn_for_built_in_methods_with_negation() {\n     if !res.is_none() { }\n }\n \n-#[allow(neg_cmp_op_on_partial_ord)]\n+#[allow(clippy::neg_cmp_op_on_partial_ord)]\n fn dont_warn_for_negated_partial_ord_comparison() {\n     let a: f64 = unimplemented!();\n     let b: f64 = unimplemented!();"}, {"sha": "45e371025ef6e4e4c71949849c81cebff5d2e227", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: this boolean expression contains a logic bug\n 12 |     let _ = a && b || a;\n    |             ^^^^^^^^^^^ help: it would look like the following: `a`\n    |\n-   = note: `-D logic-bug` implied by `-D warnings`\n+   = note: `-D clippy::logic-bug` implied by `-D warnings`\n help: this expression can be optimized out by applying boolean operations to the outer expression\n   --> $DIR/booleans.rs:12:18\n    |\n@@ -17,7 +17,7 @@ error: this boolean expression can be simplified\n 14 |     let _ = !true;\n    |             ^^^^^ help: try: `false`\n    |\n-   = note: `-D nonminimal-bool` implied by `-D warnings`\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n   --> $DIR/booleans.rs:15:13"}, {"sha": "216dbebda6737dd676819fcf8ad5777830cec994", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![deny(borrowed_box)]\n-#![allow(blacklisted_name)]\n+#![deny(clippy::borrowed_box)]\n+#![allow(clippy::blacklisted_name)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n "}, {"sha": "1098c7785e23ba74687fa19b5a256797e54be25a", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -7,8 +7,8 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n note: lint level defined here\n  --> $DIR/borrow_box.rs:4:9\n   |\n-4 | #![deny(borrowed_box)]\n-  |         ^^^^^^^^^^^^\n+4 | #![deny(clippy::borrowed_box)]\n+  |         ^^^^^^^^^^^^^^^^^^^^\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n   --> $DIR/borrow_box.rs:14:14"}, {"sha": "bc5e8361d8bc6a6e79c2d511d1c1440c0fcd4f8c", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n-#![allow(boxed_local, needless_pass_by_value)]\n-#![allow(blacklisted_name)]\n+#![warn(clippy::all)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name)]\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {"}, {"sha": "b90bb5e2a4e5d4b8149924533c942a7e3d7e5c90", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n 17 | pub fn test(foo: Box<Vec<bool>>) {\n    |                  ^^^^^^^^^^^^^^\n    |\n-   = note: `-D box-vec` implied by `-D warnings`\n+   = note: `-D clippy::box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n \n error: aborting due to previous error"}, {"sha": "56892fc948398a2de2cca643eea3851e4dac8bb3", "filename": "tests/ui/builtin-type-shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbuiltin-type-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbuiltin-type-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(builtin_type_shadow)]\n+#![warn(clippy::builtin_type_shadow)]\n \n fn foo<u32>(a: u32) -> u32 {\n     42"}, {"sha": "78924ebf9cf3e85833645be429d6228dc2ead168", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: This generic shadows the built-in type `u32`\n 5 | fn foo<u32>(a: u32) -> u32 {\n   |        ^^^\n   |\n-  = note: `-D builtin-type-shadow` implied by `-D warnings`\n+  = note: `-D clippy::builtin-type-shadow` implied by `-D warnings`\n \n error[E0308]: mismatched types\n  --> $DIR/builtin-type-shadow.rs:6:5"}, {"sha": "7211284e4a08268a08e9467a1b2a988db43f844e", "filename": "tests/ui/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[deny(naive_bytecount)]\n+#[deny(clippy::naive_bytecount)]\n fn main() {\n     let x = vec![0_u8; 16];\n "}, {"sha": "0564d6a0b609a7393f959d972ca28beca09155f9", "filename": "tests/ui/bytecount.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbytecount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fbytecount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytecount.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -7,8 +7,8 @@ error: You appear to be counting bytes the naive way\n note: lint level defined here\n  --> $DIR/bytecount.rs:4:8\n   |\n-4 | #[deny(naive_bytecount)]\n-  |        ^^^^^^^^^^^^^^^\n+4 | #[deny(clippy::naive_bytecount)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: You appear to be counting bytes the naive way\n   --> $DIR/bytecount.rs:10:13"}, {"sha": "0668b16ff326cf73556eddb57488b9ffdb0f75de", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,35 +1,35 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#[warn(clippy::cast_precision_loss, clippy::cast_possible_truncation, clippy::cast_sign_loss, clippy::cast_possible_wrap, clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n-    // Test cast_precision_loss\n+    // Test clippy::cast_precision_loss\n     1i32 as f32;\n     1i64 as f32;\n     1i64 as f64;\n     1u32 as f32;\n     1u64 as f32;\n     1u64 as f64;\n-    // Test cast_possible_truncation\n+    // Test clippy::cast_possible_truncation\n     1f32 as i32;\n     1f32 as u32;\n     1f64 as f32;\n     1i32 as i8;\n     1i32 as u8;\n     1f64 as isize;\n     1f64 as usize;\n-    // Test cast_possible_wrap\n+    // Test clippy::cast_possible_wrap\n     1u8 as i8;\n     1u16 as i16;\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n-    // Test cast_lossless with casts from floating-point types\n+    // Test clippy::cast_lossless with casts from floating-point types\n     1.0f32 as f64;\n-    // Test cast_lossless with an expression wrapped in parens\n+    // Test clippy::cast_lossless with an expression wrapped in parens\n     (1u8 + 1u8) as u16;\n-    // Test cast_sign_loss\n+    // Test clippy::cast_sign_loss\n     1i32 as u32;\n     1isize as usize;\n     // Extra checks for *size"}, {"sha": "2578c49893f6056afb83c6b6ce4e46f059c7ef7c", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f\n 8 |     1i32 as f32;\n   |     ^^^^^^^^^^^\n   |\n-  = note: `-D cast-precision-loss` implied by `-D warnings`\n+  = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n  --> $DIR/cast.rs:9:5\n@@ -42,7 +42,7 @@ error: casting f32 to i32 may truncate the value\n 15 |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n-   = note: `-D cast-possible-truncation` implied by `-D warnings`\n+   = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting f32 to u32 may truncate the value\n   --> $DIR/cast.rs:16:5\n@@ -56,7 +56,7 @@ error: casting f32 to u32 may lose the sign of the value\n 16 |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n-   = note: `-D cast-sign-loss` implied by `-D warnings`\n+   = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n \n error: casting f64 to f32 may truncate the value\n   --> $DIR/cast.rs:17:5\n@@ -106,7 +106,7 @@ error: casting u8 to i8 may wrap around the value\n 23 |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n-   = note: `-D cast-possible-wrap` implied by `-D warnings`\n+   = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting u16 to i16 may wrap around the value\n   --> $DIR/cast.rs:24:5\n@@ -138,7 +138,7 @@ error: casting f32 to f64 may become silently lossy if types change\n 29 |     1.0f32 as f64;\n    |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n    |\n-   = note: `-D cast-lossless` implied by `-D warnings`\n+   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting u8 to u16 may become silently lossy if types change\n   --> $DIR/cast.rs:31:5\n@@ -164,7 +164,7 @@ error: casting to the same type is unnecessary (`i32` -> `i32`)\n 37 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n-   = note: `-D unnecessary-cast` implied by `-D warnings`\n+   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n   --> $DIR/cast.rs:38:5"}, {"sha": "1f7606de649d54fae878f274630631e8bbe55939", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n //! Test casts for alignment issues\n \n #![feature(libc)]\n \n extern crate libc;\n \n-#[warn(cast_ptr_alignment)]\n-#[allow(no_effect, unnecessary_operation, cast_lossless)]\n+#[warn(clippy::cast_ptr_alignment)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n fn main() {\n     /* These should be warned against */\n "}, {"sha": "d03d727a89c6c6344fb0bda968f1d58b1dd50b71", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,15 +1,15 @@\n error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`)\n-  --> $DIR/cast_alignment.rs:13:5\n+  --> $DIR/cast_alignment.rs:15:5\n    |\n-13 |     (&1u8 as *const u8) as *const u16;\n+15 |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D cast-ptr-alignment` implied by `-D warnings`\n+   = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`)\n-  --> $DIR/cast_alignment.rs:14:5\n+  --> $DIR/cast_alignment.rs:16:5\n    |\n-14 |     (&mut 1u8 as *mut u8) as *mut u16;\n+16 |     (&mut 1u8 as *mut u8) as *mut u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "437c4b6712005785c3f545ed8f74e2970e0dc414", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,9 @@\n-#[warn(cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#![feature(tool_lints)]\n+\n+#[warn(clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n-    // Test cast_lossless with casts to floating-point types\n+    // Test clippy::cast_lossless with casts to floating-point types\n     1i8 as f32;\n     1i8 as f64;\n     1u8 as f32;"}, {"sha": "9025633a141101da7b5835706842da95851d70be", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,63 +1,63 @@\n error: casting i8 to f32 may become silently lossy if types change\n- --> $DIR/cast_lossless_float.rs:5:5\n+ --> $DIR/cast_lossless_float.rs:7:5\n   |\n-5 |     1i8 as f32;\n+7 |     1i8 as f32;\n   |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n   |\n-  = note: `-D cast-lossless` implied by `-D warnings`\n+  = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to f64 may become silently lossy if types change\n- --> $DIR/cast_lossless_float.rs:6:5\n+ --> $DIR/cast_lossless_float.rs:8:5\n   |\n-6 |     1i8 as f64;\n+8 |     1i8 as f64;\n   |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n \n error: casting u8 to f32 may become silently lossy if types change\n- --> $DIR/cast_lossless_float.rs:7:5\n+ --> $DIR/cast_lossless_float.rs:9:5\n   |\n-7 |     1u8 as f32;\n+9 |     1u8 as f32;\n   |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n \n error: casting u8 to f64 may become silently lossy if types change\n- --> $DIR/cast_lossless_float.rs:8:5\n-  |\n-8 |     1u8 as f64;\n-  |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n+  --> $DIR/cast_lossless_float.rs:10:5\n+   |\n+10 |     1u8 as f64;\n+   |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n \n error: casting i16 to f32 may become silently lossy if types change\n- --> $DIR/cast_lossless_float.rs:9:5\n-  |\n-9 |     1i16 as f32;\n-  |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n+  --> $DIR/cast_lossless_float.rs:11:5\n+   |\n+11 |     1i16 as f32;\n+   |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n \n error: casting i16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:10:5\n+  --> $DIR/cast_lossless_float.rs:12:5\n    |\n-10 |     1i16 as f64;\n+12 |     1i16 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n \n error: casting u16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:11:5\n+  --> $DIR/cast_lossless_float.rs:13:5\n    |\n-11 |     1u16 as f32;\n+13 |     1u16 as f32;\n    |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n \n error: casting u16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:12:5\n+  --> $DIR/cast_lossless_float.rs:14:5\n    |\n-12 |     1u16 as f64;\n+14 |     1u16 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n \n error: casting i32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:13:5\n+  --> $DIR/cast_lossless_float.rs:15:5\n    |\n-13 |     1i32 as f64;\n+15 |     1i32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n \n error: casting u32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:14:5\n+  --> $DIR/cast_lossless_float.rs:16:5\n    |\n-14 |     1u32 as f64;\n+16 |     1u32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`\n \n error: aborting due to 10 previous errors"}, {"sha": "e06e653c6f5d904c76de55d45607743d60c6b402", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n-\n-#[warn(cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#![feature(tool_lints)]\n+#[warn(clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n-    // Test cast_lossless with casts to integer types\n+    // Test clippy::cast_lossless with casts to integer types\n     1i8 as i16;\n     1i8 as i32;\n     1i8 as i64;"}, {"sha": "9640e1e18fa2191c909bde67fde514eb1c1836ee", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: casting i8 to i16 may become silently lossy if types change\n 6 |     1i8 as i16;\n   |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n   |\n-  = note: `-D cast-lossless` implied by `-D warnings`\n+  = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to i32 may become silently lossy if types change\n  --> $DIR/cast_lossless_integer.rs:7:5"}, {"sha": "4c72f57165cb2bce74d3fc5e5b09cc865caf3dc9", "filename": "tests/ui/cast_size.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,7 @@\n-#[warn(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap, cast_lossless)]\n-#[allow(no_effect, unnecessary_operation)]\n+#![feature(tool_lints)]\n+\n+#[warn(clippy::cast_precision_loss, clippy::cast_possible_truncation, clippy::cast_sign_loss, clippy::cast_possible_wrap, clippy::cast_lossless)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     // Casting from *size\n     1isize as i8;"}, {"sha": "1797e2e367f48ec776e23966c1cb2767403b2cd9", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,123 +1,123 @@\n error: casting isize to i8 may truncate the value\n- --> $DIR/cast_size.rs:5:5\n+ --> $DIR/cast_size.rs:7:5\n   |\n-5 |     1isize as i8;\n+7 |     1isize as i8;\n   |     ^^^^^^^^^^^^\n   |\n-  = note: `-D cast-possible-truncation` implied by `-D warnings`\n+  = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n- --> $DIR/cast_size.rs:6:5\n+ --> $DIR/cast_size.rs:8:5\n   |\n-6 |     1isize as f64;\n+8 |     1isize as f64;\n   |     ^^^^^^^^^^^^^\n   |\n-  = note: `-D cast-precision-loss` implied by `-D warnings`\n+  = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n- --> $DIR/cast_size.rs:7:5\n+ --> $DIR/cast_size.rs:9:5\n   |\n-7 |     1usize as f64;\n+9 |     1usize as f64;\n   |     ^^^^^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n- --> $DIR/cast_size.rs:8:5\n-  |\n-8 |     1isize as f32;\n-  |     ^^^^^^^^^^^^^\n+  --> $DIR/cast_size.rs:10:5\n+   |\n+10 |     1isize as f32;\n+   |     ^^^^^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n- --> $DIR/cast_size.rs:9:5\n-  |\n-9 |     1usize as f32;\n-  |     ^^^^^^^^^^^^^\n+  --> $DIR/cast_size.rs:11:5\n+   |\n+11 |     1usize as f32;\n+   |     ^^^^^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:10:5\n+  --> $DIR/cast_size.rs:12:5\n    |\n-10 |     1isize as i32;\n+12 |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast_size.rs:11:5\n+  --> $DIR/cast_size.rs:13:5\n    |\n-11 |     1isize as u32;\n+13 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: `-D cast-sign-loss` implied by `-D warnings`\n+   = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:11:5\n+  --> $DIR/cast_size.rs:13:5\n    |\n-11 |     1isize as u32;\n+13 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:12:5\n+  --> $DIR/cast_size.rs:14:5\n    |\n-12 |     1usize as u32;\n+14 |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:13:5\n+  --> $DIR/cast_size.rs:15:5\n    |\n-13 |     1usize as i32;\n+15 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:13:5\n+  --> $DIR/cast_size.rs:15:5\n    |\n-13 |     1usize as i32;\n+15 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: `-D cast-possible-wrap` implied by `-D warnings`\n+   = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:15:5\n+  --> $DIR/cast_size.rs:17:5\n    |\n-15 |     1i64 as isize;\n+17 |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast_size.rs:16:5\n+  --> $DIR/cast_size.rs:18:5\n    |\n-16 |     1i64 as usize;\n+18 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:16:5\n+  --> $DIR/cast_size.rs:18:5\n    |\n-16 |     1i64 as usize;\n+18 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:17:5\n+  --> $DIR/cast_size.rs:19:5\n    |\n-17 |     1u64 as isize;\n+19 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:17:5\n+  --> $DIR/cast_size.rs:19:5\n    |\n-17 |     1u64 as isize;\n+19 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:18:5\n+  --> $DIR/cast_size.rs:20:5\n    |\n-18 |     1u64 as usize;\n+20 |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:19:5\n+  --> $DIR/cast_size.rs:21:5\n    |\n-19 |     1u32 as isize;\n+21 |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast_size.rs:22:5\n+  --> $DIR/cast_size.rs:24:5\n    |\n-22 |     1i32 as usize;\n+24 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: aborting due to 19 previous errors"}, {"sha": "f9937ede3518e3edc94358d729d15f03d734ebce", "filename": "tests/ui/char_lit_as_u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(char_lit_as_u8)]\n+#![warn(clippy::char_lit_as_u8)]\n #![allow(unused_variables)]\n fn main() {\n     let c = 'a' as u8;"}, {"sha": "f6ea10d57313564ccd649bab258ad640664b94fe", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: casting character literal to u8. `char`s are 4 bytes wide in rust, so cas\n 7 |     let c = 'a' as u8;\n   |             ^^^^^^^^^\n   |\n-  = note: `-D char-lit-as-u8` implied by `-D warnings`\n+  = note: `-D clippy::char-lit-as-u8` implied by `-D warnings`\n   = help: Consider using a byte literal instead:\n           b'a'\n "}, {"sha": "b3979245d3631269a913ff8069b07d8f017e7416", "filename": "tests/ui/checked_unwrap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchecked_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchecked_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,7 @@\n-#![deny(panicking_unwrap, unnecessary_unwrap)]\n-#![allow(if_same_then_else)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+#![allow(clippy::if_same_then_else)]\n \n fn main() {\n     let x = Some(());"}, {"sha": "4508ce442faea933233e19b0b5c437a835e0cbf9", "filename": "tests/ui/checked_unwrap.stderr", "status": "modified", "additions": 120, "deletions": 120, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchecked_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fchecked_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,313 +1,313 @@\n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n- --> $DIR/checked_unwrap.rs:7:9\n+ --> $DIR/checked_unwrap.rs:9:9\n   |\n-6 |     if x.is_some() {\n+8 |     if x.is_some() {\n   |        ----------- the check is happening here\n-7 |         x.unwrap(); // unnecessary\n+9 |         x.unwrap(); // unnecessary\n   |         ^^^^^^^^^^\n   |\n note: lint level defined here\n- --> $DIR/checked_unwrap.rs:1:27\n+ --> $DIR/checked_unwrap.rs:3:35\n   |\n-1 | #![deny(panicking_unwrap, unnecessary_unwrap)]\n-  |                           ^^^^^^^^^^^^^^^^^^\n+3 | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n- --> $DIR/checked_unwrap.rs:9:9\n-  |\n-6 |     if x.is_some() {\n-  |        ----------- because of this check\n+  --> $DIR/checked_unwrap.rs:11:9\n+   |\n+8  |     if x.is_some() {\n+   |        ----------- because of this check\n ...\n-9 |         x.unwrap(); // will panic\n-  |         ^^^^^^^^^^\n-  |\n+11 |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+   |\n note: lint level defined here\n- --> $DIR/checked_unwrap.rs:1:9\n-  |\n-1 | #![deny(panicking_unwrap, unnecessary_unwrap)]\n-  |         ^^^^^^^^^^^^^^^^\n+  --> $DIR/checked_unwrap.rs:3:9\n+   |\n+3  | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:12:9\n+  --> $DIR/checked_unwrap.rs:14:9\n    |\n-11 |     if x.is_none() {\n+13 |     if x.is_none() {\n    |        ----------- because of this check\n-12 |         x.unwrap(); // will panic\n+14 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:14:9\n+  --> $DIR/checked_unwrap.rs:16:9\n    |\n-11 |     if x.is_none() {\n+13 |     if x.is_none() {\n    |        ----------- the check is happening here\n ...\n-14 |         x.unwrap(); // unnecessary\n+16 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:18:9\n+  --> $DIR/checked_unwrap.rs:20:9\n    |\n-17 |     if x.is_ok() {\n+19 |     if x.is_ok() {\n    |        --------- the check is happening here\n-18 |         x.unwrap(); // unnecessary\n+20 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:19:9\n+  --> $DIR/checked_unwrap.rs:21:9\n    |\n-17 |     if x.is_ok() {\n+19 |     if x.is_ok() {\n    |        --------- because of this check\n-18 |         x.unwrap(); // unnecessary\n-19 |         x.unwrap_err(); // will panic\n+20 |         x.unwrap(); // unnecessary\n+21 |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:21:9\n+  --> $DIR/checked_unwrap.rs:23:9\n    |\n-17 |     if x.is_ok() {\n+19 |     if x.is_ok() {\n    |        --------- because of this check\n ...\n-21 |         x.unwrap(); // will panic\n+23 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:22:9\n+  --> $DIR/checked_unwrap.rs:24:9\n    |\n-17 |     if x.is_ok() {\n+19 |     if x.is_ok() {\n    |        --------- the check is happening here\n ...\n-22 |         x.unwrap_err(); // unnecessary\n+24 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:25:9\n+  --> $DIR/checked_unwrap.rs:27:9\n    |\n-24 |     if x.is_err() {\n+26 |     if x.is_err() {\n    |        ---------- because of this check\n-25 |         x.unwrap(); // will panic\n+27 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:26:9\n+  --> $DIR/checked_unwrap.rs:28:9\n    |\n-24 |     if x.is_err() {\n+26 |     if x.is_err() {\n    |        ---------- the check is happening here\n-25 |         x.unwrap(); // will panic\n-26 |         x.unwrap_err(); // unnecessary\n+27 |         x.unwrap(); // will panic\n+28 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:28:9\n+  --> $DIR/checked_unwrap.rs:30:9\n    |\n-24 |     if x.is_err() {\n+26 |     if x.is_err() {\n    |        ---------- the check is happening here\n ...\n-28 |         x.unwrap(); // unnecessary\n+30 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:29:9\n+  --> $DIR/checked_unwrap.rs:31:9\n    |\n-24 |     if x.is_err() {\n+26 |     if x.is_err() {\n    |        ---------- because of this check\n ...\n-29 |         x.unwrap_err(); // will panic\n+31 |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:46:9\n+  --> $DIR/checked_unwrap.rs:48:9\n    |\n-45 |     if x.is_ok() && y.is_err() {\n+47 |     if x.is_ok() && y.is_err() {\n    |        --------- the check is happening here\n-46 |         x.unwrap(); // unnecessary\n+48 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:47:9\n+  --> $DIR/checked_unwrap.rs:49:9\n    |\n-45 |     if x.is_ok() && y.is_err() {\n+47 |     if x.is_ok() && y.is_err() {\n    |        --------- because of this check\n-46 |         x.unwrap(); // unnecessary\n-47 |         x.unwrap_err(); // will panic\n+48 |         x.unwrap(); // unnecessary\n+49 |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:48:9\n+  --> $DIR/checked_unwrap.rs:50:9\n    |\n-45 |     if x.is_ok() && y.is_err() {\n+47 |     if x.is_ok() && y.is_err() {\n    |                     ---------- because of this check\n ...\n-48 |         y.unwrap(); // will panic\n+50 |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:49:9\n+  --> $DIR/checked_unwrap.rs:51:9\n    |\n-45 |     if x.is_ok() && y.is_err() {\n+47 |     if x.is_ok() && y.is_err() {\n    |                     ---------- the check is happening here\n ...\n-49 |         y.unwrap_err(); // unnecessary\n+51 |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:63:9\n+  --> $DIR/checked_unwrap.rs:65:9\n    |\n-58 |     if x.is_ok() || y.is_ok() {\n+60 |     if x.is_ok() || y.is_ok() {\n    |        --------- because of this check\n ...\n-63 |         x.unwrap(); // will panic\n+65 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:64:9\n+  --> $DIR/checked_unwrap.rs:66:9\n    |\n-58 |     if x.is_ok() || y.is_ok() {\n+60 |     if x.is_ok() || y.is_ok() {\n    |        --------- the check is happening here\n ...\n-64 |         x.unwrap_err(); // unnecessary\n+66 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:65:9\n+  --> $DIR/checked_unwrap.rs:67:9\n    |\n-58 |     if x.is_ok() || y.is_ok() {\n+60 |     if x.is_ok() || y.is_ok() {\n    |                     --------- because of this check\n ...\n-65 |         y.unwrap(); // will panic\n+67 |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:66:9\n+  --> $DIR/checked_unwrap.rs:68:9\n    |\n-58 |     if x.is_ok() || y.is_ok() {\n+60 |     if x.is_ok() || y.is_ok() {\n    |                     --------- the check is happening here\n ...\n-66 |         y.unwrap_err(); // unnecessary\n+68 |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:70:9\n+  --> $DIR/checked_unwrap.rs:72:9\n    |\n-69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+71 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- the check is happening here\n-70 |         x.unwrap(); // unnecessary\n+72 |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:71:9\n+  --> $DIR/checked_unwrap.rs:73:9\n    |\n-69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+71 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- because of this check\n-70 |         x.unwrap(); // unnecessary\n-71 |         x.unwrap_err(); // will panic\n+72 |         x.unwrap(); // unnecessary\n+73 |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:72:9\n+  --> $DIR/checked_unwrap.rs:74:9\n    |\n-69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+71 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                       --------- because of this check\n ...\n-72 |         y.unwrap(); // will panic\n+74 |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:73:9\n+  --> $DIR/checked_unwrap.rs:75:9\n    |\n-69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+71 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                       --------- the check is happening here\n ...\n-73 |         y.unwrap_err(); // unnecessary\n+75 |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:74:9\n+  --> $DIR/checked_unwrap.rs:76:9\n    |\n-69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+71 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                                    ---------- the check is happening here\n ...\n-74 |         z.unwrap(); // unnecessary\n+76 |         z.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:75:9\n+  --> $DIR/checked_unwrap.rs:77:9\n    |\n-69 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n+71 |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                                    ---------- because of this check\n ...\n-75 |         z.unwrap_err(); // will panic\n+77 |         z.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:83:9\n+  --> $DIR/checked_unwrap.rs:85:9\n    |\n-77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+79 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |        --------- because of this check\n ...\n-83 |         x.unwrap(); // will panic\n+85 |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:84:9\n+  --> $DIR/checked_unwrap.rs:86:9\n    |\n-77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+79 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |        --------- the check is happening here\n ...\n-84 |         x.unwrap_err(); // unnecessary\n+86 |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:85:9\n+  --> $DIR/checked_unwrap.rs:87:9\n    |\n-77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+79 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                       --------- the check is happening here\n ...\n-85 |         y.unwrap(); // unnecessary\n+87 |         y.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:86:9\n+  --> $DIR/checked_unwrap.rs:88:9\n    |\n-77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+79 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                       --------- because of this check\n ...\n-86 |         y.unwrap_err(); // will panic\n+88 |         y.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:87:9\n+  --> $DIR/checked_unwrap.rs:89:9\n    |\n-77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+79 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                                    ---------- because of this check\n ...\n-87 |         z.unwrap(); // will panic\n+89 |         z.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:88:9\n+  --> $DIR/checked_unwrap.rs:90:9\n    |\n-77 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n+79 |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                                    ---------- the check is happening here\n ...\n-88 |         z.unwrap_err(); // unnecessary\n+90 |         z.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:96:13\n+  --> $DIR/checked_unwrap.rs:98:13\n    |\n-95 |         if x.is_some() {\n+97 |         if x.is_some() {\n    |            ----------- the check is happening here\n-96 |             x.unwrap(); // unnecessary\n+98 |             x.unwrap(); // unnecessary\n    |             ^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:98:13\n-   |\n-95 |         if x.is_some() {\n-   |            ----------- because of this check\n+   --> $DIR/checked_unwrap.rs:100:13\n+    |\n+97  |         if x.is_some() {\n+    |            ----------- because of this check\n ...\n-98 |             x.unwrap(); // will panic\n-   |             ^^^^^^^^^^\n+100 |             x.unwrap(); // will panic\n+    |             ^^^^^^^^^^\n \n error: aborting due to 34 previous errors\n "}, {"sha": "77dffc67670ffd4baeaed58e2f3e778f3df49b96", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,11 +1,13 @@\n+#![feature(tool_lints)]\n+\n pub fn dec_read_dec(i: &mut i32) -> i32 {\n     *i -= 1;\n     let ret = *i;\n     *i -= 1;\n     ret\n }\n \n-#[allow(trivially_copy_pass_by_ref)]\n+#[allow(clippy::trivially_copy_pass_by_ref)]\n pub fn minus_1(i: &i32) -> i32 {\n     dec_read_dec(&mut i.clone())\n }"}, {"sha": "fdebb7da18a30085a1fd5f4716772dbbec208288", "filename": "tests/ui/cmp_nan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(cmp_nan)]\n-#[allow(float_cmp, no_effect, unnecessary_operation)]\n+#[warn(clippy::cmp_nan)]\n+#[allow(clippy::float_cmp, clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n     let x = 5f32;\n     x == std::f32::NAN;"}, {"sha": "7f636e6b5347b8dfac4d584c8b2ffc22c8dad186", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n 8 |     x == std::f32::NAN;\n   |     ^^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D cmp-nan` implied by `-D warnings`\n+  = note: `-D clippy::cmp-nan` implied by `-D warnings`\n \n error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n  --> $DIR/cmp_nan.rs:9:5"}, {"sha": "e10b3e104ec18c3889752f5d2d343e968cde0101", "filename": "tests/ui/cmp_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(cmp_null)]\n+#![warn(clippy::cmp_null)]\n #![allow(unused_mut)]\n \n use std::ptr;"}, {"sha": "55050d2a320ed1aa4ad3e851cd34342ad19c6f04", "filename": "tests/ui/cmp_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: Comparing with null is better expressed by the .is_null() method\n 11 |     if p == ptr::null() {\n    |        ^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D cmp-null` implied by `-D warnings`\n+   = note: `-D clippy::cmp-null` implied by `-D warnings`\n \n error: Comparing with null is better expressed by the .is_null() method\n   --> $DIR/cmp_null.rs:16:8"}, {"sha": "713975c4404101164a36577771dd2583b3b8feca", "filename": "tests/ui/cmp_owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(cmp_owned)]\n-#[allow(unnecessary_operation)]\n+#[warn(clippy::cmp_owned)]\n+#[allow(clippy::unnecessary_operation)]\n fn main() {\n     fn with_to_string(x : &str) {\n         x != \"foo\".to_string();"}, {"sha": "2691c12eab1e1b86e9a7537d03213f2ef29f6432", "filename": "tests/ui/cmp_owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: this creates an owned instance just for comparison\n 8 |         x != \"foo\".to_string();\n   |              ^^^^^^^^^^^^^^^^^ help: try: `\"foo\"`\n   |\n-  = note: `-D cmp-owned` implied by `-D warnings`\n+  = note: `-D clippy::cmp-owned` implied by `-D warnings`\n \n error: this creates an owned instance just for comparison\n   --> $DIR/cmp_owned.rs:10:9"}, {"sha": "d40be6319337fed40dd300dbf1613880de23cd18", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(collapsible_if)]\n+#[warn(clippy::collapsible_if)]\n fn main() {\n     let x = \"hello\";\n     let y = \"world\";"}, {"sha": "a447fab7b6ecf71a92ea0edb9cd2f6d31da948ea", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -8,7 +8,7 @@ error: this if statement can be collapsed\n 12 | |     }\n    | |_____^\n    |\n-   = note: `-D collapsible-if` implied by `-D warnings`\n+   = note: `-D clippy::collapsible-if` implied by `-D warnings`\n help: try\n    |\n 8  |     if x == \"hello\" && y == \"world\" {"}, {"sha": "a6875793c8310c93078b10a9d033d5bda718f93c", "filename": "tests/ui/complex_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy)]\n-#![allow(unused, needless_pass_by_value)]\n+#![warn(clippy::all)]\n+#![allow(unused, clippy::needless_pass_by_value)]\n #![feature(associated_type_defaults)]\n \n type Alias = Vec<Vec<Box<(u32, u32, u32, u32)>>>; // no warning here"}, {"sha": "1c9106c0c219e89fa2a50215629c429885d2e9f2", "filename": "tests/ui/complex_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: very complex type used. Consider factoring parts into `type` definitions\n 9 | const CST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0))));\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D type-complexity` implied by `-D warnings`\n+  = note: `-D clippy::type-complexity` implied by `-D warnings`\n \n error: very complex type used. Consider factoring parts into `type` definitions\n   --> $DIR/complex_types.rs:10:12"}, {"sha": "db6c4d9444f79b413922f125e479731bc0fc569f", "filename": "tests/ui/const_static_lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fconst_static_lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fconst_static_lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_static_lifetime.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: Constants have by default a `'static` lifetime\n 4 | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n   |                -^^^^^^^---- help: consider removing `'static`: `&str`\n   |\n-  = note: `-D const-static-lifetime` implied by `-D warnings`\n+  = note: `-D clippy::const-static-lifetime` implied by `-D warnings`\n \n error: Constants have by default a `'static` lifetime\n  --> $DIR/const_static_lifetime.rs:8:21"}, {"sha": "064c7fc1c59c10b6a1853c54732760371893798a", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,7 @@\n-#![allow(blacklisted_name, collapsible_if, cyclomatic_complexity, eq_op, needless_continue,\n-         needless_return, never_loop, no_effect, zero_divided_by_zero)]\n+#![feature(tool_lints)]\n+\n+#![allow(clippy::blacklisted_name, clippy::collapsible_if, clippy::cyclomatic_complexity, clippy::eq_op, clippy::needless_continue,\n+         clippy::needless_return, clippy::never_loop, clippy::no_effect, clippy::zero_divided_by_zero)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }\n@@ -14,8 +16,8 @@ pub enum Abc {\n     C,\n }\n \n-#[warn(if_same_then_else)]\n-#[warn(match_same_arms)]\n+#[warn(clippy::if_same_then_else)]\n+#[warn(clippy::match_same_arms)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         Foo { bar: 42 };\n@@ -340,8 +342,8 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     }\n }\n \n-#[warn(ifs_same_cond)]\n-#[allow(if_same_then_else)] // all empty blocks\n+#[warn(clippy::ifs_same_cond)]\n+#[allow(clippy::if_same_then_else)] // all empty blocks\n fn ifs_same_cond() {\n     let a = 0;\n     let b = false;"}, {"sha": "febd34603c91d430e7d453510e0d0eddf01777a1", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 170, "deletions": 170, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,384 +1,384 @@\n error: this `if` has identical blocks\n-  --> $DIR/copies.rs:29:10\n+  --> $DIR/copies.rs:31:10\n    |\n-29 |       else { //~ ERROR same body as `if` block\n+31 |       else { //~ ERROR same body as `if` block\n    |  __________^\n-30 | |         Foo { bar: 42 };\n-31 | |         0..10;\n-32 | |         ..;\n+32 | |         Foo { bar: 42 };\n+33 | |         0..10;\n+34 | |         ..;\n ...  |\n-36 | |         foo();\n-37 | |     }\n+38 | |         foo();\n+39 | |     }\n    | |_____^\n    |\n-   = note: `-D if-same-then-else` implied by `-D warnings`\n+   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/copies.rs:20:13\n+  --> $DIR/copies.rs:22:13\n    |\n-20 |       if true {\n+22 |       if true {\n    |  _____________^\n-21 | |         Foo { bar: 42 };\n-22 | |         0..10;\n-23 | |         ..;\n+23 | |         Foo { bar: 42 };\n+24 | |         0..10;\n+25 | |         ..;\n ...  |\n-27 | |         foo();\n-28 | |     }\n+29 | |         foo();\n+30 | |     }\n    | |_____^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:78:14\n+  --> $DIR/copies.rs:80:14\n    |\n-78 |           _ => { //~ ERROR match arms have same body\n+80 |           _ => { //~ ERROR match arms have same body\n    |  ______________^\n-79 | |             foo();\n-80 | |             let mut a = 42 + [23].len() as i32;\n-81 | |             if true {\n+81 | |             foo();\n+82 | |             let mut a = 42 + [23].len() as i32;\n+83 | |             if true {\n ...  |\n-85 | |             a\n-86 | |         }\n+87 | |             a\n+88 | |         }\n    | |_________^\n    |\n-   = note: `-D match-same-arms` implied by `-D warnings`\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/copies.rs:69:15\n+  --> $DIR/copies.rs:71:15\n    |\n-69 |           42 => {\n+71 |           42 => {\n    |  _______________^\n-70 | |             foo();\n-71 | |             let mut a = 42 + [23].len() as i32;\n-72 | |             if true {\n+72 | |             foo();\n+73 | |             let mut a = 42 + [23].len() as i32;\n+74 | |             if true {\n ...  |\n-76 | |             a\n-77 | |         }\n+78 | |             a\n+79 | |         }\n    | |_________^\n note: `42` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:69:15\n+  --> $DIR/copies.rs:71:15\n    |\n-69 |           42 => {\n+71 |           42 => {\n    |  _______________^\n-70 | |             foo();\n-71 | |             let mut a = 42 + [23].len() as i32;\n-72 | |             if true {\n+72 | |             foo();\n+73 | |             let mut a = 42 + [23].len() as i32;\n+74 | |             if true {\n ...  |\n-76 | |             a\n-77 | |         }\n+78 | |             a\n+79 | |         }\n    | |_________^\n \n error: this `match` has identical arm bodies\n-  --> $DIR/copies.rs:92:14\n+  --> $DIR/copies.rs:94:14\n    |\n-92 |         _ => 0, //~ ERROR match arms have same body\n+94 |         _ => 0, //~ ERROR match arms have same body\n    |              ^\n    |\n note: same as this\n-  --> $DIR/copies.rs:90:19\n+  --> $DIR/copies.rs:92:19\n    |\n-90 |         Abc::A => 0,\n+92 |         Abc::A => 0,\n    |                   ^\n note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n-  --> $DIR/copies.rs:90:19\n+  --> $DIR/copies.rs:92:19\n    |\n-90 |         Abc::A => 0,\n+92 |         Abc::A => 0,\n    |                   ^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:102:10\n+   --> $DIR/copies.rs:104:10\n     |\n-102 |       else { //~ ERROR same body as `if` block\n+104 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-103 | |         42\n-104 | |     };\n+105 | |         42\n+106 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:99:21\n+   --> $DIR/copies.rs:101:21\n     |\n-99  |       let _ = if true {\n+101 |       let _ = if true {\n     |  _____________________^\n-100 | |         42\n-101 | |     }\n+102 | |         42\n+103 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:116:10\n+   --> $DIR/copies.rs:118:10\n     |\n-116 |       else { //~ ERROR same body as `if` block\n+118 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-117 | |         for _ in &[42] {\n-118 | |             let foo: &Option<_> = &Some::<u8>(42);\n-119 | |             if true {\n+119 | |         for _ in &[42] {\n+120 | |             let foo: &Option<_> = &Some::<u8>(42);\n+121 | |             if true {\n ...   |\n-124 | |         }\n-125 | |     }\n+126 | |         }\n+127 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:106:13\n+   --> $DIR/copies.rs:108:13\n     |\n-106 |       if true {\n+108 |       if true {\n     |  _____________^\n-107 | |         for _ in &[42] {\n-108 | |             let foo: &Option<_> = &Some::<u8>(42);\n-109 | |             if true {\n+109 | |         for _ in &[42] {\n+110 | |             let foo: &Option<_> = &Some::<u8>(42);\n+111 | |             if true {\n ...   |\n-114 | |         }\n-115 | |     }\n+116 | |         }\n+117 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:138:10\n+   --> $DIR/copies.rs:140:10\n     |\n-138 |       else { //~ ERROR same body as `if` block\n+140 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-139 | |         let bar = if true {\n-140 | |             42\n-141 | |         }\n+141 | |         let bar = if true {\n+142 | |             42\n+143 | |         }\n ...   |\n-147 | |         bar + 1;\n-148 | |     }\n+149 | |         bar + 1;\n+150 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:127:13\n+   --> $DIR/copies.rs:129:13\n     |\n-127 |       if true {\n+129 |       if true {\n     |  _____________^\n-128 | |         let bar = if true {\n-129 | |             42\n-130 | |         }\n+130 | |         let bar = if true {\n+131 | |             42\n+132 | |         }\n ...   |\n-136 | |         bar + 1;\n-137 | |     }\n+138 | |         bar + 1;\n+139 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:173:10\n+   --> $DIR/copies.rs:175:10\n     |\n-173 |       else { //~ ERROR same body as `if` block\n+175 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-174 | |         if let Some(a) = Some(42) {}\n-175 | |     }\n+176 | |         if let Some(a) = Some(42) {}\n+177 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:170:13\n+   --> $DIR/copies.rs:172:13\n     |\n-170 |       if true {\n+172 |       if true {\n     |  _____________^\n-171 | |         if let Some(a) = Some(42) {}\n-172 | |     }\n+173 | |         if let Some(a) = Some(42) {}\n+174 | |     }\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:180:10\n+   --> $DIR/copies.rs:182:10\n     |\n-180 |       else { //~ ERROR same body as `if` block\n+182 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-181 | |         if let (1, .., 3) = (1, 2, 3) {}\n-182 | |     }\n+183 | |         if let (1, .., 3) = (1, 2, 3) {}\n+184 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:177:13\n+   --> $DIR/copies.rs:179:13\n     |\n-177 |       if true {\n+179 |       if true {\n     |  _____________^\n-178 | |         if let (1, .., 3) = (1, 2, 3) {}\n-179 | |     }\n+180 | |         if let (1, .., 3) = (1, 2, 3) {}\n+181 | |     }\n     | |_____^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:235:15\n+   --> $DIR/copies.rs:237:15\n     |\n-235 |         51 => foo(), //~ ERROR match arms have same body\n+237 |         51 => foo(), //~ ERROR match arms have same body\n     |               ^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:234:15\n+   --> $DIR/copies.rs:236:15\n     |\n-234 |         42 => foo(),\n+236 |         42 => foo(),\n     |               ^^^^^\n note: consider refactoring into `42 | 51`\n-   --> $DIR/copies.rs:234:15\n+   --> $DIR/copies.rs:236:15\n     |\n-234 |         42 => foo(),\n+236 |         42 => foo(),\n     |               ^^^^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:241:17\n+   --> $DIR/copies.rs:243:17\n     |\n-241 |         None => 24, //~ ERROR match arms have same body\n+243 |         None => 24, //~ ERROR match arms have same body\n     |                 ^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:240:20\n+   --> $DIR/copies.rs:242:20\n     |\n-240 |         Some(_) => 24,\n+242 |         Some(_) => 24,\n     |                    ^^\n note: consider refactoring into `Some(_) | None`\n-   --> $DIR/copies.rs:240:20\n+   --> $DIR/copies.rs:242:20\n     |\n-240 |         Some(_) => 24,\n+242 |         Some(_) => 24,\n     |                    ^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:263:28\n+   --> $DIR/copies.rs:265:28\n     |\n-263 |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+265 |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n     |                            ^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:262:28\n+   --> $DIR/copies.rs:264:28\n     |\n-262 |         (Some(a), None) => bar(a),\n+264 |         (Some(a), None) => bar(a),\n     |                            ^^^^^^\n note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-   --> $DIR/copies.rs:262:28\n+   --> $DIR/copies.rs:264:28\n     |\n-262 |         (Some(a), None) => bar(a),\n+264 |         (Some(a), None) => bar(a),\n     |                            ^^^^^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:269:26\n+   --> $DIR/copies.rs:271:26\n     |\n-269 |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+271 |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n     |                          ^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:268:26\n+   --> $DIR/copies.rs:270:26\n     |\n-268 |         (Some(a), ..) => bar(a),\n+270 |         (Some(a), ..) => bar(a),\n     |                          ^^^^^^\n note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-   --> $DIR/copies.rs:268:26\n+   --> $DIR/copies.rs:270:26\n     |\n-268 |         (Some(a), ..) => bar(a),\n+270 |         (Some(a), ..) => bar(a),\n     |                          ^^^^^^\n \n error: this `match` has identical arm bodies\n-   --> $DIR/copies.rs:275:20\n+   --> $DIR/copies.rs:277:20\n     |\n-275 |         (.., 3) => 42, //~ ERROR match arms have same body\n+277 |         (.., 3) => 42, //~ ERROR match arms have same body\n     |                    ^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:274:23\n+   --> $DIR/copies.rs:276:23\n     |\n-274 |         (1, .., 3) => 42,\n+276 |         (1, .., 3) => 42,\n     |                       ^^\n note: consider refactoring into `(1, .., 3) | (.., 3)`\n-   --> $DIR/copies.rs:274:23\n+   --> $DIR/copies.rs:276:23\n     |\n-274 |         (1, .., 3) => 42,\n+276 |         (1, .., 3) => 42,\n     |                       ^^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:281:12\n+   --> $DIR/copies.rs:283:12\n     |\n-281 |       } else { //~ ERROR same body as `if` block\n+283 |       } else { //~ ERROR same body as `if` block\n     |  ____________^\n-282 | |         0.0\n-283 | |     };\n+284 | |         0.0\n+285 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:279:21\n+   --> $DIR/copies.rs:281:21\n     |\n-279 |       let _ = if true {\n+281 |       let _ = if true {\n     |  _____________________^\n-280 | |         0.0\n-281 | |     } else { //~ ERROR same body as `if` block\n+282 | |         0.0\n+283 | |     } else { //~ ERROR same body as `if` block\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:287:12\n+   --> $DIR/copies.rs:289:12\n     |\n-287 |       } else { //~ ERROR same body as `if` block\n+289 |       } else { //~ ERROR same body as `if` block\n     |  ____________^\n-288 | |         -0.0\n-289 | |     };\n+290 | |         -0.0\n+291 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:285:21\n+   --> $DIR/copies.rs:287:21\n     |\n-285 |       let _ = if true {\n+287 |       let _ = if true {\n     |  _____________________^\n-286 | |         -0.0\n-287 | |     } else { //~ ERROR same body as `if` block\n+288 | |         -0.0\n+289 | |     } else { //~ ERROR same body as `if` block\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:307:12\n+   --> $DIR/copies.rs:309:12\n     |\n-307 |       } else { //~ ERROR same body as `if` block\n+309 |       } else { //~ ERROR same body as `if` block\n     |  ____________^\n-308 | |         std::f32::NAN\n-309 | |     };\n+310 | |         std::f32::NAN\n+311 | |     };\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:305:21\n+   --> $DIR/copies.rs:307:21\n     |\n-305 |       let _ = if true {\n+307 |       let _ = if true {\n     |  _____________________^\n-306 | |         std::f32::NAN\n-307 | |     } else { //~ ERROR same body as `if` block\n+308 | |         std::f32::NAN\n+309 | |     } else { //~ ERROR same body as `if` block\n     | |_____^\n \n error: this `if` has identical blocks\n-   --> $DIR/copies.rs:325:10\n+   --> $DIR/copies.rs:327:10\n     |\n-325 |       else { //~ ERROR same body as `if` block\n+327 |       else { //~ ERROR same body as `if` block\n     |  __________^\n-326 | |         try!(Ok(\"foo\"));\n-327 | |     }\n+328 | |         try!(Ok(\"foo\"));\n+329 | |     }\n     | |_____^\n     |\n note: same as this\n-   --> $DIR/copies.rs:322:13\n+   --> $DIR/copies.rs:324:13\n     |\n-322 |       if true {\n+324 |       if true {\n     |  _____________^\n-323 | |         try!(Ok(\"foo\"));\n-324 | |     }\n+325 | |         try!(Ok(\"foo\"));\n+326 | |     }\n     | |_____^\n \n error: this `if` has the same condition as a previous if\n-   --> $DIR/copies.rs:351:13\n+   --> $DIR/copies.rs:353:13\n     |\n-351 |     else if b { //~ ERROR ifs same condition\n+353 |     else if b { //~ ERROR ifs same condition\n     |             ^\n     |\n-    = note: `-D ifs-same-cond` implied by `-D warnings`\n+    = note: `-D clippy::ifs-same-cond` implied by `-D warnings`\n note: same as this\n-   --> $DIR/copies.rs:349:8\n+   --> $DIR/copies.rs:351:8\n     |\n-349 |     if b {\n+351 |     if b {\n     |        ^\n \n error: this `if` has the same condition as a previous if\n-   --> $DIR/copies.rs:356:13\n+   --> $DIR/copies.rs:358:13\n     |\n-356 |     else if a == 1 { //~ ERROR ifs same condition\n+358 |     else if a == 1 { //~ ERROR ifs same condition\n     |             ^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:354:8\n+   --> $DIR/copies.rs:356:8\n     |\n-354 |     if a == 1 {\n+356 |     if a == 1 {\n     |        ^^^^^^\n \n error: this `if` has the same condition as a previous if\n-   --> $DIR/copies.rs:363:13\n+   --> $DIR/copies.rs:365:13\n     |\n-363 |     else if 2*a == 1 { //~ ERROR ifs same condition\n+365 |     else if 2*a == 1 { //~ ERROR ifs same condition\n     |             ^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/copies.rs:359:8\n+   --> $DIR/copies.rs:361:8\n     |\n-359 |     if 2*a == 1 {\n+361 |     if 2*a == 1 {\n     |        ^^^^^^^^\n \n error: aborting due to 20 previous errors"}, {"sha": "5ccb9910c1e13ca81011b0732f4cf08d174843d3", "filename": "tests/ui/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![warn(copy_iterator)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::copy_iterator)]\n \n #[derive(Copy, Clone)]\n struct Countdown(u8);"}, {"sha": "9a06a52d4bb52a2a0afe8c7a37be8b627d835c40", "filename": "tests/ui/copy_iterator.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopy_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcopy_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,16 +1,16 @@\n error: you are implementing `Iterator` on a `Copy` type\n-  --> $DIR/copy_iterator.rs:6:1\n+  --> $DIR/copy_iterator.rs:8:1\n    |\n-6  | / impl Iterator for Countdown {\n-7  | |     type Item = u8;\n-8  | |\n-9  | |     fn next(&mut self) -> Option<u8> {\n+8  | / impl Iterator for Countdown {\n+9  | |     type Item = u8;\n+10 | |\n+11 | |     fn next(&mut self) -> Option<u8> {\n ...  |\n-14 | |     }\n-15 | | }\n+16 | |     }\n+17 | | }\n    | |_^\n    |\n-   = note: `-D copy-iterator` implied by `-D warnings`\n+   = note: `-D clippy::copy-iterator` implied by `-D warnings`\n    = note: consider implementing `IntoIterator` instead\n \n error: aborting due to previous error"}, {"sha": "e68874d540977bfdbdc92b88929c8128b062c19a", "filename": "tests/ui/cstring.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,8 @@\n+#![feature(tool_lints)]\n+\n fn main() {}\n \n-#[allow(result_unwrap_used)]\n+#[allow(clippy::result_unwrap_used)]\n fn temporary_cstring() {\n     use std::ffi::CString;\n "}, {"sha": "2b2b51de6ae3486fc40088340cf160d1f3b115bb", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,15 +1,15 @@\n error: you are getting the inner pointer of a temporary `CString`\n- --> $DIR/cstring.rs:7:5\n+ --> $DIR/cstring.rs:9:5\n   |\n-7 |     CString::new(\"foo\").unwrap().as_ptr();\n+9 |     CString::new(\"foo\").unwrap().as_ptr();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-  = note: #[deny(temporary_cstring_as_ptr)] on by default\n+  = note: #[deny(clippy::temporary_cstring_as_ptr)] on by default\n   = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n- --> $DIR/cstring.rs:7:5\n+ --> $DIR/cstring.rs:9:5\n   |\n-7 |     CString::new(\"foo\").unwrap().as_ptr();\n+9 |     CString::new(\"foo\").unwrap().as_ptr();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "84e2a1b658378f4c8381f7cb40199defa10aae81", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(clippy)]\n-#![warn(cyclomatic_complexity)]\n+#![allow(clippy::all)]\n+#![warn(clippy::cyclomatic_complexity)]\n #![allow(unused)]\n \n fn main() {\n@@ -172,7 +172,7 @@ fn bar() {\n \n #[test]\n #[clippy::cyclomatic_complexity = \"0\"]\n-/// Tests are usually complex but simple at the same time. `cyclomatic_complexity` used to give\n+/// Tests are usually complex but simple at the same time. `clippy::cyclomatic_complexity` used to give\n /// lots of false-positives in tests.\n fn dont_warn_on_tests() {\n     match 99 {"}, {"sha": "ff93f21e3ae5f6cece3b730bf5f63f4acd8fad56", "filename": "tests/ui/cyclomatic_complexity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -10,7 +10,7 @@ error: the function has a cyclomatic complexity of 28\n 89 | | }\n    | |_^\n    |\n-   = note: `-D cyclomatic-complexity` implied by `-D warnings`\n+   = note: `-D clippy::cyclomatic-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n error: the function has a cyclomatic complexity of 7"}, {"sha": "fd8be25e6707cafe51bc48a86be9356e593c33a9", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(cyclomatic_complexity)]\n+#![warn(clippy::cyclomatic_complexity)]\n #![warn(unused)]\n \n fn main() {"}, {"sha": "f8342f0d9e5022c7624c9b2474011ad7f6478141", "filename": "tests/ui/cyclomatic_complexity_attr_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -10,7 +10,7 @@ error: the function has a cyclomatic complexity of 3\n 17 | | }\n    | |_^\n    |\n-   = note: `-D cyclomatic-complexity` implied by `-D warnings`\n+   = note: `-D clippy::cyclomatic-complexity` implied by `-D warnings`\n    = help: you could split it up into multiple smaller functions\n \n error: aborting due to previous error"}, {"sha": "472ea618571735bd63aaefe03c32e7fbb3a77dcf", "filename": "tests/ui/decimal_literal_representation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdecimal_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdecimal_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(decimal_literal_representation)]\n+#[warn(clippy::decimal_literal_representation)]\n #[allow(unused_variables)]\n fn main() {\n     let good = (        // Hex:"}, {"sha": "343936bb7a21947cd9dbd78ddf06d28909a7b55f", "filename": "tests/ui/decimal_literal_representation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdecimal_literal_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdecimal_literal_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: integer literal has a better hexadecimal representation\n 18 |         32_773,        // 0x8005\n    |         ^^^^^^ help: consider: `0x8005`\n    |\n-   = note: `-D decimal-literal-representation` implied by `-D warnings`\n+   = note: `-D clippy::decimal-literal-representation` implied by `-D warnings`\n \n error: integer literal has a better hexadecimal representation\n   --> $DIR/decimal_literal_representation.rs:19:9"}, {"sha": "ba8886cd6a416a0c6843b39658f79d741395f7c2", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![warn(default_trait_access)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::default_trait_access)]\n \n use std::default::Default as D2;\n use std::string;"}, {"sha": "e3c263e773291328c94085284913c9880d64a05a", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,51 +1,51 @@\n error: Calling std::string::String::default() is more clear than this expression\n- --> $DIR/default_trait_access.rs:8:22\n-  |\n-8 |     let s1: String = Default::default();\n-  |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n-  |\n-  = note: `-D default-trait-access` implied by `-D warnings`\n+  --> $DIR/default_trait_access.rs:10:22\n+   |\n+10 |     let s1: String = Default::default();\n+   |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |\n+   = note: `-D clippy::default-trait-access` implied by `-D warnings`\n \n error: Calling std::string::String::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:12:22\n+  --> $DIR/default_trait_access.rs:14:22\n    |\n-12 |     let s3: String = D2::default();\n+14 |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: Calling std::string::String::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:14:22\n+  --> $DIR/default_trait_access.rs:16:22\n    |\n-14 |     let s4: String = std::default::Default::default();\n+16 |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: Calling std::string::String::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:18:22\n+  --> $DIR/default_trait_access.rs:20:22\n    |\n-18 |     let s6: String = default::Default::default();\n+20 |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: Calling GenericDerivedDefault<std::string::String>::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:28:46\n+  --> $DIR/default_trait_access.rs:30:46\n    |\n-28 |     let s11: GenericDerivedDefault<String> = Default::default();\n+30 |     let s11: GenericDerivedDefault<String> = Default::default();\n    |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n \n error: Calling TupleDerivedDefault::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:34:36\n+  --> $DIR/default_trait_access.rs:36:36\n    |\n-34 |     let s14: TupleDerivedDefault = Default::default();\n+36 |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n error: Calling ArrayDerivedDefault::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:36:36\n+  --> $DIR/default_trait_access.rs:38:36\n    |\n-36 |     let s15: ArrayDerivedDefault = Default::default();\n+38 |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n error: Calling TupleStructDerivedDefault::default() is more clear than this expression\n-  --> $DIR/default_trait_access.rs:40:42\n+  --> $DIR/default_trait_access.rs:42:42\n    |\n-40 |     let s17: TupleStructDerivedDefault = Default::default();\n+42 |     let s17: TupleStructDerivedDefault = Default::default();\n    |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`\n \n error: aborting due to 8 previous errors"}, {"sha": "ae54c0290bc207c26327045214d13e14c31526d6", "filename": "tests/ui/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,9 @@\n-\n+#![feature(tool_lints)]\n \n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n-#![warn(expl_impl_clone_on_copy)]\n+#![warn(clippy::expl_impl_clone_on_copy)]\n \n use std::hash::{Hash, Hasher};\n "}, {"sha": "fa706f22b905e01d2764c4b944ec5a13c652aa08", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n 17 | #[derive(Hash)]\n    |          ^^^^\n    |\n-   = note: #[deny(derive_hash_xor_eq)] on by default\n+   = note: #[deny(clippy::derive_hash_xor_eq)] on by default\n note: `PartialEq` implemented here\n   --> $DIR/derive.rs:20:1\n    |\n@@ -49,7 +49,7 @@ error: you are implementing `Clone` explicitly on a `Copy` type\n 43 | | }\n    | |_^\n    |\n-   = note: `-D expl-impl-clone-on-copy` implied by `-D warnings`\n+   = note: `-D clippy::expl-impl-clone-on-copy` implied by `-D warnings`\n note: consider deriving `Clone` or removing `Copy`\n   --> $DIR/derive.rs:41:1\n    |"}, {"sha": "a8284dca32677d5ed212f90618800a504f3cc0cd", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n #![feature(never_type)]\n \n-#![warn(diverging_sub_expression)]\n-#![allow(match_same_arms, logic_bug)]\n+#![warn(clippy::diverging_sub_expression)]\n+#![allow(clippy::match_same_arms, clippy::logic_bug)]\n \n-#[allow(empty_loop)]\n+#[allow(clippy::empty_loop)]\n fn diverge() -> ! { loop {} }\n \n struct A;\n@@ -12,7 +14,7 @@ impl A {\n     fn foo(&self) -> ! { diverge() }\n }\n \n-#[allow(unused_variables, unnecessary_operation, short_circuit_statement)]\n+#[allow(unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n fn main() {\n     let b = true;\n     b || diverge();"}, {"sha": "8e86a7734dc38ca69bf201ca79879a3a7512b5ea", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,39 +1,39 @@\n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:18:10\n+  --> $DIR/diverging_sub_expression.rs:20:10\n    |\n-18 |     b || diverge();\n+20 |     b || diverge();\n    |          ^^^^^^^^^\n    |\n-   = note: `-D diverging-sub-expression` implied by `-D warnings`\n+   = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:19:10\n+  --> $DIR/diverging_sub_expression.rs:21:10\n    |\n-19 |     b || A.foo();\n+21 |     b || A.foo();\n    |          ^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:28:26\n+  --> $DIR/diverging_sub_expression.rs:30:26\n    |\n-28 |             6 => true || return,\n+30 |             6 => true || return,\n    |                          ^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:29:26\n+  --> $DIR/diverging_sub_expression.rs:31:26\n    |\n-29 |             7 => true || continue,\n+31 |             7 => true || continue,\n    |                          ^^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:32:26\n+  --> $DIR/diverging_sub_expression.rs:34:26\n    |\n-32 |             3 => true || diverge(),\n+34 |             3 => true || diverge(),\n    |                          ^^^^^^^^^\n \n error: sub-expression diverges\n-  --> $DIR/diverging_sub_expression.rs:37:26\n+  --> $DIR/diverging_sub_expression.rs:39:26\n    |\n-37 |             _ => true || break,\n+39 |             _ => true || break,\n    |                          ^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "395ff217497432614675f300930a458f8a3254d4", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n #![feature(alloc)]\n #![feature(associated_type_defaults)]\n \n \n-#![warn(linkedlist)]\n-#![allow(dead_code, needless_pass_by_value)]\n+#![warn(clippy::linkedlist)]\n+#![allow(dead_code, clippy::needless_pass_by_value)]\n \n extern crate alloc;\n use alloc::collections::linked_list::LinkedList;"}, {"sha": "5322075208ce827db48124ac4f38150319ed3b39", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,48 +1,48 @@\n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:12:16\n+  --> $DIR/dlist.rs:14:16\n    |\n-12 |     type Baz = LinkedList<u8>;\n+14 |     type Baz = LinkedList<u8>;\n    |                ^^^^^^^^^^^^^^\n    |\n-   = note: `-D linkedlist` implied by `-D warnings`\n+   = note: `-D clippy::linkedlist` implied by `-D warnings`\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:13:12\n+  --> $DIR/dlist.rs:15:12\n    |\n-13 |     fn foo(LinkedList<u8>);\n+15 |     fn foo(LinkedList<u8>);\n    |            ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:14:24\n+  --> $DIR/dlist.rs:16:24\n    |\n-14 |     const BAR : Option<LinkedList<u8>>;\n+16 |     const BAR : Option<LinkedList<u8>>;\n    |                        ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:25:15\n+  --> $DIR/dlist.rs:27:15\n    |\n-25 |     fn foo(_: LinkedList<u8>) {}\n+27 |     fn foo(_: LinkedList<u8>) {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:28:39\n+  --> $DIR/dlist.rs:30:39\n    |\n-28 | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n+30 | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n    |                                       ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:32:29\n+  --> $DIR/dlist.rs:34:29\n    |\n-32 | pub fn test_ret() -> Option<LinkedList<u8>> {\n+34 | pub fn test_ret() -> Option<LinkedList<u8>> {\n    |                             ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work"}, {"sha": "d48007a934718d8842accb19e6e661d3b70dac96", "filename": "tests/ui/doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,11 @@\n+#![feature(tool_lints)]\n+\n //! This file tests for the DOC_MARKDOWN lint\n \n \n \n #![allow(dead_code)]\n-#![warn(doc_markdown)]\n+#![warn(clippy::doc_markdown)]\n \n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n /// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n@@ -50,7 +52,7 @@ fn test_units() {\n }\n \n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n-/// See also [the issue tracker](https://github.com/rust-lang-nursery/rust-clippy/search?q=doc_markdown&type=Issues)\n+/// See also [the issue tracker](https://github.com/rust-lang-nursery/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n /// It can also be [inline_link2].\n ///"}, {"sha": "c781f36db7aa78deb6425db0c3880f14cf65b507", "filename": "tests/ui/doc.stderr", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,183 +1,183 @@\n error: you should put `DOC_MARKDOWN` between ticks in the documentation\n- --> $DIR/doc.rs:1:29\n+ --> $DIR/doc.rs:3:29\n   |\n-1 | //! This file tests for the DOC_MARKDOWN lint\n+3 | //! This file tests for the DOC_MARKDOWN lint\n   |                             ^^^^^^^^^^^^\n   |\n-  = note: `-D doc-markdown` implied by `-D warnings`\n+  = note: `-D clippy::doc-markdown` implied by `-D warnings`\n \n error: you should put `foo_bar` between ticks in the documentation\n- --> $DIR/doc.rs:8:9\n-  |\n-8 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n-  |         ^^^^^^^\n+  --> $DIR/doc.rs:10:9\n+   |\n+10 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+   |         ^^^^^^^\n \n error: you should put `foo::bar` between ticks in the documentation\n- --> $DIR/doc.rs:8:51\n-  |\n-8 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n-  |                                                   ^^^^^^^^\n+  --> $DIR/doc.rs:10:51\n+   |\n+10 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+   |                                                   ^^^^^^^^\n \n error: you should put `Foo::some_fun` between ticks in the documentation\n- --> $DIR/doc.rs:9:84\n-  |\n-9 | /// Markdown is _weird_. I mean _really weird_.  This /_ is ok. So is `_`. But not Foo::some_fun\n-  |                                                                                    ^^^^^^^^^^^^^\n+  --> $DIR/doc.rs:11:84\n+   |\n+11 | /// Markdown is _weird_. I mean _really weird_.  This /_ is ok. So is `_`. But not Foo::some_fun\n+   |                                                                                    ^^^^^^^^^^^^^\n \n error: you should put `a::global:path` between ticks in the documentation\n-  --> $DIR/doc.rs:11:15\n+  --> $DIR/doc.rs:13:15\n    |\n-11 | /// Here be ::a::global:path.\n+13 | /// Here be ::a::global:path.\n    |               ^^^^^^^^^^^^^^\n \n error: you should put `NotInCodeBlock` between ticks in the documentation\n-  --> $DIR/doc.rs:12:22\n+  --> $DIR/doc.rs:14:22\n    |\n-12 | /// That's not code ~NotInCodeBlock~.\n+14 | /// That's not code ~NotInCodeBlock~.\n    |                      ^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:13:5\n+  --> $DIR/doc.rs:15:5\n    |\n-13 | /// be_sure_we_got_to_the_end_of_it\n+15 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:27:5\n+  --> $DIR/doc.rs:29:5\n    |\n-27 | /// be_sure_we_got_to_the_end_of_it\n+29 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:34:5\n+  --> $DIR/doc.rs:36:5\n    |\n-34 | /// be_sure_we_got_to_the_end_of_it\n+36 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:48:5\n+  --> $DIR/doc.rs:50:5\n    |\n-48 | /// be_sure_we_got_to_the_end_of_it\n+50 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `link_with_underscores` between ticks in the documentation\n-  --> $DIR/doc.rs:52:22\n+  --> $DIR/doc.rs:54:22\n    |\n-52 | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n+54 | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `inline_link2` between ticks in the documentation\n-  --> $DIR/doc.rs:55:21\n+  --> $DIR/doc.rs:57:21\n    |\n-55 | /// It can also be [inline_link2].\n+57 | /// It can also be [inline_link2].\n    |                     ^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:65:5\n+  --> $DIR/doc.rs:67:5\n    |\n-65 | /// be_sure_we_got_to_the_end_of_it\n+67 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:73:8\n+  --> $DIR/doc.rs:75:8\n    |\n-73 | /// ## CamelCaseThing\n+75 | /// ## CamelCaseThing\n    |        ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:76:7\n+  --> $DIR/doc.rs:78:7\n    |\n-76 | /// # CamelCaseThing\n+78 | /// # CamelCaseThing\n    |       ^^^^^^^^^^^^^^\n \n error: you should put `CamelCaseThing` between ticks in the documentation\n-  --> $DIR/doc.rs:78:22\n+  --> $DIR/doc.rs:80:22\n    |\n-78 | /// Not a title #897 CamelCaseThing\n+80 | /// Not a title #897 CamelCaseThing\n    |                      ^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:79:5\n+  --> $DIR/doc.rs:81:5\n    |\n-79 | /// be_sure_we_got_to_the_end_of_it\n+81 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:86:5\n+  --> $DIR/doc.rs:88:5\n    |\n-86 | /// be_sure_we_got_to_the_end_of_it\n+88 | /// be_sure_we_got_to_the_end_of_it\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-  --> $DIR/doc.rs:99:5\n-   |\n-99 | /// be_sure_we_got_to_the_end_of_it\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   --> $DIR/doc.rs:101:5\n+    |\n+101 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-   --> $DIR/doc.rs:110:42\n+   --> $DIR/doc.rs:112:42\n     |\n-110 | /** E.g. serialization of an empty list: FooBar\n+112 | /** E.g. serialization of an empty list: FooBar\n     |                                          ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-   --> $DIR/doc.rs:115:5\n+   --> $DIR/doc.rs:117:5\n     |\n-115 | And BarQuz too.\n+117 | And BarQuz too.\n     |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-   --> $DIR/doc.rs:116:1\n+   --> $DIR/doc.rs:118:1\n     |\n-116 | be_sure_we_got_to_the_end_of_it\n+118 | be_sure_we_got_to_the_end_of_it\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `FooBar` between ticks in the documentation\n-   --> $DIR/doc.rs:121:42\n+   --> $DIR/doc.rs:123:42\n     |\n-121 | /** E.g. serialization of an empty list: FooBar\n+123 | /** E.g. serialization of an empty list: FooBar\n     |                                          ^^^^^^\n \n error: you should put `BarQuz` between ticks in the documentation\n-   --> $DIR/doc.rs:126:5\n+   --> $DIR/doc.rs:128:5\n     |\n-126 | And BarQuz too.\n+128 | And BarQuz too.\n     |     ^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-   --> $DIR/doc.rs:127:1\n+   --> $DIR/doc.rs:129:1\n     |\n-127 | be_sure_we_got_to_the_end_of_it\n+129 | be_sure_we_got_to_the_end_of_it\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n-   --> $DIR/doc.rs:138:5\n+   --> $DIR/doc.rs:140:5\n     |\n-138 | /// be_sure_we_got_to_the_end_of_it\n+140 | /// be_sure_we_got_to_the_end_of_it\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-   --> $DIR/doc.rs:165:13\n+   --> $DIR/doc.rs:167:13\n     |\n-165 | /// Not ok: http://www.unicode.org\n+167 | /// Not ok: http://www.unicode.org\n     |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-   --> $DIR/doc.rs:166:13\n+   --> $DIR/doc.rs:168:13\n     |\n-166 | /// Not ok: https://www.unicode.org\n+168 | /// Not ok: https://www.unicode.org\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-   --> $DIR/doc.rs:167:13\n+   --> $DIR/doc.rs:169:13\n     |\n-167 | /// Not ok: http://www.unicode.org/\n+169 | /// Not ok: http://www.unicode.org/\n     |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: you should put bare URLs between `<`/`>` or make a proper Markdown link\n-   --> $DIR/doc.rs:168:13\n+   --> $DIR/doc.rs:170:13\n     |\n-168 | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n+170 | /// Not ok: http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 30 previous errors"}, {"sha": "e6a0e976414df283e91b366c9c80435e918449e0", "filename": "tests/ui/double_comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_comparison.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: This binary expression can be simplified\n 4 |     if x == y || x < y {\n   |        ^^^^^^^^^^^^^^^ help: try: `x <= y`\n   |\n-  = note: `-D double-comparisons` implied by `-D warnings`\n+  = note: `-D clippy::double-comparisons` implied by `-D warnings`\n \n error: This binary expression can be simplified\n  --> $DIR/double_comparison.rs:7:8"}, {"sha": "0ec13900f99501418d08820f4f94bb7f352f3e38", "filename": "tests/ui/double_neg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(double_neg)]\n+#[warn(clippy::double_neg)]\n fn main() {\n     let x = 1;\n     -x;"}, {"sha": "02202dbd63ce0120f29f4159a648c5e184d48e18", "filename": "tests/ui/double_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: `--x` could be misinterpreted as pre-decrement by C programmers, is usual\n 9 |     --x;\n   |     ^^^\n   |\n-  = note: `-D double-neg` implied by `-D warnings`\n+  = note: `-D clippy::double-neg` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "8d81ee16fe92c0fe834fa790d673b50c4974808c", "filename": "tests/ui/double_parens.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(double_parens)]\n+#![warn(clippy::double_parens)]\n #![allow(dead_code)]\n \n fn dummy_fn<T>(_: T) {}"}, {"sha": "a6a29eeb06316f24223002bec3fba98660f2ecb1", "filename": "tests/ui/double_parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: Consider removing unnecessary double parentheses\n 16 |     ((0))\n    |     ^^^^^\n    |\n-   = note: `-D double-parens` implied by `-D warnings`\n+   = note: `-D clippy::double-parens` implied by `-D warnings`\n \n error: Consider removing unnecessary double parentheses\n   --> $DIR/double_parens.rs:20:14"}, {"sha": "aa70490f8ab4b6729aaca808556261ef5f44fba1", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(drop_copy, forget_copy)]\n-#![allow(toplevel_ref_arg, drop_ref, forget_ref, unused_mut)]\n+#![warn(clippy::drop_copy, clippy::forget_copy)]\n+#![allow(clippy::toplevel_ref_arg, clippy::drop_ref, clippy::forget_ref, unused_mut)]\n \n use std::mem::{drop, forget};\n use std::vec::Vec;"}, {"sha": "043067fe8af7311061312eac4f689c4590af0df7", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: calls to `std::mem::drop` with a value that implements Copy. Dropping a c\n 33 |     drop(s1);\n    |     ^^^^^^^^\n    |\n-   = note: `-D drop-copy` implied by `-D warnings`\n+   = note: `-D clippy::drop-copy` implied by `-D warnings`\n note: argument has type SomeStruct\n   --> $DIR/drop_forget_copy.rs:33:10\n    |\n@@ -41,7 +41,7 @@ error: calls to `std::mem::forget` with a value that implements Copy. Forgetting\n 39 |     forget(s1);\n    |     ^^^^^^^^^^\n    |\n-   = note: `-D forget-copy` implied by `-D warnings`\n+   = note: `-D clippy::forget-copy` implied by `-D warnings`\n note: argument has type SomeStruct\n   --> $DIR/drop_forget_copy.rs:39:12\n    |"}, {"sha": "bb4781db71b8ccc367df522618f18f4773c00f38", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(drop_ref, forget_ref)]\n-#![allow(toplevel_ref_arg, similar_names, needless_pass_by_value)]\n+#![warn(clippy::drop_ref, clippy::forget_ref)]\n+#![allow(clippy::toplevel_ref_arg, clippy::similar_names, clippy::needless_pass_by_value)]\n \n use std::mem::{drop, forget};\n "}, {"sha": "227918f591723e9127fe587bef01239e94bc7601", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n 12 |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D drop-ref` implied by `-D warnings`\n+   = note: `-D clippy::drop-ref` implied by `-D warnings`\n note: argument has type &SomeStruct\n   --> $DIR/drop_forget_ref.rs:12:10\n    |\n@@ -17,7 +17,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n 13 |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D forget-ref` implied by `-D warnings`\n+   = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type &SomeStruct\n   --> $DIR/drop_forget_ref.rs:13:12\n    |"}, {"sha": "e54920c1b56ddbb912b7926811225ace86ca7b68", "filename": "tests/ui/duplicate_underscore_argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(duplicate_underscore_argument)]\n+#![warn(clippy::duplicate_underscore_argument)]\n #[allow(dead_code, unused)]\n \n fn join_the_dark_side(darth: i32, _darth: i32) {}"}, {"sha": "70714534653af76fd50df58ba0f022024d31a6de", "filename": "tests/ui/duplicate_underscore_argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduplicate_underscore_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduplicate_underscore_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: `darth` already exists, having another argument having almost the same na\n 7 | fn join_the_dark_side(darth: i32, _darth: i32) {}\n   |                       ^^^^^\n   |\n-  = note: `-D duplicate-underscore-argument` implied by `-D warnings`\n+  = note: `-D clippy::duplicate-underscore-argument` implied by `-D warnings`\n \n error: aborting due to previous error\n "}, {"sha": "d732a0228d56a15d4154d79a95958a3cac37e037", "filename": "tests/ui/duration_subsec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![warn(duration_subsec)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::duration_subsec)]\n \n use std::time::Duration;\n "}, {"sha": "c23b041a80a5e06c5ba3177c7019a0216f8a77b9", "filename": "tests/ui/duration_subsec.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduration_subsec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fduration_subsec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,33 +1,33 @@\n error: Calling `subsec_millis()` is more concise than this calculation\n- --> $DIR/duration_subsec.rs:8:24\n-  |\n-8 |     let bad_millis_1 = dur.subsec_micros() / 1_000;\n-  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n-  |\n-  = note: `-D duration-subsec` implied by `-D warnings`\n+  --> $DIR/duration_subsec.rs:10:24\n+   |\n+10 |     let bad_millis_1 = dur.subsec_micros() / 1_000;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n+   |\n+   = note: `-D clippy::duration-subsec` implied by `-D warnings`\n \n error: Calling `subsec_millis()` is more concise than this calculation\n- --> $DIR/duration_subsec.rs:9:24\n-  |\n-9 |     let bad_millis_2 = dur.subsec_nanos() / 1_000_000;\n-  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n+  --> $DIR/duration_subsec.rs:11:24\n+   |\n+11 |     let bad_millis_2 = dur.subsec_nanos() / 1_000_000;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:14:22\n+  --> $DIR/duration_subsec.rs:16:22\n    |\n-14 |     let bad_micros = dur.subsec_nanos() / 1_000;\n+16 |     let bad_micros = dur.subsec_nanos() / 1_000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:19:13\n+  --> $DIR/duration_subsec.rs:21:13\n    |\n-19 |     let _ = (&dur).subsec_nanos() / 1_000;\n+21 |     let _ = (&dur).subsec_nanos() / 1_000;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&dur).subsec_micros()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:23:13\n+  --> $DIR/duration_subsec.rs:25:13\n    |\n-23 |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n+25 |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n \n error: aborting due to 5 previous errors"}, {"sha": "3776aecf54faca0152e4f522258c65a437ac38ee", "filename": "tests/ui/else_if_without_else.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,7 @@\n-#![warn(clippy)]\n-#![warn(else_if_without_else)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::else_if_without_else)]\n \n fn bla1() -> bool { unimplemented!() }\n fn bla2() -> bool { unimplemented!() }"}, {"sha": "a352546ce9f007cb96afe9575cd96182838a4db8", "filename": "tests/ui/else_if_without_else.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Felse_if_without_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Felse_if_without_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,21 +1,21 @@\n error: if expression with an `else if`, but without a final `else`\n-  --> $DIR/else_if_without_else.rs:39:12\n+  --> $DIR/else_if_without_else.rs:41:12\n    |\n-39 |       } else if bla2() { //~ ERROR else if without else\n+41 |       } else if bla2() { //~ ERROR else if without else\n    |  ____________^\n-40 | |         println!(\"else if\");\n-41 | |     }\n+42 | |         println!(\"else if\");\n+43 | |     }\n    | |_____^ help: add an `else` block here\n    |\n-   = note: `-D else-if-without-else` implied by `-D warnings`\n+   = note: `-D clippy::else-if-without-else` implied by `-D warnings`\n \n error: if expression with an `else if`, but without a final `else`\n-  --> $DIR/else_if_without_else.rs:47:12\n+  --> $DIR/else_if_without_else.rs:49:12\n    |\n-47 |       } else if bla3() { //~ ERROR else if without else\n+49 |       } else if bla3() { //~ ERROR else if without else\n    |  ____________^\n-48 | |         println!(\"else if 2\");\n-49 | |     }\n+50 | |         println!(\"else if 2\");\n+51 | |     }\n    | |_____^ help: add an `else` block here\n \n error: aborting due to 2 previous errors"}, {"sha": "3398b71eead9cdaf2e96d00f45975be009c3dede", "filename": "tests/ui/empty_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n-\n+#![feature(tool_lints)]\n \n \n #![allow(dead_code)]\n-#![warn(empty_enum)]\n+#![warn(clippy::empty_enum)]\n \n enum Empty {}\n "}, {"sha": "f198793fed43df19b759f46161b2399597e8d764", "filename": "tests/ui/empty_enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: enum with no variants\n 7 | enum Empty {}\n   | ^^^^^^^^^^^^^\n   |\n-  = note: `-D empty-enum` implied by `-D warnings`\n+  = note: `-D clippy::empty-enum` implied by `-D warnings`\n help: consider using the uninhabited type `!` or a wrapper around it\n  --> $DIR/empty_enum.rs:7:1\n   |"}, {"sha": "c46a0496a732144cca2fb2d347bbc5356ece49cd", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,5 @@\n-\n-#![warn(empty_line_after_outer_attr)]\n+#![feature(tool_lints)]\n+#![warn(clippy::empty_line_after_outer_attr)]\n \n // This should produce a warning\n #[crate_type = \"lib\"]"}, {"sha": "7bcec54a6003f42fd0f6a52baee5335a204a348b", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -7,7 +7,7 @@ error: Found an empty line after an outer attribute. Perhaps you forgot to add a\n 8 | | fn with_one_newline_and_comment() { assert!(true) }\n   | |_\n   |\n-  = note: `-D empty-line-after-outer-attr` implied by `-D warnings`\n+  = note: `-D clippy::empty-line-after-outer-attr` implied by `-D warnings`\n \n error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:17:1"}, {"sha": "955b0a6e917667d998c079edecf3bb64b058fa4f", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n+#![allow(unused, clippy::needless_pass_by_value)]\n \n-#![allow(unused, needless_pass_by_value)]\n-\n-#![warn(map_entry)]\n+#![warn(clippy::map_entry)]\n \n use std::collections::{BTreeMap, HashMap};\n use std::hash::Hash;"}, {"sha": "cffe8b232359a7409fc0612771f42d5979aa4d11", "filename": "tests/ui/entry.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: usage of `contains_key` followed by `insert` on a `HashMap`\n 13 |     if !m.contains_key(&k) { m.insert(k, v); }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `m.entry(k).or_insert(v)`\n    |\n-   = note: `-D map-entry` implied by `-D warnings`\n+   = note: `-D clippy::map-entry` implied by `-D warnings`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry.rs:17:5"}, {"sha": "47082f8f3e649f85fb15315aabc2895f33912dc8", "filename": "tests/ui/enum_glob_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy, clippy_pedantic)]\n-#![allow(unused_imports, dead_code, missing_docs_in_private_items)]\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(unused_imports, dead_code, clippy::missing_docs_in_private_items)]\n \n use std::cmp::Ordering::*;\n "}, {"sha": "bb1d19e41b27a47080ad258b68df0fa4dd77d699", "filename": "tests/ui/enum_glob_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_glob_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_glob_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: don't use glob imports for enum variants\n 6 | use std::cmp::Ordering::*;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n-  = note: `-D enum-glob-use` implied by `-D warnings`\n+  = note: `-D clippy::enum-glob-use` implied by `-D warnings`\n \n error: don't use glob imports for enum variants\n   --> $DIR/enum_glob_use.rs:12:1"}, {"sha": "4ddb7207a30b5761b30fd89b0ededd89f58c565e", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,8 @@\n+#![feature(tool_lints)]\n+\n #![feature(non_ascii_idents)]\n \n-#![warn(clippy, pub_enum_variant_names)]\n+#![warn(clippy::all, clippy::pub_enum_variant_names)]\n \n enum FakeCallType {\n     CALL, CREATE\n@@ -93,7 +95,7 @@ pub enum PubSeall {\n     WithOut,\n }\n \n-#[allow(pub_enum_variant_names)]\n+#[allow(clippy::pub_enum_variant_names)]\n mod allowed {\n     pub enum PubAllowed {\n         SomeThis,"}, {"sha": "bd083e7e069147df907cc23af3e5226f51e6fd70", "filename": "tests/ui/enum_variants.stderr", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,100 +1,100 @@\n error: Variant name ends with the enum's name\n-  --> $DIR/enum_variants.rs:14:5\n+  --> $DIR/enum_variants.rs:16:5\n    |\n-14 |     cFoo,\n+16 |     cFoo,\n    |     ^^^^\n    |\n-   = note: `-D enum-variant-names` implied by `-D warnings`\n+   = note: `-D clippy::enum-variant-names` implied by `-D warnings`\n \n error: Variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:25:5\n+  --> $DIR/enum_variants.rs:27:5\n    |\n-25 |     FoodGood,\n+27 |     FoodGood,\n    |     ^^^^^^^^\n \n error: Variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:26:5\n+  --> $DIR/enum_variants.rs:28:5\n    |\n-26 |     FoodMiddle,\n+28 |     FoodMiddle,\n    |     ^^^^^^^^^^\n \n error: Variant name starts with the enum's name\n-  --> $DIR/enum_variants.rs:27:5\n+  --> $DIR/enum_variants.rs:29:5\n    |\n-27 |     FoodBad,\n+29 |     FoodBad,\n    |     ^^^^^^^\n \n error: All variants have the same prefix: `Food`\n-  --> $DIR/enum_variants.rs:24:1\n+  --> $DIR/enum_variants.rs:26:1\n    |\n-24 | / enum Food {\n-25 | |     FoodGood,\n-26 | |     FoodMiddle,\n-27 | |     FoodBad,\n-28 | | }\n+26 | / enum Food {\n+27 | |     FoodGood,\n+28 | |     FoodMiddle,\n+29 | |     FoodBad,\n+30 | | }\n    | |_^\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: All variants have the same prefix: `CallType`\n-  --> $DIR/enum_variants.rs:34:1\n+  --> $DIR/enum_variants.rs:36:1\n    |\n-34 | / enum BadCallType {\n-35 | |     CallTypeCall,\n-36 | |     CallTypeCreate,\n-37 | |     CallTypeDestroy,\n-38 | | }\n+36 | / enum BadCallType {\n+37 | |     CallTypeCall,\n+38 | |     CallTypeCreate,\n+39 | |     CallTypeDestroy,\n+40 | | }\n    | |_^\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: All variants have the same prefix: `Constant`\n-  --> $DIR/enum_variants.rs:45:1\n+  --> $DIR/enum_variants.rs:47:1\n    |\n-45 | / enum Consts {\n-46 | |     ConstantInt,\n-47 | |     ConstantCake,\n-48 | |     ConstantLie,\n-49 | | }\n+47 | / enum Consts {\n+48 | |     ConstantInt,\n+49 | |     ConstantCake,\n+50 | |     ConstantLie,\n+51 | | }\n    | |_^\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: All variants have the same prefix: `With`\n-  --> $DIR/enum_variants.rs:78:1\n+  --> $DIR/enum_variants.rs:80:1\n    |\n-78 | / enum Seallll {\n-79 | |     WithOutCake,\n-80 | |     WithOutTea,\n-81 | |     WithOut,\n-82 | | }\n+80 | / enum Seallll {\n+81 | |     WithOutCake,\n+82 | |     WithOutTea,\n+83 | |     WithOut,\n+84 | | }\n    | |_^\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: All variants have the same prefix: `Prefix`\n-  --> $DIR/enum_variants.rs:84:1\n+  --> $DIR/enum_variants.rs:86:1\n    |\n-84 | / enum NonCaps {\n-85 | |     Prefix\u7684,\n-86 | |     PrefixTea,\n-87 | |     PrefixCake,\n-88 | | }\n+86 | / enum NonCaps {\n+87 | |     Prefix\u7684,\n+88 | |     PrefixTea,\n+89 | |     PrefixCake,\n+90 | | }\n    | |_^\n    |\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: All variants have the same prefix: `With`\n-  --> $DIR/enum_variants.rs:90:1\n+  --> $DIR/enum_variants.rs:92:1\n    |\n-90 | / pub enum PubSeall {\n-91 | |     WithOutCake,\n-92 | |     WithOutTea,\n-93 | |     WithOut,\n-94 | | }\n+92 | / pub enum PubSeall {\n+93 | |     WithOutCake,\n+94 | |     WithOutTea,\n+95 | |     WithOut,\n+96 | | }\n    | |_^\n    |\n-   = note: `-D pub-enum-variant-names` implied by `-D warnings`\n+   = note: `-D clippy::pub-enum-variant-names` implied by `-D warnings`\n    = help: remove the prefixes and use full paths to the variants instead of glob imports\n \n error: aborting due to 10 previous errors"}, {"sha": "8212f12b3dbce61fe77044bc41bb9d82a2976f4e", "filename": "tests/ui/enums_clike.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,9 @@\n+#![feature(tool_lints)]\n+\n // ignore-x86\n \n \n-#![warn(clippy)]\n+#![warn(clippy::all)]\n \n #![allow(unused)]\n "}, {"sha": "cccf4ed030c322b9c8266a07b5e8e3b24d6300b7", "filename": "tests/ui/enums_clike.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenums_clike.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fenums_clike.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,51 +1,51 @@\n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:10:5\n+  --> $DIR/enums_clike.rs:12:5\n    |\n-10 |     X = 0x1_0000_0000,\n+12 |     X = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D enum-clike-unportable-variant` implied by `-D warnings`\n+   = note: `-D clippy::enum-clike-unportable-variant` implied by `-D warnings`\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:17:5\n+  --> $DIR/enums_clike.rs:19:5\n    |\n-17 |     X = 0x1_0000_0000,\n+19 |     X = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:20:5\n+  --> $DIR/enums_clike.rs:22:5\n    |\n-20 |     A = 0xFFFF_FFFF,\n+22 |     A = 0xFFFF_FFFF,\n    |     ^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:27:5\n+  --> $DIR/enums_clike.rs:29:5\n    |\n-27 |     Z = 0xFFFF_FFFF,\n+29 |     Z = 0xFFFF_FFFF,\n    |     ^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:28:5\n+  --> $DIR/enums_clike.rs:30:5\n    |\n-28 |     A = 0x1_0000_0000,\n+30 |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:30:5\n+  --> $DIR/enums_clike.rs:32:5\n    |\n-30 |     C = (std::i32::MIN as isize) - 1,\n+32 |     C = (std::i32::MIN as isize) - 1,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:36:5\n+  --> $DIR/enums_clike.rs:38:5\n    |\n-36 |     Z = 0xFFFF_FFFF,\n+38 |     Z = 0xFFFF_FFFF,\n    |     ^^^^^^^^^^^^^^^\n \n error: Clike enum variant discriminant is not portable to 32-bit targets\n-  --> $DIR/enums_clike.rs:37:5\n+  --> $DIR/enums_clike.rs:39:5\n    |\n-37 |     A = 0x1_0000_0000,\n+39 |     A = 0x1_0000_0000,\n    |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors"}, {"sha": "a88866436dd527e6942a91ab504b28a46fdf4d62", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,10 +1,10 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(eq_op)]\n-#[allow(identity_op, double_parens, many_single_char_names)]\n-#[allow(no_effect, unused_variables, unnecessary_operation, short_circuit_statement)]\n-#[warn(nonminimal_bool)]\n+#[warn(clippy::eq_op)]\n+#[allow(clippy::identity_op, clippy::double_parens, clippy::many_single_char_names)]\n+#[allow(clippy::no_effect, unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n+#[warn(clippy::nonminimal_bool)]\n fn main() {\n     // simple values and comparisons\n     1 == 1;"}, {"sha": "ad0c8d8ecd7c860cbfbd28d6fa4c01a3f7c69301", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: this boolean expression can be simplified\n 37 |     true && true;\n    |     ^^^^^^^^^^^^ help: try: `true`\n    |\n-   = note: `-D nonminimal-bool` implied by `-D warnings`\n+   = note: `-D clippy::nonminimal-bool` implied by `-D warnings`\n \n error: this boolean expression can be simplified\n   --> $DIR/eq_op.rs:39:5\n@@ -42,7 +42,7 @@ error: equal expressions as operands to `==`\n 10 |     1 == 1;\n    |     ^^^^^^\n    |\n-   = note: `-D eq-op` implied by `-D warnings`\n+   = note: `-D clippy::eq-op` implied by `-D warnings`\n \n error: equal expressions as operands to `==`\n   --> $DIR/eq_op.rs:11:5\n@@ -202,7 +202,7 @@ error: taken reference of right operand\n    |                 |\n    |                 help: use the right value directly: `y`\n    |\n-   = note: `-D op-ref` implied by `-D warnings`\n+   = note: `-D clippy::op-ref` implied by `-D warnings`\n \n error: equal expressions as operands to `/`\n   --> $DIR/eq_op.rs:97:20"}, {"sha": "02745ac5d911fbe5c2bd99744911f98f20508313", "filename": "tests/ui/erasing_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[allow(no_effect)]\n-#[warn(erasing_op)]\n+#[allow(clippy::no_effect)]\n+#[warn(clippy::erasing_op)]\n fn main() {\n     let x: u8 = 0;\n "}, {"sha": "18486ab47819aeb75a1d4c0aeb9b2416aeb42f06", "filename": "tests/ui/erasing_op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: this operation will always return zero. This is likely not the intended o\n 9 |     x * 0;\n   |     ^^^^^\n   |\n-  = note: `-D erasing-op` implied by `-D warnings`\n+  = note: `-D clippy::erasing-op` implied by `-D warnings`\n \n error: this operation will always return zero. This is likely not the intended outcome\n   --> $DIR/erasing_op.rs:10:5"}, {"sha": "4dd46f20e7641cf48b4f70cad8d22289d038be1d", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value, option_map_unit_fn, trivially_copy_pass_by_ref)]\n-#![warn(redundant_closure, needless_borrow)]\n+#![allow(unknown_lints, unused, clippy::no_effect, clippy::redundant_closure_call, clippy::many_single_char_names, clippy::needless_pass_by_value, clippy::option_map_unit_fn, clippy::trivially_copy_pass_by_ref)]\n+#![warn(clippy::redundant_closure, clippy::needless_borrow)]\n \n fn main() {\n     let a = Some(1u8).map(|a| foo(a));"}, {"sha": "89543d6af0c6b9ea0046a1450a10d95405857478", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: redundant closure found\n 7 |     let a = Some(1u8).map(|a| foo(a));\n   |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n   |\n-  = note: `-D redundant-closure` implied by `-D warnings`\n+  = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n  --> $DIR/eta.rs:8:10\n@@ -24,7 +24,7 @@ error: this expression borrows a reference that is immediately dereferenced by t\n 11 |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n-   = note: `-D needless-borrow` implied by `-D warnings`\n+   = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n   --> $DIR/eta.rs:18:27"}, {"sha": "b240dde06f8e4ffc7952e96ca9151ac4741fd540", "filename": "tests/ui/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#[warn(eval_order_dependence)]\n-#[allow(unused_assignments, unused_variables, many_single_char_names, no_effect, dead_code, blacklisted_name)]\n+#[warn(clippy::eval_order_dependence)]\n+#[allow(unused_assignments, unused_variables, clippy::many_single_char_names, clippy::no_effect, dead_code, clippy::blacklisted_name)]\n fn main() {\n     let mut x = 0;\n     let a = { x = 1; 1 } + x;"}, {"sha": "3caba829be42d64771a8d2cce31b85d90b1134d8", "filename": "tests/ui/eval_order_dependence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: unsequenced read of a variable\n 8 |     let a = { x = 1; 1 } + x;\n   |                            ^\n   |\n-  = note: `-D eval-order-dependence` implied by `-D warnings`\n+  = note: `-D clippy::eval-order-dependence` implied by `-D warnings`\n note: whether read occurs before this write depends on evaluation order\n  --> $DIR/eval_order_dependence.rs:8:15\n   |"}, {"sha": "b44364d6beb3eab06d6eac2eb774239e29da9ba4", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n-\n-#![warn(excessive_precision)]\n-#![allow(print_literal)]\n+#![feature(tool_lints)]\n+#![warn(clippy::excessive_precision)]\n+#![allow(clippy::print_literal)]\n \n fn main() {\n     // Consts"}, {"sha": "bb0546cdcc689cdca6e45aa6afd8c826a9e4a2aa", "filename": "tests/ui/excessive_precision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: float has excessive precision\n 15 |     const BAD32_1: f32 = 0.123_456_789_f32;\n    |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n    |\n-   = note: `-D excessive-precision` implied by `-D warnings`\n+   = note: `-D clippy::excessive-precision` implied by `-D warnings`\n \n error: float has excessive precision\n   --> $DIR/excessive_precision.rs:16:26"}, {"sha": "9d6d13c84c546fa786cc717c96f4b270709e69cb", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![warn(explicit_write)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::explicit_write)]\n \n \n fn stdout() -> String {"}, {"sha": "fb14120b16d39b07c2cbc710f0e13dadb9a8b87f", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,39 +1,39 @@\n error: use of `write!(stdout(), ...).unwrap()`. Consider using `print!` instead\n-  --> $DIR/explicit_write.rs:16:9\n+  --> $DIR/explicit_write.rs:18:9\n    |\n-16 |         write!(std::io::stdout(), \"test\").unwrap();\n+18 |         write!(std::io::stdout(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `-D explicit-write` implied by `-D warnings`\n+   = note: `-D clippy::explicit-write` implied by `-D warnings`\n \n error: use of `write!(stderr(), ...).unwrap()`. Consider using `eprint!` instead\n-  --> $DIR/explicit_write.rs:17:9\n+  --> $DIR/explicit_write.rs:19:9\n    |\n-17 |         write!(std::io::stderr(), \"test\").unwrap();\n+19 |         write!(std::io::stderr(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `writeln!(stdout(), ...).unwrap()`. Consider using `println!` instead\n-  --> $DIR/explicit_write.rs:18:9\n+  --> $DIR/explicit_write.rs:20:9\n    |\n-18 |         writeln!(std::io::stdout(), \"test\").unwrap();\n+20 |         writeln!(std::io::stdout(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `writeln!(stderr(), ...).unwrap()`. Consider using `eprintln!` instead\n-  --> $DIR/explicit_write.rs:19:9\n+  --> $DIR/explicit_write.rs:21:9\n    |\n-19 |         writeln!(std::io::stderr(), \"test\").unwrap();\n+21 |         writeln!(std::io::stderr(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `stdout().write_fmt(...).unwrap()`. Consider using `print!` instead\n-  --> $DIR/explicit_write.rs:20:9\n+  --> $DIR/explicit_write.rs:22:9\n    |\n-20 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n+22 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` instead\n-  --> $DIR/explicit_write.rs:21:9\n+  --> $DIR/explicit_write.rs:23:9\n    |\n-21 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+23 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "5e33cca59fa73331ad97d594e682562f99ae9a34", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![deny(fallible_impl_from)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::fallible_impl_from)]\n \n // docs example\n struct Foo(i32);"}, {"sha": "4dbc7879d316d921b1e25ad000a466c352286d84", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,91 +1,91 @@\n error: consider implementing `TryFrom` instead\n- --> $DIR/fallible_impl_from.rs:5:1\n-  |\n-5 | / impl From<String> for Foo {\n-6 | |     fn from(s: String) -> Self {\n-7 | |         Foo(s.parse().unwrap())\n-8 | |     }\n-9 | | }\n-  | |_^\n-  |\n+  --> $DIR/fallible_impl_from.rs:7:1\n+   |\n+7  | / impl From<String> for Foo {\n+8  | |     fn from(s: String) -> Self {\n+9  | |         Foo(s.parse().unwrap())\n+10 | |     }\n+11 | | }\n+   | |_^\n+   |\n note: lint level defined here\n- --> $DIR/fallible_impl_from.rs:1:9\n-  |\n-1 | #![deny(fallible_impl_from)]\n-  |         ^^^^^^^^^^^^^^^^^^\n-  = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+  --> $DIR/fallible_impl_from.rs:3:9\n+   |\n+3  | #![deny(clippy::fallible_impl_from)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n note: potential failure(s)\n- --> $DIR/fallible_impl_from.rs:7:13\n-  |\n-7 |         Foo(s.parse().unwrap())\n-  |             ^^^^^^^^^^^^^^^^^^\n+  --> $DIR/fallible_impl_from.rs:9:13\n+   |\n+9  |         Foo(s.parse().unwrap())\n+   |             ^^^^^^^^^^^^^^^^^^\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:28:1\n+  --> $DIR/fallible_impl_from.rs:30:1\n    |\n-28 | / impl From<usize> for Invalid {\n-29 | |     fn from(i: usize) -> Invalid {\n-30 | |         if i != 42 {\n-31 | |             panic!();\n+30 | / impl From<usize> for Invalid {\n+31 | |     fn from(i: usize) -> Invalid {\n+32 | |         if i != 42 {\n+33 | |             panic!();\n ...  |\n-34 | |     }\n-35 | | }\n+36 | |     }\n+37 | | }\n    | |_^\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:31:13\n+  --> $DIR/fallible_impl_from.rs:33:13\n    |\n-31 |             panic!();\n+33 |             panic!();\n    |             ^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:37:1\n+  --> $DIR/fallible_impl_from.rs:39:1\n    |\n-37 | / impl From<Option<String>> for Invalid {\n-38 | |     fn from(s: Option<String>) -> Invalid {\n-39 | |         let s = s.unwrap();\n-40 | |         if !s.is_empty() {\n+39 | / impl From<Option<String>> for Invalid {\n+40 | |     fn from(s: Option<String>) -> Invalid {\n+41 | |         let s = s.unwrap();\n+42 | |         if !s.is_empty() {\n ...  |\n-46 | |     }\n-47 | | }\n+48 | |     }\n+49 | | }\n    | |_^\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:39:17\n+  --> $DIR/fallible_impl_from.rs:41:17\n    |\n-39 |         let s = s.unwrap();\n+41 |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n-40 |         if !s.is_empty() {\n-41 |             panic!(42);\n+42 |         if !s.is_empty() {\n+43 |             panic!(42);\n    |             ^^^^^^^^^^^\n-42 |         } else if s.parse::<u32>().unwrap() != 42 {\n+44 |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n-43 |             panic!(\"{:?}\", s);\n+45 |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:55:1\n+  --> $DIR/fallible_impl_from.rs:57:1\n    |\n-55 | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n-56 | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n-57 | |         if s.parse::<u32>().ok().unwrap() != 42 {\n-58 | |             panic!(\"{:?}\", s);\n+57 | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n+58 | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n+59 | |         if s.parse::<u32>().ok().unwrap() != 42 {\n+60 | |             panic!(\"{:?}\", s);\n ...  |\n-61 | |     }\n-62 | | }\n+63 | |     }\n+64 | | }\n    | |_^\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:57:12\n+  --> $DIR/fallible_impl_from.rs:59:12\n    |\n-57 |         if s.parse::<u32>().ok().unwrap() != 42 {\n+59 |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-58 |             panic!(\"{:?}\", s);\n+60 |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "d7a50a5883827b1c235ad388c287d44f53958516", "filename": "tests/ui/filter_methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy, clippy_pedantic)]\n-#![allow(missing_docs_in_private_items)]\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {\n     let _: Vec<_> = vec![5; 6].into_iter()"}, {"sha": "1fde70601aaffec15ce89ddf59edf924c3ce13bb", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -7,7 +7,7 @@ error: called `filter(p).map(q)` on an `Iterator`. This is more succinctly expre\n 10 | |                               .map(|x| x * 2)\n    | |_____________________________________________^\n    |\n-   = note: `-D filter-map` implied by `-D warnings`\n+   = note: `-D clippy::filter-map` implied by `-D warnings`\n \n error: called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n   --> $DIR/filter_methods.rs:13:21"}, {"sha": "d5b02fb706f1c81d120f514d791096c38681d368", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(float_cmp)]\n-#![allow(unused, no_effect, unnecessary_operation, cast_lossless)]\n+#![warn(clippy::float_cmp)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n \n use std::ops::Add;\n "}, {"sha": "598ebf3366887f2863dc3a1ac0e60bb40d18038d", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: strict comparison of f32 or f64\n 49 |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() < error`\n    |\n-   = note: `-D float-cmp` implied by `-D warnings`\n+   = note: `-D clippy::float-cmp` implied by `-D warnings`\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n   --> $DIR/float_cmp.rs:49:5\n    |"}, {"sha": "279400604a2987e5652c1be2edad004537f805d5", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,9 +1,9 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(float_cmp_const)]\n-#![allow(float_cmp)]\n-#![allow(unused, no_effect, unnecessary_operation)]\n+#![warn(clippy::float_cmp_const)]\n+#![allow(clippy::float_cmp)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ONE: f32 = 1.0;\n const TWO: f32 = 2.0;\n@@ -36,7 +36,7 @@ fn main() {\n     ONE != ::std::f32::INFINITY;\n     ONE == ::std::f32::NEG_INFINITY;\n \n-    // no errors, but will warn float_cmp if '#![allow(float_cmp)]' above is removed\n+    // no errors, but will warn clippy::float_cmp if '#![allow(float_cmp)]' above is removed\n     let w = 1.1;\n     v == w;\n     v != w;"}, {"sha": "14083979511dbafc640095397b1f020fb842a1e5", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: strict comparison of f32 or f64 constant\n 17 |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n-   = note: `-D float-cmp-const` implied by `-D warnings`\n+   = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n   --> $DIR/float_cmp_const.rs:17:5\n    |"}, {"sha": "39eee64883c6e3c3b0fb7f845e477ab8ccd859a6", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,4 @@\n-\n+#![feature(tool_lints)]\n \n \n use std::collections::*;\n@@ -7,7 +7,7 @@ use std::rc::Rc;\n static STATIC: [usize; 4] = [0, 1, 8, 16];\n const CONST: [usize; 4] = [0, 1, 8, 16];\n \n-#[warn(clippy)]\n+#[warn(clippy::all)]\n fn for_loop_over_option_and_result() {\n     let option = Some(1);\n     let result = option.ok_or(\"x not found\");\n@@ -27,7 +27,7 @@ fn for_loop_over_option_and_result() {\n         println!(\"{}\", x);\n     }\n \n-    // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call\n+    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n     // in the chain\n     for x in v.iter().next() {\n         println!(\"{}\", x);\n@@ -73,11 +73,11 @@ impl Unrelated {\n     }\n }\n \n-#[warn(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop,\n-       explicit_counter_loop, for_kv_map)]\n-#[warn(unused_collect)]\n-#[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n-#[allow(many_single_char_names, unused_variables)]\n+#[warn(clippy::needless_range_loop, clippy::explicit_iter_loop, clippy::explicit_into_iter_loop, clippy::iter_next_loop, clippy::reverse_range_loop,\n+       clippy::explicit_counter_loop, clippy::for_kv_map)]\n+#[warn(clippy::unused_collect)]\n+#[allow(clippy::linkedlist, clippy::shadow_unrelated, clippy::unnecessary_mut_passed, clippy::cyclomatic_complexity, clippy::similar_names)]\n+#[allow(clippy::many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n \n@@ -429,7 +429,7 @@ fn main() {\n     }\n }\n \n-#[allow(used_underscore_binding)]\n+#[allow(clippy::used_underscore_binding)]\n fn test_for_kv_map() {\n     let m: HashMap<u64, u64> = HashMap::new();\n \n@@ -456,7 +456,7 @@ fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n \n const LOOP_OFFSET: usize = 5000;\n \n-#[warn(needless_range_loop)]\n+#[warn(clippy::needless_range_loop)]\n pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n     // plain manual memcpy\n     for i in 0..src.len() {\n@@ -542,14 +542,14 @@ pub fn manual_copy(src: &[i32], dst: &mut [i32], dst2: &mut [i32]) {\n     }\n }\n \n-#[warn(needless_range_loop)]\n+#[warn(clippy::needless_range_loop)]\n pub fn manual_clone(src: &[String], dst: &mut [String]) {\n     for i in 0..src.len() {\n         dst[i] = src[i].clone();\n     }\n }\n \n-#[warn(needless_range_loop)]\n+#[warn(clippy::needless_range_loop)]\n pub fn manual_copy_same_destination(dst: &mut [i32], d: usize, s: usize) {\n     // Same source and destination - don't trigger lint\n     for i in 0..dst.len() {"}, {"sha": "732dc2ab448bda5f2d82c8d04c9cf22497b4c5c1", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: for loop over `option`, which is an `Option`. This is more readably writt\n 17 |     for x in option {\n    |              ^^^^^^\n    |\n-   = note: `-D for-loop-over-option` implied by `-D warnings`\n+   = note: `-D clippy::for-loop-over-option` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n@@ -13,7 +13,7 @@ error: for loop over `result`, which is a `Result`. This is more readably writte\n 22 |     for x in result {\n    |              ^^^^^^\n    |\n-   = note: `-D for-loop-over-result` implied by `-D warnings`\n+   = note: `-D clippy::for-loop-over-result` implied by `-D warnings`\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n@@ -30,7 +30,7 @@ error: you are iterating over `Iterator::next()` which is an Option; this will c\n 32 |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n-   = note: `-D iter-next-loop` implied by `-D warnings`\n+   = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n   --> $DIR/for_loop.rs:37:14\n@@ -57,7 +57,7 @@ error: this loop never actually loops\n 56 | |     }\n    | |_____^\n    |\n-   = note: `-D never-loop` implied by `-D warnings`\n+   = note: `-D clippy::never-loop` implied by `-D warnings`\n \n error: this loop never actually loops\n   --> $DIR/for_loop.rs:59:5\n@@ -74,7 +74,7 @@ error: the loop variable `i` is only used to index `vec`.\n 86 |     for i in 0..vec.len() {\n    |              ^^^^^^^^^^^^\n    |\n-   = note: `-D needless-range-loop` implied by `-D warnings`\n+   = note: `-D clippy::needless-range-loop` implied by `-D warnings`\n help: consider using an iterator\n    |\n 86 |     for <item> in &vec {\n@@ -206,7 +206,7 @@ error: this range is empty so this for loop will never run\n 148 |     for i in 10..0 {\n     |              ^^^^^\n     |\n-    = note: `-D reverse-range-loop` implied by `-D warnings`\n+    = note: `-D clippy::reverse-range-loop` implied by `-D warnings`\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |\n 148 |     for i in (0..10).rev() {\n@@ -270,7 +270,7 @@ error: it is more idiomatic to loop over references to containers instead of usi\n 215 |     for _v in vec.iter() {}\n     |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n     |\n-    = note: `-D explicit-iter-loop` implied by `-D warnings`\n+    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:217:15\n@@ -284,7 +284,7 @@ error: it is more idiomatic to loop over containers instead of using explicit it\n 220 |     for _v in out_vec.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n     |\n-    = note: `-D explicit-into-iter-loop` implied by `-D warnings`\n+    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n    --> $DIR/for_loop.rs:223:15\n@@ -358,15 +358,15 @@ error: you are collect()ing an iterator and throwing away the result. Consider u\n 264 |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n-    = note: `-D unused-collect` implied by `-D warnings`\n+    = note: `-D clippy::unused-collect` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n    --> $DIR/for_loop.rs:269:15\n     |\n 269 |     for _v in &vec {\n     |               ^^^^\n     |\n-    = note: `-D explicit-counter-loop` implied by `-D warnings`\n+    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n \n error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n    --> $DIR/for_loop.rs:275:15\n@@ -380,7 +380,7 @@ error: you seem to want to iterate on a map's values\n 385 |     for (_, v) in &m {\n     |                   ^^\n     |\n-    = note: `-D for-kv-map` implied by `-D warnings`\n+    = note: `-D clippy::for-kv-map` implied by `-D warnings`\n help: use the corresponding method\n     |\n 385 |     for v in m.values() {\n@@ -432,7 +432,7 @@ error: it looks like you're manually copying between slices\n 462 |     for i in 0..src.len() {\n     |              ^^^^^^^^^^^^ help: try replacing the loop by: `dst[..src.len()].clone_from_slice(&src[..])`\n     |\n-    = note: `-D manual-memcpy` implied by `-D warnings`\n+    = note: `-D clippy::manual-memcpy` implied by `-D warnings`\n \n error: it looks like you're manually copying between slices\n    --> $DIR/for_loop.rs:467:14"}, {"sha": "8f31d92ac3cba92ebacf7f11b5601fa1b7a40205", "filename": "tests/ui/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,6 +1,6 @@\n-\n-#![allow(print_literal)]\n-#![warn(useless_format)]\n+#![feature(tool_lints)]\n+#![allow(clippy::print_literal)]\n+#![warn(clippy::useless_format)]\n \n struct Foo(pub String);\n "}, {"sha": "ca6ef90539618493387e2c74961fb9d62177affd", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: useless use of `format!`\n 12 |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n    |\n-   = note: `-D useless-format` implied by `-D warnings`\n+   = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:14:5"}, {"sha": "74d42f08f5ad4eae3d6dd5d194e376a837117fc2", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,11 +1,11 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n-#![allow(if_same_then_else)]\n-#![allow(deref_addrof)]\n+#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::deref_addrof)]\n \n fn foo() -> bool { true }\n "}, {"sha": "d9fee73660c769c329761420203bfb3295476fca", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: this looks like an `else if` but the `else` is missing\n 15 |     } if foo() {\n    |      ^\n    |\n-   = note: `-D suspicious-else-formatting` implied by `-D warnings`\n+   = note: `-D clippy::suspicious-else-formatting` implied by `-D warnings`\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n@@ -50,7 +50,7 @@ error: this looks like you are trying to use `.. -= ..`, but you really are doin\n 71 |     a =- 35;\n    |      ^^^^\n    |\n-   = note: `-D suspicious-assignment-formatting` implied by `-D warnings`\n+   = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n    = note: to remove this lint, use either `-=` or `= -`\n \n error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n@@ -75,7 +75,7 @@ error: possibly missing a comma here\n 84 |         -1, -2, -3 // <= no comma here\n    |                   ^\n    |\n-   = note: `-D possible-missing-comma` implied by `-D warnings`\n+   = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n    = note: to remove this lint, add a comma or write the expr in a single line\n \n error: possibly missing a comma here"}, {"sha": "ab5ce5b06d842d1374a701046315ffc094236b00", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n+#![warn(clippy::all)]\n #![allow(dead_code)]\n #![allow(unused_unsafe)]\n "}, {"sha": "c2f7b76aab4d1fb71497bf82ff7bca5491485510", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -5,7 +5,7 @@ error: this function has too many arguments (8/7)\n 12 | | }\n    | |_^\n    |\n-   = note: `-D too-many-arguments` implied by `-D warnings`\n+   = note: `-D clippy::too-many-arguments` implied by `-D warnings`\n \n error: this function has too many arguments (8/7)\n   --> $DIR/functions.rs:19:5\n@@ -25,7 +25,7 @@ error: this public function dereferences a raw pointer but is not marked `unsafe\n 37 |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n-   = note: `-D not-unsafe-ptr-arg-deref` implied by `-D warnings`\n+   = note: `-D clippy::not-unsafe-ptr-arg-deref` implied by `-D warnings`\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:38:35"}, {"sha": "1376b9442b68c2c4ff8ff04c71362b821a6aa5aa", "filename": "tests/ui/fxhash.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffxhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffxhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![warn(default_hash_types)]\n+#![feature(tool_lints)]\n+\n+#![warn(clippy::default_hash_types)]\n #![feature(rustc_private)]\n \n extern crate rustc_data_structures;"}, {"sha": "869a315c9eb3fb067b502e3661847895679c1785", "filename": "tests/ui/fxhash.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffxhash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Ffxhash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffxhash.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,39 +1,39 @@\n error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n- --> $DIR/fxhash.rs:6:24\n+ --> $DIR/fxhash.rs:8:24\n   |\n-6 | use std::collections::{HashMap, HashSet};\n+8 | use std::collections::{HashMap, HashSet};\n   |                        ^^^^^^^ help: use: `FxHashMap`\n   |\n-  = note: `-D default-hash-types` implied by `-D warnings`\n+  = note: `-D clippy::default-hash-types` implied by `-D warnings`\n \n error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n- --> $DIR/fxhash.rs:6:33\n+ --> $DIR/fxhash.rs:8:33\n   |\n-6 | use std::collections::{HashMap, HashSet};\n+8 | use std::collections::{HashMap, HashSet};\n   |                                 ^^^^^^^ help: use: `FxHashSet`\n \n error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:10:15\n+  --> $DIR/fxhash.rs:12:15\n    |\n-10 |     let _map: HashMap<String, String> = HashMap::default();\n+12 |     let _map: HashMap<String, String> = HashMap::default();\n    |               ^^^^^^^ help: use: `FxHashMap`\n \n error: Prefer FxHashMap over HashMap, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:10:41\n+  --> $DIR/fxhash.rs:12:41\n    |\n-10 |     let _map: HashMap<String, String> = HashMap::default();\n+12 |     let _map: HashMap<String, String> = HashMap::default();\n    |                                         ^^^^^^^ help: use: `FxHashMap`\n \n error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:11:15\n+  --> $DIR/fxhash.rs:13:15\n    |\n-11 |     let _set: HashSet<String> = HashSet::default();\n+13 |     let _set: HashSet<String> = HashSet::default();\n    |               ^^^^^^^ help: use: `FxHashSet`\n \n error: Prefer FxHashSet over HashSet, it has better performance and we don't need any collision prevention in clippy\n-  --> $DIR/fxhash.rs:11:33\n+  --> $DIR/fxhash.rs:13:33\n    |\n-11 |     let _set: HashSet<String> = HashSet::default();\n+13 |     let _set: HashSet<String> = HashSet::default();\n    |                                 ^^^^^^^ help: use: `FxHashSet`\n \n error: aborting due to 6 previous errors"}, {"sha": "63f6603c821e1ecc2ee43c379cad0050f9de6939", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n 27 |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n    |\n-   = note: `-D get-unwrap` implied by `-D warnings`\n+   = note: `-D clippy::get-unwrap` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:28:17"}, {"sha": "b9ad8d06ad50099e579198c044ffd6136dc51591", "filename": "tests/ui/identity_conversion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,4 +1,6 @@\n-#![deny(identity_conversion)]\n+#![feature(tool_lints)]\n+\n+#![deny(clippy::identity_conversion)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::from(val);\n@@ -28,7 +30,7 @@ fn main() {\n     let _: String = \"foo\".into();\n     let _: String = From::from(\"foo\");\n     let _ = String::from(\"foo\");\n-    #[allow(identity_conversion)]\n+    #[allow(clippy::identity_conversion)]\n     {\n         let _: String = \"foo\".into();\n         let _ = String::from(\"foo\");"}, {"sha": "ffcd3649ad650e0ac821763c3d3729219fcd2367", "filename": "tests/ui/identity_conversion.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,61 +1,61 @@\n error: identical conversion\n- --> $DIR/identity_conversion.rs:4:13\n+ --> $DIR/identity_conversion.rs:6:13\n   |\n-4 |     let _ = T::from(val);\n+6 |     let _ = T::from(val);\n   |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n   |\n note: lint level defined here\n- --> $DIR/identity_conversion.rs:1:9\n+ --> $DIR/identity_conversion.rs:3:9\n   |\n-1 | #![deny(identity_conversion)]\n-  |         ^^^^^^^^^^^^^^^^^^^\n+3 | #![deny(clippy::identity_conversion)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: identical conversion\n- --> $DIR/identity_conversion.rs:5:5\n+ --> $DIR/identity_conversion.rs:7:5\n   |\n-5 |     val.into()\n+7 |     val.into()\n   |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:17:22\n+  --> $DIR/identity_conversion.rs:19:22\n    |\n-17 |         let _: i32 = 0i32.into();\n+19 |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:38:21\n+  --> $DIR/identity_conversion.rs:40:21\n    |\n-38 |     let _: String = \"foo\".to_string().into();\n+40 |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:39:21\n+  --> $DIR/identity_conversion.rs:41:21\n    |\n-39 |     let _: String = From::from(\"foo\".to_string());\n+41 |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:40:13\n+  --> $DIR/identity_conversion.rs:42:13\n    |\n-40 |     let _ = String::from(\"foo\".to_string());\n+42 |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:41:13\n+  --> $DIR/identity_conversion.rs:43:13\n    |\n-41 |     let _ = String::from(format!(\"A: {:04}\", 123));\n+43 |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:42:13\n+  --> $DIR/identity_conversion.rs:44:13\n    |\n-42 |     let _ = \"\".lines().into_iter();\n+44 |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: identical conversion\n-  --> $DIR/identity_conversion.rs:43:13\n+  --> $DIR/identity_conversion.rs:45:13\n    |\n-43 |     let _ = vec![1, 2, 3].into_iter().into_iter();\n+45 |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: aborting due to 9 previous errors"}, {"sha": "ae8c66faa416c42bd28af0f7e72291421bc8d71e", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,12 +1,12 @@\n-\n+#![feature(tool_lints)]\n \n \n const ONE : i64 = 1;\n const NEG_ONE : i64 = -1;\n const ZERO : i64 = 0;\n \n-#[allow(eq_op, no_effect, unnecessary_operation, double_parens)]\n-#[warn(identity_op)]\n+#[allow(clippy::eq_op, clippy::no_effect, clippy::unnecessary_operation, clippy::double_parens)]\n+#[warn(clippy::identity_op)]\n fn main() {\n     let x = 0;\n "}, {"sha": "e494250c019351d6cf2c0c98a3daab8528e8a2f0", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: the operation is ineffective. Consider reducing it to `x`\n 13 |     x + 0;\n    |     ^^^^^\n    |\n-   = note: `-D identity-op` implied by `-D warnings`\n+   = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `x`\n   --> $DIR/identity_op.rs:14:5"}, {"sha": "90265853f0022c298375cf95fae943ebfb86827f", "filename": "tests/ui/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,8 +1,8 @@\n+#![feature(tool_lints)]\n \n \n-\n-#![warn(clippy)]\n-#![warn(if_let_redundant_pattern_matching)]\n+#![warn(clippy::all)]\n+#![warn(clippy::if_let_redundant_pattern_matching)]\n \n \n fn main() {"}, {"sha": "9046625855c91814ae31e39dd5aaaf412518ada9", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: redundant pattern matching, consider using `is_ok()`\n 9 |     if let Ok(_) = Ok::<i32, i32>(42) {}\n   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n   |\n-  = note: `-D if-let-redundant-pattern-matching` implied by `-D warnings`\n+  = note: `-D clippy::if-let-redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n   --> $DIR/if_let_redundant_pattern_matching.rs:11:12"}, {"sha": "bb16e16700b66734589d9ca89dcfd376eb5eaada", "filename": "tests/ui/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,7 +1,7 @@\n+#![feature(tool_lints)]\n \n-\n-#![warn(clippy)]\n-#![warn(if_not_else)]\n+#![warn(clippy::all)]\n+#![warn(clippy::if_not_else)]\n \n fn bla() -> bool { unimplemented!() }\n "}, {"sha": "9682f6dc18f55162b9e99da9bb58cab4b933cde4", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -8,7 +8,7 @@ error: Unnecessary boolean `not` operation\n 13 | |     }\n    | |_____^\n    |\n-   = note: `-D if-not-else` implied by `-D warnings`\n+   = note: `-D clippy::if-not-else` implied by `-D warnings`\n    = help: remove the `!` and swap the blocks of the if/else\n \n error: Unnecessary `!=` operation"}, {"sha": "7da0e04e59ef65f6c0c536ced68e477f115f3637", "filename": "tests/ui/impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.rs?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,5 +1,7 @@\n+#![feature(tool_lints)]\n+\n #![allow(dead_code)]\n-#![warn(multiple_inherent_impl)]\n+#![warn(clippy::multiple_inherent_impl)]\n \n struct MyStruct;\n "}, {"sha": "13d4a76558d904394c90b901cda9f7c219cb134a", "filename": "tests/ui/impl.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -1,34 +1,34 @@\n error: Multiple implementations of this structure\n-  --> $DIR/impl.rs:10:1\n+  --> $DIR/impl.rs:12:1\n    |\n-10 | / impl MyStruct {\n-11 | |     fn second() {}\n-12 | | }\n+12 | / impl MyStruct {\n+13 | |     fn second() {}\n+14 | | }\n    | |_^\n    |\n-   = note: `-D multiple-inherent-impl` implied by `-D warnings`\n+   = note: `-D clippy::multiple-inherent-impl` implied by `-D warnings`\n note: First implementation here\n-  --> $DIR/impl.rs:6:1\n+  --> $DIR/impl.rs:8:1\n    |\n-6  | / impl MyStruct {\n-7  | |     fn first() {}\n-8  | | }\n+8  | / impl MyStruct {\n+9  | |     fn first() {}\n+10 | | }\n    | |_^\n \n error: Multiple implementations of this structure\n-  --> $DIR/impl.rs:24:5\n+  --> $DIR/impl.rs:26:5\n    |\n-24 | /     impl super::MyStruct {\n-25 | |         fn third() {}\n-26 | |     }\n+26 | /     impl super::MyStruct {\n+27 | |         fn third() {}\n+28 | |     }\n    | |_____^\n    |\n note: First implementation here\n-  --> $DIR/impl.rs:6:1\n+  --> $DIR/impl.rs:8:1\n    |\n-6  | / impl MyStruct {\n-7  | |     fn first() {}\n-8  | | }\n+8  | / impl MyStruct {\n+9  | |     fn first() {}\n+10 | | }\n    | |_^\n \n error: aborting due to 2 previous errors"}, {"sha": "5bb6f11b2a711ac051a56c36bd5cb0e7d23bebbc", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81d70e6bdf264c62136b571760f152be9638ec0/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=c81d70e6bdf264c62136b571760f152be9638ec0", "patch": "@@ -4,7 +4,7 @@ error: impl for `HashMap` should be generalized over different hashers\n 11 | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n-   = note: `-D implicit-hasher` implied by `-D warnings`\n+   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n help: consider adding a type parameter\n    |\n 11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {"}]}