{"sha": "85e8a9ba00e8ac090ceaac619110264e8e8bf6c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZThhOWJhMDBlOGFjMDkwY2VhYWM2MTkxMTAyNjRlOGU4YmY2YzY=", "commit": {"author": {"name": "Martin Hoffmann", "email": "hn@nvnc.de", "date": "2017-12-07T15:50:37Z"}, "committer": {"name": "Martin Hoffmann", "email": "hn@nvnc.de", "date": "2017-12-07T15:50:37Z"}, "message": "Include feedback and try to make examples build on all channels.", "tree": {"sha": "34d2b6c550c75969f65e6660ff14275018d8798a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d2b6c550c75969f65e6660ff14275018d8798a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e8a9ba00e8ac090ceaac619110264e8e8bf6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e8a9ba00e8ac090ceaac619110264e8e8bf6c6", "html_url": "https://github.com/rust-lang/rust/commit/85e8a9ba00e8ac090ceaac619110264e8e8bf6c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e8a9ba00e8ac090ceaac619110264e8e8bf6c6/comments", "author": {"login": "partim", "id": 1318494, "node_id": "MDQ6VXNlcjEzMTg0OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1318494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partim", "html_url": "https://github.com/partim", "followers_url": "https://api.github.com/users/partim/followers", "following_url": "https://api.github.com/users/partim/following{/other_user}", "gists_url": "https://api.github.com/users/partim/gists{/gist_id}", "starred_url": "https://api.github.com/users/partim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partim/subscriptions", "organizations_url": "https://api.github.com/users/partim/orgs", "repos_url": "https://api.github.com/users/partim/repos", "events_url": "https://api.github.com/users/partim/events{/privacy}", "received_events_url": "https://api.github.com/users/partim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "partim", "id": 1318494, "node_id": "MDQ6VXNlcjEzMTg0OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1318494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partim", "html_url": "https://github.com/partim", "followers_url": "https://api.github.com/users/partim/followers", "following_url": "https://api.github.com/users/partim/following{/other_user}", "gists_url": "https://api.github.com/users/partim/gists{/gist_id}", "starred_url": "https://api.github.com/users/partim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partim/subscriptions", "organizations_url": "https://api.github.com/users/partim/orgs", "repos_url": "https://api.github.com/users/partim/repos", "events_url": "https://api.github.com/users/partim/events{/privacy}", "received_events_url": "https://api.github.com/users/partim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4ea700041f78a016dca557c2da86006a7bbedf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ea700041f78a016dca557c2da86006a7bbedf8", "html_url": "https://github.com/rust-lang/rust/commit/c4ea700041f78a016dca557c2da86006a7bbedf8"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "77006193a585731838a370fee00de34e82627892", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/85e8a9ba00e8ac090ceaac619110264e8e8bf6c6/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e8a9ba00e8ac090ceaac619110264e8e8bf6c6/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=85e8a9ba00e8ac090ceaac619110264e8e8bf6c6", "patch": "@@ -12,10 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// impl Borrow<str> for String\n-// impl<T> Borrow<T> for Arc<T>\n-// impl<K> HashSet<K> { fn get<Q>(&self, q: &Q) where K: Borrow<Q> }\n-\n /// A trait identifying how borrowed data behaves.\n ///\n /// If a type implements this trait, it signals that a reference to it behaves\n@@ -26,10 +22,10 @@\n ///\n /// As a consequence, this trait should only be implemented for types managing\n /// a value of another type without modifying its behavior. Examples are\n-/// smart pointers such as [`Box`] or [`Rc`] as well the owned version of\n-/// slices such as [`Vec`].\n+/// smart pointers such as [`Box<T>`] or [`Rc<T>`] as well the owned version\n+/// of slices such as [`Vec<T>`].\n ///\n-/// A relaxed version that allows providing a reference to some other type\n+/// A relaxed version that allows converting a reference to some other type\n /// without any further promises is available through [`AsRef`].\n ///\n /// When writing generic code, a use of `Borrow` should always be justified\n@@ -41,23 +37,24 @@\n /// The companion trait [`BorrowMut`] provides the same guarantees for\n /// mutable references.\n ///\n-/// [`Box`]: ../boxed/struct.Box.html\n-/// [`Rc`]: ../rc/struct.Rc.html\n-/// [`Vec`]: ../vec/struct.Vec.html\n+/// [`Box<T>`]: ../boxed/struct.Box.html\n+/// [`Rc<T>`]: ../rc/struct.Rc.html\n+/// [`Vec<T>`]: ../vec/struct.Vec.html\n /// [`AsRef`]: ../convert/trait.AsRef.html\n /// [`BorrowMut`]: trait.BorrowMut.html\n ///\n /// # Examples\n ///\n-/// As a data collection, [`HashMap`] owns both keys and values. If the key\u2019s\n-/// actual data is wrapped in a managing type of some kind, it should,\n-/// however, still be possible to search for a value using a reference to the\n-/// key\u2019s data. For instance, if the key is a string, then it is likely\n-/// stored with the hash map as a [`String`], while it should be possible\n-/// to search using a [`&str`][`str`]. Thus, `insert` needs to operate on a\n-/// string while `get` needs to be able to use a `&str`.\n+/// As a data collection, [`HashMap<K, V>`] owns both keys and values. If\n+/// the key\u2019s actual data is wrapped in a managing type of some kind, it\n+/// should, however, still be possible to search for a value using a\n+/// reference to the key\u2019s data. For instance, if the key is a string, then\n+/// it is likely stored with the hash map as a [`String`], while it should\n+/// be possible to search using a [`&str`][`str`]. Thus, `insert` needs to\n+/// operate on a `String` while `get` needs to be able to use a `&str`.\n ///\n-/// Slightly simplified, the relevant parts of `HashMap` look like this:\n+/// Slightly simplified, the relevant parts of `HashMap<K, V>` look like\n+/// this:\n ///\n /// ```\n /// use std::borrow::Borrow;\n@@ -70,26 +67,28 @@\n ///\n /// impl<K, V> HashMap<K, V> {\n ///     pub fn insert(&self, key: K, value: V) -> Option<V>\n-///         where K: Hash + Eq\n+///     where K: Hash + Eq\n ///     {\n ///         # unimplemented!()\n ///         // ...\n ///     }\n ///\n ///     pub fn get<Q>(&self, k: &Q) -> Option<&V>\n-///         where K: Borrow<Q>,\n-///               Q: Hash + Eq + ?Sized\n+///     where\n+///         K: Borrow<Q>,\n+///         Q: Hash + Eq + ?Sized\n ///     {\n ///         # unimplemented!()\n ///         // ...\n ///     }\n /// }\n /// ```\n ///\n-/// The entire hash map is generic over the stored type for the key, `K`.\n-/// When inserting a value, the map is given such a `K` and needs to find\n-/// the correct hash bucket and check if the key is already present based\n-/// on that `K` value. It therefore requires `K: Hash + Eq`.\n+/// The entire hash map is generic over a key type `K`. Because these keys\n+/// are stored by with the hash map, this type as to own the key\u2019s data.\n+/// When inserting a key-value pair, the map is given such a `K` and needs\n+/// to find the correct hash bucket and check if the key is already present\n+/// based on that `K`. It therefore requires `K: Hash + Eq`.\n ///\n /// In order to search for a value based on the key\u2019s data, the `get` method\n /// is generic over some type `Q`. Technically, it needs to convert that `Q`\n@@ -103,10 +102,11 @@\n /// result as `Q`\u2019s by demanding that `K: Borrow<Q>`.\n ///\n /// As a consequence, the hash map breaks if a `K` wrapping a `Q` value\n-/// produces a different hash than `Q`. For instance, image you have a\n-/// type that wraps a string but compares ASCII letters case-insensitive:\n+/// produces a different hash than `Q`. For instance, imagine you have a\n+/// type that wraps a string but compares ASCII letters ignoring their case:\n ///\n /// ```\n+/// # #[allow(unused_imports)]\n /// use std::ascii::AsciiExt;\n ///\n /// pub struct CIString(String);\n@@ -121,10 +121,10 @@\n /// ```\n ///\n /// Because two equal values need to produce the same hash value, the\n-/// implementation of `Hash` need to reflect that, too:\n+/// implementation of `Hash` needs to reflect that, too:\n ///\n /// ```\n-/// # use std::ascii::AsciiExt;\n+/// # #[allow(unused_imports)] use std::ascii::AsciiExt;\n /// # use std::hash::{Hash, Hasher};\n /// # pub struct CIString(String);\n /// impl Hash for CIString {\n@@ -145,7 +145,7 @@\n /// which doesn\u2019t carry any such restrictions.\n ///\n /// [`Hash`]: ../hash/trait.Hash.html\n-/// [`HashMap`]: ../collections/struct.HashMap.html\n+/// [`HashMap<K, V>`]: ../collections/struct.HashMap.html\n /// [`String`]: ../string/struct.String.html\n /// [`str`]: ../primitive.str.html\n ///"}]}