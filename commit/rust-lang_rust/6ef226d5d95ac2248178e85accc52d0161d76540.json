{"sha": "6ef226d5d95ac2248178e85accc52d0161d76540", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjIyNmQ1ZDk1YWMyMjQ4MTc4ZTg1YWNjYzUyZDAxNjFkNzY1NDA=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-15T17:39:53Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-15T17:40:35Z"}, "message": "Add unsetenv wrapper", "tree": {"sha": "bee504c237ad53bbd16248d6bfede7988bca8724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee504c237ad53bbd16248d6bfede7988bca8724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef226d5d95ac2248178e85accc52d0161d76540", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef226d5d95ac2248178e85accc52d0161d76540", "html_url": "https://github.com/rust-lang/rust/commit/6ef226d5d95ac2248178e85accc52d0161d76540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef226d5d95ac2248178e85accc52d0161d76540/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d806c96ffb33acb35414a5743bca3c870d1f15c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d806c96ffb33acb35414a5743bca3c870d1f15c4", "html_url": "https://github.com/rust-lang/rust/commit/d806c96ffb33acb35414a5743bca3c870d1f15c4"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "b97b32330dec1edba1c90a3821360363513d0295", "filename": "src/libcore/os.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6ef226d5d95ac2248178e85accc52d0161d76540/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef226d5d95ac2248178e85accc52d0161d76540/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=6ef226d5d95ac2248178e85accc52d0161d76540", "patch": "@@ -289,6 +289,33 @@ pub fn setenv(n: &str, v: &str) {\n     }\n }\n \n+/// Remove a variable from the environment entirely\n+pub fn unsetenv(n: &str) {\n+    #[cfg(unix)]\n+    fn _unsetenv(n: &str) {\n+        unsafe {\n+            do with_env_lock {\n+                do str::as_c_str(n) |nbuf| {\n+                    libc::funcs::posix01::unistd::unsetenv(nbuf);\n+                }\n+            }\n+        }\n+    }\n+    #[cfg(windows)]\n+    fn _unsetenv(n: &str) {\n+        unsafe {\n+            do with_env_lock {\n+                use os::win32::as_utf16_p;\n+                do as_utf16_p(n) |nbuf| {\n+                    libc::SetEnvironmentVariableW(nbuf, ptr::null());\n+                }\n+            }\n+        }\n+    }\n+\n+    _unsetenv(n);\n+}\n+\n pub fn fdopen(fd: c_int) -> *FILE {\n     unsafe {\n         return do as_c_charp(\"r\") |modebuf| {\n@@ -1412,7 +1439,7 @@ mod tests {\n     use option::Some;\n     use option;\n     use os::{as_c_charp, env, getcwd, getenv, make_absolute, real_args};\n-    use os::{remove_file, setenv};\n+    use os::{remove_file, setenv, unsetenv};\n     use os;\n     use path::Path;\n     use rand::RngUtil;\n@@ -1448,6 +1475,14 @@ mod tests {\n         assert!(getenv(n) == option::Some(~\"VALUE\"));\n     }\n \n+    #[test]\n+    fn test_unsetenv() {\n+        let n = make_rand_name();\n+        setenv(n, ~\"VALUE\");\n+        unsetenv(n);\n+        assert!(getenv(n) == option::None);\n+    }\n+\n     #[test]\n     #[ignore(cfg(windows))]\n     #[ignore]"}]}