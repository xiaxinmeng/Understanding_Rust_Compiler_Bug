{"sha": "0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "node_id": "C_kwDOAAsO6NoAKDBhOGFjYWM3YTMxNmQ4OTE2NzA0NWJiOWNmOWUyNzlmZTEyZDNhOWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T12:25:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T12:25:55Z"}, "message": "Rollup merge of #95887 - petrochenkov:doclink5, r=cjgillot\n\nresolve: Create dummy bindings for all unresolved imports\n\nApparently such bindings weren't previously created for all unresolved imports, causing issues like https://github.com/rust-lang/rust/issues/95879.\nIn this PR I'm trying to create such dummy bindings in a more centralized way by calling `import_dummy_binding` once for all imports in `finalize_imports`.\n\nFixes https://github.com/rust-lang/rust/issues/95879.", "tree": {"sha": "eff589ef702f8b1a56cec3793e2635f3e01cc804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff589ef702f8b1a56cec3793e2635f3e01cc804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWrXTCRBK7hj4Ov3rIwAAmasIAFgqguXPK2UDUXIzuP6vOvAz\nV4wBAfn09XbWnpkrrlJ/f3bUZWX+4MDi/j2VnUeSu9oZ/3Chf206XOIxsY6EwgvP\n+osHvHXzFrJZU813mxdU99+lLPG6hpEllNzpHtcPFHBxxXgLRUtnkb10VGsLShCR\nVyYMhkRMtpwRmu02uiihjzmXC10AflMWbYIPuF/8zJnEu2leOxv/0cEOrB3FsNhQ\ne13ohIupjJ7nGSL4mzNl+ZO7deeiKFbpLrL2ja+Kq7OxUKoXKLbEu4DMAhkLxTq8\nRvL//6lE7eTYbyaBUbdPLMslgJNnZm4DYRNGUVZvEkCd9K7ksZkjj+4tRKMPrB4=\n=TqYq\n-----END PGP SIGNATURE-----\n", "payload": "tree eff589ef702f8b1a56cec3793e2635f3e01cc804\nparent c8422403f775126c40d558838d321c063554c822\nparent 09195d38225a478d4b10f535a80ca7ab9d5173e8\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650111955 +0200\ncommitter GitHub <noreply@github.com> 1650111955 +0200\n\nRollup merge of #95887 - petrochenkov:doclink5, r=cjgillot\n\nresolve: Create dummy bindings for all unresolved imports\n\nApparently such bindings weren't previously created for all unresolved imports, causing issues like https://github.com/rust-lang/rust/issues/95879.\nIn this PR I'm trying to create such dummy bindings in a more centralized way by calling `import_dummy_binding` once for all imports in `finalize_imports`.\n\nFixes https://github.com/rust-lang/rust/issues/95879.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "html_url": "https://github.com/rust-lang/rust/commit/0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8422403f775126c40d558838d321c063554c822", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8422403f775126c40d558838d321c063554c822", "html_url": "https://github.com/rust-lang/rust/commit/c8422403f775126c40d558838d321c063554c822"}, {"sha": "09195d38225a478d4b10f535a80ca7ab9d5173e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/09195d38225a478d4b10f535a80ca7ab9d5173e8", "html_url": "https://github.com/rust-lang/rust/commit/09195d38225a478d4b10f535a80ca7ab9d5173e8"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "01dc727737a5a53e2c0891b11b2aa19ae2da5978", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "patch": "@@ -310,18 +310,23 @@ impl<'a> Resolver<'a> {\n         t\n     }\n \n-    // Define a \"dummy\" resolution containing a Res::Err as a placeholder for a\n-    // failed resolution\n+    // Define a dummy resolution containing a `Res::Err` as a placeholder for a failed resolution,\n+    // also mark such failed imports as used to avoid duplicate diagnostics.\n     fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n-        if let ImportKind::Single { target, .. } = import.kind {\n+        if let ImportKind::Single { target, ref target_bindings, .. } = import.kind {\n+            if target_bindings.iter().any(|binding| binding.get().is_some()) {\n+                return; // Has resolution, do not create the dummy binding\n+            }\n             let dummy_binding = self.dummy_binding;\n             let dummy_binding = self.import(dummy_binding, import);\n             self.per_ns(|this, ns| {\n                 let key = this.new_key(target, ns);\n                 let _ = this.try_define(import.parent_scope.module, key, dummy_binding);\n             });\n-            // Consider erroneous imports used to avoid duplicate diagnostics.\n             self.record_use(target, dummy_binding, false);\n+        } else if import.imported_module.get().is_none() {\n+            import.used.set(true);\n+            self.used_imports.insert(import.id);\n         }\n     }\n }\n@@ -386,7 +391,13 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             .map(|i| (false, i))\n             .chain(indeterminate_imports.into_iter().map(|i| (true, i)))\n         {\n-            if let Some(err) = self.finalize_import(import) {\n+            let unresolved_import_error = self.finalize_import(import);\n+\n+            // If this import is unresolved then create a dummy import\n+            // resolution for it so that later resolve stages won't complain.\n+            self.r.import_dummy_binding(import);\n+\n+            if let Some(err) = unresolved_import_error {\n                 if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {\n                     if source.name == kw::SelfLower {\n                         // Silence `unresolved import` error if E0429 is already emitted\n@@ -396,9 +407,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     }\n                 }\n \n-                // If the error is a single failed import then create a \"fake\" import\n-                // resolution for it so that later resolve stages won't complain.\n-                self.r.import_dummy_binding(import);\n                 if prev_root_id.as_u32() != 0\n                     && prev_root_id.as_u32() != import.root_id.as_u32()\n                     && !errors.is_empty()\n@@ -418,8 +426,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     prev_root_id = import.root_id;\n                 }\n             } else if is_indeterminate {\n-                // Consider erroneous imports used to avoid duplicate diagnostics.\n-                self.r.used_imports.insert(import.id);\n                 let path = import_path_to_string(\n                     &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n                     &import.kind,\n@@ -553,26 +559,23 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     Err(Undetermined) => indeterminate = true,\n                     // Don't update the resolution, because it was never added.\n                     Err(Determined) if target.name == kw::Underscore => {}\n-                    Err(Determined) => {\n+                    Ok(binding) if binding.is_importable() => {\n+                        let imported_binding = this.import(binding, import);\n+                        target_bindings[ns].set(Some(imported_binding));\n+                        this.define(parent, target, ns, imported_binding);\n+                    }\n+                    source_binding @ (Ok(..) | Err(Determined)) => {\n+                        if source_binding.is_ok() {\n+                            let msg = format!(\"`{}` is not directly importable\", target);\n+                            struct_span_err!(this.session, import.span, E0253, \"{}\", &msg)\n+                                .span_label(import.span, \"cannot be imported directly\")\n+                                .emit();\n+                        }\n                         let key = this.new_key(target, ns);\n                         this.update_resolution(parent, key, |_, resolution| {\n                             resolution.single_imports.remove(&Interned::new_unchecked(import));\n                         });\n                     }\n-                    Ok(binding) if !binding.is_importable() => {\n-                        let msg = format!(\"`{}` is not directly importable\", target);\n-                        struct_span_err!(this.session, import.span, E0253, \"{}\", &msg)\n-                            .span_label(import.span, \"cannot be imported directly\")\n-                            .emit();\n-                        // Do not import this illegal binding. Import a dummy binding and pretend\n-                        // everything is fine\n-                        this.import_dummy_binding(import);\n-                    }\n-                    Ok(binding) => {\n-                        let imported_binding = this.import(binding, import);\n-                        target_bindings[ns].set(Some(imported_binding));\n-                        this.define(parent, target, ns, imported_binding);\n-                    }\n                 }\n             }\n         });\n@@ -605,10 +608,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         import.vis.set(orig_vis);\n-        if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n-            // Consider erroneous imports used to avoid duplicate diagnostics.\n-            self.r.used_imports.insert(import.id);\n-        }\n         let module = match path_res {\n             PathResult::Module(module) => {\n                 // Consistency checks, analogous to `finalize_macro_resolutions`.\n@@ -872,7 +871,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 })\n             } else {\n                 // `resolve_ident_in_module` reported a privacy error.\n-                self.r.import_dummy_binding(import);\n                 None\n             };\n         }"}, {"sha": "c71e5bee12ead049c8b8c711df49f0ff76a6ba3b", "filename": "src/test/rustdoc-ui/intra-doc/unresolved-import-recovery.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.rs?ref=0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "patch": "@@ -0,0 +1,6 @@\n+// Regression test for issue #95879.\n+\n+use unresolved_crate::module::Name; //~ ERROR failed to resolve\n+\n+/// [Name]\n+pub struct S;"}, {"sha": "b60ab6050d79cb035df45552214841b026ad892c", "filename": "src/test/rustdoc-ui/intra-doc/unresolved-import-recovery.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Funresolved-import-recovery.stderr?ref=0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "patch": "@@ -0,0 +1,11 @@\n+error[E0433]: failed to resolve: maybe a missing crate `unresolved_crate`?\n+  --> $DIR/unresolved-import-recovery.rs:3:5\n+   |\n+LL | use unresolved_crate::module::Name;\n+   |     ^^^^^^^^^^^^^^^^ maybe a missing crate `unresolved_crate`?\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "64bfd14b7e7da346cf24751455fd9933adf70efd", "filename": "src/test/ui/use/use-super-global-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.rs?ref=0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "patch": "@@ -9,7 +9,7 @@ mod foo {\n \n     pub fn g() {\n         use ::super::main; //~ ERROR global paths cannot start with `super`\n-        main(); //~ ERROR cannot find function `main` in this scope\n+        main();\n     }\n }\n "}, {"sha": "7014a12e9ddd26202c7766baba8c9e19234cba75", "filename": "src/test/ui/use/use-super-global-path.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a8acac7a316d89167045bb9cf9e279fe12d3a9c/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-super-global-path.stderr?ref=0a8acac7a316d89167045bb9cf9e279fe12d3a9c", "patch": "@@ -16,18 +16,6 @@ error[E0433]: failed to resolve: global paths cannot start with `super`\n LL |         use ::super::main;\n    |               ^^^^^ global paths cannot start with `super`\n \n-error[E0425]: cannot find function `main` in this scope\n-  --> $DIR/use-super-global-path.rs:12:9\n-   |\n-LL |         main();\n-   |         ^^^^ not found in this scope\n-   |\n-help: consider importing this function\n-   |\n-LL |     use main;\n-   |\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0425, E0433.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0433`."}]}