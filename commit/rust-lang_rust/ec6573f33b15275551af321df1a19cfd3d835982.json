{"sha": "ec6573f33b15275551af321df1a19cfd3d835982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjU3M2YzM2IxNTI3NTU1MWFmMzIxZGYxYTE5Y2ZkM2Q4MzU5ODI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-03T14:08:27Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Make `newtype_index` safe", "tree": {"sha": "590dc0040d174fda17b1074b19c15e5e80ab54ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590dc0040d174fda17b1074b19c15e5e80ab54ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec6573f33b15275551af321df1a19cfd3d835982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6573f33b15275551af321df1a19cfd3d835982", "html_url": "https://github.com/rust-lang/rust/commit/ec6573f33b15275551af321df1a19cfd3d835982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec6573f33b15275551af321df1a19cfd3d835982/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b22323f129446c9e2255d0eeab6c7ab17aac52", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b22323f129446c9e2255d0eeab6c7ab17aac52", "html_url": "https://github.com/rust-lang/rust/commit/02b22323f129446c9e2255d0eeab6c7ab17aac52"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "06287bda63a494e84b3b725d52ad9d4d8b99bc7a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -18,6 +18,7 @@ use std::env;\n use std::hash::Hash;\n use ty::{self, TyCtxt};\n use util::common::{ProfileQueriesMsg, profq_msg};\n+use serialize::{Decodable, Decoder};\n \n use ich::{StableHashingContext, StableHashingContextProvider, Fingerprint};\n "}, {"sha": "992ebd0efb15f48bcadfa76a191700a6bcd4a63c", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -13,6 +13,7 @@\n use dep_graph::DepNode;\n use ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use serialize::{Decodable, Decoder};\n \n newtype_index! {\n     pub struct SerializedDepNodeIndex { .. }"}, {"sha": "99412c02c43a60cfe8a9251af3b7ed0fe25de8a7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -69,6 +69,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(transpose_result)]\n+#![cfg_attr(not(stage0), feature(min_const_unsafe_fn))]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "1440d91b47e639d1677d5ea447f8aaa7c1ddd477", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -28,6 +28,7 @@ use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::TyCtxt;\n use ty::query::Providers;\n+use serialize::{Decodable, Decoder};\n \n use hir;\n use hir::Node;"}, {"sha": "549e13bad642afbe542540365d5791810d61cf63", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::MappedReadGuard;\n-use rustc_serialize as serialize;\n+use rustc_serialize::{self as serialize, Decodable, Decoder};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Formatter, Write};"}, {"sha": "8ff93cee250221191b8acf8542d808a06e622807", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -41,7 +41,7 @@ use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n use session::DataTypeKind;\n \n-use serialize::{self, Encodable, Encoder};\n+use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;"}, {"sha": "fa45b8c7768377f439e4023048906e21b40b153a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -29,7 +29,7 @@ use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n use syntax::symbol::{keywords, InternedString};\n \n-use serialize;\n+use serialize::{self, Decodable, Decoder};\n \n use hir;\n "}, {"sha": "c35490ce35b4f0488474aed6422d47e7fde34060", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -98,12 +98,18 @@ macro_rules! newtype_index {\n      @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]) => (\n-        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n+        #[derive(Copy, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n         #[rustc_layout_scalar_valid_range_end($max)]\n         $v struct $type {\n             private: u32\n         }\n \n+        impl Clone for $type {\n+            fn clone(&self) -> Self {\n+                *self\n+            }\n+        }\n+\n         impl $type {\n             $v const MAX_AS_U32: u32 = $max;\n \n@@ -145,7 +151,7 @@ macro_rules! newtype_index {\n \n             #[inline]\n             $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n-                $type { private: value }\n+                unsafe { $type { private: value } }\n             }\n \n             /// Extract value of this index as an integer.\n@@ -328,12 +334,17 @@ macro_rules! newtype_index {\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n-            @derives      [$($derives,)+ RustcDecodable, RustcEncodable,]\n+            @derives      [$($derives,)+ RustcEncodable,]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n+        impl Decodable for $type {\n+            fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                d.read_u32().into()\n+            }\n+        }\n     );\n \n     // The case where no derives are added, but encodable is overridden. Don't\n@@ -360,12 +371,17 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n-            @derives      [RustcDecodable, RustcEncodable,]\n+            @derives      [RustcEncodable,]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n+        impl Decodable for $type {\n+            fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                d.read_u32().map(Self::from)\n+            }\n+        }\n     );\n \n     // Rewrite final without comma to one that includes comma"}, {"sha": "2d593d851138b1dec9ebef630127589c51aab2d5", "filename": "src/librustc_mir/borrow_check/location.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Flocation.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -10,6 +10,7 @@\n \n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_serialize::{Decodable, Decoder};\n \n /// Maps between a MIR Location, which identifies a particular\n /// statement within a basic block, to a \"rich location\", which"}, {"sha": "37b11a77184d4f018654e3388091fa83f7be2274", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -13,6 +13,7 @@ use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use borrow_check::nll::type_check::Locations;\n+use rustc_serialize::{Decodable, Decoder};\n \n use std::fmt;\n use std::ops::Deref;"}, {"sha": "5ce80ca236dbb337fcffd9b8d6fa0cc5f6601a62", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::fmt::Debug;\n use std::rc::Rc;\n+use rustc_serialize::{Decodable, Decoder};\n \n /// Maps between a `Location` and a `PointIndex` (and vice versa).\n crate struct RegionValueElements {"}, {"sha": "d1a1d2aea248a55460b890016b8f202ce6122338", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -23,6 +23,7 @@ use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use util::liveness::LiveVariableMap;\n+use rustc_serialize::{Decodable, Decoder};\n \n /// Map between Local and LiveVar indices: the purpose of this\n /// map is to define the subset of local variables for which we need"}, {"sha": "9e0eaf61e94a4cd6fdb649d41cf1ee1e8ef8ee24", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -15,6 +15,7 @@ use rustc::mir::{Local, Location, Mir};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n use util::liveness::{categorize, DefUse, LiveVariableMap};\n+use rustc_serialize::{Decodable, Decoder};\n \n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness"}, {"sha": "1a5a089c7aa03cb4e818312d195b457034372bfa", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec6573f33b15275551af321df1a19cfd3d835982/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=ec6573f33b15275551af321df1a19cfd3d835982", "patch": "@@ -32,6 +32,7 @@ use syntax::ast;\n use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n+use rustc_serialize::{Decodable, Decoder};\n use transform::MirSource;\n use util as mir_util;\n "}]}