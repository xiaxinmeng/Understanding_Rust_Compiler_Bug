{"sha": "eb9859f00d58d9bbed3db67952ef986e18277f01", "node_id": "C_kwDOAAsO6NoAKGViOTg1OWYwMGQ1OGQ5YmJlZDNkYjY3OTUyZWY5ODZlMTgyNzdmMDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-16T22:58:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T22:58:24Z"}, "message": "Rollup merge of #90933 - compiler-errors:master, r=estebank\n\nFix await suggestion on non-future type\n\nRemove a match block that would suggest to add `.await` in the case where the expected type's `Future::Output` equals the found type. We only want to suggest `.await`ing in the opposite case (the found type's `Future::Output` equals the expected type).\n\nThe code sample is here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=6ba6b83d4dddda263553b79dca9f6bcb\n\nBefore:\n```\n\u279c  ~ rustc --edition=2021 --crate-type=lib test.rs\nerror[E0308]: `match` arms have incompatible types\n --> test.rs:4:14\n  |\n2 |       let x = match 1 {\n  |  _____________-\n3 | |         1 => other(),\n  | |              ------- this is found to be of type `impl Future`\n4 | |         2 => other().await,\n  | |              ^^^^^^^^^^^^^ expected opaque type, found enum `Result`\n5 | |     };\n  | |_____- `match` arms have incompatible types\n  |\n  = note: expected type `impl Future`\n             found enum `Result<(), ()>`\nhelp: consider `await`ing on the `Future`\n  |\n4 |         2 => other().await.await,\n  |                           ++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nAfter:\n```\n\u279c  ~ rustc +stage1 --edition=2021 --crate-type=lib test.rs\nerror[E0308]: `match` arms have incompatible types\n --> test.rs:4:14\n  |\n2 |       let x = match 1 {\n  |  _____________-\n3 | |         1 => other(),\n  | |              ------- this is found to be of type `impl Future`\n4 | |         2 => other().await,\n  | |              ^^^^^^^^^^^^^ expected opaque type, found enum `Result`\n5 | |     };\n  | |_____- `match` arms have incompatible types\n  |\n  = note: expected type `impl Future`\n             found enum `Result<(), ()>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nFixes #90931", "tree": {"sha": "39410657d0acad46aae36136ad76ea02ea419d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39410657d0acad46aae36136ad76ea02ea419d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9859f00d58d9bbed3db67952ef986e18277f01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlDeRCRBK7hj4Ov3rIwAA7IsIAE7S3iPht7Meg61CAqg84M8Z\nyJn/C3GbZBwdILYjkzIB9bCBQn1PFg5mI2YTrmCGw6tC0PMHQKzVWiF5U7p+vSGi\nxIyAFLmUQ1MI/oCTbs6H4emI0hIH+LkUtrMKtjzmEaFiIljCY/CZ+xv5HIjBde75\nCItBVfJucjYvv7bOErzpD4oSOC510UrxVYIPsT6573GcyycgSlu7uL3ZGH46JN4S\n93CeS3bDgTrW018yuFVT5ylwLXnsD0bfoINfRQ24zZ0tgAYqjlEwUe6ilmCbmg7j\nK6+erGQ+G/L+1mfCN+zHXQpduYQDgg2cCzgezqvgHUiGBQm34MaiFr/AJXGozSE=\n=6DSr\n-----END PGP SIGNATURE-----\n", "payload": "tree 39410657d0acad46aae36136ad76ea02ea419d77\nparent b7b335593fcd86dedac3396dc94bfb7247f30f30\nparent fc816c37b734e594037f36114a2844d7e7b30f76\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637103504 +0100\ncommitter GitHub <noreply@github.com> 1637103504 +0100\n\nRollup merge of #90933 - compiler-errors:master, r=estebank\n\nFix await suggestion on non-future type\n\nRemove a match block that would suggest to add `.await` in the case where the expected type's `Future::Output` equals the found type. We only want to suggest `.await`ing in the opposite case (the found type's `Future::Output` equals the expected type).\n\nThe code sample is here: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=6ba6b83d4dddda263553b79dca9f6bcb\n\nBefore:\n```\n\u279c  ~ rustc --edition=2021 --crate-type=lib test.rs\nerror[E0308]: `match` arms have incompatible types\n --> test.rs:4:14\n  |\n2 |       let x = match 1 {\n  |  _____________-\n3 | |         1 => other(),\n  | |              ------- this is found to be of type `impl Future`\n4 | |         2 => other().await,\n  | |              ^^^^^^^^^^^^^ expected opaque type, found enum `Result`\n5 | |     };\n  | |_____- `match` arms have incompatible types\n  |\n  = note: expected type `impl Future`\n             found enum `Result<(), ()>`\nhelp: consider `await`ing on the `Future`\n  |\n4 |         2 => other().await.await,\n  |                           ++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nAfter:\n```\n\u279c  ~ rustc +stage1 --edition=2021 --crate-type=lib test.rs\nerror[E0308]: `match` arms have incompatible types\n --> test.rs:4:14\n  |\n2 |       let x = match 1 {\n  |  _____________-\n3 | |         1 => other(),\n  | |              ------- this is found to be of type `impl Future`\n4 | |         2 => other().await,\n  | |              ^^^^^^^^^^^^^ expected opaque type, found enum `Result`\n5 | |     };\n  | |_____- `match` arms have incompatible types\n  |\n  = note: expected type `impl Future`\n             found enum `Result<(), ()>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nFixes #90931\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9859f00d58d9bbed3db67952ef986e18277f01", "html_url": "https://github.com/rust-lang/rust/commit/eb9859f00d58d9bbed3db67952ef986e18277f01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9859f00d58d9bbed3db67952ef986e18277f01/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b335593fcd86dedac3396dc94bfb7247f30f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b335593fcd86dedac3396dc94bfb7247f30f30", "html_url": "https://github.com/rust-lang/rust/commit/b7b335593fcd86dedac3396dc94bfb7247f30f30"}, {"sha": "fc816c37b734e594037f36114a2844d7e7b30f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc816c37b734e594037f36114a2844d7e7b30f76", "html_url": "https://github.com/rust-lang/rust/commit/fc816c37b734e594037f36114a2844d7e7b30f76"}], "stats": {"total": 143, "additions": 123, "deletions": 20}, "files": [{"sha": "c25ec1356e2300ea366eca972e26d392825d85e6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/eb9859f00d58d9bbed3db67952ef986e18277f01/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9859f00d58d9bbed3db67952ef986e18277f01/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=eb9859f00d58d9bbed3db67952ef986e18277f01", "patch": "@@ -1794,31 +1794,38 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             },\n             (_, Some(ty)) if ty::TyS::same_type(exp_found.expected, ty) => {\n-                let span = match cause.code {\n-                    // scrutinee's span\n-                    ObligationCauseCode::Pattern { span: Some(span), .. } => span,\n-                    _ => exp_span,\n-                };\n-                diag.span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n-                    \"consider `await`ing on the `Future`\",\n-                    \".await\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => {\n-                let span = match cause.code {\n-                    // scrutinee's span\n-                    ObligationCauseCode::Pattern { span: Some(span), .. } => span,\n-                    _ => exp_span,\n-                };\n                 diag.span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n+                    exp_span.shrink_to_hi(),\n                     \"consider `await`ing on the `Future`\",\n                     \".await\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n+            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => match cause.code {\n+                ObligationCauseCode::Pattern { span: Some(span), .. }\n+                | ObligationCauseCode::IfExpression(box IfExpressionCause { then: span, .. }) => {\n+                    diag.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"consider `await`ing on the `Future`\",\n+                        \".await\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                    ref prior_arms,\n+                    ..\n+                }) => {\n+                    diag.multipart_suggestion_verbose(\n+                        \"consider `await`ing on the `Future`\",\n+                        prior_arms\n+                            .iter()\n+                            .map(|arm| (arm.shrink_to_hi(), \".await\".to_string()))\n+                            .collect(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            },\n             _ => {}\n         }\n     }"}, {"sha": "df74df79d9f47a0eda39ae622fad1490d0db252d", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb9859f00d58d9bbed3db67952ef986e18277f01/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9859f00d58d9bbed3db67952ef986e18277f01/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=eb9859f00d58d9bbed3db67952ef986e18277f01", "patch": "@@ -26,4 +26,32 @@ async fn suggest_await_in_async_fn_return() {\n     //~| SUGGESTION .await\n }\n \n+#[allow(unused)]\n+async fn suggest_await_on_if() {\n+    let _x = if true {\n+        dummy()\n+        //~^ HELP consider `await`ing on the `Future`\n+    } else {\n+        dummy().await\n+        //~^ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_on_previous_match_arms() {\n+    let _x = match 0usize {\n+        0 => dummy(), //~ HELP consider `await`ing on the `Future`\n+        1 => dummy(),\n+        2 => dummy().await,\n+        //~^ `match` arms have incompatible types [E0308]\n+    };\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_on_match_expr() {\n+    let _x = match dummy() { //~ HELP consider `await`ing on the `Future`\n+        () => {} //~ ERROR mismatched types [E0308]\n+    };\n+}\n+\n fn main() {}"}, {"sha": "aefe3096fd9b20a0b7d465da9545130fc2091dcb", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/eb9859f00d58d9bbed3db67952ef986e18277f01/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb9859f00d58d9bbed3db67952ef986e18277f01/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=eb9859f00d58d9bbed3db67952ef986e18277f01", "patch": "@@ -38,6 +38,74 @@ help: consider using a semicolon here\n LL |     dummy();\n    |            +\n \n-error: aborting due to 2 previous errors\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/suggest-missing-await.rs:35:9\n+   |\n+LL |       let _x = if true {\n+   |  ______________-\n+LL | |         dummy()\n+   | |         ------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         dummy().await\n+   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+   = note:   expected type `impl Future`\n+           found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         dummy().await\n+   |                ++++++\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/suggest-missing-await.rs:45:14\n+   |\n+LL |       let _x = match 0usize {\n+   |  ______________-\n+LL | |         0 => dummy(),\n+   | |              ------- this is found to be of type `impl Future`\n+LL | |         1 => dummy(),\n+   | |              ------- this is found to be of type `impl Future`\n+LL | |         2 => dummy().await,\n+   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL ~         0 => dummy().await,\n+LL ~         1 => dummy().await,\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:53:9\n+   |\n+LL |         () => {}\n+   |         ^^ expected opaque type, found `()`\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     let _x = match dummy().await {\n+   |                           ++++++\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}