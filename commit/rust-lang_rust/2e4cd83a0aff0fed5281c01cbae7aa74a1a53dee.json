{"sha": "2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNGNkODNhMGFmZjBmZWQ1MjgxYzAxY2JhZTdhYTc0YTFhNTNkZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-22T19:21:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-22T19:21:36Z"}, "message": "auto merge of #11082 : brson/rust/noat, r=alexcrichton", "tree": {"sha": "689945c57fae5a834d75e079ac408544f40d573e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/689945c57fae5a834d75e079ac408544f40d573e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "html_url": "https://github.com/rust-lang/rust/commit/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1e7db71c3a71c7a9f89f765e9d500c48539bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1e7db71c3a71c7a9f89f765e9d500c48539bfe", "html_url": "https://github.com/rust-lang/rust/commit/9b1e7db71c3a71c7a9f89f765e9d500c48539bfe"}, {"sha": "6f16df4aa3b5de7529ff209c909118d7ed1d962d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f16df4aa3b5de7529ff209c909118d7ed1d962d", "html_url": "https://github.com/rust-lang/rust/commit/6f16df4aa3b5de7529ff209c909118d7ed1d962d"}], "stats": {"total": 165, "additions": 89, "deletions": 76}, "files": [{"sha": "69f1bfe9395706d02a2c3e39469a7f0857040350", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "patch": "@@ -353,56 +353,56 @@ mod tests {\n \n     #[test]\n     fn test_tls_multitask() {\n-        static my_key: Key<@~str> = &Key;\n-        set(my_key, @~\"parent data\");\n+        static my_key: Key<~str> = &Key;\n+        set(my_key, ~\"parent data\");\n         do task::spawn {\n             // TLS shouldn't carry over.\n-            assert!(get(my_key, |k| k.map(|k| *k)).is_none());\n-            set(my_key, @~\"child data\");\n-            assert!(*(get(my_key, |k| k.map(|k| *k)).unwrap()) ==\n+            assert!(get(my_key, |k| k.map(|k| (*k).clone())).is_none());\n+            set(my_key, ~\"child data\");\n+            assert!(get(my_key, |k| k.map(|k| (*k).clone())).unwrap() ==\n                     ~\"child data\");\n             // should be cleaned up for us\n         }\n         // Must work multiple times\n-        assert!(*(get(my_key, |k| k.map(|k| *k)).unwrap()) == ~\"parent data\");\n-        assert!(*(get(my_key, |k| k.map(|k| *k)).unwrap()) == ~\"parent data\");\n-        assert!(*(get(my_key, |k| k.map(|k| *k)).unwrap()) == ~\"parent data\");\n+        assert!(get(my_key, |k| k.map(|k| (*k).clone())).unwrap() == ~\"parent data\");\n+        assert!(get(my_key, |k| k.map(|k| (*k).clone())).unwrap() == ~\"parent data\");\n+        assert!(get(my_key, |k| k.map(|k| (*k).clone())).unwrap() == ~\"parent data\");\n     }\n \n     #[test]\n     fn test_tls_overwrite() {\n-        static my_key: Key<@~str> = &Key;\n-        set(my_key, @~\"first data\");\n-        set(my_key, @~\"next data\"); // Shouldn't leak.\n-        assert!(*(get(my_key, |k| k.map(|k| *k)).unwrap()) == ~\"next data\");\n+        static my_key: Key<~str> = &Key;\n+        set(my_key, ~\"first data\");\n+        set(my_key, ~\"next data\"); // Shouldn't leak.\n+        assert!(get(my_key, |k| k.map(|k| (*k).clone())).unwrap() == ~\"next data\");\n     }\n \n     #[test]\n     fn test_tls_pop() {\n-        static my_key: Key<@~str> = &Key;\n-        set(my_key, @~\"weasel\");\n-        assert!(*(pop(my_key).unwrap()) == ~\"weasel\");\n+        static my_key: Key<~str> = &Key;\n+        set(my_key, ~\"weasel\");\n+        assert!(pop(my_key).unwrap() == ~\"weasel\");\n         // Pop must remove the data from the map.\n         assert!(pop(my_key).is_none());\n     }\n \n     #[test]\n     fn test_tls_modify() {\n-        static my_key: Key<@~str> = &Key;\n+        static my_key: Key<~str> = &Key;\n         modify(my_key, |data| {\n             match data {\n-                Some(@ref val) => fail!(\"unwelcome value: {}\", *val),\n-                None           => Some(@~\"first data\")\n+                Some(ref val) => fail!(\"unwelcome value: {}\", *val),\n+                None           => Some(~\"first data\")\n             }\n         });\n         modify(my_key, |data| {\n             match data {\n-                Some(@~\"first data\") => Some(@~\"next data\"),\n-                Some(@ref val)       => fail!(\"wrong value: {}\", *val),\n+                Some(~\"first data\") => Some(~\"next data\"),\n+                Some(ref val)       => fail!(\"wrong value: {}\", *val),\n                 None                 => fail!(\"missing value\")\n             }\n         });\n-        assert!(*(pop(my_key).unwrap()) == ~\"next data\");\n+        assert!(pop(my_key).unwrap() == ~\"next data\");\n     }\n \n     #[test]\n@@ -413,67 +413,67 @@ mod tests {\n         // to get recorded as something within a rust stack segment. Then a\n         // subsequent upcall (esp. for logging, think vsnprintf) would run on\n         // a stack smaller than 1 MB.\n-        static my_key: Key<@~str> = &Key;\n+        static my_key: Key<~str> = &Key;\n         do task::spawn {\n-            set(my_key, @~\"hax\");\n+            set(my_key, ~\"hax\");\n         }\n     }\n \n     #[test]\n     fn test_tls_multiple_types() {\n-        static str_key: Key<@~str> = &Key;\n-        static box_key: Key<@@()> = &Key;\n-        static int_key: Key<@int> = &Key;\n+        static str_key: Key<~str> = &Key;\n+        static box_key: Key<@()> = &Key;\n+        static int_key: Key<int> = &Key;\n         do task::spawn {\n-            set(str_key, @~\"string data\");\n-            set(box_key, @@());\n-            set(int_key, @42);\n+            set(str_key, ~\"string data\");\n+            set(box_key, @());\n+            set(int_key, 42);\n         }\n     }\n \n     #[test]\n     fn test_tls_overwrite_multiple_types() {\n-        static str_key: Key<@~str> = &Key;\n-        static box_key: Key<@@()> = &Key;\n-        static int_key: Key<@int> = &Key;\n+        static str_key: Key<~str> = &Key;\n+        static box_key: Key<@()> = &Key;\n+        static int_key: Key<int> = &Key;\n         do task::spawn {\n-            set(str_key, @~\"string data\");\n-            set(str_key, @~\"string data 2\");\n-            set(box_key, @@());\n-            set(box_key, @@());\n-            set(int_key, @42);\n+            set(str_key, ~\"string data\");\n+            set(str_key, ~\"string data 2\");\n+            set(box_key, @());\n+            set(box_key, @());\n+            set(int_key, 42);\n             // This could cause a segfault if overwriting-destruction is done\n             // with the crazy polymorphic transmute rather than the provided\n             // finaliser.\n-            set(int_key, @31337);\n+            set(int_key, 31337);\n         }\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_tls_cleanup_on_failure() {\n-        static str_key: Key<@~str> = &Key;\n-        static box_key: Key<@@()> = &Key;\n-        static int_key: Key<@int> = &Key;\n-        set(str_key, @~\"parent data\");\n-        set(box_key, @@());\n+        static str_key: Key<~str> = &Key;\n+        static box_key: Key<@()> = &Key;\n+        static int_key: Key<int> = &Key;\n+        set(str_key, ~\"parent data\");\n+        set(box_key, @());\n         do task::spawn {\n             // spawn_linked\n-            set(str_key, @~\"string data\");\n-            set(box_key, @@());\n-            set(int_key, @42);\n+            set(str_key, ~\"string data\");\n+            set(box_key, @());\n+            set(int_key, 42);\n             fail!();\n         }\n         // Not quite nondeterministic.\n-        set(int_key, @31337);\n+        set(int_key, 31337);\n         fail!();\n     }\n \n     #[test]\n     fn test_static_pointer() {\n-        static key: Key<@&'static int> = &Key;\n+        static key: Key<&'static int> = &Key;\n         static VALUE: int = 0;\n-        let v: @&'static int = @&VALUE;\n+        let v: &'static int = &VALUE;\n         set(key, v);\n     }\n "}, {"sha": "0e55ad732d71479adc02e83ddb035a02f015bbb1", "filename": "src/libstd/option.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "patch": "@@ -445,28 +445,34 @@ mod tests {\n \n     #[test]\n     fn test_get_resource() {\n+        use rc::Rc;\n+        use cell::RefCell;\n+\n         struct R {\n-           i: @mut int,\n+           i: Rc<RefCell<int>>,\n         }\n \n         #[unsafe_destructor]\n         impl ::ops::Drop for R {\n-           fn drop(&mut self) { *(self.i) += 1; }\n+           fn drop(&mut self) {\n+                let ii = self.i.borrow();\n+                ii.set(ii.get() + 1);\n+            }\n         }\n \n-        fn R(i: @mut int) -> R {\n+        fn R(i: Rc<RefCell<int>>) -> R {\n             R {\n                 i: i\n             }\n         }\n \n-        let i = @mut 0;\n+        let i = Rc::from_send(RefCell::new(0));\n         {\n-            let x = R(i);\n+            let x = R(i.clone());\n             let opt = Some(x);\n             let _y = opt.unwrap();\n         }\n-        assert_eq!(*i, 1);\n+        assert_eq!(i.borrow().get(), 1);\n     }\n \n     #[test]"}, {"sha": "487f6749e3e9acc594ec41749109a674530483b1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2e4cd83a0aff0fed5281c01cbae7aa74a1a53dee", "patch": "@@ -3254,7 +3254,7 @@ mod tests {\n \n     #[test]\n     fn test_truncate() {\n-        let mut v = ~[@6,@5,@4];\n+        let mut v = ~[~6,~5,~4];\n         v.truncate(1);\n         assert_eq!(v.len(), 1);\n         assert_eq!(*(v[0]), 6);\n@@ -3263,7 +3263,7 @@ mod tests {\n \n     #[test]\n     fn test_clear() {\n-        let mut v = ~[@6,@5,@4];\n+        let mut v = ~[~6,~5,~4];\n         v.clear();\n         assert_eq!(v.len(), 0);\n         // If the unsafe block didn't drop things properly, we blow up here.\n@@ -3302,14 +3302,14 @@ mod tests {\n \n     #[test]\n     fn test_dedup_shared() {\n-        let mut v0 = ~[@1, @1, @2, @3];\n+        let mut v0 = ~[~1, ~1, ~2, ~3];\n         v0.dedup();\n-        let mut v1 = ~[@1, @2, @2, @3];\n+        let mut v1 = ~[~1, ~2, ~2, ~3];\n         v1.dedup();\n-        let mut v2 = ~[@1, @2, @3, @3];\n+        let mut v2 = ~[~1, ~2, ~3, ~3];\n         v2.dedup();\n         /*\n-         * If the @pointers were leaked or otherwise misused, valgrind and/or\n+         * If the pointers were leaked or otherwise misused, valgrind and/or\n          * rustrt should raise errors.\n          */\n     }\n@@ -3694,18 +3694,19 @@ mod tests {\n     fn test_from_fn_fail() {\n         from_fn(100, |v| {\n             if v == 50 { fail!() }\n-            (~0, @0)\n+            ~0\n         });\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_from_elem_fail() {\n         use cast;\n+        use rc::Rc;\n \n         struct S {\n             f: int,\n-            boxes: (~int, @int)\n+            boxes: (~int, Rc<int>)\n         }\n \n         impl Clone for S {\n@@ -3717,66 +3718,71 @@ mod tests {\n             }\n         }\n \n-        let s = S { f: 0, boxes: (~0, @0) };\n+        let s = S { f: 0, boxes: (~0, Rc::new(0)) };\n         let _ = from_elem(100, s);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_build_fail() {\n+        use rc::Rc;\n         build(None, |push| {\n-            push((~0, @0));\n-            push((~0, @0));\n-            push((~0, @0));\n-            push((~0, @0));\n+            push((~0, Rc::new(0)));\n+            push((~0, Rc::new(0)));\n+            push((~0, Rc::new(0)));\n+            push((~0, Rc::new(0)));\n             fail!();\n         });\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_grow_fn_fail() {\n+        use rc::Rc;\n         let mut v = ~[];\n         v.grow_fn(100, |i| {\n             if i == 50 {\n                 fail!()\n             }\n-            (~0, @0)\n+            (~0, Rc::new(0))\n         })\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_map_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        use rc::Rc;\n+        let v = [(~0, Rc::new(0)), (~0, Rc::new(0)), (~0, Rc::new(0)), (~0, Rc::new(0))];\n         let mut i = 0;\n         v.map(|_elt| {\n             if i == 2 {\n                 fail!()\n             }\n             i += 1;\n-            ~[(~0, @0)]\n+            ~[(~0, Rc::new(0))]\n         });\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_flat_map_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        use rc::Rc;\n+        let v = [(~0, Rc::new(0)), (~0, Rc::new(0)), (~0, Rc::new(0)), (~0, Rc::new(0))];\n         let mut i = 0;\n         flat_map(v, |_elt| {\n             if i == 2 {\n                 fail!()\n             }\n             i += 1;\n-            ~[(~0, @0)]\n+            ~[(~0, Rc::new(0))]\n         });\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_permute_fail() {\n-        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        use rc::Rc;\n+        let v = [(~0, Rc::new(0)), (~0, Rc::new(0)), (~0, Rc::new(0)), (~0, Rc::new(0))];\n         let mut i = 0;\n         for _ in v.permutations() {\n             if i == 2 {\n@@ -4114,9 +4120,10 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_overflow_does_not_cause_segfault_managed() {\n-        let mut v = ~[@1];\n+        use rc::Rc;\n+        let mut v = ~[Rc::new(1)];\n         v.reserve(-1);\n-        v.push(@2);\n+        v.push(Rc::new(2));\n     }\n \n     #[test]"}]}