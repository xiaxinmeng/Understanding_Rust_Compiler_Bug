{"sha": "817d6a078eb6b7ef1103781bd9114c6d9b811db9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2Q2YTA3OGViNmI3ZWYxMTAzNzgxYmQ5MTE0YzZkOWI4MTFkYjk=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-04T20:07:56Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-04T20:07:56Z"}, "message": "Add a **Note**: comment in documentation when the type/method/function is not always available", "tree": {"sha": "d33e72471834da9beea73468f8a4b2df1cb193bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33e72471834da9beea73468f8a4b2df1cb193bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817d6a078eb6b7ef1103781bd9114c6d9b811db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817d6a078eb6b7ef1103781bd9114c6d9b811db9", "html_url": "https://github.com/rust-lang/rust/commit/817d6a078eb6b7ef1103781bd9114c6d9b811db9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817d6a078eb6b7ef1103781bd9114c6d9b811db9/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5d0f898c2f3998e50c2180c6202f193c3acdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5d0f898c2f3998e50c2180c6202f193c3acdbc", "html_url": "https://github.com/rust-lang/rust/commit/3d5d0f898c2f3998e50c2180c6202f193c3acdbc"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "cf84c63e67c406b4d9d18b581dcf60032b4cc23c", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/817d6a078eb6b7ef1103781bd9114c6d9b811db9/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817d6a078eb6b7ef1103781bd9114c6d9b811db9/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=817d6a078eb6b7ef1103781bd9114c6d9b811db9", "patch": "@@ -153,6 +153,8 @@ pub fn spin_loop_hint() {\n ///\n /// This type has the same in-memory representation as a [`bool`].\n ///\n+/// **Note**: This type may not be available on some platforms.\n+///\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -178,6 +180,9 @@ unsafe impl Sync for AtomicBool {}\n /// A raw pointer type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a `*mut T`.\n+///\n+/// **Note**: This type may not be available on some platforms. Its size depends\n+/// on the target pointer's size.\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(target_pointer_width = \"16\", repr(C, align(2)))]\n@@ -462,6 +467,8 @@ impl AtomicBool {\n     /// assert_eq!(some_bool.swap(false, Ordering::Relaxed), true);\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -501,6 +508,8 @@ impl AtomicBool {\n     /// assert_eq!(some_bool.compare_and_swap(true, true, Ordering::Relaxed), false);\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -552,6 +561,8 @@ impl AtomicBool {\n     ///            Err(false));\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -610,6 +621,8 @@ impl AtomicBool {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -663,6 +676,8 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_and(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -706,6 +721,8 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_nand(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -759,6 +776,8 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_or(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -801,6 +820,8 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_xor(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -998,6 +1019,8 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// let value = some_ptr.swap(other_ptr, Ordering::Relaxed);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1035,6 +1058,8 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// let value = some_ptr.compare_and_swap(ptr, other_ptr, Ordering::Relaxed);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1077,6 +1102,8 @@ impl<T> AtomicPtr<T> {\n     /// let value = some_ptr.compare_exchange(ptr, other_ptr,\n     ///                                       Ordering::SeqCst, Ordering::Relaxed);\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1141,6 +1168,8 @@ impl<T> AtomicPtr<T> {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1223,6 +1252,8 @@ macro_rules! atomic_int {\n         /// non-atomic types as well as information about the portability of\n         /// this type, please see the [module-level documentation].\n         ///\n+        /// **Note**: This type may not be available on some platforms.\n+        ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n         #[repr(C, align($align))]\n@@ -1421,7 +1452,9 @@ using [`Release`] makes the load part [`Relaxed`].\n let some_var = \", stringify!($atomic_type), \"::new(5);\n \n assert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1462,7 +1495,9 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n \n assert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\n assert_eq!(some_var.load(Ordering::Relaxed), 10);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1520,7 +1555,9 @@ assert_eq!(some_var.compare_exchange(6, 12,\n                                      Ordering::Acquire),\n            Err(10));\n assert_eq!(some_var.load(Ordering::Relaxed), 10);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable_cxchg]\n                 #[$cfg_cas]\n@@ -1573,7 +1610,9 @@ loop {\n         Err(x) => old = x,\n     }\n }\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable_cxchg]\n                 #[$cfg_cas]\n@@ -1612,7 +1651,9 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0);\n assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\n assert_eq!(foo.load(Ordering::SeqCst), 10);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1645,7 +1686,9 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(20);\n assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\n assert_eq!(foo.load(Ordering::SeqCst), 10);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1681,7 +1724,9 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0b101101);\n assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\n assert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1718,7 +1763,9 @@ use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n let foo = \", stringify!($atomic_type), \"::new(0x13);\n assert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\n assert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable_nand]\n                 #[$cfg_cas]\n@@ -1754,7 +1801,9 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0b101101);\n assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\n assert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1790,7 +1839,9 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0b101101);\n assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\n assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1837,7 +1888,9 @@ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7))\n assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n assert_eq!(x.load(Ordering::SeqCst), 9);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[stable(feature = \"no_more_cas\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n@@ -1894,7 +1947,9 @@ let foo = \", stringify!($atomic_type), \"::new(23);\n let bar = 42;\n let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n assert!(max_foo == 42);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n@@ -1943,7 +1998,9 @@ let foo = \", stringify!($atomic_type), \"::new(23);\n let bar = 12;\n let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n assert_eq!(min_foo, 12);\n-```\"),\n+```\n+\n+**Note**: This method may not be available on some platforms.\"),\n                 #[inline]\n                 #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]"}]}