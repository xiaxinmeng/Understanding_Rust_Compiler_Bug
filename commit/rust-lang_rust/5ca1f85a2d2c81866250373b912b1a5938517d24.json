{"sha": "5ca1f85a2d2c81866250373b912b1a5938517d24", "node_id": "C_kwDOAAsO6NoAKDVjYTFmODVhMmQyYzgxODY2MjUwMzczYjkxMmIxYTU5Mzg1MTdkMjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-19T12:44:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-09-20T06:37:20Z"}, "message": "make some names more consistent", "tree": {"sha": "829fd983f55967a7eaba38a7e576a6b65eee7c6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829fd983f55967a7eaba38a7e576a6b65eee7c6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca1f85a2d2c81866250373b912b1a5938517d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca1f85a2d2c81866250373b912b1a5938517d24", "html_url": "https://github.com/rust-lang/rust/commit/5ca1f85a2d2c81866250373b912b1a5938517d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca1f85a2d2c81866250373b912b1a5938517d24/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc149c76912dd7219cf4e3eef43e69390b5689e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc149c76912dd7219cf4e3eef43e69390b5689e3", "html_url": "https://github.com/rust-lang/rust/commit/cc149c76912dd7219cf4e3eef43e69390b5689e3"}], "stats": {"total": 392, "additions": 196, "deletions": 196}, "files": [{"sha": "2e54ddaaba1132e152be05595e21a18c38a28955", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -438,8 +438,8 @@ impl MemoryCellClocks {\n }\n \n /// Evaluation context extensions.\n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n     /// Atomic variant of read_scalar_at_offset.\n     fn read_scalar_at_offset_atomic(\n         &self,\n@@ -940,8 +940,8 @@ impl VClockAlloc {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {}\n-trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for MiriInterpCx<'mir, 'tcx> {}\n+trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n     /// Temporarily allow data-races to occur. This should only be used in\n     /// one of these cases:\n     /// - One of the appropriate `validate_atomic` functions will be called to\n@@ -950,7 +950,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     /// cannot be accessed by the interpreted program.\n     /// - Execution of the interpreted program execution has halted.\n     #[inline]\n-    fn allow_data_races_ref<R>(&self, op: impl FnOnce(&MiriEvalContext<'mir, 'tcx>) -> R) -> R {\n+    fn allow_data_races_ref<R>(&self, op: impl FnOnce(&MiriInterpCx<'mir, 'tcx>) -> R) -> R {\n         let this = self.eval_context_ref();\n         if let Some(data_race) = &this.machine.data_race {\n             let old = data_race.ongoing_action_data_race_free.replace(true);\n@@ -969,7 +969,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     #[inline]\n     fn allow_data_races_mut<R>(\n         &mut self,\n-        op: impl FnOnce(&mut MiriEvalContext<'mir, 'tcx>) -> R,\n+        op: impl FnOnce(&mut MiriInterpCx<'mir, 'tcx>) -> R,\n     ) -> R {\n         let this = self.eval_context_mut();\n         if let Some(data_race) = &this.machine.data_race {"}, {"sha": "5aab98c304add88bebec5768bfe1bc480688c934", "filename": "src/concurrency/sync.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fsync.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -159,8 +159,8 @@ pub(crate) struct SynchronizationState {\n }\n \n // Private extension trait for local helper methods\n-impl<'mir, 'tcx: 'mir> EvalContextExtPriv<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-trait EvalContextExtPriv<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExtPriv<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+trait EvalContextExtPriv<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Take a reader out of the queue waiting for the lock.\n     /// Returns `true` if some thread got the rwlock.\n     #[inline]\n@@ -208,8 +208,8 @@ trait EvalContextExtPriv<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n // cases, the function calls are infallible and it is the client's (shim\n // implementation's) responsibility to detect and deal with erroneous\n // situations.\n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     #[inline]\n     /// Create state for a new mutex.\n     fn mutex_create(&mut self) -> MutexId {\n@@ -222,7 +222,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// otherwise returns the value from the closure\n     fn mutex_get_or_create<F>(&mut self, existing: F) -> InterpResult<'tcx, MutexId>\n     where\n-        F: FnOnce(&mut MiriEvalContext<'mir, 'tcx>, MutexId) -> InterpResult<'tcx, Option<MutexId>>,\n+        F: FnOnce(&mut MiriInterpCx<'mir, 'tcx>, MutexId) -> InterpResult<'tcx, Option<MutexId>>,\n     {\n         let this = self.eval_context_mut();\n         let next_index = this.machine.threads.sync.mutexes.next_index();\n@@ -323,7 +323,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn rwlock_get_or_create<F>(&mut self, existing: F) -> InterpResult<'tcx, RwLockId>\n     where\n         F: FnOnce(\n-            &mut MiriEvalContext<'mir, 'tcx>,\n+            &mut MiriInterpCx<'mir, 'tcx>,\n             RwLockId,\n         ) -> InterpResult<'tcx, Option<RwLockId>>,\n     {\n@@ -492,7 +492,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn condvar_get_or_create<F>(&mut self, existing: F) -> InterpResult<'tcx, CondvarId>\n     where\n         F: FnOnce(\n-            &mut MiriEvalContext<'mir, 'tcx>,\n+            &mut MiriInterpCx<'mir, 'tcx>,\n             CondvarId,\n         ) -> InterpResult<'tcx, Option<CondvarId>>,\n     {"}, {"sha": "75eec863f397743eaeee7a40d75f0d55d58266ad", "filename": "src/concurrency/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fthread.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -33,7 +33,7 @@ pub enum SchedulingAction {\n /// Timeout callbacks can be created by synchronization primitives to tell the\n /// scheduler that they should be called once some period of time passes.\n type TimeoutCallback<'mir, 'tcx> =\n-    Box<dyn FnOnce(&mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>) -> InterpResult<'tcx> + 'tcx>;\n+    Box<dyn FnOnce(&mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>) -> InterpResult<'tcx> + 'tcx>;\n \n /// A thread identifier.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n@@ -253,7 +253,7 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n-    pub(crate) fn init(ecx: &mut MiriEvalContext<'mir, 'tcx>) {\n+    pub(crate) fn init(ecx: &mut MiriInterpCx<'mir, 'tcx>) {\n         if ecx.tcx.sess.target.os.as_ref() != \"windows\" {\n             // The main thread can *not* be joined on except on windows.\n             ecx.machine.threads.threads[ThreadId::new(0)].join_status = ThreadJoinStatus::Detached;\n@@ -628,8 +628,8 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n }\n \n // Public interface to thread management.\n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Get a thread-specific allocation id for the given thread-local static.\n     /// If needed, allocate a new one.\n     fn get_or_create_thread_local_alloc("}, {"sha": "bac403e9ec7b1f1d33d6d3164809fa0523f2bc60", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -456,9 +456,9 @@ impl StoreElement {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub(super) trait EvalContextExt<'mir, 'tcx: 'mir>:\n-    crate::MiriEvalContextExt<'mir, 'tcx>\n+    crate::MiriInterpCxExt<'mir, 'tcx>\n {\n     // If weak memory emulation is enabled, check if this atomic op imperfectly overlaps with a previous\n     // atomic read or write. If it does, then we require it to be ordered (non-racy) with all previous atomic\n@@ -502,7 +502,7 @@ pub(super) trait EvalContextExt<'mir, 'tcx: 'mir>:\n         let (alloc_id, base_offset, ..) = this.ptr_get_alloc_id(place.ptr)?;\n         if let (\n             crate::AllocExtra { weak_memory: Some(alloc_buffers), .. },\n-            crate::Evaluator { data_race: Some(global), threads, .. },\n+            crate::MiriMachine { data_race: Some(global), threads, .. },\n         ) = this.get_alloc_extra_mut(alloc_id)?\n         {\n             if atomic == AtomicRwOrd::SeqCst {\n@@ -567,7 +567,7 @@ pub(super) trait EvalContextExt<'mir, 'tcx: 'mir>:\n         let (alloc_id, base_offset, ..) = this.ptr_get_alloc_id(dest.ptr)?;\n         if let (\n             crate::AllocExtra { weak_memory: Some(alloc_buffers), .. },\n-            crate::Evaluator { data_race: Some(global), threads, .. },\n+            crate::MiriMachine { data_race: Some(global), threads, .. },\n         ) = this.get_alloc_extra_mut(alloc_id)?\n         {\n             if atomic == AtomicWriteOrd::SeqCst {"}, {"sha": "b762c7622e3c94a21badac4f037c7c6797d89069", "filename": "src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -89,7 +89,7 @@ enum DiagLevel {\n /// be pointing to a problem in the Rust runtime itself, and do not prune it at all.\n fn prune_stacktrace<'tcx>(\n     mut stacktrace: Vec<FrameInfo<'tcx>>,\n-    machine: &Evaluator<'_, 'tcx>,\n+    machine: &MiriMachine<'_, 'tcx>,\n ) -> (Vec<FrameInfo<'tcx>>, bool) {\n     match machine.backtrace_style {\n         BacktraceStyle::Off => {\n@@ -144,7 +144,7 @@ fn prune_stacktrace<'tcx>(\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n pub fn report_error<'tcx, 'mir>(\n-    ecx: &InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n+    ecx: &InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,\n     e: InterpErrorInfo<'tcx>,\n ) -> Option<i64> {\n     use InterpError::*;\n@@ -311,7 +311,7 @@ fn report_msg<'tcx>(\n     notes: Vec<(Option<SpanData>, String)>,\n     helps: Vec<(Option<SpanData>, String)>,\n     stacktrace: &[FrameInfo<'tcx>],\n-    machine: &Evaluator<'_, 'tcx>,\n+    machine: &MiriMachine<'_, 'tcx>,\n ) {\n     let span = stacktrace.first().map_or(DUMMY_SP, |fi| fi.span);\n     let sess = machine.tcx.sess;\n@@ -367,11 +367,11 @@ fn report_msg<'tcx>(\n     err.emit();\n }\n \n-impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n+impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub fn emit_diagnostic(&self, e: NonHaltingDiagnostic) {\n         use NonHaltingDiagnostic::*;\n \n-        let stacktrace = MiriEvalContext::generate_stacktrace_from_stack(self.threads.active_thread_stack());\n+        let stacktrace = MiriInterpCx::generate_stacktrace_from_stack(self.threads.active_thread_stack());\n         let (stacktrace, _was_pruned) = prune_stacktrace(stacktrace, self);\n \n         let (title, diag_level) = match e {\n@@ -453,8 +453,8 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emit_diagnostic(&self, e: NonHaltingDiagnostic) {\n         let this = self.eval_context_ref();\n         this.machine.emit_diagnostic(e);"}, {"sha": "57d80a2ad82db90a3b7e990c1e99f23fc0bd469e", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -180,18 +180,18 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     entry_id: DefId,\n     entry_type: EntryFnType,\n     config: &MiriConfig,\n-) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>, MPlaceTy<'tcx, Provenance>)> {\n+) -> InterpResult<'tcx, (InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>, MPlaceTy<'tcx, Provenance>)> {\n     let param_env = ty::ParamEnv::reveal_all();\n     let layout_cx = LayoutCx { tcx, param_env };\n     let mut ecx = InterpCx::new(\n         tcx,\n         rustc_span::source_map::DUMMY_SP,\n         param_env,\n-        Evaluator::new(config, layout_cx),\n+        MiriMachine::new(config, layout_cx),\n     );\n \n     // Some parts of initialization require a full `InterpCx`.\n-    Evaluator::late_init(&mut ecx, config)?;\n+    MiriMachine::late_init(&mut ecx, config)?;\n \n     // Make sure we have MIR. We check MIR for some stable monomorphic function in libcore.\n     let sentinel = ecx.try_resolve_path(&[\"core\", \"ascii\", \"escape_default\"]);"}, {"sha": "0f0bfa355bdc71fde50b7ca01eb586297e947054", "filename": "src/helpers.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -21,7 +21,7 @@ use rand::RngCore;\n \n use crate::*;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n \n // This mapping should match `decode_error_kind` in\n // <https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/mod.rs>.\n@@ -96,7 +96,7 @@ fn try_resolve_did<'tcx>(tcx: TyCtxt<'tcx>, path: &[&str]) -> Option<DefId> {\n     )\n }\n \n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Gets an instance for a path; fails gracefully if the path does not exist.\n     fn try_resolve_path(&self, path: &[&str]) -> Option<ty::Instance<'tcx>> {\n         let did = try_resolve_did(self.eval_context_ref().tcx.tcx, path)?;\n@@ -391,19 +391,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         where\n             F: FnMut(&MPlaceTy<'tcx, Provenance>) -> InterpResult<'tcx>,\n         {\n-            ecx: &'ecx MiriEvalContext<'mir, 'tcx>,\n+            ecx: &'ecx MiriInterpCx<'mir, 'tcx>,\n             unsafe_cell_action: F,\n         }\n \n-        impl<'ecx, 'mir, 'tcx: 'mir, F> ValueVisitor<'mir, 'tcx, Evaluator<'mir, 'tcx>>\n+        impl<'ecx, 'mir, 'tcx: 'mir, F> ValueVisitor<'mir, 'tcx, MiriMachine<'mir, 'tcx>>\n             for UnsafeCellVisitor<'ecx, 'mir, 'tcx, F>\n         where\n             F: FnMut(&MPlaceTy<'tcx, Provenance>) -> InterpResult<'tcx>,\n         {\n             type V = MPlaceTy<'tcx, Provenance>;\n \n             #[inline(always)]\n-            fn ecx(&self) -> &MiriEvalContext<'mir, 'tcx> {\n+            fn ecx(&self) -> &MiriInterpCx<'mir, 'tcx> {\n                 self.ecx\n             }\n \n@@ -883,7 +883,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n+impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub fn current_span(&self) -> CurrentSpan<'_, 'mir, 'tcx> {\n         CurrentSpan { current_frame_idx: None, machine: self }\n     }\n@@ -896,11 +896,11 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n #[derive(Clone)]\n pub struct CurrentSpan<'a, 'mir, 'tcx> {\n     current_frame_idx: Option<usize>,\n-    machine: &'a Evaluator<'mir, 'tcx>,\n+    machine: &'a MiriMachine<'mir, 'tcx>,\n }\n \n impl<'a, 'mir: 'a, 'tcx: 'a + 'mir> CurrentSpan<'a, 'mir, 'tcx> {\n-    pub fn machine(&self) -> &'a Evaluator<'mir, 'tcx> {\n+    pub fn machine(&self) -> &'a MiriMachine<'mir, 'tcx> {\n         self.machine\n     }\n \n@@ -919,7 +919,7 @@ impl<'a, 'mir: 'a, 'tcx: 'a + 'mir> CurrentSpan<'a, 'mir, 'tcx> {\n         Self::frame_span(self.machine, idx.wrapping_sub(1))\n     }\n \n-    fn frame_span(machine: &Evaluator<'_, '_>, idx: usize) -> Span {\n+    fn frame_span(machine: &MiriMachine<'_, '_>, idx: usize) -> Span {\n         machine\n             .threads\n             .active_thread_stack()\n@@ -937,7 +937,7 @@ impl<'a, 'mir: 'a, 'tcx: 'a + 'mir> CurrentSpan<'a, 'mir, 'tcx> {\n     // Find the position of the inner-most frame which is part of the crate being\n     // compiled/executed, part of the Cargo workspace, and is also not #[track_caller].\n     #[inline(never)]\n-    fn compute_current_frame_index(machine: &Evaluator<'_, '_>) -> usize {\n+    fn compute_current_frame_index(machine: &MiriMachine<'_, '_>) -> usize {\n         machine\n             .threads\n             .active_thread_stack()"}, {"sha": "b9e5def8fa7cb9c00a345ce5bdc83aef14852cb8", "filename": "src/intptrcast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -59,7 +59,7 @@ impl GlobalStateInner {\n impl<'mir, 'tcx> GlobalStateInner {\n     // Returns the exposed `AllocId` that corresponds to the specified addr,\n     // or `None` if the addr is out of bounds\n-    fn alloc_id_from_addr(ecx: &MiriEvalContext<'mir, 'tcx>, addr: u64) -> Option<AllocId> {\n+    fn alloc_id_from_addr(ecx: &MiriInterpCx<'mir, 'tcx>, addr: u64) -> Option<AllocId> {\n         let global_state = ecx.machine.intptrcast.borrow();\n         assert!(global_state.provenance_mode != ProvenanceMode::Strict);\n \n@@ -97,7 +97,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     pub fn expose_ptr(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         alloc_id: AllocId,\n         sb: SbTag,\n     ) -> InterpResult<'tcx> {\n@@ -114,7 +114,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     pub fn ptr_from_addr_transmute(\n-        _ecx: &MiriEvalContext<'mir, 'tcx>,\n+        _ecx: &MiriInterpCx<'mir, 'tcx>,\n         addr: u64,\n     ) -> Pointer<Option<Provenance>> {\n         trace!(\"Transmuting {:#x} to a pointer\", addr);\n@@ -124,7 +124,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     pub fn ptr_from_addr_cast(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         addr: u64,\n     ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n         trace!(\"Casting {:#x} to a pointer\", addr);\n@@ -156,7 +156,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n         Ok(Pointer::new(Some(Provenance::Wildcard), Size::from_bytes(addr)))\n     }\n \n-    fn alloc_base_addr(ecx: &MiriEvalContext<'mir, 'tcx>, alloc_id: AllocId) -> u64 {\n+    fn alloc_base_addr(ecx: &MiriInterpCx<'mir, 'tcx>, alloc_id: AllocId) -> u64 {\n         let mut global_state = ecx.machine.intptrcast.borrow_mut();\n         let global_state = &mut *global_state;\n \n@@ -202,7 +202,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     /// Convert a relative (tcx) pointer to an absolute address.\n-    pub fn rel_ptr_to_addr(ecx: &MiriEvalContext<'mir, 'tcx>, ptr: Pointer<AllocId>) -> u64 {\n+    pub fn rel_ptr_to_addr(ecx: &MiriInterpCx<'mir, 'tcx>, ptr: Pointer<AllocId>) -> u64 {\n         let (alloc_id, offset) = ptr.into_parts(); // offset is relative (AllocId provenance)\n         let base_addr = GlobalStateInner::alloc_base_addr(ecx, alloc_id);\n \n@@ -214,7 +214,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     /// When a pointer is used for a memory access, this computes where in which allocation the\n     /// access is going.\n     pub fn abs_ptr_to_rel(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         ptr: Pointer<Provenance>,\n     ) -> Option<(AllocId, Size)> {\n         let (tag, addr) = ptr.into_parts(); // addr is absolute (Tag provenance)"}, {"sha": "7fbe71d573e28541eabba11917eb5b0501b1b71a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -103,7 +103,7 @@ pub use crate::eval::{\n pub use crate::helpers::{CurrentSpan, EvalContextExt as HelpersEvalContextExt};\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n-    AllocExtra, Evaluator, FrameData, MiriEvalContext, MiriEvalContextExt, MiriMemoryKind,\n+    AllocExtra, MiriMachine, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMemoryKind,\n     Provenance, ProvenanceExtra, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;"}, {"sha": "8db546463c2a1b266f2269dfc30a20f13b7066c1", "filename": "src/machine.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -291,7 +291,7 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n }\n \n /// The machine itself.\n-pub struct Evaluator<'mir, 'tcx> {\n+pub struct MiriMachine<'mir, 'tcx> {\n     // We carry a copy of the global `TyCtxt` for convenience, so methods taking just `&Evaluator` have `tcx` access.\n     pub tcx: TyCtxt<'tcx>,\n \n@@ -408,7 +408,7 @@ pub struct Evaluator<'mir, 'tcx> {\n     pub(crate) since_gc: u32,\n }\n \n-impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n+impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     pub(crate) fn new(config: &MiriConfig, layout_cx: LayoutCx<'tcx, TyCtxt<'tcx>>) -> Self {\n         let target_triple = &layout_cx.tcx.sess.opts.target_triple.to_string();\n         let local_crates = helpers::get_local_crates(layout_cx.tcx);\n@@ -426,7 +426,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             ))\n         });\n         let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n-        Evaluator {\n+        MiriMachine {\n             tcx: layout_cx.tcx,\n             stacked_borrows,\n             data_race,\n@@ -488,17 +488,17 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n     }\n \n     pub(crate) fn late_init(\n-        this: &mut MiriEvalContext<'mir, 'tcx>,\n+        this: &mut MiriInterpCx<'mir, 'tcx>,\n         config: &MiriConfig,\n     ) -> InterpResult<'tcx> {\n         EnvVars::init(this, config)?;\n-        Evaluator::init_extern_statics(this)?;\n+        MiriMachine::init_extern_statics(this)?;\n         ThreadManager::init(this);\n         Ok(())\n     }\n \n     fn add_extern_static(\n-        this: &mut MiriEvalContext<'mir, 'tcx>,\n+        this: &mut MiriInterpCx<'mir, 'tcx>,\n         name: &str,\n         ptr: Pointer<Option<Provenance>>,\n     ) {\n@@ -508,7 +508,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n     }\n \n     fn alloc_extern_static(\n-        this: &mut MiriEvalContext<'mir, 'tcx>,\n+        this: &mut MiriInterpCx<'mir, 'tcx>,\n         name: &str,\n         val: ImmTy<'tcx, Provenance>,\n     ) -> InterpResult<'tcx> {\n@@ -519,7 +519,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n     }\n \n     /// Sets up the \"extern statics\" for this machine.\n-    fn init_extern_statics(this: &mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx> {\n+    fn init_extern_statics(this: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n         match this.tcx.sess.target.os.as_ref() {\n             \"linux\" => {\n                 // \"environ\"\n@@ -585,26 +585,26 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n }\n \n /// A rustc InterpCx for Miri.\n-pub type MiriEvalContext<'mir, 'tcx> = InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>;\n+pub type MiriInterpCx<'mir, 'tcx> = InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>;\n \n /// A little trait that's useful to be inherited by extension traits.\n-pub trait MiriEvalContextExt<'mir, 'tcx> {\n-    fn eval_context_ref<'a>(&'a self) -> &'a MiriEvalContext<'mir, 'tcx>;\n-    fn eval_context_mut<'a>(&'a mut self) -> &'a mut MiriEvalContext<'mir, 'tcx>;\n+pub trait MiriInterpCxExt<'mir, 'tcx> {\n+    fn eval_context_ref<'a>(&'a self) -> &'a MiriInterpCx<'mir, 'tcx>;\n+    fn eval_context_mut<'a>(&'a mut self) -> &'a mut MiriInterpCx<'mir, 'tcx>;\n }\n-impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {\n+impl<'mir, 'tcx> MiriInterpCxExt<'mir, 'tcx> for MiriInterpCx<'mir, 'tcx> {\n     #[inline(always)]\n-    fn eval_context_ref(&self) -> &MiriEvalContext<'mir, 'tcx> {\n+    fn eval_context_ref(&self) -> &MiriInterpCx<'mir, 'tcx> {\n         self\n     }\n     #[inline(always)]\n-    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'mir, 'tcx> {\n+    fn eval_context_mut(&mut self) -> &mut MiriInterpCx<'mir, 'tcx> {\n         self\n     }\n }\n \n /// Machine hook implementations.\n-impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n+impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     type MemoryKind = MiriMemoryKind;\n     type ExtraFnVal = Dlsym;\n \n@@ -624,33 +624,33 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     const PANIC_ON_ALLOC_FAIL: bool = false;\n \n     #[inline(always)]\n-    fn enforce_alignment(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+    fn enforce_alignment(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         ecx.machine.check_alignment != AlignmentCheck::None\n     }\n \n     #[inline(always)]\n-    fn use_addr_for_alignment_check(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+    fn use_addr_for_alignment_check(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         ecx.machine.check_alignment == AlignmentCheck::Int\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+    fn enforce_validity(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         ecx.machine.validate\n     }\n \n     #[inline(always)]\n-    fn enforce_abi(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+    fn enforce_abi(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         ecx.machine.enforce_abi\n     }\n \n     #[inline(always)]\n-    fn checked_binop_checks_overflow(ecx: &MiriEvalContext<'mir, 'tcx>) -> bool {\n+    fn checked_binop_checks_overflow(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         ecx.tcx.sess.overflow_checks()\n     }\n \n     #[inline(always)]\n     fn find_mir_or_eval_fn(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         instance: ty::Instance<'tcx>,\n         abi: Abi,\n         args: &[OpTy<'tcx, Provenance>],\n@@ -663,7 +663,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn call_extra_fn(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         fn_val: Dlsym,\n         abi: Abi,\n         args: &[OpTy<'tcx, Provenance>],\n@@ -676,7 +676,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn call_intrinsic(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Provenance>],\n         dest: &PlaceTy<'tcx, Provenance>,\n@@ -688,21 +688,21 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn assert_panic(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         msg: &mir::AssertMessage<'tcx>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         ecx.assert_panic(msg, unwind)\n     }\n \n     #[inline(always)]\n-    fn abort(_ecx: &mut MiriEvalContext<'mir, 'tcx>, msg: String) -> InterpResult<'tcx, !> {\n+    fn abort(_ecx: &mut MiriInterpCx<'mir, 'tcx>, msg: String) -> InterpResult<'tcx, !> {\n         throw_machine_stop!(TerminationInfo::Abort(msg))\n     }\n \n     #[inline(always)]\n     fn binary_ptr_op(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         bin_op: mir::BinOp,\n         left: &ImmTy<'tcx, Provenance>,\n         right: &ImmTy<'tcx, Provenance>,\n@@ -711,14 +711,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     fn thread_local_static_base_pointer(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         def_id: DefId,\n     ) -> InterpResult<'tcx, Pointer<Provenance>> {\n         ecx.get_or_create_thread_local_alloc(def_id)\n     }\n \n     fn extern_static_base_pointer(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         def_id: DefId,\n     ) -> InterpResult<'tcx, Pointer<Provenance>> {\n         let link_name = ecx.item_link_name(def_id);\n@@ -757,7 +757,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     fn adjust_allocation<'b>(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKind>>,\n@@ -804,7 +804,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     }\n \n     fn adjust_alloc_base_pointer(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         ptr: Pointer<AllocId>,\n     ) -> Pointer<Provenance> {\n         if cfg!(debug_assertions) {\n@@ -835,7 +835,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn ptr_from_addr_cast(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         addr: u64,\n     ) -> InterpResult<'tcx, Pointer<Option<Self::Provenance>>> {\n         intptrcast::GlobalStateInner::ptr_from_addr_cast(ecx, addr)\n@@ -859,7 +859,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     /// Convert a pointer with provenance into an allocation-offset pair,\n     /// or a `None` with an absolute address if that conversion is not possible.\n     fn ptr_get_alloc(\n-        ecx: &MiriEvalContext<'mir, 'tcx>,\n+        ecx: &MiriInterpCx<'mir, 'tcx>,\n         ptr: Pointer<Self::Provenance>,\n     ) -> Option<(AllocId, Size, Self::ProvenanceExtra)> {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);"}, {"sha": "a0ef7fcad16dcca5843aff2791d80848985621db", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -14,7 +14,7 @@ pub trait EvalContextExt<'tcx> {\n     ) -> InterpResult<'tcx, (Scalar<Provenance>, bool, Ty<'tcx>)>;\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriInterpCx<'mir, 'tcx> {\n     fn binary_ptr_op(\n         &self,\n         bin_op: mir::BinOp,"}, {"sha": "15987eee537fd72372cab58e2c654ab206631c9e", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -5,8 +5,8 @@ use rustc_middle::ty::{self, Instance};\n use rustc_span::{BytePos, Loc, Symbol};\n use rustc_target::{abi::Size, spec::abi::Abi};\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn handle_miri_backtrace_size(\n         &mut self,\n         abi: Abi,"}, {"sha": "8bf6d24f85f31a1407b765b1d34b4e8aacb5ac59", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -27,8 +27,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "638c18934bd67bf2dc0322923eb22ad386245d85", "filename": "src/shims/env.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -38,7 +38,7 @@ pub struct EnvVars<'tcx> {\n \n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n-        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n+        ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,\n         config: &MiriConfig,\n     ) -> InterpResult<'tcx> {\n         let target_os = ecx.tcx.sess.target.os.as_ref();\n@@ -74,7 +74,7 @@ impl<'tcx> EnvVars<'tcx> {\n     }\n \n     pub(crate) fn cleanup<'mir>(\n-        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n+        ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,\n     ) -> InterpResult<'tcx> {\n         // Deallocate individual env vars.\n         let env_vars = mem::take(&mut ecx.machine.env_vars.map);\n@@ -92,7 +92,7 @@ impl<'tcx> EnvVars<'tcx> {\n fn alloc_env_var_as_c_str<'mir, 'tcx>(\n     name: &OsStr,\n     value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n+    ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,\n ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n@@ -103,16 +103,16 @@ fn alloc_env_var_as_c_str<'mir, 'tcx>(\n fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     name: &OsStr,\n     value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n+    ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,\n ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n     let mut name_osstring = name.to_os_string();\n     name_osstring.push(\"=\");\n     name_osstring.push(value);\n     ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Runtime.into())\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn getenv(\n         &mut self,\n         name_op: &OpTy<'tcx, Provenance>,"}, {"sha": "0813554e9d24e851a47bba681b9b654a686b2cb6", "filename": "src/shims/ffi_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fffi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fffi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fffi_support.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -7,9 +7,9 @@ use rustc_target::abi::HasDataLayout;\n \n use crate::*;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n \n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Extract the scalar value from the result of reading a scalar from the machine,\n     /// and convert it to a `CArg`.\n     fn scalar_to_carg("}, {"sha": "6d052083d370c88740bf3a16bc952b15644eeed7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -38,8 +38,8 @@ pub enum EmulateByNameResult<'mir, 'tcx> {\n     NotSupported,\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Returns the minimum alignment for the target architecture for allocations of the given size.\n     fn min_align(&self, size: u64, kind: MiriMemoryKind) -> Align {\n         let this = self.eval_context_ref();\n@@ -334,7 +334,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn emulate_allocator(\n         &mut self,\n         symbol: Symbol,\n-        default: impl FnOnce(&mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx>,\n+        default: impl FnOnce(&mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx>,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n "}, {"sha": "50f69bdca363197f4517bdf48742bc48fab025ac", "filename": "src/shims/intrinsics/atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fintrinsics%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fintrinsics%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fatomic.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -11,8 +11,8 @@ pub enum AtomicOp {\n     Min,\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Calls the atomic intrinsic `intrinsic`; the `atomic_` prefix has already been removed.\n     fn emulate_atomic_intrinsic(\n         &mut self,\n@@ -119,8 +119,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {}\n-trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for MiriInterpCx<'mir, 'tcx> {}\n+trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n     fn atomic_load(\n         &mut self,\n         args: &[OpTy<'tcx, Provenance>],"}, {"sha": "b85c799e2da66082002dd8ad70e3bf2190db962f", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -18,8 +18,8 @@ use atomic::EvalContextExt as _;\n use helpers::check_arg_count;\n use simd::EvalContextExt as _;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_intrinsic(\n         &mut self,\n         instance: ty::Instance<'tcx>,"}, {"sha": "163d185f66f3a1f4fc54fc635bfb16d9642defbd", "filename": "src/shims/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fsimd.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -6,8 +6,8 @@ use rustc_target::abi::{Endian, HasDataLayout, Size};\n use crate::*;\n use helpers::check_arg_count;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Calls the simd intrinsic `intrinsic`; the `simd_` prefix has already been removed.\n     fn emulate_simd_intrinsic(\n         &mut self,"}, {"sha": "93083b486bfbf742b3f6a713bd282455e06f9826", "filename": "src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -24,8 +24,8 @@ use rustc_target::spec::abi::Abi;\n use crate::*;\n use helpers::check_arg_count;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn find_mir_or_eval_fn(\n         &mut self,\n         instance: ty::Instance<'tcx>,"}, {"sha": "407dab970ad7dcdbcac28652f0aab4df58b96ae1", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -46,8 +46,8 @@ pub fn bytes_to_os_str<'a, 'tcx>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsSt\n     Ok(OsStr::new(s))\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n     fn read_os_str_from_c_str<'a>("}, {"sha": "2e8245acf4a68daf2a12e3a0a64e7e049b78f5c5", "filename": "src/shims/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -35,8 +35,8 @@ pub struct CatchUnwindData<'tcx> {\n     ret: mir::BasicBlock,\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Handles the special `miri_start_panic` intrinsic, which is called\n     /// by libpanic_unwind to delegate the actual unwinding process to Miri.\n     fn handle_miri_start_panic("}, {"sha": "24fe52453939653720cf1286ae286f80829b85ef", "filename": "src/shims/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -8,8 +8,8 @@ pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Du\n         .map_err(|_| err_unsup_format!(\"times before the Unix epoch are not supported\").into())\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn clock_gettime(\n         &mut self,\n         clk_id_op: &OpTy<'tcx, Provenance>,"}, {"sha": "d93d6a16a0736fe87883ef739895ddcd79e96dfb", "filename": "src/shims/tls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -241,8 +241,8 @@ impl<'tcx> TlsData<'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Schedule TLS destructors for Windows.\n     /// On windows, TLS destructors are managed by std.\n     fn schedule_windows_tls_dtors(&mut self) -> InterpResult<'tcx> {\n@@ -346,8 +346,8 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Schedule an active thread's TLS destructor to run on the active thread.\n     /// Note that this function does not run the destructors itself, it just\n     /// schedules them one by one each time it is called and reenables the"}, {"sha": "4cb78d4dabdcfd910cf9af0d5102448db9551fba", "filename": "src/shims/unix/android/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fandroid%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fandroid%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fandroid%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -21,8 +21,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "756aed369f15b2c2042d9286f157c91fd6ed2085", "filename": "src/shims/unix/android/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fandroid%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fandroid%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fandroid%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -4,9 +4,9 @@ use rustc_target::spec::abi::Abi;\n use crate::*;\n use shims::foreign_items::EmulateByNameResult;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n \n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: Symbol,"}, {"sha": "8bc19d18f2b29858b0851ab1c819af10ffb5d0c8", "filename": "src/shims/unix/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -29,8 +29,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "153e5852dcc882524391fc2a8745e89880906a5d", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -13,8 +13,8 @@ use shims::unix::fs::EvalContextExt as _;\n use shims::unix::sync::EvalContextExt as _;\n use shims::unix::thread::EvalContextExt as _;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: Symbol,\n@@ -228,7 +228,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // FIXME: Which of these are POSIX, and which are GNU/Linux?\n                 // At least the names seem to all also exist on macOS.\n-                let sysconfs: &[(&str, fn(&MiriEvalContext<'_, '_>) -> Scalar<Provenance>)] = &[\n+                let sysconfs: &[(&str, fn(&MiriInterpCx<'_, '_>) -> Scalar<Provenance>)] = &[\n                     (\"_SC_PAGESIZE\", |this| Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n                     (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n                     (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),"}, {"sha": "d759ffb8994b7e7bfb7c5d17e9bc54c1313a6ac6", "filename": "src/shims/unix/freebsd/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -14,8 +14,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "70798f98174533c4886b800a63157de32ce8b4a4", "filename": "src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -5,9 +5,9 @@ use crate::*;\n use shims::foreign_items::EmulateByNameResult;\n use shims::unix::thread::EvalContextExt as _;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n \n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: Symbol,"}, {"sha": "edeb2001f93a00bd034ee809a9913e038e6a01ff", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -304,8 +304,8 @@ impl FileHandler {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn macos_stat_write_buf(\n         &mut self,\n         metadata: FileMetadata,\n@@ -478,8 +478,8 @@ fn maybe_sync_file(\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn open(&mut self, args: &[OpTy<'tcx, Provenance>]) -> InterpResult<'tcx, i32> {\n         if args.len() < 2 {\n             throw_ub_format!(\n@@ -1892,7 +1892,7 @@ struct FileMetadata {\n \n impl FileMetadata {\n     fn from_path<'tcx, 'mir>(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         path: &Path,\n         follow_symlink: bool,\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n@@ -1903,7 +1903,7 @@ impl FileMetadata {\n     }\n \n     fn from_fd<'tcx, 'mir>(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         fd: i32,\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let option = ecx.machine.file_handler.handles.get(&fd);\n@@ -1917,7 +1917,7 @@ impl FileMetadata {\n     }\n \n     fn from_meta<'tcx, 'mir>(\n-        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        ecx: &mut MiriInterpCx<'mir, 'tcx>,\n         metadata: Result<std::fs::Metadata, std::io::Error>,\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let metadata = match metadata {"}, {"sha": "a96c14c142b25a42ee0821f4ea1ca70bfeace650", "filename": "src/shims/unix/linux/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -18,8 +18,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "5d000f9d121d48a75e8b262ae325cd11648c0a67", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -8,8 +8,8 @@ use shims::unix::linux::sync::futex;\n use shims::unix::sync::EvalContextExt as _;\n use shims::unix::thread::EvalContextExt as _;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: Symbol,\n@@ -167,7 +167,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n // Shims the linux `getrandom` syscall.\n fn getrandom<'tcx>(\n-    this: &mut MiriEvalContext<'_, 'tcx>,\n+    this: &mut MiriInterpCx<'_, 'tcx>,\n     ptr: &OpTy<'tcx, Provenance>,\n     len: &OpTy<'tcx, Provenance>,\n     flags: &OpTy<'tcx, Provenance>,"}, {"sha": "5a6ce28d25c9f439873ab99eccd5552bf2b314a7", "filename": "src/shims/unix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -6,7 +6,7 @@ use std::time::SystemTime;\n /// Implementation of the SYS_futex syscall.\n /// `args` is the arguments *after* the syscall number.\n pub fn futex<'tcx>(\n-    this: &mut MiriEvalContext<'_, 'tcx>,\n+    this: &mut MiriInterpCx<'_, 'tcx>,\n     args: &[OpTy<'tcx, Provenance>],\n     dest: &PlaceTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx> {"}, {"sha": "18804b45efca91cc848434e40b95f4d5d4910e47", "filename": "src/shims/unix/macos/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -22,8 +22,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "38d791fba98a4debc99105ccf4ac83d00331121b", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -6,8 +6,8 @@ use shims::foreign_items::EmulateByNameResult;\n use shims::unix::fs::EvalContextExt as _;\n use shims::unix::thread::EvalContextExt as _;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: Symbol,"}, {"sha": "2e972a27ffebe428441334c6309f0a3b455355c8", "filename": "src/shims/unix/sync.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fsync.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -20,14 +20,14 @@ use crate::*;\n const PTHREAD_MUTEX_NORMAL_FLAG: i32 = 0x8000000;\n \n fn is_mutex_kind_default<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     kind: Scalar<Provenance>,\n ) -> InterpResult<'tcx, bool> {\n     Ok(kind == ecx.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?)\n }\n \n fn is_mutex_kind_normal<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     kind: Scalar<Provenance>,\n ) -> InterpResult<'tcx, bool> {\n     let kind = kind.to_i32()?;\n@@ -36,14 +36,14 @@ fn is_mutex_kind_normal<'mir, 'tcx: 'mir>(\n }\n \n fn mutexattr_get_kind<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     attr_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     ecx.read_scalar_at_offset(attr_op, 0, ecx.machine.layouts.i32)\n }\n \n fn mutexattr_set_kind<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     attr_op: &OpTy<'tcx, Provenance>,\n     kind: impl Into<Scalar<Provenance>>,\n ) -> InterpResult<'tcx, ()> {\n@@ -60,7 +60,7 @@ fn mutexattr_set_kind<'mir, 'tcx: 'mir>(\n // (the kind has to be at its offset for compatibility with static initializer macros)\n \n fn mutex_get_kind<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     mutex_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     let offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n@@ -73,7 +73,7 @@ fn mutex_get_kind<'mir, 'tcx: 'mir>(\n }\n \n fn mutex_set_kind<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     mutex_op: &OpTy<'tcx, Provenance>,\n     kind: impl Into<Scalar<Provenance>>,\n ) -> InterpResult<'tcx, ()> {\n@@ -88,14 +88,14 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n }\n \n fn mutex_get_id<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     mutex_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     ecx.read_scalar_at_offset_atomic(mutex_op, 4, ecx.machine.layouts.u32, AtomicReadOrd::Relaxed)\n }\n \n fn mutex_set_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     mutex_op: &OpTy<'tcx, Provenance>,\n     id: impl Into<Scalar<Provenance>>,\n ) -> InterpResult<'tcx, ()> {\n@@ -109,7 +109,7 @@ fn mutex_set_id<'mir, 'tcx: 'mir>(\n }\n \n fn mutex_get_or_create_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     mutex_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, MutexId> {\n     let value_place = ecx.deref_operand_and_offset(mutex_op, 4, ecx.machine.layouts.u32)?;\n@@ -143,14 +143,14 @@ fn mutex_get_or_create_id<'mir, 'tcx: 'mir>(\n // bytes 4-7: rwlock id as u32 or 0 if id is not assigned yet.\n \n fn rwlock_get_id<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     rwlock_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     ecx.read_scalar_at_offset_atomic(rwlock_op, 4, ecx.machine.layouts.u32, AtomicReadOrd::Relaxed)\n }\n \n fn rwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     rwlock_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, RwLockId> {\n     let value_place = ecx.deref_operand_and_offset(rwlock_op, 4, ecx.machine.layouts.u32)?;\n@@ -183,14 +183,14 @@ fn rwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n // (e.g. CLOCK_REALTIME).\n \n fn condattr_get_clock_id<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     attr_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     ecx.read_scalar_at_offset(attr_op, 0, ecx.machine.layouts.i32)\n }\n \n fn condattr_set_clock_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     attr_op: &OpTy<'tcx, Provenance>,\n     clock_id: impl Into<Scalar<Provenance>>,\n ) -> InterpResult<'tcx, ()> {\n@@ -212,14 +212,14 @@ fn condattr_set_clock_id<'mir, 'tcx: 'mir>(\n // bytes 8-11: the clock id constant as i32\n \n fn cond_get_id<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     cond_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     ecx.read_scalar_at_offset_atomic(cond_op, 4, ecx.machine.layouts.u32, AtomicReadOrd::Relaxed)\n }\n \n fn cond_set_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     cond_op: &OpTy<'tcx, Provenance>,\n     id: impl Into<Scalar<Provenance>>,\n ) -> InterpResult<'tcx, ()> {\n@@ -233,7 +233,7 @@ fn cond_set_id<'mir, 'tcx: 'mir>(\n }\n \n fn cond_get_or_create_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     cond_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, CondvarId> {\n     let value_place = ecx.deref_operand_and_offset(cond_op, 4, ecx.machine.layouts.u32)?;\n@@ -260,14 +260,14 @@ fn cond_get_or_create_id<'mir, 'tcx: 'mir>(\n }\n \n fn cond_get_clock_id<'mir, 'tcx: 'mir>(\n-    ecx: &MiriEvalContext<'mir, 'tcx>,\n+    ecx: &MiriInterpCx<'mir, 'tcx>,\n     cond_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, Scalar<Provenance>> {\n     ecx.read_scalar_at_offset(cond_op, 8, ecx.machine.layouts.i32)\n }\n \n fn cond_set_clock_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     cond_op: &OpTy<'tcx, Provenance>,\n     clock_id: impl Into<Scalar<Provenance>>,\n ) -> InterpResult<'tcx, ()> {\n@@ -282,7 +282,7 @@ fn cond_set_clock_id<'mir, 'tcx: 'mir>(\n /// Try to reacquire the mutex associated with the condition variable after we\n /// were signaled.\n fn reacquire_cond_mutex<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     thread: ThreadId,\n     mutex: MutexId,\n ) -> InterpResult<'tcx> {\n@@ -299,7 +299,7 @@ fn reacquire_cond_mutex<'mir, 'tcx: 'mir>(\n /// Reacquire the conditional variable and remove the timeout callback if any\n /// was registered.\n fn post_cond_signal<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     thread: ThreadId,\n     mutex: MutexId,\n ) -> InterpResult<'tcx> {\n@@ -313,7 +313,7 @@ fn post_cond_signal<'mir, 'tcx: 'mir>(\n /// Release the mutex associated with the condition variable because we are\n /// entering the waiting state.\n fn release_cond_mutex_and_block<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     active_thread: ThreadId,\n     mutex: MutexId,\n ) -> InterpResult<'tcx> {\n@@ -328,8 +328,8 @@ fn release_cond_mutex_and_block<'mir, 'tcx: 'mir>(\n     Ok(())\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn pthread_mutexattr_init(\n         &mut self,\n         attr_op: &OpTy<'tcx, Provenance>,"}, {"sha": "59474d8d10ad7b058e207536356b8b5a3f623ab0", "filename": "src/shims/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fthread.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -2,8 +2,8 @@ use crate::*;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_target::spec::abi::Abi;\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn pthread_create(\n         &mut self,\n         thread: &OpTy<'tcx, Provenance>,"}, {"sha": "41b9473f81fef6dbdc01f2b07b75106afb044fb2", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -27,8 +27,8 @@ impl Dlsym {\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn call_dlsym(\n         &mut self,\n         dlsym: Dlsym,"}, {"sha": "53ab97b255e56f8644e29827b05508a52a99d288", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -12,8 +12,8 @@ use shims::windows::thread::EvalContextExt as _;\n \n use smallvec::SmallVec;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n         link_name: Symbol,"}, {"sha": "5b22c4bd73584806cf28ff3ff93735c7d342bbcf", "filename": "src/shims/windows/handle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fhandle.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -145,10 +145,10 @@ impl Handle {\n     }\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n \n #[allow(non_snake_case)]\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn invalid_handle(&mut self, function_name: &str) -> InterpResult<'tcx, !> {\n         throw_machine_stop!(TerminationInfo::Abort(format!(\n             \"invalid handle passed to `{function_name}`\""}, {"sha": "dc1052a824defa883266918b0cc893d35eedc2e1", "filename": "src/shims/windows/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fsync.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -4,7 +4,7 @@ use crate::*;\n // We use the first 4 bytes to store the RwLockId.\n \n fn srwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    ecx: &mut MiriInterpCx<'mir, 'tcx>,\n     lock_op: &OpTy<'tcx, Provenance>,\n ) -> InterpResult<'tcx, RwLockId> {\n     let value_place = ecx.deref_operand_and_offset(lock_op, 0, ecx.machine.layouts.u32)?;\n@@ -30,8 +30,8 @@ fn srwlock_get_or_create_id<'mir, 'tcx: 'mir>(\n     })\n }\n \n-impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     #[allow(non_snake_case)]\n     fn AcquireSRWLockExclusive(&mut self, lock_op: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();"}, {"sha": "5ed0cb92f9e347acbb78a2259c392d131739c0d8", "filename": "src/shims/windows/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fshims%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fthread.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -4,10 +4,10 @@ use rustc_target::spec::abi::Abi;\n use crate::*;\n use shims::windows::handle::{EvalContextExt as _, Handle, PseudoHandle};\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n \n #[allow(non_snake_case)]\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn CreateThread(\n         &mut self,\n         security_op: &OpTy<'tcx, Provenance>,"}, {"sha": "9b9fd5655aa95052c229fbbf8185325f202a4275", "filename": "src/stacked_borrows/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fmod.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -178,7 +178,7 @@ impl GlobalStateInner {\n         id\n     }\n \n-    pub fn new_frame(&mut self, machine: &Evaluator<'_, '_>) -> FrameExtra {\n+    pub fn new_frame(&mut self, machine: &MiriMachine<'_, '_>) -> FrameExtra {\n         let call_id = self.next_call_id;\n         trace!(\"new_frame: Assigning call ID {}\", call_id);\n         if self.tracked_call_ids.contains(&call_id) {\n@@ -199,7 +199,7 @@ impl GlobalStateInner {\n         }\n     }\n \n-    pub fn base_ptr_tag(&mut self, id: AllocId, machine: &Evaluator<'_, '_>) -> SbTag {\n+    pub fn base_ptr_tag(&mut self, id: AllocId, machine: &MiriMachine<'_, '_>) -> SbTag {\n         self.base_ptr_tags.get(&id).copied().unwrap_or_else(|| {\n             let tag = self.new_ptr();\n             if self.tracked_pointer_tags.contains(&tag) {\n@@ -651,10 +651,10 @@ impl Stacks {\n /// Retagging/reborrowing.  There is some policy in here, such as which permissions\n /// to grant for which references, and when to add protectors.\n impl<'mir: 'ecx, 'tcx: 'mir, 'ecx> EvalContextPrivExt<'mir, 'tcx, 'ecx>\n-    for crate::MiriEvalContext<'mir, 'tcx>\n+    for crate::MiriInterpCx<'mir, 'tcx>\n {\n }\n-trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Returns the `AllocId` the reborrow was done in, if some actual borrow stack manipulation\n     /// happened.\n     fn reborrow(\n@@ -669,7 +669,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriEvalContextEx\n         let this = self.eval_context_mut();\n \n         // It is crucial that this gets called on all code paths, to ensure we track tag creation.\n-        let log_creation = |this: &MiriEvalContext<'mir, 'tcx>,\n+        let log_creation = |this: &MiriInterpCx<'mir, 'tcx>,\n                             loc: Option<(AllocId, Size, ProvenanceExtra)>| // alloc_id, base_offset, orig_tag\n          -> InterpResult<'tcx> {\n             let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n@@ -919,8 +919,8 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriEvalContextEx\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn retag(&mut self, kind: RetagKind, place: &PlaceTy<'tcx, Provenance>) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let retag_fields = this.machine.stacked_borrows.as_mut().unwrap().get_mut().retag_fields;\n@@ -956,7 +956,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // The actual visitor.\n         struct RetagVisitor<'ecx, 'mir, 'tcx> {\n-            ecx: &'ecx mut MiriEvalContext<'mir, 'tcx>,\n+            ecx: &'ecx mut MiriInterpCx<'mir, 'tcx>,\n             kind: RetagKind,\n             retag_cause: RetagCause,\n             retag_fields: bool,\n@@ -976,13 +976,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Ok(())\n             }\n         }\n-        impl<'ecx, 'mir, 'tcx> MutValueVisitor<'mir, 'tcx, Evaluator<'mir, 'tcx>>\n+        impl<'ecx, 'mir, 'tcx> MutValueVisitor<'mir, 'tcx, MiriMachine<'mir, 'tcx>>\n             for RetagVisitor<'ecx, 'mir, 'tcx>\n         {\n             type V = PlaceTy<'tcx, Provenance>;\n \n             #[inline(always)]\n-            fn ecx(&mut self) -> &mut MiriEvalContext<'mir, 'tcx> {\n+            fn ecx(&mut self) -> &mut MiriInterpCx<'mir, 'tcx> {\n                 self.ecx\n             }\n "}, {"sha": "e20a86711478ae076cb1a261337320fc67b7c3e8", "filename": "src/tag_gc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Ftag_gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca1f85a2d2c81866250373b912b1a5938517d24/src%2Ftag_gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftag_gc.rs?ref=5ca1f85a2d2c81866250373b912b1a5938517d24", "patch": "@@ -1,8 +1,8 @@\n use crate::*;\n use rustc_data_structures::fx::FxHashSet;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n     fn garbage_collect_tags(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         // No reason to do anything at all if stacked borrows is off."}]}