{"sha": "a17a132617dd484b13196a1e70ef87a0b762d3ed", "node_id": "C_kwDOAAsO6NoAKGExN2ExMzI2MTdkZDQ4NGIxMzE5NmExZTcwZWY4N2EwYjc2MmQzZWQ", "commit": {"author": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-14T16:15:00Z"}, "committer": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-14T16:15:00Z"}, "message": "Narrow add_missing_match_arms assist range", "tree": {"sha": "975936d14fa9dbbaa368dab1248d061601d2528b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975936d14fa9dbbaa368dab1248d061601d2528b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17a132617dd484b13196a1e70ef87a0b762d3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a132617dd484b13196a1e70ef87a0b762d3ed", "html_url": "https://github.com/rust-lang/rust/commit/a17a132617dd484b13196a1e70ef87a0b762d3ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17a132617dd484b13196a1e70ef87a0b762d3ed/comments", "author": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a871da36937f427624883860eafb580d6349f8da", "url": "https://api.github.com/repos/rust-lang/rust/commits/a871da36937f427624883860eafb580d6349f8da", "html_url": "https://github.com/rust-lang/rust/commit/a871da36937f427624883860eafb580d6349f8da"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "1ad5daeff071af83f8edcf8eb713cd3607785aba", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a17a132617dd484b13196a1e70ef87a0b762d3ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17a132617dd484b13196a1e70ef87a0b762d3ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=a17a132617dd484b13196a1e70ef87a0b762d3ed", "patch": "@@ -5,6 +5,7 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n+use syntax::TextRange;\n use syntax::ast::{self, make, AstNode, HasName, MatchArm, Pat};\n \n use crate::{\n@@ -40,6 +41,16 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     let match_expr = ctx.find_node_at_offset_with_descend::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n \n+    let available_range = TextRange::new(\n+        match_expr.syntax().text_range().start(),\n+        match_arm_list.syntax().text_range().start(),\n+    );\n+\n+    let cursor_in_range = available_range.contains_range(ctx.frange.range);\n+    if !cursor_in_range {\n+        return None;\n+    }\n+\n     let expr = match_expr.expr()?;\n \n     let mut arms: Vec<MatchArm> = match_arm_list.arms().collect();\n@@ -121,11 +132,10 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         return None;\n     }\n \n-    let target = ctx.sema.original_range(match_expr.syntax()).range;\n     acc.add(\n         AssistId(\"add_missing_match_arms\", AssistKind::QuickFix),\n         \"Fill match arms\",\n-        target,\n+        available_range,\n         |builder| {\n             let new_match_arm_list = match_arm_list.clone_for_update();\n             let missing_arms = missing_pats\n@@ -306,6 +316,44 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn not_applicable_outside_of_range_left() {\n+        check_assist_not_applicable(\n+            add_missing_match_arms,\n+        r#\"\n+enum A {\n+    X,\n+    Y\n+}\n+\n+fn foo(a: A) {\n+    $0match a {\n+        A::X => { }\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_outside_of_range_right() {\n+        check_assist_not_applicable(\n+            add_missing_match_arms,\n+        r#\"\n+enum A {\n+    X,\n+    Y\n+}\n+\n+fn foo(a: A) {\n+    match a {$0\n+        A::X => { }\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n     #[test]\n     fn all_boolean_match_arms_provided() {\n         check_assist_not_applicable("}]}