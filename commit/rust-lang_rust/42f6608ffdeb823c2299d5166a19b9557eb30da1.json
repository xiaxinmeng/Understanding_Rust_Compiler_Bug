{"sha": "42f6608ffdeb823c2299d5166a19b9557eb30da1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjY2MDhmZmRlYjgyM2MyMjk5ZDUxNjZhMTliOTU1N2ViMzBkYTE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T15:37:39Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T16:30:36Z"}, "message": "Add visit_ty_params to visit.rs\n\nAnd use it to make typechecking of bounds less error-prone.", "tree": {"sha": "6dc39e9b17ed2f791e4e09a69a597f358a33ddca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc39e9b17ed2f791e4e09a69a597f358a33ddca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f6608ffdeb823c2299d5166a19b9557eb30da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f6608ffdeb823c2299d5166a19b9557eb30da1", "html_url": "https://github.com/rust-lang/rust/commit/42f6608ffdeb823c2299d5166a19b9557eb30da1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f6608ffdeb823c2299d5166a19b9557eb30da1/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11d20711335111073826d7b553ca4839c590a04", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11d20711335111073826d7b553ca4839c590a04", "html_url": "https://github.com/rust-lang/rust/commit/e11d20711335111073826d7b553ca4839c590a04"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "2e2a56d4ff551895a5d5e7b7b0170274ac0180e0", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/42f6608ffdeb823c2299d5166a19b9557eb30da1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f6608ffdeb823c2299d5166a19b9557eb30da1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=42f6608ffdeb823c2299d5166a19b9557eb30da1", "patch": "@@ -1514,7 +1514,7 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n               ty::bound_iface(t) {\n                 let (iid, tps) = alt ty::struct(tcx, t) {\n                     ty::ty_iface(i, tps) { (i, tps) }\n-                    _ { ret none; }\n+                    _ { cont; }\n                 };\n                 let ifce_methods = ty::iface_methods(tcx, iid);\n                 alt vec::position_pred(*ifce_methods, {|m| m.ident == name}) {\n@@ -2765,15 +2765,12 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     alt it.node {\n       ast::item_const(_, e) { check_const(ccx, it.span, e, it.id); }\n       ast::item_fn(decl, tps, body) {\n-        check_ty_params(ccx, tps);\n         check_fn(ccx, ast::proto_bare, decl, body, it.id, none);\n       }\n       ast::item_res(decl, tps, body, dtor_id, _) {\n-        check_ty_params(ccx, tps);\n         check_fn(ccx, ast::proto_bare, decl, body, dtor_id, none);\n       }\n       ast::item_obj(ob, tps, _) {\n-        check_ty_params(ccx, tps);\n         // We're entering an object, so gather up the info we need.\n         ccx.self_infos += [self_obj(ob.fields,\n                                     ccx.tcx.tcache.get(local_def(it.id)).ty)];\n@@ -2783,10 +2780,8 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         vec::pop(ccx.self_infos);\n       }\n       ast::item_impl(tps, ifce, ty, ms) {\n-        check_ty_params(ccx, tps);\n         ccx.self_infos += [self_impl(ast_ty_to_ty(ccx.tcx, m_check, ty))];\n         let my_methods = vec::map(ms, {|m|\n-            check_ty_params(ccx, m.tps);\n             check_method(ccx, m);\n             ty_of_method(ccx.tcx, m_check, m)\n         });\n@@ -2821,20 +2816,10 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n           _ {}\n         }\n       }\n-      ast::item_iface(tps, _) | ast::item_ty(_, tps) | ast::item_tag(_, tps) {\n-        check_ty_params(ccx, tps);\n-      }\n       _ {/* nothing to do */ }\n     }\n }\n \n-fn check_native_item(ccx: @crate_ctxt, it: @ast::native_item) {\n-    alt it.node {\n-      ast::native_item_fn(_, tps) { check_ty_params(ccx, tps); }\n-      _ {}\n-    }\n-}\n-\n fn check_ty_params(ccx: @crate_ctxt, tps: [ast::ty_param]) {\n     for tp in tps {\n         let i = 0u;\n@@ -3100,11 +3085,11 @@ fn check_crate(tcx: ty::ctxt, impl_map: resolve::impl_map,\n                 method_map: std::map::new_int_hash(),\n                 dict_map: std::map::new_int_hash(),\n                 tcx: tcx};\n-    let visit =\n-        visit::mk_simple_visitor(@{visit_item: bind check_item(ccx, _),\n-                                   visit_native_item:\n-                                       bind check_native_item(ccx, _)\n-                                   with *visit::default_simple_visitor()});\n+    let visit = visit::mk_simple_visitor(@{\n+        visit_item: bind check_item(ccx, _),\n+        visit_ty_params: bind check_ty_params(ccx, _)\n+        with *visit::default_simple_visitor()\n+    });\n     visit::visit_crate(*crate, (), visit);\n     check_for_main_fn(tcx, crate);\n     tcx.sess.abort_if_errors();"}, {"sha": "1e5b88e1aa65118294e7fd6694f9715a0a9e7bda", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42f6608ffdeb823c2299d5166a19b9557eb30da1/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f6608ffdeb823c2299d5166a19b9557eb30da1/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=42f6608ffdeb823c2299d5166a19b9557eb30da1", "patch": "@@ -52,6 +52,7 @@ type visitor<E> =\n       visit_decl: fn@(@decl, E, vt<E>),\n       visit_expr: fn@(@expr, E, vt<E>),\n       visit_ty: fn@(@ty, E, vt<E>),\n+      visit_ty_params: fn@([ty_param], E, vt<E>),\n       visit_constr: fn@(@path, span, node_id, E, vt<E>),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id, E, vt<E>)};\n \n@@ -68,6 +69,7 @@ fn default_visitor<E>() -> visitor<E> {\n           visit_decl: bind visit_decl::<E>(_, _, _),\n           visit_expr: bind visit_expr::<E>(_, _, _),\n           visit_ty: bind skip_ty::<E>(_, _, _),\n+          visit_ty_params: bind visit_ty_params::<E>(_, _, _),\n           visit_constr: bind visit_constr::<E>(_, _, _, _, _),\n           visit_fn: bind visit_fn::<E>(_, _, _, _, _, _, _)};\n }\n@@ -113,27 +115,27 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n         for vi: @view_item in nm.view_items { v.visit_view_item(vi, e, v); }\n         for ni: @native_item in nm.items { v.visit_native_item(ni, e, v); }\n       }\n-      item_ty(t, tps) { v.visit_ty(t, e, v); visit_ty_params(tps, e, v); }\n+      item_ty(t, tps) { v.visit_ty(t, e, v); v.visit_ty_params(tps, e, v); }\n       item_res(decl, tps, body, dtor_id, _) {\n         v.visit_fn(fk_res(i.ident, tps), decl, body, i.span,\n                    dtor_id, e, v);\n       }\n       item_tag(variants, tps) {\n-        visit_ty_params(tps, e, v);\n+        v.visit_ty_params(tps, e, v);\n         for vr: variant in variants {\n             for va: variant_arg in vr.node.args { v.visit_ty(va.ty, e, v); }\n         }\n       }\n       item_obj(ob, tps, _) {\n-        visit_ty_params(tps, e, v);\n+        v.visit_ty_params(tps, e, v);\n         for f: obj_field in ob.fields { v.visit_ty(f.ty, e, v); }\n         for m: @method in ob.methods {\n             v.visit_fn(fk_method(m.ident, m.tps), m.decl, m.body, m.span,\n                        m.id, e, v);\n         }\n       }\n       item_impl(tps, ifce, ty, methods) {\n-        visit_ty_params(tps, e, v);\n+        v.visit_ty_params(tps, e, v);\n         alt ifce { some(ty) { v.visit_ty(ty, e, v); } _ {} }\n         v.visit_ty(ty, e, v);\n         for m in methods {\n@@ -142,7 +144,7 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n         }\n       }\n       item_iface(tps, methods) {\n-        visit_ty_params(tps, e, v);\n+        v.visit_ty_params(tps, e, v);\n         for m in methods {\n             for a in m.decl.inputs { v.visit_ty(a.ty, e, v); }\n             v.visit_ty(m.decl.output, e, v);\n@@ -217,7 +219,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n fn visit_native_item<E>(ni: @native_item, e: E, v: vt<E>) {\n     alt ni.node {\n       native_item_fn(fd, tps) {\n-        visit_ty_params(tps, e, v);\n+        v.visit_ty_params(tps, e, v);\n         visit_fn_decl(fd, e, v);\n       }\n       native_item_ty. { }\n@@ -246,7 +248,7 @@ fn visit_fn_decl<E>(fd: fn_decl, e: E, v: vt<E>) {\n fn visit_fn<E>(fk: fn_kind, decl: fn_decl, body: blk, _sp: span,\n                _id: node_id, e: E, v: vt<E>) {\n     visit_fn_decl(decl, e, v);\n-    visit_ty_params(tps_of_fn(fk), e, v);\n+    v.visit_ty_params(tps_of_fn(fk), e, v);\n     v.visit_block(body, e, v);\n }\n \n@@ -414,6 +416,7 @@ type simple_visitor =\n       visit_decl: fn@(@decl),\n       visit_expr: fn@(@expr),\n       visit_ty: fn@(@ty),\n+      visit_ty_params: fn@([ty_param]),\n       visit_constr: fn@(@path, span, node_id),\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id)};\n \n@@ -432,6 +435,7 @@ fn default_simple_visitor() -> simple_visitor {\n           visit_decl: fn(_d: @decl) { },\n           visit_expr: fn(_e: @expr) { },\n           visit_ty: simple_ignore_ty,\n+          visit_ty_params: fn(_ps: [ty_param]) {},\n           visit_constr: fn(_p: @path, _sp: span, _id: node_id) { },\n           visit_fn: fn(_fk: fn_kind, _d: fn_decl, _b: blk, _sp: span,\n                        _id: node_id) { }\n@@ -488,6 +492,10 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(ty);\n         visit_ty(ty, e, v);\n     }\n+    fn v_ty_params(f: fn@([ty_param]), ps: [ty_param], &&e: (), v: vt<()>) {\n+        f(ps);\n+        visit_ty_params(ps, e, v);\n+    }\n     fn v_constr(f: fn@(@path, span, node_id), pt: @path, sp: span,\n                 id: node_id, &&e: (), v: vt<()>) {\n         f(pt, sp, id);\n@@ -517,6 +525,7 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n                 visit_decl: bind v_decl(v.visit_decl, _, _, _),\n                 visit_expr: bind v_expr(v.visit_expr, _, _, _),\n                 visit_ty: visit_ty,\n+                visit_ty_params: bind v_ty_params(v.visit_ty_params, _, _, _),\n                 visit_constr: bind v_constr(v.visit_constr, _, _, _, _, _),\n                 visit_fn: bind v_fn(v.visit_fn, _, _, _, _, _, _, _)\n                });"}]}