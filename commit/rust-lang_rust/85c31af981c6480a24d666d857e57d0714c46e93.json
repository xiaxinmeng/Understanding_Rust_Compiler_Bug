{"sha": "85c31af981c6480a24d666d857e57d0714c46e93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzMxYWY5ODFjNjQ4MGEyNGQ2NjZkODU3ZTU3ZDA3MTRjNDZlOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-30T08:49:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-30T08:49:45Z"}, "message": "Auto merge of #34541 - jseyfried:rollup, r=jseyfried\n\nRollup of 5 pull requests\n\n - Successful merges: #34105, #34305, #34512, ~~#34531,~~ #34547", "tree": {"sha": "70ef07054ffb3125668a8294fb6aa5067343c311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ef07054ffb3125668a8294fb6aa5067343c311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c31af981c6480a24d666d857e57d0714c46e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c31af981c6480a24d666d857e57d0714c46e93", "html_url": "https://github.com/rust-lang/rust/commit/85c31af981c6480a24d666d857e57d0714c46e93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c31af981c6480a24d666d857e57d0714c46e93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "html_url": "https://github.com/rust-lang/rust/commit/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4"}, {"sha": "a8751e077f32c4da4787986d9a93ca7645e7df95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8751e077f32c4da4787986d9a93ca7645e7df95", "html_url": "https://github.com/rust-lang/rust/commit/a8751e077f32c4da4787986d9a93ca7645e7df95"}], "stats": {"total": 93, "additions": 46, "deletions": 47}, "files": [{"sha": "7389b073da13b219bd0367c45e513cce363fd04e", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/configure", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -1726,7 +1726,7 @@ do\n         msg \"configuring LLVM with:\"\n         msg \"$CMAKE_ARGS\"\n \n-        (cd $LLVM_BUILD_DIR && eval \"$CFG_CMAKE\" $CMAKE_ARGS)\n+        (cd $LLVM_BUILD_DIR && eval \"\\\"$CFG_CMAKE\\\"\" $CMAKE_ARGS)\n         need_ok \"LLVM cmake configure failed\"\n     fi\n "}, {"sha": "37dbeb4eae17d6d61f7dad0929e8ae3c9830c72d", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -15,6 +15,7 @@\n use core::clone::Clone;\n use core::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n use core::convert::AsRef;\n+use core::default::Default;\n use core::hash::{Hash, Hasher};\n use core::marker::Sized;\n use core::ops::Deref;\n@@ -248,6 +249,16 @@ impl<'a, B: ?Sized> fmt::Display for Cow<'a, B>\n     }\n }\n \n+#[stable(feature = \"default\", since = \"1.11.0\")]\n+impl<'a, B: ?Sized> Default for Cow<'a, B>\n+    where B: ToOwned,\n+          <B as ToOwned>::Owned: Default\n+{\n+    fn default() -> Cow<'a, B> {\n+        Owned(<B as ToOwned>::Owned::default())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, B: ?Sized> Hash for Cow<'a, B> where B: Hash + ToOwned {\n     #[inline]"}, {"sha": "8894b9732fe89250f32f7ead6c3ab0de0cf60b4d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -432,7 +432,6 @@ pub fn build_impl<'a, 'tcx>(cx: &DocContext,\n     ret.push(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n             unsafety: hir::Unsafety::Normal, // FIXME: this should be decoded\n-            derived: clean::detect_derived(&attrs),\n             provided_trait_methods: provided,\n             trait_: trait_,\n             for_: for_,"}, {"sha": "139dedeb70fdf061cee3dc7dc1ee9277836134a3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -2239,14 +2239,9 @@ pub struct Impl {\n     pub trait_: Option<Type>,\n     pub for_: Type,\n     pub items: Vec<Item>,\n-    pub derived: bool,\n     pub polarity: Option<ImplPolarity>,\n }\n \n-fn detect_derived<M: AttrMetaMethods>(attrs: &[M]) -> bool {\n-    attr::contains_name(attrs, \"automatically_derived\")\n-}\n-\n impl Clean<Vec<Item>> for doctree::Impl {\n     fn clean(&self, cx: &DocContext) -> Vec<Item> {\n         let mut ret = Vec::new();\n@@ -2283,7 +2278,6 @@ impl Clean<Vec<Item>> for doctree::Impl {\n                 trait_: trait_,\n                 for_: self.for_.clean(cx),\n                 items: items,\n-                derived: detect_derived(&self.attrs),\n                 polarity: Some(self.polarity.clean(cx)),\n             }),\n         });"}, {"sha": "9f2b33c0282ed71ec69ed9ff28e57ca3e50f4422", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -399,7 +399,6 @@ fn init_ids() -> HashMap<String, usize> {\n      \"methods\",\n      \"deref-methods\",\n      \"implementations\",\n-     \"derived_implementations\"\n      ].into_iter().map(|id| (String::from(*id), 1)).collect()\n }\n \n@@ -2527,25 +2526,11 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         }\n         write!(w, \"<h2 id='implementations'>Trait \\\n                    Implementations</h2>\")?;\n-        let (derived, manual): (Vec<_>, Vec<&Impl>) = traits.iter().partition(|i| {\n-            i.inner_impl().derived\n-        });\n-        for i in &manual {\n+        for i in &traits {\n             let did = i.trait_did().unwrap();\n             let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n             render_impl(w, cx, i, assoc_link, true, containing_item.stable_since())?;\n         }\n-        if !derived.is_empty() {\n-            write!(w, \"<h3 id='derived_implementations'>\\\n-                           Derived Implementations \\\n-                       </h3>\")?;\n-            for i in &derived {\n-                let did = i.trait_did().unwrap();\n-                let assoc_link = AssocItemLink::GotoSource(did,\n-                                                           &i.inner_impl().provided_trait_methods);\n-                render_impl(w, cx, i, assoc_link, true, containing_item.stable_since())?;\n-            }\n-        }\n     }\n     Ok(())\n }"}, {"sha": "94b71661bc21ec7714611162a27dadabbbc726ca", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -1338,7 +1338,7 @@ impl<'a> State<'a> {\n                 if comma {\n                     try!(self.word_space(\",\"))\n                 }\n-                try!(self.print_lifetime_def(lifetime_def));\n+                try!(self.print_lifetime_bounds(&lifetime_def.lifetime, &lifetime_def.bounds));\n                 comma = true;\n             }\n             try!(word(&mut self.s, \">\"));\n@@ -2749,16 +2749,20 @@ impl<'a> State<'a> {\n         self.print_name(lifetime.name)\n     }\n \n-    pub fn print_lifetime_def(&mut self,\n-                              lifetime: &ast::LifetimeDef)\n-                              -> io::Result<()>\n+    pub fn print_lifetime_bounds(&mut self,\n+                                 lifetime: &ast::Lifetime,\n+                                 bounds: &[ast::Lifetime])\n+                                 -> io::Result<()>\n     {\n-        try!(self.print_lifetime(&lifetime.lifetime));\n-        let mut sep = \":\";\n-        for v in &lifetime.bounds {\n-            try!(word(&mut self.s, sep));\n-            try!(self.print_lifetime(v));\n-            sep = \"+\";\n+        try!(self.print_lifetime(lifetime));\n+        if !bounds.is_empty() {\n+            try!(word(&mut self.s, \": \"));\n+            for (i, bound) in bounds.iter().enumerate() {\n+                if i != 0 {\n+                    try!(word(&mut self.s, \" + \"));\n+                }\n+                try!(self.print_lifetime(bound));\n+            }\n         }\n         Ok(())\n     }\n@@ -2781,8 +2785,8 @@ impl<'a> State<'a> {\n \n         try!(self.commasep(Inconsistent, &ints[..], |s, &idx| {\n             if idx < generics.lifetimes.len() {\n-                let lifetime = &generics.lifetimes[idx];\n-                s.print_lifetime_def(lifetime)\n+                let lifetime_def = &generics.lifetimes[idx];\n+                s.print_lifetime_bounds(&lifetime_def.lifetime, &lifetime_def.bounds)\n             } else {\n                 let idx = idx - generics.lifetimes.len();\n                 let param = &generics.ty_params[idx];\n@@ -2833,16 +2837,7 @@ impl<'a> State<'a> {\n                 ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n                                                                                ref bounds,\n                                                                                ..}) => {\n-                    try!(self.print_lifetime(lifetime));\n-                    try!(word(&mut self.s, \":\"));\n-\n-                    for (i, bound) in bounds.iter().enumerate() {\n-                        try!(self.print_lifetime(bound));\n-\n-                        if i != 0 {\n-                            try!(word(&mut self.s, \":\"));\n-                        }\n-                    }\n+                    try!(self.print_lifetime_bounds(lifetime, bounds));\n                 }\n                 ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n                     try!(self.print_path(path, false, 0));"}, {"sha": "2cc7153b7f5ce57561c1107b3ad82903c180e0db", "filename": "src/test/pretty/lifetime.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Ftest%2Fpretty%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Ftest%2Fpretty%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Flifetime.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+fn f1<'a, 'b, 'c>(_x: &'a u32, _y: &'b u32, _z: &'c u32) where 'c: 'a + 'b { }\n+\n+fn main() { }"}, {"sha": "388064a8be8546cd0078ef0abf0899b00d1c733d", "filename": "src/test/pretty/where-clauses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c31af981c6480a24d666d857e57d0714c46e93/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c31af981c6480a24d666d857e57d0714c46e93/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fwhere-clauses.rs?ref=85c31af981c6480a24d666d857e57d0714c46e93", "patch": "@@ -10,6 +10,6 @@\n \n // pp-exact\n \n-fn f<'a, 'b, T>(t: T) -> isize where T: 'a, 'a:'b, T: Eq { 0 }\n+fn f<'a, 'b, T>(t: T) -> isize where T: 'a, 'a: 'b, T: Eq { 0 }\n \n fn main() { }"}]}