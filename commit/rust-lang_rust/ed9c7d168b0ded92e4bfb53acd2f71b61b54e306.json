{"sha": "ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOWM3ZDE2OGIwZGVkOTJlNGJmYjUzYWNkMmY3MWI2MWI1NGUzMDY=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-06T21:00:45Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:23:32Z"}, "message": "Report that we do not support foreign thread local statics.", "tree": {"sha": "7cf5d8217bb3869aa85251ba371da9827c40efa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cf5d8217bb3869aa85251ba371da9827c40efa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "html_url": "https://github.com/rust-lang/rust/commit/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306/comments", "author": null, "committer": null, "parents": [{"sha": "1f33f04fd453a63a88cb25771466c2618b46d372", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f33f04fd453a63a88cb25771466c2618b46d372", "html_url": "https://github.com/rust-lang/rust/commit/1f33f04fd453a63a88cb25771466c2618b46d372"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "2f0aa915753533067e53fbba01a3d45e29d9931c", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "patch": "@@ -14,14 +14,15 @@ use rand::rngs::StdRng;\n use rustc_ast::attr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::{\n+    middle::codegen_fn_attrs::CodegenFnAttrFlags,\n     mir,\n     ty::{\n         self,\n         layout::{LayoutCx, LayoutError, TyAndLayout},\n         TyCtxt,\n     },\n };\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{def_id::DefId, symbol::{sym, Symbol}};\n use rustc_target::abi::{LayoutOf, Size};\n \n use crate::*;\n@@ -459,8 +460,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     fn canonical_alloc_id(mem: &Memory<'mir, 'tcx, Self>, id: AllocId) -> AllocId {\n         let tcx = mem.tcx;\n         let alloc = tcx.alloc_map.lock().get(id);\n+        fn is_thread_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+            tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n+        }\n         match alloc {\n             Some(GlobalAlloc::Static(def_id)) if tcx.is_foreign_item(def_id) => {\n+                if is_thread_local(*tcx, def_id) {\n+                    unimplemented!(\"Foreign thread local statics are not supported yet.\");\n+                }\n                 // Figure out if this is an extern static, and if yes, which one.\n                 let attrs = tcx.get_attrs(def_id);\n                 let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n@@ -476,7 +483,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n                     id\n                 }\n             },\n-            Some(GlobalAlloc::Static(def_id)) if tcx.has_attr(def_id, sym::thread_local) => {\n+            Some(GlobalAlloc::Static(def_id)) if is_thread_local(*tcx, def_id) => {\n                 // We have a thread local, so we need to get a unique allocation id for it.\n                 mem.extra.tls.get_or_register_allocation(*tcx, id)\n             },"}]}