{"sha": "b112430ca73f646b6cb779ab09a3f691aad22442", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMTI0MzBjYTczZjY0NmI2Y2I3NzlhYjA5YTNmNjkxYWFkMjI0NDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-25T08:26:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-25T08:30:50Z"}, "message": "move source change to a dedicated file", "tree": {"sha": "903489a6b436f8bd1589195a56b3b18f949eb738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903489a6b436f8bd1589195a56b3b18f949eb738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b112430ca73f646b6cb779ab09a3f691aad22442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b112430ca73f646b6cb779ab09a3f691aad22442", "html_url": "https://github.com/rust-lang/rust/commit/b112430ca73f646b6cb779ab09a3f691aad22442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b112430ca73f646b6cb779ab09a3f691aad22442/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d2fd59cfb00211573419b0a59cf91d92d636f5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2fd59cfb00211573419b0a59cf91d92d636f5a", "html_url": "https://github.com/rust-lang/rust/commit/8d2fd59cfb00211573419b0a59cf91d92d636f5a"}], "stats": {"total": 199, "additions": 104, "deletions": 95}, "files": [{"sha": "6b8aa7a8ea500b4e0c7ea1a866ebabcb20595a5f", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 95, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b112430ca73f646b6cb779ab09a3f691aad22442/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b112430ca73f646b6cb779ab09a3f691aad22442/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=b112430ca73f646b6cb779ab09a3f691aad22442", "patch": "@@ -14,6 +14,7 @@ mod db;\n pub mod mock_analysis;\n mod symbol_index;\n mod change;\n+mod source_change;\n mod feature_flags;\n \n mod status;\n@@ -54,8 +55,6 @@ use ra_db::{\n     CheckCanceled, FileLoader, SourceDatabase,\n };\n use ra_syntax::{SourceFile, TextRange, TextUnit};\n-use ra_text_edit::TextEdit;\n-use relative_path::RelativePathBuf;\n \n use crate::{db::LineIndexDatabase, symbol_index::FileSymbol};\n \n@@ -73,6 +72,7 @@ pub use crate::{\n     line_index_utils::translate_offset_with_edit,\n     references::{ReferenceSearchResult, SearchScope},\n     runnables::{Runnable, RunnableKind},\n+    source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     syntax_highlighting::HighlightedRange,\n };\n \n@@ -83,99 +83,6 @@ pub use ra_db::{\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n-#[derive(Debug)]\n-pub struct SourceChange {\n-    pub label: String,\n-    pub source_file_edits: Vec<SourceFileEdit>,\n-    pub file_system_edits: Vec<FileSystemEdit>,\n-    pub cursor_position: Option<FilePosition>,\n-}\n-\n-impl SourceChange {\n-    /// Creates a new SourceChange with the given label\n-    /// from the edits.\n-    pub(crate) fn from_edits<L: Into<String>>(\n-        label: L,\n-        source_file_edits: Vec<SourceFileEdit>,\n-        file_system_edits: Vec<FileSystemEdit>,\n-    ) -> Self {\n-        SourceChange {\n-            label: label.into(),\n-            source_file_edits,\n-            file_system_edits,\n-            cursor_position: None,\n-        }\n-    }\n-\n-    /// Creates a new SourceChange with the given label,\n-    /// containing only the given `SourceFileEdits`.\n-    pub(crate) fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n-        SourceChange {\n-            label: label.into(),\n-            source_file_edits: edits,\n-            file_system_edits: vec![],\n-            cursor_position: None,\n-        }\n-    }\n-\n-    /// Creates a new SourceChange with the given label,\n-    /// containing only the given `FileSystemEdits`.\n-    pub(crate) fn file_system_edits<L: Into<String>>(label: L, edits: Vec<FileSystemEdit>) -> Self {\n-        SourceChange {\n-            label: label.into(),\n-            source_file_edits: vec![],\n-            file_system_edits: edits,\n-            cursor_position: None,\n-        }\n-    }\n-\n-    /// Creates a new SourceChange with the given label,\n-    /// containing only a single `SourceFileEdit`.\n-    pub(crate) fn source_file_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n-        SourceChange::source_file_edits(label, vec![edit])\n-    }\n-\n-    /// Creates a new SourceChange with the given label\n-    /// from the given `FileId` and `TextEdit`\n-    pub(crate) fn source_file_edit_from<L: Into<String>>(\n-        label: L,\n-        file_id: FileId,\n-        edit: TextEdit,\n-    ) -> Self {\n-        SourceChange::source_file_edit(label, SourceFileEdit { file_id, edit })\n-    }\n-\n-    /// Creates a new SourceChange with the given label\n-    /// from the given `FileId` and `TextEdit`\n-    pub(crate) fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n-        SourceChange::file_system_edits(label, vec![edit])\n-    }\n-\n-    /// Sets the cursor position to the given `FilePosition`\n-    pub(crate) fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n-        self.cursor_position = Some(cursor_position);\n-        self\n-    }\n-\n-    /// Sets the cursor position to the given `FilePosition`\n-    pub(crate) fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n-        self.cursor_position = cursor_position;\n-        self\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct SourceFileEdit {\n-    pub file_id: FileId,\n-    pub edit: TextEdit,\n-}\n-\n-#[derive(Debug)]\n-pub enum FileSystemEdit {\n-    CreateFile { source_root: SourceRootId, path: RelativePathBuf },\n-    MoveFile { src: FileId, dst_source_root: SourceRootId, dst_path: RelativePathBuf },\n-}\n-\n #[derive(Debug)]\n pub struct Diagnostic {\n     pub message: String,"}, {"sha": "80e8821b0c9c105b36fe3102352be1d5f2a6f6ab", "filename": "crates/ra_ide_api/src/source_change.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b112430ca73f646b6cb779ab09a3f691aad22442/crates%2Fra_ide_api%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b112430ca73f646b6cb779ab09a3f691aad22442/crates%2Fra_ide_api%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsource_change.rs?ref=b112430ca73f646b6cb779ab09a3f691aad22442", "patch": "@@ -0,0 +1,102 @@\n+//! This modules defines type to represent changes to the source code, that flow\n+//! from the server to the client.\n+//!\n+//! It can be viewed as a dual for `AnalysisChange`.\n+\n+use ra_text_edit::TextEdit;\n+use relative_path::RelativePathBuf;\n+\n+use crate::{FileId, FilePosition, SourceRootId};\n+\n+#[derive(Debug)]\n+pub struct SourceChange {\n+    pub label: String,\n+    pub source_file_edits: Vec<SourceFileEdit>,\n+    pub file_system_edits: Vec<FileSystemEdit>,\n+    pub cursor_position: Option<FilePosition>,\n+}\n+\n+impl SourceChange {\n+    /// Creates a new SourceChange with the given label\n+    /// from the edits.\n+    pub(crate) fn from_edits<L: Into<String>>(\n+        label: L,\n+        source_file_edits: Vec<SourceFileEdit>,\n+        file_system_edits: Vec<FileSystemEdit>,\n+    ) -> Self {\n+        SourceChange {\n+            label: label.into(),\n+            source_file_edits,\n+            file_system_edits,\n+            cursor_position: None,\n+        }\n+    }\n+\n+    /// Creates a new SourceChange with the given label,\n+    /// containing only the given `SourceFileEdits`.\n+    pub(crate) fn source_file_edits<L: Into<String>>(label: L, edits: Vec<SourceFileEdit>) -> Self {\n+        SourceChange {\n+            label: label.into(),\n+            source_file_edits: edits,\n+            file_system_edits: vec![],\n+            cursor_position: None,\n+        }\n+    }\n+\n+    /// Creates a new SourceChange with the given label,\n+    /// containing only the given `FileSystemEdits`.\n+    pub(crate) fn file_system_edits<L: Into<String>>(label: L, edits: Vec<FileSystemEdit>) -> Self {\n+        SourceChange {\n+            label: label.into(),\n+            source_file_edits: vec![],\n+            file_system_edits: edits,\n+            cursor_position: None,\n+        }\n+    }\n+\n+    /// Creates a new SourceChange with the given label,\n+    /// containing only a single `SourceFileEdit`.\n+    pub(crate) fn source_file_edit<L: Into<String>>(label: L, edit: SourceFileEdit) -> Self {\n+        SourceChange::source_file_edits(label, vec![edit])\n+    }\n+\n+    /// Creates a new SourceChange with the given label\n+    /// from the given `FileId` and `TextEdit`\n+    pub(crate) fn source_file_edit_from<L: Into<String>>(\n+        label: L,\n+        file_id: FileId,\n+        edit: TextEdit,\n+    ) -> Self {\n+        SourceChange::source_file_edit(label, SourceFileEdit { file_id, edit })\n+    }\n+\n+    /// Creates a new SourceChange with the given label\n+    /// from the given `FileId` and `TextEdit`\n+    pub(crate) fn file_system_edit<L: Into<String>>(label: L, edit: FileSystemEdit) -> Self {\n+        SourceChange::file_system_edits(label, vec![edit])\n+    }\n+\n+    /// Sets the cursor position to the given `FilePosition`\n+    pub(crate) fn with_cursor(mut self, cursor_position: FilePosition) -> Self {\n+        self.cursor_position = Some(cursor_position);\n+        self\n+    }\n+\n+    /// Sets the cursor position to the given `FilePosition`\n+    pub(crate) fn with_cursor_opt(mut self, cursor_position: Option<FilePosition>) -> Self {\n+        self.cursor_position = cursor_position;\n+        self\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct SourceFileEdit {\n+    pub file_id: FileId,\n+    pub edit: TextEdit,\n+}\n+\n+#[derive(Debug)]\n+pub enum FileSystemEdit {\n+    CreateFile { source_root: SourceRootId, path: RelativePathBuf },\n+    MoveFile { src: FileId, dst_source_root: SourceRootId, dst_path: RelativePathBuf },\n+}"}]}