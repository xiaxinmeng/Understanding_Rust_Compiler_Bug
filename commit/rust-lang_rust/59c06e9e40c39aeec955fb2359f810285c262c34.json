{"sha": "59c06e9e40c39aeec955fb2359f810285c262c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YzA2ZTllNDBjMzlhZWVjOTU1ZmIyMzU5ZjgxMDI4NWMyNjJjMzQ=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-09T00:03:16Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-09T00:03:16Z"}, "message": "Switch to using a single atomic and treating 0 as 'uninitialized'", "tree": {"sha": "ce18e4683a1400ce04eb0aa3406634ebe4957d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce18e4683a1400ce04eb0aa3406634ebe4957d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c06e9e40c39aeec955fb2359f810285c262c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c06e9e40c39aeec955fb2359f810285c262c34", "html_url": "https://github.com/rust-lang/rust/commit/59c06e9e40c39aeec955fb2359f810285c262c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c06e9e40c39aeec955fb2359f810285c262c34/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4cf24bd451363cfb675af70b40dbb96a1ec2716", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cf24bd451363cfb675af70b40dbb96a1ec2716", "html_url": "https://github.com/rust-lang/rust/commit/e4cf24bd451363cfb675af70b40dbb96a1ec2716"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "fac4b05ad0b5f5ec8ffd1b2beee789061c76cdc5", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/59c06e9e40c39aeec955fb2359f810285c262c34/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c06e9e40c39aeec955fb2359f810285c262c34/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=59c06e9e40c39aeec955fb2359f810285c262c34", "patch": "@@ -117,7 +117,7 @@ impl Hash for Timespec {\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod inner {\n     use crate::fmt;\n-    use crate::sync::atomic::{AtomicBool, AtomicU64, Ordering};\n+    use crate::sync::atomic::{AtomicU64, Ordering};\n     use crate::sys::cvt;\n     use crate::sys_common::mul_div_u64;\n     use crate::time::Duration;\n@@ -232,15 +232,19 @@ mod inner {\n     }\n \n     fn info() -> mach_timebase_info {\n-        static INITIALIZED: AtomicBool = AtomicBool::new(false);\n+        // INFO_BITS conceptually is an `Option<mach_timebase_info>`. We can do\n+        // this in 64 bits because we know 0 is never a valid value for the\n+        // `denom` field.\n+        //\n+        // Encoding this as a single `AtomicU64` allows us to use `Relaxed`\n+        // operations, as we are only interested in in the effects on a single\n+        // memory location.\n         static INFO_BITS: AtomicU64 = AtomicU64::new(0);\n \n-        // If a previous thread has initialized `INFO_BITS`, use that.\n-        if INITIALIZED.load(Ordering::Acquire) {\n-            // Note: `Relaxed` is correct here and below --\u00a0the `Acquire` /\n-            // `Release` pair used for `INITIALIZED` ensures this load can see\n-            // the corresponding store below.\n-            return info_from_bits(INFO_BITS.load(Ordering::Relaxed));\n+        // If a previous thread has initialized `INFO_BITS`, use it.\n+        let info_bits = INFO_BITS.load(Ordering::Relaxed);\n+        if info_bits != 0 {\n+            return info_from_bits(info_bits);\n         }\n \n         // ... otherwise learn for ourselves ...\n@@ -252,15 +256,7 @@ mod inner {\n         unsafe {\n             mach_timebase_info(&mut info);\n         }\n-\n-        // This is racy, but the race should be against other threads trying to\n-        // write the same value.\n         INFO_BITS.store(info_to_bits(info), Ordering::Relaxed);\n-\n-        // The `Release` here \"publishes\" the store of `INFO_BITS` to other\n-        // threads (which do a `INITIALIZED.load(Acquire)`) despite it being\n-        // read/written w/ `Relaxed`.\n-        INITIALIZED.store(true, Ordering::Release);\n         info\n     }\n "}]}