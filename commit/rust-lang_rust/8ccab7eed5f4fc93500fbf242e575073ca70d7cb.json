{"sha": "8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2FiN2VlZDVmNGZjOTM1MDBmYmYyNDJlNTc1MDczY2E3MGQ3Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-31T20:51:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-31T20:51:02Z"}, "message": "Auto merge of #47900 - kennytm:rollup, r=kennytm\n\nRollup of 16 pull requests\n\n- Successful merges: #47838, #47840, #47844, #47874, #47875, #47876, #47884, #47886, #47889, #47890, #47891, #47795, #47677, #47893, #47895, #47552\n- Failed merges:", "tree": {"sha": "f0bd6d1dd0033e29407991b9bbe13c7c7a764abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0bd6d1dd0033e29407991b9bbe13c7c7a764abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "html_url": "https://github.com/rust-lang/rust/commit/8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "url": "https://api.github.com/repos/rust-lang/rust/commits/560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "html_url": "https://github.com/rust-lang/rust/commit/560a2f4faf4828ba5f48fe2bd7709265c2f5354d"}, {"sha": "af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "html_url": "https://github.com/rust-lang/rust/commit/af95302d3cb2f5cd59eb38b88eab6a054d965e9f"}], "stats": {"total": 368, "additions": 320, "deletions": 48}, "files": [{"sha": "780513dd943946853c7085980219fd85c5778729", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -377,6 +377,11 @@ impl<'a> Builder<'a> {\n         self.ensure(Libdir { compiler, target })\n     }\n \n+    pub fn sysroot_codegen_backends(&self, compiler: Compiler) -> PathBuf {\n+        self.sysroot_libdir(compiler, compiler.host)\n+            .with_file_name(\"codegen-backends\")\n+    }\n+\n     /// Returns the compiler's libdir where it stores the dynamic libraries that\n     /// it itself links against.\n     ///"}, {"sha": "1d5e11c5d6d41c06f55d088a82b6be93914928e1", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -724,8 +724,7 @@ fn copy_codegen_backends_to_sysroot(builder: &Builder,\n     //\n     // Here we're looking for the output dylib of the `CodegenBackend` step and\n     // we're copying that into the `codegen-backends` folder.\n-    let libdir = builder.sysroot_libdir(target_compiler, target);\n-    let dst = libdir.join(\"codegen-backends\");\n+    let dst = builder.sysroot_codegen_backends(target_compiler);\n     t!(fs::create_dir_all(&dst));\n \n     for backend in builder.config.rust_codegen_backends.iter() {"}, {"sha": "dbb7d19e43285089515cb0c0878214ccc7181b13", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -435,11 +435,9 @@ impl Step for Rustc {\n             }\n \n             // Copy over the codegen backends\n-            let backends_src = builder.sysroot_libdir(compiler, host)\n-                .join(\"codegen-backends\");\n-            let backends_dst = image.join(\"lib/rustlib\")\n-                .join(&*host)\n-                .join(\"lib/codegen-backends\");\n+            let backends_src = builder.sysroot_codegen_backends(compiler);\n+            let backends_rel = backends_src.strip_prefix(&src).unwrap();\n+            let backends_dst = image.join(&backends_rel);\n             t!(fs::create_dir_all(&backends_dst));\n             cp_r(&backends_src, &backends_dst);\n "}, {"sha": "6c8a1c3062b00633619ba56a7c7296ce8119d19d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -1586,6 +1586,7 @@ impl Display for ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for bool {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Display::fmt(self, f)\n     }\n@@ -1748,6 +1749,7 @@ impl<T: Debug> Debug for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for () {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(\"()\")\n     }"}, {"sha": "2992e7cf8db341cf0fde7730212752b19ed70096", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -157,6 +157,7 @@ macro_rules! debug {\n     ($T:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::Debug for $T {\n+            #[inline]\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 fmt::Display::fmt(self, f)\n             }"}, {"sha": "7314fac282b664fe2e92de6ee8fd7a694e955e18", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -307,6 +307,7 @@ use fmt;\n use iter_private::TrustedRandomAccess;\n use ops::Try;\n use usize;\n+use intrinsics;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n@@ -694,6 +695,49 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n             (f(inner_hint.0), inner_hint.1.map(f))\n         }\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n+        if self.first_take {\n+            self.first_take = false;\n+            let first = self.iter.next();\n+            if n == 0 {\n+                return first;\n+            }\n+            n -= 1;\n+        }\n+        // n and self.step are indices, we need to add 1 to get the amount of elements\n+        // When calling `.nth`, we need to subtract 1 again to convert back to an index\n+        // step + 1 can't overflow because `.step_by` sets `self.step` to `step - 1`\n+        let mut step = self.step + 1;\n+        // n + 1 could overflow\n+        // thus, if n is usize::MAX, instead of adding one, we call .nth(step)\n+        if n == usize::MAX {\n+            self.iter.nth(step - 1);\n+        } else {\n+            n += 1;\n+        }\n+\n+        // overflow handling\n+        loop {\n+            let mul = n.checked_mul(step);\n+            if unsafe { intrinsics::likely(mul.is_some()) } {\n+                return self.iter.nth(mul.unwrap() - 1);\n+            }\n+            let div_n = usize::MAX / n;\n+            let div_step = usize::MAX / step;\n+            let nth_n = div_n * n;\n+            let nth_step = div_step * step;\n+            let nth = if nth_n > nth_step {\n+                step -= div_n;\n+                nth_n\n+            } else {\n+                n -= div_step;\n+                nth_step\n+            };\n+            self.iter.nth(nth - 1);\n+        }\n+    }\n }\n \n // StepBy can only make the iterator shorter, so the len will still fit."}, {"sha": "e52e119ff59b954389dbd2ec87266f57e22c9b09", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -161,6 +161,68 @@ fn test_iterator_step_by() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth() {\n+    let mut it = (0..16).step_by(5);\n+    assert_eq!(it.nth(0), Some(0));\n+    assert_eq!(it.nth(0), Some(5));\n+    assert_eq!(it.nth(0), Some(10));\n+    assert_eq!(it.nth(0), Some(15));\n+    assert_eq!(it.nth(0), None);\n+\n+    let it = (0..18).step_by(5);\n+    assert_eq!(it.clone().nth(0), Some(0));\n+    assert_eq!(it.clone().nth(1), Some(5));\n+    assert_eq!(it.clone().nth(2), Some(10));\n+    assert_eq!(it.clone().nth(3), Some(15));\n+    assert_eq!(it.clone().nth(4), None);\n+    assert_eq!(it.clone().nth(42), None);\n+}\n+\n+#[test]\n+fn test_iterator_step_by_nth_overflow() {\n+    #[cfg(target_pointer_width = \"8\")]\n+    type Bigger = u16;\n+    #[cfg(target_pointer_width = \"16\")]\n+    type Bigger = u32;\n+    #[cfg(target_pointer_width = \"32\")]\n+    type Bigger = u64;\n+    #[cfg(target_pointer_width = \"64\")]\n+    type Bigger = u128;\n+\n+    #[derive(Clone)]\n+    struct Test(Bigger);\n+    impl<'a> Iterator for &'a mut Test {\n+        type Item = i32;\n+        fn next(&mut self) -> Option<Self::Item> { Some(21) }\n+        fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+            self.0 += n as Bigger + 1;\n+            Some(42)\n+        }\n+    }\n+\n+    let mut it = Test(0);\n+    let root = usize::MAX >> (::std::mem::size_of::<usize>() * 8 / 2);\n+    let n = root + 20;\n+    (&mut it).step_by(n).nth(n);\n+    assert_eq!(it.0, n as Bigger * n as Bigger);\n+\n+    // large step\n+    let mut it = Test(0);\n+    (&mut it).step_by(usize::MAX).nth(5);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 5);\n+\n+    // n + 1 overflows\n+    let mut it = Test(0);\n+    (&mut it).step_by(2).nth(usize::MAX);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 2);\n+\n+    // n + 1 overflows\n+    let mut it = Test(0);\n+    (&mut it).step_by(1).nth(usize::MAX);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 1);\n+}\n+\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {"}, {"sha": "5f768ef4399e88fc12771aab5a6f892c263a66be", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -27,10 +27,12 @@\n #![feature(libc)]\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n+#![feature(rustc_attrs)]\n \n // Rust's \"try\" function, but if we're aborting on panics we just call the\n // function as there's nothing else we need to do here.\n #[no_mangle]\n+#[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n                                               data: *mut u8,\n                                               _data_ptr: *mut usize,\n@@ -50,6 +52,7 @@ pub unsafe extern fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // will kill us with an illegal instruction, which will do a good enough job for\n // now hopefully.\n #[no_mangle]\n+#[rustc_std_internal_symbol]\n pub unsafe extern fn __rust_start_panic(_data: usize, _vtable: usize) -> u32 {\n     abort();\n "}, {"sha": "722456a76ce591a6377853ad958b04e353ee0586", "filename": "src/librustc/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -176,6 +176,7 @@ pointers for understanding them better.\n - `'gcx` -- the lifetime of the global arena (see `librustc/ty`).\n - generics -- the set of generic type parameters defined on a type or item\n - ICE -- internal compiler error. When the compiler crashes.\n+- ICH -- incremental compilation hash.\n - infcx -- the inference context (see `librustc/infer`)\n - MIR -- the **Mid-level IR** that is created after type-checking for use by borrowck and trans.\n   Defined in the `src/librustc/mir/` module, but much of the code that manipulates it is"}, {"sha": "4034055d041558f2360e5227c9fdbe3a32451aa1", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -639,6 +639,9 @@ define_dep_nodes!( <'tcx>\n     [] TargetFeaturesEnabled(DefId),\n \n     [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n+\n+    [] GetSymbolExportLevel(DefId),\n+\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "d65becb912a3cc57150e8a44c4014baf03ba6265", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -831,6 +831,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 span,\n                 node: hir::ImplItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n                 ..\n+            }) |\n+            hir::map::NodeTraitItem(&hir::TraitItem {\n+                span,\n+                node: hir::TraitItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                ..\n             }) => {\n                 (self.tcx.sess.codemap().def_span(span), decl.inputs.iter()\n                         .map(|arg| match arg.clone().into_inner().node {"}, {"sha": "85fca68187fe661fc82f9084cd94aea5719144cd", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -343,6 +343,7 @@ define_maps! { <'tcx>\n         -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),\n     [] fn export_name: ExportName(DefId) -> Option<Symbol>,\n     [] fn contains_extern_indicator: ContainsExternIndicator(DefId) -> bool,\n+    [] fn symbol_export_level: GetSymbolExportLevel(DefId) -> SymbolExportLevel,\n     [] fn is_translated_function: IsTranslatedFunction(DefId) -> bool,\n     [] fn codegen_unit: CodegenUnit(InternedString) -> Arc<CodegenUnit<'tcx>>,\n     [] fn compile_codegen_unit: CompileCodegenUnit(InternedString) -> Stats,"}, {"sha": "0ab6ee1a54a9b1a02ac866b6e6f3839c97c2296a", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -921,6 +921,8 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n \n         DepKind::TargetFeaturesWhitelist => { force!(target_features_whitelist, LOCAL_CRATE); }\n         DepKind::TargetFeaturesEnabled => { force!(target_features_enabled, def_id!()); }\n+\n+        DepKind::GetSymbolExportLevel => { force!(symbol_export_level, def_id!()); }\n     }\n \n     true"}, {"sha": "2872c59157d6be1cf1b5d73aec7f39d8e0aa584b", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -468,6 +468,10 @@ pub struct TargetOptions {\n \n     /// The codegen backend to use for this target, typically \"llvm\"\n     pub codegen_backend: String,\n+\n+    /// The default visibility for symbols in this target should be \"hidden\"\n+    /// rather than \"default\"\n+    pub default_hidden_visibility: bool,\n }\n \n impl Default for TargetOptions {\n@@ -538,6 +542,7 @@ impl Default for TargetOptions {\n             no_builtins: false,\n             i128_lowering: false,\n             codegen_backend: \"llvm\".to_string(),\n+            default_hidden_visibility: false,\n         }\n     }\n }\n@@ -785,6 +790,7 @@ impl Target {\n         key!(singlethread, bool);\n         key!(no_builtins, bool);\n         key!(codegen_backend);\n+        key!(default_hidden_visibility, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -982,6 +988,7 @@ impl ToJson for Target {\n         target_option_val!(singlethread);\n         target_option_val!(no_builtins);\n         target_option_val!(codegen_backend);\n+        target_option_val!(default_hidden_visibility);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "966df897f01f1e09295b609d7c3530fbb5e4378a", "filename": "src/librustc_back/target/msp430_none_elf.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -53,6 +53,12 @@ pub fn target() -> TargetResult {\n             // don't want to invoke that many gcc instances.\n             default_codegen_units: Some(1),\n \n+            // Since MSP430 doesn't meaningfully support faulting on illegal\n+            // instructions, LLVM generates a call to abort() function instead\n+            // of a trap instruction. Such calls are 4 bytes long, and that is\n+            // too much overhead for such small target.\n+            trap_unreachable: false,\n+\n             .. Default::default( )\n         }\n     })"}, {"sha": "242860e5c6e9285034cc5946e8a626a40275ec99", "filename": "src/librustc_back/target/wasm32_unknown_unknown.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -83,6 +83,9 @@ pub fn target() -> Result<Target, String> {\n         // performing LTO with compiler-builtins.\n         no_builtins: true,\n \n+        // no dynamic linking, no need for default visibility!\n+        default_hidden_visibility: true,\n+\n         .. Default::default()\n     };\n     Ok(Target {"}, {"sha": "ae53ed0e1140d1226e4ba29f8ba45041ad13c40e", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -127,20 +127,27 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n     }\n }\n \n+\n impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     fn report_inlining_errors(&self, pat_span: Span) {\n         for error in &self.errors {\n             match *error {\n                 PatternError::StaticInPattern(span) => {\n-                    span_err!(self.tcx.sess, span, E0158,\n-                              \"statics cannot be referenced in patterns\");\n+                    self.span_e0158(span, \"statics cannot be referenced in patterns\")\n+                }\n+                PatternError::AssociatedConstInPattern(span) => {\n+                    self.span_e0158(span, \"associated consts cannot be referenced in patterns\")\n                 }\n                 PatternError::ConstEval(ref err) => {\n                     err.report(self.tcx, pat_span, \"pattern\");\n                 }\n             }\n         }\n     }\n+\n+    fn span_e0158(&self, span: Span, text: &str) {\n+        span_err!(self.tcx.sess, span, E0158, \"{}\", text)\n+    }\n }\n \n impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {"}, {"sha": "e0b3929e32a8d9686b3cc0b9cfb0fabf6d622dad", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -27,6 +27,7 @@ use syntax_pos::Span;\n \n #[derive(Clone, Debug)]\n pub enum PatternError<'tcx> {\n+    AssociatedConstInPattern(Span),\n     StaticInPattern(Span),\n     ConstEval(ConstEvalErr<'tcx>),\n }\n@@ -635,6 +636,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                   -> Pattern<'tcx> {\n         let ty = self.tables.node_id_to_type(id);\n         let def = self.tables.qpath_def(qpath, id);\n+        let is_associated_const = match def {\n+            Def::AssociatedConst(_) => true,\n+            _ => false,\n+        };\n         let kind = match def {\n             Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                 let substs = self.tables.node_substs(id);\n@@ -656,7 +661,11 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         return pat;\n                     }\n                     None => {\n-                        self.errors.push(PatternError::StaticInPattern(span));\n+                        self.errors.push(if is_associated_const {\n+                            PatternError::AssociatedConstInPattern(span)\n+                        } else {\n+                            PatternError::StaticInPattern(span)\n+                        });\n                         PatternKind::Wild\n                     }\n                 }"}, {"sha": "05dcaf731352a36074af2240764ca8c328d324b8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -290,7 +290,7 @@ fn get_trans_sysroot(backend_name: &str) -> fn() -> Box<TransCrate> {\n     let sysroot = sysroot_candidates.iter()\n         .map(|sysroot| {\n             let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(&libdir).join(\"codegen-backends\")\n+            sysroot.join(libdir).with_file_name(\"codegen-backends\")\n         })\n         .filter(|f| {\n             info!(\"codegen backend candidate: {}\", f.display());\n@@ -457,10 +457,13 @@ pub fn run_compiler<'a>(args: &[String],\n                                            None);\n \n     let (odir, ofile) = make_output(&matches);\n-    let (input, input_file_path) = match make_input(&matches.free) {\n-        Some((input, input_file_path)) => callbacks.some_input(input, input_file_path),\n+    let (input, input_file_path, input_err) = match make_input(&matches.free) {\n+        Some((input, input_file_path, input_err)) => {\n+            let (input, input_file_path) = callbacks.some_input(input, input_file_path);\n+            (input, input_file_path, input_err)\n+        },\n         None => match callbacks.no_input(&matches, &sopts, &cfg, &odir, &ofile, &descriptions) {\n-            Some((input, input_file_path)) => (input, input_file_path),\n+            Some((input, input_file_path)) => (input, input_file_path, None),\n             None => return (Ok(()), None),\n         },\n     };\n@@ -471,6 +474,13 @@ pub fn run_compiler<'a>(args: &[String],\n         sopts, input_file_path.clone(), descriptions, codemap, emitter_dest,\n     );\n \n+    if let Some(err) = input_err {\n+        // Immediately stop compilation if there was an issue reading\n+        // the input (for example if the input stream is not UTF-8).\n+        sess.err(&format!(\"{}\", err));\n+        return (Err(CompileIncomplete::Stopped), Some(sess));\n+    }\n+\n     let trans = get_trans(&sess);\n \n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n@@ -513,17 +523,22 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n }\n \n // Extract input (string or file and optional path) from matches.\n-fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n+fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>, Option<io::Error>)> {\n     if free_matches.len() == 1 {\n         let ifile = &free_matches[0];\n         if ifile == \"-\" {\n             let mut src = String::new();\n-            io::stdin().read_to_string(&mut src).unwrap();\n+            let err = if io::stdin().read_to_string(&mut src).is_err() {\n+                Some(io::Error::new(io::ErrorKind::InvalidData,\n+                                    \"couldn't read from stdin, as it did not contain valid UTF-8\"))\n+            } else {\n+                None\n+            };\n             Some((Input::Str { name: FileName::Anon, input: src },\n-                  None))\n+                  None, err))\n         } else {\n             Some((Input::File(PathBuf::from(ifile)),\n-                  Some(PathBuf::from(ifile))))\n+                  Some(PathBuf::from(ifile)), None))\n         }\n     } else {\n         None"}, {"sha": "a49284eb55a465aae7d0aae87744fc34833530db", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -290,6 +290,10 @@ impl EmitterWriter {\n                           line: &Line,\n                           width_offset: usize,\n                           code_offset: usize) -> Vec<(usize, Style)> {\n+        if line.line_index == 0 {\n+            return Vec::new();\n+        }\n+\n         let source_string = match file.get_line(line.line_index - 1) {\n             Some(s) => s,\n             None => return Vec::new(),"}, {"sha": "e9471cdb4f9497658b91a27108906d88f72e98dc", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -107,6 +107,7 @@ use rustc::dep_graph::WorkProductId;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::mir::mono::{Linkage, Visibility};\n+use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::ty::{self, TyCtxt, InstanceDef};\n use rustc::ty::item_path::characteristic_def_id_of_type;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -322,7 +323,16 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             .or_insert_with(make_codegen_unit);\n \n         let mut can_be_internalized = true;\n-        let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n+        let default_visibility = |id: DefId| {\n+            if tcx.sess.target.target.options.default_hidden_visibility &&\n+                tcx.symbol_export_level(id) != SymbolExportLevel::C\n+            {\n+                Visibility::Hidden\n+            } else {\n+                Visibility::Default\n+            }\n+        };\n+        let (linkage, mut visibility) = match trans_item.explicit_linkage(tcx) {\n             Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n             None => {\n                 match trans_item {\n@@ -352,7 +362,8 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     Visibility::Hidden\n                                 } else if def_id.is_local() {\n                                     if tcx.is_exported_symbol(def_id) {\n-                                        Visibility::Default\n+                                        can_be_internalized = false;\n+                                        default_visibility(def_id)\n                                     } else {\n                                         Visibility::Hidden\n                                     }\n@@ -375,7 +386,8 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     MonoItem::GlobalAsm(node_id) => {\n                         let def_id = tcx.hir.local_def_id(node_id);\n                         let visibility = if tcx.is_exported_symbol(def_id) {\n-                            Visibility::Default\n+                            can_be_internalized = false;\n+                            default_visibility(def_id)\n                         } else {\n                             Visibility::Hidden\n                         };"}, {"sha": "2da4bfedd3a175252a230f2d9a17a01ccfdf8dd1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -3998,14 +3998,20 @@ impl<'a> Resolver<'a> {\n \n             if let (Ok(snippet), false) = (cm.span_to_snippet(binding.span),\n                                            binding.is_renamed_extern_crate()) {\n+                let suggested_name = if name.as_str().chars().next().unwrap().is_uppercase() {\n+                    format!(\"Other{}\", name)\n+                } else {\n+                    format!(\"other_{}\", name)\n+                };\n+\n                 err.span_suggestion(binding.span,\n                                     rename_msg,\n                                     if snippet.ends_with(';') {\n-                                        format!(\"{} as Other{};\",\n+                                        format!(\"{} as {};\",\n                                                 &snippet[..snippet.len()-1],\n-                                                name)\n+                                                suggested_name)\n                                     } else {\n-                                        format!(\"{} as Other{}\", snippet, name)\n+                                        format!(\"{} as {}\", snippet, suggested_name)\n                                     });\n             } else {\n                 err.span_label(binding.span, rename_msg);"}, {"sha": "e1c145b122d761044a6057c2f670591150701576", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -86,6 +86,10 @@ pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind)\n                                                      name.as_ptr(),\n                                                      ty);\n \n+        if tcx.sess.target.target.options.default_hidden_visibility {\n+            llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+        }\n+\n         let callee = CString::new(kind.fn_name(method.name)).unwrap();\n         let callee = llvm::LLVMRustGetOrInsertFunction(llmod,\n                                                        callee.as_ptr(),"}, {"sha": "751f8148a2a9086fde59c055a8b22d83890e6ef3", "filename": "src/librustc_trans/asm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fasm.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -59,8 +59,9 @@ pub fn trans_inline_asm<'a, 'tcx>(\n     // Default per-arch clobbers\n     // Basically what clang does\n     let arch_clobbers = match &bx.sess().target.target.arch[..] {\n-        \"x86\" | \"x86_64\" => vec![\"~{dirflag}\", \"~{fpsr}\", \"~{flags}\"],\n-        _                => Vec::new()\n+        \"x86\" | \"x86_64\"  => vec![\"~{dirflag}\", \"~{fpsr}\", \"~{flags}\"],\n+        \"mips\" | \"mips64\" => vec![\"~{$1}\"],\n+        _                 => Vec::new()\n     };\n \n     let all_constraints ="}, {"sha": "989ef8a953746161a09b433fae785aa639b393a4", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -133,6 +133,8 @@ pub fn provide(providers: &mut Providers) {\n \n         Arc::new(local_crate)\n     };\n+\n+    providers.symbol_export_level = export_level;\n }\n \n pub fn provide_extern(providers: &mut Providers) {\n@@ -203,6 +205,7 @@ pub fn provide_extern(providers: &mut Providers) {\n \n         Arc::new(crate_exports)\n     };\n+    providers.symbol_export_level = export_level;\n }\n \n fn export_level(tcx: TyCtxt, sym_def_id: DefId) -> SymbolExportLevel {"}, {"sha": "af957500f700268b33fc3880fe79b5e0da72fa35", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -57,7 +57,9 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::TyClosure(..) |\n         ty::TyGenerator(..) |\n         ty::TyAdt(..) |\n-        ty::TyDynamic(..) |\n+        // FIXME(eddyb) producing readable type names for trait objects can result\n+        // in problematically distinct types due to HRTB and subtyping (see #47638).\n+        // ty::TyDynamic(..) |\n         ty::TyForeign(..) |\n         ty::TyStr => {\n             let mut name = String::with_capacity(32);"}, {"sha": "bdd675e6e2b851d8f581190902a913ac140ce26b", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -292,8 +292,8 @@ impl Error {\n     /// # if cfg!(target_os = \"linux\") {\n     /// use std::io;\n     ///\n-    /// let error = io::Error::from_raw_os_error(98);\n-    /// assert_eq!(error.kind(), io::ErrorKind::AddrInUse);\n+    /// let error = io::Error::from_raw_os_error(22);\n+    /// assert_eq!(error.kind(), io::ErrorKind::InvalidInput);\n     /// # }\n     /// ```\n     ///\n@@ -303,8 +303,8 @@ impl Error {\n     /// # if cfg!(windows) {\n     /// use std::io;\n     ///\n-    /// let error = io::Error::from_raw_os_error(10048);\n-    /// assert_eq!(error.kind(), io::ErrorKind::AddrInUse);\n+    /// let error = io::Error::from_raw_os_error(10022);\n+    /// assert_eq!(error.kind(), io::ErrorKind::InvalidInput);\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "06d1301d70003bafb0da71f268a04999a655d220", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -836,6 +836,10 @@ struct LLVMRustThinLTOData {\n   StringMap<FunctionImporter::ImportMapTy> ImportLists;\n   StringMap<FunctionImporter::ExportSetTy> ExportLists;\n   StringMap<GVSummaryMapTy> ModuleToDefinedGVSummaries;\n+\n+#if LLVM_VERSION_GE(7, 0)\n+  LLVMRustThinLTOData() : Index(/* isPerformingAnalysis = */ false) {}\n+#endif\n };\n \n // Just an argument to the `LLVMRustCreateThinLTOData` function below.\n@@ -918,7 +922,14 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   //\n   // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp`\n #if LLVM_VERSION_GE(5, 0)\n+#if LLVM_VERSION_GE(7, 0)\n+  auto deadIsPrevailing = [&](GlobalValue::GUID G) {\n+    return PrevailingType::Unknown;\n+  };\n+  computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols, deadIsPrevailing);\n+#else\n   computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n+#endif\n   ComputeCrossModuleImport(\n     Ret->Index,\n     Ret->ModuleToDefinedGVSummaries,"}, {"sha": "0e98d3f9050a8194573bdf8a23ef43955bc97869", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -122,13 +122,13 @@ pub fn unsafe_slice(_: &[UnsafeInner]) {\n pub fn str(_: &[u8]) {\n }\n \n-// CHECK: @trait_borrow(%\"core::ops::drop::Drop\"* nonnull %arg0.0, {}* noalias nonnull readonly %arg0.1)\n+// CHECK: @trait_borrow({}* nonnull %arg0.0, {}* noalias nonnull readonly %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_box(%\"core::ops::drop::Drop\"* noalias nonnull, {}* noalias nonnull readonly)\n+// CHECK: @trait_box({}* noalias nonnull, {}* noalias nonnull readonly)\n #[no_mangle]\n pub fn trait_box(_: Box<Drop>) {\n }"}, {"sha": "630a234fa66410e2cf886b0bc15244759c1a99e4", "filename": "src/test/compile-fail/associated-const-type-parameter-arms.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arms.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -16,6 +16,7 @@ pub trait Foo {\n }\n \n struct Abc;\n+\n impl Foo for Abc {\n     const X: EFoo = EFoo::B;\n }\n@@ -27,8 +28,10 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>(arg: EFoo) {\n     match arg {\n-        A::X => println!(\"A::X\"), //~ error: statics cannot be referenced in patterns [E0158]\n-        B::X => println!(\"B::X\"), //~ error: statics cannot be referenced in patterns [E0158]\n+        A::X => println!(\"A::X\"),\n+        //~^ error: associated consts cannot be referenced in patterns [E0158]\n+        B::X => println!(\"B::X\"),\n+        //~^ error: associated consts cannot be referenced in patterns [E0158]\n         _ => (),\n     }\n }"}, {"sha": "7948c442616e301fc26aeef148e60f808a22df92", "filename": "src/test/run-make/stdin-non-utf8/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2FMakefile?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\tcp non-utf8 $(TMPDIR)/non-utf.rs\n+\tcat $(TMPDIR)/non-utf.rs | $(RUSTC) - 2>&1 \\\n+\t\t| $(CGREP) \"error: couldn't read from stdin, as it did not contain valid UTF-8\""}, {"sha": "bc87051a85299758c04bd9c796e7bdd4f8fa21b7", "filename": "src/test/run-make/stdin-non-utf8/non-utf8", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2Fnon-utf8", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2Fnon-utf8", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstdin-non-utf8%2Fnon-utf8?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -0,0 +1 @@\n+\ufffd"}, {"sha": "6f627b2a3c137390383b8c2ee372e9b55084a12b", "filename": "src/test/run-pass/issue-47638.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-pass%2Fissue-47638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-pass%2Fissue-47638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47638.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn id<'c, 'b>(f: &'c &'b Fn(&i32)) -> &'c &'b Fn(&'static i32) {\n+    f\n+}\n+\n+fn main() {\n+    let f: &Fn(&i32) = &|x| {};\n+    id(&f);\n+}"}, {"sha": "22469b2fde058180210fd9e58efd4c6b87809b6b", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-llvm-version 4.0\n+// no-system-llvm -- needs MCSubtargetInfo::getFeatureTable()\n // ignore-cloudabi no std::env\n \n #![feature(cfg_target_feature)]"}, {"sha": "d3588be26697583a60f8ebc43170c2eeeb1d32fa", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -10,8 +10,8 @@ error[E0255]: the name `foo` is defined multiple times\n    = note: `foo` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-13 | use foo::foo as Otherfoo;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+13 | use foo::foo as other_foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2a0f9ee34f2befdbb71013c6c901effa4e6bb9ee", "filename": "src/test/ui/double-import.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -9,8 +9,8 @@ error[E0252]: the name `foo` is defined multiple times\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-23 | use sub2::foo as Otherfoo; //~ ERROR the name `foo` is defined multiple times\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+23 | use sub2::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6e5b91a11c900e43f054f7eda9a062696a176053", "filename": "src/test/ui/imports/duplicate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -9,8 +9,8 @@ error[E0252]: the name `foo` is defined multiple times\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-25 |     use a::foo as Otherfoo; //~ ERROR the name `foo` is defined multiple times\n-   |         ^^^^^^^^^^^^^^^^^^\n+25 |     use a::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error[E0659]: `foo` is ambiguous\n   --> $DIR/duplicate.rs:56:9"}, {"sha": "e6424e535ee329e36577f216a937efc8c2c3fff8", "filename": "src/test/ui/issue-26886.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fissue-26886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fissue-26886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26886.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -24,8 +24,8 @@ error[E0252]: the name `sync` is defined multiple times\n    = note: `sync` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-14 | use std::sync as Othersync; //~ ERROR the name `sync` is defined multiple times\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+14 | use std::sync as other_sync; //~ ERROR the name `sync` is defined multiple times\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "86a9da49a054acf8b3592e5949b047d10102d798", "filename": "src/test/ui/issue-47706-trait.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fissue-47706-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fissue-47706-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47706-trait.rs?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T {\n+    fn f(&self, _: ()) {\n+        None::<()>.map(Self::f);\n+    }\n+    //~^^ ERROR function is expected to take a single 0-tuple as argument\n+}"}, {"sha": "320e98dee4acfc06c075eeb7b3d8e3c2f14df146", "filename": "src/test/ui/issue-47706-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47706-trait.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -0,0 +1,12 @@\n+error[E0601]: main function not found\n+\n+error[E0593]: function is expected to take a single 0-tuple as argument, but it takes 2 distinct arguments\n+  --> $DIR/issue-47706-trait.rs:13:20\n+   |\n+12 |     fn f(&self, _: ()) {\n+   |     ------------------ takes 2 distinct arguments\n+13 |         None::<()>.map(Self::f);\n+   |                    ^^^ expected function that takes a single 0-tuple as argument\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e2245b8a8b10a7b39bdb0827fc04123f9f055441", "filename": "src/test/ui/resolve-conflict-item-vs-import.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -10,8 +10,8 @@ error[E0255]: the name `transmute` is defined multiple times\n    = note: `transmute` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use std::mem::transmute as Othertransmute;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+11 | use std::mem::transmute as other_transmute;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "01dba62a8511d17462ac1bff8b9367be1bf0b2d4", "filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -7,7 +7,7 @@ error[E0259]: the name `std` is defined multiple times\n    = note: `std` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | extern crate std as Otherstd;\n+11 | extern crate std as other_std;\n    |\n \n error: aborting due to previous error"}, {"sha": "1c9f306f493db9b5c357b3e84abcc583041668a5", "filename": "src/test/ui/use-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fuse-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ccab7eed5f4fc93500fbf242e575073ca70d7cb/src%2Ftest%2Fui%2Fuse-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-mod.stderr?ref=8ccab7eed5f4fc93500fbf242e575073ca70d7cb", "patch": "@@ -25,7 +25,7 @@ error[E0252]: the name `bar` is defined multiple times\n    = note: `bar` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-15 |     self as Otherbar\n+15 |     self as other_bar\n    |\n \n error: aborting due to 3 previous errors"}]}