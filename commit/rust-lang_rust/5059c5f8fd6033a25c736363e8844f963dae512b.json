{"sha": "5059c5f8fd6033a25c736363e8844f963dae512b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNTljNWY4ZmQ2MDMzYTI1YzczNjM2M2U4ODQ0Zjk2M2RhZTUxMmI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-29T00:36:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-29T00:36:51Z"}, "message": "Actually notice xfail-stage2 as different from xfail-stage2. Fix affected tests.", "tree": {"sha": "5b2696eb98f8911fd132be0c6a3a18898cb4958d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b2696eb98f8911fd132be0c6a3a18898cb4958d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5059c5f8fd6033a25c736363e8844f963dae512b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5059c5f8fd6033a25c736363e8844f963dae512b", "html_url": "https://github.com/rust-lang/rust/commit/5059c5f8fd6033a25c736363e8844f963dae512b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5059c5f8fd6033a25c736363e8844f963dae512b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b944d8d72e234d14b5147cc210e2cc5ea345d1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b944d8d72e234d14b5147cc210e2cc5ea345d1eb", "html_url": "https://github.com/rust-lang/rust/commit/b944d8d72e234d14b5147cc210e2cc5ea345d1eb"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "d6f9483b7972eba659a0be67c20ad1f85e5d0492", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5059c5f8fd6033a25c736363e8844f963dae512b/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5059c5f8fd6033a25c736363e8844f963dae512b/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=5059c5f8fd6033a25c736363e8844f963dae512b", "patch": "@@ -57,8 +57,8 @@ TEST_RPASS_EXES_STAGE1 := \\\n   $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE1:.rc=.stage1$(X))) \\\n   $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE1:.rs=.stage1$(X)))\n TEST_RPASS_EXES_STAGE2 := \\\n-  $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE1:.rc=.stage2$(X))) \\\n-  $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE1:.rs=.stage2$(X)))\n+  $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE2:.rc=.stage2$(X))) \\\n+  $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE2:.rs=.stage2$(X)))\n \n TEST_RPASS_OUTS_STAGE0 := \\\n   $(TEST_RPASS_EXES_STAGE0:.stage0$(X)=.stage0.out)"}, {"sha": "721253376a7b5bb3da410fccbaa5644c7fa2a832", "filename": "src/test/run-pass/anon-obj-degenerate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs?ref=5059c5f8fd6033a25c736363e8844f963dae512b", "patch": "@@ -1,5 +1,6 @@\n //xfail-stage0\n //xfail-stage1\n+//xfail-stage2\n use std;\n \n fn main() {"}, {"sha": "dfaddbb042f82fc7b861e67243b4e48c68172b34", "filename": "src/test/run-pass/anon-obj-overloading.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-obj-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-obj-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-overloading.rs?ref=5059c5f8fd6033a25c736363e8844f963dae512b", "patch": "@@ -1,5 +1,6 @@\n //xfail-stage0\n //xfail-stage1\n+//xfail-stage2\n use std;\n \n fn main() {\n@@ -18,12 +19,12 @@ fn main() {\n     // An anonymous object that overloads the 'foo' method.  Adding\n     // support for this is issue #543 (making this work in the\n     // presence of self-calls is the tricky part).\n-    auto my_b = obj() { \n+    auto my_b = obj() {\n         fn foo() -> int {\n             ret 3;\n         }\n \n-        with my_a \n+        with my_a\n     };\n \n     assert (my_b.foo() == 3);"}, {"sha": "ac9536f1dd1613f251e7c25476622ffa38eb4f72", "filename": "src/test/run-pass/anon-obj-with-self-call.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs?ref=5059c5f8fd6033a25c736363e8844f963dae512b", "patch": "@@ -1,5 +1,6 @@\n //xfail-stage0\n //xfail-stage1\n+//xfail-stage2\n use std;\n \n fn main() {\n@@ -20,11 +21,11 @@ fn main() {\n \n     // Right now, this fails with a failed lookup in a hashmap; not\n     // sure where, but I think it might be during typeck.\n-    auto my_b = obj { \n-        fn baz() -> int { \n-            ret self.foo(); \n-        } \n-        with my_a \n+    auto my_b = obj {\n+        fn baz() -> int {\n+            ret self.foo();\n+        }\n+        with my_a\n     };\n \n     assert (my_b.baz() == 2);"}, {"sha": "2a1361b24cd174c2f99f970e6e7803fa365fbcff", "filename": "src/test/run-pass/anon-objs-with-fields.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5059c5f8fd6033a25c736363e8844f963dae512b/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs?ref=5059c5f8fd6033a25c736363e8844f963dae512b", "patch": "@@ -1,5 +1,6 @@\n //xfail-stage0\n //xfail-stage1\n+//xfail-stage2\n use std;\n \n fn main() {\n@@ -23,7 +24,7 @@ fn main() {\n         fn baz() -> int {\n             ret quux + 4;\n         }\n-        with my_a \n+        with my_a\n     };\n \n     assert (my_c.baz() == 7);"}]}