{"sha": "4a5c46fb02b9124dc0bd5bafaccbd5a41121437e", "node_id": "C_kwDOAAsO6NoAKDRhNWM0NmZiMDJiOTEyNGRjMGJkNWJhZmFjY2JkNWE0MTEyMTQzN2U", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-15T16:29:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-15T16:29:43Z"}, "message": "Manually implement Debug for ImportKind.", "tree": {"sha": "f3e1f1b36fc7b15864189e978936e202299d1473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3e1f1b36fc7b15864189e978936e202299d1473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a5c46fb02b9124dc0bd5bafaccbd5a41121437e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a5c46fb02b9124dc0bd5bafaccbd5a41121437e", "html_url": "https://github.com/rust-lang/rust/commit/4a5c46fb02b9124dc0bd5bafaccbd5a41121437e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a5c46fb02b9124dc0bd5bafaccbd5a41121437e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "9c2539d08d807c563b0b623053fa446e9d48ef9b", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4a5c46fb02b9124dc0bd5bafaccbd5a41121437e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a5c46fb02b9124dc0bd5bafaccbd5a41121437e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=4a5c46fb02b9124dc0bd5bafaccbd5a41121437e", "patch": "@@ -31,7 +31,7 @@ use std::{mem, ptr};\n type Res = def::Res<NodeId>;\n \n /// Contains data for specific kinds of imports.\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub enum ImportKind<'a> {\n     Single {\n         /// `source` in `use prefix::source as target`.\n@@ -62,6 +62,44 @@ pub enum ImportKind<'a> {\n     MacroUse,\n }\n \n+/// Manually implement `Debug` for `ImportKind` because the `source/target_bindings`\n+/// contain `Cell`s which can introduce infinite loops while printing.\n+impl<'a> std::fmt::Debug for ImportKind<'a> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use ImportKind::*;\n+        match self {\n+            Single {\n+                ref source,\n+                ref target,\n+                ref type_ns_only,\n+                ref nested,\n+                ref additional_ids,\n+                // Ignore the following to avoid an infinite loop while printing.\n+                source_bindings: _,\n+                target_bindings: _,\n+            } => f\n+                .debug_struct(\"Single\")\n+                .field(\"source\", source)\n+                .field(\"target\", target)\n+                .field(\"type_ns_only\", type_ns_only)\n+                .field(\"nested\", nested)\n+                .field(\"additional_ids\", additional_ids)\n+                .finish(),\n+            Glob { ref is_prelude, ref max_vis } => f\n+                .debug_struct(\"Glob\")\n+                .field(\"is_prelude\", is_prelude)\n+                .field(\"max_vis\", max_vis)\n+                .finish(),\n+            ExternCrate { ref source, ref target } => f\n+                .debug_struct(\"ExternCrate\")\n+                .field(\"source\", source)\n+                .field(\"target\", target)\n+                .finish(),\n+            MacroUse => f.debug_struct(\"MacroUse\").finish(),\n+        }\n+    }\n+}\n+\n /// One import.\n #[derive(Debug, Clone)]\n pub(crate) struct Import<'a> {"}]}