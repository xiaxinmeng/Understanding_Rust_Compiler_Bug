{"sha": "5f6016f1259142de7ab1f186f412fa3ca26607a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNjAxNmYxMjU5MTQyZGU3YWIxZjE4NmY0MTJmYTNjYTI2NjA3YTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-06-04T19:22:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-06-04T20:44:28Z"}, "message": "Revert PRs 81238 and 82967 (which made copy and copy_nonoverlapping intrinsics).\n\nThis is to address issue 84297.", "tree": {"sha": "1384604bdae36a05efa7a73f3a1efd8bd7e53c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1384604bdae36a05efa7a73f3a1efd8bd7e53c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f6016f1259142de7ab1f186f412fa3ca26607a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6016f1259142de7ab1f186f412fa3ca26607a8", "html_url": "https://github.com/rust-lang/rust/commit/5f6016f1259142de7ab1f186f412fa3ca26607a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f6016f1259142de7ab1f186f412fa3ca26607a8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebfcd3256a6ec8655f0d9f45426d6f42a92da9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebfcd3256a6ec8655f0d9f45426d6f42a92da9c", "html_url": "https://github.com/rust-lang/rust/commit/cebfcd3256a6ec8655f0d9f45426d6f42a92da9c"}], "stats": {"total": 458, "additions": 192, "deletions": 266}, "files": [{"sha": "70ab27cbfac57172d489d784cd92268920195faa", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 186, "deletions": 151, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/5f6016f1259142de7ab1f186f412fa3ca26607a8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6016f1259142de7ab1f186f412fa3ca26607a8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=5f6016f1259142de7ab1f186f412fa3ca26607a8", "patch": "@@ -1742,157 +1742,6 @@ extern \"rust-intrinsic\" {\n     /// Allocate at compile time. Should not be called at runtime.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n-\n-    /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n-    /// and destination must *not* overlap.\n-    ///\n-    /// For regions of memory which might overlap, use [`copy`] instead.\n-    ///\n-    /// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n-    /// with the argument order swapped.\n-    ///\n-    /// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n-    ///\n-    /// # Safety\n-    ///\n-    /// Behavior is undefined if any of the following conditions are violated:\n-    ///\n-    /// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * Both `src` and `dst` must be properly aligned.\n-    ///\n-    /// * The region of memory beginning at `src` with a size of `count *\n-    ///   size_of::<T>()` bytes must *not* overlap with the region of memory\n-    ///   beginning at `dst` with the same size.\n-    ///\n-    /// Like [`read`], `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of\n-    /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using *both* the values\n-    /// in the region beginning at `*src` and the region beginning at `*dst` can\n-    /// [violate memory safety][read-ownership].\n-    ///\n-    /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n-    /// `0`, the pointers must be non-null and properly aligned.\n-    ///\n-    /// [`read`]: crate::ptr::read\n-    /// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n-    /// [valid]: crate::ptr#safety\n-    ///\n-    /// # Examples\n-    ///\n-    /// Manually implement [`Vec::append`]:\n-    ///\n-    /// ```\n-    /// use std::ptr;\n-    ///\n-    /// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n-    /// fn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n-    ///     let src_len = src.len();\n-    ///     let dst_len = dst.len();\n-    ///\n-    ///     // Ensure that `dst` has enough capacity to hold all of `src`.\n-    ///     dst.reserve(src_len);\n-    ///\n-    ///     unsafe {\n-    ///         // The call to offset is always safe because `Vec` will never\n-    ///         // allocate more than `isize::MAX` bytes.\n-    ///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n-    ///         let src_ptr = src.as_ptr();\n-    ///\n-    ///         // Truncate `src` without dropping its contents. We do this first,\n-    ///         // to avoid problems in case something further down panics.\n-    ///         src.set_len(0);\n-    ///\n-    ///         // The two regions cannot overlap because mutable references do\n-    ///         // not alias, and two different vectors cannot own the same\n-    ///         // memory.\n-    ///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n-    ///\n-    ///         // Notify `dst` that it now holds the contents of `src`.\n-    ///         dst.set_len(dst_len + src_len);\n-    ///     }\n-    /// }\n-    ///\n-    /// let mut a = vec!['r'];\n-    /// let mut b = vec!['u', 's', 't'];\n-    ///\n-    /// append(&mut a, &mut b);\n-    ///\n-    /// assert_eq!(a, &['r', 'u', 's', 't']);\n-    /// assert!(b.is_empty());\n-    /// ```\n-    ///\n-    /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n-    #[doc(alias = \"memcpy\")]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n-    pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n-\n-    /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n-    /// and destination may overlap.\n-    ///\n-    /// If the source and destination will *never* overlap,\n-    /// [`copy_nonoverlapping`] can be used instead.\n-    ///\n-    /// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n-    /// order swapped. Copying takes place as if the bytes were copied from `src`\n-    /// to a temporary array and then copied from the array to `dst`.\n-    ///\n-    /// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n-    ///\n-    /// # Safety\n-    ///\n-    /// Behavior is undefined if any of the following conditions are violated:\n-    ///\n-    /// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n-    ///\n-    /// * Both `src` and `dst` must be properly aligned.\n-    ///\n-    /// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n-    /// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the values\n-    /// in the region beginning at `*src` and the region beginning at `*dst` can\n-    /// [violate memory safety][read-ownership].\n-    ///\n-    /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n-    /// `0`, the pointers must be non-null and properly aligned.\n-    ///\n-    /// [`read`]: crate::ptr::read\n-    /// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n-    /// [valid]: crate::ptr#safety\n-    ///\n-    /// # Examples\n-    ///\n-    /// Efficiently create a Rust vector from an unsafe buffer:\n-    ///\n-    /// ```\n-    /// use std::ptr;\n-    ///\n-    /// /// # Safety\n-    /// ///\n-    /// /// * `ptr` must be correctly aligned for its type and non-zero.\n-    /// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n-    /// /// * Those elements must not be used after calling this function unless `T: Copy`.\n-    /// # #[allow(dead_code)]\n-    /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n-    ///     let mut dst = Vec::with_capacity(elts);\n-    ///\n-    ///     // SAFETY: Our precondition ensures the source is aligned and valid,\n-    ///     // and `Vec::with_capacity` ensures that we have usable space to write them.\n-    ///     ptr::copy(ptr, dst.as_mut_ptr(), elts);\n-    ///\n-    ///     // SAFETY: We created it with this much capacity earlier,\n-    ///     // and the previous `copy` has initialized these elements.\n-    ///     dst.set_len(elts);\n-    ///     dst\n-    /// }\n-    /// ```\n-    #[doc(alias = \"memmove\")]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n-    pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n }\n \n // Some functions are defined here because they accidentally got made\n@@ -1906,6 +1755,192 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr as usize % mem::align_of::<T>() == 0\n }\n \n+/// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n+/// and destination must *not* overlap.\n+///\n+/// For regions of memory which might overlap, use [`copy`] instead.\n+///\n+/// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n+/// with the argument order swapped.\n+///\n+/// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n+///\n+/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n+///\n+/// * Both `src` and `dst` must be properly aligned.\n+///\n+/// * The region of memory beginning at `src` with a size of `count *\n+///   size_of::<T>()` bytes must *not* overlap with the region of memory\n+///   beginning at `dst` with the same size.\n+///\n+/// Like [`read`], `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of\n+/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using *both* the values\n+/// in the region beginning at `*src` and the region beginning at `*dst` can\n+/// [violate memory safety][read-ownership].\n+///\n+/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n+/// `0`, the pointers must be non-null and properly aligned.\n+///\n+/// [`read`]: crate::ptr::read\n+/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n+/// [valid]: crate::ptr#safety\n+///\n+/// # Examples\n+///\n+/// Manually implement [`Vec::append`]:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n+/// fn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n+///     let src_len = src.len();\n+///     let dst_len = dst.len();\n+///\n+///     // Ensure that `dst` has enough capacity to hold all of `src`.\n+///     dst.reserve(src_len);\n+///\n+///     unsafe {\n+///         // The call to offset is always safe because `Vec` will never\n+///         // allocate more than `isize::MAX` bytes.\n+///         let dst_ptr = dst.as_mut_ptr().offset(dst_len as isize);\n+///         let src_ptr = src.as_ptr();\n+///\n+///         // Truncate `src` without dropping its contents. We do this first,\n+///         // to avoid problems in case something further down panics.\n+///         src.set_len(0);\n+///\n+///         // The two regions cannot overlap because mutable references do\n+///         // not alias, and two different vectors cannot own the same\n+///         // memory.\n+///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n+///\n+///         // Notify `dst` that it now holds the contents of `src`.\n+///         dst.set_len(dst_len + src_len);\n+///     }\n+/// }\n+///\n+/// let mut a = vec!['r'];\n+/// let mut b = vec!['u', 's', 't'];\n+///\n+/// append(&mut a, &mut b);\n+///\n+/// assert_eq!(a, &['r', 'u', 's', 't']);\n+/// assert!(b.is_empty());\n+/// ```\n+///\n+/// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n+#[doc(alias = \"memcpy\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[inline]\n+pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions)\n+        && !(is_aligned_and_not_null(src)\n+            && is_aligned_and_not_null(dst)\n+            && is_nonoverlapping(src, dst, count))\n+    {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }*/\n+\n+    // SAFETY: the safety contract for `copy_nonoverlapping` must be\n+    // upheld by the caller.\n+    unsafe { copy_nonoverlapping(src, dst, count) }\n+}\n+\n+/// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n+/// and destination may overlap.\n+///\n+/// If the source and destination will *never* overlap,\n+/// [`copy_nonoverlapping`] can be used instead.\n+///\n+/// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n+/// order swapped. Copying takes place as if the bytes were copied from `src`\n+/// to a temporary array and then copied from the array to `dst`.\n+///\n+/// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n+///\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n+///\n+/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n+///\n+/// * Both `src` and `dst` must be properly aligned.\n+///\n+/// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n+/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the values\n+/// in the region beginning at `*src` and the region beginning at `*dst` can\n+/// [violate memory safety][read-ownership].\n+///\n+/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n+/// `0`, the pointers must be non-null and properly aligned.\n+///\n+/// [`read`]: crate::ptr::read\n+/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n+/// [valid]: crate::ptr#safety\n+///\n+/// # Examples\n+///\n+/// Efficiently create a Rust vector from an unsafe buffer:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// /// # Safety\n+/// ///\n+/// /// * `ptr` must be correctly aligned for its type and non-zero.\n+/// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n+/// /// * Those elements must not be used after calling this function unless `T: Copy`.\n+/// # #[allow(dead_code)]\n+/// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n+///     let mut dst = Vec::with_capacity(elts);\n+///\n+///     // SAFETY: Our precondition ensures the source is aligned and valid,\n+///     // and `Vec::with_capacity` ensures that we have usable space to write them.\n+///     ptr::copy(ptr, dst.as_mut_ptr(), elts);\n+///\n+///     // SAFETY: We created it with this much capacity earlier,\n+///     // and the previous `copy` has initialized these elements.\n+///     dst.set_len(elts);\n+///     dst\n+/// }\n+/// ```\n+#[doc(alias = \"memmove\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+#[inline]\n+pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n+        fn copy<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n+        // Not panicking to keep codegen impact smaller.\n+        abort();\n+    }*/\n+\n+    // SAFETY: the safety contract for `copy` must be upheld by the caller.\n+    unsafe { copy(src, dst, count) }\n+}\n+\n /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n /// `val`.\n ///"}, {"sha": "6a6cee0911feacf5253d08294e70d0773646cbe0", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f6016f1259142de7ab1f186f412fa3ca26607a8/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6016f1259142de7ab1f186f412fa3ca26607a8/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=5f6016f1259142de7ab1f186f412fa3ca26607a8", "patch": "@@ -870,12 +870,17 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n+    // We are calling the intrinsics directly to avoid function calls in the generated code\n+    // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n+    extern \"rust-intrinsic\" {\n+        fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+    }\n+\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n     unsafe {\n         copy_nonoverlapping(&src as *const T, dst, 1);\n-        // We are calling the intrinsic directly to avoid function calls in the generated code.\n         intrinsics::forget(src);\n     }\n }"}, {"sha": "9dc595f37faaeb1488026123baa62321909fec08", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cebfcd3256a6ec8655f0d9f45426d6f42a92da9c/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebfcd3256a6ec8655f0d9f45426d6f42a92da9c/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=cebfcd3256a6ec8655f0d9f45426d6f42a92da9c", "patch": "@@ -1,45 +0,0 @@\n-// ignore-tidy-linelength\n-#![feature(const_mut_refs, const_intrinsic_copy, const_ptr_offset)]\n-use std::{ptr, mem};\n-\n-const COPY_ZERO: () = unsafe {\n-    // Since we are not copying anything, this should be allowed.\n-    let src = ();\n-    let mut dst = ();\n-    ptr::copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n-};\n-\n-const COPY_OOB_1: () = unsafe {\n-    let mut x = 0i32;\n-    let dangle = (&mut x as *mut i32).wrapping_add(10);\n-    // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-    ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n-    //~| memory access failed: pointer must be in-bounds\n-    //~| previously accepted\n-};\n-const COPY_OOB_2: () = unsafe {\n-    let x = 0i32;\n-    let dangle = (&x as *const i32).wrapping_add(10);\n-    // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-    ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n-    //~| memory access failed: pointer must be in-bounds\n-    //~| previously accepted\n-};\n-\n-const COPY_SIZE_OVERFLOW: () = unsafe {\n-    let x = 0;\n-    let mut y = 0;\n-    ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n-    //~| overflow computing total size of `copy`\n-    //~| previously accepted\n-};\n-const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n-    let x = 0;\n-    let mut y = 0;\n-    ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n-    //~| overflow computing total size of `copy_nonoverlapping`\n-    //~| previously accepted\n-};\n-\n-fn main() {\n-}"}, {"sha": "2736cdeac690e9c52440a08ce364ba5778b0fd03", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cebfcd3256a6ec8655f0d9f45426d6f42a92da9c/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cebfcd3256a6ec8655f0d9f45426d6f42a92da9c/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=cebfcd3256a6ec8655f0d9f45426d6f42a92da9c", "patch": "@@ -1,69 +0,0 @@\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:16:5\n-   |\n-LL | / const COPY_OOB_1: () = unsafe {\n-LL | |     let mut x = 0i32;\n-LL | |     let dangle = (&mut x as *mut i32).wrapping_add(10);\n-LL | |     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-LL | |     ptr::copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:24:5\n-   |\n-LL | / const COPY_OOB_2: () = unsafe {\n-LL | |     let x = 0i32;\n-LL | |     let dangle = (&x as *const i32).wrapping_add(10);\n-LL | |     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-LL | |     ptr::copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:32:5\n-   |\n-LL | / const COPY_SIZE_OVERFLOW: () = unsafe {\n-LL | |     let x = 0;\n-LL | |     let mut y = 0;\n-LL | |     ptr::copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:39:5\n-   |\n-LL | / const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n-LL | |     let x = 0;\n-LL | |     let mut y = 0;\n-LL | |     ptr::copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-\n-error: aborting due to 4 previous errors\n-"}]}