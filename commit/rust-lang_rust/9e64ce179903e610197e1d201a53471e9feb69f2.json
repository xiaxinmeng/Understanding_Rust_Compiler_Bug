{"sha": "9e64ce179903e610197e1d201a53471e9feb69f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjRjZTE3OTkwM2U2MTAxOTdlMWQyMDFhNTM0NzFlOWZlYjY5ZjI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-07-22T03:59:44Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-08-19T23:53:05Z"}, "message": "Parse try blocks with the try keyword instead of do catch placeholder", "tree": {"sha": "54c5857eb12273f67b7b92d03dff6cf3f5cfb4e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c5857eb12273f67b7b92d03dff6cf3f5cfb4e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e64ce179903e610197e1d201a53471e9feb69f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e64ce179903e610197e1d201a53471e9feb69f2", "html_url": "https://github.com/rust-lang/rust/commit/9e64ce179903e610197e1d201a53471e9feb69f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e64ce179903e610197e1d201a53471e9feb69f2/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c906093f93ca55994bded24fa0f9c99b8d1a681", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c906093f93ca55994bded24fa0f9c99b8d1a681", "html_url": "https://github.com/rust-lang/rust/commit/1c906093f93ca55994bded24fa0f9c99b8d1a681"}], "stats": {"total": 399, "additions": 123, "deletions": 276}, "files": [{"sha": "40df78d6bfd37736440877658e44a8680485d240", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -312,14 +312,14 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     );\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = try_block! {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = try_block! {\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;"}, {"sha": "3858aae3d5c3c89f82bc1e626190f03079a56535", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -21,7 +21,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(slice_sort_by_cached_key)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(catch_expr)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n@@ -61,6 +60,14 @@ extern crate rustc_apfloat;\n extern crate byteorder;\n extern crate core;\n \n+// Once we can use edition 2018 in the compiler,\n+// replace this with real try blocks.\n+macro_rules! try_block {\n+    ($($inside:tt)*) => (\n+        (||{ ::std::ops::Try::from_ok({ $($inside)* }) })()\n+    )\n+}\n+\n mod diagnostics;\n \n mod borrow_check;"}, {"sha": "465dad35ae312e97f729dedea4033e448f36f619", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -140,7 +140,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = try_block! {\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n@@ -156,7 +156,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     };\n \n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n-        let _: io::Result<()> = do catch {\n+        let _: io::Result<()> = try_block! {\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n             write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;"}, {"sha": "89537634ad9cc7855d28fa276a156598c9ee6f5b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -4461,7 +4461,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // In some cases, blocks have just one exit, but other blocks\n         // can be targeted by multiple breaks. This can happen both\n         // with labeled blocks as well as when we desugar\n-        // a `do catch { ... }` expression.\n+        // a `try { ... }` expression.\n         //\n         // Example 1:\n         //"}, {"sha": "f796c0e2e535b5f10f20a32fd0cd9cfecdaafd11", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -330,7 +330,7 @@ declare_features! (\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n-    // Allows the `catch {...}` expression\n+    // Allows the `try {...}` expression\n     (active, catch_expr, \"1.17.0\", Some(31436), None),\n \n     // Used to preserve symbols (see llvm.used)\n@@ -1735,7 +1735,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                   \"yield syntax is experimental\");\n             }\n             ast::ExprKind::TryBlock(_) => {\n-                gate_feature_post!(&self, catch_expr, e.span, \"`catch` expression is experimental\");\n+                gate_feature_post!(&self, catch_expr, e.span, \"`try` expression is experimental\");\n             }\n             ast::ExprKind::IfLet(ref pats, ..) | ast::ExprKind::WhileLet(ref pats, ..) => {\n                 if pats.len() > 1 {"}, {"sha": "2b0cfd14a3d5af0a4e8253c10b1464a8f54e0e5e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -2386,11 +2386,10 @@ impl<'a> Parser<'a> {\n                         BlockCheckMode::Unsafe(ast::UserProvided),\n                         attrs);\n                 }\n-                if self.is_catch_expr() {\n+                if self.is_try_block() {\n                     let lo = self.span;\n-                    assert!(self.eat_keyword(keywords::Do));\n-                    assert!(self.eat_keyword(keywords::Catch));\n-                    return self.parse_catch_expr(lo, attrs);\n+                    assert!(self.eat_keyword(keywords::Try));\n+                    return self.parse_try_block(lo, attrs);\n                 }\n                 if self.eat_keyword(keywords::Return) {\n                     if self.token.can_begin_expr() {\n@@ -3452,8 +3451,8 @@ impl<'a> Parser<'a> {\n             ExprKind::Async(capture_clause, ast::DUMMY_NODE_ID, body), attrs))\n     }\n \n-    /// Parse a `do catch {...}` expression (`do catch` token already eaten)\n-    fn parse_catch_expr(&mut self, span_lo: Span, mut attrs: ThinVec<Attribute>)\n+    /// Parse a `try {...}` expression (`try` token already eaten)\n+    fn parse_try_block(&mut self, span_lo: Span, mut attrs: ThinVec<Attribute>)\n         -> PResult<'a, P<Expr>>\n     {\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -4407,12 +4406,13 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    fn is_catch_expr(&mut self) -> bool {\n-        self.token.is_keyword(keywords::Do) &&\n-        self.look_ahead(1, |t| t.is_keyword(keywords::Catch)) &&\n-        self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace)) &&\n+    fn is_try_block(&mut self) -> bool {\n+        self.token.is_keyword(keywords::Try) &&\n+        self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) &&\n \n-        // prevent `while catch {} {}`, `if catch {} {} else {}`, etc.\n+        self.span.edition() >= Edition::Edition2018 &&\n+\n+        // prevent `while try {} {}`, `if try {} {} else {}`, etc.\n         !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }\n "}, {"sha": "14e7b08172b51ef5ec5cb1ce20baccb2cc099e6f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -2380,7 +2380,7 @@ impl<'a> State<'a> {\n                 self.s.word(\"?\")?\n             }\n             ast::ExprKind::TryBlock(ref blk) => {\n-                self.head(\"do catch\")?;\n+                self.head(\"try\")?;\n                 self.s.space()?;\n                 self.print_block_with_attrs(blk, attrs)?\n             }"}, {"sha": "364c640debb16caddb1319464945b64b75a5bf7d", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -609,7 +609,7 @@ impl CompilerDesugaringKind {\n         Symbol::intern(match self {\n             CompilerDesugaringKind::Async => \"async\",\n             CompilerDesugaringKind::QuestionMark => \"?\",\n-            CompilerDesugaringKind::TryBlock => \"do catch\",\n+            CompilerDesugaringKind::TryBlock => \"try block\",\n             CompilerDesugaringKind::ExistentialReturnType => \"existential type\",\n             CompilerDesugaringKind::ForLoop => \"for loop\",\n         })"}, {"sha": "8dfd8545af7a50cc1be71fe82ff449d1816dfc71", "filename": "src/test/compile-fail/try-block-bad-lifetime.rs", "status": "renamed", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftry-block-bad-lifetime.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n-// This test checks that borrows made and returned inside catch blocks are properly constrained\n+// This test checks that borrows made and returned inside try blocks are properly constrained\n pub fn main() {\n     {\n-        // Test that borrows returned from a catch block must be valid for the lifetime of the\n+        // Test that borrows returned from a try block must be valid for the lifetime of the\n         // result variable\n-        let _result: Result<(), &str> = do catch {\n+        let _result: Result<(), &str> = try {\n             let my_string = String::from(\"\");\n             let my_str: & str = & my_string;\n             //~^ ERROR `my_string` does not live long enough\n@@ -25,10 +27,10 @@ pub fn main() {\n     }\n \n     {\n-        // Test that borrows returned from catch blocks freeze their referent\n+        // Test that borrows returned from try blocks freeze their referent\n         let mut i = 5;\n         let k = &mut i;\n-        let mut j: Result<(), &mut i32> = do catch {\n+        let mut j: Result<(), &mut i32> = try {\n             Err(k) ?;\n             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n         };", "previous_filename": "src/test/ui/catch/catch-bad-lifetime.rs"}, {"sha": "9e555df8535e59f84a3a54ba009a60554fbc25f4", "filename": "src/test/compile-fail/try-block-bad-type.rs", "status": "renamed", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftry-block-bad-type.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,21 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n pub fn main() {\n-    let res: Result<u32, i32> = do catch {\n+    let res: Result<u32, i32> = try {\n         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n         5\n     };\n \n-    let res: Result<i32, i32> = do catch {\n+    let res: Result<i32, i32> = try {\n         \"\" //~ ERROR type mismatch\n     };\n \n-    let res: Result<i32, i32> = do catch { }; //~ ERROR type mismatch\n+    let res: Result<i32, i32> = try { }; //~ ERROR type mismatch\n \n-    let res: () = do catch { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n+    let res: () = try { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n \n-    let res: i32 = do catch { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n+    let res: i32 = try { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n }", "previous_filename": "src/test/ui/catch/catch-bad-type.rs"}, {"sha": "490b00a6f434b21bbca4d887411a3bd624a2742e", "filename": "src/test/compile-fail/try-block-in-match.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftry-block-in-match.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n fn main() {\n-    match do catch { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `do`\n+    match try { false } { _ => {} } //~ ERROR expected expression, found keyword `try`\n }", "previous_filename": "src/test/ui/catch/catch-in-match.rs"}, {"sha": "a949e778f389cb54785c04ed261ad5f5785ded4d", "filename": "src/test/compile-fail/try-block-in-while.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftry-block-in-while.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n fn main() {\n-    while do catch { false } {} //~ ERROR expected expression, found reserved keyword `do`\n+    while try { false } {} //~ ERROR expected expression, found keyword `try`\n }", "previous_filename": "src/test/ui/catch/catch-in-while.rs"}, {"sha": "db37a397c16adce432b2dcf415d95e7ca5e50506", "filename": "src/test/compile-fail/try-block-maybe-bad-lifetime.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-maybe-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-maybe-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftry-block-maybe-bad-lifetime.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n-// This test checks that borrows made and returned inside catch blocks are properly constrained\n+// This test checks that borrows made and returned inside try blocks are properly constrained\n pub fn main() {\n     {\n         // Test that a borrow which *might* be returned still freezes its referent\n         let mut i = 222;\n-        let x: Result<&i32, ()> = do catch {\n+        let x: Result<&i32, ()> = try {\n             Err(())?;\n             &i\n         };\n@@ -26,7 +28,7 @@ pub fn main() {\n \n     {\n         let x = String::new();\n-        let _y: Result<(), ()> = do catch {\n+        let _y: Result<(), ()> = try {\n             Err(())?;\n             ::std::mem::drop(x);\n         };\n@@ -38,7 +40,7 @@ pub fn main() {\n         // its referent\n         let mut i = 222;\n         let j;\n-        let x: Result<(), ()> = do catch {\n+        let x: Result<(), ()> = try {\n             Err(())?;\n             j = &i;\n         };", "previous_filename": "src/test/ui/catch/catch-maybe-bad-lifetime.rs"}, {"sha": "14544c6ea0ccc1dc00403ed220c4766e371379c9", "filename": "src/test/compile-fail/try-block-opt-init.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-opt-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fcompile-fail%2Ftry-block-opt-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftry-block-opt-init.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n fn use_val<T: Sized>(_x: T) {}\n \n pub fn main() {\n     let cfg_res;\n-    let _: Result<(), ()> = do catch {\n+    let _: Result<(), ()> = try {\n         Err(())?;\n         cfg_res = 5;\n         Ok::<(), ()>(())?;", "previous_filename": "src/test/ui/catch/catch-opt-init.rs"}, {"sha": "5f47cc8d7d554be42f5f8d4db1f7b165db950b0a", "filename": "src/test/run-pass/issue-45124.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Frun-pass%2Fissue-45124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Frun-pass%2Fissue-45124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-45124.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n fn main() {\n     let mut a = 0;\n     let () = {\n-        let _: Result<(), ()> = do catch {\n+        let _: Result<(), ()> = try {\n             let _ = Err(())?;\n             return\n         };"}, {"sha": "f2b017e94f08f43ae5370359902dd55631f8e305", "filename": "src/test/run-pass/try-block.rs", "status": "renamed", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Frun-pass%2Ftry-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Frun-pass%2Ftry-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-block.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n struct catch {}\n \n pub fn main() {\n-    let catch_result: Option<_> = do catch {\n+    let catch_result: Option<_> = try {\n         let x = 5;\n         x\n     };\n@@ -30,20 +32,20 @@ pub fn main() {\n         _ => {}\n     };\n \n-    let catch_err: Result<_, i32> = do catch {\n+    let catch_err: Result<_, i32> = try {\n         Err(22)?;\n         1\n     };\n     assert_eq!(catch_err, Err(22));\n \n-    let catch_okay: Result<i32, i32> = do catch {\n+    let catch_okay: Result<i32, i32> = try {\n         if false { Err(25)?; }\n         Ok::<(), i32>(())?;\n         28\n     };\n     assert_eq!(catch_okay, Ok(28));\n \n-    let catch_from_loop: Result<i32, i32> = do catch {\n+    let catch_from_loop: Result<i32, i32> = try {\n         for i in 0..10 {\n             if i < 5 { Ok::<i32, i32>(i)?; } else { Err(i)?; }\n         }\n@@ -52,28 +54,28 @@ pub fn main() {\n     assert_eq!(catch_from_loop, Err(5));\n \n     let cfg_init;\n-    let _res: Result<(), ()> = do catch {\n+    let _res: Result<(), ()> = try {\n         cfg_init = 5;\n     };\n     assert_eq!(cfg_init, 5);\n \n     let cfg_init_2;\n-    let _res: Result<(), ()> = do catch {\n+    let _res: Result<(), ()> = try {\n         cfg_init_2 = 6;\n         Err(())?;\n     };\n     assert_eq!(cfg_init_2, 6);\n \n     let my_string = \"test\".to_string();\n-    let res: Result<&str, ()> = do catch {\n+    let res: Result<&str, ()> = try {\n         // Unfortunately, deref doesn't fire here (#49356)\n         &my_string[..]\n     };\n     assert_eq!(res, Ok(\"test\"));\n \n-    let my_opt: Option<_> = do catch { () };\n+    let my_opt: Option<_> = try { () };\n     assert_eq!(my_opt, Some(()));\n \n-    let my_opt: Option<_> = do catch { };\n+    let my_opt: Option<_> = try { };\n     assert_eq!(my_opt, Some(()));\n }", "previous_filename": "src/test/run-pass/catch-expr.rs"}, {"sha": "dd1595f931511d3d8c3343cb803f60dbd72664ea", "filename": "src/test/ui/catch/catch-bad-lifetime.nll.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.nll.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,39 +0,0 @@\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:33:13\n-   |\n-LL |         let k = &mut i;\n-   |                 ------ borrow of `i` occurs here\n-...\n-LL |             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n-   |             ^^^^^^ assignment to borrowed `i` occurs here\n-LL |         };\n-LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n-   |                          - borrow later used here\n-\n-error[E0382]: use of moved value: `k`\n-  --> $DIR/catch-bad-lifetime.rs:35:26\n-   |\n-LL |             Err(k) ?;\n-   |                 - value moved here\n-...\n-LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n-   |                          ^ value used here after move\n-   |\n-   = note: move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n-\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:36:9\n-   |\n-LL |         let k = &mut i;\n-   |                 ------ borrow of `i` occurs here\n-...\n-LL |         i = 40; //~ ERROR cannot assign to `i` because it is borrowed\n-   |         ^^^^^^ assignment to borrowed `i` occurs here\n-LL | \n-LL |         let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic ! (\"\") };\n-   |                                         - borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0382, E0506.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "2ea54d1fb24dbdce63f4edecd4e633aaa987b873", "filename": "src/test/ui/catch/catch-bad-lifetime.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-lifetime.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,44 +0,0 @@\n-error[E0597]: `my_string` does not live long enough\n-  --> $DIR/catch-bad-lifetime.rs:20:35\n-   |\n-LL |             let my_str: & str = & my_string;\n-   |                                   ^^^^^^^^^ borrowed value does not live long enough\n-...\n-LL |         };\n-   |         - `my_string` dropped here while still borrowed\n-LL |     }\n-   |     - borrowed value needs to live until here\n-\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:33:13\n-   |\n-LL |         let k = &mut i;\n-   |                      - borrow of `i` occurs here\n-...\n-LL |             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n-   |             ^^^^^^ assignment to borrowed `i` occurs here\n-\n-error[E0382]: use of moved value: `k`\n-  --> $DIR/catch-bad-lifetime.rs:35:26\n-   |\n-LL |             Err(k) ?;\n-   |                 - value moved here\n-...\n-LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n-   |                          ^ value used here after move\n-   |\n-   = note: move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n-\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-bad-lifetime.rs:36:9\n-   |\n-LL |         let k = &mut i;\n-   |                      - borrow of `i` occurs here\n-...\n-LL |         i = 40; //~ ERROR cannot assign to `i` because it is borrowed\n-   |         ^^^^^^ assignment to borrowed `i` occurs here\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0382, E0506, E0597.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "2ab5b3e31768cdedbf87ebecc81f7348ba0a32a6", "filename": "src/test/ui/catch/catch-bad-type.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-bad-type.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,52 +0,0 @@\n-error[E0277]: the trait bound `i32: std::convert::From<&str>` is not satisfied\n-  --> $DIR/catch-bad-type.rs:15:9\n-   |\n-LL |         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n-   |         ^^^^^^^^ the trait `std::convert::From<&str>` is not implemented for `i32`\n-   |\n-   = help: the following implementations were found:\n-             <i32 as std::convert::From<bool>>\n-             <i32 as std::convert::From<i16>>\n-             <i32 as std::convert::From<i8>>\n-             <i32 as std::convert::From<u16>>\n-             <i32 as std::convert::From<u8>>\n-   = note: required by `std::convert::From::from`\n-\n-error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == &str`\n-  --> $DIR/catch-bad-type.rs:20:9\n-   |\n-LL |         \"\" //~ ERROR type mismatch\n-   |         ^^ expected i32, found &str\n-   |\n-   = note: expected type `i32`\n-              found type `&str`\n-\n-error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == ()`\n-  --> $DIR/catch-bad-type.rs:23:44\n-   |\n-LL |     let res: Result<i32, i32> = do catch { }; //~ ERROR type mismatch\n-   |                                            ^ expected i32, found ()\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n-\n-error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/catch-bad-type.rs:25:28\n-   |\n-LL |     let res: () = do catch { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n-   |                            ^^^ the trait `std::ops::Try` is not implemented for `()`\n-   |\n-   = note: required by `std::ops::Try::from_ok`\n-\n-error[E0277]: the trait bound `i32: std::ops::Try` is not satisfied\n-  --> $DIR/catch-bad-type.rs:27:29\n-   |\n-LL |     let res: i32 = do catch { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n-   |                             ^^^^^ the trait `std::ops::Try` is not implemented for `i32`\n-   |\n-   = note: required by `std::ops::Try::from_ok`\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors occurred: E0271, E0277.\n-For more information about an error, try `rustc --explain E0271`."}, {"sha": "1542989cc359a2b9b38cd97cf6697164ee87dee2", "filename": "src/test/ui/catch/catch-in-match.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-match.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,8 +0,0 @@\n-error: expected expression, found reserved keyword `do`\n-  --> $DIR/catch-in-match.rs:14:11\n-   |\n-LL |     match do catch { false } { _ => {} } //~ ERROR expected expression, found reserved keyword `do`\n-   |           ^^ expected expression\n-\n-error: aborting due to previous error\n-"}, {"sha": "9316bbcd4bcfbf1cd9b2fc56bd951ccefe5387a1", "filename": "src/test/ui/catch/catch-in-while.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-in-while.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,8 +0,0 @@\n-error: expected expression, found reserved keyword `do`\n-  --> $DIR/catch-in-while.rs:14:11\n-   |\n-LL |     while do catch { false } {} //~ ERROR expected expression, found reserved keyword `do`\n-   |           ^^ expected expression\n-\n-error: aborting due to previous error\n-"}, {"sha": "157793160ce4ee288abcc2d07eaec404da5fe525", "filename": "src/test/ui/catch/catch-maybe-bad-lifetime.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.nll.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,14 +0,0 @@\n-error[E0382]: borrow of moved value: `x`\n-  --> $DIR/catch-maybe-bad-lifetime.rs:33:24\n-   |\n-LL |             ::std::mem::drop(x);\n-   |                              - value moved here\n-LL |         };\n-LL |         println!(\"{}\", x); //~ ERROR use of moved value: `x`\n-   |                        ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "21fe1049f436eea83a093256dfd1dec6d10cf15b", "filename": "src/test/ui/catch/catch-maybe-bad-lifetime.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-maybe-bad-lifetime.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,33 +0,0 @@\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-maybe-bad-lifetime.rs:23:9\n-   |\n-LL |             &i\n-   |              - borrow of `i` occurs here\n-...\n-LL |         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n-   |         ^^^^^ assignment to borrowed `i` occurs here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/catch-maybe-bad-lifetime.rs:33:24\n-   |\n-LL |             ::std::mem::drop(x);\n-   |                              - value moved here\n-LL |         };\n-LL |         println!(\"{}\", x); //~ ERROR use of moved value: `x`\n-   |                        ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n-\n-error[E0506]: cannot assign to `i` because it is borrowed\n-  --> $DIR/catch-maybe-bad-lifetime.rs:45:9\n-   |\n-LL |             j = &i;\n-   |                  - borrow of `i` occurs here\n-LL |         };\n-LL |         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n-   |         ^^^^^ assignment to borrowed `i` occurs here\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0382, E0506.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "ea8c8ebdcb7af0f03861126ab3647c6b03db705c", "filename": "src/test/ui/catch/catch-opt-init.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.nll.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,11 +0,0 @@\n-error[E0381]: borrow of possibly uninitialized variable: `cfg_res`\n-  --> $DIR/catch-opt-init.rs:23:5\n-   |\n-LL |     assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly uninitialized `cfg_res`\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "6a14ba17f9e806b4360d9d7eac32b6945861c3e9", "filename": "src/test/ui/catch/catch-opt-init.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c906093f93ca55994bded24fa0f9c99b8d1a681/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch%2Fcatch-opt-init.stderr?ref=1c906093f93ca55994bded24fa0f9c99b8d1a681", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly uninitialized variable: `cfg_res`\n-  --> $DIR/catch-opt-init.rs:23:16\n-   |\n-LL |     assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable\n-   |                ^^^^^^^ use of possibly uninitialized `cfg_res`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "6536280c71f09ecd027106da48d7c4c2b4108c30", "filename": "src/test/ui/feature-gates/feature-gate-catch_expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n pub fn main() {\n-    let catch_result = do catch { //~ ERROR `catch` expression is experimental\n+    let try_result: Option<_> = try { //~ ERROR `try` expression is experimental\n         let x = 5;\n         x\n     };\n-    assert_eq!(catch_result, 5);\n+    assert_eq!(try_result, Some(5));\n }"}, {"sha": "4842215d51a5796d127daf07b7e368caee335c3e", "filename": "src/test/ui/feature-gates/feature-gate-catch_expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-catch_expr.stderr?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: `catch` expression is experimental (see issue #31436)\n-  --> $DIR/feature-gate-catch_expr.rs:12:24\n+error[E0658]: `try` expression is experimental (see issue #31436)\n+  --> $DIR/feature-gate-catch_expr.rs:14:33\n    |\n-LL |       let catch_result = do catch { //~ ERROR `catch` expression is experimental\n-   |  ________________________^\n+LL |       let try_result: Option<_> = try { //~ ERROR `try` expression is experimental\n+   |  _________________________________^\n LL | |         let x = 5;\n LL | |         x\n LL | |     };"}, {"sha": "64485bb8318f1754493625697ef0bad27fd14fe1", "filename": "src/test/ui/try-block-in-edition2015.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-in-edition2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-in-edition2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block-in-edition2015.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --edition 2015\n+\n+pub fn main() {\n+    let try_result: Option<_> = try {\n+    //~^ ERROR expected struct, variant or union type, found macro `try`\n+        let x = 5; //~ ERROR expected identifier, found keyword\n+        x\n+    };\n+    assert_eq!(try_result, Some(5));\n+}"}, {"sha": "7e6d515e111d060cf3bb967869f4ef2057933270", "filename": "src/test/ui/try-block-in-edition2015.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block-in-edition2015.stderr?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -0,0 +1,18 @@\n+error: expected identifier, found keyword `let`\n+  --> $DIR/try-block-in-edition2015.rs:16:9\n+   |\n+LL |     let try_result: Option<_> = try {\n+   |                                 --- while parsing this struct\n+LL |     //~^ ERROR expected struct, variant or union type, found macro `try`\n+LL |         let x = 5; //~ ERROR expected identifier, found keyword\n+   |         ^^^ expected identifier, found keyword\n+\n+error[E0574]: expected struct, variant or union type, found macro `try`\n+  --> $DIR/try-block-in-edition2015.rs:14:33\n+   |\n+LL |     let try_result: Option<_> = try {\n+   |                                 ^^^ did you mean `try!(...)`?\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0574`."}, {"sha": "58b35e4630210de3f5cbf9ec93a82b86ba0f9d28", "filename": "src/test/ui/try-block-type-error.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block-type-error.rs?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![feature(catch_expr)]\n \n fn foo() -> Option<()> { Some(()) }\n \n fn main() {\n-    let _: Option<f32> = do catch {\n+    let _: Option<f32> = try {\n         foo()?;\n         42\n         //~^ ERROR type mismatch\n     };\n \n-    let _: Option<i32> = do catch {\n+    let _: Option<i32> = try {\n         foo()?;\n     };\n     //~^ ERROR type mismatch", "previous_filename": "src/test/ui/catch/catch-block-type-error.rs"}, {"sha": "3b67e92ec61bf0dcf871d48648c4cede5f1c7307", "filename": "src/test/ui/try-block-type-error.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e64ce179903e610197e1d201a53471e9feb69f2/src%2Ftest%2Fui%2Ftry-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block-type-error.stderr?ref=9e64ce179903e610197e1d201a53471e9feb69f2", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<std::option::Option<f32> as std::ops::Try>::Ok == {integer}`\n-  --> $DIR/catch-block-type-error.rs:18:9\n+  --> $DIR/try-block-type-error.rs:20:9\n    |\n LL |         42\n    |         ^^\n@@ -11,7 +11,7 @@ LL |         42\n               found type `{integer}`\n \n error[E0271]: type mismatch resolving `<std::option::Option<i32> as std::ops::Try>::Ok == ()`\n-  --> $DIR/catch-block-type-error.rs:24:5\n+  --> $DIR/try-block-type-error.rs:26:5\n    |\n LL |     };\n    |     ^ expected i32, found ()", "previous_filename": "src/test/ui/catch/catch-block-type-error.stderr"}]}