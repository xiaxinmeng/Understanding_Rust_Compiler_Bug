{"sha": "54c76e6e8193e96b2ca15542f916a7520cfaa75f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0Yzc2ZTZlODE5M2U5NmIyY2ExNTU0MmY5MTZhNzUyMGNmYWE3NWY=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T19:55:17Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T20:49:41Z"}, "message": "Fix an ICE when using struct patterns with traits\n\nFixes #18986.", "tree": {"sha": "155df15656dbd169f5210e30998c44ba3f716c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/155df15656dbd169f5210e30998c44ba3f716c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c76e6e8193e96b2ca15542f916a7520cfaa75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c76e6e8193e96b2ca15542f916a7520cfaa75f", "html_url": "https://github.com/rust-lang/rust/commit/54c76e6e8193e96b2ca15542f916a7520cfaa75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c76e6e8193e96b2ca15542f916a7520cfaa75f/comments", "author": null, "committer": null, "parents": [{"sha": "f09279395b6ca40f1398277971586197f949738a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f09279395b6ca40f1398277971586197f949738a", "html_url": "https://github.com/rust-lang/rust/commit/f09279395b6ca40f1398277971586197f949738a"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "b5dafdb18076680efdd3e313b32e957555f59cb4", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54c76e6e8193e96b2ca15542f916a7520cfaa75f/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c76e6e8193e96b2ca15542f916a7520cfaa75f/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=54c76e6e8193e96b2ca15542f916a7520cfaa75f", "patch": "@@ -143,5 +143,6 @@ register_diagnostics!(\n     E0164,\n     E0165,\n     E0166,\n-    E0167\n+    E0167,\n+    E0168\n )"}, {"sha": "a79edf28b3617583204be72b0aab22993f1fcdb1", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/54c76e6e8193e96b2ca15542f916a7520cfaa75f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c76e6e8193e96b2ca15542f916a7520cfaa75f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=54c76e6e8193e96b2ca15542f916a7520cfaa75f", "patch": "@@ -297,22 +297,38 @@ pub fn check_pat_struct(pcx: &pat_ctxt, pat: &ast::Pat,\n     let tcx = pcx.fcx.ccx.tcx;\n \n     let def = tcx.def_map.borrow()[pat.id].clone();\n-    let def_type = ty::lookup_item_type(tcx, def.def_id());\n-    let (enum_def_id, variant_def_id) = match ty::get(def_type.ty).sty {\n-        ty::ty_struct(struct_def_id, _) =>\n-            (struct_def_id, struct_def_id),\n-        ty::ty_enum(enum_def_id, _) if def == def::DefVariant(enum_def_id, def.def_id(), true) =>\n-            (enum_def_id, def.def_id()),\n-        _ => {\n+    let (enum_def_id, variant_def_id) = match def {\n+        def::DefTrait(_) => {\n             let name = pprust::path_to_string(path);\n-            span_err!(tcx.sess, pat.span, E0163,\n-                \"`{}` does not name a struct or a struct variant\", name);\n+            span_err!(tcx.sess, pat.span, E0168,\n+                \"use of trait `{}` in a struct pattern\", name);\n             fcx.write_error(pat.id);\n \n             for field in fields.iter() {\n                 check_pat(pcx, &*field.node.pat, ty::mk_err());\n             }\n             return;\n+        },\n+        _ => {\n+            let def_type = ty::lookup_item_type(tcx, def.def_id());\n+            match ty::get(def_type.ty).sty {\n+                ty::ty_struct(struct_def_id, _) =>\n+                    (struct_def_id, struct_def_id),\n+                ty::ty_enum(enum_def_id, _)\n+                    if def == def::DefVariant(enum_def_id, def.def_id(), true) =>\n+                    (enum_def_id, def.def_id()),\n+                _ => {\n+                    let name = pprust::path_to_string(path);\n+                    span_err!(tcx.sess, pat.span, E0163,\n+                        \"`{}` does not name a struct or a struct variant\", name);\n+                    fcx.write_error(pat.id);\n+\n+                    for field in fields.iter() {\n+                        check_pat(pcx, &*field.node.pat, ty::mk_err());\n+                    }\n+                    return;\n+                }\n+            }\n         }\n     };\n "}, {"sha": "25d78c273e77a33537c7161df5faf4c467c5626c", "filename": "src/test/compile-fail-fulldeps/issue-18986.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54c76e6e8193e96b2ca15542f916a7520cfaa75f/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c76e6e8193e96b2ca15542f916a7520cfaa75f/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs?ref=54c76e6e8193e96b2ca15542f916a7520cfaa75f", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:use_from_trait_xc.rs\n+\n+extern crate use_from_trait_xc;\n+pub use use_from_trait_xc::Trait;\n+\n+fn main() {\n+    match () {\n+        Trait { x: 42u } => () //~ ERROR use of trait `Trait` in a struct pattern\n+    }\n+}"}]}