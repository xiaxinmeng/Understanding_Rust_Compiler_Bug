{"sha": "0ff89deb6973be35848380be28c4a23063af8768", "node_id": "C_kwDOAAsO6NoAKDBmZjg5ZGViNjk3M2JlMzU4NDgzODBiZTI4YzRhMjMwNjNhZjg3Njg", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-10-13T13:08:40Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-10-13T16:05:09Z"}, "message": "Add basic support for delegation", "tree": {"sha": "79ed6cafb8be09806b2d47f6b8d5cce6bd402388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79ed6cafb8be09806b2d47f6b8d5cce6bd402388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff89deb6973be35848380be28c4a23063af8768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff89deb6973be35848380be28c4a23063af8768", "html_url": "https://github.com/rust-lang/rust/commit/0ff89deb6973be35848380be28c4a23063af8768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff89deb6973be35848380be28c4a23063af8768/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1619fa9d8f80a4d00f71a6674835aa88dbc6c9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1619fa9d8f80a4d00f71a6674835aa88dbc6c9e4", "html_url": "https://github.com/rust-lang/rust/commit/1619fa9d8f80a4d00f71a6674835aa88dbc6c9e4"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "de59cb96130e2073570d70fded229f85b6f0eddb", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0ff89deb6973be35848380be28c4a23063af8768", "patch": "@@ -3007,3 +3007,9 @@ impl HasCrate for Function {\n         self.module(db).krate()\n     }\n }\n+\n+impl HasCrate for Type {\n+    fn krate(&self, _db: &dyn HirDatabase) -> Crate {\n+        self.krate.into()\n+    }\n+}"}, {"sha": "396c7092379e10933db93b1b0ede2f6119d1c0fb", "filename": "crates/ide_assists/src/handlers/generate_delegate.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs?ref=0ff89deb6973be35848380be28c4a23063af8768", "patch": "@@ -0,0 +1,149 @@\n+use hir::{self, HasCrate, HirDisplay};\n+use stdx::format_to;\n+use syntax::ast::{self, AstNode, HasName, HasVisibility};\n+\n+use crate::{\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n+};\n+\n+// Assist: generate_setter\n+//\n+// Generate a setter method.\n+//\n+// ```\n+// struct Person {\n+//     nam$0e: String,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Person {\n+//     name: String,\n+// }\n+//\n+// impl Person {\n+//     /// Set the person's name.\n+//     fn set_name(&mut self, name: String) {\n+//         self.name = name;\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+\n+    let field_name = field.name()?;\n+    let field_ty = field.ty()?;\n+\n+    let sema_field_ty = ctx.sema.resolve_type(&field_ty)?;\n+    let krate = sema_field_ty.krate(ctx.db());\n+    let mut methods = vec![];\n+    sema_field_ty.iterate_assoc_items(ctx.db(), krate, |item| {\n+        if let hir::AssocItem::Function(f) = item {\n+            if f.self_param(ctx.db()).is_some() {\n+                methods.push(f)\n+            }\n+        }\n+        Some(())\n+    });\n+\n+    let target = field_ty.syntax().text_range();\n+    for method in methods {\n+        let impl_def = find_struct_impl(\n+            ctx,\n+            &ast::Adt::Struct(strukt.clone()),\n+            &method.name(ctx.db()).to_string(),\n+        )?;\n+        acc.add_group(\n+            &GroupLabel(\"Generate delegate\".to_owned()),\n+            AssistId(\"generate_delegate\", AssistKind::Generate),\n+            format!(\"Generate a delegate method for '{}'\", method.name(ctx.db())),\n+            target,\n+            |builder| {\n+                let mut buf = String::with_capacity(512);\n+\n+                let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+                let return_type = method.ret_type(ctx.db());\n+                let return_type = if return_type.is_unit() || return_type.is_unknown() {\n+                    String::new()\n+                } else {\n+                    let module = match ctx.sema.scope(strukt.syntax()).module() {\n+                        Some(m) => m,\n+                        None => return,\n+                    };\n+                    match return_type.display_source_code(ctx.db(), module.into()) {\n+                        Ok(rt) => format!(\"-> {}\", rt),\n+                        Err(_) => return,\n+                    }\n+                };\n+\n+                format_to!(\n+                    buf,\n+                    \"{}fn {}(&self) {} {{\n+                    self.{}.{}()\n+                }}\",\n+                    vis,\n+                    method.name(ctx.db()),\n+                    return_type,\n+                    field_name,\n+                    method.name(ctx.db())\n+                );\n+\n+                let start_offset = impl_def\n+                    .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n+                    .unwrap_or_else(|| {\n+                        buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n+                        strukt.syntax().text_range().end()\n+                    });\n+\n+                builder.insert(start_offset, buf);\n+            },\n+        )?;\n+    }\n+    Some(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_generate_setter_from_field() {\n+        check_assist(\n+            generate_delegate,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+        \n+    }\n+}\n+\n+struct Person {\n+    ag$0e: Age,\n+}\n+\"#,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+\n+struct Person {\n+    age: Age,\n+}\n+\n+impl Person {\n+    fn age(&self) -> u8 {\n+        self.age.age()\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "e6a85e68d3309179fd5b791b5d954a93ad6851d2", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=0ff89deb6973be35848380be28c4a23063af8768", "patch": "@@ -144,6 +144,7 @@ mod handlers {\n     mod generate_is_empty_from_len;\n     mod generate_new;\n     mod generate_setter;\n+    mod generate_delegate;\n     mod add_return_type;\n     mod inline_call;\n     mod inline_local_variable;\n@@ -210,6 +211,7 @@ mod handlers {\n             generate_constant::generate_constant,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n+            generate_delegate::generate_delegate,\n             generate_deref::generate_deref,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,"}, {"sha": "d428044450bc3eaeb718e4ebf572c217bb8a64f7", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff89deb6973be35848380be28c4a23063af8768/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=0ff89deb6973be35848380be28c4a23063af8768", "patch": "@@ -124,6 +124,10 @@ pub fn assoc_item_list() -> ast::AssocItemList {\n     ast_from_text(\"impl C for D {}\")\n }\n \n+pub fn impl_(ty: ast::Path) -> ast::Impl {\n+    ast_from_text(&format!(\"impl {} {{}}\", ty))\n+}\n+\n pub fn impl_trait(trait_: ast::Path, ty: ast::Path) -> ast::Impl {\n     ast_from_text(&format!(\"impl {} for {} {{}}\", trait_, ty))\n }"}]}