{"sha": "dddee23f43a0e1939124a607ba534e69a810843a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGVlMjNmNDNhMGUxOTM5MTI0YTYwN2JhNTM0ZTY5YTgxMDg0M2E=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-19T04:45:07Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-19T04:45:07Z"}, "message": "Add std::ops::Index support for infering", "tree": {"sha": "02fd55e52fcd54b43f218303b9a9fc2fd7d623b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02fd55e52fcd54b43f218303b9a9fc2fd7d623b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddee23f43a0e1939124a607ba534e69a810843a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddee23f43a0e1939124a607ba534e69a810843a", "html_url": "https://github.com/rust-lang/rust/commit/dddee23f43a0e1939124a607ba534e69a810843a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddee23f43a0e1939124a607ba534e69a810843a/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242f0ae1d8e6766091a6050431c3d417a43a2a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/242f0ae1d8e6766091a6050431c3d417a43a2a3e", "html_url": "https://github.com/rust-lang/rust/commit/242f0ae1d8e6766091a6050431c3d417a43a2a3e"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "9e37ac41663c807c1f2590cf528a7af0acf54cf2", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=dddee23f43a0e1939124a607ba534e69a810843a", "patch": "@@ -254,6 +254,7 @@ macro_rules! __known_path {\n     (std::ops::Try) => {};\n     (std::ops::Neg) => {};\n     (std::ops::Not) => {};\n+    (std::ops::Index) => {};\n     ($path:path) => {\n         compile_error!(\"Please register your known path in the path module\")\n     };"}, {"sha": "fd02ffa4e12d1ce197771545d31506c354bb6cd6", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=dddee23f43a0e1939124a607ba534e69a810843a", "patch": "@@ -161,6 +161,7 @@ pub mod known {\n         Range,\n         Neg,\n         Not,\n+        Index,\n         // Builtin macros\n         file,\n         column,"}, {"sha": "14bfdde3dd9c8f49784f5ba85749192ee91e4ed0", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=dddee23f43a0e1939124a607ba534e69a810843a", "patch": "@@ -363,14 +363,28 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_associated_type(&mut self, inner_ty: Ty, assoc_ty: Option<TypeAliasId>) -> Ty {\n+        self.resolve_associated_type_with_params(inner_ty, assoc_ty, &[])\n+    }\n+\n+    fn resolve_associated_type_with_params(\n+        &mut self,\n+        inner_ty: Ty,\n+        assoc_ty: Option<TypeAliasId>,\n+        params: &[Ty],\n+    ) -> Ty {\n         match assoc_ty {\n             Some(res_assoc_ty) => {\n                 let ty = self.table.new_type_var();\n+                let mut builder = Substs::builder(1 + params.len()).push(inner_ty);\n+                for ty in params {\n+                    builder = builder.push(ty.clone());\n+                }\n+\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n                     projection_ty: ProjectionTy {\n                         associated_ty: res_assoc_ty,\n-                        parameters: Substs::single(inner_ty),\n+                        parameters: builder.build(),\n                     },\n                 };\n                 self.obligations.push(Obligation::Projection(projection));\n@@ -517,6 +531,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n         Some(struct_.into())\n     }\n+\n+    fn resolve_ops_index_output(&self) -> Option<TypeAliasId> {\n+        let path = path![std::ops::Index];\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n+    }\n }\n \n /// The kinds of placeholders we need during type inference. There's separate"}, {"sha": "011c6c5c6a924196f164621e5e732abafee5f5d8", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=dddee23f43a0e1939124a607ba534e69a810843a", "patch": "@@ -422,10 +422,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n             }\n             Expr::Index { base, index } => {\n-                let _base_ty = self.infer_expr_inner(*base, &Expectation::none());\n-                let _index_ty = self.infer_expr(*index, &Expectation::none());\n-                // FIXME: use `std::ops::Index::Output` to figure out the real return type\n-                Ty::Unknown\n+                let base_ty = self.infer_expr_inner(*base, &Expectation::none());\n+                let index_ty = self.infer_expr(*index, &Expectation::none());\n+\n+                self.resolve_associated_type_with_params(\n+                    base_ty,\n+                    self.resolve_ops_index_output(),\n+                    &[index_ty],\n+                )\n             }\n             Expr::Tuple { exprs } => {\n                 let mut tys = match &expected.ty {"}, {"sha": "2d92a5eec266040ddf66c05234c6e6f804420ef1", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddee23f43a0e1939124a607ba534e69a810843a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=dddee23f43a0e1939124a607ba534e69a810843a", "patch": "@@ -426,6 +426,38 @@ fn indexing_arrays() {\n     )\n }\n \n+#[test]\n+fn infer_ops_index() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+\n+struct Bar;\n+struct Foo;\n+\n+impl std::ops::Index<u32> for Bar {\n+    type Output = Foo;\n+}\n+\n+fn test() {\n+    let a = Bar;\n+    let b = a[1];\n+    b<|>;\n+}\n+\n+//- /std.rs crate:std\n+\n+#[prelude_import] use ops::*;\n+mod ops {\n+    pub trait Index<Idx> {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+    assert_eq!(\"Foo\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn deref_trait() {\n     let t = type_at("}]}