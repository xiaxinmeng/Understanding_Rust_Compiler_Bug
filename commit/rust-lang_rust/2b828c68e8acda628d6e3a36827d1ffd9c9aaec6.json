{"sha": "2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiODI4YzY4ZThhY2RhNjI4ZDZlM2EzNjgyN2QxZmZkOWM5YWFlYzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-14T08:20:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-14T08:20:09Z"}, "message": "separete structure from symbols", "tree": {"sha": "e63ec3bb469eaaf996bbc45c038e66395c04ed23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e63ec3bb469eaaf996bbc45c038e66395c04ed23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "html_url": "https://github.com/rust-lang/rust/commit/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49ab44102496ac8c4a05b00c584adecf583f4d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/49ab44102496ac8c4a05b00c584adecf583f4d87", "html_url": "https://github.com/rust-lang/rust/commit/49ab44102496ac8c4a05b00c584adecf583f4d87"}], "stats": {"total": 170, "additions": 131, "deletions": 39}, "files": [{"sha": "fc28691fc9789bd1b207af09771fefee219f7911", "filename": "crates/cli/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Fcli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Fcli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcli%2Fsrc%2Fmain.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -10,7 +10,7 @@ use std::{\n };\n use clap::{App, Arg, SubCommand};\n use tools::collect_tests;\n-use libeditor::{File, syntax_tree, file_symbols};\n+use libeditor::{File, syntax_tree, file_structure};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -51,7 +51,7 @@ fn main() -> Result<()> {\n         }\n         (\"symbols\", _) => {\n             let file = file()?;\n-            for s in file_symbols(&file) {\n+            for s in file_structure(&file) {\n                 println!(\"{:?}\", s);\n             }\n         }"}, {"sha": "b40db2c66f5916b6540b75588019129c108917a9", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -19,7 +19,7 @@ pub use libsyntax2::{File, TextRange, TextUnit};\n pub use self::{\n     line_index::{LineIndex, LineCol},\n     extend_selection::extend_selection,\n-    symbols::{FileSymbol, file_symbols},\n+    symbols::{StructureNode, file_structure, FileSymbol, file_symbols},\n     edit::{EditBuilder, Edit, AtomEdit},\n     code_actions::{flip_comma},\n };"}, {"sha": "43f4164dadaedf9965d18bbe0f97b410d6f12dac", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -4,30 +4,66 @@ use libsyntax2::{\n     ast::{self, NameOwner},\n     algo::{\n         visit::{visitor, Visitor},\n-        walk::{walk, WalkEvent},\n+        walk::{walk, WalkEvent, preorder},\n     },\n+    SyntaxKind::*,\n };\n use TextRange;\n \n #[derive(Debug)]\n-pub struct FileSymbol {\n+pub struct StructureNode {\n     pub parent: Option<usize>,\n-    pub name: SmolStr,\n-    pub name_range: TextRange,\n+    pub label: String,\n+    pub navigation_range: TextRange,\n     pub node_range: TextRange,\n     pub kind: SyntaxKind,\n }\n \n+#[derive(Debug)]\n+pub struct FileSymbol {\n+    pub name: SmolStr,\n+    pub node_range: TextRange,\n+    pub kind: SyntaxKind,\n+}\n \n pub fn file_symbols(file: &ast::File) -> Vec<FileSymbol> {\n+    let syntax = file.syntax();\n+    preorder(syntax.as_ref())\n+        .filter_map(to_symbol)\n+        .collect()\n+}\n+\n+fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n+    fn decl<'a, N: NameOwner<&'a SyntaxRoot>>(node: N) -> Option<FileSymbol> {\n+        let name = node.name()?;\n+        Some(FileSymbol {\n+            name: name.text(),\n+            node_range: node.syntax().range(),\n+            kind: node.syntax().kind(),\n+        })\n+    }\n+    visitor()\n+        .visit(decl::<ast::FnDef<_>>)\n+        .visit(decl::<ast::StructDef<_>>)\n+        .visit(decl::<ast::EnumDef<_>>)\n+        .visit(decl::<ast::TraitDef<_>>)\n+        .visit(decl::<ast::Module<_>>)\n+        .visit(decl::<ast::TypeDef<_>>)\n+        .visit(decl::<ast::ConstDef<_>>)\n+        .visit(decl::<ast::StaticDef<_>>)\n+        .accept(node)?\n+}\n+\n+\n+pub fn file_structure(file: &ast::File) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n     let syntax = file.syntax();\n \n     for event in walk(syntax.as_ref()) {\n         match event {\n             WalkEvent::Enter(node) => {\n-                match to_symbol(node) {\n+                match structure_node(node) {\n                     Some(mut symbol) => {\n                         symbol.parent = stack.last().map(|&n| n);\n                         stack.push(res.len());\n@@ -37,7 +73,7 @@ pub fn file_symbols(file: &ast::File) -> Vec<FileSymbol> {\n                 }\n             }\n             WalkEvent::Exit(node) => {\n-                if to_symbol(node).is_some() {\n+                if structure_node(node).is_some() {\n                     stack.pop().unwrap();\n                 }\n             }\n@@ -46,13 +82,13 @@ pub fn file_symbols(file: &ast::File) -> Vec<FileSymbol> {\n     res\n }\n \n-fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n-    fn decl<'a, N: NameOwner<&'a SyntaxRoot>>(node: N) -> Option<FileSymbol> {\n+fn structure_node(node: SyntaxNodeRef) -> Option<StructureNode> {\n+    fn decl<'a, N: NameOwner<&'a SyntaxRoot>>(node: N) -> Option<StructureNode> {\n         let name = node.name()?;\n-        Some(FileSymbol {\n+        Some(StructureNode {\n             parent: None,\n-            name: name.text(),\n-            name_range: name.syntax().range(),\n+            label: name.text().to_string(),\n+            navigation_range: name.syntax().range(),\n             node_range: node.syntax().range(),\n             kind: node.syntax().kind(),\n         })\n@@ -67,5 +103,29 @@ fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n         .visit(decl::<ast::TypeDef<_>>)\n         .visit(decl::<ast::ConstDef<_>>)\n         .visit(decl::<ast::StaticDef<_>>)\n+        .visit(|im: ast::ImplItem<_>| {\n+            let mut label = String::new();\n+            let brace = im.syntax().children()\n+                .find(|it| {\n+                    let stop = it.kind() == L_CURLY;\n+                    if !stop {\n+                        label.push_str(&it.text());\n+                    }\n+                    stop\n+                })?;\n+            let navigation_range = TextRange::from_to(\n+                im.syntax().range().start(),\n+                brace.range().start(),\n+            );\n+\n+            let node = StructureNode {\n+                parent: None,\n+                label,\n+                navigation_range,\n+                node_range: im.syntax().range(),\n+                kind: im.syntax().kind(),\n+            };\n+            Some(node)\n+        })\n         .accept(node)?\n }"}, {"sha": "97fa30e1fd89b880226da7ebf6e61799cd755d86", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -9,7 +9,7 @@ use itertools::Itertools;\n use libsyntax2::AstNode;\n use libeditor::{\n     File, TextUnit, TextRange,\n-    highlight, runnables, extend_selection, file_symbols, flip_comma,\n+    highlight, runnables, extend_selection, file_structure, flip_comma,\n };\n \n #[test]\n@@ -66,7 +66,7 @@ fn test_foo() {}\n }\n \n #[test]\n-fn symbols() {\n+fn test_structure() {\n     let file = file(r#\"\n struct Foo {\n     x: i32\n@@ -80,16 +80,22 @@ enum E { X, Y(i32) }\n type T = ();\n static S: i32 = 92;\n const C: i32 = 92;\n+\n+impl E {}\n+\n+impl fmt::Debug for E {}\n \"#);\n-    let symbols = file_symbols(&file);\n+    let symbols = file_structure(&file);\n     dbg_eq(\n-        r#\"[FileSymbol { parent: None, name: \"Foo\", name_range: [8; 11), node_range: [1; 26), kind: STRUCT_DEF },\n-            FileSymbol { parent: None, name: \"m\", name_range: [32; 33), node_range: [28; 53), kind: MODULE },\n-            FileSymbol { parent: Some(1), name: \"bar\", name_range: [43; 46), node_range: [40; 51), kind: FN_DEF },\n-            FileSymbol { parent: None, name: \"E\", name_range: [60; 61), node_range: [55; 75), kind: ENUM_DEF },\n-            FileSymbol { parent: None, name: \"T\", name_range: [81; 82), node_range: [76; 88), kind: TYPE_DEF },\n-            FileSymbol { parent: None, name: \"S\", name_range: [96; 97), node_range: [89; 108), kind: STATIC_DEF },\n-            FileSymbol { parent: None, name: \"C\", name_range: [115; 116), node_range: [109; 127), kind: CONST_DEF }]\"#,\n+        r#\"[StructureNode { parent: None, label: \"Foo\", navigation_range: [8; 11), node_range: [1; 26), kind: STRUCT_DEF },\n+           StructureNode { parent: None, label: \"m\", navigation_range: [32; 33), node_range: [28; 53), kind: MODULE },\n+           StructureNode { parent: Some(1), label: \"bar\", navigation_range: [43; 46), node_range: [40; 51), kind: FN_DEF },\n+           StructureNode { parent: None, label: \"E\", navigation_range: [60; 61), node_range: [55; 75), kind: ENUM_DEF },\n+           StructureNode { parent: None, label: \"T\", navigation_range: [81; 82), node_range: [76; 88), kind: TYPE_DEF },\n+           StructureNode { parent: None, label: \"S\", navigation_range: [96; 97), node_range: [89; 108), kind: STATIC_DEF },\n+           StructureNode { parent: None, label: \"C\", navigation_range: [115; 116), node_range: [109; 127), kind: CONST_DEF },\n+           StructureNode { parent: None, label: \"impl E \", navigation_range: [129; 136), node_range: [129; 138), kind: IMPL_ITEM },\n+           StructureNode { parent: None, label: \"impl fmt::Debug for E \", navigation_range: [140; 162), node_range: [140; 164), kind: IMPL_ITEM }]\"#,\n         &symbols,\n     )\n }"}, {"sha": "13668b803a9580b1674d97d56367b6effad7e08a", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -86,6 +86,24 @@ impl<R: TreeRoot> AstNode<R> for FnDef<R> {\n impl<R: TreeRoot> ast::NameOwner<R> for FnDef<R> {}\n impl<R: TreeRoot> FnDef<R> {}\n \n+// ImplItem\n+#[derive(Debug, Clone, Copy)]\n+pub struct ImplItem<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for ImplItem<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            IMPL_ITEM => Some(ImplItem { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> ImplItem<R> {}\n+\n // Module\n #[derive(Debug, Clone, Copy)]\n pub struct Module<R: TreeRoot = Arc<SyntaxRoot>> {"}, {"sha": "f001d340e55aa5a41bd2feb6f409e88aaa3ca4ef", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -10,8 +10,9 @@ use {\n };\n pub use self::generated::*;\n \n-pub trait AstNode<R: TreeRoot>: Sized {\n-    fn cast(syntax: SyntaxNode<R>) -> Option<Self>;\n+pub trait AstNode<R: TreeRoot> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self>\n+        where Self: Sized;\n     fn syntax(&self) -> &SyntaxNode<R>;\n }\n "}, {"sha": "ebd7d39434e11c410b3bc5125234d0365c911bcc", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -229,6 +229,7 @@ Grammar(\n         \"ConstDef\": ( traits: [\"NameOwner\"] ),\n         \"StaticDef\": ( traits: [\"NameOwner\"] ),\n         \"TypeDef\": ( traits: [\"NameOwner\"] ),\n+        \"ImplItem\": (),\n         \"Name\": (),\n         \"NameRef\": (),\n     },"}, {"sha": "3ddce5fb3ece65009a00ea8e9794e993e8b0eb91", "filename": "crates/server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Fserver%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Fserver%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fconv.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -36,6 +36,7 @@ impl Conv for SyntaxKind {\n             SyntaxKind::TYPE_DEF => SymbolKind::TypeParameter,\n             SyntaxKind::STATIC_DEF => SymbolKind::Constant,\n             SyntaxKind::CONST_DEF => SymbolKind::Constant,\n+            SyntaxKind::IMPL_ITEM => SymbolKind::Object,\n             _ => SymbolKind::Variable,\n         }\n     }"}, {"sha": "8789ef0d265ce3afaabdb7208c8582e29a19a063", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b828c68e8acda628d6e3a36827d1ffd9c9aaec6/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2b828c68e8acda628d6e3a36827d1ffd9c9aaec6", "patch": "@@ -48,29 +48,34 @@ pub fn handle_document_symbol(\n     let file = world.file_syntax(&path)?;\n     let line_index = world.file_line_index(&path)?;\n \n-    let mut res: Vec<DocumentSymbol> = Vec::new();\n+    let mut parents: Vec<(DocumentSymbol, Option<usize>)> = Vec::new();\n \n-    for symbol in libeditor::file_symbols(&file) {\n-        let name = symbol.name.to_string();\n+    for symbol in libeditor::file_structure(&file) {\n         let doc_symbol = DocumentSymbol {\n-            name: name.clone(),\n-            detail: Some(name),\n+            name: symbol.label,\n+            detail: Some(\"\".to_string()),\n             kind: symbol.kind.conv(),\n             deprecated: None,\n             range: symbol.node_range.conv_with(&line_index),\n-            selection_range: symbol.name_range.conv_with(&line_index),\n+            selection_range: symbol.navigation_range.conv_with(&line_index),\n             children: None,\n         };\n-        if let Some(idx) = symbol.parent {\n-            let children = &mut res[idx].children;\n-            if children.is_none() {\n-                *children = Some(Vec::new());\n+        parents.push((doc_symbol, symbol.parent));\n+    }\n+    let mut res = Vec::new();\n+    while let Some((node, parent)) = parents.pop() {\n+        match parent {\n+            None => res.push(node),\n+            Some(i) => {\n+                let children = &mut parents[i].0.children;\n+                if children.is_none() {\n+                    *children = Some(Vec::new());\n+                }\n+                children.as_mut().unwrap().push(node);\n             }\n-            children.as_mut().unwrap().push(doc_symbol);\n-        } else {\n-            res.push(doc_symbol);\n         }\n     }\n+\n     Ok(Some(req::DocumentSymbolResponse::Nested(res)))\n }\n "}]}