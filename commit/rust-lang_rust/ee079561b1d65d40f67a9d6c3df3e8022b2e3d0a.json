{"sha": "ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a", "node_id": "C_kwDOAAsO6NoAKGVlMDc5NTYxYjFkNjVkNDBmNjdhOWQ2YzNkZjNlODAyMmIyZTNkMGE", "commit": {"author": {"name": "Wang Ruochen", "email": "wrc@ruo-chen.wang", "date": "2021-12-15T23:26:24Z"}, "committer": {"name": "Wang Ruochen", "email": "wrc@ruo-chen.wang", "date": "2021-12-15T23:26:24Z"}, "message": "Add comma for \"move if to guard\"", "tree": {"sha": "a3c3bdde13e09ee4c01cae045785b7d2738a880a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c3bdde13e09ee4c01cae045785b7d2738a880a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEaiSth+M9lPoQjHQDxt6lcKOwJvwFAmG6eioACgkQxt6lcKOw\nJvxmywf/YtwLfZxcSxIfI2GCzE6QCtoVELbJNWsdyp5SDHhd3R5wcvITz9waY/CD\n0AmfMk0QjK3mKpZNivU8WYgXU+HHUjmm3LWUW8zR8tyNNa2cu5N44ZKOSZzyMts0\nK50Mi6DVrcqr1yXY+m+wA4t4xPUAl9lFmvFRdkH7B45vs2d75xslAfgHZOMVb4KG\nI66wkk3agwrJvpNknkMwp6OQu+PvV498K1qbUCbuNNcl1QXC+qCx/YjOzrUrbN6k\n2BFyj0S5M9LYje0n2vNVwcO+57oaKnxAmHRiV38XYp0Dc95NQ9nOTkR2YDGEBWxv\nJGZsCpOJjTJ+pk1vTh8EZfzOqoQvbQ==\n=gRij\n-----END PGP SIGNATURE-----", "payload": "tree a3c3bdde13e09ee4c01cae045785b7d2738a880a\nparent 4ec6bd6206af70494bf61cf03ef892568d942cbf\nauthor Wang Ruochen <wrc@ruo-chen.wang> 1639610784 -0800\ncommitter Wang Ruochen <wrc@ruo-chen.wang> 1639610784 -0800\n\nAdd comma for \"move if to guard\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a", "html_url": "https://github.com/rust-lang/rust/commit/ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a/comments", "author": {"login": "weirane", "id": 37568244, "node_id": "MDQ6VXNlcjM3NTY4MjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/37568244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirane", "html_url": "https://github.com/weirane", "followers_url": "https://api.github.com/users/weirane/followers", "following_url": "https://api.github.com/users/weirane/following{/other_user}", "gists_url": "https://api.github.com/users/weirane/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirane/subscriptions", "organizations_url": "https://api.github.com/users/weirane/orgs", "repos_url": "https://api.github.com/users/weirane/repos", "events_url": "https://api.github.com/users/weirane/events{/privacy}", "received_events_url": "https://api.github.com/users/weirane/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weirane", "id": 37568244, "node_id": "MDQ6VXNlcjM3NTY4MjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/37568244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weirane", "html_url": "https://github.com/weirane", "followers_url": "https://api.github.com/users/weirane/followers", "following_url": "https://api.github.com/users/weirane/following{/other_user}", "gists_url": "https://api.github.com/users/weirane/gists{/gist_id}", "starred_url": "https://api.github.com/users/weirane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weirane/subscriptions", "organizations_url": "https://api.github.com/users/weirane/orgs", "repos_url": "https://api.github.com/users/weirane/repos", "events_url": "https://api.github.com/users/weirane/events{/privacy}", "received_events_url": "https://api.github.com/users/weirane/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec6bd6206af70494bf61cf03ef892568d942cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec6bd6206af70494bf61cf03ef892568d942cbf", "html_url": "https://github.com/rust-lang/rust/commit/4ec6bd6206af70494bf61cf03ef892568d942cbf"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "8a2c51d33b82fb8830842140e77b38bee01fa740", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=ee079561b1d65d40f67a9d6c3df3e8022b2e3d0a", "patch": "@@ -135,7 +135,15 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n \n             match &then_block.tail_expr() {\n                 Some(then_expr) if then_only_expr => {\n-                    edit.replace(replace_node.text_range(), then_expr.syntax().text())\n+                    edit.replace(replace_node.text_range(), then_expr.syntax().text());\n+                    // Insert comma for expression if there isn't one\n+                    match match_arm.syntax().last_child_or_token() {\n+                        Some(NodeOrToken::Token(t)) if t.kind() == COMMA => {}\n+                        _ => {\n+                            cov_mark::hit!(move_guard_if_add_comma);\n+                            edit.insert(match_arm.syntax().text_range().end(), \",\");\n+                        }\n+                    }\n                 }\n                 _ if replace_node != *if_expr.syntax() => {\n                     // Dedent because if_expr is in a BlockExpr\n@@ -150,13 +158,6 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n             // If with only an else branch\n             if let Some(ElseBranch::Block(else_block)) = if_expr.else_branch() {\n                 let then_arm_end = match_arm.syntax().text_range().end();\n-                if then_block.tail_expr().is_some() && then_only_expr {\n-                    // Insert comma for expression if there isn't one\n-                    match match_arm.syntax().last_child_or_token() {\n-                        Some(NodeOrToken::Token(t)) if t.kind() == COMMA => {}\n-                        _ => edit.insert(then_arm_end, \",\"),\n-                    }\n-                }\n                 let else_only_expr = else_block.statements().next().is_none();\n                 let indent_level = match_arm.indent_level();\n                 let spaces = \"    \".repeat(indent_level.0 as _);\n@@ -318,6 +319,34 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn move_arm_cond_in_block_to_match_guard_add_comma_works() {\n+        cov_mark::check!(move_guard_if_add_comma);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            $0if x > 10 {\n+                false\n+            }\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        _ => true\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn move_arm_cond_to_match_guard_if_let_not_works() {\n         check_assist_not_applicable("}]}