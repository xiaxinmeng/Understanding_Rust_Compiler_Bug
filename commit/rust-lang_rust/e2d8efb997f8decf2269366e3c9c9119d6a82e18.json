{"sha": "e2d8efb997f8decf2269366e3c9c9119d6a82e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDhlZmI5OTdmOGRlY2YyMjY5MzY2ZTNjOWM5MTE5ZDZhODJlMTg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-01T06:07:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-01T06:07:40Z"}, "message": "Rollup merge of #82643 - Aaron1011:test-macro-attrs, r=petrochenkov\n\nAdd more proc-macro attribute tests\n\nr? `@petrochenkov`", "tree": {"sha": "9a6ac1522decaebcf675c595ae33330f7e3ec4f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a6ac1522decaebcf675c595ae33330f7e3ec4f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d8efb997f8decf2269366e3c9c9119d6a82e18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPISsCRBK7hj4Ov3rIwAAdHIIAE/Pea+JlDoB07cIGYlMgPA2\n6Tb8AzMFQnHLvjgbkFJqGuppoLa77pKYW9BqNplvN553kemHHx2MikJ8GlegIQJt\nmnOKgHJRy1EH+iq+MKxZfyCRoXZRHWVpZCuOUaBv6Wm04hZWcN8qscKMNnHYyBPL\nsmFg6Dc6g1ManqlMe6ZzsFNEUSmdrEJoIURjAAFLOTjql1DG2qqiM40g2MnivIOW\nl8K+K2Eulw5/IVIoOjR7o0u/nTYGgCqybWBQuhauaUvJrg7SsNCoOrrCq6V06UmB\nu9VTqLwDErYlkQd6czhVbEViZLSN82XwuKJwgq0hdwneSaSsSXWa9aq2yjjSDZs=\n=4VTG\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a6ac1522decaebcf675c595ae33330f7e3ec4f7\nparent cebbcf1b096ebad7ca2ab0a6df2f6f9aa67c1c5c\nparent 8aed5b43342e25f6a9baa9cb472bb729fd150b79\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614578860 +0900\ncommitter GitHub <noreply@github.com> 1614578860 +0900\n\nRollup merge of #82643 - Aaron1011:test-macro-attrs, r=petrochenkov\n\nAdd more proc-macro attribute tests\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d8efb997f8decf2269366e3c9c9119d6a82e18", "html_url": "https://github.com/rust-lang/rust/commit/e2d8efb997f8decf2269366e3c9c9119d6a82e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d8efb997f8decf2269366e3c9c9119d6a82e18/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cebbcf1b096ebad7ca2ab0a6df2f6f9aa67c1c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cebbcf1b096ebad7ca2ab0a6df2f6f9aa67c1c5c", "html_url": "https://github.com/rust-lang/rust/commit/cebbcf1b096ebad7ca2ab0a6df2f6f9aa67c1c5c"}, {"sha": "8aed5b43342e25f6a9baa9cb472bb729fd150b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aed5b43342e25f6a9baa9cb472bb729fd150b79", "html_url": "https://github.com/rust-lang/rust/commit/8aed5b43342e25f6a9baa9cb472bb729fd150b79"}], "stats": {"total": 2620, "additions": 2249, "deletions": 371}, "files": [{"sha": "47734c94fe29717969fd59a6a12eaac2dc221dec", "filename": "src/test/ui/proc-macro/attr-complex-fn.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(stmt_expr_attributes)]\n+#![feature(custom_inner_attributes)]\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+trait MyTrait<T> {}\n+struct MyStruct<const N: bool>;\n+\n+#[print_attr]\n+fn foo<T: MyTrait<MyStruct<{ true }>>>() {}\n+\n+impl<T> MyTrait<T> for MyStruct<{true}> {\n+    #![print_attr]\n+    #![rustc_dummy]\n+}\n+\n+fn main() {}"}, {"sha": "a395a9ac3e8faaec76eb89b49ef867647476cbc3", "filename": "src/test/ui/proc-macro/attr-complex-fn.stdout", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,171 @@\n+PRINT-ATTR INPUT (DISPLAY): fn foo < T : MyTrait < MyStruct < { true } >> > () { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/attr-complex-fn.rs:19:1: 19:3 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/attr-complex-fn.rs:19:4: 19:7 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:7: 19:8 (#0),\n+    },\n+    Ident {\n+        ident: \"T\",\n+        span: $DIR/attr-complex-fn.rs:19:8: 19:9 (#0),\n+    },\n+    Punct {\n+        ch: ':',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:9: 19:10 (#0),\n+    },\n+    Ident {\n+        ident: \"MyTrait\",\n+        span: $DIR/attr-complex-fn.rs:19:11: 19:18 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:18: 19:19 (#0),\n+    },\n+    Ident {\n+        ident: \"MyStruct\",\n+        span: $DIR/attr-complex-fn.rs:19:19: 19:27 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:27: 19:28 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/attr-complex-fn.rs:19:30: 19:34 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-complex-fn.rs:19:28: 19:36 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Joint,\n+        span: $DIR/attr-complex-fn.rs:19:36: 19:38 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Joint,\n+        span: $DIR/attr-complex-fn.rs:19:36: 19:38 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:19:38: 19:39 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/attr-complex-fn.rs:19:39: 19:41 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/attr-complex-fn.rs:19:42: 19:44 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl < T > MyTrait < T > for MyStruct < { true } > { # ! [rustc_dummy] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"T\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"MyTrait\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"T\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Ident {\n+        ident: \"MyStruct\",\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"rustc_dummy\",\n+                        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+            },\n+        ],\n+        span: $DIR/attr-complex-fn.rs:21:1: 24:2 (#0),\n+    },\n+]"}, {"sha": "1a5003616400fe3b3b9990d56cce3d684b656c7f", "filename": "src/test/ui/proc-macro/auxiliary/test-macros.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -128,6 +128,20 @@ pub fn print_attr_args(args: TokenStream, input: TokenStream) -> TokenStream {\n     input\n }\n \n+#[proc_macro_attribute]\n+pub fn print_target_and_args(args: TokenStream, input: TokenStream) -> TokenStream {\n+    print_helper(args, \"ATTR_ARGS\");\n+    print_helper(input.clone(), \"ATTR\");\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn print_target_and_args_consume(args: TokenStream, input: TokenStream) -> TokenStream {\n+    print_helper(args, \"ATTR_ARGS\");\n+    print_helper(input.clone(), \"ATTR\");\n+    TokenStream::new()\n+}\n+\n #[proc_macro_derive(Print, attributes(print_helper))]\n pub fn print_derive(input: TokenStream) -> TokenStream {\n     print_helper(input, \"DERIVE\");"}, {"sha": "ff2876e8471f0ba52f5516041ca4e944a95ba388", "filename": "src/test/ui/proc-macro/expand-to-derive.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(rustc_attrs)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! expand_to_derive {\n+    ($item:item) => {\n+        #[derive(Print)]\n+        struct Foo {\n+            #[cfg(FALSE)] removed: bool,\n+            field: [bool; {\n+                $item\n+                0\n+            }]\n+        }\n+    };\n+}\n+\n+expand_to_derive! {\n+    #[cfg_attr(not(FALSE), rustc_dummy)]\n+    struct Inner {\n+        #[cfg(FALSE)] removed_inner_field: bool,\n+        other_inner_field: u8,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7eb68643342c8298382d2673706ecbfc52bd6cca", "filename": "src/test/ui/proc-macro/expand-to-derive.stdout", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-derive.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,109 @@\n+PRINT-DERIVE INPUT (DISPLAY): struct Foo\n+{\n+    field :\n+    [bool ; { #[rustc_dummy] struct Inner { other_inner_field : u8, } 0 }],\n+}\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"field\",\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"bool\",\n+                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Ident {\n+                                ident: \"Inner\",\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"other_inner_field\",\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: ':',\n+                                        spacing: Alone,\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                    Ident {\n+                                        ident: \"u8\",\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                            },\n+                        ],\n+                        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+                    },\n+                ],\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+            },\n+        ],\n+        span: $DIR/expand-to-derive.rs:16:9: 22:10 (#4),\n+    },\n+]"}, {"sha": "6a353ca3263d0728fe3f6829dcb1e2ee2bc8808d", "filename": "src/test/ui/proc-macro/inner-attrs.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,47 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(custom_inner_attributes)]\n+#![feature(proc_macro_hygiene)]\n+#![feature(stmt_expr_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[print_target_and_args(first)]\n+#[print_target_and_args(second)]\n+fn foo() {\n+    #![print_target_and_args(third)]\n+    #![print_target_and_args(fourth)]\n+}\n+\n+struct MyStruct {\n+    field: bool\n+}\n+\n+fn bar() {\n+    (#![print_target_and_args(fifth)] 1, 2);\n+\n+    [#![print_target_and_args(sixth)] 1 , 2];\n+    [#![print_target_and_args(seventh)] true ; 5];\n+\n+\n+    match 0 {\n+        #![print_target_and_args(eighth)]\n+        _ => {}\n+    }\n+\n+    MyStruct { #![print_target_and_args(ninth)] field: true };\n+}\n+\n+extern {\n+    fn weird_extern() {\n+        #![print_target_and_args_consume(tenth)]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2fd8d8a242ef545bdcd5c4d64a12e1de8337de75", "filename": "src/test/ui/proc-macro/inner-attrs.stdout", "status": "added", "additions": 520, "deletions": 0, "changes": 520, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,520 @@\n+PRINT-ATTR_ARGS INPUT (DISPLAY): first\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"first\",\n+        span: $DIR/inner-attrs.rs:15:25: 15:30 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(second)] fn foo()\n+{ # ! [print_target_and_args(third)] # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_target_and_args\",\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"second\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"third\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"fourth\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): second\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn foo()\n+{ # ! [print_target_and_args(third)] # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"third\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"fourth\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): third\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"third\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn foo() { # ! [print_target_and_args(fourth)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"fourth\",\n+                                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): fourth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fourth\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn foo() { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Ident {\n+        ident: \"foo\",\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:17:1: 20:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): fifth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fifth\",\n+        span: $DIR/inner-attrs.rs:27:31: 27:36 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): (1, 2) ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"2\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:27:5: 27:45 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): sixth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"sixth\",\n+        span: $DIR/inner-attrs.rs:29:31: 29:36 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): [1, 2] ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"2\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:29:5: 29:46 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): seventh\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"seventh\",\n+        span: $DIR/inner-attrs.rs:30:31: 30:38 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): [true ; 5] ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"5\",\n+                suffix: None,\n+                span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:30:5: 30:51 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): eighth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"eighth\",\n+        span: $DIR/inner-attrs.rs:34:34: 34:40 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): match 0 { _ => { } }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"match\",\n+        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"0\",\n+        suffix: None,\n+        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"_\",\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Joint,\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:33:5: 36:6 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): ninth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"ninth\",\n+        span: $DIR/inner-attrs.rs:38:41: 38:46 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): MyStruct { field : true, } ;\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"MyStruct\",\n+        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"field\",\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+            },\n+        ],\n+        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+    },\n+    Punct {\n+        ch: ';',\n+        spacing: Alone,\n+        span: $DIR/inner-attrs.rs:38:5: 38:63 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): tenth\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"tenth\",\n+        span: $DIR/inner-attrs.rs:43:42: 43:47 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): fn weird_extern() { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+    Ident {\n+        ident: \"weird_extern\",\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/inner-attrs.rs:42:5: 44:6 (#0),\n+    },\n+]"}, {"sha": "ef56e8e02d0c4f0b70ab45de026f1e7c16eedb8b", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -10,6 +10,9 @@\n // (a pretty-printed struct may cause a line to start with '{' )\n // FIXME: We currently lose spans here (see issue #43081)\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n #[macro_use]\n extern crate test_macros;\n \n@@ -58,6 +61,10 @@ struct Foo<#[cfg(FALSE)] A, B> {\n             u8\n         );\n \n+        fn plain_removed_fn() {\n+            #![cfg_attr(not(FALSE), cfg(FALSE))]\n+        }\n+\n         0\n     }],\n     #[print_helper(d)]"}, {"sha": "25f36108001883e9749bd301cc4a0bbb5d2be2cd", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stderr?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -1,5 +1,5 @@\n warning: derive helper attribute is used before it is introduced\n-  --> $DIR/issue-75930-derive-cfg.rs:16:3\n+  --> $DIR/issue-75930-derive-cfg.rs:19:3\n    |\n LL | #[print_helper(a)]\n    |   ^^^^^^^^^^^^"}, {"sha": "7cbc0c669a5ddc1d4ee707f84fe91d33863e6731", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 449, "deletions": 370, "changes": 819, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18"}, {"sha": "a221b9578af3e59cc2a36a090ff39ee3e8c80cd2", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! produce_it {\n+    ($expr:expr) => {\n+        #[derive(Print)]\n+        struct Foo {\n+            val: [bool; {\n+                let a = #[cfg_attr(not(FALSE), rustc_dummy(first))] $expr;\n+                0\n+            }]\n+        }\n+    }\n+}\n+\n+produce_it!(#[cfg_attr(not(FALSE), rustc_dummy(second))] {\n+    #![cfg_attr(not(FALSE), allow(unused))]\n+    30\n+});\n+\n+fn main() {}"}, {"sha": "5db18590bdf82f6c64d9ae08de210c13a6d069ff", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.stdout", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,176 @@\n+PRINT-DERIVE INPUT (DISPLAY): struct Foo\n+{\n+    val :\n+    [bool ;\n+     {\n+         let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n+         { # ! [allow(unused)] 30 } ; 0\n+     }],\n+}\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"val\",\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"bool\",\n+                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"let\",\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Ident {\n+                                ident: \"a\",\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: '=',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"first\",\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                        ],\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"rustc_dummy\",\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"second\",\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                        ],\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Joint,\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Punct {\n+                                        ch: '!',\n+                                        spacing: Alone,\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"allow\",\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"unused\",\n+                                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                            },\n+                                        ],\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                    Literal {\n+                                        kind: Integer,\n+                                        symbol: \"30\",\n+                                        suffix: None,\n+                                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                                    },\n+                                ],\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                            },\n+                        ],\n+                        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+                    },\n+                ],\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+            },\n+        ],\n+        span: $DIR/macro-rules-derive-cfg.rs:17:9: 22:10 (#4),\n+    },\n+]"}, {"sha": "53cfbb7c98fc92327aecd4f9a849df78ddab2c84", "filename": "src/test/ui/proc-macro/nested-derive-cfg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Z span-debug --error-format human\n+// aux-build:test-macros.rs\n+// check-pass\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[derive(Print)]\n+struct Foo {\n+    #[cfg(FALSE)] removed: bool,\n+    my_array: [bool; {\n+        struct Inner {\n+            #[cfg(FALSE)] removed_inner_field: u8,\n+            non_removed_inner_field: usize\n+        }\n+        0\n+    }]\n+}\n+\n+fn main() {}"}, {"sha": "cf4e5d94d8a3341b5cd6e8245720dd376dfe9041", "filename": "src/test/ui/proc-macro/nested-derive-cfg.stdout", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-derive-cfg.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,94 @@\n+PRINT-DERIVE INPUT (DISPLAY): struct Foo\n+{\n+    my_array :\n+    [bool ; { struct Inner { non_removed_inner_field : usize, } 0 }],\n+}\n+PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"my_array\",\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"bool\",\n+                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"Inner\",\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"non_removed_inner_field\",\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ':',\n+                                        spacing: Alone,\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"usize\",\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/nested-derive-cfg.rs:12:1: 21:2 (#0),\n+    },\n+]"}, {"sha": "b9a7e08f9937994608242a80b65d0f4a17c50be4", "filename": "src/test/ui/proc-macro/weird-braces.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.rs?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,23 @@\n+// aux-build:test-macros.rs\n+// check-pass\n+// compile-flags: -Z span-debug\n+\n+#![feature(custom_inner_attributes)]\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+extern crate test_macros;\n+use test_macros::{print_target_and_args};\n+\n+struct Foo<const V: bool>;\n+trait Bar<const V: bool> {}\n+\n+#[print_target_and_args(first_outer)]\n+#[print_target_and_args(second_outer)]\n+impl Bar<{1 > 0}> for Foo<{true}> {\n+    #![print_target_and_args(first_inner)]\n+    #![print_target_and_args(second_inner)]\n+}\n+\n+fn main() {}"}, {"sha": "25f0eaf0dd4e2476a8369d3af2162cfad13a29e4", "filename": "src/test/ui/proc-macro/weird-braces.stdout", "status": "added", "additions": 524, "deletions": 0, "changes": 524, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8efb997f8decf2269366e3c9c9119d6a82e18/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-braces.stdout?ref=e2d8efb997f8decf2269366e3c9c9119d6a82e18", "patch": "@@ -0,0 +1,524 @@\n+PRINT-ATTR_ARGS INPUT (DISPLAY): first_outer\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"first_outer\",\n+        span: $DIR/weird-braces.rs:16:25: 16:36 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): #[print_target_and_args(second_outer)] impl Bar < { 1 > 0 } > for Foo <\n+{ true } >\n+{\n+    # ! [print_target_and_args(first_inner)] # !\n+    [print_target_and_args(second_inner)]\n+}\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_target_and_args\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"second_outer\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"first_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"second_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): second_outer\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_outer\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } >\n+{\n+    # ! [print_target_and_args(first_inner)] # !\n+    [print_target_and_args(second_inner)]\n+}\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"first_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"second_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): first_inner\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"first_inner\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } >\n+{ # ! [print_target_and_args(second_inner)] }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Joint,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_target_and_args\",\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"second_inner\",\n+                                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+                    },\n+                ],\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR_ARGS INPUT (DISPLAY): second_inner\n+PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"second_inner\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]\n+PRINT-ATTR INPUT (DISPLAY): impl Bar < { 1 > 0 } > for Foo < { true } > { }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"impl\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Bar\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Punct {\n+                ch: '>',\n+                spacing: Alone,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"0\",\n+                suffix: None,\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"for\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"true\",\n+                span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+            },\n+        ],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [],\n+        span: $DIR/weird-braces.rs:18:1: 21:2 (#0),\n+    },\n+]"}]}