{"sha": "37f37a5df1b4873ab2a4562fca04dc6454817429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjM3YTVkZjFiNDg3M2FiMmE0NTYyZmNhMDRkYzY0NTQ4MTc0Mjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T07:28:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "parser/pat: minor misc cleanup", "tree": {"sha": "8eef8db58d6ca95254da3288f08d089e97a75cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eef8db58d6ca95254da3288f08d089e97a75cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f37a5df1b4873ab2a4562fca04dc6454817429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f37a5df1b4873ab2a4562fca04dc6454817429", "html_url": "https://github.com/rust-lang/rust/commit/37f37a5df1b4873ab2a4562fca04dc6454817429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f37a5df1b4873ab2a4562fca04dc6454817429/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49740b792ddf1bc6d98445b8955b2ebfb742772b", "url": "https://api.github.com/repos/rust-lang/rust/commits/49740b792ddf1bc6d98445b8955b2ebfb742772b", "html_url": "https://github.com/rust-lang/rust/commit/49740b792ddf1bc6d98445b8955b2ebfb742772b"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "b7a60a2a4fe805375c0cd21c3d2771d392d99e26", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37f37a5df1b4873ab2a4562fca04dc6454817429/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f37a5df1b4873ab2a4562fca04dc6454817429/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=37f37a5df1b4873ab2a4562fca04dc6454817429", "patch": "@@ -202,9 +202,13 @@ impl<'a> Parser<'a> {\n             } else {\n                 // Try to parse everything else as literal with optional minus\n                 match self.parse_literal_maybe_minus() {\n-                    Ok(begin) if self.check(&token::DotDot) || self.check(&token::DotDotEq)\n-                        || self.check(&token::DotDotDot)\n-                        => self.parse_pat_range_starting_with_lit(begin)?,\n+                    Ok(begin)\n+                        if self.check(&token::DotDot)\n+                            || self.check(&token::DotDotEq)\n+                            || self.check(&token::DotDotDot) =>\n+                    {\n+                        self.parse_pat_range_starting_with_lit(begin)?\n+                    }\n                     Ok(begin) => PatKind::Lit(begin),\n                     Err(mut err) => {\n                         self.cancel(&mut err);\n@@ -446,28 +450,26 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `ident` or `ident @ pat`.\n-    /// used by the copy foo and ref foo patterns to give a good\n+    /// Used by the copy foo and ref foo patterns to give a good\n     /// error message when parsing mistakes like `ref foo(a, b)`.\n-    fn parse_pat_ident(&mut self,\n-                       binding_mode: ast::BindingMode)\n-                       -> PResult<'a, PatKind> {\n+    fn parse_pat_ident(&mut self, binding_mode: BindingMode) -> PResult<'a, PatKind> {\n         let ident = self.parse_ident()?;\n         let sub = if self.eat(&token::At) {\n             Some(self.parse_pat(Some(\"binding pattern\"))?)\n         } else {\n             None\n         };\n \n-        // just to be friendly, if they write something like\n-        //   ref Some(i)\n-        // we end up here with ( as the current token.  This shortly\n-        // leads to a parse error.  Note that if there is no explicit\n+        // Just to be friendly, if they write something like `ref Some(i)`,\n+        // we end up here with `(` as the current token.\n+        // This shortly leads to a parse error. Note that if there is no explicit\n         // binding mode then we do not end up here, because the lookahead\n-        // will direct us over to parse_enum_variant()\n+        // will direct us over to `parse_enum_variant()`.\n         if self.token == token::OpenDelim(token::Paren) {\n             return Err(self.span_fatal(\n                 self.prev_span,\n-                \"expected identifier, found enum pattern\"))\n+                \"expected identifier, found enum pattern\",\n+            ))\n         }\n \n         Ok(PatKind::Ident(binding_mode, ident, sub))"}]}