{"sha": "d333752f5c6553e005fa7694837723b08ec8f13e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMzM3NTJmNWM2NTUzZTAwNWZhNzY5NDgzNzcyM2IwOGVjOGYxM2U=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-18T20:59:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-20T19:55:57Z"}, "message": "Fix parsing of paths with fn-like generic arguments", "tree": {"sha": "27f5049e9475aa54e2c2135432727f93d4240352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f5049e9475aa54e2c2135432727f93d4240352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d333752f5c6553e005fa7694837723b08ec8f13e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d333752f5c6553e005fa7694837723b08ec8f13e", "html_url": "https://github.com/rust-lang/rust/commit/d333752f5c6553e005fa7694837723b08ec8f13e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d333752f5c6553e005fa7694837723b08ec8f13e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef85cf0ff898aefe813ab1cc7e73e90a904d7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef85cf0ff898aefe813ab1cc7e73e90a904d7b2", "html_url": "https://github.com/rust-lang/rust/commit/eef85cf0ff898aefe813ab1cc7e73e90a904d7b2"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "2dfcd1a2b2b14db707ede75c982456b0590bd4c5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d333752f5c6553e005fa7694837723b08ec8f13e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d333752f5c6553e005fa7694837723b08ec8f13e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d333752f5c6553e005fa7694837723b08ec8f13e", "patch": "@@ -1467,7 +1467,7 @@ impl<'a> Parser<'a> {\n \n     // Parse a type\n     pub fn parse_ty(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(true)\n+        self.parse_ty_common(true, true)\n     }\n \n     /// Parse a type in restricted contexts where `+` is not permitted.\n@@ -1476,10 +1476,11 @@ impl<'a> Parser<'a> {\n     /// Example 2: `value1 as TYPE + value2`\n     ///     `+` is prohibited to avoid interactions with expression grammar.\n     fn parse_ty_no_plus(&mut self) -> PResult<'a, P<Ty>> {\n-        self.parse_ty_common(false)\n+        self.parse_ty_common(false, true)\n     }\n \n-    fn parse_ty_common(&mut self, allow_plus: bool) -> PResult<'a, P<Ty>> {\n+    fn parse_ty_common(&mut self, allow_plus: bool, allow_qpath_recovery: bool)\n+                       -> PResult<'a, P<Ty>> {\n         maybe_whole!(self, NtTy, |x| x);\n \n         let lo = self.span;\n@@ -1612,7 +1613,7 @@ impl<'a> Parser<'a> {\n \n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n-        let ty = self.maybe_recover_from_bad_qpath(ty)?;\n+        let ty = self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)?;\n \n         Ok(P(ty))\n     }\n@@ -1668,9 +1669,10 @@ impl<'a> Parser<'a> {\n     }\n \n     // Try to recover from associated item paths like `[T]::AssocItem`/`(T, U)::AssocItem`.\n-    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T) -> PResult<'a, T> {\n+    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T, allow_recovery: bool)\n+                                                     -> PResult<'a, T> {\n         // Do not add `::` to expected tokens.\n-        if self.token != token::ModSep {\n+        if !allow_recovery || self.token != token::ModSep {\n             return Ok(base);\n         }\n         let ty = match base.to_ty() {\n@@ -2004,7 +2006,7 @@ impl<'a> Parser<'a> {\n                     |p| p.parse_ty())?;\n                 self.bump(); // `)`\n                 let output = if self.eat(&token::RArrow) {\n-                    Some(self.parse_ty_no_plus()?)\n+                    Some(self.parse_ty_common(false, false)?)\n                 } else {\n                     None\n                 };\n@@ -2411,7 +2413,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let expr = Expr { node: ex, span: lo.to(hi), id: ast::DUMMY_NODE_ID, attrs };\n-        let expr = self.maybe_recover_from_bad_qpath(expr)?;\n+        let expr = self.maybe_recover_from_bad_qpath(expr, true)?;\n \n         return Ok(P(expr));\n     }\n@@ -3778,7 +3780,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let pat = Pat { node: pat, span: lo.to(self.prev_span), id: ast::DUMMY_NODE_ID };\n-        let pat = self.maybe_recover_from_bad_qpath(pat)?;\n+        let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n \n         Ok(P(pat))\n     }"}, {"sha": "b4a59904ee4b56198e9ce8664db3577463e8fbf5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d333752f5c6553e005fa7694837723b08ec8f13e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d333752f5c6553e005fa7694837723b08ec8f13e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=d333752f5c6553e005fa7694837723b08ec8f13e", "patch": "@@ -38,11 +38,9 @@ type G = 'static + (Send)::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n //~| ERROR ambiguous associated type\n \n-// FIXME\n // This is actually a legal path with fn-like generic arguments in the middle!\n // Recovery should not apply in this context.\n type H = Fn(u8) -> (u8)::Output;\n-//~^ ERROR missing angle brackets in associated item path\n-//~| ERROR ambiguous associated type\n+//~^ ERROR ambiguous associated type\n \n fn main() {}"}, {"sha": "c44dc5a0468809a0496c0fb3a433c1b7107d9db5", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d333752f5c6553e005fa7694837723b08ec8f13e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d333752f5c6553e005fa7694837723b08ec8f13e/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=d333752f5c6553e005fa7694837723b08ec8f13e", "patch": "@@ -38,13 +38,7 @@ error: missing angle brackets in associated item path\n   --> $DIR/bad-assoc-ty.rs:37:10\n    |\n 37 | type G = 'static + (Send)::AssocTy;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `< 'static + Send>::AssocTy`\n-\n-error: missing angle brackets in associated item path\n-  --> $DIR/bad-assoc-ty.rs:44:20\n-   |\n-44 | type H = Fn(u8) -> (u8)::Output;\n-   |                    ^^^^^^^^^^^^ help: try: `<(u8)>::Output`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `<'static + Send>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:11:10\n@@ -101,12 +95,12 @@ error[E0223]: ambiguous associated type\n    = note: specify the type using the syntax `<std::marker::Send + 'static as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/bad-assoc-ty.rs:44:20\n+  --> $DIR/bad-assoc-ty.rs:43:10\n    |\n-44 | type H = Fn(u8) -> (u8)::Output;\n-   |                    ^^^^^^^^^^^^ ambiguous associated type\n+43 | type H = Fn(u8) -> (u8)::Output;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n-   = note: specify the type using the syntax `<u8 as Trait>::Output`\n+   = note: specify the type using the syntax `<std::ops::Fn(u8) -> u8 + 'static as Trait>::Output`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 15 previous errors\n "}]}