{"sha": "25a11568fc5b995c2641560415e97244165dd278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YTExNTY4ZmM1Yjk5NWMyNjQxNTYwNDE1ZTk3MjQ0MTY1ZGQyNzg=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2019-04-01T20:15:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-01T20:15:42Z"}, "message": "Merge pull request #3905 from rust-lang/compiletest\n\nHacky rustup", "tree": {"sha": "f53f5ed98bdee137f023a99c01d817a6bfe69726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f53f5ed98bdee137f023a99c01d817a6bfe69726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25a11568fc5b995c2641560415e97244165dd278", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJconFuCRBK7hj4Ov3rIwAAdHIIAK+fIm6DaAX32DP3UtdMZuKW\nnvW8h1YUrPyUUHp/+wb5O1RiHzebQmtp7d1reVLVB0NB80YEKXto0XfH9M8f6Po4\nNfGUxDzEyFZKRcbaQyaRKdzHcfJH6W1nmlIYj3gpFThauXEZ+HiL7e4y/9axSmAO\n2GeiYzmPP+wKqdmHi4ktZeLUrWmzF5ZoN7LgPXWn90eYPLAXLi7hxNCmxp670Jic\nLSjJpYNQhzdkCfwyeVsc1SwGtBzuPr9XeOPWVQSBVFY6mxqapiZz3of9D5cMhEt1\nQzk+sYq0zSndkUWjHAdHPWejccYdITu9f6OlU1u/0OdTINrQAYVCP47Jo5jU1eM=\n=xlXe\n-----END PGP SIGNATURE-----\n", "payload": "tree f53f5ed98bdee137f023a99c01d817a6bfe69726\nparent 61aa5c957c219abe1fb2d1b5e51db8b365b4f565\nparent 41927796bfcc5892e87e26eb50aaa81a5d5d7f77\nauthor Philipp Krones <hello@philkrones.com> 1554149742 +0200\ncommitter GitHub <noreply@github.com> 1554149742 +0200\n\nMerge pull request #3905 from rust-lang/compiletest\n\nHacky rustup"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25a11568fc5b995c2641560415e97244165dd278", "html_url": "https://github.com/rust-lang/rust/commit/25a11568fc5b995c2641560415e97244165dd278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25a11568fc5b995c2641560415e97244165dd278/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "url": "https://api.github.com/repos/rust-lang/rust/commits/61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "html_url": "https://github.com/rust-lang/rust/commit/61aa5c957c219abe1fb2d1b5e51db8b365b4f565"}, {"sha": "41927796bfcc5892e87e26eb50aaa81a5d5d7f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/41927796bfcc5892e87e26eb50aaa81a5d5d7f77", "html_url": "https://github.com/rust-lang/rust/commit/41927796bfcc5892e87e26eb50aaa81a5d5d7f77"}], "stats": {"total": 188, "additions": 114, "deletions": 74}, "files": [{"sha": "3d36e52d2df81c2682da0c8d245a352d1625c805", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -47,7 +47,8 @@ rustc_tools_util = { version = \"0.1.1\", path = \"rustc_tools_util\"}\n [dev-dependencies]\n clippy_dev = { version = \"0.0.1\", path = \"clippy_dev\" }\n cargo_metadata = \"0.7.1\"\n-compiletest_rs = \"0.3.19\"\n+compiletest_rs = { version = \"=0.3.19\", features = [\"tmp\", \"stable\"] }\n+libtest = \"0.0.1\"\n lazy_static = \"1.0\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }"}, {"sha": "c054a00894e75ebcafe2d77cd91747236bf2ba50", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -208,8 +208,8 @@ impl LintPass for AttrPass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n         if let Some(items) = &attr.meta_item_list() {\n-            if let Some(ident) = attr.ident_str() {\n-                match ident {\n+            if let Some(ident) = attr.ident() {\n+                match &*ident.as_str() {\n                     \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n                         check_clippy_lint_names(cx, items);\n                     },\n@@ -242,8 +242,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n \n                 for attr in &item.attrs {\n                     if let Some(lint_list) = &attr.meta_item_list() {\n-                        if let Some(ident) = attr.ident_str() {\n-                            match ident {\n+                        if let Some(ident) = attr.ident() {\n+                            match &*ident.as_str() {\n                                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n                                     // whitelist `unused_imports` and `deprecated` for `use` items\n                                     // and `unused_imports` for `extern crate` items with `macro_use`"}, {"sha": "afdf27376d8047898981de388fac65b3751cd132", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -39,9 +39,10 @@ impl LintPass for EnumGlobUse {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n     fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: HirId) {\n+        let map = cx.tcx.hir();\n         // only check top level `use` statements\n         for item in &m.item_ids {\n-            self.lint_item(cx, cx.tcx.hir().expect_item(item.id));\n+            self.lint_item(cx, map.expect_item(map.hir_to_node_id(item.id)));\n         }\n     }\n }"}, {"sha": "cd717e586e71732e6a10fa58791d9febb08fce40", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -356,7 +356,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 self.collect_anonymous_lifetimes(path, ty);\n             },\n             TyKind::Def(item, _) => {\n-                if let ItemKind::Existential(ref exist_ty) = self.cx.tcx.hir().expect_item(item.id).node {\n+                let map = self.cx.tcx.hir();\n+                if let ItemKind::Existential(ref exist_ty) = map.expect_item(map.hir_to_node_id(item.id)).node {\n                     for bound in &exist_ty.bounds {\n                         if let GenericBound::Outlives(_) = *bound {\n                             self.record(&None);"}, {"sha": "34cb2422e1c5e4f10744c79a4bad1e86d6d487e6", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -516,11 +516,11 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n             for pat in &arm.pats {\n                 if let PatKind::Path(ref path) = pat.deref().node {\n                     if let QPath::Resolved(_, p) = path {\n-                        missing_variants.retain(|e| e.did != p.def.def_id());\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(p.def.def_id()));\n                     }\n                 } else if let PatKind::TupleStruct(ref path, ..) = pat.deref().node {\n                     if let QPath::Resolved(_, p) = path {\n-                        missing_variants.retain(|e| e.did != p.def.def_id());\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(p.def.def_id()));\n                     }\n                 }\n             }\n@@ -539,7 +539,7 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n                     String::new()\n                 };\n                 // This path assumes that the enum type is imported into scope.\n-                format!(\"{}{}{}\", ident_str, cx.tcx.def_path_str(v.did), suffix)\n+                format!(\"{}{}{}\", ident_str, cx.tcx.def_path_str(v.def_id), suffix)\n             })\n             .collect();\n "}, {"sha": "721cfd870201b97011c2777c31b30f61ddf6b81f", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -58,9 +58,9 @@ impl MissingDoc {\n             if let Some(meta) = meta;\n             if let MetaItemKind::List(list) = meta.node;\n             if let Some(meta) = list.get(0);\n-            if let Some(name) = meta.ident_str();\n+            if let Some(name) = meta.ident();\n             then {\n-                name == \"include\"\n+                name.as_str() == \"include\"\n             } else {\n                 false\n             }"}, {"sha": "c6b1b7eaf517a4669379d056e3b75d4a45bff25d", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -162,12 +162,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if cx.tcx.hir().as_local_node_id(trait_def_id).is_some() {\n-                if !cx.access_levels.is_exported(impl_item.hir_id) {\n-                    // If a trait is being implemented for an item, and the\n-                    // trait is not exported, we don't need #[inline]\n-                    return;\n-                }\n+            if cx.tcx.hir().as_local_node_id(trait_def_id).is_some() && !cx.access_levels.is_exported(impl_item.hir_id)\n+            {\n+                // If a trait is being implemented for an item, and the\n+                // trait is not exported, we don't need #[inline]\n+                return;\n             }\n         }\n "}, {"sha": "74a9b353ea97a516c6db31b877676a9c60572bdb", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -72,7 +72,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n             if let ExprKind::Path(ref qpath) = callee.node {\n                 let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n-                    Def::Struct(..) | Def::Variant(..) | Def::StructCtor(..) | Def::VariantCtor(..) => {\n+                    Def::Struct(..) | Def::Variant(..) | Def::Ctor(..) => {\n                         !has_drop(cx, cx.tables.expr_ty(expr)) && args.iter().all(|arg| has_no_effect(cx, arg))\n                     },\n                     _ => false,\n@@ -166,9 +166,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n             if let ExprKind::Path(ref qpath) = callee.node {\n                 let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n-                    Def::Struct(..) | Def::Variant(..) | Def::StructCtor(..) | Def::VariantCtor(..)\n-                        if !has_drop(cx, cx.tables.expr_ty(expr)) =>\n-                    {\n+                    Def::Struct(..) | Def::Variant(..) | Def::Ctor(..) if !has_drop(cx, cx.tables.expr_ty(expr)) => {\n                         Some(args.iter().collect())\n                     },\n                     _ => None,"}, {"sha": "5c64cd1c15c7905d09979adb99517da54531a737", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -128,7 +128,7 @@ impl Pass {\n             },\n             ExprKind::Ret(Some(ref expr)) => Self::expression_returns_none(cx, expr),\n             ExprKind::Path(ref qp) => {\n-                if let Def::VariantCtor(def_id, _) = cx.tables.qpath_def(qp, expression.hir_id) {\n+                if let Def::Ctor(def_id, def::CtorOf::Variant, _) = cx.tables.qpath_def(qp, expression.hir_id) {\n                     return match_def_path(cx.tcx, def_id, &OPTION_NONE);\n                 }\n "}, {"sha": "84c9509844fcaf2f79f2545cad6a7c2f0d2cd92d", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -157,25 +157,30 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }) = higher::range(cx, expr);\n             if let Some(y) = y_plus_one(end);\n             then {\n+                let span = expr.span\n+                    .ctxt()\n+                    .outer()\n+                    .expn_info()\n+                    .map_or(expr.span, |info| info.call_site);\n                 span_lint_and_then(\n                     cx,\n                     RANGE_PLUS_ONE,\n-                    expr.span,\n+                    span,\n                     \"an inclusive range would be more readable\",\n                     |db| {\n                         let start = start.map_or(String::new(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n+                        if let Some(is_wrapped) = &snippet_opt(cx, span) {\n                             if is_wrapped.starts_with('(') && is_wrapped.ends_with(')') {\n                                 db.span_suggestion(\n-                                    expr.span,\n+                                    span,\n                                     \"use\",\n                                     format!(\"({}..={})\", start, end),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             } else {\n                                 db.span_suggestion(\n-                                    expr.span,\n+                                    span,\n                                     \"use\",\n                                     format!(\"{}..={}\", start, end),\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "95609d3f302961bd9fc2ac90dccd7a1613a4db45", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -1533,7 +1533,7 @@ impl LintPass for CharLitAsU8 {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        use syntax::ast::{LitKind, UintTy};\n+        use syntax::ast::LitKind;\n \n         if let ExprKind::Cast(ref e, _) = expr.node {\n             if let ExprKind::Lit(ref l) = e.node {\n@@ -1818,7 +1818,6 @@ impl Ord for FullInt {\n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<(FullInt, FullInt)> {\n     use std::*;\n-    use syntax::ast::{IntTy, UintTy};\n \n     if let ExprKind::Cast(ref cast_exp, _) = expr.node {\n         let pre_cast_ty = cx.tables.expr_ty(cast_exp);"}, {"sha": "d3b011a3bd983fbba296d2f153f40f2df26c109e", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         if path.segments.last().expect(SEGMENTS_MSG).ident.name != SelfUpper.name() {\n             if self.item_path.def == path.def {\n                 span_use_self_lint(self.cx, path);\n-            } else if let Def::StructCtor(ctor_did, CtorKind::Fn) = path.def {\n+            } else if let Def::Ctor(ctor_did, def::CtorOf::Struct, CtorKind::Fn) = path.def {\n                 if self.item_path.def.opt_def_id() == self.cx.tcx.parent(ctor_did) {\n                     span_use_self_lint(self.cx, path);\n                 }"}, {"sha": "3590b7ae9eea0ec698085c3b2e5846d8286f79f5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -27,7 +27,7 @@ use rustc::hir::def::Def;\n use rustc::hir::def_id::CrateNum;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc::hir::map::DisambiguatedDefPathData;\n+use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::hir::Node;\n use rustc::hir::*;\n use rustc::lint::{LateContext, Level, Lint, LintContext};\n@@ -178,6 +178,12 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n         disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error> {\n         let mut path = print_prefix(self)?;\n+\n+        // Skip `::{{constructor}}` on tuple/unit structs.\n+        if let DefPathData::Ctor = disambiguated_data.data {\n+            return Ok(path);\n+        }\n+\n         path.push(disambiguated_data.data.as_interned_str().as_str());\n         Ok(path)\n     }\n@@ -863,7 +869,7 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> bool {\n         matches!(\n             cx.tables.qpath_def(qpath, id),\n-            def::Def::Variant(..) | def::Def::VariantCtor(..)\n+            def::Def::Variant(..) | def::Def::Ctor(_, def::CtorOf::Variant, _)\n         )\n     }\n "}, {"sha": "9b8b2372c53bc38d8a1feb675fa0ab43871f13fa", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -59,6 +59,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             then {\n                 // report the error around the `vec!` not inside `<std macros>:`\n                 let span = arg.span\n+                    .ctxt()\n+                    .outer()\n+                    .expn_info()\n+                    .map(|info| info.call_site)\n+                    .expect(\"unable to get call_site\")\n                     .ctxt()\n                     .outer()\n                     .expn_info()"}, {"sha": "834d11861c0d58540e9420c82f64a41f379f1399", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -93,7 +93,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n             ls.register_early_pass(Some(sess), true, false, pass);\n         }\n         for pass in late_lint_passes {\n-            ls.register_late_pass(Some(sess), true, pass);\n+            ls.register_late_pass(Some(sess), true, false, false, pass);\n         }\n \n         for (name, (to, deprecated_name)) in lint_groups {"}, {"sha": "1a53b9659082e1755186a733d8ddb7a0cc24b2bc", "filename": "tests/compile-test.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -1,7 +1,7 @@\n #![feature(test)]\n \n use compiletest_rs as compiletest;\n-extern crate test;\n+use libtest::TestDescAndFn;\n \n use std::env::{set_var, var};\n use std::ffi::OsStr;\n@@ -74,15 +74,12 @@ fn run_mode(mode: &str, dir: PathBuf) {\n     compiletest::run_tests(&cfg);\n }\n \n-fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDescAndFn>) -> Result<bool, io::Error> {\n+#[warn(clippy::identity_conversion)]\n+fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<TestDescAndFn>) -> Result<bool, io::Error> {\n     let mut result = true;\n     let opts = compiletest::test_opts(config);\n     for dir in fs::read_dir(&config.src_base)? {\n-        let dir = dir?;\n-        if !dir.file_type()?.is_dir() {\n-            continue;\n-        }\n-        let dir_path = dir.path();\n+        let dir_path = dir.unwrap().path();\n         set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n         for file in fs::read_dir(&dir_path)? {\n             let file = file?;\n@@ -101,9 +98,25 @@ fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDesc\n             let test_name = compiletest::make_test_name(&config, &paths);\n             let index = tests\n                 .iter()\n-                .position(|test| test.desc.name == test_name)\n+                .position(|test| test.desc.name.to_string() == test_name.to_string())\n                 .expect(\"The test should be in there\");\n-            result &= test::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n+            let opts = libtest::TestOpts {\n+                list: opts.list,\n+                filter: opts.filter.clone(),\n+                filter_exact: opts.filter_exact,\n+                exclude_should_panic: Default::default(),\n+                run_ignored: libtest::RunIgnored::No,\n+                run_tests: opts.run_tests,\n+                bench_benchmarks: opts.bench_benchmarks,\n+                logfile: opts.logfile.clone(),\n+                nocapture: opts.nocapture,\n+                color: libtest::ColorConfig::AutoColor,\n+                format: libtest::OutputFormat::Pretty,\n+                test_threads: opts.test_threads,\n+                skip: opts.skip.clone(),\n+                options: libtest::Options::new(),\n+            };\n+            result &= libtest::run_tests_console(&opts, vec![tests.swap_remove(index)])?;\n         }\n     }\n     Ok(result)\n@@ -114,6 +127,22 @@ fn run_ui_toml() {\n     let config = config(\"ui\", path);\n     let tests = compiletest::make_tests(&config);\n \n+    let tests = tests\n+        .into_iter()\n+        .map(|test| {\n+            libtest::TestDescAndFn {\n+                desc: libtest::TestDesc {\n+                    name: libtest::TestName::DynTestName(test.desc.name.to_string()),\n+                    ignore: test.desc.ignore,\n+                    allow_fail: test.desc.allow_fail,\n+                    should_panic: libtest::ShouldPanic::No,\n+                },\n+                // oli obk giving up\n+                testfn: unsafe { std::mem::transmute(test.testfn) },\n+            }\n+        })\n+        .collect();\n+\n     let res = run_ui_toml_tests(&config, tests);\n     match res {\n         Ok(true) => {},"}, {"sha": "c1ad236148405e61f33455ae24492f991f60f7dc", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -198,83 +198,83 @@ error: it is more concise to loop over references to containers instead of using\n   --> $DIR/for_loop.rs:170:15\n    |\n LL |     for _v in vec.iter() {}\n-   |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n+   |               ^^^^^^^^^^\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:172:15\n    |\n LL |     for _v in vec.iter_mut() {}\n-   |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n+   |               ^^^^^^^^^^^^^^\n \n error: it is more concise to loop over containers instead of using explicit iteration methods`\n   --> $DIR/for_loop.rs:175:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n-   |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n+   |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:178:15\n    |\n LL |     for _v in array.into_iter() {}\n-   |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:183:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n-   |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n+   |               ^^^^^^^^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:187:15\n    |\n LL |     for _v in [0; 32].iter() {}\n-   |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n+   |               ^^^^^^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:192:15\n    |\n LL |     for _v in ll.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n+   |               ^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:195:15\n    |\n LL |     for _v in vd.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n+   |               ^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:198:15\n    |\n LL |     for _v in bh.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n+   |               ^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:201:15\n    |\n LL |     for _v in hm.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n+   |               ^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:204:15\n    |\n LL |     for _v in bt.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n+   |               ^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:207:15\n    |\n LL |     for _v in hs.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n+   |               ^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n   --> $DIR/for_loop.rs:210:15\n    |\n LL |     for _v in bs.iter() {}\n-   |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n+   |               ^^^^^^^^^\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n   --> $DIR/for_loop.rs:212:15"}, {"sha": "659fd56f9a9d9bf7ae237dd06a98caa5c78427b7", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     for _ in &[1, 2, 3] {}\n     for _ in vec![X, X] {}\n     for _ in &vec![X, X] {}\n-    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n+    for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n \n     let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n     let _ = vec![1, 2, 3].into_iter();"}, {"sha": "c3e5c85618b8a3c0fb2d8d45128d68e73fe3e2b2", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -1,21 +1,15 @@\n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:13:24\n+  --> $DIR/into_iter_on_ref.rs:15:23\n    |\n-LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n-   |                        ^^^^^^^^^ help: call directly: `iter`\n+LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n+   |                       ^^^^^^^^^ help: call directly: `iter`\n    |\n note: lint level defined here\n   --> $DIR/into_iter_on_ref.rs:4:9\n    |\n LL | #![deny(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:15:23\n-   |\n-LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n-   |                       ^^^^^^^^^ help: call directly: `iter`\n-\n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n   --> $DIR/into_iter_on_ref.rs:17:30\n    |\n@@ -174,5 +168,5 @@ error: this .into_iter() call is equivalent to .iter() and will not move the Pat\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "f031dd105c25445568c5a729f2bbf6e28156f2e9", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -95,7 +95,7 @@ impl<T: Serialize, U> S<T, U> {\n         s.len() + t.capacity()\n     }\n \n-    fn bar(_t: T // Ok, since `&T: Serialize` too\n+    fn bar(_t: T, // Ok, since `&T: Serialize` too\n     ) {\n     }\n "}, {"sha": "68af85030ab2ed8e08f4924809a26270dc13d0c2", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -239,6 +239,7 @@ mod nesting {\n     struct Foo {}\n     impl Foo {\n         fn foo() {\n+            #[allow(unused_imports)]\n             use self::Foo; // Can't use Self here\n             struct Bar {\n                 foo: Foo, // Foo != Self"}, {"sha": "7a6d415528ad569b4241ef37d52b2310c6bee0b7", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -239,6 +239,7 @@ mod nesting {\n     struct Foo {}\n     impl Foo {\n         fn foo() {\n+            #[allow(unused_imports)]\n             use self::Foo; // Can't use Self here\n             struct Bar {\n                 foo: Foo, // Foo != Self"}, {"sha": "bf1f41fd64ede87bd15c2e69e6b085e52ff66f03", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25a11568fc5b995c2641560415e97244165dd278/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=25a11568fc5b995c2641560415e97244165dd278", "patch": "@@ -151,43 +151,43 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:260:21\n+  --> $DIR/use_self.rs:261:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:261:13\n+  --> $DIR/use_self.rs:262:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:248:29\n+  --> $DIR/use_self.rs:249:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:249:21\n+  --> $DIR/use_self.rs:250:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:303:13\n+  --> $DIR/use_self.rs:304:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:304:13\n+  --> $DIR/use_self.rs:305:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:306:13\n+  --> $DIR/use_self.rs:307:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`"}]}