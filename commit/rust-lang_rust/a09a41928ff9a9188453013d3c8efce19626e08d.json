{"sha": "a09a41928ff9a9188453013d3c8efce19626e08d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOWE0MTkyOGZmOWE5MTg4NDUzMDEzZDNjOGVmY2UxOTYyNmUwOGQ=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-03T16:45:58Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-14T20:47:04Z"}, "message": "derive: emit intrinsics::unreachable for impls on empty enums\n\nfixes #31574", "tree": {"sha": "42f0b64d730000e996c24840f9212a0d17d564dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42f0b64d730000e996c24840f9212a0d17d564dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09a41928ff9a9188453013d3c8efce19626e08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09a41928ff9a9188453013d3c8efce19626e08d", "html_url": "https://github.com/rust-lang/rust/commit/a09a41928ff9a9188453013d3c8efce19626e08d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09a41928ff9a9188453013d3c8efce19626e08d/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c433b703ead56ec4dd05b5f3ad39301d27e19953", "url": "https://api.github.com/repos/rust-lang/rust/commits/c433b703ead56ec4dd05b5f3ad39301d27e19953", "html_url": "https://github.com/rust-lang/rust/commit/c433b703ead56ec4dd05b5f3ad39301d27e19953"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "3896a7ce71462be4b4cf818c93e1cb003900cfb8", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a09a41928ff9a9188453013d3c8efce19626e08d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09a41928ff9a9188453013d3c8efce19626e08d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=a09a41928ff9a9188453013d3c8efce19626e08d", "patch": "@@ -381,6 +381,22 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n     visitor.types\n }\n \n+/// Replacement for expr_unreachable which generates intrinsics::unreachable()\n+/// instead of unreachable!()\n+fn expr_unreachable_intrinsic(cx: &ExtCtxt, sp: Span) -> P<Expr> {\n+    let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n+    let call = cx.expr_call_global(\n+        sp, path, vec![]);\n+    let unreachable = cx.expr_block(P(ast::Block {\n+        stmts: vec![],\n+        expr: Some(call),\n+        id: ast::DUMMY_NODE_ID,\n+        rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n+        span: sp }));\n+\n+    unreachable\n+}\n+\n impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n@@ -1297,16 +1313,7 @@ impl<'a> MethodDef<'a> {\n             //Since we know that all the arguments will match if we reach the match expression we\n             //add the unreachable intrinsics as the result of the catch all which should help llvm\n             //in optimizing it\n-            let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n-            let call = cx.expr_call_global(\n-                sp, path, vec![]);\n-            let unreachable = cx.expr_block(P(ast::Block {\n-                stmts: vec![],\n-                expr: Some(call),\n-                id: ast::DUMMY_NODE_ID,\n-                rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-                span: sp }));\n-            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], unreachable));\n+            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], expr_unreachable_intrinsic(cx, sp)));\n \n             // Final wrinkle: the self_args are expressions that deref\n             // down to desired l-values, but we cannot actually deref\n@@ -1382,7 +1389,7 @@ impl<'a> MethodDef<'a> {\n             // derive Debug on such a type could here generate code\n             // that needs the feature gate enabled.)\n \n-            cx.expr_unreachable(sp)\n+            expr_unreachable_intrinsic(cx, sp)\n         }\n         else {\n "}]}