{"sha": "8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzY4ZWNkZmNjNzY0YzdjMGRjZjVmY2VkY2I1MWIwOTJkOTk2MjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-14T15:25:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-14T15:25:19Z"}, "message": "Introduce more appropriate assertion mechanism\n\nrust-analyzer is a long-running program, so we *should* handle assertion\nfailures.\n\nSee also https://www.sqlite.org/assert.html.", "tree": {"sha": "f0f93d744416a1114b34472b91574afe3be14147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0f93d744416a1114b34472b91574afe3be14147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "html_url": "https://github.com/rust-lang/rust/commit/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865e05b5b47d3e27e8fe4458662e751e492a0f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/865e05b5b47d3e27e8fe4458662e751e492a0f51", "html_url": "https://github.com/rust-lang/rust/commit/865e05b5b47d3e27e8fe4458662e751e492a0f51"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "33df26761562d381c5dd2e7e01fd4bb6d9ee2716", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -590,8 +590,7 @@ fn main() { let _ = crate::$0 }\n         \"#,\n             expect![[r##\"\n                 fn main()  fn main()\n-                ma foo!(\u2026) #[macro_export]\n-                macro_rules! foo\n+                ma foo!(\u2026) #[macro_export] macro_rules! foo\n             \"##]],\n         );\n     }"}, {"sha": "53e1391f34e572a61be6852c68969ead635534f5", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -540,8 +540,7 @@ mod macros {\n \"#,\n             expect![[r##\"\n                 fn f()        fn f()\n-                ma concat!(\u2026) #[macro_export]\n-                macro_rules! concat\n+                ma concat!(\u2026) #[macro_export] macro_rules! concat\n                 md std\n             \"##]],\n         );\n@@ -597,8 +596,7 @@ fn main() { let v = $0 }\n \"#,\n             expect![[r##\"\n                 md m1\n-                ma baz!(\u2026) #[macro_export]\n-                macro_rules! baz\n+                ma baz!(\u2026) #[macro_export] macro_rules! baz\n                 fn main()  fn main()\n                 md m2\n                 ma bar!(\u2026) macro_rules! bar"}, {"sha": "0134ff219b6003a4e1fe1e535f6fd3626ce27f5f", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -7,6 +7,7 @@ use ide_db::helpers::{\n     insert_use::{self, ImportScope, MergeBehavior},\n     mod_path_to_ast, SnippetCap,\n };\n+use stdx::assert_never;\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n@@ -396,6 +397,9 @@ impl Builder {\n     }\n     pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder {\n         self.detail = detail.map(Into::into);\n+        if let Some(detail) = &self.detail {\n+            assert_never!(detail.contains('\\n'), \"multiline detail: {}\", detail);\n+        }\n         self\n     }\n     #[allow(unused)]"}, {"sha": "bf42654a88cc1190452553b74d8df16dababd822", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -70,6 +70,11 @@ fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n     tracing_setup::setup_tracing()?;\n \n     profile::init();\n+\n+    if !cfg!(debug_assertions) {\n+        stdx::set_assert_hook(|loc, args| log::error!(\"assertion failed at {}: {}\", loc, args));\n+    }\n+\n     Ok(())\n }\n "}, {"sha": "1ff2559bbdaa20c50a4c50bd0c7ecffe10b869b6", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -4,6 +4,8 @@ use std::{cmp::Ordering, ops, process, time::Instant};\n mod macros;\n pub mod panic_context;\n \n+pub use crate::macros::{on_assert_failure, set_assert_hook};\n+\n #[inline(always)]\n pub fn is_ci() -> bool {\n     option_env!(\"CI\").is_some()"}, {"sha": "263b938e3f20ad56ab9c9a3a874dbd5a5467d609", "filename": "crates/stdx/src/macros.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fstdx%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fstdx%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fmacros.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -1,4 +1,9 @@\n //! Convenience macros.\n+\n+use std::{\n+    fmt, mem, panic,\n+    sync::atomic::{AtomicUsize, Ordering::SeqCst},\n+};\n #[macro_export]\n macro_rules! eprintln {\n     ($($tt:tt)*) => {{\n@@ -44,3 +49,50 @@ macro_rules! impl_from {\n         )*\n     }\n }\n+\n+/// A version of `assert!` macro which allows to handle an assertion failure.\n+///\n+/// In release mode, it returns the condition and logs an error.\n+///\n+/// ```\n+/// if assert_never!(impossible) {\n+///     // Heh, this shouldn't have happened, but lets try to soldier on...\n+///     return None;\n+/// }\n+/// ```\n+///\n+/// Rust analyzer is a long-running process, and crashing really isn't an option.\n+///\n+/// Shamelessly stolen from: https://www.sqlite.org/assert.html\n+#[macro_export]\n+macro_rules! assert_never {\n+    ($cond:expr) => { $crate::assert_always!($cond, \"\") };\n+    ($cond:expr, $($fmt:tt)*) => {{\n+        let value = $cond;\n+        if value {\n+            $crate::on_assert_failure(\n+                format_args!($($fmt)*)\n+            );\n+        }\n+        value\n+    }};\n+}\n+\n+type AssertHook = fn(&panic::Location<'_>, fmt::Arguments<'_>);\n+static HOOK: AtomicUsize = AtomicUsize::new(0);\n+\n+pub fn set_assert_hook(hook: AssertHook) {\n+    HOOK.store(hook as usize, SeqCst);\n+}\n+\n+#[cold]\n+#[track_caller]\n+pub fn on_assert_failure(args: fmt::Arguments) {\n+    let hook: usize = HOOK.load(SeqCst);\n+    if hook == 0 {\n+        panic!(\"\\n  assertion failed: {}\\n\", args);\n+    }\n+\n+    let hook: AssertHook = unsafe { mem::transmute::<usize, AssertHook>(hook) };\n+    hook(panic::Location::caller(), args)\n+}"}, {"sha": "cd956d950deb734a6541b2f46f77a059be41c29d", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -80,7 +80,7 @@ pub fn macro_label(node: &ast::Macro) -> String {\n     let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n     match node {\n         ast::Macro::MacroRules(node) => {\n-            let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n+            let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export] \" } else { \"\" };\n             format!(\"{}macro_rules! {}\", vis, name)\n         }\n         ast::Macro::MacroDef(node) => {"}, {"sha": "21330948ba5a38ca17834d7cbc994de18d73dee7", "filename": "docs/dev/style.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=8dc68ecdfcc764c7c0dcf5fcedcb51b092d99620", "patch": "@@ -215,6 +215,11 @@ if idx >= len {\n \n **Rationale:** its useful to see the invariant relied upon by the rest of the function clearly spelled out.\n \n+## Assertions\n+\n+Assert liberally.\n+Prefer `stdx::assert_never!` to standard `assert!`.\n+\n ## Getters & Setters\n \n If a field can have any value without breaking invariants, make the field public."}]}