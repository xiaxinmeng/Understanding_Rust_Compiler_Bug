{"sha": "ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "node_id": "C_kwDOAAsO6NoAKGVkMzBlZmZmM2IyZDllNDYzNmQzYjFiOWU5ZGMyNzUzNjJiNjRhNjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T01:39:41Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-24T02:53:25Z"}, "message": "Comments, another test", "tree": {"sha": "4f255fca234a2179e7800078900efb3eb178a4d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f255fca234a2179e7800078900efb3eb178a4d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "html_url": "https://github.com/rust-lang/rust/commit/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2540c2b76138b988629b48f54381835f13f18792", "url": "https://api.github.com/repos/rust-lang/rust/commits/2540c2b76138b988629b48f54381835f13f18792", "html_url": "https://github.com/rust-lang/rust/commit/2540c2b76138b988629b48f54381835f13f18792"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "9b6cce86fffc4effcb0b085f4ae1a64e5348cd02", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "patch": "@@ -235,6 +235,40 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n     }\n }\n \n+/// Assemble a list of predicates that would be present on a theoretical\n+/// user impl for an object type. These predicates must be checked any time\n+/// we assemble a built-in object candidate for an object type, since they\n+/// are not implied by the well-formedness of the type.\n+///\n+/// For example, given the following traits:\n+///\n+/// ```rust,ignore (theoretical code)\n+/// trait Foo: Baz {\n+///     type Bar: Copy;\n+/// }\n+///\n+/// trait Baz {}\n+/// ```\n+///\n+/// For the dyn type `dyn Foo<Item = Ty>`, we can imagine there being a\n+/// pair of theoretical impls:\n+///\n+/// ```rust,ignore (theoretical code)\n+/// impl Foo for dyn Foo<Item = Ty>\n+/// where\n+///     Self: Baz,\n+///     <Self as Foo>::Bar: Copy,\n+/// {\n+///     type Bar = Ty;\n+/// }\n+///\n+/// impl Baz for dyn Foo<Item = Ty> {}\n+/// ```\n+///\n+/// However, in order to make such impls well-formed, we need to do an\n+/// additional step of eagerly folding the associated types in the where\n+/// clauses of the impl. In this example, that means replacing\n+/// `<Self as Foo>::Bar` with `Ty` in the first impl.\n pub(crate) fn predicates_for_object_candidate<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -247,6 +281,8 @@ pub(crate) fn predicates_for_object_candidate<'tcx>(\n         tcx.super_predicates_of(trait_ref.def_id).instantiate(tcx, trait_ref.substs).predicates,\n     );\n     for item in tcx.associated_items(trait_ref.def_id).in_definition_order() {\n+        // FIXME(associated_const_equality): Also add associated consts to\n+        // the requirements here.\n         if item.kind == ty::AssocKind::Type {\n             requirements.extend(tcx.item_bounds(item.def_id).subst(tcx, trait_ref.substs));\n         }\n@@ -290,13 +326,16 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceProjectionWith<'_, 'tcx> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n             && let Some(replacement) = self.mapping.get(&alias_ty.def_id)\n         {\n+            // We may have a case where our object type's projection bound is higher-ranked,\n+            // but the where clauses we instantiated are not. We can solve this by instantiating\n+            // the binder at the usage site.\n             let proj = self.ecx.instantiate_binder_with_infer(*replacement);\n-            // Technically this folder could be fallible?\n+            // FIXME: Technically this folder could be fallible?\n             let nested = self\n                 .ecx\n                 .eq(self.param_env, alias_ty, proj.projection_ty)\n                 .expect(\"expected to be able to unify goal projection with dyn's projection\");\n-            // Technically we could register these too..\n+            // FIXME: Technically we could register these too..\n             assert!(nested.is_empty(), \"did not expect unification to have any nested goals\");\n             proj.term.ty().unwrap()\n         } else {"}, {"sha": "712759ef0e612097d623ba6f0b6fbd79a3357495", "filename": "tests/ui/traits/new-solver/more-object-bound.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.rs?ref=ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Ztrait-solver=next\n+// From #80800\n+\n+trait SuperTrait {\n+    type A;\n+    type B;\n+}\n+\n+trait Trait: SuperTrait<A = <Self as SuperTrait>::B> {}\n+\n+fn transmute<A, B>(x: A) -> B {\n+    foo::<A, B, dyn Trait<A = A, B = B>>(x)\n+    //~^ ERROR type annotations needed: cannot satisfy `dyn Trait<A = A, B = B>: Trait`\n+}\n+\n+fn foo<A, B, T: ?Sized>(x: T::A) -> B\n+where\n+    T: Trait<B = B>,\n+{\n+    x\n+}\n+\n+static X: u8 = 0;\n+fn main() {\n+    let x = transmute::<&u8, &[u8; 1_000_000]>(&X);\n+    println!(\"{:?}\", x[100_000]);\n+}"}, {"sha": "208fdecb08fc9f6856f075e615429466577c59ac", "filename": "tests/ui/traits/new-solver/more-object-bound.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed30efff3b2d9e4636d3b1b9e9dc275362b64a62/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fmore-object-bound.stderr?ref=ed30efff3b2d9e4636d3b1b9e9dc275362b64a62", "patch": "@@ -0,0 +1,19 @@\n+error[E0283]: type annotations needed: cannot satisfy `dyn Trait<A = A, B = B>: Trait`\n+  --> $DIR/more-object-bound.rs:12:5\n+   |\n+LL |     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: cannot satisfy `dyn Trait<A = A, B = B>: Trait`\n+note: required by a bound in `foo`\n+  --> $DIR/more-object-bound.rs:18:8\n+   |\n+LL | fn foo<A, B, T: ?Sized>(x: T::A) -> B\n+   |    --- required by a bound in this function\n+LL | where\n+LL |     T: Trait<B = B>,\n+   |        ^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}]}