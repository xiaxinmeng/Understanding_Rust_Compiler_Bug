{"sha": "2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NDljYmVjOWRmZTAyY2RjOTNhM2NmM2JmZTk2MzhlNWE0YzI5NDg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-16T22:25:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-19T02:25:55Z"}, "message": "rustc_resolve: Do not allow mods to shadow types\n\nThis commit modifies resolve to prevent conflicts with typedef names in the same\nmethod that conflits are prevented with enum names. This is a breaking change\ndue to the differing semantics in resolve, and any errors generated on behalf of\nthis change require that a conflicting typedef, module, or structure to be\nrenamed so they do not conflict.\n\n[breaking-change]\nCloses #6936", "tree": {"sha": "adc17d5a487ce8a29f354e0d24391f0121a53882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc17d5a487ce8a29f354e0d24391f0121a53882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "html_url": "https://github.com/rust-lang/rust/commit/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46366faf613685eeeacf896ee9d284b28d4a3046", "url": "https://api.github.com/repos/rust-lang/rust/commits/46366faf613685eeeacf896ee9d284b28d4a3046", "html_url": "https://github.com/rust-lang/rust/commit/46366faf613685eeeacf896ee9d284b28d4a3046"}], "stats": {"total": 89, "additions": 73, "deletions": 16}, "files": [{"sha": "21eec383df465508d99304f6ea6f14b1f8c96421", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "patch": "@@ -321,9 +321,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             // These items live in the type namespace.\n             ItemTy(..) => {\n                 let name_bindings =\n-                    self.add_child(name, parent, ForbidDuplicateTypesAndModules, sp);\n+                    self.add_child(name, parent, ForbidDuplicateTypesAndModules,\n+                                   sp);\n \n-                name_bindings.define_type(DefTy(local_def(item.id), false), sp, modifiers);\n+                name_bindings.define_type(DefTy(local_def(item.id), false), sp,\n+                                          modifiers);\n+\n+                let parent_link = self.get_parent_link(parent, name);\n+                name_bindings.set_module_kind(parent_link,\n+                                              Some(local_def(item.id)),\n+                                              TypeModuleKind,\n+                                              false,\n+                                              is_public,\n+                                              sp);\n                 parent.clone()\n             }\n \n@@ -423,21 +433,19 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         return parent.clone();\n                     }\n                 };\n-\n                 // Create the module and add all methods.\n-                let parent_opt = parent.children.borrow().get(&mod_name).cloned();\n-                let new_parent = match parent_opt {\n+                let child_opt = parent.children.borrow().get(&mod_name)\n+                                       .and_then(|m| m.get_module_if_available());\n+                let new_parent = match child_opt {\n                     // It already exists\n-                    Some(ref child) if child.get_module_if_available()\n-                        .is_some() &&\n-                        (child.get_module().kind.get() == ImplModuleKind ||\n-                         child.get_module().kind.get() == TraitModuleKind) => {\n-                            child.get_module()\n-                        }\n-                    Some(ref child) if child.get_module_if_available()\n-                        .is_some() &&\n-                        child.get_module().kind.get() ==\n-                        EnumModuleKind => child.get_module(),\n+                    Some(ref child) if (child.kind.get() == ImplModuleKind ||\n+                                        child.kind.get() == TraitModuleKind) => {\n+                        child.clone()\n+                    }\n+                    Some(ref child) if child.kind.get() == EnumModuleKind ||\n+                                       child.kind.get() == TypeModuleKind => {\n+                        child.clone()\n+                    }\n                     // Create the module\n                     _ => {\n                         let name_bindings =\n@@ -859,7 +867,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n         let kind = match def {\n             DefTy(_, true) => EnumModuleKind,\n-            DefStruct(..) | DefTy(..) => ImplModuleKind,\n+            DefTy(_, false) => TypeModuleKind,\n+            DefStruct(..) => ImplModuleKind,\n             _ => NormalModuleKind\n         };\n "}, {"sha": "153333c6782eff6e139cd571ffba4385cd029273", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "patch": "@@ -459,6 +459,7 @@ enum ModuleKind {\n     TraitModuleKind,\n     ImplModuleKind,\n     EnumModuleKind,\n+    TypeModuleKind,\n     AnonymousModuleKind,\n }\n \n@@ -2240,6 +2241,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         TraitModuleKind |\n                         ImplModuleKind |\n                         EnumModuleKind |\n+                        TypeModuleKind |\n                         AnonymousModuleKind => {\n                             search_module = parent_module_node.upgrade().unwrap();\n                         }\n@@ -2337,6 +2339,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         TraitModuleKind |\n                         ImplModuleKind |\n                         EnumModuleKind |\n+                        TypeModuleKind |\n                         AnonymousModuleKind => module_ = new_module,\n                     }\n                 }\n@@ -2353,6 +2356,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             TraitModuleKind |\n             ImplModuleKind |\n             EnumModuleKind |\n+            TypeModuleKind |\n             AnonymousModuleKind => {\n                 match self.get_nearest_normal_module_parent(module_.clone()) {\n                     None => module_,"}, {"sha": "f5c879a07ee56b602d8648c7fd5974849bed3b27", "filename": "src/test/compile-fail/issue-6936.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/src%2Ftest%2Fcompile-fail%2Fissue-6936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948/src%2Ftest%2Fcompile-fail%2Fissue-6936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6936.rs?ref=2549cbec9dfe02cdc93a3cf3bfe9638e5a4c2948", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct T;\n+\n+mod t1 {\n+    type Foo = ::T;\n+    mod Foo {} //~ ERROR: duplicate definition of type or module `Foo`\n+}\n+\n+mod t2 {\n+    type Foo = ::T;\n+    struct Foo; //~ ERROR: duplicate definition of type or module `Foo`\n+}\n+\n+mod t3 {\n+    type Foo = ::T;\n+    enum Foo {} //~ ERROR: duplicate definition of type or module `Foo`\n+}\n+\n+mod t4 {\n+    type Foo = ::T;\n+    fn Foo() {} // ok\n+}\n+\n+mod t5 {\n+    type Bar<T> = T;\n+    mod Bar {} //~ ERROR: duplicate definition of type or module `Bar`\n+}\n+\n+mod t6 {\n+    type Foo = ::T;\n+    impl Foo {} // ok\n+}\n+\n+\n+fn main() {}"}]}