{"sha": "2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "node_id": "C_kwDOAAsO6NoAKDJkYTZlNjY5NDg4NzkxYmQyZDM2ZTNhMzVmYTJlNGU0ZTAyYmM2NDc", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-19T16:57:19Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-23T19:16:51Z"}, "message": "Support incremental in compiletest for non-incremental modes.", "tree": {"sha": "145f1558d3635ac1ba881285f3339d0f737dcd3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/145f1558d3635ac1ba881285f3339d0f737dcd3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "html_url": "https://github.com/rust-lang/rust/commit/2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0132f8258ae0fbc4f2b461b28d510222d22aa979", "url": "https://api.github.com/repos/rust-lang/rust/commits/0132f8258ae0fbc4f2b461b28d510222d22aa979", "html_url": "https://github.com/rust-lang/rust/commit/0132f8258ae0fbc4f2b461b28d510222d22aa979"}], "stats": {"total": 285, "additions": 166, "deletions": 119}, "files": [{"sha": "c73d2a10a967bd3911425714e414af06864a340e", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,9 +1,10 @@\n //\n \n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n // We specify opt-level=0 because `drop_in_place` is `Internal` when optimizing\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/extern-drop-glue\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus -Copt-level=0\n \n #![allow(dead_code)]"}, {"sha": "638ec079a0bce75a454e29f37fdf4e72f984cc2f", "filename": "src/test/codegen-units/partitioning/extern-generic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-generic.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=eager -Cincremental=tmp/partitioning-tests/extern-generic -Zshare-generics=y\n+// incremental\n+// compile-flags:-Zprint-mono-items=eager -Zshare-generics=y\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "118b7bdf4da8b9ee0c7a6508cf17089fd6b134a1", "filename": "src/test/codegen-units/partitioning/incremental-merging.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fincremental-merging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fincremental-merging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fincremental-merging.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,6 +1,7 @@\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/incremental-merging\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Ccodegen-units=3\n \n #![crate_type = \"rlib\"]"}, {"sha": "1cc21632e4818ff8b6980ae76102a97b47baa349", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/inlining-from-extern-crate\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus\n \n #![crate_type=\"lib\"]"}, {"sha": "2fd853a44b8ffc12d97d6d0342e426bf10ee0fee", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,8 +1,9 @@\n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n // We specify opt-level=0 because `drop_in_place` is `Internal` when optimizing\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-drop-glue\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus -Copt-level=0\n \n #![allow(dead_code)]"}, {"sha": "38aec7291df3f45817157a5f9d415493bb9bbe18", "filename": "src/test/codegen-units/partitioning/local-generic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-generic.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,6 +1,7 @@\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=eager -Cincremental=tmp/partitioning-tests/local-generic\n+// incremental\n+// compile-flags:-Zprint-mono-items=eager\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "318f0c28a5981a4a44cde8fb580cf2f15de2b111", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-inlining-but-not-all\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus=no\n \n #![allow(dead_code)]"}, {"sha": "841a428e9dd2ffb9ef0f473737571a89b7b259a9", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-inlining\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]"}, {"sha": "03c37954d151363e2252e156cc9c2c1f104ab012", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/local-transitive-inlining\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]"}, {"sha": "8220dc12ee0c6ac7dc44f4258edda4e8e45dc997", "filename": "src/test/codegen-units/partitioning/methods-are-with-self-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -4,9 +4,10 @@\n // ignore-test\n \n //\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/methods-are-with-self-type\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n \n #![allow(dead_code)]\n #![feature(start)]"}, {"sha": "ce7fe9c3a4ff3ae4c1fe30fed39c774d4f329315", "filename": "src/test/codegen-units/partitioning/regular-modules.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fregular-modules.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,6 +1,7 @@\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=eager -Cincremental=tmp/partitioning-tests/regular-modules\n+// incremental\n+// compile-flags:-Zprint-mono-items=eager\n \n #![allow(dead_code)]\n #![crate_type=\"lib\"]"}, {"sha": "ebe96bfb746af1962dcad076d453324b837f445e", "filename": "src/test/codegen-units/partitioning/shared-generics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fshared-generics.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -2,7 +2,8 @@\n // no-prefer-dynamic\n // NOTE: We always compile this test with -Copt-level=0 because higher opt-levels\n //       prevent drop-glue from participating in share-generics.\n-// compile-flags:-Zprint-mono-items=eager -Zshare-generics=yes -Cincremental=tmp/partitioning-tests/shared-generics-exe -Copt-level=0\n+// incremental\n+// compile-flags:-Zprint-mono-items=eager -Zshare-generics=yes -Copt-level=0\n \n #![crate_type=\"rlib\"]\n "}, {"sha": "b11d6696dc00ad80288c5d78b0cc93f8d4163b7c", "filename": "src/test/codegen-units/partitioning/statics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,6 +1,7 @@\n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/statics\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n \n #![crate_type=\"rlib\"]\n "}, {"sha": "cedcca804b36581722e5c75e3d256ec64b2114b9", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,8 +1,9 @@\n //\n \n-// We specify -C incremental here because we want to test the partitioning for\n+// We specify incremental here because we want to test the partitioning for\n // incremental compilation\n-// compile-flags:-Zprint-mono-items=lazy -Cincremental=tmp/partitioning-tests/vtable-through-const\n+// incremental\n+// compile-flags:-Zprint-mono-items=lazy\n // compile-flags:-Zinline-in-all-cgus\n \n // This test case makes sure, that references made through constants are"}, {"sha": "d854dce382fc47ea1591f9ea353f27092a708b97", "filename": "src/test/ui/associated-type-bounds/traits-assoc-type-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-type-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-type-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftraits-assoc-type-macros.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-// compile-flags:-Cincremental=tmp/traits-assoc-type-macros\n+// incremental\n \n // This test case makes sure that we can compile with incremental compilation\n // enabled when there are macros, traits, inheritance and associated types involved."}, {"sha": "2280154c7157ce4dbe3896635d42cb79755774fa", "filename": "src/test/ui/async-await/issue-72442.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// compile-flags:-Cincremental=tmp/issue-72442\n+// incremental\n \n use std::fs::File;\n use std::future::Future;"}, {"sha": "6d6eff4864ee3663cc1c415d4d9304a25932e433", "filename": "src/test/ui/async-await/issues/issue-64964.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n-// compile-flags: -Z query-dep-graph -C incremental=tmp/issue-64964\n+// incremental\n+// compile-flags: -Z query-dep-graph\n // edition:2018\n \n // Regression test for ICE related to `await`ing in a method + incr. comp. (#64964)"}, {"sha": "978c1994800c901b413b0c1457440ada4965f4af", "filename": "src/test/ui/dep-graph/dep-graph-assoc-type-codegen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-assoc-type-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-assoc-type-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-assoc-type-codegen.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test that when a trait impl changes, fns whose body uses that trait\n // must also be recompiled.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-assoc-type-codegen\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(warnings)]"}, {"sha": "cdc268cff992e0fb94f52f19e01872c2e15bd253", "filename": "src/test/ui/dep-graph/dep-graph-assoc-type-codegen.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-assoc-type-codegen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-assoc-type-codegen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-assoc-type-codegen.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,5 @@\n error: OK\n-  --> $DIR/dep-graph-assoc-type-codegen.rs:28:5\n+  --> $DIR/dep-graph-assoc-type-codegen.rs:29:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4a3a8bb6bf9394808448c13964ba49141364737f", "filename": "src/test/ui/dep-graph/dep-graph-caller-callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-caller-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-caller-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-caller-callee.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test that immediate callers have to change when callee changes, but\n // not callers' callers.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-caller-callee\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "4d06dc7f3ed37250ca205691b0489f0fd4a491b1", "filename": "src/test/ui/dep-graph/dep-graph-caller-callee.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-caller-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-caller-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-caller-callee.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,11 +1,11 @@\n error: OK\n-  --> $DIR/dep-graph-caller-callee.rs:20:5\n+  --> $DIR/dep-graph-caller-callee.rs:21:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `x` to `typeck`\n-  --> $DIR/dep-graph-caller-callee.rs:31:5\n+  --> $DIR/dep-graph-caller-callee.rs:32:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fcf9f6387102f64c2012b080b2882ef4f313a3b6", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test cases where a changing struct appears in the signature of fns\n // and methods.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-struct-signature\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "60bfbe94a8a8b7055ad4ad41e64842e2a50e63cb", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,131 +1,131 @@\n error: no path from `WillChange` to `type_of`\n-  --> $DIR/dep-graph-struct-signature.rs:27:5\n+  --> $DIR/dep-graph-struct-signature.rs:28:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `associated_item`\n-  --> $DIR/dep-graph-struct-signature.rs:28:5\n+  --> $DIR/dep-graph-struct-signature.rs:29:5\n    |\n LL |     #[rustc_then_this_would_need(associated_item)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `trait_def`\n-  --> $DIR/dep-graph-struct-signature.rs:29:5\n+  --> $DIR/dep-graph-struct-signature.rs:30:5\n    |\n LL |     #[rustc_then_this_would_need(trait_def)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:31:9\n+  --> $DIR/dep-graph-struct-signature.rs:32:9\n    |\n LL |         #[rustc_then_this_would_need(fn_sig)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:35:5\n+  --> $DIR/dep-graph-struct-signature.rs:36:5\n    |\n LL |     #[rustc_then_this_would_need(fn_sig)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:36:5\n+  --> $DIR/dep-graph-struct-signature.rs:37:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:39:5\n+  --> $DIR/dep-graph-struct-signature.rs:40:5\n    |\n LL |     #[rustc_then_this_would_need(fn_sig)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:40:5\n+  --> $DIR/dep-graph-struct-signature.rs:41:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:45:5\n+  --> $DIR/dep-graph-struct-signature.rs:46:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:47:9\n+  --> $DIR/dep-graph-struct-signature.rs:48:9\n    |\n LL |         #[rustc_then_this_would_need(fn_sig)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:48:9\n+  --> $DIR/dep-graph-struct-signature.rs:49:9\n    |\n LL |         #[rustc_then_this_would_need(typeck)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:52:5\n+  --> $DIR/dep-graph-struct-signature.rs:53:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:54:9\n+  --> $DIR/dep-graph-struct-signature.rs:55:9\n    |\n LL |         #[rustc_then_this_would_need(fn_sig)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:55:9\n+  --> $DIR/dep-graph-struct-signature.rs:56:9\n    |\n LL |         #[rustc_then_this_would_need(typeck)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:60:9\n+  --> $DIR/dep-graph-struct-signature.rs:61:9\n    |\n LL |         #[rustc_then_this_would_need(type_of)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:62:9\n+  --> $DIR/dep-graph-struct-signature.rs:63:9\n    |\n LL |         #[rustc_then_this_would_need(type_of)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `type_of`\n-  --> $DIR/dep-graph-struct-signature.rs:67:5\n+  --> $DIR/dep-graph-struct-signature.rs:68:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `type_of`\n-  --> $DIR/dep-graph-struct-signature.rs:74:5\n+  --> $DIR/dep-graph-struct-signature.rs:75:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `fn_sig`\n-  --> $DIR/dep-graph-struct-signature.rs:76:9\n+  --> $DIR/dep-graph-struct-signature.rs:77:9\n    |\n LL |         #[rustc_then_this_would_need(fn_sig)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `fn_sig`\n-  --> $DIR/dep-graph-struct-signature.rs:80:5\n+  --> $DIR/dep-graph-struct-signature.rs:81:5\n    |\n LL |     #[rustc_then_this_would_need(fn_sig)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `fn_sig`\n-  --> $DIR/dep-graph-struct-signature.rs:83:5\n+  --> $DIR/dep-graph-struct-signature.rs:84:5\n    |\n LL |     #[rustc_then_this_would_need(fn_sig)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `typeck`\n-  --> $DIR/dep-graph-struct-signature.rs:84:5\n+  --> $DIR/dep-graph-struct-signature.rs:85:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5da8df57064643a9472fe0177307ab1ad8f7b17d", "filename": "src/test/ui/dep-graph/dep-graph-trait-impl-two-traits-same-method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits-same-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits-same-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits-same-method.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test that adding an impl to a trait `Foo` DOES affect functions\n // that only use `Bar` if they have methods in common.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-trait-impl-two-traits-same-method\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "6f56cbc8dd7ae55d450a42782eb2054c964c0e98", "filename": "src/test/ui/dep-graph/dep-graph-trait-impl-two-traits-same-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits-same-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits-same-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits-same-method.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,11 +1,11 @@\n error: OK\n-  --> $DIR/dep-graph-trait-impl-two-traits-same-method.rs:32:5\n+  --> $DIR/dep-graph-trait-impl-two-traits-same-method.rs:33:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `x::<impl Foo for u32>` to `typeck`\n-  --> $DIR/dep-graph-trait-impl-two-traits-same-method.rs:41:5\n+  --> $DIR/dep-graph-trait-impl-two-traits-same-method.rs:42:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0331e75b2fe8d6c060d1792508d77cf07033fb6e", "filename": "src/test/ui/dep-graph/dep-graph-trait-impl-two-traits.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test that adding an impl to a trait `Foo` does not affect functions\n // that only use `Bar`, so long as they do not have methods in common.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-trait-impl-two-traits\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(warnings)]"}, {"sha": "08f382cc024c7377830943c77a04ebd0fbb65e83", "filename": "src/test/ui/dep-graph/dep-graph-trait-impl-two-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl-two-traits.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,11 +1,11 @@\n error: no path from `x::<impl Foo for char>` to `typeck`\n-  --> $DIR/dep-graph-trait-impl-two-traits.rs:31:5\n+  --> $DIR/dep-graph-trait-impl-two-traits.rs:32:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `x::<impl Foo for char>` to `typeck`\n-  --> $DIR/dep-graph-trait-impl-two-traits.rs:40:5\n+  --> $DIR/dep-graph-trait-impl-two-traits.rs:41:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "19002965b93721a6ece38d222e74c19436df86ce", "filename": "src/test/ui/dep-graph/dep-graph-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test that when a trait impl changes, fns whose body uses that trait\n // must also be recompiled.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-trait-impl\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(warnings)]"}, {"sha": "bfee6d5c87b3452572e1979a6abc5863180426aa", "filename": "src/test/ui/dep-graph/dep-graph-trait-impl.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-trait-impl.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,29 +1,29 @@\n error: OK\n-  --> $DIR/dep-graph-trait-impl.rs:27:5\n+  --> $DIR/dep-graph-trait-impl.rs:28:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-trait-impl.rs:32:5\n+  --> $DIR/dep-graph-trait-impl.rs:33:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-trait-impl.rs:37:5\n+  --> $DIR/dep-graph-trait-impl.rs:38:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-trait-impl.rs:42:5\n+  --> $DIR/dep-graph-trait-impl.rs:43:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `x::<impl Foo for char>` to `typeck`\n-  --> $DIR/dep-graph-trait-impl.rs:55:5\n+  --> $DIR/dep-graph-trait-impl.rs:56:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0e1b3db192518df08b25fd35267f2ae2037a0f13", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,6 +1,7 @@\n // Test that changing what a `type` points to does not go unnoticed.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-type-alias\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "c59cf8014c3d1dfe69a5b9117c2d211b1ac96e63", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,71 +1,71 @@\n error: no path from `TypeAlias` to `type_of`\n-  --> $DIR/dep-graph-type-alias.rs:17:1\n+  --> $DIR/dep-graph-type-alias.rs:18:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:19:5\n+  --> $DIR/dep-graph-type-alias.rs:20:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `TypeAlias` to `type_of`\n-  --> $DIR/dep-graph-type-alias.rs:24:1\n+  --> $DIR/dep-graph-type-alias.rs:25:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:27:9\n+  --> $DIR/dep-graph-type-alias.rs:28:9\n    |\n LL |         #[rustc_then_this_would_need(type_of)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `TypeAlias` to `type_of`\n-  --> $DIR/dep-graph-type-alias.rs:33:1\n+  --> $DIR/dep-graph-type-alias.rs:34:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:35:5\n+  --> $DIR/dep-graph-type-alias.rs:36:5\n    |\n LL |     #[rustc_then_this_would_need(fn_sig)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `TypeAlias` to `type_of`\n-  --> $DIR/dep-graph-type-alias.rs:41:1\n+  --> $DIR/dep-graph-type-alias.rs:42:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:43:5\n+  --> $DIR/dep-graph-type-alias.rs:44:5\n    |\n LL |     #[rustc_then_this_would_need(fn_sig)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:44:5\n+  --> $DIR/dep-graph-type-alias.rs:45:5\n    |\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:48:1\n+  --> $DIR/dep-graph-type-alias.rs:49:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:51:1\n+  --> $DIR/dep-graph-type-alias.rs:52:1\n    |\n LL | #[rustc_then_this_would_need(fn_sig)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: OK\n-  --> $DIR/dep-graph-type-alias.rs:52:1\n+  --> $DIR/dep-graph-type-alias.rs:53:1\n    |\n LL | #[rustc_then_this_would_need(typeck)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "008434696d63ddfc7102070ba97c9c14e7edf58e", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,8 @@\n // Test that changing what a `type` points to does not go unnoticed\n // by the variance analysis.\n \n-// compile-flags: -Z query-dep-graph -C incremental=tmp/dep-graph-variance-alias\n+// incremental\n+// compile-flags: -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "554ff455a2073580156b905e8ed63021bd50bdbf", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,5 @@\n error: OK\n-  --> $DIR/dep-graph-variance-alias.rs:18:1\n+  --> $DIR/dep-graph-variance-alias.rs:19:1\n    |\n LL | #[rustc_then_this_would_need(variances_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c54be7f5dff0d9497668de34e60c7a8d062cf45c", "filename": "src/test/ui/suggestions/issue-72766.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-// compile-flags: -Cincremental=tmp/issue-72766\n+// incremental\n \n pub struct SadGirl;\n "}, {"sha": "2b4b480df0acf81e2b77c2c2ff396c0fa92b782e", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,5 +1,5 @@\n // Regression test for #87549.\n-// compile-flags: -C incremental=tmp/wf/hir-wf-check-erase-regions\n+// incremental\n \n pub struct Table<T, const N: usize>([Option<T>; N]);\n "}, {"sha": "cd0a56d08d8bc6c72d7d5b38db0093f672047652", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -459,3 +459,9 @@ pub fn output_base_dir(config: &Config, testpaths: &TestPaths, revision: Option<\n pub fn output_base_name(config: &Config, testpaths: &TestPaths, revision: Option<&str>) -> PathBuf {\n     output_base_dir(config, testpaths, revision).join(testpaths.file.file_stem().unwrap())\n }\n+\n+/// Absolute path to the directory to use for incremental compilation. Example:\n+///   /path/to/build/host-triple/test/ui/relative/testname.mode/testname.inc\n+pub fn incremental_dir(config: &Config, testpaths: &TestPaths) -> PathBuf {\n+    output_base_name(config, testpaths, None).with_extension(\"inc\")\n+}"}, {"sha": "efd85502799595ab12fc6e31528a3a5510996b88", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -113,6 +113,21 @@ pub struct TestProps {\n     // testing harness and used when generating compilation\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n+    // If `true`, this test will use incremental compilation.\n+    //\n+    // This can be set manually with the `incremental` header, or implicitly\n+    // by being a part of an incremental mode test. Using the `incremental`\n+    // header should be avoided if possible; using an incremental mode test is\n+    // preferred. Incremental mode tests support multiple passes, which can\n+    // verify that the incremental cache can be loaded properly after being\n+    // created. Just setting the header will only verify the behavior with\n+    // creating an incremental cache, but doesn't check that it is created\n+    // correctly.\n+    //\n+    // Compiletest will create the incremental directory, and ensure it is\n+    // empty before the test starts. Incremental mode tests will reuse the\n+    // incremental directory between passes in the same test.\n+    pub incremental: bool,\n     // How far should the test proceed while still passing.\n     pass_mode: Option<PassMode>,\n     // Ignore `--pass` overrides from the command line for this test.\n@@ -163,6 +178,7 @@ impl TestProps {\n             pretty_compare_only: false,\n             forbid_output: vec![],\n             incremental_dir: None,\n+            incremental: false,\n             pass_mode: None,\n             fail_mode: None,\n             ignore_pass: false,\n@@ -350,6 +366,10 @@ impl TestProps {\n                 if !self.stderr_per_bitwidth {\n                     self.stderr_per_bitwidth = config.parse_stderr_per_bitwidth(ln);\n                 }\n+\n+                if !self.incremental {\n+                    self.incremental = config.parse_incremental(ln);\n+                }\n             });\n         }\n \n@@ -360,6 +380,10 @@ impl TestProps {\n             self.failure_status = 101;\n         }\n \n+        if config.mode == Mode::Incremental {\n+            self.incremental = true;\n+        }\n+\n         for key in &[\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n             if let Ok(val) = env::var(key) {\n                 if self.exec_env.iter().find(|&&(ref x, _)| x == key).is_none() {\n@@ -731,6 +755,10 @@ impl Config {\n     fn parse_edition(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"edition\")\n     }\n+\n+    fn parse_incremental(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"incremental\")\n+    }\n }\n \n fn expand_variables(mut value: String, config: &Config) -> String {"}, {"sha": "2a4bb9eb88b306c666172e0d5b101bd5aba36207", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 22, "deletions": 32, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da6e669488791bd2d36e3a35fa2e4e4e02bc647/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2da6e669488791bd2d36e3a35fa2e4e4e02bc647", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-filelength\n \n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n-use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n+use crate::common::{incremental_dir, output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Assembly, Incremental, JsDocTest, MirOpt, RunMake, RustdocJson, Ui};\n use crate::common::{Codegen, CodegenUnits, DebugInfo, Debugger, Rustdoc};\n use crate::common::{CompareMode, FailMode, PassMode};\n@@ -229,18 +229,24 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n         print!(\"\\n\\n\");\n     }\n     debug!(\"running {:?}\", testpaths.file.display());\n-    let props = TestProps::from_file(&testpaths.file, revision, &config);\n+    let mut props = TestProps::from_file(&testpaths.file, revision, &config);\n+    if props.incremental {\n+        props.incremental_dir = Some(incremental_dir(&config, testpaths));\n+    }\n \n     let cx = TestCx { config: &config, props: &props, testpaths, revision };\n     create_dir_all(&cx.output_base_dir()).unwrap();\n+    if props.incremental {\n+        cx.init_incremental_test();\n+    }\n \n     if config.mode == Incremental {\n         // Incremental tests are special because they cannot be run in\n         // parallel.\n         assert!(!props.revisions.is_empty(), \"Incremental tests require revisions.\");\n-        cx.init_incremental_test();\n         for revision in &props.revisions {\n-            let revision_props = TestProps::from_file(&testpaths.file, Some(revision), &config);\n+            let mut revision_props = TestProps::from_file(&testpaths.file, Some(revision), &config);\n+            revision_props.incremental_dir = props.incremental_dir.clone();\n             let rev_cx = TestCx {\n                 config: &config,\n                 props: &revision_props,\n@@ -2937,7 +2943,7 @@ impl<'test> TestCx<'test> {\n         // incremental workproduct directory.  Delete any old\n         // incremental work products that may be there from prior\n         // runs.\n-        let incremental_dir = self.incremental_dir();\n+        let incremental_dir = self.props.incremental_dir.as_ref().unwrap();\n         if incremental_dir.exists() {\n             // Canonicalizing the path will convert it to the //?/ format\n             // on Windows, which enables paths longer than 260 character\n@@ -2947,7 +2953,7 @@ impl<'test> TestCx<'test> {\n         fs::create_dir_all(&incremental_dir).unwrap();\n \n         if self.config.verbose {\n-            print!(\"init_incremental_test: incremental_dir={}\", incremental_dir.display());\n+            println!(\"init_incremental_test: incremental_dir={}\", incremental_dir.display());\n         }\n     }\n \n@@ -2974,46 +2980,30 @@ impl<'test> TestCx<'test> {\n         let revision = self.revision.expect(\"incremental tests require a list of revisions\");\n \n         // Incremental workproduct directory should have already been created.\n-        let incremental_dir = self.incremental_dir();\n+        let incremental_dir = self.props.incremental_dir.as_ref().unwrap();\n         assert!(incremental_dir.exists(), \"init_incremental_test failed to create incremental dir\");\n \n-        // Add an extra flag pointing at the incremental directory.\n-        let mut revision_props = self.props.clone();\n-        revision_props.incremental_dir = Some(incremental_dir);\n-\n-        let revision_cx = TestCx {\n-            config: self.config,\n-            props: &revision_props,\n-            testpaths: self.testpaths,\n-            revision: self.revision,\n-        };\n-\n         if self.config.verbose {\n-            print!(\"revision={:?} revision_props={:#?}\", revision, revision_props);\n+            print!(\"revision={:?} props={:#?}\", revision, self.props);\n         }\n \n         if revision.starts_with(\"rpass\") {\n-            if revision_cx.props.should_ice {\n-                revision_cx.fatal(\"can only use should-ice in cfail tests\");\n+            if self.props.should_ice {\n+                self.fatal(\"can only use should-ice in cfail tests\");\n             }\n-            revision_cx.run_rpass_test();\n+            self.run_rpass_test();\n         } else if revision.starts_with(\"rfail\") {\n-            if revision_cx.props.should_ice {\n-                revision_cx.fatal(\"can only use should-ice in cfail tests\");\n+            if self.props.should_ice {\n+                self.fatal(\"can only use should-ice in cfail tests\");\n             }\n-            revision_cx.run_rfail_test();\n+            self.run_rfail_test();\n         } else if revision.starts_with(\"cfail\") {\n-            revision_cx.run_cfail_test();\n+            self.run_cfail_test();\n         } else {\n-            revision_cx.fatal(\"revision name must begin with rpass, rfail, or cfail\");\n+            self.fatal(\"revision name must begin with rpass, rfail, or cfail\");\n         }\n     }\n \n-    /// Directory where incremental work products are stored.\n-    fn incremental_dir(&self) -> PathBuf {\n-        self.output_base_name().with_extension(\"inc\")\n-    }\n-\n     fn run_rmake_test(&self) {\n         let cwd = env::current_dir().unwrap();\n         let src_root = self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();"}]}