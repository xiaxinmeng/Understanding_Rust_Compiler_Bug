{"sha": "8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTRlYTNlYzljNDhlYWVhYWI4ZmE5MDYxY2YyOGMyNjc4ZThhZTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-29T23:23:15Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T00:56:07Z"}, "message": "Fallout from changes for overflow-checking during constant evaluation.", "tree": {"sha": "ff336226413b38a84ac3afe29b5bb172f0f4473a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff336226413b38a84ac3afe29b5bb172f0f4473a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "html_url": "https://github.com/rust-lang/rust/commit/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6808e414c7b29bfb066c1bbabff684bde1190a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6808e414c7b29bfb066c1bbabff684bde1190a4e", "html_url": "https://github.com/rust-lang/rust/commit/6808e414c7b29bfb066c1bbabff684bde1190a4e"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "e3eff6e7512ecf6d3c08167ac809fd5e49ea6552", "filename": "src/libcoretest/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Flibcoretest%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fnum%2Fuint_macros.rs?ref=8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "patch": "@@ -20,7 +20,7 @@ mod tests {\n     fn test_overflows() {\n         assert!(MAX > 0);\n         assert!(MIN <= 0);\n-        assert!(MIN + MAX + 1 == 0);\n+        assert!((MIN + MAX).wrapping_add(1) == 0);\n     }\n \n     #[test]"}, {"sha": "aec794af759b1e6b6a25df0ef78fcc4cbe2a5921", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "patch": "@@ -519,7 +519,8 @@ mod bench {\n         ({\n             use super::u64_from_be_bytes;\n \n-            let data = (0..$stride*100+$start_index).collect::<Vec<_>>();\n+            let len = $stride.wrapping_mul(100).wrapping_add($start_index);\n+            let data = (0..len).collect::<Vec<_>>();\n             let mut sum = 0;\n             $b.iter(|| {\n                 let mut i = $start_index;"}, {"sha": "a7cabae16be1b8f39be0f84ae8f66a090bbfbdad", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Note: This test is checking that we forbid a coding pattern that\n+// Issue #5873 explicitly wants to allow.\n+\n enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n     [State::ST_NULL; (State::ST_WHITESPACE as usize)];\n-    //~^ ERROR expected constant integer for repeat count, found non-constant expression\n+    //~^ ERROR expected constant integer for repeat count, but non-constant path\n }"}, {"sha": "3ce206ff7fb2c0c13b1a5a7b1079aa2e65e9a16d", "filename": "src/test/compile-fail/non-constant-expr-for-vec-repeat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs?ref=8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "patch": "@@ -12,6 +12,7 @@\n \n fn main() {\n     fn bar(n: usize) {\n-        let _x = [0; n]; //~ ERROR expected constant integer for repeat count, found variable\n+        let _x = [0; n];\n+        //~^ ERROR expected constant integer for repeat count, found variable\n     }\n }"}, {"sha": "ff13a1345d22ba27dbe3341b54eb9b2f4e0fc3c8", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "patch": "@@ -10,11 +10,16 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(core)]\n+\n+// Catch mistakes in the overflowing literals lint.\n+#![deny(overflowing_literals)]\n+\n pub fn main() {\n     assert_eq!(0xffffffff, (-1 as u32));\n     assert_eq!(4294967295, (-1 as u32));\n     assert_eq!(0xffffffffffffffff, (-1 as u64));\n     assert_eq!(18446744073709551615, (-1 as u64));\n \n-    assert_eq!(-2147483648 - 1, 2147483647);\n+    assert_eq!((-2147483648).wrapping_sub(1), 2147483647);\n }"}, {"sha": "ded66fb86adcb44d5842f412b4878d2f2bb5038e", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "patch": "@@ -29,8 +29,8 @@ static CLs: Es = Es::Ls;\n static CHs: Es = Es::Hs;\n \n pub fn main() {\n-    assert_eq!((Eu::Hu as u8) + 1, Eu::Lu as u8);\n-    assert_eq!((Es::Hs as i8) + 1, Es::Ls as i8);\n+    assert_eq!((Eu::Hu as u8).wrapping_add(1), Eu::Lu as u8);\n+    assert_eq!((Es::Hs as i8).wrapping_add(1), Es::Ls as i8);\n     assert_eq!(CLu as u8, Eu::Lu as u8);\n     assert_eq!(CHu as u8, Eu::Hu as u8);\n     assert_eq!(CLs as i8, Es::Ls as i8);"}]}