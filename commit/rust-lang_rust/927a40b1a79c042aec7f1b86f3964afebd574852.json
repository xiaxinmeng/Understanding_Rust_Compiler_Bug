{"sha": "927a40b1a79c042aec7f1b86f3964afebd574852", "node_id": "C_kwDOAAsO6NoAKDkyN2E0MGIxYTc5YzA0MmFlYzdmMWI4NmYzOTY0YWZlYmQ1NzQ4NTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-18T06:41:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-18T06:41:16Z"}, "message": "Rollup merge of #96917 - marti4d:master, r=ChrisDenton\n\nMake HashMap fall back to RtlGenRandom if BCryptGenRandom fails\n\nWith PR #84096, Rust `std::collections::hash_map::RandomState` changed from using `RtlGenRandom()` ([msdn](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom)) to `BCryptGenRandom()` ([msdn](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom)) as its source of secure randomness after much discussion ([here](https://github.com/rust-random/getrandom/issues/65#issuecomment-753634074), among other places).\n\nUnfortunately, after that PR landed, Mozilla Firefox started experiencing fairly-rare crashes during startup while attempting to initialize the `env_logger` crate. ([docs for env_logger](https://docs.rs/env_logger/latest/env_logger/)) The root issue is that on some machines, `BCryptGenRandom()` will fail with an `Access is denied. (os error 5)` error message. ([Bugzilla issue 1754490](https://bugzilla.mozilla.org/show_bug.cgi?id=1754490)) (Discussion in issue #94098)\n\nNote that this is happening upon startup of Firefox's unsandboxed Main Process, so this behavior is different and separate from previous issues ([like this](https://bugzilla.mozilla.org/show_bug.cgi?id=1746254)) where BCrypt DLLs were blocked by process sandboxing. In the case of sandboxing, we knew we were doing something abnormal and expected that we'd have to resort to abnormal measures to make it work.\n\nHowever, in this case we are in a regular unsandboxed process just trying to initialize `env_logger` and getting a panic. We suspect that this may be caused by a virus scanner or some other security software blocking the loading of the BCrypt DLLs, but we're not completely sure as we haven't been able to replicate locally.\n\nIt is also possible that Firefox is not the only software affected by this; we just may be one of the pieces of Rust software that has the telemetry and crash reporting necessary to catch it.\n\nI have read some of the historical discussion around using `BCryptGenRandom()` in Rust code, and I respect the decision that was made and agree that it was a good course of action, so I'm not trying to open a discussion about a return to `RtlGenRandom()`. Instead, I'd like to suggest that perhaps we use `RtlGenRandom()` as a \"fallback RNG\" in the case that BCrypt doesn't work.\n\nThis pull request implements this fallback behavior. I believe this would improve the robustness of this essential data structure within the standard library, and I see only 2 potential drawbacks:\n\n1. Slight added overhead: It should be quite minimal though. The first call to `sys::rand::hashmap_random_keys()` will incur a bit of initialization overhead, and every call after will incur roughly 2 non-atomic global reads and 2 easily predictable branches. Both should be negligible compared to the actual cost of generating secure random numbers\n2. `RtlGenRandom()` is deprecated by Microsoft: Technically true, but as mentioned in [this comment on GoLang](https://github.com/golang/go/issues/33542#issuecomment-626124873), this API is ubiquitous in Windows software and actually removing it would break lots of things. Also, Firefox uses it already in [our C++ code](https://searchfox.org/mozilla-central/rev/5f88c1d6977e03e22d3420d0cdf8ad0113c2eb31/mfbt/RandomNum.cpp#25), and [Chromium uses it in their code as well](https://source.chromium.org/chromium/chromium/src/+/main:base/rand_util_win.cc) (which transitively means that Microsoft uses it in their own web browser, Edge). If there did come a time when Microsoft truly removes this API, it should be easy enough for Rust to simply remove the fallback in the code I've added here", "tree": {"sha": "4e361ef61ed27192682b9e4776c73a05032fafab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e361ef61ed27192682b9e4776c73a05032fafab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927a40b1a79c042aec7f1b86f3964afebd574852", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihJUMCRBK7hj4Ov3rIwAAVYAIAHKIXHWw2W5ANBW+J6xzD2y4\nLKBW2nls9kTTCV6kLKDC7ebQdSLA+of/nyOgo+EbmmFM/Twws4shEZMG44LjYWsv\nG/rLdRwos7I55/6lcn+Ev3zk4RTxM6JM4vI+myj2TxoZix5yI6QXrTxo43ZXh1LP\nlS59U4y8Eq2cW0iaIqmg6YtRwuxN8tFfZsn+yE8KNhwJzYYWhL4Hqn6/eLXo9w7c\nF+PeFhVzKcC5xby2Rp5J0V3bgZff66Job7JorHbAMY881Ddr0Xtbwzhq8DiSJyM0\nJAHEWhocxyBjZzFUQMs6CseUJA5ccbivn6paP+6DJmbmK3om3a+POSt1dkR1d4s=\n=Gltr\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e361ef61ed27192682b9e4776c73a05032fafab\nparent 49048eab47b2bb6cbba518c6477d0054cc3fc780\nparent aba3454aa136bce4f65978e5bf50683380fbddf3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1652856076 +0200\ncommitter GitHub <noreply@github.com> 1652856076 +0200\n\nRollup merge of #96917 - marti4d:master, r=ChrisDenton\n\nMake HashMap fall back to RtlGenRandom if BCryptGenRandom fails\n\nWith PR #84096, Rust `std::collections::hash_map::RandomState` changed from using `RtlGenRandom()` ([msdn](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom)) to `BCryptGenRandom()` ([msdn](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom)) as its source of secure randomness after much discussion ([here](https://github.com/rust-random/getrandom/issues/65#issuecomment-753634074), among other places).\n\nUnfortunately, after that PR landed, Mozilla Firefox started experiencing fairly-rare crashes during startup while attempting to initialize the `env_logger` crate. ([docs for env_logger](https://docs.rs/env_logger/latest/env_logger/)) The root issue is that on some machines, `BCryptGenRandom()` will fail with an `Access is denied. (os error 5)` error message. ([Bugzilla issue 1754490](https://bugzilla.mozilla.org/show_bug.cgi?id=1754490)) (Discussion in issue #94098)\n\nNote that this is happening upon startup of Firefox's unsandboxed Main Process, so this behavior is different and separate from previous issues ([like this](https://bugzilla.mozilla.org/show_bug.cgi?id=1746254)) where BCrypt DLLs were blocked by process sandboxing. In the case of sandboxing, we knew we were doing something abnormal and expected that we'd have to resort to abnormal measures to make it work.\n\nHowever, in this case we are in a regular unsandboxed process just trying to initialize `env_logger` and getting a panic. We suspect that this may be caused by a virus scanner or some other security software blocking the loading of the BCrypt DLLs, but we're not completely sure as we haven't been able to replicate locally.\n\nIt is also possible that Firefox is not the only software affected by this; we just may be one of the pieces of Rust software that has the telemetry and crash reporting necessary to catch it.\n\nI have read some of the historical discussion around using `BCryptGenRandom()` in Rust code, and I respect the decision that was made and agree that it was a good course of action, so I'm not trying to open a discussion about a return to `RtlGenRandom()`. Instead, I'd like to suggest that perhaps we use `RtlGenRandom()` as a \"fallback RNG\" in the case that BCrypt doesn't work.\n\nThis pull request implements this fallback behavior. I believe this would improve the robustness of this essential data structure within the standard library, and I see only 2 potential drawbacks:\n\n1. Slight added overhead: It should be quite minimal though. The first call to `sys::rand::hashmap_random_keys()` will incur a bit of initialization overhead, and every call after will incur roughly 2 non-atomic global reads and 2 easily predictable branches. Both should be negligible compared to the actual cost of generating secure random numbers\n2. `RtlGenRandom()` is deprecated by Microsoft: Technically true, but as mentioned in [this comment on GoLang](https://github.com/golang/go/issues/33542#issuecomment-626124873), this API is ubiquitous in Windows software and actually removing it would break lots of things. Also, Firefox uses it already in [our C++ code](https://searchfox.org/mozilla-central/rev/5f88c1d6977e03e22d3420d0cdf8ad0113c2eb31/mfbt/RandomNum.cpp#25), and [Chromium uses it in their code as well](https://source.chromium.org/chromium/chromium/src/+/main:base/rand_util_win.cc) (which transitively means that Microsoft uses it in their own web browser, Edge). If there did come a time when Microsoft truly removes this API, it should be easy enough for Rust to simply remove the fallback in the code I've added here\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927a40b1a79c042aec7f1b86f3964afebd574852", "html_url": "https://github.com/rust-lang/rust/commit/927a40b1a79c042aec7f1b86f3964afebd574852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927a40b1a79c042aec7f1b86f3964afebd574852/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49048eab47b2bb6cbba518c6477d0054cc3fc780", "url": "https://api.github.com/repos/rust-lang/rust/commits/49048eab47b2bb6cbba518c6477d0054cc3fc780", "html_url": "https://github.com/rust-lang/rust/commit/49048eab47b2bb6cbba518c6477d0054cc3fc780"}, {"sha": "aba3454aa136bce4f65978e5bf50683380fbddf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/aba3454aa136bce4f65978e5bf50683380fbddf3", "html_url": "https://github.com/rust-lang/rust/commit/aba3454aa136bce4f65978e5bf50683380fbddf3"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "0bb6fee60c92eba5c22cd55910c7a6783da1b215", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/927a40b1a79c042aec7f1b86f3964afebd574852/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927a40b1a79c042aec7f1b86f3964afebd574852/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=927a40b1a79c042aec7f1b86f3964afebd574852", "patch": "@@ -788,6 +788,10 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n \n     #[link(name = \"advapi32\")]\n     extern \"system\" {\n+        // Forbidden when targeting UWP\n+        #[link_name = \"SystemFunction036\"]\n+        pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n+\n         // Allowed but unused by UWP\n         pub fn OpenProcessToken(\n             ProcessHandle: HANDLE,"}, {"sha": "22e024d8552ec25f85d0c0acc47ce19cc3cd71ed", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/927a40b1a79c042aec7f1b86f3964afebd574852/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927a40b1a79c042aec7f1b86f3964afebd574852/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=927a40b1a79c042aec7f1b86f3964afebd574852", "patch": "@@ -1,8 +1,60 @@\n use crate::io;\n+use crate::lazy;\n use crate::mem;\n use crate::sys::c;\n \n+/// The kinds of HashMap RNG that may be available\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+enum HashMapRng {\n+    Preferred,\n+    Fallback,\n+}\n+\n pub fn hashmap_random_keys() -> (u64, u64) {\n+    match get_hashmap_rng() {\n+        HashMapRng::Preferred => {\n+            preferred_rng().expect(\"couldn't generate random bytes with preferred RNG\")\n+        }\n+        HashMapRng::Fallback => {\n+            fallback_rng().expect(\"couldn't generate random bytes with fallback RNG\")\n+        }\n+    }\n+}\n+\n+/// Returns the HashMap RNG that should be used\n+///\n+/// Panics if they are both broken\n+fn get_hashmap_rng() -> HashMapRng {\n+    // Assume that if the preferred RNG is broken the first time we use it, it likely means\n+    // that: the DLL has failed to load, there is no point to calling it over-and-over again,\n+    // and we should cache the result\n+    static VALUE: lazy::SyncOnceCell<HashMapRng> = lazy::SyncOnceCell::new();\n+    *VALUE.get_or_init(choose_hashmap_rng)\n+}\n+\n+/// Test whether we should use the preferred or fallback RNG\n+///\n+/// If the preferred RNG is successful, we choose it. Otherwise, if the fallback RNG is successful,\n+/// we choose that\n+///\n+/// Panics if both the preferred and the fallback RNG are both non-functional\n+fn choose_hashmap_rng() -> HashMapRng {\n+    let preferred_error = match preferred_rng() {\n+        Ok(_) => return HashMapRng::Preferred,\n+        Err(e) => e,\n+    };\n+\n+    match fallback_rng() {\n+        Ok(_) => return HashMapRng::Fallback,\n+        Err(fallback_error) => panic!(\n+            \"preferred RNG broken: `{}`, fallback RNG broken: `{}`\",\n+            preferred_error, fallback_error\n+        ),\n+    }\n+}\n+\n+/// Generate random numbers using the preferred RNG function (BCryptGenRandom)\n+fn preferred_rng() -> Result<(u64, u64), io::Error> {\n     use crate::ptr;\n \n     let mut v = (0, 0);\n@@ -14,8 +66,22 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n             c::BCRYPT_USE_SYSTEM_PREFERRED_RNG,\n         )\n     };\n-    if ret != 0 {\n-        panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-    }\n-    return v;\n+\n+    if ret == 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+}\n+\n+/// Generate random numbers using the fallback RNG function (RtlGenRandom)\n+#[cfg(not(target_vendor = \"uwp\"))]\n+fn fallback_rng() -> Result<(u64, u64), io::Error> {\n+    let mut v = (0, 0);\n+    let ret =\n+        unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n+\n+    if ret != 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+}\n+\n+/// We can't use RtlGenRandom with UWP, so there is no fallback\n+#[cfg(target_vendor = \"uwp\")]\n+fn fallback_rng() -> Result<(u64, u64), io::Error> {\n+    Err(io::const_io_error!(io::ErrorKind::Unsupported, \"RtlGenRandom() not supported on UWP\"))\n }"}]}