{"sha": "8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWU1MmE4ZTczNDk3MmI5YjE2Y2JmYzM5MDI3NDNlYjQzMmNmYmM=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-08-27T09:31:17Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-09-11T23:02:41Z"}, "message": "Use question_mark feature in librustc_incremental.", "tree": {"sha": "b6501e8c2e546bdf40629df7cbb3df14a73d1ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6501e8c2e546bdf40629df7cbb3df14a73d1ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "html_url": "https://github.com/rust-lang/rust/commit/8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8391760bd846740ea13f9c415a00af10a0b735d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8391760bd846740ea13f9c415a00af10a0b735d1", "html_url": "https://github.com/rust-lang/rust/commit/8391760bd846740ea13f9c415a00af10a0b735d1"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "bafaafd4afa0e7c8ab34bfe165316701f143a56d", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "patch": "@@ -194,15 +194,15 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n \n         // Load up the hashes for the def-ids from this crate.\n         let mut decoder = Decoder::new(data, 0);\n-        let svh_in_hashes_file = try!(Svh::decode(&mut decoder));\n+        let svh_in_hashes_file = Svh::decode(&mut decoder)?;\n \n         if svh_in_hashes_file != expected_svh {\n             // We should not be able to get here. If we do, then\n             // `fs::find_metadata_hashes_for()` has messed up.\n             bug!(\"mismatch between SVH in crate and SVH in incr. comp. hashes\")\n         }\n \n-        let serialized_hashes = try!(SerializedMetadataHashes::decode(&mut decoder));\n+        let serialized_hashes = SerializedMetadataHashes::decode(&mut decoder)?;\n         for serialized_hash in serialized_hashes.hashes {\n             // the hashes are stored with just a def-index, which is\n             // always relative to the old crate; convert that to use"}, {"sha": "6e6464e49683a9d108c5d6bd70672b014344975b", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "patch": "@@ -125,11 +125,11 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     // Decode the list of work_products\n     let mut work_product_decoder = Decoder::new(work_products_data, 0);\n-    let work_products = try!(<Vec<SerializedWorkProduct>>::decode(&mut work_product_decoder));\n+    let work_products = <Vec<SerializedWorkProduct>>::decode(&mut work_product_decoder)?;\n \n     // Deserialize the directory and dep-graph.\n     let mut dep_graph_decoder = Decoder::new(dep_graph_data, 0);\n-    let prev_commandline_args_hash = try!(u64::decode(&mut dep_graph_decoder));\n+    let prev_commandline_args_hash = u64::decode(&mut dep_graph_decoder)?;\n \n     if prev_commandline_args_hash != tcx.sess.opts.dep_tracking_hash() {\n         // We can't reuse the cache, purge it.\n@@ -142,8 +142,8 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Ok(());\n     }\n \n-    let directory = try!(DefIdDirectory::decode(&mut dep_graph_decoder));\n-    let serialized_dep_graph = try!(SerializedDepGraph::decode(&mut dep_graph_decoder));\n+    let directory = DefIdDirectory::decode(&mut dep_graph_decoder)?;\n+    let serialized_dep_graph = SerializedDepGraph::decode(&mut dep_graph_decoder)?;\n \n     // Retrace the paths in the directory to find their current location (if any).\n     let retraced = directory.retrace(tcx);"}, {"sha": "41212d8e138da66e52396cc1e889f93ba493e080", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9e52a8e734972b9b16cbfc3902743eb432cfbc/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=8a9e52a8e734972b9b16cbfc3902743eb432cfbc", "patch": "@@ -110,7 +110,7 @@ pub fn encode_dep_graph(preds: &Predecessors,\n                         -> io::Result<()> {\n     // First encode the commandline arguments hash\n     let tcx = builder.tcx();\n-    try!(tcx.sess.opts.dep_tracking_hash().encode(encoder));\n+    tcx.sess.opts.dep_tracking_hash().encode(encoder)?;\n \n     // Create a flat list of (Input, WorkProduct) edges for\n     // serialization.\n@@ -149,8 +149,8 @@ pub fn encode_dep_graph(preds: &Predecessors,\n     debug!(\"graph = {:#?}\", graph);\n \n     // Encode the directory and then the graph data.\n-    try!(builder.directory().encode(encoder));\n-    try!(graph.encode(encoder));\n+    builder.directory().encode(encoder)?;\n+    graph.encode(encoder)?;\n \n     Ok(())\n }\n@@ -222,8 +222,8 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n     }\n \n     // Encode everything.\n-    try!(svh.encode(encoder));\n-    try!(serialized_hashes.encode(encoder));\n+    svh.encode(encoder)?;\n+    serialized_hashes.encode(encoder)?;\n \n     Ok(())\n }"}]}