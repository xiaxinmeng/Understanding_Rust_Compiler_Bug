{"sha": "b0aad7dd4fad8d7e2e2f877a511a637258949597", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYWFkN2RkNGZhZDhkN2UyZTJmODc3YTUxMWE2MzcyNTg5NDk1OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-22T15:52:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-22T15:52:30Z"}, "message": "Auto merge of #23361 - petrochenkov:refdst, r=jakub-\n\nAfter this patch code like `let ref a = *\"abcdef\"` doesn't cause ICE anymore.\r\nRequired for #23121\r\n\r\nThere are still places in rustc_trans where pointers are always assumed to be thin. In particular, #19064 is not resolved by this patch.", "tree": {"sha": "ad63ea9d060e8eadefd1b2ab9116d5f105b1d453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad63ea9d060e8eadefd1b2ab9116d5f105b1d453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0aad7dd4fad8d7e2e2f877a511a637258949597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aad7dd4fad8d7e2e2f877a511a637258949597", "html_url": "https://github.com/rust-lang/rust/commit/b0aad7dd4fad8d7e2e2f877a511a637258949597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0aad7dd4fad8d7e2e2f877a511a637258949597/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf8c64e1b1b60f228f0c472c0b0dab4a5b5aa61", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf8c64e1b1b60f228f0c472c0b0dab4a5b5aa61", "html_url": "https://github.com/rust-lang/rust/commit/ecf8c64e1b1b60f228f0c472c0b0dab4a5b5aa61"}, {"sha": "a5eefdef3c6123ec4217d0f21ff78bffe9c5ccbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5eefdef3c6123ec4217d0f21ff78bffe9c5ccbd", "html_url": "https://github.com/rust-lang/rust/commit/a5eefdef3c6123ec4217d0f21ff78bffe9c5ccbd"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "c08d3b2be53dd02645b41ba779d1450ffa5f05c8", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0aad7dd4fad8d7e2e2f877a511a637258949597/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aad7dd4fad8d7e2e2f877a511a637258949597/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=b0aad7dd4fad8d7e2e2f877a511a637258949597", "patch": "@@ -326,7 +326,7 @@ pub enum OptResult<'blk, 'tcx: 'blk> {\n     LowerBound(Result<'blk, 'tcx>)\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n pub enum TransBindingMode {\n     TrByCopy(/* llbinding */ ValueRef),\n     TrByMove,\n@@ -1017,9 +1017,14 @@ fn compile_submatch<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         None => {\n             let data = &m[0].data;\n             for &(ref ident, ref value_ptr) in &m[0].bound_ptrs {\n-                let llmatch = data.bindings_map[*ident].llmatch;\n-                call_lifetime_start(bcx, llmatch);\n-                Store(bcx, *value_ptr, llmatch);\n+                let binfo = data.bindings_map[*ident];\n+                call_lifetime_start(bcx, binfo.llmatch);\n+                if binfo.trmode == TrByRef && type_is_fat_ptr(bcx.tcx(), binfo.ty) {\n+                    expr::copy_fat_ptr(bcx, *value_ptr, binfo.llmatch);\n+                }\n+                else {\n+                    Store(bcx, *value_ptr, binfo.llmatch);\n+                }\n             }\n             match data.arm.guard {\n                 Some(ref guard_expr) => {\n@@ -1087,7 +1092,6 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             _ => None\n         }\n     };\n-\n     match adt_vals {\n         Some(field_vals) => {\n             let pats = enter_match(bcx, dm, m, col, val, |pats|\n@@ -1694,8 +1698,14 @@ fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n                             ast::BindByRef(_) => {\n                                 // By ref binding: the value of the variable\n-                                // is the pointer `val` itself.\n-                                Store(bcx, val, llval);\n+                                // is the pointer `val` itself or fat pointer referenced by `val`\n+                                if type_is_fat_ptr(bcx.tcx(), ty) {\n+                                    expr::copy_fat_ptr(bcx, val, llval);\n+                                }\n+                                else {\n+                                    Store(bcx, val, llval);\n+                                }\n+\n                                 bcx\n                             }\n                         }"}, {"sha": "4653ef2980a78e6db183b24f76aa7d8c46086fa9", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0aad7dd4fad8d7e2e2f877a511a637258949597/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aad7dd4fad8d7e2e2f877a511a637258949597/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b0aad7dd4fad8d7e2e2f877a511a637258949597", "patch": "@@ -285,6 +285,11 @@ pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n     GEPi(bcx, fat_ptr, &[0, abi::FAT_PTR_ADDR])\n }\n \n+pub fn copy_fat_ptr(bcx: Block, src_ptr: ValueRef, dst_ptr: ValueRef) {\n+    Store(bcx, Load(bcx, get_dataptr(bcx, src_ptr)), get_dataptr(bcx, dst_ptr));\n+    Store(bcx, Load(bcx, get_len(bcx, src_ptr)), get_len(bcx, dst_ptr));\n+}\n+\n // Retrieve the information we are losing (making dynamic) in an unsizing\n // adjustment.\n //"}, {"sha": "4de028299df818050329338a8c1b8f2c6e549aa5", "filename": "src/test/run-pass/match-ref-unsized.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0aad7dd4fad8d7e2e2f877a511a637258949597/src%2Ftest%2Frun-pass%2Fmatch-ref-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0aad7dd4fad8d7e2e2f877a511a637258949597/src%2Ftest%2Frun-pass%2Fmatch-ref-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-ref-unsized.rs?ref=b0aad7dd4fad8d7e2e2f877a511a637258949597", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Binding unsized expressions to ref patterns\n+\n+pub fn main() {\n+    let ref a = *\"abcdef\";\n+    assert_eq!(a, \"abcdef\");\n+\n+    match *\"12345\" {\n+        ref b => { assert_eq!(b, \"12345\") }\n+    }\n+}"}]}