{"sha": "d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Njk3MWQ1YjQ2NmRkMmJjZDJlZDE0N2ZkMTY2OGYwNmM3ZGJjYTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-23T00:28:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-23T00:29:23Z"}, "message": "stdlib: Add EBML writing functionality", "tree": {"sha": "4d31ee4d5f046caf3b816b57c8fbdd46c278bb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d31ee4d5f046caf3b816b57c8fbdd46c278bb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "html_url": "https://github.com/rust-lang/rust/commit/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e890383db1930d0628f487f0008f1a9c2837c7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e890383db1930d0628f487f0008f1a9c2837c7fa", "html_url": "https://github.com/rust-lang/rust/commit/e890383db1930d0628f487f0008f1a9c2837c7fa"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "5eb170224d11e311df6214a99ee83fa0ebf60dcf", "filename": "src/lib/ebml.rs", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0/src%2Flib%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0/src%2Flib%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Febml.rs?ref=d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "patch": "@@ -103,7 +103,72 @@ impure fn peek(&reader r) -> ebml_tag {\n \n // EBML writing\n \n-type writer = rec(io.writer writer, mutable vec[ebml_state] states);\n+type writer = rec(io.buf_writer writer, mutable vec[uint] size_positions);\n+\n+fn write_sized_vint(&io.buf_writer w, uint n, uint size) {\n+    let vec[u8] buf;\n+    alt (size) {\n+        case (1u) {\n+            buf = vec(0x80u8 | (n as u8));\n+        }\n+        case (2u) {\n+            buf = vec(0x40u8 | ((n >> 8u) as u8),\n+                      (n & 0xffu) as u8);\n+        }\n+        case (3u) {\n+            buf = vec(0x20u8 | ((n >> 16u) as u8),\n+                      ((n >> 8u) & 0xffu) as u8,\n+                      (n & 0xffu) as u8);\n+        }\n+        case (4u) {\n+            buf = vec(0x10u8 | ((n >> 24u) as u8),\n+                      ((n >> 16u) & 0xffu) as u8,\n+                      ((n >> 8u) & 0xffu) as u8,\n+                      (n & 0xffu) as u8);\n+        }\n+        case (_) {\n+            log \"vint to write too big\";\n+            fail;\n+        }\n+    }\n+\n+    w.write(buf);\n+}\n+\n+fn write_vint(&io.buf_writer w, uint n) {\n+    if (n < 0x7fu)          { write_sized_vint(w, n, 1u); ret; }\n+    if (n < 0x4000u)        { write_sized_vint(w, n, 2u); ret; }\n+    if (n < 0x200000u)      { write_sized_vint(w, n, 3u); ret; }\n+    if (n < 0x10000000u)    { write_sized_vint(w, n, 4u); ret; }\n+    log \"vint to write too big\";\n+    fail;\n+}\n+\n+fn create_writer(&io.buf_writer w) -> writer {\n+    let vec[uint] size_positions = vec();\n+    ret rec(writer=w, mutable size_positions=size_positions);\n+}\n+\n+// TODO: Provide a function to write the standard EBML header.\n+\n+fn start_tag(&writer w, uint tag_id) {\n+    // Write the tag ID.\n+    write_vint(w.writer, tag_id);\n+\n+    // Write a placeholder four-byte size.\n+    w.size_positions += vec(w.writer.tell());\n+    let vec[u8] zeroes = vec(0u8, 0u8, 0u8, 0u8);\n+    w.writer.write(zeroes);\n+}\n+\n+fn end_tag(&writer w) {\n+    auto last_size_pos = _vec.pop[uint](w.size_positions);\n+    auto cur_pos = w.writer.tell();\n+    w.writer.seek(last_size_pos as int, io.seek_set);\n+    write_sized_vint(w.writer, cur_pos - last_size_pos - 4u, 4u);\n+    w.writer.seek(cur_pos as int, io.seek_set);\n+}\n \n-// TODO\n+// TODO: optionally perform \"relaxations\" on end_tag to more efficiently\n+// encode sizes; this is a fixed point iteration\n "}]}