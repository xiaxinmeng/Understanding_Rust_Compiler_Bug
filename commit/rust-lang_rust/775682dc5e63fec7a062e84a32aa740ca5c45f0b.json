{"sha": "775682dc5e63fec7a062e84a32aa740ca5c45f0b", "node_id": "C_kwDOAAsO6NoAKDc3NTY4MmRjNWU2M2ZlYzdhMDYyZTg0YTMyYWE3NDBjYTVjNDVmMGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-24T05:53:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-24T05:53:25Z"}, "message": "Rollup merge of #110637 - oli-obk:gha, r=jyn514\n\nGroup some sections of our logs in github actions\n\nThis makes logs a little bit more readable as you can now collapse all the parts that don't interest you (and they get collapsed automatically)\n\nObviously there's a lot more sites where we can/need to do this, too, but this is already helpful imo\n\nr? ```@jyn514```", "tree": {"sha": "a1b56fed21043f901816e2f7f42727f98eed1270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b56fed21043f901816e2f7f42727f98eed1270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775682dc5e63fec7a062e84a32aa740ca5c45f0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRhlVCRBK7hj4Ov3rIwAAY0UIAKpuXv7+YeCnSZ5kpYqvp1hl\nBbEaYJWi2R95WOmufBnr3mr73IG5Yll2vpnL1D5PG+GExbta/fseXKLN/vRLc5Su\nIDwOUTwZBqkmzPCvmuyuDSMja9u7AsIBlHs7nfslrnHfDLMMNmS9XjtrZdhlZuOG\nxB6cifrL+yYc8gCi5tdqNYi0S20xhhG/2Edre/f7v/ulX4TN2vWu+Sfi/QxTZHZU\nYmdQANdI7tQlHsTL9cibgDRgWkXt6qH55TrnCGXoNaHy0g1DQm/Nh1bwpsb7FQRt\npXlRsZgyi36nHDfD2ohx91+l+pCagADFnAZjFl+Sn1R/QA6s5lJK5WoROXn07CI=\n=/w8q\n-----END PGP SIGNATURE-----\n", "payload": "tree a1b56fed21043f901816e2f7f42727f98eed1270\nparent 8aab7071317749d3a7fe369377b30797f6770f18\nparent 95e8b6a196fbf4bbd4038e7c0b51363ed0bc7cf6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682315605 +0200\ncommitter GitHub <noreply@github.com> 1682315605 +0200\n\nRollup merge of #110637 - oli-obk:gha, r=jyn514\n\nGroup some sections of our logs in github actions\n\nThis makes logs a little bit more readable as you can now collapse all the parts that don't interest you (and they get collapsed automatically)\n\nObviously there's a lot more sites where we can/need to do this, too, but this is already helpful imo\n\nr? ```@jyn514```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775682dc5e63fec7a062e84a32aa740ca5c45f0b", "html_url": "https://github.com/rust-lang/rust/commit/775682dc5e63fec7a062e84a32aa740ca5c45f0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775682dc5e63fec7a062e84a32aa740ca5c45f0b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aab7071317749d3a7fe369377b30797f6770f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aab7071317749d3a7fe369377b30797f6770f18", "html_url": "https://github.com/rust-lang/rust/commit/8aab7071317749d3a7fe369377b30797f6770f18"}, {"sha": "95e8b6a196fbf4bbd4038e7c0b51363ed0bc7cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e8b6a196fbf4bbd4038e7c0b51363ed0bc7cf6", "html_url": "https://github.com/rust-lang/rust/commit/95e8b6a196fbf4bbd4038e7c0b51363ed0bc7cf6"}], "stats": {"total": 367, "additions": 190, "deletions": 177}, "files": [{"sha": "680a8da6adf206699415840b0270b66ba9801890", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -722,11 +722,14 @@ def bootstrap_binary(self):\n \n     def build_bootstrap(self, color, verbose_count):\n         \"\"\"Build bootstrap\"\"\"\n-        print(\"Building bootstrap\")\n+        env = os.environ.copy()\n+        if \"GITHUB_ACTIONS\" in env:\n+            print(\"::group::Building bootstrap\")\n+        else:\n+            print(\"Building bootstrap\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n-        env = os.environ.copy()\n         # `CARGO_BUILD_TARGET` breaks bootstrap build.\n         # See also: <https://github.com/rust-lang/rust/issues/70208>.\n         if \"CARGO_BUILD_TARGET\" in env:\n@@ -798,6 +801,9 @@ def build_bootstrap(self, color, verbose_count):\n         # Run this from the source directory so cargo finds .cargo/config\n         run(args, env=env, verbose=self.verbose, cwd=self.rust_root)\n \n+        if \"GITHUB_ACTIONS\" in env:\n+            print(\"::endgroup::\")\n+\n     def build_triple(self):\n         \"\"\"Build triple as in LLVM\n "}, {"sha": "60de46ce64c1576ae3cd5f821373963f1aea6147", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 6, "deletions": 60, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -105,15 +105,7 @@ impl Step for Std {\n             cargo.arg(\"--lib\");\n         }\n \n-        let msg = if compiler.host == target {\n-            format!(\"Checking stage{} library artifacts ({target})\", builder.top_stage)\n-        } else {\n-            format!(\n-                \"Checking stage{} library artifacts ({} -> {})\",\n-                builder.top_stage, &compiler.host, target\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_check(\"library artifacts\", target);\n         run_cargo(\n             builder,\n             cargo,\n@@ -167,18 +159,7 @@ impl Step for Std {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n \n-        let msg = if compiler.host == target {\n-            format!(\n-                \"Checking stage{} library test/bench/example targets ({target})\",\n-                builder.top_stage\n-            )\n-        } else {\n-            format!(\n-                \"Checking stage{} library test/bench/example targets ({} -> {})\",\n-                builder.top_stage, &compiler.host, target\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_check(\"library test/bench/example targets\", target);\n         run_cargo(\n             builder,\n             cargo,\n@@ -252,15 +233,7 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n \n-        let msg = if compiler.host == target {\n-            format!(\"Checking stage{} compiler artifacts ({target})\", builder.top_stage)\n-        } else {\n-            format!(\n-                \"Checking stage{} compiler artifacts ({} -> {})\",\n-                builder.top_stage, &compiler.host, target\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_check(\"compiler artifacts\", target);\n         run_cargo(\n             builder,\n             cargo,\n@@ -317,15 +290,7 @@ impl Step for CodegenBackend {\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n         rustc_cargo_env(builder, &mut cargo, target, compiler.stage);\n \n-        let msg = if compiler.host == target {\n-            format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, backend)\n-        } else {\n-            format!(\n-                \"Checking stage{} {} library ({} -> {})\",\n-                builder.top_stage, backend, &compiler.host.triple, target.triple\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_check(&backend, target);\n \n         run_cargo(\n             builder,\n@@ -385,15 +350,7 @@ impl Step for RustAnalyzer {\n             cargo.arg(\"--benches\");\n         }\n \n-        let msg = if compiler.host == target {\n-            format!(\"Checking stage{} {} artifacts ({target})\", compiler.stage, \"rust-analyzer\")\n-        } else {\n-            format!(\n-                \"Checking stage{} {} artifacts ({} -> {})\",\n-                compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_check(\"rust-analyzer artifacts\", target);\n         run_cargo(\n             builder,\n             cargo,\n@@ -460,18 +417,7 @@ macro_rules! tool_check_step {\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n                 // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n                 cargo.rustflag(\"-Zunstable-options\");\n-                let msg = if compiler.host == target {\n-                    format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, stringify!($name).to_lowercase())\n-                } else {\n-                    format!(\n-                        \"Checking stage{} {} artifacts ({} -> {})\",\n-                        builder.top_stage,\n-                        stringify!($name).to_lowercase(),\n-                        &compiler.host.triple,\n-                        target.triple\n-                    )\n-                };\n-                builder.info(&msg);\n+                let _guard = builder.msg_check(&concat!(stringify!($name), \" artifacts\").to_lowercase(), target);\n                 run_cargo(\n                     builder,\n                     cargo,"}, {"sha": "7d2a6862500a3848c7cb5d500a968ab701aa124d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 15, "deletions": 44, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -143,23 +143,13 @@ impl Step for Std {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n-        let msg = if compiler.host == target {\n-            format!(\n-                \"Building{} stage{} library artifacts ({}) \",\n-                crate_description(&self.crates),\n-                compiler.stage,\n-                compiler.host\n-            )\n-        } else {\n-            format!(\n-                \"Building{} stage{} library artifacts ({} -> {})\",\n-                crate_description(&self.crates),\n-                compiler.stage,\n-                compiler.host,\n-                target,\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg(\n+            Kind::Build,\n+            compiler.stage,\n+            format_args!(\"library artifacts{}\", crate_description(&self.crates)),\n+            compiler.host,\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -790,24 +780,13 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n-        let msg = if compiler.host == target {\n-            format!(\n-                \"Building{} compiler artifacts (stage{} -> stage{})\",\n-                crate_description(&self.crates),\n-                compiler.stage,\n-                compiler.stage + 1\n-            )\n-        } else {\n-            format!(\n-                \"Building{} compiler artifacts (stage{}:{} -> stage{}:{})\",\n-                crate_description(&self.crates),\n-                compiler.stage,\n-                compiler.host,\n-                compiler.stage + 1,\n-                target,\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_sysroot_tool(\n+            Kind::Build,\n+            compiler.stage,\n+            format_args!(\"compiler artifacts{}\", crate_description(&self.crates)),\n+            compiler.host,\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -1114,15 +1093,7 @@ impl Step for CodegenBackend {\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        let msg = if compiler.host == target {\n-            format!(\"Building stage{} codegen backend {}\", compiler.stage, backend)\n-        } else {\n-            format!(\n-                \"Building stage{} codegen backend {} ({} -> {})\",\n-                compiler.stage, backend, compiler.host, target\n-            )\n-        };\n-        builder.info(&msg);\n+        let _guard = builder.msg_build(compiler, format_args!(\"codegen backend {backend}\"), target);\n         let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false, false);\n         if builder.config.dry_run() {\n             return;"}, {"sha": "b62aa9992469b01f4e307f64e72046ec43e4aedc", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -12,7 +12,7 @@ use crate::util::t;\n \n use crate::dist;\n use crate::tarball::GeneratedTarball;\n-use crate::Compiler;\n+use crate::{Compiler, Kind};\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::{Config, TargetSelection};\n@@ -52,7 +52,7 @@ fn install_sh(\n     host: Option<TargetSelection>,\n     tarball: &GeneratedTarball,\n ) {\n-    builder.info(&format!(\"Install {} stage{} ({:?})\", package, stage, host));\n+    let _guard = builder.msg(Kind::Install, stage, package, host, host);\n \n     let prefix = default_path(&builder.config.prefix, \"/usr/local\");\n     let sysconfdir = prefix.join(default_path(&builder.config.sysconfdir, \"/etc\"));"}, {"sha": "238d167c4c276dded01f16699f35e77873555b41", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -19,13 +19,14 @@\n use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n+use std::fmt::Display;\n use std::fs::{self, File};\n use std::io;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str;\n \n-use build_helper::ci::CiEnv;\n+use build_helper::ci::{gha, CiEnv};\n use channel::GitInfo;\n use config::{DryRun, Target};\n use filetime::FileTime;\n@@ -993,6 +994,85 @@ impl Build {\n         }\n     }\n \n+    fn msg_check(\n+        &self,\n+        what: impl Display,\n+        target: impl Into<Option<TargetSelection>>,\n+    ) -> Option<gha::Group> {\n+        self.msg(Kind::Check, self.config.stage, what, self.config.build, target)\n+    }\n+\n+    fn msg_build(\n+        &self,\n+        compiler: Compiler,\n+        what: impl Display,\n+        target: impl Into<Option<TargetSelection>>,\n+    ) -> Option<gha::Group> {\n+        self.msg(Kind::Build, compiler.stage, what, compiler.host, target)\n+    }\n+\n+    /// Return a `Group` guard for a [`Step`] that is built for each `--stage`.\n+    fn msg(\n+        &self,\n+        action: impl Into<Kind>,\n+        stage: u32,\n+        what: impl Display,\n+        host: impl Into<Option<TargetSelection>>,\n+        target: impl Into<Option<TargetSelection>>,\n+    ) -> Option<gha::Group> {\n+        let action = action.into();\n+        let msg = |fmt| format!(\"{action:?}ing stage{stage} {what}{fmt}\");\n+        let msg = if let Some(target) = target.into() {\n+            let host = host.into().unwrap();\n+            if host == target {\n+                msg(format_args!(\" ({target})\"))\n+            } else {\n+                msg(format_args!(\" ({host} -> {target})\"))\n+            }\n+        } else {\n+            msg(format_args!(\"\"))\n+        };\n+        self.group(&msg)\n+    }\n+\n+    /// Return a `Group` guard for a [`Step`] that is only built once and isn't affected by `--stage`.\n+    fn msg_unstaged(\n+        &self,\n+        action: impl Into<Kind>,\n+        what: impl Display,\n+        target: TargetSelection,\n+    ) -> Option<gha::Group> {\n+        let action = action.into();\n+        let msg = format!(\"{action:?}ing {what} for {target}\");\n+        self.group(&msg)\n+    }\n+\n+    fn msg_sysroot_tool(\n+        &self,\n+        action: impl Into<Kind>,\n+        stage: u32,\n+        what: impl Display,\n+        host: TargetSelection,\n+        target: TargetSelection,\n+    ) -> Option<gha::Group> {\n+        let action = action.into();\n+        let msg = |fmt| format!(\"{action:?}ing {what} {fmt}\");\n+        let msg = if host == target {\n+            msg(format_args!(\"(stage{stage} -> stage{}, {target})\", stage + 1))\n+        } else {\n+            msg(format_args!(\"(stage{stage}:{host} -> stage{}:{target})\", stage + 1))\n+        };\n+        self.group(&msg)\n+    }\n+\n+    fn group(&self, msg: &str) -> Option<gha::Group> {\n+        self.info(&msg);\n+        match self.config.dry_run {\n+            DryRun::SelfCheck => None,\n+            DryRun::Disabled | DryRun::UserSelected => Some(gha::group(&msg)),\n+        }\n+    }\n+\n     /// Returns the number of parallel jobs that have been configured for this\n     /// build.\n     fn jobs(&self) -> u32 {"}, {"sha": "67cb88373910c64719f735f961328cc44b97fcee", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -21,7 +21,7 @@ use crate::channel;\n use crate::config::{Config, TargetSelection};\n use crate::util::get_clang_cl_resource_dir;\n use crate::util::{self, exe, output, t, up_to_date};\n-use crate::{CLang, GitRepo};\n+use crate::{CLang, GitRepo, Kind};\n \n use build_helper::ci::CiEnv;\n \n@@ -271,7 +271,7 @@ impl Step for Llvm {\n             panic!(\"shared linking to LLVM is not currently supported on {}\", target.triple);\n         }\n \n-        builder.info(&format!(\"Building LLVM for {}\", target));\n+        let _guard = builder.msg_unstaged(Kind::Build, \"LLVM\", target);\n         t!(stamp.remove());\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n@@ -813,7 +813,7 @@ impl Step for Lld {\n             return out_dir;\n         }\n \n-        builder.info(&format!(\"Building LLD for {}\", target));\n+        let _guard = builder.msg_unstaged(Kind::Build, \"LLD\", target);\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n \n@@ -911,7 +911,7 @@ impl Step for Sanitizers {\n             return runtimes;\n         }\n \n-        builder.info(&format!(\"Building sanitizers for {}\", self.target));\n+        let _guard = builder.msg_unstaged(Kind::Build, \"sanitizers\", self.target);\n         t!(stamp.remove());\n         let _time = util::timeit(&builder);\n \n@@ -1103,7 +1103,7 @@ impl Step for CrtBeginEnd {\n             return out_dir;\n         }\n \n-        builder.info(\"Building crtbegin.o and crtend.o\");\n+        let _guard = builder.msg_unstaged(Kind::Build, \"crtbegin.o and crtend.o\", self.target);\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cfg = cc::Build::new();\n@@ -1168,7 +1168,7 @@ impl Step for Libunwind {\n             return out_dir;\n         }\n \n-        builder.info(&format!(\"Building libunwind.a for {}\", self.target.triple));\n+        let _guard = builder.msg_unstaged(Kind::Build, \"libunwind.a\", self.target);\n         t!(fs::create_dir_all(&out_dir));\n \n         let mut cc_cfg = cc::Build::new();"}, {"sha": "601351ea8e3c099eae214052a6e9229488080fd9", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -5,7 +5,6 @@\n \n use std::env;\n use std::ffi::OsString;\n-use std::fmt;\n use std::fs;\n use std::iter;\n use std::path::{Path, PathBuf};\n@@ -57,12 +56,12 @@ impl TestKind {\n     }\n }\n \n-impl fmt::Display for TestKind {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(match *self {\n-            TestKind::Test => \"Testing\",\n-            TestKind::Bench => \"Benchmarking\",\n-        })\n+impl Into<Kind> for TestKind {\n+    fn into(self) -> Kind {\n+        match self {\n+            TestKind::Test => Kind::Test,\n+            TestKind::Bench => Kind::Bench,\n+        }\n     }\n }\n \n@@ -1905,7 +1904,13 @@ impl BookTest {\n         rustbook_cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         rustbook_cmd.env(\"PATH\", new_path).arg(\"test\").arg(path);\n         builder.add_rust_test_threads(&mut rustbook_cmd);\n-        builder.info(&format!(\"Testing rustbook {}\", self.path.display()));\n+        let _guard = builder.msg(\n+            Kind::Test,\n+            compiler.stage,\n+            format_args!(\"rustbook {}\", self.path.display()),\n+            compiler.host,\n+            compiler.host,\n+        );\n         let _time = util::timeit(&builder);\n         let toolstate = if try_run(builder, &mut rustbook_cmd) {\n             ToolState::TestPass\n@@ -2033,7 +2038,8 @@ impl Step for ErrorIndex {\n         let mut tool = tool::ErrorIndex::command(builder);\n         tool.arg(\"markdown\").arg(&output);\n \n-        builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n+        let _guard =\n+            builder.msg(Kind::Test, compiler.stage, \"error-index\", compiler.host, compiler.host);\n         let _time = util::timeit(&builder);\n         builder.run_quiet(&mut tool);\n         // The tests themselves need to link to std, so make sure it is\n@@ -2263,14 +2269,13 @@ impl Step for Crate {\n             );\n         }\n \n-        builder.info(&format!(\n-            \"{}{} stage{} ({} -> {})\",\n+        let _guard = builder.msg(\n             test_kind,\n-            crate_description(&self.crates),\n             compiler.stage,\n-            &compiler.host,\n-            target\n-        ));\n+            crate_description(&self.crates),\n+            compiler.host,\n+            target,\n+        );\n         let _time = util::timeit(&builder);\n         crate::render_tests::try_run_tests(builder, &mut cargo.into());\n     }\n@@ -2386,10 +2391,8 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"--quiet\");\n         }\n \n-        builder.info(&format!(\n-            \"{} rustdoc stage{} ({} -> {})\",\n-            test_kind, compiler.stage, &compiler.host, target\n-        ));\n+        let _guard = builder.msg(test_kind, compiler.stage, \"rustdoc\", compiler.host, target);\n+\n         let _time = util::timeit(&builder);\n \n         add_flags_and_try_run_tests(builder, &mut cargo.into());\n@@ -2453,10 +2456,8 @@ impl Step for CrateRustdocJsonTypes {\n             cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n         }\n \n-        builder.info(&format!(\n-            \"{} rustdoc-json-types stage{} ({} -> {})\",\n-            test_kind, compiler.stage, &compiler.host, target\n-        ));\n+        let _guard =\n+            builder.msg(test_kind, compiler.stage, \"rustdoc-json-types\", compiler.host, target);\n         let _time = util::timeit(&builder);\n \n         add_flags_and_try_run_tests(builder, &mut cargo.into());\n@@ -2845,7 +2846,7 @@ impl Step for TestHelpers {\n             return;\n         }\n \n-        builder.info(\"Building test helpers\");\n+        let _guard = builder.msg_unstaged(Kind::Build, \"test helpers\", target);\n         t!(fs::create_dir_all(&dst));\n         let mut cfg = cc::Build::new();\n         // FIXME: Workaround for https://github.com/emscripten-core/emscripten/issues/9013"}, {"sha": "f3724b2c0e4cd9f6d6fc8a3461347f4bfa358f6e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 23, "deletions": 38, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -11,6 +11,7 @@ use crate::toolstate::ToolState;\n use crate::util::{add_dylib_path, exe, t};\n use crate::Compiler;\n use crate::Mode;\n+use crate::{gha, Kind};\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub enum SourceType {\n@@ -32,41 +33,27 @@ struct ToolBuild {\n     allow_features: &'static str,\n }\n \n-fn tooling_output(\n-    mode: Mode,\n-    tool: &str,\n-    build_stage: u32,\n-    host: &TargetSelection,\n-    target: &TargetSelection,\n-) -> String {\n-    match mode {\n-        // depends on compiler stage, different to host compiler\n-        Mode::ToolRustc => {\n-            if host == target {\n-                format!(\"Building tool {} (stage{} -> stage{})\", tool, build_stage, build_stage + 1)\n-            } else {\n-                format!(\n-                    \"Building tool {} (stage{}:{} -> stage{}:{})\",\n-                    tool,\n-                    build_stage,\n-                    host,\n-                    build_stage + 1,\n-                    target\n-                )\n-            }\n-        }\n-        // doesn't depend on compiler, same as host compiler\n-        Mode::ToolStd => {\n-            if host == target {\n-                format!(\"Building tool {} (stage{})\", tool, build_stage)\n-            } else {\n-                format!(\n-                    \"Building tool {} (stage{}:{} -> stage{}:{})\",\n-                    tool, build_stage, host, build_stage, target\n-                )\n-            }\n+impl Builder<'_> {\n+    fn msg_tool(\n+        &self,\n+        mode: Mode,\n+        tool: &str,\n+        build_stage: u32,\n+        host: &TargetSelection,\n+        target: &TargetSelection,\n+    ) -> Option<gha::Group> {\n+        match mode {\n+            // depends on compiler stage, different to host compiler\n+            Mode::ToolRustc => self.msg_sysroot_tool(\n+                Kind::Build,\n+                build_stage,\n+                format_args!(\"tool {tool}\"),\n+                *host,\n+                *target,\n+            ),\n+            // doesn't depend on compiler, same as host compiler\n+            _ => self.msg(Kind::Build, build_stage, format_args!(\"tool {tool}\"), *host, *target),\n         }\n-        _ => format!(\"Building tool {} (stage{})\", tool, build_stage),\n     }\n }\n \n@@ -111,14 +98,13 @@ impl Step for ToolBuild {\n         if !self.allow_features.is_empty() {\n             cargo.allow_features(self.allow_features);\n         }\n-        let msg = tooling_output(\n+        let _guard = builder.msg_tool(\n             self.mode,\n             self.tool,\n             self.compiler.stage,\n             &self.compiler.host,\n             &self.target,\n         );\n-        builder.info(&msg);\n \n         let mut cargo = Command::from(cargo);\n         let is_expected = builder.try_run(&mut cargo);\n@@ -492,14 +478,13 @@ impl Step for Rustdoc {\n             cargo.rustflag(\"--cfg=parallel_compiler\");\n         }\n \n-        let msg = tooling_output(\n+        let _guard = builder.msg_tool(\n             Mode::ToolRustc,\n             \"rustdoc\",\n             build_compiler.stage,\n             &self.compiler.host,\n             &target,\n         );\n-        builder.info(&msg);\n         builder.run(&mut cargo.into());\n \n         // Cargo adds a number of paths to the dylib search path on windows, which results in"}, {"sha": "d2e9c324af8c6f9a62fb9b45959b768df89d4617", "filename": "src/tools/build_helper/src/ci.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775682dc5e63fec7a062e84a32aa740ca5c45f0b/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fci.rs?ref=775682dc5e63fec7a062e84a32aa740ca5c45f0b", "patch": "@@ -38,3 +38,27 @@ impl CiEnv {\n         }\n     }\n }\n+\n+pub mod gha {\n+    /// All github actions log messages from this call to the Drop of the return value\n+    /// will be grouped and hidden by default in logs. Note that nesting these does\n+    /// not really work.\n+    pub fn group(name: impl std::fmt::Display) -> Group {\n+        if std::env::var_os(\"GITHUB_ACTIONS\").is_some() {\n+            eprintln!(\"::group::{name}\");\n+        }\n+        Group(())\n+    }\n+\n+    /// A guard that closes the current github actions log group on drop.\n+    #[must_use]\n+    pub struct Group(());\n+\n+    impl Drop for Group {\n+        fn drop(&mut self) {\n+            if std::env::var_os(\"GITHUB_ACTIONS\").is_some() {\n+                eprintln!(\"::endgroup::\");\n+            }\n+        }\n+    }\n+}"}]}