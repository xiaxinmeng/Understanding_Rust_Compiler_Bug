{"sha": "70cd85f5e39e04ba1b553784440481530606043c", "node_id": "C_kwDOAAsO6NoAKDcwY2Q4NWY1ZTM5ZTA0YmExYjU1Mzc4NDQ0MDQ4MTUzMDYwNjA0M2M", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-17T10:01:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-17T10:01:32Z"}, "message": "Rollup merge of #97079 - SparrowLii:successors, r=lcnr\n\nChange `Successors` to `impl Iterator<Item = BasicBlock>`\n\nThis PR fixes the FIXME in `compiler\\rustc_middle\\src\\mir\\mod.rs`.\nThis can omit several `&`, `*` or `cloned` operations on Successros' generated elements", "tree": {"sha": "3f0a4c74262efc14ca6e29ce8d33047a0a43c2e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f0a4c74262efc14ca6e29ce8d33047a0a43c2e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70cd85f5e39e04ba1b553784440481530606043c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJig3J8CRBK7hj4Ov3rIwAAjxcIAA1sLmgwOcTCCiCXXXw216Jb\nZvV+vv7ym0JGr/b7+0MkbRV6n50n57SGpVGW7faBtDopdnG08UE4ZY1QzHClxqzv\nUrlgp7f+WU8sdM/w1qGlh1dry+sWGOLiZBLUErrRYrOPtlUMV0pElQy1zp9ZSO1N\n6gpgJVr4lNuTCwnfDZymUjaLOq7IqIBjt+es0ve+nq5owa60+NFWqsfidkCxAbdQ\n/hlkJF7xXaPEZN04vDouixBJEP77TDmucOD8OQftuVcxHLmumde19Giyl49lzvSd\nJrNzp4g1xqkjBYxif4BC/ZYy2QIywGPVp9rh5HBtILJZO5+P8o6kEAImUaz27/A=\n=leJD\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f0a4c74262efc14ca6e29ce8d33047a0a43c2e6\nparent aaa0c014e2a9920e1a8aa30f7a6cec46cc7691fe\nparent 38bf1158bd850c80de42599c28602ae11727a133\nauthor Yuki Okushi <jtitor@2k36.org> 1652781692 +0900\ncommitter GitHub <noreply@github.com> 1652781692 +0900\n\nRollup merge of #97079 - SparrowLii:successors, r=lcnr\n\nChange `Successors` to `impl Iterator<Item = BasicBlock>`\n\nThis PR fixes the FIXME in `compiler\\rustc_middle\\src\\mir\\mod.rs`.\nThis can omit several `&`, `*` or `cloned` operations on Successros' generated elements\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70cd85f5e39e04ba1b553784440481530606043c", "html_url": "https://github.com/rust-lang/rust/commit/70cd85f5e39e04ba1b553784440481530606043c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70cd85f5e39e04ba1b553784440481530606043c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa0c014e2a9920e1a8aa30f7a6cec46cc7691fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa0c014e2a9920e1a8aa30f7a6cec46cc7691fe", "html_url": "https://github.com/rust-lang/rust/commit/aaa0c014e2a9920e1a8aa30f7a6cec46cc7691fe"}, {"sha": "38bf1158bd850c80de42599c28602ae11727a133", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bf1158bd850c80de42599c28602ae11727a133", "html_url": "https://github.com/rust-lang/rust/commit/38bf1158bd850c80de42599c28602ae11727a133"}], "stats": {"total": 109, "additions": 54, "deletions": 55}, "files": [{"sha": "5252b0b50c308a4c6a47529491ce95977386a303", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> OutOfScopePrecomputer<'_, 'tcx> {\n                 // Add successor BBs to the work list, if necessary.\n                 let bb_data = &self.body[bb];\n                 debug_assert!(hi == bb_data.statements.len());\n-                for &succ_bb in bb_data.terminator().successors() {\n+                for succ_bb in bb_data.terminator().successors() {\n                     if !self.visited.insert(succ_bb) {\n                         if succ_bb == location.block && first_lo > 0 {\n                             // `succ_bb` has been seen before. If it wasn't"}, {"sha": "6ec6b76bb5f856fb968be66a80e8520858733c88", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -467,7 +467,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     block\n                         .terminator()\n                         .successors()\n-                        .map(|bb| Location { statement_index: 0, block: *bb })\n+                        .map(|bb| Location { statement_index: 0, block: bb })\n                         .filter(|s| visited_locations.insert(*s))\n                         .map(|s| {\n                             if self.is_back_edge(location, s) {\n@@ -526,7 +526,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             } else {\n                 for bb in block.terminator().successors() {\n-                    let successor = Location { statement_index: 0, block: *bb };\n+                    let successor = Location { statement_index: 0, block: bb };\n \n                     if !visited_locations.contains(&successor)\n                         && self.find_loop_head_dfs(successor, loop_head, visited_locations)"}, {"sha": "22e7cd9e52c9f793ce060ad75c13d64037cec64d", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -67,8 +67,8 @@ impl<'cx, 'tcx> UseFinder<'cx, 'tcx> {\n                             block_data\n                                 .terminator()\n                                 .successors()\n-                                .filter(|&bb| Some(&Some(*bb)) != block_data.terminator().unwind())\n-                                .map(|&bb| Location { statement_index: 0, block: bb }),\n+                                .filter(|&bb| Some(&Some(bb)) != block_data.terminator().unwind())\n+                                .map(|bb| Location { statement_index: 0, block: bb }),\n                         );\n                     }\n                 }"}, {"sha": "6f8fae2de29a7994e847498c7f5414cb98fdfd77", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -108,7 +108,7 @@ fn populate_polonius_move_facts(\n                     // We are at the terminator of an init that has a panic path,\n                     // and where the init should not happen on panic\n \n-                    for &successor in block_data.terminator().successors() {\n+                    for successor in block_data.terminator().successors() {\n                         if body[successor].is_cleanup {\n                             continue;\n                         }"}, {"sha": "80dab115fac46044b1fb78a090a2d0006ea7f155", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -328,7 +328,7 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n                 bb, data, result[bb], funclet\n             );\n \n-            for &succ in data.terminator().successors() {\n+            for succ in data.terminator().successors() {\n                 let kind = result[succ];\n                 debug!(\"cleanup_kinds: propagating {:?} to {:?}/{:?}\", funclet, succ, kind);\n                 match kind {"}, {"sha": "a4d78911b2760a471c12e816c031fee6d6c9caf4", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -24,7 +24,7 @@ pub fn mir_fn_to_generic_graph<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Grap\n         let terminator = body[source].terminator();\n         let labels = terminator.kind.fmt_successor_labels();\n \n-        for (&target, label) in terminator.successors().zip(labels) {\n+        for (target, label) in terminator.successors().zip(labels) {\n             let src = node(def_id, source);\n             let trg = node(def_id, target);\n             edges.push(Edge::new(src, trg, label.to_string()));"}, {"sha": "7a80afa72320be18ca4cecb86be2edaf04eb7c3f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -1355,10 +1355,7 @@ pub enum InlineAsmOperand<'tcx> {\n /// Type for MIR `Assert` terminator error messages.\n pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;\n \n-// FIXME: Change `Successors` to `impl Iterator<Item = BasicBlock>`.\n-#[allow(rustc::pass_by_value)]\n-pub type Successors<'a> =\n-    iter::Chain<option::IntoIter<&'a BasicBlock>, slice::Iter<'a, BasicBlock>>;\n+pub type Successors<'a> = impl Iterator<Item = BasicBlock> + 'a;\n pub type SuccessorsMut<'a> =\n     iter::Chain<option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;\n \n@@ -3434,13 +3431,13 @@ impl<'tcx> graph::WithStartNode for Body<'tcx> {\n impl<'tcx> graph::WithSuccessors for Body<'tcx> {\n     #[inline]\n     fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n-        self.basic_blocks[node].terminator().successors().cloned()\n+        self.basic_blocks[node].terminator().successors()\n     }\n }\n \n impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {\n     type Item = BasicBlock;\n-    type Iter = iter::Cloned<Successors<'b>>;\n+    type Iter = Successors<'b>;\n }\n \n impl<'tcx, 'graph> graph::GraphPredecessors<'graph> for Body<'tcx> {"}, {"sha": "3bcb8f9c34c9a560d290a99f57acdfb6783a782c", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -166,9 +166,7 @@ impl<'tcx> MirPatch<'tcx> {\n             // get terminator's targets and apply the statement to all of them.\n             if loc.statement_index > body[loc.block].statements.len() {\n                 let term = body[loc.block].terminator();\n-                let successors = term.successors().clone();\n-\n-                for i in successors {\n+                for i in term.successors() {\n                     stmts_and_targets\n                         .push((Statement { source_info, kind: stmt.clone() }, i.clone()));\n                 }"}, {"sha": "ad09328585d27bda542ed76b50273588a3ef1f54", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -43,7 +43,7 @@ impl PredecessorCache {\n             let mut preds = IndexVec::from_elem(SmallVec::new(), basic_blocks);\n             for (bb, data) in basic_blocks.iter_enumerated() {\n                 if let Some(term) = &data.terminator {\n-                    for &succ in term.successors() {\n+                    for succ in term.successors() {\n                         preds[succ].push(bb);\n                     }\n                 }"}, {"sha": "fb3856b4952a032726dfeee9aaac585ffcd17835", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -416,32 +416,36 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | Return\n             | Unreachable\n             | Call { destination: None, cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),\n-            Goto { target: ref t }\n-            | Call { destination: None, cleanup: Some(ref t), .. }\n-            | Call { destination: Some((_, ref t)), cleanup: None, .. }\n-            | Yield { resume: ref t, drop: None, .. }\n-            | DropAndReplace { target: ref t, unwind: None, .. }\n-            | Drop { target: ref t, unwind: None, .. }\n-            | Assert { target: ref t, cleanup: None, .. }\n-            | FalseUnwind { real_target: ref t, unwind: None }\n-            | InlineAsm { destination: Some(ref t), cleanup: None, .. }\n-            | InlineAsm { destination: None, cleanup: Some(ref t), .. } => {\n-                Some(t).into_iter().chain(&[])\n+            | InlineAsm { destination: None, cleanup: None, .. } => {\n+                None.into_iter().chain((&[]).into_iter().copied())\n             }\n-            Call { destination: Some((_, ref t)), cleanup: Some(ref u), .. }\n-            | Yield { resume: ref t, drop: Some(ref u), .. }\n-            | DropAndReplace { target: ref t, unwind: Some(ref u), .. }\n-            | Drop { target: ref t, unwind: Some(ref u), .. }\n-            | Assert { target: ref t, cleanup: Some(ref u), .. }\n-            | FalseUnwind { real_target: ref t, unwind: Some(ref u) }\n-            | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {\n-                Some(t).into_iter().chain(slice::from_ref(u))\n+            Goto { target: t }\n+            | Call { destination: None, cleanup: Some(t), .. }\n+            | Call { destination: Some((_, t)), cleanup: None, .. }\n+            | Yield { resume: t, drop: None, .. }\n+            | DropAndReplace { target: t, unwind: None, .. }\n+            | Drop { target: t, unwind: None, .. }\n+            | Assert { target: t, cleanup: None, .. }\n+            | FalseUnwind { real_target: t, unwind: None }\n+            | InlineAsm { destination: Some(t), cleanup: None, .. }\n+            | InlineAsm { destination: None, cleanup: Some(t), .. } => {\n+                Some(t).into_iter().chain((&[]).into_iter().copied())\n             }\n-            SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),\n-            FalseEdge { ref real_target, ref imaginary_target } => {\n-                Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))\n+            Call { destination: Some((_, t)), cleanup: Some(ref u), .. }\n+            | Yield { resume: t, drop: Some(ref u), .. }\n+            | DropAndReplace { target: t, unwind: Some(ref u), .. }\n+            | Drop { target: t, unwind: Some(ref u), .. }\n+            | Assert { target: t, cleanup: Some(ref u), .. }\n+            | FalseUnwind { real_target: t, unwind: Some(ref u) }\n+            | InlineAsm { destination: Some(t), cleanup: Some(ref u), .. } => {\n+                Some(t).into_iter().chain(slice::from_ref(u).into_iter().copied())\n             }\n+            SwitchInt { ref targets, .. } => {\n+                None.into_iter().chain(targets.targets.iter().copied())\n+            }\n+            FalseEdge { real_target, ref imaginary_target } => Some(real_target)\n+                .into_iter()\n+                .chain(slice::from_ref(imaginary_target).into_iter().copied()),\n         }\n     }\n "}, {"sha": "1cbfed621560d6a516edb278817535b54f2a03c4", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -180,7 +180,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]\n         loop {\n             let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {\n-                if let Some(&bb) = iter.next() {\n+                if let Some(bb) = iter.next() {\n                     bb\n                 } else {\n                     break;"}, {"sha": "c6a85bc43f458a0e4a22f3038b3c9662ded28a9c", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -125,7 +125,7 @@ where\n     }\n \n     fn target(&self, edge: &Self::Edge) -> Self::Node {\n-        self.body[edge.source].terminator().successors().nth(edge.index).copied().unwrap()\n+        self.body[edge.source].terminator().successors().nth(edge.index).unwrap()\n     }\n }\n "}, {"sha": "434bf9d849e5a1fab81092de16c0e9a7f9fa8f2b", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -701,7 +701,7 @@ pub(super) fn dump_coverage_graphviz<'tcx>(\n         edge_labels.retain(|label| label != \"unreachable\");\n         let edge_counters = from_terminator\n             .successors()\n-            .map(|&successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n+            .map(|successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n         iter::zip(&edge_labels, edge_counters)\n             .map(|(label, some_counter)| {\n                 if let Some(counter) = some_counter {"}, {"sha": "47190fa0d1ad9346125b52bc60f9f62659695d08", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -484,17 +484,17 @@ fn bcb_filtered_successors<'a, 'tcx>(\n     body: &'tcx &'a mir::Body<'tcx>,\n     term_kind: &'tcx TerminatorKind<'tcx>,\n ) -> Box<dyn Iterator<Item = BasicBlock> + 'a> {\n-    let mut successors = term_kind.successors();\n     Box::new(\n         match &term_kind {\n             // SwitchInt successors are never unwind, and all of them should be traversed.\n-            TerminatorKind::SwitchInt { .. } => successors,\n+            TerminatorKind::SwitchInt { ref targets, .. } => {\n+                None.into_iter().chain(targets.all_targets().into_iter().copied())\n+            }\n             // For all other kinds, return only the first successor, if any, and ignore unwinds.\n             // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n             // `next().into_iter()`) into the `mir::Successors` aliased type.\n-            _ => successors.next().into_iter().chain(&[]),\n+            _ => term_kind.successors().next().into_iter().chain((&[]).into_iter().copied()),\n         }\n-        .copied()\n         .filter(move |&successor| body[successor].terminator().kind != TerminatorKind::Unreachable),\n     )\n }"}, {"sha": "1b58fab57d5af6c8195fa3ca2b20682aeaef1135", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -450,7 +450,7 @@ impl<'tcx> Inliner<'tcx> {\n             }\n \n             if !is_drop {\n-                for &succ in term.successors() {\n+                for succ in term.successors() {\n                     work_list.push(succ);\n                 }\n             }"}, {"sha": "f925d13b2fb91223d334e6066993080f7f526808", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -65,7 +65,7 @@ impl RemoveNoopLandingPads {\n             | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. } => {\n-                terminator.successors().all(|&succ| nop_landing_pads.contains(succ))\n+                terminator.successors().all(|succ| nop_landing_pads.contains(succ))\n             }\n             TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }"}, {"sha": "72e083439257645100def7667498a5002519f08d", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n         for (_, data) in traversal::preorder(body) {\n             if let Some(ref term) = data.terminator {\n-                for &tgt in term.successors() {\n+                for tgt in term.successors() {\n                     pred_count[tgt] += 1;\n                 }\n             }\n@@ -235,8 +235,8 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n         };\n \n         let first_succ = {\n-            if let Some(&first_succ) = terminator.successors().next() {\n-                if terminator.successors().all(|s| *s == first_succ) {\n+            if let Some(first_succ) = terminator.successors().next() {\n+                if terminator.successors().all(|s| s == first_succ) {\n                     let count = terminator.successors().count();\n                     self.pred_count[first_succ] -= (count - 1) as u32;\n                     first_succ"}, {"sha": "37aac8b2a49786efe9cf3fa62d54e2855e4406d8", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70cd85f5e39e04ba1b553784440481530606043c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cd85f5e39e04ba1b553784440481530606043c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=70cd85f5e39e04ba1b553784440481530606043c", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             }\n \n             // Give up on loops\n-            if terminator.successors().any(|s| *s == bb) {\n+            if terminator.successors().any(|s| s == bb) {\n                 continue;\n             }\n \n@@ -440,7 +440,7 @@ fn visit_clone_usage(cloned: mir::Local, clone: mir::Local, mir: &mir::Body<'_>,\n             // Short-circuit\n             if (usage.cloned_used && usage.clone_consumed_or_mutated) ||\n                 // Give up on loops\n-                tdata.terminator().successors().any(|s| *s == bb)\n+                tdata.terminator().successors().any(|s| s == bb)\n             {\n                 return CloneUsage {\n                     cloned_used: true,"}]}