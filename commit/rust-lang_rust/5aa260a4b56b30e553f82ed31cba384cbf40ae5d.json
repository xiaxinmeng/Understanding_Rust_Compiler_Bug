{"sha": "5aa260a4b56b30e553f82ed31cba384cbf40ae5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTI2MGE0YjU2YjMwZTU1M2Y4MmVkMzFjYmEzODRjYmY0MGFlNWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T03:37:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T03:37:05Z"}, "message": "Rollup merge of #58289 - haraldh:master, r=sfackler\n\nimpl iter() for dyn Error\n\nExamples:\n\n```rust\nlet next_error_type_a = err\n    .iter()\n    .filter_map(Error::downcast_ref::<ErrorTypeA>)\n    .next();\n```\n\n```rust\nlet source_root_error = err.iter().last();\n```\n\nCredit for the ErrorIter goes to reddit user /u/tdiekmann (Tim Diekmann)\nhttps://www.reddit.com/r/rust/comments/aj3lpg/is_an_iterator_impl_over_errorsource_possible/", "tree": {"sha": "04ba2864a6be39c38965841e816ad2f3a8598fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ba2864a6be39c38965841e816ad2f3a8598fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa260a4b56b30e553f82ed31cba384cbf40ae5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcY5DiCRBK7hj4Ov3rIwAAdHIIAHalKZYU/b1eCSPQZO2r5YcR\nsrGR4S3dZZkKBXtDiv+IbyXwx1L1Bgvyy1wI2GyRrf1x8bIJhGUIrEO2ToE64JfP\nK2heBKYt+JTl7y1JrehNpB5SFIaxsNx2UCi6WC4O6SgQ3drlLJNVuFj1FeYtTUQO\nvZmHpvoJECU9SU/943+6kVOAV2zug4VB1qzhqpmvbSx6PkHj+rZAUz1LYCzMC8KZ\ne4HC6Zkcsadla7+o6y//Y5Bbc10+hKbsilbdRkWs25WUK53I8PkiqkrNNwpCDZvF\ncBPHk2RaqpQgRMAg9g4OegktlC2ZiIwMnOQRXahAwu18DOFuXlImsE+1IY2I0Es=\n=5cJ+\n-----END PGP SIGNATURE-----\n", "payload": "tree 04ba2864a6be39c38965841e816ad2f3a8598fb7\nparent 0bc8f6f3f4ecfa3309aaa4df52fb4aa1ddd63b07\nparent f06af1ff178014dadd62391a4a06e7fff8f2a6a1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550029025 +0100\ncommitter GitHub <noreply@github.com> 1550029025 +0100\n\nRollup merge of #58289 - haraldh:master, r=sfackler\n\nimpl iter() for dyn Error\n\nExamples:\n\n```rust\nlet next_error_type_a = err\n    .iter()\n    .filter_map(Error::downcast_ref::<ErrorTypeA>)\n    .next();\n```\n\n```rust\nlet source_root_error = err.iter().last();\n```\n\nCredit for the ErrorIter goes to reddit user /u/tdiekmann (Tim Diekmann)\nhttps://www.reddit.com/r/rust/comments/aj3lpg/is_an_iterator_impl_over_errorsource_possible/\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa260a4b56b30e553f82ed31cba384cbf40ae5d", "html_url": "https://github.com/rust-lang/rust/commit/5aa260a4b56b30e553f82ed31cba384cbf40ae5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa260a4b56b30e553f82ed31cba384cbf40ae5d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc8f6f3f4ecfa3309aaa4df52fb4aa1ddd63b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc8f6f3f4ecfa3309aaa4df52fb4aa1ddd63b07", "html_url": "https://github.com/rust-lang/rust/commit/0bc8f6f3f4ecfa3309aaa4df52fb4aa1ddd63b07"}, {"sha": "f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "html_url": "https://github.com/rust-lang/rust/commit/f06af1ff178014dadd62391a4a06e7fff8f2a6a1"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "6348b411a4c641a08d1e678db1260d7adc4033cc", "filename": "src/libstd/error.rs", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/5aa260a4b56b30e553f82ed31cba384cbf40ae5d/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa260a4b56b30e553f82ed31cba384cbf40ae5d/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=5aa260a4b56b30e553f82ed31cba384cbf40ae5d", "patch": "@@ -667,6 +667,158 @@ impl dyn Error {\n             Err(self)\n         }\n     }\n+\n+    /// Returns an iterator starting with the current error and continuing with\n+    /// recursively calling [`source`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    ///\n+    /// // let err : Box<Error> = b.into(); // or\n+    /// let err = &b as &(dyn Error);\n+    ///\n+    /// let mut iter = err.iter_chain();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`source`]: trait.Error.html#method.source\n+    #[unstable(feature = \"error_iter\", issue = \"58289\")]\n+    #[inline]\n+    pub fn iter_chain(&self) -> ErrorIter {\n+        ErrorIter {\n+            current: Some(self),\n+        }\n+    }\n+\n+    /// Returns an iterator starting with the [`source`] of this error\n+    /// and continuing with recursively calling [`source`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct C(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for C {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"C\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for C {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    /// let c = C(Some(Box::new(b)));\n+    ///\n+    /// // let err : Box<Error> = c.into(); // or\n+    /// let err = &c as &(dyn Error);\n+    ///\n+    /// let mut iter = err.iter_sources();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`source`]: trait.Error.html#method.source\n+    #[inline]\n+    #[unstable(feature = \"error_iter\", issue = \"58289\")]\n+    pub fn iter_sources(&self) -> ErrorIter {\n+        ErrorIter {\n+            current: self.source(),\n+        }\n+    }\n+}\n+\n+/// An iterator over [`Error`]\n+///\n+/// [`Error`]: trait.Error.html\n+#[unstable(feature = \"error_iter\", issue = \"58289\")]\n+#[derive(Copy, Clone, Debug)]\n+pub struct ErrorIter<'a> {\n+    current: Option<&'a (dyn Error + 'static)>,\n+}\n+\n+#[unstable(feature = \"error_iter\", issue = \"58289\")]\n+impl<'a> Iterator for ErrorIter<'a> {\n+    type Item = &'a (dyn Error + 'static);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let current = self.current;\n+        self.current = self.current.and_then(Error::source);\n+        current\n+    }\n }\n \n impl dyn Error + Send {"}]}