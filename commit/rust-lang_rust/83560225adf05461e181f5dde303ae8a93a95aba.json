{"sha": "83560225adf05461e181f5dde303ae8a93a95aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTYwMjI1YWRmMDU0NjFlMTgxZjVkZGUzMDNhZThhOTNhOTVhYmE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-14T18:15:02Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-14T21:05:07Z"}, "message": "Move serial_scope and serial_join to parallel_compiler = false", "tree": {"sha": "8e51336c3b287c2c62a0847f37d21d254d67e528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e51336c3b287c2c62a0847f37d21d254d67e528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83560225adf05461e181f5dde303ae8a93a95aba", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2k4wMACgkQiMlBzaHU\nZDJVZRAAn70ncwwgKgcetQxEZqAQ9GUYTPDHq9D88XBO7ACd7mfuHsnDcKVc2uUR\nJ2x8px3D/d1W8lfUCyhCM+7PDNX1TVGlKbV6w7wPuSXGqySTvn9r84P/4Zr8T7AP\nwD/q6RYKsJIv9F1Lw5wF8tmQNlC2qxg+D6mkCTTOjJaOnMQQI6v7ZGelrFx8CLl+\nFNkIg3d2c0OrasBgvCct5s+CeRjOpUqQMRPzQbh3Io4FEui0kuw0/ouV3mDNfvx9\nnc/2rTwrngYUMFbalLpBTlPrIH4oDEN7/V9vGcvAlKan3LfxFtQnUZpDxndP2JGk\nBtBYYy2CRY9PrBTsFEofXL8z+UeXr0NCiJWALKZ37Kg/RcldXQwS409L1MSUghWB\n6XOt8YJ5WjB/hPtUmW7d5AVpLF4+fc5Wlb6+l7xd0bkJOZr/Ovw7g8i6+c/+gklI\nD0g87pzSvVEX8QUhzgB4Z6/17VsPsw/l9TGStPwfQOm8skSZFSkmBFQransCSlLP\nd7/7HbPV0VXTppr08W+CluFe9LskECrBnLKh2yajwTmhrUHrY1bNhGCxMjyoFMce\nyImIMNQA7Kl2V69dRHamUMIiDdH+CZLecbl4TGVksigs9F9pPdHtS6pHhYtgJddm\nH8ZYOwUmhNH1hbn43MuELnF9UrRDAqeCj8ami7wiCQ9cMGlZkMk=\n=1Adj\n-----END PGP SIGNATURE-----", "payload": "tree 8e51336c3b287c2c62a0847f37d21d254d67e528\nparent 068a8d163cdbab740c62bb7cc802c62e2c4b90b2\nauthor Santiago Pastorino <spastorino@gmail.com> 1571076902 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571087107 -0300\n\nMove serial_scope and serial_join to parallel_compiler = false\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83560225adf05461e181f5dde303ae8a93a95aba", "html_url": "https://github.com/rust-lang/rust/commit/83560225adf05461e181f5dde303ae8a93a95aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83560225adf05461e181f5dde303ae8a93a95aba/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068a8d163cdbab740c62bb7cc802c62e2c4b90b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/068a8d163cdbab740c62bb7cc802c62e2c4b90b2", "html_url": "https://github.com/rust-lang/rust/commit/068a8d163cdbab740c62bb7cc802c62e2c4b90b2"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "1d81aa0b3867db7019542b8774a40e96fd96e94d", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/83560225adf05461e181f5dde303ae8a93a95aba/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83560225adf05461e181f5dde303ae8a93a95aba/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=83560225adf05461e181f5dde303ae8a93a95aba", "patch": "@@ -23,29 +23,6 @@ use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n use crate::owning_ref::{Erased, OwningRef};\n \n-pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n-    where A: FnOnce() -> RA,\n-          B: FnOnce() -> RB\n-{\n-    (oper_a(), oper_b())\n-}\n-\n-pub struct SerialScope;\n-\n-impl SerialScope {\n-    pub fn spawn<F>(&self, f: F)\n-        where F: FnOnce(&SerialScope)\n-    {\n-        f(self)\n-    }\n-}\n-\n-pub fn serial_scope<F, R>(f: F) -> R\n-    where F: FnOnce(&SerialScope) -> R\n-{\n-    f(&SerialScope)\n-}\n-\n pub use std::sync::atomic::Ordering::SeqCst;\n pub use std::sync::atomic::Ordering;\n \n@@ -64,6 +41,29 @@ cfg_if! {\n             }\n         }\n \n+        pub fn serial_join<A, B, RA, RB>(oper_a: A, oper_b: B) -> (RA, RB)\n+            where A: FnOnce() -> RA,\n+                  B: FnOnce() -> RB\n+        {\n+            (oper_a(), oper_b())\n+        }\n+\n+        pub struct SerialScope;\n+\n+        impl SerialScope {\n+            pub fn spawn<F>(&self, f: F)\n+                where F: FnOnce(&SerialScope)\n+            {\n+                f(self)\n+            }\n+        }\n+\n+        pub fn serial_scope<F, R>(f: F) -> R\n+            where F: FnOnce(&SerialScope) -> R\n+        {\n+            f(&SerialScope)\n+        }\n+\n         use std::ops::Add;\n         use std::panic::{resume_unwind, catch_unwind, AssertUnwindSafe};\n "}]}