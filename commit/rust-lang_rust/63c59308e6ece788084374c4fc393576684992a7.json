{"sha": "63c59308e6ece788084374c4fc393576684992a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYzU5MzA4ZTZlY2U3ODgwODQzNzRjNGZjMzkzNTc2Njg0OTkyYTc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-17T05:50:08Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-18T02:47:45Z"}, "message": "Add tests", "tree": {"sha": "a87e4922a282ac9fbf74493fb27dc57aad7485ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87e4922a282ac9fbf74493fb27dc57aad7485ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c59308e6ece788084374c4fc393576684992a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c59308e6ece788084374c4fc393576684992a7", "html_url": "https://github.com/rust-lang/rust/commit/63c59308e6ece788084374c4fc393576684992a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c59308e6ece788084374c4fc393576684992a7/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c1f8ee2606e10e196485d6bdbd87146d2545de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c1f8ee2606e10e196485d6bdbd87146d2545de", "html_url": "https://github.com/rust-lang/rust/commit/d2c1f8ee2606e10e196485d6bdbd87146d2545de"}], "stats": {"total": 295, "additions": 295, "deletions": 0}, "files": [{"sha": "bfef33c7de786dd8f8dfd2a5a415b96767ac62bf", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0277.json", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/63c59308e6ece788084374c4fc393576684992a7/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json", "raw_url": "https://github.com/rust-lang/rust/raw/63c59308e6ece788084374c4fc393576684992a7/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json?ref=63c59308e6ece788084374c4fc393576684992a7", "patch": "@@ -0,0 +1,261 @@\n+{\n+    \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n+    \"children\": [\n+        {\n+            \"children\": [],\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"message\": \"the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+            \"rendered\": null,\n+            \"spans\": []\n+        }\n+    ],\n+    \"code\": {\n+        \"code\": \"E0277\",\n+        \"explanation\": \"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"message\": \"can't compare `{integer}` with `&str`\",\n+    \"spans\": [\n+        {\n+            \"byte_end\": 155,\n+            \"byte_start\": 153,\n+            \"column_end\": 33,\n+            \"column_start\": 31,\n+            \"expansion\": {\n+                \"def_site_span\": {\n+                    \"byte_end\": 940,\n+                    \"byte_start\": 0,\n+                    \"column_end\": 6,\n+                    \"column_start\": 1,\n+                    \"expansion\": null,\n+                    \"file_name\": \"<::core::macros::assert_eq macros>\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 36,\n+                    \"line_start\": 1,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 35,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"($ left : expr, $ right : expr) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 3,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     match (& $ left, & $ right)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 34,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         (left_val, right_val) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 46,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             if ! (* left_val == * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 25,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 panic !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 57,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                        },\n+                        {\n+                            \"highlight_end\": 16,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"  left: `{:?}`,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 18,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" right: `{:?}`\\\"#,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 47,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  & * left_val, & * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 42,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" }) ; ($ left : expr, $ right : expr,) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 49,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({ $ crate :: assert_eq ! ($ left, $ right) }) ;\"\n+                        },\n+                        {\n+                            \"highlight_end\": 53,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 3,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"({\"\n+                        },\n+                        {\n+                            \"highlight_end\": 37,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     match (& ($ left), & ($ right))\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 34,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         (left_val, right_val) =>\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 46,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             if ! (* left_val == * right_val)\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             {\"\n+                        },\n+                        {\n+                            \"highlight_end\": 25,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 panic !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 57,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n+                        },\n+                        {\n+                            \"highlight_end\": 16,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"  left: `{:?}`,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 22,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" right: `{:?}`: {}\\\"#,\"\n+                        },\n+                        {\n+                            \"highlight_end\": 72,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  & * left_val, & * right_val, $ crate :: format_args !\"\n+                        },\n+                        {\n+                            \"highlight_end\": 33,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"                  ($ ($ arg) +))\"\n+                        },\n+                        {\n+                            \"highlight_end\": 15,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"             }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 11,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"         }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 7,\n+                            \"highlight_start\": 1,\n+                            \"text\": \"     }\"\n+                        },\n+                        {\n+                            \"highlight_end\": 6,\n+                            \"highlight_start\": 1,\n+                            \"text\": \" }) ;\"\n+                        }\n+                    ]\n+                },\n+                \"macro_decl_name\": \"assert_eq!\",\n+                \"span\": {\n+                    \"byte_end\": 38,\n+                    \"byte_start\": 16,\n+                    \"column_end\": 27,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": false,\n+                    \"label\": null,\n+                    \"line_end\": 2,\n+                    \"line_start\": 2,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"text\": [\n+                        {\n+                            \"highlight_end\": 27,\n+                            \"highlight_start\": 5,\n+                            \"text\": \"    assert_eq!(1, \\\"love\\\");\"\n+                        }\n+                    ]\n+                }\n+            },\n+            \"file_name\": \"<::core::macros::assert_eq macros>\",\n+            \"is_primary\": true,\n+            \"label\": \"no implementation for `{integer} == &str`\",\n+            \"line_end\": 7,\n+            \"line_start\": 7,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"text\": [\n+                {\n+                    \"highlight_end\": 33,\n+                    \"highlight_start\": 31,\n+                    \"text\": \"             if ! (* left_val == * right_val)\"\n+                }\n+            ]\n+        }\n+    ]\n+}"}, {"sha": "9acd319b30e7b5297f5a39c0385c6f4ea137e0cf", "filename": "editors/code/src/test/utils/diagnotics/rust.test.ts", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/63c59308e6ece788084374c4fc393576684992a7/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/63c59308e6ece788084374c4fc393576684992a7/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts?ref=63c59308e6ece788084374c4fc393576684992a7", "patch": "@@ -199,4 +199,38 @@ describe('mapRustDiagnosticToVsCode', () => {\n         // There are no suggested fixes\n         assert.strictEqual(suggestedFixes.length, 0);\n     });\n+\n+    it('should map a macro invocation location to normal file path', () => {\n+        const { location, diagnostic, suggestedFixes } = mapFixtureToVsCode(\n+            'error/E0277',\n+        );\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Error,\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            [\n+                'can\\'t compare `{integer}` with `&str`',\n+                'the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`',\n+            ].join('\\n'),\n+        );\n+        assert.strictEqual(diagnostic.code, 'E0277');\n+        assert.strictEqual(diagnostic.source, 'rustc');\n+        assert.deepStrictEqual(diagnostic.tags, []);\n+\n+        // No related information\n+        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n+\n+        // There are no suggested fixes\n+        assert.strictEqual(suggestedFixes.length, 0);\n+\n+        // The file url should be normal file\n+        // Ignore the first part because it depends on vs workspace location\n+        assert.strictEqual(\n+            true,\n+            location.uri.toString().endsWith('src/main.rs'),\n+        );\n+    });\n });"}]}