{"sha": "647aecc281f0defdd96bc807f2b98ec3090857a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2FlY2MyODFmMGRlZmRkOTZiYzgwN2YyYjk4ZWMzMDkwODU3YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-24T12:20:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-24T12:20:21Z"}, "message": "Auto merge of #44807 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\n- Successful merges: #44103, #44625, #44789, #44795\n- Failed merges:", "tree": {"sha": "e50609667b2c3e8916dbf15f7b3a451642d98932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e50609667b2c3e8916dbf15f7b3a451642d98932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647aecc281f0defdd96bc807f2b98ec3090857a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647aecc281f0defdd96bc807f2b98ec3090857a2", "html_url": "https://github.com/rust-lang/rust/commit/647aecc281f0defdd96bc807f2b98ec3090857a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647aecc281f0defdd96bc807f2b98ec3090857a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9078745e882b3cdedf058479d9d6d936c6750c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9078745e882b3cdedf058479d9d6d936c6750c", "html_url": "https://github.com/rust-lang/rust/commit/6f9078745e882b3cdedf058479d9d6d936c6750c"}, {"sha": "a8a0ec2a28081ed6e1e50766f8599c4c03e8c26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a0ec2a28081ed6e1e50766f8599c4c03e8c26a", "html_url": "https://github.com/rust-lang/rust/commit/a8a0ec2a28081ed6e1e50766f8599c4c03e8c26a"}], "stats": {"total": 128, "additions": 96, "deletions": 32}, "files": [{"sha": "b97920dd18b77a1caccc3a9f2256c23393298573", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -153,6 +153,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         };\n \n         let mut fn_warned = false;\n+        let mut op_warned = false;\n         if cx.tcx.sess.features.borrow().fn_must_use {\n             let maybe_def = match expr.node {\n                 hir::ExprCall(ref callee, _) => {\n@@ -172,9 +173,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 let def_id = def.def_id();\n                 fn_warned = check_must_use(cx, def_id, s.span, \"return value of \");\n             }\n+\n+            if let hir::ExprBinary(bin_op, ..) = expr.node {\n+                match bin_op.node {\n+                    // Hardcoding the comparison operators here seemed more\n+                    // expedient than the refactoring that would be needed to\n+                    // look up the `#[must_use]` attribute which does exist on\n+                    // the comparison trait methods\n+                    hir::BiEq | hir::BiLt | hir::BiLe | hir::BiNe | hir::BiGe | hir::BiGt => {\n+                        let msg = \"unused comparison which must be used\";\n+                        cx.span_lint(UNUSED_MUST_USE, expr.span, msg);\n+                        op_warned = true;\n+                    },\n+                    _ => {},\n+                }\n+            }\n         }\n \n-        if !(ty_warned || fn_warned) {\n+        if !(ty_warned || fn_warned || op_warned) {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n "}, {"sha": "10825323e4129b9e00bc8e9c4c64a19252c3cd79", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -408,7 +408,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n             self.each_borrow_involving_path(\n                 context, lvalue_span.0, flow_state, |this, _idx, borrow| {\n                     if !borrow.compatible_with(BorrowKind::Mut) {\n-                        this.report_move_out_while_borrowed(context, lvalue_span);\n+                        this.report_move_out_while_borrowed(context, lvalue_span, borrow);\n                         Control::Break\n                     } else {\n                         Control::Continue\n@@ -896,20 +896,28 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     fn report_use_of_moved(&mut self,\n                            _context: Context,\n                            (lvalue, span): (&Lvalue, Span)) {\n-        let mut err = self.tcx.cannot_act_on_uninitialized_variable(\n-            span, \"use\", &self.describe_lvalue(lvalue), Origin::Mir);\n-        // FIXME: add span_label for use of uninitialized variable\n-        err.emit();\n+        self.tcx.cannot_act_on_uninitialized_variable(span,\n+                                                      \"use\",\n+                                                      &self.describe_lvalue(lvalue),\n+                                                      Origin::Mir)\n+                .span_label(span, format!(\"use of possibly uninitialized `{}`\",\n+                                          self.describe_lvalue(lvalue)))\n+                .emit();\n     }\n \n     fn report_move_out_while_borrowed(&mut self,\n                                       _context: Context,\n-                                      (lvalue, span): (&Lvalue, Span)) {\n-        let mut err = self.tcx.cannot_move_when_borrowed(\n-            span, &self.describe_lvalue(lvalue), Origin::Mir);\n-        // FIXME 1: add span_label for \"borrow of `()` occurs here\"\n-        // FIXME 2: add span_label for \"move out of `{}` occurs here\"\n-        err.emit();\n+                                      (lvalue, span): (&Lvalue, Span),\n+                                      borrow: &BorrowData) {\n+        self.tcx.cannot_move_when_borrowed(span,\n+                                           &self.describe_lvalue(lvalue),\n+                                           Origin::Mir)\n+                .span_label(self.retrieve_borrow_span(borrow),\n+                            format!(\"borrow of `{}` occurs here\",\n+                                    self.describe_lvalue(&borrow.lvalue)))\n+                .span_label(span, format!(\"move out of `{}` occurs here\",\n+                                          self.describe_lvalue(lvalue)))\n+                .emit();\n     }\n \n     fn report_use_while_mutably_borrowed(&mut self,"}, {"sha": "1b7232bf1bca861e8c46f26ecd84e97564cd23e6", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -823,7 +823,7 @@ span.since {\n \n .information {\n \tposition: absolute;\n-\tleft: -1px;\n+\tleft: -20px;\n \tmargin-top: 7px;\n \tz-index: 1;\n }"}, {"sha": "1869ad3ed707a088260c6bdf80ce7e45431d6a82", "filename": "src/libstd/process.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -106,15 +106,18 @@ use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n pub struct Child {\n     handle: imp::Process,\n \n-    /// The handle for writing to the child's stdin, if it has been captured\n+    /// The handle for writing to the child's standard input (stdin), if it has\n+    /// been captured.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub stdin: Option<ChildStdin>,\n \n-    /// The handle for reading from the child's stdout, if it has been captured\n+    /// The handle for reading from the child's standard output (stdout), if it\n+    /// has been captured.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub stdout: Option<ChildStdout>,\n \n-    /// The handle for reading from the child's stderr, if it has been captured\n+    /// The handle for reading from the child's standard error (stderr), if it\n+    /// has been captured.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub stderr: Option<ChildStderr>,\n }\n@@ -149,12 +152,17 @@ impl fmt::Debug for Child {\n     }\n }\n \n-/// A handle to a child process's stdin.\n+/// A handle to a child process's standard input (stdin).\n ///\n /// This struct is used in the [`stdin`] field on [`Child`].\n ///\n+/// When an instance of `ChildStdin` is [dropped], the `ChildStdin`'s underlying\n+/// file handle will be closed. If the child process was blocked on input prior\n+/// to being dropped, it will become unblocked after dropping.\n+///\n /// [`Child`]: struct.Child.html\n /// [`stdin`]: struct.Child.html#structfield.stdin\n+/// [dropped]: ../ops/trait.Drop.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdin {\n     inner: AnonPipe\n@@ -192,12 +200,16 @@ impl fmt::Debug for ChildStdin {\n     }\n }\n \n-/// A handle to a child process's stdout.\n+/// A handle to a child process's standard output (stdout).\n ///\n /// This struct is used in the [`stdout`] field on [`Child`].\n ///\n+/// When an instance of `ChildStdout` is [dropped], the `ChildStdout`'s\n+/// underlying file handle will be closed.\n+///\n /// [`Child`]: struct.Child.html\n /// [`stdout`]: struct.Child.html#structfield.stdout\n+/// [dropped]: ../ops/trait.Drop.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdout {\n     inner: AnonPipe\n@@ -239,8 +251,12 @@ impl fmt::Debug for ChildStdout {\n ///\n /// This struct is used in the [`stderr`] field on [`Child`].\n ///\n+/// When an instance of `ChildStderr` is [dropped], the `ChildStderr`'s\n+/// underlying file handle will be closed.\n+///\n /// [`Child`]: struct.Child.html\n /// [`stderr`]: struct.Child.html#structfield.stderr\n+/// [dropped]: ../ops/trait.Drop.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStderr {\n     inner: AnonPipe\n@@ -534,7 +550,7 @@ impl Command {\n         self\n     }\n \n-    /// Configuration for the child process's stdin handle (file descriptor 0).\n+    /// Configuration for the child process's standard input (stdin) handle.\n     ///\n     /// # Examples\n     ///\n@@ -554,7 +570,7 @@ impl Command {\n         self\n     }\n \n-    /// Configuration for the child process's stdout handle (file descriptor 1).\n+    /// Configuration for the child process's standard output (stdout) handle.\n     ///\n     /// # Examples\n     ///\n@@ -574,7 +590,7 @@ impl Command {\n         self\n     }\n \n-    /// Configuration for the child process's stderr handle (file descriptor 2).\n+    /// Configuration for the child process's standard error (stderr) handle.\n     ///\n     /// # Examples\n     ///"}, {"sha": "5c730aaa8d0fa0df92fae453addf2d7097433b06", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -380,7 +380,7 @@ declare_features! (\n     // #[doc(masked)]\n     (active, doc_masked, \"1.21.0\", None),\n \n-    // allow `#[must_use]` on functions (RFC 1940)\n+    // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n     (active, fn_must_use, \"1.21.0\", Some(43302)),\n \n     // allow '|' at beginning of match arms (RFC 1925)"}, {"sha": "3741ba4f3ae7a3a97dd02600f4935093d4ae3f31", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.rs?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -11,6 +11,7 @@\n #![feature(fn_must_use)]\n #![warn(unused_must_use)]\n \n+#[derive(PartialEq, Eq)]\n struct MyStruct {\n     n: usize,\n }\n@@ -58,13 +59,18 @@ fn main() {\n     need_to_use_this_value();\n \n     let mut m = MyStruct { n: 2 };\n+    let n = MyStruct { n: 3 };\n+\n     m.need_to_use_this_method_value();\n     m.is_even(); // trait method!\n \n-    m.replace(3);\n+    m.replace(3); // won't warn (annotation needs to be in trait definition)\n \n+    // comparison methods are `must_use`\n     2.eq(&3);\n+    m.eq(&n);\n \n-    // FIXME: operators should probably be `must_use` if underlying method is\n+    // lint includes comparison operators\n     2 == 3;\n+    m == n;\n }"}, {"sha": "fdd0a591bc78da13b4c6c6a94014e4756911ec2d", "filename": "src/test/ui/rfc_1940-must_use_on_functions/fn_must_use.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/647aecc281f0defdd96bc807f2b98ec3090857a2/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc_1940-must_use_on_functions%2Ffn_must_use.stderr?ref=647aecc281f0defdd96bc807f2b98ec3090857a2", "patch": "@@ -1,7 +1,7 @@\n warning: unused return value of `need_to_use_this_value` which must be used: it's important\n-  --> $DIR/fn_must_use.rs:58:5\n+  --> $DIR/fn_must_use.rs:59:5\n    |\n-58 |     need_to_use_this_value();\n+59 |     need_to_use_this_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -11,20 +11,38 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^\n \n warning: unused return value of `MyStruct::need_to_use_this_method_value` which must be used\n-  --> $DIR/fn_must_use.rs:61:5\n+  --> $DIR/fn_must_use.rs:64:5\n    |\n-61 |     m.need_to_use_this_method_value();\n+64 |     m.need_to_use_this_method_value();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused return value of `EvenNature::is_even` which must be used: no side effects\n-  --> $DIR/fn_must_use.rs:62:5\n+  --> $DIR/fn_must_use.rs:65:5\n    |\n-62 |     m.is_even(); // trait method!\n+65 |     m.is_even(); // trait method!\n    |     ^^^^^^^^^^^^\n \n warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n-  --> $DIR/fn_must_use.rs:66:5\n+  --> $DIR/fn_must_use.rs:70:5\n    |\n-66 |     2.eq(&3);\n+70 |     2.eq(&3);\n    |     ^^^^^^^^^\n \n+warning: unused return value of `std::cmp::PartialEq::eq` which must be used\n+  --> $DIR/fn_must_use.rs:71:5\n+   |\n+71 |     m.eq(&n);\n+   |     ^^^^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/fn_must_use.rs:74:5\n+   |\n+74 |     2 == 3;\n+   |     ^^^^^^\n+\n+warning: unused comparison which must be used\n+  --> $DIR/fn_must_use.rs:75:5\n+   |\n+75 |     m == n;\n+   |     ^^^^^^\n+"}]}