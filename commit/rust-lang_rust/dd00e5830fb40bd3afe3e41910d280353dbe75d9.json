{"sha": "dd00e5830fb40bd3afe3e41910d280353dbe75d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDBlNTgzMGZiNDBiZDNhZmUzZTQxOTEwZDI4MDM1M2RiZTc1ZDk=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-16T20:49:48Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-23T21:46:18Z"}, "message": "Use ID numbers in lieu of allocations for DIR*", "tree": {"sha": "33719cde2d8a7647cdc5e66ed649bacfe10bb288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33719cde2d8a7647cdc5e66ed649bacfe10bb288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd00e5830fb40bd3afe3e41910d280353dbe75d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd00e5830fb40bd3afe3e41910d280353dbe75d9", "html_url": "https://github.com/rust-lang/rust/commit/dd00e5830fb40bd3afe3e41910d280353dbe75d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd00e5830fb40bd3afe3e41910d280353dbe75d9/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89cbe0ae567603b416ae995f38c428445ff10159", "url": "https://api.github.com/repos/rust-lang/rust/commits/89cbe0ae567603b416ae995f38c428445ff10159", "html_url": "https://github.com/rust-lang/rust/commit/89cbe0ae567603b416ae995f38c428445ff10159"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "f3b1cc7124c813fbe97c3f70c54861e61212b6b5", "filename": "src/shims/fs.rs", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dd00e5830fb40bd3afe3e41910d280353dbe75d9/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd00e5830fb40bd3afe3e41910d280353dbe75d9/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=dd00e5830fb40bd3afe3e41910d280353dbe75d9", "patch": "@@ -204,19 +204,39 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n     }\n }\n \n-#[derive(Debug, Default)]\n+#[derive(Debug)]\n pub struct DirHandler {\n     /// Directory iterators used to emulate libc \"directory streams\", as used in opendir, readdir,\n     /// and closedir.\n     ///\n-    /// When opendir is called, a new allocation is made, a directory iterator is created on the\n-    /// host for the target directory, and an entry is stored in this hash map, indexed by a\n-    /// pointer to the allocation which represents the directory stream. When readdir is called,\n-    /// the directory stream pointer is used to look up the corresponding ReadDir iterator from\n-    /// this HashMap, and information from the next directory entry is returned. When closedir is\n-    /// called, the ReadDir iterator is removed from this HashMap, and the allocation that\n-    /// represented the directory stream is deallocated.\n-    streams: HashMap<Pointer<Tag>, ReadDir>,\n+    /// When opendir is called, a directory iterator is created on the host for the target\n+    /// directory, and an entry is stored in this hash map, indexed by an ID which represents\n+    /// the directory stream. When readdir is called, the directory stream ID is used to look up\n+    /// the corresponding ReadDir iterator from this HashMap, and information from the next\n+    /// directory entry is returned. When closedir is called, the ReadDir iterator is removed from\n+    /// this HashMap.\n+    streams: HashMap<u64, ReadDir>,\n+    /// ID number to be used by the next call to opendir\n+    next_id: u64,\n+}\n+\n+impl DirHandler {\n+    fn insert_new(&mut self, read_dir: ReadDir) -> u64 {\n+        let id = self.next_id;\n+        self.next_id += 1;\n+        self.streams.insert(id, read_dir).unwrap_none();\n+        id\n+    }\n+}\n+\n+impl Default for DirHandler {\n+    fn default() -> DirHandler {\n+        DirHandler {\n+            streams: HashMap::new(),\n+            // Skip 0 as an ID, because it looks like a null pointer to libc\n+            next_id: 1,\n+        }\n+    }\n }\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -838,20 +858,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         match result {\n             Ok(dir_iter) => {\n-                let size = 1;\n-                let kind = MiriMemoryKind::Env;\n-                let align = this.min_align(size, kind);\n-                let dir_ptr = this.memory.allocate(Size::from_bytes(size), align, kind.into());\n-                let prev = this\n-                    .machine\n-                    .dir_handler\n-                    .streams\n-                    .insert(dir_ptr, dir_iter);\n-                if let Some(_) = prev {\n-                    panic!(\"The pointer allocated for opendir was already registered by a previous call to opendir\")\n-                } else {\n-                    Ok(Scalar::Ptr(dir_ptr))\n-                }\n+                let id = this.machine.dir_handler.insert_new(dir_iter);\n+\n+                // The libc API for opendir says that this method returns a pointer to an opaque\n+                // structure, but we are returning an ID number. Thus, pass it as a scalar of\n+                // pointer width.\n+                Ok(Scalar::from_int(id, this.pointer_size()))\n             }\n             Err(e) => {\n                 this.set_last_error_from_io_error(e)?;\n@@ -870,7 +882,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"readdir64_r\")?;\n \n-        let dirp = this.force_ptr(this.read_scalar(dirp_op)?.not_undef()?)?;\n+        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n         let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n         let dirent64_layout = this.libc_ty_layout(\"dirent64\")?;\n@@ -946,7 +958,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"readdir_r\")?;\n \n-        let dirp = this.force_ptr(this.read_scalar(dirp_op)?.not_undef()?)?;\n+        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n         let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n         let dirent_layout = this.libc_ty_layout(\"dirent\")?;\n@@ -1020,11 +1032,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"closedir\")?;\n \n-        let dirp = this.force_ptr(this.read_scalar(dirp_op)?.not_undef()?)?;\n+        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n \n         if let Some(dir_iter) = this.machine.dir_handler.streams.remove(&dirp) {\n             drop(dir_iter);\n-            this.memory.deallocate(dirp, None, MiriMemoryKind::Env.into())?;\n             Ok(0)\n         } else {\n             this.handle_not_found()"}]}