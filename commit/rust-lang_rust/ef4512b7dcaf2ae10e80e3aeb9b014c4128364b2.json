{"sha": "ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "node_id": "C_kwDOAAsO6NoAKGVmNDUxMmI3ZGNhZjJhZTEwZTgwZTNhZWI5YjAxNGM0MTI4MzY0YjI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-19T09:44:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-19T11:56:03Z"}, "message": "Codegen 128bit atomic loads and stores for compiler builtins as trap\n\n128bit atomics are unstable and only enabled on AArch64 and x86_64 macOS.\nCranelift doesn't support 128bit atomics yet.", "tree": {"sha": "28411dd3309f2037376c9886978fcee78f588689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28411dd3309f2037376c9886978fcee78f588689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "html_url": "https://github.com/rust-lang/rust/commit/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31329f98412b70f034e41420dba28cb8d14ec4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/31329f98412b70f034e41420dba28cb8d14ec4a9", "html_url": "https://github.com/rust-lang/rust/commit/31329f98412b70f034e41420dba28cb8d14ec4a9"}], "stats": {"total": 114, "additions": 39, "deletions": 75}, "files": [{"sha": "815826d8497d2eef1d94a433e9dad34e3c2740d0", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "patch": "@@ -57,6 +57,8 @@ dependencies = [\n [[package]]\n name = \"compiler_builtins\"\n version = \"0.1.70\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80873f979f0a344a4ade87c2f70d9ccf5720b83b10c97ec7cd745895d021e85a\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "d0e5fc4a3b9f12e19481adda1c2d63735d073556", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "patch": "@@ -14,7 +14,6 @@ compiler_builtins = { version = \"0.1.39\", default-features = false, features = [\n rustc-std-workspace-core = { path = \"./sysroot_src/library/rustc-std-workspace-core\" }\n rustc-std-workspace-alloc = { path = \"./sysroot_src/library/rustc-std-workspace-alloc\" }\n rustc-std-workspace-std = { path = \"./sysroot_src/library/rustc-std-workspace-std\" }\n-compiler_builtins = { path = \"./compiler-builtins\" }\n \n [profile.dev]\n lto = \"off\"\n@@ -23,3 +22,14 @@ lto = \"off\"\n debug = true\n incremental = true\n lto = \"off\"\n+\n+# Mandatory for correctly compiling compiler-builtins\n+[profile.dev.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000\n+\n+[profile.release.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000"}, {"sha": "8bb00352d3fe3a83df4f9e4bd7936c7296199493", "filename": "build_system/prepare.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "patch": "@@ -81,14 +81,6 @@ fn prepare_sysroot() {\n     init_git_repo(&sysroot_src);\n \n     apply_patches(\"sysroot\", &sysroot_src);\n-\n-    clone_repo_shallow_github(\n-        \"build_sysroot/compiler-builtins\",\n-        \"rust-lang\",\n-        \"compiler-builtins\",\n-        \"0.1.70\",\n-    );\n-    apply_patches(\"compiler-builtins\", Path::new(\"build_sysroot/compiler-builtins\"));\n }\n \n #[allow(dead_code)]"}, {"sha": "460e42d1d8cc3bb1eb5fe70b029f14d9fe8437c1", "filename": "patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/31329f98412b70f034e41420dba28cb8d14ec4a9/patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/31329f98412b70f034e41420dba28cb8d14ec4a9/patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch?ref=31329f98412b70f034e41420dba28cb8d14ec4a9", "patch": "@@ -1,48 +0,0 @@\n-From 1d574bf5e32d51641dcacaf8ef777e95b44f6f2a Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 18 Feb 2021 18:30:55 +0100\n-Subject: [PATCH] Disable 128bit atomic operations\n-\n-Cranelift doesn't support them yet\n----\n- src/mem/mod.rs | 12 ------------\n- 1 file changed, 12 deletions(-)\n-\n-diff --git a/src/mem/mod.rs b/src/mem/mod.rs\n-index 107762c..2d1ae10 100644\n---- a/src/mem/mod.rs\n-+++ b/src/mem/mod.rs\n-@@ -137,10 +137,6 @@ intrinsics! {\n-     pub unsafe extern \"C\" fn __llvm_memcpy_element_unordered_atomic_8(dest: *mut u64, src: *const u64, bytes: usize) -> () {\n-         memcpy_element_unordered_atomic(dest, src, bytes);\n-     }\n--    #[cfg(target_has_atomic_load_store = \"128\")]\n--    pub unsafe extern \"C\" fn __llvm_memcpy_element_unordered_atomic_16(dest: *mut u128, src: *const u128, bytes: usize) -> () {\n--        memcpy_element_unordered_atomic(dest, src, bytes);\n--    }\n- \n-     #[cfg(target_has_atomic_load_store = \"8\")]\n-     pub unsafe extern \"C\" fn __llvm_memmove_element_unordered_atomic_1(dest: *mut u8, src: *const u8, bytes: usize) -> () {\n-@@ -158,10 +154,6 @@ intrinsics! {\n-     pub unsafe extern \"C\" fn __llvm_memmove_element_unordered_atomic_8(dest: *mut u64, src: *const u64, bytes: usize) -> () {\n-         memmove_element_unordered_atomic(dest, src, bytes);\n-     }\n--    #[cfg(target_has_atomic_load_store = \"128\")]\n--    pub unsafe extern \"C\" fn __llvm_memmove_element_unordered_atomic_16(dest: *mut u128, src: *const u128, bytes: usize) -> () {\n--        memmove_element_unordered_atomic(dest, src, bytes);\n--    }\n- \n-     #[cfg(target_has_atomic_load_store = \"8\")]\n-     pub unsafe extern \"C\" fn __llvm_memset_element_unordered_atomic_1(s: *mut u8, c: u8, bytes: usize) -> () {\n-@@ -179,8 +171,4 @@ intrinsics! {\n-     pub unsafe extern \"C\" fn __llvm_memset_element_unordered_atomic_8(s: *mut u64, c: u8, bytes: usize) -> () {\n-         memset_element_unordered_atomic(s, c, bytes);\n-     }\n--    #[cfg(target_has_atomic_load_store = \"128\")]\n--    pub unsafe extern \"C\" fn __llvm_memset_element_unordered_atomic_16(s: *mut u128, c: u8, bytes: usize) -> () {\n--        memset_element_unordered_atomic(s, c, bytes);\n--    }\n- }\n--- \n-2.26.2.7.g19db9cfb68\n-"}, {"sha": "85c0109c6f61eb6932889a6cd667e0c31cd4f352", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "patch": "@@ -12,18 +12,6 @@ git checkout -- .\n git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n \n git apply - <<EOF\n-diff --git a/Cargo.toml b/Cargo.toml\n-index 5bd1147cad5..10d68a2ff14 100644\n---- a/Cargo.toml\n-+++ b/Cargo.toml\n-@@ -111,5 +111,7 @@ rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n- rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }\n- rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n-\n-+compiler_builtins = { path = \"../build_sysroot/compiler-builtins\" }\n-+\n- [patch.\"https://github.com/rust-lang/rust-clippy\"]\n- clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n diff --git a/library/alloc/Cargo.toml b/library/alloc/Cargo.toml\n index d95b5b7f17f..00b6f0e3635 100644\n --- a/library/alloc/Cargo.toml"}, {"sha": "310d27c6decf6c87e66bd21a5148912eb0c9f070", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "patch": "@@ -749,6 +749,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         _ if intrinsic.as_str().starts_with(\"atomic_load\"), (v ptr) {\n             let ty = substs.type_at(0);\n             match ty.kind() {\n+                ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n+                    // FIXME implement 128bit atomics\n+                    if fx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n+                        // special case for compiler-builtins to avoid having to patch it\n+                        crate::trap::trap_unimplemented(fx, \"128bit atomics not yet supported\");\n+                        let ret_block = fx.get_block(destination.unwrap().1);\n+                        fx.bcx.ins().jump(ret_block, &[]);\n+                        return;\n+                    } else {\n+                        fx.tcx.sess.span_fatal(span, \"128bit atomics not yet supported\");\n+                    }\n+                }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n                     report_atomic_type_validation_error(fx, intrinsic, span, ty);\n@@ -765,6 +777,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         _ if intrinsic.as_str().starts_with(\"atomic_store\"), (v ptr, c val) {\n             let ty = substs.type_at(0);\n             match ty.kind() {\n+                ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n+                    // FIXME implement 128bit atomics\n+                    if fx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n+                        // special case for compiler-builtins to avoid having to patch it\n+                        crate::trap::trap_unimplemented(fx, \"128bit atomics not yet supported\");\n+                        let ret_block = fx.get_block(destination.unwrap().1);\n+                        fx.bcx.ins().jump(ret_block, &[]);\n+                        return;\n+                    } else {\n+                        fx.tcx.sess.span_fatal(span, \"128bit atomics not yet supported\");\n+                    }\n+                }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n                     report_atomic_type_validation_error(fx, intrinsic, span, ty);\n@@ -1115,10 +1139,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n     }\n \n-    if let Some((_, dest)) = destination {\n-        let ret_block = fx.get_block(dest);\n-        fx.bcx.ins().jump(ret_block, &[]);\n-    } else {\n-        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n-    }\n+    let ret_block = fx.get_block(destination.unwrap().1);\n+    fx.bcx.ins().jump(ret_block, &[]);\n }"}]}