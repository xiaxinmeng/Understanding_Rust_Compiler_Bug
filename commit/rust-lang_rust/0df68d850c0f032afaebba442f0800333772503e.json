{"sha": "0df68d850c0f032afaebba442f0800333772503e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjY4ZDg1MGMwZjAzMmFmYWViYmE0NDJmMDgwMDMzMzc3MjUwM2U=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-07-10T14:41:39Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-07-10T14:41:39Z"}, "message": "Remove rustdoc plugins\n\nSee CVE-2018-1000622.", "tree": {"sha": "13dfc0bf7ffbd47726f9ecc92758cd6057b47028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13dfc0bf7ffbd47726f9ecc92758cd6057b47028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df68d850c0f032afaebba442f0800333772503e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df68d850c0f032afaebba442f0800333772503e", "html_url": "https://github.com/rust-lang/rust/commit/0df68d850c0f032afaebba442f0800333772503e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df68d850c0f032afaebba442f0800333772503e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94eb1760551096363ec04e42367b6b195592dbd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/94eb1760551096363ec04e42367b6b195592dbd8", "html_url": "https://github.com/rust-lang/rust/commit/94eb1760551096363ec04e42367b6b195592dbd8"}], "stats": {"total": 70, "additions": 12, "deletions": 58}, "files": [{"sha": "817b12158d6b6bee761a75eb8db33a06ab73fc3a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0df68d850c0f032afaebba442f0800333772503e/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df68d850c0f032afaebba442f0800333772503e/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=0df68d850c0f032afaebba442f0800333772503e", "patch": "@@ -164,7 +164,7 @@ pub fn opts() -> Vec<RustcOptGroup> {\n             o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME=PATH\")\n         }),\n         stable(\"plugin-path\", |o| {\n-            o.optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\")\n+            o.optmulti(\"\", \"plugin-path\", \"removed\", \"DIR\")\n         }),\n         stable(\"C\", |o| {\n             o.optmulti(\"C\", \"codegen\", \"pass a codegen option to rustc\", \"OPT[=VALUE]\")\n@@ -177,7 +177,7 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                        \"PASSES\")\n         }),\n         stable(\"plugins\", |o| {\n-            o.optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n+            o.optmulti(\"\", \"plugins\", \"removed\",\n                        \"PLUGINS\")\n         }),\n         stable(\"no-default\", |o| {\n@@ -715,9 +715,16 @@ where R: 'static + Send,\n             }\n         }\n \n+        if !plugins.is_empty() {\n+            eprintln!(\"WARNING: --plugins no longer functions; see CVE-2018-1000622\");\n+        }\n+\n+        if !plugin_path.is_none() {\n+            eprintln!(\"WARNING: --plugin-path no longer functions; see CVE-2018-1000622\");\n+        }\n+\n         // Load all plugins/passes into a PluginManager\n-        let path = plugin_path.unwrap_or(\"/tmp/rustdoc/plugins\".to_string());\n-        let mut pm = plugins::PluginManager::new(PathBuf::from(path));\n+        let mut pm = plugins::PluginManager::new();\n         for pass in &passes {\n             let plugin = match passes::PASSES.iter()\n                                              .position(|&(p, ..)| {\n@@ -731,10 +738,6 @@ where R: 'static + Send,\n             };\n             pm.add_plugin(plugin);\n         }\n-        info!(\"loading plugins...\");\n-        for pname in plugins {\n-            pm.load_plugin(pname);\n-        }\n \n         // Run everything!\n         info!(\"Executing passes/plugins\");\n@@ -750,8 +753,6 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &errors::Handler)\n     let deprecated_flags = [\n        \"input-format\",\n        \"output-format\",\n-       \"plugin-path\",\n-       \"plugins\",\n        \"no-defaults\",\n        \"passes\",\n     ];"}, {"sha": "261ff728aef605aabe41a2a10cbc50134c1271f5", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0df68d850c0f032afaebba442f0800333772503e/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df68d850c0f032afaebba442f0800333772503e/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=0df68d850c0f032afaebba442f0800333772503e", "patch": "@@ -12,47 +12,20 @@\n \n use clean;\n \n-use std::mem;\n-use std::string::String;\n-use std::path::PathBuf;\n-\n-use rustc_metadata::dynamic_lib as dl;\n-\n pub type PluginResult = clean::Crate;\n pub type PluginCallback = fn (clean::Crate) -> PluginResult;\n \n /// Manages loading and running of plugins\n pub struct PluginManager {\n-    dylibs: Vec<dl::DynamicLibrary> ,\n     callbacks: Vec<PluginCallback> ,\n-    /// The directory plugins will be loaded from\n-    pub prefix: PathBuf,\n }\n \n impl PluginManager {\n     /// Create a new plugin manager\n-    pub fn new(prefix: PathBuf) -> PluginManager {\n+    pub fn new() -> PluginManager {\n         PluginManager {\n-            dylibs: Vec::new(),\n             callbacks: Vec::new(),\n-            prefix,\n-        }\n-    }\n-\n-    /// Load a plugin with the given name.\n-    ///\n-    /// Turns `name` into the proper dynamic library filename for the given\n-    /// platform. On windows, it turns into name.dll, on macOS, name.dylib, and\n-    /// elsewhere, libname.so.\n-    pub fn load_plugin(&mut self, name: String) {\n-        let x = self.prefix.join(libname(name));\n-        let lib_result = dl::DynamicLibrary::open(Some(&x));\n-        let lib = lib_result.unwrap();\n-        unsafe {\n-            let plugin = lib.symbol(\"rustdoc_plugin_entrypoint\").unwrap();\n-            self.callbacks.push(mem::transmute::<*mut u8,PluginCallback>(plugin));\n         }\n-        self.dylibs.push(lib);\n     }\n \n     /// Load a normal Rust function as a plugin.\n@@ -70,23 +43,3 @@ impl PluginManager {\n         krate\n     }\n }\n-\n-#[cfg(target_os = \"windows\")]\n-fn libname(mut n: String) -> String {\n-    n.push_str(\".dll\");\n-    n\n-}\n-\n-#[cfg(target_os=\"macos\")]\n-fn libname(mut n: String) -> String {\n-    n.push_str(\".dylib\");\n-    n\n-}\n-\n-#[cfg(all(not(target_os=\"windows\"), not(target_os=\"macos\")))]\n-fn libname(n: String) -> String {\n-    let mut i = String::from(\"lib\");\n-    i.push_str(&n);\n-    i.push_str(\".so\");\n-    i\n-}"}]}