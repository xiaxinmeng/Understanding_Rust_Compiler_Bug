{"sha": "efcc447ebfafde91eba51ae04cdb8b0b776f8ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2M0NDdlYmZhZmRlOTFlYmE1MWFlMDRjZGI4YjBiNzc2ZjhhYzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-17T22:44:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-18T11:47:21Z"}, "message": "Add simple test for pattern API", "tree": {"sha": "bdd82ac6edab60f09865d0678704198ccdd7af4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd82ac6edab60f09865d0678704198ccdd7af4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8", "html_url": "https://github.com/rust-lang/rust/commit/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c07a37ff352607523a3c7a4e8bc3809949cb4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c07a37ff352607523a3c7a4e8bc3809949cb4c", "html_url": "https://github.com/rust-lang/rust/commit/75c07a37ff352607523a3c7a4e8bc3809949cb4c"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "c4b85b829812c4cb792c5fdd47348b16149f65f7", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=efcc447ebfafde91eba51ae04cdb8b0b776f8ac8", "patch": "@@ -28,6 +28,7 @@\n #![feature(iter_rfind)]\n #![feature(iter_rfold)]\n #![feature(nonzero)]\n+#![feature(pattern)]\n #![feature(raw)]\n #![feature(refcell_replace_swap)]\n #![feature(sip_hash_13)]\n@@ -61,6 +62,7 @@ mod nonzero;\n mod num;\n mod ops;\n mod option;\n+mod pattern;\n mod ptr;\n mod result;\n mod slice;"}, {"sha": "e12f0bc9e5f6dc6693cd9adf33b77f6366fdcde8", "filename": "src/libcore/tests/pattern.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8/src%2Flibcore%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efcc447ebfafde91eba51ae04cdb8b0b776f8ac8/src%2Flibcore%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fpattern.rs?ref=efcc447ebfafde91eba51ae04cdb8b0b776f8ac8", "patch": "@@ -0,0 +1,76 @@\n+use std::str::pattern::*;\n+\n+// This macro makes it easier to write\n+// tests that do a series of iterations\n+macro_rules! search_asserts {\n+    ($haystack:expr, $needle:expr, $testname:expr, [$($func:ident),*], $result:expr) => {\n+        let mut searcher = $needle.into_searcher($haystack);\n+        let arr = [$( Step::from(searcher.$func()) ),+];\n+        assert_eq!(&arr[..], &$result, $testname);\n+    }\n+}\n+\n+/// Combined enum for the results of next() and next_match()/next_reject()\n+#[derive(Debug, PartialEq, Eq)]\n+enum Step {\n+    // variant names purposely chosen to\n+    // be the same length for easy alignment\n+    Matches(usize, usize),\n+    Rejects(usize, usize),\n+    InRange(usize, usize),\n+    Done\n+}\n+\n+use Step::*;\n+\n+impl From<SearchStep> for Step {\n+    fn from(x: SearchStep) -> Self {\n+        match x {\n+            SearchStep::Match(a, b) => Matches(a, b),\n+            SearchStep::Reject(a, b) => Rejects(a, b),\n+            SearchStep::Done => Done\n+        }\n+    }\n+}\n+\n+impl From<Option<(usize, usize)>> for Step {\n+    fn from(x: Option<(usize, usize)>) -> Self {\n+        match x {\n+            Some((a, b)) => InRange(a, b),\n+            None => Done\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_simple_iteration() {\n+    search_asserts! (\"abcdeabcd\", 'a', \"forward iteration for ASCII string\",\n+        // a            b              c              d              e              a              b              c              d              EOF \n+        [next,          next,          next,          next,          next,          next,          next,          next,          next,          next],\n+        [Matches(0, 1), Rejects(1, 2), Rejects(2, 3), Rejects(3, 4), Rejects(4, 5), Matches(5, 6), Rejects(6, 7), Rejects(7, 8), Rejects(8, 9), Done]\n+    );\n+\n+    search_asserts! (\"abcdeabcd\", 'a', \"reverse iteration for ASCII string\",\n+        // d            c              b              a            e                d              c              b              a             EOF\n+        [next_back,     next_back,     next_back,     next_back,     next_back,     next_back,     next_back,     next_back,     next_back,     next_back],\n+        [Rejects(8, 9), Rejects(7, 8), Rejects(6, 7), Matches(5, 6), Rejects(4, 5), Rejects(3, 4), Rejects(2, 3), Rejects(1, 2), Matches(0, 1), Done]\n+    );\n+\n+    search_asserts! (\"\u6211\u7231\u6211\u7684\u732b\", '\u6211', \"forward iteration for Chinese string\",\n+        // \u6211           \u611b             \u6211             \u7684              \u8c93               EOF\n+        [next,          next,          next,          next,           next,            next],\n+        [Matches(0, 3), Rejects(3, 6), Matches(6, 9), Rejects(9, 12), Rejects(12, 15), Done]\n+    );\n+\n+    search_asserts! (\"\u6211\u7684\u732b\u8bf4meow\", 'm', \"forward iteration for mixed string\",\n+        // \u6211           \u7684             \u732b             \u8bf4              m                e                o                w                EOF\n+        [next,          next,          next,          next,           next,            next,            next,            next,            next],\n+        [Rejects(0, 3), Rejects(3, 6), Rejects(6, 9), Rejects(9, 12), Matches(12, 13), Rejects(13, 14), Rejects(14, 15), Rejects(15, 16), Done]\n+    );\n+\n+    search_asserts! (\"\u6211\u7684\u732b\u8bf4meow\", '\u732b', \"reverse iteration for mixed string\",\n+        // w             o                 e                m                \u8bf4              \u732b             \u7684             \u6211             EOF\n+        [next_back,       next_back,       next_back,       next_back,       next_back,      next_back,      next_back,    next_back,     next_back],\n+        [Rejects(15, 16), Rejects(14, 15), Rejects(13, 14), Rejects(12, 13), Rejects(9, 12), Matches(6, 9), Rejects(3, 6), Rejects(0, 3), Done]\n+    );\n+}"}]}