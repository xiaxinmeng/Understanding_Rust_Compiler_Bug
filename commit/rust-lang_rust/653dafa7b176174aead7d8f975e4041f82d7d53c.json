{"sha": "653dafa7b176174aead7d8f975e4041f82d7d53c", "node_id": "C_kwDOAAsO6NoAKDY1M2RhZmE3YjE3NjE3NGFlYWQ3ZDhmOTc1ZTQwNDFmODJkN2Q1M2M", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-19T20:25:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-19T20:26:44Z"}, "message": "Add some sysroot logging", "tree": {"sha": "bc0b4c804682b1f824f1f2afc415a027aae50c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0b4c804682b1f824f1f2afc415a027aae50c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653dafa7b176174aead7d8f975e4041f82d7d53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653dafa7b176174aead7d8f975e4041f82d7d53c", "html_url": "https://github.com/rust-lang/rust/commit/653dafa7b176174aead7d8f975e4041f82d7d53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653dafa7b176174aead7d8f975e4041f82d7d53c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3e616f82aecd4ba81ee632483f26169aca1aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d3e616f82aecd4ba81ee632483f26169aca1aa3", "html_url": "https://github.com/rust-lang/rust/commit/9d3e616f82aecd4ba81ee632483f26169aca1aa3"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "fa8d76f3f45297922192f0ce6f0cca467552a7ed", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/653dafa7b176174aead7d8f975e4041f82d7d53c/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dafa7b176174aead7d8f975e4041f82d7d53c/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=653dafa7b176174aead7d8f975e4041f82d7d53c", "patch": "@@ -64,14 +64,15 @@ impl Sysroot {\n         self.by_name(\"proc_macro\")\n     }\n \n-    pub fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + ExactSizeIterator + 'a {\n+    pub fn crates(&self) -> impl Iterator<Item = SysrootCrate> + ExactSizeIterator + '_ {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n }\n \n impl Sysroot {\n+    /// Attempts to discover the toolchain's sysroot from the given `dir`.\n     pub fn discover(dir: &AbsPath, extra_env: &FxHashMap<String, String>) -> Result<Sysroot> {\n-        tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n+        tracing::debug!(\"discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir, extra_env)?;\n         let sysroot_src_dir =\n             discover_sysroot_src_dir_or_add_component(&sysroot_dir, dir, extra_env)?;\n@@ -83,11 +84,10 @@ impl Sysroot {\n         cargo_toml: &ManifestPath,\n         extra_env: &FxHashMap<String, String>,\n     ) -> Option<ManifestPath> {\n-        tracing::debug!(\"Discovering rustc source for {}\", cargo_toml.display());\n+        tracing::debug!(\"discovering rustc source for {}\", cargo_toml.display());\n         let current_dir = cargo_toml.parent();\n-        discover_sysroot_dir(current_dir, extra_env)\n-            .ok()\n-            .and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n+        let sysroot_dir = discover_sysroot_dir(current_dir, extra_env).ok()?;\n+        get_rustc_src(&sysroot_dir)\n     }\n \n     pub fn with_sysroot_dir(sysroot_dir: AbsPathBuf) -> Result<Sysroot> {\n@@ -200,6 +200,7 @@ fn discover_sysroot_src_dir_or_add_component(\n             let mut rustup = Command::new(toolchain::rustup());\n             rustup.envs(extra_env);\n             rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n+            tracing::info!(\"adding rust-src component by {:?}\", rustup);\n             utf8_stdout(rustup).ok()?;\n             get_rust_src(sysroot_path)\n         })\n@@ -218,7 +219,7 @@ try installing the Rust source the same way you installed rustc\",\n fn get_rustc_src(sysroot_path: &AbsPath) -> Option<ManifestPath> {\n     let rustc_src = sysroot_path.join(\"lib/rustlib/rustc-src/rust/compiler/rustc/Cargo.toml\");\n     let rustc_src = ManifestPath::try_from(rustc_src).ok()?;\n-    tracing::debug!(\"Checking for rustc source code: {}\", rustc_src.display());\n+    tracing::debug!(\"checking for rustc source code: {}\", rustc_src.display());\n     if fs::metadata(&rustc_src).is_ok() {\n         Some(rustc_src)\n     } else {\n@@ -228,7 +229,7 @@ fn get_rustc_src(sysroot_path: &AbsPath) -> Option<ManifestPath> {\n \n fn get_rust_src(sysroot_path: &AbsPath) -> Option<AbsPathBuf> {\n     let rust_src = sysroot_path.join(\"lib/rustlib/src/rust/library\");\n-    tracing::debug!(\"Checking sysroot: {}\", rust_src.display());\n+    tracing::debug!(\"checking sysroot library: {}\", rust_src.display());\n     if fs::metadata(&rust_src).is_ok() {\n         Some(rust_src)\n     } else {"}, {"sha": "9b0a2617036bf99b00345845a9d597868d6b7444", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/653dafa7b176174aead7d8f975e4041f82d7d53c/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653dafa7b176174aead7d8f975e4041f82d7d53c/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=653dafa7b176174aead7d8f975e4041f82d7d53c", "patch": "@@ -209,6 +209,9 @@ impl ProjectWorkspace {\n                     ),\n                     None => None,\n                 };\n+                if let Some(sysroot) = &sysroot {\n+                    tracing::info!(src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n+                }\n \n                 let rustc_dir = match &config.rustc_source {\n                     Some(RustcSource::Path(path)) => ManifestPath::try_from(path.clone()).ok(),\n@@ -217,6 +220,9 @@ impl ProjectWorkspace {\n                     }\n                     None => None,\n                 };\n+                if let Some(rustc_dir) = &rustc_dir {\n+                    tracing::info!(rustc_dir = %rustc_dir.display(), \"Using rustc source\");\n+                }\n \n                 let rustc = match rustc_dir {\n                     Some(rustc_dir) => Some({\n@@ -277,6 +283,9 @@ impl ProjectWorkspace {\n             }\n             (None, None) => None,\n         };\n+        if let Some(sysroot) = &sysroot {\n+            tracing::info!(src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n+        }\n \n         let rustc_cfg = rustc_cfg::get(None, target, extra_env);\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })"}]}