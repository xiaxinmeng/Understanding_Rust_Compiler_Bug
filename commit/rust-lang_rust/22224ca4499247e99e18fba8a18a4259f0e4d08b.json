{"sha": "22224ca4499247e99e18fba8a18a4259f0e4d08b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjI0Y2E0NDk5MjQ3ZTk5ZTE4ZmJhOGExOGE0MjU5ZjBlNGQwOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-17T03:42:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-17T03:42:54Z"}, "message": "Auto merge of #21932 - Jormundir:std-os-errno-type, r=alexcrichton\n\nChanges std::os::errno to return i32, the return type used by the function being delegated to.\r\n\r\nThis is my first contribution, so feel free to give me advice. I'll be happy to correct things.", "tree": {"sha": "a2a083c91ddb8586682039fc48d384c6fa963b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a083c91ddb8586682039fc48d384c6fa963b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22224ca4499247e99e18fba8a18a4259f0e4d08b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22224ca4499247e99e18fba8a18a4259f0e4d08b", "html_url": "https://github.com/rust-lang/rust/commit/22224ca4499247e99e18fba8a18a4259f0e4d08b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22224ca4499247e99e18fba8a18a4259f0e4d08b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bce5290ff55b9a2eddd83d31b0778180904d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bce5290ff55b9a2eddd83d31b0778180904d7f", "html_url": "https://github.com/rust-lang/rust/commit/81bce5290ff55b9a2eddd83d31b0778180904d7f"}, {"sha": "64d33b1e986116f7bec03b8f2c91fa925b957fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d33b1e986116f7bec03b8f2c91fa925b957fa3", "html_url": "https://github.com/rust-lang/rust/commit/64d33b1e986116f7bec03b8f2c91fa925b957fa3"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "3673f590c0a9dcd2c192a83b7071d51c1d977862", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=22224ca4499247e99e18fba8a18a4259f0e4d08b", "patch": "@@ -338,7 +338,7 @@ impl IoError {\n     /// If `detail` is `true`, the `detail` field of the `IoError`\n     /// struct is filled with an allocated string describing the error\n     /// in more detail, retrieved from the operating system.\n-    pub fn from_errno(errno: uint, detail: bool) -> IoError {\n+    pub fn from_errno(errno: i32, detail: bool) -> IoError {\n         let mut err = sys::decode_error(errno as i32);\n         if detail && err.kind == OtherIoError {\n             err.detail = Some(os::error_string(errno).chars()\n@@ -354,7 +354,7 @@ impl IoError {\n     /// operating system) between the call(s) for which errors are\n     /// being checked and the call of this function.\n     pub fn last_error() -> IoError {\n-        IoError::from_errno(os::errno() as uint, true)\n+        IoError::from_errno(os::errno(), true)\n     }\n }\n "}, {"sha": "3851e7997133d518777c540b88deda3d5a8ea4be", "filename": "src/libstd/os.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=22224ca4499247e99e18fba8a18a4259f0e4d08b", "patch": "@@ -514,8 +514,8 @@ pub fn change_dir(p: &Path) -> IoResult<()> {\n }\n \n /// Returns the platform-specific value of errno\n-pub fn errno() -> uint {\n-    sys::os::errno() as uint\n+pub fn errno() -> i32 {\n+    sys::os::errno() as i32\n }\n \n /// Return the string corresponding to an `errno()` value of `errnum`.\n@@ -525,15 +525,15 @@ pub fn errno() -> uint {\n /// use std::os;\n ///\n /// // Same as println!(\"{}\", last_os_error());\n-/// println!(\"{}\", os::error_string(os::errno() as uint));\n+/// println!(\"{}\", os::error_string(os::errno() as i32));\n /// ```\n-pub fn error_string(errnum: uint) -> String {\n-    return sys::os::error_string(errnum as i32);\n+pub fn error_string(errnum: i32) -> String {\n+    return sys::os::error_string(errnum);\n }\n \n /// Get a string representing the platform-dependent last error\n pub fn last_os_error() -> String {\n-    error_string(errno() as uint)\n+    error_string(errno())\n }\n \n /// Sets the process exit code\n@@ -845,13 +845,13 @@ pub enum MapError {\n     ErrAlreadyExists,\n     /// Unrecognized error from `VirtualAlloc`. The inner value is the return\n     /// value of GetLastError.\n-    ErrVirtualAlloc(uint),\n+    ErrVirtualAlloc(i32),\n     /// Unrecognized error from `CreateFileMapping`. The inner value is the\n     /// return value of `GetLastError`.\n-    ErrCreateFileMappingW(uint),\n+    ErrCreateFileMappingW(i32),\n     /// Unrecognized error from `MapViewOfFile`. The inner value is the return\n     /// value of `GetLastError`.\n-    ErrMapViewOfFile(uint)\n+    ErrMapViewOfFile(i32)\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "32e45009887a8e67195fad8e19dd71a77ab80a52", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=22224ca4499247e99e18fba8a18a4259f0e4d08b", "patch": "@@ -394,7 +394,7 @@ impl Process {\n                 match unsafe { c::select(max, &mut set, ptr::null_mut(),\n                                          ptr::null_mut(), p) } {\n                     // interrupted, retry\n-                    -1 if os::errno() == libc::EINTR as uint => continue,\n+                    -1 if os::errno() == libc::EINTR as i32 => continue,\n \n                     // We read something, break out and process\n                     1 | 2 => {}"}, {"sha": "4cd98f4442b0fcb8bab3506f4c7ff0388adced53", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22224ca4499247e99e18fba8a18a4259f0e4d08b/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=22224ca4499247e99e18fba8a18a4259f0e4d08b", "patch": "@@ -198,7 +198,7 @@ fn helper(input: libc::c_int, messages: Receiver<Req>, _: ()) {\n                 assert_eq!(fd.read(&mut buf).ok().unwrap(), 1);\n             }\n \n-            -1 if os::errno() == libc::EINTR as uint => {}\n+            -1 if os::errno() == libc::EINTR as i32 => {}\n             n => panic!(\"helper thread failed in select() with error: {} ({})\",\n                        n, os::last_os_error())\n         }"}]}