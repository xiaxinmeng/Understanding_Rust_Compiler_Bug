{"sha": "b853252bcdb2ded2b049d833c51a993fe0ed40f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTMyNTJiY2RiMmRlZDJiMDQ5ZDgzM2M1MWE5OTNmZTBlZDQwZjg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-20T10:04:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:32Z"}, "message": "Rebase fallout", "tree": {"sha": "44e122e2186d0c84d1dc7ade0bfd4698321ed59f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e122e2186d0c84d1dc7ade0bfd4698321ed59f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b853252bcdb2ded2b049d833c51a993fe0ed40f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b853252bcdb2ded2b049d833c51a993fe0ed40f8", "html_url": "https://github.com/rust-lang/rust/commit/b853252bcdb2ded2b049d833c51a993fe0ed40f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b853252bcdb2ded2b049d833c51a993fe0ed40f8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360f9888bc143f6d7b2c09f723e255121bf49f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/360f9888bc143f6d7b2c09f723e255121bf49f8d", "html_url": "https://github.com/rust-lang/rust/commit/360f9888bc143f6d7b2c09f723e255121bf49f8d"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "c612d6ad1bb24fe4dfc12df1bd932c995472bed9", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=b853252bcdb2ded2b049d833c51a993fe0ed40f8", "patch": "@@ -57,23 +57,14 @@ pub struct Allocation<Tag=(),Extra=()> {\n impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n     /// Check if the pointer is \"in-bounds\". Notice that a pointer pointing at the end\n     /// of an allocation (i.e., at the first *inaccessible* location) *is* considered\n-    /// in-bounds!  This follows C's/LLVM's rules.  `check` indicates whether we\n-    /// additionally require the pointer to be pointing to a *live* (still allocated)\n-    /// allocation.\n+    /// in-bounds!  This follows C's/LLVM's rules.\n     /// If you want to check bounds before doing a memory access, better use `check_bounds`.\n     pub fn check_bounds_ptr(\n         &self,\n         ptr: Pointer<Tag>,\n     ) -> EvalResult<'tcx> {\n         let allocation_size = self.bytes.len() as u64;\n-        if ptr.offset.bytes() > allocation_size {\n-            return err!(PointerOutOfBounds {\n-                ptr: ptr.erase_tag(),\n-                check: InboundsCheck::Live,\n-                allocation_size: Size::from_bytes(allocation_size),\n-            });\n-        }\n-        Ok(())\n+        ptr.check_in_alloc(Size::from_bytes(allocation_size), InboundsCheck::Live)\n     }\n \n     /// Check if the memory range beginning at `ptr` and of size `Size` is \"in-bounds\"."}, {"sha": "a046825f088bb327e92f31d4fbd2daf822aa7fa0", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=b853252bcdb2ded2b049d833c51a993fe0ed40f8", "patch": "@@ -2,7 +2,7 @@ use mir;\n use ty::layout::{self, HasDataLayout, Size};\n \n use super::{\n-    AllocId, EvalResult,\n+    AllocId, EvalResult, InboundsCheck,\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -148,4 +148,21 @@ impl<'tcx, Tag> Pointer<Tag> {\n     pub fn erase_tag(self) -> Pointer {\n         Pointer { alloc_id: self.alloc_id, offset: self.offset, tag: () }\n     }\n+\n+    #[inline(always)]\n+    pub fn check_in_alloc(\n+        self,\n+        allocation_size: Size,\n+        check: InboundsCheck,\n+    ) -> EvalResult<'tcx, ()> {\n+        if self.offset > allocation_size {\n+            err!(PointerOutOfBounds {\n+                ptr: self.erase_tag(),\n+                check,\n+                allocation_size,\n+            })\n+        } else {\n+            Ok(())\n+        }\n+    }\n }"}, {"sha": "c673b57a66f5fbd7983a71ca4ed7b7de66878ee4", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b853252bcdb2ded2b049d833c51a993fe0ed40f8", "patch": "@@ -28,9 +28,9 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use syntax::ast::Mutability;\n \n use super::{\n-    Pointer, AllocId, Allocation, GlobalId, AllocationExtra, InboundsCheck,\n+    Pointer, AllocId, Allocation, GlobalId, AllocationExtra,\n     EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n-    Machine, AllocMap, MayLeak, ErrorHandled, AllocationExtra,\n+    Machine, AllocMap, MayLeak, ErrorHandled, InboundsCheck,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -251,9 +251,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Scalar::Ptr(ptr) => {\n                 // check this is not NULL -- which we can ensure only if this is in-bounds\n                 // of some (potentially dead) allocation.\n-                self.check_bounds_ptr(ptr, InboundsCheck::MaybeDead)?;\n-                // data required for alignment check\n-                let (_, align) = self.get_size_and_align(ptr.alloc_id);\n+                let align = self.check_bounds_ptr_maybe_dead(ptr)?;\n                 (ptr.offset.bytes(), align)\n             }\n             Scalar::Bits { bits, size } => {\n@@ -284,6 +282,23 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             })\n         }\n     }\n+\n+    /// Check if the pointer is \"in-bounds\". Notice that a pointer pointing at the end\n+    /// of an allocation (i.e., at the first *inaccessible* location) *is* considered\n+    /// in-bounds!  This follows C's/LLVM's rules.\n+    /// This function also works for deallocated allocations.\n+    /// Use `.get(ptr.alloc_id)?.check_bounds_ptr(ptr)` if you want to force the allocation\n+    /// to still be live.\n+    /// If you want to check bounds before doing a memory access, better first obtain\n+    /// an `Allocation` and call `check_bounds`.\n+    pub fn check_bounds_ptr_maybe_dead(\n+        &self,\n+        ptr: Pointer<M::PointerTag>,\n+    ) -> EvalResult<'tcx, Align> {\n+        let (allocation_size, align) = self.get_size_and_align(ptr.alloc_id);\n+        ptr.check_in_alloc(allocation_size, InboundsCheck::MaybeDead)?;\n+        Ok(align)\n+    }\n }\n \n /// Allocation accessors"}, {"sha": "539bc6d965fd6bbf1b6196f03a217eadd78ab597", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b853252bcdb2ded2b049d833c51a993fe0ed40f8", "patch": "@@ -19,7 +19,7 @@ use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerEx\n use rustc::mir::interpret::{\n     GlobalId, AllocId,\n     ConstValue, Pointer, Scalar,\n-    EvalResult, EvalErrorKind, InboundsCheck,\n+    EvalResult, EvalErrorKind,\n };\n use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n pub use rustc::mir::interpret::ScalarMaybeUndef;\n@@ -647,7 +647,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr)) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n-                            self.memory.check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok();\n+                            self.memory.check_bounds_ptr_maybe_dead(ptr).is_ok();\n                         if !ptr_valid {\n                             return err!(InvalidDiscriminant(raw_discr.erase_tag()));\n                         }"}, {"sha": "ed4cb65ea74b17136279b46742ae1b5053ff7b26", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b853252bcdb2ded2b049d833c51a993fe0ed40f8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b853252bcdb2ded2b049d833c51a993fe0ed40f8", "patch": "@@ -17,7 +17,7 @@ use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocType, EvalResult, EvalErrorKind, InboundsCheck,\n+    Scalar, AllocType, EvalResult, EvalErrorKind,\n };\n \n use super::{"}, {"sha": "32e93ed7762e5aa1a721636096848fc3c7bc7218", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=b853252bcdb2ded2b049d833c51a993fe0ed40f8", "patch": "@@ -1 +1 @@\n-Subproject commit dd7f545a69e4b720407e458bf4ade0b207bbf9ee\n+Subproject commit 32e93ed7762e5aa1a721636096848fc3c7bc7218"}]}