{"sha": "737e115646ec79dac05d61232d89e59d8da751a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczN2UxMTU2NDZlYzc5ZGFjMDVkNjEyMzJkODllNTlkOGRhNzUxYTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-10T14:29:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-10T21:17:25Z"}, "message": "mode: reset mode on entry to fn body.\n\nThis is an interim fix to address the \"Beware!\" unsoundness.  I have a\nmore comprehensive rewrite of mode.rs in the pipeline.\n\nr=pcwalton", "tree": {"sha": "174f3520372763ff341d9ea9a55a61874250fd04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/174f3520372763ff341d9ea9a55a61874250fd04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/737e115646ec79dac05d61232d89e59d8da751a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/737e115646ec79dac05d61232d89e59d8da751a9", "html_url": "https://github.com/rust-lang/rust/commit/737e115646ec79dac05d61232d89e59d8da751a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/737e115646ec79dac05d61232d89e59d8da751a9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaa256509ede9d1277e7b498fdea4548e1851647", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa256509ede9d1277e7b498fdea4548e1851647", "html_url": "https://github.com/rust-lang/rust/commit/eaa256509ede9d1277e7b498fdea4548e1851647"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "c4001717ca17c9ced82efd830f5b04575704a96b", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -37,7 +37,7 @@ impl<T, U> Condition<T, U> {\n \n     fn raise(t: T) -> U {\n         let msg = fmt!(\"Unhandled condition: %s: %?\", self.name, t);\n-        self.raise_default(t, || fail msg)\n+        self.raise_default(t, || fail copy msg)\n     }\n \n     fn raise_default(t: T, default: &fn() -> U) -> U {"}, {"sha": "b4366428a90a4b85ac5c2278a4a3e75e6dec052c", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -188,7 +188,7 @@ fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n     -> {crate: @ast::crate, tcx: Option<ty::ctxt>} {\n     let time_passes = sess.time_passes();\n     let mut crate = time(time_passes, ~\"parsing\",\n-                         ||parse_input(sess, cfg, input) );\n+                         || parse_input(sess, copy cfg, input) );\n     if upto == cu_parse { return {crate: crate, tcx: None}; }\n \n     sess.building_library = session::building_library(\n@@ -201,7 +201,7 @@ fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n         front::test::modify_for_testing(sess, crate));\n \n     crate = time(time_passes, ~\"expansion\", ||\n-        syntax::ext::expand::expand_crate(sess.parse_sess, cfg,\n+        syntax::ext::expand::expand_crate(sess.parse_sess, copy cfg,\n                                           crate));\n \n     if upto == cu_expand { return {crate: crate, tcx: None}; }"}, {"sha": "608f2b5c233235b3f24474964219d16d3243c0e6", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -86,7 +86,8 @@ fn warn_if_multiple_versions(e: env, diag: span_handler,\n             /*bad*/copy *crate_cache.last().metas);\n         let (matches, non_matches) =\n             partition(crate_cache.map_to_vec(|&entry| {\n-                let othername = loader::crate_name_from_metas(*entry.metas);\n+                let othername = loader::crate_name_from_metas(\n+                    copy *entry.metas);\n                 if name == othername {\n                     Left(entry)\n                 } else {"}, {"sha": "0a063d115e1ac21831fd627017189e75c587ad23", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -275,7 +275,7 @@ fn is_useful(cx: @MatchCheckCtxt, +m: matrix, +v: ~[@pat]) -> useful {\n             }\n           }\n           Some(ref ctor) => {\n-            match is_useful(cx, vec::filter_map(m, |r| default(cx, *r)),\n+            match is_useful(cx, vec::filter_map(m, |r| default(cx, copy *r)),\n                             vec::tail(v)) {\n               useful_ => useful(left_ty, (/*bad*/copy *ctor)),\n               ref u => (/*bad*/copy *u)\n@@ -292,7 +292,8 @@ fn is_useful(cx: @MatchCheckCtxt, +m: matrix, +v: ~[@pat]) -> useful {\n \n fn is_useful_specialized(cx: @MatchCheckCtxt, m: matrix, +v: ~[@pat],\n                          +ctor: ctor, arity: uint, lty: ty::t) -> useful {\n-    let ms = vec::filter_map(m, |r| specialize(cx, *r, ctor, arity, lty));\n+    let ms = vec::filter_map(m, |r| specialize(cx, copy *r,\n+                                               ctor, arity, lty));\n     let could_be_useful = is_useful(\n         cx, ms, specialize(cx, v, ctor, arity, lty).get());\n     match could_be_useful {"}, {"sha": "7c2b518dbe9ed295d90b10bc1fc13bfb585f627e", "filename": "src/librustc/middle/mode.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Fmode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Fmode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmode.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -23,15 +23,29 @@ use syntax::ast::{expr_binary, expr_call, expr_copy, expr_field, expr_index};\n use syntax::ast::{expr_match, expr_method_call, expr_paren, expr_path};\n use syntax::ast::{expr_swap, expr_unary, neg, node_id, not, pat, pat_ident};\n use syntax::ast::{sty_uniq, sty_value, uniq};\n+use syntax::ast::{fn_decl, blk};\n use syntax::visit;\n-use syntax::visit::vt;\n+use syntax::visit::{fn_kind, vt};\n+use syntax::print::pprust;\n+use syntax::codemap::span;\n \n struct VisitContext {\n     tcx: ctxt,\n     method_map: HashMap<node_id,method_map_entry>,\n     mode: ValueMode,\n }\n \n+fn compute_modes_for_fn(fk: fn_kind,\n+                        decl: fn_decl,\n+                        body: blk,\n+                        sp: span,\n+                        id: node_id,\n+                        &&cx: VisitContext,\n+                        v: vt<VisitContext>) {\n+    let body_cx = VisitContext { mode: MoveValue, ..cx };\n+    visit::visit_fn(fk, decl, body, sp, id, body_cx, v);\n+}\n+\n fn compute_modes_for_fn_args(callee_id: node_id,\n                              args: &[@expr],\n                              last_arg_is_block: bool,\n@@ -79,6 +93,10 @@ fn record_mode_for_expr(expr: @expr, &&cx: VisitContext) {\n fn compute_modes_for_expr(expr: @expr,\n                           &&cx: VisitContext,\n                           v: vt<VisitContext>) {\n+    debug!(\"compute_modes_for_expr(expr=%?/%s, mode=%?)\",\n+           expr.id, pprust::expr_to_str(expr, cx.tcx.sess.intr()),\n+           cx.mode);\n+\n     // Adjust the mode if there was an implicit reference here.\n     let cx = match cx.tcx.adjustments.find(expr.id) {\n         None => cx,\n@@ -91,7 +109,7 @@ fn compute_modes_for_expr(expr: @expr,\n         }\n     };\n \n-    match /*bad*/copy expr.node {\n+    match copy expr.node {\n         expr_call(callee, args, is_block) => {\n             let callee_cx = VisitContext { mode: ReadValue, ..cx };\n             compute_modes_for_expr(callee, callee_cx, v);\n@@ -235,6 +253,7 @@ fn compute_modes_for_pat(pat: @pat,\n \n pub fn compute_modes(tcx: ctxt, method_map: method_map, crate: @crate) {\n     let visitor = visit::mk_vt(@visit::Visitor {\n+        visit_fn: compute_modes_for_fn,\n         visit_expr: compute_modes_for_expr,\n         visit_pat: compute_modes_for_pat,\n         .. *visit::default_visitor()"}, {"sha": "9b9d3467934da6984220caee0f55c4be5955f53e", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -366,7 +366,8 @@ fn trans_rtcall_or_lang_call_with_type_params(bcx: block,\n         bcx, None, fty, rty,\n         |bcx| {\n             let callee =\n-                trans_fn_ref_with_vtables_to_callee(bcx, did, 0, type_params,\n+                trans_fn_ref_with_vtables_to_callee(bcx, did, 0,\n+                                                    copy type_params,\n                                                     None);\n \n             let new_llval;"}, {"sha": "846c5d8edb26d0af065e2156a88c935f4fa6e40f", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -413,7 +413,7 @@ fn trans_expr_fn(bcx: block,\n                                                    ret_handle);\n         trans_closure(ccx, /*bad*/copy sub_path, decl, body, llfn, no_self,\n                       /*bad*/copy bcx.fcx.param_substs, id, None, |fcx| {\n-            load_environment(fcx, cdata_ty, cap_vars,\n+            load_environment(fcx, cdata_ty, copy cap_vars,\n                              ret_handle.is_some(), proto);\n                       }, |bcx| {\n             if is_loop_body.is_some() {"}, {"sha": "85f4389b0c4348a3e1d77e0d5330eaa3d45700d7", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -1309,7 +1309,7 @@ fn node_vtables(bcx: block, id: ast::node_id) -> Option<typeck::vtable_res> {\n fn resolve_vtables_in_fn_ctxt(fcx: fn_ctxt, vts: typeck::vtable_res)\n     -> typeck::vtable_res\n {\n-    @vec::map(*vts, |d| resolve_vtable_in_fn_ctxt(fcx, *d))\n+    @vec::map(*vts, |d| resolve_vtable_in_fn_ctxt(fcx, copy *d))\n }\n \n // Apply the typaram substitutions in the fn_ctxt to a vtable. This should"}, {"sha": "98842f8b073dbef710199e17c023eec76b77537f", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -43,7 +43,8 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id,\n         match csearch::maybe_get_item_ast(\n             ccx.tcx, fn_id,\n             |a,b,c,d| {\n-                astencode::decode_inlined_item(a, b, ccx.maps, c, d)\n+                astencode::decode_inlined_item(a, b, ccx.maps,\n+                                               /*bad*/ copy c, d)\n             }) {\n \n           csearch::not_found => {"}, {"sha": "53ed1cf02ffb799e35870630a9aa7e67c2c37240", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -780,7 +780,8 @@ fn make_impl_vtable(ccx: @crate_ctxt, impl_id: ast::def_id, substs: ~[ty::t],\n \n     let has_tps = (*ty::lookup_item_type(ccx.tcx, impl_id).bounds).len() > 0u;\n     make_vtable(ccx, vec::map(*ty::trait_methods(tcx, trt_id), |im| {\n-        let fty = ty::subst_tps(tcx, substs, None, ty::mk_fn(tcx, im.fty));\n+        let fty = ty::subst_tps(tcx, substs, None,\n+                                ty::mk_fn(tcx, copy im.fty));\n         if (*im.tps).len() > 0u || ty::type_has_self(fty) {\n             debug!(\"(making impl vtable) method has self or type params: %s\",\n                    tcx.sess.str_of(im.ident));"}, {"sha": "6ead78a28dd1ac9337373d8ca1be10eee0f17800", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -335,7 +335,7 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n       Some(ref uses) => {\n         vec::map2(precise_param_ids, *uses, |id, uses| {\n             if ccx.sess.no_monomorphic_collapse() {\n-                match *id {\n+                match copy *id {\n                     (a, b) => mono_precise(a, b)\n                 }\n             } else {\n@@ -379,7 +379,7 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n       }\n       None => {\n           precise_param_ids.map(|x| {\n-              let (a, b) = *x;\n+              let (a, b) = copy *x;\n               mono_precise(a, b)\n           })\n       }"}, {"sha": "04085a2c047756b89b954433448b0b0a5907033b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -3905,10 +3905,10 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n             let mut disr_val = -1;\n             @vec::map(variants, |variant| {\n                 match variant.node.kind {\n-                    ast::tuple_variant_kind(args) => {\n+                    ast::tuple_variant_kind(ref args) => {\n                         let ctor_ty = node_id_to_type(cx, variant.node.id);\n                         let arg_tys = {\n-                            if vec::len(args) > 0u {\n+                            if args.len() > 0u {\n                                 ty_fn_args(ctor_ty).map(|a| a.ty)\n                             } else {\n                                 ~[]"}, {"sha": "ae39c674030a860b6b049c3c71a626e27766c0e3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -1507,12 +1507,12 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n     // resolution is not possible (e.g., no constraints yet present), just\n     // returns `none`.\n     fn unpack_expected<O: Copy>(fcx: @fn_ctxt, expected: Option<ty::t>,\n-                                unpack: fn(ty::sty) -> Option<O>)\n+                                unpack: fn(&ty::sty) -> Option<O>)\n         -> Option<O> {\n         match expected {\n             Some(t) => {\n                 match resolve_type(fcx.infcx(), t, force_tvar) {\n-                    Ok(t) => unpack(ty::get(t).sty),\n+                    Ok(t) => unpack(&ty::get(t).sty),\n                     _ => None\n                 }\n             }\n@@ -1537,7 +1537,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // to impure and block. Note that we only will use those for\n         // block syntax lambdas; that is, lambdas without explicit\n         // protos.\n-        let expected_sty = unpack_expected(fcx, expected, |x| Some(x));\n+        let expected_sty = unpack_expected(fcx, expected, |x| Some(copy *x));\n         let (expected_tys,\n              expected_purity,\n              expected_proto,\n@@ -1969,8 +1969,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n       ast::expr_unary(unop, oprnd) => {\n         let exp_inner = do unpack_expected(fcx, expected) |sty| {\n             match unop {\n-              ast::box(_) | ast::uniq(_) => match sty {\n-                ty::ty_box(mt) | ty::ty_uniq(mt) => Some(mt.ty),\n+              ast::box(_) | ast::uniq(_) => match *sty {\n+                ty::ty_box(ref mt) | ty::ty_uniq(ref mt) => Some(mt.ty),\n                 _ => None\n               },\n               ast::not | ast::neg => expected,\n@@ -2050,8 +2050,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         fcx.write_ty(id, oprnd_t);\n       }\n       ast::expr_addr_of(mutbl, oprnd) => {\n-        bot = check_expr(fcx, oprnd, unpack_expected(fcx, expected, |ty|\n-            match ty { ty::ty_rptr(_, mt) => Some(mt.ty), _ => None }\n+        bot = check_expr(fcx, oprnd, unpack_expected(fcx, expected, |sty|\n+            match *sty { ty::ty_rptr(_, ref mt) => Some(mt.ty), _ => None }\n         ));\n \n         // Note: at this point, we cannot say what the best lifetime\n@@ -2177,7 +2177,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         // 1. a closure that returns a bool is expected\n         // 2. the closure that was given returns unit\n         let mut err_happened = false;\n-        let expected_sty = unpack_expected(fcx, expected, |x| Some(x));\n+        let expected_sty = unpack_expected(fcx, expected, |x| Some(copy *x));\n         let inner_ty = match expected_sty {\n           Some(ty::ty_fn(ref fty)) => {\n             match fcx.mk_subty(false, expr.span,\n@@ -2240,7 +2240,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         }\n       }\n       ast::expr_do_body(b) => {\n-        let expected_sty = unpack_expected(fcx, expected, |x| Some(x));\n+        let expected_sty = unpack_expected(fcx, expected, |x| Some(copy *x));\n         let inner_ty = match expected_sty {\n           Some(ty::ty_fn(ref fty)) => {\n               ty::mk_fn(tcx, (/*bad*/copy *fty))\n@@ -2349,11 +2349,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n       }\n       ast::expr_tup(elts) => {\n         let flds = unpack_expected(fcx, expected, |sty| {\n-            // XXX: Beware! If you remove `copy` below, the borrow checker\n-            // will NOT complain, but you will get a segfault at runtime! This\n-            // is because the mode computation is currently unaware of\n-            // argument modes.\n-            match copy sty { ty::ty_tup(flds) => Some(flds), _ => None }\n+            match *sty { ty::ty_tup(ref flds) => Some(copy *flds), _ => None }\n         });\n         let elt_ts = do elts.mapi |i, e| {\n             check_expr(fcx, *e, flds.map(|fs| fs[i]));\n@@ -2368,12 +2364,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n             Some(fcx.expr_ty(base.get()))\n         } else { expected };\n         let flds = unpack_expected(fcx, expected, |sty|\n-            // XXX: Beware! If you remove `copy` below, the borrow checker\n-            // will NOT complain, but you will get a segfault at runtime! This\n-            // is because the mode computation is currently unaware of\n-            // argument modes.\n-            match copy sty {\n-                ty::ty_rec(flds) => Some(flds),\n+            match *sty {\n+                ty::ty_rec(ref flds) => Some(copy *flds),\n                 _ => None\n             }\n         );"}, {"sha": "32ac756aaff25bac694bcc2807c3134b379fd8c3", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -0,0 +1,10 @@\n+enum sty = ~[int];\n+\n+fn unpack(unpack: &fn(v: &sty) -> ~[int]) {}\n+\n+fn main() {\n+    let foo = unpack(|s| {\n+        // Test that `s` is moved here.\n+        match *s { sty(v) => v } //~ ERROR moving out of dereference of immutable & pointer\n+    });\n+}"}, {"sha": "aee6f4e480ca18dc6577afdf6830b91c3ac13e20", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let carrots = @~\"crunchy\";\n \n     fn@(tasties: @~str, macerate: fn(~str)) {\n-        macerate(*tasties);\n+        macerate(copy *tasties);\n     } (carrots, |food| {\n         let mush = food + cheese;\n         let f = fn@() {"}, {"sha": "1dfccac8bce674788cdd4f2d9e5af3da0b01ff72", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -39,6 +39,6 @@ fn main() {\n     // Verify that blocks can't interfere with each other.\n     fn two_blocks(a: fn(), b: fn()) { a(); b(); a(); b(); }\n     let q = ~50;\n-    two_blocks(|| { let a = q; assert *a == 50;},\n-               || { let a = q; assert *a == 50;});\n+    two_blocks(|| { let a = copy q; assert *a == 50;},\n+               || { let a = copy q; assert *a == 50;});\n }"}, {"sha": "210defa578934101bd82fe3912b743dda6e6e9dd", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737e115646ec79dac05d61232d89e59d8da751a9/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=737e115646ec79dac05d61232d89e59d8da751a9", "patch": "@@ -43,6 +43,8 @@ fn transform(x: Option<int>) -> Option<~str> {\n fn main() {\n     assert transform(Some(10)) == Some(~\"11\");\n     assert transform(None) == None;\n-    assert (~[~\"hi\"]).bind(|x| ~[x, x + ~\"!\"] ).bind(|x| ~[x, x + ~\"?\"] ) ==\n+    assert (~[~\"hi\"])\n+        .bind(|x| ~[copy x, x + ~\"!\"] )\n+        .bind(|x| ~[copy x, x + ~\"?\"] ) ==\n         ~[~\"hi\", ~\"hi?\", ~\"hi!\", ~\"hi!?\"];\n }"}]}