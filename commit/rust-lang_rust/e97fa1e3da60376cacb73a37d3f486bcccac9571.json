{"sha": "e97fa1e3da60376cacb73a37d3f486bcccac9571", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5N2ZhMWUzZGE2MDM3NmNhY2I3M2EzN2QzZjQ4NmJjY2NhYzk1NzE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-14T17:33:04Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-14T17:33:04Z"}, "message": "libstd/ffi/c_str.rs: #![deny(unsafe_op_in_unsafe_fn)], enclose unsafe operations in unsafe blocks", "tree": {"sha": "148526128176d5fbd384b6e51785987d755cb269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148526128176d5fbd384b6e51785987d755cb269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97fa1e3da60376cacb73a37d3f486bcccac9571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97fa1e3da60376cacb73a37d3f486bcccac9571", "html_url": "https://github.com/rust-lang/rust/commit/e97fa1e3da60376cacb73a37d3f486bcccac9571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97fa1e3da60376cacb73a37d3f486bcccac9571/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6396b75e782954acb085447fb836c4e0ff5281d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6396b75e782954acb085447fb836c4e0ff5281d", "html_url": "https://github.com/rust-lang/rust/commit/b6396b75e782954acb085447fb836c4e0ff5281d"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "8816262668761faefa1ffeb88853fb23ff1d0707", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e97fa1e3da60376cacb73a37d3f486bcccac9571/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97fa1e3da60376cacb73a37d3f486bcccac9571/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=e97fa1e3da60376cacb73a37d3f486bcccac9571", "patch": "@@ -1,3 +1,4 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n use crate::ascii;\n use crate::borrow::{Borrow, Cow};\n use crate::cmp::Ordering;\n@@ -510,9 +511,16 @@ impl CString {\n     /// ```\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n-        let len = sys::strlen(ptr) + 1; // Including the NUL byte\n-        let slice = slice::from_raw_parts_mut(ptr, len as usize);\n-        CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n+        // SAFETY: This is called with a pointer that was obtained from a call\n+        // to `CString::into_raw` and the length has not been modified. As such,\n+        // we know there is a NUL byte (and only one) at the end and that the\n+        // information about the size of the allocation is correct on Rust's\n+        // side.\n+        unsafe {\n+            let len = sys::strlen(ptr) + 1; // Including the NUL byte\n+            let slice = slice::from_raw_parts_mut(ptr, len as usize);\n+            CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n+        }\n     }\n \n     /// Consumes the `CString` and transfers ownership of the string to a C caller.\n@@ -1228,9 +1236,21 @@ impl CStr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n-        let len = sys::strlen(ptr);\n-        let ptr = ptr as *const u8;\n-        CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+        // SAFETY: The caller has provided a pointer that points to a valid C\n+        // string with a NUL terminator of size less than `isize::MAX`, whose\n+        // content remain valid and doesn't change for the lifetime of the\n+        // returned `CStr`.\n+        //\n+        // Thus computing the length is fine (a NUL byte exists), the call to\n+        // from_raw_parts is safe because we know the length is at most `isize::MAX`, meaning\n+        // the call to `from_bytes_with_nul_unchecked` is correct.\n+        //\n+        // The cast from c_char to u8 is ok because a c_char is always one byte.\n+        unsafe {\n+            let len = sys::strlen(ptr);\n+            let ptr = ptr as *const u8;\n+            CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+        }\n     }\n \n     /// Creates a C string wrapper from a byte slice.\n@@ -1299,7 +1319,12 @@ impl CStr {\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n-        &*(bytes as *const [u8] as *const CStr)\n+        // SAFETY: Casting to CStr is safe because its internal representation\n+        // is a [u8] too (safe only inside std).\n+        // Dereferencing the obtained pointer is safe because it comes from a\n+        // reference. Making a reference is then safe because its lifetime\n+        // is bound by the lifetime of the given `bytes`.\n+        unsafe { &*(bytes as *const [u8] as *const CStr) }\n     }\n \n     /// Returns the inner pointer to this C string."}]}