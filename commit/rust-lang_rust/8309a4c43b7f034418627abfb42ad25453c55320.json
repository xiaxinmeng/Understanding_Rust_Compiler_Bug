{"sha": "8309a4c43b7f034418627abfb42ad25453c55320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDlhNGM0M2I3ZjAzNDQxODYyN2FiZmI0MmFkMjU0NTNjNTUzMjA=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-08-13T02:58:17Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-08-27T10:02:24Z"}, "message": "Address review comments, second turn", "tree": {"sha": "905df68514fc05ead0e7951b7fbb01f313d90dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905df68514fc05ead0e7951b7fbb01f313d90dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8309a4c43b7f034418627abfb42ad25453c55320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8309a4c43b7f034418627abfb42ad25453c55320", "html_url": "https://github.com/rust-lang/rust/commit/8309a4c43b7f034418627abfb42ad25453c55320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8309a4c43b7f034418627abfb42ad25453c55320/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611b1111394a065783091b17b025c34427af3d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/611b1111394a065783091b17b025c34427af3d68", "html_url": "https://github.com/rust-lang/rust/commit/611b1111394a065783091b17b025c34427af3d68"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "6ce2232eb3e5d38ad36c2ae8af266990584d15df", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -797,7 +797,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub maybe_unused_trait_imports: NodeSet,\n \n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span, CrateNum)>,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n \n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,"}, {"sha": "6597dccf25816d55da840a68d16034a11047d740", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -131,7 +131,7 @@ pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span, CrateNum)>,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n }\n "}, {"sha": "47fa5357abf0d64b50e6ef7b131d8c4a7cbd2cc0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -264,7 +264,7 @@ impl<'a> Resolver<'a> {\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(module)),\n-                    subclass: ImportDirectiveSubclass::ExternCrate { cnum: crate_id },\n+                    subclass: ImportDirectiveSubclass::ExternCrate,\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),"}, {"sha": "a66d1ce0859b7efe179eda60087d3c5c7ddf4a7e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -120,8 +120,8 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n             _ if directive.used.get() ||\n                  directive.vis.get() == ty::Visibility::Public ||\n                  directive.span.source_equal(&DUMMY_SP) => {}\n-            ImportDirectiveSubclass::ExternCrate { cnum } => {\n-                resolver.maybe_unused_extern_crates.push((directive.id, directive.span, cnum));\n+            ImportDirectiveSubclass::ExternCrate => {\n+                resolver.maybe_unused_extern_crates.push((directive.id, directive.span));\n             }\n             ImportDirectiveSubclass::MacroUse => {\n                 let lint = lint::builtin::UNUSED_IMPORTS;"}, {"sha": "a83ac9bb6336958e4d5e6d644f73c30b8fc72743", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -35,7 +35,7 @@ use rustc::middle::cstore::CrateLoader;\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::*;\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n@@ -1102,7 +1102,7 @@ impl<'a> NameBinding<'a> {\n         match self.kind {\n             NameBindingKind::Import {\n                 directive: &ImportDirective {\n-                    subclass: ImportDirectiveSubclass::ExternCrate { .. }, ..\n+                    subclass: ImportDirectiveSubclass::ExternCrate, ..\n                 }, ..\n             } => true,\n             _ => false,\n@@ -1250,7 +1250,7 @@ pub struct Resolver<'a> {\n \n     used_imports: FxHashSet<(NodeId, Namespace)>,\n     pub maybe_unused_trait_imports: NodeSet,\n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span, CrateNum)>,\n+    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n \n     /// privacy errors are delayed until the end in order to deduplicate them\n     privacy_errors: Vec<PrivacyError<'a>>,"}, {"sha": "5616971e9d1f54ff50197e1e8f920778f9c94e96", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -19,7 +19,7 @@ use {resolve_error, ResolutionError};\n \n use rustc::ty;\n use rustc::lint::builtin::PUB_USE_OF_PRIVATE_EXTERN_CRATE;\n-use rustc::hir::def_id::{CrateNum, DefId};\n+use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n@@ -48,9 +48,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n         // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n     },\n-    ExternCrate {\n-        cnum: CrateNum,\n-    },\n+    ExternCrate,\n     MacroUse,\n }\n \n@@ -926,7 +924,7 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n     match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),\n-        ExternCrate { .. } => \"<extern crate>\".to_string(),\n+        ExternCrate => \"<extern crate>\".to_string(),\n         MacroUse => \"#[macro_use]\".to_string(),\n     }\n }"}, {"sha": "3da154e0689addb8a26ed863906e0fe3f4576646", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -73,10 +73,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = CheckVisitor { tcx, used_trait_imports };\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n \n-    for &(id, span, cnum) in &tcx.maybe_unused_extern_crates {\n-        if !tcx.is_compiler_builtins(cnum.as_def_id())\n-            && !tcx.is_panic_runtime(cnum.as_def_id())\n-            && !tcx.has_global_allocator(cnum.as_def_id()) {\n+    for &(id, span) in &tcx.maybe_unused_extern_crates {\n+        let cnum = tcx.sess.cstore.extern_mod_stmt_cnum(id).unwrap().as_def_id();\n+        if !tcx.is_compiler_builtins(cnum)\n+            && !tcx.is_panic_runtime(cnum)\n+            && !tcx.has_global_allocator(cnum) {\n                 let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n                 let msg = \"unused extern crate\";\n                 tcx.lint_node(lint, id, span, msg);"}, {"sha": "fc4bca865c932e390fd8898f1ad3d3d1b93391d4", "filename": "src/test/compile-fail/auxiliary/lint_unused_extern_crate5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Flint_unused_extern_crate5.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms."}, {"sha": "a3cfa1349831d6f477967879059369bd8556b44a", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8309a4c43b7f034418627abfb42ad25453c55320/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8309a4c43b7f034418627abfb42ad25453c55320/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=8309a4c43b7f034418627abfb42ad25453c55320", "patch": "@@ -12,12 +12,15 @@\n // aux-build:lint_unused_extern_crate2.rs\n // aux-build:lint_unused_extern_crate3.rs\n // aux-build:lint_unused_extern_crate4.rs\n+// aux-build:lint_unused_extern_crate5.rs\n \n #![deny(unused_extern_crates)]\n #![allow(unused_variables)]\n #![allow(deprecated)]\n \n-extern crate lint_unused_extern_crate4; //~ ERROR: unused extern crate\n+extern crate lint_unused_extern_crate5; //~ ERROR: unused extern crate\n+\n+pub extern crate lint_unused_extern_crate4; // no error, it is reexported\n \n extern crate lint_unused_extern_crate3; // no error, it is used\n "}]}