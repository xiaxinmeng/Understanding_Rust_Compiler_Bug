{"sha": "fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNTI4ZGQ3ZDYxMzk2NGUwNWRkNjgyYTZhOTg5ODBhMWViZGI0ZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T23:38:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T23:57:14Z"}, "message": "rt: Allow some schedulers to stay alive even without tasks to execute", "tree": {"sha": "4db5b394786b692e75c7bc08fb880b7d3f235431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db5b394786b692e75c7bc08fb880b7d3f235431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "html_url": "https://github.com/rust-lang/rust/commit/fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5e9d45e172e6aeecefe02e668e454a870bca56", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5e9d45e172e6aeecefe02e668e454a870bca56", "html_url": "https://github.com/rust-lang/rust/commit/0a5e9d45e172e6aeecefe02e668e454a870bca56"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "5062e4de3c37ae75ba60568a6964028f91f6bf92", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "patch": "@@ -69,7 +69,7 @@ rust_kernel::create_scheduler(size_t num_threads) {\n         id = max_sched_id++;\n         K(srv, id != INTPTR_MAX, \"Hit the maximum scheduler id\");\n         sched = new (this, \"rust_scheduler\")\n-            rust_scheduler(this, srv, num_threads, id);\n+            rust_scheduler(this, srv, num_threads, id, true);\n         bool is_new = sched_table\n             .insert(std::pair<rust_sched_id,\n                               rust_scheduler*>(id, sched)).second;"}, {"sha": "57b166208f9ade8cf41a3cf82e75bd766fed8fdb", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "patch": "@@ -5,14 +5,16 @@\n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n                                rust_srv *srv,\n                                size_t num_threads,\n-                               rust_sched_id id) :\n+                               rust_sched_id id,\n+                               bool allow_exit) :\n     kernel(kernel),\n     srv(srv),\n     env(srv->env),\n     live_threads(num_threads),\n     live_tasks(0),\n-    num_threads(num_threads),\n     cur_thread(0),\n+    may_exit(allow_exit),\n+    num_threads(num_threads),\n     id(id)\n {\n     create_task_threads();\n@@ -103,12 +105,11 @@ rust_scheduler::release_task() {\n     {\n         scoped_lock with(lock);\n         live_tasks--;\n-        if (live_tasks == 0) {\n+        if (live_tasks == 0 && may_exit) {\n             need_exit = true;\n         }\n     }\n     if (need_exit) {\n-        // There are no more tasks on this scheduler. Time to leave\n         exit();\n     }\n }\n@@ -139,3 +140,16 @@ rust_scheduler::release_task_thread() {\n         kernel->release_scheduler_id(id);\n     }\n }\n+\n+void\n+rust_scheduler::allow_exit() {\n+    bool need_exit = false;\n+    {\n+        scoped_lock with(lock);\n+        may_exit = true;\n+        need_exit = live_tasks == 0;\n+    }\n+    if (need_exit) {\n+        exit();\n+    }\n+}"}, {"sha": "48a33c52ef684e2145011a175962ad4abc02b035", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/fb528dd7d613964e05dd682a6a98980a1ebdb4d6/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=fb528dd7d613964e05dd682a6a98980a1ebdb4d6", "patch": "@@ -12,16 +12,17 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     rust_srv *srv;\n     rust_env *env;\n private:\n-    // Protects live_threads and cur_thread increments\n+    // Protects live_threads, live_tasks, cur_thread, may_exit\n     lock_and_signal lock;\n     // When this hits zero we'll tell the kernel to release us\n     uintptr_t live_threads;\n     // When this hits zero we'll tell the threads to exit\n     uintptr_t live_tasks;\n+    size_t cur_thread;\n+    bool may_exit;\n \n     array_list<rust_sched_launcher *> threads;\n     const size_t num_threads;\n-    size_t cur_thread;\n \n     rust_sched_id id;\n \n@@ -35,7 +36,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n \n public:\n     rust_scheduler(rust_kernel *kernel, rust_srv *srv, size_t num_threads,\n-                   rust_sched_id id);\n+                   rust_sched_id id, bool allow_exit);\n     ~rust_scheduler();\n \n     void start_task_threads();\n@@ -51,6 +52,9 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     void release_task_thread();\n \n     rust_sched_id get_id() { return id; }\n+    // Tells the scheduler that as soon as it runs out of tasks\n+    // to run it should exit\n+    void allow_exit();\n };\n \n #endif /* RUST_SCHEDULER_H */"}]}