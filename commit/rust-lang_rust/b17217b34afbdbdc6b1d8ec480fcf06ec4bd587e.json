{"sha": "b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzIxN2IzNGFmYmRiZGM2YjFkOGVjNDgwZmNmMDZlYzRiZDU4N2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T15:57:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T15:57:57Z"}, "message": "simplify", "tree": {"sha": "198b942a591d783dfcade9c1c6dc04920bafa9b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198b942a591d783dfcade9c1c6dc04920bafa9b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "html_url": "https://github.com/rust-lang/rust/commit/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cffa3f960e401ac8100fd450b32c336c93181959", "url": "https://api.github.com/repos/rust-lang/rust/commits/cffa3f960e401ac8100fd450b32c336c93181959", "html_url": "https://github.com/rust-lang/rust/commit/cffa3f960e401ac8100fd450b32c336c93181959"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "a7bbaefb89114aad993c5a85cbb37dd646dc0cb8", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "patch": "@@ -22,7 +22,7 @@ pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n \n-    #[salsa::invoke(HirFileId::hir_parse)]\n+    #[salsa::invoke(HirFileId::hir_parse_query)]\n     fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n \n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]"}, {"sha": "81b3cfd22975f644f5ff902398ee72c99eb76e19", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "patch": "@@ -82,7 +82,10 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn hir_parse(db: &impl DefDatabase, file_id: HirFileId) -> TreeArc<SourceFile> {\n+    pub(crate) fn hir_parse_query(\n+        db: &impl DefDatabase,\n+        file_id: HirFileId,\n+    ) -> TreeArc<SourceFile> {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(macro_call_id) => {\n@@ -122,7 +125,6 @@ impl From<MacroCallId> for HirFileId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-\n pub struct MacroDefId(pub(crate) AstId<ast::MacroCall>);\n \n pub(crate) fn macro_def_query(db: &impl DefDatabase, id: MacroDefId) -> Option<Arc<MacroRules>> {\n@@ -152,7 +154,6 @@ impl MacroCallId {\n }\n \n impl MacroCallLoc {\n-    #[allow(unused)]\n     pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> MacroCallId {\n         db.as_ref().macros.loc2id(&self)\n     }"}, {"sha": "fb71417aff208b79bc4853115b1729d71fff1c14", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=b17217b34afbdbdc6b1d8ec480fcf06ec4bd587e", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n \n use crate::{HirFileId, DefDatabase};\n \n+/// `AstId` points to an AST node in any file\n #[derive(Debug)]\n pub(crate) struct AstId<N: AstNode> {\n     file_id: HirFileId,\n@@ -43,6 +44,7 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n+/// `AstId` points to an AST node in a specific file.\n #[derive(Debug)]\n pub(crate) struct FileAstId<N: AstNode> {\n     raw: SourceFileItemId,\n@@ -89,7 +91,6 @@ pub struct SourceItemId {\n /// Maps items' `SyntaxNode`s to `SourceFileItemId`s and back.\n #[derive(Debug, PartialEq, Eq)]\n pub struct SourceFileItems {\n-    file_id: HirFileId,\n     arena: Arena<SourceFileItemId, SyntaxNodePtr>,\n }\n \n@@ -99,7 +100,7 @@ impl SourceFileItems {\n         file_id: HirFileId,\n     ) -> Arc<SourceFileItems> {\n         let source_file = db.hir_parse(file_id);\n-        Arc::new(SourceFileItems::from_source_file(&source_file, file_id))\n+        Arc::new(SourceFileItems::from_source_file(&source_file))\n     }\n \n     pub(crate) fn file_item_query(\n@@ -113,11 +114,21 @@ impl SourceFileItems {\n     }\n \n     pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n-        FileAstId { raw: self.id_of_unchecked(item.syntax()), _ty: PhantomData }\n+        let ptr = SyntaxNodePtr::new(item.syntax());\n+        let raw = match self.arena.iter().find(|(_id, i)| **i == ptr) {\n+            Some((it, _)) => it,\n+            None => panic!(\n+                \"Can't find {:?} in SourceFileItems:\\n{:?}\",\n+                item.syntax(),\n+                self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n+            ),\n+        };\n+\n+        FileAstId { raw, _ty: PhantomData }\n     }\n \n-    fn from_source_file(source_file: &SourceFile, file_id: HirFileId) -> SourceFileItems {\n-        let mut res = SourceFileItems { file_id, arena: Arena::default() };\n+    fn from_source_file(source_file: &SourceFile) -> SourceFileItems {\n+        let mut res = SourceFileItems { arena: Arena::default() };\n         // By walking the tree in bread-first order we make sure that parents\n         // get lower ids then children. That is, adding a new child does not\n         // change parent's id. This means that, say, adding a new function to a\n@@ -135,18 +146,6 @@ impl SourceFileItems {\n     fn alloc(&mut self, item: &SyntaxNode) -> SourceFileItemId {\n         self.arena.alloc(SyntaxNodePtr::new(item))\n     }\n-\n-    fn id_of_unchecked(&self, item: &SyntaxNode) -> SourceFileItemId {\n-        let ptr = SyntaxNodePtr::new(item);\n-        if let Some((id, _)) = self.arena.iter().find(|(_id, i)| **i == ptr) {\n-            return id;\n-        }\n-        panic!(\n-            \"Can't find {:?} in SourceFileItems:\\n{:?}\",\n-            item,\n-            self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n-        );\n-    }\n }\n \n /// Walks the subtree in bfs order, calling `f` for each node."}]}