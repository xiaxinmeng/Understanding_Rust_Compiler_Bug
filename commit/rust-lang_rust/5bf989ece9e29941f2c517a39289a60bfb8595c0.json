{"sha": "5bf989ece9e29941f2c517a39289a60bfb8595c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjk4OWVjZTllMjk5NDFmMmM1MTdhMzkyODlhNjBiZmI4NTk1YzA=", "commit": {"author": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-30T12:02:53Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-04-30T14:36:08Z"}, "message": "Remove artificial flag from generator variants\n\n - Literally, variants are not artificial. We have `yield` statements,\n   upvars and inner variables in the source code.\n - Functionally, we don't want debuggers to suppress the variants. It\n   contains the state of the generator, which is useful when debugging.\n   So they shouldn't be marked artificial.\n - Debuggers may use artificial flags to find the active variant. In\n   this case, marking variants artificial will make debuggers not work\n   properly.\n\nFixes #79009.", "tree": {"sha": "b4e8bc3c6ef8a960e99684cace4df5d9dfa9aaba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4e8bc3c6ef8a960e99684cace4df5d9dfa9aaba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf989ece9e29941f2c517a39289a60bfb8595c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf989ece9e29941f2c517a39289a60bfb8595c0", "html_url": "https://github.com/rust-lang/rust/commit/5bf989ece9e29941f2c517a39289a60bfb8595c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf989ece9e29941f2c517a39289a60bfb8595c0/comments", "author": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060deec4b1e94be6fbc640a027c1a935d970e33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/060deec4b1e94be6fbc640a027c1a935d970e33e", "html_url": "https://github.com/rust-lang/rust/commit/060deec4b1e94be6fbc640a027c1a935d970e33e"}], "stats": {"total": 153, "additions": 83, "deletions": 70}, "files": [{"sha": "280d9a4d3702179a4cef60afa2c4781602293d9a", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -1495,10 +1495,6 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         } else {\n             type_metadata(cx, self.enum_type, self.span)\n         };\n-        let flags = match self.enum_type.kind() {\n-            ty::Generator(..) => DIFlags::FlagArtificial,\n-            _ => DIFlags::FlagZero,\n-        };\n \n         match self.layout.variants {\n             Variants::Single { index } => {\n@@ -1533,7 +1529,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     offset: Size::ZERO,\n                     size: self.layout.size,\n                     align: self.layout.align.abi,\n-                    flags,\n+                    flags: DIFlags::FlagZero,\n                     discriminant: None,\n                     source_info: variant_info.source_info(cx),\n                 }]\n@@ -1588,7 +1584,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             offset: Size::ZERO,\n                             size: self.layout.size,\n                             align: self.layout.align.abi,\n-                            flags,\n+                            flags: DIFlags::FlagZero,\n                             discriminant: Some(\n                                 self.layout.ty.discriminant_for_variant(cx.tcx, i).unwrap().val\n                                     as u64,\n@@ -1672,7 +1668,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         offset: Size::ZERO,\n                         size: variant.size,\n                         align: variant.align.abi,\n-                        flags,\n+                        flags: DIFlags::FlagZero,\n                         discriminant: None,\n                         source_info: variant_info.source_info(cx),\n                     }]\n@@ -1723,7 +1719,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                 offset: Size::ZERO,\n                                 size: self.layout.size,\n                                 align: self.layout.align.abi,\n-                                flags,\n+                                flags: DIFlags::FlagZero,\n                                 discriminant: niche_value,\n                                 source_info: variant_info.source_info(cx),\n                             }\n@@ -1855,13 +1851,6 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n         }\n         None\n     }\n-\n-    fn is_artificial(&self) -> bool {\n-        match self {\n-            VariantInfo::Generator { .. } => true,\n-            VariantInfo::Adt(..) => false,\n-        }\n-    }\n }\n \n /// Returns a tuple of (1) `type_metadata_stub` of the variant, (2) a\n@@ -1887,8 +1876,7 @@ fn describe_enum_variant(\n             &variant_name,\n             unique_type_id,\n             Some(containing_scope),\n-            // FIXME(tmandry): This doesn't seem to have any effect.\n-            if variant.is_artificial() { DIFlags::FlagArtificial } else { DIFlags::FlagZero },\n+            DIFlags::FlagZero,\n         )\n     });\n \n@@ -1951,11 +1939,6 @@ fn prepare_enum_metadata(\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n     let tcx = cx.tcx;\n     let enum_name = compute_debuginfo_type_name(tcx, enum_type, false);\n-    // FIXME(tmandry): This doesn't seem to have any effect.\n-    let enum_flags = match enum_type.kind() {\n-        ty::Generator(..) => DIFlags::FlagArtificial,\n-        _ => DIFlags::FlagZero,\n-    };\n \n     let containing_scope = get_namespace_for_item(cx, enum_def_id);\n     // FIXME: This should emit actual file metadata for the enum, but we\n@@ -2088,7 +2071,7 @@ fn prepare_enum_metadata(\n                     UNKNOWN_LINE_NUMBER,\n                     layout.size.bits(),\n                     layout.align.abi.bits() as u32,\n-                    enum_flags,\n+                    DIFlags::FlagZero,\n                     None,\n                     0, // RuntimeLang\n                     unique_type_id_str.as_ptr().cast(),\n@@ -2210,7 +2193,7 @@ fn prepare_enum_metadata(\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n             layout.align.abi.bits() as u32,\n-            enum_flags,\n+            DIFlags::FlagZero,\n             discriminator_metadata,\n             empty_array,\n             variant_part_unique_type_id_str.as_ptr().cast(),\n@@ -2239,7 +2222,7 @@ fn prepare_enum_metadata(\n                 UNKNOWN_LINE_NUMBER,\n                 layout.size.bits(),\n                 layout.align.abi.bits() as u32,\n-                enum_flags,\n+                DIFlags::FlagZero,\n                 None,\n                 type_array,\n                 0,"}, {"sha": "f2641404aae21b91eaa6674587bd20db7940c14e", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -17,26 +17,32 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 12,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 14,\n // CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]"}, {"sha": "7de115f7e9194d7d062c3346f2d76fd64e3e579a", "filename": "src/test/codegen/async-fn-debug.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for async fn:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -17,29 +17,36 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 12,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )"}, {"sha": "44be71f3b9b8056ce99d538ff8bc57ed949cdb41", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2\n@@ -21,26 +21,32 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n // CHECK-SAME: file: [[FILE]], line: 17,\n // CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]"}, {"sha": "8b87a2f0646044af947a3639e32637aaeec6e82f", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -1,7 +1,7 @@\n // Verify debuginfo for generators:\n //  - Each variant points to the file and line of its yield point\n-//  - The generator types and variants are marked artificial\n-//  - Captured vars from the source are not marked artificial\n+//  - The discriminants are marked artificial\n+//  - Other fields are not marked artificial\n //\n //\n // compile-flags: -C debuginfo=2 --edition=2018\n@@ -21,29 +21,36 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[GEN_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 18,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 15,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n // CHECK-SAME: file: [[FILE]], line: 17,\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )"}, {"sha": "1beed1c835d977d566d388f019057a1d6722eb25", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -1,22 +1,26 @@\n // Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n+// LLDB without native Rust support cannot read DW_TAG_variant_part,\n+// so it prints nothing for generators. But those tests are kept to\n+// ensure that LLDB won't crash at least (like #57822).\n+\n // compile-flags:-g\n \n // === GDB TESTS ===================================================================================\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = <error reading variable>\n+// gdb-check:$1 = generator_objects::main::generator-0::Unresumed(0x[...])\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = <error reading variable>\n+// gdb-check:$2 = generator_objects::main::generator-0::Suspend0{c: 6, d: 7, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = <error reading variable>\n+// gdb-check:$3 = generator_objects::main::generator-0::Suspend1{c: 7, d: 8, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = <error reading variable>\n+// gdb-check:$4 = generator_objects::main::generator-0::Returned(0x[...])\n \n // === LLDB TESTS ==================================================================================\n "}, {"sha": "6b2b12edda5d7a710c48862caaed0560b263be0c", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf989ece9e29941f2c517a39289a60bfb8595c0/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=5bf989ece9e29941f2c517a39289a60bfb8595c0", "patch": "@@ -14,7 +14,7 @@\n // gdb-check:$1 = issue_57822::main::closure-1 (issue_57822::main::closure-0 (1))\n \n // gdb-command:print b\n-// gdb-check:$2 = <error reading variable>\n+// gdb-check:$2 = issue_57822::main::generator-3::Unresumed(issue_57822::main::generator-2::Unresumed(2))\n \n // === LLDB TESTS ==================================================================================\n "}]}