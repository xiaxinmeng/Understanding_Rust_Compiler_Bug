{"sha": "b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZjljODhjMmQ4NjEzNWY0ZDFjMTcwYmU2N2Q5ZDE1YzYzYjM1OGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-27T09:42:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-27T09:44:10Z"}, "message": "Revert \"skip double negation in const eval\"\n\nThis reverts commit 735c018974e5570ea13fd887aa70a011a5b8e7b8.", "tree": {"sha": "fa36a5fd816092e33fbbdfe6e2126d8a2d0da9bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa36a5fd816092e33fbbdfe6e2126d8a2d0da9bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXcPVqAAoJEFbW7qD8Z6xGyokP/3csH5L7WrIxXvCeyqZY3X7c\ng3zKTeY7/D8X6tNInksqoKy25OoE0t982295KAWlOCB86jKamiq3GlAAhYv2eHiu\nGDthKwb0kSekOcXbtNZc35qq4YIT1UQubCxDNHXe1monP+Q3ykHHtkOGxjnXVvgO\nxapnL/WEr6iqC9niLcZ11ZVSvu7NXU5Imhn+N7nlPrWH0KWCtq71Q/fC1JFo8UCJ\nC0qXX5IF5+nbSTZyfwYcUr1bE9aPeh+7s7wPAV8/14RRdN4eC8W48vTiY5Nwom/W\ngeO2Ih+ebRGMlOIdKrrjDGFYD66HrPq+zAh4ds1JAqNZOL3fzoiYt3J8W0UXuX6W\nNtHHDqVF9CMZd8gfll8neCayju4A9Ub5vYXc1XSdf/NAh9r78NnI2E11lH0uew4+\nLQlNYbDBtD9epu/uJUrK7O8zIq/do1kOykHSSZ7uPJ23dwaMZIbx6UoTuS2OtRIo\n3+W9MUbZvV36NVhUqEsbhVNOWaKc2Eso8KXRl/rMOKVxFct7JGajT93C65VuOUJV\nf3a6Hq2/JjGoE2it2t9g02vtcM+NHVIbPj4OX7nhMLAR/FhlKg9NE9zuPryjMQDA\nfY5DiUrJLdkXCZyH2ou4LsdGwSD6BpW4G2Tv2ezhp93lK/finK/ylvquILbecDIK\nTkytBjghRNXlQAn/K1WM\n=fCvZ\n-----END PGP SIGNATURE-----", "payload": "tree fa36a5fd816092e33fbbdfe6e2126d8a2d0da9bd\nparent b42884fc64e9c97d8ab2926cb8e4896c32abf93b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467020572 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467020650 +0200\n\nRevert \"skip double negation in const eval\"\n\nThis reverts commit 735c018974e5570ea13fd887aa70a011a5b8e7b8.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "html_url": "https://github.com/rust-lang/rust/commit/b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8f9c88c2d86135f4d1c170be67d9d15c63b358a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "html_url": "https://github.com/rust-lang/rust/commit/b42884fc64e9c97d8ab2926cb8e4896c32abf93b"}], "stats": {"total": 90, "additions": 42, "deletions": 48}, "files": [{"sha": "4018260263c2c53fe4a9980f250b469fc7a3243a", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9c88c2d86135f4d1c170be67d9d15c63b358a/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9c88c2d86135f4d1c170be67d9d15c63b358a/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "patch": "@@ -543,54 +543,47 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let result = match e.node {\n       hir::ExprUnary(hir::UnNeg, ref inner) => {\n         // unary neg literals already got their sign during creation\n-        match inner.node {\n-            hir::ExprLit(ref lit) => {\n-                use syntax::ast::*;\n-                use syntax::ast::LitIntType::*;\n-                const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n-                const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n-                const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n-                const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n-                match (&lit.node, ety.map(|t| &t.sty)) {\n-                    (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n-                    (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n-                        return Ok(Integral(I8(::std::i8::MIN)))\n-                    },\n-                    (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n-                    (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n-                        return Ok(Integral(I16(::std::i16::MIN)))\n-                    },\n-                    (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n-                    (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n-                        return Ok(Integral(I32(::std::i32::MIN)))\n-                    },\n-                    (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n-                    (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n-                        return Ok(Integral(I64(::std::i64::MIN)))\n-                    },\n-                    (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n-                    (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n-                        match tcx.sess.target.int_type {\n-                            IntTy::I16 => if n == I16_OVERFLOW {\n-                                return Ok(Integral(Isize(Is16(::std::i16::MIN))));\n-                            },\n-                            IntTy::I32 => if n == I32_OVERFLOW {\n-                                return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n-                            },\n-                            IntTy::I64 => if n == I64_OVERFLOW {\n-                                return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n-                            },\n-                            _ => bug!(),\n-                        }\n-                    },\n-                    _ => {},\n-                }\n-            },\n-            hir::ExprUnary(hir::UnNeg, ref inner) => {\n-                // skip `--$expr`\n-                return eval_const_expr_partial(tcx, inner, ty_hint, fn_args);\n-            },\n-            _ => {},\n+        if let hir::ExprLit(ref lit) = inner.node {\n+            use syntax::ast::*;\n+            use syntax::ast::LitIntType::*;\n+            const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n+            const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n+            const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n+            const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n+            match (&lit.node, ety.map(|t| &t.sty)) {\n+                (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n+                (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n+                    return Ok(Integral(I8(::std::i8::MIN)))\n+                },\n+                (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n+                (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n+                    return Ok(Integral(I16(::std::i16::MIN)))\n+                },\n+                (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n+                (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n+                    return Ok(Integral(I32(::std::i32::MIN)))\n+                },\n+                (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n+                (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n+                    return Ok(Integral(I64(::std::i64::MIN)))\n+                },\n+                (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n+                (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n+                    match tcx.sess.target.int_type {\n+                        IntTy::I16 => if n == I16_OVERFLOW {\n+                            return Ok(Integral(Isize(Is16(::std::i16::MIN))));\n+                        },\n+                        IntTy::I32 => if n == I32_OVERFLOW {\n+                            return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n+                        },\n+                        IntTy::I64 => if n == I64_OVERFLOW {\n+                            return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n+                        },\n+                        _ => bug!(),\n+                    }\n+                },\n+                _ => {},\n+            }\n         }\n         match eval_const_expr_partial(tcx, &inner, ty_hint, fn_args)? {\n           Float(f) => Float(-f),"}, {"sha": "e99dfb9aa0f0e9b6a425e6c9329ff3896feb9899", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8f9c88c2d86135f4d1c170be67d9d15c63b358a/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8f9c88c2d86135f4d1c170be67d9d15c63b358a/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=b8f9c88c2d86135f4d1c170be67d9d15c63b358a", "patch": "@@ -15,6 +15,7 @@\n #[allow(unused_variables)]\n fn main() {\n     let x2: i8 = --128; //~ error: literal out of range for i8\n+    //~^ error: attempted to negate with overflow\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for f32"}]}