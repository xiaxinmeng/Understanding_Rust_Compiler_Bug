{"sha": "4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMzRhMWI1MGU5YTU1NGVmNmNjYTM5MGQxYzVmNjY2ZjBmODZlMmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-24T07:56:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-24T07:56:02Z"}, "message": "Pass `HasDataLayout` instead of the data layout itself", "tree": {"sha": "917638e4586f48caa6d4df6d154b321ad21d9433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/917638e4586f48caa6d4df6d154b321ad21d9433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "html_url": "https://github.com/rust-lang/rust/commit/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c07f424da9332c2728e04c124b88264dceb17de", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c07f424da9332c2728e04c124b88264dceb17de", "html_url": "https://github.com/rust-lang/rust/commit/9c07f424da9332c2728e04c124b88264dceb17de"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "db9157349f4fe29d0c2371f235de38560d1170f5", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -444,7 +444,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // FIXME(solson)\n         let dest_ptr = self.force_allocation(dest)?.to_ptr()?;\n \n-        let discr_dest = dest_ptr.offset(discr_offset, self.memory.layout)?;\n+        let discr_dest = dest_ptr.offset(discr_offset, &self)?;\n         self.memory.write_uint(discr_dest, discr_val, discr_size)?;\n \n         let dest = Lvalue::Ptr {\n@@ -594,7 +594,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 // FIXME(solson)\n                                 let dest = self.force_allocation(dest)?.to_ptr()?;\n \n-                                let dest = dest.offset(offset.bytes(), self.memory.layout)?;\n+                                let dest = dest.offset(offset.bytes(), &self)?;\n                                 let dest_size = self.type_size(ty)?\n                                     .expect(\"bad StructWrappedNullablePointer discrfield\");\n                                 self.memory.write_int(dest, 0, dest_size)?;\n@@ -654,7 +654,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let dest = Pointer::from(self.force_allocation(dest)?.to_ptr()?);\n \n                 for i in 0..length {\n-                    let elem_dest = dest.offset(i * elem_size, self.memory.layout)?;\n+                    let elem_dest = dest.offset(i * elem_size, &self)?;\n                     self.write_value_to_ptr(value, elem_dest, elem_ty)?;\n                 }\n             }\n@@ -920,7 +920,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n         let offset = offset.overflowing_mul(pointee_size).0;\n-        ptr.wrapping_signed_offset(offset, self.memory.layout)\n+        ptr.wrapping_signed_offset(offset, self)\n     }\n \n     pub(super) fn pointer_offset(&self, ptr: Pointer, pointee_ty: Ty<'tcx>, offset: i64) -> EvalResult<'tcx, Pointer> {\n@@ -935,7 +935,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n         return if let Some(offset) = offset.checked_mul(pointee_size) {\n-            let ptr = ptr.signed_offset(offset, self.memory.layout)?;\n+            let ptr = ptr.signed_offset(offset, self)?;\n             // Do not do bounds-checking for integers; they can never alias a normal pointer anyway.\n             if let PrimVal::Ptr(ptr) = ptr.into_inner_primval() {\n                 self.memory.check_bounds(ptr, false)?;\n@@ -1226,9 +1226,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let field_1_ty = self.get_field_ty(ty, 1)?;\n         let field_0_size = self.type_size(field_0_ty)?.expect(\"pair element type must be sized\");\n         let field_1_size = self.type_size(field_1_ty)?.expect(\"pair element type must be sized\");\n-        let layout = self.memory.layout;\n-        self.memory.write_primval(ptr.offset(field_0, layout)?.into(), a, field_0_size)?;\n-        self.memory.write_primval(ptr.offset(field_1, layout)?.into(), b, field_1_size)?;\n+        let field_0_ptr = ptr.offset(field_0, &self)?.into();\n+        let field_1_ptr = ptr.offset(field_1, &self)?.into();\n+        self.memory.write_primval(field_0_ptr, a, field_0_size)?;\n+        self.memory.write_primval(field_1_ptr, b, field_1_size)?;\n         Ok(())\n     }\n \n@@ -1345,7 +1346,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Ok(p.to_value())\n         } else {\n             trace!(\"reading fat pointer extra of type {}\", pointee_ty);\n-            let extra = ptr.offset(self.memory.pointer_size(), self.memory.layout)?;\n+            let extra = ptr.offset(self.memory.pointer_size(), self)?;\n             match self.tcx.struct_tail(pointee_ty).sty {\n                 ty::TyDynamic(..) => Ok(p.to_value_with_vtable(self.memory.read_ptr(extra)?.to_ptr()?)),\n                 ty::TySlice(..) |\n@@ -1540,8 +1541,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                     let src_field_offset = self.get_field_offset(src_ty, i)?.bytes();\n                     let dst_field_offset = self.get_field_offset(dest_ty, i)?.bytes();\n-                    let src_f_ptr = src_ptr.offset(src_field_offset, self.memory.layout)?;\n-                    let dst_f_ptr = dest.offset(dst_field_offset, self.memory.layout)?;\n+                    let src_f_ptr = src_ptr.offset(src_field_offset, &self)?;\n+                    let dst_f_ptr = dest.offset(dst_field_offset, &self)?;\n                     if src_fty == dst_fty {\n                         self.copy(src_f_ptr, dst_f_ptr.into(), src_fty)?;\n                     } else {"}, {"sha": "56e8c7f2b18ca6de467d2366a2a0fcd0e643022e", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -329,7 +329,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             _ => offset.bytes(),\n         };\n \n-        let ptr = base_ptr.offset(offset, self.memory.layout)?;\n+        let ptr = base_ptr.offset(offset, &self)?;\n \n         let field_ty = self.monomorphize(field_ty, self.substs());\n \n@@ -412,7 +412,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let usize = self.tcx.types.usize;\n                 let n = self.value_to_primval(n_ptr, usize)?.to_u64()?;\n                 assert!(n < len, \"Tried to access element {} of array/slice with length {}\", n, len);\n-                let ptr = base_ptr.offset(n * elem_size, self.memory.layout)?;\n+                let ptr = base_ptr.offset(n * elem_size, &self)?;\n                 (ptr, LvalueExtra::None, aligned)\n             }\n \n@@ -431,7 +431,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     u64::from(offset)\n                 };\n \n-                let ptr = base_ptr.offset(index * elem_size, self.memory.layout)?;\n+                let ptr = base_ptr.offset(index * elem_size, &self)?;\n                 (ptr, LvalueExtra::None, aligned)\n             }\n \n@@ -443,7 +443,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n                 let elem_size = self.type_size(elem_ty)?.expect(\"slice element must be sized\");\n                 assert!(u64::from(from) <= n - u64::from(to));\n-                let ptr = base_ptr.offset(u64::from(from) * elem_size, self.memory.layout)?;\n+                let ptr = base_ptr.offset(u64::from(from) * elem_size, &self)?;\n                 let extra = LvalueExtra::Length(n - u64::from(to) - u64::from(from));\n                 (ptr, extra, aligned)\n             }"}, {"sha": "815d1e2e841c2ef1c2e27fdc209a8838393f94c8", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -3,7 +3,7 @@ use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n use std::{fmt, iter, ptr, mem, io};\n \n use rustc::ty;\n-use rustc::ty::layout::{self, TargetDataLayout};\n+use rustc::ty::layout::{self, TargetDataLayout, HasDataLayout};\n use syntax::ast::Mutability;\n \n use error::{EvalError, EvalResult};\n@@ -73,26 +73,26 @@ impl<'tcx> MemoryPointer {\n         MemoryPointer { alloc_id, offset }\n     }\n \n-    pub(crate) fn wrapping_signed_offset<L: PointerArithmetic>(self, i: i64, l: L) -> Self {\n-        MemoryPointer::new(self.alloc_id, l.wrapping_signed_offset(self.offset, i))\n+    pub(crate) fn wrapping_signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> Self {\n+        MemoryPointer::new(self.alloc_id, cx.data_layout().wrapping_signed_offset(self.offset, i))\n     }\n \n-    pub(crate) fn overflowing_signed_offset<L: PointerArithmetic>(self, i: i128, l: L) -> (Self, bool) {\n-        let (res, over) = l.overflowing_signed_offset(self.offset, i);\n+    pub(crate) fn overflowing_signed_offset<C: HasDataLayout>(self, i: i128, cx: C) -> (Self, bool) {\n+        let (res, over) = cx.data_layout().overflowing_signed_offset(self.offset, i);\n         (MemoryPointer::new(self.alloc_id, res), over)\n     }\n \n-    pub(crate) fn signed_offset<L: PointerArithmetic>(self, i: i64, l: L) -> EvalResult<'tcx, Self> {\n-        Ok(MemoryPointer::new(self.alloc_id, l.signed_offset(self.offset, i)?))\n+    pub(crate) fn signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> EvalResult<'tcx, Self> {\n+        Ok(MemoryPointer::new(self.alloc_id, cx.data_layout().signed_offset(self.offset, i)?))\n     }\n \n-    pub(crate) fn overflowing_offset<L: PointerArithmetic>(self, i: u64, l: L) -> (Self, bool) {\n-        let (res, over) = l.overflowing_offset(self.offset, i);\n+    pub(crate) fn overflowing_offset<C: HasDataLayout>(self, i: u64, cx: C) -> (Self, bool) {\n+        let (res, over) = cx.data_layout().overflowing_offset(self.offset, i);\n         (MemoryPointer::new(self.alloc_id, res), over)\n     }\n \n-    pub(crate) fn offset<L: PointerArithmetic>(self, i: u64, l: L) -> EvalResult<'tcx, Self> {\n-        Ok(MemoryPointer::new(self.alloc_id, l.offset(self.offset, i)?))\n+    pub(crate) fn offset<C: HasDataLayout>(self, i: u64, cx: C) -> EvalResult<'tcx, Self> {\n+        Ok(MemoryPointer::new(self.alloc_id, cx.data_layout().offset(self.offset, i)?))\n     }\n }\n \n@@ -1248,3 +1248,10 @@ impl<'a, 'tcx> layout::HasDataLayout for &'a EvalContext<'a, 'tcx> {\n         self.memory().layout\n     }\n }\n+\n+impl<'c, 'b, 'a, 'tcx> layout::HasDataLayout for &'c &'b mut EvalContext<'a, 'tcx> {\n+    #[inline]\n+    fn data_layout(&self) -> &TargetDataLayout {\n+        self.memory().layout\n+    }\n+}"}, {"sha": "930fc5c4047dedd89992ed0b513e46aaeaaa1ef7", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -310,11 +310,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(match bin_op {\n             Sub =>\n                 // The only way this can overflow is by underflowing, so signdeness of the right operands does not matter\n-                map_to_primval(left.overflowing_signed_offset(-right, self.memory.layout)),\n+                map_to_primval(left.overflowing_signed_offset(-right, self)),\n             Add if signed =>\n-                map_to_primval(left.overflowing_signed_offset(right, self.memory.layout)),\n+                map_to_primval(left.overflowing_signed_offset(right, self)),\n             Add if !signed =>\n-                map_to_primval(left.overflowing_offset(right as u64, self.memory.layout)),\n+                map_to_primval(left.overflowing_offset(right as u64, self)),\n \n             BitAnd if !signed => {\n                 let base_mask : u64 = !(self.memory.get(left.alloc_id)?.align - 1);"}, {"sha": "6e54420e2ebef9ab9c7d1a00db8b0068c23dd43f", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Layout::StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n                         if variant_index as u64 != nndiscr {\n                             let (offset, ty) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n-                            let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(offset.bytes(), self.memory.layout)?;\n+                            let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(offset.bytes(), &self)?;\n                             trace!(\"struct wrapped nullable pointer type: {}\", ty);\n                             // only the pointer part of a fat pointer is used for this space optimization\n                             let discr_size = self.type_size(ty)?.expect(\"bad StructWrappedNullablePointer discrfield\");"}, {"sha": "a44713f221f8c16388c98a4972610f646503ee1d", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                     Value::ByRef(ptr, aligned) => {\n                                         assert!(aligned, \"Unaligned ByRef-values cannot occur as function arguments\");\n                                         for ((offset, ty), arg_local) in offsets.zip(fields).zip(arg_locals) {\n-                                            let arg = Value::ByRef(ptr.offset(offset, self.memory.layout)?, true);\n+                                            let arg = Value::ByRef(ptr.offset(offset, &self)?, true);\n                                             let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n                                             trace!(\"writing arg {:?} to {:?} (type: {})\", arg, dest, ty);\n                                             self.write_value(arg, dest, ty)?;\n@@ -398,7 +398,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::InstanceDef::Virtual(_, idx) => {\n                 let ptr_size = self.memory.pointer_size();\n                 let (_, vtable) = self.eval_operand(&arg_operands[0])?.into_ptr_vtable_pair(&mut self.memory)?;\n-                let fn_ptr = self.memory.read_ptr(vtable.offset(ptr_size * (idx as u64 + 3), self.memory.layout)?)?;\n+                let fn_ptr = self.memory.read_ptr(vtable.offset(ptr_size * (idx as u64 + 3), &self)?)?;\n                 let instance = self.memory.get_fn(fn_ptr.to_ptr()?)?;\n                 let mut arg_operands = arg_operands.to_vec();\n                 let ty = self.operand_ty(&arg_operands[0]);\n@@ -488,7 +488,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n                 let (offset, ty) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield)?;\n-                let nonnull = adt_ptr.offset(offset.bytes(), self.memory.layout)?;\n+                let nonnull = adt_ptr.offset(offset.bytes(), self)?;\n                 trace!(\"struct wrapped nullable pointer type: {}\", ty);\n                 // only the pointer part of a fat pointer is used for this space optimization\n                 let discr_size = self.type_size(ty)?.expect(\"bad StructWrappedNullablePointer discrfield\");\n@@ -746,7 +746,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let val = self.value_to_primval(args[1], usize)?.to_u64()? as u8;\n                 let num = self.value_to_primval(args[2], usize)?.to_u64()?;\n                 if let Some(idx) = self.memory.read_bytes(ptr, num)?.iter().rev().position(|&c| c == val) {\n-                    let new_ptr = ptr.offset(num - idx as u64 - 1, self.memory.layout)?;\n+                    let new_ptr = ptr.offset(num - idx as u64 - 1, &self)?;\n                     self.write_ptr(dest, new_ptr, dest_ty)?;\n                 } else {\n                     self.write_null(dest, dest_ty)?;\n@@ -758,7 +758,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let val = self.value_to_primval(args[1], usize)?.to_u64()? as u8;\n                 let num = self.value_to_primval(args[2], usize)?.to_u64()?;\n                 if let Some(idx) = self.memory.read_bytes(ptr, num)?.iter().position(|&c| c == val) {\n-                    let new_ptr = ptr.offset(idx as u64, self.memory.layout)?;\n+                    let new_ptr = ptr.offset(idx as u64, &self)?;\n                     self.write_ptr(dest, new_ptr, dest_ty)?;\n                 } else {\n                     self.write_null(dest, dest_ty)?;\n@@ -814,9 +814,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 if let Some((name, value)) = new {\n                     // +1 for the null terminator\n                     let value_copy = self.memory.allocate((value.len() + 1) as u64, 1, Kind::Env)?;\n-                    let layout = self.memory.layout;\n                     self.memory.write_bytes(value_copy.into(), &value)?;\n-                    self.memory.write_bytes(value_copy.offset(value.len() as u64, layout)?.into(), &[0])?;\n+                    let trailing_null = value_copy.offset(value.len() as u64, &self)?.into();\n+                    self.memory.write_bytes(trailing_null, &[0])?;\n                     if let Some(var) = self.env_vars.insert(name.to_owned(), value_copy) {\n                         self.memory.deallocate(var, None, Kind::Env)?;\n                     }"}, {"sha": "fa5e5da8592fb7854b26f0b8f678b01041e7ee0a", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -57,15 +57,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let drop = self.memory.create_fn_alloc(drop);\n         self.memory.write_ptr(vtable, drop)?;\n \n-        let layout = self.memory.layout;\n-        self.memory.write_usize(vtable.offset(ptr_size, layout)?, size)?;\n-        self.memory.write_usize(vtable.offset(ptr_size * 2, layout)?, align)?;\n+        let size_ptr = vtable.offset(ptr_size, &self)?;\n+        self.memory.write_usize(size_ptr, size)?;\n+        let align_ptr = vtable.offset(ptr_size * 2, &self)?;\n+        self.memory.write_usize(align_ptr, align)?;\n \n         for (i, method) in ::rustc::traits::get_vtable_methods(self.tcx, trait_ref).enumerate() {\n             if let Some((def_id, substs)) = method {\n                 let instance = eval_context::resolve(self.tcx, def_id, substs);\n                 let fn_ptr = self.memory.create_fn_alloc(instance);\n-                self.memory.write_ptr(vtable.offset(ptr_size * (3 + i as u64), layout)?, fn_ptr)?;\n+                let method_ptr = vtable.offset(ptr_size * (3 + i as u64), &self)?;\n+                self.memory.write_ptr(method_ptr, fn_ptr)?;\n             }\n         }\n \n@@ -86,8 +88,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     pub fn read_size_and_align_from_vtable(&self, vtable: MemoryPointer) -> EvalResult<'tcx, (u64, u64)> {\n         let pointer_size = self.memory.pointer_size();\n-        let size = self.memory.read_usize(vtable.offset(pointer_size, self.memory.layout)?)?;\n-        let align = self.memory.read_usize(vtable.offset(pointer_size * 2, self.memory.layout)?)?;\n+        let size = self.memory.read_usize(vtable.offset(pointer_size, self)?)?;\n+        let align = self.memory.read_usize(vtable.offset(pointer_size * 2, self)?)?;\n         Ok((size, align))\n     }\n "}, {"sha": "a4115ddb5ccf426bdc341b5da7f80bdfa091dbd8", "filename": "src/librustc_mir/interpret/value.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalue.rs?ref=4a34a1b50e9a554ef6cca390d1c5f666f0f86e2d", "patch": "@@ -3,6 +3,7 @@\n \n use error::{EvalError, EvalResult};\n use memory::{Memory, MemoryPointer, HasMemory, PointerArithmetic};\n+use rustc::ty::layout::HasDataLayout;\n \n pub(super) fn bytes_to_f32(bytes: u128) -> f32 {\n     f32::from_bits(bytes as u32)\n@@ -59,7 +60,8 @@ impl<'tcx> Pointer {\n         self.primval\n     }\n \n-    pub(crate) fn signed_offset<L: PointerArithmetic>(self, i: i64, layout: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> EvalResult<'tcx, Self> {\n+        let layout = cx.data_layout();\n         match self.primval {\n             PrimVal::Bytes(b) => {\n                 assert_eq!(b as u64 as u128, b);\n@@ -70,7 +72,8 @@ impl<'tcx> Pointer {\n         }\n     }\n \n-    pub(crate) fn offset<L: PointerArithmetic>(self, i: u64, layout: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn offset<C: HasDataLayout>(self, i: u64, cx: C) -> EvalResult<'tcx, Self> {\n+        let layout = cx.data_layout();\n         match self.primval {\n             PrimVal::Bytes(b) => {\n                 assert_eq!(b as u64 as u128, b);\n@@ -81,7 +84,8 @@ impl<'tcx> Pointer {\n         }\n     }\n \n-    pub(crate) fn wrapping_signed_offset<L: PointerArithmetic>(self, i: i64, layout: L) -> EvalResult<'tcx, Self> {\n+    pub(crate) fn wrapping_signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> EvalResult<'tcx, Self> {\n+        let layout = cx.data_layout();\n         match self.primval {\n             PrimVal::Bytes(b) => {\n                 assert_eq!(b as u64 as u128, b);"}]}