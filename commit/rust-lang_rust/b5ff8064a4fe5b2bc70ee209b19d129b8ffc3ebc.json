{"sha": "b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZmY4MDY0YTRmZTViMmJjNzBlZTIwOWIxOWQxMjliOGZmYzNlYmM=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-01-17T21:16:52Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-01-23T19:55:06Z"}, "message": "Add MIN/MAX associated constants to the integer types", "tree": {"sha": "9b96e3635c88151e99bb373a760ad8e1aa7ff965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b96e3635c88151e99bb373a760ad8e1aa7ff965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "html_url": "https://github.com/rust-lang/rust/commit/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bbe7915e2b663ac84244918d6d06e0747ed33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bbe7915e2b663ac84244918d6d06e0747ed33e", "html_url": "https://github.com/rust-lang/rust/commit/e0bbe7915e2b663ac84244918d6d06e0747ed33e"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "e717d0e42bb000f61122e28cd88f9b94ffc914a5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "patch": "@@ -245,42 +245,54 @@ macro_rules! int_impl {\n      $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n      $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         doc_comment! {\n-            concat!(\"Returns the smallest value that can be represented by this integer type.\n+            concat!(\"The smallest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::min_value(), \", stringify!($Min), \");\",\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, \", stringify!($Min), \");\",\n $EndFeature, \"\n ```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline(always)]\n-            #[rustc_promotable]\n-            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self {\n-                !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n-            }\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n         }\n \n         doc_comment! {\n-            concat!(\"Returns the largest value that can be represented by this integer type.\n+            concat!(\"The largest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value(), \", stringify!($Max), \");\",\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($Max), \");\",\n $EndFeature, \"\n ```\"),\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MAX: Self = !Self::MIN;\n+        }\n+\n+        doc_comment! {\n+            \"Returns the smallest value that can be represented by this integer type.\",\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline(always)]\n+            #[rustc_promotable]\n+            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self {\n+                Self::MIN\n+            }\n+        }\n+\n+        doc_comment! {\n+            \"Returns the largest value that can be represented by this integer type.\",\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline(always)]\n             #[rustc_promotable]\n             #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n             pub const fn max_value() -> Self {\n-                !Self::min_value()\n+                Self::MAX\n             }\n         }\n \n@@ -2342,38 +2354,50 @@ macro_rules! uint_impl {\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n         $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         doc_comment! {\n-            concat!(\"Returns the smallest value that can be represented by this integer type.\n+            concat!(\"The smallest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::min_value(), 0);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, 0);\", $EndFeature, \"\n ```\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_promotable]\n-            #[inline(always)]\n-            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self { 0 }\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MIN: Self = 0;\n         }\n \n         doc_comment! {\n-            concat!(\"Returns the largest value that can be represented by this integer type.\n+            concat!(\"The largest value that can be represented by this integer type.\n \n # Examples\n \n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value(), \",\n-stringify!($MaxV), \");\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($MaxV), \");\",\n+$EndFeature, \"\n ```\"),\n+            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            pub const MAX: Self = !0;\n+        }\n+\n+        doc_comment! {\n+            \"Returns the smallest value that can be represented by this integer type.\",\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_promotable]\n+            #[inline(always)]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self { Self::MIN }\n+        }\n+\n+        doc_comment! {\n+            \"Returns the largest value that can be represented by this integer type.\",\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_promotable]\n             #[inline(always)]\n             #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn max_value() -> Self { !0 }\n+            pub const fn max_value() -> Self { Self::MAX }\n         }\n \n         doc_comment! {"}]}