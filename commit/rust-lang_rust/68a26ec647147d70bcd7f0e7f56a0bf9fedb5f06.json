{"sha": "68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YTI2ZWM2NDcxNDdkNzBiY2Q3ZjBlN2Y1NmEwYmY5ZmVkYjVmMDY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-11-25T07:26:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-11-25T07:29:01Z"}, "message": "Stabilize the int_to_from_bytes feature\n\nFixes #52963", "tree": {"sha": "4443162561b400e87223ca95b4409a85bcde0b53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4443162561b400e87223ca95b4409a85bcde0b53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "html_url": "https://github.com/rust-lang/rust/commit/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37961dbd2d84a29be49007a5770b96e296f5f349", "url": "https://api.github.com/repos/rust-lang/rust/commits/37961dbd2d84a29be49007a5770b96e296f5f349", "html_url": "https://github.com/rust-lang/rust/commit/37961dbd2d84a29be49007a5770b96e296f5f349"}], "stats": {"total": 52, "additions": 14, "deletions": 38}, "files": [{"sha": "9deae12482976cf75b9ddca0abb3a3f8ce11ddf3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "patch": "@@ -1921,12 +1921,10 @@ big-endian (network) byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -1941,12 +1939,10 @@ little-endian byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -1969,16 +1965,14 @@ instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_ne_bytes();\n assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -1993,12 +1987,10 @@ big endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_be_bytes(\", $be_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -2014,12 +2006,10 @@ little endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_le_bytes(\", $le_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -2041,16 +2031,14 @@ appropriate instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_ne_bytes(if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -3663,12 +3651,10 @@ big-endian (network) byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -3683,12 +3669,10 @@ little-endian byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -3711,16 +3695,14 @@ instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_ne_bytes();\n assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -3735,12 +3717,10 @@ big endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_be_bytes(\", $be_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -3756,12 +3736,10 @@ little endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_le_bytes(\", $le_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -3783,16 +3761,14 @@ appropriate instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_ne_bytes(if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {"}, {"sha": "e199c43858521bbc8e3e70ad913824f03076ccfc", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_int_conversion, const_int_ops, reverse_bits, int_to_from_bytes)]\n+#![feature(const_int_conversion, const_int_ops, reverse_bits)]\n \n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);"}, {"sha": "2a20f0df15ca2630512b713ab87c8fafe55c0a16", "filename": "src/test/ui/consts/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs?ref=68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(reverse_bits, int_to_from_bytes)]\n+#![feature(reverse_bits)]\n \n fn main() {\n     let x: &'static i32 = &(5_i32.reverse_bits());"}]}