{"sha": "d288472b297c4df82f293d2a8ea9c7098e3a70b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODg0NzJiMjk3YzRkZjgyZjI5M2QyYThlYTljNzA5OGUzYTcwYjM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-09T01:29:00Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-09T01:29:07Z"}, "message": "Handle CEnum layouts with unsigned representations.", "tree": {"sha": "58a56e7ad159aab0fbe4e7cb5117b0460e36f567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58a56e7ad159aab0fbe4e7cb5117b0460e36f567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d288472b297c4df82f293d2a8ea9c7098e3a70b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d288472b297c4df82f293d2a8ea9c7098e3a70b3", "html_url": "https://github.com/rust-lang/rust/commit/d288472b297c4df82f293d2a8ea9c7098e3a70b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d288472b297c4df82f293d2a8ea9c7098e3a70b3/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387", "html_url": "https://github.com/rust-lang/rust/commit/9e289fa0aa93d3a3ea80c7edd0b6e035fa360387"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "fe327b75452d8cdc3c2120eae240501cae8d253d", "filename": "src/interpreter.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d288472b297c4df82f293d2a8ea9c7098e3a70b3/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d288472b297c4df82f293d2a8ea9c7098e3a70b3/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=d288472b297c4df82f293d2a8ea9c7098e3a70b3", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 let adt_layout = self.type_layout(self.lvalue_ty(discr));\n \n                  match *adt_layout {\n-                    Layout::General { discr, .. } => {\n+                    Layout::General { discr, .. } | Layout::CEnum { discr, .. } => {\n                         let discr_size = discr.size().bytes();\n                         let discr_val = try!(self.memory.read_uint(adt_ptr, discr_size as usize));\n \n@@ -283,7 +283,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                         TerminatorTarget::Block(targets[target as usize])\n                     }\n \n-                    _ => panic!(\"attmpted to switch on non-aggregate type\"),\n+                    _ => panic!(\"attempted to switch on non-aggregate type\"),\n                 }\n             }\n \n@@ -639,14 +639,15 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             }\n \n             Aggregate(ref kind, ref operands) => {\n+                use rustc::ty::layout::Layout::*;\n                 match *dest_layout {\n-                    Layout::Univariant { ref variant, .. } => {\n+                    Univariant { ref variant, .. } => {\n                         let offsets = iter::once(0)\n                             .chain(variant.offset_after_field.iter().map(|s| s.bytes()));\n                         try!(self.assign_fields(dest, offsets, operands));\n                     }\n \n-                    Layout::Array { .. } => {\n+                    Array { .. } => {\n                         let elem_size = match dest_ty.sty {\n                             ty::TyArray(elem_ty, _) => self.type_size(elem_ty) as u64,\n                             _ => panic!(\"tried to assign {:?} to non-array type {:?}\",\n@@ -656,7 +657,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                         try!(self.assign_fields(dest, offsets, operands));\n                     }\n \n-                    Layout::General { discr, ref variants, .. } => {\n+                    General { discr, ref variants, .. } => {\n                         if let mir::AggregateKind::Adt(adt_def, variant, _) = *kind {\n                             let discr_val = adt_def.variants[variant].disr_val.to_u64_unchecked();\n                             let discr_size = discr.size().bytes() as usize;\n@@ -670,7 +671,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                         }\n                     }\n \n-                    Layout::RawNullablePointer { nndiscr, .. } => {\n+                    RawNullablePointer { nndiscr, .. } => {\n                         if let mir::AggregateKind::Adt(_, variant, _) = *kind {\n                             if nndiscr == variant as u64 {\n                                 assert_eq!(operands.len(), 1);\n@@ -687,6 +688,21 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                         }\n                     }\n \n+                    CEnum { discr, signed, min, max } => {\n+                        assert_eq!(operands.len(), 0);\n+                        if let mir::AggregateKind::Adt(adt_def, variant, _) = *kind {\n+                            if signed {\n+                                unimplemented!()\n+                            } else {\n+                                let val = adt_def.variants[variant].disr_val.to_u64().unwrap();\n+                                let size = discr.size().bytes() as usize;\n+                                try!(self.memory.write_uint(dest, val, size));\n+                            }\n+                        } else {\n+                            panic!(\"tried to assign {:?} to Layout::CEnum\", kind);\n+                        }\n+                    }\n+\n                     _ => panic!(\"can't handle destination layout {:?} when assigning {:?}\",\n                                 dest_layout, kind),\n                 }"}]}