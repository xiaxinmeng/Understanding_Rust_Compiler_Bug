{"sha": "33a3d6d88f76bfae770983ee50e36e23cc4c7655", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYTNkNmQ4OGY3NmJmYWU3NzA5ODNlZTUwZTM2ZTIzY2M0Yzc2NTU=", "commit": {"author": {"name": "Vojtech Kral", "email": "vojtech@kral.hk", "date": "2015-01-28T12:48:27Z"}, "committer": {"name": "Vojtech Kral", "email": "vojtech@kral.hk", "date": "2015-01-28T12:48:27Z"}, "message": "Thread native name setting, fix #10302", "tree": {"sha": "ec8874adf445589951286bc64619d27462c3709d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8874adf445589951286bc64619d27462c3709d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33a3d6d88f76bfae770983ee50e36e23cc4c7655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33a3d6d88f76bfae770983ee50e36e23cc4c7655", "html_url": "https://github.com/rust-lang/rust/commit/33a3d6d88f76bfae770983ee50e36e23cc4c7655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33a3d6d88f76bfae770983ee50e36e23cc4c7655/comments", "author": {"login": "vojtechkral", "id": 424891, "node_id": "MDQ6VXNlcjQyNDg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/424891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtechkral", "html_url": "https://github.com/vojtechkral", "followers_url": "https://api.github.com/users/vojtechkral/followers", "following_url": "https://api.github.com/users/vojtechkral/following{/other_user}", "gists_url": "https://api.github.com/users/vojtechkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtechkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtechkral/subscriptions", "organizations_url": "https://api.github.com/users/vojtechkral/orgs", "repos_url": "https://api.github.com/users/vojtechkral/repos", "events_url": "https://api.github.com/users/vojtechkral/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtechkral/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vojtechkral", "id": 424891, "node_id": "MDQ6VXNlcjQyNDg5MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/424891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtechkral", "html_url": "https://github.com/vojtechkral", "followers_url": "https://api.github.com/users/vojtechkral/followers", "following_url": "https://api.github.com/users/vojtechkral/following{/other_user}", "gists_url": "https://api.github.com/users/vojtechkral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtechkral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtechkral/subscriptions", "organizations_url": "https://api.github.com/users/vojtechkral/orgs", "repos_url": "https://api.github.com/users/vojtechkral/repos", "events_url": "https://api.github.com/users/vojtechkral/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtechkral/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c155208de42de5761231726e35614b4499b5a137", "url": "https://api.github.com/repos/rust-lang/rust/commits/c155208de42de5761231726e35614b4499b5a137", "html_url": "https://github.com/rust-lang/rust/commit/c155208de42de5761231726e35614b4499b5a137"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "7c9758ca9242d88cd28a2685d6a3224c270c5dfe", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33a3d6d88f76bfae770983ee50e36e23cc4c7655/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a3d6d88f76bfae770983ee50e36e23cc4c7655/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=33a3d6d88f76bfae770983ee50e36e23cc4c7655", "patch": "@@ -56,6 +56,10 @@ pub fn stack_guard() -> uint {\n \n pub fn set(stack_bounds: (uint, uint), stack_guard: uint, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n+    match thread.name() {\n+        Some(name) => unsafe { ::sys::thread::set_name(name.as_slice()); },\n+        None => {}\n+    }\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n         stack_bounds: stack_bounds,\n         stack_guard: stack_guard,"}, {"sha": "59c2badaf626edd74be63e21b10437e3a741cda2", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/33a3d6d88f76bfae770983ee50e36e23cc4c7655/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a3d6d88f76bfae770983ee50e36e23cc4c7655/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=33a3d6d88f76bfae770983ee50e36e23cc4c7655", "patch": "@@ -209,11 +209,19 @@ pub unsafe fn create(stack: uint, p: Thunk) -> rust_thread {\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub unsafe fn set_name(name: &str) {\n-    // Using prctl() rather than pthread_setname_np(),\n-    // because pthread_setname_np() wasn't added until glibc 2.12\n-    // PR_SET_NAME since Linux 2.6.9\n+    // pthread_setname_np() since glibc 2.12\n+    // availability autodetected via weak linkage\n     let cname = CString::from_slice(name.as_bytes());\n-    prctl(15i32 /* = PR_SET_NAME */, cname.as_ptr() as u64, 0u64, 0u64, 0u64);\n+    type F = unsafe extern \"C\" fn(libc::pthread_t, *const libc::c_char) -> libc::c_int;\n+    extern {\n+        #[linkage = \"extern_weak\"]\n+        static pthread_setname_np: *const ();\n+    }\n+    if !pthread_setname_np.is_null() {\n+        unsafe {\n+            mem::transmute::<*const (), F>(pthread_setname_np)(pthread_self(), cname.as_ptr());\n+        }\n+    }\n }\n \n #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n@@ -270,15 +278,6 @@ fn min_stack_size(_: *const libc::pthread_attr_t) -> libc::size_t {\n     PTHREAD_STACK_MIN\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-extern {\n-    fn prctl(option: libc::c_int,\n-        arg2: libc::c_ulong,\n-        arg3: libc::c_ulong,\n-        arg4: libc::c_ulong,\n-        arg5: libc::c_ulong) -> libc::c_int;\n-}\n-\n #[cfg(any(target_os = \"linux\"))]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n@@ -294,15 +293,15 @@ extern {\n #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n-    fn pthread_set_name_np(tid: libc::pthread_t, name: *const c_char);\n+    fn pthread_set_name_np(tid: libc::pthread_t, name: *const libc::c_char);\n }\n \n #[cfg(target_os = \"macos\")]\n extern {\n     pub fn pthread_self() -> libc::pthread_t;\n     pub fn pthread_get_stackaddr_np(thread: libc::pthread_t) -> *mut libc::c_void;\n     pub fn pthread_get_stacksize_np(thread: libc::pthread_t) -> libc::size_t;\n-    fn pthread_setname_np(name: *const c_char) -> libc::c_int;\n+    fn pthread_setname_np(name: *const libc::c_char) -> libc::c_int;\n }\n \n extern {"}, {"sha": "a86b82b8c62ec210817f71c2d8f6620d76915b13", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33a3d6d88f76bfae770983ee50e36e23cc4c7655/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a3d6d88f76bfae770983ee50e36e23cc4c7655/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=33a3d6d88f76bfae770983ee50e36e23cc4c7655", "patch": "@@ -275,10 +275,6 @@ impl Builder {\n             unsafe {\n                 stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n             }\n-            match their_thread.name() {\n-                Some(thename) => unsafe { imp::set_name(thename.as_slice()); },\n-                None => {}\n-            }\n             thread_info::set(\n                 (my_stack_bottom, my_stack_top),\n                 unsafe { imp::guard::current() },"}]}