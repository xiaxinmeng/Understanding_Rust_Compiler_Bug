{"sha": "29acd398004555695bbf29eb054b12381e955cbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWNkMzk4MDA0NTU1Njk1YmJmMjllYjA1NGIxMjM4MWU5NTVjYmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-01-01T19:45:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-01-01T19:49:18Z"}, "message": "Don't emit arg count diagnostics for method calls with unknown receiver\n\nFixes #7098.", "tree": {"sha": "225492cb0e0a8292d670c8153a548593831fa5c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/225492cb0e0a8292d670c8153a548593831fa5c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29acd398004555695bbf29eb054b12381e955cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29acd398004555695bbf29eb054b12381e955cbf", "html_url": "https://github.com/rust-lang/rust/commit/29acd398004555695bbf29eb054b12381e955cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29acd398004555695bbf29eb054b12381e955cbf/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92c9fdc52ee04a88ee2950a93afc34b4870616b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92c9fdc52ee04a88ee2950a93afc34b4870616b", "html_url": "https://github.com/rust-lang/rust/commit/c92c9fdc52ee04a88ee2950a93afc34b4870616b"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "b4e453411a5945cc28f4faf3030780183f185884", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29acd398004555695bbf29eb054b12381e955cbf/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29acd398004555695bbf29eb054b12381e955cbf/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=29acd398004555695bbf29eb054b12381e955cbf", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         // FIXME: Due to shortcomings in the current type system implementation, only emit this\n         // diagnostic if there are no type mismatches in the containing function.\n         if self.infer.type_mismatches.iter().next().is_some() {\n-            return Some(());\n+            return None;\n         }\n \n         let is_method_call = matches!(expr, Expr::MethodCall { .. });\n@@ -170,6 +170,14 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 let mut args = args.clone();\n                 args.insert(0, *receiver);\n \n+                let receiver = &self.infer.type_of_expr[*receiver];\n+                if receiver.strip_references().is_unknown() {\n+                    // if the receiver is of unknown type, it's very likely we\n+                    // don't know enough to correctly resolve the method call.\n+                    // This is kind of a band-aid for #6975.\n+                    return None;\n+                }\n+\n                 // FIXME: note that we erase information about substs here. This\n                 // is not right, but, luckily, doesn't matter as we care only\n                 // about the number of params\n@@ -504,6 +512,22 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn method_unknown_receiver() {\n+        // note: this is incorrect code, so there might be errors on this in the\n+        // future, but we shouldn't emit an argument count diagnostic here\n+        check_diagnostics(\n+            r#\"\n+trait Foo { fn method(&self, arg: usize) {} }\n+\n+fn f() {\n+    let x;\n+    x.method();\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn tuple_struct() {\n         check_diagnostics("}, {"sha": "e00c7e1766d8ca9c15392d1707a07833b083d637", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29acd398004555695bbf29eb054b12381e955cbf/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29acd398004555695bbf29eb054b12381e955cbf/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=29acd398004555695bbf29eb054b12381e955cbf", "patch": "@@ -791,6 +791,10 @@ impl Ty {\n         matches!(self, Ty::Apply(ApplicationTy { ctor: TypeCtor::Never, .. }))\n     }\n \n+    pub fn is_unknown(&self) -> bool {\n+        matches!(self, Ty::Unknown)\n+    }\n+\n     /// If this is a `dyn Trait` type, this returns the `Trait` part.\n     pub fn dyn_trait_ref(&self) -> Option<&TraitRef> {\n         match self {"}]}