{"sha": "7dee5f824dad65d9edffb4de22aad248bd83faf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZWU1ZjgyNGRhZDY1ZDllZGZmYjRkZTIyYWFkMjQ4YmQ4M2ZhZjk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-04T13:04:25Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-16T14:42:23Z"}, "message": "hir: introduce lang items for AST lowering\n\nThis commit adds new lang items which will be used in AST lowering once\n`QPath::LangItem` is introduced.\n\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "49543250625f9ce993aa5ac9d7fba432982d3eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49543250625f9ce993aa5ac9d7fba432982d3eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dee5f824dad65d9edffb4de22aad248bd83faf9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl85Rc8ACgkQJZLnbIc4\nH9kfpBAAgRA+wt8kIqEPGQDFpCRDUzMBC35rO73kLvMvIWc8JzrDELsp8bTNAL62\nJiQyMVUbLk6LsiJMGNgoaPcHPhhlpabUgpyN5PvhRDUCuNPXuQX36j1aiwzTECL5\nRqtwGEqGjgCLETca/gcau2fc3/63Caksx6tgF6MTkx6smCpuoUrhzzcANYVT3HH6\nqE7D3VI1ZG6IsD+LSguQgwM4z32IuTc5M0q2nw8tFImg+0QFOxIHjspm/HCrvErp\n27GNGYStpq1ZnNk/6E0KBXQoBZ7rxXvfUGcy0x+7CSNiH2Xptxzp0ZXCg0DZzKMu\nv4UxlOP/7ElozbNfZhK4Z4c82965T23FM1cmgTnKqSxyEd67zIJjWO76GSvYtJWj\n14LyTeU+JYDvCnRAHJ5H1y5oMsxpRE+FGEgGp66shaEkMFWoE4YaHL600pv6FkGu\nmLni2eUdwHe1v+WA8svN8it6qnguRT7D4i9a7U8r6ciZimjmHFVaA2MZvh9Lwi1s\n/KKZpEnZ9FDDxkdiRkXpZCHizk0J1jKClBergK/PXnHCaE+4i/JChjwRSq+OgtcN\nARwkdhhNY5oha/Dyvva1YstW+VoYpGI68pvqfdNzRwN15NLzWeooAlUCbhjwpNHS\nIZo9Fjk5IwAIy0m6tfuja65FUdbcVNSaFrLds6QiHwm4KG1BSgM=\n=979F\n-----END PGP SIGNATURE-----", "payload": "tree 49543250625f9ce993aa5ac9d7fba432982d3eec\nparent 734441c1ae5f0766842d37db68f606a1bca49836\nauthor David Wood <david@davidtw.co> 1596546265 +0100\ncommitter David Wood <david@davidtw.co> 1597588943 +0100\n\nhir: introduce lang items for AST lowering\n\nThis commit adds new lang items which will be used in AST lowering once\n`QPath::LangItem` is introduced.\n\nCo-authored-by: Matthew Jasper <mjjasper1@gmail.com>\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dee5f824dad65d9edffb4de22aad248bd83faf9", "html_url": "https://github.com/rust-lang/rust/commit/7dee5f824dad65d9edffb4de22aad248bd83faf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dee5f824dad65d9edffb4de22aad248bd83faf9/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734441c1ae5f0766842d37db68f606a1bca49836", "url": "https://api.github.com/repos/rust-lang/rust/commits/734441c1ae5f0766842d37db68f606a1bca49836", "html_url": "https://github.com/rust-lang/rust/commit/734441c1ae5f0766842d37db68f606a1bca49836"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "fcd07befae50458dcc8661a1a79617394265f500", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -385,6 +385,7 @@ pub trait Into<T>: Sized {\n ))]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n+    #[cfg_attr(not(bootstrap), lang = \"from\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(_: T) -> Self;\n }"}, {"sha": "8169c146137c224b4ee8016c69e3e3b76dfd5ee4", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -96,6 +96,7 @@ pub trait Future {\n     /// [`Context`]: ../task/struct.Context.html\n     /// [`Waker`]: ../task/struct.Waker.html\n     /// [`Waker::wake`]: ../task/struct.Waker.html#method.wake\n+    #[cfg_attr(not(bootstrap), lang = \"poll\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n }"}, {"sha": "d44ef857c133a298e09c7b74e845335b8e9705da", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -53,6 +53,7 @@ unsafe impl Sync for ResumeTy {}\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n+#[cfg_attr(not(bootstrap), lang = \"from_generator\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n@@ -85,6 +86,7 @@ where\n     GenFuture(gen)\n }\n \n+#[cfg_attr(not(bootstrap), lang = \"get_context\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]"}, {"sha": "84c7787a18fd17393d372c721708834ed34fb714", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -235,6 +235,7 @@ pub trait IntoIterator {\n     /// assert_eq!(Some(3), iter.next());\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"into_iter\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_iter(self) -> Self::IntoIter;\n }"}, {"sha": "81d8f27ec19b04fc2e8cfe27fa72d06b51e72d8a", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -129,6 +129,7 @@ pub trait Iterator {\n     /// assert_eq!(None, iter.next());\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"next\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next(&mut self) -> Option<Self::Item>;\n "}, {"sha": "e9ab82b5398496d2996d8355b55090db6e0f33d9", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -38,6 +38,7 @@ use crate::hash::Hash;\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[cfg_attr(not(bootstrap), lang = \"RangeFull\")]\n #[doc(alias = \"..\")]\n #[derive(Copy, Clone, Default, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -70,6 +71,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1.. 3], [  1,2    ]);  // Range\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n+#[cfg_attr(not(bootstrap), lang = \"Range\")]\n #[doc(alias = \"..\")]\n #[derive(Clone, Default, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -178,6 +180,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n /// ```\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n+#[cfg_attr(not(bootstrap), lang = \"RangeFrom\")]\n #[doc(alias = \"..\")]\n #[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -260,6 +263,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[cfg_attr(not(bootstrap), lang = \"RangeTo\")]\n #[doc(alias = \"..\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -328,6 +332,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1.. 3], [  1,2    ]);\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n+#[cfg_attr(not(bootstrap), lang = \"RangeInclusive\")]\n #[doc(alias = \"..=\")]\n #[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n@@ -359,6 +364,7 @@ impl<Idx> RangeInclusive<Idx> {\n     ///\n     /// assert_eq!(3..=5, RangeInclusive::new(3, 5));\n     /// ```\n+    #[cfg_attr(not(bootstrap), lang = \"range_inclusive_new\")]\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n@@ -555,6 +561,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// [`IntoIterator`]: ../iter/trait.Iterator.html\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n+#[cfg_attr(not(bootstrap), lang = \"RangeToInclusive\")]\n #[doc(alias = \"..=\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"}, {"sha": "e6b05cc641e35308b4a2e4b119ccb52ae8f46fc6", "filename": "library/core/src/ops/try.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -43,16 +43,19 @@ pub trait Try {\n     /// in the return type of the enclosing scope (which must itself implement\n     /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n     /// is returned, where `X` is the return type of the enclosing function.\n+    #[cfg_attr(not(bootstrap), lang = \"into_result\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn into_result(self) -> Result<Self::Ok, Self::Error>;\n \n     /// Wrap an error value to construct the composite result. For example,\n     /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n+    #[cfg_attr(not(bootstrap), lang = \"from_error\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_error(v: Self::Error) -> Self;\n \n     /// Wrap an OK value to construct the composite result. For example,\n     /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n+    #[cfg_attr(not(bootstrap), lang = \"from_ok\")]\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]\n     fn from_ok(v: Self::Ok) -> Self;\n }"}, {"sha": "b6aa2c6697123ec6562e8fdf6ce5f77b224200e1", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -144,9 +144,11 @@ use crate::{\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value\n+    #[cfg_attr(not(bootstrap), lang = \"None\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     None,\n     /// Some value `T`\n+    #[cfg_attr(not(bootstrap), lang = \"Some\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n }"}, {"sha": "c1a90a1fd8042f82c2e631092da0ee8852e2d0de", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -562,6 +562,7 @@ impl<P: Deref> Pin<P> {\n     ///  ```\n     ///\n     /// [`mem::swap`]: ../../std/mem/fn.swap.html\n+    #[cfg_attr(not(bootstrap), lang = \"new_unchecked\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub unsafe fn new_unchecked(pointer: P) -> Pin<P> {"}, {"sha": "5eddcb2172abe7ac6ba91fffdd2255edf18f4bca", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -246,10 +246,12 @@ use crate::{convert, fmt};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value\n+    #[cfg_attr(not(bootstrap), lang = \"Ok\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n \n     /// Contains the error value\n+    #[cfg_attr(not(bootstrap), lang = \"Err\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n }"}, {"sha": "fea396d20ff4b8259fa66e6d1a6633ba4d0c8382", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -10,6 +10,7 @@ use crate::result::Result;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub enum Poll<T> {\n     /// Represents that a value is immediately ready.\n+    #[cfg_attr(not(bootstrap), lang = \"Ready\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     Ready(#[stable(feature = \"futures_api\", since = \"1.36.0\")] T),\n \n@@ -18,6 +19,7 @@ pub enum Poll<T> {\n     /// When a function returns `Pending`, the function *must* also\n     /// ensure that the current task is scheduled to be awoken when\n     /// progress can be made.\n+    #[cfg_attr(not(bootstrap), lang = \"Pending\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     Pending,\n }"}, {"sha": "d6c295f0ddb61b88880a35d63069f7a5149597d3", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -10,7 +10,7 @@\n pub use self::LangItem::*;\n \n use crate::def_id::DefId;\n-use crate::Target;\n+use crate::{MethodKind, Target};\n \n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -307,4 +307,38 @@ language_item_table! {\n     CountCodeRegionFnLangItem,         sym::count_code_region,         count_code_region_fn,         Target::Fn;\n     CoverageCounterAddFnLangItem,      sym::coverage_counter_add,      coverage_counter_add_fn,      Target::Fn;\n     CoverageCounterSubtractFnLangItem, sym::coverage_counter_subtract, coverage_counter_subtract_fn, Target::Fn;\n+\n+    // Language items from AST lowering\n+    TryFromError,                  sym::from_error,         from_error_fn,           Target::Method(MethodKind::Trait { body: false });\n+    TryFromOk,                     sym::from_ok,            from_ok_fn,              Target::Method(MethodKind::Trait { body: false });\n+    TryIntoResult,                 sym::into_result,        into_result_fn,          Target::Method(MethodKind::Trait { body: false });\n+\n+    PollReady,                     sym::Ready,              poll_ready_variant,      Target::Variant;\n+    PollPending,                   sym::Pending,            poll_pending_variant,    Target::Variant;\n+\n+    FromGenerator,                 sym::from_generator,     from_generator_fn,       Target::Fn;\n+    GetContext,                    sym::get_context,        get_context_fn,          Target::Fn;\n+\n+    FuturePoll,                    sym::poll,               future_poll_fn,          Target::Method(MethodKind::Trait { body: false });\n+\n+    FromFrom,                      sym::from,               from_fn,                 Target::Method(MethodKind::Trait { body: false });\n+\n+    OptionSome,                    sym::Some,               option_some_variant,     Target::Variant;\n+    OptionNone,                    sym::None,               option_none_variant,     Target::Variant;\n+\n+    ResultOk,                      sym::Ok,                 result_ok_variant,       Target::Variant;\n+    ResultErr,                     sym::Err,                result_err_variant,      Target::Variant;\n+\n+    IntoIterIntoIter,              sym::into_iter,          into_iter_fn,            Target::Method(MethodKind::Trait { body: false });\n+    IteratorNext,                  sym::next,               next_fn,                 Target::Method(MethodKind::Trait { body: false});\n+\n+    PinNewUnchecked,               sym::new_unchecked,      new_unchecked_fn,        Target::Method(MethodKind::Inherent);\n+\n+    RangeFrom,                     sym::RangeFrom,           range_from_struct,          Target::Struct;\n+    RangeFull,                     sym::RangeFull,           range_full_struct,          Target::Struct;\n+    RangeInclusiveStruct,          sym::RangeInclusive,      range_inclusive_struct,     Target::Struct;\n+    RangeInclusiveNew,             sym::range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent);\n+    Range,                         sym::Range,               range_struct,               Target::Struct;\n+    RangeToInclusive,              sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct;\n+    RangeTo,                       sym::RangeTo,             range_to_struct,            Target::Struct;\n }"}, {"sha": "bc7efd26f467bc3ce9f4751844998e113d253235", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dee5f824dad65d9edffb4de22aad248bd83faf9/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dee5f824dad65d9edffb4de22aad248bd83faf9/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=7dee5f824dad65d9edffb4de22aad248bd83faf9", "patch": "@@ -706,6 +706,7 @@ symbols! {\n         never_type,\n         never_type_fallback,\n         new,\n+        new_unchecked,\n         next,\n         nll,\n         no,\n@@ -828,6 +829,7 @@ symbols! {\n         quad_precision_float,\n         question_mark,\n         quote,\n+        range_inclusive_new,\n         raw_dylib,\n         raw_identifiers,\n         raw_ref_op,"}]}