{"sha": "3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDg4ZjYwZGUwMTc3NGI5ZjllMjljMDI4OWE4NzRhNWRjYWExY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-20T05:53:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-20T05:53:17Z"}, "message": "Auto merge of #32903 - alexcrichton:fix-rpath, r=brson\n\nrustbuild: Fix --enable-rpath usage\n\nThis commit fixes the `--enable-rpath` configure flag in rustbuild to work\ndespite the compile-time directories being different than the runtime\ndirectories. This unfortunately means that we can't use `-C rpath` out of the\nbox but hopefully the portability story here isn't too bad as\n`src/librustc_back/rpath.rs` isn't *too* complicated.\n\nCloses #32886", "tree": {"sha": "7bed50d73e29250429a8ef1cf1853335dbd97283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bed50d73e29250429a8ef1cf1853335dbd97283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "html_url": "https://github.com/rust-lang/rust/commit/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf6fba955736fff590a67293733755172d51cb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf6fba955736fff590a67293733755172d51cb9", "html_url": "https://github.com/rust-lang/rust/commit/9cf6fba955736fff590a67293733755172d51cb9"}, {"sha": "11ef3a9c932711233127ffc7108b3a2ceed292e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/11ef3a9c932711233127ffc7108b3a2ceed292e1", "html_url": "https://github.com/rust-lang/rust/commit/11ef3a9c932711233127ffc7108b3a2ceed292e1"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "1ebf27b51adb42e1e0868571dde4eb93553a3450", "filename": "src/bootstrap/rustc.rs", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce/src%2Fbootstrap%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd88f60de01774b9f9e29c0289a874a5dcaa1ce/src%2Fbootstrap%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frustc.rs?ref=3dd88f60de01774b9f9e29c0289a874a5dcaa1ce", "patch": "@@ -36,16 +36,15 @@ fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n-    let is_build_script = args.iter()\n-                              .position(|i| i.to_str() == Some(\"--target\"))\n-                              .is_none();\n+    let target = args.windows(2).find(|w| &*w[0] == \"--target\")\n+                                .and_then(|w| w[1].to_str());\n \n     // Build scripts always use the snapshot compiler which is guaranteed to be\n     // able to produce an executable, whereas intermediate compilers may not\n     // have the standard library built yet and may not be able to produce an\n     // executable. Otherwise we just use the standard compiler we're\n     // bootstrapping with.\n-    let rustc = if is_build_script {\n+    let rustc = if target.is_none() {\n         env::var_os(\"RUSTC_SNAPSHOT\").unwrap()\n     } else {\n         env::var_os(\"RUSTC_REAL\").unwrap()\n@@ -55,7 +54,7 @@ fn main() {\n     cmd.args(&args)\n        .arg(\"--cfg\").arg(format!(\"stage{}\", env::var(\"RUSTC_STAGE\").unwrap()));\n \n-    if is_build_script {\n+    if target.is_none() {\n         // Build scripts are always built with the snapshot compiler, so we need\n         // to be sure to set up the right path information for the OS dynamic\n         // linker to find the libraries in question.\n@@ -85,19 +84,57 @@ fn main() {\n \n     // Set various options from config.toml to configure how we're building\n     // code.\n-    if env::var(\"RUSTC_DEBUGINFO\") == Ok(\"true\".to_string()) {\n-        cmd.arg(\"-g\");\n-    }\n-    if env::var(\"RUSTC_RPATH\") == Ok(\"true\".to_string()) {\n-        cmd.arg(\"-Crpath\");\n-    }\n-    let debug_assertions = match env::var(\"RUSTC_DEBUG_ASSERTIONS\") {\n-        Ok(s) => if s == \"true\" {\"y\"} else {\"n\"},\n-        Err(..) => \"n\",\n-    };\n-    cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n-    if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {\n-        cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n+    if let Some(target) = target {\n+        if env::var(\"RUSTC_DEBUGINFO\") == Ok(\"true\".to_string()) {\n+            cmd.arg(\"-g\");\n+        }\n+        let debug_assertions = match env::var(\"RUSTC_DEBUG_ASSERTIONS\") {\n+            Ok(s) => if s == \"true\" {\"y\"} else {\"n\"},\n+            Err(..) => \"n\",\n+        };\n+        cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n+        if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {\n+            cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n+        }\n+\n+        // Dealing with rpath here is a little special, so let's go into some\n+        // detail. First off, `-rpath` is a linker option on Unix platforms\n+        // which adds to the runtime dynamic loader path when looking for\n+        // dynamic libraries. We use this by default on Unix platforms to ensure\n+        // that our nightlies behave the same on Windows, that is they work out\n+        // of the box. This can be disabled, of course, but basically that's why\n+        // we're gated on RUSTC_RPATH here.\n+        //\n+        // Ok, so the astute might be wondering \"why isn't `-C rpath` used\n+        // here?\" and that is indeed a good question to task. This codegen\n+        // option is the compiler's current interface to generating an rpath.\n+        // Unfortunately it doesn't quite suffice for us. The flag currently\n+        // takes no value as an argument, so the compiler calculates what it\n+        // should pass to the linker as `-rpath`. This unfortunately is based on\n+        // the **compile time** directory structure which when building with\n+        // Cargo will be very different than the runtime directory structure.\n+        //\n+        // All that's a really long winded way of saying that if we use\n+        // `-Crpath` then the executables generated have the wrong rpath of\n+        // something like `$ORIGIN/deps` when in fact the way we distribute\n+        // rustc requires the rpath to be `$ORIGIN/../lib`.\n+        //\n+        // So, all in all, to set up the correct rpath we pass the linker\n+        // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n+        // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n+        // to change a flag in a binary?\n+        if env::var(\"RUSTC_RPATH\") == Ok(\"true\".to_string()) {\n+            let rpath = if target.contains(\"apple\") {\n+                Some(\"-Wl,-rpath,@loader_path/../lib\")\n+            } else if !target.contains(\"windows\") {\n+                Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n+            } else {\n+                None\n+            };\n+            if let Some(rpath) = rpath {\n+                cmd.arg(\"-C\").arg(format!(\"link-args={}\", rpath));\n+            }\n+        }\n     }\n \n     // Actually run the compiler!"}]}