{"sha": "8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYmM5MWNmZTFmZWNmZDg1MzRiMWI4MjhiYjY0ODA2YTY3ZDk2NTk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-22T12:47:50Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-28T11:44:45Z"}, "message": "incr.comp.: Make MIR encoding fit for incr.comp. caching.", "tree": {"sha": "6ea28426c74f9340f41a137d2579838e3276791f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea28426c74f9340f41a137d2579838e3276791f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "html_url": "https://github.com/rust-lang/rust/commit/8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "436ac8928aa2e94f621111d6d99901713060b568", "url": "https://api.github.com/repos/rust-lang/rust/commits/436ac8928aa2e94f621111d6d99901713060b568", "html_url": "https://github.com/rust-lang/rust/commit/436ac8928aa2e94f621111d6d99901713060b568"}], "stats": {"total": 108, "additions": 81, "deletions": 27}, "files": [{"sha": "424259de4fd1dfa0be8dad6915fcd6a3fd9ca855", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -98,7 +98,7 @@ for mir::Terminator<'gcx> {\n     }\n }\n \n-impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearOnDecode<T>\n+impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearCrossCrate<T>\n     where T: HashStable<StableHashingContext<'gcx>>\n {\n     #[inline]\n@@ -107,8 +107,8 @@ impl<'gcx, T> HashStable<StableHashingContext<'gcx>> for mir::ClearOnDecode<T>\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            mir::ClearOnDecode::Clear => {}\n-            mir::ClearOnDecode::Set(ref value) => {\n+            mir::ClearCrossCrate::Clear => {}\n+            mir::ClearCrossCrate::Set(ref value) => {\n                 value.hash_stable(hcx, hasher);\n             }\n         }"}, {"sha": "76dbe6e61b4f078553c7a9291f87ddc010b439e8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -75,7 +75,7 @@ pub struct Mir<'tcx> {\n \n     /// Crate-local information for each visibility scope, that can't (and\n     /// needn't) be tracked across crates.\n-    pub visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope, VisibilityScopeInfo>>,\n+    pub visibility_scope_info: ClearCrossCrate<IndexVec<VisibilityScope, VisibilityScopeInfo>>,\n \n     /// Rvalues promoted from this function, such as borrows of constants.\n     /// Each of them is the Mir of a constant with the fn's type parameters\n@@ -129,8 +129,8 @@ pub const START_BLOCK: BasicBlock = BasicBlock(0);\n impl<'tcx> Mir<'tcx> {\n     pub fn new(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n                visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n-               visibility_scope_info: ClearOnDecode<IndexVec<VisibilityScope,\n-                                                             VisibilityScopeInfo>>,\n+               visibility_scope_info: ClearCrossCrate<IndexVec<VisibilityScope,\n+                                                               VisibilityScopeInfo>>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n                yield_ty: Option<Ty<'tcx>>,\n                local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n@@ -283,15 +283,15 @@ impl<'tcx> Mir<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct VisibilityScopeInfo {\n     /// A NodeId with lint levels equivalent to this scope's lint levels.\n     pub lint_root: ast::NodeId,\n     /// The unsafe block that contains this node.\n     pub safety: Safety,\n }\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum Safety {\n     Safe,\n     /// Unsafe because of a PushUnsafeBlock\n@@ -335,22 +335,13 @@ impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-pub enum ClearOnDecode<T> {\n+pub enum ClearCrossCrate<T> {\n     Clear,\n     Set(T)\n }\n \n-impl<T> serialize::Encodable for ClearOnDecode<T> {\n-    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        serialize::Encodable::encode(&(), s)\n-    }\n-}\n-\n-impl<T> serialize::Decodable for ClearOnDecode<T> {\n-    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        serialize::Decodable::decode(d).map(|()| ClearOnDecode::Clear)\n-    }\n-}\n+impl<T: serialize::Encodable> serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n+impl<T: serialize::Decodable> serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n \n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo."}, {"sha": "01f2374033da8927cd59daf24808c03b3ffb91d9", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -15,6 +15,7 @@ use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId,\n                   RESERVED_FOR_INCR_COMP_CACHE, LOCAL_CRATE};\n use hir::map::definitions::DefPathHash;\n use middle::cstore::CrateStore;\n+use mir;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n@@ -36,6 +37,9 @@ use ty::context::TyCtxt;\n const PREV_DIAGNOSTICS_TAG: u64 = 0x1234_5678_A1A1_A1A1;\n const QUERY_RESULT_INDEX_TAG: u64 = 0x1234_5678_C3C3_C3C3;\n \n+const TAG_CLEAR_CROSS_CRATE_CLEAR: u8 = 0;\n+const TAG_CLEAR_CROSS_CRATE_SET: u8 = 1;\n+\n /// `OnDiskCache` provides an interface to incr. comp. data cached from the\n /// previous compilation session. This data will eventually include the results\n /// of a few selected queries (like `typeck_tables_of` and `mir_optimized`) and\n@@ -518,12 +522,32 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<hir::HirId> for CacheDecoder<'a, 'tcx, 'x>\n // NodeIds are not stable across compilation sessions, so we store them in their\n // HirId representation. This allows use to map them to the current NodeId.\n impl<'a, 'tcx, 'x> SpecializedDecoder<NodeId> for CacheDecoder<'a, 'tcx, 'x> {\n+    #[inline]\n     fn specialized_decode(&mut self) -> Result<NodeId, Self::Error> {\n         let hir_id = hir::HirId::decode(self)?;\n         Ok(self.tcx().hir.hir_to_node_id(hir_id))\n     }\n }\n \n+impl<'a, 'tcx, 'x, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n+for CacheDecoder<'a, 'tcx, 'x> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<mir::ClearCrossCrate<T>, Self::Error> {\n+        let discr = u8::decode(self)?;\n+\n+        match discr {\n+            TAG_CLEAR_CROSS_CRATE_CLEAR => Ok(mir::ClearCrossCrate::Clear),\n+            TAG_CLEAR_CROSS_CRATE_SET => {\n+                let val = T::decode(self)?;\n+                Ok(mir::ClearCrossCrate::Set(val))\n+            }\n+            _ => {\n+                unreachable!()\n+            }\n+        }\n+    }\n+}\n+\n //- ENCODING -------------------------------------------------------------------\n \n struct CacheEncoder<'enc, 'a, 'tcx, E>\n@@ -658,6 +682,27 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<NodeId> for CacheEncoder<'enc, 'a, 't\n     }\n }\n \n+impl<'enc, 'a, 'tcx, E, T> SpecializedEncoder<mir::ClearCrossCrate<T>>\n+for CacheEncoder<'enc, 'a, 'tcx, E>\n+    where E: 'enc + ty_codec::TyEncoder,\n+          T: Encodable,\n+{\n+    #[inline]\n+    fn specialized_encode(&mut self,\n+                          val: &mir::ClearCrossCrate<T>)\n+                          -> Result<(), Self::Error> {\n+        match *val {\n+            mir::ClearCrossCrate::Clear => {\n+                TAG_CLEAR_CROSS_CRATE_CLEAR.encode(self)\n+            }\n+            mir::ClearCrossCrate::Set(ref val) => {\n+                TAG_CLEAR_CROSS_CRATE_SET.encode(self)?;\n+                val.encode(self)\n+            }\n+        }\n+    }\n+}\n+\n macro_rules! encoder_methods {\n     ($($name:ident($ty:ty);)*) => {\n         $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {"}, {"sha": "eb2bcfc93c5fb15e9869e4fa8540f2d998d73fcd", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -21,6 +21,7 @@ use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n+use rustc::mir;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n@@ -327,6 +328,14 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n+for DecodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<mir::ClearCrossCrate<T>, Self::Error> {\n+        Ok(mir::ClearCrossCrate::Clear)\n+    }\n+}\n+\n implement_ty_decoder!( DecodeContext<'a, 'tcx> );\n \n impl<'a, 'tcx> MetadataBlob {"}, {"sha": "de6bb9ea738bed4ec92fa9092210b2931e187670", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -157,6 +157,15 @@ impl<'a, 'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext\n     }\n }\n \n+impl<'a, 'tcx, T: Encodable> SpecializedEncoder<mir::ClearCrossCrate<T>>\n+for EncodeContext<'a, 'tcx> {\n+    fn specialized_encode(&mut self,\n+                          _: &mir::ClearCrossCrate<T>)\n+                          -> Result<(), Self::Error> {\n+        Ok(())\n+    }\n+}\n+\n impl<'a, 'tcx> TyEncoder for EncodeContext<'a, 'tcx> {\n     fn position(&self) -> usize {\n         self.opaque.position()"}, {"sha": "2086e92a9846420507674d83c398526b61c0c317", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         Mir::new(self.cfg.basic_blocks,\n                  self.visibility_scopes,\n-                 ClearOnDecode::Set(self.visibility_scope_info),\n+                 ClearCrossCrate::Set(self.visibility_scope_info),\n                  IndexVec::new(),\n                  yield_ty,\n                  self.local_decls,"}, {"sha": "15b06bd38924ad478f734d810750df50ffa464f3", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -198,7 +198,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n-        ClearOnDecode::Clear,\n+        ClearCrossCrate::Clear,\n         IndexVec::new(),\n         None,\n         local_decls_for_sig(&sig, span),\n@@ -345,7 +345,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             IndexVec::from_elem_n(\n                 VisibilityScopeData { span: self.span, parent_scope: None }, 1\n             ),\n-            ClearOnDecode::Clear,\n+            ClearCrossCrate::Clear,\n             IndexVec::new(),\n             None,\n             self.local_decls,\n@@ -807,7 +807,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n-        ClearOnDecode::Clear,\n+        ClearCrossCrate::Clear,\n         IndexVec::new(),\n         None,\n         local_decls,\n@@ -885,7 +885,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n         IndexVec::from_elem_n(\n             VisibilityScopeData { span: span, parent_scope: None }, 1\n         ),\n-        ClearOnDecode::Clear,\n+        ClearCrossCrate::Clear,\n         IndexVec::new(),\n         None,\n         local_decls,"}, {"sha": "720a3bf0bc0ed280f2530b715a2f82d8aebcbab1", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbc91cfe1fecfd8534b1b828bb64806a67d9659/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8fbc91cfe1fecfd8534b1b828bb64806a67d9659", "patch": "@@ -320,8 +320,8 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     let mir = &tcx.mir_built(def_id).borrow();\n \n     let visibility_scope_info = match mir.visibility_scope_info {\n-        ClearOnDecode::Set(ref data) => data,\n-        ClearOnDecode::Clear => {\n+        ClearCrossCrate::Set(ref data) => data,\n+        ClearCrossCrate::Clear => {\n             debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n             return UnsafetyCheckResult {\n                 violations: Rc::new([]),"}]}