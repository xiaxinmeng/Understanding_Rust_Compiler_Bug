{"sha": "e9cb818c2683e06153f013c3b8d03f7f2719eb02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Y2I4MThjMjY4M2UwNjE1M2YwMTNjM2I4ZDAzZjdmMjcxOWViMDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T09:05:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T09:05:47Z"}, "message": "Use fixtures more", "tree": {"sha": "1eab8c2aaa60acc56d69e88d2eb888c1395fdbc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eab8c2aaa60acc56d69e88d2eb888c1395fdbc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9cb818c2683e06153f013c3b8d03f7f2719eb02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9cb818c2683e06153f013c3b8d03f7f2719eb02", "html_url": "https://github.com/rust-lang/rust/commit/e9cb818c2683e06153f013c3b8d03f7f2719eb02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9cb818c2683e06153f013c3b8d03f7f2719eb02/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e2149eab4495bd816a30b3caf586bef2cd9649", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e2149eab4495bd816a30b3caf586bef2cd9649", "html_url": "https://github.com/rust-lang/rust/commit/08e2149eab4495bd816a30b3caf586bef2cd9649"}], "stats": {"total": 268, "additions": 135, "deletions": 133}, "files": [{"sha": "8a18bc18c724559c2c98f986d96001713b853575", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=e9cb818c2683e06153f013c3b8d03f7f2719eb02", "patch": "@@ -348,8 +348,10 @@ mod tests {\n         );\n     }\n \n-    fn check_apply_diagnostic_fix(before: &str, after: &str) {\n-        let (analysis, file_id) = single_file(before);\n+    fn check_apply_diagnostic_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let ra_fixture_after = &trim_indent(ra_fixture_after);\n+        let (analysis, file_id) = single_file(ra_fixture_before);\n+        let before = analysis.file_text(file_id).unwrap();\n         let diagnostic = analysis.diagnostics(file_id).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n@@ -358,7 +360,7 @@ mod tests {\n             edit.apply(&mut actual);\n             actual\n         };\n-        assert_eq_text!(after, &actual);\n+        assert_eq_text!(ra_fixture_after, &actual);\n     }\n \n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n@@ -709,7 +711,7 @@ mod tests {\n         [\n             Diagnostic {\n                 message: \"Missing structure fields:\\n- b\\n\",\n-                range: 224..233,\n+                range: 127..136,\n                 severity: Error,\n                 fix: Some(\n                     Fix {\n@@ -855,22 +857,22 @@ fn main() {\n     fn test_add_field_from_usage() {\n         check_apply_diagnostic_fix(\n             r\"\n-            fn main() {\n-                Foo { bar: 3, baz: false};\n-            }\n-            struct Foo {\n-                bar: i32\n-            }\n-            \",\n+fn main() {\n+    Foo { bar: 3, baz: false};\n+}\n+struct Foo {\n+    bar: i32\n+}\n+\",\n             r\"\n-            fn main() {\n-                Foo { bar: 3, baz: false};\n-            }\n-            struct Foo {\n-                bar: i32,\n-                baz: bool\n-            }\n-            \",\n+fn main() {\n+    Foo { bar: 3, baz: false};\n+}\n+struct Foo {\n+    bar: i32,\n+    baz: bool\n+}\n+\",\n         )\n     }\n }"}, {"sha": "cb6b1a40dbe3fef502967ca2306001277b4c76ff", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=e9cb818c2683e06153f013c3b8d03f7f2719eb02", "patch": "@@ -315,17 +315,15 @@ fn adj_comments(comment: &ast::Comment, dir: Direction) -> ast::Comment {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::extract_offset;\n-\n-    use crate::mock_analysis::single_file;\n+    use crate::mock_analysis::single_file_with_position;\n \n     use super::*;\n \n     fn do_check(before: &str, afters: &[&str]) {\n-        let (cursor, before) = extract_offset(before);\n-        let (analysis, file_id) = single_file(&before);\n-        let range = TextRange::empty(cursor);\n-        let mut frange = FileRange { file_id, range };\n+        let (analysis, position) = single_file_with_position(&before);\n+        let before = analysis.file_text(position.file_id).unwrap();\n+        let range = TextRange::empty(position.offset);\n+        let mut frange = FileRange { file_id: position.file_id, range };\n \n         for &after in afters {\n             frange.range = analysis.extend_selection(frange).unwrap();"}, {"sha": "3fd08b1e804b775d67f399ccf121e166bf0721b0", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 91, "deletions": 87, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=e9cb818c2683e06153f013c3b8d03f7f2719eb02", "patch": "@@ -363,16 +363,17 @@ mod tests {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: true, type_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 106..107,\n+                range: 69..70,\n                 kind: ParameterHint,\n                 label: \"a\",\n             },\n             InlayHint {\n-                range: 109..110,\n+                range: 72..73,\n                 kind: ParameterHint,\n                 label: \"b\",\n             },\n-        ]\"###);\n+        ]\n+        \"###);\n     }\n \n     #[test]\n@@ -399,11 +400,12 @@ mod tests {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ type_hints: true, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 97..99,\n+                range: 60..62,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n-        ]\"###);\n+        ]\n+        \"###);\n     }\n     #[test]\n     fn default_generic_types_should_not_be_displayed() {\n@@ -423,12 +425,12 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 69..71,\n+                range: 68..70,\n                 kind: TypeHint,\n                 label: \"Test<i32>\",\n             },\n             InlayHint {\n-                range: 107..113,\n+                range: 106..112,\n                 kind: TypeHint,\n                 label: \"&Test<i32>\",\n             },\n@@ -480,57 +482,57 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 193..197,\n+                range: 192..196,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 236..244,\n+                range: 235..243,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 275..279,\n+                range: 274..278,\n                 kind: TypeHint,\n                 label: \"&str\",\n             },\n             InlayHint {\n-                range: 539..543,\n+                range: 538..542,\n                 kind: TypeHint,\n                 label: \"(i32, char)\",\n             },\n             InlayHint {\n-                range: 566..567,\n+                range: 565..566,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 570..571,\n+                range: 569..570,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 573..574,\n+                range: 572..573,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 577..578,\n+                range: 576..577,\n                 kind: TypeHint,\n                 label: \"f64\",\n             },\n             InlayHint {\n-                range: 580..581,\n+                range: 579..580,\n                 kind: TypeHint,\n                 label: \"f64\",\n             },\n             InlayHint {\n-                range: 584..585,\n+                range: 583..584,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 627..628,\n+                range: 626..627,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n@@ -560,47 +562,47 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 21..30,\n+                range: 20..29,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 57..66,\n+                range: 56..65,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 115..123,\n+                range: 114..122,\n                 kind: TypeHint,\n                 label: \"|\u2026| -> i32\",\n             },\n             InlayHint {\n-                range: 127..128,\n+                range: 126..127,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 130..131,\n+                range: 129..130,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 133..134,\n+                range: 132..133,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 136..137,\n+                range: 135..136,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 201..213,\n+                range: 200..212,\n                 kind: TypeHint,\n                 label: \"&|\u2026| -> i32\",\n             },\n             InlayHint {\n-                range: 236..245,\n+                range: 235..244,\n                 kind: TypeHint,\n                 label: \"|| -> i32\",\n             },\n@@ -624,12 +626,12 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 21..30,\n+                range: 20..29,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 44..53,\n+                range: 43..52,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n@@ -674,57 +676,57 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 188..192,\n+                range: 187..191,\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: 267..271,\n+                range: 266..270,\n                 kind: TypeHint,\n                 label: \"&CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: 300..304,\n+                range: 299..303,\n                 kind: TypeHint,\n                 label: \"&Test\",\n             },\n             InlayHint {\n-                range: 341..342,\n+                range: 340..341,\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: 344..345,\n+                range: 343..344,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 387..388,\n+                range: 386..387,\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: 393..394,\n+                range: 392..393,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 441..442,\n+                range: 440..441,\n                 kind: TypeHint,\n                 label: \"&u32\",\n             },\n             InlayHint {\n-                range: 448..449,\n+                range: 447..448,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 500..501,\n+                range: 499..500,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 543..544,\n+                range: 542..543,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n@@ -769,57 +771,57 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 188..192,\n+                range: 187..191,\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: 273..277,\n+                range: 272..276,\n                 kind: TypeHint,\n                 label: \"&CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: 309..313,\n+                range: 308..312,\n                 kind: TypeHint,\n                 label: \"&Test\",\n             },\n             InlayHint {\n-                range: 353..354,\n+                range: 352..353,\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: 356..357,\n+                range: 355..356,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 402..403,\n+                range: 401..402,\n                 kind: TypeHint,\n                 label: \"&CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: 408..409,\n+                range: 407..408,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 459..460,\n+                range: 458..459,\n                 kind: TypeHint,\n                 label: \"&u32\",\n             },\n             InlayHint {\n-                range: 466..467,\n+                range: 465..466,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 521..522,\n+                range: 520..521,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n             InlayHint {\n-                range: 567..568,\n+                range: 566..567,\n                 kind: TypeHint,\n                 label: \"&u8\",\n             },\n@@ -864,52 +866,52 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 252..256,\n+                range: 251..255,\n                 kind: TypeHint,\n                 label: \"CustomOption<Test>\",\n             },\n             InlayHint {\n-                range: 277..281,\n+                range: 276..280,\n                 kind: TypeHint,\n                 label: \"Test\",\n             },\n             InlayHint {\n-                range: 310..311,\n+                range: 309..310,\n                 kind: TypeHint,\n                 label: \"CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: 313..314,\n+                range: 312..313,\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: 348..349,\n+                range: 347..348,\n                 kind: TypeHint,\n                 label: \"CustomOption<u32>\",\n             },\n             InlayHint {\n-                range: 354..355,\n+                range: 353..354,\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: 394..395,\n+                range: 393..394,\n                 kind: TypeHint,\n                 label: \"u32\",\n             },\n             InlayHint {\n-                range: 401..402,\n+                range: 400..401,\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: 445..446,\n+                range: 444..445,\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n             InlayHint {\n-                range: 480..481,\n+                range: 479..480,\n                 kind: TypeHint,\n                 label: \"u8\",\n             },\n@@ -936,17 +938,17 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 74..75,\n+                range: 73..74,\n                 kind: TypeHint,\n                 label: \"Smol<u32>\",\n             },\n             InlayHint {\n-                range: 98..99,\n+                range: 97..98,\n                 kind: TypeHint,\n                 label: \"VeryLongOuterName<\u2026>\",\n             },\n             InlayHint {\n-                range: 137..138,\n+                range: 136..137,\n                 kind: TypeHint,\n                 label: \"Smol<Smol<\u2026>>\",\n             },\n@@ -1024,77 +1026,77 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 798..809,\n+                range: 797..808,\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n             InlayHint {\n-                range: 842..843,\n+                range: 841..842,\n                 kind: ParameterHint,\n                 label: \"foo\",\n             },\n             InlayHint {\n-                range: 845..846,\n+                range: 844..845,\n                 kind: ParameterHint,\n                 label: \"bar\",\n             },\n             InlayHint {\n-                range: 848..855,\n+                range: 847..854,\n                 kind: ParameterHint,\n                 label: \"msg\",\n             },\n             InlayHint {\n-                range: 860..871,\n+                range: 859..870,\n                 kind: ParameterHint,\n                 label: \"last\",\n             },\n             InlayHint {\n-                range: 914..917,\n+                range: 913..916,\n                 kind: ParameterHint,\n                 label: \"param\",\n             },\n             InlayHint {\n-                range: 937..939,\n+                range: 936..938,\n                 kind: ParameterHint,\n                 label: \"&self\",\n             },\n             InlayHint {\n-                range: 941..945,\n+                range: 940..944,\n                 kind: ParameterHint,\n                 label: \"param\",\n             },\n             InlayHint {\n-                range: 980..989,\n+                range: 979..988,\n                 kind: ParameterHint,\n                 label: \"file_id\",\n             },\n             InlayHint {\n-                range: 999..1012,\n+                range: 998..1011,\n                 kind: ParameterHint,\n                 label: \"name\",\n             },\n             InlayHint {\n-                range: 1022..1026,\n+                range: 1021..1025,\n                 kind: ParameterHint,\n                 label: \"focus_range\",\n             },\n             InlayHint {\n-                range: 1036..1048,\n+                range: 1035..1047,\n                 kind: ParameterHint,\n                 label: \"full_range\",\n             },\n             InlayHint {\n-                range: 1058..1071,\n+                range: 1057..1070,\n                 kind: ParameterHint,\n                 label: \"kind\",\n             },\n             InlayHint {\n-                range: 1081..1085,\n+                range: 1080..1084,\n                 kind: ParameterHint,\n                 label: \"docs\",\n             },\n             InlayHint {\n-                range: 1095..1099,\n+                range: 1094..1098,\n                 kind: ParameterHint,\n                 label: \"description\",\n             },\n@@ -1239,16 +1241,17 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 232..269,\n+                range: 147..172,\n                 kind: ChainingHint,\n                 label: \"B\",\n             },\n             InlayHint {\n-                range: 232..239,\n+                range: 147..154,\n                 kind: ChainingHint,\n                 label: \"A\",\n             },\n-        ]\"###);\n+        ]\n+        \"###);\n     }\n \n     #[test]\n@@ -1293,12 +1296,12 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 252..323,\n+                range: 143..190,\n                 kind: ChainingHint,\n                 label: \"C\",\n             },\n             InlayHint {\n-                range: 252..300,\n+                range: 143..179,\n                 kind: ChainingHint,\n                 label: \"B\",\n             },\n@@ -1331,15 +1334,16 @@ fn main() {\n         assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n-                range: 403..452,\n+                range: 246..283,\n                 kind: ChainingHint,\n                 label: \"B<X<i32, bool>>\",\n             },\n             InlayHint {\n-                range: 403..422,\n+                range: 246..265,\n                 kind: ChainingHint,\n                 label: \"A<X<i32, bool>>\",\n             },\n-        ]\"###);\n+        ]\n+        \"###);\n     }\n }"}, {"sha": "4e3986604d6b13aa96616338737cb3404d866295", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=e9cb818c2683e06153f013c3b8d03f7f2719eb02", "patch": "@@ -117,13 +117,13 @@ impl MockAnalysis {\n         (res, position)\n     }\n \n-    pub fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n+    fn add_file_fixture(&mut self, fixture: Fixture) -> FileId {\n         let file_id = self.next_id();\n         self.files.push(MockFileData::from(fixture));\n         file_id\n     }\n \n-    pub fn add_file_fixture_with_position(&mut self, mut fixture: Fixture) -> FilePosition {\n+    fn add_file_fixture_with_position(&mut self, mut fixture: Fixture) -> FilePosition {\n         let (offset, text) = extract_offset(&fixture.text);\n         fixture.text = text;\n         let file_id = self.next_id();\n@@ -136,13 +136,13 @@ impl MockAnalysis {\n         self.files.push(MockFileData::new(path.to_string(), text.to_string()));\n         file_id\n     }\n-    pub fn add_file_with_position(&mut self, path: &str, text: &str) -> FilePosition {\n+    fn add_file_with_position(&mut self, path: &str, text: &str) -> FilePosition {\n         let (offset, text) = extract_offset(text);\n         let file_id = self.next_id();\n         self.files.push(MockFileData::new(path.to_string(), text));\n         FilePosition { file_id, offset }\n     }\n-    pub fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n+    fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n         let (range, text) = extract_range(text);\n         let file_id = self.next_id();\n         self.files.push(MockFileData::new(path.to_string(), text));\n@@ -222,8 +222,8 @@ pub fn analysis_and_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n \n /// Creates analysis for a single file.\n pub fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n-    let mut mock = MockAnalysis::new();\n-    let file_id = mock.add_file(\"/main.rs\", ra_fixture);\n+    let mock = MockAnalysis::with_files(ra_fixture);\n+    let file_id = mock.id_of(\"/main.rs\");\n     (mock.analysis(), file_id)\n }\n "}, {"sha": "c8943816f3bee33449ba23afeb54317bc7ea3e14", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=e9cb818c2683e06153f013c3b8d03f7f2719eb02", "patch": "@@ -140,16 +140,17 @@ fn accidentally_quadratic() {\n fn test_ranges() {\n     let (analysis, file_id) = single_file(\n         r#\"\n-            #[derive(Clone, Debug)]\n-            struct Foo {\n-                pub x: i32,\n-                pub y: i32,\n-            }\"#,\n+#[derive(Clone, Debug)]\n+struct Foo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\"#,\n     );\n \n     // The \"x\"\n     let highlights = &analysis\n-        .highlight_range(FileRange { file_id, range: TextRange::at(82.into(), 1.into()) })\n+        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n         .unwrap();\n \n     assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration\");"}, {"sha": "787e85ffd6079024e63f94c6d78ed399c8c2733c", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cb818c2683e06153f013c3b8d03f7f2719eb02/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=e9cb818c2683e06153f013c3b8d03f7f2719eb02", "patch": "@@ -75,18 +75,15 @@ fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{assert_eq_text, extract_offset};\n+    use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::single_file;\n-\n-    use super::*;\n+    use crate::mock_analysis::single_file_with_position;\n \n     fn apply_on_enter(before: &str) -> Option<String> {\n-        let (offset, before) = extract_offset(before);\n-        let (analysis, file_id) = single_file(&before);\n-        let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n+        let (analysis, position) = single_file_with_position(&before);\n+        let result = analysis.on_enter(position).unwrap()?;\n \n-        let mut actual = before.to_string();\n+        let mut actual = analysis.file_text(position.file_id).unwrap().to_string();\n         result.apply(&mut actual);\n         Some(actual)\n     }"}]}