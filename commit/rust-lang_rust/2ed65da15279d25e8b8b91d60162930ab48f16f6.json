{"sha": "2ed65da15279d25e8b8b91d60162930ab48f16f6", "node_id": "C_kwDOAAsO6NoAKDJlZDY1ZGExNTI3OWQyNWU4YjhiOTFkNjAxNjI5MzBhYjQ4ZjE2ZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T04:28:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-20T04:28:21Z"}, "message": "Auto merge of #104629 - JohnTitor:rollup-vp3m98i, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103901 (Add tracking issue for `const_arguments_as_str`)\n - #104112 (rustdoc: Add copy to the description of repeat)\n - #104435 (`VecDeque::resize` should re-use the buffer in the passed-in element)\n - #104467 (Fix substraction with overflow in `wrong_number_of_generic_args.rs`)\n - #104608 (Cleanup macro matching recovery)\n - #104626 (Fix doctest errors related to rustc_middle)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2704d1527822c0bba74acea1fba9122ba20b8c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2704d1527822c0bba74acea1fba9122ba20b8c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed65da15279d25e8b8b91d60162930ab48f16f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed65da15279d25e8b8b91d60162930ab48f16f6", "html_url": "https://github.com/rust-lang/rust/commit/2ed65da15279d25e8b8b91d60162930ab48f16f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed65da15279d25e8b8b91d60162930ab48f16f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7477c1f4f7d6bef037d523099b240d22aa1b63a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7477c1f4f7d6bef037d523099b240d22aa1b63a0", "html_url": "https://github.com/rust-lang/rust/commit/7477c1f4f7d6bef037d523099b240d22aa1b63a0"}, {"sha": "d553811c1fcaad51219457713c27ef4c070889e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d553811c1fcaad51219457713c27ef4c070889e2", "html_url": "https://github.com/rust-lang/rust/commit/d553811c1fcaad51219457713c27ef4c070889e2"}], "stats": {"total": 391, "additions": 377, "deletions": 14}, "files": [{"sha": "6c7063ca28b35b5fcc580180d41fe5a3e90872ba", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -495,7 +495,6 @@ fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n     // hacky, but speeds up the `html5ever` benchmark significantly. (Issue\n     // 68836 suggests a more comprehensive but more complex change to deal with\n     // this situation.)\n-    // FIXME(Nilstrieb): Stop recovery from happening on this parser and retry later with recovery if the macro failed to match.\n     let parser = parser_from_cx(sess, arg.clone(), T::recovery());\n     // Try each arm's matchers.\n     let mut tt_parser = TtParser::new(name);"}, {"sha": "9c77387c238fe43016efe1b4f1b538fe7e0883d1", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -728,7 +728,8 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         && let Some(trait_path_segment) = path.segments.get(0) {\n             let num_generic_args_supplied_to_trait = trait_path_segment.args().num_generic_params();\n \n-            if num_assoc_fn_excess_args == num_trait_generics_except_self - num_generic_args_supplied_to_trait {\n+            if num_generic_args_supplied_to_trait + num_assoc_fn_excess_args == num_trait_generics_except_self\n+            {\n                 if let Some(span) = self.gen_args.span_ext()\n                 && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     let sugg = vec!["}, {"sha": "fc1167c105ae89c57faad7e5639fb4b738ab3a3e", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -4,7 +4,6 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [lib]\n-doctest = false\n \n [dependencies]\n bitflags = \"1.2.1\""}, {"sha": "027720134370016af69dab5d4d5acfd156bd6246", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -1648,6 +1648,8 @@ rustc_queries! {\n     /// a generic type parameter will panic if you call this method on it:\n     ///\n     /// ```\n+    /// use std::fmt::Debug;\n+    ///\n     /// pub trait Foo<T: Debug> {}\n     /// ```\n     ///"}, {"sha": "786eced61d6e93fe9ac6c0e85242bfbc4157fb72", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -5,7 +5,7 @@\n //!\n //! # Example\n //! ```rust\n-//! enum Void {}\n+//! #![feature(never_type)]\n //! mod a {\n //!     pub mod b {\n //!         pub struct SecretlyUninhabited {\n@@ -15,6 +15,7 @@\n //! }\n //!\n //! mod c {\n+//!     enum Void {}\n //!     pub struct AlsoSecretlyUninhabited {\n //!         _priv: Void,\n //!     }\n@@ -35,7 +36,7 @@\n //! `Foo`.\n //!\n //! # Example\n-//! ```rust\n+//! ```ignore(illustrative)\n //! let foo_result: Result<T, Foo> = ... ;\n //! let Ok(t) = foo_result;\n //! ```"}, {"sha": "fe7401786a0291ebf8e20dc56d3dddca76c816d3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -2078,12 +2078,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == TokenKind::Semi\n             && matches!(self.token_cursor.frame.delim_sp, Some((Delimiter::Parenthesis, _)))\n-            // HACK: This is needed so we can detect whether we're inside a macro,\n-            // where regular assumptions about what tokens can follow other tokens\n-            // don't necessarily apply.\n             && self.may_recover()\n-            // FIXME(Nilstrieb): Remove this check once `may_recover` actually stops recovery\n-            && self.subparser_name.is_none()\n         {\n             // It is likely that the closure body is a block but where the\n             // braces have been removed. We will recover and eat the next"}, {"sha": "537fe22a4be72b3bd1f35eb1c51e124a0ca08003", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -10,7 +10,7 @@\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::iter::{repeat_with, FromIterator};\n+use core::iter::{repeat_n, repeat_with, FromIterator};\n use core::marker::PhantomData;\n use core::mem::{ManuallyDrop, MaybeUninit, SizedTypeProperties};\n use core::ops::{Index, IndexMut, Range, RangeBounds};\n@@ -2833,7 +2833,12 @@ impl<T: Clone, A: Allocator> VecDeque<T, A> {\n     /// ```\n     #[stable(feature = \"deque_extras\", since = \"1.16.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n-        self.resize_with(new_len, || value.clone());\n+        if new_len > self.len() {\n+            let extra = new_len - self.len();\n+            self.extend(repeat_n(value, extra))\n+        } else {\n+            self.truncate(new_len);\n+        }\n     }\n }\n "}, {"sha": "5e13547abcb70f2dc616e94e0afe3decf06b22ea", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -124,6 +124,7 @@\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n #![feature(iter_next_chunk)]\n+#![feature(iter_repeat_n)]\n #![feature(layout_for_ptr)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "1b61ede3476c336c3112867a32253dc86ee219ea", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -458,7 +458,7 @@ impl<T> [T] {\n         hack::into_vec(self)\n     }\n \n-    /// Creates a vector by repeating a slice `n` times.\n+    /// Creates a vector by copying a slice `n` times.\n     ///\n     /// # Panics\n     ///"}, {"sha": "c1b9e7af9d857f43bf77cd141ee404ebc46dc902", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -1727,3 +1727,11 @@ fn test_from_zero_sized_vec() {\n     let queue = VecDeque::from(v);\n     assert_eq!(queue.len(), 100);\n }\n+\n+#[test]\n+fn test_resize_keeps_reserved_space_from_item() {\n+    let v = Vec::<i32>::with_capacity(1234);\n+    let mut d = VecDeque::new();\n+    d.resize(1, v);\n+    assert_eq!(d[0].capacity(), 1234);\n+}"}, {"sha": "48b6177434bcbea9d6b7f20f24f70b4809b025e5", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -510,7 +510,7 @@ impl<'a> Arguments<'a> {\n     /// assert_eq!(format_args!(\"{}\", 1).as_str(), None);\n     /// ```\n     #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"103900\")]\n     #[must_use]\n     #[inline]\n     pub const fn as_str(&self) -> Option<&'static str> {"}, {"sha": "bb35d50b4bfda2a7c39313d8faa753f8758e713d", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -401,6 +401,8 @@ pub use self::sources::{once, Once};\n pub use self::sources::{once_with, OnceWith};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{repeat, Repeat};\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+pub use self::sources::{repeat_n, RepeatN};\n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub use self::sources::{repeat_with, RepeatWith};\n #[stable(feature = \"iter_successors\", since = \"1.34.0\")]"}, {"sha": "3ec426a3ad9a155cba3489d1ea4a533f124b8be9", "filename": "library/core/src/iter/sources.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -4,6 +4,7 @@ mod from_generator;\n mod once;\n mod once_with;\n mod repeat;\n+mod repeat_n;\n mod repeat_with;\n mod successors;\n \n@@ -16,6 +17,9 @@ pub use self::empty::{empty, Empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::once::{once, Once};\n \n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+pub use self::repeat_n::{repeat_n, RepeatN};\n+\n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]\n pub use self::repeat_with::{repeat_with, RepeatWith};\n "}, {"sha": "dc69bf4df595e9f68d216b07017f124fd369390a", "filename": "library/core/src/iter/sources/repeat_n.rs", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_n.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -0,0 +1,195 @@\n+use crate::iter::{FusedIterator, TrustedLen};\n+use crate::mem::ManuallyDrop;\n+\n+/// Creates a new iterator that repeats a single element a given number of times.\n+///\n+/// The `repeat_n()` function repeats a single value exactly `n` times.\n+///\n+/// This is very similar to using [`repeat()`] with [`Iterator::take()`],\n+/// but there are two differences:\n+/// - `repeat_n()` can return the original value, rather than always cloning.\n+/// - `repeat_n()` produces an [`ExactSizeIterator`].\n+///\n+/// [`repeat()`]: crate::iter::repeat\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// #![feature(iter_repeat_n)]\n+/// use std::iter;\n+///\n+/// // four of the the number four:\n+/// let mut four_fours = iter::repeat_n(4, 4);\n+///\n+/// assert_eq!(Some(4), four_fours.next());\n+/// assert_eq!(Some(4), four_fours.next());\n+/// assert_eq!(Some(4), four_fours.next());\n+/// assert_eq!(Some(4), four_fours.next());\n+///\n+/// // no more fours\n+/// assert_eq!(None, four_fours.next());\n+/// ```\n+///\n+/// For non-`Copy` types,\n+///\n+/// ```\n+/// #![feature(iter_repeat_n)]\n+/// use std::iter;\n+///\n+/// let v: Vec<i32> = Vec::with_capacity(123);\n+/// let mut it = iter::repeat_n(v, 5);\n+///\n+/// for i in 0..4 {\n+///     // It starts by cloning things\n+///     let cloned = it.next().unwrap();\n+///     assert_eq!(cloned.len(), 0);\n+///     assert_eq!(cloned.capacity(), 0);\n+/// }\n+///\n+/// // ... but the last item is the original one\n+/// let last = it.next().unwrap();\n+/// assert_eq!(last.len(), 0);\n+/// assert_eq!(last.capacity(), 123);\n+///\n+/// // ... and now we're done\n+/// assert_eq!(None, it.next());\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+#[doc(hidden)] // waiting on ACP#120 to decide whether to expose publicly\n+pub fn repeat_n<T: Clone>(element: T, count: usize) -> RepeatN<T> {\n+    let mut element = ManuallyDrop::new(element);\n+\n+    if count == 0 {\n+        // SAFETY: we definitely haven't dropped it yet, since we only just got\n+        // passed it in, and because the count is zero the instance we're about\n+        // to create won't drop it, so to avoid leaking we need to now.\n+        unsafe { ManuallyDrop::drop(&mut element) };\n+    }\n+\n+    RepeatN { element, count }\n+}\n+\n+/// An iterator that repeats an element an exact number of times.\n+///\n+/// This `struct` is created by the [`repeat_n()`] function.\n+/// See its documentation for more.\n+#[derive(Clone, Debug)]\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+#[doc(hidden)] // waiting on ACP#120 to decide whether to expose publicly\n+pub struct RepeatN<A> {\n+    count: usize,\n+    // Invariant: has been dropped iff count == 0.\n+    element: ManuallyDrop<A>,\n+}\n+\n+impl<A> RepeatN<A> {\n+    /// If we haven't already dropped the element, return it in an option.\n+    ///\n+    /// Clears the count so it won't be dropped again later.\n+    #[inline]\n+    fn take_element(&mut self) -> Option<A> {\n+        if self.count > 0 {\n+            self.count = 0;\n+            // SAFETY: We just set count to zero so it won't be dropped again,\n+            // and it used to be non-zero so it hasn't already been dropped.\n+            unsafe { Some(ManuallyDrop::take(&mut self.element)) }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+impl<A> Drop for RepeatN<A> {\n+    fn drop(&mut self) {\n+        self.take_element();\n+    }\n+}\n+\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+impl<A: Clone> Iterator for RepeatN<A> {\n+    type Item = A;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        if self.count == 0 {\n+            return None;\n+        }\n+\n+        self.count -= 1;\n+        Some(if self.count == 0 {\n+            // SAFETY: the check above ensured that the count used to be non-zero,\n+            // so element hasn't been dropped yet, and we just lowered the count to\n+            // zero so it won't be dropped later, and thus it's okay to take it here.\n+            unsafe { ManuallyDrop::take(&mut self.element) }\n+        } else {\n+            A::clone(&mut self.element)\n+        })\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let len = self.len();\n+        (len, Some(len))\n+    }\n+\n+    #[inline]\n+    fn advance_by(&mut self, skip: usize) -> Result<(), usize> {\n+        let len = self.count;\n+\n+        if skip >= len {\n+            self.take_element();\n+        }\n+\n+        if skip > len {\n+            Err(len)\n+        } else {\n+            self.count = len - skip;\n+            Ok(())\n+        }\n+    }\n+\n+    #[inline]\n+    fn last(mut self) -> Option<A> {\n+        self.take_element()\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.len()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+impl<A: Clone> ExactSizeIterator for RepeatN<A> {\n+    fn len(&self) -> usize {\n+        self.count\n+    }\n+}\n+\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+impl<A: Clone> DoubleEndedIterator for RepeatN<A> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> {\n+        self.next()\n+    }\n+\n+    #[inline]\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n+        self.advance_by(n)\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<A> {\n+        self.nth(n)\n+    }\n+}\n+\n+#[unstable(feature = \"iter_repeat_n\", issue = \"104434\")]\n+impl<A: Clone> FusedIterator for RepeatN<A> {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A: Clone> TrustedLen for RepeatN<A> {}"}, {"sha": "a15f3a5148f0a6cebd77d04fe8b55ce676ba7f50", "filename": "library/core/tests/iter/sources.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Ftests%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Ftests%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fsources.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -106,3 +106,52 @@ fn test_empty() {\n     let mut it = empty::<i32>();\n     assert_eq!(it.next(), None);\n }\n+\n+#[test]\n+fn test_repeat_n_drop() {\n+    #[derive(Clone, Debug)]\n+    struct DropCounter<'a>(&'a Cell<usize>);\n+    impl Drop for DropCounter<'_> {\n+        fn drop(&mut self) {\n+            self.0.set(self.0.get() + 1);\n+        }\n+    }\n+\n+    // `repeat_n(x, 0)` drops `x` immediately\n+    let count = Cell::new(0);\n+    let item = DropCounter(&count);\n+    let mut it = repeat_n(item, 0);\n+    assert_eq!(count.get(), 1);\n+    assert!(it.next().is_none());\n+    assert_eq!(count.get(), 1);\n+    drop(it);\n+    assert_eq!(count.get(), 1);\n+\n+    // Dropping the iterator needs to drop the item if it's non-empty\n+    let count = Cell::new(0);\n+    let item = DropCounter(&count);\n+    let it = repeat_n(item, 3);\n+    assert_eq!(count.get(), 0);\n+    drop(it);\n+    assert_eq!(count.get(), 1);\n+\n+    // Dropping the iterator doesn't drop the item if it was exhausted\n+    let count = Cell::new(0);\n+    let item = DropCounter(&count);\n+    let mut it = repeat_n(item, 3);\n+    assert_eq!(count.get(), 0);\n+    let x0 = it.next().unwrap();\n+    assert_eq!(count.get(), 0);\n+    let x1 = it.next().unwrap();\n+    assert_eq!(count.get(), 0);\n+    let x2 = it.next().unwrap();\n+    assert_eq!(count.get(), 0);\n+    assert!(it.next().is_none());\n+    assert_eq!(count.get(), 0);\n+    assert!(it.next().is_none());\n+    assert_eq!(count.get(), 0);\n+    drop(it);\n+    assert_eq!(count.get(), 0);\n+    drop((x0, x1, x2));\n+    assert_eq!(count.get(), 3);\n+}"}, {"sha": "4c0c0da652f95444c9b42eba60f29cb0dd9a7090", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -75,6 +75,7 @@\n #![feature(iter_is_partitioned)]\n #![feature(iter_next_chunk)]\n #![feature(iter_order_by)]\n+#![feature(iter_repeat_n)]\n #![feature(iterator_try_collect)]\n #![feature(iterator_try_reduce)]\n #![feature(const_mut_refs)]"}, {"sha": "20e1d9b4d5988daf60977e13b4aabdc23a952e66", "filename": "src/test/codegen/iter-repeat-n-trivial-drop.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/src%2Ftest%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/src%2Ftest%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fiter-repeat-n-trivial-drop.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -0,0 +1,56 @@\n+// compile-flags: -O\n+// only-x86_64\n+// ignore-debug: the debug assertions get in the way\n+\n+#![crate_type = \"lib\"]\n+#![feature(iter_repeat_n)]\n+\n+#[derive(Clone)]\n+pub struct NotCopy(u16);\n+\n+impl Drop for NotCopy {\n+    fn drop(&mut self) {}\n+}\n+\n+// For a type where `Drop::drop` doesn't do anything observable and a clone is the\n+// same as a move, make sure that the extra case for the last item disappears.\n+\n+#[no_mangle]\n+// CHECK-LABEL: @iter_repeat_n_next\n+pub fn iter_repeat_n_next(it: &mut std::iter::RepeatN<NotCopy>) -> Option<NotCopy> {\n+    // CHECK-NEXT: start:\n+    // CHECK-NOT: br\n+    // CHECK: %[[COUNT:.+]] = load i64\n+    // CHECK-NEXT: %[[COUNT_ZERO:.+]] = icmp eq i64 %[[COUNT]], 0\n+    // CHECK-NEXT: br i1 %[[COUNT_ZERO]], label %[[EMPTY:.+]], label %[[NOT_EMPTY:.+]]\n+\n+    // CHECK: [[NOT_EMPTY]]:\n+    // CHECK-NEXT: %[[DEC:.+]] = add i64 %[[COUNT]], -1\n+    // CHECK-NEXT: store i64 %[[DEC]]\n+    // CHECK-NOT: br\n+    // CHECK: %[[VAL:.+]] = load i16\n+    // CHECK-NEXT: br label %[[EMPTY]]\n+\n+    // CHECK: [[EMPTY]]:\n+    // CHECK-NOT: br\n+    // CHECK: phi i16 [ undef, %start ], [ %[[VAL]], %[[NOT_EMPTY]] ]\n+    // CHECK-NOT: br\n+    // CHECK: ret\n+\n+    it.next()\n+}\n+\n+// And as a result, using the iterator can optimize without special cases for\n+// the last iteration, like `memset`ing all the items in one call.\n+\n+#[no_mangle]\n+// CHECK-LABEL: @vec_extend_via_iter_repeat_n\n+pub fn vec_extend_via_iter_repeat_n() -> Vec<u8> {\n+    // CHECK: %[[ADDR:.+]] = tail call dereferenceable_or_null(1234) ptr @__rust_alloc(i64 1234, i64 1)\n+    // CHECK: tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1234) %[[ADDR]], i8 42, i64 1234,\n+\n+    let n = 1234_usize;\n+    let mut v = Vec::with_capacity(n);\n+    v.extend(std::iter::repeat_n(42_u8, n));\n+    v\n+}"}, {"sha": "b7601a548b9981cf5540f43b7866e3f6c9084722", "filename": "src/test/ui/suggestions/issue-104287.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -0,0 +1,9 @@\n+// The purpose of this test is not to validate the output of the compiler.\n+// Instead, it ensures the suggestion is generated without performing an arithmetic overflow.\n+\n+fn main() {\n+    let x = not_found; //~ ERROR cannot find value `not_found` in this scope\n+    simd_gt::<()>(x);\n+    //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n+    //~| ERROR cannot find function `simd_gt` in this scope\n+}"}, {"sha": "4b302dd6509192f79b5367406b2594e248ac4f2a", "filename": "src/test/ui/suggestions/issue-104287.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2ed65da15279d25e8b8b91d60162930ab48f16f6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ed65da15279d25e8b8b91d60162930ab48f16f6/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=2ed65da15279d25e8b8b91d60162930ab48f16f6", "patch": "@@ -0,0 +1,36 @@\n+error[E0425]: cannot find value `not_found` in this scope\n+  --> $DIR/issue-104287.rs:5:13\n+   |\n+LL |     let x = not_found;\n+   |             ^^^^^^^^^ not found in this scope\n+\n+error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n+  --> $DIR/issue-104287.rs:6:5\n+   |\n+LL |     simd_gt::<()>(x);\n+   |     ^^^^^^^------ help: remove these generics\n+   |     |\n+   |     expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $SRC_DIR/core/src/../../portable-simd/crates/core_simd/src/ord.rs:LL:COL\n+   |\n+LL |     fn simd_gt(self, other: Self) -> Self::Mask;\n+   |        ^^^^^^^\n+\n+error[E0425]: cannot find function `simd_gt` in this scope\n+  --> $DIR/issue-104287.rs:6:5\n+   |\n+LL |     simd_gt::<()>(x);\n+   |     ^^^^^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `SimdPartialOrd::simd_gt` on `[type error]`\n+   |\n+LL -     simd_gt::<()>(x);\n+LL +     x.simd_gt();\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0425.\n+For more information about an error, try `rustc --explain E0107`."}]}