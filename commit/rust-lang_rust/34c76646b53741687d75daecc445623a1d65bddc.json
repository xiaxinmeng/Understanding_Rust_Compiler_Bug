{"sha": "34c76646b53741687d75daecc445623a1d65bddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Yzc2NjQ2YjUzNzQxNjg3ZDc1ZGFlY2M0NDU2MjNhMWQ2NWJkZGM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-23T01:57:26Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-23T02:02:58Z"}, "message": "save-analysis: add values for types", "tree": {"sha": "c76ae1021ef58d3e9a0cfec966c2d51ad68c691c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c76ae1021ef58d3e9a0cfec966c2d51ad68c691c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c76646b53741687d75daecc445623a1d65bddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c76646b53741687d75daecc445623a1d65bddc", "html_url": "https://github.com/rust-lang/rust/commit/34c76646b53741687d75daecc445623a1d65bddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c76646b53741687d75daecc445623a1d65bddc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e83785c51f46cc6de6bd64816ad35f60c0e968d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e83785c51f46cc6de6bd64816ad35f60c0e968d8", "html_url": "https://github.com/rust-lang/rust/commit/e83785c51f46cc6de6bd64816ad35f60c0e968d8"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "b9273d2be1cfded3f7ae97ecb9d4517b2632299a", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34c76646b53741687d75daecc445623a1d65bddc/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c76646b53741687d75daecc445623a1d65bddc/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=34c76646b53741687d75daecc445623a1d65bddc", "patch": "@@ -568,13 +568,15 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             Some(node_id) => node_id,\n             None => -1,\n         };\n+        let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Struct);\n         self.fmt.struct_str(item.span,\n                             sub_span,\n                             item.id,\n                             ctor_id,\n                             qualname.as_slice(),\n-                            self.cur_scope);\n+                            self.cur_scope,\n+                            val.as_slice());\n \n         // fields\n         for field in def.fields.iter() {\n@@ -590,12 +592,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     enum_definition: &ast::EnumDef,\n                     ty_params: &ast::Generics) {\n         let enum_name = self.analysis.ty_cx.map.path_to_string(item.id);\n+        let val = self.span.snippet(item.span);\n         match self.span.sub_span_after_keyword(item.span, keywords::Enum) {\n             Some(sub_span) => self.fmt.enum_str(item.span,\n                                                 Some(sub_span),\n                                                 item.id,\n                                                 enum_name.as_slice(),\n-                                                self.cur_scope),\n+                                                self.cur_scope,\n+                                                val.as_slice()),\n             None => self.sess.span_bug(item.span,\n                                        format!(\"Could not find subspan for enum {}\",\n                                                enum_name).as_slice()),\n@@ -700,13 +704,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                      trait_refs: &OwnedSlice<ast::TyParamBound>,\n                      methods: &Vec<ast::TraitItem>) {\n         let qualname = self.analysis.ty_cx.map.path_to_string(item.id);\n-\n+        let val = self.span.snippet(item.span);\n         let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Trait);\n         self.fmt.trait_str(item.span,\n                            sub_span,\n                            item.id,\n                            qualname.as_slice(),\n-                           self.cur_scope);\n+                           self.cur_scope,\n+                           val.as_slice());\n \n         // super-traits\n         for super_bound in trait_refs.iter() {"}, {"sha": "8eda199af3bb59f355ebed0a7a761c81a70b0284", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34c76646b53741687d75daecc445623a1d65bddc/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c76646b53741687d75daecc445623a1d65bddc/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=34c76646b53741687d75daecc445623a1d65bddc", "patch": "@@ -106,7 +106,7 @@ impl<'a> FmtStrs<'a> {\n             Variable => (\"variable\",\n                          vec!(\"id\",\"name\",\"qualname\",\"value\",\"type\",\"scopeid\"),\n                          true, true),\n-            Enum => (\"enum\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n+            Enum => (\"enum\", vec!(\"id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n             Variant => (\"variant\",\n                         vec!(\"id\",\"name\",\"qualname\",\"type\",\"value\",\"scopeid\"),\n                         true, true),\n@@ -117,8 +117,8 @@ impl<'a> FmtStrs<'a> {\n                          vec!(\"id\",\"qualname\",\"declid\",\"declidcrate\",\"scopeid\"),\n                          true, true),\n             MethodDecl => (\"method_decl\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n-            Struct => (\"struct\", vec!(\"id\",\"ctor_id\",\"qualname\",\"scopeid\"), true, true),\n-            Trait => (\"trait\", vec!(\"id\",\"qualname\",\"scopeid\"), true, true),\n+            Struct => (\"struct\", vec!(\"id\",\"ctor_id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n+            Trait => (\"trait\", vec!(\"id\",\"qualname\",\"scopeid\",\"value\"), true, true),\n             Impl => (\"impl\", vec!(\"id\",\"refid\",\"refidcrate\",\"scopeid\"), true, true),\n             Module => (\"module\", vec!(\"id\",\"qualname\",\"scopeid\",\"def_file\"), true, false),\n             UseAlias => (\"use_alias\",\n@@ -161,6 +161,7 @@ impl<'a> FmtStrs<'a> {\n         }\n \n         let values = values.iter().map(|s| {\n+            // Never take more than 1020 chars\n             if s.len() > 1020 {\n                 s.as_slice().slice_to(1020)\n             } else {\n@@ -327,11 +328,12 @@ impl<'a> FmtStrs<'a> {\n                     sub_span: Option<Span>,\n                     id: NodeId,\n                     name: &str,\n-                    scope_id: NodeId) {\n+                    scope_id: NodeId,\n+                    value: &str) {\n         self.check_and_record(Enum,\n                               span,\n                               sub_span,\n-                              svec!(id, name, scope_id));\n+                              svec!(id, name, scope_id, value));\n     }\n \n     pub fn tuple_variant_str(&mut self,\n@@ -411,23 +413,25 @@ impl<'a> FmtStrs<'a> {\n                       id: NodeId,\n                       ctor_id: NodeId,\n                       name: &str,\n-                      scope_id: NodeId) {\n+                      scope_id: NodeId,\n+                      value: &str) {\n         self.check_and_record(Struct,\n                               span,\n                               sub_span,\n-                              svec!(id, ctor_id, name, scope_id));\n+                              svec!(id, ctor_id, name, scope_id, value));\n     }\n \n     pub fn trait_str(&mut self,\n                      span: Span,\n                      sub_span: Option<Span>,\n                      id: NodeId,\n                      name: &str,\n-                     scope_id: NodeId) {\n+                     scope_id: NodeId,\n+                     value: &str) {\n         self.check_and_record(Trait,\n                               span,\n                               sub_span,\n-                              svec!(id, name, scope_id));\n+                              svec!(id, name, scope_id, value));\n     }\n \n     pub fn impl_str(&mut self,"}]}