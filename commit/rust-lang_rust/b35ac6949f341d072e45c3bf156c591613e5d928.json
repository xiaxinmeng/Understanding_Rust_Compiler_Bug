{"sha": "b35ac6949f341d072e45c3bf156c591613e5d928", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNWFjNjk0OWYzNDFkMDcyZTQ1YzNiZjE1NmM1OTE2MTNlNWQ5Mjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-10T09:58:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-10T09:58:48Z"}, "message": "fix Miri errors in libcore doctests", "tree": {"sha": "651fea5fe05b1203e09e47adf6fd4b518aa57761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651fea5fe05b1203e09e47adf6fd4b518aa57761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b35ac6949f341d072e45c3bf156c591613e5d928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b35ac6949f341d072e45c3bf156c591613e5d928", "html_url": "https://github.com/rust-lang/rust/commit/b35ac6949f341d072e45c3bf156c591613e5d928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b35ac6949f341d072e45c3bf156c591613e5d928/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481598b26db6144c580dc113f4d78b4151b5a1bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/481598b26db6144c580dc113f4d78b4151b5a1bc", "html_url": "https://github.com/rust-lang/rust/commit/481598b26db6144c580dc113f4d78b4151b5a1bc"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "4d7d47579ee40cbf9a712f1904fd48551214049e", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b35ac6949f341d072e45c3bf156c591613e5d928", "patch": "@@ -736,22 +736,22 @@ impl<T> MaybeUninit<T> {\n     /// #![feature(maybe_uninit_ref)]\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// # unsafe extern \"C\" fn initialize_buffer(buf: *mut [u8; 2048]) { *buf = [0; 2048] }\n+    /// # unsafe extern \"C\" fn initialize_buffer(buf: *mut [u8; 1024]) { *buf = [0; 1024] }\n     /// # #[cfg(FALSE)]\n     /// extern \"C\" {\n     ///     /// Initializes *all* the bytes of the input buffer.\n-    ///     fn initialize_buffer(buf: *mut [u8; 2048]);\n+    ///     fn initialize_buffer(buf: *mut [u8; 1024]);\n     /// }\n     ///\n-    /// let mut buf = MaybeUninit::<[u8; 2048]>::uninit();\n+    /// let mut buf = MaybeUninit::<[u8; 1024]>::uninit();\n     ///\n     /// // Initialize `buf`:\n     /// unsafe { initialize_buffer(buf.as_mut_ptr()); }\n     /// // Now we know that `buf` has been initialized, so we could `.assume_init()` it.\n-    /// // However, using `.assume_init()` may trigger a `memcpy` of the 2048 bytes.\n+    /// // However, using `.assume_init()` may trigger a `memcpy` of the 1024 bytes.\n     /// // To assert our buffer has been initialized without copying it, we upgrade\n-    /// // the `&mut MaybeUninit<[u8; 2048]>` to a `&mut [u8; 2048]`:\n-    /// let buf: &mut [u8; 2048] = unsafe {\n+    /// // the `&mut MaybeUninit<[u8; 1024]>` to a `&mut [u8; 1024]`:\n+    /// let buf: &mut [u8; 1024] = unsafe {\n     ///     // SAFETY: `buf` has been initialized.\n     ///     buf.assume_init_mut()\n     /// };"}, {"sha": "4571ba154eacb750e53eb33b5ed99a0f3049983e", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=b35ac6949f341d072e45c3bf156c591613e5d928", "patch": "@@ -724,7 +724,7 @@ impl<T: ?Sized> *const T {\n     /// #![feature(set_ptr_value)]\n     /// # use core::fmt::Debug;\n     /// let arr: [i32; 3] = [1, 2, 3];\n-    /// let mut ptr = &arr[0] as *const dyn Debug;\n+    /// let mut ptr = arr.as_ptr() as *const dyn Debug;\n     /// let thin = ptr as *const u8;\n     /// unsafe {\n     ///     ptr = ptr.set_ptr_value(thin.add(8));"}, {"sha": "ba08823e343b116fc44c3d030bcd1388f7ba785c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b35ac6949f341d072e45c3bf156c591613e5d928", "patch": "@@ -830,7 +830,7 @@ impl<T: ?Sized> *mut T {\n     /// #![feature(set_ptr_value)]\n     /// # use core::fmt::Debug;\n     /// let mut arr: [i32; 3] = [1, 2, 3];\n-    /// let mut ptr = &mut arr[0] as *mut dyn Debug;\n+    /// let mut ptr = arr.as_mut_ptr() as *mut dyn Debug;\n     /// let thin = ptr as *mut u8;\n     /// unsafe {\n     ///     ptr = ptr.set_ptr_value(thin.add(8));"}, {"sha": "9085d5c7b97432af7b649d87d3b1aeff56fadac3", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ac6949f341d072e45c3bf156c591613e5d928/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=b35ac6949f341d072e45c3bf156c591613e5d928", "patch": "@@ -78,7 +78,7 @@\n //! ```\n //! use std::sync::Arc;\n //! use std::sync::atomic::{AtomicUsize, Ordering};\n-//! use std::thread;\n+//! use std::{hint, thread};\n //!\n //! fn main() {\n //!     let spinlock = Arc::new(AtomicUsize::new(1));\n@@ -89,7 +89,9 @@\n //!     });\n //!\n //!     // Wait for the other thread to release the lock\n-//!     while spinlock.load(Ordering::SeqCst) != 0 {}\n+//!     while spinlock.load(Ordering::SeqCst) != 0 {\n+//!         hint::spin_loop();\n+//!     }\n //!\n //!     if let Err(panic) = thread.join() {\n //!         println!(\"Thread had an error: {:?}\", panic);\n@@ -898,8 +900,10 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n-    /// let mut atomic_ptr = AtomicPtr::new(&mut 10);\n-    /// *atomic_ptr.get_mut() = &mut 5;\n+    /// let mut data = 10;\n+    /// let mut atomic_ptr = AtomicPtr::new(&mut data);\n+    /// let mut other_data = 5;\n+    /// *atomic_ptr.get_mut() = &mut other_data;\n     /// assert_eq!(unsafe { *atomic_ptr.load(Ordering::SeqCst) }, 5);\n     /// ```\n     #[inline]\n@@ -916,9 +920,11 @@ impl<T> AtomicPtr<T> {\n     /// #![feature(atomic_from_mut)]\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n-    /// let mut some_ptr = &mut 123 as *mut i32;\n+    /// let mut data = 123;\n+    /// let mut some_ptr = &mut data as *mut i32;\n     /// let a = AtomicPtr::from_mut(&mut some_ptr);\n-    /// a.store(&mut 456, Ordering::Relaxed);\n+    /// let mut other_data = 456;\n+    /// a.store(&mut other_data, Ordering::Relaxed);\n     /// assert_eq!(unsafe { *some_ptr }, 456);\n     /// ```\n     #[inline]\n@@ -944,7 +950,8 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     /// use std::sync::atomic::AtomicPtr;\n     ///\n-    /// let atomic_ptr = AtomicPtr::new(&mut 5);\n+    /// let mut data = 5;\n+    /// let atomic_ptr = AtomicPtr::new(&mut data);\n     /// assert_eq!(unsafe { *atomic_ptr.into_inner() }, 5);\n     /// ```\n     #[inline]"}]}