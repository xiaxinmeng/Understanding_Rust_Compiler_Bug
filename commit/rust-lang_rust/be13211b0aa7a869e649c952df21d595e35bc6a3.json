{"sha": "be13211b0aa7a869e649c952df21d595e35bc6a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTMyMTFiMGFhN2E4NjllNjQ5Yzk1MmRmMjFkNTk1ZTM1YmM2YTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-28T21:34:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-28T21:34:09Z"}, "message": "Rollup merge of #21626 - Ms2ger:various-cleanup, r=eddyb", "tree": {"sha": "0385e2ca8cf5036ce994e2ba3b33319b784097b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0385e2ca8cf5036ce994e2ba3b33319b784097b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be13211b0aa7a869e649c952df21d595e35bc6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be13211b0aa7a869e649c952df21d595e35bc6a3", "html_url": "https://github.com/rust-lang/rust/commit/be13211b0aa7a869e649c952df21d595e35bc6a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be13211b0aa7a869e649c952df21d595e35bc6a3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0be3b3e76773618bf230b7188ac633ac0e76aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0be3b3e76773618bf230b7188ac633ac0e76aa", "html_url": "https://github.com/rust-lang/rust/commit/ee0be3b3e76773618bf230b7188ac633ac0e76aa"}, {"sha": "7aa27353931c3cad8d43ee7ba82f622a68faac18", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa27353931c3cad8d43ee7ba82f622a68faac18", "html_url": "https://github.com/rust-lang/rust/commit/7aa27353931c3cad8d43ee7ba82f622a68faac18"}], "stats": {"total": 97, "additions": 36, "deletions": 61}, "files": [{"sha": "1295970d667b06b57f8e503e2b6c0b3b467da5b5", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -10,10 +10,6 @@\n \n // Searching for information from the cstore\n \n-#![allow(non_camel_case_types)]\n-\n-pub use self::found_ast::*;\n-\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n@@ -101,18 +97,18 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n     r\n }\n \n-pub enum found_ast<'ast> {\n-    found(&'ast ast::InlinedItem),\n-    found_parent(ast::DefId, &'ast ast::InlinedItem),\n-    not_found,\n+pub enum FoundAst<'ast> {\n+    Found(&'ast ast::InlinedItem),\n+    FoundParent(ast::DefId, &'ast ast::InlinedItem),\n+    NotFound,\n }\n \n // Finds the AST for this item in the crate metadata, if any.  If the item was\n // not marked for inlining, then the AST will not be present and hence none\n // will be returned.\n pub fn maybe_get_item_ast<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId,\n                                 decode_inlined_item: decoder::DecodeInlinedItem)\n-                                -> found_ast<'tcx> {\n+                                -> FoundAst<'tcx> {\n     let cstore = &tcx.sess.cstore;\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::maybe_get_item_ast(&*cdata, tcx, def.node, decode_inlined_item)"}, {"sha": "b573c54ef855bcb363fa79798a4aee7eb7264571", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -693,23 +693,23 @@ pub type DecodeInlinedItem<'a> =\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeId,\n                                 mut decode_inlined_item: DecodeInlinedItem)\n-                                -> csearch::found_ast<'tcx> {\n+                                -> csearch::FoundAst<'tcx> {\n     debug!(\"Looking up item: {}\", id);\n     let item_doc = lookup_item(id, cdata.data());\n     let path = item_path(item_doc).init().to_vec();\n     match decode_inlined_item(cdata, tcx, path, item_doc) {\n-        Ok(ii) => csearch::found(ii),\n+        Ok(ii) => csearch::FoundAst::Found(ii),\n         Err(path) => {\n             match item_parent_item(item_doc) {\n                 Some(did) => {\n                     let did = translate_def_id(cdata, did);\n                     let parent_item = lookup_item(did.node, cdata.data());\n                     match decode_inlined_item(cdata, tcx, path, parent_item) {\n-                        Ok(ii) => csearch::found_parent(did, ii),\n-                        Err(_) => csearch::not_found\n+                        Ok(ii) => csearch::FoundAst::FoundParent(did, ii),\n+                        Err(_) => csearch::FoundAst::NotFound\n                     }\n                 }\n-                None => csearch::not_found\n+                None => csearch::FoundAst::NotFound\n             }\n         }\n     }"}, {"sha": "783bc8810572f3492b710e9d0bd7a9b93048aaee", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -1577,7 +1577,7 @@ fn encode_info_for_items(ecx: &EncodeContext,\n                         &krate.module,\n                         &[],\n                         ast::CRATE_NODE_ID,\n-                        ast_map::Values([].iter()).chain(None),\n+                        [].iter().cloned().chain(None),\n                         syntax::parse::token::special_idents::invalid,\n                         ast::Public);\n \n@@ -1949,7 +1949,7 @@ fn encode_misc_info(ecx: &EncodeContext,\n     }\n \n     // Encode reexports for the root module.\n-    encode_reexports(ecx, rbml_w, 0, ast_map::Values([].iter()).chain(None));\n+    encode_reexports(ecx, rbml_w, 0, [].iter().cloned().chain(None));\n \n     rbml_w.end_tag();\n     rbml_w.end_tag();"}, {"sha": "66f8331dd6cb3127d9a38882cfbfdfd2a6126d0f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -130,7 +130,7 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n         debug!(\"> Decoding inlined fn: {:?}::?\",\n         {\n             // Do an Option dance to use the path after it is moved below.\n-            let s = ast_map::path_to_string(ast_map::Values(path.iter()));\n+            let s = ast_map::path_to_string(path.iter().cloned());\n             path_as_str = Some(s);\n             path_as_str.as_ref().map(|x| &x[])\n         });"}, {"sha": "00141903c7c3be894b337740e6c6a5a6dcdbfa71", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -133,7 +133,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n             box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n-            csearch::found(&ast::IIItem(ref item)) => match item.node {\n+            csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n                     // NodeId's to the original variant_def's NodeId, but they\n@@ -173,7 +173,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n             box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n-            csearch::found(&ast::IIItem(ref item)) => match item.node {\n+            csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None\n             },"}, {"sha": "88e2f8965c0ad8755493ce438a2fe75d0e7edffe", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -5264,7 +5264,7 @@ pub fn with_path<T, F>(cx: &ctxt, id: ast::DefId, f: F) -> T where\n     if id.krate == ast::LOCAL_CRATE {\n         cx.map.with_path(id.node, f)\n     } else {\n-        f(ast_map::Values(csearch::get_item_path(cx, id).iter()).chain(None))\n+        f(csearch::get_item_path(cx, id).iter().cloned().chain(None))\n     }\n }\n "}, {"sha": "f6d061ea722add971cb1cec902bca611b77372c9", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -37,7 +37,6 @@ use flate;\n use serialize::hex::ToHex;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathElems, PathName};\n-use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -339,7 +338,7 @@ pub fn mangle_internal_name_by_type_and_seq<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n     let path = [PathName(token::intern(&s[])),\n                 gensym_name(name)];\n     let hash = get_symbol_hash(ccx, t);\n-    mangle(ast_map::Values(path.iter()), Some(&hash[]))\n+    mangle(path.iter().cloned(), Some(&hash[]))\n }\n \n pub fn mangle_internal_name_by_path_and_seq(path: PathElems, flav: &str) -> String {"}, {"sha": "ea6d9b88e117e2981db9c5d5a08d3f0e6dab8a57", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -43,11 +43,11 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n \n     let inline_def = match csearch_result {\n-        csearch::not_found => {\n+        csearch::FoundAst::NotFound => {\n             ccx.external().borrow_mut().insert(fn_id, None);\n             return None;\n         }\n-        csearch::found(&ast::IIItem(ref item)) => {\n+        csearch::FoundAst::Found(&ast::IIItem(ref item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n \n@@ -90,12 +90,12 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n \n             local_def(item.id)\n         }\n-        csearch::found(&ast::IIForeign(ref item)) => {\n+        csearch::FoundAst::Found(&ast::IIForeign(ref item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n             local_def(item.id)\n         }\n-        csearch::found_parent(parent_id, &ast::IIItem(ref item)) => {\n+        csearch::FoundAst::FoundParent(parent_id, &ast::IIItem(ref item)) => {\n             ccx.external().borrow_mut().insert(parent_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, parent_id);\n \n@@ -124,11 +124,11 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n           trans_item(ccx, &**item);\n           local_def(my_id)\n         }\n-        csearch::found_parent(_, _) => {\n-            ccx.sess().bug(\"maybe_get_item_ast returned a found_parent \\\n+        csearch::FoundAst::FoundParent(_, _) => {\n+            ccx.sess().bug(\"maybe_get_item_ast returned a FoundParent \\\n              with a non-item parent\");\n         }\n-        csearch::found(&ast::IITraitItem(_, ref trait_item)) => {\n+        csearch::FoundAst::Found(&ast::IITraitItem(_, ref trait_item)) => {\n             match *trait_item {\n                 ast::RequiredMethod(_) => ccx.sess().bug(\"found RequiredMethod IITraitItem\"),\n                 ast::ProvidedMethod(ref mth) => {\n@@ -147,7 +147,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n                 }\n             }\n         }\n-        csearch::found(&ast::IIImplItem(impl_did, ref impl_item)) => {\n+        csearch::FoundAst::Found(&ast::IIImplItem(impl_did, ref impl_item)) => {\n             match *impl_item {\n                 ast::MethodImplItem(ref mth) => {\n                     ccx.external().borrow_mut().insert(fn_id, Some(mth.id));"}, {"sha": "002e003afcb88cf8051464ff454be9a34deec768", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -75,21 +75,8 @@ impl<'a> Iterator for LinkedPath<'a> {\n     }\n }\n \n-// HACK(eddyb) move this into libstd (value wrapper for slice::Iter).\n-#[derive(Clone)]\n-pub struct Values<'a, T:'a>(pub slice::Iter<'a, T>);\n-\n-impl<'a, T: Copy> Iterator for Values<'a, T> {\n-    type Item = T;\n-\n-    fn next(&mut self) -> Option<T> {\n-        let &mut Values(ref mut items) = self;\n-        items.next().map(|&x| x)\n-    }\n-}\n-\n /// The type of the iterator used by with_path.\n-pub type PathElems<'a, 'b> = iter::Chain<Values<'a, PathElem>, LinkedPath<'b>>;\n+pub type PathElems<'a, 'b> = iter::Chain<iter::Cloned<slice::Iter<'a, PathElem>>, LinkedPath<'b>>;\n \n pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     let itr = token::get_ident_interner();\n@@ -101,7 +88,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n         }\n         s.push_str(&e[]);\n         s\n-    }).to_string()\n+    })\n }\n \n #[derive(Copy, Show)]\n@@ -458,9 +445,9 @@ impl<'ast> Map<'ast> {\n         if parent == id {\n             match self.find_entry(id) {\n                 Some(RootInlinedParent(data)) => {\n-                    f(Values(data.path.iter()).chain(next))\n+                    f(data.path.iter().cloned().chain(next))\n                 }\n-                _ => f(Values([].iter()).chain(next))\n+                _ => f([].iter().cloned().chain(next))\n             }\n         } else {\n             self.with_path_next(parent, Some(&LinkedPathNode {"}, {"sha": "07d3290d410f707451ed98ad7d4ab56cf2fdaa3c", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be13211b0aa7a869e649c952df21d595e35bc6a3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=be13211b0aa7a869e649c952df21d595e35bc6a3", "patch": "@@ -670,20 +670,13 @@ pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool {\n \n // are two arrays of segments equal when compared unhygienically?\n pub fn segments_name_eq(a : &[ast::PathSegment], b : &[ast::PathSegment]) -> bool {\n-    if a.len() != b.len() {\n-        false\n-    } else {\n-        for (idx,seg) in a.iter().enumerate() {\n-            if seg.identifier.name != b[idx].identifier.name\n-                // FIXME #7743: ident -> name problems in lifetime comparison?\n-                // can types contain idents?\n-                || seg.parameters != b[idx].parameters\n-            {\n-                return false;\n-            }\n-        }\n-        true\n-    }\n+    a.len() == b.len() &&\n+    a.iter().zip(b.iter()).all(|(s, t)| {\n+        s.identifier.name == t.identifier.name &&\n+        // FIXME #7743: ident -> name problems in lifetime comparison?\n+        // can types contain idents?\n+        s.parameters == t.parameters\n+    })\n }\n \n /// Returns true if this literal is a string and false otherwise."}]}