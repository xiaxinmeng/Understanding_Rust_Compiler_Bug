{"sha": "13ea9062a918e3e60d82186135610a575bf92394", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZWE5MDYyYTkxOGUzZTYwZDgyMTg2MTM1NjEwYTU3NWJmOTIzOTQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-01-14T19:45:51Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-19T23:32:59Z"}, "message": "Made match_indices use the generic pattern API", "tree": {"sha": "eeb3f0ca08fb92502f8541eb83a7fc1f104eb31b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb3f0ca08fb92502f8541eb83a7fc1f104eb31b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ea9062a918e3e60d82186135610a575bf92394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ea9062a918e3e60d82186135610a575bf92394", "html_url": "https://github.com/rust-lang/rust/commit/13ea9062a918e3e60d82186135610a575bf92394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ea9062a918e3e60d82186135610a575bf92394/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc09c1ddc5604642926428d69f2ebd7557b3230b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc09c1ddc5604642926428d69f2ebd7557b3230b", "html_url": "https://github.com/rust-lang/rust/commit/bc09c1ddc5604642926428d69f2ebd7557b3230b"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "ada9b71211ce04fefb1d68b6180e177165f76614", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/13ea9062a918e3e60d82186135610a575bf92394/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ea9062a918e3e60d82186135610a575bf92394/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=13ea9062a918e3e60d82186135610a575bf92394", "patch": "@@ -35,6 +35,7 @@ use raw::{Repr, Slice};\n use result::Result::{self, Ok, Err};\n use slice::{self, SliceExt};\n use usize;\n+use clone::Clone;\n \n pub use self::pattern::{Pattern, Matcher, ReverseMatcher, DoubleEndedMatcher};\n \n@@ -933,41 +934,48 @@ impl Searcher {\n \n #[derive(Clone)]\n #[unstable(feature = \"core\", reason = \"type may be removed\")]\n-struct OldMatchIndices<'a> {\n+struct OldMatchIndices<'a, 'b> {\n     // constants\n     haystack: &'a str,\n-    needle: &'a str,\n+    needle: &'b str,\n     searcher: Searcher\n }\n \n /// An iterator over the start and end indices of the matches of a\n /// substring within a larger string\n-#[derive(Clone)]\n #[unstable(feature = \"core\", reason = \"type may be removed\")]\n-pub struct MatchIndices<'a>(OldMatchIndices<'a>);\n+pub struct MatchIndices<'a, P: Pattern<'a>>(P::Matcher);\n \n #[stable]\n-impl<'a> Iterator for MatchIndices<'a> {\n+impl<'a, P: Pattern<'a>> Iterator for MatchIndices<'a, P> {\n     type Item = (uint, uint);\n \n     #[inline]\n     fn next(&mut self) -> Option<(uint, uint)> {\n-        self.0.next()\n+        Matcher::next(&mut self.0)\n     }\n }\n \n /// An iterator over the substrings of a string separated by a given\n /// search string\n-#[derive(Clone)]\n #[unstable(feature = \"core\", reason = \"type may be removed\")]\n-pub struct SplitStr<'a> {\n-    it: OldMatchIndices<'a>,\n+pub struct SplitStr<'a, 'b> {\n+    it: pattern::StrMatcher<'a, 'b>,\n     last_end: uint,\n     finished: bool\n }\n \n+impl<'a, 'b> Clone for SplitStr<'a, 'b> {\n+    fn clone(&self) -> Self {\n+        SplitStr {\n+            it: Clone::clone(&self.it),\n+            ..*self\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Iterator for OldMatchIndices<'a> {\n+impl<'a, 'b> Iterator for OldMatchIndices<'a, 'b> {\n     type Item = (uint, uint);\n \n     #[inline]\n@@ -998,22 +1006,22 @@ impl<'a> Iterator for OldMatchIndices<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Iterator for SplitStr<'a> {\n+impl<'a, 'b> Iterator for SplitStr<'a, 'b> {\n     type Item = &'a str;\n \n     #[inline]\n     fn next(&mut self) -> Option<&'a str> {\n         if self.finished { return None; }\n-\n-        match self.it.next() {\n+        let haystack = Matcher::haystack(&self.it);\n+        match Matcher::next(&mut self.it) {\n             Some((from, to)) => {\n-                let ret = Some(&self.it.haystack[self.last_end .. from]);\n+                let ret = Some(&haystack[self.last_end..from]);\n                 self.last_end = to;\n                 ret\n             }\n             None => {\n                 self.finished = true;\n-                Some(&self.it.haystack[self.last_end .. self.it.haystack.len()])\n+                Some(&haystack[self.last_end..])\n             }\n         }\n     }\n@@ -1375,8 +1383,8 @@ pub trait StrExt {\n     fn splitn<'a, P: CharEq>(&'a self, count: uint, pat: P) -> SplitN<'a, P>;\n     fn split_terminator<'a, P: CharEq>(&'a self, pat: P) -> SplitTerminator<'a, P>;\n     fn rsplitn<'a, P: CharEq>(&'a self, count: uint, pat: P) -> RSplitN<'a, P>;\n-    fn match_indices<'a>(&'a self, sep: &'a str) -> MatchIndices<'a>;\n-    fn split_str<'a>(&'a self, pat: &'a str) -> SplitStr<'a>;\n+    fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P>;\n+    fn split_str<'a, 'b>(&'a self, pat: &'b str) -> SplitStr<'a, 'b>;\n     fn lines<'a>(&'a self) -> Lines<'a>;\n     fn lines_any<'a>(&'a self) -> LinesAny<'a>;\n     fn char_len(&self) -> uint;\n@@ -1478,16 +1486,12 @@ impl StrExt for str {\n     }\n \n     #[inline]\n-    fn match_indices<'a>(&'a self, sep: &'a str) -> MatchIndices<'a> {\n-        MatchIndices(OldMatchIndices {\n-            haystack: self,\n-            needle: sep,\n-            searcher: Searcher::new(self.as_bytes(), sep.as_bytes())\n-        })\n+    fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n+        MatchIndices(pat.into_matcher(self))\n     }\n \n     #[inline]\n-    fn split_str<'a>(&'a self, sep: &'a str) -> SplitStr<'a> {\n+    fn split_str<'a, 'b>(&'a self, sep: &'b str) -> SplitStr<'a, 'b> {\n         SplitStr {\n             it: self.match_indices(sep).0,\n             last_end: 0,"}, {"sha": "077c4c8f7b46cbcfa82824f89df60960f8bec430", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13ea9062a918e3e60d82186135610a575bf92394/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ea9062a918e3e60d82186135610a575bf92394/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=13ea9062a918e3e60d82186135610a575bf92394", "patch": "@@ -84,13 +84,14 @@ impl<'a, C: CharEq> DoubleEndedMatcher<'a> for CharEqMatcher<'a, C> {}\n \n // Impl for &str\n \n-struct StrMatcher<'a>(super::OldMatchIndices<'a>);\n+#[derive(Clone)]\n+pub struct StrMatcher<'a, 'b>(super::OldMatchIndices<'a, 'b>);\n \n-impl<'a> Pattern<'a> for &'a str {\n-    type Matcher = StrMatcher<'a>;\n+impl<'a, 'b> Pattern<'a> for &'b str {\n+    type Matcher = StrMatcher<'a, 'b>;\n \n     #[inline]\n-    fn into_matcher(self, haystack: &'a str) -> StrMatcher<'a> {\n+    fn into_matcher(self, haystack: &'a str) -> StrMatcher<'a, 'b> {\n         let mi = super::OldMatchIndices {\n             haystack: haystack,\n             needle: self,\n@@ -100,7 +101,7 @@ impl<'a> Pattern<'a> for &'a str {\n     }\n }\n \n-unsafe impl<'a> Matcher<'a> for StrMatcher<'a>  {\n+unsafe impl<'a, 'b> Matcher<'a> for StrMatcher<'a, 'b>  {\n     #[inline]\n     fn haystack(&self) -> &'a str {\n         self.0.haystack"}]}