{"sha": "d2b7711e8e955649e532d0e78279876178a51983", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYjc3MTFlOGU5NTU2NDllNTMyZDBlNzgyNzk4NzYxNzhhNTE5ODM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-03T18:23:01Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-05T17:58:57Z"}, "message": "Match on self first in subtract_constructor", "tree": {"sha": "98a3b06aff0811f9d53eab53e1c7e4d130442934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a3b06aff0811f9d53eab53e1c7e4d130442934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b7711e8e955649e532d0e78279876178a51983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b7711e8e955649e532d0e78279876178a51983", "html_url": "https://github.com/rust-lang/rust/commit/d2b7711e8e955649e532d0e78279876178a51983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b7711e8e955649e532d0e78279876178a51983/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235b379928b03e6a55197300b564387236c84667", "url": "https://api.github.com/repos/rust-lang/rust/commits/235b379928b03e6a55197300b564387236c84667", "html_url": "https://github.com/rust-lang/rust/commit/235b379928b03e6a55197300b564387236c84667"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "f7b6203c15bac23c9fdeefbe9d5c75e777f9f3ec", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d2b7711e8e955649e532d0e78279876178a51983/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b7711e8e955649e532d0e78279876178a51983/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=d2b7711e8e955649e532d0e78279876178a51983", "patch": "@@ -657,31 +657,43 @@ impl<'tcx> Constructor<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         other_ctors: &Vec<Constructor<'tcx>>,\n     ) -> Vec<Constructor<'tcx>> {\n-        let mut refined_ctors = vec![self.clone()];\n-        for other_ctor in other_ctors {\n-            if other_ctor == self {\n-                // If a constructor appears in a `match` arm, we can\n-                // eliminate it straight away.\n-                refined_ctors = vec![]\n-            } else if let Some(interval) = IntRange::from_ctor(tcx, param_env, other_ctor) {\n-                // Refine the required constructors for the type by subtracting\n-                // the range defined by the current constructor pattern.\n-                refined_ctors = interval.subtract_from(tcx, param_env, refined_ctors);\n+        match self {\n+            // Those constructors can only match themselves.\n+            Single | Variant(_) | FixedLenSlice(_) => {\n+                if other_ctors.iter().any(|c| c == self) {\n+                    vec![]\n+                } else {\n+                    vec![self.clone()]\n+                }\n             }\n+            ConstantRange(..) | ConstantValue(..) => {\n+                let mut remaining_ctors = vec![self.clone()];\n+                for other_ctor in other_ctors {\n+                    if other_ctor == self {\n+                        // If a constructor appears in a `match` arm, we can\n+                        // eliminate it straight away.\n+                        remaining_ctors = vec![]\n+                    } else if let Some(interval) = IntRange::from_ctor(tcx, param_env, other_ctor) {\n+                        // Refine the required constructors for the type by subtracting\n+                        // the range defined by the current constructor pattern.\n+                        remaining_ctors = interval.subtract_from(tcx, param_env, remaining_ctors);\n+                    }\n \n-            // If the constructor patterns that have been considered so far\n-            // already cover the entire range of values, then we know the\n-            // constructor is not missing, and we can move on to the next one.\n-            if refined_ctors.is_empty() {\n-                break;\n+                    // If the constructor patterns that have been considered so far\n+                    // already cover the entire range of values, then we know the\n+                    // constructor is not missing, and we can move on to the next one.\n+                    if remaining_ctors.is_empty() {\n+                        break;\n+                    }\n+                }\n+\n+                // If a constructor has not been matched, then it is missing.\n+                // We add `remaining_ctors` instead of `self`, because then we can\n+                // provide more detailed error information about precisely which\n+                // ranges have been omitted.\n+                remaining_ctors\n             }\n         }\n-\n-        // If a constructor has not been matched, then it is missing.\n-        // We add `refined_ctors` instead of `self`, because then we can\n-        // provide more detailed error information about precisely which\n-        // ranges have been omitted.\n-        refined_ctors\n     }\n \n     /// This returns one wildcard pattern for each argument to this constructor."}]}