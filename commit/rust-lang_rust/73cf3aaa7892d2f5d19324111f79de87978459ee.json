{"sha": "73cf3aaa7892d2f5d19324111f79de87978459ee", "node_id": "C_kwDOAAsO6NoAKDczY2YzYWFhNzg5MmQyZjVkMTkzMjQxMTFmNzlkZTg3OTc4NDU5ZWU", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-02-17T18:16:04Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-02-21T18:28:22Z"}, "message": "Take CodegenFnAttrs into account when validating asm! register operands\n\nChecking of asm! register operands now properly takes function\nattributes such as #[target_feature] and #[instruction_set] into\naccount.", "tree": {"sha": "4ff90dc2ec488c4ad7a2fa27bab4109528b86a6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ff90dc2ec488c4ad7a2fa27bab4109528b86a6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73cf3aaa7892d2f5d19324111f79de87978459ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73cf3aaa7892d2f5d19324111f79de87978459ee", "html_url": "https://github.com/rust-lang/rust/commit/73cf3aaa7892d2f5d19324111f79de87978459ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73cf3aaa7892d2f5d19324111f79de87978459ee/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62c26e39d5a6ffda051aa956efde35226262951", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62c26e39d5a6ffda051aa956efde35226262951", "html_url": "https://github.com/rust-lang/rust/commit/e62c26e39d5a6ffda051aa956efde35226262951"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "deac5dfd3ec1adc43b8e2380446dba99a493eb6e", "filename": "src/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/73cf3aaa7892d2f5d19324111f79de87978459ee/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73cf3aaa7892d2f5d19324111f79de87978459ee/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=73cf3aaa7892d2f5d19324111f79de87978459ee", "patch": "@@ -106,6 +106,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     let mut asm_gen = InlineAssemblyGenerator {\n         tcx: fx.tcx,\n         arch: fx.tcx.sess.asm_arch.unwrap(),\n+        enclosing_def_id: fx.instance.def_id(),\n         template,\n         operands,\n         options,\n@@ -169,6 +170,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n struct InlineAssemblyGenerator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     arch: InlineAsmArch,\n+    enclosing_def_id: DefId,\n     template: &'a [InlineAsmTemplatePiece],\n     operands: &'a [InlineAsmOperand<'tcx>],\n     options: InlineAsmOptions,\n@@ -185,7 +187,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         let map = allocatable_registers(\n             self.arch,\n             sess.relocation_model(),\n-            &sess.target_features,\n+            self.tcx.asm_target_features(self.enclosing_def_id),\n             &sess.target,\n         );\n         let mut allocated = FxHashMap::<_, (bool, bool)>::default();\n@@ -318,15 +320,9 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         let mut new_slot = |x| new_slot_fn(&mut slot_size, x);\n \n         // Allocate stack slots for saving clobbered registers\n-        let abi_clobber = InlineAsmClobberAbi::parse(\n-            self.arch,\n-            self.tcx.sess.relocation_model(),\n-            &self.tcx.sess.target_features,\n-            &self.tcx.sess.target,\n-            sym::C,\n-        )\n-        .unwrap()\n-        .clobbered_regs();\n+        let abi_clobber = InlineAsmClobberAbi::parse(self.arch, &self.tcx.sess.target, sym::C)\n+            .unwrap()\n+            .clobbered_regs();\n         for (i, reg) in self.registers.iter().enumerate().filter_map(|(i, r)| r.map(|r| (i, r))) {\n             let mut need_save = true;\n             // If the register overlaps with a register clobbered by function call, then"}]}