{"sha": "3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWZiNWYwMjUzYzJmOWY5NmFkYmExMTFkYmU5NmRiZDQ4MmJhMzY=", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2021-08-31T01:18:28Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2021-08-31T01:33:19Z"}, "message": "feat: Use enum's visibility for extracted struct fields", "tree": {"sha": "4621f2df473f1f65aa6f6642eca50618d0d7342d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4621f2df473f1f65aa6f6642eca50618d0d7342d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEosE1rSpoNOieSVDGiUkQv4PnA0cFAmEtht8ACgkQiUkQv4Pn\nA0dUxQv+LlfyMc/HI5CbITUxiFZhm3iBFzdr65YfRTXUOlT2eErZroBu2ndpdha1\n0SqkUr/J1Vf7o/VlveLXc1aLImqBA3/qTMQX5YICW2He2LWYDZr5BNRx/ZNPZf2y\n/PuK23uWEg0NF7821w9VRAf2WamKTNh7/CySUJ8c4VjLryIpglLebugkdazPn5wm\ntj69eQCVwDaVvk9vQSGv7IJspp4dnWV0fBOcXQb5s2dO3cdLOm4/irRvhIA3Rh4N\nTcM5fdzz3ddj0e7Cvq+bZeAV/nJcGyumanIsTRJEtmneDXw5ckDIXIOF0gd6ZbyZ\nwcWIRJXXzhh389yo5HnlFb/2up1E4bLflopk2lWizW4usnIuGu8oRpczBlUNnFnS\nD/YGhxgXXYWfZJCG7hghTaKg+p/uT/hO5vVbN/lXLFCb+uHS7MOhq6kylyf0zJRR\n2ecGuVejJD0yBEkCwl8/TtuMjIcoxsI1JMvXohJGIXsziqHDAf9evXfNYLzaRXol\nMqs1CTEU\n=FUp9\n-----END PGP SIGNATURE-----", "payload": "tree 4621f2df473f1f65aa6f6642eca50618d0d7342d\nparent 95bf89d3c879483d038733c7ea246e1d94322f5e\nauthor DropDemBits <r3usrlnd@gmail.com> 1630372708 -0400\ncommitter DropDemBits <r3usrlnd@gmail.com> 1630373599 -0400\n\nfeat: Use enum's visibility for extracted struct fields\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "html_url": "https://github.com/rust-lang/rust/commit/3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bafb5f0253c2f9f96adba111dbe96dbd482ba36/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95bf89d3c879483d038733c7ea246e1d94322f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95bf89d3c879483d038733c7ea246e1d94322f5e", "html_url": "https://github.com/rust-lang/rust/commit/95bf89d3c879483d038733c7ea246e1d94322f5e"}], "stats": {"total": 130, "additions": 85, "deletions": 45}, "files": [{"sha": "961158811034dfaba2bb8413f48aab4fe8a4b9d2", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 84, "deletions": 44, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/3bafb5f0253c2f9f96adba111dbe96dbd482ba36/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bafb5f0253c2f9f96adba111dbe96dbd482ba36/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "patch": "@@ -35,7 +35,7 @@ use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind,\n // ```\n // ->\n // ```\n-// struct One(pub u32, pub u32);\n+// struct One(u32, u32);\n //\n // enum A { One(One) }\n // ```\n@@ -166,34 +166,38 @@ fn create_struct_def(\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     enum_: &ast::Enum,\n ) -> ast::Struct {\n-    let pub_vis = make::visibility_pub();\n+    let enum_vis = enum_.visibility();\n \n-    let insert_pub = |node: &'_ SyntaxNode| {\n-        let pub_vis = pub_vis.clone_for_update();\n-        ted::insert(ted::Position::before(node), pub_vis.syntax());\n+    let insert_vis = |node: &'_ SyntaxNode, vis: &'_ SyntaxNode| {\n+        let vis = vis.clone_for_update();\n+        ted::insert(ted::Position::before(node), vis);\n     };\n \n-    // for fields without any existing visibility, use pub visibility\n+    // for fields without any existing visibility, use visibility of enum\n     let field_list: ast::FieldList = match field_list {\n         Either::Left(field_list) => {\n             let field_list = field_list.clone_for_update();\n \n-            field_list\n-                .fields()\n-                .filter(|field| field.visibility().is_none())\n-                .filter_map(|field| field.name())\n-                .for_each(|it| insert_pub(it.syntax()));\n+            if let Some(vis) = &enum_vis {\n+                field_list\n+                    .fields()\n+                    .filter(|field| field.visibility().is_none())\n+                    .filter_map(|field| field.name())\n+                    .for_each(|it| insert_vis(it.syntax(), vis.syntax()));\n+            }\n \n             field_list.into()\n         }\n         Either::Right(field_list) => {\n             let field_list = field_list.clone_for_update();\n \n-            field_list\n-                .fields()\n-                .filter(|field| field.visibility().is_none())\n-                .filter_map(|field| field.ty())\n-                .for_each(|it| insert_pub(it.syntax()));\n+            if let Some(vis) = &enum_vis {\n+                field_list\n+                    .fields()\n+                    .filter(|field| field.visibility().is_none())\n+                    .filter_map(|field| field.ty())\n+                    .for_each(|it| insert_vis(it.syntax(), vis.syntax()));\n+            }\n \n             field_list.into()\n         }\n@@ -202,9 +206,8 @@ fn create_struct_def(\n     field_list.reindent_to(IndentLevel::single());\n \n     // FIXME: This uses all the generic params of the enum, but the variant might not use all of them.\n-    let strukt =\n-        make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n-            .clone_for_update();\n+    let strukt = make::struct_(enum_vis, variant_name, enum_.generic_param_list(), field_list)\n+        .clone_for_update();\n \n     // FIXME: Consider making this an actual function somewhere (like in `AttrsOwnerEdit`) after some deliberation\n     let attrs_and_docs = |node: &SyntaxNode| {\n@@ -350,7 +353,7 @@ mod tests {\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { $0One(u32, u32) }\",\n-            r#\"struct One(pub u32, pub u32);\n+            r#\"struct One(u32, u32);\n \n enum A { One(One) }\"#,\n         );\n@@ -361,7 +364,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { $0One { foo: u32, bar: u32 } }\",\n-            r#\"struct One{ pub foo: u32, pub bar: u32 }\n+            r#\"struct One{ foo: u32, bar: u32 }\n \n enum A { One(One) }\"#,\n         );\n@@ -372,7 +375,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { $0One { foo: u32 } }\",\n-            r#\"struct One{ pub foo: u32 }\n+            r#\"struct One{ foo: u32 }\n \n enum A { One(One) }\"#,\n         );\n@@ -383,7 +386,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             r\"enum En<T> { Var { a: T$0 } }\",\n-            r#\"struct Var<T>{ pub a: T }\n+            r#\"struct Var<T>{ a: T }\n \n enum En<T> { Var(Var<T>) }\"#,\n         );\n@@ -396,7 +399,7 @@ enum En<T> { Var(Var<T>) }\"#,\n             r#\"#[derive(Debug)]\n #[derive(Clone)]\n enum Enum { Variant{ field: u32$0 } }\"#,\n-            r#\"#[derive(Debug)]#[derive(Clone)] struct Variant{ pub field: u32 }\n+            r#\"#[derive(Debug)]#[derive(Clone)] struct Variant{ field: u32 }\n \n #[derive(Debug)]\n #[derive(Clone)]\n@@ -416,7 +419,7 @@ enum Enum {\n }\"#,\n             r#\"\n struct Variant{\n-    pub field: u32\n+    field: u32\n }\n \n enum Enum {\n@@ -440,7 +443,7 @@ mod indenting {\n             r#\"\n mod indenting {\n     struct Variant{\n-        pub field: u32\n+        field: u32\n     }\n \n     enum Enum {\n@@ -469,7 +472,7 @@ struct One{\n     // leading comment\n     /// doc comment\n     #[an_attr]\n-    pub foo: u32\n+    foo: u32\n     // trailing comment\n }\n \n@@ -501,11 +504,11 @@ struct One{\n     // comment\n     /// doc\n     #[attr]\n-    pub foo: u32,\n+    foo: u32,\n     // comment\n     #[attr]\n     /// doc\n-    pub bar: u32\n+    bar: u32\n }\n \n enum A {\n@@ -520,7 +523,7 @@ enum A {\n             extract_struct_from_enum_variant,\n             \"enum A { $0One(/* comment */ #[attr] u32, /* another */ u32 /* tail */) }\",\n             r#\"\n-struct One(/* comment */ #[attr] pub u32, /* another */ pub u32 /* tail */);\n+struct One(/* comment */ #[attr] u32, /* another */ u32 /* tail */);\n \n enum A { One(One) }\"#,\n         );\n@@ -545,8 +548,8 @@ enum A {\n // other\n /// comment\n #[attr]\n-struct One {\n-    pub a: u32\n+struct One{\n+    a: u32\n }\n \n enum A {\n@@ -572,7 +575,7 @@ enum A {\n // other\n /// comment\n #[attr]\n-struct One(pub u32, pub u32);\n+struct One(u32, u32);\n \n enum A {\n     One(One)\n@@ -584,9 +587,9 @@ enum A {\n     fn test_extract_struct_keep_existing_visibility_named() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { $0One{ pub a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 } }\",\n+            \"enum A { $0One{ a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 } }\",\n             r#\"\n-struct One{ pub a: u32, pub(crate) b: u32, pub(super) c: u32, pub d: u32 }\n+struct One{ a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 }\n \n enum A { One(One) }\"#,\n         );\n@@ -596,9 +599,9 @@ enum A { One(One) }\"#,\n     fn test_extract_struct_keep_existing_visibility_tuple() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { $0One(pub u32, pub(crate) u32, pub(super) u32, u32) }\",\n+            \"enum A { $0One(u32, pub(crate) u32, pub(super) u32, u32) }\",\n             r#\"\n-struct One(pub u32, pub(crate) u32, pub(super) u32, pub u32);\n+struct One(u32, pub(crate) u32, pub(super) u32, u32);\n \n enum A { One(One) }\"#,\n         );\n@@ -611,7 +614,19 @@ enum A { One(One) }\"#,\n             r#\"const One: () = ();\n enum A { $0One(u32, u32) }\"#,\n             r#\"const One: () = ();\n-struct One(pub u32, pub u32);\n+struct One(u32, u32);\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_no_visibility() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { $0One(u32, u32) }\",\n+            r#\"\n+struct One(u32, u32);\n \n enum A { One(One) }\"#,\n         );\n@@ -622,12 +637,37 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"pub enum A { $0One(u32, u32) }\",\n-            r#\"pub struct One(pub u32, pub u32);\n+            r#\"\n+pub struct One(pub u32, pub u32);\n \n pub enum A { One(One) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_pub_in_mod_visibility() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"pub(in something) enum A { $0One{ a: u32, b: u32 } }\",\n+            r#\"\n+pub(in something) struct One{ pub(in something) a: u32, pub(in something) b: u32 }\n+\n+pub(in something) enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_pub_crate_visibility() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"pub(crate) enum A { $0One{ a: u32, b: u32, c: u32 } }\",\n+            r#\"\n+pub(crate) struct One{ pub(crate) a: u32, pub(crate) b: u32, pub(crate) c: u32 }\n+\n+pub(crate) enum A { One(One) }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_with_complex_imports() {\n         check_assist(\n@@ -693,7 +733,7 @@ fn f() {\n }\n \"#,\n             r#\"\n-struct V{ pub i: i32, pub j: i32 }\n+struct V{ i: i32, j: i32 }\n \n enum E {\n     V(V)\n@@ -720,7 +760,7 @@ fn f() {\n }\n \"#,\n             r#\"\n-struct V(pub i32, pub i32);\n+struct V(i32, i32);\n \n enum E {\n     V(V)\n@@ -752,7 +792,7 @@ fn f() {\n \"#,\n             r#\"\n //- /main.rs\n-struct V(pub i32, pub i32);\n+struct V(i32, i32);\n \n enum E {\n     V(V)\n@@ -787,7 +827,7 @@ fn f() {\n \"#,\n             r#\"\n //- /main.rs\n-struct V{ pub i: i32, pub j: i32 }\n+struct V{ i: i32, j: i32 }\n \n enum E {\n     V(V)\n@@ -817,7 +857,7 @@ fn foo() {\n }\n \"#,\n             r#\"\n-struct One{ pub a: u32, pub b: u32 }\n+struct One{ a: u32, b: u32 }\n \n enum A { One(One) }\n "}, {"sha": "28f74321dac1458039c3ab56f5b720d341b2bdac", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bafb5f0253c2f9f96adba111dbe96dbd482ba36/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bafb5f0253c2f9f96adba111dbe96dbd482ba36/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "patch": "@@ -448,7 +448,7 @@ fn doctest_extract_struct_from_enum_variant() {\n enum A { $0One(u32, u32) }\n \"#####,\n         r#####\"\n-struct One(pub u32, pub u32);\n+struct One(u32, u32);\n \n enum A { One(One) }\n \"#####,"}]}