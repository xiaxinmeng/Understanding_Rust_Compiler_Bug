{"sha": "5e7727119e8f159648c7c35567f908637190b9c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzcyNzExOWU4ZjE1OTY0OGM3YzM1NTY3ZjkwODYzNzE5MGI5YzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-01-06T12:43:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-06T12:43:29Z"}, "message": "Merge pull request #1411 from theemathas/forget_ref\n\nAdd forget_ref lint.", "tree": {"sha": "678fb6c8ec788c3b1d6863e5803d9bb2409c8f11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/678fb6c8ec788c3b1d6863e5803d9bb2409c8f11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7727119e8f159648c7c35567f908637190b9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7727119e8f159648c7c35567f908637190b9c5", "html_url": "https://github.com/rust-lang/rust/commit/5e7727119e8f159648c7c35567f908637190b9c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7727119e8f159648c7c35567f908637190b9c5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f145fc44f83febd20a5423dd752c3c366f497d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f145fc44f83febd20a5423dd752c3c366f497d4b", "html_url": "https://github.com/rust-lang/rust/commit/f145fc44f83febd20a5423dd752c3c366f497d4b"}, {"sha": "4962df30d0809777b84a93e043e094c7973ac2b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4962df30d0809777b84a93e043e094c7973ac2b8", "html_url": "https://github.com/rust-lang/rust/commit/4962df30d0809777b84a93e043e094c7973ac2b8"}], "stats": {"total": 269, "additions": 157, "deletions": 112}, "files": [{"sha": "3d848aebe0b492b375555665edfcfb1db1289f44", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e7727119e8f159648c7c35567f908637190b9c5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e7727119e8f159648c7c35567f908637190b9c5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5e7727119e8f159648c7c35567f908637190b9c5", "patch": "@@ -298,6 +298,7 @@ All notable changes to this project will be documented in this file.\n [`for_kv_map`]: https://github.com/Manishearth/rust-clippy/wiki#for_kv_map\n [`for_loop_over_option`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option\n [`for_loop_over_result`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result\n+[`forget_ref`]: https://github.com/Manishearth/rust-clippy/wiki#forget_ref\n [`get_unwrap`]: https://github.com/Manishearth/rust-clippy/wiki#get_unwrap\n [`identity_op`]: https://github.com/Manishearth/rust-clippy/wiki#identity_op\n [`if_let_redundant_pattern_matching`]: https://github.com/Manishearth/rust-clippy/wiki#if_let_redundant_pattern_matching"}, {"sha": "f0a362295fca8ed27d1a73e5f945954f49772a42", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e7727119e8f159648c7c35567f908637190b9c5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e7727119e8f159648c7c35567f908637190b9c5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5e7727119e8f159648c7c35567f908637190b9c5", "patch": "@@ -179,7 +179,7 @@ transparently:\n \n ## Lints\n \n-There are 182 lints included in this crate:\n+There are 183 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -237,6 +237,7 @@ name\n [for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                               | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                           | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                           | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n+[forget_ref](https://github.com/Manishearth/rust-clippy/wiki#forget_ref)                                               | warn    | calls to `std::mem::forget` with a reference instead of an owned value\n [get_unwrap](https://github.com/Manishearth/rust-clippy/wiki#get_unwrap)                                               | warn    | using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                             | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [if_let_redundant_pattern_matching](https://github.com/Manishearth/rust-clippy/wiki#if_let_redundant_pattern_matching) | warn    | use the proper utility function avoiding an `if let`"}, {"sha": "3950cdb6acf95d37358ce350fe47b1f1b7336940", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/5e7727119e8f159648c7c35567f908637190b9c5/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7727119e8f159648c7c35567f908637190b9c5/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=5e7727119e8f159648c7c35567f908637190b9c5", "patch": "@@ -0,0 +1,90 @@\n+use rustc::lint::*;\n+use rustc::ty;\n+use rustc::hir::*;\n+use utils::{match_def_path, paths, span_note_and_lint};\n+\n+/// **What it does:** Checks for calls to `std::mem::drop` with a reference\n+/// instead of an owned value.\n+///\n+/// **Why is this bad?** Calling `drop` on a reference will only drop the\n+/// reference itself, which is a no-op. It will not call the `drop` method (from\n+/// the `Drop` trait implementation) on the underlying referenced value, which\n+/// is likely what was intended.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let mut lock_guard = mutex.lock();\n+/// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex still locked\n+/// operation_that_requires_mutex_to_be_unlocked();\n+/// ```\n+declare_lint! {\n+    pub DROP_REF,\n+    Warn,\n+    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n+}\n+\n+/// **What it does:** Checks for calls to `std::mem::forget` with a reference\n+/// instead of an owned value.\n+///\n+/// **Why is this bad?** Calling `forget` on a reference will only forget the\n+/// reference itself, which is a no-op. It will not forget the underlying referenced\n+/// value, which is likely what was intended.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x = Box::new(1);\n+/// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n+/// ```\n+declare_lint! {\n+    pub FORGET_REF,\n+    Warn,\n+    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n+}\n+\n+#[allow(missing_copy_implementations)]\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DROP_REF, FORGET_REF)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_let_chain!{[\n+            let ExprCall(ref path, ref args) = expr.node,\n+            let ExprPath(ref qpath) = path.node,\n+            args.len() == 1,\n+        ], {\n+            let def_id = cx.tcx.tables().qpath_def(qpath, path.id).def_id();\n+            let lint;\n+            let msg;\n+            if match_def_path(cx, def_id, &paths::DROP) {\n+                lint = DROP_REF;\n+                msg = \"call to `std::mem::drop` with a reference argument. \\\n+                       Dropping a reference does nothing\";\n+            } else if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n+                lint = FORGET_REF;\n+                msg = \"call to `std::mem::forget` with a reference argument. \\\n+                       Forgetting a reference does nothing\";\n+            } else {\n+                return;\n+            }\n+            let arg = &args[0];\n+            let arg_ty = cx.tcx.tables().expr_ty(arg);\n+            if let ty::TyRef(..) = arg_ty.sty {\n+                span_note_and_lint(cx,\n+                                   lint,\n+                                   expr.span,\n+                                   msg,\n+                                   arg.span,\n+                                   &format!(\"argument has type {}\", arg_ty.sty));\n+            }\n+        }}\n+    }\n+}"}, {"sha": "106e43e1b6f570a29f0427fb127e5ad24589d2f4", "filename": "clippy_lints/src/drop_ref.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/clippy_lints%2Fsrc%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_ref.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -1,65 +0,0 @@\n-use rustc::lint::*;\n-use rustc::ty;\n-use rustc::hir::*;\n-use syntax::codemap::Span;\n-use utils::{match_def_path, paths, span_note_and_lint};\n-\n-/// **What it does:** Checks for calls to `std::mem::drop` with a reference\n-/// instead of an owned value.\n-///\n-/// **Why is this bad?** Calling `drop` on a reference will only drop the\n-/// reference itself, which is a no-op. It will not call the `drop` method (from\n-/// the `Drop` trait implementation) on the underlying referenced value, which\n-/// is likely what was intended.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let mut lock_guard = mutex.lock();\n-/// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex still locked\n-/// operation_that_requires_mutex_to_be_unlocked();\n-/// ```\n-declare_lint! {\n-    pub DROP_REF,\n-    Warn,\n-    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n-}\n-\n-#[allow(missing_copy_implementations)]\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_REF)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprCall(ref path, ref args) = expr.node {\n-            if let ExprPath(ref qpath) = path.node {\n-                let def_id = cx.tcx.tables().qpath_def(qpath, path.id).def_id();\n-                if match_def_path(cx, def_id, &paths::DROP) {\n-                    if args.len() != 1 {\n-                        return;\n-                    }\n-                    check_drop_arg(cx, expr.span, &args[0]);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-fn check_drop_arg(cx: &LateContext, call_span: Span, arg: &Expr) {\n-    let arg_ty = cx.tcx.tables().expr_ty(arg);\n-    if let ty::TyRef(..) = arg_ty.sty {\n-        span_note_and_lint(cx,\n-                           DROP_REF,\n-                           call_span,\n-                           \"call to `std::mem::drop` with a reference argument. \\\n-                           Dropping a reference does nothing\",\n-                           arg.span,\n-                           &format!(\"argument has type {}\", arg_ty.sty));\n-    }\n-}"}, {"sha": "f362ff12a85c43f00ffc52bdefee9046d1fc5c05", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e7727119e8f159648c7c35567f908637190b9c5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7727119e8f159648c7c35567f908637190b9c5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5e7727119e8f159648c7c35567f908637190b9c5", "patch": "@@ -72,7 +72,7 @@ pub mod cyclomatic_complexity;\n pub mod derive;\n pub mod doc;\n pub mod double_parens;\n-pub mod drop_ref;\n+pub mod drop_forget_ref;\n pub mod entry;\n pub mod enum_clike;\n pub mod enum_glob_use;\n@@ -259,7 +259,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box non_expressive_names::NonExpressiveNames {\n         max_single_char_names: conf.max_single_char_names,\n     });\n-    reg.register_late_lint_pass(box drop_ref::Pass);\n+    reg.register_late_lint_pass(box drop_forget_ref::Pass);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n     reg.register_late_lint_pass(box regex::Pass::default());\n@@ -360,7 +360,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         doc::DOC_MARKDOWN,\n         double_parens::DOUBLE_PARENS,\n-        drop_ref::DROP_REF,\n+        drop_forget_ref::DROP_REF,\n+        drop_forget_ref::FORGET_REF,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n         enum_variants::ENUM_VARIANT_NAMES,"}, {"sha": "55cfe63dac4c947b6894f89161b7b62330f07f4a", "filename": "tests/compile-fail/drop_forget_ref.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5e7727119e8f159648c7c35567f908637190b9c5/tests%2Fcompile-fail%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7727119e8f159648c7c35567f908637190b9c5/tests%2Fcompile-fail%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdrop_forget_ref.rs?ref=5e7727119e8f159648c7c35567f908637190b9c5", "patch": "@@ -0,0 +1,60 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(drop_ref, forget_ref)]\n+#![allow(toplevel_ref_arg, similar_names)]\n+\n+use std::mem::{drop, forget};\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+    forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+\n+    let mut owned1 = SomeStruct;\n+    drop(&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&mut owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(owned1); //OK\n+    let mut owned2 = SomeStruct;\n+    forget(&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(&&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(&mut owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(owned2); //OK\n+\n+    let reference1 = &SomeStruct;\n+    drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n+    forget(&*reference1); //~ERROR call to `std::mem::forget` with a reference argument\n+\n+    let reference2 = &mut SomeStruct;\n+    drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n+    let reference3 = &mut SomeStruct;\n+    forget(reference3); //~ERROR call to `std::mem::forget` with a reference argument\n+\n+    let ref reference4 = SomeStruct;\n+    drop(reference4); //~ERROR call to `std::mem::drop` with a reference argument\n+    forget(reference4); //~ERROR call to `std::mem::forget` with a reference argument\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_drop<T>(val: T) {\n+    drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn drop<T>(_val: T) {}\n+    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+}"}, {"sha": "8454a471513dfe1b8585c5ca2ea9ec6682ace32c", "filename": "tests/compile-fail/drop_ref.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f145fc44f83febd20a5423dd752c3c366f497d4b/tests%2Fcompile-fail%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdrop_ref.rs?ref=f145fc44f83febd20a5423dd752c3c366f497d4b", "patch": "@@ -1,43 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(drop_ref)]\n-#![allow(toplevel_ref_arg, similar_names)]\n-\n-use std::mem::drop;\n-\n-struct DroppableStruct;\n-impl Drop for DroppableStruct { fn drop(&mut self) {} }\n-\n-fn main() {\n-    drop(&DroppableStruct); //~ERROR call to `std::mem::drop` with a reference argument\n-\n-    let mut owned = DroppableStruct;\n-    drop(&owned); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&&owned); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&mut owned); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(owned); //OK\n-\n-    let reference1 = &DroppableStruct;\n-    drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&*reference1); //~ERROR call to `std::mem::drop` with a reference argument\n-\n-    let reference2 = &mut DroppableStruct;\n-    drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n-\n-    let ref reference3 = DroppableStruct;\n-    drop(reference3); //~ERROR call to `std::mem::drop` with a reference argument\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn<T>(val: T) {\n-    drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn drop<T>(_val: T) {}\n-    drop(&DroppableStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&DroppableStruct); //~ERROR call to `std::mem::drop` with a reference argument\n-}"}]}