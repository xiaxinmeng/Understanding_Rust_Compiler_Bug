{"sha": "264a92182e037c46cdcf37890e3142eaf634444d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NGE5MjE4MmUwMzdjNDZjZGNmMzc4OTBlMzE0MmVhZjYzNDQ0NGQ=", "commit": {"author": {"name": "penpalperson", "email": "16357077+penpalperson@users.noreply.github.com", "date": "2018-02-24T22:56:33Z"}, "committer": {"name": "penpalperson", "email": "16357077+penpalperson@users.noreply.github.com", "date": "2018-02-24T22:56:33Z"}, "message": "Added error-format flag to x.py.", "tree": {"sha": "a25d0fa5bfea8167140abf1e0a9b1e48e7e120ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a25d0fa5bfea8167140abf1e0a9b1e48e7e120ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264a92182e037c46cdcf37890e3142eaf634444d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264a92182e037c46cdcf37890e3142eaf634444d", "html_url": "https://github.com/rust-lang/rust/commit/264a92182e037c46cdcf37890e3142eaf634444d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264a92182e037c46cdcf37890e3142eaf634444d/comments", "author": null, "committer": null, "parents": [{"sha": "6070d3e47e5e9f15575a3bd33583358b52bc6eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6070d3e47e5e9f15575a3bd33583358b52bc6eda", "html_url": "https://github.com/rust-lang/rust/commit/6070d3e47e5e9f15575a3bd33583358b52bc6eda"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "ca35a896e08c88f07583bc88fe5adc6b4673a2fc", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=264a92182e037c46cdcf37890e3142eaf634444d", "patch": "@@ -61,6 +61,11 @@ fn main() {\n         args.remove(n);\n     }\n \n+    if let Some(s) = env::var_os(\"RUSTC_ERROR_FORMAT\") {\n+        args.push(\"--error-format\".into());\n+        args.push(s);\n+    }\n+\n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n     let target = args.windows(2)"}, {"sha": "343d30922fded96028c23c49d9795d849a1c1679", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=264a92182e037c46cdcf37890e3142eaf634444d", "patch": "@@ -598,6 +598,9 @@ impl<'a> Builder<'a> {\n         if let Some(target_linker) = self.build.linker(target) {\n             cargo.env(\"RUSTC_TARGET_LINKER\", target_linker);\n         }\n+        if let Some(ref error_format) = self.config.rustc_error_format {\n+            cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n+        }\n         if cmd != \"build\" && cmd != \"check\" {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(self.compiler(2, self.build.build)));\n         }"}, {"sha": "70a873043ad326ea15db2aa064ef9a921dcd7e99", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=264a92182e037c46cdcf37890e3142eaf634444d", "patch": "@@ -57,6 +57,7 @@ pub struct Config {\n     pub profiler: bool,\n     pub ignore_git: bool,\n     pub exclude: Vec<PathBuf>,\n+    pub rustc_error_format: Option<String>,\n \n     pub run_host_only: bool,\n \n@@ -330,6 +331,7 @@ impl Config {\n         config.test_miri = false;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n \n+        config.rustc_error_format = flags.rustc_error_format;\n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n         config.src = flags.src;"}, {"sha": "8ca5910a11c0d5c8b2f3648992dc1758ce403415", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264a92182e037c46cdcf37890e3142eaf634444d/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=264a92182e037c46cdcf37890e3142eaf634444d", "patch": "@@ -43,6 +43,7 @@ pub struct Flags {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub exclude: Vec<PathBuf>,\n+    pub rustc_error_format: Option<String>,\n }\n \n pub enum Subcommand {\n@@ -118,6 +119,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n+        opts.optflag(\"\", \"error-format\", \"rustc error format\");\n \n         // fn usage()\n         let usage = |exit_code: i32, opts: &Options, subcommand_help: &str, extra_help: &str| -> ! {\n@@ -370,6 +372,7 @@ Arguments:\n             verbose: matches.opt_count(\"verbose\"),\n             stage,\n             on_fail: matches.opt_str(\"on-fail\"),\n+            rustc_error_format: matches.opt_str(\"error-format\"),\n             keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n             build: matches.opt_str(\"build\").map(|s| INTERNER.intern_string(s)),\n             host: split(matches.opt_strs(\"host\"))"}]}