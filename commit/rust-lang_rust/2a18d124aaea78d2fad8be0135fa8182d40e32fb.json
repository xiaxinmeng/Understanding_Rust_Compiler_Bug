{"sha": "2a18d124aaea78d2fad8be0135fa8182d40e32fb", "node_id": "C_kwDOAAsO6NoAKDJhMThkMTI0YWFlYTc4ZDJmYWQ4YmUwMTM1ZmE4MTgyZDQwZTMyZmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T18:45:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T18:45:29Z"}, "message": "Auto merge of #97575 - nnethercote:lazify-SourceFile-lines, r=Mark-Simulacrum\n\nLazify `SourceFile::lines`.\n\n`SourceFile::lines` is a big part of metadata. It's stored in a compressed form\n(a difference list) to save disk space. Decoding it is a big fraction of\ncompile time for very small crates/programs.\n\nThis commit introduces a new type `SourceFileLines` which has a `Lines`\nform and a `Diffs` form. The latter is used when the metadata is first\nread, and it is only decoded into the `Lines` form when line data is\nactually needed. This avoids the decoding cost for many files,\nespecially in `std`. It's a performance win of up to 15% for tiny\ncrates/programs where metadata decoding is a high part of compilation\ncosts.\n\nA `RefCell` is needed because the methods that access lines data (which can\ntrigger decoding) take `&self` rather than `&mut self`. To allow for this,\n`SourceFile::lines` now takes a `FnMut` that operates on the lines slice rather\nthan returning the lines slice.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "e4c387004ae1ffa2ac7f197352f4d21580ecb775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c387004ae1ffa2ac7f197352f4d21580ecb775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a18d124aaea78d2fad8be0135fa8182d40e32fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a18d124aaea78d2fad8be0135fa8182d40e32fb", "html_url": "https://github.com/rust-lang/rust/commit/2a18d124aaea78d2fad8be0135fa8182d40e32fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a18d124aaea78d2fad8be0135fa8182d40e32fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86092a77b343474562780e2731ee430059e20570", "url": "https://api.github.com/repos/rust-lang/rust/commits/86092a77b343474562780e2731ee430059e20570", "html_url": "https://github.com/rust-lang/rust/commit/86092a77b343474562780e2731ee430059e20570"}, {"sha": "11d22ae7c572ce35923ced63415e95f0a2ab8361", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d22ae7c572ce35923ced63415e95f0a2ab8361", "html_url": "https://github.com/rust-lang/rust/commit/11d22ae7c572ce35923ced63415e95f0a2ab8361"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "025dd57e83aa59ccfe8e7da39f19ef6521597c4b", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2a18d124aaea78d2fad8be0135fa8182d40e32fb/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a18d124aaea78d2fad8be0135fa8182d40e32fb/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=2a18d124aaea78d2fad8be0135fa8182d40e32fb", "patch": "@@ -187,11 +187,13 @@ fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> bool {\n                 && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n                 && let Some(src) = unsafe_line.sf.src.as_deref()\n             {\n-                comment_start_line.line < unsafe_line.line && text_has_safety_comment(\n-                    src,\n-                    &unsafe_line.sf.lines[comment_start_line.line + 1..=unsafe_line.line],\n-                    unsafe_line.sf.start_pos.to_usize(),\n-                )\n+                unsafe_line.sf.lines(|lines| {\n+                    comment_start_line.line < unsafe_line.line && text_has_safety_comment(\n+                        src,\n+                        &lines[comment_start_line.line + 1..=unsafe_line.line],\n+                        unsafe_line.sf.start_pos.to_usize(),\n+                    )\n+                })\n             } else {\n                 // Problem getting source text. Pretend a comment was found.\n                 true\n@@ -249,11 +251,13 @@ fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span\n             && Lrc::ptr_eq(&unsafe_line.sf, &macro_line.sf)\n             && let Some(src) = unsafe_line.sf.src.as_deref()\n         {\n-            macro_line.line < unsafe_line.line && text_has_safety_comment(\n-                src,\n-                &unsafe_line.sf.lines[macro_line.line + 1..=unsafe_line.line],\n-                unsafe_line.sf.start_pos.to_usize(),\n-            )\n+            unsafe_line.sf.lines(|lines| {\n+                macro_line.line < unsafe_line.line && text_has_safety_comment(\n+                    src,\n+                    &lines[macro_line.line + 1..=unsafe_line.line],\n+                    unsafe_line.sf.start_pos.to_usize(),\n+                )\n+            })\n         } else {\n             // Problem getting source text. Pretend a comment was found.\n             true\n@@ -276,11 +280,13 @@ fn span_in_body_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n             // Get the text from the start of function body to the unsafe block.\n             //     fn foo() { some_stuff; unsafe { stuff }; other_stuff; }\n             //              ^-------------^\n-            body_line.line < unsafe_line.line && text_has_safety_comment(\n-                src,\n-                &unsafe_line.sf.lines[body_line.line + 1..=unsafe_line.line],\n-                unsafe_line.sf.start_pos.to_usize(),\n-            )\n+            unsafe_line.sf.lines(|lines| {\n+                body_line.line < unsafe_line.line && text_has_safety_comment(\n+                    src,\n+                    &lines[body_line.line + 1..=unsafe_line.line],\n+                    unsafe_line.sf.start_pos.to_usize(),\n+                )\n+            })\n         } else {\n             // Problem getting source text. Pretend a comment was found.\n             true"}, {"sha": "39595f589c70be77c832047d11c4e655a8d893a0", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a18d124aaea78d2fad8be0135fa8182d40e32fb/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a18d124aaea78d2fad8be0135fa8182d40e32fb/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=2a18d124aaea78d2fad8be0135fa8182d40e32fb", "patch": "@@ -283,10 +283,10 @@ pub fn span_lint_and_sugg_for_edges(\n             {\n                 let split_idx = MAX_SUGGESTION_HIGHLIGHT_LINES / 2;\n                 let span_upper = sm.span_until_char(\n-                    sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]),\n+                    sp.with_hi(line_upper.sf.lines(|lines| lines[line_upper.line + split_idx])),\n                     '\\n',\n                 );\n-                let span_bottom = sp.with_lo(line_bottom.sf.lines[line_bottom.line - split_idx]);\n+                let span_bottom = sp.with_lo(line_bottom.sf.lines(|lines| lines[line_bottom.line - split_idx]));\n \n                 let sugg_lines_vec = sugg.lines().collect::<Vec<&str>>();\n                 let sugg_upper = sugg_lines_vec[..split_idx].join(\"\\n\");"}, {"sha": "833f8cde63abaa94d35849a0121ea85bd2f2460b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a18d124aaea78d2fad8be0135fa8182d40e32fb/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a18d124aaea78d2fad8be0135fa8182d40e32fb/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=2a18d124aaea78d2fad8be0135fa8182d40e32fb", "patch": "@@ -1149,7 +1149,7 @@ fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n     let span = original_sp(span, DUMMY_SP);\n     let source_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();\n     let line_no = source_map_and_line.line;\n-    let line_start = source_map_and_line.sf.lines[line_no];\n+    let line_start = source_map_and_line.sf.lines(|lines| lines[line_no]);\n     span.with_lo(line_start)\n }\n "}]}