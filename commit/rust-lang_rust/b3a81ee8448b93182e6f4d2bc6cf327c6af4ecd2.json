{"sha": "b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYTgxZWU4NDQ4YjkzMTgyZTZmNGQyYmM2Y2YzMjdjNmFmNGVjZDI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-14T21:03:09Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-27T06:42:10Z"}, "message": "Build the reduced graph during expansion.", "tree": {"sha": "00c23b561689a5a3f9957c18ae55b48cad41f3dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c23b561689a5a3f9957c18ae55b48cad41f3dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "html_url": "https://github.com/rust-lang/rust/commit/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaaafcd5d9c71745bfb489e51b074ce00d2e158", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaaafcd5d9c71745bfb489e51b074ce00d2e158", "html_url": "https://github.com/rust-lang/rust/commit/ebaaafcd5d9c71745bfb489e51b074ce00d2e158"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "f9ac1312d3c7505e71aa62ec34ae8a77c7f42be9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "patch": "@@ -639,6 +639,12 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     }\n     sess.track_errors(|| sess.lint_store.borrow_mut().process_command_line(sess))?;\n \n+    // Currently, we ignore the name resolution data structures for the purposes of dependency\n+    // tracking. Instead we will run name resolution and include its output in the hash of each\n+    // item, much like we do for macro expansion. In other words, the hash reflects not just\n+    // its contents but the results of name resolution on those contents. Hopefully we'll push\n+    // this back at some point.\n+    let _ignore = sess.dep_graph.in_ignore();\n     let mut crate_loader = CrateLoader::new(sess, &cstore, &krate, crate_name);\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver =\n@@ -742,13 +748,6 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n          || ast_validation::check_crate(sess, &krate));\n \n     time(sess.time_passes(), \"name resolution\", || -> CompileResult {\n-        // Currently, we ignore the name resolution data structures for the purposes of dependency\n-        // tracking. Instead we will run name resolution and include its output in the hash of each\n-        // item, much like we do for macro expansion. In other words, the hash reflects not just\n-        // its contents but the results of name resolution on those contents. Hopefully we'll push\n-        // this back at some point.\n-        let _ignore = sess.dep_graph.in_ignore();\n-        resolver.build_reduced_graph(&krate);\n         resolver.resolve_imports();\n \n         // Since import resolution will eventually happen in expansion,"}, {"sha": "a196e664b7356813e2c4ecbb1f6bd1cf5bdfd3cb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "patch": "@@ -31,8 +31,7 @@ use syntax::ast::Name;\n use syntax::attr;\n use syntax::parse::token;\n \n-use syntax::ast::{Block, Crate};\n-use syntax::ast::{ForeignItem, ForeignItemKind, Item, ItemKind};\n+use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind};\n use syntax::ast::{Mutability, StmtKind, TraitItem, TraitItemKind};\n use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::parse::token::keywords;\n@@ -53,11 +52,6 @@ impl<'a> ToNameBinding<'a> for (Def, Span, ty::Visibility) {\n }\n \n impl<'b> Resolver<'b> {\n-    /// Constructs the reduced graph for the entire crate.\n-    pub fn build_reduced_graph(&mut self, krate: &Crate) {\n-        visit::walk_crate(&mut BuildReducedGraphVisitor { resolver: self }, krate);\n-    }\n-\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     fn define<T>(&mut self, parent: Module<'b>, name: Name, ns: Namespace, def: T)\n@@ -72,7 +66,7 @@ impl<'b> Resolver<'b> {\n     fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {\n         // If any statements are items, we need to create an anonymous module\n         block.stmts.iter().any(|statement| match statement.node {\n-            StmtKind::Item(_) => true,\n+            StmtKind::Item(_) | StmtKind::Mac(_) => true,\n             _ => false,\n         })\n     }\n@@ -206,6 +200,8 @@ impl<'b> Resolver<'b> {\n                 }\n             }\n \n+            ItemKind::Mod(..) if item.ident == keywords::Invalid.ident() => {} // Crate root\n+\n             ItemKind::Mod(..) => {\n                 let def = Def::Mod(self.definitions.local_def_id(item.id));\n                 let module = self.arenas.alloc_module(ModuleS {\n@@ -478,12 +474,42 @@ impl<'b> Resolver<'b> {\n     }\n }\n \n-struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n-    resolver: &'a mut Resolver<'b>,\n+pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n+    pub resolver: &'a mut Resolver<'b>,\n+}\n+\n+impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n+    fn visit_invoc(&mut self, id: ast::NodeId) {\n+        self.resolver.expansion_data.get_mut(&id.as_u32()).unwrap().module2 =\n+            self.resolver.current_module;\n+    }\n+}\n+\n+macro_rules! method {\n+    ($visit:ident: $ty:ty, $invoc:path, $walk:ident) => {\n+        fn $visit(&mut self, node: &$ty) {\n+            match node.node {\n+                $invoc(..) => self.visit_invoc(node.id),\n+                _ => visit::$walk(self, node),\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n+    method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item);\n+    method!(visit_stmt:      ast::Stmt,     ast::StmtKind::Mac,       walk_stmt);\n+    method!(visit_expr:      ast::Expr,     ast::ExprKind::Mac,       walk_expr);\n+    method!(visit_pat:       ast::Pat,      ast::PatKind::Mac,        walk_pat);\n+    method!(visit_ty:        ast::Ty,       ast::TyKind::Mac,         walk_ty);\n+\n     fn visit_item(&mut self, item: &Item) {\n+        match item.node {\n+            ItemKind::Mac(..) if item.id == ast::DUMMY_NODE_ID => return, // Scope placeholder\n+            ItemKind::Mac(..) => return self.visit_invoc(item.id),\n+            _ => {}\n+        }\n+\n         let parent = self.resolver.current_module;\n         self.resolver.build_reduced_graph_for_item(item);\n         visit::walk_item(self, item);\n@@ -492,6 +518,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n \n     fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n         self.resolver.build_reduced_graph_for_foreign_item(foreign_item);\n+        visit::walk_foreign_item(self, foreign_item);\n     }\n \n     fn visit_block(&mut self, block: &Block) {\n@@ -515,7 +542,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n                 (Def::Method(item_def_id), ValueNS)\n             }\n             TraitItemKind::Type(..) => (Def::AssociatedTy(item_def_id), TypeNS),\n-            TraitItemKind::Macro(_) => panic!(\"unexpanded macro in resolve!\"),\n+            TraitItemKind::Macro(_) => return self.visit_invoc(item.id),\n         };\n \n         self.resolver.trait_item_map.insert((item.ident.name, def_id), is_static_method);"}, {"sha": "82fa5e4b3c618ce6c045b466612180fe18475659", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "patch": "@@ -1074,7 +1074,7 @@ pub struct Resolver<'a> {\n     macro_names: FnvHashSet<Name>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n-    expansion_data: FnvHashMap<u32, macros::ExpansionData>,\n+    expansion_data: FnvHashMap<u32, macros::ExpansionData<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1192,7 +1192,7 @@ impl<'a> Resolver<'a> {\n         DefCollector::new(&mut definitions).collect_root();\n \n         let mut expansion_data = FnvHashMap();\n-        expansion_data.insert(0, macros::ExpansionData::root()); // Crate root expansion\n+        expansion_data.insert(0, macros::ExpansionData::root(graph_root)); // Crate root expansion\n \n         Resolver {\n             session: session,"}, {"sha": "20b101770121a970a60706462f44bb555bf3b6a3", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=b3a81ee8448b93182e6f4d2bc6cf327c6af4ecd2", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use Resolver;\n+use {Module, Resolver};\n+use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::map::DefCollector;\n use rustc::middle::cstore::LoadedMacro;\n@@ -30,16 +31,18 @@ use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n \n #[derive(Clone)]\n-pub struct ExpansionData {\n+pub struct ExpansionData<'a> {\n     module: Rc<ModuleData>,\n     def_index: DefIndex,\n+    pub module2: Module<'a>,\n }\n \n-impl ExpansionData {\n-    pub fn root() -> Self {\n+impl<'a> ExpansionData<'a> {\n+    pub fn root(graph_root: Module<'a>) -> Self {\n         ExpansionData {\n             module: Default::default(),\n             def_index: CRATE_DEF_INDEX,\n+            module2: graph_root,\n         }\n     }\n }\n@@ -58,10 +61,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n-        let module = self.expansion_data[&mark.as_u32()].module.clone();\n-        let mut visitor = ExpansionVisitor { current_module: module, resolver: self };\n+        let expansion_data = self.expansion_data[&mark.as_u32()].clone();\n+        self.current_module = expansion_data.module2;\n+        let mut visitor =\n+            ExpansionVisitor { current_module: expansion_data.module, resolver: self };\n+\n         visitor.collect_def_ids(mark, expansion);\n         expansion.visit_with(&mut visitor);\n+        expansion.visit_with(&mut BuildReducedGraphVisitor { resolver: visitor.resolver });\n     }\n \n     fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef) {\n@@ -210,11 +217,13 @@ impl<'a, 'b> ExpansionVisitor<'a, 'b> {\n     fn collect_def_ids(&mut self, mark: Mark, expansion: &Expansion) {\n         let expansion_data = &mut self.resolver.expansion_data;\n         let module = &self.current_module;\n+        let module2 = self.resolver.current_module;\n         let def_index = expansion_data[&mark.as_u32()].def_index;\n         let visit_macro_invoc = &mut |id: ast::NodeId, def_index| {\n             expansion_data.insert(id.as_u32(), ExpansionData {\n                 def_index: def_index,\n                 module: module.clone(),\n+                module2: module2,\n             });\n         };\n "}]}