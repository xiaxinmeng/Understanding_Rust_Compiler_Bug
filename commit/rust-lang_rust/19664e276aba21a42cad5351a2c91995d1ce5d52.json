{"sha": "19664e276aba21a42cad5351a2c91995d1ce5d52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjY0ZTI3NmFiYTIxYTQyY2FkNTM1MWEyYzkxOTk1ZDFjZTVkNTI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T16:36:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-13T16:56:48Z"}, "message": "Use chalk_ir::AssocTypeId", "tree": {"sha": "34a0c9ed9c374605f59ab839a5c8193b440c7a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a0c9ed9c374605f59ab839a5c8193b440c7a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19664e276aba21a42cad5351a2c91995d1ce5d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19664e276aba21a42cad5351a2c91995d1ce5d52", "html_url": "https://github.com/rust-lang/rust/commit/19664e276aba21a42cad5351a2c91995d1ce5d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19664e276aba21a42cad5351a2c91995d1ce5d52/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9", "html_url": "https://github.com/rust-lang/rust/commit/dfafcd926a4cc9b09aba0eb3cc5275a4abe633b9"}], "stats": {"total": 163, "additions": 87, "deletions": 76}, "files": [{"sha": "f15fb1a8276c0f0e818c0a94475857da4482a7ad", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -51,7 +51,7 @@ use hir_expand::{diagnostics::DiagnosticSink, name::name, MacroDefKind};\n use hir_ty::{\n     autoderef,\n     display::{write_bounds_like_dyn_trait_with_prefix, HirDisplayError, HirFormatter},\n-    method_resolution,\n+    method_resolution, to_assoc_type_id,\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, DebruijnIndex, GenericPredicate,\n     InEnvironment, Interner, Obligation, ProjectionPredicate, ProjectionTy, Scalar, Substs,\n@@ -1683,7 +1683,10 @@ impl Type {\n             .fill(args.iter().map(|t| t.ty.value.clone()))\n             .build();\n         let predicate = ProjectionPredicate {\n-            projection_ty: ProjectionTy { associated_ty: alias.id, parameters: subst },\n+            projection_ty: ProjectionTy {\n+                associated_ty: to_assoc_type_id(alias.id),\n+                parameters: subst,\n+            },\n             ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner),\n         };\n         let goal = Canonical {"}, {"sha": "d739d5d60f4dd8813620031c892c7cbde4798586", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -12,6 +12,7 @@ use log::{info, warn};\n \n use crate::{\n     db::HirDatabase,\n+    to_assoc_type_id,\n     traits::{InEnvironment, Solution},\n     utils::generics,\n     BoundVar, Canonical, DebruijnIndex, Interner, Obligation, Substs, TraitRef, Ty, TyKind,\n@@ -83,7 +84,7 @@ fn deref_by_trait(\n     let projection = super::traits::ProjectionPredicate {\n         ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.kinds.len()))\n             .intern(&Interner),\n-        projection_ty: super::ProjectionTy { associated_ty: target, parameters },\n+        projection_ty: super::ProjectionTy { associated_ty: to_assoc_type_id(target), parameters },\n     };\n \n     let obligation = super::Obligation::Projection(projection);"}, {"sha": "2022069d8bbafd2e09b97658b809ee30860102d8", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -11,9 +11,9 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, from_foreign_def_id, primitive, utils::generics, AdtId, AliasTy,\n-    CallableDefId, CallableSig, GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy,\n-    OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n+    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, primitive, to_assoc_type_id,\n+    utils::generics, AdtId, AliasTy, CallableDefId, CallableSig, GenericPredicate, Interner,\n+    Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n };\n \n pub struct HirFormatter<'a> {\n@@ -256,7 +256,7 @@ impl HirDisplay for ProjectionTy {\n             f.write_joined(&self.parameters[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n-        write!(f, \">::{}\", f.db.type_alias_data(self.associated_ty).name)?;\n+        write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty)).name)?;\n         Ok(())\n     }\n }\n@@ -467,13 +467,14 @@ impl HirDisplay for Ty {\n                     }\n                 }\n             }\n-            TyKind::AssociatedType(type_alias, parameters) => {\n+            TyKind::AssociatedType(assoc_type_id, parameters) => {\n+                let type_alias = from_assoc_type_id(*assoc_type_id);\n                 let trait_ = match type_alias.lookup(f.db.upcast()).container {\n                     AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_ = f.db.trait_data(trait_);\n-                let type_alias_data = f.db.type_alias_data(*type_alias);\n+                let type_alias_data = f.db.type_alias_data(type_alias);\n \n                 // Use placeholder associated types when the target is test (https://rust-lang.github.io/chalk/book/clauses/type_equality.html#placeholder-associated-types)\n                 if f.display_target.is_test() {\n@@ -484,8 +485,10 @@ impl HirDisplay for Ty {\n                         write!(f, \">\")?;\n                     }\n                 } else {\n-                    let projection_ty =\n-                        ProjectionTy { associated_ty: *type_alias, parameters: parameters.clone() };\n+                    let projection_ty = ProjectionTy {\n+                        associated_ty: to_assoc_type_id(type_alias),\n+                        parameters: parameters.clone(),\n+                    };\n \n                     projection_ty.hir_fmt(f)?;\n                 }\n@@ -697,7 +700,9 @@ fn write_bounds_like_dyn_trait(\n                     write!(f, \"<\")?;\n                     angle_open = true;\n                 }\n-                let type_alias = f.db.type_alias_data(projection_pred.projection_ty.associated_ty);\n+                let type_alias = f.db.type_alias_data(from_assoc_type_id(\n+                    projection_pred.projection_ty.associated_ty,\n+                ));\n                 write!(f, \"{} = \", type_alias.name)?;\n                 projection_pred.ty.hir_fmt(f)?;\n             }\n@@ -768,7 +773,10 @@ impl HirDisplay for GenericPredicate {\n                 write!(\n                     f,\n                     \">::{} = \",\n-                    f.db.type_alias_data(projection_pred.projection_ty.associated_ty).name,\n+                    f.db.type_alias_data(from_assoc_type_id(\n+                        projection_pred.projection_ty.associated_ty\n+                    ))\n+                    .name,\n                 )?;\n                 projection_pred.ty.hir_fmt(f)?;\n             }"}, {"sha": "9d9bf549c7208157697a76cc773ed4f90b15eccc", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -42,7 +42,7 @@ use super::{\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n-    AliasTy, Interner, TyKind,\n+    to_assoc_type_id, AliasTy, Interner, TyKind,\n };\n \n pub(crate) use unify::unify;\n@@ -382,7 +382,10 @@ impl<'a> InferenceContext<'a> {\n                 let trait_ref = TraitRef { trait_, substs: substs.clone() };\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n-                    projection_ty: ProjectionTy { associated_ty: res_assoc_ty, parameters: substs },\n+                    projection_ty: ProjectionTy {\n+                        associated_ty: to_assoc_type_id(res_assoc_ty),\n+                        parameters: substs,\n+                    },\n                 };\n                 self.obligations.push(Obligation::Trait(trait_ref));\n                 self.obligations.push(Obligation::Projection(projection));"}, {"sha": "a72424dc7a4c494a4e462b7b0a74be1880344ec4", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -18,6 +18,7 @@ use crate::{\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n+    to_assoc_type_id,\n     traits::{FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, OpaqueTyId, Rawness,\n@@ -97,8 +98,10 @@ impl<'a> InferenceContext<'a> {\n         });\n         if self.db.trait_solve(krate, goal.value).is_some() {\n             self.obligations.push(implements_fn_trait);\n-            let output_proj_ty =\n-                crate::ProjectionTy { associated_ty: output_assoc_type, parameters: substs };\n+            let output_proj_ty = crate::ProjectionTy {\n+                associated_ty: to_assoc_type_id(output_assoc_type),\n+                parameters: substs,\n+            };\n             let return_ty = self.normalize_projection_ty(output_proj_ty);\n             Some((arg_tys, return_ty))\n         } else {"}, {"sha": "5752ddc4eb71d1e63fef3b553d32c0809c8e75e2", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -52,6 +52,7 @@ pub use chalk_ir::{AdtId, BoundVar, DebruijnIndex, Mutability, Scalar, TyVariabl\n pub use crate::traits::chalk::Interner;\n \n pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n+pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n@@ -70,7 +71,7 @@ pub struct OpaqueTy {\n /// trait and all its parameters are fully known.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct ProjectionTy {\n-    pub associated_ty: TypeAliasId,\n+    pub associated_ty: AssocTypeId,\n     pub parameters: Substs,\n }\n \n@@ -80,7 +81,7 @@ impl ProjectionTy {\n     }\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n-        match self.associated_ty.lookup(db.upcast()).container {\n+        match from_assoc_type_id(self.associated_ty).lookup(db.upcast()).container {\n             AssocContainerId::TraitId(it) => it,\n             _ => panic!(\"projection ty without parent trait\"),\n         }\n@@ -141,7 +142,7 @@ pub enum TyKind {\n     /// when we have tried to normalize a projection like `T::Item` but\n     /// couldn't find a better representation.  In that case, we generate\n     /// an **application type** like `(Iterator::Item)<T>`.\n-    AssociatedType(TypeAliasId, Substs),\n+    AssociatedType(AssocTypeId, Substs),\n \n     /// a scalar type like `bool` or `u32`\n     Scalar(Scalar),\n@@ -706,7 +707,7 @@ impl Ty {\n         match *self.interned(&Interner) {\n             TyKind::Adt(AdtId(adt), ..) => Some(adt.into()),\n             TyKind::FnDef(callable, ..) => Some(callable.into()),\n-            TyKind::AssociatedType(type_alias, ..) => Some(type_alias.into()),\n+            TyKind::AssociatedType(type_alias, ..) => Some(from_assoc_type_id(type_alias).into()),\n             TyKind::ForeignType(type_alias, ..) => Some(from_foreign_def_id(type_alias).into()),\n             _ => None,\n         }\n@@ -920,14 +921,15 @@ impl Ty {\n \n     pub fn associated_type_parent_trait(&self, db: &dyn HirDatabase) -> Option<TraitId> {\n         match self.interned(&Interner) {\n-            TyKind::AssociatedType(type_alias_id, ..) => {\n-                match type_alias_id.lookup(db.upcast()).container {\n+            TyKind::AssociatedType(id, ..) => {\n+                match from_assoc_type_id(*id).lookup(db.upcast()).container {\n                     AssocContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n                 }\n             }\n             TyKind::Alias(AliasTy::Projection(projection_ty)) => {\n-                match projection_ty.associated_ty.lookup(db.upcast()).container {\n+                match from_assoc_type_id(projection_ty.associated_ty).lookup(db.upcast()).container\n+                {\n                     AssocContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n                 }\n@@ -1121,10 +1123,18 @@ pub(crate) struct ReturnTypeImplTrait {\n     pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n }\n \n-pub(crate) fn to_foreign_def_id(id: TypeAliasId) -> chalk_ir::ForeignDefId<Interner> {\n+pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {\n     chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n }\n \n-pub(crate) fn from_foreign_def_id(id: chalk_ir::ForeignDefId<Interner>) -> TypeAliasId {\n+pub fn from_foreign_def_id(id: ForeignDefId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}\n+\n+pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n+    chalk_ir::AssocTypeId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n     salsa::InternKey::from_intern_id(id.0)\n }"}, {"sha": "a5ab1ff70ab2b9008dc0ac08b11ac40d2852f4b8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -27,6 +27,7 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n+    to_assoc_type_id,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n@@ -358,7 +359,7 @@ impl Ty {\n                         Some((super_trait_ref, associated_ty)) => {\n                             // FIXME handle type parameters on the segment\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty,\n+                                associated_ty: to_assoc_type_id(associated_ty),\n                                 parameters: super_trait_ref.substs,\n                             }))\n                             .intern(&Interner)\n@@ -487,7 +488,7 @@ impl Ty {\n                         // FIXME handle type parameters on the segment\n                         return Some(\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty,\n+                                associated_ty: to_assoc_type_id(associated_ty),\n                                 parameters: substs,\n                             }))\n                             .intern(&Interner),\n@@ -753,7 +754,10 @@ fn assoc_type_bindings_from_type_bound<'a>(\n                 None => return SmallVec::<[GenericPredicate; 1]>::new(),\n                 Some(t) => t,\n             };\n-            let projection_ty = ProjectionTy { associated_ty, parameters: super_trait_ref.substs };\n+            let projection_ty = ProjectionTy {\n+                associated_ty: to_assoc_type_id(associated_ty),\n+                parameters: super_trait_ref.substs,\n+            };\n             let mut preds = SmallVec::with_capacity(\n                 binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),\n             );"}, {"sha": "2d3cd671950ee1aeffbdc3e0da4c5560fb27ea16", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -17,14 +17,15 @@ use super::ChalkContext;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n+    from_assoc_type_id,\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n+    to_assoc_type_id,\n     utils::generics,\n     BoundVar, CallableDefId, CallableSig, DebruijnIndex, GenericPredicate, ProjectionPredicate,\n     ProjectionTy, Substs, TraitRef, Ty, TyKind,\n };\n use mapping::{\n-    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsAssocType,\n-    TypeAliasAsValue,\n+    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n };\n \n pub use self::interner::Interner;\n@@ -234,7 +235,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         ty: TyKind::BoundVar(BoundVar { debruijn: DebruijnIndex::ONE, index: 0 })\n                             .intern(&Interner),\n                         projection_ty: ProjectionTy {\n-                            associated_ty: future_output,\n+                            associated_ty: to_assoc_type_id(future_output),\n                             // Self type as the first parameter.\n                             parameters: Substs::single(\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n@@ -383,7 +384,7 @@ pub(crate) fn associated_ty_data_query(\n     id: AssocTypeId,\n ) -> Arc<AssociatedTyDatum> {\n     debug!(\"associated_ty_data {:?}\", id);\n-    let type_alias: TypeAliasId = from_chalk::<TypeAliasAsAssocType, _>(db, id).0;\n+    let type_alias: TypeAliasId = from_assoc_type_id(id);\n     let trait_ = match type_alias.lookup(db.upcast()).container {\n         AssocContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n@@ -438,10 +439,8 @@ pub(crate) fn trait_datum_query(\n         fundamental: false,\n     };\n     let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n-    let associated_ty_ids = trait_data\n-        .associated_types()\n-        .map(|type_alias| TypeAliasAsAssocType(type_alias).to_chalk(db))\n-        .collect();\n+    let associated_ty_ids =\n+        trait_data.associated_types().map(|type_alias| to_assoc_type_id(type_alias)).collect();\n     let trait_datum_bound = rust_ir::TraitDatumBound { where_clauses };\n     let well_known =\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));\n@@ -623,7 +622,7 @@ fn type_alias_associated_ty_value(\n     let value_bound = rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n     let value = rust_ir::AssociatedTyValue {\n         impl_id: impl_id.to_chalk(db),\n-        associated_ty_id: TypeAliasAsAssocType(assoc_ty).to_chalk(db),\n+        associated_ty_id: to_assoc_type_id(assoc_ty),\n         value: make_binders(value_bound, ty.num_binders),\n     };\n     Arc::new(value)"}, {"sha": "67ac95a0e48eea085f94668d85072c44067b13a6", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -14,6 +14,7 @@ use hir_def::{AssocContainerId, GenericDefId, Lookup, TypeAliasId};\n \n use crate::{\n     db::HirDatabase,\n+    from_assoc_type_id,\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n     AliasTy, CallableDefId, FnPointer, FnSig, GenericPredicate, InEnvironment, OpaqueTy,\n@@ -38,9 +39,7 @@ impl ToChalk for Ty {\n                 })\n                 .intern(&Interner)\n             }\n-            TyKind::AssociatedType(type_alias, substs) => {\n-                let assoc_type = TypeAliasAsAssocType(type_alias);\n-                let assoc_type_id = assoc_type.to_chalk(db);\n+            TyKind::AssociatedType(assoc_type_id, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::AssociatedType(assoc_type_id, substitution).intern(&Interner)\n             }\n@@ -85,7 +84,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Adt(adt_id, substitution).intern(&Interner)\n             }\n             TyKind::Alias(AliasTy::Projection(proj_ty)) => {\n-                let associated_ty_id = TypeAliasAsAssocType(proj_ty.associated_ty).to_chalk(db);\n+                let associated_ty_id = proj_ty.associated_ty;\n                 let substitution = proj_ty.parameters.to_chalk(db);\n                 chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n                     associated_ty_id,\n@@ -139,8 +138,7 @@ impl ToChalk for Ty {\n                 TyKind::Placeholder(db.lookup_intern_type_param_id(interned_id))\n             }\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n-                let associated_ty =\n-                    from_chalk::<TypeAliasAsAssocType, _>(db, proj.associated_ty_id).0;\n+                let associated_ty = proj.associated_ty_id;\n                 let parameters = from_chalk(db, proj.substitution);\n                 TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty, parameters }))\n             }\n@@ -180,10 +178,9 @@ impl ToChalk for Ty {\n             }\n \n             chalk_ir::TyKind::Adt(adt_id, subst) => TyKind::Adt(adt_id, from_chalk(db, subst)),\n-            chalk_ir::TyKind::AssociatedType(type_id, subst) => TyKind::AssociatedType(\n-                from_chalk::<TypeAliasAsAssocType, _>(db, type_id).0,\n-                from_chalk(db, subst),\n-            ),\n+            chalk_ir::TyKind::AssociatedType(type_id, subst) => {\n+                TyKind::AssociatedType(type_id, from_chalk(db, subst))\n+            }\n \n             chalk_ir::TyKind::OpaqueType(opaque_type_id, subst) => {\n                 TyKind::OpaqueType(from_chalk(db, opaque_type_id), from_chalk(db, subst))\n@@ -332,20 +329,6 @@ impl ToChalk for CallableDefId {\n     }\n }\n \n-pub(crate) struct TypeAliasAsAssocType(pub(crate) TypeAliasId);\n-\n-impl ToChalk for TypeAliasAsAssocType {\n-    type Chalk = AssocTypeId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> AssocTypeId {\n-        chalk_ir::AssocTypeId(self.0.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, assoc_type_id: AssocTypeId) -> TypeAliasAsAssocType {\n-        TypeAliasAsAssocType(InternKey::from_intern_id(assoc_type_id.0))\n-    }\n-}\n-\n pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsValue {\n@@ -427,7 +410,7 @@ impl ToChalk for ProjectionTy {\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::ProjectionTy<Interner> {\n         chalk_ir::ProjectionTy {\n-            associated_ty_id: TypeAliasAsAssocType(self.associated_ty).to_chalk(db),\n+            associated_ty_id: self.associated_ty,\n             substitution: self.parameters.to_chalk(db),\n         }\n     }\n@@ -437,11 +420,7 @@ impl ToChalk for ProjectionTy {\n         projection_ty: chalk_ir::ProjectionTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n-            associated_ty: from_chalk::<TypeAliasAsAssocType, _>(\n-                db,\n-                projection_ty.associated_ty_id,\n-            )\n-            .0,\n+            associated_ty: projection_ty.associated_ty_id,\n             parameters: from_chalk(db, projection_ty.substitution),\n         }\n     }\n@@ -595,7 +574,10 @@ pub(super) fn generic_predicate_to_inline_bound(\n             if &proj.projection_ty.parameters[0] != self_ty {\n                 return None;\n             }\n-            let trait_ = match proj.projection_ty.associated_ty.lookup(db.upcast()).container {\n+            let trait_ = match from_assoc_type_id(proj.projection_ty.associated_ty)\n+                .lookup(db.upcast())\n+                .container\n+            {\n                 AssocContainerId::TraitId(t) => t,\n                 _ => panic!(\"associated type not in trait\"),\n             };\n@@ -606,8 +588,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             let alias_eq_bound = rust_ir::AliasEqBound {\n                 value: proj.ty.clone().to_chalk(db),\n                 trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n-                associated_ty_id: TypeAliasAsAssocType(proj.projection_ty.associated_ty)\n-                    .to_chalk(db),\n+                associated_ty_id: proj.projection_ty.associated_ty,\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };\n             Some(rust_ir::InlineBound::AliasEqBound(alias_eq_bound))"}, {"sha": "8892a63a9a6911b2c9356e4a3f60e0df3b7e13bc", "filename": "crates/hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19664e276aba21a42cad5351a2c91995d1ce5d52/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=19664e276aba21a42cad5351a2c91995d1ce5d52", "patch": "@@ -4,8 +4,8 @@ use std::fmt;\n use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication};\n use itertools::Itertools;\n \n-use super::{from_chalk, Interner, TypeAliasAsAssocType};\n-use crate::{db::HirDatabase, CallableDefId};\n+use super::{from_chalk, Interner};\n+use crate::{db::HirDatabase, from_assoc_type_id, CallableDefId};\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n pub(crate) use unsafe_tls::{set_current_program, with_current_program};\n@@ -41,7 +41,7 @@ impl DebugContext<'_> {\n         id: super::AssocTypeId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId = from_chalk::<TypeAliasAsAssocType, _>(self.0, id).0;\n+        let type_alias: TypeAliasId = from_assoc_type_id(id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,\n@@ -75,8 +75,7 @@ impl DebugContext<'_> {\n         projection_ty: &chalk_ir::ProjectionTy<Interner>,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let type_alias: TypeAliasId =\n-            from_chalk::<TypeAliasAsAssocType, _>(self.0, projection_ty.associated_ty_id).0;\n+        let type_alias = from_assoc_type_id(projection_ty.associated_ty_id);\n         let type_alias_data = self.0.type_alias_data(type_alias);\n         let trait_ = match type_alias.lookup(self.0.upcast()).container {\n             AssocContainerId::TraitId(t) => t,"}]}