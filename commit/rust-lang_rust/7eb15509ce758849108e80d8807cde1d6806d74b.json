{"sha": "7eb15509ce758849108e80d8807cde1d6806d74b", "node_id": "C_kwDOAAsO6NoAKDdlYjE1NTA5Y2U3NTg4NDkxMDhlODBkODgwN2NkZTFkNjgwNmQ3NGI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-01T01:57:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:14:24Z"}, "message": "Remove unnecessary `RegionKind::` quals.\n\nThe variant names are exported, so we can use them directly (possibly\nwith a `ty::` qualifier). Lots of places already do this, this commit\njust increases consistency.", "tree": {"sha": "095fd402496793fad2b3e31abd4869c33617a5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095fd402496793fad2b3e31abd4869c33617a5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb15509ce758849108e80d8807cde1d6806d74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb15509ce758849108e80d8807cde1d6806d74b", "html_url": "https://github.com/rust-lang/rust/commit/7eb15509ce758849108e80d8807cde1d6806d74b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb15509ce758849108e80d8807cde1d6806d74b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7024dc523ac712249bb78833dab80c5087e1de36", "url": "https://api.github.com/repos/rust-lang/rust/commits/7024dc523ac712249bb78833dab80c5087e1de36", "html_url": "https://github.com/rust-lang/rust/commit/7024dc523ac712249bb78833dab80c5087e1de36"}], "stats": {"total": 127, "additions": 56, "deletions": 71}, "files": [{"sha": "5022cb98b821d0786565e1a81cbc76e60d0f6396", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 // verifying these bounds.\n                 if t1.has_placeholders() {\n                     t1 = tcx.fold_regions(t1, &mut false, |r, _| match *r {\n-                        ty::RegionKind::RePlaceholder(placeholder) => {\n+                        ty::RePlaceholder(placeholder) => {\n                             self.constraints.placeholder_region(self.infcx, placeholder)\n                         }\n                         _ => r,"}, {"sha": "145ac6f4dab5938045bafd54df3edf2d74919e8c", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -428,7 +428,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 }\n                 GenericArgKind::Lifetime(result_value) => {\n                     // e.g., here `result_value` might be `'?1` in the example above...\n-                    if let ty::RegionKind::ReLateBound(debruijn, br) = *result_value {\n+                    if let ty::ReLateBound(debruijn, br) = *result_value {\n                         // ... in which case we would set `canonical_vars[0]` to `Some('static)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions."}, {"sha": "c9a540f45bf7d12ded884b2dc76cc67324910293", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -937,9 +937,9 @@ impl<'tcx> CommonLifetimes<'tcx> {\n         };\n \n         CommonLifetimes {\n-            re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),\n-            re_static: mk(RegionKind::ReStatic),\n-            re_erased: mk(RegionKind::ReErased),\n+            re_root_empty: mk(ty::ReEmpty(ty::UniverseIndex::ROOT)),\n+            re_static: mk(ty::ReStatic),\n+            re_erased: mk(ty::ReErased),\n         }\n     }\n }"}, {"sha": "bb44cf748338d32d2338ae7739c49b9b7c5687b6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -1685,14 +1685,14 @@ impl<'tcx> Region<'tcx> {\n     /// Is this region named by the user?\n     pub fn has_name(self) -> bool {\n         match *self {\n-            RegionKind::ReEarlyBound(ebr) => ebr.has_name(),\n-            RegionKind::ReLateBound(_, br) => br.kind.is_named(),\n-            RegionKind::ReFree(fr) => fr.bound_region.is_named(),\n-            RegionKind::ReStatic => true,\n-            RegionKind::ReVar(..) => false,\n-            RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),\n-            RegionKind::ReEmpty(_) => false,\n-            RegionKind::ReErased => false,\n+            ty::ReEarlyBound(ebr) => ebr.has_name(),\n+            ty::ReLateBound(_, br) => br.kind.is_named(),\n+            ty::ReFree(fr) => fr.bound_region.is_named(),\n+            ty::ReStatic => true,\n+            ty::ReVar(..) => false,\n+            ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n+            ty::ReEmpty(_) => false,\n+            ty::ReErased => false,\n         }\n     }\n "}, {"sha": "db179da7e900b6a6857a9954b9577bb8a2a13fed", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -440,13 +440,9 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         match (*new_region, *old_region) {\n                             // If both predicates have an `ReLateBound` (a HRTB) in the\n                             // same spot, we do nothing.\n-                            (\n-                                ty::RegionKind::ReLateBound(_, _),\n-                                ty::RegionKind::ReLateBound(_, _),\n-                            ) => {}\n+                            (ty::ReLateBound(_, _), ty::ReLateBound(_, _)) => {}\n \n-                            (ty::RegionKind::ReLateBound(_, _), _)\n-                            | (_, ty::RegionKind::ReVar(_)) => {\n+                            (ty::ReLateBound(_, _), _) | (_, ty::ReVar(_)) => {\n                                 // One of these is true:\n                                 // The new predicate has a HRTB in a spot where the old\n                                 // predicate does not (if they both had a HRTB, the previous\n@@ -472,8 +468,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                 // `user_computed_preds`.\n                                 return false;\n                             }\n-                            (_, ty::RegionKind::ReLateBound(_, _))\n-                            | (ty::RegionKind::ReVar(_), _) => {\n+                            (_, ty::ReLateBound(_, _)) | (ty::ReVar(_), _) => {\n                                 // This is the opposite situation as the previous arm.\n                                 // One of these is true:\n                                 //"}, {"sha": "b806cb4a6b400b717be80259d0997a42e7346792", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -711,7 +711,7 @@ fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx\n                 var: ty::BoundVar::from_usize(substs.len()),\n                 kind: ty::BrAnon(substs.len() as u32),\n             };\n-            tcx.mk_region(ty::RegionKind::ReLateBound(ty::INNERMOST, br)).into()\n+            tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br)).into()\n         }\n \n         ty::GenericParamDefKind::Const { .. } => tcx"}, {"sha": "05ad0fe3264f05460bd0792afdf8c187dce80119", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -35,7 +35,7 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, Binder, Region, RegionKind, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::def_id::DefId;\n \n use chalk_ir::{FnSig, ForeignDefId};\n@@ -449,53 +449,49 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'tcx> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Lifetime<RustInterner<'tcx>> {\n-        use rustc_middle::ty::RegionKind::*;\n-\n         match *self {\n-            ReEarlyBound(_) => {\n+            ty::ReEarlyBound(_) => {\n                 panic!(\"Should have already been substituted.\");\n             }\n-            ReLateBound(db, br) => chalk_ir::LifetimeData::BoundVar(chalk_ir::BoundVar::new(\n+            ty::ReLateBound(db, br) => chalk_ir::LifetimeData::BoundVar(chalk_ir::BoundVar::new(\n                 chalk_ir::DebruijnIndex::new(db.as_u32()),\n                 br.var.as_usize(),\n             ))\n             .intern(interner),\n-            ReFree(_) => unimplemented!(),\n-            ReStatic => chalk_ir::LifetimeData::Static.intern(interner),\n-            ReVar(_) => unimplemented!(),\n-            RePlaceholder(placeholder_region) => {\n+            ty::ReFree(_) => unimplemented!(),\n+            ty::ReStatic => chalk_ir::LifetimeData::Static.intern(interner),\n+            ty::ReVar(_) => unimplemented!(),\n+            ty::RePlaceholder(placeholder_region) => {\n                 chalk_ir::LifetimeData::Placeholder(chalk_ir::PlaceholderIndex {\n                     ui: chalk_ir::UniverseIndex { counter: placeholder_region.universe.index() },\n                     idx: 0,\n                 })\n                 .intern(interner)\n             }\n-            ReEmpty(ui) => {\n+            ty::ReEmpty(ui) => {\n                 chalk_ir::LifetimeData::Empty(chalk_ir::UniverseIndex { counter: ui.index() })\n                     .intern(interner)\n             }\n-            ReErased => chalk_ir::LifetimeData::Erased.intern(interner),\n+            ty::ReErased => chalk_ir::LifetimeData::Erased.intern(interner),\n         }\n     }\n }\n \n impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'tcx>> {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> Region<'tcx> {\n         let kind = match self.data(interner) {\n-            chalk_ir::LifetimeData::BoundVar(var) => ty::RegionKind::ReLateBound(\n+            chalk_ir::LifetimeData::BoundVar(var) => ty::ReLateBound(\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(var.index),\n                     kind: ty::BrAnon(var.index as u32),\n                 },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n-            chalk_ir::LifetimeData::Placeholder(p) => {\n-                ty::RegionKind::RePlaceholder(ty::Placeholder {\n-                    universe: ty::UniverseIndex::from_usize(p.ui.counter),\n-                    name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n-                })\n-            }\n+            chalk_ir::LifetimeData::Placeholder(p) => ty::RePlaceholder(ty::Placeholder {\n+                universe: ty::UniverseIndex::from_usize(p.ui.counter),\n+                name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n+            }),\n             chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Empty(ui) => {\n                 ty::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n@@ -982,7 +978,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n                     Some(idx) => {\n                         let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx) };\n-                        return self.tcx.mk_region(RegionKind::ReLateBound(index, new_br));\n+                        return self.tcx.mk_region(ty::ReLateBound(index, new_br));\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n                 },\n@@ -1064,14 +1060,14 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n                         var: ty::BoundVar::from_u32(*idx),\n                         kind: ty::BrAnon(*idx),\n                     };\n-                    self.tcx.mk_region(RegionKind::ReLateBound(self.binder_index, br))\n+                    self.tcx.mk_region(ty::ReLateBound(self.binder_index, br))\n                 }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n                     let br =\n                         ty::BoundRegion { var: ty::BoundVar::from_u32(idx), kind: ty::BrAnon(idx) };\n                     self.named_regions.insert(_re.def_id, idx);\n-                    self.tcx.mk_region(RegionKind::ReLateBound(self.binder_index, br))\n+                    self.tcx.mk_region(ty::ReLateBound(self.binder_index, br))\n                 }\n             },\n "}, {"sha": "d360f34ae709c53e79cae9d75271b8ed07056c38", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -416,7 +416,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 let tcx = self.fcx.tcx;\n                 let ref_ty = tcx.mk_ref(\n                     // Use `ReErased` as `resolve_interior` is going to replace all the regions anyway.\n-                    tcx.mk_region(ty::RegionKind::ReErased),\n+                    tcx.mk_region(ty::ReErased),\n                     ty::TypeAndMut { ty, mutbl: hir::Mutability::Not },\n                 );\n                 self.record("}, {"sha": "ad9bb4470b6e574cae64fc5b17a6971d0429fb25", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -355,12 +355,11 @@ fn check_gat_where_clauses(\n                     // Same for the region. In our example, 'a corresponds\n                     // to the 'me parameter.\n                     let region_param = generics.param_at(*region_idx, tcx);\n-                    let region_param =\n-                        tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n-                            def_id: region_param.def_id,\n-                            index: region_param.index,\n-                            name: region_param.name,\n-                        }));\n+                    let region_param = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                        def_id: region_param.def_id,\n+                        index: region_param.index,\n+                        name: region_param.name,\n+                    }));\n                     // The predicate we expect to see. (In our example,\n                     // `Self: 'me`.)\n                     let clause = ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(\n@@ -397,20 +396,18 @@ fn check_gat_where_clauses(\n                     debug!(\"required clause: {} must outlive {}\", region_a, region_b);\n                     // Translate into the generic parameters of the GAT.\n                     let region_a_param = generics.param_at(*region_a_idx, tcx);\n-                    let region_a_param =\n-                        tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n-                            def_id: region_a_param.def_id,\n-                            index: region_a_param.index,\n-                            name: region_a_param.name,\n-                        }));\n+                    let region_a_param = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                        def_id: region_a_param.def_id,\n+                        index: region_a_param.index,\n+                        name: region_a_param.name,\n+                    }));\n                     // Same for the region.\n                     let region_b_param = generics.param_at(*region_b_idx, tcx);\n-                    let region_b_param =\n-                        tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n-                            def_id: region_b_param.def_id,\n-                            index: region_b_param.index,\n-                            name: region_b_param.name,\n-                        }));\n+                    let region_b_param = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n+                        def_id: region_b_param.def_id,\n+                        index: region_b_param.index,\n+                        name: region_b_param.name,\n+                    }));\n                     // The predicate we expect to see.\n                     let clause = ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n                         region_a_param,"}, {"sha": "54a5037b57578da53aef14b2d097af3ddc51556b", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb15509ce758849108e80d8807cde1d6806d74b/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=7eb15509ce758849108e80d8807cde1d6806d74b", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, Region, RegionKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Region, Ty, TyCtxt};\n use rustc_span::Span;\n use smallvec::smallvec;\n use std::collections::BTreeMap;\n@@ -141,7 +141,7 @@ fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n         //     }\n         //\n         // We care about these, so fall through.\n-        RegionKind::ReEarlyBound(_) => true,\n+        ty::ReEarlyBound(_) => true,\n \n         // These correspond to `T: 'static` relationships which can be\n         // rather surprising. We are therefore putting this behind a\n@@ -150,7 +150,7 @@ fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n         //     struct Foo<'a, T> {\n         //         field: &'static T, // this would generate a ReStatic\n         //     }\n-        RegionKind::ReStatic => tcx.sess.features_untracked().infer_static_outlives_requirements,\n+        ty::ReStatic => tcx.sess.features_untracked().infer_static_outlives_requirements,\n \n         // Late-bound regions can appear in `fn` types:\n         //\n@@ -160,19 +160,16 @@ fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n         //\n         // The type above might generate a `T: 'b` bound, but we can\n         // ignore it.  We can't put it on the struct header anyway.\n-        RegionKind::ReLateBound(..) => false,\n+        ty::ReLateBound(..) => false,\n \n         // This can appear in `where Self: ` bounds (#64855):\n         //\n         //     struct Bar<T>(<Self as Foo>::Type) where Self: ;\n         //     struct Baz<'a>(&'a Self) where Self: ;\n-        RegionKind::ReEmpty(_) => false,\n+        ty::ReEmpty(_) => false,\n \n         // These regions don't appear in types from type declarations:\n-        RegionKind::ReErased\n-        | RegionKind::ReVar(..)\n-        | RegionKind::RePlaceholder(..)\n-        | RegionKind::ReFree(..) => {\n+        ty::ReErased | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReFree(..) => {\n             bug!(\"unexpected region in outlives inference: {:?}\", region);\n         }\n     }"}]}