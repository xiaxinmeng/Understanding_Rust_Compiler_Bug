{"sha": "7cd857dc344e265aa0dd763355bd59e9609d33a1", "node_id": "C_kwDOAAsO6NoAKDdjZDg1N2RjMzQ0ZTI2NWFhMGRkNzYzMzU1YmQ1OWU5NjA5ZDMzYTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-19T23:37:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-19T23:37:30Z"}, "message": "Rollup merge of #94112 - digama0:patch-3, r=scottmcm\n\nOptimize char_try_from_u32\n\nThe optimization was proposed by ```````@falk-hueffner``````` in https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Micro-optimizing.20char.3A.3Afrom_u32/near/272146171,  and I simplified it a bit and added an explanation of why the optimization is correct. The generated code is 2 instructions shorter and uses 2 registers instead of 4 on x86.", "tree": {"sha": "2e3cc82f2fa47b88d9aa3b4e1ae0f9c019214814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e3cc82f2fa47b88d9aa3b4e1ae0f9c019214814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd857dc344e265aa0dd763355bd59e9609d33a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEX86CRBK7hj4Ov3rIwAASBYIADs9NrW0XD7P7QKqAyqwB3dr\nge3fp48KXhWeCn9uDk5+aMNjMlg/Tym2i1Uscmo6H3Ib2B0uI7xUhCZFraxr15Yk\nXcUKKOH21jptUA0r/5GCUPVoFu6CD2+ZOgsx0h0Elp4TIMxm7DEGPyM3t3Iy6DGr\nxTf69FU/UnG1XuWULCUKs/B6QG4OjSiZgfekX4/+Xb673MJjjgGVj3SYkEez5Sne\nmDKzEjY6d3cZARQpPZSc9YYEZPRKokaTR7RnB4JrdMl1cNQXTyVC6Gw+wpqHKdWP\nEC3klII9Q4xtEG1eHmDip1fdeBrHVkazqwdBRM0wd3T+PVhJsqVhQx9WpuXZdlU=\n=EyWZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e3cc82f2fa47b88d9aa3b4e1ae0f9c019214814\nparent 39a50d829027c6377f288b9e96ff7382d98e5751\nparent 7c3ebec0caf23a11773c8291005649dd488ca2ee\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645313850 +0100\ncommitter GitHub <noreply@github.com> 1645313850 +0100\n\nRollup merge of #94112 - digama0:patch-3, r=scottmcm\n\nOptimize char_try_from_u32\n\nThe optimization was proposed by ```````@falk-hueffner``````` in https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Micro-optimizing.20char.3A.3Afrom_u32/near/272146171,  and I simplified it a bit and added an explanation of why the optimization is correct. The generated code is 2 instructions shorter and uses 2 registers instead of 4 on x86.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd857dc344e265aa0dd763355bd59e9609d33a1", "html_url": "https://github.com/rust-lang/rust/commit/7cd857dc344e265aa0dd763355bd59e9609d33a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd857dc344e265aa0dd763355bd59e9609d33a1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a50d829027c6377f288b9e96ff7382d98e5751", "url": "https://api.github.com/repos/rust-lang/rust/commits/39a50d829027c6377f288b9e96ff7382d98e5751", "html_url": "https://github.com/rust-lang/rust/commit/39a50d829027c6377f288b9e96ff7382d98e5751"}, {"sha": "7c3ebec0caf23a11773c8291005649dd488ca2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3ebec0caf23a11773c8291005649dd488ca2ee", "html_url": "https://github.com/rust-lang/rust/commit/7c3ebec0caf23a11773c8291005649dd488ca2ee"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "139841368d6a1c4096f329ee062e9041e194f64a", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7cd857dc344e265aa0dd763355bd59e9609d33a1/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd857dc344e265aa0dd763355bd59e9609d33a1/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=7cd857dc344e265aa0dd763355bd59e9609d33a1", "patch": "@@ -6,8 +6,6 @@ use crate::fmt;\n use crate::mem::transmute;\n use crate::str::FromStr;\n \n-use super::MAX;\n-\n /// Converts a `u32` to a `char`.\n ///\n /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n@@ -271,7 +269,20 @@ impl FromStr for char {\n \n #[inline]\n const fn char_try_from_u32(i: u32) -> Result<char, CharTryFromError> {\n-    if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n+    // This is an optimized version of the check\n+    // (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF),\n+    // which can also be written as\n+    // i >= 0x110000 || (i >= 0xD800 && i < 0xE000).\n+    //\n+    // The XOR with 0xD800 permutes the ranges such that 0xD800..0xE000 is\n+    // mapped to 0x0000..0x0800, while keeping all the high bits outside 0xFFFF the same.\n+    // In particular, numbers >= 0x110000 stay in this range.\n+    //\n+    // Subtracting 0x800 causes 0x0000..0x0800 to wrap, meaning that a single\n+    // unsigned comparison against 0x110000 - 0x800 will detect both the wrapped\n+    // surrogate range as well as the numbers originally larger than 0x110000.\n+    //\n+    if (i ^ 0xD800).wrapping_sub(0x800) >= 0x110000 - 0x800 {\n         Err(CharTryFromError(()))\n     } else {\n         // SAFETY: checked that it's a legal unicode value"}]}