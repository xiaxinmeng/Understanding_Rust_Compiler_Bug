{"sha": "3214de735969602ddf2625ca500ff8d3ec57a745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMTRkZTczNTk2OTYwMmRkZjI2MjVjYTUwMGZmOGQzZWM1N2E3NDU=", "commit": {"author": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-09-11T02:53:14Z"}, "committer": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-10-27T15:04:04Z"}, "message": "modified lint to work with MIR\n\nWorking with MIR let's us exclude expressions like `&fn_name as &dyn Something`\nand `(&fn_name)()`. Also added ABI, unsafety and whether a function is variadic\nin the lint suggestion, included the `&` in the span of the lint and updated the\ntest.", "tree": {"sha": "7c9d4151373a76802c659f980dd0a21169fb5bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9d4151373a76802c659f980dd0a21169fb5bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3214de735969602ddf2625ca500ff8d3ec57a745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3214de735969602ddf2625ca500ff8d3ec57a745", "html_url": "https://github.com/rust-lang/rust/commit/3214de735969602ddf2625ca500ff8d3ec57a745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3214de735969602ddf2625ca500ff8d3ec57a745/comments", "author": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975547d475fcb3a7c6e440be5f8de3bf0497d383", "url": "https://api.github.com/repos/rust-lang/rust/commits/975547d475fcb3a7c6e440be5f8de3bf0497d383", "html_url": "https://github.com/rust-lang/rust/commit/975547d475fcb3a7c6e440be5f8de3bf0497d383"}], "stats": {"total": 381, "additions": 322, "deletions": 59}, "files": [{"sha": "e5f66611d0f9b382471319ce3776c6d8b90e5b47", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -2942,37 +2942,3 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n         }\n     }\n }\n-\n-declare_lint! {\n-    FUNCTION_REFERENCES,\n-    Warn,\n-    \"suggest casting functions to pointers when attempting to take references\"\n-}\n-\n-declare_lint_pass!(FunctionReferences => [FUNCTION_REFERENCES]);\n-\n-impl<'tcx> LateLintPass<'tcx> for FunctionReferences {\n-    fn check_expr(&mut self, cx: &LateContext<'_>, e: &hir::Expr<'_>) {\n-        if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, referent) = e.kind {\n-            if let hir::ExprKind::Path(qpath) = &referent.kind {\n-                if let Some(def_id) = cx.qpath_res(qpath, referent.hir_id).opt_def_id() {\n-                    cx.tcx.hir().get_if_local(def_id).map(|node| {\n-                        node.fn_decl().map(|decl| {\n-                            if let Some(ident) = node.ident() {\n-                                cx.struct_span_lint(FUNCTION_REFERENCES, referent.span, |lint| {\n-                                    let num_args = decl.inputs.len();\n-                                    lint.build(&format!(\n-                                        \"cast `{}` with `as *const fn({}) -> _` to use it as a pointer\",\n-                                        ident.to_string(),\n-                                        vec![\"_\"; num_args].join(\", \")\n-                                    ))\n-                                    .emit()\n-                                });\n-                            }\n-                        });\n-                    });\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "1db59bfc39dcef4579fa95f3c17b3332977f3c83", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -194,7 +194,6 @@ macro_rules! late_lint_mod_passes {\n                 UnreachablePub: UnreachablePub,\n                 ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n                 InvalidValue: InvalidValue,\n-                FunctionReferences: FunctionReferences,\n             ]\n         );\n     };"}, {"sha": "2daa468136f2adc9de76be923958910118a73473", "filename": "compiler/rustc_mir/src/transform/function_references.rs", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_references.rs?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -0,0 +1,158 @@\n+use rustc_hir::def_id::DefId;\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::lint::builtin::FUNCTION_REFERENCES;\n+use rustc_span::Span;\n+use rustc_target::spec::abi::Abi;\n+\n+use crate::transform::{MirPass, MirSource};\n+\n+pub struct FunctionReferences;\n+\n+impl<'tcx> MirPass<'tcx> for FunctionReferences {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let source_info = SourceInfo::outermost(body.span);\n+        let mut checker = FunctionRefChecker {\n+            tcx,\n+            body,\n+            potential_lints: Vec::new(),\n+            casts: Vec::new(),\n+            calls: Vec::new(),\n+            source_info,\n+        };\n+        checker.visit_body(&body);\n+    }\n+}\n+\n+struct FunctionRefChecker<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    body: &'a Body<'tcx>,\n+    potential_lints: Vec<FunctionRefLint>,\n+    casts: Vec<Span>,\n+    calls: Vec<Span>,\n+    source_info: SourceInfo,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FunctionRefChecker<'a, 'tcx> {\n+    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n+        self.super_basic_block_data(block, data);\n+        for cast_span in self.casts.drain(..) {\n+            self.potential_lints.retain(|lint| lint.source_info.span != cast_span);\n+        }\n+        for call_span in self.calls.drain(..) {\n+            self.potential_lints.retain(|lint| lint.source_info.span != call_span);\n+        }\n+        for lint in self.potential_lints.drain(..) {\n+            lint.emit(self.tcx, self.body);\n+        }\n+    }\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        self.source_info = statement.source_info;\n+        self.super_statement(statement, location);\n+    }\n+    fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+        self.source_info = terminator.source_info;\n+        if let TerminatorKind::Call {\n+            func,\n+            args: _,\n+            destination: _,\n+            cleanup: _,\n+            from_hir_call: _,\n+            fn_span: _,\n+        } = &terminator.kind\n+        {\n+            let span = match func {\n+                Operand::Copy(place) | Operand::Move(place) => {\n+                    self.body.local_decls[place.local].source_info.span\n+                }\n+                Operand::Constant(constant) => constant.span,\n+            };\n+            self.calls.push(span);\n+        };\n+        self.super_terminator(terminator, location);\n+    }\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        match rvalue {\n+            Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n+                let decl = &self.body.local_decls[place.local];\n+                if let ty::FnDef(def_id, _) = decl.ty.kind {\n+                    let ident = self\n+                        .body\n+                        .var_debug_info\n+                        .iter()\n+                        .find(|info| info.source_info.span == decl.source_info.span)\n+                        .map(|info| info.name.to_ident_string())\n+                        .unwrap_or(self.tcx.def_path_str(def_id));\n+                    let lint = FunctionRefLint { ident, def_id, source_info: self.source_info };\n+                    self.potential_lints.push(lint);\n+                }\n+            }\n+            Rvalue::Cast(_, op, _) => {\n+                let op_ty = op.ty(self.body, self.tcx);\n+                if self.is_fn_ref(op_ty) {\n+                    self.casts.push(self.source_info.span);\n+                }\n+            }\n+            _ => {}\n+        }\n+        self.super_rvalue(rvalue, location);\n+    }\n+}\n+\n+impl<'a, 'tcx> FunctionRefChecker<'a, 'tcx> {\n+    fn is_fn_ref(&self, ty: Ty<'tcx>) -> bool {\n+        let referent_ty = match ty.kind {\n+            ty::Ref(_, referent_ty, _) => Some(referent_ty),\n+            ty::RawPtr(ty_and_mut) => Some(ty_and_mut.ty),\n+            _ => None,\n+        };\n+        referent_ty\n+            .map(|ref_ty| if let ty::FnDef(..) = ref_ty.kind { true } else { false })\n+            .unwrap_or(false)\n+    }\n+}\n+\n+struct FunctionRefLint {\n+    ident: String,\n+    def_id: DefId,\n+    source_info: SourceInfo,\n+}\n+\n+impl<'tcx> FunctionRefLint {\n+    fn emit(&self, tcx: TyCtxt<'tcx>, body: &Body<'tcx>) {\n+        let def_id = self.def_id;\n+        let source_info = self.source_info;\n+        let lint_root = body.source_scopes[source_info.scope]\n+            .local_data\n+            .as_ref()\n+            .assert_crate_local()\n+            .lint_root;\n+        let fn_sig = tcx.fn_sig(def_id);\n+        let unsafety = fn_sig.unsafety().prefix_str();\n+        let abi = match fn_sig.abi() {\n+            Abi::Rust => String::from(\"\"),\n+            other_abi => {\n+                let mut s = String::from(\"extern \\\"\");\n+                s.push_str(other_abi.name());\n+                s.push_str(\"\\\" \");\n+                s\n+            }\n+        };\n+        let num_args = fn_sig.inputs().map_bound(|inputs| inputs.len()).skip_binder();\n+        let variadic = if fn_sig.c_variadic() { \", ...\" } else { \"\" };\n+        let ret = if fn_sig.output().skip_binder().is_unit() { \"\" } else { \" -> _\" };\n+        tcx.struct_span_lint_hir(FUNCTION_REFERENCES, lint_root, source_info.span, |lint| {\n+            lint.build(&format!(\n+                \"cast `{}` with `as {}{}fn({}{}){}` to use it as a pointer\",\n+                self.ident,\n+                unsafety,\n+                abi,\n+                vec![\"_\"; num_args].join(\", \"),\n+                variadic,\n+                ret,\n+            ))\n+            .emit()\n+        });\n+    }\n+}"}, {"sha": "3f50420b86b110389b91a3ef3351f745d4be6b65", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -27,6 +27,7 @@ pub mod dest_prop;\n pub mod dump_mir;\n pub mod early_otherwise_branch;\n pub mod elaborate_drops;\n+pub mod function_references;\n pub mod generator;\n pub mod inline;\n pub mod instcombine;\n@@ -266,6 +267,7 @@ fn mir_const<'tcx>(\n             // MIR-level lints.\n             &check_packed_ref::CheckPackedRef,\n             &check_const_item_mutation::CheckConstItemMutation,\n+            &function_references::FunctionReferences,\n             // What we need to do constant evaluation.\n             &simplify::SimplifyCfg::new(\"initial\"),\n             &rustc_peek::SanityCheck,"}, {"sha": "4cfd3277202b760d5408f13655f2f597a8641282", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -2645,6 +2645,11 @@ declare_lint! {\n         reference: \"issue #76200 <https://github.com/rust-lang/rust/issues/76200>\",\n         edition: None,\n     };\n+\n+declare_lint! {\n+    pub FUNCTION_REFERENCES,\n+    Warn,\n+    \"suggest casting functions to pointers when attempting to take references\",\n }\n \n declare_lint! {\n@@ -2762,6 +2767,7 @@ declare_lint_pass! {\n         CONST_EVALUATABLE_UNCHECKED,\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n         UNINHABITED_STATIC,\n+        FUNCTION_REFERENCES,\n     ]\n }\n "}, {"sha": "ad0380375d63b48c093e149a272521ad9ebb9401", "filename": "src/test/ui/lint/function-references.rs", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/src%2Ftest%2Fui%2Flint%2Ffunction-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/src%2Ftest%2Fui%2Flint%2Ffunction-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-references.rs?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -1,22 +1,71 @@\n // check-pass\n-fn foo() -> usize { 42 }\n-fn bar(x: usize) -> usize { x }\n-fn baz(x: usize, y: usize) -> usize { x + y }\n+#![feature(c_variadic)]\n+#![allow(dead_code)]\n+\n+fn foo() -> u32 { 42 }\n+fn bar(x: u32) -> u32 { x }\n+fn baz(x: u32, y: u32) -> u32 { x + y }\n+unsafe fn unsafe_fn() { }\n+extern \"C\" fn c_fn() { }\n+unsafe extern \"C\" fn unsafe_c_fn() { }\n+unsafe extern fn variadic_fn(_x: u32, _args: ...) { }\n+fn call_fn(f: &dyn Fn(u32) -> u32, x: u32) { f(x); }\n+fn parameterized_call_fn<F: Fn(u32) -> u32>(f: &F, x: u32) { f(x); }\n \n fn main() {\n+    let _zst_ref = &foo;\n+    //~^ WARN cast `foo` with `as fn() -> _` to use it as a pointer\n+    let fn_item = foo;\n+    let _indirect_ref = &fn_item;\n+    //~^ WARN cast `fn_item` with `as fn() -> _` to use it as a pointer\n+    let _cast_zst_ptr = &foo as *const _;\n+    //~^ WARN cast `foo` with `as fn() -> _` to use it as a pointer\n+    let _coerced_zst_ptr: *const _ = &foo;\n+    //~^ WARN cast `foo` with `as fn() -> _` to use it as a pointer\n+\n+    let _zst_ref = &mut foo;\n+    //~^ WARN cast `foo` with `as fn() -> _` to use it as a pointer\n+    let mut mut_fn_item = foo;\n+    let _indirect_ref = &mut mut_fn_item;\n+    //~^ WARN cast `fn_item` with `as fn() -> _` to use it as a pointer\n+    let _cast_zst_ptr = &mut foo as *mut _;\n+    //~^ WARN cast `foo` with `as fn() -> _` to use it as a pointer\n+    let _coerced_zst_ptr: *mut _ = &mut foo;\n+    //~^ WARN cast `foo` with `as fn() -> _` to use it as a pointer\n+\n+    let _cast_zst_ref = &foo as &dyn Fn() -> u32;\n+    let _coerced_zst_ref: &dyn Fn() -> u32 = &foo;\n+\n+    let _cast_zst_ref = &mut foo as &mut dyn Fn() -> u32;\n+    let _coerced_zst_ref: &mut dyn Fn() -> u32 = &mut foo;\n+    let _fn_ptr = foo as fn() -> u32;\n+\n     println!(\"{:p}\", &foo);\n-    //~^ WARN cast `foo` with `as *const fn() -> _` to use it as a pointer\n+    //~^ WARN cast `foo` with as fn() -> _` to use it as a pointer\n     println!(\"{:p}\", &bar);\n-    //~^ WARN cast `bar` with `as *const fn(_) -> _` to use it as a pointer\n+    //~^ WARN cast `bar` with as fn(_) -> _` to use it as a pointer\n     println!(\"{:p}\", &baz);\n-    //~^ WARN cast `baz` with `as *const fn(_, _) -> _` to use it as a pointer\n+    //~^ WARN cast `baz` with as fn(_, _) -> _` to use it as a pointer\n+    println!(\"{:p}\", &unsafe_fn);\n+    //~^ WARN cast `baz` with as unsafe fn()` to use it as a pointer\n+    println!(\"{:p}\", &c_fn);\n+    //~^ WARN cast `baz` with as extern \"C\" fn()` to use it as a pointer\n+    println!(\"{:p}\", &unsafe_c_fn);\n+    //~^ WARN cast `baz` with as unsafe extern \"C\" fn()` to use it as a pointer\n+    println!(\"{:p}\", &variadic_fn);\n+    //~^ WARN cast `baz` with as unsafe extern \"C\" fn(_, ...) -> _` to use it as a pointer\n+    println!(\"{:p}\", &std::env::var::<String>);\n+    //~^ WARN cast `std::env::var` with as fn(_) -> _` to use it as a pointer\n+\n+    println!(\"{:p}\", foo as fn() -> u32);\n \n-    //should not produce any warnings\n-    println!(\"{:p}\", foo as *const fn() -> usize);\n-    println!(\"{:p}\", bar as *const fn(usize) -> usize);\n-    println!(\"{:p}\", baz as *const fn(usize, usize) -> usize);\n+    unsafe {\n+        std::mem::transmute::<_, usize>(&foo);\n+        //~^ WARN cast `foo` with as fn() -> _` to use it as a pointer\n+        std::mem::transmute::<_, usize>(foo as fn() -> u32);\n+    }\n \n-    //should not produce any warnings\n-    let fn_thing = foo;\n-    println!(\"{:p}\", &fn_thing);\n+    (&bar)(1);\n+    call_fn(&bar, 1);\n+    parameterized_call_fn(&bar, 1);\n }"}, {"sha": "62dbf7f835dc903e23fb83ce7de74b236df759aa", "filename": "src/test/ui/lint/function-references.stderr", "status": "modified", "additions": 94, "deletions": 11, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/3214de735969602ddf2625ca500ff8d3ec57a745/src%2Ftest%2Fui%2Flint%2Ffunction-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3214de735969602ddf2625ca500ff8d3ec57a745/src%2Ftest%2Fui%2Flint%2Ffunction-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-references.stderr?ref=3214de735969602ddf2625ca500ff8d3ec57a745", "patch": "@@ -1,22 +1,105 @@\n-warning: cast `foo` with `as *const fn() -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:7:23\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:16:20\n    |\n-LL |     println!(\"{:p}\", &foo);\n-   |                       ^^^\n+LL |     let _zst_ref = &foo;\n+   |                    ^^^^\n    |\n    = note: `#[warn(function_references)]` on by default\n \n-warning: cast `bar` with `as *const fn(_) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:9:23\n+warning: cast `fn_item` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:19:25\n+   |\n+LL |     let _indirect_ref = &fn_item;\n+   |                         ^^^^^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:21:25\n+   |\n+LL |     let _cast_zst_ptr = &foo as *const _;\n+   |                         ^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:23:38\n+   |\n+LL |     let _coerced_zst_ptr: *const _ = &foo;\n+   |                                      ^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:26:20\n+   |\n+LL |     let _zst_ref = &mut foo;\n+   |                    ^^^^^^^^\n+\n+warning: cast `mut_fn_item` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:29:25\n+   |\n+LL |     let _indirect_ref = &mut mut_fn_item;\n+   |                         ^^^^^^^^^^^^^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:31:25\n+   |\n+LL |     let _cast_zst_ptr = &mut foo as *mut _;\n+   |                         ^^^^^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:33:36\n+   |\n+LL |     let _coerced_zst_ptr: *mut _ = &mut foo;\n+   |                                    ^^^^^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:43:22\n+   |\n+LL |     println!(\"{:p}\", &foo);\n+   |                      ^^^^\n+\n+warning: cast `bar` with `as fn(_) -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:45:22\n    |\n LL |     println!(\"{:p}\", &bar);\n-   |                       ^^^\n+   |                      ^^^^\n \n-warning: cast `baz` with `as *const fn(_, _) -> _` to use it as a pointer\n-  --> $DIR/function-references.rs:11:23\n+warning: cast `baz` with `as fn(_, _) -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:47:22\n    |\n LL |     println!(\"{:p}\", &baz);\n-   |                       ^^^\n+   |                      ^^^^\n+\n+warning: cast `unsafe_fn` with `as unsafe fn()` to use it as a pointer\n+  --> $DIR/function-references.rs:49:22\n+   |\n+LL |     println!(\"{:p}\", &unsafe_fn);\n+   |                      ^^^^^^^^^^\n+\n+warning: cast `c_fn` with `as extern \"C\" fn()` to use it as a pointer\n+  --> $DIR/function-references.rs:51:22\n+   |\n+LL |     println!(\"{:p}\", &c_fn);\n+   |                      ^^^^^\n \n-warning: 3 warnings emitted\n+warning: cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to use it as a pointer\n+  --> $DIR/function-references.rs:53:22\n+   |\n+LL |     println!(\"{:p}\", &unsafe_c_fn);\n+   |                      ^^^^^^^^^^^^\n+\n+warning: cast `variadic_fn` with `as unsafe extern \"C\" fn(_, ...)` to use it as a pointer\n+  --> $DIR/function-references.rs:55:22\n+   |\n+LL |     println!(\"{:p}\", &variadic_fn);\n+   |                      ^^^^^^^^^^^^\n+\n+warning: cast `std::env::var` with `as fn(_) -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:57:22\n+   |\n+LL |     println!(\"{:p}\", &std::env::var::<String>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: cast `foo` with `as fn() -> _` to use it as a pointer\n+  --> $DIR/function-references.rs:63:41\n+   |\n+LL |         std::mem::transmute::<_, usize>(&foo);\n+   |                                         ^^^^\n \n+warning: 17 warnings emitted"}]}