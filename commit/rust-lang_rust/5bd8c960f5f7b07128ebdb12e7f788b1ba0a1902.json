{"sha": "5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "node_id": "C_kwDOAAsO6NoAKDViZDhjOTYwZjVmN2IwNzEyOGViZGIxMmU3Zjc4OGIxYmEwYTE5MDI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-08T08:59:35Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-15T14:53:20Z"}, "message": "provide `generic_param_scope` for region errors", "tree": {"sha": "c718862fc57fb9262a09d1593022fe580ba8cddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c718862fc57fb9262a09d1593022fe580ba8cddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "html_url": "https://github.com/rust-lang/rust/commit/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b955fa7dd013d04b2a781785d95f76ce1d6d80ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b955fa7dd013d04b2a781785d95f76ce1d6d80ee", "html_url": "https://github.com/rust-lang/rust/commit/b955fa7dd013d04b2a781785d95f76ce1d6d80ee"}], "stats": {"total": 354, "additions": 179, "deletions": 175}, "files": [{"sha": "6508c0da75f94cdf6c2562b0d2a0a998428b93dc", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -181,11 +181,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         let generic_ty = type_test.generic_kind.to_ty(self.infcx.tcx);\n                         let origin = RelateParamBound(type_test_span, generic_ty, None);\n                         self.buffer_error(self.infcx.construct_generic_bound_failure(\n+                            self.body.source.def_id().expect_local(),\n                             type_test_span,\n                             Some(origin),\n                             type_test.generic_kind,\n                             lower_bound_region,\n-                            self.body.source.def_id().as_local(),\n                         ));\n                     } else {\n                         // FIXME. We should handle this case better. It"}, {"sha": "d7505717bf3d2b57ce48fff2223a1b0f30fb7ba9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 28, "deletions": 56, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -63,7 +63,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, Mul\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Item, ItemKind, Node};\n+use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n@@ -348,7 +348,11 @@ pub fn same_type_modulo_infer<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn report_region_errors(&self, errors: &[RegionResolutionError<'tcx>]) {\n+    pub fn report_region_errors(\n+        &self,\n+        generic_param_scope: LocalDefId,\n+        errors: &[RegionResolutionError<'tcx>],\n+    ) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n         // try to pre-process the errors, which will group some of them\n@@ -379,6 +383,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n                     RegionResolutionError::GenericBoundFailure(origin, param_ty, sub) => {\n                         self.report_generic_bound_failure(\n+                            generic_param_scope,\n                             origin.span(),\n                             Some(origin),\n                             param_ty,\n@@ -2269,56 +2274,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     pub fn report_generic_bound_failure(\n         &self,\n+        generic_param_scope: LocalDefId,\n         span: Span,\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) {\n-        let owner =\n-            self.in_progress_typeck_results.map(|typeck_results| typeck_results.borrow().hir_owner);\n-        self.construct_generic_bound_failure(span, origin, bound_kind, sub, owner).emit();\n+        self.construct_generic_bound_failure(generic_param_scope, span, origin, bound_kind, sub)\n+            .emit();\n     }\n \n     pub fn construct_generic_bound_failure(\n         &self,\n+        generic_param_scope: LocalDefId,\n         span: Span,\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n-        owner: Option<LocalDefId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n-        let generics = owner.map(|owner| {\n-            let hir_id = hir.local_def_id_to_hir_id(owner);\n-            let parent_id = hir.get_parent_item(hir_id);\n-            (\n-                // Parent item could be a `mod`, so we check the HIR before calling:\n-                if let Some(Node::Item(Item {\n-                    kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n-                    ..\n-                })) = hir.find_by_def_id(parent_id)\n-                {\n-                    Some(self.tcx.generics_of(parent_id))\n-                } else {\n-                    None\n-                },\n-                self.tcx.generics_of(owner.to_def_id()),\n-                hir.span(hir_id),\n-            )\n-        });\n-\n-        let span = match generics {\n-            // This is to get around the trait identity obligation, that has a `DUMMY_SP` as signal\n-            // for other diagnostics, so we need to recover it here.\n-            Some((_, _, node)) if span.is_dummy() => node,\n-            _ => span,\n-        };\n-\n+        let generics = self.tcx.generics_of(generic_param_scope);\n         // type_param_span is (span, has_bounds)\n-        let type_param_span = match (generics, bound_kind) {\n-            (Some((_, ref generics, _)), GenericKind::Param(ref param)) => {\n+        let type_param_span = match bound_kind {\n+            GenericKind::Param(ref param) => {\n                 // Account for the case where `param` corresponds to `Self`,\n                 // which doesn't have the expected type argument.\n                 if !(generics.has_self && param.index == 0) {\n@@ -2346,30 +2325,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             _ => None,\n         };\n-        let new_lt = generics\n-            .as_ref()\n-            .and_then(|(parent_g, g, _)| {\n-                let mut possible = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char));\n-                let mut lts_names = g\n-                    .params\n-                    .iter()\n+\n+        let new_lt = {\n+            let mut possible = (b'a'..=b'z').map(|c| format!(\"'{}\", c as char));\n+            let lts_names =\n+                iter::successors(Some(generics), |g| g.parent.map(|p| self.tcx.generics_of(p)))\n+                    .flat_map(|g| &g.params)\n                     .filter(|p| matches!(p.kind, ty::GenericParamDefKind::Lifetime))\n                     .map(|p| p.name.as_str())\n                     .collect::<Vec<_>>();\n-                if let Some(g) = parent_g {\n-                    lts_names.extend(\n-                        g.params\n-                            .iter()\n-                            .filter(|p| matches!(p.kind, ty::GenericParamDefKind::Lifetime))\n-                            .map(|p| p.name.as_str()),\n-                    );\n-                }\n-                possible.find(|candidate| !lts_names.contains(&&candidate[..]))\n-            })\n-            .unwrap_or(\"'lt\".to_string());\n+            possible\n+                .find(|candidate| !lts_names.contains(&&candidate[..]))\n+                .unwrap_or(\"'lt\".to_string())\n+        };\n+\n         let add_lt_sugg = generics\n-            .as_ref()\n-            .and_then(|(_, g, _)| g.params.first())\n+            .params\n+            .first()\n             .and_then(|param| param.def_id.as_local())\n             .map(|def_id| (self.tcx.def_span(def_id).shrink_to_lo(), format!(\"{}, \", new_lt)));\n \n@@ -2571,7 +2543,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 if let Some(infer::RelateParamBound(_, t, _)) = origin {\n                     let return_impl_trait =\n-                        owner.and_then(|owner| self.tcx.return_type_impl_trait(owner)).is_some();\n+                        self.tcx.return_type_impl_trait(generic_param_scope).is_some();\n                     let t = self.resolve_vars_if_possible(t);\n                     match t.kind() {\n                         // We've got:"}, {"sha": "c5a342c1ba2ca6abc0cb743858a4d857b3bc8a60", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -1301,7 +1301,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n     /// `resolve_vars_if_possible` as well as `fully_resolve`.\n-    pub fn resolve_regions_and_report_errors(&self, outlives_env: &OutlivesEnvironment<'tcx>) {\n+    pub fn resolve_regions_and_report_errors(\n+        &self,\n+        generic_param_scope: LocalDefId,\n+        outlives_env: &OutlivesEnvironment<'tcx>,\n+    ) {\n         let errors = self.resolve_regions(outlives_env);\n \n         if !self.is_tainted_by_errors() {\n@@ -1310,7 +1314,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // this infcx was in use.  This is totally hokey but\n             // otherwise we have a hard time separating legit region\n             // errors from silly ones.\n-            self.report_region_errors(&errors);\n+            self.report_region_errors(generic_param_scope, &errors);\n         }\n     }\n "}, {"sha": "a57971bfb697dee6505787c334002c750682b6f9", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -68,6 +68,7 @@ use crate::infer::{\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeVisitable};\n use smallvec::smallvec;\n@@ -163,14 +164,15 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     pub fn check_region_obligations_and_report_errors(\n         &self,\n+        generic_param_scope: LocalDefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n     ) {\n         self.process_registered_region_obligations(\n             outlives_env.region_bound_pairs(),\n             outlives_env.param_env,\n         );\n \n-        self.resolve_regions_and_report_errors(outlives_env)\n+        self.resolve_regions_and_report_errors(generic_param_scope, outlives_env)\n     }\n }\n "}, {"sha": "a14bf72242bed27ad40428f964cb77e8ef397fe5", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -237,29 +237,37 @@ fn do_normalize_predicates<'tcx>(\n         // cares about declarations like `'a: 'b`.\n         let outlives_env = OutlivesEnvironment::new(elaborated_env);\n \n-        infcx.resolve_regions_and_report_errors(&outlives_env);\n+        // FIXME: It's very weird that we ignore region obligations but apparently\n+        // still need to use `resolve_regions` as we need the resolved regions in\n+        // the normalized predicates.\n+        let errors = infcx.resolve_regions(&outlives_env);\n+        if !errors.is_empty() {\n+            tcx.sess.delay_span_bug(\n+                span,\n+                format!(\n+                    \"failed region resolution while normalizing {elaborated_env:?}: {errors:?}\"\n+                ),\n+            );\n+        }\n \n-        let predicates = match infcx.fully_resolve(predicates) {\n-            Ok(predicates) => predicates,\n+        match infcx.fully_resolve(predicates) {\n+            Ok(predicates) => Ok(predicates),\n             Err(fixup_err) => {\n                 // If we encounter a fixup error, it means that some type\n                 // variable wound up unconstrained. I actually don't know\n                 // if this can happen, and I certainly don't expect it to\n                 // happen often, but if it did happen it probably\n                 // represents a legitimate failure due to some kind of\n-                // unconstrained variable, and it seems better not to ICE,\n-                // all things considered.\n-                let reported = tcx.sess.span_err(span, &fixup_err.to_string());\n-                return Err(reported);\n+                // unconstrained variable.\n+                //\n+                // @lcnr: Let's still ICE here for now. I want a test case\n+                // for that.\n+                span_bug!(\n+                    span,\n+                    \"inference variables in normalized parameter environment: {}\",\n+                    fixup_err\n+                );\n             }\n-        };\n-        if predicates.needs_infer() {\n-            let reported = tcx\n-                .sess\n-                .delay_span_bug(span, \"encountered inference variables after `fully_resolve`\");\n-            Err(reported)\n-        } else {\n-            Ok(predicates)\n         }\n     })\n }"}, {"sha": "69f3f03cfa97c5a2c98538f4b8ddc44fc1cd078d", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -767,7 +767,10 @@ fn check_opaque_meets_bounds<'tcx>(\n             // Can have different predicates to their defining use\n             hir::OpaqueTyOrigin::TyAlias => {\n                 let outlives_environment = OutlivesEnvironment::new(param_env);\n-                infcx.check_region_obligations_and_report_errors(&outlives_environment);\n+                infcx.check_region_obligations_and_report_errors(\n+                    defining_use_anchor,\n+                    &outlives_environment,\n+                );\n             }\n         }\n "}, {"sha": "1f921ca835890ded16273278cc8658859e9c0d9a", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -394,7 +394,10 @@ fn compare_predicate_entailment<'tcx>(\n         // lifetime parameters.\n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n         outlives_environment.add_implied_bounds(infcx, wf_tys, impl_m_hir_id);\n-        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n+        infcx.check_region_obligations_and_report_errors(\n+            impl_m.def_id.expect_local(),\n+            &outlives_environment,\n+        );\n \n         Ok(())\n     })\n@@ -1145,7 +1148,8 @@ pub(crate) fn compare_const_impl<'tcx>(\n         }\n \n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        infcx.resolve_regions_and_report_errors(&outlives_environment);\n+        infcx\n+            .resolve_regions_and_report_errors(impl_c.def_id.expect_local(), &outlives_environment);\n     });\n }\n \n@@ -1262,7 +1266,10 @@ fn compare_type_predicate_entailment<'tcx>(\n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n+        infcx.check_region_obligations_and_report_errors(\n+            impl_ty.def_id.expect_local(),\n+            &outlives_environment,\n+        );\n \n         Ok(())\n     })\n@@ -1493,7 +1500,10 @@ pub fn check_type_bounds<'tcx>(\n         };\n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n         outlives_environment.add_implied_bounds(&infcx, implied_bounds, impl_ty_hir_id);\n-        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n+        infcx.check_region_obligations_and_report_errors(\n+            impl_ty.def_id.expect_local(),\n+            &outlives_environment,\n+        );\n \n         Ok(())\n     })"}, {"sha": "6df59ea10969cfd3ed634170a4fc99e1414ddec3", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -107,7 +107,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n \n         let mut outlives_environment = OutlivesEnvironment::new(param_env);\n         outlives_environment.add_implied_bounds(infcx, wf_tys, body_id);\n-        infcx.check_region_obligations_and_report_errors(&outlives_environment);\n+        infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n     })\n }\n "}, {"sha": "a92c37ff143b4cd76a55e6996550b3bef130cdf2", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -349,7 +349,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n \n                     // Finally, resolve all regions.\n                     let outlives_env = OutlivesEnvironment::new(param_env);\n-                    infcx.resolve_regions_and_report_errors(&outlives_env);\n+                    infcx.resolve_regions_and_report_errors(impl_did, &outlives_env);\n                 }\n             }\n             _ => {\n@@ -606,7 +606,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n         // Finally, resolve all regions.\n         let outlives_env = OutlivesEnvironment::new(param_env);\n-        infcx.resolve_regions_and_report_errors(&outlives_env);\n+        infcx.resolve_regions_and_report_errors(impl_did, &outlives_env);\n \n         CoerceUnsizedInfo { custom_kind: kind }\n     })"}, {"sha": "6ece955de643c169649b14aabb80a023d096c3d3", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -150,7 +150,7 @@ fn get_impl_substs<'tcx>(\n \n     // Conservatively use an empty `ParamEnv`.\n     let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n-    infcx.resolve_regions_and_report_errors(&outlives_env);\n+    infcx.resolve_regions_and_report_errors(impl1_def_id, &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         let span = tcx.def_span(impl1_def_id);\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });"}, {"sha": "e2b177b951cc9a2c2bda0f492468fc4e97faa295", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,15 +2,17 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/builtin-superkinds-self-type.rs:10:16\n    |\n LL | impl <T: Sync> Foo for T { }\n-   |                ^^^\n+   |                ^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds...\n note: ...that is required by this bound\n   --> $DIR/builtin-superkinds-self-type.rs:6:24\n    |\n LL | trait Foo : Sized+Sync+'static {\n    |                        ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl <T: Sync + 'static> Foo for T { }\n+   |               +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "95cf4fb168f1e5d25469411e38a2dce09511c059", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-3.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,10 +2,12 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/implied-bounds-unnorm-associated-type-3.rs:19:5\n    |\n LL |     fn zero_copy_from<'b>(cart: &'b [T]) -> &'b [T] {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `[T]` will meet its required lifetime bounds\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `[T]` will meet its required lifetime bounds\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<T: 'static> ZeroCopyFrom<[T]> for &'static [T] {\n+   |       +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "affb4e8d04434d2a60042c7bd1830f4213af4d50", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,37 +2,45 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:19:10\n    |\n LL |     foo: &'static T\n-   |          ^^^^^^^^^^\n+   |          ^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the reference type `&'static T` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<T: 'static> {\n+   |             +++++++++\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-   |                                 ^^^^^^^^^^^^^^^^\n+   |                                 ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `K: 'a`...\n-   = note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+LL | impl<K: 'a> Nested<K> {\n+   |       ++++\n \n error[E0309]: the parameter type `M` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |                                    ^^^^^^^^^^^^^^^^\n+   |                                    ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `M: 'a`...\n-   = note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b + 'a>() {\n+   |                                                            ++++\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n-   |                   ^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `K: 'a`...\n-   = note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait X<K: 'a>: Sized {\n+   |          ++++\n \n error[E0309]: the parameter type `Self` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n@@ -47,10 +55,12 @@ error[E0309]: the parameter type `L` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |                      ^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `L: 'a`...\n-   = note: ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n+LL |     fn baz<'a, L: 'a, M: X<&'a Nested<L>>>() {\n+   |                 ++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "389f82e794be71289067ebbeac79ffb135dcbac1", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.rs?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -23,7 +23,6 @@ where\n // Here we get an error: we need `'a: 'b`.\n fn bar<'a, 'b>()\n //~^ ERROR cannot infer\n-//~| ERROR cannot infer\n where\n     <() as Project<'a, 'b>>::Item: Eq,\n {"}, {"sha": "5672837290cb18041b62d729d91ee32455807eb5", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -1,35 +1,3 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:24:1\n-   |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | | where\n-LL | |     <() as Project<'a, 'b>>::Item: Eq,\n-   | |______________________________________^\n-   |\n-note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:24:8\n-   |\n-LL | fn bar<'a, 'b>()\n-   |        ^^\n-note: ...but the lifetime must also be valid for the lifetime `'b` as defined here...\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:24:12\n-   |\n-LL | fn bar<'a, 'b>()\n-   |            ^^\n-note: ...so that the types are compatible\n-  --> $DIR/regions-normalize-in-where-clause-list.rs:24:1\n-   |\n-LL | / fn bar<'a, 'b>()\n-LL | |\n-LL | |\n-LL | | where\n-LL | |     <() as Project<'a, 'b>>::Item: Eq,\n-   | |______________________________________^\n-   = note: expected `Project<'a, 'b>`\n-              found `Project<'_, '_>`\n-\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n   --> $DIR/regions-normalize-in-where-clause-list.rs:24:4\n    |\n@@ -54,6 +22,6 @@ LL | fn bar<'a, 'b>()\n    = note: expected `Project<'a, 'b>`\n               found `Project<'_, '_>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0495`."}, {"sha": "0c388f5fe411b14d111d5d52634b51ef03826da9", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,15 +2,17 @@ error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/dont-infer-static.rs:6:10\n    |\n LL |     bar: Bar<U>\n-   |          ^^^^^^\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n    |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n-   = note: ...so that the type `U` will meet its required lifetime bounds...\n note: ...that is required by this bound\n   --> $DIR/dont-infer-static.rs:8:15\n    |\n LL | struct Bar<T: 'static> {\n    |               ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<U: 'static> {\n+   |             +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2c660b285009723961eadea6d1dc5f120a019de9", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,28 +2,34 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:17:18\n    |\n LL |     Ref1Variant1(RequireOutlives<'a, T>),\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | enum Ref1<'a, T: 'a> {\n+   |                ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:22:25\n    |\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n+LL | enum Ref2<'a, T: 'a> {\n+   |                ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:23\n    |\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>),\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'b`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n+LL | enum RefDouble<'a, 'b, T: 'b> {\n+   |                         ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "34ff1362cf32336d3d2dd1f441cbc848c6784129", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,24 +2,28 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:13:16\n    |\n LL |     type Out = &'a T;\n-   |                ^^^^^\n+   |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the reference type `&'a T` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for usize {\n+   |           ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:21:16\n    |\n LL |     type Out = RefOk<'a, T>;\n-   |                ^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds...\n note: ...that is required by this bound\n   --> $DIR/regions-struct-not-wf.rs:16:20\n    |\n LL | struct RefOk<'a, T:'a> {\n    |                    ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for u32 {\n+   |           ++++\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-struct-not-wf.rs:25:16"}, {"sha": "b9d4857a3efde0d57ab0c92a8657a27e86377e9b", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,10 +2,12 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-impl-associated-type-region.rs:10:16\n    |\n LL |     type Bar = &'a T;\n-   |                ^^^^^\n+   |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the reference type `&'a T` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Foo<'a> for T {\n+   |           ++++\n \n error: aborting due to previous error\n "}, {"sha": "73fbb9ca670b021cfb77b75010ea08c39b4a9353", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,19 +2,23 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:13:8\n    |\n LL |     x: fn() -> &'static T\n-   |        ^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the reference type `&'static T` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<T: 'static> {\n+   |             +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:18:8\n    |\n LL |     x: fn(&'static T)\n-   |        ^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the reference type `&'static T` does not outlive the data it points at\n+LL | struct Bar<T: 'static> {\n+   |             +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c3ad42dd5d5ac0b878d73dbafb76c8daf45230d6", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,10 +2,12 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-obj-type-static.rs:14:8\n    |\n LL |     x: dyn Object<&'static T>\n-   |        ^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the reference type `&'static T` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<T: 'static> {\n+   |             +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "4d4d8b2ab4d463e1d12e783828a001e6a1873c56", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=5bd8c960f5f7b07128ebdb12e7f788b1ba0a1902", "patch": "@@ -2,19 +2,23 @@ error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:16\n    |\n LL |     type Out = &'a fn(T);\n-   |                ^^^^^^^^^\n+   |                ^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for usize {\n+   |           ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:16\n    |\n LL |     type Out = &'a dyn Baz<T>;\n-   |                ^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n    |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-   = note: ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n+LL | impl<'a, T: 'a> Trait<'a, T> for u32 {\n+   |           ++++\n \n error: aborting due to 2 previous errors\n "}]}