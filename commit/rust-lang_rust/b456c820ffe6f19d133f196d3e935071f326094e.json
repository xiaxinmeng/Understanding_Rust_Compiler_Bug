{"sha": "b456c820ffe6f19d133f196d3e935071f326094e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NTZjODIwZmZlNmYxOWQxMzNmMTk2ZDNlOTM1MDcxZjMyNjA5NGU=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-08T19:19:47Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-09-13T13:31:50Z"}, "message": "Always validate HIR ID for TypeckTables\n\nPerformance shouldn't be impacted (see [1] for a perf run) and this\nshould allow us to catch more bugs, e.g. [2] and [3].\n\n[1]: https://github.com/rust-lang/rust/pull/64262\n[2]: https://github.com/rust-lang/rust/pull/64250\n[3]: https://github.com/rust-lang/rust/issues/57298", "tree": {"sha": "503e5f4e4942580f0ce2d48feec9cf37a6c231d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503e5f4e4942580f0ce2d48feec9cf37a6c231d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b456c820ffe6f19d133f196d3e935071f326094e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b456c820ffe6f19d133f196d3e935071f326094e", "html_url": "https://github.com/rust-lang/rust/commit/b456c820ffe6f19d133f196d3e935071f326094e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b456c820ffe6f19d133f196d3e935071f326094e/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab73b325b0e1288656f69ee24acb822fe91bc6a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab73b325b0e1288656f69ee24acb822fe91bc6a0", "html_url": "https://github.com/rust-lang/rust/commit/ab73b325b0e1288656f69ee24acb822fe91bc6a0"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "7366037c5eb96d449928dbfefbfcee6bc4c556a7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b456c820ffe6f19d133f196d3e935071f326094e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b456c820ffe6f19d133f196d3e935071f326094e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b456c820ffe6f19d133f196d3e935071f326094e", "patch": "@@ -205,26 +205,24 @@ pub struct LocalTableInContext<'a, V> {\n fn validate_hir_id_for_typeck_tables(local_id_root: Option<DefId>,\n                                      hir_id: hir::HirId,\n                                      mut_access: bool) {\n-    if cfg!(debug_assertions) {\n-        if let Some(local_id_root) = local_id_root {\n-            if hir_id.owner != local_id_root.index {\n-                ty::tls::with(|tcx| {\n-                    bug!(\"node {} with HirId::owner {:?} cannot be placed in \\\n-                          TypeckTables with local_id_root {:?}\",\n-                         tcx.hir().node_to_string(hir_id),\n-                         DefId::local(hir_id.owner),\n-                         local_id_root)\n-                });\n-            }\n-        } else {\n-            // We use \"Null Object\" TypeckTables in some of the analysis passes.\n-            // These are just expected to be empty and their `local_id_root` is\n-            // `None`. Therefore we cannot verify whether a given `HirId` would\n-            // be a valid key for the given table. Instead we make sure that\n-            // nobody tries to write to such a Null Object table.\n-            if mut_access {\n-                bug!(\"access to invalid TypeckTables\")\n-            }\n+    if let Some(local_id_root) = local_id_root {\n+        if hir_id.owner != local_id_root.index {\n+            ty::tls::with(|tcx| {\n+                bug!(\"node {} with HirId::owner {:?} cannot be placed in \\\n+                        TypeckTables with local_id_root {:?}\",\n+                        tcx.hir().node_to_string(hir_id),\n+                        DefId::local(hir_id.owner),\n+                        local_id_root)\n+            });\n+        }\n+    } else {\n+        // We use \"Null Object\" TypeckTables in some of the analysis passes.\n+        // These are just expected to be empty and their `local_id_root` is\n+        // `None`. Therefore we cannot verify whether a given `HirId` would\n+        // be a valid key for the given table. Instead we make sure that\n+        // nobody tries to write to such a Null Object table.\n+        if mut_access {\n+            bug!(\"access to invalid TypeckTables\")\n         }\n     }\n }"}]}