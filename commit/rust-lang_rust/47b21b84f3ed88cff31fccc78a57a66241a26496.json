{"sha": "47b21b84f3ed88cff31fccc78a57a66241a26496", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YjIxYjg0ZjNlZDg4Y2ZmMzFmY2NjNzhhNTdhNjYyNDFhMjY0OTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-05T18:11:50Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-05T18:11:50Z"}, "message": "Add PRIVATE_INTRA_DOC_LINKS to rustdoc special-casing\n\nThis is really starting to get out of hand. Rustdoc should instead allow\nall lints in the rustdoc lint group.", "tree": {"sha": "a3cba6d67227b696b4dd4db4aa88a9e9cb8f2531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3cba6d67227b696b4dd4db4aa88a9e9cb8f2531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b21b84f3ed88cff31fccc78a57a66241a26496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b21b84f3ed88cff31fccc78a57a66241a26496", "html_url": "https://github.com/rust-lang/rust/commit/47b21b84f3ed88cff31fccc78a57a66241a26496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b21b84f3ed88cff31fccc78a57a66241a26496/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed0cebea3d16d82f5517e17ab498b340001fe01", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed0cebea3d16d82f5517e17ab498b340001fe01", "html_url": "https://github.com/rust-lang/rust/commit/eed0cebea3d16d82f5517e17ab498b340001fe01"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "285a3bf8204bb8a97b2ea3e377a45034b1e00cbc", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47b21b84f3ed88cff31fccc78a57a66241a26496/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b21b84f3ed88cff31fccc78a57a66241a26496/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=47b21b84f3ed88cff31fccc78a57a66241a26496", "patch": "@@ -322,7 +322,8 @@ pub fn run_core(\n     let cpath = Some(input.clone());\n     let input = Input::File(input);\n \n-    let intra_link_resolution_failure_name = lint::builtin::BROKEN_INTRA_DOC_LINKS.name;\n+    let broken_intra_doc_links = lint::builtin::BROKEN_INTRA_DOC_LINKS.name;\n+    let private_intra_doc_links = lint::builtin::PRIVATE_INTRA_DOC_LINKS.name;\n     let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n     let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n     let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n@@ -335,7 +336,8 @@ pub fn run_core(\n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n     let lints_to_show = vec![\n-        intra_link_resolution_failure_name.to_owned(),\n+        broken_intra_doc_links.to_owned(),\n+        private_intra_doc_links.to_owned(),\n         missing_docs.to_owned(),\n         missing_doc_example.to_owned(),\n         private_doc_tests.to_owned(),\n@@ -347,9 +349,8 @@ pub fn run_core(\n     ];\n \n     let (lint_opts, lint_caps) = init_lints(lints_to_show, lint_opts, |lint| {\n-        if lint.name == intra_link_resolution_failure_name\n-            || lint.name == invalid_codeblock_attributes_name\n-        {\n+        // FIXME: why is this necessary?\n+        if lint.name == broken_intra_doc_links || lint.name == invalid_codeblock_attributes_name {\n             None\n         } else {\n             Some((lint.name_lower(), lint::Allow))"}]}