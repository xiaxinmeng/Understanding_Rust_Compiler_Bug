{"sha": "d12a358673b17ed74fe1a584b4cab66fe62e18d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMmEzNTg2NzNiMTdlZDc0ZmUxYTU4NGI0Y2FiNjZmZTYyZTE4ZDA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-24T01:55:21Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-24T12:35:12Z"}, "message": "use matches!() macro in more places", "tree": {"sha": "4e2431f555f0dd3fa5df51ac629470f8112c01cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e2431f555f0dd3fa5df51ac629470f8112c01cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12a358673b17ed74fe1a584b4cab66fe62e18d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12a358673b17ed74fe1a584b4cab66fe62e18d0", "html_url": "https://github.com/rust-lang/rust/commit/d12a358673b17ed74fe1a584b4cab66fe62e18d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12a358673b17ed74fe1a584b4cab66fe62e18d0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "html_url": "https://github.com/rust-lang/rust/commit/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74"}], "stats": {"total": 408, "additions": 138, "deletions": 270}, "files": [{"sha": "478e61dd121141be9278ac31a15c25fad51892bb", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -167,10 +167,7 @@ pub enum GenericArgs {\n \n impl GenericArgs {\n     pub fn is_angle_bracketed(&self) -> bool {\n-        match *self {\n-            AngleBracketed(..) => true,\n-            _ => false,\n-        }\n+        matches!(self, AngleBracketed(..))\n     }\n \n     pub fn span(&self) -> Span {\n@@ -629,10 +626,7 @@ impl Pat {\n \n     /// Is this a `..` pattern?\n     pub fn is_rest(&self) -> bool {\n-        match self.kind {\n-            PatKind::Rest => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, PatKind::Rest)\n     }\n }\n \n@@ -852,10 +846,7 @@ impl BinOpKind {\n         }\n     }\n     pub fn lazy(&self) -> bool {\n-        match *self {\n-            BinOpKind::And | BinOpKind::Or => true,\n-            _ => false,\n-        }\n+        matches!(self, BinOpKind::And | BinOpKind::Or)\n     }\n \n     pub fn is_comparison(&self) -> bool {\n@@ -963,17 +954,11 @@ impl Stmt {\n     }\n \n     pub fn is_item(&self) -> bool {\n-        match self.kind {\n-            StmtKind::Item(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, StmtKind::Item(_))\n     }\n \n     pub fn is_expr(&self) -> bool {\n-        match self.kind {\n-            StmtKind::Expr(_) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, StmtKind::Expr(_))\n     }\n }\n \n@@ -1652,26 +1637,17 @@ pub enum LitKind {\n impl LitKind {\n     /// Returns `true` if this literal is a string.\n     pub fn is_str(&self) -> bool {\n-        match *self {\n-            LitKind::Str(..) => true,\n-            _ => false,\n-        }\n+        matches!(self, LitKind::Str(..))\n     }\n \n     /// Returns `true` if this literal is byte literal string.\n     pub fn is_bytestr(&self) -> bool {\n-        match self {\n-            LitKind::ByteStr(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, LitKind::ByteStr(_))\n     }\n \n     /// Returns `true` if this is a numeric literal.\n     pub fn is_numeric(&self) -> bool {\n-        match *self {\n-            LitKind::Int(..) | LitKind::Float(..) => true,\n-            _ => false,\n-        }\n+        matches!(self, LitKind::Int(..) | LitKind::Float(..))\n     }\n \n     /// Returns `true` if this literal has no suffix.\n@@ -2237,10 +2213,7 @@ impl FnDecl {\n         self.inputs.get(0).map_or(false, Param::is_self)\n     }\n     pub fn c_variadic(&self) -> bool {\n-        self.inputs.last().map_or(false, |arg| match arg.ty.kind {\n-            TyKind::CVarArgs => true,\n-            _ => false,\n-        })\n+        self.inputs.last().map_or(false, |arg| matches!(arg.ty.kind, TyKind::CVarArgs))\n     }\n }\n "}, {"sha": "726ae5e51f7a668c3ccb5b45d2312ba9179295b2", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -234,10 +234,7 @@ impl MetaItem {\n     }\n \n     pub fn is_word(&self) -> bool {\n-        match self.kind {\n-            MetaItemKind::Word => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, MetaItemKind::Word)\n     }\n \n     pub fn has_name(&self, name: Symbol) -> bool {"}, {"sha": "cd1e444bcf72a37f8888535a415c4f589935d922", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 19, "deletions": 34, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -130,10 +130,7 @@ impl LitKind {\n     }\n \n     crate fn may_have_suffix(self) -> bool {\n-        match self {\n-            Integer | Float | Err => true,\n-            _ => false,\n-        }\n+        matches!(self, Integer | Float | Err)\n     }\n }\n \n@@ -305,10 +302,7 @@ impl TokenKind {\n     }\n \n     pub fn should_end_const_arg(&self) -> bool {\n-        match self {\n-            Gt | Ge | BinOp(Shr) | BinOpEq(Shr) => true,\n-            _ => false,\n-        }\n+        matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))\n     }\n }\n \n@@ -346,18 +340,21 @@ impl Token {\n     }\n \n     pub fn is_op(&self) -> bool {\n-        match self.kind {\n-            OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) | Ident(..)\n-            | Lifetime(..) | Interpolated(..) | Eof => false,\n-            _ => true,\n-        }\n+        !matches!(\n+            self.kind,\n+            OpenDelim(..)\n+                | CloseDelim(..)\n+                | Literal(..)\n+                | DocComment(..)\n+                | Ident(..)\n+                | Lifetime(..)\n+                | Interpolated(..)\n+                | Eof\n+        )\n     }\n \n     pub fn is_like_plus(&self) -> bool {\n-        match self.kind {\n-            BinOp(Plus) | BinOpEq(Plus) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))\n     }\n \n     /// Returns `true` if the token can appear at the start of an expression.\n@@ -379,13 +376,10 @@ impl Token {\n             ModSep                            | // global path\n             Lifetime(..)                      | // labeled loop\n             Pound                             => true, // expression attributes\n-            Interpolated(ref nt) => match **nt {\n-                NtLiteral(..) |\n+            Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |\n                 NtExpr(..)    |\n                 NtBlock(..)   |\n-                NtPath(..) => true,\n-                _ => false,\n-            },\n+                NtPath(..)),\n             _ => false,\n         }\n     }\n@@ -405,10 +399,7 @@ impl Token {\n             Lifetime(..)                | // lifetime bound in trait object\n             Lt | BinOp(Shl)             | // associated path\n             ModSep                      => true, // global path\n-            Interpolated(ref nt) => match **nt {\n-                NtTy(..) | NtPath(..) => true,\n-                _ => false,\n-            },\n+            Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),\n             _ => false,\n         }\n     }\n@@ -417,10 +408,7 @@ impl Token {\n     pub fn can_begin_const_arg(&self) -> bool {\n         match self.kind {\n             OpenDelim(Brace) => true,\n-            Interpolated(ref nt) => match **nt {\n-                NtExpr(..) | NtBlock(..) | NtLiteral(..) => true,\n-                _ => false,\n-            },\n+            Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),\n             _ => self.can_begin_literal_maybe_minus(),\n         }\n     }\n@@ -436,10 +424,7 @@ impl Token {\n \n     /// Returns `true` if the token is any literal.\n     pub fn is_lit(&self) -> bool {\n-        match self.kind {\n-            Literal(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, Literal(..))\n     }\n \n     /// Returns `true` if the token is any literal, a minus (which can prefix a literal,"}, {"sha": "90786520fe8025d5db38773f921d704e7fa80221", "filename": "compiler/rustc_ast/src/util/classify.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -12,14 +12,14 @@ use crate::ast;\n ///      |x| 5\n /// isn't parsed as (if true {...} else {...} | x) | 5\n pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n-    match e.kind {\n+    !matches!(\n+        e.kind,\n         ast::ExprKind::If(..)\n-        | ast::ExprKind::Match(..)\n-        | ast::ExprKind::Block(..)\n-        | ast::ExprKind::While(..)\n-        | ast::ExprKind::Loop(..)\n-        | ast::ExprKind::ForLoop(..)\n-        | ast::ExprKind::TryBlock(..) => false,\n-        _ => true,\n-    }\n+            | ast::ExprKind::Match(..)\n+            | ast::ExprKind::Block(..)\n+            | ast::ExprKind::While(..)\n+            | ast::ExprKind::Loop(..)\n+            | ast::ExprKind::ForLoop(..)\n+            | ast::ExprKind::TryBlock(..)\n+    )\n }"}, {"sha": "e0052b7604089e23dc2afccba271fbb6e165556b", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -178,10 +178,8 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n             }\n             rustc_lexer::TokenKind::BlockComment { doc_style, .. } => {\n                 if doc_style.is_none() {\n-                    let code_to_the_right = match text[pos + token.len..].chars().next() {\n-                        Some('\\r' | '\\n') => false,\n-                        _ => true,\n-                    };\n+                    let code_to_the_right =\n+                        !matches!(text[pos + token.len..].chars().next(), Some('\\r' | '\\n'));\n                     let style = match (code_to_the_left, code_to_the_right) {\n                         (_, true) => CommentStyle::Mixed,\n                         (false, false) => CommentStyle::Isolated,"}, {"sha": "ca1226b445d97beb94301349c1544660ea72cc1e", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -38,10 +38,9 @@ pub fn expand_deriving_clone(\n             | ItemKind::Enum(_, Generics { ref params, .. }) => {\n                 let container_id = cx.current_expansion.id.expn_data().parent;\n                 if cx.resolver.has_derive_copy(container_id)\n-                    && !params.iter().any(|param| match param.kind {\n-                        ast::GenericParamKind::Type { .. } => true,\n-                        _ => false,\n-                    })\n+                    && !params\n+                        .iter()\n+                        .any(|param| matches!(param.kind, ast::GenericParamKind::Type { .. }))\n                 {\n                     bounds = vec![];\n                     is_shallow = true;"}, {"sha": "e78d1368b357e5f0b1ff89fc34d9b71fc92bbea0", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -404,12 +404,10 @@ impl<'a> TraitDef<'a> {\n                 let has_no_type_params = match item.kind {\n                     ast::ItemKind::Struct(_, ref generics)\n                     | ast::ItemKind::Enum(_, ref generics)\n-                    | ast::ItemKind::Union(_, ref generics) => {\n-                        !generics.params.iter().any(|param| match param.kind {\n-                            ast::GenericParamKind::Type { .. } => true,\n-                            _ => false,\n-                        })\n-                    }\n+                    | ast::ItemKind::Union(_, ref generics) => !generics\n+                        .params\n+                        .iter()\n+                        .any(|param| matches!(param.kind, ast::GenericParamKind::Type { .. })),\n                     _ => unreachable!(),\n                 };\n                 let container_id = cx.current_expansion.id.expn_data().parent;\n@@ -868,7 +866,7 @@ impl<'a> MethodDef<'a> {\n                 Self_ if nonstatic => {\n                     self_args.push(arg_expr);\n                 }\n-                Ptr(ref ty, _) if (if let Self_ = **ty { true } else { false }) && nonstatic => {\n+                Ptr(ref ty, _) if matches!(**ty, Self_) && nonstatic => {\n                     self_args.push(cx.expr_deref(trait_.span, arg_expr))\n                 }\n                 _ => {"}, {"sha": "85ca1da6f1daa1a9eba11b5895de321657135a27", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -1044,10 +1044,7 @@ pub fn expand_preparsed_format_args(\n \n     let numbered_position_args = pieces.iter().any(|arg: &parse::Piece<'_>| match *arg {\n         parse::String(_) => false,\n-        parse::NextArgument(arg) => match arg.position {\n-            parse::Position::ArgumentIs(_) => true,\n-            _ => false,\n-        },\n+        parse::NextArgument(arg) => matches!(arg.position, parse::Position::ArgumentIs(_)),\n     });\n \n     cx.build_index_map();"}, {"sha": "0496c72cb0050dfd6816e34928b256a89155612d", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -580,10 +580,7 @@ pub mod printf {\n     }\n \n     fn is_flag(c: &char) -> bool {\n-        match c {\n-            '0' | '-' | '+' | ' ' | '#' | '\\'' => true,\n-            _ => false,\n-        }\n+        matches!(c, '0' | '-' | '+' | ' ' | '#' | '\\'')\n     }\n \n     #[cfg(test)]"}, {"sha": "d203b5bc5429e155c1d726a057a50f97702e2233", "filename": "compiler/rustc_builtin_macros/src/llvm_asm.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -87,9 +87,11 @@ fn parse_inline_asm<'a>(\n     // parsed as `llvm_asm!(z)` with `z = \"x\": y` which is type ascription.\n     let first_colon = tts\n         .trees()\n-        .position(|tt| match tt {\n-            tokenstream::TokenTree::Token(Token { kind: token::Colon | token::ModSep, .. }) => true,\n-            _ => false,\n+        .position(|tt| {\n+            matches!(\n+                tt,\n+                tokenstream::TokenTree::Token(Token { kind: token::Colon | token::ModSep, .. })\n+            )\n         })\n         .unwrap_or(tts.len());\n     let mut p = cx.new_parser_from_tts(tts.trees().skip(first_colon).collect());"}, {"sha": "7582d9805390ec24295c9792a35c76bb3c0f4797", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -256,10 +256,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         // we're just not interested in this item.\n         //\n         // If we find one, try to locate a `#[proc_macro_derive]` attribute on it.\n-        let is_fn = match item.kind {\n-            ast::ItemKind::Fn(..) => true,\n-            _ => false,\n-        };\n+        let is_fn = matches!(item.kind, ast::ItemKind::Fn(..));\n \n         let mut found_attr: Option<&'a ast::Attribute> = None;\n "}, {"sha": "57e49ba8d1a56031411972aeff8e772d2c659732", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -112,12 +112,12 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             };\n \n             // Allow uses of projections that are ZSTs or from scalar fields.\n-            let is_consume = match context {\n+            let is_consume = matches!(\n+                context,\n                 PlaceContext::NonMutatingUse(\n                     NonMutatingUseContext::Copy | NonMutatingUseContext::Move,\n-                ) => true,\n-                _ => false,\n-            };\n+                )\n+            );\n             if is_consume {\n                 let base_ty =\n                     mir::Place::ty_from(place_ref.local, proj_base, self.fx.mir, cx.tcx());"}, {"sha": "0958afa03082a22e1da445c7c44baa6e3eccbe3a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -132,10 +132,7 @@ impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n                 [segment]\n                     if segment\n                         .res\n-                        .map(|res| match res {\n-                            Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _) => true,\n-                            _ => false,\n-                        })\n+                        .map(|res| matches!(res, Res::SelfTy(_, _) | Res::Def(hir::def::DefKind::TyParam, _)))\n                         .unwrap_or(false) =>\n                 {\n                     self.types.push(path.span);"}, {"sha": "728dc2de370319897fee6eb3dff68a2e66940bd1", "filename": "compiler/rustc_infer/src/infer/free_regions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -93,10 +93,7 @@ impl<'tcx> FreeRegionMap<'tcx> {\n \n     /// True for free regions other than `'static`.\n     pub fn is_free(&self, r: Region<'_>) -> bool {\n-        match *r {\n-            ty::ReEarlyBound(_) | ty::ReFree(_) => true,\n-            _ => false,\n-        }\n+        matches!(r, ty::ReEarlyBound(_) | ty::ReFree(_))\n     }\n \n     /// True if `r` is a free region or static of the sort that this"}, {"sha": "ab34cda8cc18f514edec1adcd522ea453b05d3cd", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -393,10 +393,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 if self.expand_node(a_region, b_vid, b_data) {\n                     changes.push(b_vid);\n                 }\n-                match *b_data {\n-                    VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n-                    _ => true,\n-                }\n+                !matches!(b_data, VarValue::Value(ReStatic) | VarValue::ErrorValue)\n             });\n         }\n     }\n@@ -972,11 +969,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n \n             VerifyBound::IsEmpty => {\n-                if let ty::ReEmpty(_) = min {\n-                    true\n-                } else {\n-                    false\n-                }\n+                matches!(min, ty::ReEmpty(_))\n             }\n \n             VerifyBound::AnyBound(bs) => {"}, {"sha": "9d392c7b26bf7f7606bc8bbe96a786799e3c4dba", "filename": "compiler/rustc_middle/src/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fblocks.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -42,37 +42,25 @@ trait MaybeFnLike {\n \n impl MaybeFnLike for hir::Item<'_> {\n     fn is_fn_like(&self) -> bool {\n-        match self.kind {\n-            hir::ItemKind::Fn(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, hir::ItemKind::Fn(..))\n     }\n }\n \n impl MaybeFnLike for hir::ImplItem<'_> {\n     fn is_fn_like(&self) -> bool {\n-        match self.kind {\n-            hir::ImplItemKind::Fn(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, hir::ImplItemKind::Fn(..))\n     }\n }\n \n impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n-        match self.kind {\n-            hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)))\n     }\n }\n \n impl MaybeFnLike for hir::Expr<'_> {\n     fn is_fn_like(&self) -> bool {\n-        match self.kind {\n-            hir::ExprKind::Closure(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, hir::ExprKind::Closure(..))\n     }\n }\n "}, {"sha": "95096d0fb719c314c6d8e9df8e81ce450df39a16", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -118,17 +118,11 @@ impl CoverageKind {\n     }\n \n     pub fn is_counter(&self) -> bool {\n-        match self {\n-            Self::Counter { .. } => true,\n-            _ => false,\n-        }\n+        matches!(self, Self::Counter { .. })\n     }\n \n     pub fn is_expression(&self) -> bool {\n-        match self {\n-            Self::Expression { .. } => true,\n-            _ => false,\n-        }\n+        matches!(self, Self::Expression { .. })\n     }\n \n     pub fn is_unreachable(&self) -> bool {"}, {"sha": "fe20925b38798b246765626fed97bac695ed403a", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -647,14 +647,11 @@ impl<T> Trait<T> for X {\n         let current_method_ident = body_owner.and_then(|n| n.ident()).map(|i| i.name);\n \n         // We don't want to suggest calling an assoc fn in a scope where that isn't feasible.\n-        let callable_scope = match body_owner {\n-            Some(\n+        let callable_scope = matches!(body_owner, Some(\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(..), .. })\n                 | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n                 | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }),\n-            ) => true,\n-            _ => false,\n-        };\n+            ));\n         let impl_comparison = matches!(\n             cause_code,\n             ObligationCauseCode::CompareImplMethodObligation { .. }"}, {"sha": "4ce76409c6f19c93974126f3f3dad3e09ee4071a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -215,10 +215,7 @@ pub enum TyKind<'tcx> {\n impl TyKind<'tcx> {\n     #[inline]\n     pub fn is_primitive(&self) -> bool {\n-        match self {\n-            Bool | Char | Int(_) | Uint(_) | Float(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, Bool | Char | Int(_) | Uint(_) | Float(_))\n     }\n \n     /// Get the article (\"a\" or \"an\") to use with this type."}, {"sha": "09281799041eeb11ec761aede42467a7ebac201f", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -40,11 +40,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n \n-        let expr_is_block_or_scope = match expr.kind {\n-            ExprKind::Block { .. } => true,\n-            ExprKind::Scope { .. } => true,\n-            _ => false,\n-        };\n+        let expr_is_block_or_scope = matches!(expr.kind, ExprKind::Block { .. } | ExprKind::Scope { .. });\n \n         let schedule_drop = move |this: &mut Self| {\n             if let Some(drop_scope) = scope {"}, {"sha": "60a47ca12b868c4958880e84c5bb0ee0b13c84a6", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -501,10 +501,9 @@ impl<'a> Parser<'a> {\n     pub(super) fn expr_is_valid_const_arg(&self, expr: &P<rustc_ast::Expr>) -> bool {\n         match &expr.kind {\n             ast::ExprKind::Block(_, _) | ast::ExprKind::Lit(_) => true,\n-            ast::ExprKind::Unary(ast::UnOp::Neg, expr) => match &expr.kind {\n-                ast::ExprKind::Lit(_) => true,\n-                _ => false,\n-            },\n+            ast::ExprKind::Unary(ast::UnOp::Neg, expr) => {\n+                matches!(expr.kind, ast::ExprKind::Lit(_))\n+            }\n             // We can only resolve single-segment paths at the moment, because multi-segment paths\n             // require type-checking: see `visit_generic_arg` in `src/librustc_resolve/late.rs`.\n             ast::ExprKind::Path(None, path)"}, {"sha": "c4fb0cf5b28dc6bdb5bfc98eeee6ea5852034fbb", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -23,18 +23,18 @@ use rustc_span::symbol::{sym, Symbol};\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n-    match tcx.hir().find(hir_id) {\n+    matches!(\n+        tcx.hir().find(hir_id),\n         Some(\n             Node::Item(..)\n-            | Node::ImplItem(..)\n-            | Node::ForeignItem(..)\n-            | Node::TraitItem(..)\n-            | Node::Variant(..)\n-            | Node::AnonConst(..)\n-            | Node::Pat(..),\n-        ) => true,\n-        _ => false,\n-    }\n+                | Node::ImplItem(..)\n+                | Node::ForeignItem(..)\n+                | Node::TraitItem(..)\n+                | Node::Variant(..)\n+                | Node::AnonConst(..)\n+                | Node::Pat(..),\n+        )\n+    )\n }\n \n struct MarkSymbolVisitor<'tcx> {\n@@ -500,16 +500,16 @@ struct DeadVisitor<'tcx> {\n \n impl DeadVisitor<'tcx> {\n     fn should_warn_about_item(&mut self, item: &hir::Item<'_>) -> bool {\n-        let should_warn = match item.kind {\n+        let should_warn = matches!(\n+            item.kind,\n             hir::ItemKind::Static(..)\n-            | hir::ItemKind::Const(..)\n-            | hir::ItemKind::Fn(..)\n-            | hir::ItemKind::TyAlias(..)\n-            | hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..) => true,\n-            _ => false,\n-        };\n+                | hir::ItemKind::Const(..)\n+                | hir::ItemKind::Fn(..)\n+                | hir::ItemKind::TyAlias(..)\n+                | hir::ItemKind::Enum(..)\n+                | hir::ItemKind::Struct(..)\n+                | hir::ItemKind::Union(..)\n+        );\n         should_warn && !self.symbol_is_live(item.hir_id)\n     }\n "}, {"sha": "54e3cc69aea9af975a9b77bfcff19a34efbcecce", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -367,10 +367,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        let is_shorthand = match param.pat.kind {\n-            rustc_hir::PatKind::Struct(..) => true,\n-            _ => false,\n-        };\n+        let is_shorthand = matches!(param.pat.kind, rustc_hir::PatKind::Struct(..));\n         param.pat.each_binding(|_bm, hir_id, _x, ident| {\n             let var = if is_shorthand {\n                 Local(LocalInfo { id: hir_id, name: ident.name, is_shorthand: true })"}, {"sha": "b7c703f0e8f728db3971e803ad5c6850dbcc78b6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -1653,17 +1653,14 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         for missing in &self.missing_named_lifetime_spots {\n             match missing {\n                 MissingLifetimeSpot::Generics(generics) => {\n-                    let (span, sugg) = if let Some(param) =\n-                        generics.params.iter().find(|p| match p.kind {\n-                            hir::GenericParamKind::Type {\n-                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                                ..\n-                            } => false,\n-                            hir::GenericParamKind::Lifetime {\n-                                kind: hir::LifetimeParamKind::Elided,\n-                            } => false,\n-                            _ => true,\n-                        }) {\n+                    let (span, sugg) = if let Some(param) = generics.params.iter().find(|p| {\n+                        !matches!(p.kind, hir::GenericParamKind::Type {\n+                            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                            ..\n+                        } | hir::GenericParamKind::Lifetime {\n+                            kind: hir::LifetimeParamKind::Elided,\n+                        })\n+                    }) {\n                         (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n                     } else {\n                         suggests_in_band = true;"}, {"sha": "fc6a9a7f20972ffe1fd1c4695c202ebbcfee63f7", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -35,10 +35,7 @@ pub enum AutoTraitResult<A> {\n #[allow(dead_code)]\n impl<A> AutoTraitResult<A> {\n     fn is_auto(&self) -> bool {\n-        match *self {\n-            AutoTraitResult::PositiveImpl(_) | AutoTraitResult::NegativeImpl => true,\n-            _ => false,\n-        }\n+        matches!(self, AutoTraitResult::PositiveImpl(_) | AutoTraitResult::NegativeImpl)\n     }\n }\n \n@@ -601,10 +598,7 @@ impl AutoTraitFinder<'tcx> {\n     }\n \n     fn is_self_referential_projection(&self, p: ty::PolyProjectionPredicate<'_>) -> bool {\n-        match *p.ty().skip_binder().kind() {\n-            ty::Projection(proj) if proj == p.skip_binder().projection_ty => true,\n-            _ => false,\n-        }\n+        matches!(*p.ty().skip_binder().kind(), ty::Projection(proj) if proj == p.skip_binder().projection_ty)\n     }\n \n     fn evaluate_nested_obligations("}, {"sha": "99b96f609647687bb7c4da8155a3c3aa1372e177", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -193,10 +193,8 @@ fn overlap_within_probe(\n     let intercrate_ambiguity_causes = selcx.take_intercrate_ambiguity_causes();\n     debug!(\"overlap: intercrate_ambiguity_causes={:#?}\", intercrate_ambiguity_causes);\n \n-    let involves_placeholder = match selcx.infcx().region_constraints_added_in_snapshot(snapshot) {\n-        Some(true) => true,\n-        _ => false,\n-    };\n+    let involves_placeholder =\n+        matches!(selcx.infcx().region_constraints_added_in_snapshot(snapshot), Some(true));\n \n     Some(OverlapResult { impl_header, intercrate_ambiguity_causes, involves_placeholder })\n }"}, {"sha": "1d82e732907ba29ee31320c39891169f885aca0f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -861,10 +861,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let args_str = |arguments: &[ArgKind], other: &[ArgKind]| {\n             let arg_length = arguments.len();\n-            let distinct = match &other[..] {\n-                &[ArgKind::Tuple(..)] => true,\n-                _ => false,\n-            };\n+            let distinct = matches!(other, &[ArgKind::Tuple(..)]);\n             match (arg_length, arguments.get(0)) {\n                 (1, Some(&ArgKind::Tuple(_, ref fields))) => {\n                     format!(\"a single {}-tuple as argument\", fields.len())\n@@ -1201,12 +1198,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty, data.ty\n                 );\n \n-                let is_normalized_ty_expected = match &obligation.cause.code {\n-                    ObligationCauseCode::ItemObligation(_)\n+                let is_normalized_ty_expected = !matches!(obligation.cause.code, ObligationCauseCode::ItemObligation(_)\n                     | ObligationCauseCode::BindingObligation(_, _)\n-                    | ObligationCauseCode::ObjectCastObligation(_) => false,\n-                    _ => true,\n-                };\n+                    | ObligationCauseCode::ObjectCastObligation(_));\n \n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n                     is_normalized_ty_expected,"}, {"sha": "9c894e99a389a684b4106447e78cdc47f7d48205", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -323,9 +323,8 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // This works fairly well because trait matching  does not actually care about param-env\n     // TypeOutlives predicates - these are normally used by regionck.\n     let outlives_predicates: Vec<_> = predicates\n-        .drain_filter(|predicate| match predicate.skip_binders() {\n-            ty::PredicateAtom::TypeOutlives(..) => true,\n-            _ => false,\n+        .drain_filter(|predicate| {\n+            matches!(predicate.skip_binders(), ty::PredicateAtom::TypeOutlives(..))\n         })\n         .collect();\n "}, {"sha": "0feac036f00265a90a5d4093ad8fdd139f5cd137", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -526,18 +526,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         generics: &ty::Generics,\n     ) -> bool {\n         let explicit = !seg.infer_args;\n-        let impl_trait =\n-            generics.params.iter().any(|param| match param.kind {\n-                ty::GenericParamDefKind::Type {\n-                    synthetic:\n-                        Some(\n-                            hir::SyntheticTyParamKind::ImplTrait\n-                            | hir::SyntheticTyParamKind::FromAttr,\n-                        ),\n-                    ..\n-                } => true,\n-                _ => false,\n-            });\n+        let impl_trait = generics.params.iter().any(|param| {\n+            matches!(param.kind, ty::GenericParamDefKind::Type {\n+                synthetic:\n+                    Some(\n+                        hir::SyntheticTyParamKind::ImplTrait\n+                        | hir::SyntheticTyParamKind::FromAttr,\n+                    ),\n+                ..\n+            })\n+        });\n \n         if explicit && impl_trait {\n             let spans = seg"}, {"sha": "9c60e8933d4dbf4bf242a050f785c823a01a3714", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -543,10 +543,9 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n \n         if let Some(ty) = prohibit_opaque.break_value() {\n             let is_async = match item.kind {\n-                ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n-                    hir::OpaqueTyOrigin::AsyncFn => true,\n-                    _ => false,\n-                },\n+                ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n+                    matches!(origin, hir::OpaqueTyOrigin::AsyncFn)\n+                }\n                 _ => unreachable!(),\n             };\n \n@@ -1321,10 +1320,7 @@ pub fn check_enum<'tcx>(\n     }\n \n     if tcx.adt_def(def_id).repr.int.is_none() && tcx.features().arbitrary_enum_discriminant {\n-        let is_unit = |var: &hir::Variant<'_>| match var.data {\n-            hir::VariantData::Unit(..) => true,\n-            _ => false,\n-        };\n+        let is_unit = |var: &hir::Variant<'_>| matches!(var.data, hir::VariantData::Unit(..));\n \n         let has_disr = |var: &hir::Variant<'_>| var.disr_expr.is_some();\n         let has_non_units = vs.iter().any(|var| !is_unit(var));"}, {"sha": "3e60924d6fcf889b22af1fa83ec86956c3f8e9c6", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -325,10 +325,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.warn_if_unreachable(arg.hir_id, arg.span, \"expression\");\n                 }\n \n-                let is_closure = match arg.kind {\n-                    ExprKind::Closure(..) => true,\n-                    _ => false,\n-                };\n+                let is_closure = matches!(arg.kind, ExprKind::Closure(..));\n \n                 if is_closure != check_closures {\n                     continue;"}, {"sha": "eca6ce1ecdb63fd347c0804d3b1bad539c37ee5b", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -354,10 +354,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         hir_id: hir::HirId,\n     ) {\n         assert!(\n-            match fk {\n-                intravisit::FnKind::Closure(..) => true,\n-                _ => false,\n-            },\n+            matches!(fk, intravisit::FnKind::Closure(..)),\n             \"visit_fn invoked for something other than a closure\"\n         );\n "}, {"sha": "603643d094d952ac074d2a3a54fe4b7406adb8c8", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -156,10 +156,10 @@ crate fn placeholder_type_error(\n         if let Some(span) = span {\n             sugg.push((span, format!(\"<{}>\", type_name)));\n         }\n-    } else if let Some(arg) = generics.iter().find(|arg| match arg.name {\n-        hir::ParamName::Plain(Ident { name: kw::Underscore, .. }) => true,\n-        _ => false,\n-    }) {\n+    } else if let Some(arg) = generics\n+        .iter()\n+        .find(|arg| matches!(arg.name, hir::ParamName::Plain(Ident { name: kw::Underscore, .. })))\n+    {\n         // Account for `_` already present in cases like `struct S<_>(_);` and suggest\n         // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n         sugg.push((arg.span, (*type_name).to_string()));"}, {"sha": "3ce244e11bf453dd391db7aa0ae28ffb68c20eca", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12a358673b17ed74fe1a584b4cab66fe62e18d0/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=d12a358673b17ed74fe1a584b4cab66fe62e18d0", "patch": "@@ -595,10 +595,10 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         let upvars = self.tcx().upvars_mentioned(self.body_owner);\n \n         // For purposes of this function, generator and closures are equivalent.\n-        let body_owner_is_closure = match self.tcx().type_of(self.body_owner.to_def_id()).kind() {\n-            ty::Closure(..) | ty::Generator(..) => true,\n-            _ => false,\n-        };\n+        let body_owner_is_closure = matches!(\n+            self.tcx().type_of(self.body_owner.to_def_id()).kind(),\n+            ty::Closure(..) | ty::Generator(..)\n+        );\n \n         if let Some(min_captures) = self.mc.typeck_results.closure_min_captures.get(&closure_def_id)\n         {"}]}