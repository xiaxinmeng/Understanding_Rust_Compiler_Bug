{"sha": "f29000eba9ebd43dca5ae97bab39148cce9319bc", "node_id": "C_kwDOAAsO6NoAKGYyOTAwMGViYTllYmQ0M2RjYTVhZTk3YmFiMzkxNDhjY2U5MzE5YmM", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2023-02-03T09:04:15Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2023-02-03T09:04:15Z"}, "message": "Use new helper inside probe", "tree": {"sha": "8aa3018dd1e85f4103799e52ee213070ab670ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa3018dd1e85f4103799e52ee213070ab670ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29000eba9ebd43dca5ae97bab39148cce9319bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29000eba9ebd43dca5ae97bab39148cce9319bc", "html_url": "https://github.com/rust-lang/rust/commit/f29000eba9ebd43dca5ae97bab39148cce9319bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29000eba9ebd43dca5ae97bab39148cce9319bc/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/de50a86a12d6db76e7fec4c8f15e17ae199acb7e", "html_url": "https://github.com/rust-lang/rust/commit/de50a86a12d6db76e7fec4c8f15e17ae199acb7e"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "9f62f686af647f2c1a3f6a314954e89dbd804c81", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f29000eba9ebd43dca5ae97bab39148cce9319bc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29000eba9ebd43dca5ae97bab39148cce9319bc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=f29000eba9ebd43dca5ae97bab39148cce9319bc", "patch": "@@ -587,12 +587,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n         let discriminant = goal.predicate.self_ty().discriminant_ty(ecx.tcx());\n-        let nested_goals = ecx.infcx.eq(\n-            goal.param_env,\n-            goal.predicate.term.ty().expect(\"expected ty goal\"),\n-            discriminant,\n-        )?;\n-        ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+        ecx.infcx\n+            .probe(|_| ecx.eq_term_and_make_canonical_response(goal, Certainty::Yes, discriminant))\n     }\n }\n "}]}