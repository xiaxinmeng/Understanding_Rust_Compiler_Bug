{"sha": "7831fee9f8c4409c80380c6ebed52ae267971438", "node_id": "C_kwDOAAsO6NoAKDc4MzFmZWU5ZjhjNDQwOWM4MDM4MGM2ZWJlZDUyYWUyNjc5NzE0Mzg", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-05-30T17:00:44Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T02:44:50Z"}, "message": "Fix check issue\n\nClean up tidy checks", "tree": {"sha": "f98758403f5b92934cf50d72fe931304fa6325a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f98758403f5b92934cf50d72fe931304fa6325a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7831fee9f8c4409c80380c6ebed52ae267971438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7831fee9f8c4409c80380c6ebed52ae267971438", "html_url": "https://github.com/rust-lang/rust/commit/7831fee9f8c4409c80380c6ebed52ae267971438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7831fee9f8c4409c80380c6ebed52ae267971438/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b3f82ad0321b8f2e2630b74bbc526ffb8fa5bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3f82ad0321b8f2e2630b74bbc526ffb8fa5bda", "html_url": "https://github.com/rust-lang/rust/commit/4b3f82ad0321b8f2e2630b74bbc526ffb8fa5bda"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "e83e085dc1169eafb55aa8e4ebbfc7ca15279cf4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7831fee9f8c4409c80380c6ebed52ae267971438", "patch": "@@ -2466,7 +2466,7 @@ fn render_call_locations(\n     let filtered_locations: Vec<_> = call_locations\n         .iter()\n         .filter_map(|(file, locs)| {\n-            // TODO(wcrichto): file I/O should be cached\n+            // FIXME(wcrichto): file I/O should be cached\n             let mut contents = match fs::read_to_string(&file) {\n                 Ok(contents) => contents,\n                 Err(e) => {"}, {"sha": "212362b94e00cbaf29efd3a25bf8ca658e6a7f2a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7831fee9f8c4409c80380c6ebed52ae267971438", "patch": "@@ -1973,7 +1973,8 @@ details.undocumented[open] > summary::before {\n \n /* This part is for the new \"examples\" components */\n \n-.scraped-example:not(.expanded) .code-wrapper pre.line-numbers, .scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n+.scraped-example:not(.expanded) .code-wrapper pre.line-numbers,\n+.scraped-example:not(.expanded) .code-wrapper .example-wrap pre.rust {\n \toverflow: hidden;\n \theight: 240px;\n }"}, {"sha": "c6671623c2340ee4de8c39bdccec0c3775897fe9", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=7831fee9f8c4409c80380c6ebed52ae267971438", "patch": "@@ -1019,11 +1019,14 @@ function hideThemeButtonState() {\n         var output = [];\n \n         while (locs.length > 0 && lineIndex < codeLines.length) {\n-            var lineLength = codeLines[lineIndex].length + 1; // +1 here and later is due to omitted \\n\n+            // +1 here and later is due to omitted \\n\n+            var lineLength = codeLines[lineIndex].length + 1;\n             while (locs.length > 0 && totalOffset + lineLength > locs[0][0]) {\n                 var endIndex = lineIndex;\n                 var charsRemaining = locs[0][1] - totalOffset;\n-                while (endIndex < codeLines.length && charsRemaining > codeLines[endIndex].length + 1) {\n+                while (endIndex < codeLines.length &&\n+                       charsRemaining > codeLines[endIndex].length + 1)\n+                {\n                     charsRemaining -= codeLines[endIndex].length + 1;\n                     endIndex += 1;\n                 }\n@@ -1065,7 +1068,8 @@ function hideThemeButtonState() {\n         var wrapper = elt.querySelector(\".code-wrapper\");\n         var halfHeight = wrapper.offsetHeight / 2;\n         var lines = elt.querySelector('.line-numbers');\n-        var offsetMid = (lines.children[loc.from[0]].offsetTop + lines.children[loc.to[0]].offsetTop) / 2;\n+        var offsetMid = (lines.children[loc.from[0]].offsetTop\n+                         + lines.children[loc.to[0]].offsetTop) / 2;\n         var scrollOffset = offsetMid - halfHeight;\n         lines.scrollTo(0, scrollOffset);\n         elt.querySelector(\".rust\").scrollTo(0, scrollOffset);\n@@ -1093,7 +1097,9 @@ function hideThemeButtonState() {\n                 codeLines[loc.from[0]],\n                 litHtml[loc.from[0]],\n                 loc.from[1],\n-                '<span class=\"highlight\" data-loc=\"' + JSON.stringify(loc).replace(/\"/g, \"&quot;\") + '\">');\n+                '<span class=\"highlight\" data-loc=\"' +\n+                    JSON.stringify(loc).replace(/\"/g, \"&quot;\") +\n+                    '\">');\n         }, true); // do this backwards to avoid shifting later offsets\n         litParent.innerHTML = litHtml.join('\\n');\n \n@@ -1131,7 +1137,9 @@ function hideThemeButtonState() {\n \n     function updateScrapedExamples() {\n         onEach(document.getElementsByClassName('scraped-example-list'), function (exampleSet) {\n-            updateScrapedExample(exampleSet.querySelector(\".small-section-header + .scraped-example\"));\n+            updateScrapedExample(\n+                exampleSet.querySelector(\".small-section-header + .scraped-example\")\n+            );\n         });\n \n         onEach(document.getElementsByClassName(\"more-scraped-examples\"), function (more) {\n@@ -1155,7 +1163,8 @@ function hideThemeButtonState() {\n                     this.querySelector('.inner').innerHTML = labelForToggleButton(false);\n                     if (!examples_init) {\n                         examples_init = true;\n-                        onEach(more.getElementsByClassName('scraped-example'), updateScrapedExample);\n+                        onEach(more.getElementsByClassName('scraped-example'),\n+                               updateScrapedExample);\n                     }\n                 } else {\n                     addClass(this, \"collapsed\");"}, {"sha": "ed7f656f4068f00f46b97df2499f347ca6f79601", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7831fee9f8c4409c80380c6ebed52ae267971438", "patch": "@@ -620,7 +620,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         unstable(\"scrape-examples\", |o| o.optmulti(\"\", \"scrape-examples\", \"\", \"\")),\n-        unstable(\"repository-url\", |o| o.optopt(\"\", \"repository-url\", \"\", \"TODO\")),\n+        unstable(\"repository-url\", |o| o.optopt(\"\", \"repository-url\", \"\", \"\")),\n     ]\n }\n "}, {"sha": "bc1626977b3e1326593316cdbf7aa33cf963ecc2", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7831fee9f8c4409c80380c6ebed52ae267971438/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=7831fee9f8c4409c80380c6ebed52ae267971438", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{\n };\n use rustc_interface::interface;\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::{TyCtxt, TyKind};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n crate type FnCallLocations = FxHashMap<String, Vec<(usize, usize)>>;\n@@ -60,7 +60,7 @@ where\n         };\n \n         // Save call site if the function resovles to a concrete definition\n-        if let TyKind::FnDef(def_id, _) = ty.kind() {\n+        if let ty::FnDef(def_id, _) = ty.kind() {\n             if self.tcx.crate_name(def_id.krate) == self.krate {\n                 let key = self.tcx.def_path(*def_id).to_string_no_crate_verbose();\n                 let entries = self.calls.entry(key).or_insert_with(FxHashMap::default);\n@@ -107,16 +107,16 @@ impl rustc_driver::Callbacks for Callbacks {\n /// * `krate` is the name of the crate being documented.\n pub fn scrape(examples: &[String], krate: &str) -> interface::Result<AllCallLocations> {\n     // Scrape each crate in parallel\n-    // TODO(wcrichto): do we need optional support for no rayon?\n+    // FIXME(wcrichto): do we need optional support for no rayon?\n     let maps = examples\n         .par_iter()\n         .map(|example| {\n-            // TODO(wcrichto): is there a more robust way to get arguments than split(\" \")?\n+            // FIXME(wcrichto): is there a more robust way to get arguments than split(\" \")?\n             let mut args = example.split(\" \").map(|s| s.to_owned()).collect::<Vec<_>>();\n             let file_name = args[0].clone();\n             args.insert(0, \"_\".to_string());\n \n-            // TODO(wcrichto): is there any setup / cleanup that needs to be performed\n+            // FIXME(wcrichto): is there any setup / cleanup that needs to be performed\n             // here upon the invocation of rustc_driver?\n             debug!(\"Scraping examples from krate {} with args:\\n{:?}\", krate, args);\n             let mut callbacks ="}]}