{"sha": "7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "node_id": "C_kwDOAAsO6NoAKDdkODJjYWRkOTdhY2M2Njk5M2I2OTMwNGM1YTFhMDRlZjdkMWZhMzY", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-10-05T00:02:13Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-10-24T18:40:07Z"}, "message": "Make PROC_MACRO_DERIVE_RESOLUTION_FALLBACK a hard error", "tree": {"sha": "0e738201ac87a27c98781e6cf5f0670839260a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e738201ac87a27c98781e6cf5f0670839260a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmNW3AcACgkQtAh+UQ6Y\nsWRXLhAAt5LYy0beNe2sKgHyczHohVIwn4678e2o6Vh2FFnFssgbi0aw0hEHsnFp\n0brPyTsttleYsp4aKni58w/zyPu8tIVRU6ejzXMUFZcXuA8gTRmtjgEWfpmpfZUo\nuBBFBrbNllE9cOz3P/juNkWuQ4ruzXc9gowt3IetHQ6d2Im8cQBZ29p+u+Uezp/f\no0/x7ben5HmJmcnNYrUVI8NMfgcieTFTIgF7C2Xkyb8lo/37PtLwOLjnLArwppQZ\nYH1dzkVuI6aETNw/fN8ja1A04nw9eGNSl0KZiiXcckEDBTTTv0AOSlWkQ1fGrAkz\njUquOShwkgxoK/ORa5rp/mCxJWHb4rfp28EeXyzYYoWNUKs1qVyOAJg0yYrRYIJ/\n1j88Udao8husXOqoqsjP8lP2IVSpMvcGOQFxVp3LuRRfwb26hEt0JNWDsEd0siH8\nryhLQElyyCc6F4yHG4AcKbugywVnGIL0QueSOqN7jkZHoubuZz3tsSesRnRD3GgP\nJ//q95CeHMIPLrTiJUQkISRoX7PY264R1kxX/MmVBrhTeyTo6CicHlph6QzxOWVP\nI+BLT480ph/RuReBqI7k+HEtkVgzy0ILq6TbpBP1Tngjzj5KOD289JzEfUxSpmK7\nMv4Jy+crEQTD3UWK91bHZQyrlsmuS+tbgtenrvnV3e5RVTtDAD0=\n=Zr5B\n-----END PGP SIGNATURE-----", "payload": "tree 0e738201ac87a27c98781e6cf5f0670839260a11\nparent 1481fd964bac3c750c7e1b21206fdaa60346c456\nauthor Aaron Hill <aa1ronham@gmail.com> 1664928133 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1666636807 -0500\n\nMake PROC_MACRO_DERIVE_RESOLUTION_FALLBACK a hard error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "html_url": "https://github.com/rust-lang/rust/commit/7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1481fd964bac3c750c7e1b21206fdaa60346c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/1481fd964bac3c750c7e1b21206fdaa60346c456", "html_url": "https://github.com/rust-lang/rust/commit/1481fd964bac3c750c7e1b21206fdaa60346c456"}], "stats": {"total": 287, "additions": 49, "deletions": 238}, "files": [{"sha": "389f3ccf72acf3ea1b8d22dd16e41290890045b7", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "patch": "@@ -1982,73 +1982,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    /// The `proc_macro_derive_resolution_fallback` lint detects proc macro\n-    /// derives using inaccessible names from parent modules.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,ignore (proc-macro)\n-    /// // foo.rs\n-    /// #![crate_type = \"proc-macro\"]\n-    ///\n-    /// extern crate proc_macro;\n-    ///\n-    /// use proc_macro::*;\n-    ///\n-    /// #[proc_macro_derive(Foo)]\n-    /// pub fn foo1(a: TokenStream) -> TokenStream {\n-    ///     drop(a);\n-    ///     \"mod __bar { static mut BAR: Option<Something> = None; }\".parse().unwrap()\n-    /// }\n-    /// ```\n-    ///\n-    /// ```rust,ignore (needs-dependency)\n-    /// // bar.rs\n-    /// #[macro_use]\n-    /// extern crate foo;\n-    ///\n-    /// struct Something;\n-    ///\n-    /// #[derive(Foo)]\n-    /// struct Another;\n-    ///\n-    /// fn main() {}\n-    /// ```\n-    ///\n-    /// This will produce:\n-    ///\n-    /// ```text\n-    /// warning: cannot find type `Something` in this scope\n-    ///  --> src/main.rs:8:10\n-    ///   |\n-    /// 8 | #[derive(Foo)]\n-    ///   |          ^^^ names from parent modules are not accessible without an explicit import\n-    ///   |\n-    ///   = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n-    ///   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-    ///   = note: for more information, see issue #50504 <https://github.com/rust-lang/rust/issues/50504>\n-    /// ```\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// If a proc-macro generates a module, the compiler unintentionally\n-    /// allowed items in that module to refer to items in the crate root\n-    /// without importing them. This is a [future-incompatible] lint to\n-    /// transition this to a hard error in the future. See [issue #50504] for\n-    /// more details.\n-    ///\n-    /// [issue #50504]: https://github.com/rust-lang/rust/issues/50504\n-    /// [future-incompatible]: ../index.md#future-incompatible-lints\n-    pub PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-    Deny,\n-    \"detects proc macro derives using inaccessible names from parent modules\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #83583 <https://github.com/rust-lang/rust/issues/83583>\",\n-        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n-    };\n-}\n-\n declare_lint! {\n     /// The `macro_use_extern_crate` lint detects the use of the\n     /// [`macro_use` attribute].\n@@ -3287,7 +3220,6 @@ declare_lint_pass! {\n         UNSTABLE_NAME_COLLISIONS,\n         IRREFUTABLE_LET_PATTERNS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n-        PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n         ILL_FORMED_ATTRIBUTE_INPUT,"}, {"sha": "5e4d88b9fdcad91f06f08c0f431b936434a67e8f", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "patch": "@@ -1186,7 +1186,7 @@ impl<'a> Resolver<'a> {\n                     let root_module = this.resolve_crate_root(root_ident);\n                     this.add_module_candidates(root_module, &mut suggestions, filter_fn, None);\n                 }\n-                Scope::Module(module, _) => {\n+                Scope::Module(module) => {\n                     this.add_module_candidates(module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::MacroUsePrelude => {"}, {"sha": "a24ee7db00843e459f54868bc60407e7aa433b14", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 10, "deletions": 65, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "patch": "@@ -1,11 +1,9 @@\n-use rustc_ast::{self as ast, NodeId};\n+use rustc_ast as ast;\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{DefKind, Namespace, NonMacroAttrKind, PartialRes, PerNS};\n use rustc_hir::PrimTy;\n use rustc_middle::bug;\n use rustc_middle::ty;\n-use rustc_session::lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK;\n-use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext};\n@@ -101,7 +99,7 @@ impl<'a> Resolver<'a> {\n         };\n         let mut scope = match ns {\n             _ if is_absolute_path => Scope::CrateRoot,\n-            TypeNS | ValueNS => Scope::Module(module, None),\n+            TypeNS | ValueNS => Scope::Module(module),\n             MacroNS => Scope::DeriveHelpers(parent_scope.expansion),\n         };\n         let mut ctxt = ctxt.normalize_to_macros_2_0();\n@@ -165,7 +163,7 @@ impl<'a> Resolver<'a> {\n                     MacroRulesScope::Invocation(invoc_id) => {\n                         Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)\n                     }\n-                    MacroRulesScope::Empty => Scope::Module(module, None),\n+                    MacroRulesScope::Empty => Scope::Module(module),\n                 },\n                 Scope::CrateRoot => match ns {\n                     TypeNS => {\n@@ -174,16 +172,10 @@ impl<'a> Resolver<'a> {\n                     }\n                     ValueNS | MacroNS => break,\n                 },\n-                Scope::Module(module, prev_lint_id) => {\n+                Scope::Module(module) => {\n                     use_prelude = !module.no_implicit_prelude;\n-                    let derive_fallback_lint_id = match scope_set {\n-                        ScopeSet::Late(.., lint_id) => lint_id,\n-                        _ => None,\n-                    };\n-                    match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {\n-                        Some((parent_module, lint_id)) => {\n-                            Scope::Module(parent_module, lint_id.or(prev_lint_id))\n-                        }\n+                    match self.hygienic_lexical_parent(module, &mut ctxt) {\n+                        Some(parent_module) => Scope::Module(parent_module),\n                         None => {\n                             ctxt.adjust(ExpnId::root());\n                             match ns {\n@@ -215,45 +207,13 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         module: Module<'a>,\n         ctxt: &mut SyntaxContext,\n-        derive_fallback_lint_id: Option<NodeId>,\n-    ) -> Option<(Module<'a>, Option<NodeId>)> {\n+    ) -> Option<Module<'a>> {\n         if !module.expansion.outer_expn_is_descendant_of(*ctxt) {\n-            return Some((self.expn_def_scope(ctxt.remove_mark()), None));\n+            return Some(self.expn_def_scope(ctxt.remove_mark()));\n         }\n \n         if let ModuleKind::Block = module.kind {\n-            return Some((module.parent.unwrap().nearest_item_scope(), None));\n-        }\n-\n-        // We need to support the next case under a deprecation warning\n-        // ```\n-        // struct MyStruct;\n-        // ---- begin: this comes from a proc macro derive\n-        // mod implementation_details {\n-        //     // Note that `MyStruct` is not in scope here.\n-        //     impl SomeTrait for MyStruct { ... }\n-        // }\n-        // ---- end\n-        // ```\n-        // So we have to fall back to the module's parent during lexical resolution in this case.\n-        if derive_fallback_lint_id.is_some() {\n-            if let Some(parent) = module.parent {\n-                // Inner module is inside the macro, parent module is outside of the macro.\n-                if module.expansion != parent.expansion\n-                    && module.expansion.is_descendant_of(parent.expansion)\n-                {\n-                    // The macro is a proc macro derive\n-                    if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n-                        let ext = self.get_macro_by_def_id(def_id).ext;\n-                        if ext.builtin_name.is_none()\n-                            && ext.macro_kind() == MacroKind::Derive\n-                            && parent.expansion.outer_expn_is_descendant_of(*ctxt)\n-                        {\n-                            return Some((parent, derive_fallback_lint_id));\n-                        }\n-                    }\n-                }\n-            }\n+            return Some(module.parent.unwrap().nearest_item_scope());\n         }\n \n         None\n@@ -510,7 +470,7 @@ impl<'a> Resolver<'a> {\n                             Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                         }\n                     }\n-                    Scope::Module(module, derive_fallback_lint_id) => {\n+                    Scope::Module(module) => {\n                         let adjusted_parent_scope = &ParentScope { module, ..*parent_scope };\n                         let binding = this.resolve_ident_in_module_unadjusted_ext(\n                             ModuleOrUniformRoot::Module(module),\n@@ -523,21 +483,6 @@ impl<'a> Resolver<'a> {\n                         );\n                         match binding {\n                             Ok(binding) => {\n-                                if let Some(lint_id) = derive_fallback_lint_id {\n-                                    this.lint_buffer.buffer_lint_with_diagnostic(\n-                                        PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-                                        lint_id,\n-                                        orig_ident.span,\n-                                        &format!(\n-                                            \"cannot find {} `{}` in this scope\",\n-                                            ns.descr(),\n-                                            ident\n-                                        ),\n-                                        BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(\n-                                            orig_ident.span,\n-                                        ),\n-                                    );\n-                                }\n                                 let misc_flags = if ptr::eq(module, this.graph_root) {\n                                     Flags::MISC_SUGGEST_CRATE\n                                 } else if module.is_normal() {"}, {"sha": "cf008dabacf41a18abf31e82c8bd41774ff665b1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "patch": "@@ -102,9 +102,7 @@ enum Scope<'a> {\n     DeriveHelpersCompat,\n     MacroRules(MacroRulesScopeRef<'a>),\n     CrateRoot,\n-    // The node ID is for reporting the `PROC_MACRO_DERIVE_RESOLUTION_FALLBACK`\n-    // lint if it should be reported.\n-    Module(Module<'a>, Option<NodeId>),\n+    Module(Module<'a>),\n     MacroUsePrelude,\n     BuiltinAttrs,\n     ExternPrelude,\n@@ -1551,7 +1549,7 @@ impl<'a> Resolver<'a> {\n \n         self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {\n             match scope {\n-                Scope::Module(module, _) => {\n+                Scope::Module(module) => {\n                     this.traits_in_module(module, assoc_item, &mut found_traits);\n                 }\n                 Scope::StdLibPrelude => {"}, {"sha": "9eea630c310ecb1fc17900e7744332b240d4291b", "filename": "src/test/ui/proc-macro/generate-mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs?ref=7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "patch": "@@ -15,19 +15,16 @@ struct S;\n \n #[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n                                      //~| ERROR cannot find type `OuterDerive` in this scope\n-                                     //~| WARN this was previously accepted\n-                                     //~| WARN this was previously accepted\n struct Z;\n \n fn inner_block() {\n     #[derive(generate_mod::CheckDerive)] //~ ERROR cannot find type `FromOutside` in this scope\n                                         //~| ERROR cannot find type `OuterDerive` in this scope\n-                                        //~| WARN this was previously accepted\n-                                        //~| WARN this was previously accepted\n     struct InnerZ;\n }\n \n-#[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n+#[derive(generate_mod::CheckDeriveLint)] //~  ERROR cannot find type `OuterDeriveLint` in this scope\n+                                         //~| ERROR cannot find type `FromOutside` in this scope\n struct W;\n \n fn main() {}"}, {"sha": "64042ca0ecdea1e58a2541285084d901fce7b7c5", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 34, "deletions": 95, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d82cadd97acc66993b69304c5a1a04ef7d1fa36/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=7d82cadd97acc66993b69304c5a1a04ef7d1fa36", "patch": "@@ -38,127 +38,66 @@ LL | #[generate_mod::check_attr]\n            OuterAttr\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: cannot find type `FromOutside` in this scope\n+error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: consider importing this struct:\n+           FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: cannot find type `OuterDerive` in this scope\n+error[E0412]: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n    |\n LL | #[derive(generate_mod::CheckDerive)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: cannot find type `FromOutside` in this scope\n-  --> $DIR/generate-mod.rs:23:14\n-   |\n-LL |     #[derive(generate_mod::CheckDerive)]\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n+   = note: consider importing this struct:\n+           OuterDerive\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: cannot find type `OuterDerive` in this scope\n-  --> $DIR/generate-mod.rs:23:14\n+error[E0412]: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:21:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 8 previous errors\n-\n-For more information about this error, try `rustc --explain E0412`.\n-Future incompatibility report: Future breakage diagnostic:\n-error: cannot find type `FromOutside` in this scope\n-  --> $DIR/generate-mod.rs:16:10\n-   |\n-LL | #[derive(generate_mod::CheckDerive)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n-   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-error: cannot find type `OuterDerive` in this scope\n-  --> $DIR/generate-mod.rs:16:10\n-   |\n-LL | #[derive(generate_mod::CheckDerive)]\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: consider importing this struct:\n+           FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage diagnostic:\n-error: cannot find type `FromOutside` in this scope\n-  --> $DIR/generate-mod.rs:23:14\n+error[E0412]: cannot find type `OuterDerive` in this scope\n+  --> $DIR/generate-mod.rs:21:14\n    |\n LL |     #[derive(generate_mod::CheckDerive)]\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n+   = note: consider importing this struct:\n+           OuterDerive\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage diagnostic:\n-error: cannot find type `OuterDerive` in this scope\n-  --> $DIR/generate-mod.rs:23:14\n+error[E0412]: cannot find type `FromOutside` in this scope\n+  --> $DIR/generate-mod.rs:26:10\n    |\n-LL |     #[derive(generate_mod::CheckDerive)]\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+LL | #[derive(generate_mod::CheckDeriveLint)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: `#[deny(proc_macro_derive_resolution_fallback)]` on by default\n-   = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: consider importing this struct:\n+           FromOutside\n+   = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage diagnostic:\n-warning: cannot find type `FromOutside` in this scope\n-  --> $DIR/generate-mod.rs:30:10\n+error[E0412]: cannot find type `OuterDeriveLint` in this scope\n+  --> $DIR/generate-mod.rs:26:10\n    |\n-LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n+LL | #[derive(generate_mod::CheckDeriveLint)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-note: the lint level is defined here\n-  --> $DIR/generate-mod.rs:30:10\n-   |\n-LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: consider importing this struct:\n+           OuterDeriveLint\n+   = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage diagnostic:\n-warning: cannot find type `OuterDeriveLint` in this scope\n-  --> $DIR/generate-mod.rs:30:10\n-   |\n-LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ names from parent modules are not accessible without an explicit import\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-note: the lint level is defined here\n-  --> $DIR/generate-mod.rs:30:10\n-   |\n-LL | #[derive(generate_mod::CheckDeriveLint)] // OK, lint is suppressed\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n+error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}]}