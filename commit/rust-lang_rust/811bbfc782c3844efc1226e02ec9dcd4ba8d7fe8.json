{"sha": "811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMWJiZmM3ODJjMzg0NGVmYzEyMjZlMDJlYzlkY2Q0YmE4ZDdmZTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-20T12:11:18Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:06:54Z"}, "message": "rustc: de-@ ty::ParamBounds.", "tree": {"sha": "52c48ed9ce49607ba98fdf2e5774266c78e1cc8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c48ed9ce49607ba98fdf2e5774266c78e1cc8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "html_url": "https://github.com/rust-lang/rust/commit/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a76ac320c763bb10069e90e91058cf96ca5aab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a76ac320c763bb10069e90e91058cf96ca5aab7", "html_url": "https://github.com/rust-lang/rust/commit/1a76ac320c763bb10069e90e91058cf96ca5aab7"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "cc2d76d936ff051a85cdc40936e2cf1f92958bab", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "patch": "@@ -18,6 +18,7 @@\n \n use middle::ty;\n \n+use std::rc::Rc;\n use std::str;\n use std::strbuf::StrBuf;\n use std::uint;\n@@ -563,7 +564,7 @@ fn parse_type_param_def(st: &mut PState, conv: conv_did) -> ty::TypeParameterDef\n     ty::TypeParameterDef {\n         ident: parse_ident(st, ':'),\n         def_id: parse_def(st, NominalType, |x,y| conv(x,y)),\n-        bounds: @parse_bounds(st, |x,y| conv(x,y)),\n+        bounds: Rc::new(parse_bounds(st, |x,y| conv(x,y))),\n         default: parse_opt(st, |st| parse_ty(st, |x,y| conv(x,y)))\n     }\n }"}, {"sha": "46e03bf8997c0d9118b407f666e0e126388f3859", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "patch": "@@ -376,6 +376,6 @@ fn enc_bounds(w: &mut MemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n \n pub fn enc_type_param_def(w: &mut MemWriter, cx: &ctxt, v: &ty::TypeParameterDef) {\n     mywrite!(w, \"{}:{}|\", token::get_ident(v.ident), (cx.ds)(v.def_id));\n-    enc_bounds(w, cx, v.bounds);\n+    enc_bounds(w, cx, &*v.bounds);\n     enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));\n }"}, {"sha": "bd68471e0433c9032a23e7d305ccb176d0427871", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "patch": "@@ -833,7 +833,8 @@ pub enum type_err {\n #[deriving(Eq, TotalEq, Hash)]\n pub struct ParamBounds {\n     pub builtin_bounds: BuiltinBounds,\n-    pub trait_bounds: Vec<@TraitRef> }\n+    pub trait_bounds: Vec<@TraitRef>\n+}\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n@@ -987,7 +988,7 @@ impl fmt::Show for IntVarValue {\n pub struct TypeParameterDef {\n     pub ident: ast::Ident,\n     pub def_id: ast::DefId,\n-    pub bounds: @ParamBounds,\n+    pub bounds: Rc<ParamBounds>,\n     pub default: Option<ty::t>\n }\n "}, {"sha": "dda5d8f0f3997de0b0c2f23d1d4749a587ad4fe5", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=811bbfc782c3844efc1226e02ec9dcd4ba8d7fe8", "patch": "@@ -342,10 +342,10 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         new_type_param_defs.push(ty::TypeParameterDef {\n             ident: special_idents::self_,\n             def_id: dummy_defid,\n-            bounds: @ty::ParamBounds {\n+            bounds: Rc::new(ty::ParamBounds {\n                 builtin_bounds: ty::EmptyBuiltinBounds(),\n                 trait_bounds: vec!(self_trait_ref)\n-            },\n+            }),\n             default: None\n         });\n \n@@ -999,24 +999,24 @@ pub fn ty_of_foreign_item(ccx: &CrateCtxt,\n     }\n }\n \n-pub fn ty_generics_for_type(ccx: &CrateCtxt,\n-                            generics: &ast::Generics)\n-                            -> ty::Generics {\n+fn ty_generics_for_type(ccx: &CrateCtxt,\n+                        generics: &ast::Generics)\n+                        -> ty::Generics {\n     ty_generics(ccx, &generics.lifetimes, &generics.ty_params, 0)\n }\n \n-pub fn ty_generics_for_fn_or_method(ccx: &CrateCtxt,\n-                                    generics: &ast::Generics,\n-                                    base_index: uint)\n-                                    -> ty::Generics {\n+fn ty_generics_for_fn_or_method(ccx: &CrateCtxt,\n+                                generics: &ast::Generics,\n+                                base_index: uint)\n+                                -> ty::Generics {\n     let early_lifetimes = resolve_lifetime::early_bound_lifetimes(generics);\n     ty_generics(ccx, &early_lifetimes, &generics.ty_params, base_index)\n }\n \n-pub fn ty_generics(ccx: &CrateCtxt,\n-                   lifetimes: &Vec<ast::Lifetime>,\n-                   ty_params: &OwnedSlice<ast::TyParam>,\n-                   base_index: uint) -> ty::Generics {\n+fn ty_generics(ccx: &CrateCtxt,\n+               lifetimes: &Vec<ast::Lifetime>,\n+               ty_params: &OwnedSlice<ast::TyParam>,\n+               base_index: uint) -> ty::Generics {\n     return ty::Generics {\n         region_param_defs: Rc::new(lifetimes.iter().map(|l| {\n                 ty::RegionParameterDef { name: l.name,\n@@ -1025,12 +1025,12 @@ pub fn ty_generics(ccx: &CrateCtxt,\n         type_param_defs: Rc::new(ty_params.iter().enumerate().map(|(offset, param)| {\n             let existing_def_opt = {\n                 let ty_param_defs = ccx.tcx.ty_param_defs.borrow();\n-                ty_param_defs.find(&param.id).map(|&def| def)\n+                ty_param_defs.find(&param.id).map(|def| def.clone())\n             };\n             existing_def_opt.unwrap_or_else(|| {\n                 let param_ty = ty::param_ty {idx: base_index + offset,\n                                              def_id: local_def(param.id)};\n-                let bounds = @compute_bounds(ccx, param_ty, &param.bounds);\n+                let bounds = Rc::new(compute_bounds(ccx, param_ty, &param.bounds));\n                 let default = param.default.map(|path| {\n                     let ty = ast_ty_to_ty(ccx, &ExplicitRscope, path);\n                     let cur_idx = param_ty.idx;\n@@ -1056,7 +1056,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                     default: default\n                 };\n                 debug!(\"def for param: {}\", def.repr(ccx.tcx));\n-                ccx.tcx.ty_param_defs.borrow_mut().insert(param.id, def);\n+                ccx.tcx.ty_param_defs.borrow_mut().insert(param.id, def.clone());\n                 def\n             })\n         }).collect()),"}]}