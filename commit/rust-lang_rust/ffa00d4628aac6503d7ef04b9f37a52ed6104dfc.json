{"sha": "ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTAwZDQ2MjhhYWM2NTAzZDdlZjA0YjlmMzdhNTJlZDYxMDRkZmM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-24T17:52:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: make `pretty_path_generic_args`' task as simple as possible.", "tree": {"sha": "c2d226c2048a1b840fbb8e09fd31613653b3012b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d226c2048a1b840fbb8e09fd31613653b3012b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "html_url": "https://github.com/rust-lang/rust/commit/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4deaa69b429442c0e25a7828cfd63d7be78772d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4deaa69b429442c0e25a7828cfd63d7be78772d8", "html_url": "https://github.com/rust-lang/rust/commit/4deaa69b429442c0e25a7828cfd63d7be78772d8"}], "stats": {"total": 158, "additions": 70, "deletions": 88}, "files": [{"sha": "06495510ede474ad92d81b07015c4b47d05c3988", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "patch": "@@ -446,7 +446,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) {\n         use hir::def_id::CrateNum;\n         use ty::print::{PrintCx, Printer};\n-        use ty::subst::SubstsRef;\n+        use ty::subst::Kind;\n \n         struct AbsolutePathPrinter;\n \n@@ -513,8 +513,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 print_prefix: impl FnOnce(\n                     PrintCx<'_, 'gcx, 'tcx, Self>,\n                 ) -> Result<Self::Path, Self::Error>,\n-                _params: &[ty::GenericParamDef],\n-                _substs: SubstsRef<'tcx>,\n+                _args: impl Iterator<Item = Kind<'tcx>> + Clone,\n                 _projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n             ) -> Result<Self::Path, Self::Error> {\n                 print_prefix(self)"}, {"sha": "d89bd84a349421d48e35edf99612a5d9ec169d03", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "patch": "@@ -123,8 +123,7 @@ pub trait Printer: Sized {\n         print_prefix: impl FnOnce(\n             PrintCx<'_, 'gcx, 'tcx, Self>,\n         ) -> Result<Self::Path, Self::Error>,\n-        params: &[ty::GenericParamDef],\n-        substs: SubstsRef<'tcx>,\n+        args: impl Iterator<Item = Kind<'tcx>> + Clone,\n         projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n     ) -> Result<Self::Path, Self::Error>;\n }\n@@ -197,20 +196,20 @@ impl<P: Printer> PrintCx<'_, 'gcx, 'tcx, P> {\n                 };\n \n                 if let (Some(generics), Some(substs)) = (generics, substs) {\n-                    let params = self.generic_params_to_print(generics, substs);\n-                    self.path_generic_args(print_path, params, substs, projections)\n+                    let args = self.generic_args_to_print(generics, substs);\n+                    self.path_generic_args(print_path, args, projections)\n                 } else {\n                     print_path(self)\n                 }\n             }\n         }\n     }\n \n-    pub fn generic_params_to_print(\n+    pub fn generic_args_to_print(\n         &self,\n-        generics: &'a ty::Generics,\n+        generics: &'tcx ty::Generics,\n         substs: SubstsRef<'tcx>,\n-    ) -> &'a [ty::GenericParamDef] {\n+    ) -> impl Iterator<Item = Kind<'tcx>> + Clone {\n         // Don't print args for `Self` parameters (of traits).\n         let has_own_self = generics.has_self && generics.parent_count == 0;\n         let params = &generics.params[has_own_self as usize..];\n@@ -227,7 +226,9 @@ impl<P: Printer> PrintCx<'_, 'gcx, 'tcx, P> {\n                 ty::GenericParamDefKind::Const => false, // FIXME(const_generics:defaults)\n             }\n         }).count();\n-        &params[..params.len() - num_supplied_defaults]\n+        params[..params.len() - num_supplied_defaults].iter().map(move |param| {\n+            substs[param.index as usize]\n+        })\n     }\n \n     fn default_print_impl_path("}, {"sha": "a1e157685c9e25a8018607be50ac4de3210f8f93", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 48, "deletions": 70, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "patch": "@@ -207,21 +207,30 @@ pub trait PrettyPrinter:\n         value.skip_binder().print(self)\n     }\n \n+    /// Print comma-separated elements.\n+    fn comma_sep<T>(\n+        mut self: PrintCx<'_, '_, 'tcx, Self>,\n+        mut elems: impl Iterator<Item = T>,\n+        comma: &str,\n+    ) -> Result<Self, Self::Error>\n+        where T: Print<'tcx, Self, Output = Self, Error = Self::Error>\n+    {\n+        if let Some(first) = elems.next() {\n+            self = self.nest(|cx| first.print(cx))?;\n+            for elem in elems {\n+                self.write_str(comma)?;\n+                self = self.nest(|cx| elem.print(cx))?;\n+            }\n+        }\n+        self.ok()\n+    }\n+\n     /// Print `<...>` around what `f` prints.\n     fn generic_delimiters<'gcx, 'tcx>(\n         self: PrintCx<'_, 'gcx, 'tcx, Self>,\n         f: impl FnOnce(PrintCx<'_, 'gcx, 'tcx, Self>) -> Result<Self, Self::Error>,\n     ) -> Result<Self, Self::Error>;\n \n-    /// Return `true` if the region should be printed in path generic args\n-    /// even when it's `'_`, such as in e.g. `Foo<'_, '_, '_>`.\n-    fn always_print_region_in_paths(\n-        self: &PrintCx<'_, '_, '_, Self>,\n-        _region: ty::Region<'_>,\n-    ) -> bool {\n-        false\n-    }\n-\n     /// Return `true` if the region should be printed in\n     /// optional positions, e.g. `&'a T` or `dyn Tr + 'b`.\n     /// This is typically the case for all non-`'_` regions.\n@@ -482,66 +491,25 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n         print_prefix: impl FnOnce(\n             PrintCx<'_, 'gcx, 'tcx, P>,\n         ) -> Result<P::Path, P::Error>,\n-        params: &[ty::GenericParamDef],\n-        substs: SubstsRef<'tcx>,\n-        projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n+        mut args: impl Iterator<Item = Kind<'tcx>>,\n+        mut projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n     ) -> Result<P::Path, P::Error> {\n         self = self.nest(print_prefix)?;\n \n-        // Don't print `'_` if there's no printed region.\n-        let print_regions = params.iter().any(|param| {\n-            match substs[param.index as usize].unpack() {\n-                UnpackedKind::Lifetime(r) => {\n-                    self.always_print_region_in_paths(r) ||\n-                    self.region_should_not_be_omitted(r)\n-                }\n-                _ => false,\n-            }\n-        });\n-        let mut args = params.iter().map(|param| {\n-            substs[param.index as usize]\n-        }).filter(|arg| {\n-            match arg.unpack() {\n-                UnpackedKind::Lifetime(_) => print_regions,\n-                _ => true,\n-            }\n-        });\n         let arg0 = args.next();\n-\n-        let mut projections = projections;\n         let projection0 = projections.next();\n-\n         if arg0.is_none() && projection0.is_none() {\n             return self.ok();\n         }\n+        let args = arg0.into_iter().chain(args);\n+        let projections = projection0.into_iter().chain(projections);\n \n         self.generic_delimiters(|mut cx| {\n-            define_scoped_cx!(cx);\n-\n-            let mut empty = true;\n-            let mut maybe_comma = |cx: &mut Self| {\n-                if empty {\n-                    empty = false;\n-                    Ok(())\n-                } else {\n-                    write!(cx, \", \")\n-                }\n-            };\n-\n-            for arg in arg0.into_iter().chain(args) {\n-                maybe_comma(&mut cx)?;\n-\n-                p!(print(arg));\n+            cx = cx.nest(|cx| cx.comma_sep(args, \", \"))?;\n+            if arg0.is_some() && projection0.is_some() {\n+                write!(cx, \", \")?;\n             }\n-\n-            for projection in projection0.into_iter().chain(projections) {\n-                maybe_comma(&mut cx)?;\n-\n-                p!(write(\"{}=\", cx.tcx.associated_item(projection.item_def_id).ident),\n-                   print(projection.ty));\n-            }\n-\n-            cx.ok()\n+            cx.comma_sep(projections, \", \")\n         })\n     }\n }\n@@ -621,8 +589,8 @@ impl<F: fmt::Write> Printer for FmtPrinter<F> {\n             })?;\n             if visible_path_success {\n                 return if let (Some(generics), Some(substs)) = (generics, substs) {\n-                    let params = self.generic_params_to_print(generics, substs);\n-                    self.path_generic_args(|cx| cx.ok(), params, substs, projections)\n+                    let args = self.generic_args_to_print(generics, substs);\n+                    self.path_generic_args(|cx| cx.ok(), args, projections)\n                 } else {\n                     self.ok()\n                 };\n@@ -739,11 +707,23 @@ impl<F: fmt::Write> Printer for FmtPrinter<F> {\n         print_prefix: impl FnOnce(\n             PrintCx<'_, 'gcx, 'tcx, Self>,\n         ) -> Result<Self::Path, Self::Error>,\n-        params: &[ty::GenericParamDef],\n-        substs: SubstsRef<'tcx>,\n+        args: impl Iterator<Item = Kind<'tcx>> + Clone,\n         projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n-        self.pretty_path_generic_args(print_prefix, params, substs, projections)\n+        // Don't print `'_` if there's no unerased regions.\n+        let print_regions = args.clone().any(|arg| {\n+            match arg.unpack() {\n+                UnpackedKind::Lifetime(r) => *r != ty::ReErased,\n+                _ => false,\n+            }\n+        });\n+        let args = args.filter(|arg| {\n+            match arg.unpack() {\n+                UnpackedKind::Lifetime(_) => print_regions,\n+                _ => true,\n+            }\n+        });\n+        self.pretty_path_generic_args(print_prefix, args, projections)\n     }\n }\n \n@@ -798,13 +778,6 @@ impl<F: fmt::Write> PrettyPrinter for FmtPrinter<F> {\n         Ok(inner)\n     }\n \n-    fn always_print_region_in_paths(\n-        self: &PrintCx<'_, '_, '_, Self>,\n-        region: ty::Region<'_>,\n-    ) -> bool {\n-        *region != ty::ReErased\n-    }\n-\n     fn region_should_not_be_omitted(\n         self: &PrintCx<'_, '_, '_, Self>,\n         region: ty::Region<'_>,\n@@ -1498,6 +1471,11 @@ define_print_and_forward_display! {\n         }\n     }\n \n+    ty::ExistentialProjection<'tcx> {\n+        let name = cx.tcx.associated_item(self.item_def_id).ident;\n+        p!(write(\"{}=\", name), print(self.ty))\n+    }\n+\n     &'tcx ty::List<Ty<'tcx>> {\n         p!(write(\"{{\"));\n         let mut tys = self.iter();"}, {"sha": "93e7e495d4ede1802e7c1b74e7016a68f4b42ee4", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "patch": "@@ -94,7 +94,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::ich::NodeIdHashingMode;\n use rustc::ty::print::{PrettyPrinter, PrintCx, Printer};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::SubstsRef;\n+use rustc::ty::subst::{Kind, SubstsRef, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common::record_time;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -503,11 +503,16 @@ impl Printer for SymbolPath {\n         print_prefix: impl FnOnce(\n             PrintCx<'_, 'gcx, 'tcx, Self>,\n         ) -> Result<Self::Path, Self::Error>,\n-        params: &[ty::GenericParamDef],\n-        substs: SubstsRef<'tcx>,\n+        args: impl Iterator<Item = Kind<'tcx>> + Clone,\n         projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n     )  -> Result<Self::Path, Self::Error> {\n-        self.pretty_path_generic_args(print_prefix, params, substs, projections)\n+        let args = args.filter(|arg| {\n+            match arg.unpack() {\n+                UnpackedKind::Lifetime(_) => false,\n+                _ => true,\n+            }\n+        });\n+        self.pretty_path_generic_args(print_prefix, args, projections)\n     }\n }\n "}, {"sha": "94c954b01b1544b8f53a47e3b974ad874d6d90df", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa00d4628aac6503d7ef04b9f37a52ed6104dfc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ffa00d4628aac6503d7ef04b9f37a52ed6104dfc", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::interpret::GlobalId;\n use rustc::hir::{self, GenericArg, HirVec};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc::ty::subst::{Kind, InternalSubsts, SubstsRef};\n use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::layout::VariantIdx;\n@@ -4304,8 +4304,7 @@ where F: Fn(DefId) -> Def {\n             print_prefix: impl FnOnce(\n                 PrintCx<'_, 'gcx, 'tcx, Self>,\n             ) -> Result<Self::Path, Self::Error>,\n-            _params: &[ty::GenericParamDef],\n-            _substs: SubstsRef<'tcx>,\n+            _args: impl Iterator<Item = Kind<'tcx>> + Clone,\n             _projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n         ) -> Result<Self::Path, Self::Error> {\n             print_prefix(self)"}]}