{"sha": "b9f183d31fd981959d1fa8d80430b96973130f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZjE4M2QzMWZkOTgxOTU5ZDFmYThkODA0MzBiOTY5NzMxMzBmNmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-27T08:45:02Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-27T08:45:02Z"}, "message": "rustup", "tree": {"sha": "62dac34b75dd4ae7592ce9a96fa29bbb24f709ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62dac34b75dd4ae7592ce9a96fa29bbb24f709ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f183d31fd981959d1fa8d80430b96973130f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f183d31fd981959d1fa8d80430b96973130f6d", "html_url": "https://github.com/rust-lang/rust/commit/b9f183d31fd981959d1fa8d80430b96973130f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f183d31fd981959d1fa8d80430b96973130f6d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455fa0c40aad72d5094682187fb6f9c87245d499", "url": "https://api.github.com/repos/rust-lang/rust/commits/455fa0c40aad72d5094682187fb6f9c87245d499", "html_url": "https://github.com/rust-lang/rust/commit/455fa0c40aad72d5094682187fb6f9c87245d499"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "dd9ec1f6e2388b9aeaf8e8575658491a09737a62", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b9f183d31fd981959d1fa8d80430b96973130f6d", "patch": "@@ -1028,7 +1028,7 @@ fn extract_first_expr(block: &Block) -> Option<&Expr> {\n /// Return true if expr contains a single break expr (maybe within a block).\n fn is_break_expr(expr: &Expr) -> bool {\n     match expr.node {\n-        ExprBreak(None, _) => true,\n+        ExprBreak(dest, _) if dest.ident.is_none() => true,\n         ExprBlock(ref b) => {\n             match extract_first_expr(b) {\n                 Some(subexpr) => is_break_expr(subexpr),"}, {"sha": "e004b80323e70f4c518b035e93127d1e5e8c38e2", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=b9f183d31fd981959d1fa8d80430b96973130f6d", "patch": "@@ -69,9 +69,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n impl<'a, 'tcx: 'a> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         match expr.node {\n-            hir::ExprBreak(Some(label), _) |\n-            hir::ExprAgain(Some(label)) => {\n-                self.labels.remove(&label.name.as_str());\n+            hir::ExprBreak(destination, _) |\n+            hir::ExprAgain(destination) => {\n+                if let Some(label) = destination.ident {\n+                    self.labels.remove(&label.node.name.as_str());\n+                }\n             },\n             hir::ExprLoop(_, Some(label), _) |\n             hir::ExprWhile(_, _, Some(label)) => {"}, {"sha": "8421e8efd5e8e2bd8d6763095d0c787de2f54350", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=b9f183d31fd981959d1fa8d80430b96973130f6d", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n \n         match (&left.node, &right.node) {\n             (&ExprAddrOf(l_mut, ref le), &ExprAddrOf(r_mut, ref re)) => l_mut == r_mut && self.eq_expr(le, re),\n-            (&ExprAgain(li), &ExprAgain(ri)) => both(&li, &ri, |l, r| l.name.as_str() == r.name.as_str()),\n+            (&ExprAgain(li), &ExprAgain(ri)) => both(&li.ident, &ri.ident, |l, r| l.node.name.as_str() == r.node.name.as_str()),\n             (&ExprAssign(ref ll, ref lr), &ExprAssign(ref rl, ref rr)) => self.eq_expr(ll, rl) && self.eq_expr(lr, rr),\n             (&ExprAssignOp(ref lo, ref ll, ref lr), &ExprAssignOp(ref ro, ref rl, ref rr)) => {\n                 lo.node == ro.node && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n@@ -81,7 +81,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                 })\n             },\n             (&ExprBreak(li, ref le), &ExprBreak(ri, ref re)) => {\n-                both(&li, &ri, |l, r| l.name.as_str() == r.name.as_str()) && both(le, re, |l, r| self.eq_expr(l, r))\n+                both(&li.ident, &ri.ident, |l, r| l.node.name.as_str() == r.node.name.as_str()) && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprBox(ref l), &ExprBox(ref r)) => self.eq_expr(l, r),\n             (&ExprCall(ref l_fun, ref l_args), &ExprCall(ref r_fun, ref r_args)) => {\n@@ -310,8 +310,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n             ExprAgain(i) => {\n                 let c: fn(_) -> _ = ExprAgain;\n                 c.hash(&mut self.s);\n-                if let Some(i) = i {\n-                    self.hash_name(&i.name);\n+                if let Some(i) = i.ident {\n+                    self.hash_name(&i.node.name);\n                 }\n             },\n             ExprAssign(ref l, ref r) => {\n@@ -342,8 +342,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n             ExprBreak(i, ref j) => {\n                 let c: fn(_, _) -> _ = ExprBreak;\n                 c.hash(&mut self.s);\n-                if let Some(i) = i {\n-                    self.hash_name(&i.name);\n+                if let Some(i) = i.ident {\n+                    self.hash_name(&i.node.name);\n                 }\n                 if let Some(ref j) = *j {\n                     self.hash_expr(&*j);"}, {"sha": "2dae1cf1723cc2f8f6b83bafe1088b69b4ad7d07", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f183d31fd981959d1fa8d80430b96973130f6d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b9f183d31fd981959d1fa8d80430b96973130f6d", "patch": "@@ -900,7 +900,7 @@ pub fn opt_def_id(def: Def) -> Option<DefId> {\n         Def::AssociatedConst(id) |\n         Def::Local(id) |\n         Def::Upvar(id, ..) |\n-        Def::Macro(id) => Some(id),\n+        Def::Macro(id, _) => Some(id),\n \n         Def::Label(..) | Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => None,\n     }"}]}