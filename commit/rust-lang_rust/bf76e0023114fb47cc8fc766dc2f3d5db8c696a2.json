{"sha": "bf76e0023114fb47cc8fc766dc2f3d5db8c696a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNzZlMDAyMzExNGZiNDdjYzhmYzc2NmRjMmYzZDVkYjhjNjk2YTI=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-07-05T07:47:09Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-05T00:43:47Z"}, "message": "libnative should not mess with stack limits in the TIB.  Only libgreen has a legitimate need to set them.", "tree": {"sha": "cd269e2e354f879eacc6a8afa1e628f45cd3ae7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd269e2e354f879eacc6a8afa1e628f45cd3ae7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2", "html_url": "https://github.com/rust-lang/rust/commit/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79", "html_url": "https://github.com/rust-lang/rust/commit/bf420e58c2f88c8f37f83aaf947e7abba1cd7f79"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "d681e53af42d57bb2868719bae612aa92108250a", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=bf76e0023114fb47cc8fc766dc2f3d5db8c696a2", "patch": "@@ -105,11 +105,11 @@ impl Context {\n             // invalid for the current task. Lucky for us `rust_swap_registers`\n             // is a C function so we don't have to worry about that!\n             match in_context.stack_bounds {\n-                Some((lo, hi)) => stack::record_stack_bounds(lo, hi),\n+                Some((lo, hi)) => stack::record_stack_bounds_green(lo, hi),\n                 // If we're going back to one of the original contexts or\n                 // something that's possibly not a \"normal task\", then reset\n                 // the stack limit to 0 to make morestack never fail\n-                None => stack::record_stack_bounds(0, uint::MAX),\n+                None => stack::record_stack_bounds_green(0, uint::MAX),\n             }\n             rust_swap_registers(out_regs, in_regs)\n         }"}, {"sha": "a79f453cf1ecb50634c1e9b31ae6cdcc3c028e07", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf76e0023114fb47cc8fc766dc2f3d5db8c696a2/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=bf76e0023114fb47cc8fc766dc2f3d5db8c696a2", "patch": "@@ -125,7 +125,7 @@ extern fn stack_exhausted() {\n }\n \n #[inline(always)]\n-pub unsafe fn record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n+pub unsafe fn record_stack_bounds_green(stack_lo: uint, stack_hi: uint) {\n     // When the old runtime had segmented stacks, it used a calculation that was\n     // \"limit + RED_ZONE + FUDGE\". The red zone was for things like dynamic\n     // symbol resolution, llvm function calls, etc. In theory this red zone\n@@ -154,6 +154,11 @@ pub unsafe fn record_stack_bounds(stack_lo: uint, stack_hi: uint) {\n     }\n }\n \n+#[inline(always)]\n+pub unsafe fn record_stack_bounds(stack_lo: uint, _stack_hi: uint) {\n+    record_sp_limit(stack_lo + RED_ZONE);\n+}\n+\n /// Records the current limit of the stack as specified by `end`.\n ///\n /// This is stored in an OS-dependent location, likely inside of the thread"}]}