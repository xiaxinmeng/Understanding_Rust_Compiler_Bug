{"sha": "6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTE4YzliOGRlM2MzZWQ4NGExNmFiYTJlNzFmYTVhOWFkYTZlNzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T18:58:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T18:58:44Z"}, "message": "Refactor runables", "tree": {"sha": "c3c537d5b953374e1108edbfb2b4fcda2cc96b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c537d5b953374e1108edbfb2b4fcda2cc96b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "html_url": "https://github.com/rust-lang/rust/commit/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237abb85c40672e8cdafa423db6187c107369a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/237abb85c40672e8cdafa423db6187c107369a09", "html_url": "https://github.com/rust-lang/rust/commit/237abb85c40672e8cdafa423db6187c107369a09"}], "stats": {"total": 133, "additions": 66, "deletions": 67}, "files": [{"sha": "9f4636e5278669334a911bf64ab5e832600b1396", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "patch": "@@ -8,7 +8,7 @@ import { parentModule } from './parent_module';\n import { syntaxTree } from './syntax_tree';\n import { expandMacro } from './expand_macro';\n import * as inlayHints from './inlay_hints';\n-import * as runnables from './runnables';\n+import { run, runSingle } from './runnables';\n \n function collectGarbage(ctx: Ctx): Cmd {\n     return async () => {\n@@ -22,9 +22,10 @@ export {\n     joinLines,\n     matchingBrace,\n     parentModule,\n-    runnables,\n     syntaxTree,\n     onEnter,\n     inlayHints,\n     collectGarbage,\n+    run,\n+    runSingle\n };"}, {"sha": "c4be21a0cc2ed2350a26dd3c870538a20068bb97", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "patch": "@@ -1,7 +1,67 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n-import { Server } from '../server';\n+import { Ctx, Cmd } from '../ctx';\n+\n+export function run(ctx: Ctx): Cmd {\n+    let prevRunnable: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return\n+\n+        const textDocument: lc.TextDocumentIdentifier = {\n+            uri: editor.document.uri.toString(),\n+        };\n+        const params: RunnablesParams = {\n+            textDocument,\n+            position: ctx.client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        };\n+        const runnables = await ctx.client.sendRequest<Runnable[]>(\n+            'rust-analyzer/runnables',\n+            params,\n+        );\n+        const items: RunnableQuickPick[] = [];\n+        if (prevRunnable) {\n+            items.push(prevRunnable);\n+        }\n+        for (const r of runnables) {\n+            if (\n+                prevRunnable &&\n+                JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n+            ) {\n+                continue;\n+            }\n+            items.push(new RunnableQuickPick(r));\n+        }\n+        const item = await vscode.window.showQuickPick(items);\n+        if (!item) return;\n+\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n+    }\n+}\n+\n+export function runSingle(ctx: Ctx): Cmd {\n+    return async (runnable: Runnable) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return\n+\n+        const task = createTask(runnable);\n+        task.group = vscode.TaskGroup.Build;\n+        task.presentationOptions = {\n+            reveal: vscode.TaskRevealKind.Always,\n+            panel: vscode.TaskPanelKind.Dedicated,\n+            clear: true,\n+        };\n+\n+        return vscode.tasks.executeTask(task);\n+    }\n+}\n \n interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -67,63 +127,3 @@ function createTask(spec: Runnable): vscode.Task {\n     t.presentationOptions.clear = true;\n     return t;\n }\n-\n-let prevRunnable: RunnableQuickPick | undefined;\n-export async function handle(): Promise<vscode.TaskExecution | undefined> {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-    const textDocument: lc.TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString(),\n-    };\n-    const params: RunnablesParams = {\n-        textDocument,\n-        position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n-    };\n-    const runnables = await Server.client.sendRequest<Runnable[]>(\n-        'rust-analyzer/runnables',\n-        params,\n-    );\n-    const items: RunnableQuickPick[] = [];\n-    if (prevRunnable) {\n-        items.push(prevRunnable);\n-    }\n-    for (const r of runnables) {\n-        if (\n-            prevRunnable &&\n-            JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n-        ) {\n-            continue;\n-        }\n-        items.push(new RunnableQuickPick(r));\n-    }\n-    const item = await vscode.window.showQuickPick(items);\n-    if (!item) {\n-        return;\n-    }\n-\n-    item.detail = 'rerun';\n-    prevRunnable = item;\n-    const task = createTask(item.runnable);\n-    return await vscode.tasks.executeTask(task);\n-}\n-\n-export async function handleSingle(runnable: Runnable) {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-\n-    const task = createTask(runnable);\n-    task.group = vscode.TaskGroup.Build;\n-    task.presentationOptions = {\n-        reveal: vscode.TaskRevealKind.Always,\n-        panel: vscode.TaskPanelKind.Dedicated,\n-        clear: true,\n-    };\n-\n-    return vscode.tasks.executeTask(task);\n-}"}, {"sha": "7ad5e6934aa869b4974ff88017c77302868a631f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6b118c9b8de3c3ed84a16aba2e71fa5a9ada6e74", "patch": "@@ -20,6 +20,8 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('parentModule', commands.parentModule);\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n+    ctx.registerCommand('run', commands.run);\n+    ctx.registerCommand('runSingle', commands.runSingle); // Internal action for lenses\n \n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n@@ -29,10 +31,6 @@ export async function activate(context: vscode.ExtensionContext) {\n         disposeOnDeactivation(vscode.commands.registerCommand(name, f));\n     }\n \n-    // Commands are requests from vscode to the language server\n-    registerCommand('rust-analyzer.run', commands.runnables.handle);\n-    // Unlike the above this does not send requests to the language server\n-    registerCommand('rust-analyzer.runSingle', commands.runnables.handleSingle);\n     registerCommand(\n         'rust-analyzer.showReferences',\n         (uri: string, position: lc.Position, locations: lc.Location[]) => {"}]}