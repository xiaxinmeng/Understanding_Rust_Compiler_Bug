{"sha": "e2db0a5630a39fc1725cae1e804120cff75dc1cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZGIwYTU2MzBhMzlmYzE3MjVjYWUxZTgwNDEyMGNmZjc1ZGMxY2I=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-11T22:45:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-12T17:15:07Z"}, "message": "Update js tester tool", "tree": {"sha": "d67b2b470f18a13ceb1fbfc640054af1f25d0693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d67b2b470f18a13ceb1fbfc640054af1f25d0693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2db0a5630a39fc1725cae1e804120cff75dc1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2db0a5630a39fc1725cae1e804120cff75dc1cb", "html_url": "https://github.com/rust-lang/rust/commit/e2db0a5630a39fc1725cae1e804120cff75dc1cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2db0a5630a39fc1725cae1e804120cff75dc1cb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b14573d50ef13e869db6f997873b1051d2a2c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b14573d50ef13e869db6f997873b1051d2a2c34", "html_url": "https://github.com/rust-lang/rust/commit/4b14573d50ef13e869db6f997873b1051d2a2c34"}], "stats": {"total": 169, "additions": 122, "deletions": 47}, "files": [{"sha": "1fc0d649f4f485f7d0d8f95ebea647276915a8d4", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 122, "deletions": 47, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/e2db0a5630a39fc1725cae1e804120cff75dc1cb/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/e2db0a5630a39fc1725cae1e804120cff75dc1cb/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=e2db0a5630a39fc1725cae1e804120cff75dc1cb", "patch": "@@ -12,73 +12,148 @@ const fs = require('fs');\n \n const TEST_FOLDER = 'src/test/rustdoc-js/';\n \n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n // Stupid function extractor based on indent.\n function extractFunction(content, functionName) {\n-    var x = content.split('\\n');\n-    var in_func = false;\n     var indent = 0;\n-    var lines = [];\n-\n-    for (var i = 0; i < x.length; ++i) {\n-        if (in_func === false) {\n-            var splitter = \"function \" + functionName + \"(\";\n-            if (x[i].trim().startsWith(splitter)) {\n-                in_func = true;\n-                indent = x[i].split(splitter)[0].length;\n-                lines.push(x[i]);\n-            }\n-        } else {\n-            lines.push(x[i]);\n-            if (x[i].trim() === \"}\" && x[i].split(\"}\")[0].length === indent) {\n-                return lines.join(\"\\n\");\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n             }\n+            pos += 1;\n         }\n+        content = content.slice(start + 1);\n     }\n     return null;\n }\n \n // Stupid function extractor for array.\n function extractArrayVariable(content, arrayName) {\n-    var x = content.split('\\n');\n-    var found_var = false;\n-    var lines = [];\n-\n-    for (var i = 0; i < x.length; ++i) {\n-        if (found_var === false) {\n-            var splitter = \"var \" + arrayName + \" = [\";\n-            if (x[i].trim().startsWith(splitter)) {\n-                found_var = true;\n-                i -= 1;\n-            }\n-        } else {\n-            lines.push(x[i]);\n-            if (x[i].endsWith('];')) {\n-                return lines.join(\"\\n\");\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n             }\n+            pos += 1;\n         }\n+        content = content.slice(start + 1);\n     }\n     return null;\n }\n \n // Stupid function extractor for variable.\n function extractVariable(content, varName) {\n-    var x = content.split('\\n');\n-    var found_var = false;\n-    var lines = [];\n-\n-    for (var i = 0; i < x.length; ++i) {\n-        if (found_var === false) {\n-            var splitter = \"var \" + varName + \" = \";\n-            if (x[i].trim().startsWith(splitter)) {\n-                found_var = true;\n-                i -= 1;\n-            }\n-        } else {\n-            lines.push(x[i]);\n-            if (x[i].endsWith(';')) {\n-                return lines.join(\"\\n\");\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';') {\n+                return content.slice(start, pos + 1);\n             }\n+            pos += 1;\n         }\n+        content = content.slice(start + 1);\n     }\n     return null;\n }\n@@ -101,7 +176,7 @@ function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n     for (var i = 0; i < thingsToLoad.length; ++i) {\n         var tmp = funcToCall(fileContent, thingsToLoad[i]);\n         if (tmp === null) {\n-            console.error('enable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n             process.exit(1);\n         }\n         content += tmp;"}]}