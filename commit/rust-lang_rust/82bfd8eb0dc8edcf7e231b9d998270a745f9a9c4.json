{"sha": "82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYmZkOGViMGRjOGVkY2Y3ZTIzMWI5ZDk5ODI3MGE3NDVmOWE5YzQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-04T14:37:40Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-04T15:11:33Z"}, "message": "middle::entry -> rustc_passes", "tree": {"sha": "4ccfc72e03f2a528aa26d5947242278b93cd5e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccfc72e03f2a528aa26d5947242278b93cd5e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "html_url": "https://github.com/rust-lang/rust/commit/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb707824d0f8b55a3f8552dd0326d0ae11fefcf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb707824d0f8b55a3f8552dd0326d0ae11fefcf6", "html_url": "https://github.com/rust-lang/rust/commit/bb707824d0f8b55a3f8552dd0326d0ae11fefcf6"}], "stats": {"total": 178, "additions": 92, "deletions": 86}, "files": [{"sha": "9b04c2db9ff3207b2c810605799ea595b245004b", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "patch": "@@ -466,66 +466,6 @@ fn main() {\n ```\n \"##,\n \n-// This shouldn't really ever trigger since the repeated value error comes first\n-E0136: r##\"\n-A binary can only have one entry point, and by default that entry point is the\n-function `main()`. If there are multiple such functions, please rename one.\n-\"##,\n-\n-E0137: r##\"\n-More than one function was declared with the `#[main]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0137\n-#![feature(main)]\n-\n-#[main]\n-fn foo() {}\n-\n-#[main]\n-fn f() {} // error: multiple functions with a `#[main]` attribute\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[main]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(main)]\n-\n-#[main]\n-fn f() {} // ok!\n-```\n-\"##,\n-\n-E0138: r##\"\n-More than one function was declared with the `#[start]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0138\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize {}\n-\n-#[start]\n-fn f(argc: isize, argv: *const *const u8) -> isize {}\n-// error: multiple 'start' functions\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[start]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n-```\n-\"##,\n \n E0139: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n@@ -1941,21 +1881,6 @@ fn main() {\n ```\n \"##,\n \n-E0601: r##\"\n-No `main` function was found in a binary crate. To fix this error, add a\n-`main` function. For example:\n-\n-```\n-fn main() {\n-    // Your program will start here.\n-    println!(\"Hello world!\");\n-}\n-```\n-\n-If you don't know the basics of Rust, you can go look to the Rust Book to get\n-started: https://doc.rust-lang.org/book/\n-\"##,\n-\n E0602: r##\"\n An unknown lint was used on the command line.\n "}, {"sha": "197792eebb32c399a825777a93a3dbb033fcd827", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "patch": "@@ -104,7 +104,6 @@ pub mod middle {\n     pub mod cstore;\n     pub mod dependency_format;\n     pub mod diagnostic_items;\n-    pub mod entry;\n     pub mod exported_symbols;\n     pub mod free_region;\n     pub mod intrinsicck;"}, {"sha": "6d90d1c839ffc52c607f0aeda784cf7a3671ada8", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "patch": "@@ -785,7 +785,6 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n-    middle::entry::provide(providers);\n     cstore::provide(providers);\n     lint::provide(providers);\n     rustc_lint::provide(providers);\n@@ -891,7 +890,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     time(sess, \"misc checking 1\", || {\n         parallel!({\n             entry_point = time(sess, \"looking for entry point\", || {\n-                middle::entry::find_entry_point(tcx)\n+                rustc_passes::entry::find_entry_point(tcx)\n             });\n \n             time(sess, \"looking for plugin registrar\", || {"}, {"sha": "bf68807a0c29b1ffd24069fad760e9163edb8b3f", "filename": "src/librustc_passes/entry.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "patch": "@@ -1,15 +1,15 @@\n-use crate::hir::map as hir_map;\n-use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use crate::session::{config, Session};\n-use crate::session::config::EntryFnType;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use rustc::session::{config, Session};\n+use rustc::session::config::EntryFnType;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n-use crate::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use crate::ty::TyCtxt;\n-use crate::ty::query::Providers;\n+use rustc::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n \n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,", "previous_filename": "src/librustc/middle/entry.rs"}, {"sha": "78260bd82456f589e40724e6fc1184289792a82d", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "patch": "@@ -319,6 +319,83 @@ async fn foo() {}\n \n Switch to the Rust 2018 edition to use `async fn`.\n \"##,\n+\n+// This shouldn't really ever trigger since the repeated value error comes first\n+E0136: r##\"\n+A binary can only have one entry point, and by default that entry point is the\n+function `main()`. If there are multiple such functions, please rename one.\n+\"##,\n+\n+E0137: r##\"\n+More than one function was declared with the `#[main]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0137\n+#![feature(main)]\n+\n+#[main]\n+fn foo() {}\n+\n+#[main]\n+fn f() {} // error: multiple functions with a `#[main]` attribute\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[main]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(main)]\n+\n+#[main]\n+fn f() {} // ok!\n+```\n+\"##,\n+\n+E0138: r##\"\n+More than one function was declared with the `#[start]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0138\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+\n+#[start]\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+// error: multiple 'start' functions\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[start]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n+```\n+\"##,\n+\n+E0601: r##\"\n+No `main` function was found in a binary crate. To fix this error, add a\n+`main` function. For example:\n+\n+```\n+fn main() {\n+    // Your program will start here.\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+If you don't know the basics of Rust, you can go look to the Rust Book to get\n+started: https://doc.rust-lang.org/book/\n+\"##,\n+\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target"}, {"sha": "1000770fb41e7dfe773d1b3ddc9c8405d5d38709", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=82bfd8eb0dc8edcf7e231b9d998270a745f9a9c4", "patch": "@@ -13,6 +13,10 @@\n \n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate log;\n+#[macro_use]\n+extern crate syntax;\n \n use rustc::ty::query::Providers;\n \n@@ -23,9 +27,11 @@ pub mod hir_stats;\n pub mod layout_test;\n pub mod loops;\n pub mod dead;\n+pub mod entry;\n mod liveness;\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    entry::provide(providers);\n     loops::provide(providers);\n     liveness::provide(providers);\n }"}]}