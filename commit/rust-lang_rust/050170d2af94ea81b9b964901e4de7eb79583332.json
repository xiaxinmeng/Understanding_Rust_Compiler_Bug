{"sha": "050170d2af94ea81b9b964901e4de7eb79583332", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDE3MGQyYWY5NGVhODFiOWI5NjQ5MDFlNGRlN2ViNzk1ODMzMzI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T11:14:28Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T11:34:35Z"}, "message": "Remove remaining uses of iter and for-each\n\nIssue #1056", "tree": {"sha": "15be2db99a8081f166e98bd0fb54cca3c030a27d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15be2db99a8081f166e98bd0fb54cca3c030a27d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050170d2af94ea81b9b964901e4de7eb79583332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050170d2af94ea81b9b964901e4de7eb79583332", "html_url": "https://github.com/rust-lang/rust/commit/050170d2af94ea81b9b964901e4de7eb79583332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050170d2af94ea81b9b964901e4de7eb79583332/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd5a08384d8ff297a50220df836f31610b23cf31", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5a08384d8ff297a50220df836f31610b23cf31", "html_url": "https://github.com/rust-lang/rust/commit/fd5a08384d8ff297a50220df836f31610b23cf31"}], "stats": {"total": 349, "additions": 126, "deletions": 223}, "files": [{"sha": "e6ad25691373a64db1b5f2dea95dcf19cca24d03", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -4904,14 +4904,14 @@ fn trans_fn_cleanups(fcx: @fn_ctxt, cx: @block_ctxt) {\n     }\n }\n \n-iter block_locals(b: ast::blk) -> @ast::local {\n+fn block_locals(b: ast::blk, it: block(@ast::local)) {\n     for s: @ast::stmt in b.node.stmts {\n         alt s.node {\n           ast::stmt_decl(d, _) {\n             alt d.node {\n               ast::decl_local(locals) {\n                 for (style, local) in locals {\n-                    if style == ast::let_copy { put local; }\n+                    if style == ast::let_copy { it(local); }\n                 }\n               }\n               _ {/* fall through */ }\n@@ -5015,9 +5015,7 @@ fn trans_block(bcx: @block_ctxt, b: ast::blk) -> @block_ctxt {\n \n fn trans_block_dps(bcx: @block_ctxt, b: ast::blk, dest: dest)\n     -> @block_ctxt {\n-    for each local: @ast::local in block_locals(b) {\n-        bcx = alloc_local(bcx, local);\n-    }\n+    block_locals(b) {|local| bcx = alloc_local(bcx, local); };\n     for s: @ast::stmt in b.node.stmts {\n         bcx = trans_stmt(bcx, *s);\n     }"}, {"sha": "60ff2dc0967a7001c5a025ae5a7e6e63a8c7f734", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -24,11 +24,11 @@ fn load_props(testfile: str) -> test_props {\n     let error_patterns = [];\n     let compile_flags = option::none;\n     let pp_exact = option::none;\n-    for each ln: str in iter_header(testfile) {\n+    iter_header(testfile) {|ln|\n         alt parse_error_pattern(ln) {\n           option::some(ep) { error_patterns += [ep]; }\n           option::none. { }\n-        }\n+        };\n \n         if option::is_none(compile_flags) {\n             compile_flags = parse_compile_flags(ln);\n@@ -37,7 +37,7 @@ fn load_props(testfile: str) -> test_props {\n         if option::is_none(pp_exact) {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n-    }\n+    };\n     ret {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n@@ -47,22 +47,22 @@ fn load_props(testfile: str) -> test_props {\n \n fn is_test_ignored(config: config, testfile: str) -> bool {\n     let found = false;\n-    for each ln: str in iter_header(testfile) {\n+    iter_header(testfile) {|ln|\n         // FIXME: Can't return or break from iterator\n         found = found || parse_name_directive(ln, \"xfail-test\");\n         found = found || parse_name_directive(ln, xfail_target());\n         if (config.mode == common::mode_pretty) {\n             found = found || parse_name_directive(ln, \"xfail-pretty\");\n         }\n-    }\n+    };\n     ret found;\n \n     fn xfail_target() -> str {\n         \"xfail-\" + std::os::target_os()\n     }\n }\n \n-iter iter_header(testfile: str) -> str {\n+fn iter_header(testfile: str, it: block(str)) {\n     let rdr = io::file_reader(testfile);\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n@@ -73,7 +73,7 @@ iter iter_header(testfile: str) -> str {\n         if str::starts_with(ln, \"fn\")\n             || str::starts_with(ln, \"mod\") {\n             break;\n-        } else { put ln; }\n+        } else { it(ln); }\n     }\n }\n "}, {"sha": "4d4dfb4e6a20f8a32600b9997ec89464ecd7bf97", "filename": "src/fuzzer/cycles.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ffuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ffuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fcycles.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -23,9 +23,9 @@ type pointy = {\n   mutable z : fn()->()\n };\n \n-iter allunder(n: uint) -> uint {\n+fn allunder(n: uint, it: block(uint)) {\n     let i: uint = 0u;\n-    while i < n { put i; i += 1u; }\n+    while i < n { it(i); i += 1u; }\n }\n \n fn nopT(_x : @pointy) { }\n@@ -36,20 +36,20 @@ fn test_cycles(r : rand::rng)\n     const max : uint = 10u;\n \n     let v : [mutable @pointy] = [mutable];\n-    for each i in allunder(max) {\n+    allunder(max) {|i|\n         v += [mutable @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: nop }];\n-    }\n+    };\n \n-    for each i in allunder(max) {\n+    allunder(max) {|i|\n         v[i].x = yes_pointy(v[under(r, max)]);\n         v[i].y = yes_pointy(v[under(r, max)]);\n         v[i].z = bind nopT(v[under(r, max)]);\n-    }\n+    };\n \n     // Drop refs one at a time\n-    for each i in allunder(max) {\n+    allunder(max) {|i|\n         v[i] = @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: nop };\n-    }\n+    };\n }\n \n fn main()"}, {"sha": "0baa381abc25cf8c80f294ddd067c2699c66d34e", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -209,9 +209,9 @@ fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::ty, tm: test_mode\n     *crate2\n }\n \n-iter under(n: uint) -> uint {\n+fn under(n: uint, it: block(uint)) {\n     let i: uint = 0u;\n-    while i < n { put i; i += 1u; }\n+    while i < n { it(i); i += 1u; }\n }\n \n fn devnull() -> io::writer { std::io::string_writer().get_writer() }\n@@ -245,9 +245,9 @@ fn check_variants_T<@T>(\n     let L = vec::len(things);\n \n     if L < 100u {\n-        for each i: uint in under(uint::min(L, 20u)) {\n+        under(uint::min(L, 20u)) {|i|\n             log_err \"Replacing... #\" + uint::str(i);\n-            for each j: uint in under(uint::min(L, 30u)) {\n+            under(uint::min(L, 30u)) {|j|\n                 log_err \"With... \" + stringifier(@things[j]);\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but testing the\n@@ -267,8 +267,8 @@ fn check_variants_T<@T>(\n                     check_whole_compiler(str3, file_label, safe_to_run);\n                   }\n                 }\n-            }\n-        }\n+            };\n+        };\n     }\n }\n "}, {"sha": "2861701ac9eea73b79e82e35f9fd6a11854df1b0", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -42,9 +42,9 @@ fn vec_insert<@T>(v: [T], i: uint, x: T) -> [T] {\n }\n \n // Iterates over 0...length, skipping the specified number on each side.\n-iter ix(skip_low: uint, skip_high: uint, length: uint) -> uint {\n+fn ix(skip_low: uint, skip_high: uint, length: uint, it: block(uint)) {\n     let i: uint = skip_low;\n-    while i + skip_high <= length { put i; i += 1u; }\n+    while i + skip_high <= length { it(i); i += 1u; }\n }\n \n // Returns a bunch of modified versions of v, some of which introduce new elements (borrowed from xs).\n@@ -60,20 +60,20 @@ fn vec_edits<@T>(v: [T], xs: [T]) -> [[T]] {\n         // When Lv == 2u, this is redundant with swap.\n         edits += [vec::reversed(v)];\n     }\n-    for each i: uint in ix(0u, 1u, Lv) { edits += [vec_omit(v, i)]; }\n-    for each i: uint in ix(0u, 1u, Lv) { edits += [vec_dup(v, i)]; }\n-    for each i: uint in ix(0u, 2u, Lv) { edits += [vec_swadj(v, i)]; }\n-    for each i: uint in ix(1u, 2u, Lv) { edits += [vec_prefix(v, i)]; }\n-    for each i: uint in ix(2u, 1u, Lv) { edits += [vec_suffix(v, i)]; }\n-\n-    for each j: uint in ix(0u, 1u, len(xs)) {\n-        for each i: uint in ix(0u, 1u, Lv) {\n+    ix(0u, 1u, Lv) {|i| edits += [vec_omit(v, i)]; };\n+    ix(0u, 1u, Lv) {|i| edits += [vec_dup(v, i)]; };\n+    ix(0u, 2u, Lv) {|i| edits += [vec_swadj(v, i)]; };\n+    ix(1u, 2u, Lv) {|i| edits += [vec_prefix(v, i)]; };\n+    ix(2u, 1u, Lv) {|i| edits += [vec_suffix(v, i)]; };\n+\n+    ix(0u, 1u, len(xs)) {|j|\n+        ix(0u, 1u, Lv) {|i|\n             edits += [vec_poke(v, i, xs[j])];\n-        }\n-        for each i: uint in ix(0u, 0u, Lv) {\n+        };\n+        ix(0u, 0u, Lv) {|i|\n             edits += [vec_insert(v, i, xs[j])];\n-        }\n-    }\n+        };\n+    };\n \n     edits\n }\n@@ -93,7 +93,7 @@ fn vec_to_str(v: [int]) -> str {\n fn show_edits(a: [int], xs: [int]) {\n     log_err \"=== Edits of \" + vec_to_str(a) + \" ===\";\n     let b = vec_edits(a, xs);\n-    for each i: uint in ix(0u, 1u, len(b)) { log_err vec_to_str(b[i]); }\n+    ix(0u, 1u, len(b)) {|i| log_err vec_to_str(b[i]); };\n }\n \n fn demo_edits() {"}, {"sha": "c41f57369fa5e3805e4cdc85a23850e2c8a73749", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -40,14 +40,17 @@ fn sub(t: str, n: int) -> str {\n \n \n /* Using an interator */\n-iter ninetynine() -> int { let n: int = 100; while n > 1 { n -= 1; put n; } }\n+fn ninetynine(it: block(int)) {\n+    let n: int = 100;\n+    while n > 1 { n -= 1; it(n); }\n+}\n \n fn main() {\n-    for each n: int in ninetynine() {\n+    ninetynine {|n|\n         log sub(b1(), n);\n         log sub(b2(), n - 1);\n         log \"\";\n-    }\n+    };\n     log b7();\n     log b8();\n }"}, {"sha": "9a4c841ccb152d784a836aa2eb5955ebbdb271e3", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -47,21 +47,21 @@ fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     log \">\" + id + \" \" + desc;\n     let rng = myrandom(std::rand::mk_rng().next());\n     let op: str = \"\";\n-    for each i: uint in uint::range(0u, n as uint) {\n+    uint::range(0u, n as uint) {|i|\n         str::push_byte(op, select_random(rng.next(100u32), genelist) as u8);\n         if str::byte_len(op) >= LINE_LENGTH() { log op; op = \"\"; }\n-    }\n+    };\n     if str::byte_len(op) > 0u { log op; }\n }\n \n fn make_repeat_fasta(id: str, desc: str, s: str, n: int) {\n     log \">\" + id + \" \" + desc;\n     let op: str = \"\";\n     let sl: uint = str::byte_len(s);\n-    for each i: uint in uint::range(0u, n as uint) {\n+    uint::range(0u, n as uint) {|i|\n         str::push_byte(op, s[i % sl]);\n         if str::byte_len(op) >= LINE_LENGTH() { log op; op = \"\"; }\n-    }\n+    };\n     if str::byte_len(op) > 0u { log op; }\n }\n "}, {"sha": "91501f492e9163700082dbd2eb6804eb34f965ff", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,4 +1,5 @@\n // -*- rust -*-\n+// xfail-pretty\n \n /*\n   A parallel version of fibonacci numbers.\n@@ -74,9 +75,9 @@ fn stress_task(&&id: int) {\n \n fn stress(num_tasks: int) {\n     let tasks = [];\n-    for each i: int in range(0, num_tasks) {\n+    range(0, num_tasks) {|i|\n         tasks += [task::spawn_joinable(copy i, stress_task)];\n-    }\n+    };\n     for t in tasks { task::join(t); }\n }\n \n@@ -98,8 +99,8 @@ fn main(argv: [str]) {\n \n             let out = io::stdout();\n \n-            for each n: int in range(1, max + 1) {\n-                for each i: int in range(0, num_trials) {\n+            range(1, max + 1) {|n|\n+                range(0, num_trials) {|i|\n                     let start = time::precise_time_ns();\n                     let fibn = fib(n);\n                     let stop = time::precise_time_ns();\n@@ -108,8 +109,8 @@ fn main(argv: [str]) {\n \n                     out.write_line(#fmt[\"%d\\t%d\\t%s\", n, fibn,\n                                         u64::str(elapsed)]);\n-                }\n-            }\n+                };\n+            };\n         }\n     }\n }"}, {"sha": "5d385be7318eb74b567435ca6dbf611e16536e39", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -10,16 +10,16 @@ import std::str;\n import std::task;\n \n fn f(&&n: uint) {\n-    for each i in uint::range(0u, n) {\n+    uint::range(0u, n) {|i|\n         let v: [u8] = [];\n         vec::reserve(v, 1000u);\n-    }\n+    };\n }\n \n fn main(args: [str]) {\n     let n =\n         if vec::len(args) < 2u {\n             100u\n         } else { uint::parse_buf(str::bytes(args[1]), 10u) };\n-    for each i in uint::range(0u, 100u) { task::spawn(copy n, f); }\n+    uint::range(0u, 100u) {|i| task::spawn(copy n, f); };\n }"}, {"sha": "0c40bee0a2f2401a106175168de208ce78fdb5b5", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -100,10 +100,7 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        for each kv: @{key: str, val: chan<reduce_proto>} in\n-                 intermediates.items() {\n-            send(kv.val, release);\n-        }\n+        intermediates.values {|v| send(v, release); };\n \n         send(ctrl, mapper_done);\n     }\n@@ -181,10 +178,7 @@ mod map_reduce {\n             }\n         }\n \n-        for each kv: @{key: str, val: chan<reduce_proto>} in reducers.items()\n-                 {\n-            send(kv.val, done);\n-        }\n+        reducers.values {|v| send(v, done); };\n \n         for t in tasks { task::join(t); }\n     }"}, {"sha": "6b4d59fa8713f7d95edac46e30f2236b794057b7", "filename": "src/test/compile-fail/fn-as-iter.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Ffn-as-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Ffn-as-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-as-iter.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,3 +0,0 @@\n-// error-pattern:calling non-iter as sequence of for each loop\n-fn f() -> int { ret 4; }\n-fn main() { for each i in f() { } }"}, {"sha": "0d184978769e5de4ab336c376a75dea5e8efe9e7", "filename": "src/test/compile-fail/for-each-over-bs.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Ffor-each-over-bs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Ffor-each-over-bs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-each-over-bs.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,2 +0,0 @@\n-// error-pattern:sequence in for each loop not a call\n-fn main() { for each p in 1 { } }"}, {"sha": "720c5ef0a7187bcc04112df26177be5f2607d57c", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -10,9 +10,9 @@ fn bitv_to_str(enclosing: fn_info, v: bitv::t) -> str {\n     let s = \"\";\n \n     // error is that the value type in the hash map is var_info, not a box\n-    for each p: @{key: uint, val: @uint} in enclosing.vars.items() {\n-        if bitv::get(v, *p.val) { s += \"foo\"; }\n-    }\n+    enclosing.vars.values {|val|\n+        if bitv::get(v, val) { s += \"foo\"; }\n+    };\n     ret s;\n }\n "}, {"sha": "a2cd88dc2361108b60b7514927c02901e5801fdc", "filename": "src/test/compile-fail/iter-as-fn.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Fiter-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Fiter-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fiter-as-fn.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,3 +0,0 @@\n-// error-pattern:calling iter outside of for each loop\n-iter i() { }\n-fn main() { i(); }"}, {"sha": "5b40ef768c4bda4195df9bdaaf2d65c2f75d2fb5", "filename": "src/test/compile-fail/put-in-fn.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,5 +0,0 @@\n-// error-pattern:put in non-iterator\n-\n-fn f() -> int { put 10; }\n-\n-fn main() { }"}, {"sha": "2ee17ede769f6012875fc27a7b959fd1584a8537", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:moop\n use std;\n import std::uint;\n-fn main() { for each i: uint in uint::range(0u, 10u) { fail \"moop\"; } }\n+fn main() { uint::range(0u, 10u) {|_i| fail \"moop\"; } }"}, {"sha": "5c346f672ec2eb6ca9f818e8e69558c3d76804ff", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,12 +1,11 @@\n // error-pattern:fail\n \n-iter x() -> int {\n+fn x(it: block(int)) {\n     fail;\n-    put 0;\n+    it(0);\n }\n \n fn main() {\n     let a = @0;\n-    for each x in x() {\n-    }\n+    x {|_i|};\n }\n\\ No newline at end of file"}, {"sha": "7b7cba966e949d81d2b5ee18ea740606865e3da4", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,12 +1,10 @@\n // error-pattern:fail\n \n-iter x() -> int {\n+fn x(it: block(int)) {\n     let a = @0;\n-    put 1;\n+    it(1);\n }\n \n fn main() {\n-    for each x in x() {\n-        fail;\n-    }\n+    x {|_x| fail; };\n }\n\\ No newline at end of file"}, {"sha": "c0b8d70d7ce13b4a86bda1ff0ff4791f0c30bf66", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -21,8 +21,8 @@ fn main() {\n \n     let map = map::mk_hashmap(hash, eq);\n     let arr = [];\n-    for each i in uint::range(0u, 10u) {\n+    uint::range(0u, 10u) {|i|\n         arr += [@\"key stuff\"];\n         map.insert(arr, arr + [@\"value stuff\"]);\n-    }\n+    };\n }\n\\ No newline at end of file"}, {"sha": "34f2e5410a406b992a153639c96a9bf195002b11", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -2,12 +2,12 @@\n \n tag thing { a; b; c; }\n \n-iter foo() -> int { put 10; }\n+fn foo(it: block(int)) { it(10); }\n \n fn main() {\n     let x = true;\n     alt a {\n-      a. { x = true; for each i: int in foo() { } }\n+      a. { x = true; foo {|_i|} }\n       b. { x = false; }\n       c. { x = false; }\n     }"}, {"sha": "59488f8730da301cace5dc39101b21f7673e02e5", "filename": "src/test/run-pass/for-each-destruct.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Ffor-each-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Ffor-each-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-each-destruct.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,8 +0,0 @@\n-iter x() -> {x: int, y: int} {\n-    let i = 0;\n-    while i < 40 { put {x: i, y: 30 - i}; i += 10; }\n-}\n-\n-fn main() {\n-    for each {x: x, y: y}: {x: int, y: int} in x() { assert (x + y == 30); }\n-}"}, {"sha": "1e892cf6711ce2f10818c2abb3047543437b742f", "filename": "src/test/run-pass/foreach-box-drop.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-obj ob<@K>(k: K) {\n-    iter foo() -> @{a: K} { put @{a: k}; }\n-}\n-\n-fn x(o: ob<str>) { for each i: @{a: str} in o.foo() { } }\n-\n-fn main() { let o = ob::<str>(\"hi\" + \"there\"); x(o); }"}, {"sha": "472bea23cfe8d9b4f069307e2c584c4fe349886c", "filename": "src/test/run-pass/foreach-nested-2.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested-2.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,29 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-iter two() -> int { put 0; put 1; }\n-\n-iter range(start: int, stop: int) -> int {\n-    let i: int = start;\n-    while i < stop { put i; i += 1; }\n-}\n-\n-fn main() {\n-    let a: [mutable int] = [mutable -1, -1, -1, -1, -1, -1, -1, -1];\n-    let p: int = 0;\n-    for each i: int in two() {\n-        for each j: int in range(0, 2) {\n-            let tmp: int = 10 * i + j;\n-            for each k: int in range(0, 2) { a[p] = 10 * tmp + k; p += 1; }\n-        }\n-    }\n-    assert (a[0] == 0);\n-    assert (a[1] == 1);\n-    assert (a[2] == 10);\n-    assert (a[3] == 11);\n-    assert (a[4] == 100);\n-    assert (a[5] == 101);\n-    assert (a[6] == 110);\n-    assert (a[7] == 111);\n-}"}, {"sha": "08e7b8436117d5914c833e61dd6e62ba5c2f1c10", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -2,14 +2,14 @@\n \n \n // -*- rust -*-\n-iter two() -> int { put 0; put 1; }\n+fn two(it: block(int)) { it(0); it(1); }\n \n fn main() {\n     let a: [mutable int] = [mutable -1, -1, -1, -1];\n     let p: int = 0;\n-    for each i: int in two() {\n-        for each j: int in two() { a[p] = 10 * i + j; p += 1; }\n-    }\n+    two {|i|\n+        two {|j| a[p] = 10 * i + j; p += 1; };\n+    };\n     assert (a[0] == 0);\n     assert (a[1] == 1);\n     assert (a[2] == 10);"}, {"sha": "fe9c42a173899f5d4248bd28731dcc224bd1f112", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,20 +1,21 @@\n \n \n-iter pairs() -> {_0: int, _1: int} {\n+fn pairs(it: block((int, int))) {\n     let i: int = 0;\n     let j: int = 0;\n-    while i < 10 { put {_0: i, _1: j}; i += 1; j += i; }\n+    while i < 10 { it((i, j)); i += 1; j += i; }\n }\n \n fn main() {\n     let i: int = 10;\n     let j: int = 0;\n-    for each p: {_0: int, _1: int} in pairs() {\n-        log p._0;\n-        log p._1;\n-        assert (p._0 + 10 == i);\n+    pairs() {|p|\n+        let (_0, _1) = p;\n+        log _0;\n+        log _1;\n+        assert (_0 + 10 == i);\n         i += 1;\n-        j = p._1;\n-    }\n+        j = _1;\n+    };\n     assert (j == 45);\n }"}, {"sha": "8aefb2a763529e743b63146e8ece0f382ca14056", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -4,13 +4,13 @@\n // -*- rust -*-\n fn main() {\n     let sum: int = 0;\n-    for each i: int in first_ten() { log \"main\"; log i; sum = sum + i; }\n+    first_ten {|i| log \"main\"; log i; sum = sum + i; };\n     log \"sum\";\n     log sum;\n     assert (sum == 45);\n }\n \n-iter first_ten() -> int {\n+fn first_ten(it: block(int)) {\n     let i: int = 0;\n-    while i < 10 { log \"first_ten\"; put i; i = i + 1; }\n+    while i < 10 { log \"first_ten\"; it(i); i = i + 1; }\n }"}, {"sha": "7e43703a9b25d120a7d7ed89461db736f0d1f547", "filename": "src/test/run-pass/foreach-simple.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fforeach-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fforeach-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,10 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-fn main() { for each i: int in first_ten() { log \"main\"; } }\n-\n-iter first_ten() -> int {\n-    let i: int = 90;\n-    while i < 100 { log \"first_ten\"; log i; put i; i = i + 1; }\n-}"}, {"sha": "f0b65a3091f64ac216f608c44440b6a4eaf1e665", "filename": "src/test/run-pass/foreach-unique-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-unique-drop.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,8 +1,8 @@\n \n obj ob<@K>(k: K) {\n-    iter foo() -> ~{a: K} { put ~{a: k}; }\n+    fn foo(it: block(~{a: K})) { it(~{a: k}); }\n }\n \n-fn x(o: ob<str>) { for each i: ~{a: str} in o.foo() { } }\n+fn x(o: ob<str>) { o.foo() {|_i|}; }\n \n fn main() { let o = ob::<str>(\"hi\" + \"there\"); x(o); }"}, {"sha": "9d363906487c390bb551e8b238b044e5f35140cb", "filename": "src/test/run-pass/generic-iter-frame.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-iter-frame.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-\n-// Contrived example? No. It showed up in rustc's resolve pass.\n-iter i() { put (); }\n-\n-fn foo<T>(t: T) { let x: int = 10; for each j: () in i() { log x; } }\n-\n-fn main() { foo(0xdeadbeef_u); }"}, {"sha": "02a4956feecd18dc696c42898c3a0b77e081126d", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,13 +1,13 @@\n \n \n-iter range(a: int, b: int) -> int {\n+fn range(a: int, b: int, it: block(int)) {\n     assert (a < b);\n     let i: int = a;\n-    while i < b { put i; i += 1; }\n+    while i < b { it(i); i += 1; }\n }\n \n fn main() {\n     let sum: int = 0;\n-    for each x: int in range(0, 100) { sum += x; }\n+    range(0, 100) {|x| sum += x; };\n     log sum;\n }"}, {"sha": "b450a34c4110d6e3f98748ec1a0431350f202915", "filename": "src/test/run-pass/iter-ret.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fiter-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fiter-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-ret.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,7 +0,0 @@\n-\n-\n-iter x() -> int { }\n-\n-fn f() -> bool { for each i: int in x() { ret true; } ret false; }\n-\n-fn main(args: [str]) { f(); }"}, {"sha": "b610defb5132b8e20dc0a132d538f675eea86419", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -14,7 +14,7 @@ fn iloop(&&_i: ()) {\n }\n \n fn main() {\n-    for each i in uint::range(0u, 100u) {\n+    uint::range(0u, 100u) {|_i|\n         task::spawn((), iloop);\n-    }\n+    };\n }\n\\ No newline at end of file"}, {"sha": "fc927c8269817b45f1ce7b402d318eae144cbc07", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -10,8 +10,8 @@ fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n \n fn main() {\n     let x = ~{x: 1, y: 2, z: 3};\n-    for each i: uint in uint::range(0u, 10000u) {\n+    uint::range(0u, 10000u) {|_i|\n         assert (test(true, x) == 2);\n-    }\n+    };\n     assert (test(false, x) == 5);\n }"}, {"sha": "2693a0295f5b0a7044d4de4fe3bfbbdca75cfc32", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -10,8 +10,8 @@ fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n \n fn main() {\n     let x = @{x: 1, y: 2, z: 3};\n-    for each i: uint in uint::range(0u, 10000u) {\n+    uint::range(0u, 10000u) {|i|\n         assert (test(true, x) == 2);\n-    }\n+    };\n     assert (test(false, x) == 5);\n }"}, {"sha": "bc4c4be5330b5aacf944d1044550996c1b37e422", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -10,10 +10,10 @@ fn foo(src: uint) {\n \n     alt some(src) {\n       some(src_id) {\n-        for each i: uint in uint::range(0u, 10u) {\n+        uint::range(0u, 10u) {|i|\n             let yyy = src_id;\n             assert (yyy == 0u);\n-        }\n+        };\n       }\n       _ { }\n     }"}, {"sha": "4f23b58f268918bbe3832c5c2b435a73a4b492d9", "filename": "src/test/run-pass/polymorphic-iter.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fpolymorphic-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5a08384d8ff297a50220df836f31610b23cf31/src%2Ftest%2Frun-pass%2Fpolymorphic-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpolymorphic-iter.rs?ref=fd5a08384d8ff297a50220df836f31610b23cf31", "patch": "@@ -1,2 +0,0 @@\n-iter iter2<@T>() -> T { }\n-fn main() { for each i: int in iter2() { } }"}, {"sha": "98b408bf5ac79d600155c65c0bd2149ce4494427", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -32,10 +32,10 @@ fn test_init() {\n fn test_grow() {\n     let myport = port();\n     let mychan = chan(myport);\n-    for each i: uint in uint::range(0u, 100u) {\n+    uint::range(0u, 100u) {|i|\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         comm::send(mychan, val);\n-    }\n+    };\n }\n \n \n@@ -50,26 +50,26 @@ fn test_shrink1() {\n fn test_shrink2() {\n     let myport = port();\n     let mychan = chan(myport);\n-    for each i: uint in uint::range(0u, 100u) {\n+    uint::range(0u, 100u) {|_i|\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n         send(mychan, val);\n-    }\n-    for each i: uint in uint::range(0u, 100u) { let x = recv(myport); }\n+    };\n+    uint::range(0u, 100u) {|_i| let x = recv(myport); };\n }\n \n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n     let myport = port();\n     let mychan = chan(myport);\n-    for each i: uint in uint::range(0u, 100u) {\n+    uint::range(0u, 100u) {|i|\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n         send(mychan, val);\n         let x = recv(myport);\n         assert (x.val1 == i as u32);\n         assert (x.val2 == i as u32);\n         assert (x.val3 == i as u32);\n-    }\n+    };\n }\n \n \n@@ -78,19 +78,19 @@ fn test_rotate() {\n fn test_rotate_grow() {\n     let myport = port::<record>();\n     let mychan = chan(myport);\n-    for each j: uint in uint::range(0u, 10u) {\n-        for each i: uint in uint::range(0u, 10u) {\n+    uint::range(0u, 10u) {|j|\n+        uint::range(0u, 10u) {|i|\n             let val: record =\n                 {val1: i as u32, val2: i as u32, val3: i as u32};\n             send(mychan, val);\n-        }\n-        for each i: uint in uint::range(0u, 10u) {\n+        };\n+        uint::range(0u, 10u) {|i|\n             let x = recv(myport);\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);\n             assert (x.val3 == i as u32);\n-        }\n-    }\n+        };\n+    };\n }\n \n fn main() {"}, {"sha": "7d8221173dc092d6a448e0ad39aa69d3993a3b0b", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -19,7 +19,7 @@ fn iloop(&&_i: ()) {\n }\n \n fn main() {\n-    for each i in uint::range(0u, 16u) {\n+    uint::range(0u, 16u) {|_i|\n         task::spawn((), iloop);\n-    }\n+    };\n }\n\\ No newline at end of file"}, {"sha": "aec125ffb0e1015c970c9ec57a3110f76e1190b7", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -1,12 +1,12 @@\n \n \n-iter range(lo: uint, hi: uint) -> uint {\n+fn range(lo: uint, hi: uint, it: block(uint)) {\n     let lo_ = lo;\n-    while lo_ < hi { put lo_; lo_ += 1u; }\n+    while lo_ < hi { it(lo_); lo_ += 1u; }\n }\n \n fn create_index<@T>(index: [{a: T, b: uint}], hash_fn: fn(T) -> uint) {\n-    for each i: uint in range(0u, 256u) { let bucket: [T] = []; }\n+    range(0u, 256u) {|_i| let bucket: [T] = []; };\n }\n \n fn main() { }"}, {"sha": "3ed6cda1c5331f5150a5fcf47810d3157e17458e", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -12,16 +12,16 @@ fn main() {\n     let p = comm::port();\n     let n = 100u;\n     let expected = 0u;\n-    for each i in uint::range(0u, n) {\n+    uint::range(0u, n) {|i|\n         task::spawn((comm::chan(p), i), child);\n         expected += i;\n-    }\n+    };\n \n     let actual = 0u;\n-    for each i in uint::range(0u, n) {\n+    uint::range(0u, n) {|_i|\n         let j = comm::recv(p);\n         actual += *j;\n-    }\n+    };\n \n     assert expected == actual;\n }\n\\ No newline at end of file"}, {"sha": "4b93d54b133f6438f5cc4aa8b67b957c5f565c7b", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050170d2af94ea81b9b964901e4de7eb79583332/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=050170d2af94ea81b9b964901e4de7eb79583332", "patch": "@@ -17,10 +17,6 @@ fn bind_id_1() { bind id(fail); }\n \n fn bind_id_2() { bind id(ret); }\n \n-iter put_break() -> int {\n-    while true { put break; }\n-}\n-\n fn fail_fail() { fail fail; }\n \n fn log_fail() { log_err fail; }"}]}