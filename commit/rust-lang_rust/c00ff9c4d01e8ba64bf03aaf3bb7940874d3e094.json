{"sha": "c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "node_id": "C_kwDOAAsO6NoAKGMwMGZmOWM0ZDAxZThiYTY0YmYwM2FhZjNiYjc5NDA4NzRkM2UwOTQ", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-10-27T20:48:41Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-10-27T20:48:47Z"}, "message": "DoIt", "tree": {"sha": "3a048102d81033d88e258a103fe67f2d6479a9cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a048102d81033d88e258a103fe67f2d6479a9cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "html_url": "https://github.com/rust-lang/rust/commit/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da281b6068a7d889ae89a9bd8991284cc9b7535", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da281b6068a7d889ae89a9bd8991284cc9b7535", "html_url": "https://github.com/rust-lang/rust/commit/0da281b6068a7d889ae89a9bd8991284cc9b7535"}], "stats": {"total": 139, "additions": 56, "deletions": 83}, "files": [{"sha": "7cedfca5728c74656a068ba8c6c963514cac300d", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -146,3 +146,5 @@ hir_analysis_const_impl_for_non_const_trait =\n \n hir_analysis_const_bound_for_non_const_trait =\n     ~const can only be applied to `#[const_trait]` traits\n+\n+hir_analysis_self_in_impl_self = `Self` is not valid at this location"}, {"sha": "877cd75587be82173008eb37080764e20af81591", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -319,7 +319,37 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     }\n                 }\n                 ItemKind::TyAlias(self_ty, _) => icx.to_ty(self_ty),\n-                ItemKind::Impl(hir::Impl { self_ty, .. }) => icx.to_ty(*self_ty),\n+                ItemKind::Impl(\n+                    hir::Impl { self_ty, .. }\n+                ) => {\n+                    struct MyVisitor(bool);\n+                    impl<'v> hir::intravisit::Visitor<'v> for MyVisitor {\n+                        fn visit_ty(&mut self, t: &'v Ty<'v>) {\n+                            if matches!(\n+                                &t.kind,\n+                                TyKind::Path(hir::QPath::Resolved(\n+                                    _,\n+                                    Path {\n+                                        res: hir::def::Res::SelfTyAlias { .. },\n+                                        ..\n+                                    },\n+                                ))\n+                            ) {\n+                                self.0 = true;\n+                                return;\n+                            }\n+                            hir::intravisit::walk_ty(self, t);\n+                        }\n+                    }\n+\n+                    let mut my_visitor = MyVisitor(false);\n+                    my_visitor.visit_ty(self_ty);\n+\n+                    match my_visitor.0 {\n+                        true => { tcx.sess.emit_err(crate::errors::SelfInImplSelf { span: self_ty.span}); tcx.ty_error() },\n+                        false => icx.to_ty(*self_ty),\n+                    }\n+                },\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_fn_def(def_id.to_def_id(), substs)"}, {"sha": "c3bfd0437ada315a62f5300234c5d78f95165c1e", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -270,3 +270,10 @@ pub struct ConstBoundForNonConstTrait {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_self_in_impl_self)]\n+pub struct SelfInImplSelf {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "3e3d5ee2fda0e954d4174700dd6a03608320d61b", "filename": "src/test/ui/resolve/issue-23305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -3,6 +3,6 @@ pub trait ToNbt<T> {\n }\n \n impl dyn ToNbt<Self> {}\n-//~^ ERROR cycle detected\n+//~^ ERROR `Self` is not valid at this location\n \n fn main() {}"}, {"sha": "1b2745de321c0f5a0716404e0315cfcfc46c753f", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -1,22 +1,8 @@\n-error[E0391]: cycle detected when computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:21>`\n-  --> $DIR/issue-23305.rs:5:16\n+error: `Self` is not valid at this location\n+  --> $DIR/issue-23305.rs:5:6\n    |\n LL | impl dyn ToNbt<Self> {}\n-   |                ^^^^\n-   |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:21>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/issue-23305.rs:1:1\n-   |\n-LL | / pub trait ToNbt<T> {\n-LL | |     fn new(val: T) -> Self;\n-LL | | }\n-LL | |\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   |      ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "f845e780bbfe798dee346b96feee6cea8a98f116", "filename": "src/test/ui/resolve/resolve-self-in-impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.rs?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -11,10 +11,10 @@ impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK\n \n-impl Tr for Self {} //~ ERROR cycle detected\n-impl Tr for S<Self> {} //~ ERROR cycle detected\n-impl Self {} //~ ERROR cycle detected\n-impl S<Self> {} //~ ERROR cycle detected\n+impl Tr for Self {} //~ ERROR `Self` is not valid at this location\n+impl Tr for S<Self> {} //~ ERROR `Self` is not valid at this location\n+impl Self {} //~ ERROR `Self` is not valid at this location\n+impl S<Self> {} //~ ERROR `Self` is not valid at this location\n impl Tr<Self::A> for S {} //~ ERROR cycle detected\n \n fn main() {}"}, {"sha": "93e2b4695fc06b25906557e79e1b1c25ca10e173", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 8, "deletions": 60, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=c00ff9c4d01e8ba64bf03aaf3bb7940874d3e094", "patch": "@@ -1,78 +1,26 @@\n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:17>`\n+error: `Self` is not valid at this location\n   --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n LL | impl Tr for Self {}\n    |             ^^^^\n-   |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:17>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:20>`\n-  --> $DIR/resolve-self-in-impl.rs:15:15\n+error: `Self` is not valid at this location\n+  --> $DIR/resolve-self-in-impl.rs:15:13\n    |\n LL | impl Tr for S<Self> {}\n-   |               ^^^^\n-   |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:20>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   |             ^^^^^^^\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:10>`\n+error: `Self` is not valid at this location\n   --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n LL | impl Self {}\n    |      ^^^^\n-   |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:10>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n \n-error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:13>`\n-  --> $DIR/resolve-self-in-impl.rs:17:8\n+error: `Self` is not valid at this location\n+  --> $DIR/resolve-self-in-impl.rs:17:6\n    |\n LL | impl S<Self> {}\n-   |        ^^^^\n-   |\n-   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:13>` again\n-note: cycle used when collecting item types in top-level module\n-  --> $DIR/resolve-self-in-impl.rs:1:1\n-   |\n-LL | / #![feature(associated_type_defaults)]\n-LL | |\n-LL | | struct S<T = u8>(T);\n-LL | | trait Tr<T = u8> {\n-...  |\n-LL | |\n-LL | | fn main() {}\n-   | |____________^\n+   |      ^^^^^^^\n \n error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:23>`\n   --> $DIR/resolve-self-in-impl.rs:18:1"}]}