{"sha": "9011524454aff19110a3efc1cd3bb68657a0f8ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTE1MjQ0NTRhZmYxOTExMGEzZWZjMWNkM2JiNjg2NTdhMGY4ZWU=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T17:16:38Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T17:16:38Z"}, "message": "Remove `strip_linker_suffix`", "tree": {"sha": "7b6ea69c889e8ae74617b966f653604a54210981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b6ea69c889e8ae74617b966f653604a54210981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9011524454aff19110a3efc1cd3bb68657a0f8ee", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYMeO9hUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLgSVwD+LwahZbGuKRo4XmxwBjjduAQOrgwL\nvhVuRBklpYJsPdsA/2EeEPpz16tDDpH/w8rYCmXlJ4i+jCCyPZd0gQwOqS4L\n=6Xj2\n-----END PGP SIGNATURE-----", "payload": "tree 7b6ea69c889e8ae74617b966f653604a54210981\nparent a67a65359f812a6970fc381bdd794b8f7792ce56\nauthor hyd-dev <yd-huang@outlook.com> 1623690998 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1623690998 +0800\n\nRemove `strip_linker_suffix`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9011524454aff19110a3efc1cd3bb68657a0f8ee", "html_url": "https://github.com/rust-lang/rust/commit/9011524454aff19110a3efc1cd3bb68657a0f8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9011524454aff19110a3efc1cd3bb68657a0f8ee/comments", "author": null, "committer": null, "parents": [{"sha": "a67a65359f812a6970fc381bdd794b8f7792ce56", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67a65359f812a6970fc381bdd794b8f7792ce56", "html_url": "https://github.com/rust-lang/rust/commit/a67a65359f812a6970fc381bdd794b8f7792ce56"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "b99a446577ac43d8c12474ce4a0770e75c29bbad", "filename": "src/helpers.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9011524454aff19110a3efc1cd3bb68657a0f8ee", "patch": "@@ -723,11 +723,6 @@ where\n     throw_ub_format!(\"incorrect number of arguments: got {}, expected {}\", args.len(), N)\n }\n \n-/// Strip linker suffixes (seen on 32-bit macOS).\n-pub fn strip_linker_suffix(link_name: &str) -> &str {\n-    link_name.trim_end_matches(\"$UNIX2003\")\n-}\n-\n pub fn isolation_abort_error(name: &str) -> InterpResult<'static> {\n     throw_machine_stop!(TerminationInfo::UnsupportedInIsolation(format!(\n         \"{} not available when isolation is enabled\","}, {"sha": "3745b8cf2fa1d4ca37adee9afc2a7a45f281893c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=9011524454aff19110a3efc1cd3bb68657a0f8ee", "patch": "@@ -25,7 +25,6 @@ use rustc_target::{\n \n use super::backtrace::EvalContextExt as _;\n use crate::*;\n-use helpers::strip_linker_suffix;\n \n /// Returned by `emulate_foreign_item_by_name`.\n pub enum EmulateByNameResult {\n@@ -216,12 +215,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .first_attr_value_str_by_name(&attrs, sym::link_name)\n             .unwrap_or_else(|| this.tcx.item_name(def_id));\n         let link_name = link_name_sym.as_str();\n-        let link_name = strip_linker_suffix(&link_name);\n         let tcx = this.tcx.tcx;\n \n         // First: functions that diverge.\n         let (dest, ret) = match ret {\n-            None => match link_name {\n+            None => match &*link_name {\n                 \"miri_start_panic\" => {\n                     // `check_shim` happens inside `handle_miri_start_panic`.\n                     this.handle_miri_start_panic(abi, link_name_sym, args, unwind)?;\n@@ -306,9 +304,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n         // shim, add it to the corresponding submodule.\n-        let shim_name = link_name.as_str();\n-        let shim_name = strip_linker_suffix(&shim_name);\n-        match shim_name {\n+        match &*link_name.as_str() {\n             // Miri-specific extern functions\n             \"miri_static_root\" => {\n                 let &[ref ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n@@ -499,7 +495,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[ref f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n-                let f = match shim_name {\n+                let f = match &*link_name.as_str() {\n                     \"cbrtf\" => f.cbrt(),\n                     \"coshf\" => f.cosh(),\n                     \"sinhf\" => f.sinh(),\n@@ -522,7 +518,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f1 = f32::from_bits(this.read_scalar(f1)?.to_u32()?);\n                 let f2 = f32::from_bits(this.read_scalar(f2)?.to_u32()?);\n-                let n = match shim_name {\n+                let n = match &*link_name.as_str() {\n                     \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n                     \"atan2f\" => f1.atan2(f2),\n                     _ => bug!(),\n@@ -541,7 +537,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[ref f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n-                let f = match shim_name {\n+                let f = match &*link_name.as_str() {\n                     \"cbrt\" => f.cbrt(),\n                     \"cosh\" => f.cosh(),\n                     \"sinh\" => f.sinh(),\n@@ -562,7 +558,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(f1)?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(f2)?.to_u64()?);\n-                let n = match shim_name {\n+                let n = match &*link_name.as_str() {\n                     \"_hypot\" | \"hypot\" => f1.hypot(f2),\n                     \"atan2\" => f1.atan2(f2),\n                     _ => bug!(),"}, {"sha": "4035deff63ef048e8e7d01563fc0414c1401ec74", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=9011524454aff19110a3efc1cd3bb68657a0f8ee", "patch": "@@ -6,7 +6,6 @@ use rustc_target::abi::{Align, LayoutOf, Size};\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n@@ -24,7 +23,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n-        match strip_linker_suffix(&link_name.as_str()) {\n+        match &*link_name.as_str() {\n             // Environment related shims\n             \"getenv\" => {\n                 let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "33889963bc4481bcbaacb112290d71355b55a14d", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=9011524454aff19110a3efc1cd3bb68657a0f8ee", "patch": "@@ -3,7 +3,6 @@ use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::linux::sync::futex;\n@@ -22,7 +21,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n-        match strip_linker_suffix(&link_name.as_str()) {\n+        match &*link_name.as_str() {\n             // errno\n             \"__errno_location\" => {\n                 let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "47a860b96a87a1e37b3a99d9ad824a0864b5d5da", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=9011524454aff19110a3efc1cd3bb68657a0f8ee", "patch": "@@ -3,7 +3,6 @@ use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n@@ -20,7 +19,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n-        match strip_linker_suffix(&link_name.as_str()) {\n+        match &*link_name.as_str() {\n             // errno\n             \"__error\" => {\n                 let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "1921af359423917fe9fc2561575f1f8df2f4ce1f", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9011524454aff19110a3efc1cd3bb68657a0f8ee/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=9011524454aff19110a3efc1cd3bb68657a0f8ee", "patch": "@@ -6,7 +6,6 @@ use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n-use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::windows::sync::EvalContextExt as _;\n \n@@ -27,7 +26,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // DWORD = ULONG = u32\n         // BOOL = i32\n         // BOOLEAN = u8\n-        match strip_linker_suffix(&link_name.as_str()) {\n+        match &*link_name.as_str() {\n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n                 let &[ref name, ref buf, ref size] ="}]}