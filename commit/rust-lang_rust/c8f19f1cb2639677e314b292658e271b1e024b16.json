{"sha": "c8f19f1cb2639677e314b292658e271b1e024b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZjE5ZjFjYjI2Mzk2NzdlMzE0YjI5MjY1OGUyNzFiMWUwMjRiMTY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-07T19:28:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-07T19:28:55Z"}, "message": "Make codegen_call_inner a bit more readable", "tree": {"sha": "c27589bf145ef57c21fda3ba8a6dc97f3065bfa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c27589bf145ef57c21fda3ba8a6dc97f3065bfa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8f19f1cb2639677e314b292658e271b1e024b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f19f1cb2639677e314b292658e271b1e024b16", "html_url": "https://github.com/rust-lang/rust/commit/c8f19f1cb2639677e314b292658e271b1e024b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8f19f1cb2639677e314b292658e271b1e024b16/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2709d2ee78036f8d26922427e147f3831a97c162", "url": "https://api.github.com/repos/rust-lang/rust/commits/2709d2ee78036f8d26922427e147f3831a97c162", "html_url": "https://github.com/rust-lang/rust/commit/2709d2ee78036f8d26922427e147f3831a97c162"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "4a7943d3c4e6debaba1f15b03e78d58152ece5ca", "filename": "src/abi.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c8f19f1cb2639677e314b292658e271b1e024b16/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f19f1cb2639677e314b292658e271b1e024b16/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=c8f19f1cb2639677e314b292658e271b1e024b16", "patch": "@@ -619,28 +619,26 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n         _ => None,\n     };\n \n-    let func_ref: Option<Value>; // Indirect call target\n-\n-    let first_arg = {\n-        if let Some(Instance {\n+    //   | Indirect call target\n+    //   v         v the first argument to be passed\n+    let (func_ref, first_arg) = match instance {\n+        // Trait object call\n+        Some(Instance {\n             def: InstanceDef::Virtual(_, idx),\n             ..\n-        }) = instance\n-        {\n+        }) => {\n             let (ptr, method) = crate::vtable::get_ptr_and_method_ref(fx, args[0], idx);\n-            func_ref = Some(method);\n-            Some(ptr)\n-        } else {\n-            func_ref = if instance.is_none() {\n-                let func = trans_operand(fx, func.expect(\"indirect call without func Operand\"));\n-                Some(func.load_scalar(fx))\n-            } else {\n-                None\n-            };\n+            (Some(method), Some(ptr))\n+        }\n \n-            args.get(0).map(|arg| adjust_arg_for_abi(fx, *arg))\n+        // Normal call\n+        Some(_) => (None, args.get(0).map(|arg| adjust_arg_for_abi(fx, *arg))),\n+\n+        // Indirect call\n+        None => {\n+            let func = trans_operand(fx, func.expect(\"indirect call without func Operand\")).load_scalar(fx);\n+            (Some(func), args.get(0).map(|arg| adjust_arg_for_abi(fx, *arg)))\n         }\n-        .into_iter()\n     };\n \n     let call_args: Vec<Value> = return_ptr"}]}