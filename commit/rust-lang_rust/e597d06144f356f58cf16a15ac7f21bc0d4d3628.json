{"sha": "e597d06144f356f58cf16a15ac7f21bc0d4d3628", "node_id": "C_kwDOAAsO6NoAKGU1OTdkMDYxNDRmMzU2ZjU4Y2YxNmExNWFjN2YyMWJjMGQ0ZDM2Mjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T20:58:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T20:58:56Z"}, "message": "Rollup merge of #95547 - RalfJung:ptr-int-transmutes, r=scottmcm\n\ncaution against ptr-to-int transmutes\n\nI don't know how strong of a statement we want to make here, but I am very concerned that the current docs could be interpreted as saying that ptr-to-int transmutes are just as okay as transmuting `*mut T` into an `&mut T`.\n\nExamples [like this](https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431) show that ptr-to-int transmutes are deeply suspicious -- they are either UB, or they don't round-trip properly, or we have to basically say that `transmute` will actively look for pointers and do all the things a ptr-to-int cast does (which includes a global side-effect of marking the pointed-to allocation as 'exposed').\n\nAnother alternative might be to simply not talk about them... but we *do* want people to use casts rather than transmutes for this.\n\nCc `@rust-lang/lang`", "tree": {"sha": "f8f6f6b58e219036edef778c0c9bdac65e6e34a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f6f6b58e219036edef778c0c9bdac65e6e34a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e597d06144f356f58cf16a15ac7f21bc0d4d3628", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTK2QCRBK7hj4Ov3rIwAAyAAIAE/t/vcP4jV6dhFhZYgCHpEn\nEW6elqG4TYp1q0ODmqKwV0m+o+8+/whrYw2/lJt3ldeoyM6n5BywwXyb7Yw9GVjq\nh0ZOIgFQM2QLOBeJXSFJjoc2MdNEwzxSJebvvAq9aedJnVsV094MmJSleAhUqvNR\nn9fHkbf1zqCG5wSrVlej/2ygWLOg2mLQmLBoXdAfGFGfS8pUU4BpWSSO8Pb7mG2L\nwhKKcktvdVkiI2x2h/w3sBnGdtnlkqTPvb7FK+ugWL1tmGiQj9cTdzEouHUda04D\nYoGmFVXD3RtFnJqLUvLU/YSuSOS+GWs2XnFyMdMSL5I4xT05jcLiLpaYrkOp2Y4=\n=HqLp\n-----END PGP SIGNATURE-----\n", "payload": "tree f8f6f6b58e219036edef778c0c9bdac65e6e34a3\nparent c5e7e952925be74fc7dd6a2fac8e16df9e2044f6\nparent dd85a7682cf17103ec72eb1606fabf04bbf52971\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649192336 +0200\ncommitter GitHub <noreply@github.com> 1649192336 +0200\n\nRollup merge of #95547 - RalfJung:ptr-int-transmutes, r=scottmcm\n\ncaution against ptr-to-int transmutes\n\nI don't know how strong of a statement we want to make here, but I am very concerned that the current docs could be interpreted as saying that ptr-to-int transmutes are just as okay as transmuting `*mut T` into an `&mut T`.\n\nExamples [like this](https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431) show that ptr-to-int transmutes are deeply suspicious -- they are either UB, or they don't round-trip properly, or we have to basically say that `transmute` will actively look for pointers and do all the things a ptr-to-int cast does (which includes a global side-effect of marking the pointed-to allocation as 'exposed').\n\nAnother alternative might be to simply not talk about them... but we *do* want people to use casts rather than transmutes for this.\n\nCc `@rust-lang/lang`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e597d06144f356f58cf16a15ac7f21bc0d4d3628", "html_url": "https://github.com/rust-lang/rust/commit/e597d06144f356f58cf16a15ac7f21bc0d4d3628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e597d06144f356f58cf16a15ac7f21bc0d4d3628/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6", "html_url": "https://github.com/rust-lang/rust/commit/c5e7e952925be74fc7dd6a2fac8e16df9e2044f6"}, {"sha": "dd85a7682cf17103ec72eb1606fabf04bbf52971", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd85a7682cf17103ec72eb1606fabf04bbf52971", "html_url": "https://github.com/rust-lang/rust/commit/dd85a7682cf17103ec72eb1606fabf04bbf52971"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "27063952adbad4186204fb97b76f6388ab6f6d0d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e597d06144f356f58cf16a15ac7f21bc0d4d3628/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e597d06144f356f58cf16a15ac7f21bc0d4d3628/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=e597d06144f356f58cf16a15ac7f21bc0d4d3628", "patch": "@@ -991,6 +991,16 @@ extern \"rust-intrinsic\" {\n     /// let ptr_num_cast = ptr as *const i32 as usize;\n     /// ```\n     ///\n+    /// Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined\n+    /// behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave\n+    /// as expected -- this is touching on many unspecified aspects of the Rust memory model.\n+    /// Depending on what the code is doing, the following alternatives are preferrable to\n+    /// pointer-to-integer transmutation:\n+    /// - If the code just wants to store data of arbitrary type in some buffer and needs to pick a\n+    ///   type for that buffer, it can use [`MaybeUninit`][mem::MaybeUninit].\n+    /// - If the code actually wants to work on the address the pointer points to, it can use `as`\n+    ///   casts or [`ptr.addr()`][pointer::addr].\n+    ///\n     /// Turning a `*mut T` into an `&mut T`:\n     ///\n     /// ```"}]}