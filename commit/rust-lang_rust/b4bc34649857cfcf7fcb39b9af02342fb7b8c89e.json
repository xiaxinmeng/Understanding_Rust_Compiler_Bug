{"sha": "b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YmMzNDY0OTg1N2NmY2Y3ZmNiMzliOWFmMDIzNDJmYjdiOGM4OWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-25T09:01:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-25T09:01:12Z"}, "message": "Merge #5863\n\n5863: Cleanup invert-if\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f23650fe42fdc32d81108ff891d17d0bb7b60b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23650fe42fdc32d81108ff891d17d0bb7b60b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRNNYCRBK7hj4Ov3rIwAAdHIIAGWo/xOI30CLSde7w0xDFtGm\n3i0BKcYAZgISJ4IGl2rSwrJWkEMHGYQIEwfCsQmln/ejqWnbCEmAU7GrhjL2VnsY\ngJOy42qzdQ8aIO839W0jSL8y20TebYjAXSVMjdGQWZ7S5LhcuLCnRovvby3AA9mJ\nPMz6Rp+wXdNs6uTAOff2vlZmzlGVDPhRr5KtCcNwbIPwvOnU8e/xpp73aICHOY0D\ng7f2lNv3QuQQQUxZOoEH+TVlOQzVGRMy6u8mILQLa7T1ky4ye6Owzp1BGdSg5dx2\nYAJNLl3JJID8B/IREjLVU1wbWm/3whKvoZix+Xg/zgtr40rFgOfjHMUv0I5azlc=\n=ps+T\n-----END PGP SIGNATURE-----\n", "payload": "tree f23650fe42fdc32d81108ff891d17d0bb7b60b6f\nparent ef9cea945d5767e7c60d5931a7649a73caea23ad\nparent 7721accebf5e2c39bd4cb984346b11b72c12ba56\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598346072 +0000\ncommitter GitHub <noreply@github.com> 1598346072 +0000\n\nMerge #5863\n\n5863: Cleanup invert-if\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "html_url": "https://github.com/rust-lang/rust/commit/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9cea945d5767e7c60d5931a7649a73caea23ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9cea945d5767e7c60d5931a7649a73caea23ad", "html_url": "https://github.com/rust-lang/rust/commit/ef9cea945d5767e7c60d5931a7649a73caea23ad"}, {"sha": "7721accebf5e2c39bd4cb984346b11b72c12ba56", "url": "https://api.github.com/repos/rust-lang/rust/commits/7721accebf5e2c39bd4cb984346b11b72c12ba56", "html_url": "https://github.com/rust-lang/rust/commit/7721accebf5e2c39bd4cb984346b11b72c12ba56"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "daa7b64f7da08e1b396bc9e554e926dfa09130e4", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "patch": "@@ -8,10 +8,10 @@ use ide_db::RootDatabase;\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n-    ast::{self, make, NameOwner},\n+    ast::{self, make, ArgListOwner, NameOwner},\n     AstNode, Direction,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxText, TextSize, T,\n+    SyntaxNode, TextSize, T,\n };\n \n use crate::assist_config::SnippetCap;\n@@ -180,23 +180,18 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             _ => None,\n         },\n         ast::Expr::MethodCallExpr(mce) => {\n-            const IS_SOME_TEXT: &str = \"is_some\";\n-            const IS_NONE_TEXT: &str = \"is_none\";\n-            const IS_OK_TEXT: &str = \"is_ok\";\n-            const IS_ERR_TEXT: &str = \"is_err\";\n-\n-            let name = mce.name_ref()?;\n-            let name_text = name.text();\n-\n-            let caller = || -> Option<SyntaxText> { Some(mce.receiver()?.syntax().text()) };\n-\n-            match name_text {\n-                x if x == IS_SOME_TEXT => make::expr_method_call(IS_NONE_TEXT, caller),\n-                x if x == IS_NONE_TEXT => make::expr_method_call(IS_SOME_TEXT, caller),\n-                x if x == IS_OK_TEXT => make::expr_method_call(IS_ERR_TEXT, caller),\n-                x if x == IS_ERR_TEXT => make::expr_method_call(IS_OK_TEXT, caller),\n-                _ => None,\n-            }\n+            let receiver = mce.receiver()?;\n+            let method = mce.name_ref()?;\n+            let arg_list = mce.arg_list()?;\n+\n+            let method = match method.text().as_str() {\n+                \"is_some\" => \"is_none\",\n+                \"is_none\" => \"is_some\",\n+                \"is_ok\" => \"is_err\",\n+                \"is_err\" => \"is_ok\",\n+                _ => return None,\n+            };\n+            Some(make::expr_method_call(receiver, method, arg_list))\n         }\n         ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n         // FIXME:"}, {"sha": "7ba6259900146a3242f27a17e775c74be90f95ca", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "patch": "@@ -7,7 +7,7 @@\n use itertools::Itertools;\n use stdx::format_to;\n \n-use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxText, SyntaxToken};\n+use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxToken};\n \n pub fn name(text: &str) -> ast::Name {\n     ast_from_text(&format!(\"mod {};\", text))\n@@ -137,11 +137,8 @@ pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n pub fn expr_call(f: ast::Expr, arg_list: ast::ArgList) -> ast::Expr {\n     expr_from_text(&format!(\"{}{}\", f, arg_list))\n }\n-pub fn expr_method_call<F>(text: &str, caller: F) -> Option<ast::Expr>\n-where\n-    F: FnOnce() -> Option<SyntaxText>,\n-{\n-    try_expr_from_text(&format!(\"{}.{}()\", caller()?, text))\n+pub fn expr_method_call(receiver: ast::Expr, method: &str, arg_list: ast::ArgList) -> ast::Expr {\n+    expr_from_text(&format!(\"{}.{}{}\", receiver, method, arg_list))\n }\n fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))"}]}