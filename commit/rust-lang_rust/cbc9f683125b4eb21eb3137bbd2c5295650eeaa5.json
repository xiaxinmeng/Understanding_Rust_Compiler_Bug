{"sha": "cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzlmNjgzMTI1YjRlYjIxZWIzMTM3YmJkMmM1Mjk1NjUwZWVhYTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T12:53:56Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T19:37:59Z"}, "message": "derive: avoid parse_in_attr", "tree": {"sha": "e4fb76e929ef2c1504bedd057ca885c61fe14ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4fb76e929ef2c1504bedd057ca885c61fe14ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "html_url": "https://github.com/rust-lang/rust/commit/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcda98d4107e462aae97d0b2e7c948a0d16f02b", "html_url": "https://github.com/rust-lang/rust/commit/bbcda98d4107e462aae97d0b2e7c948a0d16f02b"}], "stats": {"total": 170, "additions": 90, "deletions": 80}, "files": [{"sha": "9a7b32402534ef48507faecc41c596da37755208", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -285,7 +285,7 @@ pub fn parse_in<'a, T>(\n }\n \n /// Runs the given subparser `f` on the tokens of the given `attr`'s item.\n-pub fn parse_in_attr<'a, T>(\n+fn parse_in_attr<'a, T>(\n     sess: &'a ParseSess,\n     attr: &ast::Attribute,\n     f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,"}, {"sha": "5334fc485e7a63a26d8aba09e1a173f28ed16a82", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -3,7 +3,6 @@ use crate::maybe_whole;\n use rustc_errors::{PResult, Applicability, pluralize};\n use syntax::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n use syntax::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n-use syntax::ast::MacArgs;\n use syntax::ThinVec;\n use syntax::token::{self, Token};\n use syntax_pos::source_map::{Span, BytePos};\n@@ -109,42 +108,6 @@ impl<'a> Parser<'a> {\n         Ok(Path { segments, span: lo.to(self.prev_span) })\n     }\n \n-    /// Like `parse_path`, but also supports parsing `Word` meta items into paths for\n-    /// backwards-compatibility. This is used when parsing derive macro paths in `#[derive]`\n-    /// attributes.\n-    fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n-        let meta_ident = match self.token.kind {\n-            token::Interpolated(ref nt) => match **nt {\n-                token::NtMeta(ref item) => match item.args {\n-                    MacArgs::Empty => Some(item.path.clone()),\n-                    _ => None,\n-                },\n-                _ => None,\n-            },\n-            _ => None,\n-        };\n-        if let Some(path) = meta_ident {\n-            self.bump();\n-            return Ok(path);\n-        }\n-        self.parse_path(style)\n-    }\n-\n-    /// Parse a list of paths inside `#[derive(path_0, ..., path_n)]`.\n-    pub fn parse_derive_paths(&mut self) -> PResult<'a, Vec<Path>> {\n-        self.expect(&token::OpenDelim(token::Paren))?;\n-        let mut list = Vec::new();\n-        while !self.eat(&token::CloseDelim(token::Paren)) {\n-            let path = self.parse_path_allowing_meta(PathStyle::Mod)?;\n-            list.push(path);\n-            if !self.eat(&token::Comma) {\n-                self.expect(&token::CloseDelim(token::Paren))?;\n-                break\n-            }\n-        }\n-        Ok(list)\n-    }\n-\n     pub(super) fn parse_path_segments(\n         &mut self,\n         segments: &mut Vec<PathSegment>,"}, {"sha": "ad2281a58791038da9380b32b9830e88cf8d7abc", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -1,7 +1,7 @@\n use crate::base::{self, *};\n use crate::proc_macro_server;\n \n-use syntax::ast::{self, ItemKind, MacArgs};\n+use syntax::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n use syntax::errors::{Applicability, FatalError};\n use syntax::symbol::sym;\n use syntax::token;\n@@ -171,34 +171,71 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n         if !attr.has_name(sym::derive) {\n             return true;\n         }\n-        if !attr.is_meta_item_list() {\n-            cx.struct_span_err(attr.span, \"malformed `derive` attribute input\")\n-                .span_suggestion(\n-                    attr.span,\n-                    \"missing traits to be derived\",\n-                    \"#[derive(Trait1, Trait2, ...)]\".to_owned(),\n-                    Applicability::HasPlaceholders,\n-                ).emit();\n-            return false;\n-        }\n \n-        let parse_derive_paths = |attr: &ast::Attribute| {\n-            if let MacArgs::Empty = attr.get_normal_item().args {\n-                return Ok(Vec::new());\n+        // 1) First let's ensure that it's a meta item.\n+        let nmis = match attr.meta_item_list() {\n+            None => {\n+                cx.struct_span_err(attr.span, \"malformed `derive` attribute input\")\n+                    .span_suggestion(\n+                        attr.span,\n+                        \"missing traits to be derived\",\n+                        \"#[derive(Trait1, Trait2, ...)]\".to_owned(),\n+                        Applicability::HasPlaceholders,\n+                    )\n+                    .emit();\n+                return false;\n             }\n-            rustc_parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())\n+            Some(x) => x,\n         };\n \n-        match parse_derive_paths(attr) {\n-            Ok(traits) => {\n-                result.extend(traits);\n-                true\n-            }\n-            Err(mut e) => {\n-                e.emit();\n-                false\n-            }\n-        }\n+        let mut retain_in_fm = true;\n+        let mut retain_in_map = true;\n+        let traits = nmis\n+            .into_iter()\n+            // 2) Moreover, let's ensure we have a path and not `#[derive(\"foo\")]`.\n+            .filter_map(|nmi| match nmi {\n+                NestedMetaItem::Literal(lit) => {\n+                    retain_in_fm = false;\n+                    cx.struct_span_err(lit.span, \"expected path to a trait, found literal\")\n+                        .help(\"for example, write `#[derive(Debug)]` for `Debug`\")\n+                        .emit();\n+                    None\n+                }\n+                NestedMetaItem::MetaItem(mi) => Some(mi),\n+            })\n+            // 3) Finally, we only accept `#[derive($path_0, $path_1, ..)]`\n+            // but not e.g. `#[derive($path_0 = \"value\", $path_1(abc))]`.\n+            // In this case we can still at least determine that the user\n+            // wanted this trait to be derived, so let's keep it.\n+            .map(|mi| {\n+                let mut traits_dont_accept = |title, action| {\n+                    retain_in_map = false;\n+                    let sp = mi.span.with_lo(mi.path.span.hi());\n+                    cx.struct_span_err(sp, title)\n+                        .span_suggestion(\n+                            sp,\n+                            action,\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .emit();\n+                };\n+                match &mi.kind {\n+                    MetaItemKind::List(..) => traits_dont_accept(\n+                        \"traits in `#[derive(...)]` don't accept arguments\",\n+                        \"remove the arguments\",\n+                    ),\n+                    MetaItemKind::NameValue(..) => traits_dont_accept(\n+                        \"traits in `#[derive(...)]` don't accept values\",\n+                        \"remove the value\",\n+                    ),\n+                    MetaItemKind::Word => {}\n+                }\n+                mi.path\n+            });\n+\n+        result.extend(traits);\n+        retain_in_fm && retain_in_map\n     });\n     result\n }"}, {"sha": "77fa2f566a8fc1524bd5d61ea5e58e23d1392387", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -1,7 +1,11 @@\n-#[derive(Copy(Bad))] //~ ERROR expected one of `)`, `,`, or `::`, found `(`\n+#[derive(Copy(Bad))]\n+//~^ ERROR traits in `#[derive(...)]` don't accept arguments\n+//~| ERROR the trait bound\n struct Test1;\n \n-#[derive(Copy=\"bad\")] //~ ERROR expected one of `)`, `,`, or `::`, found `=`\n+#[derive(Copy=\"bad\")]\n+//~^ ERROR traits in `#[derive(...)]` don't accept values\n+//~| ERROR the trait bound\n struct Test2;\n \n #[derive] //~ ERROR malformed `derive` attribute input"}, {"sha": "1f1ee39b049e309a35cbfe14139458ff15b14f28", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -1,20 +1,33 @@\n-error: expected one of `)`, `,`, or `::`, found `(`\n+error: traits in `#[derive(...)]` don't accept arguments\n   --> $DIR/malformed-derive-entry.rs:1:14\n    |\n LL | #[derive(Copy(Bad))]\n-   |              ^ expected one of `)`, `,`, or `::`\n+   |              ^^^^^ help: remove the arguments\n \n-error: expected one of `)`, `,`, or `::`, found `=`\n-  --> $DIR/malformed-derive-entry.rs:4:14\n+error: traits in `#[derive(...)]` don't accept values\n+  --> $DIR/malformed-derive-entry.rs:6:14\n    |\n LL | #[derive(Copy=\"bad\")]\n-   |              ^ expected one of `)`, `,`, or `::`\n+   |              ^^^^^^ help: remove the value\n \n error: malformed `derive` attribute input\n-  --> $DIR/malformed-derive-entry.rs:7:1\n+  --> $DIR/malformed-derive-entry.rs:11:1\n    |\n LL | #[derive]\n    | ^^^^^^^^^ help: missing traits to be derived: `#[derive(Trait1, Trait2, ...)]`\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the trait bound `Test1: std::clone::Clone` is not satisfied\n+  --> $DIR/malformed-derive-entry.rs:1:10\n+   |\n+LL | #[derive(Copy(Bad))]\n+   |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test1`\n+\n+error[E0277]: the trait bound `Test2: std::clone::Clone` is not satisfied\n+  --> $DIR/malformed-derive-entry.rs:6:10\n+   |\n+LL | #[derive(Copy=\"bad\")]\n+   |          ^^^^ the trait `std::clone::Clone` is not implemented for `Test2`\n+\n+error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "713b9eb542cfac9e3be6a637f5a7a2a10c7d3119", "filename": "src/test/ui/span/macro-ty-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -10,5 +10,4 @@ fn main() {\n     foo::<T>!(); //~ ERROR generic arguments in macro path\n     foo::<>!(); //~ ERROR generic arguments in macro path\n     m!(Default<>); //~ ERROR generic arguments in macro path\n-    //~^ ERROR unexpected generic arguments in path\n }"}, {"sha": "21683b2fb8643cb414c123da09b3fa09e06a4a65", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9f683125b4eb21eb3137bbd2c5295650eeaa5/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=cbc9f683125b4eb21eb3137bbd2c5295650eeaa5", "patch": "@@ -10,17 +10,11 @@ error: generic arguments in macro path\n LL |     foo::<>!();\n    |          ^^\n \n-error: unexpected generic arguments in path\n-  --> $DIR/macro-ty-params.rs:12:8\n-   |\n-LL |     m!(Default<>);\n-   |        ^^^^^^^^^\n-\n error: generic arguments in macro path\n   --> $DIR/macro-ty-params.rs:12:15\n    |\n LL |     m!(Default<>);\n    |               ^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}