{"sha": "552073701f0c20c26b8579b7b6810bbeb6595f26", "node_id": "C_kwDOAAsO6NoAKDU1MjA3MzcwMWYwYzIwYzI2Yjg1NzliN2I2ODEwYmJlYjY1OTVmMjY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-15T22:28:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-11-16T22:38:30Z"}, "message": "Remove unnecessary lifetime argument from arena macros.\n\nBecause it's always `'tcx`. In fact, some of them use a mixture of\npassed-in `$tcx` and hard-coded `'tcx`, so no other lifetime would even\nwork.\n\nThis makes the code easier to read.", "tree": {"sha": "8f650401c94296fed170b8cc675983f05a09cf15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f650401c94296fed170b8cc675983f05a09cf15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/552073701f0c20c26b8579b7b6810bbeb6595f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/552073701f0c20c26b8579b7b6810bbeb6595f26", "html_url": "https://github.com/rust-lang/rust/commit/552073701f0c20c26b8579b7b6810bbeb6595f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/552073701f0c20c26b8579b7b6810bbeb6595f26/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d914f17ca71a33a89b2dc3436fca51b1a091559e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d914f17ca71a33a89b2dc3436fca51b1a091559e", "html_url": "https://github.com/rust-lang/rust/commit/d914f17ca71a33a89b2dc3436fca51b1a091559e"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "39def2a6f1f1f5d04fba6643772a98932f959157", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=552073701f0c20c26b8579b7b6810bbeb6595f26", "patch": "@@ -517,9 +517,9 @@ impl DroplessArena {\n }\n \n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n+pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     #[derive(Default)]\n-    pub struct Arena<$tcx> {\n+    pub struct Arena<'tcx> {\n         pub dropless: $crate::DroplessArena,\n         $($name: $crate::TypedArena<$ty>,)*\n     }\n@@ -547,9 +547,9 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n \n     }\n     $(\n-        impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n+        impl<'tcx> ArenaAllocatable<'tcx, $ty> for $ty {\n             #[inline]\n-            fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n                 if !::std::mem::needs_drop::<Self>() {\n                     arena.dropless.alloc(self)\n                 } else {\n@@ -559,7 +559,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n \n             #[inline]\n             fn allocate_from_iter<'a>(\n-                arena: &'a Arena<$tcx>,\n+                arena: &'a Arena<'tcx>,\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n             ) -> &'a mut [Self] {\n                 if !::std::mem::needs_drop::<Self>() {"}, {"sha": "cd468bcf4474e79dd6e5182c6ae5dc95fa963e99", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=552073701f0c20c26b8579b7b6810bbeb6595f26", "patch": "@@ -84,7 +84,7 @@ mod item;\n mod pat;\n mod path;\n \n-rustc_hir::arena_types!(rustc_arena::declare_arena, 'tcx);\n+rustc_hir::arena_types!(rustc_arena::declare_arena);\n \n struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes."}, {"sha": "175845fb9e58bac9f7d411fec045a5f2fb63eef4", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=552073701f0c20c26b8579b7b6810bbeb6595f26", "patch": "@@ -4,49 +4,49 @@\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $tcx:lifetime) => (\n+    ($macro:path) => (\n         $macro!([\n             // HIR types\n-            [] hir_krate: rustc_hir::Crate<$tcx>,\n-            [] arm: rustc_hir::Arm<$tcx>,\n-            [] asm_operand: (rustc_hir::InlineAsmOperand<$tcx>, Span),\n+            [] hir_krate: rustc_hir::Crate<'tcx>,\n+            [] arm: rustc_hir::Arm<'tcx>,\n+            [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n-            [] block: rustc_hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n-            [] body: rustc_hir::Body<$tcx>,\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n-            [] generic_param: rustc_hir::GenericParam<$tcx>,\n-            [] expr: rustc_hir::Expr<$tcx>,\n-            [] expr_field: rustc_hir::ExprField<$tcx>,\n-            [] pat_field: rustc_hir::PatField<$tcx>,\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] block: rustc_hir::Block<'tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<'tcx>,\n+            [] body: rustc_hir::Body<'tcx>,\n+            [] generic_arg: rustc_hir::GenericArg<'tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<'tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<'tcx>,\n+            [] generic_param: rustc_hir::GenericParam<'tcx>,\n+            [] expr: rustc_hir::Expr<'tcx>,\n+            [] expr_field: rustc_hir::ExprField<'tcx>,\n+            [] pat_field: rustc_hir::PatField<'tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<'tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<'tcx>,\n             [] foreign_item_ref: rustc_hir::ForeignItemRef,\n-            [] impl_item: rustc_hir::ImplItem<$tcx>,\n+            [] impl_item: rustc_hir::ImplItem<'tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef,\n-            [] item: rustc_hir::Item<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,\n-            [] local: rustc_hir::Local<$tcx>,\n-            [] mod_: rustc_hir::Mod<$tcx>,\n-            [] owner_info: rustc_hir::OwnerInfo<$tcx>,\n-            [] param: rustc_hir::Param<$tcx>,\n-            [] pat: rustc_hir::Pat<$tcx>,\n-            [] path: rustc_hir::Path<$tcx>,\n-            [] path_segment: rustc_hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc_hir::QPath<$tcx>,\n-            [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] field_def: rustc_hir::FieldDef<$tcx>,\n-            [] trait_item: rustc_hir::TraitItem<$tcx>,\n+            [] item: rustc_hir::Item<'tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<'tcx>,\n+            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<'tcx>,\n+            [] local: rustc_hir::Local<'tcx>,\n+            [] mod_: rustc_hir::Mod<'tcx>,\n+            [] owner_info: rustc_hir::OwnerInfo<'tcx>,\n+            [] param: rustc_hir::Param<'tcx>,\n+            [] pat: rustc_hir::Pat<'tcx>,\n+            [] path: rustc_hir::Path<'tcx>,\n+            [] path_segment: rustc_hir::PathSegment<'tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<'tcx>,\n+            [] qpath: rustc_hir::QPath<'tcx>,\n+            [] stmt: rustc_hir::Stmt<'tcx>,\n+            [] field_def: rustc_hir::FieldDef<'tcx>,\n+            [] trait_item: rustc_hir::TraitItem<'tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] ty: rustc_hir::Ty<$tcx>,\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n-            [] variant: rustc_hir::Variant<$tcx>,\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n-        ], $tcx);\n+            [] ty: rustc_hir::Ty<'tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<'tcx>,\n+            [] variant: rustc_hir::Variant<'tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<'tcx>,\n+        ]);\n     )\n }"}, {"sha": "530437f50eb1a6cf605aa182252069d31cc40865", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=552073701f0c20c26b8579b7b6810bbeb6595f26", "patch": "@@ -4,30 +4,30 @@\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $tcx:lifetime) => (\n+    ($macro:path) => (\n         $macro!([\n             [] layout: rustc_target::abi::Layout,\n-            [] fn_abi: rustc_target::abi::call::FnAbi<$tcx, rustc_middle::ty::Ty<$tcx>>,\n+            [] fn_abi: rustc_target::abi::call::FnAbi<'tcx, rustc_middle::ty::Ty<'tcx>>,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n-            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<$tcx>>,\n-            [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n-            [decode] mir: rustc_middle::mir::Body<$tcx>,\n+            [] steal_thir: rustc_data_structures::steal::Steal<rustc_middle::thir::Thir<'tcx>>,\n+            [] steal_mir: rustc_data_structures::steal::Steal<rustc_middle::mir::Body<'tcx>>,\n+            [decode] mir: rustc_middle::mir::Body<'tcx>,\n             [] steal_promoted:\n                 rustc_data_structures::steal::Steal<\n                     rustc_index::vec::IndexVec<\n                         rustc_middle::mir::Promoted,\n-                        rustc_middle::mir::Body<$tcx>\n+                        rustc_middle::mir::Body<'tcx>\n                     >\n                 >,\n             [decode] promoted:\n                 rustc_index::vec::IndexVec<\n                     rustc_middle::mir::Promoted,\n-                    rustc_middle::mir::Body<$tcx>\n+                    rustc_middle::mir::Body<'tcx>\n                 >,\n-            [decode] typeck_results: rustc_middle::ty::TypeckResults<$tcx>,\n+            [decode] typeck_results: rustc_middle::ty::TypeckResults<'tcx>,\n             [decode] borrowck_result:\n-                rustc_middle::mir::BorrowCheckResult<$tcx>,\n+                rustc_middle::mir::BorrowCheckResult<'tcx>,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n@@ -78,14 +78,14 @@ macro_rules! arena_types {\n             [] foreign_modules: Vec<rustc_session::cstore::ForeignModule>,\n             [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n-            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n+            [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<'tcx>,\n             [] attribute: rustc_ast::Attribute,\n             [] name_set: rustc_data_structures::fx::FxHashSet<rustc_span::symbol::Symbol>,\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_middle::ty::TyS<$tcx>,\n-            [] predicates: rustc_middle::ty::PredicateInner<$tcx>,\n+            [] tys: rustc_middle::ty::TyS<'tcx>,\n+            [] predicates: rustc_middle::ty::PredicateInner<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena\n@@ -97,8 +97,8 @@ macro_rules! arena_types {\n             [decode] used_trait_imports: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n \n             [] dep_kind: rustc_middle::dep_graph::DepKindStruct,\n-        ], $tcx);\n+        ]);\n     )\n }\n \n-arena_types!(rustc_arena::declare_arena, 'tcx);\n+arena_types!(rustc_arena::declare_arena);"}, {"sha": "3f2b987b1e6307f1f8ad224cccc151487cbb02d1", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/552073701f0c20c26b8579b7b6810bbeb6595f26/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=552073701f0c20c26b8579b7b6810bbeb6595f26", "patch": "@@ -417,17 +417,17 @@ macro_rules! __impl_decoder_methods {\n macro_rules! impl_arena_allocatable_decoder {\n     ([]$args:tt) => {};\n     ([decode $(, $attrs:ident)*]\n-     [[$name:ident: $ty:ty], $tcx:lifetime]) => {\n-        impl<$tcx, D: TyDecoder<$tcx>> RefDecodable<$tcx, D> for $ty {\n+     [$name:ident: $ty:ty]) => {\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for $ty {\n             #[inline]\n-            fn decode(decoder: &mut D) -> Result<&$tcx Self, D::Error> {\n+            fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n                 decode_arena_allocable(decoder)\n             }\n         }\n \n-        impl<$tcx, D: TyDecoder<$tcx>> RefDecodable<$tcx, D> for [$ty] {\n+        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [$ty] {\n             #[inline]\n-            fn decode(decoder: &mut D) -> Result<&$tcx Self, D::Error> {\n+            fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n                 decode_arena_allocable_slice(decoder)\n             }\n         }\n@@ -438,15 +438,15 @@ macro_rules! impl_arena_allocatable_decoder {\n }\n \n macro_rules! impl_arena_allocatable_decoders {\n-    ([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ([$($a:tt $name:ident: $ty:ty,)*]) => {\n         $(\n-            impl_arena_allocatable_decoder!($a [[$name: $ty], $tcx]);\n+            impl_arena_allocatable_decoder!($a [$name: $ty]);\n         )*\n     }\n }\n \n-rustc_hir::arena_types!(impl_arena_allocatable_decoders, 'tcx);\n-arena_types!(impl_arena_allocatable_decoders, 'tcx);\n+rustc_hir::arena_types!(impl_arena_allocatable_decoders);\n+arena_types!(impl_arena_allocatable_decoders);\n \n #[macro_export]\n macro_rules! implement_ty_decoder {"}]}