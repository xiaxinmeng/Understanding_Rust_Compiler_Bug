{"sha": "35e7beed0e5a01816f1f447dc7d2200e97137af1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTdiZWVkMGU1YTAxODE2ZjFmNDQ3ZGM3ZDIyMDBlOTcxMzdhZjE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-22T19:03:02Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-24T14:54:53Z"}, "message": "Get rid of doctree::ForeignItem", "tree": {"sha": "961b3d3c9521b01337b0cf29e21d2fc2ae54ab7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/961b3d3c9521b01337b0cf29e21d2fc2ae54ab7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e7beed0e5a01816f1f447dc7d2200e97137af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e7beed0e5a01816f1f447dc7d2200e97137af1", "html_url": "https://github.com/rust-lang/rust/commit/35e7beed0e5a01816f1f447dc7d2200e97137af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e7beed0e5a01816f1f447dc7d2200e97137af1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d19b37c514246acab020eaba9527cb97c421cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d19b37c514246acab020eaba9527cb97c421cf", "html_url": "https://github.com/rust-lang/rust/commit/53d19b37c514246acab020eaba9527cb97c421cf"}], "stats": {"total": 35, "additions": 11, "deletions": 24}, "files": [{"sha": "c0786c1c127b8369dfa87ae75ae7adfe0f0783bd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35e7beed0e5a01816f1f447dc7d2200e97137af1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e7beed0e5a01816f1f447dc7d2200e97137af1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=35e7beed0e5a01816f1f447dc7d2200e97137af1", "patch": "@@ -2186,11 +2186,12 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n     }\n }\n \n-impl Clean<Item> for doctree::ForeignItem<'_> {\n+impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let kind = match self.kind {\n+        let (item, renamed) = self;\n+        let kind = match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, ref names, ref generics) => {\n-                let abi = cx.tcx.hir().get_foreign_abi(self.id);\n+                let abi = cx.tcx.hir().get_foreign_abi(item.hir_id);\n                 let (generics, decl) =\n                     enter_impl_trait(cx, || (generics.clean(cx), (&**decl, &names[..]).clean(cx)));\n                 let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n@@ -2207,15 +2208,13 @@ impl Clean<Item> for doctree::ForeignItem<'_> {\n                     ret_types,\n                 })\n             }\n-            hir::ForeignItemKind::Static(ref ty, mutbl) => ForeignStaticItem(Static {\n-                type_: ty.clean(cx),\n-                mutability: *mutbl,\n-                expr: String::new(),\n-            }),\n+            hir::ForeignItemKind::Static(ref ty, mutability) => {\n+                ForeignStaticItem(Static { type_: ty.clean(cx), mutability, expr: String::new() })\n+            }\n             hir::ForeignItemKind::Type => ForeignTypeItem,\n         };\n \n-        Item::from_hir_id_and_parts(self.id, Some(self.name), kind, cx)\n+        Item::from_hir_id_and_parts(item.hir_id, Some(renamed.unwrap_or(item.ident).name), kind, cx)\n     }\n }\n "}, {"sha": "1ceaed45ea9cf370fcd8035fa437b377da0e4091", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35e7beed0e5a01816f1f447dc7d2200e97137af1/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e7beed0e5a01816f1f447dc7d2200e97137af1/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=35e7beed0e5a01816f1f447dc7d2200e97137af1", "patch": "@@ -23,7 +23,7 @@ crate struct Module<'hir> {\n     // (item, renamed)\n     crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n     crate traits: Vec<Trait<'hir>>,\n-    crate foreigns: Vec<ForeignItem<'hir>>,\n+    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Ident>)>,\n     crate macros: Vec<Macro>,\n     crate proc_macros: Vec<ProcMacro>,\n     crate is_crate: bool,\n@@ -87,12 +87,6 @@ crate struct Trait<'hir> {\n     crate id: hir::HirId,\n }\n \n-crate struct ForeignItem<'hir> {\n-    crate id: hir::HirId,\n-    crate name: Symbol,\n-    crate kind: &'hir hir::ForeignItemKind<'hir>,\n-}\n-\n // For Macro we store the DefId instead of the NodeId, since we also create\n // these imported macro_rules (which only have a DUMMY_NODE_ID).\n crate struct Macro {"}, {"sha": "03e31da3711059dce5cdab066542495f0c11da01", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35e7beed0e5a01816f1f447dc7d2200e97137af1/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e7beed0e5a01816f1f447dc7d2200e97137af1/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=35e7beed0e5a01816f1f447dc7d2200e97137af1", "patch": "@@ -418,15 +418,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om: &mut Module<'tcx>,\n     ) {\n         // If inlining we only want to include public functions.\n-        if self.inlining && !item.vis.node.is_pub() {\n-            return;\n+        if !self.inlining || item.vis.node.is_pub() {\n+            om.foreigns.push((item, renamed));\n         }\n-\n-        om.foreigns.push(ForeignItem {\n-            id: item.hir_id,\n-            name: renamed.unwrap_or(item.ident).name,\n-            kind: &item.kind,\n-        });\n     }\n \n     // Convert each `exported_macro` into a doc item."}]}