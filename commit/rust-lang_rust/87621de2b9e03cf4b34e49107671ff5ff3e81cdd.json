{"sha": "87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjIxZGUyYjllMDNjZjRiMzRlNDkxMDc2NzFmZjVmZjNlODFjZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-11T12:51:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-11T12:51:33Z"}, "message": "Merge #9567 #9568\n\n9567: remove unneded special case r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\n9568: feat: add 'for' postfix completion r=lnicola a=mahdi-frms\n\n\r\n![Peek 2021-07-11 16-45](https://user-images.githubusercontent.com/62165556/125194692-a0aaf780-e267-11eb-952a-81de7955d9a1.gif)\r\n\r\n\r\nadds #9561\r\n\r\nused ```ele``` as identifier for each element in the iteration\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: mahdi-frms <mahdif1380@outlook.com>", "tree": {"sha": "e7e4a43f9e2c2443555f19e0b2f1083b4817372a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e4a43f9e2c2443555f19e0b2f1083b4817372a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6ulVCRBK7hj4Ov3rIwAAkGoIAFfBa1hBFBIO7kOT1Fxw3kbT\n3Vg+/xSCdofC5KmKeZ6ARE37czlqfIJzdMW4VQNAeVlJpMGqPsBbJeaRGVkGcgXP\nI+eaXc+hPU+RUMIphMQjWVmAlxy3+dKciidjlp64SL7SAN1SyWEh9l54DqnECzwd\na05WgCLlSy+ZCRIoNyCws/b0/o4FmhVwpKZY0ORtYwOeKJmGRZHeeq1cm/yoGzrL\nF1a0DUftLDKVdFmsxC7j30/ziwzuIGDye2aHemXhRmf3E+2TxmbihE72wOTxarrb\nVzIQP0Z2lvQFs6/b538lIv9Db6eOmMabrW9D3vnnpd3NuqvvByL0G+pGYJvNKsI=\n=M4ru\n-----END PGP SIGNATURE-----\n", "payload": "tree e7e4a43f9e2c2443555f19e0b2f1083b4817372a\nparent a70d9313afd0521bd4d4e95cc1230ab9ad13ec33\nparent bbb053532e7b678982e9a3f33a64732a963a54fb\nparent 7bae9c9187cc3394729a3d985bd6b0a89a99ed36\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626007893 +0000\ncommitter GitHub <noreply@github.com> 1626007893 +0000\n\nMerge #9567 #9568\n\n9567: remove unneded special case r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\n9568: feat: add 'for' postfix completion r=lnicola a=mahdi-frms\n\n\r\n![Peek 2021-07-11 16-45](https://user-images.githubusercontent.com/62165556/125194692-a0aaf780-e267-11eb-952a-81de7955d9a1.gif)\r\n\r\n\r\nadds #9561\r\n\r\nused ```ele``` as identifier for each element in the iteration\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: mahdi-frms <mahdif1380@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "html_url": "https://github.com/rust-lang/rust/commit/87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70d9313afd0521bd4d4e95cc1230ab9ad13ec33", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70d9313afd0521bd4d4e95cc1230ab9ad13ec33", "html_url": "https://github.com/rust-lang/rust/commit/a70d9313afd0521bd4d4e95cc1230ab9ad13ec33"}, {"sha": "bbb053532e7b678982e9a3f33a64732a963a54fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb053532e7b678982e9a3f33a64732a963a54fb", "html_url": "https://github.com/rust-lang/rust/commit/bbb053532e7b678982e9a3f33a64732a963a54fb"}, {"sha": "7bae9c9187cc3394729a3d985bd6b0a89a99ed36", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bae9c9187cc3394729a3d985bd6b0a89a99ed36", "html_url": "https://github.com/rust-lang/rust/commit/7bae9c9187cc3394729a3d985bd6b0a89a99ed36"}], "stats": {"total": 145, "additions": 92, "deletions": 53}, "files": [{"sha": "1c0380943eaf58e1a555b6e8626227a9d406175d", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -112,8 +112,8 @@ pub(crate) fn external_docs(\n     let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db))?,\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db))?,\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())?,\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined())?,\n             _ => return None,\n         }\n     };"}, {"sha": "4f6b5e618688d5059346943a47ea4de753faa201", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -25,10 +25,10 @@ pub(crate) fn goto_declaration(\n         match parent {\n             ast::NameRef(name_ref) => {\n                 let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n-                name_kind.referenced(sema.db)\n+                name_kind.referenced()\n             },\n             ast::Name(name) => {\n-                NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db)\n+                NameClass::classify(&sema, &name)?.referenced_or_defined()\n             },\n             _ => return None,\n         }"}, {"sha": "d1ad6db2fdd4e29c1f4376ec8b31225c880d55fe", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -60,12 +60,12 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, Either::Right(&name_ref))\n             },\n             ast::Name(name) => {\n-                let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n+                let def = NameClass::classify(&sema, &name)?.referenced_or_defined();\n                 try_find_trait_item_definition(sema.db, &def)\n                     .or_else(|| def.try_to_nav(sema.db))\n             },\n             ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                let def = name_class.referenced_or_defined(sema.db);\n+                let def = name_class.referenced_or_defined();\n                 def.try_to_nav(sema.db)\n             } else {\n                 reference_definition(&sema, Either::Left(&lt))\n@@ -140,7 +140,7 @@ pub(crate) fn reference_definition(\n         |lifetime| NameRefClass::classify_lifetime(sema, lifetime),\n         |name_ref| NameRefClass::classify(sema, name_ref),\n     )?;\n-    let def = name_kind.referenced(sema.db);\n+    let def = name_kind.referenced();\n     def.try_to_nav(sema.db)\n }\n "}, {"sha": "636642cfe706f1a944e1cabd72ff0d004a0b09b5", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -29,10 +29,10 @@ pub(crate) fn goto_implementation(\n     let node = sema.find_node_at_offset_with_descend(&syntax, position.offset)?;\n     let def = match &node {\n         ast::NameLike::Name(name) => {\n-            NameClass::classify(&sema, name).map(|class| class.referenced_or_defined(sema.db))\n+            NameClass::classify(&sema, name).map(|class| class.referenced_or_defined())\n         }\n         ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced(sema.db))\n+            NameRefClass::classify(&sema, name_ref).map(|class| class.referenced())\n         }\n         ast::NameLike::Lifetime(_) => None,\n     }?;"}, {"sha": "743aa183f78b32b1493bb21bd7f2d5aaaefd9032", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -98,14 +98,14 @@ pub(crate) fn hover(\n             // field pattern shorthands to their definition\n             ast::Name(name) => NameClass::classify(&sema, &name).and_then(|class| match class {\n                 NameClass::ConstReference(def) => Some(def),\n-                def => def.defined(db),\n+                def => def.defined(),\n             }),\n             ast::NameRef(name_ref) => {\n-                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(db))\n+                NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced())\n             },\n             ast::Lifetime(lifetime) => NameClass::classify_lifetime(&sema, &lifetime).map_or_else(\n-                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced(db)),\n-                |d| d.defined(db),\n+                || NameRefClass::classify_lifetime(&sema, &lifetime).map(|d| d.referenced()),\n+                |d| d.defined(),\n             ),\n \n             _ => {"}, {"sha": "fbe79741b393ed3c6a0cfaabd99b21247f512e41", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn find_all_refs(\n \n     let (def, is_literal_search) =\n         if let Some(name) = get_name_of_item_declaration(&syntax, position) {\n-            (NameClass::classify(sema, &name)?.referenced_or_defined(sema.db), true)\n+            (NameClass::classify(sema, &name)?.referenced_or_defined(), true)\n         } else {\n             (find_def(sema, &syntax, position.offset)?, false)\n         };\n@@ -116,17 +116,13 @@ pub(crate) fn find_def(\n     offset: TextSize,\n ) -> Option<Definition> {\n     let def = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n-        ast::NameLike::NameRef(name_ref) => {\n-            NameRefClass::classify(sema, &name_ref)?.referenced(sema.db)\n-        }\n-        ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name)?.referenced_or_defined(sema.db)\n-        }\n+        ast::NameLike::NameRef(name_ref) => NameRefClass::classify(sema, &name_ref)?.referenced(),\n+        ast::NameLike::Name(name) => NameClass::classify(sema, &name)?.referenced_or_defined(),\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| class.referenced(sema.db))\n+            .map(|class| class.referenced())\n             .or_else(|| {\n                 NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|class| class.referenced_or_defined(sema.db))\n+                    .map(|class| class.referenced_or_defined())\n             })?,\n     };\n     Some(def)"}, {"sha": "9047d0fb32d6bf6c33457215c584259b6f868f6c", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -108,11 +108,11 @@ fn find_definition(\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n         ast::NameLike::Name(name) => {\n-            NameClass::classify(sema, &name).map(|class| class.referenced_or_defined(sema.db))\n+            NameClass::classify(sema, &name).map(|class| class.referenced_or_defined())\n         }\n         ast::NameLike::NameRef(name_ref) => {\n             if let Some(def) =\n-                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced(sema.db))\n+                NameRefClass::classify(sema, &name_ref).map(|class| class.referenced())\n             {\n                 // if the name differs from the definitions name it has to be an alias\n                 if def.name(sema.db).map_or(false, |it| it.to_string() != name_ref.text()) {\n@@ -124,10 +124,9 @@ fn find_definition(\n             }\n         }\n         ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .map(|class| NameRefClass::referenced(class, sema.db))\n+            .map(|class| class.referenced())\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime)\n-                    .map(|it| it.referenced_or_defined(sema.db))\n+                NameClass::classify_lifetime(sema, &lifetime).map(|it| it.referenced_or_defined())\n             }),\n     }\n     .ok_or_else(|| format_err!(\"No references found at position\"))?;"}, {"sha": "e16fe644d5f1280f2ec5e2330f2c1cd0065e6009", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -46,7 +46,6 @@ pub(super) fn element(\n             };\n \n             match name_kind {\n-                Some(NameClass::ExternCrate(_)) => SymbolKind::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n                     let mut h = highlight_def(db, krate, def) | HlMod::Definition;\n                     if let Definition::ModuleDef(hir::ModuleDef::Trait(trait_)) = &def {\n@@ -111,7 +110,6 @@ pub(super) fn element(\n                     }\n                 };\n                 let h = match name_class {\n-                    NameRefClass::ExternCrate(_) => SymbolKind::Module.into(),\n                     NameRefClass::Definition(def) => {\n                         if let Definition::Local(local) = &def {\n                             if let Some(name) = local.name(db) {"}, {"sha": "76d80886d11637b77899f631da5a6d97031333b8", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -38,6 +38,6 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">std</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module declaration library\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "d08111a90dab20bc056b2738b5c07343cc00bba3", "filename": "crates/ide_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let name_ref = ast::NameRef::cast(ident.parent()?)?;\n     let def = match NameRefClass::classify(&ctx.sema, &name_ref)? {\n         NameRefClass::Definition(def) => def,\n-        NameRefClass::ExternCrate(_) | NameRefClass::FieldShorthand { .. } => return None,\n+        NameRefClass::FieldShorthand { .. } => return None,\n     };\n     let fun = match def {\n         Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,"}, {"sha": "eb6f7a7e6c5124454a441e8a96f7b1eb2762d0ac", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -638,7 +638,7 @@ fn vars_used_in_body(ctx: &AssistContext, body: &FunctionBody) -> Vec<Local> {\n     body.descendants()\n         .filter_map(ast::NameRef::cast)\n         .filter_map(|name_ref| NameRefClass::classify(&ctx.sema, &name_ref))\n-        .map(|name_kind| name_kind.referenced(ctx.db()))\n+        .map(|name_kind| name_kind.referenced())\n         .filter_map(|definition| match definition {\n             Definition::Local(local) => Some(local),\n             _ => None,"}, {"sha": "3cb2a1b6e315ddae22f3fd37279e22caa3592b98", "filename": "crates/ide_assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -310,6 +310,36 @@ use super::foo;\n fn bar() {\n     let _ = foo(1);\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn remove_method_param() {\n+        // FIXME: This is completely wrong:\n+        //  * method call expressions are not handled\n+        //  * assoc function syntax removes the wrong argument.\n+        check_assist(\n+            remove_unused_param,\n+            r#\"\n+struct S;\n+impl S { fn f(&self, $0_unused: i32) {} }\n+fn main() {\n+    S.f(92);\n+    S.f();\n+    S.f(92, 92);\n+    S::f(&S, 92);\n+}\n+\"#,\n+            r#\"\n+struct S;\n+impl S { fn f(&self) {} }\n+fn main() {\n+    S.f(92);\n+    S.f();\n+    S.f(92, 92);\n+    S::f(92);\n+}\n \"#,\n         )\n     }"}, {"sha": "4871698b24345f74b3d1fe4d329073e1251fb45e", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -2,7 +2,10 @@\n \n mod format_like;\n \n-use ide_db::{helpers::SnippetCap, ty_filter::TryEnum};\n+use ide_db::{\n+    helpers::{FamousDefs, SnippetCap},\n+    ty_filter::TryEnum,\n+};\n use syntax::{\n     ast::{self, AstNode, AstToken},\n     SyntaxKind::{BLOCK_EXPR, EXPR_STMT},\n@@ -110,6 +113,18 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         .add_to(acc);\n         postfix_snippet(ctx, cap, dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text))\n             .add_to(acc);\n+    } else if let Some(trait_) = FamousDefs(&ctx.sema, ctx.krate).core_iter_IntoIterator() {\n+        if receiver_ty.impls_trait(ctx.db, trait_, &[]) {\n+            postfix_snippet(\n+                ctx,\n+                cap,\n+                dot_receiver,\n+                \"for\",\n+                \"for ele in expr {}\",\n+                &format!(\"for ele in {} {{\\n    $0\\n}}\", receiver_text),\n+            )\n+            .add_to(acc);\n+        }\n     }\n \n     postfix_snippet(ctx, cap, dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text))"}, {"sha": "eeae055349844bd7df745d91b829031002030503", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef,\n-    Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n+    Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef, Module, ModuleDef, Name,\n+    PathResolution, Semantics, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode, PathSegmentKind},\n@@ -101,14 +101,13 @@ impl Definition {\n /// scope. That is, that, by just looking at the syntactical category, we can\n /// unambiguously define the semantic category.\n ///\n-/// Sadly, that's not 100% true, there are special cases. To make sure that call\n-/// the code handles all the special cases correctly via exhaustive matching, we\n+/// Sadly, that's not 100% true, there are special cases. To make sure that\n+/// callers handle all the special cases correctly via exhaustive matching, we\n /// add a [`NameClass`] enum which lists all of them!\n ///\n /// A model special case is `None` constant in pattern.\n #[derive(Debug)]\n pub enum NameClass {\n-    ExternCrate(Crate),\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`.\n     /// Syntactically, it is a name, but semantically it is a reference.\n@@ -124,9 +123,8 @@ pub enum NameClass {\n \n impl NameClass {\n     /// `Definition` defined by this name.\n-    pub fn defined(self, db: &dyn HirDatabase) -> Option<Definition> {\n+    pub fn defined(self) -> Option<Definition> {\n         let res = match self {\n-            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n             NameClass::ConstReference(_) => return None,\n             NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n@@ -137,9 +135,8 @@ impl NameClass {\n     }\n \n     /// `Definition` referenced or defined by this name.\n-    pub fn referenced_or_defined(self, db: &dyn HirDatabase) -> Definition {\n+    pub fn referenced_or_defined(self) -> Definition {\n         match self {\n-            NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n             NameClass::PatFieldShorthand { local_def: _, field_ref } => field_ref,\n         }\n@@ -186,11 +183,12 @@ impl NameClass {\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n \n-                        Some(NameClass::Definition(name_ref_class.referenced(sema.db)))\n+                        Some(NameClass::Definition(name_ref_class.referenced()))\n                     } else {\n                         let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n-                        let resolved = sema.resolve_extern_crate(&extern_crate)?;\n-                        Some(NameClass::ExternCrate(resolved))\n+                        let krate = sema.resolve_extern_crate(&extern_crate)?;\n+                        let root_module = krate.root_module(sema.db);\n+                        Some(NameClass::Definition(Definition::ModuleDef(root_module.into())))\n                     }\n                 },\n                 ast::IdentPat(it) => {\n@@ -303,16 +301,14 @@ impl NameClass {\n /// reference to point to two different defs.\n #[derive(Debug)]\n pub enum NameRefClass {\n-    ExternCrate(Crate),\n     Definition(Definition),\n     FieldShorthand { local_ref: Local, field_ref: Definition },\n }\n \n impl NameRefClass {\n     /// `Definition`, which this name refers to.\n-    pub fn referenced(self, db: &dyn HirDatabase) -> Definition {\n+    pub fn referenced(self) -> Definition {\n         match self {\n-            NameRefClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameRefClass::Definition(def) => def,\n             NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n                 // FIXME: this is inherently ambiguous -- this name refers to\n@@ -428,8 +424,9 @@ impl NameRefClass {\n         }\n \n         let extern_crate = ast::ExternCrate::cast(parent)?;\n-        let resolved = sema.resolve_extern_crate(&extern_crate)?;\n-        Some(NameRefClass::ExternCrate(resolved))\n+        let krate = sema.resolve_extern_crate(&extern_crate)?;\n+        let root_module = krate.root_module(sema.db);\n+        Some(NameRefClass::Definition(Definition::ModuleDef(root_module.into())))\n     }\n \n     pub fn classify_lifetime("}, {"sha": "c71b6d647986052284ac3a2207793b42d25ed3da", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -134,6 +134,10 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:iter:traits:iterator:Iterator\")\n     }\n \n+    pub fn core_iter_IntoIterator(&self) -> Option<Trait> {\n+        self.find_trait(\"core:iter:traits:collect:IntoIterator\")\n+    }\n+\n     pub fn core_iter(&self) -> Option<Module> {\n         self.find_module(\"core:iter\")\n     }"}, {"sha": "39aa47fc903d52f4fe6dc4fc92ef1cd0a12b6fbb", "filename": "crates/ide_db/src/items_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_db%2Fsrc%2Fitems_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fitems_locator.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -142,7 +142,7 @@ fn get_name_definition(\n         candidate_node\n     };\n     let name = ast::Name::cast(candidate_name_node)?;\n-    NameClass::classify(sema, &name)?.defined(sema.db)\n+    NameClass::classify(sema, &name)?.defined()\n }\n \n fn is_assoc_item(item: ItemInNs, db: &RootDatabase) -> bool {"}, {"sha": "e2bbabd53c8737d35fd1506fd824e42f19f65cf4", "filename": "crates/ide_diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87621de2b9e03cf4b34e49107671ff5ff3e81cdd/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=87621de2b9e03cf4b34e49107671ff5ff3e81cdd", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn incorrect_case(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCas\n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::IncorrectCase) -> Option<Vec<Assist>> {\n     let root = ctx.sema.db.parse_or_expand(d.file)?;\n     let name_node = d.ident.to_node(&root);\n-    let def = NameClass::classify(&ctx.sema, &name_node)?.defined(ctx.sema.db)?;\n+    let def = NameClass::classify(&ctx.sema, &name_node)?.defined()?;\n \n     let name_node = InFile::new(d.file, name_node.syntax());\n     let frange = name_node.original_file_range(ctx.sema.db);"}]}