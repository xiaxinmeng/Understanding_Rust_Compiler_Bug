{"sha": "90a41050bad86608001685060bed8879426ecd38", "node_id": "C_kwDOAAsO6NoAKDkwYTQxMDUwYmFkODY2MDgwMDE2ODUwNjBiZWQ4ODc5NDI2ZWNkMzg", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-02-16T09:56:01Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-14T14:07:11Z"}, "message": "implement valtrees as the type-system representation for constant values", "tree": {"sha": "c821c8e6ae6036adde4f759229a40d935addb73f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c821c8e6ae6036adde4f759229a40d935addb73f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a41050bad86608001685060bed8879426ecd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a41050bad86608001685060bed8879426ecd38", "html_url": "https://github.com/rust-lang/rust/commit/90a41050bad86608001685060bed8879426ecd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a41050bad86608001685060bed8879426ecd38/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7969056f6fec0e1ead7f90461e1971ca353dc145", "url": "https://api.github.com/repos/rust-lang/rust/commits/7969056f6fec0e1ead7f90461e1971ca353dc145", "html_url": "https://github.com/rust-lang/rust/commit/7969056f6fec0e1ead7f90461e1971ca353dc145"}], "stats": {"total": 148, "additions": 67, "deletions": 81}, "files": [{"sha": "5d687d06f6f46085485fecf44a8610143f2dd9c8", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=90a41050bad86608001685060bed8879426ecd38", "patch": "@@ -48,10 +48,10 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n                     let mut ty = cx.tcx.type_of(def_id.to_def_id());\n                     let constant = cx\n                         .tcx\n-                        .const_eval_poly(def_id.to_def_id())\n+                        .const_eval_poly_for_typeck(def_id.to_def_id())\n                         .ok()\n-                        .map(|val| rustc_middle::ty::Const::from_value(cx.tcx, val, ty));\n-                    if let Some(Constant::Int(val)) = constant.and_then(miri_to_const) {\n+                        .and_then(|val| val.map(|valtree| rustc_middle::ty::Const::from_value(cx.tcx, valtree, ty)));\n+                    if let Some(Constant::Int(val)) = constant.and_then(|c| miri_to_const(cx.tcx, c)) {\n                         if let ty::Adt(adt, _) = ty.kind() {\n                             if adt.is_enum() {\n                                 ty = adt.repr().discr_type().to_ty(cx.tcx);"}, {"sha": "e10993ba7ddce0685ce140fc99547b72f2b9cd92", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=90a41050bad86608001685060bed8879426ecd38", "patch": "@@ -3,7 +3,6 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -53,8 +52,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             if let ItemKind::Const(hir_ty, _) = &item.kind;\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.kind();\n-            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n+            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;\n "}, {"sha": "0acbd81aec3438ab99989d2fda6c8960257045b6", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=90a41050bad86608001685060bed8879426ecd38", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -43,8 +42,8 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if_chain! {\n             if let ExprKind::Repeat(_, _) = expr.kind;\n             if let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind();\n-            if let ConstKind::Value(ConstValue::Scalar(element_count)) = cst.kind();\n-            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n+            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;\n             then {"}, {"sha": "afca7530556b2dcad330fa60391512fa8362158b", "filename": "clippy_lints/src/matches/overlapping_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs?ref=90a41050bad86608001685060bed8879426ecd38", "patch": "@@ -34,11 +34,11 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n                     let lhs_const = match lhs {\n                         Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0,\n-                        None => miri_to_const(ty.numeric_min_val(cx.tcx)?)?,\n+                        None => miri_to_const(cx.tcx, ty.numeric_min_val(cx.tcx)?)?,\n                     };\n                     let rhs_const = match rhs {\n                         Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n-                        None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n+                        None => miri_to_const(cx.tcx, ty.numeric_max_val(cx.tcx)?)?,\n                     };\n                     let lhs_val = lhs_const.int_value(cx, ty)?;\n                     let rhs_val = rhs_const.int_value(cx, ty)?;"}, {"sha": "9f6fca27b229591b441cb9ca312abdf0d76de2b2", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a41050bad86608001685060bed8879426ecd38/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=90a41050bad86608001685060bed8879426ecd38", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::{\n     BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, Lint};\n-use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -133,7 +133,7 @@ fn is_unfrozen<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n \n fn is_value_unfrozen_raw<'tcx>(\n     cx: &LateContext<'tcx>,\n-    result: Result<ConstValue<'tcx>, ErrorHandled>,\n+    result: Result<Option<ty::ValTree<'tcx>>, ErrorHandled>,\n     ty: Ty<'tcx>,\n ) -> bool {\n     fn inner<'tcx>(cx: &LateContext<'tcx>, val: Const<'tcx>) -> bool {\n@@ -142,7 +142,7 @@ fn is_value_unfrozen_raw<'tcx>(\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n             ty::Adt(ty_def, ..) if Some(ty_def.did()) == cx.tcx.lang_items().unsafe_cell_type() => true,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n-                let val = cx.tcx.destructure_const(cx.param_env.and(val));\n+                let val = cx.tcx.destructure_const(val);\n                 val.fields.iter().any(|field| inner(cx, *field))\n             },\n             _ => false,\n@@ -174,19 +174,19 @@ fn is_value_unfrozen_raw<'tcx>(\n             // I chose this way because unfrozen enums as assoc consts are rare (or, hopefully, none).\n             err == ErrorHandled::TooGeneric\n         },\n-        |val| inner(cx, Const::from_value(cx.tcx, val, ty)),\n+        |val| val.map_or(false, |val| inner(cx, Const::from_value(cx.tcx, val, ty))),\n     )\n }\n \n fn is_value_unfrozen_poly<'tcx>(cx: &LateContext<'tcx>, body_id: BodyId, ty: Ty<'tcx>) -> bool {\n-    let result = cx.tcx.const_eval_poly(body_id.hir_id.owner.to_def_id());\n+    let result = cx.tcx.const_eval_poly_for_typeck(body_id.hir_id.owner.to_def_id());\n     is_value_unfrozen_raw(cx, result, ty)\n }\n \n fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: DefId, ty: Ty<'tcx>) -> bool {\n     let substs = cx.typeck_results().node_substs(hir_id);\n \n-    let result = cx.tcx.const_eval_resolve(\n+    let result = cx.tcx.const_eval_resolve_for_typeck(\n         cx.param_env,\n         ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n         None,"}, {"sha": "c31c560f427f25ef3ec33c05078ffa7b1158e182", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 52, "deletions": 64, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/90a41050bad86608001685060bed8879426ecd38/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a41050bad86608001685060bed8879426ecd38/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=90a41050bad86608001685060bed8879426ecd38", "patch": "@@ -7,7 +7,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind, Node, QPath, UnOp};\n use rustc_lint::LateContext;\n-use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n@@ -423,14 +422,14 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(\n+                    .const_eval_resolve_for_typeck(\n                         self.param_env,\n                         ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs),\n                         None,\n                     )\n                     .ok()\n-                    .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n-                let result = miri_to_const(result);\n+                    .and_then(|val| val.map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty)))?;\n+                let result = miri_to_const(self.lcx.tcx, result);\n                 if result.is_some() {\n                     self.needed_resolution = true;\n                 }\n@@ -580,80 +579,69 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n     }\n }\n \n-pub fn miri_to_const(result: ty::Const<'_>) -> Option<Constant> {\n-    use rustc_middle::mir::interpret::ConstValue;\n+pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: ty::Const<'tcx>) -> Option<Constant> {\n     match result.kind() {\n-        ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(int))) => {\n-            match result.ty().kind() {\n-                ty::Bool => Some(Constant::Bool(int == ScalarInt::TRUE)),\n-                ty::Uint(_) | ty::Int(_) => Some(Constant::Int(int.assert_bits(int.size()))),\n-                ty::Float(FloatTy::F32) => Some(Constant::F32(f32::from_bits(\n+        ty::ConstKind::Value(valtree) => {\n+            match (valtree, result.ty().kind()) {\n+                (ty::ValTree::Leaf(int), ty::Bool) => Some(Constant::Bool(int == ScalarInt::TRUE)),\n+                (ty::ValTree::Leaf(int), ty::Uint(_) | ty::Int(_)) => Some(Constant::Int(int.assert_bits(int.size()))),\n+                (ty::ValTree::Leaf(int), ty::Float(FloatTy::F32)) => Some(Constant::F32(f32::from_bits(\n                     int.try_into().expect(\"invalid f32 bit representation\"),\n                 ))),\n-                ty::Float(FloatTy::F64) => Some(Constant::F64(f64::from_bits(\n+                (ty::ValTree::Leaf(int), ty::Float(FloatTy::F64)) => Some(Constant::F64(f64::from_bits(\n                     int.try_into().expect(\"invalid f64 bit representation\"),\n                 ))),\n-                ty::RawPtr(type_and_mut) => {\n+                (ty::ValTree::Leaf(int), ty::RawPtr(type_and_mut)) => {\n                     if let ty::Uint(_) = type_and_mut.ty.kind() {\n                         return Some(Constant::RawPtr(int.assert_bits(int.size())));\n                     }\n                     None\n                 },\n-                // FIXME: implement other conversions.\n-                _ => None,\n-            }\n-        },\n-        ty::ConstKind::Value(ConstValue::Slice { data, start, end }) => match result.ty().kind() {\n-            ty::Ref(_, tam, _) => match tam.kind() {\n-                ty::Str => String::from_utf8(\n-                    data.inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(start..end)\n-                        .to_owned(),\n-                )\n-                .ok()\n-                .map(Constant::Str),\n-                _ => None,\n-            },\n-            _ => None,\n-        },\n-        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty().kind() {\n-            ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match miri_to_const(*len) {\n-                    Some(Constant::Int(len)) => alloc\n-                        .inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * len as usize))\n-                        .to_owned()\n-                        .chunks(4)\n-                        .map(|chunk| {\n-                            Some(Constant::F32(f32::from_le_bytes(\n-                                chunk.try_into().expect(\"this shouldn't happen\"),\n-                            )))\n-                        })\n-                        .collect::<Option<Vec<Constant>>>()\n-                        .map(Constant::Vec),\n-                    _ => None,\n-                },\n-                ty::Float(FloatTy::F64) => match miri_to_const(*len) {\n-                    Some(Constant::Int(len)) => alloc\n-                        .inner()\n-                        .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * len as usize))\n-                        .to_owned()\n-                        .chunks(8)\n-                        .map(|chunk| {\n-                            Some(Constant::F64(f64::from_le_bytes(\n-                                chunk.try_into().expect(\"this shouldn't happen\"),\n-                            )))\n-                        })\n-                        .collect::<Option<Vec<Constant>>>()\n-                        .map(Constant::Vec),\n+                (ty::ValTree::Branch(_), ty::Ref(_, inner_ty, _)) if *inner_ty == tcx.types.str_ => valtree\n+                    .try_to_raw_bytes(tcx, result.ty())\n+                    .and_then(|bytes| String::from_utf8(bytes.to_owned()).ok().map(Constant::Str)),\n+                (ty::ValTree::Branch(_), ty::Array(arr_ty, len)) => match arr_ty.kind() {\n+                    ty::Float(float_ty) => {\n+                        let chunk_size = match float_ty {\n+                            FloatTy::F32 => 4,\n+                            FloatTy::F64 => 8,\n+                        };\n+\n+                        match miri_to_const(tcx, *len) {\n+                            Some(Constant::Int(_)) => valtree.try_to_raw_bytes(tcx, result.ty()).and_then(|bytes| {\n+                                bytes\n+                                    .to_owned()\n+                                    .chunks(chunk_size)\n+                                    .map(|chunk| match float_ty {\n+                                        FloatTy::F32 => {\n+                                            let float = f32::from_le_bytes(\n+                                                chunk\n+                                                    .try_into()\n+                                                    .expect(&format!(\"expected to construct f32 from {:?}\", chunk)),\n+                                            );\n+                                            Some(Constant::F32(float))\n+                                        },\n+                                        FloatTy::F64 => {\n+                                            let float = f64::from_le_bytes(\n+                                                chunk\n+                                                    .try_into()\n+                                                    .expect(&format!(\"expected to construct f64 from {:?}\", chunk)),\n+                                            );\n+                                            Some(Constant::F64(float))\n+                                        },\n+                                    })\n+                                    .collect::<Option<Vec<Constant>>>()\n+                                    .map(Constant::Vec)\n+                            }),\n+                            _ => None,\n+                        }\n+                    },\n                     _ => None,\n                 },\n-                // FIXME: implement other array type conversions.\n+                // FIXME: implement other conversions.\n                 _ => None,\n-            },\n-            _ => None,\n+            }\n         },\n-        // FIXME: implement other conversions.\n         _ => None,\n     }\n }"}]}