{"sha": "748fbb5371b4ec1b2413dde057c3ae6e050481b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGZiYjUzNzFiNGVjMWIyNDEzZGRlMDU3YzNhZTZlMDUwNDgxYjc=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-29T22:46:54Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-29T22:46:54Z"}, "message": "Merge #360\n\n360: Improve comments and code in ra_vfs r=DJMcNab a=DJMcNab\n\nSome random code/comment improvements I saw whilst trying to understand `ra_vfs`.\r\n\r\nLet's see if this works:\r\nbors r+\n\nCo-authored-by: DJMcNab <36049421+djmcnab@users.noreply.github.com>", "tree": {"sha": "7faaff4e5e54baeeabd614e363c8f59ab33b66ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7faaff4e5e54baeeabd614e363c8f59ab33b66ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748fbb5371b4ec1b2413dde057c3ae6e050481b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748fbb5371b4ec1b2413dde057c3ae6e050481b7", "html_url": "https://github.com/rust-lang/rust/commit/748fbb5371b4ec1b2413dde057c3ae6e050481b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748fbb5371b4ec1b2413dde057c3ae6e050481b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "7fe32938b672d1fb9668b29061ac47b90f1ba599", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe32938b672d1fb9668b29061ac47b90f1ba599", "html_url": "https://github.com/rust-lang/rust/commit/7fe32938b672d1fb9668b29061ac47b90f1ba599"}, {"sha": "5dd602f90162cc3ec89751d76265c761b5aa2797", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd602f90162cc3ec89751d76265c761b5aa2797", "html_url": "https://github.com/rust-lang/rust/commit/5dd602f90162cc3ec89751d76265c761b5aa2797"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "4cfdb83da2a711802e41b0b123f4530a8efb3334", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/748fbb5371b4ec1b2413dde057c3ae6e050481b7/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748fbb5371b4ec1b2413dde057c3ae6e050481b7/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=748fbb5371b4ec1b2413dde057c3ae6e050481b7", "patch": "@@ -8,7 +8,7 @@ use walkdir::{DirEntry, WalkDir};\n use thread_worker::{WorkerHandle};\n use relative_path::RelativePathBuf;\n \n-use crate::VfsRoot;\n+use crate::{VfsRoot, has_rs_extension};\n \n pub(crate) struct Task {\n     pub(crate) root: VfsRoot,\n@@ -59,7 +59,7 @@ fn load_root(root: &Path, filter: &dyn Fn(&DirEntry) -> bool) -> Vec<(RelativePa\n             continue;\n         }\n         let path = entry.path();\n-        if path.extension().and_then(|os| os.to_str()) != Some(\"rs\") {\n+        if !has_rs_extension(path) {\n             continue;\n         }\n         let text = match fs::read_to_string(path) {"}, {"sha": "90d5e21f43f15ce449113c46b69c783a6ce4d979", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/748fbb5371b4ec1b2413dde057c3ae6e050481b7/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748fbb5371b4ec1b2413dde057c3ae6e050481b7/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=748fbb5371b4ec1b2413dde057c3ae6e050481b7", "patch": "@@ -2,11 +2,13 @@\n //!\n //! When doing analysis, we don't want to do any IO, we want to keep all source\n //! code in memory. However, the actual source code is stored on disk, so you\n-//! component which does this.\n //! need to get it into the memory in the first place somehow. VFS is the\n+//! component which does this.\n //!\n-//! It also is responsible for watching the disk for changes, and for merging\n+//! It is also responsible for watching the disk for changes, and for merging\n //! editor state (modified, unsaved files) with disk state.\n+//! TODO: Some LSP clients support watching the disk, so this crate should\n+//! to support custom watcher events (related to https://github.com/rust-analyzer/rust-analyzer/issues/131)\n //!\n //! VFS is based on a concept of roots: a set of directories on the file system\n //! whihc are watched for changes. Typically, there will be a root for each\n@@ -29,7 +31,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use relative_path::RelativePathBuf;\n use crossbeam_channel::Receiver;\n use walkdir::DirEntry;\n-use thread_worker::{WorkerHandle};\n+use thread_worker::WorkerHandle;\n \n use crate::{\n     arena::{ArenaId, Arena},\n@@ -57,12 +59,8 @@ impl RootFilter {\n         if !(self.file_filter)(path) {\n             return None;\n         }\n-        if !(path.starts_with(&self.root)) {\n-            return None;\n-        }\n-        let path = path.strip_prefix(&self.root).unwrap();\n-        let path = RelativePathBuf::from_path(path).unwrap();\n-        Some(path)\n+        let path = path.strip_prefix(&self.root).ok()?;\n+        RelativePathBuf::from_path(path).ok()\n     }\n }\n "}]}