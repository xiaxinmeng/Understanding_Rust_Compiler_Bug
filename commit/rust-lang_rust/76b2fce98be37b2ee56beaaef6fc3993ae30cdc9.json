{"sha": "76b2fce98be37b2ee56beaaef6fc3993ae30cdc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YjJmY2U5OGJlMzdiMmVlNTZiZWFhZWY2ZmMzOTkzYWUzMGNkYzk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-16T21:59:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-16T21:59:27Z"}, "message": "Rollup merge of #75177 - JohnTitor:broken-mir-test, r=eddyb\n\nAdd regression test for issue-66768\n\nFixes #66768\n\nThis is fixed by #70452 (in particular, https://github.com/rust-lang/rust/pull/70452/files#diff-53aef089a36a8e2ed07627fc8915fe63R1763) and I'm not sure it's worth to add this test (i.e. the tests in #70452 are enough), so r? @eddyb to confirm it.", "tree": {"sha": "a1ffd47c40583900a38dc200ab274ab544e1906e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ffd47c40583900a38dc200ab274ab544e1906e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76b2fce98be37b2ee56beaaef6fc3993ae30cdc9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOaw/CRBK7hj4Ov3rIwAAdHIIAGNZP3R2F4nBvkTCt5hrjQSa\nkHeKQj9zOLwb1CpuByDlWB6vQENJBUzOgK7zDQBJW7bj3cAiBDAzgBS3wGB/2okp\nJZ1I+NP7jPaEQWOkx8atA0H9CZFEyINPoAqitrTHkA40hmtpSvDV/1+s3kwL1Yuu\nhlmN1FMiG6PWM288c33pLxPYJyz6AP/CCXzwRJ83tR75aMf62a5NuajPQxnEH6y3\n6aRayRUv77eQzwUGj6Hj8JvE9qPwaHsQRoBN+PO0EfCwEkBk+yRSSuIvjMMFQnVb\nTveNuUQLRRpf2ruACAwpfYCYpAarVyZZMUHd5nlZD0cOZIEmSppY8LrLEMg2NGg=\n=lmof\n-----END PGP SIGNATURE-----\n", "payload": "tree a1ffd47c40583900a38dc200ab274ab544e1906e\nparent 54c74345b4cffbe2c490b79cfda5647897084d00\nparent 50ead683e9c5dbf0cd22325875e9623b5e913486\nauthor Tyler Mandry <tmandry@gmail.com> 1597615167 -0700\ncommitter GitHub <noreply@github.com> 1597615167 -0700\n\nRollup merge of #75177 - JohnTitor:broken-mir-test, r=eddyb\n\nAdd regression test for issue-66768\n\nFixes #66768\n\nThis is fixed by #70452 (in particular, https://github.com/rust-lang/rust/pull/70452/files#diff-53aef089a36a8e2ed07627fc8915fe63R1763) and I'm not sure it's worth to add this test (i.e. the tests in #70452 are enough), so r? @eddyb to confirm it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76b2fce98be37b2ee56beaaef6fc3993ae30cdc9", "html_url": "https://github.com/rust-lang/rust/commit/76b2fce98be37b2ee56beaaef6fc3993ae30cdc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76b2fce98be37b2ee56beaaef6fc3993ae30cdc9/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c74345b4cffbe2c490b79cfda5647897084d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c74345b4cffbe2c490b79cfda5647897084d00", "html_url": "https://github.com/rust-lang/rust/commit/54c74345b4cffbe2c490b79cfda5647897084d00"}, {"sha": "50ead683e9c5dbf0cd22325875e9623b5e913486", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ead683e9c5dbf0cd22325875e9623b5e913486", "html_url": "https://github.com/rust-lang/rust/commit/50ead683e9c5dbf0cd22325875e9623b5e913486"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "ce42c8b01cc322a3ea536bb4d47b2788f1a92255", "filename": "src/test/ui/issues/issue-66768.rs", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/76b2fce98be37b2ee56beaaef6fc3993ae30cdc9/src%2Ftest%2Fui%2Fissues%2Fissue-66768.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76b2fce98be37b2ee56beaaef6fc3993ae30cdc9/src%2Ftest%2Fui%2Fissues%2Fissue-66768.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66768.rs?ref=76b2fce98be37b2ee56beaaef6fc3993ae30cdc9", "patch": "@@ -0,0 +1,205 @@\n+// Regression test for #66768.\n+// check-pass\n+#![allow(dead_code)]\n+//-^ \"dead code\" is needed to reproduce the issue.\n+\n+use std::marker::PhantomData;\n+use std::ops::{Add, Mul};\n+\n+fn problematic_function<Space>(material_surface_element: Edge2dElement)\n+where\n+    DefaultAllocator: FiniteElementAllocator<DimU1, Space>,\n+{\n+    let _: Point2<f64> = material_surface_element.map_reference_coords().into();\n+}\n+\n+impl<T> ArrayLength<T> for UTerm {\n+    type ArrayType = ();\n+}\n+impl<T, N: ArrayLength<T>> ArrayLength<T> for UInt<N, B0> {\n+    type ArrayType = GenericArrayImplEven<T, N>;\n+}\n+impl<T, N: ArrayLength<T>> ArrayLength<T> for UInt<N, B1> {\n+    type ArrayType = GenericArrayImplOdd<T, N>;\n+}\n+impl<U> Add<U> for UTerm {\n+    type Output = U;\n+    fn add(self, _: U) -> Self::Output {\n+        unimplemented!()\n+    }\n+}\n+impl<Ul, Ur> Add<UInt<Ur, B1>> for UInt<Ul, B0>\n+where\n+    Ul: Add<Ur>,\n+{\n+    type Output = UInt<Sum<Ul, Ur>, B1>;\n+    fn add(self, _: UInt<Ur, B1>) -> Self::Output {\n+        unimplemented!()\n+    }\n+}\n+impl<U> Mul<U> for UTerm {\n+    type Output = UTerm;\n+    fn mul(self, _: U) -> Self {\n+        unimplemented!()\n+    }\n+}\n+impl<Ul, B, Ur> Mul<UInt<Ur, B>> for UInt<Ul, B0>\n+where\n+    Ul: Mul<UInt<Ur, B>>,\n+{\n+    type Output = UInt<Prod<Ul, UInt<Ur, B>>, B0>;\n+    fn mul(self, _: UInt<Ur, B>) -> Self::Output {\n+        unimplemented!()\n+    }\n+}\n+impl<Ul, B, Ur> Mul<UInt<Ur, B>> for UInt<Ul, B1>\n+where\n+    Ul: Mul<UInt<Ur, B>>,\n+    UInt<Prod<Ul, UInt<Ur, B>>, B0>: Add<UInt<Ur, B>>,\n+{\n+    type Output = Sum<UInt<Prod<Ul, UInt<Ur, B>>, B0>, UInt<Ur, B>>;\n+    fn mul(self, _: UInt<Ur, B>) -> Self::Output {\n+        unimplemented!()\n+    }\n+}\n+impl<N, R, C> Allocator<N, R, C> for DefaultAllocator\n+where\n+    R: DimName,\n+    C: DimName,\n+    R::Value: Mul<C::Value>,\n+    Prod<R::Value, C::Value>: ArrayLength<N>,\n+{\n+    type Buffer = ArrayStorage<N, R, C>;\n+    fn allocate_uninitialized(_: R, _: C) -> Self::Buffer {\n+        unimplemented!()\n+    }\n+    fn allocate_from_iterator<I>(_: R, _: C, _: I) -> Self::Buffer {\n+        unimplemented!()\n+    }\n+}\n+impl<N, C> Allocator<N, Dynamic, C> for DefaultAllocator {\n+    type Buffer = VecStorage<N, Dynamic, C>;\n+    fn allocate_uninitialized(_: Dynamic, _: C) -> Self::Buffer {\n+        unimplemented!()\n+    }\n+    fn allocate_from_iterator<I>(_: Dynamic, _: C, _: I) -> Self::Buffer {\n+        unimplemented!()\n+    }\n+}\n+impl DimName for DimU1 {\n+    type Value = U1;\n+    fn name() -> Self {\n+        unimplemented!()\n+    }\n+}\n+impl DimName for DimU2 {\n+    type Value = U2;\n+    fn name() -> Self {\n+        unimplemented!()\n+    }\n+}\n+impl<N, D> From<VectorN<N, D>> for Point<N, D>\n+where\n+    DefaultAllocator: Allocator<N, D>,\n+{\n+    fn from(_: VectorN<N, D>) -> Self {\n+        unimplemented!()\n+    }\n+}\n+impl<GeometryDim, NodalDim> FiniteElementAllocator<GeometryDim, NodalDim> for DefaultAllocator where\n+    DefaultAllocator: Allocator<f64, GeometryDim> + Allocator<f64, NodalDim>\n+{\n+}\n+impl ReferenceFiniteElement for Edge2dElement {\n+    type NodalDim = DimU1;\n+}\n+impl FiniteElement<DimU2> for Edge2dElement {\n+    fn map_reference_coords(&self) -> Vector2<f64> {\n+        unimplemented!()\n+    }\n+}\n+\n+type Owned<N, R, C> = <DefaultAllocator as Allocator<N, R, C>>::Buffer;\n+type MatrixMN<N, R, C> = Matrix<N, R, C, Owned<N, R, C>>;\n+type VectorN<N, D> = MatrixMN<N, D, DimU1>;\n+type Vector2<N> = VectorN<N, DimU2>;\n+type Point2<N> = Point<N, DimU2>;\n+type U1 = UInt<UTerm, B1>;\n+type U2 = UInt<UInt<UTerm, B1>, B0>;\n+type Sum<A, B> = <A as Add<B>>::Output;\n+type Prod<A, B> = <A as Mul<B>>::Output;\n+\n+struct GenericArray<T, U: ArrayLength<T>> {\n+    _data: U::ArrayType,\n+}\n+struct GenericArrayImplEven<T, U> {\n+    _parent2: U,\n+    _marker: T,\n+}\n+struct GenericArrayImplOdd<T, U> {\n+    _parent2: U,\n+    _data: T,\n+}\n+struct B0;\n+struct B1;\n+struct UTerm;\n+struct UInt<U, B> {\n+    _marker: PhantomData<(U, B)>,\n+}\n+struct DefaultAllocator;\n+struct Dynamic;\n+struct DimU1;\n+struct DimU2;\n+struct Matrix<N, R, C, S> {\n+    _data: S,\n+    _phantoms: PhantomData<(N, R, C)>,\n+}\n+struct ArrayStorage<N, R, C>\n+where\n+    R: DimName,\n+    C: DimName,\n+    R::Value: Mul<C::Value>,\n+    Prod<R::Value, C::Value>: ArrayLength<N>,\n+{\n+    _data: GenericArray<N, Prod<R::Value, C::Value>>,\n+}\n+struct VecStorage<N, R, C> {\n+    _data: N,\n+    _nrows: R,\n+    _ncols: C,\n+}\n+struct Point<N, D>\n+where\n+    DefaultAllocator: Allocator<N, D>,\n+{\n+    _coords: VectorN<N, D>,\n+}\n+struct Edge2dElement;\n+\n+trait ArrayLength<T> {\n+    type ArrayType;\n+}\n+trait Allocator<Scalar, R, C = DimU1> {\n+    type Buffer;\n+    fn allocate_uninitialized(nrows: R, ncols: C) -> Self::Buffer;\n+    fn allocate_from_iterator<I>(nrows: R, ncols: C, iter: I) -> Self::Buffer;\n+}\n+trait DimName {\n+    type Value;\n+    fn name() -> Self;\n+}\n+trait FiniteElementAllocator<GeometryDim, NodalDim>:\n+    Allocator<f64, GeometryDim> + Allocator<f64, NodalDim>\n+{\n+}\n+trait ReferenceFiniteElement {\n+    type NodalDim;\n+}\n+trait FiniteElement<GeometryDim>: ReferenceFiniteElement\n+where\n+    DefaultAllocator: FiniteElementAllocator<GeometryDim, Self::NodalDim>,\n+{\n+    fn map_reference_coords(&self) -> VectorN<f64, GeometryDim>;\n+}\n+\n+fn main() {}"}]}