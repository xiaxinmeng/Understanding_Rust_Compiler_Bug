{"sha": "6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "node_id": "C_kwDOAAsO6NoAKDZiOTRmNGRjY2M4YmQ2OGZmNDA3ODE5ZmQ1MWYyZDYyZDljYTFhZGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-03T05:30:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T05:30:22Z"}, "message": "Rollup merge of #106575 - estebank:issue-64008, r=pnkfelix\n\nSuggest `move` in nested closure when appropriate\n\nFix #64008.", "tree": {"sha": "f25f1be99eb358d641e9f2fb324bc8ae04f9de9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25f1be99eb358d641e9f2fb324bc8ae04f9de9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3JvuCRBK7hj4Ov3rIwAAg7QIALGnZl0n5QJcrvCo4LGsIReY\nQASzl7IP8LhHIlWEx/WzzLD+LdpWnLurPbTBqceweVnRnw2zjtBpWBYBXOJzC6lc\n+uwWaWI2arCXOutWRuFJ0dLXlM4Hl708A/923ZVsKPZOZSJT7xpzrNr6PhM0Nojq\nrYQe7Qs92nfHgKkeufrwRzXhnwyyimL3OnMOF1juW5XROcBlv5H2xmcvH5c9Qg5M\no+KH1J7gdMTTpG8CJ+K/nuafFdfHgLPopUQgleX2OTH4kKC6Fe4PbwfO2n3v1zLt\nTfZn6OYeBSInZnTDORqhQHrAFEScBGchfIfHqZsQ2MtOuJjSWq8WFd6TtKsr6cA=\n=ytbn\n-----END PGP SIGNATURE-----\n", "payload": "tree f25f1be99eb358d641e9f2fb324bc8ae04f9de9a\nparent f02439dea78e5c2df42198c7a03e2db6002ff263\nparent e6b84eb7973fb751744a1802cee404254d67673e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675402222 +0100\ncommitter GitHub <noreply@github.com> 1675402222 +0100\n\nRollup merge of #106575 - estebank:issue-64008, r=pnkfelix\n\nSuggest `move` in nested closure when appropriate\n\nFix #64008.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "html_url": "https://github.com/rust-lang/rust/commit/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f02439dea78e5c2df42198c7a03e2db6002ff263", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02439dea78e5c2df42198c7a03e2db6002ff263", "html_url": "https://github.com/rust-lang/rust/commit/f02439dea78e5c2df42198c7a03e2db6002ff263"}, {"sha": "e6b84eb7973fb751744a1802cee404254d67673e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b84eb7973fb751744a1802cee404254d67673e", "html_url": "https://github.com/rust-lang/rust/commit/e6b84eb7973fb751744a1802cee404254d67673e"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "7901a5046abad12a466cf045b9591d4fe618f5f1", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "patch": "@@ -583,10 +583,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let err = FnMutError {\n             span: *span,\n             ty_err: match output_ty.kind() {\n-                ty::Closure(_, _) => FnMutReturnTypeErr::ReturnClosure { span: *span },\n                 ty::Generator(def, ..) if self.infcx.tcx.generator_is_async(*def) => {\n                     FnMutReturnTypeErr::ReturnAsyncBlock { span: *span }\n                 }\n+                _ if output_ty.contains_closure() => {\n+                    FnMutReturnTypeErr::ReturnClosure { span: *span }\n+                }\n                 _ => FnMutReturnTypeErr::ReturnRef { span: *span },\n             },\n         };\n@@ -997,7 +999,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn suggest_move_on_borrowing_closure(&self, diag: &mut Diagnostic) {\n         let map = self.infcx.tcx.hir();\n         let body_id = map.body_owned_by(self.mir_def_id());\n-        let expr = &map.body(body_id).value;\n+        let expr = &map.body(body_id).value.peel_blocks();\n         let mut closure_span = None::<rustc_span::Span>;\n         match expr.kind {\n             hir::ExprKind::MethodCall(.., args, _) => {\n@@ -1012,20 +1014,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Block(blk, _) => {\n-                if let Some(expr) = blk.expr {\n-                    // only when the block is a closure\n-                    if let hir::ExprKind::Closure(hir::Closure {\n-                        capture_clause: hir::CaptureBy::Ref,\n-                        body,\n-                        ..\n-                    }) = expr.kind\n-                    {\n-                        let body = map.body(*body);\n-                        if !matches!(body.generator_kind, Some(hir::GeneratorKind::Async(..))) {\n-                            closure_span = Some(expr.span.shrink_to_lo());\n-                        }\n-                    }\n+            hir::ExprKind::Closure(hir::Closure {\n+                capture_clause: hir::CaptureBy::Ref,\n+                body,\n+                ..\n+            }) => {\n+                let body = map.body(*body);\n+                if !matches!(body.generator_kind, Some(hir::GeneratorKind::Async(..))) {\n+                    closure_span = Some(expr.span.shrink_to_lo());\n                 }\n             }\n             _ => {}"}, {"sha": "98d6b68356368c14e06717b05a5c4ccc72e05915", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "patch": "@@ -2043,6 +2043,28 @@ impl<'tcx> Ty<'tcx> {\n         cf.is_break()\n     }\n \n+    /// Checks whether a type recursively contains any closure\n+    ///\n+    /// Example: `Option<[closure@file.rs:4:20]>` returns true\n+    pub fn contains_closure(self) -> bool {\n+        struct ContainsClosureVisitor;\n+\n+        impl<'tcx> TypeVisitor<'tcx> for ContainsClosureVisitor {\n+            type BreakTy = ();\n+\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                if let ty::Closure(_, _) = t.kind() {\n+                    ControlFlow::Break(())\n+                } else {\n+                    t.super_visit_with(self)\n+                }\n+            }\n+        }\n+\n+        let cf = self.visit_with(&mut ContainsClosureVisitor);\n+        cf.is_break()\n+    }\n+\n     /// Returns the type and mutability of `*ty`.\n     ///\n     /// The parameter `explicit` indicates if this is an *explicit* dereference."}, {"sha": "1a08470064cd7470fe9f7e1d9ba9cf5b049ae920", "filename": "tests/ui/borrowck/issue-95079-missing-move-in-nested-closure.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.fixed?ref=6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+#![allow(dead_code, path_statements)]\n+fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n+    None.into_iter()\n+        .flat_map(move |()| s.chars().map(move |c| format!(\"{}{}\", c, s)))\n+        //~^ ERROR captured variable cannot escape `FnMut` closure body\n+        //~| HELP consider adding 'move' keyword before the nested closure\n+}\n+\n+fn foo2(s: &str) -> impl Sized + '_ {\n+    move |()| s.chars().map(move |c| format!(\"{}{}\", c, s))\n+    //~^ ERROR lifetime may not live long enough\n+    //~| HELP consider adding 'move' keyword before the nested closure\n+}\n+\n+pub struct X;\n+pub fn foo3<'a>(\n+    bar: &'a X,\n+) -> impl Iterator<Item = ()> + 'a {\n+    Some(()).iter().flat_map(move |()| {\n+        Some(()).iter().map(move |()| { bar; }) //~ ERROR captured variable cannot escape\n+        //~^ HELP consider adding 'move' keyword before the nested closure\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "b93292e3589d371a67bad831dc716efc96ff59d0", "filename": "tests/ui/borrowck/issue-95079-missing-move-in-nested-closure.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs?ref=6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(dead_code, path_statements)]\n fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n     None.into_iter()\n         .flat_map(move |()| s.chars().map(|c| format!(\"{}{}\", c, s)))\n@@ -11,4 +13,14 @@ fn foo2(s: &str) -> impl Sized + '_ {\n     //~| HELP consider adding 'move' keyword before the nested closure\n }\n \n+pub struct X;\n+pub fn foo3<'a>(\n+    bar: &'a X,\n+) -> impl Iterator<Item = ()> + 'a {\n+    Some(()).iter().flat_map(move |()| {\n+        Some(()).iter().map(|()| { bar; }) //~ ERROR captured variable cannot escape\n+        //~^ HELP consider adding 'move' keyword before the nested closure\n+    })\n+}\n+\n fn main() {}"}, {"sha": "776c338deacf40f4c6d2db778e8e710f44557d40", "filename": "tests/ui/borrowck/issue-95079-missing-move-in-nested-closure.stderr", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr?ref=6b94f4dccc8bd68ff407819fd51f2d62d9ca1ade", "patch": "@@ -1,13 +1,13 @@\n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:3:29\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:5:29\n    |\n LL | fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n    |         - variable defined here\n LL |     None.into_iter()\n LL |         .flat_map(move |()| s.chars().map(|c| format!(\"{}{}\", c, s)))\n    |                           - -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                           | |\n-   |                           | returns a reference to a captured variable which escapes the closure body\n+   |                           | returns a closure that contains a reference to a captured variable, which then escapes the closure body\n    |                           | variable captured here\n    |                           inferred to be a `FnMut` closure\n    |\n@@ -19,12 +19,12 @@ LL |         .flat_map(move |()| s.chars().map(move |c| format!(\"{}{}\", c, s)))\n    |                                           ++++\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:9:15\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:11:15\n    |\n LL |     move |()| s.chars().map(|c| format!(\"{}{}\", c, s))\n    |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |     |       |\n-   |     |       return type of closure `Map<Chars<'_>, [closure@$DIR/issue-95079-missing-move-in-nested-closure.rs:9:29: 9:32]>` contains a lifetime `'2`\n+   |     |       return type of closure `Map<Chars<'_>, [closure@$DIR/issue-95079-missing-move-in-nested-closure.rs:11:29: 11:32]>` contains a lifetime `'2`\n    |     lifetime `'1` represents this closure's body\n    |\n    = note: closure implements `Fn`, so references to captured variables can't escape the closure\n@@ -33,5 +33,26 @@ help: consider adding 'move' keyword before the nested closure\n LL |     move |()| s.chars().map(move |c| format!(\"{}{}\", c, s))\n    |                             ++++\n \n-error: aborting due to 2 previous errors\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:21:9\n+   |\n+LL |     bar: &'a X,\n+   |     --- variable defined here\n+LL | ) -> impl Iterator<Item = ()> + 'a {\n+LL |     Some(()).iter().flat_map(move |()| {\n+   |                                      - inferred to be a `FnMut` closure\n+LL |         Some(()).iter().map(|()| { bar; })\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^---^^^^\n+   |         |                          |\n+   |         |                          variable captured here\n+   |         returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |         Some(()).iter().map(move |()| { bar; })\n+   |                             ++++\n+\n+error: aborting due to 3 previous errors\n "}]}