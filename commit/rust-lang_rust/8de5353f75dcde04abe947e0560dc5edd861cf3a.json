{"sha": "8de5353f75dcde04abe947e0560dc5edd861cf3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZTUzNTNmNzVkY2RlMDRhYmU5NDdlMDU2MGRjNWVkZDg2MWNmM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T21:18:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T21:18:37Z"}, "message": "Auto merge of #49947 - oli-obk:turing_complete_const_eval, r=nagisa\n\nDon't abort const eval due to long running evals, just warn\n\none check-box of #49930\n\nr? @nagisa (https://github.com/rust-lang/rfcs/pull/2344#issuecomment-368246665)", "tree": {"sha": "40e3f2e55867e0198692b216a13e759708753954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40e3f2e55867e0198692b216a13e759708753954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de5353f75dcde04abe947e0560dc5edd861cf3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de5353f75dcde04abe947e0560dc5edd861cf3a", "html_url": "https://github.com/rust-lang/rust/commit/8de5353f75dcde04abe947e0560dc5edd861cf3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de5353f75dcde04abe947e0560dc5edd861cf3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7360d6dd678d186d9c9b46311b75ba6840e61aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7360d6dd678d186d9c9b46311b75ba6840e61aa2", "html_url": "https://github.com/rust-lang/rust/commit/7360d6dd678d186d9c9b46311b75ba6840e61aa2"}, {"sha": "907df8c0f7fd5ce07495010d3c0dd112f825d2fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/907df8c0f7fd5ce07495010d3c0dd112f825d2fe", "html_url": "https://github.com/rust-lang/rust/commit/907df8c0f7fd5ce07495010d3c0dd112f825d2fe"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "c5be1b1174c432c0d2b2bb6c624a6cd8ba2aa859", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=8de5353f75dcde04abe947e0560dc5edd861cf3a", "patch": "@@ -551,7 +551,6 @@ for ::mir::interpret::EvalError<'gcx> {\n             InvalidPointerMath |\n             ReadUndefBytes |\n             DeadLocal |\n-            ExecutionTimeLimitReached |\n             StackFrameLimitReached |\n             OutOfTls |\n             TlsOutOfBounds |"}, {"sha": "b919f4d15a840a479678aafc968ffafc4cb05bfe", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=8de5353f75dcde04abe947e0560dc5edd861cf3a", "patch": "@@ -65,7 +65,6 @@ pub enum EvalErrorKind<'tcx> {\n     Intrinsic(String),\n     OverflowingMath,\n     InvalidChar(u128),\n-    ExecutionTimeLimitReached,\n     StackFrameLimitReached,\n     OutOfTls,\n     TlsOutOfBounds,\n@@ -188,8 +187,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"mir not found\",\n             InvalidChar(..) =>\n                 \"tried to interpret an invalid 32-bit value as a char\",\n-            ExecutionTimeLimitReached =>\n-                \"the expression was too complex to be evaluated or resulted in an infinite loop\",\n             StackFrameLimitReached =>\n                 \"reached the configured maximum number of stack frames\",\n             OutOfTls =>"}, {"sha": "32de006459d32ca1837ad9ed54c93ae5f93b3269", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8de5353f75dcde04abe947e0560dc5edd861cf3a", "patch": "@@ -112,8 +112,6 @@ pub struct Session {\n \n     /// The maximum number of stackframes allowed in const eval\n     pub const_eval_stack_frame_limit: usize,\n-    /// The maximum number miri steps per constant\n-    pub const_eval_step_limit: usize,\n \n     /// The metadata::creader module may inject an allocator/panic_runtime\n     /// dependency if it didn't already find one, and this tracks what was\n@@ -1103,7 +1101,6 @@ pub fn build_session_(\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n-        const_eval_step_limit: 1_000_000,\n         next_node_id: OneThread::new(Cell::new(NodeId::new(1))),\n         injected_allocator: Once::new(),\n         allocator_kind: Once::new(),"}, {"sha": "7b4b7082bb6ceae41fb22c35d27e09fbe64aac2f", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8de5353f75dcde04abe947e0560dc5edd861cf3a", "patch": "@@ -509,7 +509,6 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             Intrinsic(ref s) => Intrinsic(s.clone()),\n             OverflowingMath => OverflowingMath,\n             InvalidChar(c) => InvalidChar(c),\n-            ExecutionTimeLimitReached => ExecutionTimeLimitReached,\n             StackFrameLimitReached => StackFrameLimitReached,\n             OutOfTls => OutOfTls,\n             TlsOutOfBounds => TlsOutOfBounds,"}, {"sha": "03785f9623b8c0b6925d15f77556cd3f6b57add1", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8de5353f75dcde04abe947e0560dc5edd861cf3a", "patch": "@@ -45,7 +45,7 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// The maximum number of terminators that may be evaluated.\n     /// This prevents infinite loops and huge computations from freezing up const eval.\n     /// Remove once halting problem is solved.\n-    pub(crate) steps_remaining: usize,\n+    pub(crate) terminators_remaining: usize,\n }\n \n /// A stack frame.\n@@ -195,7 +195,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             memory: Memory::new(tcx, memory_data),\n             stack: Vec::new(),\n             stack_limit: tcx.sess.const_eval_stack_frame_limit,\n-            steps_remaining: tcx.sess.const_eval_step_limit,\n+            terminators_remaining: 1_000_000,\n         }\n     }\n \n@@ -538,7 +538,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             }\n \n             Aggregate(ref kind, ref operands) => {\n-                self.inc_step_counter_and_check_limit(operands.len())?;\n+                self.inc_step_counter_and_check_limit(operands.len());\n \n                 let (dest, active_field_index) = match **kind {\n                     mir::AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {"}, {"sha": "554d87a04e2f815f5da33775b42588d653602f7e", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5353f75dcde04abe947e0560dc5edd861cf3a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=8de5353f75dcde04abe947e0560dc5edd861cf3a", "patch": "@@ -8,12 +8,12 @@ use rustc::mir::interpret::EvalResult;\n use super::{EvalContext, Machine};\n \n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n-    pub fn inc_step_counter_and_check_limit(&mut self, n: usize) -> EvalResult<'tcx> {\n-        self.steps_remaining = self.steps_remaining.saturating_sub(n);\n-        if self.steps_remaining > 0 {\n-            Ok(())\n-        } else {\n-            err!(ExecutionTimeLimitReached)\n+    pub fn inc_step_counter_and_check_limit(&mut self, n: usize) {\n+        self.terminators_remaining = self.terminators_remaining.saturating_sub(n);\n+        if self.terminators_remaining == 0 {\n+            // FIXME(#49980): make this warning a lint\n+            self.tcx.sess.span_warn(self.frame().span, \"Constant evaluating a complex constant, this might take some time\");\n+            self.terminators_remaining = 1_000_000;\n         }\n     }\n \n@@ -36,7 +36,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             return Ok(true);\n         }\n \n-        self.inc_step_counter_and_check_limit(1)?;\n+        self.inc_step_counter_and_check_limit(1);\n \n         let terminator = basic_block.terminator();\n         assert_eq!(old_frames, self.cur_frame());"}]}