{"sha": "fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "node_id": "C_kwDOAAsO6NoAKGZjMjdhZTE0ZjZkN2NiYTQ2OGJkYWM0ZTNhYTM0ZDMzNmE3OGI1NGY", "commit": {"author": {"name": "miguelraz", "email": "miguelraz@ciencias.unam.mx", "date": "2023-04-18T02:17:01Z"}, "committer": {"name": "miguelraz", "email": "miguelraz@ciencias.unam.mx", "date": "2023-04-18T18:30:00Z"}, "message": "refactor SimlifyCfg and friends - no globals, just enums", "tree": {"sha": "33ea334680ba9a7ae27042467ba63554e2ab712c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ea334680ba9a7ae27042467ba63554e2ab712c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "html_url": "https://github.com/rust-lang/rust/commit/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/comments", "author": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7908a1d65496b88626e4b7c193c81d777005d6f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7908a1d65496b88626e4b7c193c81d777005d6f3", "html_url": "https://github.com/rust-lang/rust/commit/7908a1d65496b88626e4b7c193c81d777005d6f3"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "4ab07ab4256f6da4d8ca9aecff0e222884a0c25c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "patch": "@@ -296,7 +296,7 @@ fn mir_const(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &Steal<\n             &Lint(check_const_item_mutation::CheckConstItemMutation),\n             &Lint(function_item_references::FunctionItemReferences),\n             // What we need to do constant evaluation.\n-            &simplify::SimplifyCfg::new(\"initial\"),\n+            &simplify::SimplifyCfg::Initial,\n             &rustc_peek::SanityCheck, // Just a lint\n         ],\n         None,\n@@ -334,11 +334,7 @@ fn mir_promoted(\n     pm::run_passes(\n         tcx,\n         &mut body,\n-        &[\n-            &promote_pass,\n-            &simplify::SimplifyCfg::new(\"promote-consts\"),\n-            &coverage::InstrumentCoverage,\n-        ],\n+        &[&promote_pass, &simplify::SimplifyCfg::PromoteConsts, &coverage::InstrumentCoverage],\n         Some(MirPhase::Analysis(AnalysisPhase::Initial)),\n     );\n \n@@ -467,10 +463,7 @@ fn run_analysis_to_runtime_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>\n         pm::run_passes(\n             tcx,\n             body,\n-            &[\n-                &remove_uninit_drops::RemoveUninitDrops,\n-                &simplify::SimplifyCfg::new(\"remove-false-edges\"),\n-            ],\n+            &[&remove_uninit_drops::RemoveUninitDrops, &simplify::SimplifyCfg::RemoveFalseEdges],\n             None,\n         );\n         check_consts::post_drop_elaboration::check_live_drops(tcx, &body); // FIXME: make this a MIR lint\n@@ -492,7 +485,7 @@ fn run_analysis_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let passes: &[&dyn MirPass<'tcx>] = &[\n         &cleanup_post_borrowck::CleanupPostBorrowck,\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n-        &simplify::SimplifyCfg::new(\"early-opt\"),\n+        &simplify::SimplifyCfg::EarlyOpt,\n         &deref_separator::Derefer,\n     ];\n \n@@ -525,7 +518,7 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n /// Returns the sequence of passes that do the initial cleanup of runtime MIR.\n fn run_runtime_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let passes: &[&dyn MirPass<'tcx>] =\n-        &[&lower_intrinsics::LowerIntrinsics, &simplify::SimplifyCfg::new(\"elaborate-drops\")];\n+        &[&lower_intrinsics::LowerIntrinsics, &simplify::SimplifyCfg::ElaborateDrops];\n \n     pm::run_passes(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::PostCleanup)));\n \n@@ -551,7 +544,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n             &unreachable_prop::UnreachablePropagation,\n             &uninhabited_enum_branching::UninhabitedEnumBranching,\n-            &o1(simplify::SimplifyCfg::new(\"after-uninhabited-enum-branching\")),\n+            &o1(simplify::SimplifyCfg::AfterUninhabitedEnumBranching),\n             &inline::Inline,\n             &remove_storage_markers::RemoveStorageMarkers,\n             &remove_zsts::RemoveZsts,\n@@ -564,23 +557,23 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &instcombine::InstCombine,\n             &separate_const_switch::SeparateConstSwitch,\n-            &simplify::SimplifyLocals::new(\"before-const-prop\"),\n+            &simplify::SimplifyLocals::BeforeConstProp,\n             &copy_prop::CopyProp,\n             &const_prop::ConstProp,\n             &dataflow_const_prop::DataflowConstProp,\n             //\n             // Const-prop runs unconditionally, but doesn't mutate the MIR at mir-opt-level=0.\n             &const_debuginfo::ConstDebugInfo,\n-            &o1(simplify_branches::SimplifyConstCondition::new(\"after-const-prop\")),\n+            &o1(simplify_branches::SimplifyConstConditionPassName::AfterConstProp),\n             &early_otherwise_branch::EarlyOtherwiseBranch,\n             &simplify_comparison_integral::SimplifyComparisonIntegral,\n             &dead_store_elimination::DeadStoreElimination,\n             &dest_prop::DestinationPropagation,\n-            &o1(simplify_branches::SimplifyConstCondition::new(\"final\")),\n+            &o1(simplify_branches::SimplifyConstConditionPassName::Final),\n             &o1(remove_noop_landing_pads::RemoveNoopLandingPads),\n-            &o1(simplify::SimplifyCfg::new(\"final\")),\n+            &o1(simplify::SimplifyCfg::Final),\n             &nrvo::RenameReturnPlace,\n-            &simplify::SimplifyLocals::new(\"final\"),\n+            &simplify::SimplifyLocals::Final,\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &deduplicate_blocks::DeduplicateBlocks,\n             &large_enums::EnumSizeOpt { discrepancy: 128 },"}, {"sha": "4396a83e8b818dd7511fcd147923e79d7cdf2710", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "patch": "@@ -95,7 +95,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             &add_moves_for_packed_drops::AddMovesForPackedDrops,\n             &deref_separator::Derefer,\n             &remove_noop_landing_pads::RemoveNoopLandingPads,\n-            &simplify::SimplifyCfg::new(\"make_shim\"),\n+            &simplify::SimplifyCfg::MakeShim,\n             &add_call_guards::CriticalCallEdges,\n             &abort_unwinding_calls::AbortUnwindingCalls,\n         ],"}, {"sha": "88574addaa09149e6b270092021893c80e370a4e", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "patch": "@@ -36,13 +36,31 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n \n-pub struct SimplifyCfg {\n-    label: String,\n+pub enum SimplifyCfg {\n+    Initial,\n+    PromoteConsts,\n+    RemoveFalseEdges,\n+    EarlyOpt,\n+    ElaborateDrops,\n+    Final,\n+    MakeShim,\n+    AfterUninhabitedEnumBranching,\n }\n \n impl SimplifyCfg {\n-    pub fn new(label: &str) -> Self {\n-        SimplifyCfg { label: format!(\"SimplifyCfg-{}\", label) }\n+    pub fn name(&self) -> &'static str {\n+        match self {\n+            SimplifyCfg::Initial => \"SimplifyCfg-initial\",\n+            SimplifyCfg::PromoteConsts => \"SimplifyCfg-promote-consts\",\n+            SimplifyCfg::RemoveFalseEdges => \"SimplifyCfg-remove-false-edges\",\n+            SimplifyCfg::EarlyOpt => \"SimplifyCfg-early-opt\",\n+            SimplifyCfg::ElaborateDrops => \"SimplifyCfg-elaborate-drops\",\n+            SimplifyCfg::Final => \"SimplifyCfg-final\",\n+            SimplifyCfg::MakeShim => \"SimplifyCfg-make_shim\",\n+            SimplifyCfg::AfterUninhabitedEnumBranching => {\n+                \"SimplifyCfg-after-uninhabited-enum-branching\"\n+            }\n+        }\n     }\n }\n \n@@ -57,11 +75,11 @@ pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n     fn name(&self) -> &str {\n-        &self.label\n+        &self.name()\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body.source);\n+        debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.name(), body.source);\n         simplify_cfg(tcx, body);\n     }\n }\n@@ -423,19 +441,17 @@ fn save_unreachable_coverage(\n     ));\n }\n \n-pub struct SimplifyLocals {\n-    label: String,\n-}\n-\n-impl SimplifyLocals {\n-    pub fn new(label: &str) -> SimplifyLocals {\n-        SimplifyLocals { label: format!(\"SimplifyLocals-{}\", label) }\n-    }\n+pub enum SimplifyLocals {\n+    BeforeConstProp,\n+    Final,\n }\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn name(&self) -> &str {\n-        &self.label\n+    fn name(&self) -> &'static str {\n+        match &self {\n+            SimplifyLocals::BeforeConstProp => \"SimplifyLocals-before-const-prop\",\n+            SimplifyLocals::Final => \"SimplifyLocals-final\",\n+        }\n     }\n \n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {"}, {"sha": "ddaf86a9e730febc4cffe8e5fdd762c5b548db65", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc27ae14f6d7cba468bdac4e3aa34d336a78b54f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=fc27ae14f6d7cba468bdac4e3aa34d336a78b54f", "patch": "@@ -2,20 +2,19 @@ use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n-/// A pass that replaces a branch with a goto when its condition is known.\n-pub struct SimplifyConstCondition {\n-    label: String,\n-}\n-\n-impl SimplifyConstCondition {\n-    pub fn new(label: &str) -> Self {\n-        SimplifyConstCondition { label: format!(\"SimplifyConstCondition-{}\", label) }\n-    }\n+pub enum SimplifyConstConditionPassName {\n+    AfterConstProp,\n+    Final,\n }\n-\n-impl<'tcx> MirPass<'tcx> for SimplifyConstCondition {\n-    fn name(&self) -> &str {\n-        &self.label\n+/// A pass that replaces a branch with a goto when its condition is known.\n+impl<'tcx> MirPass<'tcx> for SimplifyConstConditionPassName {\n+    fn name(&self) -> &'static str {\n+        match self {\n+            SimplifyConstConditionPassName::AfterConstProp => {\n+                \"SimplifyConstCondition-after-const-prop\"\n+            }\n+            SimplifyConstConditionPassName::Final => \"SimplifyConstCondition-final\",\n+        }\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}]}