{"sha": "013107a25c92262f515b1da8a473c7fad32269df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMzEwN2EyNWM5MjI2MmY1MTViMWRhOGE0NzNjN2ZhZDMyMjY5ZGY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-25T15:57:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-25T15:57:26Z"}, "message": "Properly take mutable object fields into account during alias analysis\n\nCloses #1055", "tree": {"sha": "06504079d813df238b1647cdd23b5e313072c474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06504079d813df238b1647cdd23b5e313072c474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/013107a25c92262f515b1da8a473c7fad32269df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/013107a25c92262f515b1da8a473c7fad32269df", "html_url": "https://github.com/rust-lang/rust/commit/013107a25c92262f515b1da8a473c7fad32269df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/013107a25c92262f515b1da8a473c7fad32269df/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfdf193c4671a11e40743748d9cded9603386346", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf193c4671a11e40743748d9cded9603386346", "html_url": "https://github.com/rust-lang/rust/commit/cfdf193c4671a11e40743748d9cded9603386346"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "e98b5590f64d0d8c315fb80226ba1e787d6ac0da", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/013107a25c92262f515b1da8a473c7fad32269df/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013107a25c92262f515b1da8a473c7fad32269df/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=013107a25c92262f515b1da8a473c7fad32269df", "patch": "@@ -551,6 +551,7 @@ fn ty_can_unsafely_include(cx: ctx, needle: unsafe_ty, haystack: ty::t,\n             for t in ts { if helper(tcx, needle, t, mut) { ret true; } }\n             ret false;\n           }\n+          ty::ty_fn(ast::proto_bare., _, _, _, _) { ret false; }\n           // These may contain anything.\n           ty::ty_fn(_, _, _, _, _) | ty::ty_obj(_) { ret true; }\n           // A type param may include everything, but can only be\n@@ -665,26 +666,32 @@ fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool)\n     for d in *base_root.ds {\n         if d.mut { unsafe_ty = some(contains(d.outer_t)); break; }\n     }\n-    if is_none(path_def_id(cx, base_root.ex)) {\n-        alt base_root.ex.node {\n-          ast::expr_call(f, args, _) {\n-            let fty = ty::expr_ty(cx.tcx, f);\n-            alt ty::ty_fn_ret_style(cx.tcx, fty) {\n-              ast::return_ref(mut, arg_n) {\n-                let arg = args[arg_n - 1u];\n-                let arg_root = expr_root(cx, arg, false);\n-                if mut {\n-                    let ret_ty = ty::expr_ty(cx.tcx, base_root.ex);\n-                    unsafe_ty = some(mut_contains(ret_ty));\n-                }\n-                if !is_none(arg_root.mut) { unsafe_ty = arg_root.mut; }\n-                ret {ex: arg_root.ex, mut: unsafe_ty};\n-              }\n-              _ {}\n+    alt base_root.ex.node {\n+      ast::expr_path(_) {\n+        alt cx.tcx.def_map.get(base_root.ex.id) {\n+          ast::def_obj_field(_, ast::mut.) {\n+            unsafe_ty = some(mut_contains(ty::expr_ty(cx.tcx, base_root.ex)));\n+          }\n+          _ {}\n+        }\n+      }\n+      ast::expr_call(f, args, _) {\n+        let fty = ty::expr_ty(cx.tcx, f);\n+        alt ty::ty_fn_ret_style(cx.tcx, fty) {\n+          ast::return_ref(mut, arg_n) {\n+            let arg = args[arg_n - 1u];\n+            let arg_root = expr_root(cx, arg, false);\n+            if mut {\n+                let ret_ty = ty::expr_ty(cx.tcx, base_root.ex);\n+                unsafe_ty = some(mut_contains(ret_ty));\n             }\n+            if !is_none(arg_root.mut) { unsafe_ty = arg_root.mut; }\n+            ret {ex: arg_root.ex, mut: unsafe_ty};\n           }\n           _ {}\n         }\n+      }\n+      _ {}\n     }\n     ret {ex: base_root.ex, mut: unsafe_ty};\n }"}, {"sha": "a3f5eb7d44958582d444b1ca0a62962267fc0778", "filename": "src/lib/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/013107a25c92262f515b1da8a473c7fad32269df/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013107a25c92262f515b1da8a473c7fad32269df/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=013107a25c92262f515b1da8a473c7fad32269df", "patch": "@@ -1,9 +1,9 @@\n /**\n  * Hashmap implementation.\n  */\n-type hashfn<K> = fn@(K) -> uint;\n+type hashfn<K> = fn(K) -> uint;\n \n-type eqfn<K> = fn@(K, K) -> bool;\n+type eqfn<K> = fn(K, K) -> bool;\n \n type hashmap<K, V> =\n     obj {"}, {"sha": "811eff881aea8dc3760643a28bf05c0faac080c9", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/013107a25c92262f515b1da8a473c7fad32269df/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013107a25c92262f515b1da8a473c7fad32269df/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=013107a25c92262f515b1da8a473c7fad32269df", "patch": "@@ -6,15 +6,10 @@ import std::uint;\n \n fn main() {\n     let count = @mutable 0u;\n-    let hash = bind fn (&&_s: [@str], count: @mutable uint) -> uint {\n-        *count += 1u;\n-        if *count == 10u {\n-            fail;\n-        } else {\n-            ret *count;\n-        }\n-    } (_, count);\n-\n+    fn hash(&&s: [@str]) -> uint {\n+        if (std::vec::len(s) > 0u && std::str::eq(*s[0], \"boom\")) { fail; }\n+        ret 10u;\n+    }\n     fn eq(&&s: [@str], &&t: [@str]) -> bool {\n         ret s == t;\n     }\n@@ -25,4 +20,5 @@ fn main() {\n         arr += [@\"key stuff\"];\n         map.insert(arr, arr + [@\"value stuff\"]);\n     }\n+    map.insert([@\"boom\"], []);\n }\n\\ No newline at end of file"}, {"sha": "32ecae5c6c82b79ee7774e5d84b028373c46d18e", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/013107a25c92262f515b1da8a473c7fad32269df/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013107a25c92262f515b1da8a473c7fad32269df/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=013107a25c92262f515b1da8a473c7fad32269df", "patch": "@@ -8,11 +8,13 @@ import std::uint;\n import std::util;\n import std::option;\n \n+\n #[test]\n fn test_simple() {\n     log \"*** starting test_simple\";\n     fn eq_uint(&&x: uint, &&y: uint) -> bool { ret x == y; }\n-    let hasher_uint: map::hashfn<uint> = bind util::id(_);\n+    fn uint_id(&&x: uint) -> uint { x }\n+    let hasher_uint: map::hashfn<uint> = uint_id;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hasher_str: map::hashfn<str> = str::hash;\n     let eqer_str: map::eqfn<str> = str::eq;\n@@ -84,8 +86,9 @@ fn test_growth() {\n     log \"*** starting test_growth\";\n     let num_to_insert: uint = 64u;\n     fn eq_uint(&&x: uint, &&y: uint) -> bool { ret x == y; }\n+    fn uint_id(&&x: uint) -> uint { x }\n     log \"uint -> uint\";\n-    let hasher_uint: map::hashfn<uint> = bind util::id(_);\n+    let hasher_uint: map::hashfn<uint> = uint_id;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hm_uu: map::hashmap<uint, uint> =\n         map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);"}]}