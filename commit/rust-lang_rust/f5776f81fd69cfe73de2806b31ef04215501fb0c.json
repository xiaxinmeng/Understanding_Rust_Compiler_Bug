{"sha": "f5776f81fd69cfe73de2806b31ef04215501fb0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Nzc2ZjgxZmQ2OWNmZTczZGUyODA2YjMxZWYwNDIxNTUwMWZiMGM=", "commit": {"author": {"name": "wickerwaka", "email": "martin.donlon@gmail.com", "date": "2014-08-30T02:24:06Z"}, "committer": {"name": "wickerwaka", "email": "martin.donlon@gmail.com", "date": "2014-08-30T02:27:27Z"}, "message": "Detect a traits being used as structs in check_expr_with_unifier\n\nFixes #16750\nFixes #15812", "tree": {"sha": "383ecc0bd6e657f8e0e96831195e0981a6a18389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/383ecc0bd6e657f8e0e96831195e0981a6a18389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5776f81fd69cfe73de2806b31ef04215501fb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5776f81fd69cfe73de2806b31ef04215501fb0c", "html_url": "https://github.com/rust-lang/rust/commit/f5776f81fd69cfe73de2806b31ef04215501fb0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5776f81fd69cfe73de2806b31ef04215501fb0c/comments", "author": null, "committer": null, "parents": [{"sha": "5419b2ca2c27b4745fa1f2773719350420542c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5419b2ca2c27b4745fa1f2773719350420542c76", "html_url": "https://github.com/rust-lang/rust/commit/5419b2ca2c27b4745fa1f2773719350420542c76"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "dce5dbbb239d68e1d9586bc8d0269affde63cf17", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5776f81fd69cfe73de2806b31ef04215501fb0c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5776f81fd69cfe73de2806b31ef04215501fb0c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=f5776f81fd69cfe73de2806b31ef04215501fb0c", "patch": "@@ -169,5 +169,6 @@ register_diagnostics!(\n     E0155,\n     E0156,\n     E0157,\n-    E0158\n+    E0158,\n+    E0159\n )"}, {"sha": "d26aa2be0a4101c6be82a1162660ce4b51f4e1b4", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f5776f81fd69cfe73de2806b31ef04215501fb0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5776f81fd69cfe73de2806b31ef04215501fb0c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f5776f81fd69cfe73de2806b31ef04215501fb0c", "patch": "@@ -3463,6 +3463,22 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         fcx.write_ty(id, enum_type);\n     }\n \n+    fn check_struct_fields_on_error(fcx: &FnCtxt,\n+                                    id: ast::NodeId,\n+                                    fields: &[ast::Field],\n+                                    base_expr: Option<Gc<ast::Expr>>) {\n+        // Make sure to still write the types\n+        // otherwise we might ICE\n+        fcx.write_error(id);\n+        for field in fields.iter() {\n+            check_expr(fcx, &*field.expr);\n+        }\n+        match base_expr {\n+            Some(ref base) => check_expr(fcx, &**base),\n+            None => {}\n+        }\n+    }\n+\n     type ExprCheckerWithTy = fn(&FnCtxt, &ast::Expr, ty::t);\n \n     let tcx = fcx.ccx.tcx;\n@@ -3982,6 +3998,16 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                           variant_id, fields.as_slice());\n                 enum_id\n             }\n+            Some(def::DefTrait(def_id)) => {\n+                span_err!(tcx.sess, path.span, E0159,\n+                    \"`{}` is a trait not a structure\",\n+                    pprust::path_to_string(path));\n+                check_struct_fields_on_error(fcx,\n+                                             id,\n+                                             fields.as_slice(),\n+                                             base_expr);\n+                def_id\n+            },\n             Some(def) => {\n                 // Verify that this was actually a struct.\n                 let typ = ty::lookup_item_type(fcx.ccx.tcx, def.def_id());\n@@ -3998,17 +4024,10 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         span_err!(tcx.sess, path.span, E0071,\n                             \"`{}` does not name a structure\",\n                             pprust::path_to_string(path));\n-\n-                        // Make sure to still write the types\n-                        // otherwise we might ICE\n-                        fcx.write_error(id);\n-                        for field in fields.iter() {\n-                            check_expr(fcx, &*field.expr);\n-                        }\n-                        match base_expr {\n-                            Some(ref base) => check_expr(fcx, &**base),\n-                            None => {}\n-                        }\n+                        check_struct_fields_on_error(fcx,\n+                                                     id,\n+                                                     fields.as_slice(),\n+                                                     base_expr);\n                     }\n                 }\n "}]}