{"sha": "4c628bbb1c266a8513b364dca5ae7e311a1e0777", "node_id": "C_kwDOAAsO6NoAKDRjNjI4YmJiMWMyNjZhODUxM2IzNjRkY2E1YWU3ZTMxMWExZTA3Nzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-28T00:40:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T00:40:36Z"}, "message": "Rollup merge of #96471 - BoxyUwU:let_else_considered_harmful, r=lcnr\n\nreplace let else with `?`\n\nr? `@oli-obk`", "tree": {"sha": "6a052354aee525e972374b8a8c1e79833e4c2f20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a052354aee525e972374b8a8c1e79833e4c2f20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c628bbb1c266a8513b364dca5ae7e311a1e0777", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiaeKECRBK7hj4Ov3rIwAABWIIAKd/924tYuAGIRzoa22up4Bn\n/7HYcC5a9AYA7D0pIGr4bMBStF3/l/CnGK0Dxbpe6q8u4FQPwll5qdtOHdK3uSuK\nCxAhw4NnhMeEl4u71NOFue4otb0HPwB1IflMH1KQSDh9enKzhCYLaL4zHAPz/Kg5\nKctbeWs0gHE9eKSRr0xPbzZlXg9J0ZGyJEuAyAsJ8yw4+i1lyvMY6xso309bUs7y\npIDTS/2Yrx/HDebGtnx5sqjcff0yANztg6iDPr4igvURg5kdA1fL6XNjU79SAENQ\nP5fjbzw78x/UAD87fuC8wv0AItVPH1zz8fHwn5gERfpxDAc01XNpQ8uzw3mpR/M=\n=4cjk\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a052354aee525e972374b8a8c1e79833e4c2f20\nparent 6f6fe3e651832796b2454dad5adafe9e21a09498\nparent f697955c1eb72e3dac6b6aafa411e58cb8d18706\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651106436 +0200\ncommitter GitHub <noreply@github.com> 1651106436 +0200\n\nRollup merge of #96471 - BoxyUwU:let_else_considered_harmful, r=lcnr\n\nreplace let else with `?`\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c628bbb1c266a8513b364dca5ae7e311a1e0777", "html_url": "https://github.com/rust-lang/rust/commit/4c628bbb1c266a8513b364dca5ae7e311a1e0777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c628bbb1c266a8513b364dca5ae7e311a1e0777/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6fe3e651832796b2454dad5adafe9e21a09498", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fe3e651832796b2454dad5adafe9e21a09498", "html_url": "https://github.com/rust-lang/rust/commit/6f6fe3e651832796b2454dad5adafe9e21a09498"}, {"sha": "f697955c1eb72e3dac6b6aafa411e58cb8d18706", "url": "https://api.github.com/repos/rust-lang/rust/commits/f697955c1eb72e3dac6b6aafa411e58cb8d18706", "html_url": "https://github.com/rust-lang/rust/commit/f697955c1eb72e3dac6b6aafa411e58cb8d18706"}], "stats": {"total": 45, "additions": 16, "deletions": 29}, "files": [{"sha": "ae1b50a4176873ef2900182fa247039af2a9ecbd", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -1272,9 +1272,7 @@ pub fn parse_macro_name_and_helper_attrs(\n     // Once we've located the `#[proc_macro_derive]` attribute, verify\n     // that it's of the form `#[proc_macro_derive(Foo)]` or\n     // `#[proc_macro_derive(Foo, attributes(A, ..))]`\n-    let Some(list) = attr.meta_item_list() else {\n-        return None;\n-    };\n+    let list = attr.meta_item_list()?;\n     if list.len() != 1 && list.len() != 2 {\n         diag.span_err(attr.span, \"attribute must have either one or two arguments\");\n         return None;"}, {"sha": "33a8d6c11ff9954e99b41d1d1afd59a3cb31e04a", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -1714,7 +1714,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n     }\n \n     pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {\n-        if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }\n+        self.rows.get(row)?.as_ref()\n     }\n \n     /// Intersects `row` with `set`. `set` can be either `BitSet` or"}, {"sha": "66d73f546afadd8ca1af93917a3c4e81f528c603", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -25,21 +25,16 @@ pub(crate) fn find_anon_type<'tcx>(\n     region: Region<'tcx>,\n     br: &ty::BoundRegionKind,\n ) -> Option<(&'tcx hir::Ty<'tcx>, &'tcx hir::FnSig<'tcx>)> {\n-    if let Some(anon_reg) = tcx.is_suitable_region(region) {\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n-        let Some(fn_sig) = tcx.hir().get(hir_id).fn_sig() else {\n-            return None\n-        };\n+    let anon_reg = tcx.is_suitable_region(region)?;\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(anon_reg.def_id);\n+    let fn_sig = tcx.hir().get(hir_id).fn_sig()?;\n \n-        fn_sig\n-            .decl\n-            .inputs\n-            .iter()\n-            .find_map(|arg| find_component_for_bound_region(tcx, arg, br))\n-            .map(|ty| (ty, fn_sig))\n-    } else {\n-        None\n-    }\n+    fn_sig\n+        .decl\n+        .inputs\n+        .iter()\n+        .find_map(|arg| find_component_for_bound_region(tcx, arg, br))\n+        .map(|ty| (ty, fn_sig))\n }\n \n // This method creates a FindNestedTypeVisitor which returns the type corresponding"}, {"sha": "33f201cbd28326bb92ff61547a2f22ef2f9db410", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -336,9 +336,7 @@ fn evaluate_candidate<'tcx>(\n             Some(poss)\n         }\n     };\n-    let Some((_, child)) = targets.iter().next() else {\n-        return None\n-    };\n+    let (_, child) = targets.iter().next()?;\n     let child_terminator = &bbs[child].terminator();\n     let TerminatorKind::SwitchInt {\n         switch_ty: child_ty,"}, {"sha": "2e8e23a50eb0a6938da6dccfff1e26e790575cfe", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -338,9 +338,7 @@ pub(super) fn check_for_substitution<'a>(\n     ch: char,\n     err: &mut Diagnostic,\n ) -> Option<token::TokenKind> {\n-    let Some(&(_u_char, u_name, ascii_char)) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch) else {\n-        return None;\n-    };\n+    let &(_u_char, u_name, ascii_char) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch)?;\n \n     let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8()));\n "}, {"sha": "4f08a61b6239c93e9a246de84d01726c2b39552e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -1183,9 +1183,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ident: Symbol,\n         kind: &AssocItemKind,\n     ) -> Option<Symbol> {\n-        let Some((module, _)) = &self.current_trait_ref else {\n-            return None;\n-        };\n+        let (module, _) = self.current_trait_ref.as_ref()?;\n         if ident == kw::Underscore {\n             // We do nothing for `_`.\n             return None;"}, {"sha": "8feb7170983d64c091ad1de2aeb2778ebbed40b0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -757,7 +757,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         formal_args: &[Ty<'tcx>],\n     ) -> Option<Vec<Ty<'tcx>>> {\n         let formal_ret = self.resolve_vars_with_obligations(formal_ret);\n-        let Some(ret_ty) = expected_ret.only_has_type(self) else { return None };\n+        let ret_ty = expected_ret.only_has_type(self)?;\n \n         // HACK(oli-obk): This is a hack to keep RPIT and TAIT in sync wrt their behaviour.\n         // Without it, the inference"}, {"sha": "476a89523a56a61dbcc9844946292142cf4cf0cb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c628bbb1c266a8513b364dca5ae7e311a1e0777/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c628bbb1c266a8513b364dca5ae7e311a1e0777/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4c628bbb1c266a8513b364dca5ae7e311a1e0777", "patch": "@@ -1305,7 +1305,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n fn maybe_expand_private_type_alias(cx: &mut DocContext<'_>, path: &hir::Path<'_>) -> Option<Type> {\n     let Res::Def(DefKind::TyAlias, def_id) = path.res else { return None };\n     // Substitute private type aliases\n-    let Some(def_id) = def_id.as_local() else { return None };\n+    let def_id = def_id.as_local()?;\n     let alias = if !cx.cache.access_levels.is_exported(def_id.to_def_id()) {\n         &cx.tcx.hir().expect_item(def_id).kind\n     } else {"}]}