{"sha": "9196af0b3647c29cb1c268ba9b01546df55fc004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTZhZjBiMzY0N2MyOWNiMWMyNjhiYTliMDE1NDZkZjU1ZmMwMDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T08:16:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-31T04:07:34Z"}, "message": "qualify_consts: extract error_min_const_fn_violation.", "tree": {"sha": "4df21c514573e28c26b3785806f78f71838f8d35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df21c514573e28c26b3785806f78f71838f8d35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9196af0b3647c29cb1c268ba9b01546df55fc004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9196af0b3647c29cb1c268ba9b01546df55fc004", "html_url": "https://github.com/rust-lang/rust/commit/9196af0b3647c29cb1c268ba9b01546df55fc004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9196af0b3647c29cb1c268ba9b01546df55fc004/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f733aad5a73b7cb8ceec37a8ecec497f8807034", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f733aad5a73b7cb8ceec37a8ecec497f8807034", "html_url": "https://github.com/rust-lang/rust/commit/2f733aad5a73b7cb8ceec37a8ecec497f8807034"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "73475be24d445b7dec7c2e9d151d09ed8e85a2bf", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9196af0b3647c29cb1c268ba9b01546df55fc004/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9196af0b3647c29cb1c268ba9b01546df55fc004/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9196af0b3647c29cb1c268ba9b01546df55fc004", "patch": "@@ -25,6 +25,7 @@ use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::symbol::sym;\n use syntax_pos::{Span, DUMMY_SP};\n \n+use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt;\n use std::ops::{Deref, Index, IndexMut};\n@@ -1607,26 +1608,14 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n             // which can't be mutated until its scope ends.\n             let (temps, candidates) = {\n                 let mut checker = Checker::new(tcx, def_id, body, mode);\n-                if mode == Mode::ConstFn {\n+                if let Mode::ConstFn = mode {\n                     if tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n                         checker.check_const();\n                     } else if tcx.is_min_const_fn(def_id) {\n-                        // enforce `min_const_fn` for stable const fns\n+                        // Enforce `min_const_fn` for stable `const fn`s.\n                         use super::qualify_min_const_fn::is_min_const_fn;\n                         if let Err((span, err)) = is_min_const_fn(tcx, def_id, body) {\n-                            let mut diag = struct_span_err!(\n-                                tcx.sess,\n-                                span,\n-                                E0723,\n-                                \"{}\",\n-                                err,\n-                            );\n-                            diag.note(\"for more information, see issue \\\n-                                       https://github.com/rust-lang/rust/issues/57563\");\n-                            diag.help(\n-                                \"add `#![feature(const_fn)]` to the crate attributes to enable\",\n-                            );\n-                            diag.emit();\n+                            error_min_const_fn_violation(tcx, span, err);\n                         } else {\n                             // this should not produce any errors, but better safe than sorry\n                             // FIXME(#53819)\n@@ -1677,6 +1666,13 @@ fn determine_mode(tcx: TyCtxt<'_>, hir_id: HirId, def_id: DefId) -> Mode {\n     }\n }\n \n+fn error_min_const_fn_violation(tcx: TyCtxt<'_>, span: Span, msg: Cow<'_, str>) {\n+    struct_span_err!(tcx.sess, span, E0723, \"{}\", msg)\n+        .note(\"for more information, see issue https://github.com/rust-lang/rust/issues/57563\")\n+        .help(\"add `#![feature(const_fn)]` to the crate attributes to enable\")\n+        .emit();\n+}\n+\n fn check_short_circuiting_in_const_local(tcx: TyCtxt<'_>, body: &mut Body<'tcx>, mode: Mode) {\n     if body.control_flow_destroyed.is_empty() {\n         return;"}]}