{"sha": "8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhM2VkYjFkNjYxZWQ1Y2U2ODViZDVkY2ZhNjAwYjZlMDI4OTdiODY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-01T21:12:52Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-13T12:49:16Z"}, "message": "Update tests for extern block linting", "tree": {"sha": "5615826fc30a674b49dcc89fc09ff84a1fced008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5615826fc30a674b49dcc89fc09ff84a1fced008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "html_url": "https://github.com/rust-lang/rust/commit/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "html_url": "https://github.com/rust-lang/rust/commit/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc"}], "stats": {"total": 1953, "additions": 1008, "deletions": 945}, "files": [{"sha": "ed7daf8ddd9c7adc41986b033e9919cb0ed0ba1c", "filename": "compiler/rustc_error_codes/src/error_codes/E0044.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0044.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0044.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0044.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,13 +3,13 @@ You cannot use type or const parameters on foreign items.\n Example of erroneous code:\n \n ```compile_fail,E0044\n-extern { fn some_func<T>(x: T); }\n+extern \"C\" { fn some_func<T>(x: T); }\n ```\n \n To fix this, replace the generic parameter with the specializations that you\n need:\n \n ```\n-extern { fn some_func_i32(x: i32); }\n-extern { fn some_func_i64(x: i64); }\n+extern \"C\" { fn some_func_i32(x: i32); }\n+extern \"C\" { fn some_func_i64(x: i64); }\n ```"}, {"sha": "2cd27b5ec0523b7752fd4437695ccb7de34a76a5", "filename": "compiler/rustc_error_codes/src/error_codes/E0130.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0130.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0130.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0130.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@ A pattern was declared as an argument in a foreign function declaration.\n Erroneous code example:\n \n ```compile_fail,E0130\n-extern {\n+extern \"C\" {\n     fn foo((a, b): (u32, u32)); // error: patterns aren't allowed in foreign\n                                 //        function declarations\n }\n@@ -17,15 +17,15 @@ struct SomeStruct {\n     b: u32,\n }\n \n-extern {\n+extern \"C\" {\n     fn foo(s: SomeStruct); // ok!\n }\n ```\n \n Or:\n \n ```\n-extern {\n+extern \"C\" {\n     fn foo(a: (u32, u32)); // ok!\n }\n ```"}, {"sha": "95a22b92e36eeffc106a78053b9986942347bff7", "filename": "compiler/rustc_error_codes/src/error_codes/E0454.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0454.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0454.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0454.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,13 +3,13 @@ A link name was given with an empty name.\n Erroneous code example:\n \n ```compile_fail,E0454\n-#[link(name = \"\")] extern {}\n+#[link(name = \"\")] extern \"C\" {}\n // error: `#[link(name = \"\")]` given with empty name\n ```\n \n The rust compiler cannot link to an external library if you don't give it its\n name. Example:\n \n ```no_run\n-#[link(name = \"some_lib\")] extern {} // ok!\n+#[link(name = \"some_lib\")] extern \"C\" {} // ok!\n ```"}, {"sha": "84689b3ece6104787ae318862eef80dab3c4e751", "filename": "compiler/rustc_error_codes/src/error_codes/E0455.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0455.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0455.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0455.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,15 +4,15 @@ as frameworks are specific to that operating system.\n Erroneous code example:\n \n ```ignore (should-compile_fail-but-cannot-doctest-conditionally-without-macos)\n-#[link(name = \"FooCoreServices\", kind = \"framework\")] extern {}\n+#[link(name = \"FooCoreServices\", kind = \"framework\")] extern \"C\" {}\n // OS used to compile is Linux for example\n ```\n \n To solve this error you can use conditional compilation:\n \n ```\n #[cfg_attr(target=\"macos\", link(name = \"FooCoreServices\", kind = \"framework\"))]\n-extern {}\n+extern \"C\" {}\n ```\n \n Learn more in the [Conditional Compilation][conditional-compilation] section"}, {"sha": "359aeb6fd9a0ab85a2b4dca71ac1b58431900951", "filename": "compiler/rustc_error_codes/src/error_codes/E0458.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0458.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0458.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0458.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@ An unknown \"kind\" was specified for a link attribute.\n Erroneous code example:\n \n ```compile_fail,E0458\n-#[link(kind = \"wonderful_unicorn\")] extern {}\n+#[link(kind = \"wonderful_unicorn\")] extern \"C\" {}\n // error: unknown kind: `wonderful_unicorn`\n ```\n "}, {"sha": "4a49a7654452059ec5a6c64a32828f97337bd725", "filename": "compiler/rustc_error_codes/src/error_codes/E0459.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0459.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0459.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0459.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,13 +3,13 @@ A link was used without a name parameter.\n Erroneous code example:\n \n ```compile_fail,E0459\n-#[link(kind = \"dylib\")] extern {}\n+#[link(kind = \"dylib\")] extern \"C\" {}\n // error: `#[link(...)]` specified without `name = \"foo\"`\n ```\n \n Please add the name parameter to allow the rust compiler to find the library\n you want. Example:\n \n ```no_run\n-#[link(kind = \"dylib\", name = \"some_lib\")] extern {} // ok!\n+#[link(kind = \"dylib\", name = \"some_lib\")] extern \"C\" {} // ok!\n ```"}, {"sha": "1c5d1f87b912b33a627105704f1f2c0cd16bab10", "filename": "compiler/rustc_error_codes/src/error_codes/E0617.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0617.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0617.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0617.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@ Attempted to pass an invalid type of variable into a variadic function.\n Erroneous code example:\n \n ```compile_fail,E0617\n-extern {\n+extern \"C\" {\n     fn printf(c: *const i8, ...);\n }\n \n@@ -21,7 +21,7 @@ to import from `std::os::raw`).\n In this case, `c_double` has the same size as `f64` so we can use it directly:\n \n ```no_run\n-# extern {\n+# extern \"C\" {\n #     fn printf(c: *const i8, ...);\n # }\n unsafe {"}, {"sha": "70578acbe0d5f7afa1bf5114c8897a536e2aa165", "filename": "compiler/rustc_error_codes/src/error_codes/E0724.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0724.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0724.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0724.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -18,7 +18,7 @@ the function inside of an\u00a0`extern`\u00a0block.\n ```\n #![feature(ffi_returns_twice)]\n \n-extern {\n+extern \"C\" {\n    #[ffi_returns_twice] // ok!\n    pub fn foo();\n }"}, {"sha": "592010d78cf87e3ccb12ea7c915f4e6544f3beb6", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -38,7 +38,7 @@ pub fn initialize_available_targets() {\n         ($cfg:meta, $($method:ident),*) => { {\n             #[cfg($cfg)]\n             fn init() {\n-                extern {\n+                extern \"C\" {\n                     $(fn $method();)*\n                 }\n                 unsafe {"}, {"sha": "a167f0ffa09ecf7be66c8a3bf3353037e2fc49f5", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -809,7 +809,7 @@ impl AtomicBool {\n     /// ```ignore (extern-declaration)\n     /// # fn main() {\n     /// use std::sync::atomic::AtomicBool;\n-    /// extern {\n+    /// extern \"C\" {\n     ///     fn my_atomic_op(arg: *mut bool);\n     /// }\n     ///\n@@ -2068,7 +2068,7 @@ macro_rules! atomic_int {\n             /// # fn main() {\n             #[doc = concat!($extra_feature, \"use std::sync::atomic::\", stringify!($atomic_type), \";\")]\n             ///\n-            /// extern {\n+            /// extern \"C\" {\n             #[doc = concat!(\"    fn my_atomic_op(arg: *mut \", stringify!($int_type), \");\")]\n             /// }\n             ///"}, {"sha": "230ef0b23db6dc9a3cb476cf97c15956827c493e", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -86,7 +86,7 @@ use crate::sys;\n /// use std::ffi::CString;\n /// use std::os::raw::c_char;\n ///\n-/// extern {\n+/// extern \"C\" {\n ///     fn my_printer(s: *const c_char);\n /// }\n ///\n@@ -144,7 +144,7 @@ pub struct CString {\n /// use std::ffi::CStr;\n /// use std::os::raw::c_char;\n ///\n-/// extern { fn my_string() -> *const c_char; }\n+/// extern \"C\" { fn my_string() -> *const c_char; }\n ///\n /// unsafe {\n ///     let slice = CStr::from_ptr(my_string());\n@@ -159,7 +159,7 @@ pub struct CString {\n /// use std::os::raw::c_char;\n ///\n /// fn work(data: &CStr) {\n-///     extern { fn work_with(data: *const c_char); }\n+///     extern \"C\" { fn work_with(data: *const c_char); }\n ///\n ///     unsafe { work_with(data.as_ptr()) }\n /// }\n@@ -174,7 +174,7 @@ pub struct CString {\n /// use std::ffi::CStr;\n /// use std::os::raw::c_char;\n ///\n-/// extern { fn my_string() -> *const c_char; }\n+/// extern \"C\" { fn my_string() -> *const c_char; }\n ///\n /// fn my_string_safe() -> String {\n ///     unsafe {\n@@ -359,7 +359,7 @@ impl CString {\n     /// use std::ffi::CString;\n     /// use std::os::raw::c_char;\n     ///\n-    /// extern { fn puts(s: *const c_char); }\n+    /// extern \"C\" { fn puts(s: *const c_char); }\n     ///\n     /// let to_print = CString::new(\"Hello!\").expect(\"CString::new failed\");\n     /// unsafe {\n@@ -465,7 +465,7 @@ impl CString {\n     /// use std::ffi::CString;\n     /// use std::os::raw::c_char;\n     ///\n-    /// extern {\n+    /// extern \"C\" {\n     ///     fn some_extern_function(s: *mut c_char);\n     /// }\n     ///\n@@ -1147,7 +1147,7 @@ impl CStr {\n     /// use std::ffi::CStr;\n     /// use std::os::raw::c_char;\n     ///\n-    /// extern {\n+    /// extern \"C\" {\n     ///     fn my_string() -> *const c_char;\n     /// }\n     ///"}, {"sha": "da36e1580012b7c37703b2ee882c620857f79f69", "filename": "src/doc/unstable-book/src/language-features/link-args.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flink-args.md?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -15,7 +15,7 @@ usage would be:\n #![feature(link_args)]\n \n #[link_args = \"-foo -bar -baz\"]\n-extern {}\n+extern \"C\" {}\n # fn main() {}\n ```\n "}, {"sha": "998099c23909855e163986cbd410adc5828307c7", "filename": "src/test/codegen/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcall-llvm-intrinsics.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -13,7 +13,7 @@ impl Drop for A {\n     }\n }\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;\n }"}, {"sha": "f047c7a180ce20ef72c67b7f0d4a0cc3dd42639a", "filename": "src/test/codegen/dealloc-no-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,7 +8,7 @@ struct A;\n \n impl Drop for A {\n     fn drop(&mut self) {\n-        extern { fn foo(); }\n+        extern \"C\" { fn foo(); }\n         unsafe { foo(); }\n     }\n }"}, {"sha": "5d3afef5289bf7930353f7e3dc32568834f8aaa3", "filename": "src/test/codegen/debug-column.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-column.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     }\n }\n \n-extern {\n+extern \"C\" {\n     fn giraffe();\n     fn turtle();\n }"}, {"sha": "67baf6fdd3e03d7c39f29afd7e35846c4e741b5d", "filename": "src/test/codegen/ffi-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-const.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,7 +4,7 @@\n \n pub fn bar() { unsafe { foo() } }\n \n-extern {\n+extern \"C\" {\n     // CHECK-LABEL: declare void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n     // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readnone{{.*}} }"}, {"sha": "dc16306eb96bef2701cc77220a4a3588726897d2", "filename": "src/test/codegen/ffi-out-of-bounds-loads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-out-of-bounds-loads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-out-of-bounds-loads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-out-of-bounds-loads.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -11,7 +11,7 @@ struct S {\n     f3: i32,\n }\n \n-extern {\n+extern \"C\" {\n     fn foo(s: S);\n }\n "}, {"sha": "3afb0856c9d72fb39a717ec36e9f1a26c29a5dfd", "filename": "src/test/codegen/ffi-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-pure.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,7 +4,7 @@\n \n pub fn bar() { unsafe { foo() } }\n \n-extern {\n+extern \"C\" {\n     // CHECK-LABEL: declare void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n     // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readonly{{.*}} }"}, {"sha": "75301dfd346ebd91d47403cf5beb2fa73e32c138", "filename": "src/test/codegen/ffi-returns-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-returns-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Fffi-returns-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-returns-twice.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,7 +4,7 @@\n \n pub fn bar() { unsafe { foo() } }\n \n-extern {\n+extern \"C\" {\n     // CHECK-LABEL: declare void @foo()\n     // CHECK-SAME: [[ATTRS:#[0-9]+]]\n     // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}returns_twice{{.*}} }"}, {"sha": "31a88f2c0a98166d1ae1ca729b5a01f3fda9d70f", "filename": "src/test/codegen/riscv-abi/call-llvm-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Friscv-abi%2Fcall-llvm-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Friscv-abi%2Fcall-llvm-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Friscv-abi%2Fcall-llvm-intrinsics.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -13,7 +13,7 @@ impl Drop for A {\n     }\n }\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;\n }"}, {"sha": "a2ba24aca259b8f052159e8849efb1decd7f5295", "filename": "src/test/codegen/unwind-extern-imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,7 +4,7 @@\n #![crate_type = \"lib\"]\n #![feature(unwind_attributes)]\n \n-extern {\n+extern \"C\" {\n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: declare void @extern_fn\n     fn extern_fn();"}, {"sha": "43e68fedbfafbfb89d4036fb60cf7ed9b31038d8", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -23,7 +23,6 @@\n // gdbg-check:type = struct Struct2\n // gdbr-check:type = type_names::mod1::Struct2\n \n-\n // ENUMS\n // gdb-command:whatis simple_enum_1\n // gdbg-check:type = union Enum1\n@@ -45,7 +44,6 @@\n // gdbg-check:type = union Enum3<type_names::Struct1>\n // gdbr-check:type = type_names::mod1::mod2::Enum3<type_names::Struct1>\n \n-\n // TUPLES\n // gdb-command:whatis tuple1\n // gdbg-check:type = struct (u32, type_names::Struct1, type_names::mod1::mod2::Enum3<type_names::mod1::Struct2>)\n@@ -55,7 +53,6 @@\n // gdbg-check:type = struct ((type_names::Struct1, type_names::mod1::mod2::Struct3), type_names::mod1::Enum2, char)\n // gdbr-check:type = ((type_names::Struct1, type_names::mod1::mod2::Struct3), type_names::mod1::Enum2, char)\n \n-\n // BOX\n // gdb-command:whatis box1\n // gdbg-check:type = struct (alloc::boxed::Box<f32>, i32)\n@@ -65,7 +62,6 @@\n // gdbg-check:type = struct (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n // gdbr-check:type = (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n \n-\n // REFERENCES\n // gdb-command:whatis ref1\n // gdbg-check:type = struct (&type_names::Struct1, i32)\n@@ -83,7 +79,6 @@\n // gdbg-check:type = struct (&mut type_names::GenericStruct<type_names::mod1::Enum2, f64>, i32)\n // gdbr-check:type = (&mut type_names::GenericStruct<type_names::mod1::Enum2, f64>, i32)\n \n-\n // RAW POINTERS\n // gdb-command:whatis mut_ptr1\n // gdbg-check:type = struct (*mut type_names::Struct1, isize)\n@@ -109,7 +104,6 @@\n // gdbg-check:type = struct (*const type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n // gdbr-check:type = (*const type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n \n-\n // VECTORS\n // gdb-command:whatis fixed_size_vec1\n // gdbg-check:type = struct ([type_names::Struct1; 3], i16)\n@@ -127,7 +121,6 @@\n // gdbg-check:type = struct &[type_names::mod1::Enum2]\n // gdbr-check:type = &[type_names::mod1::Enum2]\n \n-\n // TRAITS\n // gdb-command:whatis box_trait\n // gdbg-check:type = struct Box<Trait1>\n@@ -153,7 +146,6 @@\n // gdbg-check:type = struct &mut Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n // gdbr-check:type = type_names::&mut Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n \n-\n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n // gdbg-check:type = struct (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n@@ -199,7 +191,6 @@\n // gdbg-check:type = struct (unsafe extern \"C\" fn(*const u8, ...) -> isize, usize)\n // gdbr-check:type = (unsafe extern \"C\" fn(*const u8, ...) -> isize, usize)\n \n-\n // CLOSURES\n // gdb-command:whatis closure1\n // gdbg-check:type = struct (closure, usize)\n@@ -219,7 +210,7 @@ use std::marker::PhantomData;\n use std::ptr;\n \n pub struct Struct1;\n-struct GenericStruct<T1, T2>(PhantomData<(T1,T2)>);\n+struct GenericStruct<T1, T2>(PhantomData<(T1, T2)>);\n \n enum Enum1 {\n     Variant1,\n@@ -246,8 +237,12 @@ mod mod1 {\n     }\n }\n \n-trait Trait1 { fn dummy(&self) { } }\n-trait Trait2<T1, T2> { fn dummy(&self, _: T1, _:T2) { } }\n+trait Trait1 {\n+    fn dummy(&self) {}\n+}\n+trait Trait2<T1, T2> {\n+    fn dummy(&self, _: T1, _: T2) {}\n+}\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n@@ -257,16 +252,26 @@ extern \"C\" fn extern_c_fn(_: isize) {}\n unsafe fn unsafe_fn(_: Result<char, f64>) {}\n extern \"stdcall\" fn extern_stdcall_fn() {}\n \n-fn rust_fn_with_return_value(_: f64) -> usize { 4 }\n-extern \"C\" fn extern_c_fn_with_return_value() -> Struct1 { Struct1 }\n-unsafe fn unsafe_fn_with_return_value(_: GenericStruct<u16, u8>) -> mod1::Struct2 { mod1::Struct2 }\n-extern \"stdcall\" fn extern_stdcall_fn_with_return_value(_: Box<isize>) -> usize { 0 }\n+fn rust_fn_with_return_value(_: f64) -> usize {\n+    4\n+}\n+extern \"C\" fn extern_c_fn_with_return_value() -> Struct1 {\n+    Struct1\n+}\n+unsafe fn unsafe_fn_with_return_value(_: GenericStruct<u16, u8>) -> mod1::Struct2 {\n+    mod1::Struct2\n+}\n+extern \"stdcall\" fn extern_stdcall_fn_with_return_value(_: Box<isize>) -> usize {\n+    0\n+}\n \n-fn generic_function<T>(x: T) -> T { x }\n+fn generic_function<T>(x: T) -> T {\n+    x\n+}\n \n #[allow(improper_ctypes)]\n-extern {\n-    fn printf(_:*const u8, ...) -> isize;\n+extern \"C\" {\n+    fn printf(_: *const u8, ...) -> isize;\n }\n \n // In many of the cases below, the type that is actually under test is wrapped\n@@ -277,7 +282,6 @@ extern {\n // printed correctly, so the tests below just construct a tuple type that will\n // then *contain* the type name that we want to see.\n fn main() {\n-\n     // Structs\n     let simple_struct = Struct1;\n     let generic_struct1: GenericStruct<mod1::Struct2, mod1::mod2::Struct3> =\n@@ -336,11 +340,11 @@ fn main() {\n     let mut_ref_trait = (&mut mut_int1) as &mut Trait1;\n \n     let generic_box_trait = (box 0_isize) as Box<Trait2<i32, mod1::Struct2>>;\n-    let generic_ref_trait  = (&0_isize) as &Trait2<Struct1, Struct1>;\n+    let generic_ref_trait = (&0_isize) as &Trait2<Struct1, Struct1>;\n \n     let mut generic_mut_ref_trait_impl = 0_isize;\n-    let generic_mut_ref_trait = (&mut generic_mut_ref_trait_impl) as\n-        &mut Trait2<mod1::mod2::Struct3, GenericStruct<usize, isize>>;\n+    let generic_mut_ref_trait = (&mut generic_mut_ref_trait_impl)\n+        as &mut Trait2<mod1::mod2::Struct3, GenericStruct<usize, isize>>;\n \n     // Bare Functions\n     let rust_fn = (rust_fn, 0_usize);\n@@ -364,11 +368,13 @@ fn main() {\n     // how that maps to rustc's internal representation of these forms.\n     // Once closures have reached their 1.0 form, the tests below should\n     // probably be expanded.\n-    let closure1 = (|x:isize| {}, 0_usize);\n-    let closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0_usize);\n+    let closure1 = (|x: isize| {}, 0_usize);\n+    let closure2 = (|x: i8, y: f32| (x as f32) + y, 0_usize);\n \n     zzz(); // #break\n }\n \n #[inline(never)]\n-fn zzz() { () }\n+fn zzz() {\n+    ()\n+}"}, {"sha": "f46f92eb500207d761b2a2f1f8a84775bd25bda1", "filename": "src/test/incremental/foreign.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fincremental%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fincremental%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fforeign.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -13,7 +13,7 @@ use std::ffi::CString;\n mod mlibc {\n     use libc::{c_char, c_long, c_longlong};\n \n-    extern {\n+    extern \"C\" {\n         pub fn atol(x: *const c_char) -> c_long;\n         pub fn atoll(x: *const c_char) -> c_longlong;\n     }\n@@ -31,6 +31,8 @@ fn atoll(s: String) -> i64 {\n \n pub fn main() {\n     assert_eq!(atol(\"1024\".to_string()) * 10, atol(\"10240\".to_string()));\n-    assert_eq!((atoll(\"11111111111111111\".to_string()) * 10),\n-             atoll(\"111111111111111110\".to_string()));\n+    assert_eq!(\n+        (atoll(\"11111111111111111\".to_string()) * 10),\n+        atoll(\"111111111111111110\".to_string())\n+    );\n }"}, {"sha": "0bf13c406ab53c7b7c9217a4c623bd1c3a1538a8", "filename": "src/test/run-make-fulldeps/archive-duplicate-names/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farchive-duplicate-names%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo();\n     fn bar();\n }"}, {"sha": "9f7a9e2213c0927a78b47a2a7edd7f44ffb2e917", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_type = \"dylib\"]\n \n #[link(name = \"cfoo\")]\n-extern {\n+extern \"C\" {\n     fn foo();\n }\n "}, {"sha": "3dd376f1ff57beae396507485a4aa72527b08cf5", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"cfoo\")]\n-extern {\n+extern \"C\" {\n     fn foo();\n }\n "}, {"sha": "1e8af4d44040b293cdef26346344bc960703329c", "filename": "src/test/run-make-fulldeps/c-static-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-dylib%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_type = \"dylib\"]\n \n #[link(name = \"cfoo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo();\n }\n "}, {"sha": "9c6d2080ef4d37c990b060efd425bfed41eb13c9", "filename": "src/test/run-make-fulldeps/c-static-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-static-rlib%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"cfoo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo();\n }\n "}, {"sha": "6cd9916b6f69d5c1a4d2d4b585f70aaf4a41a140", "filename": "src/test/run-make-fulldeps/compiler-lookup-paths/d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-lookup-paths%2Fd.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"native\", kind = \"static\")]\n-extern {}\n+extern \"C\" {}"}, {"sha": "7fdb815887118bce354981132c94de3d3283d71a", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/foo.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,10 @@\n-extern { fn foo(); }\n+extern \"C\" {\n+    fn foo();\n+}\n \n pub fn main() {\n-    unsafe { foo(); }\n+    unsafe {\n+        foo();\n+    }\n     assert_eq!(7f32.powi(3), 343f32);\n }"}, {"sha": "c9baa489881b1b3a6d6e90571a162fa89233315b", "filename": "src/test/run-make-fulldeps/extern-fn-generic/test.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,22 +1,20 @@\n extern crate testcrate;\n \n-extern \"C\" fn bar<T>(ts: testcrate::TestStruct<T>) -> T { ts.y }\n+extern \"C\" fn bar<T>(ts: testcrate::TestStruct<T>) -> T {\n+    ts.y\n+}\n \n #[link(name = \"test\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn call(c: extern \"C\" fn(testcrate::TestStruct<i32>) -> i32) -> i32;\n }\n \n fn main() {\n     // Let's test calling it cross crate\n-    let back = unsafe {\n-        testcrate::call(testcrate::foo::<i32>)\n-    };\n+    let back = unsafe { testcrate::call(testcrate::foo::<i32>) };\n     assert_eq!(3, back);\n \n     // And just within this crate\n-    let back = unsafe {\n-        call(bar::<i32>)\n-    };\n+    let back = unsafe { call(bar::<i32>) };\n     assert_eq!(3, back);\n }"}, {"sha": "39f76e59ca0c0edcd42b6178f4759319437c7d4a", "filename": "src/test/run-make-fulldeps/extern-fn-generic/testcrate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-generic%2Ftestcrate.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,12 +3,14 @@\n #[repr(C)]\n pub struct TestStruct<T> {\n     pub x: u8,\n-    pub y: T\n+    pub y: T,\n }\n \n-pub extern \"C\" fn foo<T>(ts: TestStruct<T>) -> T { ts.y }\n+pub extern \"C\" fn foo<T>(ts: TestStruct<T>) -> T {\n+    ts.y\n+}\n \n #[link(name = \"test\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn call(c: extern \"C\" fn(TestStruct<i32>) -> i32) -> i32;\n }"}, {"sha": "40b08f1ed709e348ebe73eb2c7602a68f79220e0", "filename": "src/test/run-make-fulldeps/extern-fn-mangle/test.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-mangle%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,11 +1,15 @@\n #[no_mangle]\n-pub extern \"C\" fn foo() -> i32 { 3 }\n+pub extern \"C\" fn foo() -> i32 {\n+    3\n+}\n \n #[no_mangle]\n-pub extern \"C\" fn bar() -> i32 { 5 }\n+pub extern \"C\" fn bar() -> i32 {\n+    5\n+}\n \n #[link(name = \"test\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn add() -> i32;\n }\n "}, {"sha": "afe0f52ef0b288f432a0efda8fa4d31733c1c22e", "filename": "src/test/run-make-fulldeps/extern-fn-struct-passing-abi/test.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-struct-passing-abi%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,23 +7,23 @@ struct Rect {\n     a: i32,\n     b: i32,\n     c: i32,\n-    d: i32\n+    d: i32,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n #[repr(C)]\n struct BiggerRect {\n     s: Rect,\n     a: i32,\n-    b: i32\n+    b: i32,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n #[repr(C)]\n struct FloatRect {\n     a: i32,\n     b: i32,\n-    c: f64\n+    c: f64,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n@@ -33,14 +33,14 @@ struct Huge {\n     b: i32,\n     c: i32,\n     d: i32,\n-    e: i32\n+    e: i32,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n #[repr(C)]\n struct FloatPoint {\n     x: f64,\n-    y: f64\n+    y: f64,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n@@ -58,13 +58,22 @@ struct IntOdd {\n }\n \n #[link(name = \"test\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn byval_rect(a: i32, b: i32, c: i32, d: i32, e: i32, s: Rect);\n \n     fn byval_many_rect(a: i32, b: i32, c: i32, d: i32, e: i32, f: i32, s: Rect);\n \n-    fn byval_rect_floats(a: f32, b: f32, c: f64, d: f32, e: f32,\n-                         f: f32, g: f64, s: Rect, t: FloatRect);\n+    fn byval_rect_floats(\n+        a: f32,\n+        b: f32,\n+        c: f64,\n+        d: f32,\n+        e: f32,\n+        f: f32,\n+        g: f64,\n+        s: Rect,\n+        t: FloatRect,\n+    );\n \n     fn byval_rect_with_float(a: i32, b: i32, c: f32, d: i32, e: i32, f: i32, s: Rect);\n \n@@ -107,12 +116,7 @@ fn main() {\n         byval_many_rect(1, 2, 3, 4, 5, 6, s);\n         byval_rect_floats(1., 2., 3., 4., 5., 6., 7., s, u);\n         byval_rect_with_float(1, 2, 3.0, 4, 5, 6, s);\n-        byval_rect_with_many_huge(v, v, v, v, v, v, Rect {\n-            a: 123,\n-            b: 456,\n-            c: 789,\n-            d: 420\n-        });\n+        byval_rect_with_many_huge(v, v, v, v, v, v, Rect { a: 123, b: 456, c: 789, d: 420 });\n         split_rect(1, 2, s);\n         split_rect_floats(1., 2., u);\n         split_rect_with_floats(1, 2, 3.0, 4, 5.0, 6, s);"}, {"sha": "90a6ebaf1aa6caec96ffaaf15383561778ebcf9b", "filename": "src/test/run-make-fulldeps/extern-fn-with-extern-types/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-extern-types%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![feature(extern_types)]\n \n #[link(name = \"ctest\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     type data;\n \n     fn data_create(magic: u32) -> *mut data;"}, {"sha": "2f261efb5105d94248ff296ab42cf41b07d15f20", "filename": "src/test/run-make-fulldeps/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,11 +3,11 @@\n struct Foo {\n     a: i8,\n     b: i16,\n-    c: i8\n+    c: i8,\n }\n \n #[link(name = \"test\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo(f: Foo) -> Foo;\n }\n "}, {"sha": "438fbddf31fb287c7d96989c1afdcd7cf6f16a52", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/test.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,22 +2,18 @@ extern crate testcrate;\n \n use std::mem;\n \n-extern {\n+extern \"C\" {\n     fn give_back(tu: testcrate::TestUnion) -> u64;\n }\n \n fn main() {\n     let magic: u64 = 0xDEADBEEF;\n \n     // Let's test calling it cross crate\n-    let back = unsafe {\n-        testcrate::give_back(mem::transmute(magic))\n-    };\n+    let back = unsafe { testcrate::give_back(mem::transmute(magic)) };\n     assert_eq!(magic, back);\n \n     // And just within this crate\n-    let back = unsafe {\n-        give_back(mem::transmute(magic))\n-    };\n+    let back = unsafe { give_back(mem::transmute(magic)) };\n     assert_eq!(magic, back);\n }"}, {"sha": "28d91ff37c360fc4975b087749748ee363786b80", "filename": "src/test/run-make-fulldeps/extern-fn-with-union/testcrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-union%2Ftestcrate.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,10 +2,10 @@\n \n #[repr(C)]\n pub struct TestUnion {\n-    _val: u64\n+    _val: u64,\n }\n \n #[link(name = \"ctest\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn give_back(tu: TestUnion) -> u64;\n }"}, {"sha": "3c2c3f218149480293e1f27a9028c052b2157c80", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/bar.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Fbar.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,10 +3,12 @@\n extern crate foo;\n \n #[link(name = \"bar\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn bar();\n }\n \n pub fn doit() {\n-    unsafe { bar(); }\n+    unsafe {\n+        bar();\n+    }\n }"}, {"sha": "a69809726c693b689216d6a3b8ed703a336a21f2", "filename": "src/test/run-make-fulldeps/interdependent-c-libraries/foo.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finterdependent-c-libraries%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,10 +1,12 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo();\n }\n \n pub fn doit() {\n-    unsafe { foo(); }\n+    unsafe {\n+        foo();\n+    }\n }"}, {"sha": "b4eaa0b31c5be9bc67602cfeb1e60c2e09f4e71d", "filename": "src/test/run-make-fulldeps/issue-15460/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-15460%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"dylib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn foo();\n }"}, {"sha": "ba6749c9722241dd4a89b19de8db4b010006df7f", "filename": "src/test/run-make-fulldeps/issue-25581/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-25581%2Ftest.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,11 +1,11 @@\n #[link(name = \"test\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn slice_len(s: &[u8]) -> usize;\n     fn slice_elem(s: &[u8], idx: usize) -> u8;\n }\n \n fn main() {\n-    let data = [1,2,3,4,5];\n+    let data = [1, 2, 3, 4, 5];\n \n     unsafe {\n         assert_eq!(data.len(), slice_len(&data) as usize);"}, {"sha": "07863cf64d6e9de0766f1816b22ddf9028b9b6a5", "filename": "src/test/run-make-fulldeps/issue-28595/a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-28595%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-28595%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-28595%2Fa.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"a\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn a();\n }"}, {"sha": "1f389859fad73414695390b5b61fd999a0b43c11", "filename": "src/test/run-make-fulldeps/issue-28595/b.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-28595%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fissue-28595%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-28595%2Fb.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,11 +1,12 @@\n extern crate a;\n \n #[link(name = \"b\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn b();\n }\n \n-\n fn main() {\n-    unsafe { b(); }\n+    unsafe {\n+        b();\n+    }\n }"}, {"sha": "5ad66475d003ff3aab72a63392daf5d8e84fb81a", "filename": "src/test/run-make-fulldeps/link-cfg/dep-with-staticlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fdep-with-staticlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fdep-with-staticlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fdep-with-staticlib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,6 +3,6 @@\n \n #[link(name = \"return1\", cfg(foo))]\n #[link(name = \"return3\", kind = \"static\", cfg(bar))]\n-extern {\n+extern \"C\" {\n     pub fn my_function() -> i32;\n }"}, {"sha": "40de77f05b3f67ba8f6ba43e210a4b0e3ac463fa", "filename": "src/test/run-make-fulldeps/link-cfg/dep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fdep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fdep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fdep.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,6 +3,6 @@\n \n #[link(name = \"return1\", cfg(foo))]\n #[link(name = \"return2\", cfg(bar))]\n-extern {\n+extern \"C\" {\n     pub fn my_function() -> i32;\n }"}, {"sha": "ba5a8711a2610aa10fbb0681f813fa653d5a2f30", "filename": "src/test/run-make-fulldeps/link-cfg/no-deps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fno-deps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fno-deps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-cfg%2Fno-deps.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n \n #[link(name = \"return1\", cfg(foo))]\n #[link(name = \"return2\", cfg(bar))]\n-extern {\n+extern \"C\" {\n     fn my_function() -> i32;\n }\n "}, {"sha": "8024e343d19a74fdad927c1d898958a92505bf46", "filename": "src/test/run-make-fulldeps/link-path-order/main.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flink-path-order%2Fmain.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,15 +2,13 @@\n \n extern crate libc;\n \n-#[link(name=\"foo\", kind = \"static\")]\n-extern {\n+#[link(name = \"foo\", kind = \"static\")]\n+extern \"C\" {\n     fn should_return_one() -> libc::c_int;\n }\n \n fn main() {\n-    let result = unsafe {\n-        should_return_one()\n-    };\n+    let result = unsafe { should_return_one() };\n \n     if result != 1 {\n         std::process::exit(255);"}, {"sha": "68607cbb6572108b0e5013533ada08ebc0c4cd92", "filename": "src/test/run-make-fulldeps/linkage-attr-on-static/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flinkage-attr-on-static%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flinkage-attr-on-static%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flinkage-attr-on-static%2Fbar.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@\n static BAZ: i32 = 21;\n \n #[link(name = \"foo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn what() -> i32;\n }\n "}, {"sha": "db238c0cf1a92627b8a574a6e87e66144ec1a976", "filename": "src/test/run-make-fulldeps/long-linker-command-lines/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flong-linker-command-lines%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flong-linker-command-lines%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flong-linker-command-lines%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -25,7 +25,7 @@ fn write_test_case(file: &Path, n: usize) -> HashSet<String> {\n         writeln!(f, \"#[link(name = \\\"S{}{}S\\\")]\", prefix, i).unwrap();\n         libs.insert(format!(\"{}{}\", prefix, i));\n     }\n-    writeln!(f, \"extern {{}}\\nfn main() {{}}\").unwrap();\n+    writeln!(f, \"extern \\\"C\\\" {{}}\\nfn main() {{}}\").unwrap();\n     f.into_inner().unwrap();\n \n     libs"}, {"sha": "cc1d5b126dd35c229fa0268e6df5a9da8b1fc238", "filename": "src/test/run-make-fulldeps/longjmp-across-rust/main.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flongjmp-across-rust%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flongjmp-across-rust%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flongjmp-across-rust%2Fmain.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #[link(name = \"foo\", kind = \"static\")]\n-extern {\n-    fn test_start(f: extern fn());\n+extern \"C\" {\n+    fn test_start(f: extern \"C\" fn());\n     fn test_end();\n }\n \n@@ -13,11 +13,10 @@ fn main() {\n struct A;\n \n impl Drop for A {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n-extern fn test_middle() {\n+extern \"C\" fn test_middle() {\n     let _a = A;\n     foo();\n }"}, {"sha": "f70bb338223e0b96b4d1c086b4f89e75e5468172", "filename": "src/test/run-make-fulldeps/lto-no-link-whole-rlib/lib1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flto-no-link-whole-rlib%2Flib1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flto-no-link-whole-rlib%2Flib1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flto-no-link-whole-rlib%2Flib1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo() -> i32;\n }\n "}, {"sha": "2dec2a2718e83a197c6656c1aed89f752ee1dfe3", "filename": "src/test/run-make-fulldeps/lto-no-link-whole-rlib/lib2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flto-no-link-whole-rlib%2Flib2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Flto-no-link-whole-rlib%2Flib2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flto-no-link-whole-rlib%2Flib2.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@\n extern crate lib1;\n \n #[link(name = \"bar\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn foo() -> i32;\n }\n "}, {"sha": "c1f28236ffd2ba8ad7fefd61c31f154a6ebcdd2f", "filename": "src/test/run-make-fulldeps/manual-link/foo.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmanual-link%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,11 @@\n #![crate_type = \"rlib\"]\n \n-extern {\n+extern \"C\" {\n     fn bar();\n }\n \n pub fn foo() {\n-    unsafe { bar(); }\n+    unsafe {\n+        bar();\n+    }\n }"}, {"sha": "b25ef35ada68ebe68e65dc191751f5c0f62fb274", "filename": "src/test/run-make-fulldeps/no-duplicate-libs/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fno-duplicate-libs%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fno-duplicate-libs%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fno-duplicate-libs%2Fmain.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #[link(name = \"foo\")] // linker should drop this library, no symbols used\n #[link(name = \"bar\")] // symbol comes from this library\n #[link(name = \"foo\")] // now linker picks up `foo` b/c `bar` library needs it\n-extern {\n+extern \"C\" {\n     fn bar();\n }\n "}, {"sha": "ef053aa2e7a3ad21312463430b37c4532cd95475", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2Fprogram.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     fn overflow();\n }\n "}, {"sha": "ef053aa2e7a3ad21312463430b37c4532cd95475", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2Fprogram.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     fn overflow();\n }\n "}, {"sha": "ec59bdb11c889eb86412857b1d10be205cde6adc", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n #[link(name = \"library\")]\n-extern {\n+extern \"C\" {\n     fn overflow();\n }\n "}, {"sha": "94879c2a6ed663ea3753b35209e93fd9462726cd", "filename": "src/test/run-make-fulldeps/save-analysis-fail/foo.rs", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-fail%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-fail%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-fail%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-#![ crate_name = \"test\" ]\n+#![crate_name = \"test\"]\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n \n@@ -9,11 +9,10 @@ extern crate krate2;\n extern crate krate2 as krate3;\n \n use rustc_graphviz::RenderOption;\n-use std::collections::{HashMap,HashSet};\n use std::cell::RefCell;\n+use std::collections::{HashMap, HashSet};\n use std::io::Write;\n \n-\n use sub::sub2 as msalias;\n use sub::sub2;\n use sub::sub2::nested_struct as sub_struct;\n@@ -30,7 +29,7 @@ static bob: Option<graphviz::RenderOption> = None;\n // buglink test - see issue #1337.\n \n fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n-    let s = sub_struct{ field2: 45u32, };\n+    let s = sub_struct { field2: 45u32 };\n \n     // import tests\n     fn foo(x: &Write) {}\n@@ -80,7 +79,7 @@ mod sub {\n \n         pub enum nested_enum {\n             Nest2 = 2,\n-            Nest3 = 3\n+            Nest3 = 3,\n         }\n     }\n }\n@@ -101,7 +100,9 @@ struct some_fields {\n type SF = some_fields;\n \n trait SuperTrait {\n-    fn qux(&self) { panic!(); }\n+    fn qux(&self) {\n+        panic!();\n+    }\n }\n \n trait SomeTrait: SuperTrait {\n@@ -136,8 +137,7 @@ impl SomeTrait for some_fields {\n     }\n }\n \n-impl SuperTrait for some_fields {\n-}\n+impl SuperTrait for some_fields {}\n \n impl SubTrait for some_fields {}\n \n@@ -150,17 +150,14 @@ impl some_fields {\n         42\n     }\n \n-    fn align_to<T>(&mut self) {\n-\n-    }\n+    fn align_to<T>(&mut self) {}\n \n     fn test(&mut self) {\n         self.align_to::<bool>();\n     }\n }\n \n-impl SuperTrait for nofields {\n-}\n+impl SuperTrait for nofields {}\n impl SomeTrait for nofields {\n     fn Method(&self, x: u32) -> u32 {\n         self.Method(x);\n@@ -186,59 +183,70 @@ enum SomeEnum<'a> {\n     Ints(isize, isize),\n     Floats(f64, f64),\n     Strings(&'a str, &'a str, &'a str),\n-    MyTypes(MyType, MyType)\n+    MyTypes(MyType, MyType),\n }\n \n #[derive(Copy, Clone)]\n enum SomeOtherEnum {\n     SomeConst1,\n     SomeConst2,\n-    SomeConst3\n+    SomeConst3,\n }\n \n enum SomeStructEnum {\n-    EnumStruct{a:isize, b:isize},\n-    EnumStruct2{f1:MyType, f2:MyType},\n-    EnumStruct3{f1:MyType, f2:MyType, f3:SomeEnum<'static>}\n+    EnumStruct { a: isize, b: isize },\n+    EnumStruct2 { f1: MyType, f2: MyType },\n+    EnumStruct3 { f1: MyType, f2: MyType, f3: SomeEnum<'static> },\n }\n \n fn matchSomeEnum(val: SomeEnum) {\n     match val {\n-        SomeEnum::Ints(int1, int2) => { println(&(int1+int2).to_string()); }\n-        SomeEnum::Floats(float1, float2) => { println(&(float2*float1).to_string()); }\n-        SomeEnum::Strings(.., s3) => { println(s3); }\n-        SomeEnum::MyTypes(mt1, mt2) => { println(&(mt1.field1 - mt2.field1).to_string()); }\n+        SomeEnum::Ints(int1, int2) => {\n+            println(&(int1 + int2).to_string());\n+        }\n+        SomeEnum::Floats(float1, float2) => {\n+            println(&(float2 * float1).to_string());\n+        }\n+        SomeEnum::Strings(.., s3) => {\n+            println(s3);\n+        }\n+        SomeEnum::MyTypes(mt1, mt2) => {\n+            println(&(mt1.field1 - mt2.field1).to_string());\n+        }\n     }\n }\n \n fn matchSomeStructEnum(se: SomeStructEnum) {\n     match se {\n-        SomeStructEnum::EnumStruct{a:a, ..} => println(&a.to_string()),\n-        SomeStructEnum::EnumStruct2{f1:f1, f2:f_2} => println(&f_2.field1.to_string()),\n-        SomeStructEnum::EnumStruct3{f1, ..} => println(&f1.field1.to_string()),\n+        SomeStructEnum::EnumStruct { a: a, .. } => println(&a.to_string()),\n+        SomeStructEnum::EnumStruct2 { f1: f1, f2: f_2 } => println(&f_2.field1.to_string()),\n+        SomeStructEnum::EnumStruct3 { f1, .. } => println(&f1.field1.to_string()),\n     }\n }\n \n-\n fn matchSomeStructEnum2(se: SomeStructEnum) {\n     use SomeStructEnum::*;\n     match se {\n-        EnumStruct{a: ref aaa, ..} => println(&aaa.to_string()),\n-        EnumStruct2{f1, f2: f2} => println(&f1.field1.to_string()),\n-        EnumStruct3{f1, f3: SomeEnum::Ints(..), f2} => println(&f1.field1.to_string()),\n-        _ => {},\n+        EnumStruct { a: ref aaa, .. } => println(&aaa.to_string()),\n+        EnumStruct2 { f1, f2: f2 } => println(&f1.field1.to_string()),\n+        EnumStruct3 { f1, f3: SomeEnum::Ints(..), f2 } => println(&f1.field1.to_string()),\n+        _ => {}\n     }\n }\n \n fn matchSomeOtherEnum(val: SomeOtherEnum) {\n     use SomeOtherEnum::{SomeConst2, SomeConst3};\n     match val {\n-        SomeOtherEnum::SomeConst1 => { println(\"I'm const1.\"); }\n-        SomeConst2 | SomeConst3 => { println(\"I'm const2 or const3.\"); }\n+        SomeOtherEnum::SomeConst1 => {\n+            println(\"I'm const1.\");\n+        }\n+        SomeConst2 | SomeConst3 => {\n+            println(\"I'm const2 or const3.\");\n+        }\n     }\n }\n \n-fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n+fn hello<X: SomeTrait>((z, a): (u32, String), ex: X) {\n     SameDir2::hello(43);\n \n     println(&yy.to_string());\n@@ -253,8 +261,8 @@ fn hello<X: SomeTrait>((z, a) : (u32, String), ex: X) {\n     let x = 32.0f32;\n     let _ = (x + ((x * x) + 1.0).sqrt()).ln();\n \n-    let s: Box<SomeTrait> = box some_fields {field1: 43};\n-    let s2: Box<some_fields> =  box some_fields {field1: 43};\n+    let s: Box<SomeTrait> = box some_fields { field1: 43 };\n+    let s2: Box<some_fields> = box some_fields { field1: 43 };\n     let s3 = box nofields;\n \n     s.Method(43);\n@@ -307,8 +315,9 @@ mod macro_use_test {\n     }\n }\n \n-fn main() { // foo\n-    let s = box some_fields {field1: 43};\n+fn main() {\n+    // foo\n+    let s = box some_fields { field1: 43 };\n     hello((43, \"a\".to_string()), *s);\n     sub::sub2::hello();\n     sub2::sub3::hello();\n@@ -329,26 +338,24 @@ fn main() { // foo\n     let vs = variable_str!(32);\n \n     let mut candidates: RefCell<HashMap<&'static str, &'static str>> = RefCell::new(HashMap::new());\n-    let _ = blah {\n-        used_link_args: RefCell::new([]),\n-    };\n+    let _ = blah { used_link_args: RefCell::new([]) };\n     let s1 = nofields;\n-    let s2 = SF { field1: 55};\n-    let s3: some_fields = some_fields{ field1: 55};\n-    let s4: msalias::nested_struct = sub::sub2::nested_struct{ field2: 55};\n-    let s4: msalias::nested_struct = sub2::nested_struct{ field2: 55};\n+    let s2 = SF { field1: 55 };\n+    let s3: some_fields = some_fields { field1: 55 };\n+    let s4: msalias::nested_struct = sub::sub2::nested_struct { field2: 55 };\n+    let s4: msalias::nested_struct = sub2::nested_struct { field2: 55 };\n     println(&s2.field1.to_string());\n-    let s5: MyType = box some_fields{ field1: 55};\n-    let s = SameDir::SameStruct{name: \"Bob\".to_string()};\n-    let s = SubDir::SubStruct{name:\"Bob\".to_string()};\n+    let s5: MyType = box some_fields { field1: 55 };\n+    let s = SameDir::SameStruct { name: \"Bob\".to_string() };\n+    let s = SubDir::SubStruct { name: \"Bob\".to_string() };\n     let s6: SomeEnum = SomeEnum::MyTypes(box s2.clone(), s5);\n     let s7: SomeEnum = SomeEnum::Strings(\"one\", \"two\", \"three\");\n     matchSomeEnum(s6);\n     matchSomeEnum(s7);\n     let s8: SomeOtherEnum = SomeOtherEnum::SomeConst2;\n     matchSomeOtherEnum(s8);\n-    let s9: SomeStructEnum = SomeStructEnum::EnumStruct2{ f1: box some_fields{ field1:10 },\n-                                                          f2: box s2 };\n+    let s9: SomeStructEnum =\n+        SomeStructEnum::EnumStruct2 { f1: box some_fields { field1: 10 }, f2: box s2 };\n     matchSomeStructEnum(s9);\n \n     for x in &vec![1, 2, 3] {\n@@ -409,8 +416,7 @@ impl<'a> Pattern<'a> for CharEqPattern {\n \n struct CharSearcher<'a>(<CharEqPattern as Pattern<'a>>::Searcher);\n \n-pub trait Error {\n-}\n+pub trait Error {}\n \n impl Error + 'static {\n     pub fn is<T: Error + 'static>(&self) -> bool {\n@@ -437,13 +443,13 @@ fn test_format_args() {\n     print!(\"x is {}, y is {1}, name is {n}\", x, y, n = name);\n }\n \n-extern {\n+extern \"C\" {\n     static EXTERN_FOO: u8;\n     fn extern_foo(a: u8, b: i32) -> String;\n }\n \n struct Rls699 {\n-  f: u32,\n+    f: u32,\n }\n \n fn new(f: u32) -> Rls699 {"}, {"sha": "69d1668d4f643b901d11fcec0e7aa09c7806fe18", "filename": "src/test/run-make-fulldeps/static-nobundle/bbb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fstatic-nobundle%2Fbbb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fstatic-nobundle%2Fbbb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstatic-nobundle%2Fbbb.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n #![feature(static_nobundle)]\n \n #[link(name = \"aaa\", kind = \"static-nobundle\")]\n-extern {\n+extern \"C\" {\n     pub fn native_func();\n }\n "}, {"sha": "bf48d069da9565dfd86d8505eb5a6fe6a3e67679", "filename": "src/test/run-make-fulldeps/staticlib-blank-lib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fstaticlib-blank-lib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Fstaticlib-blank-lib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstaticlib-blank-lib%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"staticlib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "9ff33e24d04d79a56480f2824d4d93e66bb58148", "filename": "src/test/run-make-fulldeps/target-specs/foo.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-specs%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,19 +1,21 @@\n #![feature(lang_items, no_core, auto_traits)]\n #![no_core]\n \n-#[lang=\"copy\"]\n-trait Copy { }\n+#[lang = \"copy\"]\n+trait Copy {}\n \n-#[lang=\"sized\"]\n-trait Sized { }\n+#[lang = \"sized\"]\n+trait Sized {}\n \n #[lang = \"freeze\"]\n auto trait Freeze {}\n \n-#[lang=\"start\"]\n-fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize { 0 }\n+#[lang = \"start\"]\n+fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize {\n+    0\n+}\n \n-extern {\n+extern \"C\" {\n     fn _foo() -> [u8; 16];\n }\n "}, {"sha": "845844f427bdf1177edb4ceebaf7746126b2cc6d", "filename": "src/test/run-make/issue-36710/foo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-36710%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,9 @@\n // For linking libstdc++ on MinGW\n #![cfg_attr(all(windows, target_env = \"gnu\"), feature(static_nobundle))]\n \n-extern { fn get() -> u32; }\n+extern \"C\" {\n+    fn get() -> u32;\n+}\n \n fn main() {\n     let i = unsafe { get() };"}, {"sha": "1b988c78321d94af4c9a4c51fa96978279a91041", "filename": "src/test/run-make/wasm-import-module/bar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make%2Fwasm-import-module%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make%2Fwasm-import-module%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2Fbar.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,13 +4,13 @@\n extern crate foo;\n \n #[link(wasm_import_module = \"./me\")]\n-extern {\n+extern \"C\" {\n     #[link_name = \"me_in_dep\"]\n     fn dep();\n }\n \n #[no_mangle]\n-pub extern fn foo() {\n+pub extern \"C\" fn foo() {\n     unsafe {\n         foo::dep();\n         dep();"}, {"sha": "bbeaf99bc778ffcf1baa8fe57b4080e96ee6d901", "filename": "src/test/run-make/wasm-import-module/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make%2Fwasm-import-module%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-make%2Fwasm-import-module%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2Ffoo.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,6 +2,6 @@\n #![deny(warnings)]\n \n #[link(wasm_import_module = \"./dep\")]\n-extern {\n+extern \"C\" {\n     pub fn dep();\n }"}, {"sha": "571621c1de776d3a83576b185e023636076c3d5c", "filename": "src/test/run-pass-valgrind/osx-frameworks.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fosx-frameworks.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,13 +6,15 @@ extern crate libc;\n \n #[cfg(target_os = \"macos\")]\n #[link(name = \"CoreFoundation\", kind = \"framework\")]\n-extern {\n+extern \"C\" {\n     fn CFRunLoopGetTypeID() -> libc::c_ulong;\n }\n \n #[cfg(target_os = \"macos\")]\n pub fn main() {\n-    unsafe { CFRunLoopGetTypeID(); }\n+    unsafe {\n+        CFRunLoopGetTypeID();\n+    }\n }\n \n #[cfg(not(target_os = \"macos\"))]"}, {"sha": "6de1960e2e2b6376d02b46e5e065edc342f4c259", "filename": "src/test/rustdoc-ui/check-doc-alias-attr-location.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr-location.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@ pub trait Foo {\n }\n \n #[doc(alias = \"foo\")] //~ ERROR\n-extern {}\n+extern \"C\" {}\n \n #[doc(alias = \"bar\")] //~ ERROR\n impl Bar {\n@@ -17,5 +17,7 @@ impl Bar {\n impl Foo for Bar {\n     #[doc(alias = \"assoc\")] //~ ERROR\n     type X = i32;\n-    fn foo() -> Self::X { 0 }\n+    fn foo() -> Self::X {\n+        0\n+    }\n }"}, {"sha": "6c26b751c5e05725967442c5f3e728ee2a921b54", "filename": "src/test/rustdoc-ui/coverage/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fbasic.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -45,6 +45,6 @@ macro_rules! some_macro {\n     () => {};\n }\n \n-extern {\n+extern \"C\" {\n     pub type ExternType;\n }"}, {"sha": "c46660579a836cb01638f3ee2d0d0046725a83a9", "filename": "src/test/rustdoc/auxiliary/issue-34274.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-34274.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-34274.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-34274.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,3 +1,3 @@\n-extern {\n+extern \"C\" {\n     pub fn extern_c_fn();\n }"}, {"sha": "1dec0ef3e0f71aaecc5a3ea5a208add13ebf2735", "filename": "src/test/rustdoc/foreigntype-reexport.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fforeigntype-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fforeigntype-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforeigntype-reexport.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![feature(extern_types)]\n \n mod sub {\n-    extern {\n+    extern \"C\" {\n         /// Another extern type.\n         pub type C2;\n         pub fn f2();\n@@ -10,7 +10,7 @@ mod sub {\n }\n \n pub mod sub2 {\n-    extern {\n+    extern \"C\" {\n         // @has foreigntype_reexport/sub2/foreigntype.C.html\n         pub type C;\n         // @has foreigntype_reexport/sub2/fn.f.html\n@@ -21,7 +21,7 @@ pub mod sub2 {\n }\n \n mod sub3 {\n-    extern {\n+    extern \"C\" {\n         pub type C4;\n         pub fn f4();\n         pub static K4: usize;\n@@ -35,15 +35,15 @@ mod sub3 {\n // @has foreigntype_reexport/index.html '//a[@class=\"foreigntype\"]' 'C2'\n // @has foreigntype_reexport/index.html '//a[@class=\"fn\"]' 'f2'\n // @has foreigntype_reexport/index.html '//a[@class=\"static\"]' 'K2'\n-pub use self::sub::{C2, f2, K as K2};\n+pub use self::sub::{f2, C2, K as K2};\n \n // @has foreigntype_reexport/index.html '//a[@class=\"foreigntype\"]' 'C'\n // @has foreigntype_reexport/index.html '//a[@class=\"fn\"]' 'f'\n // @has foreigntype_reexport/index.html '//a[@class=\"static\"]' 'K3'\n // @has foreigntype_reexport/index.html '//code' 'pub use self::sub2::C as C3;'\n // @has foreigntype_reexport/index.html '//code' 'pub use self::sub2::f as f3;'\n // @has foreigntype_reexport/index.html '//code' 'pub use self::sub2::K3;'\n-pub use self::sub2::{C as C3, f as f3, K3};\n+pub use self::sub2::{f as f3, C as C3, K3};\n \n // @has foreigntype_reexport/foreigntype.C4.html\n // @has foreigntype_reexport/fn.f4.html"}, {"sha": "891cdd5fed76c9bf49835a284a78f65154de4981", "filename": "src/test/rustdoc/foreigntype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fforeigntype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fforeigntype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fforeigntype.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     // @has foreigntype/foreigntype.ExtType.html\n     pub type ExtType;\n }"}, {"sha": "55c75dfe27b7e613e62947be61b8e6fbef48e080", "filename": "src/test/rustdoc/inline_local/glob-extern-no-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-no-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-no-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern-no-defaults.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n mod mod1 {\n-    extern {\n+    extern \"C\" {\n         pub fn public_fn();\n         fn private_fn();\n     }"}, {"sha": "686e55de39264e87ded18749ec45291eec0f27b2", "filename": "src/test/rustdoc/inline_local/glob-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_local%2Fglob-extern.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n mod mod1 {\n-    extern {\n+    extern \"C\" {\n         pub fn public_fn();\n         fn private_fn();\n     }"}, {"sha": "ff5813dac8099613997ec87ded88393e0f2473d8", "filename": "src/test/rustdoc/issue-22038.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-22038.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     // @has issue_22038/fn.foo1.html \\\n     //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn foo1()'\n     pub fn foo1();\n@@ -12,7 +12,7 @@ extern \"system\" {\n \n // @has issue_22038/fn.bar.html \\\n //      '//*[@class=\"rust fn\"]' 'pub extern \"C\" fn bar()'\n-pub extern fn bar() {}\n+pub extern \"C\" fn bar() {}\n \n // @has issue_22038/fn.baz.html \\\n //      '//*[@class=\"rust fn\"]' 'pub extern \"system\" fn baz()'"}, {"sha": "1abba468febf59f19760f3d8ac0067718cea3fbd", "filename": "src/test/rustdoc/sanitizer-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsanitizer-option.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,7 +7,7 @@\n // correctly, then linking will fail.\n \n /// ```\n-/// extern {\n+/// extern \"C\" {\n ///     fn __sanitizer_print_stack_trace();\n /// }\n ///"}, {"sha": "2084e8517992a4759d657d0f0bb7de42812ff6a5", "filename": "src/test/rustdoc/titles.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Ftitles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Frustdoc%2Ftitles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftitles.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,7 +7,7 @@ pub mod foo_mod {\n     pub struct __Thing {}\n }\n \n-extern {\n+extern \"C\" {\n     // @matches 'foo/fn.foo_ffn.html' '//h1' 'Function foo::foo_ffn'\n     pub fn foo_ffn();\n }\n@@ -30,7 +30,7 @@ pub type FooType = FooStruct;\n // @matches 'foo/macro.foo_macro.html' '//h1' 'Macro foo::foo_macro'\n #[macro_export]\n macro_rules! foo_macro {\n-    () => ();\n+    () => {};\n }\n \n // @matches 'foo/primitive.bool.html' '//h1' 'Primitive Type bool'\n@@ -40,7 +40,7 @@ mod bool {}\n // @matches 'foo/static.FOO_STATIC.html' '//h1' 'Static foo::FOO_STATIC'\n pub static FOO_STATIC: FooStruct = FooStruct;\n \n-extern {\n+extern \"C\" {\n     // @matches 'foo/static.FOO_FSTATIC.html' '//h1' 'Static foo::FOO_FSTATIC'\n     pub static FOO_FSTATIC: FooStruct;\n }"}, {"sha": "e9501a809308bd9bed50724c3d830558149331b3", "filename": "src/test/ui-fulldeps/switch-stdout.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui-fulldeps%2Fswitch-stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui-fulldeps%2Fswitch-stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fswitch-stdout.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n fn switch_stdout_to(file: File) {\n     use std::os::unix::prelude::*;\n \n-    extern {\n+    extern \"C\" {\n         fn dup2(old: i32, new: i32) -> i32;\n     }\n \n@@ -29,8 +29,7 @@ fn switch_stdout_to(file: File) {\n     const STD_OUTPUT_HANDLE: u32 = (-11i32) as u32;\n \n     unsafe {\n-        let rc = SetStdHandle(STD_OUTPUT_HANDLE,\n-                              file.into_raw_handle() as *mut _);\n+        let rc = SetStdHandle(STD_OUTPUT_HANDLE, file.into_raw_handle() as *mut _);\n         assert!(rc != 0);\n     }\n }"}, {"sha": "6c7d60d4cb0b493db8cd1855cc871b4eb10b5935", "filename": "src/test/ui/abi/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fanon-extern-mod.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,7 +7,7 @@\n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn rust_get_test_int() -> libc::intptr_t;\n }\n "}, {"sha": "5cbf8093c5c3cbe05191a07731f54c9b78423efc", "filename": "src/test/ui/abi/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,9 @@\n-#![crate_name=\"anonexternmod\"]\n+#![crate_name = \"anonexternmod\"]\n #![feature(rustc_private)]\n \n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "3c649b778bd1a47813b1a1f0f3737022dc74c2a9", "filename": "src/test/ui/abi/auxiliary/foreign_lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fauxiliary%2Fforeign_lib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,20 +1,19 @@\n-#![crate_name=\"foreign_lib\"]\n-\n+#![crate_name = \"foreign_lib\"]\n #![feature(rustc_private)]\n \n pub mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n \n pub mod rustrt2 {\n     extern crate libc;\n \n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n@@ -24,7 +23,7 @@ pub mod rustrt3 {\n     // Ensures that we don't ICE or trigger LLVM asserts when\n     // importing the same symbol under different types.\n     // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> *const u8;\n     }\n }"}, {"sha": "5bece0ba2d15baacac31c5a32ed5a44613883848", "filename": "src/test/ui/abi/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fc-stack-as-value.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,7 +8,7 @@ mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }"}, {"sha": "1dbab275225cdb2579ee22f5d995e62c60510fa0", "filename": "src/test/ui/abi/cabi-int-widening.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fcabi-int-widening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fcabi-int-widening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fcabi-int-widening.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn rust_int8_to_int32(_: i8) -> i32;\n }\n "}, {"sha": "5cbf8093c5c3cbe05191a07731f54c9b78423efc", "filename": "src/test/ui/abi/consts/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,9 @@\n-#![crate_name=\"anonexternmod\"]\n+#![crate_name = \"anonexternmod\"]\n #![feature(rustc_private)]\n \n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "5cbf8093c5c3cbe05191a07731f54c9b78423efc", "filename": "src/test/ui/abi/cross-crate/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,9 @@\n-#![crate_name=\"anonexternmod\"]\n+#![crate_name = \"anonexternmod\"]\n #![feature(rustc_private)]\n \n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "9c61518b94142ebd4dd2c18258ae750b48d7f912", "filename": "src/test/ui/abi/extern/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-#![crate_name=\"externcallback\"]\n+#![crate_name = \"externcallback\"]\n #![crate_type = \"lib\"]\n #![feature(rustc_private)]\n \n@@ -8,10 +8,11 @@ pub mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n+    extern \"C\" {\n+        pub fn rust_dbg_call(\n+            cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+            data: libc::uintptr_t,\n+        ) -> libc::uintptr_t;\n     }\n }\n \n@@ -22,10 +23,6 @@ pub fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n     }\n }\n \n-pub extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        fact(data - 1) * data\n-    }\n+pub extern \"C\" fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+    if data == 1 { data } else { fact(data - 1) * data }\n }"}, {"sha": "db5f2ca652fa51bf74d3dcb237f21af75a1e66a6", "filename": "src/test/ui/abi/extern/extern-call-deep.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-deep.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -10,19 +10,16 @@ mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n+    extern \"C\" {\n+        pub fn rust_dbg_call(\n+            cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+            data: libc::uintptr_t,\n+        ) -> libc::uintptr_t;\n     }\n }\n \n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + 1\n-    }\n+extern \"C\" fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+    if data == 1 { data } else { count(data - 1) + 1 }\n }\n \n fn count(n: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "60e8db1592e940fa38e3137e6631e67ef61b657f", "filename": "src/test/ui/abi/extern/extern-call-deep2.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-deep2.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_must_use)]\n // ignore-emscripten no threads support\n-\n #![feature(rustc_private)]\n \n extern crate libc;\n@@ -11,19 +10,16 @@ mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n+    extern \"C\" {\n+        pub fn rust_dbg_call(\n+            cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+            data: libc::uintptr_t,\n+        ) -> libc::uintptr_t;\n     }\n }\n \n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + 1\n-    }\n+extern \"C\" fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+    if data == 1 { data } else { count(data - 1) + 1 }\n }\n \n fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n@@ -36,9 +32,10 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n pub fn main() {\n     // Make sure we're on a thread with small Rust stacks (main currently\n     // has a large stack)\n-    thread::spawn(move|| {\n+    thread::spawn(move || {\n         let result = count(1000);\n         println!(\"result = {}\", result);\n         assert_eq!(result, 1000);\n-    }).join();\n+    })\n+    .join();\n }"}, {"sha": "886e8f6be1099baf7a89b0371d0e69a674455fc7", "filename": "src/test/ui/abi/extern/extern-call-indirect.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-indirect.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,19 +9,16 @@ mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n+    extern \"C\" {\n+        pub fn rust_dbg_call(\n+            cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+            data: libc::uintptr_t,\n+        ) -> libc::uintptr_t;\n     }\n }\n \n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        fact(data - 1) * data\n-    }\n+extern \"C\" fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+    if data == 1 { data } else { fact(data - 1) * data }\n }\n \n fn fact(n: libc::uintptr_t) -> libc::uintptr_t {"}, {"sha": "ff33cf31af85e6717a85322cf109d0ff4c40c272", "filename": "src/test/ui/abi/extern/extern-call-scrub.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-scrub.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,6 @@\n // directions\n \n // ignore-emscripten no threads support\n-\n #![feature(rustc_private)]\n \n extern crate libc;\n@@ -15,19 +14,16 @@ mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n+    extern \"C\" {\n+        pub fn rust_dbg_call(\n+            cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n+            data: libc::uintptr_t,\n+        ) -> libc::uintptr_t;\n     }\n }\n \n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + count(data - 1)\n-    }\n+extern \"C\" fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+    if data == 1 { data } else { count(data - 1) + count(data - 1) }\n }\n \n fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n@@ -40,9 +36,10 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n pub fn main() {\n     // Make sure we're on a thread with small Rust stacks (main currently\n     // has a large stack)\n-    thread::spawn(move|| {\n+    thread::spawn(move || {\n         let result = count(12);\n         println!(\"result = {}\", result);\n         assert_eq!(result, 2048);\n-    }).join();\n+    })\n+    .join();\n }"}, {"sha": "cff25511cc95d5aa47303d2f2df18dc15abf13c3", "filename": "src/test/ui/abi/extern/extern-pass-TwoU16s.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU16s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,17 +8,18 @@\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU16s {\n-    one: u16, two: u16\n+    one: u16,\n+    two: u16,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n }\n \n pub fn main() {\n     unsafe {\n-        let x = TwoU16s {one: 22, two: 23};\n+        let x = TwoU16s { one: 22, two: 23 };\n         let y = rust_dbg_extern_identity_TwoU16s(x);\n         assert_eq!(x, y);\n     }"}, {"sha": "03a8ecf241da802d19916c6aff3ea56c70675516", "filename": "src/test/ui/abi/extern/extern-pass-TwoU32s.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU32s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,17 +8,18 @@\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU32s {\n-    one: u32, two: u32\n+    one: u32,\n+    two: u32,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n }\n \n pub fn main() {\n     unsafe {\n-        let x = TwoU32s {one: 22, two: 23};\n+        let x = TwoU32s { one: 22, two: 23 };\n         let y = rust_dbg_extern_identity_TwoU32s(x);\n         assert_eq!(x, y);\n     }"}, {"sha": "8bbc987c821b406329bb281d32a18a17a2e2b32a", "filename": "src/test/ui/abi/extern/extern-pass-TwoU64s.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU64s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,17 +8,18 @@\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU64s {\n-    one: u64, two: u64\n+    one: u64,\n+    two: u64,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n }\n \n pub fn main() {\n     unsafe {\n-        let x = TwoU64s {one: 22, two: 23};\n+        let x = TwoU64s { one: 22, two: 23 };\n         let y = rust_dbg_extern_identity_TwoU64s(x);\n         assert_eq!(x, y);\n     }"}, {"sha": "55a53c250bf389459cce732f742319a39de0bb3a", "filename": "src/test/ui/abi/extern/extern-pass-TwoU8s.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-TwoU8s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,17 +8,18 @@\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU8s {\n-    one: u8, two: u8\n+    one: u8,\n+    two: u8,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n }\n \n pub fn main() {\n     unsafe {\n-        let x = TwoU8s {one: 22, two: 23};\n+        let x = TwoU8s { one: 22, two: 23 };\n         let y = rust_dbg_extern_identity_TwoU8s(x);\n         assert_eq!(x, y);\n     }"}, {"sha": "2b10d26d1ddf2f29b8da6f06596b88fc137063bb", "filename": "src/test/ui/abi/extern/extern-pass-char.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-char.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,9 +3,8 @@\n \n // Test a function that takes/returns a u8.\n \n-\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n }\n "}, {"sha": "0b556c99e8d0bbfcb1fffb93a89b12e6ea4fb3c5", "filename": "src/test/ui/abi/extern/extern-pass-double.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-double.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n // ignore-wasm32-bare no libc for ffi testing\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n }\n "}, {"sha": "ee974f6dbdeed59e8403fc2d730a85c1a024b3cf", "filename": "src/test/ui/abi/extern/extern-pass-empty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-empty.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -27,7 +27,7 @@ struct ManyInts {\n struct Empty;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn rust_dbg_extern_empty_struct(v1: ManyInts, e: Empty, v2: ManyInts);\n }\n \n@@ -39,15 +39,15 @@ pub fn main() {\n             arg3: 4,\n             arg4: 5,\n             arg5: 6,\n-            arg6: TwoU8s { one: 7, two: 8, }\n+            arg6: TwoU8s { one: 7, two: 8 },\n         };\n         let y = ManyInts {\n             arg1: 1,\n             arg2: 2,\n             arg3: 3,\n             arg4: 4,\n             arg5: 5,\n-            arg6: TwoU8s { one: 6, two: 7, }\n+            arg6: TwoU8s { one: 6, two: 7 },\n         };\n         let empty = Empty;\n         rust_dbg_extern_empty_struct(x, empty, y);"}, {"sha": "c9b8d52cf5be9d7548cbbce38881ebbffc28a155", "filename": "src/test/ui/abi/extern/extern-pass-u32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-u32.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,9 +3,8 @@\n \n // Test a function that takes/returns a u32.\n \n-\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n }\n "}, {"sha": "5103129abaa4d24b3ea15d021175830d96d8fe0e", "filename": "src/test/ui/abi/extern/extern-pass-u64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-pass-u64.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,9 +3,8 @@\n \n // Test a call to a function that takes/returns a u64.\n \n-\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n }\n "}, {"sha": "2551c93a76541b9d6cff72b810427d03df5466ba", "filename": "src/test/ui/abi/extern/extern-return-TwoU16s.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU16s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,11 +4,12 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n pub struct TwoU16s {\n-    one: u16, two: u16\n+    one: u16,\n+    two: u16,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n }\n "}, {"sha": "70a42895d91dfbd4bfbbb008e9bb42889e5675ef", "filename": "src/test/ui/abi/extern/extern-return-TwoU32s.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU32s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,11 +4,12 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n pub struct TwoU32s {\n-    one: u32, two: u32\n+    one: u32,\n+    two: u32,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n }\n "}, {"sha": "dd264fb9c196b6e3751e9be1c575c37bd78c1315", "filename": "src/test/ui/abi/extern/extern-return-TwoU64s.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU64s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,11 +4,12 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n pub struct TwoU64s {\n-    one: u64, two: u64\n+    one: u64,\n+    two: u64,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n }\n "}, {"sha": "b60387aed99def2bedff5156b20dbbad8b7cbe94", "filename": "src/test/ui/abi/extern/extern-return-TwoU8s.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-return-TwoU8s.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,11 +4,12 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n pub struct TwoU8s {\n-    one: u8, two: u8\n+    one: u8,\n+    two: u8,\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n }\n "}, {"sha": "3c649b778bd1a47813b1a1f0f3737022dc74c2a9", "filename": "src/test/ui/abi/foreign/auxiliary/foreign_lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fauxiliary%2Fforeign_lib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,20 +1,19 @@\n-#![crate_name=\"foreign_lib\"]\n-\n+#![crate_name = \"foreign_lib\"]\n #![feature(rustc_private)]\n \n pub mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n \n pub mod rustrt2 {\n     extern crate libc;\n \n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n@@ -24,7 +23,7 @@ pub mod rustrt3 {\n     // Ensures that we don't ICE or trigger LLVM asserts when\n     // importing the same symbol under different types.\n     // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> *const u8;\n     }\n }"}, {"sha": "d5b90a3592b3e088c31d9ce037c002bd7823f3f5", "filename": "src/test/ui/abi/foreign/foreign-call-no-runtime.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-call-no-runtime.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,45 +9,50 @@ use std::mem;\n use std::thread;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t),\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n+extern \"C\" {\n+    fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t), data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n pub fn main() {\n     unsafe {\n-        thread::spawn(move|| {\n+        thread::spawn(move || {\n             let i: isize = 100;\n             rust_dbg_call(callback_isize, mem::transmute(&i));\n-        }).join().unwrap();\n+        })\n+        .join()\n+        .unwrap();\n \n-        thread::spawn(move|| {\n+        thread::spawn(move || {\n             let i: i32 = 100;\n             rust_dbg_call(callback_i32, mem::transmute(&i));\n-        }).join().unwrap();\n+        })\n+        .join()\n+        .unwrap();\n \n-        thread::spawn(move|| {\n+        thread::spawn(move || {\n             let i: i64 = 100;\n             rust_dbg_call(callback_i64, mem::transmute(&i));\n-        }).join().unwrap();\n+        })\n+        .join()\n+        .unwrap();\n     }\n }\n \n-extern fn callback_isize(data: libc::uintptr_t) {\n+extern \"C\" fn callback_isize(data: libc::uintptr_t) {\n     unsafe {\n         let data: *const isize = mem::transmute(data);\n         assert_eq!(*data, 100);\n     }\n }\n \n-extern fn callback_i64(data: libc::uintptr_t) {\n+extern \"C\" fn callback_i64(data: libc::uintptr_t) {\n     unsafe {\n         let data: *const i64 = mem::transmute(data);\n         assert_eq!(*data, 100);\n     }\n }\n \n-extern fn callback_i32(data: libc::uintptr_t) {\n+extern \"C\" fn callback_i32(data: libc::uintptr_t) {\n     unsafe {\n         let data: *const i32 = mem::transmute(data);\n         assert_eq!(*data, 100);"}, {"sha": "f366b6ee1bdd5a4013833dfa614631722c0a3e30", "filename": "src/test/ui/abi/foreign/foreign-fn-with-byval.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-fn-with-byval.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -11,17 +11,15 @@ pub struct S {\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn get_x(x: S) -> u64;\n     pub fn get_y(x: S) -> u64;\n     pub fn get_z(x: S) -> u64;\n }\n \n #[inline(never)]\n-fn indirect_call(func: unsafe extern fn(s: S) -> u64, s: S) -> u64 {\n-    unsafe {\n-        func(s)\n-    }\n+fn indirect_call(func: unsafe extern \"C\" fn(s: S) -> u64, s: S) -> u64 {\n+    unsafe { func(s) }\n }\n \n fn main() {"}, {"sha": "3f4f70c99e6a8d5415a9c05a1e4adc442058cea6", "filename": "src/test/ui/abi/foreign/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fforeign%2Fforeign-no-abi.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -10,7 +10,7 @@ mod rustrt {\n     extern crate libc;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }"}, {"sha": "29b2405189cc3d72fe7e5e452729da3e9334c1d1", "filename": "src/test/ui/abi/issues/issue-62350-sysv-neg-reg-counts.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-62350-sysv-neg-reg-counts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-62350-sysv-neg-reg-counts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-62350-sysv-neg-reg-counts.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,13 +5,18 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n #[derive(Copy, Clone)]\n-pub struct QuadFloats { a: f32, b: f32, c: f32, d: f32 }\n+pub struct QuadFloats {\n+    a: f32,\n+    b: f32,\n+    c: f32,\n+    d: f32,\n+}\n \n mod rustrt {\n     use super::QuadFloats;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n+    extern \"C\" {\n         pub fn get_c_exhaust_sysv64_ints(\n             _: *const (),\n             _: *const (),\n@@ -28,12 +33,7 @@ mod rustrt {\n fn test() {\n     unsafe {\n         let null = std::ptr::null();\n-        let q = QuadFloats {\n-            a: 10.2,\n-            b: 20.3,\n-            c: 30.4,\n-            d: 40.5\n-        };\n+        let q = QuadFloats { a: 10.2, b: 20.3, c: 30.4, d: 40.5 };\n         assert_eq!(\n             rustrt::get_c_exhaust_sysv64_ints(null, null, null, null, null, null, null, q),\n             q.c,"}, {"sha": "b3392b9c60715642b9f1c631f860b8861fcf09c9", "filename": "src/test/ui/abi/mir/mir_codegen_calls_variadic.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fmir%2Fmir_codegen_calls_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fmir%2Fmir_codegen_calls_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fmir%2Fmir_codegen_calls_variadic.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,21 +2,18 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn rust_interesting_average(_: i64, ...) -> f64;\n }\n \n fn test<T, U>(a: i64, b: i64, c: i64, d: i64, e: i64, f: T, g: U) -> i64 {\n     unsafe {\n-        rust_interesting_average(6, a, a as f64,\n-                                    b, b as f64,\n-                                    c, c as f64,\n-                                    d, d as f64,\n-                                    e, e as f64,\n-                                    f, g) as i64\n+        rust_interesting_average(\n+            6, a, a as f64, b, b as f64, c, c as f64, d, d as f64, e, e as f64, f, g,\n+        ) as i64\n     }\n }\n \n-fn main(){\n+fn main() {\n     assert_eq!(test(10, 20, 30, 40, 50, 60_i64, 60.0_f64), 70);\n }"}, {"sha": "ad4faf95a0f95e99b77ffff9392e59f284546001", "filename": "src/test/ui/abi/segfault-no-out-of-stack.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fsegfault-no-out-of-stack.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,39 +3,37 @@\n #![allow(unused_imports)]\n // ignore-emscripten can't run commands\n // ignore-sgx no processes\n-\n #![feature(rustc_private)]\n \n extern crate libc;\n \n-use std::process::{Command, ExitStatus};\n use std::env;\n+use std::process::{Command, ExitStatus};\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn rust_get_null_ptr() -> *mut ::libc::c_char;\n }\n \n #[cfg(unix)]\n-fn check_status(status: std::process::ExitStatus)\n-{\n+fn check_status(status: std::process::ExitStatus) {\n     use libc;\n     use std::os::unix::process::ExitStatusExt;\n \n-    assert!(status.signal() == Some(libc::SIGSEGV)\n-            || status.signal() == Some(libc::SIGBUS));\n+    assert!(status.signal() == Some(libc::SIGSEGV) || status.signal() == Some(libc::SIGBUS));\n }\n \n #[cfg(not(unix))]\n-fn check_status(status: std::process::ExitStatus)\n-{\n+fn check_status(status: std::process::ExitStatus) {\n     assert!(!status.success());\n }\n \n fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"segfault\" {\n-        unsafe { *rust_get_null_ptr() = 1; }; // trigger a segfault\n+        unsafe {\n+            *rust_get_null_ptr() = 1;\n+        }; // trigger a segfault\n     } else {\n         let segfault = Command::new(&args[0]).arg(\"segfault\").output().unwrap();\n         let stderr = String::from_utf8_lossy(&segfault.stderr);"}, {"sha": "e998dd0f83ebca01c0b5455e0580f1d3a11cbdba", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -11,13 +11,13 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n \n+use std::env;\n use std::mem::MaybeUninit;\n use std::process::Command;\n use std::thread;\n-use std::env;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     #[link_name = \"rust_dbg_extern_identity_u64\"]\n     fn black_box(u: u64);\n }\n@@ -30,7 +30,7 @@ fn main() {\n             \"child-thread\" => thread::spawn(|| recurse(&MaybeUninit::uninit())).join().unwrap(),\n             _ => panic!(),\n         }\n-        return\n+        return;\n     }\n \n     let me = env::current_exe().unwrap();"}, {"sha": "ecd8ee94a01e3b5f814a9ab472aa755cabf25850", "filename": "src/test/ui/abi/statics/static-mut-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -10,7 +10,7 @@\n extern crate libc;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     static mut rust_dbg_static_mut: libc::c_int;\n     pub fn rust_dbg_static_mut_check_four();\n }"}, {"sha": "1a7984ea5cd17b8b3a52d03c01ec30a856db83bd", "filename": "src/test/ui/abi/struct-enums/struct-return.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fstruct-enums%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fstruct-enums%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstruct-enums%2Fstruct-return.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,25 +4,42 @@\n \n #[repr(C)]\n #[derive(Copy, Clone)]\n-pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n+pub struct Quad {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+    d: u64,\n+}\n \n #[repr(C)]\n #[derive(Copy, Clone)]\n-pub struct Floats { a: f64, b: u8, c: f64 }\n+pub struct Floats {\n+    a: f64,\n+    b: u8,\n+    c: f64,\n+}\n \n #[repr(C)]\n #[derive(Copy, Clone)]\n-pub struct CharCharDouble { a: u8, b: u8, c: f64 }\n+pub struct CharCharDouble {\n+    a: u8,\n+    b: u8,\n+    c: f64,\n+}\n \n #[repr(C)]\n #[derive(Copy, Clone)]\n-pub struct CharCharFloat { a: u8, b: u8, c: f32 }\n+pub struct CharCharFloat {\n+    a: u8,\n+    b: u8,\n+    c: f32,\n+}\n \n mod rustrt {\n-    use super::{Floats, Quad, CharCharDouble, CharCharFloat};\n+    use super::{CharCharDouble, CharCharFloat, Floats, Quad};\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n+    extern \"C\" {\n         pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n         pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n         pub fn rust_dbg_abi_3(a: CharCharDouble) -> CharCharDouble;\n@@ -32,10 +49,12 @@ mod rustrt {\n \n fn test1() {\n     unsafe {\n-        let q = Quad { a: 0xaaaa_aaaa_aaaa_aaaa,\n-                 b: 0xbbbb_bbbb_bbbb_bbbb,\n-                 c: 0xcccc_cccc_cccc_cccc,\n-                 d: 0xdddd_dddd_dddd_dddd };\n+        let q = Quad {\n+            a: 0xaaaa_aaaa_aaaa_aaaa,\n+            b: 0xbbbb_bbbb_bbbb_bbbb,\n+            c: 0xcccc_cccc_cccc_cccc,\n+            d: 0xdddd_dddd_dddd_dddd,\n+        };\n         let qq = rustrt::rust_dbg_abi_1(q);\n         println!(\"a: {:x}\", qq.a as usize);\n         println!(\"b: {:x}\", qq.b as usize);\n@@ -51,9 +70,7 @@ fn test1() {\n #[cfg(target_pointer_width = \"64\")]\n fn test2() {\n     unsafe {\n-        let f = Floats { a: 1.234567890e-15_f64,\n-                 b: 0b_1010_1010,\n-                 c: 1.0987654321e-15_f64 };\n+        let f = Floats { a: 1.234567890e-15_f64, b: 0b_1010_1010, c: 1.0987654321e-15_f64 };\n         let ff = rustrt::rust_dbg_abi_2(f);\n         println!(\"a: {}\", ff.a as f64);\n         println!(\"b: {}\", ff.b as usize);\n@@ -65,17 +82,12 @@ fn test2() {\n }\n \n #[cfg(target_pointer_width = \"32\")]\n-fn test2() {\n-}\n+fn test2() {}\n \n #[cfg(target_pointer_width = \"64\")]\n fn test3() {\n     unsafe {\n-        let a = CharCharDouble {\n-            a: 1,\n-            b: 2,\n-            c: 3.,\n-        };\n+        let a = CharCharDouble { a: 1, b: 2, c: 3. };\n         let b = rustrt::rust_dbg_abi_3(a);\n         println!(\"a: {}\", b.a);\n         println!(\"b: {}\", b.b);\n@@ -91,11 +103,7 @@ fn test3() {}\n \n fn test4() {\n     unsafe {\n-        let a = CharCharFloat {\n-            a: 1,\n-            b: 2,\n-            c: 3.,\n-        };\n+        let a = CharCharFloat { a: 1, b: 2, c: 3. };\n         let b = rustrt::rust_dbg_abi_4(a);\n         println!(\"a: {}\", b.a);\n         println!(\"b: {}\", b.b);"}, {"sha": "a952ea07793298167f5345065c64a2b2f18b5cca", "filename": "src/test/ui/abi/variadic-ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fabi%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fvariadic-ffi.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@\n use std::ffi::VaList;\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     fn rust_interesting_average(_: u64, ...) -> f64;\n \n     // FIXME: we need to disable this lint for `VaList`,\n@@ -61,7 +61,7 @@ pub fn main() {\n     }\n \n     // A function that takes a function pointer\n-    unsafe fn call(fp: unsafe extern fn(u64, ...) -> f64) {\n+    unsafe fn call(fp: unsafe extern \"C\" fn(u64, ...) -> f64) {\n         let (x1, x2, x3, x4) = (10i64, 10.0f64, 20i64, 20.0f64);\n         assert_eq!(fp(2, x1, x2, x3, x4) as i64, 30);\n     }\n@@ -70,7 +70,7 @@ pub fn main() {\n         call(rust_interesting_average);\n \n         // Make a function pointer, pass indirectly\n-        let x: unsafe extern fn(u64, ...) -> f64 = rust_interesting_average;\n+        let x: unsafe extern \"C\" fn(u64, ...) -> f64 = rust_interesting_average;\n         call(x);\n     }\n "}, {"sha": "c6bf6c656027753a7ccf88907ed7623904aef6bb", "filename": "src/test/ui/attributes/item-attributes.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,6 @@\n // check-pass\n \n #![feature(rustc_attrs)]\n-\n #![rustc_dummy = \"val\"]\n #![rustc_dummy = \"val\"]\n #![rustc_dummy]\n@@ -21,14 +20,14 @@ mod test_single_attr_outer {\n     pub static X: isize = 10;\n \n     #[rustc_dummy = \"val\"]\n-    pub fn f() { }\n+    pub fn f() {}\n \n     #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n         #[rustc_dummy = \"val\"]\n-        extern {}\n+        extern \"C\" {}\n     }\n }\n \n@@ -39,7 +38,7 @@ mod test_multi_attr_outer {\n \n     #[rustc_dummy = \"val\"]\n     #[rustc_dummy = \"val\"]\n-    pub fn f() { }\n+    pub fn f() {}\n \n     #[rustc_dummy = \"val\"]\n     #[rustc_dummy = \"val\"]\n@@ -48,12 +47,14 @@ mod test_multi_attr_outer {\n     pub mod rustrt {\n         #[rustc_dummy = \"val\"]\n         #[rustc_dummy = \"val\"]\n-        extern {}\n+        extern \"C\" {}\n     }\n \n     #[rustc_dummy = \"val\"]\n     #[rustc_dummy = \"val\"]\n-    struct T {x: isize}\n+    struct T {\n+        x: isize,\n+    }\n }\n \n mod test_stmt_single_attr_outer {\n@@ -62,41 +63,36 @@ mod test_stmt_single_attr_outer {\n         static X: isize = 10;\n \n         #[rustc_dummy = \"val\"]\n-        fn f() { }\n+        fn f() {}\n \n         #[rustc_dummy = \"val\"]\n-        mod mod1 {\n-        }\n+        mod mod1 {}\n \n         mod rustrt {\n             #[rustc_dummy = \"val\"]\n-            extern {\n-            }\n+            extern \"C\" {}\n         }\n     }\n }\n \n mod test_stmt_multi_attr_outer {\n     pub fn f() {\n-\n         #[rustc_dummy = \"val\"]\n         #[rustc_dummy = \"val\"]\n         static X: isize = 10;\n \n         #[rustc_dummy = \"val\"]\n         #[rustc_dummy = \"val\"]\n-        fn f() { }\n+        fn f() {}\n \n         #[rustc_dummy = \"val\"]\n         #[rustc_dummy = \"val\"]\n-        mod mod1 {\n-        }\n+        mod mod1 {}\n \n         mod rustrt {\n             #[rustc_dummy = \"val\"]\n             #[rustc_dummy = \"val\"]\n-            extern {\n-            }\n+            extern \"C\" {}\n         }\n     }\n }\n@@ -114,7 +110,7 @@ mod test_attr_inner_then_outer {\n         #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n         #[rustc_dummy = \"val\"]\n-        fn f() { }\n+        fn f() {}\n     }\n }\n \n@@ -126,15 +122,15 @@ mod test_attr_inner_then_outer_multi {\n         // This is an attribute of fn f\n         #[rustc_dummy = \"val\"]\n         #[rustc_dummy = \"val\"]\n-        fn f() { }\n+        fn f() {}\n     }\n }\n \n mod test_distinguish_syntax_ext {\n     pub fn f() {\n         format!(\"test{}\", \"s\");\n         #[rustc_dummy = \"val\"]\n-        fn g() { }\n+        fn g() {}\n     }\n }\n \n@@ -143,12 +139,12 @@ mod test_other_forms {\n     #[rustc_dummy(word)]\n     #[rustc_dummy(attr(word))]\n     #[rustc_dummy(key1 = \"val\", key2 = \"val\", attr)]\n-    pub fn f() { }\n+    pub fn f() {}\n }\n \n mod test_foreign_items {\n     pub mod rustrt {\n-        extern {\n+        extern \"C\" {\n             #![rustc_dummy]\n \n             #[rustc_dummy]\n@@ -157,7 +153,6 @@ mod test_foreign_items {\n     }\n }\n \n-\n // FIXME(#623): - these aren't supported yet\n /*mod test_literals {\n     #![str = \"s\"]"}, {"sha": "7019abcaffbae02cd67cd5b2d9bf6153b16ead39", "filename": "src/test/ui/attributes/obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n // Obsolete attributes fall back to unstable custom attributes.\n \n-#[ab_isize=\"stdcall\"] extern {}\n+#[ab_isize = \"stdcall\"] extern \"C\" {}\n //~^ ERROR cannot find attribute `ab_isize` in this scope\n \n #[fixed_stack_segment] fn f() {}"}, {"sha": "37c1cd0c94df22e855a5ff5b7b8338a83aadebe5", "filename": "src/test/ui/attributes/obsolete-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,7 +7,7 @@ LL | #[fixed_stack_segment] fn f() {}\n error: cannot find attribute `ab_isize` in this scope\n   --> $DIR/obsolete-attr.rs:3:3\n    |\n-LL | #[ab_isize=\"stdcall\"] extern {}\n+LL | #[ab_isize = \"stdcall\"] extern \"C\" {}\n    |   ^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "c090bc79fce83b2c6d145b8458d5debc07617bb6", "filename": "src/test/ui/auxiliary/extern-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fauxiliary%2Fextern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fauxiliary%2Fextern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fextern-statics.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     pub static XA: u8;\n     pub static mut XB: u8;\n }"}, {"sha": "0d927117d81d363efd81733e169875fd1b6deca4", "filename": "src/test/ui/auxiliary/link-cfg-works-transitive-dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flink-cfg-works-transitive-dylib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n #![feature(link_cfg)]\n \n #[link(name = \"foo\", cfg(foo))]\n-extern {}\n+extern \"C\" {}"}, {"sha": "0a296f0b2ef4c7490cdf61e6e10ccb2ce03cbfd5", "filename": "src/test/ui/auxiliary/link-cfg-works-transitive-rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flink-cfg-works-transitive-rlib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,4 +4,4 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"foo\", cfg(foo))]\n-extern {}\n+extern \"C\" {}"}, {"sha": "43fe8c11d7c48bd5e500b7dfafaa158fcf952523", "filename": "src/test/ui/bad/bad-extern-link-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,6 +2,6 @@\n #[link(name = \"\")] //~ ERROR: with empty name\n #[link(name = \"foo\")]\n #[link(name = \"foo\", kind = \"bar\")] //~ ERROR: unknown kind\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "fb3cb2083e4b9f8b1c8ab865e03f724c9484e8b5", "filename": "src/test/ui/c-stack-returning-int64.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-stack-returning-int64.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -11,7 +11,7 @@ use std::ffi::CString;\n mod mlibc {\n     use libc::{c_char, c_long, c_longlong};\n \n-    extern {\n+    extern \"C\" {\n         pub fn atol(x: *const c_char) -> c_long;\n         pub fn atoll(x: *const c_char) -> c_longlong;\n     }\n@@ -29,6 +29,8 @@ fn atoll(s: String) -> i64 {\n \n pub fn main() {\n     assert_eq!(atol(\"1024\".to_string()) * 10, atol(\"10240\".to_string()));\n-    assert_eq!((atoll(\"11111111111111111\".to_string()) * 10),\n-             atoll(\"111111111111111110\".to_string()));\n+    assert_eq!(\n+        (atoll(\"11111111111111111\".to_string()) * 10),\n+        atoll(\"111111111111111110\".to_string())\n+    );\n }"}, {"sha": "2c02a0d3081e274849f601b0522576e7f14cc5a6", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,24 +6,24 @@ extern \"stdcall\" {\n     fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling\n }\n \n-extern {\n+extern \"C\" {\n     fn foo(f: isize, x: u8, ...);\n }\n \n extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n     unsafe {\n-        foo();  //~ ERROR this function takes at least 2 arguments but 0 arguments were supplied\n+        foo(); //~ ERROR this function takes at least 2 arguments but 0 arguments were supplied\n         foo(1); //~ ERROR this function takes at least 2 arguments but 1 argument was supplied\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo; //~ ERROR mismatched types\n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar; //~ ERROR mismatched types\n \n         foo(1, 2, 3f32); //~ ERROR can't pass\n         foo(1, 2, true); //~ ERROR can't pass\n-        foo(1, 2, 1i8);  //~ ERROR can't pass\n-        foo(1, 2, 1u8);  //~ ERROR can't pass\n+        foo(1, 2, 1i8); //~ ERROR can't pass\n+        foo(1, 2, 1u8); //~ ERROR can't pass\n         foo(1, 2, 1i16); //~ ERROR can't pass\n         foo(1, 2, 1u16); //~ ERROR can't pass\n     }"}, {"sha": "588c15a1829773dd3b48290f7ab277cae276b2f1", "filename": "src/test/ui/c-variadic/variadic-ffi-no-fixed-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n-extern {\n+extern \"C\" {\n     fn foo(...);\n-    //~^ ERROR C-variadic function must be declared with at least one named argument\n+//~^ ERROR C-variadic function must be declared with at least one named argument\n }\n \n fn main() {}"}, {"sha": "69f4de43186d58f4935cbf75a601bc6959754997", "filename": "src/test/ui/cfg/conditional-compile.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fcfg%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fcfg%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fconditional-compile.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -16,13 +16,13 @@ static b: bool = true;\n \n mod rustrt {\n     #[cfg(bogus)]\n-    extern {\n+    extern \"C\" {\n         // This symbol doesn't exist and would be a link error if this\n         // module was codegened\n         pub fn bogus();\n     }\n \n-    extern {}\n+    extern \"C\" {}\n }\n \n #[cfg(bogus)]\n@@ -31,52 +31,56 @@ type t = isize;\n type t = bool;\n \n #[cfg(bogus)]\n-enum tg { foo, }\n+enum tg {\n+    foo,\n+}\n \n-enum tg { bar, }\n+enum tg {\n+    bar,\n+}\n \n #[cfg(bogus)]\n struct r {\n-  i: isize,\n+    i: isize,\n }\n \n #[cfg(bogus)]\n-fn r(i:isize) -> r {\n-    r {\n-        i: i\n-    }\n+fn r(i: isize) -> r {\n+    r { i: i }\n }\n \n struct r {\n-  i: isize,\n+    i: isize,\n }\n \n-fn r(i:isize) -> r {\n-    r {\n-        i: i\n-    }\n+fn r(i: isize) -> r {\n+    r { i: i }\n }\n \n #[cfg(bogus)]\n mod m {\n     // This needs to parse but would fail in typeck. Since it's not in\n     // the current config it should not be typechecked.\n-    pub fn bogus() { return 0; }\n+    pub fn bogus() {\n+        return 0;\n+    }\n }\n \n mod m {\n     // Submodules have slightly different code paths than the top-level\n     // module, so let's make sure this jazz works here as well\n     #[cfg(bogus)]\n-    pub fn f() { }\n+    pub fn f() {}\n \n-    pub fn f() { }\n+    pub fn f() {}\n }\n \n // Since the bogus configuration isn't defined main will just be\n // parsed, but nothing further will be done with it\n #[cfg(bogus)]\n-pub fn main() { panic!() }\n+pub fn main() {\n+    panic!()\n+}\n \n pub fn main() {\n     // Exercise some of the configured items in ways that wouldn't be possible\n@@ -90,8 +94,10 @@ pub fn main() {\n \n fn test_in_fn_ctxt() {\n     #[cfg(bogus)]\n-    fn f() { panic!() }\n-    fn f() { }\n+    fn f() {\n+        panic!()\n+    }\n+    fn f() {}\n     f();\n \n     #[cfg(bogus)]\n@@ -102,7 +108,7 @@ fn test_in_fn_ctxt() {\n \n mod test_foreign_items {\n     pub mod rustrt {\n-        extern {\n+        extern \"C\" {\n             #[cfg(bogus)]\n             pub fn write() -> String;\n             pub fn write() -> String;\n@@ -117,19 +123,19 @@ mod test_use_statements {\n \n mod test_methods {\n     struct Foo {\n-        bar: usize\n+        bar: usize,\n     }\n \n     impl Fooable for Foo {\n         #[cfg(bogus)]\n-        fn what(&self) { }\n+        fn what(&self) {}\n \n-        fn what(&self) { }\n+        fn what(&self) {}\n \n         #[cfg(bogus)]\n-        fn the(&self) { }\n+        fn the(&self) {}\n \n-        fn the(&self) { }\n+        fn the(&self) {}\n     }\n \n     trait Fooable {"}, {"sha": "007d2ae6506d7864a5b276224753059c73d43b32", "filename": "src/test/ui/check-doc-alias-attr-location.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-doc-alias-attr-location.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,7 +7,7 @@ pub trait Foo {\n }\n \n #[doc(alias = \"foo\")] //~ ERROR\n-extern {}\n+extern \"C\" {}\n \n #[doc(alias = \"bar\")] //~ ERROR\n impl Bar {\n@@ -19,5 +19,7 @@ impl Bar {\n impl Foo for Bar {\n     #[doc(alias = \"assoc\")] //~ ERROR\n     type X = i32;\n-    fn foo() -> Self::X { 0 }\n+    fn foo() -> Self::X {\n+        0\n+    }\n }"}, {"sha": "d91d07827dc05f66e221168415e7a41e41911493", "filename": "src/test/ui/consts/const-eval/extern_fat_pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fextern_fat_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fextern_fat_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fextern_fat_pointer.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type Opaque;\n }\n "}, {"sha": "09c7d5580deca4b2b8890c7e311fae48da8ef660", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,9 +2,9 @@\n #![feature(core_intrinsics)]\n #![feature(const_size_of_val, const_align_of_val)]\n \n-use std::intrinsics::{size_of_val, min_align_of_val};\n+use std::intrinsics::{min_align_of_val, size_of_val};\n \n-extern {\n+extern \"C\" {\n     type Opaque;\n }\n "}, {"sha": "b64123389c2c16f7ea9401afd2e8e41397ef0037", "filename": "src/test/ui/empty/empty-linkname.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,4 @@\n #[link(name = \"\")] //~ ERROR: given with empty name\n-extern {\n-}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "d9cdaf83c698cf6be7b6ac9f995a261d102071ba", "filename": "src/test/ui/error-codes/E0044.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,8 @@\n-extern {\n+extern \"C\" {\n     fn sqrt<T>(f: T) -> T;\n-    //~^ ERROR foreign items may not have type parameters [E0044]\n-    //~| HELP replace the type parameters with concrete types\n-    //~| NOTE can't have type parameters\n+//~^ ERROR foreign items may not have type parameters [E0044]\n+//~| HELP replace the type parameters with concrete types\n+//~| NOTE can't have type parameters\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "d523507899fbcfd71f0fdf360d98fbdb94c57143", "filename": "src/test/ui/error-codes/E0130.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0130.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,6 @@\n-extern {\n+extern \"C\" {\n     fn foo((a, b): (u32, u32));\n-    //~^ ERROR E0130\n+//~^ ERROR E0130\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "ff5478382cc902321ebed7eee8f0b9abdd52f568", "filename": "src/test/ui/error-codes/E0454.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0454.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-#[link(name = \"\")] extern {}\n+#[link(name = \"\")] extern \"C\" {}\n //~^ ERROR E0454\n \n fn main() {"}, {"sha": "6b62bef112fe74aa43801b68973fc02c09c0cb5f", "filename": "src/test/ui/error-codes/E0454.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/E0454.rs:1:1\n    |\n-LL | #[link(name = \"\")] extern {}\n+LL | #[link(name = \"\")] extern \"C\" {}\n    | ^^^^^^^^^^^^^^^^^^ empty name given\n \n error: aborting due to previous error"}, {"sha": "35e7e84d4796d4a56aa4e74328e82e7eee2716c0", "filename": "src/test/ui/error-codes/E0458.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0458.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n-#[link(kind = \"wonderful_unicorn\")] extern {} //~ ERROR E0458\n-                                              //~| ERROR E0459\n+#[link(kind = \"wonderful_unicorn\")] extern \"C\" {} //~ ERROR E0458\n+                                                  //~| ERROR E0459\n \n fn main() {\n }"}, {"sha": "0f2fec029e78ddb22fdb2fbef6bcf35f99e8419f", "filename": "src/test/ui/error-codes/E0458.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,15 +1,15 @@\n error[E0458]: unknown kind: `wonderful_unicorn`\n   --> $DIR/E0458.rs:1:8\n    |\n-LL | #[link(kind = \"wonderful_unicorn\")] extern {}\n+LL | #[link(kind = \"wonderful_unicorn\")] extern \"C\" {}\n    | -------^^^^^^^^^^^^^^^^^^^^^^^^^^--\n    |        |\n    |        unknown kind\n \n error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/E0458.rs:1:1\n    |\n-LL | #[link(kind = \"wonderful_unicorn\")] extern {}\n+LL | #[link(kind = \"wonderful_unicorn\")] extern \"C\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `name` argument\n \n error: aborting due to 2 previous errors"}, {"sha": "c56d8f0a8a84800227f2a59acd2a36457a3a93cd", "filename": "src/test/ui/error-codes/E0459.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0459.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-#[link(kind = \"dylib\")] extern {} //~ ERROR E0459\n+#[link(kind = \"dylib\")] extern \"C\" {} //~ ERROR E0459\n \n fn main() {\n }"}, {"sha": "4e0d51e87538ad04e1208d18b9662a29af053d9f", "filename": "src/test/ui/error-codes/E0459.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/E0459.rs:1:1\n    |\n-LL | #[link(kind = \"dylib\")] extern {}\n+LL | #[link(kind = \"dylib\")] extern \"C\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^ missing `name` argument\n \n error: aborting due to previous error"}, {"sha": "b71ba0ed88b9ff6a80e7c32df59a5dda14ebb001", "filename": "src/test/ui/error-codes/E0617.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     fn printf(c: *const i8, ...);\n }\n "}, {"sha": "0b95045a03eb77be62781a62fb65f6ae2d119998", "filename": "src/test/ui/extern/extern-pub.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-pub.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,8 @@\n // run-pass\n // pretty-expanded FIXME #23616\n \n-extern {\n+extern \"C\" {\n     pub fn free(p: *const u8);\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "4da049b7882128a5b0bee8807b85de87e3787c40", "filename": "src/test/ui/extern/extern-types-distinct-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type A;\n     type B;\n }\n@@ -9,4 +9,4 @@ fn foo(r: &A) -> &B {\n     r //~ ERROR mismatched types\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "87eb3f6224004ecc653545e4ba3ff03f567e68df", "filename": "src/test/ui/extern/extern-types-manual-sync-send.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-manual-sync-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-manual-sync-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-manual-sync-send.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,15 +3,15 @@\n \n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n \n-unsafe impl Sync for A { }\n-unsafe impl Send for A { }\n+unsafe impl Sync for A {}\n+unsafe impl Send for A {}\n \n-fn assert_sync<T: ?Sized + Sync>() { }\n-fn assert_send<T: ?Sized + Send>() { }\n+fn assert_sync<T: ?Sized + Sync>() {}\n+fn assert_send<T: ?Sized + Send>() {}\n \n fn main() {\n     assert_sync::<A>();"}, {"sha": "ba82caced7a4edbe28739e7989158dd22b6c4b4d", "filename": "src/test/ui/extern/extern-types-not-sync-send.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,12 +2,12 @@\n \n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n \n-fn assert_sync<T: ?Sized + Sync>() { }\n-fn assert_send<T: ?Sized + Send>() { }\n+fn assert_sync<T: ?Sized + Sync>() {}\n+fn assert_send<T: ?Sized + Send>() {}\n \n fn main() {\n     assert_sync::<A>();"}, {"sha": "547116fbbabedad76e5a19d00a74a8003538d2bd", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `A` cannot be shared between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:13:19\n    |\n-LL | fn assert_sync<T: ?Sized + Sync>() { }\n+LL | fn assert_sync<T: ?Sized + Sync>() {}\n    |                            ---- required by this bound in `assert_sync`\n ...\n LL |     assert_sync::<A>();\n@@ -12,7 +12,7 @@ LL |     assert_sync::<A>();\n error[E0277]: `A` cannot be sent between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:16:19\n    |\n-LL | fn assert_send<T: ?Sized + Send>() { }\n+LL | fn assert_send<T: ?Sized + Send>() {}\n    |                            ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<A>();"}, {"sha": "de6955bfaaa13645277a122a6ac6671146a3f794", "filename": "src/test/ui/extern/extern-types-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-pointer-cast.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,10 +2,9 @@\n #![allow(dead_code)]\n // Test that pointers to extern types can be cast from/to usize,\n // despite being !Sized.\n-\n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n "}, {"sha": "3b02ea28eaa28d44beac59efcc0935546214d33b", "filename": "src/test/ui/extern/extern-types-size_of_val.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-size_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-size_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-size_of_val.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,16 +1,14 @@\n // run-pass\n #![feature(extern_types)]\n \n-use std::mem::{size_of_val, align_of_val};\n+use std::mem::{align_of_val, size_of_val};\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n \n fn main() {\n-    let x: &A = unsafe {\n-        &*(1usize as *const A)\n-    };\n+    let x: &A = unsafe { &*(1usize as *const A) };\n \n     assert_eq!(size_of_val(x), 0);\n     assert_eq!(align_of_val(x), 1);"}, {"sha": "b85fc4886abe00da1243e8a7dd052389bf1b2361", "filename": "src/test/ui/extern/extern-types-thin-pointer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-thin-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-thin-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-thin-pointer.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,12 +2,11 @@\n #![allow(dead_code)]\n // Test that pointers and references to extern types are thin, ie they have the same size and\n // alignment as a pointer to ().\n-\n #![feature(extern_types)]\n \n use std::mem::{align_of, size_of};\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n "}, {"sha": "656101ed535b32e963688a4568a3ebc43f49ff97", "filename": "src/test/ui/extern/extern-types-trait-impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-trait-impl.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,22 +1,21 @@\n // run-pass\n #![allow(dead_code)]\n // Test that traits can be implemented for extern types.\n-\n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n \n trait Foo {\n-    fn foo(&self) { }\n+    fn foo(&self) {}\n }\n \n impl Foo for A {\n-    fn foo(&self) { }\n+    fn foo(&self) {}\n }\n \n-fn assert_foo<T: ?Sized + Foo>() { }\n+fn assert_foo<T: ?Sized + Foo>() {}\n \n fn use_foo<T: ?Sized + Foo>(x: &dyn Foo) {\n     x.foo();"}, {"sha": "94a222a7e7e011767de973d5c685a97d07c370a8", "filename": "src/test/ui/extern/extern-types-unsized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(extern_types)]\n \n-extern {\n+extern \"C\" {\n     type A;\n }\n \n@@ -16,7 +16,7 @@ struct Bar<T: ?Sized> {\n     tail: T,\n }\n \n-fn assert_sized<T>() { }\n+fn assert_sized<T>() {}\n \n fn main() {\n     assert_sized::<A>();"}, {"sha": "278db4565572020b709f3c87dd75bbac7c9b80ef", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n-LL | fn assert_sized<T>() { }\n+LL | fn assert_sized<T>() {}\n    |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n@@ -10,13 +10,13 @@ LL |     assert_sized::<A>();\n    = help: the trait `Sized` is not implemented for `A`\n help: consider relaxing the implicit `Sized` restriction\n    |\n-LL | fn assert_sized<T: ?Sized>() { }\n+LL | fn assert_sized<T: ?Sized>() {}\n    |                  ^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5\n    |\n-LL | fn assert_sized<T>() { }\n+LL | fn assert_sized<T>() {}\n    |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Foo>();\n@@ -26,13 +26,13 @@ LL |     assert_sized::<Foo>();\n    = note: required because it appears within the type `Foo`\n help: consider relaxing the implicit `Sized` restriction\n    |\n-LL | fn assert_sized<T: ?Sized>() { }\n+LL | fn assert_sized<T: ?Sized>() {}\n    |                  ^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:28:5\n    |\n-LL | fn assert_sized<T>() { }\n+LL | fn assert_sized<T>() {}\n    |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<A>>();\n@@ -42,13 +42,13 @@ LL |     assert_sized::<Bar<A>>();\n    = note: required because it appears within the type `Bar<A>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n-LL | fn assert_sized<T: ?Sized>() { }\n+LL | fn assert_sized<T: ?Sized>() {}\n    |                  ^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:31:5\n    |\n-LL | fn assert_sized<T>() { }\n+LL | fn assert_sized<T>() {}\n    |                 - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<Bar<A>>>();\n@@ -59,7 +59,7 @@ LL |     assert_sized::<Bar<Bar<A>>>();\n    = note: required because it appears within the type `Bar<Bar<A>>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n-LL | fn assert_sized<T: ?Sized>() { }\n+LL | fn assert_sized<T: ?Sized>() {}\n    |                  ^^^^^^^^\n \n error: aborting due to 4 previous errors"}, {"sha": "5f886ff57379a9566328ab20d099e27c4110c683", "filename": "src/test/ui/extern/issue-36122-accessing-externed-dst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    extern {\n+    extern \"C\" {\n         static symbol: [usize]; //~ ERROR: the size for values of type\n     }\n     println!(\"{}\", symbol[0]);"}, {"sha": "b600ad23eee6405182842b61de3956975d8b2034", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-thread-local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-thread-local.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,10 +5,9 @@\n \n extern crate cfg_target_thread_local;\n \n-extern {\n+extern \"C\" {\n     #[cfg_attr(target_thread_local, thread_local)]\n     //~^ `cfg(target_thread_local)` is experimental and subject to change\n-\n     static FOO: u32;\n }\n "}, {"sha": "103f8eed6f3c0d0bffda7e754c376f534af7c06a", "filename": "src/test/ui/feature-gates/feature-gate-extern_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_types.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     type T; //~ ERROR extern types are experimental\n }\n "}, {"sha": "9f3d783ccd69cbbdc2c56b2ae738f806e5f21cf2", "filename": "src/test/ui/feature-gates/feature-gate-ffi_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"lib\"]\n \n-extern {\n+extern \"C\" {\n     #[ffi_const] //~ ERROR the `#[ffi_const]` attribute is an experimental feature\n     pub fn foo();\n }"}, {"sha": "b0dfa01ff4c20e438dbee6c57920819725e44d61", "filename": "src/test/ui/feature-gates/feature-gate-ffi_pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"lib\"]\n \n-extern {\n+extern \"C\" {\n     #[ffi_pure] //~ ERROR the `#[ffi_pure]` attribute is an experimental feature\n     pub fn foo();\n }"}, {"sha": "f354534356c212dd804d38ac3969a6b52ac62346", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"lib\"]\n \n-extern {\n+extern \"C\" {\n     #[ffi_returns_twice] //~ ERROR the `#[ffi_returns_twice]` attribute is an experimental feature\n     pub fn foo();\n }"}, {"sha": "e1c651f46fb4989d9ade586f2aa54193d764733b", "filename": "src/test/ui/feature-gates/feature-gate-link_args.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,13 +5,12 @@\n // sidestep warning (which is correct, but misleading for\n // purposes of this test)\n #![allow(unused_attributes)]\n-\n #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n //~^ ERROR the `link_args` attribute is experimental\n \n #[link_args = \"-l expected_use_case\"]\n //~^ ERROR the `link_args` attribute is experimental\n-extern {}\n+extern \"C\" {}\n \n #[link_args = \"-l unexected_use_on_non_extern_item\"]\n //~^ ERROR: the `link_args` attribute is experimental"}, {"sha": "ae4918f5c9f54e62ba8b8c4583a1078243fb247b", "filename": "src/test/ui/feature-gates/feature-gate-link_args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_args.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n-  --> $DIR/feature-gate-link_args.rs:12:1\n+  --> $DIR/feature-gate-link_args.rs:11:1\n    |\n LL | #[link_args = \"-l expected_use_case\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #[link_args = \"-l expected_use_case\"]\n    = help: add `#![feature(link_args)]` to the crate attributes to enable\n \n error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n-  --> $DIR/feature-gate-link_args.rs:16:1\n+  --> $DIR/feature-gate-link_args.rs:15:1\n    |\n LL | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n    = help: add `#![feature(link_args)]` to the crate attributes to enable\n \n error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead\n-  --> $DIR/feature-gate-link_args.rs:9:1\n+  --> $DIR/feature-gate-link_args.rs:8:1\n    |\n LL | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "d30ee3bcfdb1473db34241ae9317441402df7cb3", "filename": "src/test/ui/feature-gates/feature-gate-link_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n #[link(name = \"foo\", cfg(foo))]\n //~^ ERROR: is unstable\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "7391ea94ebc04934278245fe49242878af28d672", "filename": "src/test/ui/feature-gates/feature-gate-link_llvm_intrinsics.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_llvm_intrinsics.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,7 @@\n-extern {\n+extern \"C\" {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;\n-    //~^ ERROR linking to LLVM intrinsics is experimental\n+//~^ ERROR linking to LLVM intrinsics is experimental\n }\n \n-fn main(){\n-}\n+fn main() {}"}, {"sha": "15b8d442aeb9a79a7017a0e4a63ad5633a7463ce", "filename": "src/test/ui/feature-gates/feature-gate-linkage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     #[linkage = \"extern_weak\"] static foo: isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n }"}, {"sha": "5cc04ad5cdfdc4a3e146e80c68916ba6e3eace37", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -26,7 +26,7 @@ enum B\u00e4r { //~ ERROR non-ascii idents\n     }\n }\n \n-extern {\n+extern \"C\" {\n     fn q\u00fcx();  //~ ERROR non-ascii idents\n }\n "}, {"sha": "abffa4a10010d5bc9b1278c754c3fe322b2e3177", "filename": "src/test/ui/feature-gates/feature-gate-simd-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-simd-ffi.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@\n #[derive(Copy, Clone)]\n struct LocalSimd(u8, u8);\n \n-extern {\n+extern \"C\" {\n     fn baz() -> LocalSimd; //~ ERROR use of SIMD type\n     fn qux(x: LocalSimd); //~ ERROR use of SIMD type\n }"}, {"sha": "05c52f9dbead2e86370dd7457e06247be4c4dcd3", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n-#[link(name=\"foo\", kind=\"static-nobundle\")]\n+#[link(name = \"foo\", kind = \"static-nobundle\")]\n //~^ ERROR: kind=\"static-nobundle\" is unstable\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "3a3c86c34295dde938a665da62ae3bc834e0edb1", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: kind=\"static-nobundle\" is unstable\n   --> $DIR/feature-gate-static-nobundle.rs:1:1\n    |\n-LL | #[link(name=\"foo\", kind=\"static-nobundle\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[link(name = \"foo\", kind = \"static-nobundle\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #37403 <https://github.com/rust-lang/rust/issues/37403> for more information\n    = help: add `#![feature(static_nobundle)]` to the crate attributes to enable"}, {"sha": "cd348ded4d7ce29ee3df89bfa69818bf46f988e1", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,12 +3,12 @@\n \n #![crate_type = \"lib\"]\n \n-extern {\n-// CHECK: Function Attrs: nounwind\n-// CHECK-NEXT: declare void @extern_fn\n+extern \"C\" {\n+    // CHECK: Function Attrs: nounwind\n+    // CHECK-NEXT: declare void @extern_fn\n     fn extern_fn();\n-// CHECK-NOT: Function Attrs: nounwind\n-// CHECK: declare void @unwinding_extern_fn\n+    // CHECK-NOT: Function Attrs: nounwind\n+    // CHECK: declare void @unwinding_extern_fn\n     #[unwind(allowed)] //~ ERROR the `#[unwind]` attribute is an experimental feature\n     fn unwinding_extern_fn();\n }"}, {"sha": "21f40524f63dfd04dccc5799721b6a65f06ed14f", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -536,7 +536,7 @@ mod link_name {\n     //~^ WARN attribute should be applied to a foreign function or static [unused_attributes]\n     //~| WARN this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n     //~| HELP try `#[link(name = \"1900\")]` instead\n-    extern { }\n+    extern \"C\" { }\n     //~^ NOTE not a foreign function or static\n \n     mod inner { #![link_name=\"1900\"] }"}, {"sha": "c908d2589cf49b2d4dfe0f38c05e3a7621b000b0", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -403,8 +403,8 @@ warning: attribute should be applied to a foreign function or static\n LL |     #[link_name = \"1900\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     extern { }\n-   |     ---------- not a foreign function or static\n+LL |     extern \"C\" { }\n+   |     -------------- not a foreign function or static\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n help: try `#[link(name = \"1900\")]` instead"}, {"sha": "82fe8a9c91dd1f79ed8b5adea216497164c7de58", "filename": "src/test/ui/ffi_const2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fffi_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fffi_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_const2.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n #![feature(ffi_const, ffi_pure)]\n \n-extern {\n+extern \"C\" {\n     #[ffi_pure] //~ ERROR `#[ffi_const]` function cannot be `#[ffi_pure]`\n     #[ffi_const]\n     pub fn baz();"}, {"sha": "abbe462021ed74c14b8a6b0912123e1afcb4473e", "filename": "src/test/ui/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n mod test {\n-    extern {\n+    extern \"C\" {\n         pub fn free();\n     }\n }"}, {"sha": "f6d820594f966a811af5a2e04c4f3026c9de5cfa", "filename": "src/test/ui/foreign/foreign-fn-linkname.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fforeign-fn-linkname.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -10,7 +10,7 @@ use std::ffi::CString;\n mod mlibc {\n     use libc::{c_char, size_t};\n \n-    extern {\n+    extern \"C\" {\n         #[link_name = \"strlen\"]\n         pub fn my_strlen(str: *const c_char) -> size_t;\n     }\n@@ -19,9 +19,7 @@ mod mlibc {\n fn strlen(str: String) -> usize {\n     // C string is terminated with a zero\n     let s = CString::new(str).unwrap();\n-    unsafe {\n-        mlibc::my_strlen(s.as_ptr()) as usize\n-    }\n+    unsafe { mlibc::my_strlen(s.as_ptr()) as usize }\n }\n \n pub fn main() {"}, {"sha": "2d01d32042563a13910753f956435544bf61337b", "filename": "src/test/ui/foreign/foreign-int-types.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fforeign-int-types.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,11 +3,10 @@\n #![allow(dead_code)]\n \n mod xx {\n-    extern {\n+    extern \"C\" {\n         pub fn strlen(str: *const u8) -> usize;\n         pub fn foo(x: isize, y: usize);\n     }\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "7d79c30f469063422fb4fda7a4c70013307190df", "filename": "src/test/ui/foreign/foreign-mod-unused-const.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fforeign-mod-unused-const.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,10 +3,9 @@\n // pretty-expanded FIXME #23616\n \n mod foo {\n-    extern {\n+    extern \"C\" {\n         pub static errno: u32;\n     }\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "df431f2999c8ec804bc26217a3ddad3ba5ca62c8", "filename": "src/test/ui/foreign/foreign2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fforeign%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign%2Fforeign2.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,29 +2,28 @@\n #![allow(dead_code)]\n // ignore-wasm32-bare no libc to test ffi with\n // pretty-expanded FIXME #23616\n-\n #![feature(rustc_private)]\n \n extern crate libc;\n \n mod bar {\n-    extern {}\n+    extern \"C\" {}\n }\n \n mod zed {\n-    extern {}\n+    extern \"C\" {}\n }\n \n mod mlibc {\n     use libc::{c_int, c_void, size_t, ssize_t};\n \n-    extern {\n+    extern \"C\" {\n         pub fn write(fd: c_int, buf: *const c_void, count: size_t) -> ssize_t;\n     }\n }\n \n mod baz {\n-    extern {}\n+    extern \"C\" {}\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "ac3a4be3346e31110e6f61356c6d6714a76db88c", "filename": "src/test/ui/functions-closures/fn-abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-abi.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,12 +7,12 @@\n \n extern crate fn_abi;\n \n-extern {\n+extern \"C\" {\n     fn foo();\n }\n \n pub fn main() {\n     // Will only type check if the type of _p and the decl of foo use the\n     // same ABI\n-    let _p: unsafe extern fn() = foo;\n+    let _p: unsafe extern \"C\" fn() = foo;\n }"}, {"sha": "c42744808c3946c48acfc3f079d6a5a89e81ab5e", "filename": "src/test/ui/generics/generic-extern-lifetime.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,15 +1,15 @@\n // Test to make sure the names of the lifetimes are correctly resolved\n // in extern blocks.\n \n-extern {\n-   pub fn life<'a>(x:&'a i32);\n-   pub fn life2<'b>(x:&'a i32, y:&'b i32); //~ ERROR use of undeclared lifetime name `'a`\n-   pub fn life3<'a>(x:&'a i32, y:&i32) -> &'a i32;\n-   pub fn life4<'b>(x: for<'c> fn(&'a i32)); //~ ERROR use of undeclared lifetime name `'a`\n-   pub fn life5<'b>(x: for<'c> fn(&'b i32));\n-   pub fn life6<'b>(x: for<'c> fn(&'c i32));\n-   pub fn life7<'b>() -> for<'c> fn(&'a i32); //~ ERROR use of undeclared lifetime name `'a`\n-   pub fn life8<'b>() -> for<'c> fn(&'b i32);\n-   pub fn life9<'b>() -> for<'c> fn(&'c i32);\n+extern \"C\" {\n+    pub fn life<'a>(x: &'a i32);\n+    pub fn life2<'b>(x: &'a i32, y: &'b i32); //~ ERROR use of undeclared lifetime name `'a`\n+    pub fn life3<'a>(x: &'a i32, y: &i32) -> &'a i32;\n+    pub fn life4<'b>(x: for<'c> fn(&'a i32)); //~ ERROR use of undeclared lifetime name `'a`\n+    pub fn life5<'b>(x: for<'c> fn(&'b i32));\n+    pub fn life6<'b>(x: for<'c> fn(&'c i32));\n+    pub fn life7<'b>() -> for<'c> fn(&'a i32); //~ ERROR use of undeclared lifetime name `'a`\n+    pub fn life8<'b>() -> for<'c> fn(&'b i32);\n+    pub fn life9<'b>() -> for<'c> fn(&'c i32);\n }\n fn main() {}"}, {"sha": "3c9ed7a9dec081894eb70e2abdcec7e14629aa40", "filename": "src/test/ui/generics/generic-extern-lifetime.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern-lifetime.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,32 +1,32 @@\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/generic-extern-lifetime.rs:6:24\n+  --> $DIR/generic-extern-lifetime.rs:6:26\n    |\n-LL |    pub fn life2<'b>(x:&'a i32, y:&'b i32);\n-   |                        ^^ undeclared lifetime\n+LL |     pub fn life2<'b>(x: &'a i32, y: &'b i32);\n+   |                          ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/generic-extern-lifetime.rs:8:36\n+  --> $DIR/generic-extern-lifetime.rs:8:37\n    |\n-LL |    pub fn life4<'b>(x: for<'c> fn(&'a i32));\n-   |                                    ^^ undeclared lifetime\n+LL |     pub fn life4<'b>(x: for<'c> fn(&'a i32));\n+   |                                     ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n-LL |    pub fn life4<'b>(x: for<'c, 'a> fn(&'a i32));\n-   |                              ^^^^\n+LL |     pub fn life4<'b>(x: for<'c, 'a> fn(&'a i32));\n+   |                               ^^^^\n \n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/generic-extern-lifetime.rs:11:38\n+  --> $DIR/generic-extern-lifetime.rs:11:39\n    |\n-LL |    pub fn life7<'b>() -> for<'c> fn(&'a i32);\n-   |                                      ^^ undeclared lifetime\n+LL |     pub fn life7<'b>() -> for<'c> fn(&'a i32);\n+   |                                       ^^ undeclared lifetime\n    |\n    = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider making the type lifetime-generic with a new `'a` lifetime\n    |\n-LL |    pub fn life7<'b>() -> for<'c, 'a> fn(&'a i32);\n-   |                                ^^^^\n+LL |     pub fn life7<'b>() -> for<'c, 'a> fn(&'a i32);\n+   |                                 ^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3690d6fd07d2916b2a31de96441ca810a7a5ae24", "filename": "src/test/ui/generics/generic-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-extern.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     fn foo<T>(); //~ ERROR foreign items may not have type parameters\n }\n "}, {"sha": "904b77117dafcff73d4195d39c5c384904e18c53", "filename": "src/test/ui/imports/glob-resolve1.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,11 +5,15 @@ use bar::*;\n mod bar {\n     use self::fpriv as import;\n     fn fpriv() {}\n-    extern {\n+    extern \"C\" {\n         fn epriv();\n     }\n-    enum A { A1 }\n-    pub enum B { B1 }\n+    enum A {\n+        A1,\n+    }\n+    pub enum B {\n+        B1,\n+    }\n \n     struct C;\n "}, {"sha": "7629cede7a45fc14e1c651ae1e06f061cdaec8ec", "filename": "src/test/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find function `fpriv` in this scope\n-  --> $DIR/glob-resolve1.rs:22:5\n+  --> $DIR/glob-resolve1.rs:26:5\n    |\n LL |     fpriv();\n    |     ^^^^^ not found in this scope\n@@ -10,7 +10,7 @@ LL | use bar::fpriv;\n    |\n \n error[E0425]: cannot find function `epriv` in this scope\n-  --> $DIR/glob-resolve1.rs:23:5\n+  --> $DIR/glob-resolve1.rs:27:5\n    |\n LL |     epriv();\n    |     ^^^^^ not found in this scope\n@@ -21,23 +21,25 @@ LL | use bar::epriv;\n    |\n \n error[E0423]: expected value, found enum `B`\n-  --> $DIR/glob-resolve1.rs:24:5\n+  --> $DIR/glob-resolve1.rs:28:5\n    |\n LL |     B;\n    |     ^\n    |\n note: the enum is defined here\n-  --> $DIR/glob-resolve1.rs:12:5\n+  --> $DIR/glob-resolve1.rs:14:5\n    |\n-LL |     pub enum B { B1 }\n-   |     ^^^^^^^^^^^^^^^^^\n+LL | /     pub enum B {\n+LL | |         B1,\n+LL | |     }\n+   | |_____^\n help: you might have meant to use the following enum variant\n    |\n LL |     B::B1;\n    |     ^^^^^\n \n error[E0425]: cannot find value `C` in this scope\n-  --> $DIR/glob-resolve1.rs:25:5\n+  --> $DIR/glob-resolve1.rs:29:5\n    |\n LL |     C;\n    |     ^ not found in this scope\n@@ -48,7 +50,7 @@ LL | use bar::C;\n    |\n \n error[E0425]: cannot find function `import` in this scope\n-  --> $DIR/glob-resolve1.rs:26:5\n+  --> $DIR/glob-resolve1.rs:30:5\n    |\n LL |     import();\n    |     ^^^^^^ not found in this scope\n@@ -59,9 +61,9 @@ LL | use other::import;\n    |\n \n error[E0412]: cannot find type `A` in this scope\n-  --> $DIR/glob-resolve1.rs:28:11\n+  --> $DIR/glob-resolve1.rs:32:11\n    |\n-LL |     pub enum B { B1 }\n+LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<A>();\n@@ -77,9 +79,9 @@ LL | use bar::A;\n    |\n \n error[E0412]: cannot find type `C` in this scope\n-  --> $DIR/glob-resolve1.rs:29:11\n+  --> $DIR/glob-resolve1.rs:33:11\n    |\n-LL |     pub enum B { B1 }\n+LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<C>();\n@@ -95,9 +97,9 @@ LL | use bar::C;\n    |\n \n error[E0412]: cannot find type `D` in this scope\n-  --> $DIR/glob-resolve1.rs:30:11\n+  --> $DIR/glob-resolve1.rs:34:11\n    |\n-LL |     pub enum B { B1 }\n+LL |     pub enum B {\n    |     ---------- similarly named enum `B` defined here\n ...\n LL |     foo::<D>();"}, {"sha": "6ff26b47ea64f64fbccce582187c948fba71ca0a", "filename": "src/test/ui/issues/auxiliary/issue-15562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-15562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-15562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-15562.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n \n-extern {\n+extern \"C\" {\n     pub fn transmute();\n }"}, {"sha": "9f9abd575bbfca7653a076a87ee1186cacd6a2f2", "filename": "src/test/ui/issues/auxiliary/issue-16725.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-16725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-16725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-16725.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,3 +1,3 @@\n-extern {\n+extern \"C\" {\n     fn bar();\n }"}, {"sha": "e957be9c1c1b6fd3b9e715d3600dc070aac44cc9", "filename": "src/test/ui/issues/auxiliary/issue-25185-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-25185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-25185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-25185-1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,6 +3,6 @@\n #![crate_type = \"rlib\"]\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     pub fn rust_dbg_extern_identity_u32(u: u32) -> u32;\n }"}, {"sha": "15a383175b975a4f7e0f626da849d3d5b3519d89", "filename": "src/test/ui/issues/issue-10877.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-10877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-10877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10877.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,12 +1,14 @@\n-struct Foo { x: isize }\n-extern {\n+struct Foo {\n+    x: isize,\n+}\n+extern \"C\" {\n     fn foo(1: ());\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n     fn bar((): isize);\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n     fn baz(Foo { x }: isize);\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n-    fn qux((x,y): ());\n+    fn qux((x, y): ());\n     //~^ ERROR: patterns aren't allowed in foreign function declarations\n     fn this_is_actually_ok(a: usize);\n     fn and_so_is_this(_: usize);"}, {"sha": "bd3797cba558588afad621369a798d4502a82416", "filename": "src/test/ui/issues/issue-10877.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-10877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-10877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10877.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,26 +1,26 @@\n error[E0130]: patterns aren't allowed in foreign function declarations\n-  --> $DIR/issue-10877.rs:3:12\n+  --> $DIR/issue-10877.rs:5:12\n    |\n LL |     fn foo(1: ());\n    |            ^ pattern not allowed in foreign function\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n-  --> $DIR/issue-10877.rs:5:12\n+  --> $DIR/issue-10877.rs:7:12\n    |\n LL |     fn bar((): isize);\n    |            ^^ pattern not allowed in foreign function\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n-  --> $DIR/issue-10877.rs:7:12\n+  --> $DIR/issue-10877.rs:9:12\n    |\n LL |     fn baz(Foo { x }: isize);\n    |            ^^^^^^^^^ pattern not allowed in foreign function\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n-  --> $DIR/issue-10877.rs:9:12\n+  --> $DIR/issue-10877.rs:11:12\n    |\n-LL |     fn qux((x,y): ());\n-   |            ^^^^^ pattern not allowed in foreign function\n+LL |     fn qux((x, y): ());\n+   |            ^^^^^^ pattern not allowed in foreign function\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c2c047c79615ec99b2749f165ed9b8d143768e3a", "filename": "src/test/ui/issues/issue-1251.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1251.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,15 +3,14 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test ffi with\n-\n #![feature(rustc_private)]\n \n mod rustrt {\n     extern crate libc;\n \n-    extern {\n+    extern \"C\" {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "a1fde14600a109a4c66c2ce8cf78ae0eb74d988c", "filename": "src/test/ui/issues/issue-14227.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     pub static symbol: u32;\n }\n static CRASH: u32 = symbol;"}, {"sha": "34ac53be5beccac7387ead91dd2d8145c37c475f", "filename": "src/test/ui/issues/issue-15487.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15487.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,12 +3,11 @@\n // ignore-windows\n // ignore-wasm32-bare no libs to link\n // ignore-sgx no libs to link\n-\n #![feature(link_args)]\n \n-#[link_args=\"-lc  -lm\"]\n-#[link_args=\" -lc\"]\n-#[link_args=\"-lc \"]\n-extern {}\n+#[link_args = \"-lc  -lm\"]\n+#[link_args = \" -lc\"]\n+#[link_args = \"-lc \"]\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "51b60725c5a0c80f4ca5e8ab08a12a34b0d18db6", "filename": "src/test/ui/issues/issue-16149.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-16149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-16149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16149.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,11 +1,11 @@\n-extern {\n+extern \"C\" {\n     static externalValue: isize;\n }\n \n fn main() {\n     let boolValue = match 42 {\n         externalValue => true,\n         //~^ ERROR match bindings cannot shadow statics\n-        _ => false\n+        _ => false,\n     };\n }"}, {"sha": "436e2a6cee35509a17847eddfd480d50488bbeac", "filename": "src/test/ui/issues/issue-16250.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-16250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-16250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16250.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,9 +2,8 @@\n \n pub struct Foo;\n \n-extern {\n+extern \"C\" {\n     pub fn foo(x: (Foo)); //~ ERROR `extern` block uses type `Foo`\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "7d6eefa5b1e80471c8cd385ad9e09b15ad1dfdc6", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n mod Y {\n     pub type X = usize;\n-    extern {\n+    extern \"C\" {\n         pub static x: *const usize;\n     }\n     pub fn foo(value: *const X) -> *const X {"}, {"sha": "caac0c504141ea7e0dbd2245a839a208fda18617", "filename": "src/test/ui/issues/issue-1866.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,7 +9,7 @@ mod a {\n     pub type rust_task = usize;\n     pub mod rustrt {\n         use super::rust_task;\n-        extern {\n+        extern \"C\" {\n             pub fn rust_task_is_unwinding(rt: *const rust_task) -> bool;\n         }\n     }\n@@ -19,11 +19,11 @@ mod b {\n     pub type rust_task = bool;\n     pub mod rustrt {\n         use super::rust_task;\n-        extern {\n+        extern \"C\" {\n             pub fn rust_task_is_unwinding(rt: *const rust_task) -> bool;\n-            //~^ WARN `rust_task_is_unwinding` redeclared with a different signature\n+        //~^ WARN `rust_task_is_unwinding` redeclared with a different signature\n         }\n     }\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "e29d48285d829641fd4e4eab727acd86b9713299", "filename": "src/test/ui/issues/issue-18804/auxiliary/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-18804%2Fauxiliary%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-18804%2Fauxiliary%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18804%2Fauxiliary%2Flib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,10 +1,10 @@\n #![crate_type = \"rlib\"]\n #![feature(linkage)]\n \n-pub fn foo<T>() -> *const() {\n-    extern {\n+pub fn foo<T>() -> *const () {\n+    extern \"C\" {\n         #[linkage = \"extern_weak\"]\n-        static FOO: *const();\n+        static FOO: *const ();\n     }\n     unsafe { FOO }\n }"}, {"sha": "591f3659e98f3bc010433faff600f3327ab6ea11", "filename": "src/test/ui/issues/issue-20313-rpass.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-20313-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-20313-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20313-rpass.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,13 +1,11 @@\n // run-pass\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n-\n #![feature(link_llvm_intrinsics)]\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32;\n }\n \n-fn main(){\n-}\n+fn main() {}"}, {"sha": "a72af650c7071e62f1191be4ed1a35c2637129ed", "filename": "src/test/ui/issues/issue-20313.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-20313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-20313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20313.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,6 @@\n-extern {\n+extern \"C\" {\n     #[link_name = \"llvm.sqrt.f32\"]\n     fn sqrt(x: f32) -> f32; //~ ERROR linking to LLVM intrinsics is experimental\n }\n \n-fn main(){\n-}\n+fn main() {}"}, {"sha": "1994c3515ab3b06919f76b3a78bec1969d0f58d3", "filename": "src/test/ui/issues/issue-2214.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,13 +5,11 @@\n \n extern crate libc;\n \n-use std::mem;\n use libc::{c_double, c_int};\n+use std::mem;\n \n fn to_c_int(v: &mut isize) -> &mut c_int {\n-    unsafe {\n-        mem::transmute_copy(&v)\n-    }\n+    unsafe { mem::transmute_copy(&v) }\n }\n \n fn lgamma(n: c_double, value: &mut isize) -> c_double {\n@@ -23,21 +21,21 @@ fn lgamma(n: c_double, value: &mut isize) -> c_double {\n mod m {\n     use libc::{c_double, c_int};\n \n-    extern {\n+    extern \"C\" {\n         #[cfg(all(unix, not(target_os = \"vxworks\")))]\n         #[link_name=\"lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(windows)]\n-        #[link_name=\"lgamma\"]\n+        #[link_name = \"lgamma\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(target_os = \"vxworks\")]\n-        #[link_name=\"lgamma\"]\n+        #[link_name = \"lgamma\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n     }\n }\n \n pub fn main() {\n-  let mut y: isize = 5;\n-  let x: &mut isize = &mut y;\n-  assert_eq!(lgamma(1.0 as c_double, x), 0.0 as c_double);\n+    let mut y: isize = 5;\n+    let x: &mut isize = &mut y;\n+    assert_eq!(lgamma(1.0 as c_double, x), 0.0 as c_double);\n }"}, {"sha": "f74726e8166dcca1de487faac259e9a55938b32d", "filename": "src/test/ui/issues/issue-28324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     static error_message_count: u32;\n }\n "}, {"sha": "6db1f9a5bddf98c2ef15ea79d55d097fb2bf3791", "filename": "src/test/ui/issues/issue-28472.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-28472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-28472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28472.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n // Check that the visibility modifier is included in the span of foreign items.\n \n-extern {\n+extern \"C\" {\n   fn foo();\n \n   pub //~ ERROR the name `foo` is defined multiple times"}, {"sha": "347a840296dddaca6e25b9b1c77dc8109b0c6a4a", "filename": "src/test/ui/issues/issue-28676.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-28676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-28676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28676.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,27 +5,32 @@\n // ignore-wasm32-bare no libc to test ffi with\n \n #[derive(Copy, Clone)]\n-pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n+pub struct Quad {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+    d: u64,\n+}\n \n mod rustrt {\n     use super::Quad;\n \n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn get_c_many_params(_: *const (), _: *const (),\n-                                 _: *const (), _: *const (), f: Quad) -> u64;\n+    extern \"C\" {\n+        pub fn get_c_many_params(\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            _: *const (),\n+            f: Quad,\n+        ) -> u64;\n     }\n }\n \n fn test() {\n     unsafe {\n         let null = std::ptr::null();\n-        let q = Quad {\n-            a: 1,\n-            b: 2,\n-            c: 3,\n-            d: 4\n-        };\n+        let q = Quad { a: 1, b: 2, c: 3, d: 4 };\n         assert_eq!(rustrt::get_c_many_params(null, null, null, null, q), q.c);\n     }\n }"}, {"sha": "f27bb1c2eb5b664ba402b8edaad42a52abb0f4a9", "filename": "src/test/ui/issues/issue-32201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-32201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-32201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32201.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     fn foo(a: i32, ...);\n }\n "}, {"sha": "4a9f94306d5b821c13243fa597d46c1b0da0c36f", "filename": "src/test/ui/issues/issue-3656.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3656.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,14 +1,12 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(improper_ctypes)]\n-\n // Issue #3656\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test with\n-\n #![feature(rustc_private)]\n \n extern crate libc;\n@@ -21,10 +19,9 @@ pub struct KEYGEN {\n     salt_size: u32,\n }\n \n-extern {\n+extern \"C\" {\n     // Bogus signature, just need to test if it compiles.\n     pub fn malloc(data: KEYGEN);\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "73d17928251178c84162c7cd48ef1b511c9cd65c", "filename": "src/test/ui/issues/issue-43925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-#[link(name=\"foo\", cfg(\"rlib\"))] //~ ERROR invalid argument for `cfg(..)`\n-extern {}\n+#[link(name = \"foo\", cfg(\"rlib\"))] //~ ERROR invalid argument for `cfg(..)`\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "7bf64dc693c5e27d9494957330a4499b1836ef69", "filename": "src/test/ui/issues/issue-43925.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: invalid argument for `cfg(..)`\n-  --> $DIR/issue-43925.rs:1:24\n+  --> $DIR/issue-43925.rs:1:26\n    |\n-LL | #[link(name=\"foo\", cfg(\"rlib\"))]\n-   |                        ^^^^^^\n+LL | #[link(name = \"foo\", cfg(\"rlib\"))]\n+   |                          ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0171c12b1cc4e982c5737258b985cc6315f75e10", "filename": "src/test/ui/issues/issue-43926.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43926.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-#[link(name=\"foo\", cfg())] //~ ERROR `cfg()` must have an argument\n-extern {}\n+#[link(name = \"foo\", cfg())] //~ ERROR `cfg()` must have an argument\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "d83e9bd7ed4646c8f395f6e7ea1c4a59a9ed2b9f", "filename": "src/test/ui/issues/issue-43926.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43926.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-43926.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43926.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: `cfg()` must have an argument\n-  --> $DIR/issue-43926.rs:1:20\n+  --> $DIR/issue-43926.rs:1:22\n    |\n-LL | #[link(name=\"foo\", cfg())]\n-   |                    ^^^^^\n+LL | #[link(name = \"foo\", cfg())]\n+   |                      ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3544160f094e56be68554ebdb09e7c6e66017dbb", "filename": "src/test/ui/issues/issue-5791.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,12 +3,12 @@\n #![warn(clashing_extern_declarations)]\n // pretty-expanded FIXME #23616\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"malloc\"]\n     fn malloc1(len: i32) -> *const u8;\n     #[link_name = \"malloc\"]\n     //~^ WARN `malloc2` redeclares `malloc` with a different signature\n     fn malloc2(len: i32, foo: i32) -> *const u8;\n }\n \n-pub fn main () {}\n+pub fn main() {}"}, {"sha": "8c6192a59dba28d79dfe644f07ce9c8ae27ab7a6", "filename": "src/test/ui/issues/issue-6470.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-6470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fissues%2Fissue-6470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6470.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,6 @@\n // build-pass\n #![allow(dead_code)]\n #![allow(improper_ctypes)]\n-\n // pretty-expanded FIXME #23616\n #![allow(non_snake_case)]\n \n@@ -10,9 +9,9 @@ pub mod Bar {\n         v: isize,\n     }\n \n-    extern {\n+    extern \"C\" {\n         pub fn foo(v: *const Foo) -> Foo;\n     }\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "254091ff2508cbe2c58baa4fd72686d32fdcaed5", "filename": "src/test/ui/link-cfg-works.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flink-cfg-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flink-cfg-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flink-cfg-works.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,10 +4,10 @@\n \n #![feature(link_cfg)]\n \n-extern crate link_cfg_works_transitive_rlib;\n extern crate link_cfg_works_transitive_dylib;\n+extern crate link_cfg_works_transitive_rlib;\n \n #[link(name = \"foo\", cfg(foo))]\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "60b55b3e27bc8322fb4163bb59f40188c4d8105b", "filename": "src/test/ui/linkage-attr/auxiliary/def_colliding_external.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_colliding_external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_colliding_external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_colliding_external.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n #![feature(linkage)]\n #![crate_type = \"lib\"]\n \n-extern {\n-    #[linkage=\"external\"]\n+extern \"C\" {\n+    #[linkage = \"external\"]\n     pub static collision: *const i32;\n }"}, {"sha": "7418691d01409997789f6a3ca43692aeffd2870b", "filename": "src/test/ui/linkage-attr/invalid-link-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Finvalid-link-args.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,6 +9,6 @@\n #![feature(link_args)]\n \n #[link_args = \"aFdEfSeVEEE\"]\n-extern {}\n+extern \"C\" {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "b712f3225ed16186dd24af8e99d36f85232940c3", "filename": "src/test/ui/linkage-attr/linkage-detect-local-generated-name-collision.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,8 +3,8 @@\n #![feature(linkage)]\n \n mod dep1 {\n-    extern {\n-        #[linkage=\"external\"]\n+    extern \"C\" {\n+        #[linkage = \"external\"]\n         #[no_mangle]\n         pub static collision: *const i32; //~ ERROR symbol `collision` is already defined\n     }\n@@ -20,6 +20,6 @@ mod dep2 {\n \n fn main() {\n     unsafe {\n-       println!(\"{:p}\", &dep1::collision);\n+        println!(\"{:p}\", &dep1::collision);\n     }\n }"}, {"sha": "a7be1985286a1373dcefaf3994e0d991b62403cf", "filename": "src/test/ui/linkage-attr/linkage2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,9 +7,10 @@\n \n #![feature(linkage)]\n \n-extern {\n-    #[linkage = \"extern_weak\"] static foo: i32;\n-    //~^ ERROR: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+extern \"C\" {\n+    #[linkage = \"extern_weak\"]\n+    static foo: i32;\n+//~^ ERROR: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n }\n \n fn main() {"}, {"sha": "6ffe07170ede7bca14815e0aaa80846b31a0bd5f", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-  --> $DIR/linkage2.rs:11:32\n+  --> $DIR/linkage2.rs:12:5\n    |\n-LL |     #[linkage = \"extern_weak\"] static foo: i32;\n-   |                                ^^^^^^^^^^^^^^^^\n+LL |     static foo: i32;\n+   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "112eb1d3bd9d28a1c372aaae5245d7d1fca8b397", "filename": "src/test/ui/linkage-attr/linkage3.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,9 +6,10 @@\n \n #![feature(linkage)]\n \n-extern {\n-    #[linkage = \"foo\"] static foo: *const i32;\n-    //~^ ERROR: invalid linkage specified\n+extern \"C\" {\n+    #[linkage = \"foo\"]\n+    static foo: *const i32;\n+//~^ ERROR: invalid linkage specified\n }\n \n fn main() {"}, {"sha": "0cbac28349d5aea6dd532bbee61cc29ae2851ab2", "filename": "src/test/ui/linkage-attr/linkage3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: invalid linkage specified\n-  --> $DIR/linkage3.rs:10:24\n+  --> $DIR/linkage3.rs:11:5\n    |\n-LL |     #[linkage = \"foo\"] static foo: *const i32;\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     static foo: *const i32;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "deab7a251cbd4f78ff313816e6037512840dd778", "filename": "src/test/ui/linkage1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,7 +9,7 @@\n \n extern crate linkage1 as other;\n \n-extern {\n+extern \"C\" {\n     #[linkage = \"extern_weak\"]\n     static foo: *const isize;\n     #[linkage = \"extern_weak\"]"}, {"sha": "d3582961b3e39b15e9380a5f34e13009f7de681b", "filename": "src/test/ui/lint/dead-code/leading-underscore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fleading-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fleading-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fleading-underscore.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -8,7 +8,7 @@ static _X: usize = 0;\n fn _foo() {}\n \n struct _Y {\n-    _z: usize\n+    _z: usize,\n }\n \n enum _Z {}\n@@ -23,7 +23,7 @@ mod _bar {\n     fn _qux() {}\n }\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"abort\"]\n     fn _abort() -> !;\n }"}, {"sha": "7f39f7965f2868eab5fc208515df114d9b9f9b10", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,7 +7,7 @@\n \n \n pub use extern_foo as x;\n-extern {\n+extern \"C\" {\n     pub fn extern_foo();\n }\n \n@@ -47,7 +47,7 @@ mod blah {\n     // `malloc` below, which are also used.\n     enum c_void {}\n \n-    extern {\n+    extern \"C\" {\n         fn free(p: *const c_void);\n         fn malloc(size: usize) -> *const c_void;\n     }\n@@ -58,7 +58,7 @@ mod blah {\n }\n \n enum c_void {} //~ ERROR: enum is never used\n-extern {\n+extern \"C\" {\n     fn free(p: *const c_void); //~ ERROR: function is never used\n }\n "}, {"sha": "6321b3c76e4d18a8bbedcf9e087aa0e17f24807e", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -26,7 +26,7 @@ impl Trait for () {\n     type U = impl Trait; //~ ERROR could not find defining uses\n }\n \n-extern {\n+extern \"C\" {\n     #[inline] //~ ERROR attribute should be applied to function or closure\n     static X: u32;\n "}, {"sha": "d7f947aa0f3bc2d433d7d3a78cf8b223379f7e54", "filename": "src/test/ui/lint/lint-ctypes-enum.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,36 +5,57 @@\n \n use std::num;\n \n-enum Z { }\n-enum U { A }\n-enum B { C, D }\n-enum T { E, F, G }\n+enum Z {}\n+enum U {\n+    A,\n+}\n+enum B {\n+    C,\n+    D,\n+}\n+enum T {\n+    E,\n+    F,\n+    G,\n+}\n \n #[repr(C)]\n-enum ReprC { A, B, C }\n+enum ReprC {\n+    A,\n+    B,\n+    C,\n+}\n \n #[repr(u8)]\n-enum U8 { A, B, C }\n+enum U8 {\n+    A,\n+    B,\n+    C,\n+}\n \n #[repr(isize)]\n-enum Isize { A, B, C }\n+enum Isize {\n+    A,\n+    B,\n+    C,\n+}\n \n #[repr(transparent)]\n struct TransparentStruct<T>(T, std::marker::PhantomData<Z>);\n \n #[repr(transparent)]\n enum TransparentEnum<T> {\n-   Variant(T, std::marker::PhantomData<Z>),\n+    Variant(T, std::marker::PhantomData<Z>),\n }\n \n #[repr(transparent)]\n union TransparentUnion<T: Copy> {\n-   field: T,\n+    field: T,\n }\n \n struct Rust<T>(T);\n \n-extern {\n+extern \"C\" {\n    fn zf(x: Z);\n    fn uf(x: U); //~ ERROR `extern` block uses type `U`\n    fn bf(x: B); //~ ERROR `extern` block uses type `B`"}, {"sha": "8917d309e60870c80d0a72203ae508db7d2f31fc", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n error: `extern` block uses type `U`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:39:13\n+  --> $DIR/lint-ctypes-enum.rs:60:13\n    |\n LL |    fn uf(x: U);\n    |             ^ not FFI-safe\n@@ -14,39 +14,48 @@ LL | #![deny(improper_ctypes)]\n note: the type is defined here\n   --> $DIR/lint-ctypes-enum.rs:9:1\n    |\n-LL | enum U { A }\n-   | ^^^^^^^^^^^^\n+LL | / enum U {\n+LL | |     A,\n+LL | | }\n+   | |_^\n \n error: `extern` block uses type `B`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:40:13\n+  --> $DIR/lint-ctypes-enum.rs:61:13\n    |\n LL |    fn bf(x: B);\n    |             ^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n    = note: enum has no representation hint\n note: the type is defined here\n-  --> $DIR/lint-ctypes-enum.rs:10:1\n+  --> $DIR/lint-ctypes-enum.rs:12:1\n    |\n-LL | enum B { C, D }\n-   | ^^^^^^^^^^^^^^^\n+LL | / enum B {\n+LL | |     C,\n+LL | |     D,\n+LL | | }\n+   | |_^\n \n error: `extern` block uses type `T`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:41:13\n+  --> $DIR/lint-ctypes-enum.rs:62:13\n    |\n LL |    fn tf(x: T);\n    |             ^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n    = note: enum has no representation hint\n note: the type is defined here\n-  --> $DIR/lint-ctypes-enum.rs:11:1\n-   |\n-LL | enum T { E, F, G }\n-   | ^^^^^^^^^^^^^^^^^^\n+  --> $DIR/lint-ctypes-enum.rs:16:1\n+   |\n+LL | / enum T {\n+LL | |     E,\n+LL | |     F,\n+LL | |     G,\n+LL | | }\n+   | |_^\n \n error: `extern` block uses type `Option<Unique<u8>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:48:17\n+  --> $DIR/lint-ctypes-enum.rs:69:17\n    |\n LL |    fn unique(x: Option<std::ptr::Unique<u8>>);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -55,23 +64,23 @@ LL |    fn unique(x: Option<std::ptr::Unique<u8>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:54:23\n+  --> $DIR/lint-ctypes-enum.rs:75:23\n    |\n LL |    fn nonzero_u128(x: Option<num::NonZeroU128>);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:61:23\n+  --> $DIR/lint-ctypes-enum.rs:82:23\n    |\n LL |    fn nonzero_i128(x: Option<num::NonZeroI128>);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `Option<TransparentUnion<NonZeroU8>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:66:28\n+  --> $DIR/lint-ctypes-enum.rs:87:28\n    |\n LL |    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -80,7 +89,7 @@ LL |    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `Option<Rust<NonZeroU8>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:68:20\n+  --> $DIR/lint-ctypes-enum.rs:89:20\n    |\n LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -89,7 +98,7 @@ LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `std::result::Result<(), NonZeroI32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:69:20\n+  --> $DIR/lint-ctypes-enum.rs:90:20\n    |\n LL |    fn no_result(x: Result<(), num::NonZeroI32>);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe"}, {"sha": "fabbdcf689182e07d236061c3fb471a7c711fdb8", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -20,7 +20,7 @@ pub type I32Pair = (i32, i32);\n #[repr(C)]\n pub struct ZeroSize;\n pub type RustFn = fn();\n-pub type RustBadRet = extern fn() -> Box<u32>;\n+pub type RustBadRet = extern \"C\" fn() -> Box<u32>;\n pub type CVoidRet = ();\n pub struct Foo;\n #[repr(transparent)]\n@@ -43,7 +43,7 @@ pub struct TransparentCustomZst(i32, ZeroSize);\n #[repr(C)]\n pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n \n-extern {\n+extern \"C\" {\n     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n@@ -73,12 +73,12 @@ extern {\n     pub static static_u128_type: u128; //~ ERROR: uses type `u128`\n     pub static static_u128_array_type: [u128; 16]; //~ ERROR: uses type `u128`\n \n-    pub fn good3(fptr: Option<extern fn()>);\n+    pub fn good3(fptr: Option<extern \"C\" fn()>);\n     pub fn good4(aptr: &[u8; 4 as usize]);\n     pub fn good5(s: StructWithProjection);\n     pub fn good6(s: StructWithProjectionAndLifetime);\n-    pub fn good7(fptr: extern fn() -> ());\n-    pub fn good8(fptr: extern fn() -> !);\n+    pub fn good7(fptr: extern \"C\" fn() -> ());\n+    pub fn good8(fptr: extern \"C\" fn() -> !);\n     pub fn good9() -> ();\n     pub fn good10() -> CVoidRet;\n     pub fn good11(size: isize);\n@@ -96,12 +96,12 @@ extern {\n }\n \n #[allow(improper_ctypes)]\n-extern {\n+extern \"C\" {\n     pub fn good19(_: &String);\n }\n \n #[cfg(not(target_arch = \"wasm32\"))]\n-extern {\n+extern \"C\" {\n     pub fn good1(size: *const libc::c_int);\n     pub fn good2(size: *const libc::c_uint);\n }"}, {"sha": "27c31c22311ab7736f1f5aea7a1debc7156dc271", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -41,7 +41,7 @@ mod private_mod {\n     }\n     define_empty_struct_with_visibility!(pub, Fluorine);\n \n-    extern {\n+    extern \"C\" {\n         pub fn catalyze() -> bool; //~ WARNING unreachable_pub\n     }\n "}, {"sha": "6bfec0ec5e8b04ef73456a6352f67a3c1180f98c", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -37,7 +37,7 @@ mod private_mod {\n     }\n     define_empty_struct_with_visibility!(pub, Fluorine);\n \n-    extern {\n+    extern \"C\" {\n         pub fn catalyze() -> bool; //~ WARNING unreachable_pub\n     }\n "}, {"sha": "4684fe145774d8be4a14f2b2cfa77dfcf82e9b9f", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@ trait Trait {\n     fn foo();\n }\n \n-extern {\n+extern \"C\" {\n     #[inline] //~ ERROR `#[inline]` is ignored on function prototypes\n     fn foo();\n }"}, {"sha": "568ae3a8539a9354d379647e1af44f00f4e7d7d4", "filename": "src/test/ui/macros/macros-in-extern.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-in-extern.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -10,7 +10,7 @@ macro_rules! returns_isize(\n );\n \n macro takes_u32_returns_u32($ident:ident) {\n-    fn $ident (arg: u32) -> u32;\n+    fn $ident(arg: u32) -> u32;\n }\n \n macro_rules! emits_nothing(\n@@ -25,8 +25,14 @@ macro_rules! emits_multiple(\n );\n \n mod defs {\n-    #[no_mangle] extern fn f1() -> u32 { 1 }\n-    #[no_mangle] extern fn f2() -> u32 { 2 }\n+    #[no_mangle]\n+    extern \"C\" fn f1() -> u32 {\n+        1\n+    }\n+    #[no_mangle]\n+    extern \"C\" fn f2() -> u32 {\n+        2\n+    }\n }\n \n fn main() {\n@@ -37,7 +43,7 @@ fn main() {\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     returns_isize!(rust_get_test_int);\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n     emits_nothing!();"}, {"sha": "8bd26cebc693466c42a411184495175a0bea6aa6", "filename": "src/test/ui/mismatched_types/issue-26480.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n }\n "}, {"sha": "f3be948781be326089cc7efed7d2d18ba6d6d7b9", "filename": "src/test/ui/nil-decl-in-foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnil-decl-in-foreign.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,9 +6,9 @@\n // pretty-expanded FIXME #23616\n \n mod libc {\n-    extern {\n+    extern \"C\" {\n         pub fn printf(x: ());\n     }\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "54836b0a3f5384718137f439fb8a69dbb7fb54da", "filename": "src/test/ui/no-patterns-in-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fno-patterns-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fno-patterns-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-patterns-in-args.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,10 +1,10 @@\n-extern {\n+extern \"C\" {\n     fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n     fn f3(arg @ _: u8); //~ ERROR patterns aren't allowed in foreign function declarations\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n-    // fn g3(u8); // Not yet\n+// fn g3(u8); // Not yet\n }\n \n type A1 = fn(mut arg: u8); //~ ERROR patterns aren't allowed in function pointer types"}, {"sha": "31b853e24fe5bae1c57975f5ee76698a685954a9", "filename": "src/test/ui/osx-frameworks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fosx-frameworks.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,7 @@\n // ignore-macos this is supposed to succeed on osx\n \n #[link(name = \"foo\", kind = \"framework\")]\n-extern {}\n+extern \"C\" {}\n //~^^ ERROR: native frameworks are only available on macOS\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "e3f0fa0fc46ac1bd685dc8cbc7160cd5c117c8a1", "filename": "src/test/ui/parser/attrs-after-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {}\n \n-extern {\n+extern \"C\" {\n     #[cfg(stage37)] //~ ERROR expected item after attributes\n }"}, {"sha": "135d98457e1970bf4884cee75a58e7626197ac5b", "filename": "src/test/ui/parser/attrs-after-extern-mod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: expected item after attributes\n   --> $DIR/attrs-after-extern-mod.rs:6:5\n    |\n-LL | extern {\n-   |        - while parsing this item list starting here\n+LL | extern \"C\" {\n+   |            - while parsing this item list starting here\n LL |     #[cfg(stage37)]\n    |     ^^^^^^^^^^^^^^^\n LL | }"}, {"sha": "8c4339614080ba391996d0d05496912149ec470a", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -110,5 +110,16 @@ LL |     1.0e10suffix;\n    |\n    = help: valid suffixes are `f32` and `f64`\n \n-error: aborting due to 16 previous errors\n+error: extern declarations without an explicit ABI are deprecated\n+  --> $DIR/bad-lit-suffixes.rs:5:1\n+   |\n+LL | / extern\n+LL | |     \"C\"suffix\n+LL | | {}\n+   | |__^ ABI should be specified here\n+   |\n+   = note: `#[deny(missing_abi)]` on by default\n+   = help: the default ABI is C\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "515c90ed48c04b03c0ecaff51ad29c2bdc5dfb3e", "filename": "src/test/ui/parser/doc-before-extern-rbrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-extern-rbrace.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n-extern {\n+extern \"C\" {\n     /// hi\n     //~^ ERROR found a documentation comment that doesn't document anything\n }"}, {"sha": "547329cfb1b8463d9de9a669d4890a9027639dcc", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n-extern {\n+extern \"C\" {\n     pub pub fn foo();\n     //~^ ERROR visibility `pub` is not followed by an item\n     //~| ERROR non-item in item list"}, {"sha": "8d8122292ae9aa67961e75584f94ee1ddc2ee725", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,8 +9,8 @@ LL |     pub pub fn foo();\n error: non-item in item list\n   --> $DIR/duplicate-visibility.rs:4:9\n    |\n-LL | extern {\n-   |        - item list starts here\n+LL | extern \"C\" {\n+   |            - item list starts here\n LL |     pub pub fn foo();\n    |         ^^^ non-item starts here\n ..."}, {"sha": "73568609cdfce9bf287fc0688639975edc900da8", "filename": "src/test/ui/parser/extern-no-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     f(); //~ ERROR expected one of `!` or `::`, found `(`\n }\n "}, {"sha": "d9183d56463602fbaeadd1943c68374ffb2ca3cd", "filename": "src/test/ui/parser/extern-no-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: expected one of `!` or `::`, found `(`\n   --> $DIR/extern-no-fn.rs:2:6\n    |\n-LL | extern {\n-   |        - while parsing this item list starting here\n+LL | extern \"C\" {\n+   |            - while parsing this item list starting here\n LL |     f();\n    |      ^ expected one of `!` or `::`\n LL | }"}, {"sha": "7127ba8da6148e51beaac5eecf5bf2aeb7b819f6", "filename": "src/test/ui/parser/fn-body-eq-expr-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@ fn syntax() {\n     fn bar() -> u8 = 42; //~ ERROR function body cannot be `= expression;`\n }\n \n-extern {\n+extern \"C\" {\n     fn foo() = 42; //~ ERROR function body cannot be `= expression;`\n     //~^ ERROR incorrect function inside `extern` block\n     fn bar() -> u8 = 42; //~ ERROR function body cannot be `= expression;`"}, {"sha": "fdc7a9409d733a771d17767b7056779c32877ee8", "filename": "src/test/ui/parser/fn-body-eq-expr-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-eq-expr-semi.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -89,8 +89,8 @@ LL |     fn bar() -> u8 { 42 }\n error: incorrect function inside `extern` block\n   --> $DIR/fn-body-eq-expr-semi.rs:9:8\n    |\n-LL | extern {\n-   | ------ `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n LL |     fn foo() = 42;\n    |        ^^^   ----- help: remove the invalid body: `;`\n    |        |\n@@ -102,8 +102,8 @@ LL |     fn foo() = 42;\n error: incorrect function inside `extern` block\n   --> $DIR/fn-body-eq-expr-semi.rs:11:8\n    |\n-LL | extern {\n-   | ------ `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n ...\n LL |     fn bar() -> u8 = 42;\n    |        ^^^         ----- help: remove the invalid body: `;`"}, {"sha": "12df488802ecda5c6b108b703ca26b4e3e6dcb1c", "filename": "src/test/ui/parser/fn-body-optional-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-semantic-fail.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -20,7 +20,7 @@ fn main() {\n         fn f4() {} // OK.\n     }\n \n-    extern {\n+    extern \"C\" {\n         fn f5(); // OK.\n         fn f6() {} //~ ERROR incorrect function inside `extern` block\n     }"}, {"sha": "14bcd7c16faa1bcf23e84e23ff32c87e41fac591", "filename": "src/test/ui/parser/fn-body-optional-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-semantic-fail.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -25,8 +25,8 @@ LL |         fn f3();\n error: incorrect function inside `extern` block\n   --> $DIR/fn-body-optional-semantic-fail.rs:25:12\n    |\n-LL |     extern {\n-   |     ------ `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n+LL |     extern \"C\" {\n+   |     ---------- `extern` blocks define existing foreign functions and functions inside of them cannot have a body\n LL |         fn f5(); // OK.\n LL |         fn f6() {}\n    |            ^^   -- help: remove the invalid body: `;`"}, {"sha": "f9dbebf0bea18966f1b05175d5ae8809a033e3b9", "filename": "src/test/ui/parser/fn-body-optional-syntactic-pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-body-optional-syntactic-pass.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -24,8 +24,8 @@ fn syntax() {\n         fn f() {}\n     }\n \n-    extern {\n+    extern \"C\" {\n+        fn f();\n         fn f();\n-        fn f() {}\n     }\n }"}, {"sha": "0bbaeec0c7fec54c8f1d358f53ee7501bc846585", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -47,7 +47,7 @@ fn main() {\n         //~^ ERROR functions cannot be both `const` and `async`\n     }\n \n-    extern {\n+    extern \"C\" {\n         async fn fe1(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         unsafe fn fe2(); //~ ERROR functions in `extern` blocks cannot have qualifiers\n         const fn fe3(); //~ ERROR functions in `extern` blocks cannot have qualifiers"}, {"sha": "4fde243b2f8ecec383ba3ac2be2b6ab100883528", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -105,8 +105,8 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/fn-header-semantic-fail.rs:51:18\n    |\n-LL |     extern {\n-   |     ------ in this `extern` block\n+LL |     extern \"C\" {\n+   |     ---------- in this `extern` block\n LL |         async fn fe1();\n    |                  ^^^\n    |\n@@ -118,8 +118,8 @@ LL |         fn fe1();\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/fn-header-semantic-fail.rs:52:19\n    |\n-LL |     extern {\n-   |     ------ in this `extern` block\n+LL |     extern \"C\" {\n+   |     ---------- in this `extern` block\n LL |         async fn fe1();\n LL |         unsafe fn fe2();\n    |                   ^^^\n@@ -132,8 +132,8 @@ LL |         fn fe2();\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n-LL |     extern {\n-   |     ------ in this `extern` block\n+LL |     extern \"C\" {\n+   |     ---------- in this `extern` block\n ...\n LL |         const fn fe3();\n    |                  ^^^\n@@ -146,8 +146,8 @@ LL |         fn fe3();\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/fn-header-semantic-fail.rs:54:23\n    |\n-LL |     extern {\n-   |     ------ in this `extern` block\n+LL |     extern \"C\" {\n+   |     ---------- in this `extern` block\n ...\n LL |         extern \"C\" fn fe4();\n    |                       ^^^\n@@ -160,8 +160,8 @@ LL |         fn fe4();\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/fn-header-semantic-fail.rs:55:42\n    |\n-LL |     extern {\n-   |     ------ in this `extern` block\n+LL |     extern \"C\" {\n+   |     ---------- in this `extern` block\n ...\n LL |         const async unsafe extern \"C\" fn fe5();\n    |                                          ^^^"}, {"sha": "68f1f7901bb780315446620c79c13248613e4f12", "filename": "src/test/ui/parser/fn-header-syntactic-pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-syntactic-pass.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -37,11 +37,11 @@ fn syntax() {\n         const async unsafe extern \"C\" fn f();\n     }\n \n-    extern {\n-        async fn f();\n-        unsafe fn f();\n-        const fn f();\n-        extern \"C\" fn f();\n-        const async unsafe extern \"C\" fn f();\n+    extern \"C\" {\n+        fn f();\n+        fn f();\n+        fn f();\n+        fn f();\n+        fn f();\n     }\n }"}, {"sha": "c9940b74aa2a0af0fa6c52db8d6dd41357130969", "filename": "src/test/ui/parser/foreign-const-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n-extern {\n+extern \"C\" {\n     const A: isize;\n     //~^ ERROR extern items cannot be `const`\n     const B: isize = 42;"}, {"sha": "8dc66c0d012ca3d1d3bcfba5f5760495fc0b5882", "filename": "src/test/ui/parser/foreign-const-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -21,8 +21,8 @@ LL |     const B: isize = 42;\n error: incorrect `static` inside `extern` block\n   --> $DIR/foreign-const-semantic-fail.rs:6:11\n    |\n-LL | extern {\n-   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n ...\n LL |     const B: isize = 42;\n    |           ^          -- the invalid body"}, {"sha": "a6e77f846638e06bf481bb5dc29c7c9740d0b37e", "filename": "src/test/ui/parser/foreign-const-syntactic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@\n fn main() {}\n \n #[cfg(FALSE)]\n-extern {\n+extern \"C\" {\n     const A: isize; //~ ERROR extern items cannot be `const`\n     const B: isize = 42; //~ ERROR extern items cannot be `const`\n }"}, {"sha": "3d427ed0efdfc82900ae6ec065f90f7020ba0ca0", "filename": "src/test/ui/parser/foreign-static-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {}\n \n-extern {\n+extern \"C\" {\n     static X: u8 = 0; //~ ERROR incorrect `static` inside `extern` block\n     static mut Y: u8 = 0; //~ ERROR incorrect `static` inside `extern` block\n }"}, {"sha": "105508cfefaafa0978677be4e46772eab622b0ef", "filename": "src/test/ui/parser/foreign-static-semantic-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-static-semantic-fail.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: incorrect `static` inside `extern` block\n   --> $DIR/foreign-static-semantic-fail.rs:6:12\n    |\n-LL | extern {\n-   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n LL |     static X: u8 = 0;\n    |            ^       - the invalid body\n    |            |\n@@ -13,8 +13,8 @@ LL |     static X: u8 = 0;\n error: incorrect `static` inside `extern` block\n   --> $DIR/foreign-static-semantic-fail.rs:7:16\n    |\n-LL | extern {\n-   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+LL | extern \"C\" {\n+   | ---------- `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n LL |     static X: u8 = 0;\n LL |     static mut Y: u8 = 0;\n    |                ^       - the invalid body"}, {"sha": "599496346173a16eb06893346b50e60f2a671ef2", "filename": "src/test/ui/parser/foreign-static-syntactic-pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-static-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fforeign-static-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-static-syntactic-pass.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@\n fn main() {}\n \n #[cfg(FALSE)]\n-extern {\n-    static X: u8 = 0;\n-    static mut Y: u8 = 0;\n+extern \"C\" {\n+    static X: u8;\n+    static mut Y: u8;\n }"}, {"sha": "1993124edc394ba9eaf98d60c067a2b7399d3157", "filename": "src/test/ui/parser/no-const-fn-in-extern-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     const fn foo();\n     //~^ ERROR functions in `extern` blocks cannot have qualifiers\n     const unsafe fn bar();"}, {"sha": "04fc8c85e4f033e59834365bab3e12e06a269e80", "filename": "src/test/ui/parser/no-const-fn-in-extern-block.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fno-const-fn-in-extern-block.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/no-const-fn-in-extern-block.rs:2:14\n    |\n-LL | extern {\n-   | ------ in this `extern` block\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n LL |     const fn foo();\n    |              ^^^\n    |\n@@ -14,8 +14,8 @@ LL |     fn foo();\n error: functions in `extern` blocks cannot have qualifiers\n   --> $DIR/no-const-fn-in-extern-block.rs:4:21\n    |\n-LL | extern {\n-   | ------ in this `extern` block\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n ...\n LL |     const unsafe fn bar();\n    |                     ^^^"}, {"sha": "621aab279aa4aa46b705cc90c0e7c117ebdaed39", "filename": "src/test/ui/parser/self-param-semantic-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -23,7 +23,7 @@ fn free() {\n     //~^ ERROR `self` parameter is only allowed in associated functions\n }\n \n-extern {\n+extern \"C\" {\n     fn f1(self);\n     //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f2(mut self);\n@@ -40,8 +40,8 @@ extern {\n     fn f7(self: u8);\n     //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f8(mut self: u8);\n-    //~^ ERROR `self` parameter is only allowed in associated functions\n-    //~| ERROR patterns aren't allowed in\n+//~^ ERROR `self` parameter is only allowed in associated functions\n+//~| ERROR patterns aren't allowed in\n }\n \n type X1 = fn(self);"}, {"sha": "d7bb7863c07d608bb7cda761ea4ad58b40f6e455", "filename": "src/test/ui/parser/self-param-syntactic-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fself-param-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fself-param-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-syntactic-pass.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -18,7 +18,7 @@ fn free() {\n }\n \n #[cfg(FALSE)]\n-extern {\n+extern \"C\" {\n     fn f(self);\n     fn f(mut self);\n     fn f(&self);"}, {"sha": "eab134a4a4de4395876885438f8e2992e8d79def", "filename": "src/test/ui/parser/unsafe-foreign-mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,3 @@\n-unsafe extern {\n-    //~^ ERROR extern block cannot be declared unsafe\n-}\n-\n unsafe extern \"C\" {\n     //~^ ERROR extern block cannot be declared unsafe\n }"}, {"sha": "4acf72c5dae89924aff6c63c4ac6b140b845396b", "filename": "src/test/ui/parser/unsafe-foreign-mod.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,14 +1,8 @@\n error: extern block cannot be declared unsafe\n   --> $DIR/unsafe-foreign-mod.rs:1:1\n    |\n-LL | unsafe extern {\n-   | ^^^^^^\n-\n-error: extern block cannot be declared unsafe\n-  --> $DIR/unsafe-foreign-mod.rs:5:1\n-   |\n LL | unsafe extern \"C\" {\n    | ^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "404f40907551917471f1824856e954f06a2d57c8", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -20,22 +20,22 @@ extern \"C\" fn f2_3(..., x: isize) {}\n //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n //~| ERROR `...` must be the last argument of a C-variadic function\n \n-extern fn f3_1(x: isize, ...) {}\n+extern \"C\" fn f3_1(x: isize, ...) {}\n //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n \n-extern fn f3_2(...) {}\n+extern \"C\" fn f3_2(...) {}\n //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n //~| ERROR C-variadic function must be declared with at least one named argument\n \n-extern fn f3_3(..., x: isize) {}\n+extern \"C\" fn f3_3(..., x: isize) {}\n //~^ ERROR only foreign or `unsafe extern \"C\" functions may be C-variadic\n //~| ERROR `...` must be the last argument of a C-variadic function\n \n-extern {\n+extern \"C\" {\n     fn e_f1(...);\n     //~^ ERROR C-variadic function must be declared with at least one named argument\n     fn e_f2(..., x: isize);\n-    //~^ ERROR `...` must be the last argument of a C-variadic function\n+//~^ ERROR `...` must be the last argument of a C-variadic function\n }\n \n struct X;"}, {"sha": "ebfe4979fb6f25360fec0b198de52cec953e1bc4", "filename": "src/test/ui/parser/variadic-ffi-semantic-restrictions.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvariadic-ffi-semantic-restrictions.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -47,34 +47,34 @@ LL | extern \"C\" fn f2_3(..., x: isize) {}\n    |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:23:26\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:23:30\n    |\n-LL | extern fn f3_1(x: isize, ...) {}\n-   |                          ^^^\n+LL | extern \"C\" fn f3_1(x: isize, ...) {}\n+   |                              ^^^\n \n error: C-variadic function must be declared with at least one named argument\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:16\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:20\n    |\n-LL | extern fn f3_2(...) {}\n-   |                ^^^\n+LL | extern \"C\" fn f3_2(...) {}\n+   |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:16\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:26:20\n    |\n-LL | extern fn f3_2(...) {}\n-   |                ^^^\n+LL | extern \"C\" fn f3_2(...) {}\n+   |                    ^^^\n \n error: `...` must be the last argument of a C-variadic function\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:16\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:20\n    |\n-LL | extern fn f3_3(..., x: isize) {}\n-   |                ^^^\n+LL | extern \"C\" fn f3_3(..., x: isize) {}\n+   |                    ^^^\n \n error: only foreign or `unsafe extern \"C\" functions may be C-variadic\n-  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:16\n+  --> $DIR/variadic-ffi-semantic-restrictions.rs:30:20\n    |\n-LL | extern fn f3_3(..., x: isize) {}\n-   |                ^^^\n+LL | extern \"C\" fn f3_3(..., x: isize) {}\n+   |                    ^^^\n \n error: C-variadic function must be declared with at least one named argument\n   --> $DIR/variadic-ffi-semantic-restrictions.rs:35:13"}, {"sha": "76af8c6cde801d4cc3bf7e266a38ef879fd201fb", "filename": "src/test/ui/priv-in-bad-locations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fpriv-in-bad-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fpriv-in-bad-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpriv-in-bad-locations.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-pub extern { //~ ERROR unnecessary visibility qualifier\n+pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n     pub fn bar();\n }\n "}, {"sha": "75bd2fe47b7564d6ed6f3be64001d61d40a39343", "filename": "src/test/ui/priv-in-bad-locations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fpriv-in-bad-locations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fpriv-in-bad-locations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpriv-in-bad-locations.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,7 +1,7 @@\n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/priv-in-bad-locations.rs:1:1\n    |\n-LL | pub extern {\n+LL | pub extern \"C\" {\n    | ^^^ `pub` not permitted here because it's implied\n    |\n    = note: place qualifiers on individual foreign items instead"}, {"sha": "3c9fa983dfd1e7514521cc02b708bef137d81d5d", "filename": "src/test/ui/privacy/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -61,7 +61,7 @@ mod bar {\n         pub fn bar() {}\n     }\n \n-    extern {\n+    extern \"C\" {\n         fn epriv();\n         pub fn epub();\n     }"}, {"sha": "09afa04501ea03fe06060add3ba6b55b105bb0cb", "filename": "src/test/ui/privacy/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -29,7 +29,7 @@ mod types {\n         fn f2() -> Priv { panic!() } //~ ERROR private type `types::Priv` in public interface\n         //~^ WARNING hard error\n     }\n-    extern {\n+    extern \"C\" {\n         pub static ES: Priv; //~ ERROR private type `types::Priv` in public interface\n         //~^ WARNING hard error\n         pub fn ef1(arg: Priv); //~ ERROR private type `types::Priv` in public interface"}, {"sha": "dbbbe4e3b7d8f1db49de3ab944acb58365f5ab56", "filename": "src/test/ui/privacy/pub-extern-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fprivacy%2Fpub-extern-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fprivacy%2Fpub-extern-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-extern-privacy.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,7 +6,7 @@\n use std::mem::transmute;\n \n mod a {\n-    extern {\n+    extern \"C\" {\n         pub fn free(x: *const u8);\n     }\n }"}, {"sha": "e52bf435a1244f2dc20f5881d7714e63f4c79c50", "filename": "src/test/ui/proc-macro/macros-in-extern-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern-derive.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,4 +1,4 @@\n-extern {\n+extern \"C\" {\n     #[derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n     fn f();\n }"}, {"sha": "57e2066d83c58e3c8044e440bd514834d50f0130", "filename": "src/test/ui/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacros-in-extern.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -11,12 +11,14 @@ fn main() {\n }\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n+extern \"C\" {\n     #[empty_attr]\n     fn some_definitely_unknown_symbol_which_should_be_removed();\n \n     #[identity_attr]\n     fn rust_get_test_int() -> isize;\n \n-    identity!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n+    identity!(\n+        fn rust_dbg_extern_identity_u32(arg: u32) -> u32;\n+    );\n }"}, {"sha": "15c0c695fcabbc56c531825121ad464c46df81cb", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,9 +6,9 @@ extern crate types;\n // This test checks that non-exhaustive types with `#[repr(C)]` from an extern crate are considered\n // improper.\n \n-use types::{NonExhaustiveEnum, NormalStruct, UnitStruct, TupleStruct, NonExhaustiveVariants};\n+use types::{NonExhaustiveEnum, NonExhaustiveVariants, NormalStruct, TupleStruct, UnitStruct};\n \n-extern {\n+extern \"C\" {\n     pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n     //~^ ERROR `extern` block uses type `NonExhaustiveEnum`, which is not FFI-safe\n     pub fn non_exhaustive_normal_struct(_: NormalStruct);\n@@ -21,4 +21,4 @@ extern {\n     //~^ ERROR `extern` block uses type `NonExhaustiveVariants`, which is not FFI-safe\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "fe4ae345d85f8609d7677a6df41b1f2359dcc5c9", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/same_crate_proper.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -9,7 +9,7 @@\n pub enum NonExhaustiveEnum {\n     Unit,\n     Tuple(u32),\n-    Struct { field: u32 }\n+    Struct { field: u32 },\n }\n \n #[non_exhaustive]\n@@ -25,21 +25,24 @@ pub struct UnitStruct;\n \n #[non_exhaustive]\n #[repr(C)]\n-pub struct TupleStruct (pub u16, pub u16);\n+pub struct TupleStruct(pub u16, pub u16);\n \n #[repr(C)]\n pub enum NonExhaustiveVariants {\n-    #[non_exhaustive] Unit,\n-    #[non_exhaustive] Tuple(u32),\n-    #[non_exhaustive] Struct { field: u32 }\n+    #[non_exhaustive]\n+    Unit,\n+    #[non_exhaustive]\n+    Tuple(u32),\n+    #[non_exhaustive]\n+    Struct { field: u32 },\n }\n \n-extern {\n+extern \"C\" {\n     // Unit structs aren't tested here because they will trigger `improper_ctypes` anyway.\n     pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n     pub fn non_exhaustive_normal_struct(_: NormalStruct);\n     pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n     pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "518aa20dd68ceefc4ae314f044eac8a496ee9d5f", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib-2.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n-#[link(name=\"foo\")]\n-extern {\n+#[link(name = \"foo\")]\n+extern \"C\" {\n     #[link_ordinal(42)]\n     //~^ ERROR: the `#[link_ordinal]` attribute is an experimental feature\n     fn foo();"}, {"sha": "29edd0f9ef90eb712bf5eea8b969abff06882846", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,5 +1,5 @@\n-#[link(name=\"foo\", kind=\"raw-dylib\")]\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n //~^ ERROR: kind=\"raw-dylib\" is unstable\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}, {"sha": "a670b6c6c2a0db07885528a78500ff154adc6892", "filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Ffeature-gate-raw-dylib.stderr?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: kind=\"raw-dylib\" is unstable\n   --> $DIR/feature-gate-raw-dylib.rs:1:1\n    |\n-LL | #[link(name=\"foo\", kind=\"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n    = help: add `#![feature(raw_dylib)]` to the crate attributes to enable"}, {"sha": "42685cad9482bb125fe95444caa043c0c151d854", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-and-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-and-name.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -2,7 +2,7 @@\n //~^ WARN the feature `raw_dylib` is incomplete\n \n #[link(name=\"foo\")]\n-extern {\n+extern \"C\" {\n     #[link_name=\"foo\"]\n     #[link_ordinal(42)]\n     //~^ ERROR cannot use `#[link_name]` with `#[link_ordinal]`"}, {"sha": "135f5909ea130001a79895c5492d97dffd5df9d1", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-invalid-format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-invalid-format.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n #![feature(raw_dylib)]\n //~^ WARN the feature `raw_dylib` is incomplete\n \n-#[link(name=\"foo\")]\n-extern {\n+#[link(name = \"foo\")]\n+extern \"C\" {\n     #[link_ordinal(\"JustMonika\")]\n     //~^ ERROR illegal ordinal format in `link_ordinal`\n     fn foo();"}, {"sha": "10db4972970277523979e51a6258d08710e05fef", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,8 +1,8 @@\n #![feature(raw_dylib)]\n //~^ WARN the feature `raw_dylib` is incomplete\n \n-#[link(name=\"foo\")]\n-extern {\n+#[link(name = \"foo\")]\n+extern \"C\" {\n     #[link_ordinal(18446744073709551616)]\n     //~^ ERROR ordinal value in `link_ordinal` is too large: `18446744073709551616`\n     fn foo();"}, {"sha": "324fa443aa50eb044c20e890f187cb603f4d7c64", "filename": "src/test/ui/safe-extern-statics-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics-mut.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@\n extern crate extern_statics;\n use extern_statics::*;\n \n-extern {\n+extern \"C\" {\n     static mut B: u8;\n }\n "}, {"sha": "6fa4c4aaca578d2cee450d8fb9759a7ca7b88db9", "filename": "src/test/ui/safe-extern-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -3,7 +3,7 @@\n extern crate extern_statics;\n use extern_statics::*;\n \n-extern {\n+extern \"C\" {\n     static A: u8;\n }\n "}, {"sha": "6323bf664fc252a49b98739382b8b8d3c56660c9", "filename": "src/test/ui/sepcomp/sepcomp-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-extern.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,7 +6,7 @@\n \n extern crate sepcomp_extern_lib;\n \n-extern {\n+extern \"C\" {\n     fn foo() -> usize;\n }\n "}, {"sha": "75b4788b56f7bf3260cfabc1b14c1fcbc88ad5a7", "filename": "src/test/ui/simple_global_asm.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsimple_global_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fsimple_global_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimple_global_asm.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,20 +5,26 @@\n #![allow(dead_code)]\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"x86\"))]\n-global_asm!(r#\"\n+global_asm!(\n+    r#\"\n     .global foo\n     .global _foo\n foo:\n _foo:\n     ret\n-\"#);\n+\"#\n+);\n \n-extern {\n+extern \"C\" {\n     fn foo();\n }\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"x86\"))]\n-fn main() { unsafe { foo(); } }\n+fn main() {\n+    unsafe {\n+        foo();\n+    }\n+}\n \n #[cfg(not(any(target_arch = \"x86_64\", target_arch = \"x86\")))]\n fn main() {}"}, {"sha": "b6c4894d9180766d617a0cb62ccb9fed14cb9b2a", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -5,7 +5,7 @@\n \n \n mod foo {\n-    extern {\n+    extern \"C\" {\n         pub fn bar();\n     }\n }"}, {"sha": "90aa2537a82bb8add04bcfdb5cc46e0ccc17c5cc", "filename": "src/test/ui/static/static-mut-foreign-requires-unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-foreign-requires-unsafe.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,9 +1,9 @@\n-extern {\n+extern \"C\" {\n     static mut a: i32;\n }\n \n fn main() {\n-    a += 3;     //~ ERROR: requires unsafe\n-    a = 4;      //~ ERROR: requires unsafe\n+    a += 3; //~ ERROR: requires unsafe\n+    a = 4; //~ ERROR: requires unsafe\n     let _b = a; //~ ERROR: requires unsafe\n }"}, {"sha": "3943b260854079ebcf86b629733c471ca94e07fc", "filename": "src/test/ui/static_sized_requirement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstatic_sized_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstatic_sized_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic_sized_requirement.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -7,6 +7,6 @@\n #[lang = \"sized\"]\n trait Sized {}\n \n-extern {\n+extern \"C\" {\n     pub static A: u32;\n }"}, {"sha": "627c97da008de1083b301296c296f0d37724a654", "filename": "src/test/ui/stmt_expr_attrs_no_feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -89,7 +89,7 @@ item_mac!(e);\n \n // check that the gate visitor works right:\n \n-extern {\n+extern \"C\" {\n     #[cfg(unset)]\n     fn x(a: [u8; #[rustc_dummy] 5]);\n     fn y(a: [u8; #[rustc_dummy] 5]); //~ ERROR attributes on expressions are experimental"}, {"sha": "00a23b354a97edd3c3a8a43cb813073c51f61c04", "filename": "src/test/ui/structs-enums/foreign-struct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstructs-enums%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fstructs-enums%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fforeign-struct.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -6,14 +6,14 @@\n \n // pretty-expanded FIXME #23616\n \n-pub enum void { }\n+pub enum void {}\n \n mod bindgen {\n     use super::void;\n \n-    extern {\n+    extern \"C\" {\n         pub fn printf(v: void);\n     }\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "a2dda31aa553968a2434714d138c65eb30398ba9", "filename": "src/test/ui/threads-sendsync/thread-local-extern-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fthreads-sendsync%2Fthread-local-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fthreads-sendsync%2Fthread-local-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fthread-local-extern-static.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -11,7 +11,7 @@ extern crate thread_local_extern_static;\n use std::cell::Cell;\n \n #[cfg(target_thread_local)]\n-extern {\n+extern \"C\" {\n     #[thread_local]\n     static FOO: Cell<u32>;\n }"}, {"sha": "15d8b09d2ecfc0989932817ae3c210012c0c60e1", "filename": "src/test/ui/warn-ctypes-inhibit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwarn-ctypes-inhibit.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -4,14 +4,12 @@\n // compile-flags:-D improper-ctypes\n \n // pretty-expanded FIXME #23616\n-\n #![allow(improper_ctypes)]\n \n mod libc {\n-    extern {\n+    extern \"C\" {\n         pub fn malloc(size: isize) -> *const u8;\n     }\n }\n \n-pub fn main() {\n-}\n+pub fn main() {}"}, {"sha": "4152a1065ca14e8d1d1d8e48079d690d7ee5a187", "filename": "src/test/ui/wasm-import-module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fwasm-import-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3edb1d661ed5ce685bd5dcfa600b6e02897b86/src%2Ftest%2Fui%2Fwasm-import-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-import-module.rs?ref=8a3edb1d661ed5ce685bd5dcfa600b6e02897b86", "patch": "@@ -1,10 +1,10 @@\n #[link(name = \"...\", wasm_import_module)] //~ ERROR: must be of the form\n-extern {}\n+extern \"C\" {}\n \n #[link(name = \"...\", wasm_import_module(x))] //~ ERROR: must be of the form\n-extern {}\n+extern \"C\" {}\n \n #[link(name = \"...\", wasm_import_module())] //~ ERROR: must be of the form\n-extern {}\n+extern \"C\" {}\n \n fn main() {}"}]}