{"sha": "01f40ce3bc5bcf914804e82701436ad3ff380e09", "node_id": "C_kwDOAAsO6NoAKDAxZjQwY2UzYmM1YmNmOTE0ODA0ZTgyNzAxNDM2YWQzZmYzODBlMDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T11:49:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T11:49:47Z"}, "message": "Auto merge of #9863 - smoelius:expect-unwrap-used-typo, r=flip1995\n\nFix typo in `expect_used` and `unwrap_used` warning messages\n\n\"\\`an Option\\`\" -> \"an \\`Option\\`\" and \"\\`a Result\\`\" -> \"a \\`Result\\`\".\n\nchangelog: fix typo in `expect_used` and `unwrap_used` warning messages", "tree": {"sha": "4367845f9744f168d6831f38f1978102dcab9475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4367845f9744f168d6831f38f1978102dcab9475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01f40ce3bc5bcf914804e82701436ad3ff380e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01f40ce3bc5bcf914804e82701436ad3ff380e09", "html_url": "https://github.com/rust-lang/rust/commit/01f40ce3bc5bcf914804e82701436ad3ff380e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01f40ce3bc5bcf914804e82701436ad3ff380e09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "html_url": "https://github.com/rust-lang/rust/commit/dfe37f13cfb935f4dff56785ce63131b0d6c85c4"}, {"sha": "00ae5e15a8f2fde216a09751454f5e98cf241f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ae5e15a8f2fde216a09751454f5e98cf241f21", "html_url": "https://github.com/rust-lang/rust/commit/00ae5e15a8f2fde216a09751454f5e98cf241f21"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "cce8f797e98c6a1c4e948caa3c31d26137f75c5e", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -18,9 +18,9 @@ pub(super) fn check(\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) && !is_err {\n-        Some((EXPECT_USED, \"an Option\", \"None\", \"\"))\n+        Some((EXPECT_USED, \"an `Option`\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((EXPECT_USED, \"a Result\", if is_err { \"Ok\" } else { \"Err\" }, \"an \"))\n+        Some((EXPECT_USED, \"a `Result`\", if is_err { \"Ok\" } else { \"Err\" }, \"an \"))\n     } else {\n         None\n     };\n@@ -36,7 +36,7 @@ pub(super) fn check(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `{method}()` on `{kind}` value\"),\n+            &format!(\"used `{method}()` on {kind} value\"),\n             None,\n             &format!(\"if this value is {none_prefix}`{none_value}`, it will panic\"),\n         );"}, {"sha": "90983f249cd59eae7dcb6af4f4b1eb4b5762ce6c", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -18,9 +18,9 @@ pub(super) fn check(\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) && !is_err {\n-        Some((UNWRAP_USED, \"an Option\", \"None\", \"\"))\n+        Some((UNWRAP_USED, \"an `Option`\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((UNWRAP_USED, \"a Result\", if is_err { \"Ok\" } else { \"Err\" }, \"an \"))\n+        Some((UNWRAP_USED, \"a `Result`\", if is_err { \"Ok\" } else { \"Err\" }, \"an \"))\n     } else {\n         None\n     };\n@@ -45,7 +45,7 @@ pub(super) fn check(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `unwrap{method_suffix}()` on `{kind}` value\"),\n+            &format!(\"used `unwrap{method_suffix}()` on {kind} value\"),\n             None,\n             &help,\n         );"}, {"sha": "1e9bb48c333ca91c79b5a49611cbd1e849d19ed9", "filename": "tests/ui-toml/expect_used/expect_used.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -1,4 +1,4 @@\n-error: used `expect()` on `an Option` value\n+error: used `expect()` on an `Option` value\n   --> $DIR/expect_used.rs:6:13\n    |\n LL |     let _ = opt.expect(\"\");\n@@ -7,7 +7,7 @@ LL |     let _ = opt.expect(\"\");\n    = help: if this value is `None`, it will panic\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n \n-error: used `expect()` on `a Result` value\n+error: used `expect()` on a `Result` value\n   --> $DIR/expect_used.rs:11:13\n    |\n LL |     let _ = res.expect(\"\");"}, {"sha": "94b5ef663add9404af3375ed13d58ac4cb1b65c3", "filename": "tests/ui-toml/unwrap_used/unwrap_used.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::get_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n@@ -25,7 +25,7 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n@@ -39,7 +39,7 @@ error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more conc\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n@@ -53,7 +53,7 @@ error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n@@ -67,7 +67,7 @@ error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n@@ -81,7 +81,7 @@ error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n@@ -95,7 +95,7 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:44:22\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n@@ -109,7 +109,7 @@ error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and mor\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:49:10\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n@@ -123,7 +123,7 @@ error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and mor\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:50:10\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n@@ -137,7 +137,7 @@ error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:51:10\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n@@ -151,7 +151,7 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:52:10\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n@@ -165,7 +165,7 @@ error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more conc\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n@@ -179,7 +179,7 @@ error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_used.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();"}, {"sha": "c08e0dbbf74495d43b536e9ef7910b5cb1194241", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -1,4 +1,4 @@\n-error: used `expect()` on `an Option` value\n+error: used `expect()` on an `Option` value\n   --> $DIR/expect.rs:5:13\n    |\n LL |     let _ = opt.expect(\"\");\n@@ -7,15 +7,15 @@ LL |     let _ = opt.expect(\"\");\n    = help: if this value is `None`, it will panic\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n \n-error: used `expect()` on `a Result` value\n+error: used `expect()` on a `Result` value\n   --> $DIR/expect.rs:10:13\n    |\n LL |     let _ = res.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = help: if this value is an `Err`, it will panic\n \n-error: used `expect_err()` on `a Result` value\n+error: used `expect_err()` on a `Result` value\n   --> $DIR/expect.rs:11:13\n    |\n LL |     let _ = res.expect_err(\"\");"}, {"sha": "6dee4d5b4b6247f60c416e80143ef2e185c39a33", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::get_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n@@ -25,7 +25,7 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n@@ -39,7 +39,7 @@ error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more conc\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n@@ -53,7 +53,7 @@ error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n@@ -67,7 +67,7 @@ error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n@@ -81,7 +81,7 @@ error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n@@ -95,7 +95,7 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:44:22\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n@@ -109,7 +109,7 @@ error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and mor\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:49:10\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n@@ -123,7 +123,7 @@ error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and mor\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:50:10\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n@@ -137,7 +137,7 @@ error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:51:10\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n@@ -151,7 +151,7 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:52:10\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n@@ -165,7 +165,7 @@ error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more conc\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n@@ -179,7 +179,7 @@ error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();"}, {"sha": "d49bf2b322837aed3f889898fd61fdb1e8933703", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -1,4 +1,4 @@\n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap.rs:5:13\n    |\n LL |     let _ = opt.unwrap();\n@@ -7,15 +7,15 @@ LL |     let _ = opt.unwrap();\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n    = note: `-D clippy::unwrap-used` implied by `-D warnings`\n \n-error: used `unwrap()` on `a Result` value\n+error: used `unwrap()` on a `Result` value\n   --> $DIR/unwrap.rs:10:13\n    |\n LL |     let _ = res.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n \n-error: used `unwrap_err()` on `a Result` value\n+error: used `unwrap_err()` on a `Result` value\n   --> $DIR/unwrap.rs:11:13\n    |\n LL |     let _ = res.unwrap_err();"}, {"sha": "fe4ecef11453553809f4a869e6ce66a899ab5124", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01f40ce3bc5bcf914804e82701436ad3ff380e09/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=01f40ce3bc5bcf914804e82701436ad3ff380e09", "patch": "@@ -1,4 +1,4 @@\n-error: used `unwrap()` on `an Option` value\n+error: used `unwrap()` on an `Option` value\n   --> $DIR/unwrap_expect_used.rs:23:5\n    |\n LL |     Some(3).unwrap();\n@@ -7,7 +7,7 @@ LL |     Some(3).unwrap();\n    = help: if this value is `None`, it will panic\n    = note: `-D clippy::unwrap-used` implied by `-D warnings`\n \n-error: used `expect()` on `an Option` value\n+error: used `expect()` on an `Option` value\n   --> $DIR/unwrap_expect_used.rs:24:5\n    |\n LL |     Some(3).expect(\"Hello world!\");\n@@ -16,31 +16,31 @@ LL |     Some(3).expect(\"Hello world!\");\n    = help: if this value is `None`, it will panic\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n \n-error: used `unwrap()` on `a Result` value\n+error: used `unwrap()` on a `Result` value\n   --> $DIR/unwrap_expect_used.rs:31:5\n    |\n LL |     a.unwrap();\n    |     ^^^^^^^^^^\n    |\n    = help: if this value is an `Err`, it will panic\n \n-error: used `expect()` on `a Result` value\n+error: used `expect()` on a `Result` value\n   --> $DIR/unwrap_expect_used.rs:32:5\n    |\n LL |     a.expect(\"Hello world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if this value is an `Err`, it will panic\n \n-error: used `unwrap_err()` on `a Result` value\n+error: used `unwrap_err()` on a `Result` value\n   --> $DIR/unwrap_expect_used.rs:33:5\n    |\n LL |     a.unwrap_err();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: if this value is an `Ok`, it will panic\n \n-error: used `expect_err()` on `a Result` value\n+error: used `expect_err()` on a `Result` value\n   --> $DIR/unwrap_expect_used.rs:34:5\n    |\n LL |     a.expect_err(\"Hello error!\");"}]}