{"sha": "c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "node_id": "C_kwDOAAsO6NoAKGM3ZDIwMDQ0MWI2ZGJjNTEwY2ZlMTc5ZWQwZmMwY2E5NGFhMWU0Mjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-05T03:46:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T03:46:37Z"}, "message": "Rollup merge of #94460 - eholk:reenable-drop-tracking-tests, r=tmiasko\n\nReenable generator drop tracking tests and fix mutation handling\n\nThe previous PR, #94068, was overly zealous in counting mutations as borrows, which effectively nullified drop tracking. We would have caught this except the drop tracking tests were still ignored, despite having the option of using the `-Zdrop-tracking` flag now.\n\nThis PR fixes the issue introduced by #94068 by only counting mutations as borrows the mutated place has a project. This is sufficient to distinguish `x.y = 42` (which should count as a borrow of `x`) from `x = 42` (which is not a borrow of `x` because the whole variable is overwritten).\n\nThis PR also re-enables the drop tracking regression tests using the `-Zdrop-tracking` flag so we will avoid introducing these sorts of issues in the future.\n\nThanks to ``@tmiasko`` for noticing this problem and pointing it out!\n\nr? ``@tmiasko``", "tree": {"sha": "7620331d0fba99d05bf8f8f939975134657a3d83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7620331d0fba99d05bf8f8f939975134657a3d83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIt0eCRBK7hj4Ov3rIwAAh+oIAEmOWixD1fCga253ZaxqZ5Mp\nTvCRqVpyaVAOJ6Ru9LSbQjw68vMlXE5wvyM92ivkmoPRAHg5/RCetnCryGTUmk05\nYgdr70Vm3Ub6uhPgk69SOoiE1xkuNQkuVkkTkUtAd4sW+tSiPD++ttu/CZtNYQwa\nm223gbKZnhCbRvihKMejy/G/VIvnhCI7XZtK/pQItOJBBbP0Oo/NSUZApit7WNfE\n6Og2ennTwe9ZaU1ZZ5mVZP2AmCSahuW/a3dZl0Qnoaegqh3tnisTFE0oyMidy45q\nf6U64sm+GfDurwaGPH90j6s0SoGO1PQz6B6zmybdQZPRenRnc72B5Rlb2j+Oaus=\n=kfJP\n-----END PGP SIGNATURE-----\n", "payload": "tree 7620331d0fba99d05bf8f8f939975134657a3d83\nparent 3e1e9b486605da4fe25329acfd14042b0d6819f6\nparent add169d4140c7583b876619b2e19ba76f4aa76e4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646451997 +0100\ncommitter GitHub <noreply@github.com> 1646451997 +0100\n\nRollup merge of #94460 - eholk:reenable-drop-tracking-tests, r=tmiasko\n\nReenable generator drop tracking tests and fix mutation handling\n\nThe previous PR, #94068, was overly zealous in counting mutations as borrows, which effectively nullified drop tracking. We would have caught this except the drop tracking tests were still ignored, despite having the option of using the `-Zdrop-tracking` flag now.\n\nThis PR fixes the issue introduced by #94068 by only counting mutations as borrows the mutated place has a project. This is sufficient to distinguish `x.y = 42` (which should count as a borrow of `x`) from `x = 42` (which is not a borrow of `x` because the whole variable is overwritten).\n\nThis PR also re-enables the drop tracking regression tests using the `-Zdrop-tracking` flag so we will avoid introducing these sorts of issues in the future.\n\nThanks to ``@tmiasko`` for noticing this problem and pointing it out!\n\nr? ``@tmiasko``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "html_url": "https://github.com/rust-lang/rust/commit/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1e9b486605da4fe25329acfd14042b0d6819f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1e9b486605da4fe25329acfd14042b0d6819f6", "html_url": "https://github.com/rust-lang/rust/commit/3e1e9b486605da4fe25329acfd14042b0d6819f6"}, {"sha": "add169d4140c7583b876619b2e19ba76f4aa76e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/add169d4140c7583b876619b2e19ba76f4aa76e4", "html_url": "https://github.com/rust-lang/rust/commit/add169d4140c7583b876619b2e19ba76f4aa76e4"}], "stats": {"total": 127, "additions": 75, "deletions": 52}, "files": [{"sha": "40ee6d863b5a7043fed064be998a6b635ae87159", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -6,14 +6,14 @@ use crate::{\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::ty::{ParamEnv, TyCtxt};\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>(\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     def_id: DefId,\n     body: &'tcx Body<'tcx>,\n ) -> ConsumedAndBorrowedPlaces {\n-    let mut expr_use_visitor = ExprUseDelegate::new(fcx.tcx.hir());\n+    let mut expr_use_visitor = ExprUseDelegate::new(fcx.tcx, fcx.param_env);\n     expr_use_visitor.consume_body(fcx, def_id, body);\n     expr_use_visitor.places\n }\n@@ -36,14 +36,16 @@ pub(super) struct ConsumedAndBorrowedPlaces {\n /// Interesting values are those that are either dropped or borrowed. For dropped values, we also\n /// record the parent expression, which is the point where the drop actually takes place.\n struct ExprUseDelegate<'tcx> {\n-    hir: Map<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     places: ConsumedAndBorrowedPlaces,\n }\n \n impl<'tcx> ExprUseDelegate<'tcx> {\n-    fn new(hir: Map<'tcx>) -> Self {\n+    fn new(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Self {\n         Self {\n-            hir,\n+            tcx,\n+            param_env,\n             places: ConsumedAndBorrowedPlaces {\n                 consumed: <_>::default(),\n                 borrowed: <_>::default(),\n@@ -77,7 +79,7 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        let parent = match self.hir.find_parent_node(place_with_id.hir_id) {\n+        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n             Some(parent) => parent,\n             None => place_with_id.hir_id,\n         };\n@@ -107,11 +109,22 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        debug!(\"mutate {:?}; diag_expr_id={:?}\", assignee_place, diag_expr_id);\n-        // Count mutations as a borrow.\n-        self.places\n-            .borrowed\n-            .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n+        debug!(\"mutate {assignee_place:?}; diag_expr_id={diag_expr_id:?}\");\n+        // If the type being assigned needs dropped, then the mutation counts as a borrow\n+        // since it is essentially doing `Drop::drop(&mut x); x = new_value;`.\n+        if assignee_place.place.base_ty.needs_drop(self.tcx, self.param_env) {\n+            self.places\n+                .borrowed\n+                .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n+        }\n+    }\n+\n+    fn bind(\n+        &mut self,\n+        binding_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n+    ) {\n+        debug!(\"bind {binding_place:?}; diag_expr_id={diag_expr_id:?}\");\n     }\n \n     fn fake_read("}, {"sha": "8c19bbd3214eea75bec1513f8aa9ea23656010eb", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -51,6 +51,15 @@ pub trait Delegate<'tcx> {\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n+    /// The path at `binding_place` is a binding that is being initialized.\n+    ///\n+    /// This covers cases such as `let x = 42;`\n+    fn bind(&mut self, binding_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        // Bindings can normally be treated as a regular assignment, so by default we\n+        // forward this to the mutate callback.\n+        self.mutate(binding_place, diag_expr_id)\n+    }\n+\n     /// The `place` should be a fake read because of specified `cause`.\n     fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId);\n }\n@@ -648,11 +657,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     let pat_ty = return_if_err!(mc.node_ty(pat.hir_id));\n                     debug!(\"walk_pat: pat_ty={:?}\", pat_ty);\n \n-                    // Each match binding is effectively an assignment to the\n-                    // binding being produced.\n                     let def = Res::Local(canonical_id);\n                     if let Ok(ref binding_place) = mc.cat_res(pat.hir_id, pat.span, pat_ty, def) {\n-                        delegate.mutate(binding_place, binding_place.hir_id);\n+                        delegate.bind(binding_place, binding_place.hir_id);\n                     }\n \n                     // It is also a borrow or copy/move of the value being matched."}, {"sha": "d7f8d7ac546c052884c439298b52ff48e66e413b", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -1,9 +1,5 @@\n // edition:2018\n-// compile-flags: --crate-type lib\n-\n-// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n-// (see generator_interior.rs:27)\n-// ignore-test\n+// compile-flags: --crate-type lib -Zdrop-tracking\n \n use std::{cell::RefCell, fmt::Debug, rc::Rc};\n "}, {"sha": "fa3f3303677daa204b6f607faa962a8f4301ca1c", "filename": "src/test/ui/async-await/drop-and-assign.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-and-assign.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -0,0 +1,19 @@\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+// build-pass\n+\n+struct A;\n+impl Drop for A { fn drop(&mut self) {} }\n+\n+pub async fn f() {\n+    let mut a = A;\n+    a = A;\n+    drop(a);\n+    async {}.await;\n+}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    let _ = f();\n+}"}, {"sha": "6d6d80614910403afb7e5d2816d21c72eca30d14", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -2,10 +2,7 @@\n // Error message should pinpoint the type parameter T as needing to be bound\n // (rather than give a general error message)\n // edition:2018\n-\n-// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n-// (see generator_interior.rs:27)\n-// ignore-test\n+// compile-flags: -Zdrop-tracking\n \n async fn bar<T>() -> () {}\n "}, {"sha": "7236c681f341cef1080752841952136c960f3472", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -1,35 +1,35 @@\n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:10:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:10\n+  --> $DIR/unresolved_type_param.rs:10:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:10:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:10\n+  --> $DIR/unresolved_type_param.rs:10:10\n    |\n LL |     bar().await;\n    |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:10:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:10\n+  --> $DIR/unresolved_type_param.rs:10:10\n    |\n LL |     bar().await;\n    |          ^^^^^^"}, {"sha": "d383680002f4b9fcdde3eadb3a3d6c7d0f923293", "filename": "src/test/ui/generator/drop-control-flow.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-control-flow.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -1,10 +1,6 @@\n // build-pass\n // compile-flags: -Zdrop-tracking\n \n-// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n-// (see generator_interior.rs:27)\n-// ignore-test\n-\n // A test to ensure generators capture values that were conditionally dropped,\n // and also that values that are dropped along all paths to a yield do not get\n // included in the generator type."}, {"sha": "91407ea1844f54922c084cb77f34619928f7d1e9", "filename": "src/test/ui/generator/issue-57478.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fissue-57478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fissue-57478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57478.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -1,8 +1,5 @@\n // check-pass\n-\n-// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n-// (see generator_interior.rs:27)\n-// ignore-test\n+// compile-flags: -Zdrop-tracking\n \n #![feature(negative_impls, generators)]\n "}, {"sha": "c872fb7f3e6305745d3d4ff91c3d6a32aebdf3f7", "filename": "src/test/ui/generator/partial-drop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.rs?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -1,6 +1,4 @@\n-// FIXME(eholk): temporarily disabled while drop range tracking is disabled\n-// (see generator_interior.rs:27)\n-// ignore-test\n+// compile-flags: -Zdrop-tracking\n \n #![feature(negative_impls, generators)]\n "}, {"sha": "16b34c917ece43395c24d729324f3d22188f11d9", "filename": "src/test/ui/generator/partial-drop.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7d200441b6dbc510cfe179ed0fc0ca94aa1e429/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=c7d200441b6dbc510cfe179ed0fc0ca94aa1e429", "patch": "@@ -1,12 +1,12 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:12:5\n+  --> $DIR/partial-drop.rs:14:5\n    |\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:12:17: 18:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:14:17: 20:6]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:17:9\n+  --> $DIR/partial-drop.rs:19:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -16,20 +16,20 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:40:19\n+  --> $DIR/partial-drop.rs:42:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:20:5\n+  --> $DIR/partial-drop.rs:22:5\n    |\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:20:17: 28:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:22:17: 30:6]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:27:9\n+  --> $DIR/partial-drop.rs:29:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -39,20 +39,20 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:40:19\n+  --> $DIR/partial-drop.rs:42:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:30:5\n+  --> $DIR/partial-drop.rs:32:5\n    |\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `[generator@$DIR/partial-drop.rs:30:17: 37:6]`, the trait `Send` is not implemented for `Foo`\n+   = help: within `[generator@$DIR/partial-drop.rs:32:17: 39:6]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/partial-drop.rs:36:9\n+  --> $DIR/partial-drop.rs:38:9\n    |\n LL |         let guard = Bar { foo: Foo, x: 42 };\n    |             ----- has type `Bar` which is not `Send`\n@@ -62,7 +62,7 @@ LL |         yield;\n LL |     });\n    |     - `guard` is later dropped here\n note: required by a bound in `assert_send`\n-  --> $DIR/partial-drop.rs:40:19\n+  --> $DIR/partial-drop.rs:42:19\n    |\n LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`"}]}