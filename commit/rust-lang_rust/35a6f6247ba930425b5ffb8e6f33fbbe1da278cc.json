{"sha": "35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTZmNjI0N2JhOTMwNDI1YjVmZmI4ZTZmMzNmYmJlMWRhMjc4Y2M=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-27T10:45:50Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-27T21:28:01Z"}, "message": "Fix spans for `use` view statements and their treatment in save-analysis", "tree": {"sha": "697ff8bf50a8b2d2e22b1f06130fe59dab8bf6b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697ff8bf50a8b2d2e22b1f06130fe59dab8bf6b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "html_url": "https://github.com/rust-lang/rust/commit/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0201334439393bed205c1148bed425b80aab8c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/0201334439393bed205c1148bed425b80aab8c22", "html_url": "https://github.com/rust-lang/rust/commit/0201334439393bed205c1148bed425b80aab8c22"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "2a977b1085a1bd79e0999dae74ed807871ed9af7", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "patch": "@@ -1162,8 +1162,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n         }\n \n         match i.node {\n-            ast::ViewItemUse(ref path) => {\n-                match path.node {\n+            ast::ViewItemUse(ref item) => {\n+                match item.node {\n                     ast::ViewPathSimple(ident, ref path, id) => {\n                         let sub_span = self.span.span_for_last_ident(path.span);\n                         let mod_id = match self.lookup_type_ref(id) {\n@@ -1184,7 +1184,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                         // 'use' always introduces an alias, if there is not an explicit\n                         // one, there is an implicit one.\n                         let sub_span =\n-                            match self.span.sub_span_before_token(path.span, token::Eq) {\n+                            match self.span.sub_span_after_keyword(item.span, keywords::As) {\n                                 Some(sub_span) => Some(sub_span),\n                                 None => sub_span,\n                             };"}, {"sha": "244d0476832bdb7545699a8cc436dd1ca03cdb64", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "patch": "@@ -294,8 +294,8 @@ impl<'a> SpanUtils<'a> {\n     }\n \n     pub fn sub_span_after_keyword(&self,\n-                              span: Span,\n-                              keyword: keywords::Keyword) -> Option<Span> {\n+                                  span: Span,\n+                                  keyword: keywords::Keyword) -> Option<Span> {\n         let mut toks = self.retokenise_span(span);\n         loop {\n             let ts = toks.real_token();"}, {"sha": "8011507c512d6df8ebb5f9ed19a8f670763e6c7d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "patch": "@@ -5917,7 +5917,7 @@ impl<'a> Parser<'a> {\n     }\n \n \n-    /// Matches view_path : MOD? IDENT EQ non_global_path\n+    /// Matches view_path : MOD? non_global_path as IDENT\n     /// | MOD? non_global_path MOD_SEP LBRACE RBRACE\n     /// | MOD? non_global_path MOD_SEP LBRACE ident_seq RBRACE\n     /// | MOD? non_global_path MOD_SEP STAR\n@@ -6029,7 +6029,7 @@ impl<'a> Parser<'a> {\n         }\n         let mut rename_to = path[path.len() - 1u];\n         let path = ast::Path {\n-            span: mk_sp(lo, self.span.hi),\n+            span: mk_sp(lo, self.last_span.hi),\n             global: false,\n             segments: path.into_iter().map(|identifier| {\n                 ast::PathSegment {\n@@ -6041,7 +6041,8 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(keywords::As) {\n             rename_to = self.parse_ident()\n         }\n-        P(spanned(lo, self.last_span.hi,\n+        P(spanned(lo,\n+                  self.last_span.hi,\n                   ViewPathSimple(rename_to, path, ast::DUMMY_NODE_ID)))\n     }\n "}]}