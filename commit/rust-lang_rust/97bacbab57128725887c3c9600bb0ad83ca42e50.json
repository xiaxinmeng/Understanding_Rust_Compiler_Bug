{"sha": "97bacbab57128725887c3c9600bb0ad83ca42e50", "node_id": "C_kwDOAAsO6NoAKDk3YmFjYmFiNTcxMjg3MjU4ODdjM2M5NjAwYmIwYWQ4M2NhNDJlNTA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-19T22:04:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-01T18:21:42Z"}, "message": "Remove adt_const_params usage from compiler", "tree": {"sha": "1fcc7f29cd136037a695d73808f4a15676cdb4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcc7f29cd136037a695d73808f4a15676cdb4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97bacbab57128725887c3c9600bb0ad83ca42e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97bacbab57128725887c3c9600bb0ad83ca42e50", "html_url": "https://github.com/rust-lang/rust/commit/97bacbab57128725887c3c9600bb0ad83ca42e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97bacbab57128725887c3c9600bb0ad83ca42e50/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847d50453c3e78399b3af193762673a220c23562", "url": "https://api.github.com/repos/rust-lang/rust/commits/847d50453c3e78399b3af193762673a220c23562", "html_url": "https://github.com/rust-lang/rust/commit/847d50453c3e78399b3af193762673a220c23562"}], "stats": {"total": 35, "additions": 9, "deletions": 26}, "files": [{"sha": "08ff2cfba5c26d2cf4e67e8cfdd0b80a95be926c", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/97bacbab57128725887c3c9600bb0ad83ca42e50/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bacbab57128725887c3c9600bb0ad83ca42e50/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=97bacbab57128725887c3c9600bb0ad83ca42e50", "patch": "@@ -115,36 +115,22 @@ pub trait EmissionGuarantee: Sized {\n     ) -> DiagnosticBuilder<'_, Self>;\n }\n \n-/// Private module for sealing the `IsError` helper trait.\n-mod sealed_level_is_error {\n-    use crate::Level;\n-\n-    /// Sealed helper trait for statically checking that a `Level` is an error.\n-    pub(crate) trait IsError<const L: Level> {}\n-\n-    impl IsError<{ Level::Bug }> for () {}\n-    impl IsError<{ Level::DelayedBug }> for () {}\n-    impl IsError<{ Level::Fatal }> for () {}\n-    // NOTE(eddyb) `Level::Error { lint: true }` is also an error, but lints\n-    // don't need error guarantees, as their levels are always dynamic.\n-    impl IsError<{ Level::Error { lint: false } }> for () {}\n-}\n-\n impl<'a> DiagnosticBuilder<'a, ErrorGuaranteed> {\n     /// Convenience function for internal use, clients should use one of the\n     /// `struct_*` methods on [`Handler`].\n     #[track_caller]\n-    pub(crate) fn new_guaranteeing_error<M: Into<DiagnosticMessage>, const L: Level>(\n+    pub(crate) fn new_guaranteeing_error<M: Into<DiagnosticMessage>>(\n         handler: &'a Handler,\n         message: M,\n-    ) -> Self\n-    where\n-        (): sealed_level_is_error::IsError<L>,\n-    {\n+    ) -> Self {\n         Self {\n             inner: DiagnosticBuilderInner {\n                 state: DiagnosticBuilderState::Emittable(handler),\n-                diagnostic: Box::new(Diagnostic::new_with_code(L, None, message)),\n+                diagnostic: Box::new(Diagnostic::new_with_code(\n+                    Level::Error { lint: false },\n+                    None,\n+                    message,\n+                )),\n             },\n             _marker: PhantomData,\n         }\n@@ -203,9 +189,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n         handler: &Handler,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, Self> {\n-        DiagnosticBuilder::new_guaranteeing_error::<_, { Level::Error { lint: false } }>(\n-            handler, msg,\n-        )\n+        DiagnosticBuilder::new_guaranteeing_error(handler, msg)\n     }\n }\n "}, {"sha": "bf77ed81f9bd03475f67b783cc8683fdd6042e02", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97bacbab57128725887c3c9600bb0ad83ca42e50/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bacbab57128725887c3c9600bb0ad83ca42e50/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=97bacbab57128725887c3c9600bb0ad83ca42e50", "patch": "@@ -6,7 +6,6 @@\n #![feature(array_windows)]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n-#![feature(adt_const_params)]\n #![feature(let_chains)]\n #![feature(never_type)]\n #![feature(result_option_inspect)]\n@@ -845,7 +844,7 @@ impl Handler {\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        DiagnosticBuilder::new_guaranteeing_error::<_, { Level::Error { lint: false } }>(self, msg)\n+        DiagnosticBuilder::new_guaranteeing_error(self, msg)\n     }\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors."}]}