{"sha": "29f93ad5072df54fad1009263ca4bfa9c6f911f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjkzYWQ1MDcyZGY1NGZhZDEwMDkyNjNjYTRiZmE5YzZmOTExZjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-14T20:00:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-14T20:00:20Z"}, "message": "Rollup merge of #60788 - froydnj:apple-target-modifications-followup, r=estebank\n\ndefault to $ARCH-apple-macosx10.7.0 LLVM triple for darwin targets\n\nOver in #60378, we made `rustc` switch LLVM target triples dynamically\nbased on the `MACOSX_DEPLOYMENT_TARGET` environment variable.  This\nchange was made to align with `clang`'s behavior, and therefore make\ncross-language LTO feasible on OS X.  Otherwise, `rustc` would produce\nLLVM bitcode files with a target triple of `x86_64-apple-darwin`,\n`clang` would produce LLVM bitcode files with a target triple of\n`x86_64-apple-macosx$VERSION`, and the linker would complain.\n\nThis change worked fine, except for one corner case: if you didn't have\n`MACOSX_DEPLOYMENT_TARGET` set, and you wanted to do LTO on just Rust\ncode, you'd get warning messages similar to:\n\n```\nwarning: Linking two modules of different target triples: ' is 'x86_64-apple-macosx10.7.0' whereas 'main.7rcbfp3g-cgu.4' is 'x86_64-apple-darwin'\n```\n\nThis message occurs because libstd is compiled with\n`MACOSX_DEPLOYMENT_TARGET` set to 10.7.  The LLVM bitcode distributed in\nlibstd's rlibs, then, is tagged with the target triple of\n`x86_64-apple-macosx10.7.0`, while the bitcode `rustc` produces for\n\"user\" code is tagged with the target triple of `x86_64-apple-darwin`.\n\nIt's not good to have LTO on just Rust code (probably much more common\nthan cross-language LTO) warn by default.  These warnings also break\nCargo's testsuite.\n\nThis change defaults to acting as though `MACOSX_DEPLOYMENT_TARGET` was\nset to 10.7.  \"user\" code will then be given a target triple that is\nequivalent to the target triple libstd bitcode is already using.  The\nabove warning will therefore go away.\n\n`rustc` already assumes that compiling without\n`MACOSX_DEPLOYMENT_TARGET` means that we're compiling for a target\ncompatible with OS X 10.7 (e.g. that things like TLS work properly).  So\nthis change is really just making things conform more closely to the\nstatus quo.\n\n(It's also worth noting that before and after this patch, compiling with\n`MACOSX_DEPLOYMENT_TARGET` set to, say, 10.9, works just fine: target\ntriples with an \"apple\" version ignore OS versions when checking\ncompatibility, so bitcode with a `x86_64-apple-macosx10.7.0` triple works just\nfine with bitcode with a `x86_64-apple-macosx10.9.0` triple.)", "tree": {"sha": "925e67169c001a73939fc44808c86de9a5151ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/925e67169c001a73939fc44808c86de9a5151ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f93ad5072df54fad1009263ca4bfa9c6f911f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc2x5UCRBK7hj4Ov3rIwAAdHIIAKkJrtzjh/2/sc9DXwNKmOoC\nS13iKwN6zocvBHLq5HYKHrlfIXyxsrjwC+109Z23VDaE+HZE5ZAvie3kh7eFX0VD\nCRsTYFZDeYSI28XBYm8wuNtlbAm5q2/xSoz+0XBcDans6B0q9PC2J0JLbdL2Z5q+\ni/BEP74WvR61umKm+B+Cmq5Eu8M+roimJC9Dhm6UQaPBhiPxM5hudhBJzT0deusy\nQHcvP6kPCJoMZmMJwGQ87Uoc/Uf4Fqr0l5klZp/+XEtFSgznisREZszxaPfUpER7\nHAGtx13ZRMrVgaV9yC3ek8rB92/McETr0MVGG4zOFKr0OYgL5S2a6t7SQBI8/jQ=\n=Sbfq\n-----END PGP SIGNATURE-----\n", "payload": "tree 925e67169c001a73939fc44808c86de9a5151ff2\nparent 020111adfcb1e2e40aab64987cb3f76618ae4e42\nparent 7e94f9c72ee5eb33f2e373e91ce6dbd36ae30cf8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557864020 +0200\ncommitter GitHub <noreply@github.com> 1557864020 +0200\n\nRollup merge of #60788 - froydnj:apple-target-modifications-followup, r=estebank\n\ndefault to $ARCH-apple-macosx10.7.0 LLVM triple for darwin targets\n\nOver in #60378, we made `rustc` switch LLVM target triples dynamically\nbased on the `MACOSX_DEPLOYMENT_TARGET` environment variable.  This\nchange was made to align with `clang`'s behavior, and therefore make\ncross-language LTO feasible on OS X.  Otherwise, `rustc` would produce\nLLVM bitcode files with a target triple of `x86_64-apple-darwin`,\n`clang` would produce LLVM bitcode files with a target triple of\n`x86_64-apple-macosx$VERSION`, and the linker would complain.\n\nThis change worked fine, except for one corner case: if you didn't have\n`MACOSX_DEPLOYMENT_TARGET` set, and you wanted to do LTO on just Rust\ncode, you'd get warning messages similar to:\n\n```\nwarning: Linking two modules of different target triples: ' is 'x86_64-apple-macosx10.7.0' whereas 'main.7rcbfp3g-cgu.4' is 'x86_64-apple-darwin'\n```\n\nThis message occurs because libstd is compiled with\n`MACOSX_DEPLOYMENT_TARGET` set to 10.7.  The LLVM bitcode distributed in\nlibstd's rlibs, then, is tagged with the target triple of\n`x86_64-apple-macosx10.7.0`, while the bitcode `rustc` produces for\n\"user\" code is tagged with the target triple of `x86_64-apple-darwin`.\n\nIt's not good to have LTO on just Rust code (probably much more common\nthan cross-language LTO) warn by default.  These warnings also break\nCargo's testsuite.\n\nThis change defaults to acting as though `MACOSX_DEPLOYMENT_TARGET` was\nset to 10.7.  \"user\" code will then be given a target triple that is\nequivalent to the target triple libstd bitcode is already using.  The\nabove warning will therefore go away.\n\n`rustc` already assumes that compiling without\n`MACOSX_DEPLOYMENT_TARGET` means that we're compiling for a target\ncompatible with OS X 10.7 (e.g. that things like TLS work properly).  So\nthis change is really just making things conform more closely to the\nstatus quo.\n\n(It's also worth noting that before and after this patch, compiling with\n`MACOSX_DEPLOYMENT_TARGET` set to, say, 10.9, works just fine: target\ntriples with an \"apple\" version ignore OS versions when checking\ncompatibility, so bitcode with a `x86_64-apple-macosx10.7.0` triple works just\nfine with bitcode with a `x86_64-apple-macosx10.9.0` triple.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f93ad5072df54fad1009263ca4bfa9c6f911f3", "html_url": "https://github.com/rust-lang/rust/commit/29f93ad5072df54fad1009263ca4bfa9c6f911f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f93ad5072df54fad1009263ca4bfa9c6f911f3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "020111adfcb1e2e40aab64987cb3f76618ae4e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/020111adfcb1e2e40aab64987cb3f76618ae4e42", "html_url": "https://github.com/rust-lang/rust/commit/020111adfcb1e2e40aab64987cb3f76618ae4e42"}, {"sha": "7e94f9c72ee5eb33f2e373e91ce6dbd36ae30cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e94f9c72ee5eb33f2e373e91ce6dbd36ae30cf8", "html_url": "https://github.com/rust-lang/rust/commit/7e94f9c72ee5eb33f2e373e91ce6dbd36ae30cf8"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "53364e72bfe3ad70e71e49efe893799c8d4ed8b5", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29f93ad5072df54fad1009263ca4bfa9c6f911f3/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93ad5072df54fad1009263ca4bfa9c6f911f3/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=29f93ad5072df54fad1009263ca4bfa9c6f911f3", "patch": "@@ -14,7 +14,7 @@ pub fn opts() -> TargetOptions {\n     //\n     // Here we detect what version is being requested, defaulting to 10.7. ELF\n     // TLS is flagged as enabled if it looks to be supported.\n-    let version = macos_deployment_target().unwrap_or((10, 7));\n+    let version = macos_deployment_target();\n \n     TargetOptions {\n         // macOS has -dead_strip, which doesn't rely on function_sections\n@@ -35,7 +35,7 @@ pub fn opts() -> TargetOptions {\n     }\n }\n \n-fn macos_deployment_target() -> Option<(u32, u32)> {\n+fn macos_deployment_target() -> (u32, u32) {\n     let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n     let version = deployment_target.as_ref().and_then(|s| {\n         let mut i = s.splitn(2, '.');\n@@ -44,17 +44,10 @@ fn macos_deployment_target() -> Option<(u32, u32)> {\n         a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok()\n     });\n \n-    version\n+    version.unwrap_or((10, 7))\n }\n \n pub fn macos_llvm_target(arch: &str) -> String {\n-    let version = macos_deployment_target();\n-    let llvm_target = match version {\n-        Some((major, minor)) => {\n-            format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n-        },\n-        None => format!(\"{}-apple-darwin\", arch)\n-    };\n-\n-    llvm_target\n+    let (major, minor) = macos_deployment_target();\n+    format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }"}, {"sha": "1cebc49236feedf66de871e825385ee66413d068", "filename": "src/test/codegen/i686-no-macosx-deployment-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f93ad5072df54fad1009263ca4bfa9c6f911f3/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93ad5072df54fad1009263ca4bfa9c6f911f3/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fi686-no-macosx-deployment-target.rs?ref=29f93ad5072df54fad1009263ca4bfa9c6f911f3", "patch": "@@ -19,7 +19,7 @@ pub struct Bool {\n     b: bool,\n }\n \n-// CHECK: target triple = \"i686-apple-darwin\"\n+// CHECK: target triple = \"i686-apple-macosx10.7.0\"\n #[no_mangle]\n pub extern \"C\" fn structbool() -> Bool {\n     Bool { b: true }"}, {"sha": "c5ac73b54e186c065fc32343ccd3d41925e42875", "filename": "src/test/codegen/x86_64-no-macosx-deployment-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29f93ad5072df54fad1009263ca4bfa9c6f911f3/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f93ad5072df54fad1009263ca4bfa9c6f911f3/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_64-no-macosx-deployment-target.rs?ref=29f93ad5072df54fad1009263ca4bfa9c6f911f3", "patch": "@@ -19,7 +19,7 @@ pub struct Bool {\n     b: bool,\n }\n \n-// CHECK: target triple = \"x86_64-apple-darwin\"\n+// CHECK: target triple = \"x86_64-apple-macosx10.7.0\"\n #[no_mangle]\n pub extern \"C\" fn structbool() -> Bool {\n     Bool { b: true }"}]}