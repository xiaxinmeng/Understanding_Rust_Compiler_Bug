{"sha": "4cc2cabee25a2ea74d13720c980bfd0379b9945a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYzJjYWJlZTI1YTJlYTc0ZDEzNzIwYzk4MGJmZDAzNzliOTk0NWE=", "commit": {"author": {"name": "DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-23T12:54:58Z"}, "committer": {"name": "DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-23T12:54:58Z"}, "message": "        change offset from u32 to u64", "tree": {"sha": "668ea6b65341b0bd590e8c08b5004a267213af88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/668ea6b65341b0bd590e8c08b5004a267213af88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cc2cabee25a2ea74d13720c980bfd0379b9945a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc2cabee25a2ea74d13720c980bfd0379b9945a", "html_url": "https://github.com/rust-lang/rust/commit/4cc2cabee25a2ea74d13720c980bfd0379b9945a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cc2cabee25a2ea74d13720c980bfd0379b9945a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663d2f5cd3163f17eddb74ee1e028d542255f21a", "url": "https://api.github.com/repos/rust-lang/rust/commits/663d2f5cd3163f17eddb74ee1e028d542255f21a", "html_url": "https://github.com/rust-lang/rust/commit/663d2f5cd3163f17eddb74ee1e028d542255f21a"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "7ac7d9b23f172640686813b74489b4352fb7d823", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -1564,10 +1564,10 @@ pub enum ProjectionElem<V, T> {\n     /// ```\n     ConstantIndex {\n         /// index or -index (in Python terms), depending on from_end\n-        offset: u32,\n+        offset: u64,\n         /// The thing being indexed must be at least this long. For arrays this\n         /// is always the exact length.\n-        min_length: u32,\n+        min_length: u64,\n         /// Counting backwards from end? This is always false when indexing an\n         /// array.\n         from_end: bool,\n@@ -1578,8 +1578,8 @@ pub enum ProjectionElem<V, T> {\n     /// If `from_end` is true `slice[from..slice.len() - to]`.\n     /// Otherwise `array[from..to]`.\n     Subslice {\n-        from: u32,\n-        to: u32,\n+        from: u64,\n+        to: u64,\n         /// Whether `to` counts from the start or end of the array/slice.\n         /// For `PlaceElem`s this is `true` if and only if the base is a slice.\n         /// For `ProjectionKind`, this can also be `true` for arrays.\n@@ -1616,7 +1616,7 @@ pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n \n // At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PlaceElem<'_>, 16);\n+static_assert_size!(PlaceElem<'_>, 24);\n \n /// Alias for projections as they appear in `UserTypeProjection`, where we\n /// need neither the `V` parameter for `Index` nor the `T` for `Field`.\n@@ -2330,7 +2330,7 @@ impl<'tcx> UserTypeProjections {\n         self.map_projections(|pat_ty_proj| pat_ty_proj.index())\n     }\n \n-    pub fn subslice(self, from: u32, to: u32) -> Self {\n+    pub fn subslice(self, from: u64, to: u64) -> Self {\n         self.map_projections(|pat_ty_proj| pat_ty_proj.subslice(from, to))\n     }\n \n@@ -2376,7 +2376,7 @@ impl UserTypeProjection {\n         self\n     }\n \n-    pub(crate) fn subslice(mut self, from: u32, to: u32) -> Self {\n+    pub(crate) fn subslice(mut self, from: u64, to: u64) -> Self {\n         self.projs.push(ProjectionElem::Subslice { from, to, from_end: true });\n         self\n     }"}, {"sha": "b486b8b589cfddeba3104056346e55746e9084c0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -1694,8 +1694,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         desired_action: InitializationRequiringAction,\n         place_span: (PlaceRef<'tcx>, Span),\n         maybe_uninits: &BitSet<MovePathIndex>,\n-        from: u32,\n-        to: u32,\n+        from: u64,\n+        to: u64,\n     ) {\n         if let Some(mpi) = self.move_path_for_place(place_span.0) {\n             let move_paths = &self.move_data.move_paths;"}, {"sha": "e088dc6a954a3b451975e2a9aa9028bb885632ab", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -480,7 +480,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n             };\n             let base_ty = base_place.ty(self.builder.body, self.builder.tcx).ty;\n-            let len: u32 = match base_ty.kind {\n+            let len: u64 = match base_ty.kind {\n                 ty::Array(_, size) => {\n                     let length = size.eval_usize(self.builder.tcx, self.builder.param_env);\n                     length"}, {"sha": "883c87da35c97851c5bbacc483f064d64028446f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -295,7 +295,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     fn downcast_subpath(&self, _path: Self::Path, _variant: VariantIdx) -> Option<Self::Path> {\n         Some(())\n     }\n-    fn array_subpath(&self, _path: Self::Path, _index: u32, _size: u32) -> Option<Self::Path> {\n+    fn array_subpath(&self, _path: Self::Path, _index: u64, _size: u64) -> Option<Self::Path> {\n         None\n     }\n }"}, {"sha": "5f1930693568cc83a8d8a9c8c9adb313738d3f65", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         })\n     }\n \n-    fn array_subpath(&self, path: Self::Path, index: u32, size: u32) -> Option<Self::Path> {\n+    fn array_subpath(&self, path: Self::Path, index: u64, size: u64) -> Option<Self::Path> {\n         dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::ConstantIndex { offset, min_length, from_end } => {\n                 debug_assert!(size == min_length, \"min_length should be exact for arrays\");"}, {"sha": "e867e8b40850fefa886983a97426d96b9861bbf9", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -52,14 +52,12 @@ pub fn expand_aggregate<'tcx>(\n         .enumerate()\n         .map(move |(i, (op, ty))| {\n             let lhs_field = if let AggregateKind::Array(_) = kind {\n-                // FIXME(eddyb) `offset` should be u64.\n-                let offset = i as u32;\n+                let offset = i as u64;\n                 assert_eq!(offset as usize, i);\n                 tcx.mk_place_elem(\n                     lhs,\n                     ProjectionElem::ConstantIndex {\n                         offset,\n-                        // FIXME(eddyb) `min_length` doesn't appear to be used.\n                         min_length: offset + 1,\n                         from_end: false,\n                     },"}, {"sha": "6acbb0ad4db209d1d7b583dfc8b917b4910f7095", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -150,7 +150,7 @@ pub trait DropElaborator<'a, 'tcx>: fmt::Debug {\n     /// If this returns `None`, elements of `path` will not get a dedicated drop flag.\n     ///\n     /// This is only relevant for array patterns, which can move out of individual array elements.\n-    fn array_subpath(&self, path: Self::Path, index: u32, size: u32) -> Option<Self::Path>;\n+    fn array_subpath(&self, path: Self::Path, index: u64, size: u64) -> Option<Self::Path>;\n }\n \n #[derive(Debug)]\n@@ -744,8 +744,8 @@ where\n         let tcx = self.tcx();\n \n         if let Some(size) = opt_size {\n-            let size: u32 = size.try_into().unwrap_or_else(|_| {\n-                bug!(\"move out check isn't implemented for array sizes bigger than u32::MAX\");\n+            let size: u64 = size.try_into().unwrap_or_else(|_| {\n+                bug!(\"move out check isn't implemented for array sizes bigger than u64::MAX\");\n             });\n             let fields: Vec<(Place<'tcx>, Option<D::Path>)> = (0..size)\n                 .map(|i| {"}, {"sha": "3a525d10b08175cda5f8976e181f073ba7b64e78", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -609,8 +609,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::Array { ref prefix, ref slice, ref suffix }\n             | PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n-                let from = u32::try_from(prefix.len()).unwrap();\n-                let to = u32::try_from(suffix.len()).unwrap();\n+                let from = u64::try_from(prefix.len()).unwrap();\n+                let to = u64::try_from(suffix.len()).unwrap();\n                 for subpattern in prefix {\n                     self.visit_primary_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }"}, {"sha": "c6d39947f7d153842790ca06a9786665c51e1363", "filename": "src/librustc_mir_build/build/matches/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cc2cabee25a2ea74d13720c980bfd0379b9945a/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs?ref=4cc2cabee25a2ea74d13720c980bfd0379b9945a", "patch": "@@ -40,17 +40,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         match_pairs.extend(prefix.iter().enumerate().map(|(idx, subpattern)| {\n             let elem =\n-                ProjectionElem::ConstantIndex { offset: idx as u32, min_length, from_end: false };\n+                ProjectionElem::ConstantIndex { offset: idx as u64, min_length, from_end: false };\n             let place = tcx.mk_place_elem(*place, elem);\n             MatchPair::new(place, subpattern)\n         }));\n \n         if let Some(subslice_pat) = opt_slice {\n-            let suffix_len = suffix.len() as u32;\n+            let suffix_len = suffix.len() as u64;\n             let subslice = tcx.mk_place_elem(\n                 *place,\n                 ProjectionElem::Subslice {\n-                    from: prefix.len() as u32,\n+                    from: prefix.len() as u64,\n                     to: if exact_size { min_length - suffix_len } else { suffix_len },\n                     from_end: !exact_size,\n                 },\n@@ -59,7 +59,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         match_pairs.extend(suffix.iter().rev().enumerate().map(|(idx, subpattern)| {\n-            let end_offset = (idx + 1) as u32;\n+            let end_offset = (idx + 1) as u64;\n             let elem = ProjectionElem::ConstantIndex {\n                 offset: if exact_size { min_length - end_offset } else { end_offset },\n                 min_length,"}]}