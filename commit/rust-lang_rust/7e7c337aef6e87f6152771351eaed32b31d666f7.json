{"sha": "7e7c337aef6e87f6152771351eaed32b31d666f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlN2MzMzdhZWY2ZTg3ZjYxNTI3NzEzNTFlYWVkMzJiMzFkNjY2Zjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-24T17:53:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-31T02:36:46Z"}, "message": "stabilize const_int_wrapping.", "tree": {"sha": "efaa2a1144787c3045440f8176fc2858aa20cf71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efaa2a1144787c3045440f8176fc2858aa20cf71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7c337aef6e87f6152771351eaed32b31d666f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7c337aef6e87f6152771351eaed32b31d666f7", "html_url": "https://github.com/rust-lang/rust/commit/7e7c337aef6e87f6152771351eaed32b31d666f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7c337aef6e87f6152771351eaed32b31d666f7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b0f247bf741a1a9729363dda8628a938f1fe58", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b0f247bf741a1a9729363dda8628a938f1fe58", "html_url": "https://github.com/rust-lang/rust/commit/a2b0f247bf741a1a9729363dda8628a938f1fe58"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "a613c1afd09bae2cd8e47c7cb0a3b721e03c5a85", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c337aef6e87f6152771351eaed32b31d666f7/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c337aef6e87f6152771351eaed32b31d666f7/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7e7c337aef6e87f6152771351eaed32b31d666f7", "patch": "@@ -114,7 +114,6 @@\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n #![feature(const_int_rotate)]\n-#![feature(const_int_wrapping)]\n #![feature(const_int_sign)]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]"}, {"sha": "58ea651aa83f2f14b009698cfd242538b162b144", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c337aef6e87f6152771351eaed32b31d666f7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c337aef6e87f6152771351eaed32b31d666f7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7e7c337aef6e87f6152771351eaed32b31d666f7", "patch": "@@ -994,7 +994,7 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!(\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n                 unsafe {\n@@ -1018,7 +1018,7 @@ stringify!($SelfT), \"::max_value());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n                 unsafe {\n@@ -1041,7 +1041,7 @@ assert_eq!(11i8.wrapping_mul(12), -124);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n                 unsafe {\n@@ -1205,7 +1205,7 @@ assert_eq!((-1\", stringify!($SelfT), \").wrapping_shl(128), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1233,7 +1233,7 @@ assert_eq!((-128i16).wrapping_shr(64), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -2884,7 +2884,7 @@ assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n                 unsafe {\n@@ -2907,7 +2907,7 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n                 unsafe {\n@@ -2931,7 +2931,7 @@ $EndFeature, \"\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+        #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n             unsafe {\n@@ -3081,7 +3081,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -3111,7 +3111,7 @@ Basic usage:\n assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_wrapping\")]\n+            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {"}, {"sha": "f271fbaa55b8426b7a9ebf3d3e9b2d2a9ef6acf2", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e7c337aef6e87f6152771351eaed32b31d666f7/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7c337aef6e87f6152771351eaed32b31d666f7/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=7e7c337aef6e87f6152771351eaed32b31d666f7", "patch": "@@ -342,15 +342,11 @@ fn check_terminator(\n                 // some intrinsics are waved through if called inside the\n                 // standard library. Users never need to call them directly\n                 match tcx.fn_sig(def_id).abi() {\n-                    abi::Abi::RustIntrinsic => match &tcx.item_name(def_id).as_str()[..] {\n-                        | \"size_of\"\n-                        | \"min_align_of\"\n-                        | \"needs_drop\"\n-                        => {},\n-                        _ => return Err((\n+                    abi::Abi::RustIntrinsic => if !is_intrinsic_whitelisted(tcx, def_id) {\n+                        return Err((\n                             span,\n                             \"can only call a curated list of intrinsics in `min_const_fn`\".into(),\n-                        )),\n+                        ))\n                     },\n                     abi::Abi::Rust if tcx.is_min_const_fn(def_id) => {},\n                     abi::Abi::Rust => return Err((\n@@ -390,3 +386,22 @@ fn check_terminator(\n         },\n     }\n }\n+\n+/// Returns true if the `def_id` refers to an intrisic which we've whitelisted.\n+///\n+/// Adding more intrinsics requires sign-off from @rust-lang/lang.\n+fn is_intrinsic_whitelisted(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    match &tcx.item_name(def_id).as_str()[..] {\n+        | \"size_of\"\n+        | \"min_align_of\"\n+        | \"needs_drop\"\n+        // Arithmetic:\n+        | \"overflowing_add\" // ~> wrapping_add\n+        | \"overflowing_sub\" // ~> wrapping_sub\n+        | \"overflowing_mul\" // ~> wrapping_mul\n+        | \"unchecked_shl\" // ~> wrapping_shl\n+        | \"unchecked_shr\" // ~> wrapping_shr\n+        => true,\n+        _ => false,\n+    }\n+}"}]}