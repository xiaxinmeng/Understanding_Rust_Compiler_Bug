{"sha": "4f5563d0275118cbebbc2a3d3d60be1a7600adaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTU2M2QwMjc1MTE4Y2JlYmJjMmEzZDNkNjBiZTFhNzYwMGFkYWE=", "commit": {"author": {"name": "Orson Peters", "email": "orsonpeters@gmail.com", "date": "2021-09-09T14:58:41Z"}, "committer": {"name": "Orson Peters", "email": "orsonpeters@gmail.com", "date": "2021-09-09T14:58:41Z"}, "message": "Added abs_diff for integer types.", "tree": {"sha": "0cf7b6055e7663ed151b442c28788225ec9e7dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf7b6055e7663ed151b442c28788225ec9e7dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5563d0275118cbebbc2a3d3d60be1a7600adaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5563d0275118cbebbc2a3d3d60be1a7600adaa", "html_url": "https://github.com/rust-lang/rust/commit/4f5563d0275118cbebbc2a3d3d60be1a7600adaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5563d0275118cbebbc2a3d3d60be1a7600adaa/comments", "author": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "orlp", "id": 202547, "node_id": "MDQ6VXNlcjIwMjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/202547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orlp", "html_url": "https://github.com/orlp", "followers_url": "https://api.github.com/users/orlp/followers", "following_url": "https://api.github.com/users/orlp/following{/other_user}", "gists_url": "https://api.github.com/users/orlp/gists{/gist_id}", "starred_url": "https://api.github.com/users/orlp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orlp/subscriptions", "organizations_url": "https://api.github.com/users/orlp/orgs", "repos_url": "https://api.github.com/users/orlp/repos", "events_url": "https://api.github.com/users/orlp/events{/privacy}", "received_events_url": "https://api.github.com/users/orlp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "187be5d47573a7fb505d82839ded707b502f4ad6", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4f5563d0275118cbebbc2a3d3d60be1a7600adaa/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5563d0275118cbebbc2a3d3d60be1a7600adaa/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=4f5563d0275118cbebbc2a3d3d60be1a7600adaa", "patch": "@@ -2227,6 +2227,46 @@ macro_rules! int_impl {\n             }\n         }\n \n+        /// Computes the absolute difference between `self` and `other`.\n+        ///\n+        /// This function always returns the correct answer without overflow or\n+        /// panics by returning an unsigned integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_abs_diff)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(80), 180\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(-120), 20\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n+        /// ```\n+        #[unstable(feature = \"int_abs_diff\", issue = \"none\")]\n+        #[inline]\n+        pub const fn abs_diff(self, other: Self) -> $UnsignedT {\n+            if self < other {\n+                // Converting a non-negative x from signed to unsigned by using\n+                // `x as U` is left unchanged, but a negative x is converted\n+                // to value x + 2^N. Thus if `s` and `o` are binary variables\n+                // respectively indicating whether `self` and `other` are\n+                // negative, we are computing the mathematical value:\n+                //\n+                //    (other + o*2^N) - (self + s*2^N)    mod  2^N\n+                //    other - self + (o-s)*2^N            mod  2^N\n+                //    other - self                        mod  2^N\n+                //\n+                // Finally, taking the mod 2^N of the mathematical value of\n+                // `other - self` does not change it as it already is\n+                // in the range [0, 2^N).\n+                (other as $UnsignedT).wrapping_sub(self as $UnsignedT)\n+            } else {\n+                (self as $UnsignedT).wrapping_sub(other as $UnsignedT)\n+            }\n+        }\n+\n         /// Returns a number representing sign of `self`.\n         ///\n         ///  - `0` if the number is zero"}, {"sha": "1bba4179f99552a1b4bbad289c1af0585dc21d63", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4f5563d0275118cbebbc2a3d3d60be1a7600adaa/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5563d0275118cbebbc2a3d3d60be1a7600adaa/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=4f5563d0275118cbebbc2a3d3d60be1a7600adaa", "patch": "@@ -1490,6 +1490,27 @@ macro_rules! uint_impl {\n             (c, b | d)\n         }\n \n+        /// Computes the absolute difference between `self` and `other`.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_abs_diff)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($SelfT), \");\")]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n+        /// ```\n+        #[unstable(feature = \"int_abs_diff\", issue = \"none\")]\n+        #[inline]\n+        pub const fn abs_diff(self, other: Self) -> Self {\n+            if self < other {\n+                other - self\n+            } else {\n+                self - other\n+            }\n+        }\n+\n         /// Calculates the multiplication of `self` and `rhs`.\n         ///\n         /// Returns a tuple of the multiplication along with a boolean"}]}