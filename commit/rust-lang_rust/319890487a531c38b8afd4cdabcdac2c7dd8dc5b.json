{"sha": "319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTg5MDQ4N2E1MzFjMzhiOGFmZDRjZGFiY2RhYzJjN2RkOGRjNWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-07T14:17:16Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-08T12:36:19Z"}, "message": "Disallow subtyping between T and U in T: Unsize<U>.", "tree": {"sha": "42d616ede034de183c99a8abdda6816a48e2295a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d616ede034de183c99a8abdda6816a48e2295a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "html_url": "https://github.com/rust-lang/rust/commit/319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04ebef43242ade6be8968694caf56a0fb00a4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04ebef43242ade6be8968694caf56a0fb00a4d3", "html_url": "https://github.com/rust-lang/rust/commit/b04ebef43242ade6be8968694caf56a0fb00a4d3"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "38ea1e4a19b91f536e989da9610cc1547384e700", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "patch": "@@ -2461,7 +2461,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let new_trait = tcx.mk_dynamic(\n                     ty::Binder(tcx.mk_existential_predicates(iter)), r_b);\n                 let InferOk { obligations, .. } =\n-                    self.infcx.sub_types(false, &obligation.cause, new_trait, target)\n+                    self.infcx.eq_types(false, &obligation.cause, new_trait, target)\n                     .map_err(|_| Unimplemented)?;\n                 self.inferred_obligations.extend(obligations);\n \n@@ -2520,7 +2520,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             // [T; n] -> [T].\n             (&ty::TyArray(a, _), &ty::TySlice(b)) => {\n                 let InferOk { obligations, .. } =\n-                    self.infcx.sub_types(false, &obligation.cause, a, b)\n+                    self.infcx.eq_types(false, &obligation.cause, a, b)\n                     .map_err(|_| Unimplemented)?;\n                 self.inferred_obligations.extend(obligations);\n             }\n@@ -2583,7 +2583,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 });\n                 let new_struct = tcx.mk_adt(def, tcx.mk_substs(params));\n                 let InferOk { obligations, .. } =\n-                    self.infcx.sub_types(false, &obligation.cause, new_struct, target)\n+                    self.infcx.eq_types(false, &obligation.cause, new_struct, target)\n                     .map_err(|_| Unimplemented)?;\n                 self.inferred_obligations.extend(obligations);\n "}, {"sha": "c1e8cb8b6defb231e9594736b31ae80165decbf8", "filename": "src/test/compile-fail/issue-40288-2.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/src%2Ftest%2Fcompile-fail%2Fissue-40288-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/src%2Ftest%2Fcompile-fail%2Fissue-40288-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40288-2.rs?ref=319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn prove_static<T: 'static + ?Sized>(_: &'static T) {}\n+\n+fn lifetime_transmute_slice<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n+    let mut out = [x];\n+    //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+    {\n+        let slice: &mut [_] = &mut out;\n+        slice[0] = y;\n+    }\n+    out[0]\n+}\n+\n+struct Struct<T, U: ?Sized> {\n+    head: T,\n+    _tail: U\n+}\n+\n+fn lifetime_transmute_struct<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n+    let mut out = Struct { head: x, _tail: [()] };\n+    //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+    {\n+        let dst: &mut Struct<_, [()]> = &mut out;\n+        dst.head = y;\n+    }\n+    out.head\n+}\n+\n+fn main() {\n+    prove_static(lifetime_transmute_slice(\"\", &String::from(\"foo\")));\n+    prove_static(lifetime_transmute_struct(\"\", &String::from(\"bar\")));\n+}"}, {"sha": "b5418e85bec784b04afc64488c57009701132eb2", "filename": "src/test/compile-fail/issue-40288.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/src%2Ftest%2Fcompile-fail%2Fissue-40288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319890487a531c38b8afd4cdabcdac2c7dd8dc5b/src%2Ftest%2Fcompile-fail%2Fissue-40288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40288.rs?ref=319890487a531c38b8afd4cdabcdac2c7dd8dc5b", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn save_ref<'a>(refr: &'a i32, to: &mut [&'a i32]) {\n+    for val in &mut *to {\n+        *val = refr;\n+    }\n+}\n+\n+fn main() {\n+    let ref init = 0i32;\n+    let ref mut refr = 1i32;\n+\n+    let mut out = [init];\n+\n+    save_ref(&*refr, &mut out);\n+\n+    // This shouldn't be allowed as `refr` is borrowed\n+    *refr = 3; //~ ERROR cannot assign to `*refr` because it is borrowed\n+\n+    // Prints 3?!\n+    println!(\"{:?}\", out[0]);\n+}"}]}