{"sha": "b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTA4MWMyZWI3ZmU3ODlmNDI4ZmZjZDIwZjQ5NTQ5YzdjYTg0ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T16:55:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-22T16:55:16Z"}, "message": "Auto merge of #38648 - utkarshkukreti:question-mark-in-libstd-documentation-examples, r=pnkfelix,steveklabnik,frewsxcvx\n\nlibstd: replace all `try!` with `?` in documentation examples\n\nSee #38644.\n\nFor the record, I used the following Perl one-liner and then manually fixed a couple of things it got wrong:\n\n    $ perl -p -i -e 's#(///.*)try!\\((.*)\\)#$1$2?#' src/libstd/**/*.rs", "tree": {"sha": "6312735bc66c44fcee2fb142fe73fad868af398c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6312735bc66c44fcee2fb142fe73fad868af398c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "html_url": "https://github.com/rust-lang/rust/commit/b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f705575452e04ce2d8cb88e5f5accdc4d54e650", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f705575452e04ce2d8cb88e5f5accdc4d54e650", "html_url": "https://github.com/rust-lang/rust/commit/9f705575452e04ce2d8cb88e5f5accdc4d54e650"}, {"sha": "19724d34d2b223f940363cc07aa83a8a530f8093", "url": "https://api.github.com/repos/rust-lang/rust/commits/19724d34d2b223f940363cc07aa83a8a530f8093", "html_url": "https://github.com/rust-lang/rust/commit/19724d34d2b223f940363cc07aa83a8a530f8093"}], "stats": {"total": 326, "additions": 163, "deletions": 163}, "files": [{"sha": "80c64ae860f8fcaee61259bd4ddd14bc650e6f44", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -497,7 +497,7 @@ pub fn home_dir() -> Option<PathBuf> {\n /// let mut dir = env::temp_dir();\n /// dir.push(\"foo.txt\");\n ///\n-/// let f = try!(File::create(dir));\n+/// let f = File::create(dir)?;\n /// # Ok(())\n /// # }\n /// ```"}, {"sha": "f1dc36ae79335d363c875066dbf2772166e12b27", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -42,8 +42,8 @@ use time::SystemTime;\n /// use std::io::prelude::*;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let mut file = try!(File::create(\"foo.txt\"));\n-/// try!(file.write_all(b\"Hello, world!\"));\n+/// let mut file = File::create(\"foo.txt\")?;\n+/// file.write_all(b\"Hello, world!\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -55,9 +55,9 @@ use time::SystemTime;\n /// use std::io::prelude::*;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let mut file = try!(File::open(\"foo.txt\"));\n+/// let mut file = File::open(\"foo.txt\")?;\n /// let mut contents = String::new();\n-/// try!(file.read_to_string(&mut contents));\n+/// file.read_to_string(&mut contents)?;\n /// assert_eq!(contents, \"Hello, world!\");\n /// # Ok(())\n /// # }\n@@ -72,10 +72,10 @@ use time::SystemTime;\n /// use std::io::prelude::*;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let file = try!(File::open(\"foo.txt\"));\n+/// let file = File::open(\"foo.txt\")?;\n /// let mut buf_reader = BufReader::new(file);\n /// let mut contents = String::new();\n-/// try!(buf_reader.read_to_string(&mut contents));\n+/// buf_reader.read_to_string(&mut contents)?;\n /// assert_eq!(contents, \"Hello, world!\");\n /// # Ok(())\n /// # }\n@@ -227,7 +227,7 @@ impl File {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -251,7 +251,7 @@ impl File {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::create(\"foo.txt\"));\n+    /// let mut f = File::create(\"foo.txt\")?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -272,10 +272,10 @@ impl File {\n     /// use std::io::prelude::*;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::create(\"foo.txt\"));\n-    /// try!(f.write_all(b\"Hello, world!\"));\n+    /// let mut f = File::create(\"foo.txt\")?;\n+    /// f.write_all(b\"Hello, world!\")?;\n     ///\n-    /// try!(f.sync_all());\n+    /// f.sync_all()?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -303,10 +303,10 @@ impl File {\n     /// use std::io::prelude::*;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::create(\"foo.txt\"));\n-    /// try!(f.write_all(b\"Hello, world!\"));\n+    /// let mut f = File::create(\"foo.txt\")?;\n+    /// f.write_all(b\"Hello, world!\")?;\n     ///\n-    /// try!(f.sync_data());\n+    /// f.sync_data()?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -333,8 +333,8 @@ impl File {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::create(\"foo.txt\"));\n-    /// try!(f.set_len(10));\n+    /// let mut f = File::create(\"foo.txt\")?;\n+    /// f.set_len(10)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -351,8 +351,8 @@ impl File {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let mut f = File::open(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -373,8 +373,8 @@ impl File {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n-    /// let file_copy = try!(f.try_clone());\n+    /// let mut f = File::open(\"foo.txt\")?;\n+    /// let file_copy = f.try_clone()?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -691,7 +691,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// println!(\"{:?}\", metadata.file_type());\n     /// # Ok(())\n@@ -710,7 +710,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// assert!(!metadata.is_dir());\n     /// # Ok(())\n@@ -727,7 +727,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// assert!(metadata.is_file());\n     /// # Ok(())\n@@ -744,7 +744,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// assert_eq!(0, metadata.len());\n     /// # Ok(())\n@@ -761,7 +761,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// assert!(!metadata.permissions().readonly());\n     /// # Ok(())\n@@ -788,7 +788,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// if let Ok(time) = metadata.modified() {\n     ///     println!(\"{:?}\", time);\n@@ -823,7 +823,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// if let Ok(time) = metadata.accessed() {\n     ///     println!(\"{:?}\", time);\n@@ -854,7 +854,7 @@ impl Metadata {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     ///\n     /// if let Ok(time) = metadata.created() {\n     ///     println!(\"{:?}\", time);\n@@ -898,8 +898,8 @@ impl Permissions {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::create(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let mut f = File::create(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     ///\n     /// assert_eq!(false, metadata.permissions().readonly());\n     /// # Ok(())\n@@ -919,8 +919,8 @@ impl Permissions {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let f = try!(File::create(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let f = File::create(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     /// let mut permissions = metadata.permissions();\n     ///\n     /// permissions.set_readonly(true);\n@@ -948,7 +948,7 @@ impl FileType {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     /// let file_type = metadata.file_type();\n     ///\n     /// assert_eq!(file_type.is_dir(), false);\n@@ -966,7 +966,7 @@ impl FileType {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let metadata = fs::metadata(\"foo.txt\")?;\n     /// let file_type = metadata.file_type();\n     ///\n     /// assert_eq!(file_type.is_file(), true);\n@@ -995,7 +995,7 @@ impl FileType {\n     /// # fn foo() -> std::io::Result<()> {\n     /// use std::fs;\n     ///\n-    /// let metadata = try!(fs::symlink_metadata(\"foo.txt\"));\n+    /// let metadata = fs::symlink_metadata(\"foo.txt\")?;\n     /// let file_type = metadata.file_type();\n     ///\n     /// assert_eq!(file_type.is_symlink(), false);\n@@ -1040,8 +1040,8 @@ impl DirEntry {\n     /// ```\n     /// use std::fs;\n     /// # fn foo() -> std::io::Result<()> {\n-    /// for entry in try!(fs::read_dir(\".\")) {\n-    ///     let dir = try!(entry);\n+    /// for entry in fs::read_dir(\".\")? {\n+    ///     let dir = entry?;\n     ///     println!(\"{:?}\", dir.path());\n     /// }\n     /// # Ok(())\n@@ -1193,7 +1193,7 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::remove_file(\"a.txt\"));\n+/// fs::remove_file(\"a.txt\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1229,7 +1229,7 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///\n-/// let attr = try!(fs::metadata(\"/some/file/path.txt\"));\n+/// let attr = fs::metadata(\"/some/file/path.txt\")?;\n /// // inspect attr ...\n /// # Ok(())\n /// # }\n@@ -1262,7 +1262,7 @@ pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///\n-/// let attr = try!(fs::symlink_metadata(\"/some/file/path.txt\"));\n+/// let attr = fs::symlink_metadata(\"/some/file/path.txt\")?;\n /// // inspect attr ...\n /// # Ok(())\n /// # }\n@@ -1305,7 +1305,7 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::rename(\"a.txt\", \"b.txt\")); // Rename a.txt to b.txt\n+/// fs::rename(\"a.txt\", \"b.txt\")?; // Rename a.txt to b.txt\n /// # Ok(())\n /// # }\n /// ```\n@@ -1349,7 +1349,7 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::copy(\"foo.txt\", \"bar.txt\"));  // Copy foo.txt to bar.txt\n+/// fs::copy(\"foo.txt\", \"bar.txt\")?;  // Copy foo.txt to bar.txt\n /// # Ok(()) }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1382,7 +1382,7 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::hard_link(\"a.txt\", \"b.txt\")); // Hard link a.txt to b.txt\n+/// fs::hard_link(\"a.txt\", \"b.txt\")?; // Hard link a.txt to b.txt\n /// # Ok(())\n /// # }\n /// ```\n@@ -1405,7 +1405,7 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::soft_link(\"a.txt\", \"b.txt\"));\n+/// fs::soft_link(\"a.txt\", \"b.txt\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1441,7 +1441,7 @@ pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let path = try!(fs::read_link(\"a.txt\"));\n+/// let path = fs::read_link(\"a.txt\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1474,7 +1474,7 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let path = try!(fs::canonicalize(\"../a/../foo.txt\"));\n+/// let path = fs::canonicalize(\"../a/../foo.txt\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1506,7 +1506,7 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::create_dir(\"/some/dir\"));\n+/// fs::create_dir(\"/some/dir\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1541,7 +1541,7 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::create_dir_all(\"/some/dir\"));\n+/// fs::create_dir_all(\"/some/dir\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1573,7 +1573,7 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::remove_dir(\"/some/dir\"));\n+/// fs::remove_dir(\"/some/dir\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1606,7 +1606,7 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// use std::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::remove_dir_all(\"/some/dir\"));\n+/// fs::remove_dir_all(\"/some/dir\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1649,11 +1649,11 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// // one possible implementation of walking a directory only visiting files\n /// fn visit_dirs(dir: &Path, cb: &Fn(&DirEntry)) -> io::Result<()> {\n ///     if dir.is_dir() {\n-///         for entry in try!(fs::read_dir(dir)) {\n-///             let entry = try!(entry);\n+///         for entry in fs::read_dir(dir)? {\n+///             let entry = entry?;\n ///             let path = entry.path();\n ///             if path.is_dir() {\n-///                 try!(visit_dirs(&path, cb));\n+///                 visit_dirs(&path, cb)?;\n ///             } else {\n ///                 cb(&entry);\n ///             }\n@@ -1690,9 +1690,9 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///\n-/// let mut perms = try!(fs::metadata(\"foo.txt\")).permissions();\n+/// let mut perms = fs::metadata(\"foo.txt\")?.permissions();\n /// perms.set_readonly(true);\n-/// try!(fs::set_permissions(\"foo.txt\", perms));\n+/// fs::set_permissions(\"foo.txt\", perms)?;\n /// # Ok(())\n /// # }\n /// ```"}, {"sha": "f98a3a87b018f219f301f6e73f76d9d497e22e82", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -37,11 +37,11 @@ use memchr;\n /// use std::fs::File;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let mut f = try!(File::open(\"log.txt\"));\n+/// let mut f = File::open(\"log.txt\")?;\n /// let mut reader = BufReader::new(f);\n ///\n /// let mut line = String::new();\n-/// let len = try!(reader.read_line(&mut line));\n+/// let len = reader.read_line(&mut line)?;\n /// println!(\"First line is {} bytes long\", len);\n /// # Ok(())\n /// # }\n@@ -64,7 +64,7 @@ impl<R: Read> BufReader<R> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::open(\"log.txt\"));\n+    /// let mut f = File::open(\"log.txt\")?;\n     /// let mut reader = BufReader::new(f);\n     /// # Ok(())\n     /// # }\n@@ -85,7 +85,7 @@ impl<R: Read> BufReader<R> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = try!(File::open(\"log.txt\"));\n+    /// let mut f = File::open(\"log.txt\")?;\n     /// let mut reader = BufReader::with_capacity(10, f);\n     /// # Ok(())\n     /// # }\n@@ -111,7 +111,7 @@ impl<R: Read> BufReader<R> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f1 = try!(File::open(\"log.txt\"));\n+    /// let mut f1 = File::open(\"log.txt\")?;\n     /// let mut reader = BufReader::new(f1);\n     ///\n     /// let f2 = reader.get_ref();\n@@ -132,7 +132,7 @@ impl<R: Read> BufReader<R> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f1 = try!(File::open(\"log.txt\"));\n+    /// let mut f1 = File::open(\"log.txt\")?;\n     /// let mut reader = BufReader::new(f1);\n     ///\n     /// let f2 = reader.get_mut();\n@@ -153,7 +153,7 @@ impl<R: Read> BufReader<R> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f1 = try!(File::open(\"log.txt\"));\n+    /// let mut f1 = File::open(\"log.txt\")?;\n     /// let mut reader = BufReader::new(f1);\n     ///\n     /// let f2 = reader.into_inner();\n@@ -632,18 +632,18 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// I took the one less traveled by,\n /// And that has made all the difference.\";\n ///\n-/// let file = try!(File::create(\"poem.txt\"));\n+/// let file = File::create(\"poem.txt\")?;\n /// let mut file = LineWriter::new(file);\n ///\n /// for &byte in road_not_taken.iter() {\n ///    file.write(&[byte]).unwrap();\n /// }\n ///\n /// // let's check we did the right thing.\n-/// let mut file = try!(File::open(\"poem.txt\"));\n+/// let mut file = File::open(\"poem.txt\")?;\n /// let mut contents = String::new();\n ///\n-/// try!(file.read_to_string(&mut contents));\n+/// file.read_to_string(&mut contents)?;\n ///\n /// assert_eq!(contents.as_bytes(), &road_not_taken[..]);\n /// # Ok(())\n@@ -665,7 +665,7 @@ impl<W: Write> LineWriter<W> {\n     /// use std::io::LineWriter;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = File::create(\"poem.txt\")?;\n     /// let file = LineWriter::new(file);\n     /// # Ok(())\n     /// # }\n@@ -686,7 +686,7 @@ impl<W: Write> LineWriter<W> {\n     /// use std::io::LineWriter;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = File::create(\"poem.txt\")?;\n     /// let file = LineWriter::with_capacity(100, file);\n     /// # Ok(())\n     /// # }\n@@ -708,7 +708,7 @@ impl<W: Write> LineWriter<W> {\n     /// use std::io::LineWriter;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = File::create(\"poem.txt\")?;\n     /// let file = LineWriter::new(file);\n     ///\n     /// let reference = file.get_ref();\n@@ -730,7 +730,7 @@ impl<W: Write> LineWriter<W> {\n     /// use std::io::LineWriter;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = File::create(\"poem.txt\")?;\n     /// let mut file = LineWriter::new(file);\n     ///\n     /// // we can use reference just like file\n@@ -752,11 +752,11 @@ impl<W: Write> LineWriter<W> {\n     /// use std::io::LineWriter;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let file = try!(File::create(\"poem.txt\"));\n+    /// let file = File::create(\"poem.txt\")?;\n     ///\n     /// let writer: LineWriter<File> = LineWriter::new(file);\n     ///\n-    /// let file: File = try!(writer.into_inner());\n+    /// let file: File = writer.into_inner()?;\n     /// # Ok(())\n     /// # }\n     /// ```"}, {"sha": "0cff8661d8871f0845d5ae04d4bc5e2a67777b42", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -45,10 +45,10 @@ use io::{self, SeekFrom, Error, ErrorKind};\n ///\n /// // a library function we've written\n /// fn write_ten_bytes_at_end<W: Write + Seek>(writer: &mut W) -> io::Result<()> {\n-///     try!(writer.seek(SeekFrom::End(-10)));\n+///     writer.seek(SeekFrom::End(-10))?;\n ///\n ///     for i in 0..10 {\n-///         try!(writer.write(&[i]));\n+///         writer.write(&[i])?;\n ///     }\n ///\n ///     // all went well\n@@ -60,9 +60,9 @@ use io::{self, SeekFrom, Error, ErrorKind};\n /// //\n /// // We might want to use a BufReader here for efficiency, but let's\n /// // keep this example focused.\n-/// let mut file = try!(File::create(\"foo.txt\"));\n+/// let mut file = File::create(\"foo.txt\")?;\n ///\n-/// try!(write_ten_bytes_at_end(&mut file));\n+/// write_ten_bytes_at_end(&mut file)?;\n /// # Ok(())\n /// # }\n ///"}, {"sha": "6d4da2e6a88cff93ae7c7ee390a370aac5ccf54c", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -39,7 +39,7 @@ use convert::From;\n /// fn get_string() -> io::Result<String> {\n ///     let mut buffer = String::new();\n ///\n-///     try!(io::stdin().read_line(&mut buffer));\n+///     io::stdin().read_line(&mut buffer)?;\n ///\n ///     Ok(buffer)\n /// }"}, {"sha": "de5fc5bfad13761297fb0af88c96737c020e99f6", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -29,11 +29,11 @@\n //! use std::fs::File;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! let mut f = try!(File::open(\"foo.txt\"));\n+//! let mut f = File::open(\"foo.txt\")?;\n //! let mut buffer = [0; 10];\n //!\n //! // read up to 10 bytes\n-//! try!(f.read(&mut buffer));\n+//! f.read(&mut buffer)?;\n //!\n //! println!(\"The bytes: {:?}\", buffer);\n //! # Ok(())\n@@ -58,14 +58,14 @@\n //! use std::fs::File;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! let mut f = try!(File::open(\"foo.txt\"));\n+//! let mut f = File::open(\"foo.txt\")?;\n //! let mut buffer = [0; 10];\n //!\n //! // skip to the last 10 bytes of the file\n-//! try!(f.seek(SeekFrom::End(-10)));\n+//! f.seek(SeekFrom::End(-10))?;\n //!\n //! // read up to 10 bytes\n-//! try!(f.read(&mut buffer));\n+//! f.read(&mut buffer)?;\n //!\n //! println!(\"The bytes: {:?}\", buffer);\n //! # Ok(())\n@@ -93,12 +93,12 @@\n //! use std::fs::File;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! let f = try!(File::open(\"foo.txt\"));\n+//! let f = File::open(\"foo.txt\")?;\n //! let mut reader = BufReader::new(f);\n //! let mut buffer = String::new();\n //!\n //! // read a line into buffer\n-//! try!(reader.read_line(&mut buffer));\n+//! reader.read_line(&mut buffer)?;\n //!\n //! println!(\"{}\", buffer);\n //! # Ok(())\n@@ -115,12 +115,12 @@\n //! use std::fs::File;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! let f = try!(File::create(\"foo.txt\"));\n+//! let f = File::create(\"foo.txt\")?;\n //! {\n //!     let mut writer = BufWriter::new(f);\n //!\n //!     // write a byte to the buffer\n-//!     try!(writer.write(&[42]));\n+//!     writer.write(&[42])?;\n //!\n //! } // the buffer is flushed once writer goes out of scope\n //!\n@@ -138,7 +138,7 @@\n //! # fn foo() -> io::Result<()> {\n //! let mut input = String::new();\n //!\n-//! try!(io::stdin().read_line(&mut input));\n+//! io::stdin().read_line(&mut input)?;\n //!\n //! println!(\"You typed: {}\", input.trim());\n //! # Ok(())\n@@ -152,7 +152,7 @@\n //! use std::io::prelude::*;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! try!(io::stdout().write(&[42]));\n+//! io::stdout().write(&[42])?;\n //! # Ok(())\n //! # }\n //! ```\n@@ -173,11 +173,11 @@\n //! use std::fs::File;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! let f = try!(File::open(\"foo.txt\"));\n+//! let f = File::open(\"foo.txt\")?;\n //! let reader = BufReader::new(f);\n //!\n //! for line in reader.lines() {\n-//!     println!(\"{}\", try!(line));\n+//!     println!(\"{}\", line?);\n //! }\n //!\n //! # Ok(())\n@@ -194,7 +194,7 @@\n //! use std::io;\n //!\n //! # fn foo() -> io::Result<()> {\n-//! try!(io::copy(&mut io::stdin(), &mut io::stdout()));\n+//! io::copy(&mut io::stdin(), &mut io::stdout())?;\n //! # Ok(())\n //! # }\n //! ```\n@@ -206,15 +206,15 @@\n //! Last, but certainly not least, is [`io::Result`]. This type is used\n //! as the return type of many `std::io` functions that can cause an error, and\n //! can be returned from your own functions as well. Many of the examples in this\n-//! module use the [`try!`] macro:\n+//! module use the [`?` operator]:\n //!\n //! ```\n //! use std::io;\n //!\n //! fn read_input() -> io::Result<()> {\n //!     let mut input = String::new();\n //!\n-//!     try!(io::stdin().read_line(&mut input));\n+//!     io::stdin().read_line(&mut input)?;\n //!\n //!     println!(\"You typed: {}\", input.trim());\n //!\n@@ -250,7 +250,7 @@\n //! [`println!`]: ../macro.println.html\n //! [`Lines`]: struct.Lines.html\n //! [`io::Result`]: type.Result.html\n-//! [`try!`]: ../macro.try.html\n+//! [`?` operator]: ../../book/syntax-index.html\n //! [`read()`]: trait.Read.html#tymethod.read\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -405,19 +405,19 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n /// use std::fs::File;\n ///\n /// # fn foo() -> io::Result<()> {\n-/// let mut f = try!(File::open(\"foo.txt\"));\n+/// let mut f = File::open(\"foo.txt\")?;\n /// let mut buffer = [0; 10];\n ///\n /// // read up to 10 bytes\n-/// try!(f.read(&mut buffer));\n+/// f.read(&mut buffer)?;\n ///\n /// let mut buffer = vec![0; 10];\n /// // read the whole file\n-/// try!(f.read_to_end(&mut buffer));\n+/// f.read_to_end(&mut buffer)?;\n ///\n /// // read into a String, so that you don't need to do the conversion.\n /// let mut buffer = String::new();\n-/// try!(f.read_to_string(&mut buffer));\n+/// f.read_to_string(&mut buffer)?;\n ///\n /// // and more! See the other methods for more details.\n /// # Ok(())\n@@ -465,11 +465,11 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = [0; 10];\n     ///\n     /// // read 10 bytes\n-    /// try!(f.read(&mut buffer[..]));\n+    /// f.read(&mut buffer[..])?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -507,11 +507,11 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = Vec::new();\n     ///\n     /// // read the whole file\n-    /// try!(f.read_to_end(&mut buffer));\n+    /// f.read_to_end(&mut buffer)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -546,10 +546,10 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = String::new();\n     ///\n-    /// try!(f.read_to_string(&mut buffer));\n+    /// f.read_to_string(&mut buffer)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -606,11 +606,11 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = [0; 10];\n     ///\n     /// // read exactly 10 bytes\n-    /// try!(f.read_exact(&mut buffer));\n+    /// f.read_exact(&mut buffer)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -649,20 +649,20 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = Vec::new();\n     /// let mut other_buffer = Vec::new();\n     ///\n     /// {\n     ///     let reference = f.by_ref();\n     ///\n     ///     // read at most 5 bytes\n-    ///     try!(reference.take(5).read_to_end(&mut buffer));\n+    ///     reference.take(5).read_to_end(&mut buffer)?;\n     ///\n     /// } // drop our &mut reference so we can use f again\n     ///\n     /// // original file still usable, read the rest\n-    /// try!(f.read_to_end(&mut other_buffer));\n+    /// f.read_to_end(&mut other_buffer)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -688,7 +688,7 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     ///\n     /// for byte in f.bytes() {\n     ///     println!(\"{}\", byte.unwrap());\n@@ -725,7 +725,7 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     ///\n     /// for c in f.chars() {\n     ///     println!(\"{}\", c.unwrap());\n@@ -759,15 +759,15 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f1 = try!(File::open(\"foo.txt\"));\n-    /// let mut f2 = try!(File::open(\"bar.txt\"));\n+    /// let mut f1 = File::open(\"foo.txt\")?;\n+    /// let mut f2 = File::open(\"bar.txt\")?;\n     ///\n     /// let mut handle = f1.chain(f2);\n     /// let mut buffer = String::new();\n     ///\n     /// // read the value into a String. We could use any Read method here,\n     /// // this is just one example.\n-    /// try!(handle.read_to_string(&mut buffer));\n+    /// handle.read_to_string(&mut buffer)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -795,13 +795,13 @@ pub trait Read {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut f = File::open(\"foo.txt\")?;\n     /// let mut buffer = [0; 5];\n     ///\n     /// // read at most five bytes\n     /// let mut handle = f.take(5);\n     ///\n-    /// try!(handle.read(&mut buffer));\n+    /// handle.read(&mut buffer)?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -839,9 +839,9 @@ pub trait Read {\n /// use std::fs::File;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// let mut buffer = try!(File::create(\"foo.txt\"));\n+/// let mut buffer = File::create(\"foo.txt\")?;\n ///\n-/// try!(buffer.write(b\"some bytes\"));\n+/// buffer.write(b\"some bytes\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -879,9 +879,9 @@ pub trait Write {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// try!(buffer.write(b\"some bytes\"));\n+    /// buffer.write(b\"some bytes\")?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -904,10 +904,10 @@ pub trait Write {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = BufWriter::new(try!(File::create(\"foo.txt\")));\n+    /// let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n     ///\n-    /// try!(buffer.write(b\"some bytes\"));\n-    /// try!(buffer.flush());\n+    /// buffer.write(b\"some bytes\")?;\n+    /// buffer.flush()?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -932,9 +932,9 @@ pub trait Write {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n     ///\n-    /// try!(buffer.write_all(b\"some bytes\"));\n+    /// buffer.write_all(b\"some bytes\")?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -981,12 +981,12 @@ pub trait Write {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n     ///\n     /// // this call\n-    /// try!(write!(buffer, \"{:.*}\", 2, 1.234567));\n+    /// write!(buffer, \"{:.*}\", 2, 1.234567)?;\n     /// // turns into this:\n-    /// try!(buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567)));\n+    /// buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -1037,12 +1037,12 @@ pub trait Write {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    /// let mut buffer = File::create(\"foo.txt\")?;\n     ///\n     /// let reference = buffer.by_ref();\n     ///\n     /// // we can use reference just like our original buffer\n-    /// try!(reference.write_all(b\"some bytes\"));\n+    /// reference.write_all(b\"some bytes\")?;\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -1069,10 +1069,10 @@ pub trait Write {\n /// use std::io::SeekFrom;\n ///\n /// # fn foo() -> io::Result<()> {\n-/// let mut f = try!(File::open(\"foo.txt\"));\n+/// let mut f = File::open(\"foo.txt\")?;\n ///\n /// // move the cursor 42 bytes from the start of the file\n-/// try!(f.seek(SeekFrom::Start(42)));\n+/// f.seek(SeekFrom::Start(42))?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -1193,7 +1193,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n /// use std::fs::File;\n ///\n /// # fn foo() -> io::Result<()> {\n-/// let f = try!(File::open(\"foo.txt\"));\n+/// let f = File::open(\"foo.txt\")?;\n /// let f = BufReader::new(f);\n ///\n /// for line in f.lines() {\n@@ -1307,7 +1307,7 @@ pub trait BufRead: Read {\n     /// let mut stdin = stdin.lock();\n     /// let mut buffer = Vec::new();\n     ///\n-    /// try!(stdin.read_until(b'a', &mut buffer));\n+    /// stdin.read_until(b'a', &mut buffer)?;\n     ///\n     /// println!(\"{:?}\", buffer);\n     /// # Ok(())\n@@ -1526,7 +1526,7 @@ impl<T> Take<T> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let f = try!(File::open(\"foo.txt\"));\n+    /// let f = File::open(\"foo.txt\")?;\n     ///\n     /// // read at most five bytes\n     /// let handle = f.take(5);\n@@ -1548,11 +1548,11 @@ impl<T> Take<T> {\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> io::Result<()> {\n-    /// let mut file = try!(File::open(\"foo.txt\"));\n+    /// let mut file = File::open(\"foo.txt\")?;\n     ///\n     /// let mut buffer = [0; 5];\n     /// let mut handle = file.take(5);\n-    /// try!(handle.read(&mut buffer));\n+    /// handle.read(&mut buffer)?;\n     ///\n     /// let file = handle.into_inner();\n     /// # Ok(())"}, {"sha": "83a675eb512e5c7faf34b5389199a6c3df2fdbcd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -182,7 +182,7 @@ pub struct StdinLock<'a> {\n ///\n /// # fn foo() -> io::Result<String> {\n /// let mut buffer = String::new();\n-/// try!(io::stdin().read_to_string(&mut buffer));\n+/// io::stdin().read_to_string(&mut buffer)?;\n /// # Ok(buffer)\n /// # }\n /// ```\n@@ -197,7 +197,7 @@ pub struct StdinLock<'a> {\n /// let stdin = io::stdin();\n /// let mut handle = stdin.lock();\n ///\n-/// try!(handle.read_to_string(&mut buffer));\n+/// handle.read_to_string(&mut buffer)?;\n /// # Ok(buffer)\n /// # }\n /// ```\n@@ -239,7 +239,7 @@ impl Stdin {\n     /// let stdin = io::stdin();\n     /// let mut handle = stdin.lock();\n     ///\n-    /// try!(handle.read_to_string(&mut buffer));\n+    /// handle.read_to_string(&mut buffer)?;\n     /// # Ok(buffer)\n     /// # }\n     /// ```\n@@ -374,7 +374,7 @@ pub struct StdoutLock<'a> {\n /// use std::io::{self, Write};\n ///\n /// # fn foo() -> io::Result<()> {\n-/// try!(io::stdout().write(b\"hello world\"));\n+/// io::stdout().write(b\"hello world\")?;\n ///\n /// # Ok(())\n /// # }\n@@ -389,7 +389,7 @@ pub struct StdoutLock<'a> {\n /// let stdout = io::stdout();\n /// let mut handle = stdout.lock();\n ///\n-/// try!(handle.write(b\"hello world\"));\n+/// handle.write(b\"hello world\")?;\n ///\n /// # Ok(())\n /// # }\n@@ -427,7 +427,7 @@ impl Stdout {\n     /// let stdout = io::stdout();\n     /// let mut handle = stdout.lock();\n     ///\n-    /// try!(handle.write(b\"hello world\"));\n+    /// handle.write(b\"hello world\")?;\n     ///\n     /// # Ok(())\n     /// # }\n@@ -510,7 +510,7 @@ pub struct StderrLock<'a> {\n /// use std::io::{self, Write};\n ///\n /// # fn foo() -> io::Result<()> {\n-/// try!(io::stderr().write(b\"hello world\"));\n+/// io::stderr().write(b\"hello world\")?;\n ///\n /// # Ok(())\n /// # }\n@@ -525,7 +525,7 @@ pub struct StderrLock<'a> {\n /// let stderr = io::stderr();\n /// let mut handle = stderr.lock();\n ///\n-/// try!(handle.write(b\"hello world\"));\n+/// handle.write(b\"hello world\")?;\n ///\n /// # Ok(())\n /// # }\n@@ -562,7 +562,7 @@ impl Stderr {\n     ///     let stderr = io::stderr();\n     ///     let mut handle = stderr.lock();\n     ///\n-    ///     try!(handle.write(b\"hello world\"));\n+    ///     handle.write(b\"hello world\")?;\n     ///\n     ///     Ok(())\n     /// }"}, {"sha": "e50665120eb47c1de435a873ac4ef5ef4667b378", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -37,7 +37,7 @@ use io::{self, Read, Write, ErrorKind, BufRead};\n /// let mut reader: &[u8] = b\"hello\";\n /// let mut writer: Vec<u8> = vec![];\n ///\n-/// try!(io::copy(&mut reader, &mut writer));\n+/// io::copy(&mut reader, &mut writer)?;\n ///\n /// assert_eq!(reader, &writer[..]);\n /// # Ok(())"}, {"sha": "2b60fc38198ec3c090c365fc43dc36a96b9f85ae", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -129,7 +129,7 @@ impl fmt::Debug for LookupHost {\n /// use std::net;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// for host in try!(net::lookup_host(\"rust-lang.org\")) {\n+/// for host in net::lookup_host(\"rust-lang.org\")? {\n ///     println!(\"found address: {}\", host);\n /// }\n /// # Ok(())"}, {"sha": "492e57f6e44e51f1047de23c4a48f238a11465a8", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -28,16 +28,16 @@ use time::Duration;\n ///\n /// # fn foo() -> std::io::Result<()> {\n /// {\n-///     let mut socket = try!(UdpSocket::bind(\"127.0.0.1:34254\"));\n+///     let mut socket = UdpSocket::bind(\"127.0.0.1:34254\")?;\n ///\n ///     // read from the socket\n ///     let mut buf = [0; 10];\n-///     let (amt, src) = try!(socket.recv_from(&mut buf));\n+///     let (amt, src) = socket.recv_from(&mut buf)?;\n ///\n ///     // send a reply to the socket we received data from\n ///     let buf = &mut buf[..amt];\n ///     buf.reverse();\n-///     try!(socket.send_to(buf, &src));\n+///     socket.send_to(buf, &src)?;\n ///     # Ok(())\n /// } // the socket is closed here\n /// # }"}, {"sha": "7ad8d27b48330edd475ca1b6db51256efa659cdd", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -30,8 +30,8 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::unix::fs::PermissionsExt;\n     ///\n-    /// let f = try!(File::create(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let f = File::create(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     /// let permissions = metadata.permissions();\n     ///\n     /// println!(\"permissions: {}\", permissions.mode());\n@@ -47,8 +47,8 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::unix::fs::PermissionsExt;\n     ///\n-    /// let f = try!(File::create(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let f = File::create(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     /// let mut permissions = metadata.permissions();\n     ///\n     /// permissions.set_mode(0o644); // Read/write for owner and read for others.\n@@ -260,7 +260,7 @@ impl FileTypeExt for fs::FileType {\n /// use std::os::unix::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::symlink(\"a.txt\", \"b.txt\"));\n+/// fs::symlink(\"a.txt\", \"b.txt\")?;\n /// # Ok(())\n /// # }\n /// ```"}, {"sha": "17de46636b5c95905dba1dbaf297086d0b84b084", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -77,8 +77,8 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::unix::fs::PermissionsExt;\n     ///\n-    /// let f = try!(File::create(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let f = File::create(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     /// let permissions = metadata.permissions();\n     ///\n     /// println!(\"permissions: {}\", permissions.mode());\n@@ -94,8 +94,8 @@ pub trait PermissionsExt {\n     /// use std::fs::File;\n     /// use std::os::unix::fs::PermissionsExt;\n     ///\n-    /// let f = try!(File::create(\"foo.txt\"));\n-    /// let metadata = try!(f.metadata());\n+    /// let f = File::create(\"foo.txt\")?;\n+    /// let metadata = f.metadata()?;\n     /// let mut permissions = metadata.permissions();\n     ///\n     /// permissions.set_mode(0o644); // Read/write for owner and read for others.\n@@ -335,7 +335,7 @@ impl DirEntryExt for fs::DirEntry {\n /// use std::os::unix::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::symlink(\"a.txt\", \"b.txt\"));\n+/// fs::symlink(\"a.txt\", \"b.txt\")?;\n /// # Ok(())\n /// # }\n /// ```"}, {"sha": "c63dd8a47ca4fcd25d40dd5756fe2d848f8c3270", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79081c2eb7fe789f428ffcd20f49549c7ca84ea/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=b79081c2eb7fe789f428ffcd20f49549c7ca84ea", "patch": "@@ -257,7 +257,7 @@ impl MetadataExt for Metadata {\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::symlink_file(\"a.txt\", \"b.txt\"));\n+/// fs::symlink_file(\"a.txt\", \"b.txt\")?;\n /// # Ok(())\n /// # }\n /// ```\n@@ -278,7 +278,7 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n /// use std::os::windows::fs;\n ///\n /// # fn foo() -> std::io::Result<()> {\n-/// try!(fs::symlink_file(\"a\", \"b\"));\n+/// fs::symlink_file(\"a\", \"b\")?;\n /// # Ok(())\n /// # }\n /// ```"}]}