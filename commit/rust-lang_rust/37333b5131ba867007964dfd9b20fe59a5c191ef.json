{"sha": "37333b5131ba867007964dfd9b20fe59a5c191ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MzMzYjUxMzFiYTg2NzAwNzk2NGRmZDliMjBmZTU5YTVjMTkxZWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T02:35:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-29T02:35:58Z"}, "message": "Rollup merge of #63492 - eddyb:cvarargs, r=nagisa,matthewjasper\n\nRemove redundancy from the implementation of C variadics.\n\nThis cleanup was first described in https://github.com/rust-lang/rust/issues/44930#issuecomment-497163539:\n\n* AST doesn't track `c_variadic: bool` anymore, relying solely on a trailing `CVarArgs` type in fn signatures\n* HIR doesn't have a `CVarArgs` anymore, relying solely on `c_variadic: bool`\n  * same for `ty::FnSig` (see tests for diagnostics improvements from that)\n  * `{hir,mir}::Body` have one extra argument than the signature when `c_variadic == true`\n  * `rustc_typeck` and `rustc_mir::{build,borrowck}` need to give that argument the right type (which no longer uses a lifetime parameter, but a function-internal scope)\n* `rustc_target::abi::call` doesn't need special hacks anymore (since it never sees the `VaListImpl` now, it's all inside the body)\n\nr? @nagisa / @rkruppe cc @dlrobertson @oli-obk", "tree": {"sha": "72b8bffece74edb60ba1a63398bff3bd28b8cbaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b8bffece74edb60ba1a63398bff3bd28b8cbaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37333b5131ba867007964dfd9b20fe59a5c191ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkBiOCRBK7hj4Ov3rIwAAdHIIAE7VgZzfwzY9KxZYgwD/TDVJ\nlqgWIPtpFsysmhjbCBHIP8LjCFlLfPj8tZhkIiMipA11un8Y+lzkaf+pGAGNW1fD\ndsY74O16utJTY9IGqd51w+v0eN+EHb9zd6oJCAmV9K+Uw5x0BeeTRVmDKprMAYnE\nYaq416YIujCWwv6H4Evq1vknfViN83gwlyvr1hMzplCTyDrlfGqXyPB+UmDBDJ0j\nkAtEOWDWjylYeEzubdZrh72bZ8cSCBO7QiJLC0LjBB3Q6H3T5IfpJLkbCjup6kNd\ndzHZUimsqOdA5R1QLlG6nRX9t+uAoSyOkzzFPjgzvM0+xsg9dOriAIgzpK8rgNg=\n=f2OC\n-----END PGP SIGNATURE-----\n", "payload": "tree 72b8bffece74edb60ba1a63398bff3bd28b8cbaf\nparent b61e69433951e31f7bd746e22f516a48ad41623b\nparent 057f23d3ddabf8c89e5da371d724d1995e9655da\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569724558 +0200\ncommitter GitHub <noreply@github.com> 1569724558 +0200\n\nRollup merge of #63492 - eddyb:cvarargs, r=nagisa,matthewjasper\n\nRemove redundancy from the implementation of C variadics.\n\nThis cleanup was first described in https://github.com/rust-lang/rust/issues/44930#issuecomment-497163539:\n\n* AST doesn't track `c_variadic: bool` anymore, relying solely on a trailing `CVarArgs` type in fn signatures\n* HIR doesn't have a `CVarArgs` anymore, relying solely on `c_variadic: bool`\n  * same for `ty::FnSig` (see tests for diagnostics improvements from that)\n  * `{hir,mir}::Body` have one extra argument than the signature when `c_variadic == true`\n  * `rustc_typeck` and `rustc_mir::{build,borrowck}` need to give that argument the right type (which no longer uses a lifetime parameter, but a function-internal scope)\n* `rustc_target::abi::call` doesn't need special hacks anymore (since it never sees the `VaListImpl` now, it's all inside the body)\n\nr? @nagisa / @rkruppe cc @dlrobertson @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37333b5131ba867007964dfd9b20fe59a5c191ef", "html_url": "https://github.com/rust-lang/rust/commit/37333b5131ba867007964dfd9b20fe59a5c191ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37333b5131ba867007964dfd9b20fe59a5c191ef/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b61e69433951e31f7bd746e22f516a48ad41623b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b61e69433951e31f7bd746e22f516a48ad41623b", "html_url": "https://github.com/rust-lang/rust/commit/b61e69433951e31f7bd746e22f516a48ad41623b"}, {"sha": "057f23d3ddabf8c89e5da371d724d1995e9655da", "url": "https://api.github.com/repos/rust-lang/rust/commits/057f23d3ddabf8c89e5da371d724d1995e9655da", "html_url": "https://github.com/rust-lang/rust/commit/057f23d3ddabf8c89e5da371d724d1995e9655da"}], "stats": {"total": 754, "additions": 322, "deletions": 432}, "files": [{"sha": "05bdd0887f0f6442c7e483d1ec5d9beef470cc42", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -633,9 +633,6 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n         TyKind::Typeof(ref expression) => {\n             visitor.visit_anon_const(expression)\n         }\n-        TyKind::CVarArgs(ref lt) => {\n-            visitor.visit_lifetime(lt)\n-        }\n         TyKind::Infer | TyKind::Err => {}\n     }\n }"}, {"sha": "6f51e05881be5ef7e7236cd989a211c4877dab42", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1335,13 +1335,8 @@ impl<'a> LoweringContext<'a> {\n                     }\n                 }\n             }\n-            TyKind::Mac(_) => bug!(\"`TyMac` should have been expanded by now\"),\n-            TyKind::CVarArgs => {\n-                // Create the implicit lifetime of the \"spoofed\" `VaListImpl`.\n-                let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n-                let lt = self.new_implicit_lifetime(span);\n-                hir::TyKind::CVarArgs(lt)\n-            },\n+            TyKind::Mac(_) => bug!(\"`TyKind::Mac` should have been expanded by now\"),\n+            TyKind::CVarArgs => bug!(\"`TyKind::CVarArgs` should have been handled elsewhere\"),\n         };\n \n         hir::Ty {\n@@ -2093,7 +2088,14 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> hir::HirVec<Ident> {\n-        decl.inputs\n+        // Skip the `...` (`CVarArgs`) trailing arguments from the AST,\n+        // as they are not explicit in HIR/Ty function signatures.\n+        // (instead, the `c_variadic` flag is set to `true`)\n+        let mut inputs = &decl.inputs[..];\n+        if decl.c_variadic() {\n+            inputs = &inputs[..inputs.len() - 1];\n+        }\n+        inputs\n             .iter()\n             .map(|param| match param.pat.kind {\n                 PatKind::Ident(_, ident, _) => ident,\n@@ -2130,10 +2132,19 @@ impl<'a> LoweringContext<'a> {\n             self.anonymous_lifetime_mode\n         };\n \n+        let c_variadic = decl.c_variadic();\n+\n         // Remember how many lifetimes were already around so that we can\n         // only look at the lifetime parameters introduced by the arguments.\n         let inputs = self.with_anonymous_lifetime_mode(lt_mode, |this| {\n-            decl.inputs\n+            // Skip the `...` (`CVarArgs`) trailing arguments from the AST,\n+            // as they are not explicit in HIR/Ty function signatures.\n+            // (instead, the `c_variadic` flag is set to `true`)\n+            let mut inputs = &decl.inputs[..];\n+            if c_variadic {\n+                inputs = &inputs[..inputs.len() - 1];\n+            }\n+            inputs\n                 .iter()\n                 .map(|param| {\n                     if let Some((_, ibty)) = &mut in_band_ty_params {\n@@ -2168,7 +2179,7 @@ impl<'a> LoweringContext<'a> {\n         P(hir::FnDecl {\n             inputs,\n             output,\n-            c_variadic: decl.c_variadic,\n+            c_variadic,\n             implicit_self: decl.inputs.get(0).map_or(\n                 hir::ImplicitSelfKind::None,\n                 |arg| {"}, {"sha": "2f0a318d5363e5adfb72de176d2b7b3e23a33d90", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -450,7 +450,6 @@ impl LoweringContext<'_> {\n         let ast_decl = FnDecl {\n             inputs: vec![],\n             output,\n-            c_variadic: false\n         };\n         let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n         let body_id = self.lower_fn_body(&ast_decl, |this| {\n@@ -739,7 +738,6 @@ impl LoweringContext<'_> {\n         let outer_decl = FnDecl {\n             inputs: decl.inputs.clone(),\n             output: FunctionRetTy::Default(fn_decl_span),\n-            c_variadic: false,\n         };\n         // We need to lower the declaration outside the new scope, because we\n         // have to conserve the state of being inside a loop condition for the"}, {"sha": "4e8b4337cc6dd0d3f23179f9eab612410fbf98cc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -2016,9 +2016,6 @@ pub enum TyKind {\n     Infer,\n     /// Placeholder for a type that has failed to be defined.\n     Err,\n-    /// Placeholder for C-variadic arguments. We \"spoof\" the `VaListImpl` created\n-    /// from the variadic arguments. This type is only valid up to typeck.\n-    CVarArgs(Lifetime),\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]"}, {"sha": "6cffaa8a494c4a9bf798b77de0a0538054747a36", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -361,9 +361,6 @@ impl<'a> State<'a> {\n                 self.s.word(\"/*ERROR*/\");\n                 self.pclose();\n             }\n-            hir::TyKind::CVarArgs(_) => {\n-                self.s.word(\"...\");\n-            }\n         }\n         self.end()\n     }"}, {"sha": "31d250fa08215e59503d3326c524a0859a4b21c3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -764,13 +764,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     });\n                 }\n             }\n-            hir::TyKind::CVarArgs(ref lt) => {\n-                // Resolve the generated lifetime for the C-variadic arguments.\n-                // The lifetime is generated in AST -> HIR lowering.\n-                if lt.name.is_elided() {\n-                    self.resolve_elided_lifetimes(vec![lt])\n-                }\n-            }\n             _ => intravisit::walk_ty(self, ty),\n         }\n     }\n@@ -2378,7 +2371,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             self.visit_lifetime(lifetime);\n                         }\n                     }\n-                    hir::TyKind::CVarArgs(_) => {}\n                     _ => {\n                         intravisit::walk_ty(self, ty);\n                     }"}, {"sha": "bd6b6006c1a211591a93c1c2634f9bc3582c678b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n pub use rustc_target::abi::*;\n use rustc_target::spec::{HasTargetSpec, abi::Abi as SpecAbi};\n use rustc_target::abi::call::{\n-    ArgAttribute, ArgAttributes, ArgType, Conv, FnType, IgnoreMode, PassMode, Reg, RegKind\n+    ArgAttribute, ArgAttributes, ArgType, Conv, FnType, PassMode, Reg, RegKind\n };\n \n pub trait IntegerExt {\n@@ -2722,14 +2722,6 @@ where\n             }\n         };\n \n-        // Store the index of the last argument. This is useful for working with\n-        // C-compatible variadic arguments.\n-        let last_arg_idx = if sig.inputs().is_empty() {\n-            None\n-        } else {\n-            Some(sig.inputs().len() - 1)\n-        };\n-\n         let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| {\n             let is_return = arg_idx.is_none();\n             let mut arg = mk_arg_type(ty, arg_idx);\n@@ -2739,30 +2731,7 @@ where\n                 // The same is true for s390x-unknown-linux-gnu\n                 // and sparc64-unknown-linux-gnu.\n                 if is_return || rust_abi || (!win_x64_gnu && !linux_s390x && !linux_sparc64) {\n-                    arg.mode = PassMode::Ignore(IgnoreMode::Zst);\n-                }\n-            }\n-\n-            // If this is a C-variadic function, this is not the return value,\n-            // and there is one or more fixed arguments; ensure that the `VaListImpl`\n-            // is ignored as an argument.\n-            if sig.c_variadic {\n-                match (last_arg_idx, arg_idx) {\n-                    (Some(last_idx), Some(cur_idx)) if last_idx == cur_idx => {\n-                        let va_list_did = match cx.tcx().lang_items().va_list() {\n-                            Some(did) => did,\n-                            None => bug!(\"`va_list` lang item required for C-variadic functions\"),\n-                        };\n-                        match ty.kind {\n-                            ty::Adt(def, _) if def.did == va_list_did => {\n-                                // This is the \"spoofed\" `VaListImpl`. Set the arguments mode\n-                                // so that it will be ignored.\n-                                arg.mode = PassMode::Ignore(IgnoreMode::CVarArgs);\n-                            }\n-                            _ => (),\n-                        }\n-                    }\n-                    _ => {}\n+                    arg.mode = PassMode::Ignore;\n                 }\n             }\n "}, {"sha": "ae5cfc4d97b599705da9180c0974d090d26ffbd1", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -264,7 +264,7 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n             val\n         };\n         match self.mode {\n-            PassMode::Ignore(_) => {}\n+            PassMode::Ignore => {}\n             PassMode::Pair(..) => {\n                 OperandValue::Pair(next(), next()).store(bx, dst);\n             }\n@@ -319,9 +319,7 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         );\n \n         let llreturn_ty = match self.ret.mode {\n-            PassMode::Ignore(IgnoreMode::Zst) => cx.type_void(),\n-            PassMode::Ignore(IgnoreMode::CVarArgs) =>\n-                bug!(\"`va_list` should never be a return type\"),\n+            PassMode::Ignore => cx.type_void(),\n             PassMode::Direct(_) | PassMode::Pair(..) => {\n                 self.ret.layout.immediate_llvm_type(cx)\n             }\n@@ -339,7 +337,7 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n             }\n \n             let llarg_ty = match arg.mode {\n-                PassMode::Ignore(_) => continue,\n+                PassMode::Ignore => continue,\n                 PassMode::Direct(_) => arg.layout.immediate_llvm_type(cx),\n                 PassMode::Pair(..) => {\n                     llargument_tys.push(arg.layout.scalar_pair_element_llvm_type(cx, 0, true));\n@@ -408,7 +406,7 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                 apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n-                PassMode::Ignore(_) => {}\n+                PassMode::Ignore => {}\n                 PassMode::Direct(ref attrs) |\n                 PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(cx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n@@ -455,7 +453,7 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                 apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n-                PassMode::Ignore(_) => {}\n+                PassMode::Ignore => {}\n                 PassMode::Direct(ref attrs) |\n                 PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(bx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {"}, {"sha": "7ebdfbdcdeb2d6340980b1ce1198a1899f484dd4", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1,9 +1,10 @@\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n use rustc::mir::interpret::PanicInfo;\n-use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n+use rustc_target::abi::call::{ArgType, FnType, PassMode};\n use rustc_target::spec::abi::Abi;\n use crate::base;\n use crate::MemFlags;\n@@ -224,14 +225,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n     fn codegen_return_terminator(&mut self, mut bx: Bx) {\n+        // Call `va_end` if this is the definition of a C-variadic function.\n         if self.fn_ty.c_variadic {\n-            match self.va_list_ref {\n-                Some(va_list) => {\n+            // The `VaList` \"spoofed\" argument is just after all the real arguments.\n+            let va_list_arg_idx = self.fn_ty.args.len();\n+            match self.locals[mir::Local::new(1 + va_list_arg_idx)] {\n+                LocalRef::Place(va_list) => {\n                     bx.va_end(va_list.llval);\n                 }\n-                None => {\n-                    bug!(\"C-variadic function must have a `va_list_ref`\");\n-                }\n+                _ => bug!(\"C-variadic function must have a `VaList` place\"),\n             }\n         }\n         if self.fn_ty.ret.layout.abi.is_uninhabited() {\n@@ -242,15 +244,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n         let llval = match self.fn_ty.ret.mode {\n-            PassMode::Ignore(IgnoreMode::Zst) | PassMode::Indirect(..) => {\n+            PassMode::Ignore | PassMode::Indirect(..) => {\n                 bx.ret_void();\n                 return;\n             }\n \n-            PassMode::Ignore(IgnoreMode::CVarArgs) => {\n-                bug!(\"C-variadic arguments should never be the return type\");\n-            }\n-\n             PassMode::Direct(_) | PassMode::Pair(..) => {\n                 let op =\n                     self.codegen_consume(&mut bx, &mir::Place::return_place().as_ref());\n@@ -502,10 +500,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        // The \"spoofed\" `VaListImpl` added to a C-variadic functions signature\n-        // should not be included in the `extra_args` calculation.\n-        let extra_args_start_idx = sig.inputs().len() - if sig.c_variadic { 1 } else { 0 };\n-        let extra_args = &args[extra_args_start_idx..];\n+        let extra_args = &args[sig.inputs().len()..];\n         let extra_args = extra_args.iter().map(|op_arg| {\n             let op_ty = op_arg.ty(self.mir, bx.tcx());\n             self.monomorphize(&op_ty)\n@@ -691,26 +686,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             (&args[..], None)\n         };\n \n-        // Useful determining if the current argument is the \"spoofed\" `VaListImpl`\n-        let last_arg_idx = if sig.inputs().is_empty() {\n-            None\n-        } else {\n-            Some(sig.inputs().len() - 1)\n-        };\n         'make_args: for (i, arg) in first_args.iter().enumerate() {\n-            // If this is a C-variadic function the function signature contains\n-            // an \"spoofed\" `VaListImpl`. This argument is ignored, but we need to\n-            // populate it with a dummy operand so that the users real arguments\n-            // are not overwritten.\n-            let i = if sig.c_variadic && last_arg_idx.map(|x| i >= x).unwrap_or(false) {\n-                if i + 1 < fn_ty.args.len() {\n-                    i + 1\n-                } else {\n-                    break 'make_args\n-                }\n-            } else {\n-                i\n-            };\n             let mut op = self.codegen_operand(&mut bx, arg);\n \n             if let (0, Some(ty::InstanceDef::Virtual(_, idx))) = (i, def) {"}, {"sha": "4f3a8bdb540b5d853da642d0424d28e45b697e44", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 29, "deletions": 39, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -2,7 +2,7 @@ use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts, Instance};\n use rustc::ty::layout::{TyLayout, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Body};\n use rustc::session::config::DebugInfo;\n-use rustc_target::abi::call::{FnType, PassMode, IgnoreMode};\n+use rustc_target::abi::call::{FnType, PassMode};\n use rustc_target::abi::{Variants, VariantIdx};\n use crate::base;\n use crate::debuginfo::{self, VariableAccess, VariableKind, FunctionDebugContext};\n@@ -81,10 +81,6 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n \n     /// Debug information for MIR scopes.\n     scopes: IndexVec<mir::SourceScope, debuginfo::MirDebugScope<Bx::DIScope>>,\n-\n-    /// If this function is a C-variadic function, this contains the `PlaceRef` of the\n-    /// \"spoofed\" `VaListImpl`.\n-    va_list_ref: Option<PlaceRef<'tcx, Bx::Value>>,\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -236,18 +232,13 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         scopes,\n         locals: IndexVec::new(),\n         debug_context,\n-        va_list_ref: None,\n     };\n \n     let memory_locals = analyze::non_ssa_locals(&fx);\n \n     // Allocate variable and temp allocas\n     fx.locals = {\n-        // FIXME(dlrobertson): This is ugly. Find a better way of getting the `PlaceRef` or\n-        // `LocalRef` from `arg_local_refs`\n-        let mut va_list_ref = None;\n-        let args = arg_local_refs(&mut bx, &fx, &memory_locals, &mut va_list_ref);\n-        fx.va_list_ref = va_list_ref;\n+        let args = arg_local_refs(&mut bx, &fx, &memory_locals);\n \n         let mut allocate_local = |local| {\n             let decl = &mir.local_decls[local];\n@@ -426,7 +417,6 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     fx: &FunctionCx<'a, 'tcx, Bx>,\n     memory_locals: &BitSet<mir::Local>,\n-    va_list_ref: &mut Option<PlaceRef<'tcx, Bx::Value>>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {\n     let mir = fx.mir;\n     let tcx = fx.cx.tcx();\n@@ -441,15 +431,6 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         None\n     };\n \n-    // Store the index of the last argument. This is used to\n-    // call va_start on the va_list instead of attempting\n-    // to store_fn_arg.\n-    let last_arg_idx = if fx.fn_ty.args.is_empty() {\n-        None\n-    } else {\n-        Some(fx.fn_ty.args.len() - 1)\n-    };\n-\n     mir.args_iter().enumerate().map(|(arg_index, local)| {\n         let arg_decl = &mir.local_decls[local];\n \n@@ -503,6 +484,31 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             return LocalRef::Place(place);\n         }\n \n+        if fx.fn_ty.c_variadic && arg_index == fx.fn_ty.args.len() {\n+            let arg_ty = fx.monomorphize(&arg_decl.ty);\n+\n+            let va_list = PlaceRef::alloca(bx, bx.layout_of(arg_ty));\n+            bx.set_var_name(va_list.llval, name);\n+            bx.va_start(va_list.llval);\n+\n+            arg_scope.map(|scope| {\n+                let variable_access = VariableAccess::DirectVariable {\n+                    alloca: va_list.llval\n+                };\n+                bx.declare_local(\n+                    &fx.debug_context,\n+                    arg_decl.name.unwrap_or(kw::Invalid),\n+                    va_list.layout.ty,\n+                    scope,\n+                    variable_access,\n+                    VariableKind::ArgumentVariable(arg_index + 1),\n+                    DUMMY_SP\n+                );\n+            });\n+\n+            return LocalRef::Place(va_list);\n+        }\n+\n         let arg = &fx.fn_ty.args[idx];\n         idx += 1;\n         if arg.pad.is_some() {\n@@ -515,10 +521,9 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             // of putting everything in allocas just so we can use llvm.dbg.declare.\n             let local = |op| LocalRef::Operand(Some(op));\n             match arg.mode {\n-                PassMode::Ignore(IgnoreMode::Zst) => {\n+                PassMode::Ignore => {\n                     return local(OperandRef::new_zst(bx, arg.layout));\n                 }\n-                PassMode::Ignore(IgnoreMode::CVarArgs) => {}\n                 PassMode::Direct(_) => {\n                     let llarg = bx.get_param(llarg_idx);\n                     bx.set_var_name(llarg, &name);\n@@ -568,22 +573,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         } else {\n             let tmp = PlaceRef::alloca(bx, arg.layout);\n             bx.set_var_name(tmp.llval, name);\n-            if fx.fn_ty.c_variadic && last_arg_idx.map(|idx| arg_index == idx).unwrap_or(false) {\n-                let va_list_did = match tcx.lang_items().va_list() {\n-                    Some(did) => did,\n-                    None => bug!(\"`va_list` lang item required for C-variadic functions\"),\n-                };\n-                match arg_decl.ty.kind {\n-                    ty::Adt(def, _) if def.did == va_list_did => {\n-                        // Call `va_start` on the spoofed `VaListImpl`.\n-                        bx.va_start(tmp.llval);\n-                        *va_list_ref = Some(tmp);\n-                    },\n-                    _ => bug!(\"last argument of variadic function is not a `va_list`\")\n-                }\n-            } else {\n-                bx.store_fn_arg(arg, &mut llarg_idx, tmp);\n-            }\n+            bx.store_fn_arg(arg, &mut llarg_idx, tmp);\n             tmp\n         };\n         let upvar_debuginfo = &mir.__upvar_debuginfo_codegen_only_do_not_use;"}, {"sha": "150719c1dbc0e7e7c11332c91f02c54ff759cc15", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -944,15 +944,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let sig = self.cx.tcx.fn_sig(def_id);\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n-        let inputs = if sig.c_variadic {\n-            // Don't include the spoofed `VaListImpl` in the functions list\n-            // of inputs.\n-            &sig.inputs()[..sig.inputs().len() - 1]\n-        } else {\n-            &sig.inputs()[..]\n-        };\n \n-        for (input_ty, input_hir) in inputs.iter().zip(&decl.inputs) {\n+        for (input_ty, input_hir) in sig.inputs().iter().zip(&decl.inputs) {\n             self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty);\n         }\n "}, {"sha": "8b1ba59c6df7eba16396d9246b5afa47566ba5e7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -399,7 +399,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.universal_regions.unnormalized_input_tys[implicit_inputs + argument_index];\n         if let Some(region_name) = self.give_name_if_we_can_match_hir_ty_from_argument(\n             infcx,\n-            body,\n             mir_def_id,\n             fr,\n             arg_ty,\n@@ -415,7 +414,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn give_name_if_we_can_match_hir_ty_from_argument(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n-        body: &Body<'tcx>,\n         mir_def_id: DefId,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n@@ -424,18 +422,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> Option<RegionName> {\n         let mir_hir_id = infcx.tcx.hir().as_local_hir_id(mir_def_id)?;\n         let fn_decl = infcx.tcx.hir().fn_decl_by_hir_id(mir_hir_id)?;\n-        let argument_hir_ty: &hir::Ty = &fn_decl.inputs[argument_index];\n+        let argument_hir_ty: &hir::Ty = fn_decl.inputs.get(argument_index)?;\n         match argument_hir_ty.kind {\n             // This indicates a variable with no type annotation, like\n             // `|x|`... in that case, we can't highlight the type but\n             // must highlight the variable.\n-            hir::TyKind::Infer => self.give_name_if_we_cannot_match_hir_ty(\n-                infcx,\n-                body,\n-                needle_fr,\n-                argument_ty,\n-                renctx,\n-            ),\n+            // NOTE(eddyb) this is handled in/by the sole caller\n+            // (`give_name_if_anonymous_region_appears_in_arguments`).\n+            hir::TyKind::Infer => None,\n \n             _ => self.give_name_if_we_can_match_hir_ty(\n                 infcx.tcx,"}, {"sha": "fa326062fe2c9c20bcaab4de5f2d43fa154efa4a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1726,17 +1726,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         from_hir_call: bool,\n     ) {\n         debug!(\"check_call_inputs({:?}, {:?})\", sig, args);\n-        // Do not count the `VaListImpl` argument as a \"true\" argument to\n-        // a C-variadic function.\n-        let inputs = if sig.c_variadic {\n-            &sig.inputs()[..sig.inputs().len() - 1]\n-        } else {\n-            &sig.inputs()[..]\n-        };\n-        if args.len() < inputs.len() || (args.len() > inputs.len() && !sig.c_variadic) {\n+        if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {\n             span_mirbug!(self, term, \"call to {:?} with wrong # of args\", sig);\n         }\n-        for (n, (fn_arg, op_arg)) in inputs.iter().zip(args).enumerate() {\n+        for (n, (fn_arg, op_arg)) in sig.inputs().iter().zip(args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n             let category = if from_hir_call {\n                 ConstraintCategory::CallArgument"}, {"sha": "7053bdca25957117829d25331c3901f57ea160c7", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -16,8 +16,9 @@ use either::Either;\n use rustc::hir::def_id::DefId;\n use rustc::hir::{self, BodyOwnerKind, HirId};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc::ty::subst::{InternalSubsts, SubstsRef, Subst};\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -425,12 +426,33 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 .replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices);\n         }\n \n+        let (unnormalized_output_ty, mut unnormalized_input_tys) =\n+            inputs_and_output.split_last().unwrap();\n+\n+        // C-variadic fns also have a `VaList` input that's not listed in the signature\n+        // (as it's created inside the body itself, not passed in from outside).\n+        if let DefiningTy::FnDef(def_id, _) = defining_ty {\n+            if self.infcx.tcx.fn_sig(def_id).c_variadic() {\n+                let va_list_did = self.infcx.tcx.require_lang_item(\n+                    lang_items::VaListTypeLangItem,\n+                    Some(self.infcx.tcx.def_span(self.mir_def_id),),\n+                );\n+                let region = self.infcx.tcx.mk_region(ty::ReVar(\n+                    self.infcx.next_nll_region_var(FR).to_region_vid(),\n+                ));\n+                let va_list_ty = self.infcx.tcx.type_of(va_list_did)\n+                    .subst(self.infcx.tcx, &[region.into()]);\n+\n+                unnormalized_input_tys = self.infcx.tcx.mk_type_list(\n+                    unnormalized_input_tys.iter().copied()\n+                        .chain(iter::once(va_list_ty)),\n+                );\n+            }\n+        }\n+\n         let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n         let num_universals = self.infcx.num_region_vars();\n \n-        let (unnormalized_output_ty, unnormalized_input_tys) =\n-            inputs_and_output.split_last().unwrap();\n-\n         debug!(\n             \"build: global regions = {}..{}\",\n             FIRST_GLOBAL_INDEX, first_extern_index"}, {"sha": "17932ae855767bc44fe94001aed3a4b6230bf64c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -7,9 +7,11 @@ use crate::util as mir_util;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n+use rustc::middle::lang_items;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::subst::Subst;\n use rustc::util::nodemap::HirIdMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -102,9 +104,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n                         let opt_ty_info;\n                         let self_arg;\n                         if let Some(ref fn_decl) = tcx.hir().fn_decl_by_hir_id(owner_id) {\n-                            let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                            let ty_span = tcx.hir().span(ty_hir_id);\n-                            opt_ty_info = Some(ty_span);\n+                            opt_ty_info = fn_decl.inputs.get(index).map(|ty| ty.span);\n                             self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n                                 match fn_decl.implicit_self {\n                                     hir::ImplicitSelfKind::Imm => Some(ImplicitSelfKind::Imm),\n@@ -121,7 +121,24 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n                             self_arg = None;\n                         }\n \n-                        ArgInfo(fn_sig.inputs()[index], opt_ty_info, Some(&arg), self_arg)\n+                        // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n+                        // (as it's created inside the body itself, not passed in from outside).\n+                        let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n+                            let va_list_did = tcx.require_lang_item(\n+                                lang_items::VaListTypeLangItem,\n+                                Some(arg.span),\n+                            );\n+                            let region = tcx.mk_region(ty::ReScope(region::Scope {\n+                                id: body.value.hir_id.local_id,\n+                                data: region::ScopeData::CallSite\n+                            }));\n+\n+                            tcx.type_of(va_list_did).subst(tcx, &[region.into()])\n+                        } else {\n+                            fn_sig.inputs()[index]\n+                        };\n+\n+                        ArgInfo(ty, opt_ty_info, Some(&arg), self_arg)\n                     });\n \n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);"}, {"sha": "bc21113527ecfa83b7602319689a882517713c5d", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -23,18 +23,10 @@ mod x86_64;\n mod x86_win64;\n mod wasm32;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n-pub enum IgnoreMode {\n-    /// C-variadic arguments.\n-    CVarArgs,\n-    /// A zero-sized type.\n-    Zst,\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum PassMode {\n-    /// Ignore the argument (useful for empty structs and C-variadic args).\n-    Ignore(IgnoreMode),\n+    /// Ignore the argument.\n+    Ignore,\n     /// Pass the argument directly.\n     Direct(ArgAttributes),\n     /// Pass a pair's elements directly in two arguments.\n@@ -490,7 +482,7 @@ impl<'a, Ty> ArgType<'a, Ty> {\n \n     pub fn is_ignore(&self) -> bool {\n         match self.mode {\n-            PassMode::Ignore(_) => true,\n+            PassMode::Ignore => true,\n             _ => false\n         }\n     }"}, {"sha": "2e809571ab18b60fc87e40dc08961133f9133366", "filename": "src/librustc_target/abi/call/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -88,7 +88,7 @@ pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>, flavor: Fla\n \n         for arg in &mut fty.args {\n             let attrs = match arg.mode {\n-                PassMode::Ignore(_) |\n+                PassMode::Ignore |\n                 PassMode::Indirect(_, None) => continue,\n                 PassMode::Direct(ref mut attrs) => attrs,\n                 PassMode::Pair(..) |"}, {"sha": "fd6744da0606752ba19d17d58e3a5ca548956c68", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -2148,15 +2148,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(None, ast_ty.span)\n             }\n-            hir::TyKind::CVarArgs(lt) => {\n-                let va_list_did = match tcx.lang_items().va_list() {\n-                    Some(did) => did,\n-                    None => span_bug!(ast_ty.span,\n-                                      \"`va_list` lang item required for variadics\"),\n-                };\n-                let region = self.ast_region_to_region(&lt, None);\n-                tcx.type_of(va_list_did).subst(tcx, &[region.into()])\n-            }\n             hir::TyKind::Err => {\n                 tcx.types.err\n             }"}, {"sha": "290b87388ebbe966ea347ffa2562045e1e66146c", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -397,27 +397,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .0;\n         let fn_sig = self.normalize_associated_types_in(call_expr.span, &fn_sig);\n \n-        let inputs = if fn_sig.c_variadic {\n-            if fn_sig.inputs().len() > 1 {\n-                &fn_sig.inputs()[..fn_sig.inputs().len() - 1]\n-            } else {\n-                span_bug!(call_expr.span,\n-                          \"C-variadic functions are only valid with one or more fixed arguments\");\n-            }\n-        } else {\n-            &fn_sig.inputs()[..]\n-        };\n         // Call the generic checker.\n         let expected_arg_tys = self.expected_inputs_for_expected_output(\n             call_expr.span,\n             expected,\n             fn_sig.output(),\n-            inputs,\n+            fn_sig.inputs(),\n         );\n         self.check_argument_types(\n             call_expr.span,\n             call_expr,\n-            inputs,\n+            fn_sig.inputs(),\n             &expected_arg_tys[..],\n             arg_exprs,\n             fn_sig.c_variadic,"}, {"sha": "a7832b8c2cf1727217762cf1911bd5939cb6d450", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1132,8 +1132,29 @@ fn check_fn<'a, 'tcx>(\n     let outer_hir_id = fcx.tcx.hir().as_local_hir_id(outer_def_id).unwrap();\n     GatherLocalsVisitor { fcx: &fcx, parent_id: outer_hir_id, }.visit_body(body);\n \n+    // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n+    // (as it's created inside the body itself, not passed in from outside).\n+    let maybe_va_list = if fn_sig.c_variadic {\n+        let va_list_did = fcx.tcx.require_lang_item(\n+            lang_items::VaListTypeLangItem,\n+            Some(body.params.last().unwrap().span),\n+        );\n+        let region = fcx.tcx.mk_region(ty::ReScope(region::Scope {\n+            id: body.value.hir_id.local_id,\n+            data: region::ScopeData::CallSite\n+        }));\n+\n+        Some(fcx.tcx.type_of(va_list_did).subst(fcx.tcx, &[region.into()]))\n+    } else {\n+        None\n+    };\n+\n     // Add formal parameters.\n-    for (param_ty, param) in fn_sig.inputs().iter().zip(&body.params) {\n+    for (param_ty, param) in\n+        fn_sig.inputs().iter().copied()\n+            .chain(maybe_va_list)\n+            .zip(&body.params)\n+    {\n         // Check the pattern.\n         fcx.check_pat_top(&param.pat, param_ty, None);\n "}, {"sha": "b530851b80de7c52983a20169fbbad9177f92fce", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -2032,6 +2032,7 @@ impl Clean<Item> for doctree::Function<'_> {\n pub struct FnDecl {\n     pub inputs: Arguments,\n     pub output: FunctionRetTy,\n+    pub c_variadic: bool,\n     pub attrs: Attributes,\n }\n \n@@ -2110,6 +2111,7 @@ impl<'a, A: Copy> Clean<FnDecl> for (&'a hir::FnDecl, A)\n         FnDecl {\n             inputs: (&self.0.inputs[..], self.1).clean(cx),\n             output: self.0.output.clean(cx),\n+            c_variadic: self.0.c_variadic,\n             attrs: Attributes::default(),\n         }\n     }\n@@ -2127,6 +2129,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n         FnDecl {\n             output: Return(sig.skip_binder().output().clean(cx)),\n             attrs: Attributes::default(),\n+            c_variadic: sig.skip_binder().c_variadic,\n             inputs: Arguments {\n                 values: sig.skip_binder().inputs().iter().map(|t| {\n                     Argument {\n@@ -2545,7 +2548,6 @@ pub enum Type {\n     Slice(Box<Type>),\n     Array(Box<Type>, String),\n     Never,\n-    CVarArgs,\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n         lifetime: Option<Lifetime>,\n@@ -2583,7 +2585,6 @@ pub enum PrimitiveType {\n     Reference,\n     Fn,\n     Never,\n-    CVarArgs,\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -2787,7 +2788,6 @@ impl PrimitiveType {\n             Reference => \"reference\",\n             Fn => \"fn\",\n             Never => \"never\",\n-            CVarArgs => \"...\",\n         }\n     }\n \n@@ -3032,7 +3032,6 @@ impl Clean<Type> for hir::Ty {\n             TyKind::BareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n-            TyKind::CVarArgs(_) => CVarArgs,\n         }\n     }\n }\n@@ -3980,7 +3979,6 @@ fn build_deref_target_impls(cx: &DocContext<'_>,\n             Reference => None,\n             Fn => None,\n             Never => None,\n-            CVarArgs => tcx.lang_items().va_list(),\n         };\n         if let Some(did) = did {\n             if !did.is_local() {"}, {"sha": "4cde868201eeffdef8f948d411f446fa90131cb1", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -657,7 +657,6 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n             primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", n))\n         }\n         clean::Never => primitive_link(f, PrimitiveType::Never, \"!\"),\n-        clean::CVarArgs => primitive_link(f, PrimitiveType::CVarArgs, \"...\"),\n         clean::RawPointer(m, ref t) => {\n             let m = match m {\n                 clean::Immutable => \"const\",\n@@ -903,12 +902,15 @@ impl clean::BareFunctionDecl {\n impl clean::FnDecl {\n     crate fn print(&self) -> impl fmt::Display + '_ {\n         display_fn(move |f| {\n+        let ellipsis = if self.c_variadic { \", ...\" } else { \"\" };\n             if f.alternate() {\n                 write!(f,\n-                    \"({args:#}){arrow:#}\", args = self.inputs.print(), arrow = self.output.print())\n+                    \"({args:#}{ellipsis}){arrow:#}\",\n+                    args = self.inputs.print(), ellipsis = ellipsis, arrow = self.output.print())\n             } else {\n                 write!(f,\n-                    \"({args}){arrow}\", args = self.inputs.print(), arrow = self.output.print())\n+                    \"({args}{ellipsis}){arrow}\",\n+                    args = self.inputs.print(), ellipsis = ellipsis, arrow = self.output.print())\n             }\n         })\n     }\n@@ -975,7 +977,12 @@ impl Function<'_> {\n                 }\n             }\n \n-            let args_plain = format!(\"({})\", args_plain);\n+            let mut args_plain = format!(\"({})\", args_plain);\n+\n+            if decl.c_variadic {\n+                args.push_str(\",<br> ...\");\n+                args_plain.push_str(\", ...\");\n+            }\n \n             let output = if let hir::IsAsync::Async = asyncness {\n                 Cow::Owned(decl.sugared_async_return_type())"}, {"sha": "bc468c1ad0ebe549ac74b387de36b1c149f5067d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1893,7 +1893,6 @@ impl Param {\n pub struct FnDecl {\n     pub inputs: Vec<Param>,\n     pub output: FunctionRetTy,\n-    pub c_variadic: bool,\n }\n \n impl FnDecl {\n@@ -1903,6 +1902,12 @@ impl FnDecl {\n     pub fn has_self(&self) -> bool {\n         self.inputs.get(0).map(Param::is_self).unwrap_or(false)\n     }\n+    pub fn c_variadic(&self) -> bool {\n+        self.inputs.last().map(|arg| match arg.ty.kind {\n+            TyKind::CVarArgs => true,\n+            _ => false,\n+        }).unwrap_or(false)\n+    }\n }\n \n /// Is the trait definition an auto trait?"}, {"sha": "8c5289671c98e18651f05d0577905239c5b64355", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -562,7 +562,6 @@ impl<'a> ExtCtxt<'a> {\n         P(ast::FnDecl {\n             inputs,\n             output,\n-            c_variadic: false\n         })\n     }\n "}, {"sha": "d7fc74955bbbde1c421c5c1e86226f594df07b97", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -531,7 +531,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             self.check_abi(header.abi, span);\n         }\n \n-        if fn_decl.c_variadic {\n+        if fn_decl.c_variadic() {\n             gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }\n \n@@ -564,7 +564,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);\n                 }\n-                if sig.decl.c_variadic {\n+                if sig.decl.c_variadic() {\n                     gate_feature_post!(&self, c_variadic, ti.span,\n                                        \"C-variadic functions are unstable\");\n                 }\n@@ -601,7 +601,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match ii.kind {\n-            ast::ImplItemKind::Method(..) => {}\n+            ast::ImplItemKind::Method(ref sig, _) => {\n+                if sig.decl.c_variadic() {\n+                    gate_feature_post!(&self, c_variadic, ii.span,\n+                                       \"C-variadic functions are unstable\");\n+                }\n+            }\n             ast::ImplItemKind::OpaqueTy(..) => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "80dfe9e5be0ad60054ac8053220e36153c2cb3c7", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -717,7 +717,7 @@ pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T)\n }\n \n pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {\n-    let FnDecl { inputs, output, c_variadic: _ } = decl.deref_mut();\n+    let FnDecl { inputs, output } = decl.deref_mut();\n     inputs.flat_map_in_place(|param| vis.flat_map_param(param));\n     match output {\n         FunctionRetTy::Default(span) => vis.visit_span(span),"}, {"sha": "f22fd5ad703d9e4e7c80680e42f3fd9a374679fb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1194,7 +1194,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_fn_params(&mut self, named_params: bool, allow_c_variadic: bool)\n-                     -> PResult<'a, (Vec<Param> , bool)> {\n+                     -> PResult<'a, Vec<Param>> {\n         let sp = self.token.span;\n         let mut c_variadic = false;\n         let (params, _): (Vec<Option<Param>>, _) = self.parse_paren_comma_seq(|p| {\n@@ -1218,6 +1218,8 @@ impl<'a> Parser<'a> {\n                             let span = p.token.span;\n                             p.span_err(span,\n                                 \"`...` must be the last argument of a C-variadic function\");\n+                            // FIXME(eddyb) this should probably still push `CVarArgs`.\n+                            // Maybe AST validation/HIR lowering should emit the above error?\n                             Ok(None)\n                         } else {\n                             Ok(Some(param))\n@@ -1245,7 +1247,7 @@ impl<'a> Parser<'a> {\n                           \"C-variadic function must be declared with at least one named argument\");\n         }\n \n-        Ok((params, c_variadic))\n+        Ok(params)\n     }\n \n     /// Returns the parsed optional self parameter and whether a self shortcut was used.\n@@ -1414,7 +1416,6 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: fn_inputs,\n             output: self.parse_ret_ty(true)?,\n-            c_variadic: false\n         }))\n     }\n "}, {"sha": "23674ad589dc570716e65b9225355c265b36672b", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1176,7 +1176,6 @@ impl<'a> Parser<'a> {\n         Ok(P(FnDecl {\n             inputs: inputs_captures,\n             output,\n-            c_variadic: false\n         }))\n     }\n "}, {"sha": "92b19b73e571953751c68f9016ac019bdca0170e", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1292,13 +1292,12 @@ impl<'a> Parser<'a> {\n \n     /// Parses the argument list and result type of a function declaration.\n     fn parse_fn_decl(&mut self, allow_c_variadic: bool) -> PResult<'a, P<FnDecl>> {\n-        let (args, c_variadic) = self.parse_fn_params(true, allow_c_variadic)?;\n+        let args = self.parse_fn_params(true, allow_c_variadic)?;\n         let ret_ty = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: args,\n             output: ret_ty,\n-            c_variadic,\n         }))\n     }\n "}, {"sha": "c52d3733b5e0afd068b852e717c9736f6e8b5ebe", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -292,12 +292,11 @@ impl<'a> Parser<'a> {\n         };\n \n         self.expect_keyword(kw::Fn)?;\n-        let (inputs, c_variadic) = self.parse_fn_params(false, true)?;\n+        let inputs = self.parse_fn_params(false, true)?;\n         let ret_ty = self.parse_ret_ty(false)?;\n         let decl = P(FnDecl {\n             inputs,\n             output: ret_ty,\n-            c_variadic,\n         });\n         Ok(TyKind::BareFn(P(BareFnTy {\n             abi,"}, {"sha": "faa70edbfa29b7249a9c45a28358deb8520c30ef", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -29,7 +29,6 @@ fn test_fun_to_string() {\n         let decl = ast::FnDecl {\n             inputs: Vec::new(),\n             output: ast::FunctionRetTy::Default(syntax_pos::DUMMY_SP),\n-            c_variadic: false\n         };\n         let generics = ast::Generics::default();\n         assert_eq!("}, {"sha": "bd8f1775b3d048dcb8ee387f44f2be317c4781d6", "filename": "src/test/rustdoc/variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Frustdoc%2Fvariadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Frustdoc%2Fvariadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvariadic.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1,4 +1,4 @@\n extern \"C\" {\n-    // @has variadic/fn.foo.html //pre 'pub unsafe extern \"C\" fn foo(x: i32, _: ...)'\n+    // @has variadic/fn.foo.html //pre 'pub unsafe extern \"C\" fn foo(x: i32, ...)'\n     pub fn foo(x: i32, ...);\n }"}, {"sha": "d4aff73590734dfdbae933e01698eebfb4a034fd", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -114,7 +114,6 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 let decl = P(FnDecl {\n                     inputs: vec![],\n                     output: FunctionRetTy::Default(DUMMY_SP),\n-                    c_variadic: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(\n                         ExprKind::Closure(CaptureBy::Value,"}, {"sha": "73f72a177bcaaa5b59d9f273991355e3fca26db1", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -29,15 +29,15 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                                                        ^^^ expected non-variadic fn, found variadic function\n    |\n    = note: expected type `unsafe extern \"C\" fn(isize, u8)`\n-              found type `for<'r> unsafe extern \"C\" fn(isize, u8, std::ffi::VaListImpl<'r>, ...) {foo}`\n+              found type `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                                                      ^^^ expected variadic fn, found non-variadic function\n    |\n-   = note: expected type `for<'r> extern \"C\" fn(isize, u8, std::ffi::VaListImpl<'r>, ...)`\n+   = note: expected type `extern \"C\" fn(isize, u8, ...)`\n               found type `extern \"C\" fn(isize, u8) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function"}, {"sha": "8b70b15fa6e50e8e7b8dcbe776908785e1e42d66", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1,18 +1,30 @@\n-error[E0621]: explicit lifetime required in the type of `ap`\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:8:5\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n+   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n+   |                                     |\n+   |                                     lifetime `'f` defined here\n+LL |     ap\n+   |     ^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'f`\n+\n+error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                                       --- help: add explicit lifetime `'f` to the type of `ap`: `core::ffi::VaListImpl<'f>`\n+   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n+   |                                     |\n+   |                                     lifetime `'f` defined here\n LL |     ap\n-   |     ^^ lifetime `'f` required\n+   |     ^^ returning this value requires that `'1` must outlive `'f`\n \n-error[E0621]: explicit lifetime required in the type of `ap`\n+error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:12:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaListImpl<'static>`\n+   |                                               -- has type `core::ffi::VaListImpl<'1>`\n LL |     ap\n-   |     ^^ lifetime `'static` required\n+   |     ^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:16:33\n@@ -44,7 +56,7 @@ LL |     *ap0 = ap1;\n    |     ^^^^ assignment requires that `'2` must outlive `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:25:5\n+  --> $DIR/variadic-ffi-4.rs:24:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n@@ -54,7 +66,7 @@ LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:25:5\n+  --> $DIR/variadic-ffi-4.rs:24:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n@@ -64,15 +76,15 @@ LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ assignment requires that `'2` must outlive `'1`\n \n error[E0384]: cannot assign to immutable argument `ap0`\n-  --> $DIR/variadic-ffi-4.rs:25:5\n+  --> $DIR/variadic-ffi-4.rs:24:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               --- help: make this binding mutable: `mut ap0`\n LL |     ap0 = &mut ap1;\n    |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n \n error[E0597]: `ap1` does not live long enough\n-  --> $DIR/variadic-ffi-4.rs:25:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                                    - let's call the lifetime of this reference `'1`\n@@ -86,7 +98,7 @@ LL | }\n    | - `ap1` dropped here while still borrowed\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:33:12\n+  --> $DIR/variadic-ffi-4.rs:31:12\n    |\n LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n@@ -96,7 +108,7 @@ LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:33:12\n+  --> $DIR/variadic-ffi-4.rs:31:12\n    |\n LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n    |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n@@ -105,7 +117,7 @@ LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ argument requires that `'2` must outlive `'1`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0384, E0597, E0621.\n+Some errors have detailed explanations: E0384, E0597.\n For more information about an error, try `rustc --explain E0384`."}, {"sha": "a4d658cef16303141a16d677c864d0cad5354827", "filename": "src/test/ui/c-variadic/variadic-ffi-4.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -5,11 +5,11 @@\n use core::ffi::{VaList, VaListImpl};\n \n pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-    ap //~ ERROR: explicit lifetime required\n+    ap //~ ERROR: mismatched types\n }\n \n pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-    ap //~ ERROR: explicit lifetime required\n+    ap //~ ERROR: mismatched types\n }\n \n pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n@@ -18,18 +18,15 @@ pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n \n pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n     *ap0 = ap1; //~ ERROR: mismatched types\n-    //~^ ERROR: mismatched types\n }\n \n pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n     ap0 = &mut ap1;\n     //~^ ERROR: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n-    //~^^ ERROR: mismatched types\n-    //~^^^ ERROR: mismatched types\n-    //~^^^^ ERROR: cannot infer an appropriate lifetime\n+    //~| ERROR: mismatched types\n+    //~| ERROR: cannot infer an appropriate lifetime\n }\n \n pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n     *ap0 = ap1.clone(); //~ ERROR: mismatched types\n-    //~^ ERROR: mismatched types\n }"}, {"sha": "b986d0c24350615783699b8fce02bc5dd18bf820", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 68, "deletions": 131, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1,18 +1,42 @@\n-error[E0621]: explicit lifetime required in the type of `ap`\n+error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                                       --- help: add explicit lifetime `'f` to the type of `ap`: `core::ffi::VaListImpl<'f>`\n LL |     ap\n-   |     ^^ lifetime `'f` required\n+   |     ^^ lifetime mismatch\n+   |\n+   = note: expected type `core::ffi::VaListImpl<'f>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the scope of call-site for function at 7:78...\n+  --> $DIR/variadic-ffi-4.rs:7:78\n+   |\n+LL |   pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n+   |  ______________________________________________________________________________^\n+LL | |     ap\n+LL | | }\n+   | |_^\n+note: ...does not necessarily outlive the lifetime 'f as defined on the function body at 7:37\n+  --> $DIR/variadic-ffi-4.rs:7:37\n+   |\n+LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n+   |                                     ^^\n \n-error[E0621]: explicit lifetime required in the type of `ap`\n+error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-4.rs:12:5\n    |\n-LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-   |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaListImpl<'static>`\n LL |     ap\n-   |     ^^ lifetime `'static` required\n+   |     ^^ lifetime mismatch\n+   |\n+   = note: expected type `core::ffi::VaListImpl<'static>`\n+              found type `core::ffi::VaListImpl<'_>`\n+note: the scope of call-site for function at 11:79...\n+  --> $DIR/variadic-ffi-4.rs:11:79\n+   |\n+LL |   pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n+   |  _______________________________________________________________________________^\n+LL | |     ap\n+LL | | }\n+   | |_^\n+   = note: ...does not necessarily outlive the static lifetime\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/variadic-ffi-4.rs:16:33\n@@ -47,229 +71,142 @@ LL |     *ap0 = ap1;\n    |\n    = note: expected type `core::ffi::VaListImpl<'_>`\n               found type `core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 19:1...\n-  --> $DIR/variadic-ffi-4.rs:19:1\n+note: the scope of call-site for function at 19:87...\n+  --> $DIR/variadic-ffi-4.rs:19:87\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL |   pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |  _______________________________________________________________________________________^\n LL | |     *ap0 = ap1;\n-LL | |\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 19:1\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1;\n-LL | |\n-LL | | }\n-   | |_^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:20:12\n-   |\n-LL |     *ap0 = ap1;\n-   |            ^^^ lifetime mismatch\n-   |\n-   = note: expected type `core::ffi::VaListImpl<'_>`\n-              found type `core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #2 defined on the function body at 19:1...\n-  --> $DIR/variadic-ffi-4.rs:19:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     *ap0 = ap1;\n-LL | |\n-LL | | }\n-   | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 19:1\n-  --> $DIR/variadic-ffi-4.rs:19:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     *ap0 = ap1;\n-LL | |\n LL | | }\n    | |_^\n \n error[E0490]: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:25:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: the type is valid for the anonymous lifetime #1 defined on the function body at 24:1\n-  --> $DIR/variadic-ffi-4.rs:24:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 24:1\n-  --> $DIR/variadic-ffi-4.rs:24:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:25:11\n-   |\n-LL |     ap0 = &mut ap1;\n-   |           ^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `&mut core::ffi::VaListImpl<'_>`\n-              found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 24:1...\n-  --> $DIR/variadic-ffi-4.rs:24:1\n+note: the type is valid for the anonymous lifetime #1 defined on the function body at 23:1\n+  --> $DIR/variadic-ffi-4.rs:23:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 24:1\n-  --> $DIR/variadic-ffi-4.rs:24:1\n+note: but the borrow lasts for the scope of call-site for function at 23:83\n+  --> $DIR/variadic-ffi-4.rs:23:83\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+LL |   pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+   |  ___________________________________________________________________________________^\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | }\n    | |_^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:25:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `&mut core::ffi::VaListImpl<'_>`\n               found type `&mut core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #2 defined on the function body at 24:1...\n-  --> $DIR/variadic-ffi-4.rs:24:1\n+note: the scope of call-site for function at 23:83...\n+  --> $DIR/variadic-ffi-4.rs:23:83\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+LL |   pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+   |  ___________________________________________________________________________________^\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 24:1\n-  --> $DIR/variadic-ffi-4.rs:24:1\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 23:1\n+  --> $DIR/variadic-ffi-4.rs:23:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | }\n    | |_^\n \n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:25:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the function body at 24:1...\n-  --> $DIR/variadic-ffi-4.rs:24:1\n+note: first, the lifetime cannot outlive the scope of call-site for function at 23:83...\n+  --> $DIR/variadic-ffi-4.rs:23:83\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+LL |   pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+   |  ___________________________________________________________________________________^\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | }\n    | |_^\n note: ...so that the type `core::ffi::VaListImpl<'_>` is not borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:25:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n-note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 24:1...\n-  --> $DIR/variadic-ffi-4.rs:24:1\n+note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 23:1...\n+  --> $DIR/variadic-ffi-4.rs:23:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | }\n    | |_^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/variadic-ffi-4.rs:25:11\n+  --> $DIR/variadic-ffi-4.rs:24:11\n    |\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:33:12\n+  --> $DIR/variadic-ffi-4.rs:31:12\n    |\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `core::ffi::VaListImpl<'_>`\n               found type `core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #3 defined on the function body at 32:1...\n-  --> $DIR/variadic-ffi-4.rs:32:1\n+note: the scope of call-site for function at 30:87...\n+  --> $DIR/variadic-ffi-4.rs:30:87\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+LL |   pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |  _______________________________________________________________________________________^\n LL | |     *ap0 = ap1.clone();\n-LL | |\n LL | | }\n    | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 32:1\n-  --> $DIR/variadic-ffi-4.rs:32:1\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 30:1\n+  --> $DIR/variadic-ffi-4.rs:30:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n LL | |     *ap0 = ap1.clone();\n-LL | |\n-LL | | }\n-   | |_^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:33:12\n-   |\n-LL |     *ap0 = ap1.clone();\n-   |            ^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `core::ffi::VaListImpl<'_>`\n-              found type `core::ffi::VaListImpl<'_>`\n-note: the anonymous lifetime #2 defined on the function body at 32:1...\n-  --> $DIR/variadic-ffi-4.rs:32:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     *ap0 = ap1.clone();\n-LL | |\n-LL | | }\n-   | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 32:1\n-  --> $DIR/variadic-ffi-4.rs:32:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     *ap0 = ap1.clone();\n-LL | |\n LL | | }\n    | |_^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0308, E0621.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c832e09ac1118deec04a4dfbdb1afe000be16b34", "filename": "src/test/ui/error-codes/E0617.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n extern {\n     fn printf(c: *const i8, ...);\n }\n@@ -22,7 +20,7 @@ fn main() {\n         //~^ ERROR can't pass `u16` to variadic function\n         //~| HELP cast the value to `c_uint`\n         printf(::std::ptr::null(), printf);\n-        //~^ ERROR can't pass `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...) {printf}` to variadic function\n-        //~| HELP cast the value to `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...)`\n+        //~^ ERROR can't pass `unsafe extern \"C\" fn(*const i8, ...) {printf}` to variadic function\n+        //~| HELP cast the value to `unsafe extern \"C\" fn(*const i8, ...)`\n     }\n }"}, {"sha": "7c4df099d0dd144060ec8c54507f24ca7d6c2f14", "filename": "src/test/ui/error-codes/E0617.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -1,42 +1,42 @@\n error[E0617]: can't pass `f32` to variadic function\n-  --> $DIR/E0617.rs:9:36\n+  --> $DIR/E0617.rs:7:36\n    |\n LL |         printf(::std::ptr::null(), 0f32);\n    |                                    ^^^^ help: cast the value to `c_double`: `0f32 as c_double`\n \n error[E0617]: can't pass `i8` to variadic function\n-  --> $DIR/E0617.rs:12:36\n+  --> $DIR/E0617.rs:10:36\n    |\n LL |         printf(::std::ptr::null(), 0i8);\n    |                                    ^^^ help: cast the value to `c_int`: `0i8 as c_int`\n \n error[E0617]: can't pass `i16` to variadic function\n-  --> $DIR/E0617.rs:15:36\n+  --> $DIR/E0617.rs:13:36\n    |\n LL |         printf(::std::ptr::null(), 0i16);\n    |                                    ^^^^ help: cast the value to `c_int`: `0i16 as c_int`\n \n error[E0617]: can't pass `u8` to variadic function\n-  --> $DIR/E0617.rs:18:36\n+  --> $DIR/E0617.rs:16:36\n    |\n LL |         printf(::std::ptr::null(), 0u8);\n    |                                    ^^^ help: cast the value to `c_uint`: `0u8 as c_uint`\n \n error[E0617]: can't pass `u16` to variadic function\n-  --> $DIR/E0617.rs:21:36\n+  --> $DIR/E0617.rs:19:36\n    |\n LL |         printf(::std::ptr::null(), 0u16);\n    |                                    ^^^^ help: cast the value to `c_uint`: `0u16 as c_uint`\n \n-error[E0617]: can't pass `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...) {printf}` to variadic function\n-  --> $DIR/E0617.rs:24:36\n+error[E0617]: can't pass `unsafe extern \"C\" fn(*const i8, ...) {printf}` to variadic function\n+  --> $DIR/E0617.rs:22:36\n    |\n LL |         printf(::std::ptr::null(), printf);\n    |                                    ^^^^^^\n-help: cast the value to `for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...)`\n+help: cast the value to `unsafe extern \"C\" fn(*const i8, ...)`\n    |\n-LL |         printf(::std::ptr::null(), printf as for<'r> unsafe extern \"C\" fn(*const i8, std::ffi::VaListImpl<'r>, ...));\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         printf(::std::ptr::null(), printf as unsafe extern \"C\" fn(*const i8, ...));\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "a3d966bb0b0356c8f5daaa913c8ede2fd90cb7c0", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -46,26 +46,26 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN198_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h6f205aef6a8ccc7bE)\n-  --> $DIR/impl1.rs:63:13\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h059bf53000885489E)\n+  --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h6f205aef6a8ccc7b)\n-  --> $DIR/impl1.rs:63:13\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h059bf53000885489)\n+  --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n-  --> $DIR/impl1.rs:63:13\n+error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n+  --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n-  --> $DIR/impl1.rs:70:13\n+error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+  --> $DIR/impl1.rs:68:13\n    |\n LL |             #[rustc_def_path]\n    |             ^^^^^^^^^^^^^^^^^"}, {"sha": "add0d10ea6cb0aed76ee4fdd871b89210dd781da", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -57,19 +57,17 @@ fn main() {\n         }\n \n         // Test type mangling, by putting them in an `impl` header.\n-        // FIXME(eddyb) test C varargs when `core::ffi::VaListImpl` stops leaking into the signature\n-        // (which is a problem because `core` has an unpredictable hash) - see also #44930.\n-        impl Bar for [&'_ (dyn Foo<Assoc = extern fn(&u8, /*...*/)> + AutoTrait); 3] {\n+        impl Bar for [&'_ (dyn Foo<Assoc = extern fn(&u8, ...)> + AutoTrait); 3] {\n             #[rustc_symbol_name]\n-            //[legacy]~^ ERROR symbol-name(_ZN198_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n-            //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method\n-            //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n-             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-                //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n-                //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n+            //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n+            //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method\n+            //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n+             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+                //[v0]~| ERROR demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n+                //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n-            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n-               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+            //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+               //[v0]~^^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n             fn method(&self) {}\n         }\n     };"}, {"sha": "01fe39ddf6cf9310c3f2529bb440088c22d40583", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37333b5131ba867007964dfd9b20fe59a5c191ef/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=37333b5131ba867007964dfd9b20fe59a5c191ef", "patch": "@@ -46,26 +46,26 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-  --> $DIR/impl1.rs:63:13\n+error: symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+  --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:63:13\n+error: demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n+  --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:63:13\n+error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n+  --> $DIR/impl1.rs:61:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n-  --> $DIR/impl1.rs:70:13\n+error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n+  --> $DIR/impl1.rs:68:13\n    |\n LL |             #[rustc_def_path]\n    |             ^^^^^^^^^^^^^^^^^"}]}