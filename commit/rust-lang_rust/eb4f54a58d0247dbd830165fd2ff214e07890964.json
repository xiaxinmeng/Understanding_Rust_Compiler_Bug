{"sha": "eb4f54a58d0247dbd830165fd2ff214e07890964", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGY1NGE1OGQwMjQ3ZGJkODMwMTY1ZmQyZmYyMTRlMDc4OTA5NjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-17T03:41:21Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Move feature gating to pre-expansion.", "tree": {"sha": "59489d9d482d57bf95a33850bc6a605aa824c452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59489d9d482d57bf95a33850bc6a605aa824c452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4f54a58d0247dbd830165fd2ff214e07890964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4f54a58d0247dbd830165fd2ff214e07890964", "html_url": "https://github.com/rust-lang/rust/commit/eb4f54a58d0247dbd830165fd2ff214e07890964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4f54a58d0247dbd830165fd2ff214e07890964/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5518802677d4701185b5cd3b9df4b263fc864b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5518802677d4701185b5cd3b9df4b263fc864b2", "html_url": "https://github.com/rust-lang/rust/commit/d5518802677d4701185b5cd3b9df4b263fc864b2"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "8ec07de5fab73d926967966fd88e89a2b7443df2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb4f54a58d0247dbd830165fd2ff214e07890964/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4f54a58d0247dbd830165fd2ff214e07890964/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=eb4f54a58d0247dbd830165fd2ff214e07890964", "patch": "@@ -1940,27 +1940,6 @@ impl<'a> PostExpansionVisitor<'a> {\n             Err(mut err) => err.emit(),\n         }\n     }\n-\n-    /// Recurse into all places where a `let` expression would be feature gated\n-    /// and emit gate post errors for those.\n-    fn find_and_gate_lets(&mut self, e: &'a ast::Expr) {\n-        match &e.node {\n-            ast::ExprKind::Paren(e) => {\n-                self.find_and_gate_lets(e);\n-            }\n-            ast::ExprKind::Binary(op, lhs, rhs) if op.node == ast::BinOpKind::And => {\n-                self.find_and_gate_lets(lhs);\n-                self.find_and_gate_lets(rhs);\n-            }\n-            ast::ExprKind::Let(..) => {\n-                gate_feature_post!(\n-                    &self, let_chains, e.span,\n-                    \"`let` expressions in this position are experimental\"\n-                );\n-            }\n-            _ => {}\n-        }\n-    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -2158,10 +2137,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.node {\n-            ast::ExprKind::If(ref e, ..) | ast::ExprKind::While(ref e, ..) => match e.node {\n-                ast::ExprKind::Let(..) => {} // Stable!,\n-                _ => self.find_and_gate_lets(e),\n-            }\n             ast::ExprKind::Box(_) => {\n                 gate_feature_post!(&self, box_syntax, e.span, EXPLAIN_BOX_SYNTAX);\n             }\n@@ -2546,6 +2521,17 @@ pub fn check_crate(krate: &ast::Crate,\n             \"attributes on function parameters are unstable\"\n         ));\n \n+    sess\n+        .let_chains_spans\n+        .borrow()\n+        .iter()\n+        .for_each(|span| gate_feature!(\n+            &ctx,\n+            let_chains,\n+            *span,\n+            \"`let` expressions in this position are experimental\"\n+        ));\n+\n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,\n         builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,"}, {"sha": "e19eab371f44ed1550eae1a6e13372b2889ad419", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb4f54a58d0247dbd830165fd2ff214e07890964/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4f54a58d0247dbd830165fd2ff214e07890964/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=eb4f54a58d0247dbd830165fd2ff214e07890964", "patch": "@@ -54,7 +54,9 @@ pub struct ParseSess {\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n-    pub param_attr_spans: Lock<Vec<Span>>\n+    pub param_attr_spans: Lock<Vec<Span>>,\n+    // Places where `let` exprs were used and should be feature gated according to `let_chains`.\n+    pub let_chains_spans: Lock<Vec<Span>>,\n }\n \n impl ParseSess {\n@@ -81,6 +83,7 @@ impl ParseSess {\n             edition: Edition::from_session(),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n+            let_chains_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "1e420855b676b22c23f1db513060eacdb2e47b33", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb4f54a58d0247dbd830165fd2ff214e07890964/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4f54a58d0247dbd830165fd2ff214e07890964/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eb4f54a58d0247dbd830165fd2ff214e07890964", "patch": "@@ -3158,6 +3158,7 @@ impl<'a> Parser<'a> {\n     fn parse_if_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n         let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+        self.ungate_prev_let_expr(&cond);\n \n         // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then\n         // verify that the last statement is either an implicit return (no `;`) or an explicit\n@@ -3187,18 +3188,27 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(hi), ExprKind::If(cond, thn, els), attrs))\n     }\n \n+    /// Remove the last feature gating of a `let` expression that must the one provided.\n+    fn ungate_prev_let_expr(&mut self, expr: &Expr) {\n+        if let ExprKind::Let(..) = expr.node {\n+            let last = self.sess.let_chains_spans.borrow_mut().pop();\n+            debug_assert_eq!(expr.span, last.unwrap());\n+        }\n+    }\n+\n     /// Parses a `let $pats = $expr` pseudo-expression.\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n         let pats = self.parse_pats()?;\n         self.expect(&token::Eq)?;\n-\n         let expr = self.with_res(\n             Restrictions::NO_STRUCT_LITERAL,\n             |this| this.parse_assoc_expr_with(1 + AssocOp::LAnd.precedence(), None.into())\n         )?;\n-        Ok(self.mk_expr(lo.to(expr.span), ExprKind::Let(pats, expr), attrs))\n+        let span = lo.to(expr.span);\n+        self.sess.let_chains_spans.borrow_mut().push(span);\n+        Ok(self.mk_expr(span, ExprKind::Let(pats, expr), attrs))\n     }\n \n     /// Parses `move |args| expr`.\n@@ -3286,6 +3296,7 @@ impl<'a> Parser<'a> {\n                             span_lo: Span,\n                             mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+        self.ungate_prev_let_expr(&cond);\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);"}]}