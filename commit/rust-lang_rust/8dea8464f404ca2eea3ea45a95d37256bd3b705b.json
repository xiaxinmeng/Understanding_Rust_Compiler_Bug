{"sha": "8dea8464f404ca2eea3ea45a95d37256bd3b705b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZWE4NDY0ZjQwNGNhMmVlYTNlYTQ1YTk1ZDM3MjU2YmQzYjcwNWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-08T22:20:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-08T22:20:32Z"}, "message": "Rollup merge of #61646 - L117:master, r=Centril\n\nRemove useless allocations in macro_rules follow logic.\n\nCloses  #61543", "tree": {"sha": "6e307472910dc18718df97a41603c0309952b696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e307472910dc18718df97a41603c0309952b696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dea8464f404ca2eea3ea45a95d37256bd3b705b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc/DSxCRBK7hj4Ov3rIwAAdHIIAGAFYW3LKpcAbCmvf9EcUxwu\nZhMwqI9P975codANM3T/80eFtKzr34NUMWssOjG98W/GkDOdqgYfNvbqS3I3Yjtx\nQEutjGpw1N3rrwa8tFJXSQ4Yw8ePUNZvR/Bb/UWIPTIvuP0mKnT1SP0Hmg7nvzWO\nGzKRMGbozjrC2TtJ9zImwn/up/JQEDhuNdahDTnScZGXpS2quNVZfEO7cMWSjTb9\nuQ9HgwECGaovVB+FTCoSclgVvlq+i4BWry9PwHOc6g4AQVaoTX/fxjlfIi6T6SBW\nMjcKDj15+kURN7TyVlRXHKqA2gl3rd5iF2mWpGWyAzsmMtcHfN9cRcRrpiXQz5I=\n=zl50\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e307472910dc18718df97a41603c0309952b696\nparent 5c6f6b810c1d5850814a3c5960c4dfe2aee77d0d\nparent 7a74f33f9067365f9b67057ea536e5f4d84fcc45\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560032432 +0200\ncommitter GitHub <noreply@github.com> 1560032432 +0200\n\nRollup merge of #61646 - L117:master, r=Centril\n\nRemove useless allocations in macro_rules follow logic.\n\nCloses  #61543\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dea8464f404ca2eea3ea45a95d37256bd3b705b", "html_url": "https://github.com/rust-lang/rust/commit/8dea8464f404ca2eea3ea45a95d37256bd3b705b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dea8464f404ca2eea3ea45a95d37256bd3b705b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c6f6b810c1d5850814a3c5960c4dfe2aee77d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6f6b810c1d5850814a3c5960c4dfe2aee77d0d", "html_url": "https://github.com/rust-lang/rust/commit/5c6f6b810c1d5850814a3c5960c4dfe2aee77d0d"}, {"sha": "7a74f33f9067365f9b67057ea536e5f4d84fcc45", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a74f33f9067365f9b67057ea536e5f4d84fcc45", "html_url": "https://github.com/rust-lang/rust/commit/7a74f33f9067365f9b67057ea536e5f4d84fcc45"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "b9b93b954fe40f731970f0b87379926d76db858b", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8dea8464f404ca2eea3ea45a95d37256bd3b705b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dea8464f404ca2eea3ea45a95d37256bd3b705b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8dea8464f404ca2eea3ea45a95d37256bd3b705b", "patch": "@@ -909,7 +909,7 @@ fn check_matcher_core(sess: &ParseSess,\n                             continue 'each_last;\n                         }\n                         IsInFollow::Yes => {}\n-                        IsInFollow::No(ref possible) => {\n+                        IsInFollow::No(possible) => {\n                             let may_be = if last.tokens.len() == 1 &&\n                                 suffix_first.tokens.len() == 1\n                             {\n@@ -933,7 +933,7 @@ fn check_matcher_core(sess: &ParseSess,\n                                 format!(\"not allowed after `{}` fragments\", frag_spec),\n                             );\n                             let msg = \"allowed there are: \";\n-                            match &possible[..] {\n+                            match possible {\n                                 &[] => {}\n                                 &[t] => {\n                                     err.note(&format!(\n@@ -997,7 +997,7 @@ fn frag_can_be_followed_by_any(frag: &str) -> bool {\n \n enum IsInFollow {\n     Yes,\n-    No(Vec<&'static str>),\n+    No(&'static [&'static str]),\n     Invalid(String, &'static str),\n }\n \n@@ -1029,28 +1029,28 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n                 IsInFollow::Yes\n             },\n             \"stmt\" | \"expr\"  => {\n-                let tokens = vec![\"`=>`\", \"`,`\", \"`;`\"];\n+                const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`;`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n                         FatArrow | Comma | Semi => IsInFollow::Yes,\n-                        _ => IsInFollow::No(tokens),\n+                        _ => IsInFollow::No(TOKENS),\n                     },\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"pat\" => {\n-                let tokens = vec![\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n+                const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n                         FatArrow | Comma | Eq | BinOp(token::Or) => IsInFollow::Yes,\n                         Ident(name, false) if name == kw::If || name == kw::In => IsInFollow::Yes,\n-                        _ => IsInFollow::No(tokens),\n+                        _ => IsInFollow::No(TOKENS),\n                     },\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"path\" | \"ty\" => {\n-                let tokens = vec![\n+                const TOKENS: &[&str] = &[\n                     \"`{`\", \"`[`\", \"`=>`\", \"`,`\", \"`>`\",\"`=`\", \"`:`\", \"`;`\", \"`|`\", \"`as`\",\n                     \"`where`\",\n                 ];\n@@ -1062,11 +1062,11 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n                         BinOp(token::Or) => IsInFollow::Yes,\n                         Ident(name, false) if name == kw::As ||\n                                               name == kw::Where => IsInFollow::Yes,\n-                        _ => IsInFollow::No(tokens),\n+                        _ => IsInFollow::No(TOKENS),\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == sym::block =>\n                         IsInFollow::Yes,\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"ident\" | \"lifetime\" => {\n@@ -1084,22 +1084,22 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n             },\n             \"vis\" => {\n                 // Explicitly disallow `priv`, on the off chance it comes back.\n-                let tokens = vec![\"`,`\", \"an ident\", \"a type\"];\n+                const TOKENS: &[&str] = &[\"`,`\", \"an ident\", \"a type\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {\n                         Comma => IsInFollow::Yes,\n                         Ident(name, is_raw) if is_raw || name != kw::Priv => IsInFollow::Yes,\n                         _ => if token.can_begin_type() {\n                             IsInFollow::Yes\n                         } else {\n-                            IsInFollow::No(tokens)\n+                            IsInFollow::No(TOKENS)\n                         }\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == sym::ident\n                                                        || frag.name == sym::ty\n                                                        || frag.name == sym::path =>\n                         IsInFollow::Yes,\n-                    _ => IsInFollow::No(tokens),\n+                    _ => IsInFollow::No(TOKENS),\n                 }\n             },\n             \"\" => IsInFollow::Yes, // kw::Invalid"}]}