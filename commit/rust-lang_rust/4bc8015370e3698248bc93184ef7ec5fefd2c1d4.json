{"sha": "4bc8015370e3698248bc93184ef7ec5fefd2c1d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYzgwMTUzNzBlMzY5ODI0OGJjOTMxODRlZjdlYzVmZWZkMmMxZDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-16T18:04:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T18:04:29Z"}, "message": "Merge #6013\n\n6013: Add support for custom flycheck commands with JSON project workspaces r=jonas-schievink a=woody77\n\nEnable flychecks with JSON project workspaces if an override command was provided as part\r\nof the client configuration:\r\n\r\n```\r\n    \"rust-analyzer.checkOnSave.enable\": true,\r\n    \"rust-analyzer.checkOnSave.overrideCommand\": [\"custom_tool\", \"arg1\", \"arg2\"],\r\n```\r\n\n\nCo-authored-by: Aaron Wood <aaronwood@google.com>", "tree": {"sha": "81c029b5bb262e7dcd10235510b77ef49fc2e8f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81c029b5bb262e7dcd10235510b77ef49fc2e8f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bc8015370e3698248bc93184ef7ec5fefd2c1d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYlOtCRBK7hj4Ov3rIwAAdHIIAF41Gpjuu04r/iCswTqrl57o\n4mkhNEfUBvk3DvDMnYWyGFtNItUHDUU+QCLp5zGwMYv1G9xhiB+7Ppu/Yp6slA7D\ntoHjdOKhjMQWM1qRl9O9a3k45ukcpodk2miJ7T7/Su9EfvYLBbL5IeltmQSSDzmB\n6X+vnleShOlBb7JmxCygsfpinPykj0WNWLAB6WLlObOYPmR0ew+5/XASFJkQ/fU/\npSWu4ogBi0sHcnLKCOZLn0qRlisdWDRqfVJBi73bDfiQK90xhSL5W4R59FlLzxFx\nyzXAtYG5pqUab87npneS0RKk7qCLw1mZjq+lE/zM+mMtfyEzaXkiajkC8A47RTE=\n=HDMx\n-----END PGP SIGNATURE-----\n", "payload": "tree 81c029b5bb262e7dcd10235510b77ef49fc2e8f7\nparent 5df69d903445319bc01a32c93eb4175da5bb94d2\nparent 74c26a785ad8e8ef857b903d3639beb623077933\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1600279469 +0000\ncommitter GitHub <noreply@github.com> 1600279469 +0000\n\nMerge #6013\n\n6013: Add support for custom flycheck commands with JSON project workspaces r=jonas-schievink a=woody77\n\nEnable flychecks with JSON project workspaces if an override command was provided as part\r\nof the client configuration:\r\n\r\n```\r\n    \"rust-analyzer.checkOnSave.enable\": true,\r\n    \"rust-analyzer.checkOnSave.overrideCommand\": [\"custom_tool\", \"arg1\", \"arg2\"],\r\n```\r\n\n\nCo-authored-by: Aaron Wood <aaronwood@google.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8015370e3698248bc93184ef7ec5fefd2c1d4", "html_url": "https://github.com/rust-lang/rust/commit/4bc8015370e3698248bc93184ef7ec5fefd2c1d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8015370e3698248bc93184ef7ec5fefd2c1d4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5df69d903445319bc01a32c93eb4175da5bb94d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5df69d903445319bc01a32c93eb4175da5bb94d2", "html_url": "https://github.com/rust-lang/rust/commit/5df69d903445319bc01a32c93eb4175da5bb94d2"}, {"sha": "74c26a785ad8e8ef857b903d3639beb623077933", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c26a785ad8e8ef857b903d3639beb623077933", "html_url": "https://github.com/rust-lang/rust/commit/74c26a785ad8e8ef857b903d3639beb623077933"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "545f254aae8229c42c70f03dc2bc3798698d5ec6", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bc8015370e3698248bc93184ef7ec5fefd2c1d4/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc8015370e3698248bc93184ef7ec5fefd2c1d4/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=4bc8015370e3698248bc93184ef7ec5fefd2c1d4", "patch": "@@ -13,6 +13,7 @@ use crate::cfg_flag::CfgFlag;\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n     pub(crate) sysroot_src: Option<AbsPathBuf>,\n+    project_root: Option<AbsPathBuf>,\n     crates: Vec<Crate>,\n }\n \n@@ -36,6 +37,7 @@ impl ProjectJson {\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n             sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n+            project_root: base.parent().map(AbsPath::to_path_buf),\n             crates: data\n                 .crates\n                 .into_iter()\n@@ -89,6 +91,12 @@ impl ProjectJson {\n     pub fn crates(&self) -> impl Iterator<Item = (CrateId, &Crate)> + '_ {\n         self.crates.iter().enumerate().map(|(idx, krate)| (CrateId(idx as u32), krate))\n     }\n+    pub fn path(&self) -> Option<&AbsPath> {\n+        match &self.project_root {\n+            Some(p) => Some(p.as_path()),\n+            None => None,\n+        }\n+    }\n }\n \n #[derive(Deserialize)]"}, {"sha": "b819618cb4dae13ac9ed14dcb9ab92f115677773", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bc8015370e3698248bc93184ef7ec5fefd2c1d4/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc8015370e3698248bc93184ef7ec5fefd2c1d4/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=4bc8015370e3698248bc93184ef7ec5fefd2c1d4", "patch": "@@ -2,7 +2,7 @@\n use std::{mem, sync::Arc};\n \n use base_db::{CrateGraph, SourceRoot, VfsPath};\n-use flycheck::FlycheckHandle;\n+use flycheck::{FlycheckConfig, FlycheckHandle};\n use ide::AnalysisChange;\n use project_model::{ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n@@ -244,13 +244,17 @@ impl GlobalState {\n             .iter()\n             // FIXME: Figure out the multi-workspace situation\n             .find_map(|w| match w {\n-                ProjectWorkspace::Cargo { cargo, sysroot: _ } => Some(cargo),\n-                ProjectWorkspace::Json { .. } => None,\n-            })\n-            .map(move |cargo| {\n-                let cargo_project_root = cargo.workspace_root().to_path_buf();\n-                FlycheckHandle::spawn(sender, config, cargo_project_root.into())\n+                ProjectWorkspace::Cargo { cargo, sysroot: _ } => Some(cargo.workspace_root()),\n+                ProjectWorkspace::Json { project, .. } => {\n+                    // Enable flychecks for json projects if a custom flycheck command was supplied\n+                    // in the workspace configuration.\n+                    match config {\n+                        FlycheckConfig::CustomCommand { .. } => project.path(),\n+                        _ => None,\n+                    }\n+                }\n             })\n+            .map(move |root| FlycheckHandle::spawn(sender, config, root.to_path_buf().into()))\n     }\n }\n "}]}