{"sha": "dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZTFlM2I2NDFhYmJlZGU2MjMwZTM5MzFkMTRmMGQ0M2U1YjhlNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-01T09:25:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-01T09:25:03Z"}, "message": "Auto merge of #74582 - Lezzz:rename-hair, r=nikomatsakis\n\nRename HAIR to THIR (Typed HIR).\n\nr? @nikomatsakis\n\nOriginally suggested by @eddyb", "tree": {"sha": "061f37b9c8267480dfc4af6ffaff288967c65173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/061f37b9c8267480dfc4af6ffaff288967c65173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "html_url": "https://github.com/rust-lang/rust/commit/dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5eae9c44d713779a08e6db352088d45cad3e9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5eae9c44d713779a08e6db352088d45cad3e9b6", "html_url": "https://github.com/rust-lang/rust/commit/b5eae9c44d713779a08e6db352088d45cad3e9b6"}, {"sha": "40e6dccfb4b0e0f21cbc846a70b348132ee4d0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/40e6dccfb4b0e0f21cbc846a70b348132ee4d0f2", "html_url": "https://github.com/rust-lang/rust/commit/40e6dccfb4b0e0f21cbc846a70b348132ee4d0f2"}], "stats": {"total": 249, "additions": 128, "deletions": 121}, "files": [{"sha": "775d755444d7d3a23ee63104e28a66c73cb08db4", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -352,7 +352,7 @@ pub struct TypeckResults<'tcx> {\n     pat_binding_modes: ItemLocalMap<BindingMode>,\n \n     /// Stores the types which were implicitly dereferenced in pattern binding modes\n-    /// for later usage in HAIR lowering. For example,\n+    /// for later usage in THIR lowering. For example,\n     ///\n     /// ```\n     /// match &&Some(5i32) {"}, {"sha": "d1cbf209b06cebc4035cb783f8a3de4ccf29cfe3", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,7 +1,7 @@\n use crate::build::matches::ArmHasGuard;\n use crate::build::ForGuard::OutsideGuard;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_hir as hir;\n use rustc_middle::mir::*;\n use rustc_session::lint::builtin::UNSAFE_OP_IN_UNSAFE_FN;\n@@ -176,7 +176,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let tail_result_is_ignored =\n                 destination_ty.is_unit() || this.block_context.currently_ignores_tail_results();\n             let span = match expr {\n-                ExprRef::Hair(expr) => expr.span,\n+                ExprRef::Thir(expr) => expr.span,\n                 ExprRef::Mirror(ref expr) => expr.span,\n             };\n             this.block_context.push(BlockFrame::TailExpr { tail_result_is_ignored, span });\n@@ -235,11 +235,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .push_unsafe_count\n                     .checked_sub(1)\n                     .unwrap_or_else(|| span_bug!(span, \"unsafe count underflow\"));\n-                if self.push_unsafe_count == 0 {\n-                    Some(self.unpushed_unsafe)\n-                } else {\n-                    None\n-                }\n+                if self.push_unsafe_count == 0 { Some(self.unpushed_unsafe) } else { None }\n             }\n         };\n "}, {"sha": "982aefcf6045c2c914d7b2b693a960e9a6d40b10", "filename": "src/librustc_mir_build/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_constant.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,7 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n "}, {"sha": "aac93f313f4e151af252829735b540f4db754ff3", "filename": "src/librustc_mir_build/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -2,7 +2,7 @@\n \n use crate::build::expr::category::Category;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n "}, {"sha": "1e3e104c2bad64d72f959539bd07efbc3efd3850", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -3,7 +3,7 @@\n use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind::BoundsCheck;\n use rustc_middle::mir::*;"}, {"sha": "9c5fddc6b77c097ed6a479a0026b8361f8131c3f", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -4,7 +4,7 @@ use rustc_index::vec::Idx;\n \n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::*;"}, {"sha": "a9cc0cc2f24757e365f9657c551fcc4571a7eee9", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -2,7 +2,7 @@\n \n use crate::build::scope::DropKind;\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_middle::middle::region;\n@@ -67,12 +67,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ExprKind::StaticRef { def_id, .. } => {\n                     assert!(!this.hir.tcx().is_thread_local_static(def_id));\n                     local_decl.internal = true;\n-                    local_decl.local_info = Some(box LocalInfo::StaticRef { def_id, is_thread_local: false });\n+                    local_decl.local_info =\n+                        Some(box LocalInfo::StaticRef { def_id, is_thread_local: false });\n                 }\n                 ExprKind::ThreadLocalRef(def_id) => {\n                     assert!(this.hir.tcx().is_thread_local_static(def_id));\n                     local_decl.internal = true;\n-                    local_decl.local_info = Some(box LocalInfo::StaticRef { def_id, is_thread_local: true });\n+                    local_decl.local_info =\n+                        Some(box LocalInfo::StaticRef { def_id, is_thread_local: true });\n                 }\n                 _ => {}\n             }"}, {"sha": "9cabd186d8460cff88350229693e23f81ba76e9b", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,4 +1,4 @@\n-use crate::hair::*;\n+use crate::thir::*;\n \n #[derive(Debug, PartialEq)]\n crate enum Category {"}, {"sha": "c3f54b39a3f38e6b7f895ae12d58a59e9def9523", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -2,7 +2,7 @@\n \n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_ast::ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -320,23 +320,23 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n             ExprKind::InlineAsm { template, operands, options, line_spans } => {\n-                use crate::hair;\n+                use crate::thir;\n                 use rustc_middle::mir;\n                 let operands = operands\n                     .into_iter()\n                     .map(|op| match op {\n-                        hair::InlineAsmOperand::In { reg, expr } => mir::InlineAsmOperand::In {\n+                        thir::InlineAsmOperand::In { reg, expr } => mir::InlineAsmOperand::In {\n                             reg,\n                             value: unpack!(block = this.as_local_operand(block, expr)),\n                         },\n-                        hair::InlineAsmOperand::Out { reg, late, expr } => {\n+                        thir::InlineAsmOperand::Out { reg, late, expr } => {\n                             mir::InlineAsmOperand::Out {\n                                 reg,\n                                 late,\n                                 place: expr.map(|expr| unpack!(block = this.as_place(block, expr))),\n                             }\n                         }\n-                        hair::InlineAsmOperand::InOut { reg, late, expr } => {\n+                        thir::InlineAsmOperand::InOut { reg, late, expr } => {\n                             let place = unpack!(block = this.as_place(block, expr));\n                             mir::InlineAsmOperand::InOut {\n                                 reg,\n@@ -346,7 +346,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 out_place: Some(place),\n                             }\n                         }\n-                        hair::InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n+                        thir::InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n                             mir::InlineAsmOperand::InOut {\n                                 reg,\n                                 late,\n@@ -356,13 +356,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 }),\n                             }\n                         }\n-                        hair::InlineAsmOperand::Const { expr } => mir::InlineAsmOperand::Const {\n+                        thir::InlineAsmOperand::Const { expr } => mir::InlineAsmOperand::Const {\n                             value: unpack!(block = this.as_local_operand(block, expr)),\n                         },\n-                        hair::InlineAsmOperand::SymFn { expr } => {\n+                        thir::InlineAsmOperand::SymFn { expr } => {\n                             mir::InlineAsmOperand::SymFn { value: box this.as_constant(expr) }\n                         }\n-                        hair::InlineAsmOperand::SymStatic { def_id } => {\n+                        thir::InlineAsmOperand::SymStatic { def_id } => {\n                             mir::InlineAsmOperand::SymStatic { def_id }\n                         }\n                     })"}, {"sha": "f117689d940fd7a210183b1d0a526c8032912d46", "filename": "src/librustc_mir_build/build/expr/stmt.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fstmt.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,11 +1,11 @@\n use crate::build::scope::BreakableTarget;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n-    /// Builds a block of MIR statements to evaluate the HAIR `expr`.\n+    /// Builds a block of MIR statements to evaluate the THIR `expr`.\n     /// If the original expression was an AST statement,\n     /// (e.g., `some().code(&here());`) then `opt_stmt_span` is the\n     /// span of that statement (including its semicolon, if any).\n@@ -150,8 +150,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                     break;\n                                 }\n                             }\n-                            this.block_context\n-                                .push(BlockFrame::TailExpr { tail_result_is_ignored: true, span: expr.span });\n+                            this.block_context.push(BlockFrame::TailExpr {\n+                                tail_result_is_ignored: true,\n+                                span: expr.span,\n+                            });\n                             return Some(expr.span);\n                         }\n                     }"}, {"sha": "7264e495b84fd0dc6026c67f156f4cb25c40a428", "filename": "src/librustc_mir_build/build/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Finto.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -5,7 +5,7 @@\n //! latter `EvalInto` trait.\n \n use crate::build::{BlockAnd, Builder};\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::mir::*;\n \n pub(in crate::build) trait EvalInto<'tcx> {"}, {"sha": "77c0fe8dda5346dd0bbf5010dfcc37e84b7c87b0", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -9,15 +9,18 @@ use crate::build::scope::DropKind;\n use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n-use crate::hair::{self, *};\n-use rustc_data_structures::{fx::{FxHashMap, FxHashSet}, stack::ensure_sufficient_stack};\n+use crate::thir::{self, *};\n+use rustc_data_structures::{\n+    fx::{FxHashMap, FxHashSet},\n+    stack::ensure_sufficient_stack,\n+};\n use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty};\n-use rustc_span::Span;\n use rustc_span::symbol::Symbol;\n+use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::{smallvec, SmallVec};\n \n@@ -395,7 +398,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         ..\n                     },\n                 ascription:\n-                    hair::pattern::Ascription { user_ty: pat_ascription_ty, variance: _, user_ty_span },\n+                    thir::pattern::Ascription { user_ty: pat_ascription_ty, variance: _, user_ty_span },\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard, true);\n@@ -631,7 +634,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: hair::pattern::Ascription { ref user_ty, user_ty_span, variance: _ },\n+                ascription: thir::pattern::Ascription { ref user_ty, user_ty_span, variance: _ },\n             } => {\n                 // This corresponds to something like\n                 //\n@@ -1982,16 +1985,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             source_info,\n             internal: false,\n             is_block_tail: None,\n-            local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n-                binding_mode,\n-                // hypothetically, `visit_primary_bindings` could try to unzip\n-                // an outermost hir::Ty as we descend, matching up\n-                // idents in pat; but complex w/ unclear UI payoff.\n-                // Instead, just abandon providing diagnostic info.\n-                opt_ty_info: None,\n-                opt_match_place,\n-                pat_span,\n-            })))),\n+            local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                VarBindingForm {\n+                    binding_mode,\n+                    // hypothetically, `visit_primary_bindings` could try to unzip\n+                    // an outermost hir::Ty as we descend, matching up\n+                    // idents in pat; but complex w/ unclear UI payoff.\n+                    // Instead, just abandon providing diagnostic info.\n+                    opt_ty_info: None,\n+                    opt_match_place,\n+                    pat_span,\n+                },\n+            )))),\n         };\n         let for_arm_body = self.local_decls.push(local);\n         self.var_debug_info.push(VarDebugInfo {\n@@ -2009,7 +2014,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n                 internal: false,\n                 is_block_tail: None,\n-                local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard))),\n+                local_info: Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                    BindingForm::RefForGuard,\n+                ))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "e584aeb922672f4f6bac94396bd1b3afc902a1db", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -14,7 +14,7 @@\n \n use crate::build::matches::{Ascription, Binding, Candidate, MatchPair};\n use crate::build::Builder;\n-use crate::hair::{self, *};\n+use crate::thir::{self, *};\n use rustc_attr::{SignedInt, UnsignedInt};\n use rustc_hir::RangeEnd;\n use rustc_middle::mir::interpret::truncate;\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match *match_pair.pattern.kind {\n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: hair::pattern::Ascription { variance, user_ty, user_ty_span },\n+                ascription: thir::pattern::Ascription { variance, user_ty, user_ty_span },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n                 // value being matched, taking the variance field into account."}, {"sha": "158ad78a1bf36c4fc629465c3c9bc61f66c1fe2c", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -7,8 +7,8 @@\n \n use crate::build::matches::{Candidate, MatchPair, Test, TestKind};\n use crate::build::Builder;\n-use crate::hair::pattern::compare_const_vals;\n-use crate::hair::*;\n+use crate::thir::pattern::compare_const_vals;\n+use crate::thir::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::RangeEnd;\n use rustc_index::bit_set::BitSet;\n@@ -443,7 +443,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 destination: Some((eq_result, eq_block)),\n                 cleanup: Some(cleanup),\n                 from_hir_call: false,\n-                fn_span: source_info.span\n+                fn_span: source_info.span,\n             },\n         );\n "}, {"sha": "605396c5eb639f722003f4e5b12528e7bde7bd16", "filename": "src/librustc_mir_build/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Futil.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,6 +1,6 @@\n use crate::build::matches::MatchPair;\n use crate::build::Builder;\n-use crate::hair::*;\n+use crate::thir::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n use smallvec::SmallVec;"}, {"sha": "3c4587119cd55453070a8989e4efe61a3e577413", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,7 +1,7 @@\n use crate::build;\n use crate::build::scope::DropKind;\n-use crate::hair::cx::Cx;\n-use crate::hair::{BindingMode, LintLevel, PatKind};\n+use crate::thir::cx::Cx;\n+use crate::thir::{BindingMode, LintLevel, PatKind};\n use rustc_attr::{self as attr, UnwindAttr};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n@@ -294,7 +294,7 @@ struct Builder<'a, 'tcx> {\n     /// see the `scope` module for more details.\n     scopes: scope::Scopes<'tcx>,\n \n-    /// The block-context: each time we build the code within an hair::Block,\n+    /// The block-context: each time we build the code within an thir::Block,\n     /// we push a frame here tracking whether we are building a statement or\n     /// if we are pushing the tail expression of the block. This is used to\n     /// embed information in generated temps about whether they were created"}, {"sha": "2a03bb78c6b1ac31a37e74b51dd8fdc7d05b7548", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,6 +1,6 @@\n /*!\n Managing the scope stack. The scopes are tied to lexical scopes, so as\n-we descend the HAIR, we push a scope on the stack, build its\n+we descend the THIR, we push a scope on the stack, build its\n contents, and then pop it off. Every scope is named by a\n `region::Scope`.\n \n@@ -83,12 +83,12 @@ should go to.\n */\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n-use crate::hair::{Expr, ExprRef, LintLevel};\n-use rustc_middle::middle::region;\n-use rustc_middle::mir::*;\n+use crate::thir::{Expr, ExprRef, LintLevel};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::GeneratorKind;\n+use rustc_middle::middle::region;\n+use rustc_middle::mir::*;\n use rustc_span::{Span, DUMMY_SP};\n use std::collections::hash_map::Entry;\n use std::mem;"}, {"sha": "30545558933f7d8ace5109ec80906bd2cc187dae", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -17,13 +17,13 @@ extern crate log;\n extern crate rustc_middle;\n \n mod build;\n-mod hair;\n mod lints;\n+mod thir;\n \n use rustc_middle::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {\n-    providers.check_match = hair::pattern::check_match;\n-    providers.lit_to_const = hair::constant::lit_to_const;\n+    providers.check_match = thir::pattern::check_match;\n+    providers.lit_to_const = thir::constant::lit_to_const;\n     providers.mir_built = build::mir_built;\n }"}, {"sha": "e5af0b5bd6bed5b852bcea166d86f8d28187c0fc", "filename": "src/librustc_mir_build/thir/constant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fconstant.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "previous_filename": "src/librustc_mir_build/hair/constant.rs"}, {"sha": "980888df7fee41242285ca1224f14dcfa26d814b", "filename": "src/librustc_mir_build/thir/cx/block.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fblock.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,6 +1,6 @@\n-use crate::hair::cx::to_ref::ToRef;\n-use crate::hair::cx::Cx;\n-use crate::hair::{self, *};\n+use crate::thir::cx::to_ref::ToRef;\n+use crate::thir::cx::Cx;\n+use crate::thir::{self, *};\n \n use rustc_hir as hir;\n use rustc_middle::middle::region;\n@@ -71,7 +71,7 @@ fn mirror_stmts<'a, 'tcx>(\n                             ty: pattern.ty,\n                             span: pattern.span,\n                             kind: Box::new(PatKind::AscribeUserType {\n-                                ascription: hair::pattern::Ascription {\n+                                ascription: thir::pattern::Ascription {\n                                     user_ty: PatTyProj::from_user_type(user_ty),\n                                     user_ty_span: ty.span,\n                                     variance: ty::Variance::Covariant,", "previous_filename": "src/librustc_mir_build/hair/cx/block.rs"}, {"sha": "ea41a66b3e43d873d032821e6111a750fa55e4d7", "filename": "src/librustc_mir_build/thir/cx/expr.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fexpr.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,8 +1,8 @@\n-use crate::hair::cx::block;\n-use crate::hair::cx::to_ref::ToRef;\n-use crate::hair::cx::Cx;\n-use crate::hair::util::UserAnnotatedTyHelpers;\n-use crate::hair::*;\n+use crate::thir::cx::block;\n+use crate::thir::cx::to_ref::ToRef;\n+use crate::thir::cx::Cx;\n+use crate::thir::util::UserAnnotatedTyHelpers;\n+use crate::thir::*;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_index::vec::Idx;\n@@ -1020,7 +1020,7 @@ fn overloaded_place<'a, 'tcx>(\n     // line up (this is because `*x` and `x[y]` represent places):\n \n     let recv_ty = match args[0] {\n-        ExprRef::Hair(e) => cx.typeck_results().expr_ty_adjusted(e),\n+        ExprRef::Thir(e) => cx.typeck_results().expr_ty_adjusted(e),\n         ExprRef::Mirror(ref e) => e.ty,\n     };\n ", "previous_filename": "src/librustc_mir_build/hair/cx/expr.rs"}, {"sha": "21736df7b0710fbb3f0c60f42a829a766d009652", "filename": "src/librustc_mir_build/thir/cx/mod.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fmod.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,9 +1,9 @@\n //! This module contains the functionality to convert from the wacky tcx data\n-//! structures into the HAIR. The `builder` is generally ignorant of the tcx,\n+//! structures into the THIR. The `builder` is generally ignorant of the tcx,\n //! etc., and instead goes through the `Cx` for most of its work.\n \n-use crate::hair::util::UserAnnotatedTyHelpers;\n-use crate::hair::*;\n+use crate::thir::util::UserAnnotatedTyHelpers;\n+use crate::thir::*;\n \n use rustc_ast::ast;\n use rustc_ast::attr;", "previous_filename": "src/librustc_mir_build/hair/cx/mod.rs"}, {"sha": "53a988ebb79e2aec4fc453028b0513a7352845e2", "filename": "src/librustc_mir_build/thir/cx/to_ref.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fcx%2Fto_ref.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,4 +1,4 @@\n-use crate::hair::*;\n+use crate::thir::*;\n \n use rustc_hir as hir;\n \n@@ -11,15 +11,15 @@ impl<'tcx> ToRef for &'tcx hir::Expr<'tcx> {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n-        ExprRef::Hair(self)\n+        ExprRef::Thir(self)\n     }\n }\n \n impl<'tcx> ToRef for &'tcx &'tcx hir::Expr<'tcx> {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n-        ExprRef::Hair(&**self)\n+        ExprRef::Thir(&**self)\n     }\n }\n ", "previous_filename": "src/librustc_mir_build/hair/cx/to_ref.rs"}, {"sha": "b6ce7e0b41e5418451058227c50a9f6ceb1c868a", "filename": "src/librustc_mir_build/thir/mod.rs", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fmod.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,5 +1,5 @@\n-//! The MIR is built from some high-level abstract IR\n-//! (HAIR). This section defines the HAIR along with a trait for\n+//! The MIR is built from some typed high-level IR\n+//! (THIR). This section defines the THIR along with a trait for\n //! accessing it. The intention is to allow MIR construction to be\n //! unit-tested and separated from the Rust source and compiler data\n //! structures.\n@@ -99,18 +99,18 @@ crate enum StmtKind<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n rustc_data_structures::static_assert_size!(Expr<'_>, 168);\n \n-/// The Hair trait implementor lowers their expressions (`&'tcx H::Expr`)\n+/// The Thir trait implementor lowers their expressions (`&'tcx H::Expr`)\n /// into instances of this `Expr` enum. This lowering can be done\n /// basically as lazily or as eagerly as desired: every recursive\n /// reference to an expression in this enum is an `ExprRef<'tcx>`, which\n /// may in turn be another instance of this enum (boxed), or else an\n /// unlowered `&'tcx H::Expr`. Note that instances of `Expr` are very\n-/// short-lived. They are created by `Hair::to_expr`, analyzed and\n+/// short-lived. They are created by `Thir::to_expr`, analyzed and\n /// converted into MIR, and then discarded.\n ///\n /// If you compare `Expr` to the full compiler AST, you will see it is\n /// a good bit simpler. In fact, a number of the more straight-forward\n-/// MIR simplifications are already done in the impl of `Hair`. For\n+/// MIR simplifications are already done in the impl of `Thir`. For\n /// example, method calls and overloaded operators are absent: they are\n /// expected to be converted into `Expr::Call` instances.\n #[derive(Clone, Debug)]\n@@ -302,7 +302,7 @@ crate enum ExprKind<'tcx> {\n \n #[derive(Clone, Debug)]\n crate enum ExprRef<'tcx> {\n-    Hair(&'tcx hir::Expr<'tcx>),\n+    Thir(&'tcx hir::Expr<'tcx>),\n     Mirror(Box<Expr<'tcx>>),\n }\n \n@@ -342,7 +342,7 @@ crate enum LogicalOp {\n impl<'tcx> ExprRef<'tcx> {\n     crate fn span(&self) -> Span {\n         match self {\n-            ExprRef::Hair(expr) => expr.span,\n+            ExprRef::Thir(expr) => expr.span,\n             ExprRef::Mirror(expr) => expr.span,\n         }\n     }\n@@ -385,7 +385,7 @@ crate enum InlineAsmOperand<'tcx> {\n // The Mirror trait\n \n /// \"Mirroring\" is the process of converting from a HIR type into one\n-/// of the HAIR types defined in this file. This is basically a \"on\n+/// of the THIR types defined in this file. This is basically a \"on\n /// the fly\" desugaring step that hides a lot of the messiness in the\n /// tcx. For example, the mirror of a `&'tcx hir::Expr` is an\n /// `Expr<'tcx>`.\n@@ -394,7 +394,7 @@ crate enum InlineAsmOperand<'tcx> {\n /// + e2`, the references to the inner expressions `e1` and `e2` are\n /// `ExprRef<'tcx>` instances, and they may or may not be eagerly\n /// mirrored. This allows a single AST node from the compiler to\n-/// expand into one or more Hair nodes, which lets the Hair nodes be\n+/// expand into one or more Thir nodes, which lets the Thir nodes be\n /// simpler.\n crate trait Mirror<'tcx> {\n     type Output;\n@@ -415,7 +415,7 @@ impl<'tcx> Mirror<'tcx> for ExprRef<'tcx> {\n \n     fn make_mirror(self, hir: &mut Cx<'_, 'tcx>) -> Expr<'tcx> {\n         match self {\n-            ExprRef::Hair(h) => h.make_mirror(hir),\n+            ExprRef::Thir(h) => h.make_mirror(hir),\n             ExprRef::Mirror(m) => *m,\n         }\n     }", "previous_filename": "src/librustc_mir_build/hair/mod.rs"}, {"sha": "3202f7d1b1b88a036598e159d7c37c7a5c88c40c", "filename": "src/librustc_mir_build/thir/pattern/_match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2F_match.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "previous_filename": "src/librustc_mir_build/hair/pattern/_match.rs"}, {"sha": "744f319205f94a18bf18eaec1699344d9d346c72", "filename": "src/librustc_mir_build/thir/pattern/check_match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fcheck_match.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "previous_filename": "src/librustc_mir_build/hair/pattern/check_match.rs"}, {"sha": "6dd7e0871b45ef8bb9b319dd805fa873d3fdb951", "filename": "src/librustc_mir_build/thir/pattern/const_to_pat.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "previous_filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs"}, {"sha": "bdefaadfdfe569fc28ba9c9f0e3843346b56af28", "filename": "src/librustc_mir_build/thir/pattern/mod.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Fpattern%2Fmod.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -6,7 +6,7 @@ mod const_to_pat;\n \n pub(crate) use self::check_match::check_match;\n \n-use crate::hair::util::UserAnnotatedTyHelpers;\n+use crate::thir::util::UserAnnotatedTyHelpers;\n \n use rustc_ast::ast;\n use rustc_errors::struct_span_err;\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         //\n         // `vec![&&Option<i32>, &Option<i32>]`.\n         //\n-        // Applying the adjustments, we want to instead output `&&Some(n)` (as a HAIR pattern). So\n+        // Applying the adjustments, we want to instead output `&&Some(n)` (as a THIR pattern). So\n         // we wrap the unadjusted pattern in `PatKind::Deref` repeatedly, consuming the\n         // adjustments in *reverse order* (last-in-first-out, so that the last `Deref` inserted\n         // gets the least-dereferenced type).", "previous_filename": "src/librustc_mir_build/hair/pattern/mod.rs"}, {"sha": "7de60ddda41a3fcbdba2b65c3006bf27d88838b5", "filename": "src/librustc_mir_build/thir/util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_mir_build%2Fthir%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fthir%2Futil.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "previous_filename": "src/librustc_mir_build/hair/util.rs"}, {"sha": "9c7ea34bf51b6b89c545223c5338f92b19e9e964", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -345,7 +345,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             debug!(\"inspecting {:?}\", expected);\n \n             debug!(\"current discriminant is Ref, inserting implicit deref\");\n-            // Preserve the reference type. We'll need it later during HAIR lowering.\n+            // Preserve the reference type. We'll need it later during THIR lowering.\n             pat_adjustments.push(expected);\n \n             expected = inner_ty;"}, {"sha": "d3e6cf78bc93b85a219df0e58e3b19b9565931f4", "filename": "src/test/ui/consts/const_constructor/const-construct-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -6,7 +6,7 @@\n \n #![cfg_attr(const_fn, feature(const_fn))]\n \n-// Ctor(..) is transformed to Ctor { 0: ... } in HAIR lowering, so directly\n+// Ctor(..) is transformed to Ctor { 0: ... } in THIR lowering, so directly\n // calling constructors doesn't require them to be const.\n \n type ExternalType = std::panic::AssertUnwindSafe<(Option<i32>, Result<i32, bool>)>;"}, {"sha": "904efda903c693ce5ab5faba16776798b2379cb0", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "previous_filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-hair-lower-empty.rs"}, {"sha": "12ad86429613b52de1867dc13ce1e634b04f9f08", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-thir-lower-empty.stderr", "status": "renamed", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-thir-lower-empty.stderr?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,155 +1,155 @@\n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:12:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:12:11\n    |\n LL |     m!(0, ..core::u8::MIN);\n    |           ^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:15:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:15:11\n    |\n LL |     m!(0, ..core::u16::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:18:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:18:11\n    |\n LL |     m!(0, ..core::u32::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:21:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:21:11\n    |\n LL |     m!(0, ..core::u64::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:24:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:24:11\n    |\n LL |     m!(0, ..core::u128::MIN);\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:28:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:28:11\n    |\n LL |     m!(0, ..core::i8::MIN);\n    |           ^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:31:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:31:11\n    |\n LL |     m!(0, ..core::i16::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:34:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:34:11\n    |\n LL |     m!(0, ..core::i32::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:37:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:37:11\n    |\n LL |     m!(0, ..core::i64::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:40:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:40:11\n    |\n LL |     m!(0, ..core::i128::MIN);\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:44:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:44:14\n    |\n LL |     m!(0f32, ..core::f32::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:47:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:47:14\n    |\n LL |     m!(0f64, ..core::f64::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:51:13\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:51:13\n    |\n LL |     m!('a', ..'\\u{0}');\n    |             ^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:12:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:12:11\n    |\n LL |     m!(0, ..core::u8::MIN);\n    |           ^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:15:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:15:11\n    |\n LL |     m!(0, ..core::u16::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:18:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:18:11\n    |\n LL |     m!(0, ..core::u32::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:21:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:21:11\n    |\n LL |     m!(0, ..core::u64::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:24:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:24:11\n    |\n LL |     m!(0, ..core::u128::MIN);\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:28:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:28:11\n    |\n LL |     m!(0, ..core::i8::MIN);\n    |           ^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:31:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:31:11\n    |\n LL |     m!(0, ..core::i16::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:34:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:34:11\n    |\n LL |     m!(0, ..core::i32::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:37:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:37:11\n    |\n LL |     m!(0, ..core::i64::MIN);\n    |           ^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:40:11\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:40:11\n    |\n LL |     m!(0, ..core::i128::MIN);\n    |           ^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:44:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:44:14\n    |\n LL |     m!(0f32, ..core::f32::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:47:14\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:47:14\n    |\n LL |     m!(0f64, ..core::f64::NEG_INFINITY);\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0579]: lower range bound must be less than upper\n-  --> $DIR/half-open-range-pats-hair-lower-empty.rs:51:13\n+  --> $DIR/half-open-range-pats-thir-lower-empty.rs:51:13\n    |\n LL |     m!('a', ..'\\u{0}');\n    |             ^^^^^^^^^", "previous_filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-hair-lower-empty.stderr"}, {"sha": "993954b450e372337e03b6e3b62ae34a36f6166b", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,5 +1,5 @@\n // Test that `by_move_binding @ pat_with_by_ref_bindings` is prevented even with promotion.\n-// Currently this logic exists in HAIR match checking as opposed to borrowck.\n+// Currently this logic exists in THIR match checking as opposed to borrowck.\n \n #![feature(bindings_after_at)]\n #![feature(move_ref_pattern)]"}, {"sha": "2aa0824f30186e97ff8f24abc22733a73723d8bc", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -1,4 +1,4 @@\n-thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir_build/hair/pattern/_match.rs:LL:CC\n+thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir_build/thir/pattern/_match.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}, {"sha": "3f8e15d90297d3035ef624e577725157cc950102", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe1e3b641abbede6230e3931d14f0d43e5b8e54/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=dfe1e3b641abbede6230e3931d14f0d43e5b8e54", "patch": "@@ -883,7 +883,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_\n }\n \n /// Returns `true` if a pattern is refutable.\n-// TODO: should be implemented using rustc/mir_build/hair machinery\n+// TODO: should be implemented using rustc/mir_build/thir machinery\n pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_>, qpath: &QPath<'_>, id: HirId) -> bool {\n         matches!("}]}