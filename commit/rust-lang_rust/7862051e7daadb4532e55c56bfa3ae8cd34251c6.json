{"sha": "7862051e7daadb4532e55c56bfa3ae8cd34251c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NjIwNTFlN2RhYWRiNDUzMmU1NWM1NmJmYTNhZThjZDM0MjUxYzY=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-04-11T14:55:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-11T14:55:03Z"}, "message": "Merge pull request #3504 from matthiaskrgr/clippy_2\n\nfix a bunch of clippy warnings", "tree": {"sha": "8f29b9f5722b9330192f7451623702fffeb598b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f29b9f5722b9330192f7451623702fffeb598b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7862051e7daadb4532e55c56bfa3ae8cd34251c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcr1VHCRBK7hj4Ov3rIwAAdHIIAAtJSAm1wsZC84Yz0Nqkhqpd\nBRzOm0G0c6BfatdXUxBTk2Ze7Fp06swsv2tmI7dQkEgWeKWnQqGbWSefotTLnAqU\nrxkq+YeK6/qGYMUasE3sib+gbqKjGS6w9Gqgza39qPyejcgFHAWAWgWXmV3UwG8H\nKmFlIaYh5iDO2ZpWxwdHnJo20oNdlyN6GrUA/DEzbqaEiqa1PdhUxaszkwUT9/13\ngQJ79KoY54BGPDQopb+PUfEL3YtRMpbRv2oIHieBpDbwk0pa/5RcVshlr7faO79H\nUEg/HJ5PnxaKXhfq9e9V8H8J2/t/k1V5QYYwxZoLR1CXx3k+PakkTK7gPGBRm9U=\n=3pnh\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f29b9f5722b9330192f7451623702fffeb598b1\nparent 896394a7a5fdec00851f4034cff98574456d23aa\nparent 4352681d624bcbfb9d5aa9d2f5057091622402a6\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1554994503 +0200\ncommitter GitHub <noreply@github.com> 1554994503 +0200\n\nMerge pull request #3504 from matthiaskrgr/clippy_2\n\nfix a bunch of clippy warnings"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7862051e7daadb4532e55c56bfa3ae8cd34251c6", "html_url": "https://github.com/rust-lang/rust/commit/7862051e7daadb4532e55c56bfa3ae8cd34251c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7862051e7daadb4532e55c56bfa3ae8cd34251c6/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896394a7a5fdec00851f4034cff98574456d23aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/896394a7a5fdec00851f4034cff98574456d23aa", "html_url": "https://github.com/rust-lang/rust/commit/896394a7a5fdec00851f4034cff98574456d23aa"}, {"sha": "4352681d624bcbfb9d5aa9d2f5057091622402a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4352681d624bcbfb9d5aa9d2f5057091622402a6", "html_url": "https://github.com/rust-lang/rust/commit/4352681d624bcbfb9d5aa9d2f5057091622402a6"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "5ea3953a2c7516dc31f7213ead035c0a438a7edc", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -550,7 +550,7 @@ impl<'a> ChainFormatterShared<'a> {\n         let almost_total = if extendable {\n             prev_last_line_width\n         } else {\n-            self.rewrites.iter().map(|a| a.len()).sum()\n+            self.rewrites.iter().map(String::len).sum()\n         } + last.tries;\n         let one_line_budget = if self.child_count == 1 {\n             shape.width"}, {"sha": "d88b733403467a69c8ed296cecefae6809c19a5b", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -353,7 +353,7 @@ pub fn rewrite_last_closure(\n /// Returns `true` if the given vector of arguments has more than one `ast::ExprKind::Closure`.\n pub fn args_have_many_closure(args: &[OverflowableItem<'_>]) -> bool {\n     args.iter()\n-        .filter_map(|arg| arg.to_expr())\n+        .filter_map(OverflowableItem::to_expr)\n         .filter(|expr| match expr.node {\n             ast::ExprKind::Closure(..) => true,\n             _ => false,"}, {"sha": "797f75fc580a5f77734583fc068139aaad670a7f", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -1243,7 +1243,7 @@ where\n             },\n             CharClassesStatus::LitCharEscape => CharClassesStatus::LitChar,\n             CharClassesStatus::Normal => match chr {\n-                'r' => match self.base.peek().map(|c| c.get_char()) {\n+                'r' => match self.base.peek().map(RichChar::get_char) {\n                     Some('#') | Some('\"') => {\n                         char_kind = FullCodeCharKind::InString;\n                         CharClassesStatus::RawStringPrefix(0)"}, {"sha": "356861282b1d95fb963eceb060bf1f3a66a38a52", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -191,7 +191,7 @@ impl FileLines {\n \n     /// Returns an iterator over the files contained in `self`.\n     pub fn files(&self) -> Files<'_> {\n-        Files(self.0.as_ref().map(|m| m.keys()))\n+        Files(self.0.as_ref().map(HashMap::keys))\n     }\n \n     /// Returns JSON representation as accepted by the `--file-lines JSON` arg."}, {"sha": "6be3dd2b31c47e89ed105df78970aae4e8811619", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -244,7 +244,7 @@ impl Config {\n                 }\n             }\n \n-            return Ok(None);\n+            Ok(None)\n         }\n \n         match resolve_project_file(dir)? {\n@@ -260,7 +260,7 @@ impl Config {\n         let mut err = String::new();\n         let table = parsed\n             .as_table()\n-            .ok_or(String::from(\"Parsed config was not table\"))?;\n+            .ok_or_else(|| String::from(\"Parsed config was not table\"))?;\n         for key in table.keys() {\n             if !Config::is_valid_name(key) {\n                 let msg = &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n@@ -358,7 +358,7 @@ fn config_path(options: &dyn CliOptions) -> Result<Option<PathBuf>, Error> {\n                 config_path_not_found(path.to_str().unwrap())\n             }\n         }\n-        path => Ok(path.map(|p| p.to_owned())),\n+        path => Ok(path.map(ToOwned::to_owned)),\n     }\n }\n "}, {"sha": "ad80e7e1aef00ae47db95a25f263a115147efe68", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -263,7 +263,7 @@ impl FormattingError {\n                 .and_then(|fl| {\n                     fl.file\n                         .get_line(fl.lines[0].line_index)\n-                        .map(|l| l.into_owned())\n+                        .map(std::borrow::Cow::into_owned)\n                 })\n                 .unwrap_or_else(String::new),\n         }\n@@ -653,7 +653,7 @@ fn parse_crate(\n                 return Ok(c);\n             }\n         }\n-        Ok(Err(mut diagnostics)) => diagnostics.iter_mut().for_each(|d| d.emit()),\n+        Ok(Err(mut diagnostics)) => diagnostics.iter_mut().for_each(DiagnosticBuilder::emit),\n         Err(_) => {\n             // Note that if you see this message and want more information,\n             // then run the `parse_crate_mod` function above without"}, {"sha": "f71ae097808b74f91299981da9f130a3de4d2c3c", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -98,7 +98,7 @@ fn uncommitted_files() -> Vec<String> {\n     stdout\n         .lines()\n         .filter(|s| s.ends_with(\".rs\"))\n-        .map(|s| s.to_owned())\n+        .map(std::borrow::ToOwned::to_owned)\n         .collect()\n }\n "}, {"sha": "f6b41deaef954e69c590efafd410192a2bab964b", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -492,10 +492,7 @@ impl UseTree {\n \n         // Recursively normalize elements of a list use (including sorting the list).\n         if let UseSegment::List(list) = last {\n-            let mut list = list\n-                .into_iter()\n-                .map(|ut| ut.normalize())\n-                .collect::<Vec<_>>();\n+            let mut list = list.into_iter().map(UseTree::normalize).collect::<Vec<_>>();\n             list.sort();\n             last = UseSegment::List(list);\n         }"}, {"sha": "c7f95557ea3b77e6e3cda4f3a0af2f339252788a", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -1358,7 +1358,7 @@ fn format_tuple_struct(\n         context\n             .snippet_provider\n             .opt_span_after(mk_sp(last_arg_span.hi(), span.hi()), \")\")\n-            .unwrap_or(last_arg_span.hi())\n+            .unwrap_or_else(|| last_arg_span.hi())\n     };\n \n     let where_clause_str = match struct_parts.generics {\n@@ -2143,7 +2143,7 @@ fn rewrite_fn_base(\n             indent\n         } else {\n             if context.config.version() == Version::Two {\n-                if arg_str.len() != 0 || !no_args_and_over_max_width {\n+                if !arg_str.is_empty() || !no_args_and_over_max_width {\n                     result.push(' ');\n                 }\n             } else {\n@@ -2284,7 +2284,7 @@ fn rewrite_args(\n     span: Span,\n     variadic: bool,\n ) -> Option<String> {\n-    if args.len() == 0 {\n+    if args.is_empty() {\n         let comment = context\n             .snippet(mk_sp(\n                 span.lo(),"}, {"sha": "464d318638da6dc94caa523ee8347d04d801f7f9", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -445,7 +445,7 @@ fn format_code_block(code_snippet: &str, config: &Config) -> Option<FormattedSni\n     let block_len = formatted\n         .snippet\n         .rfind('}')\n-        .unwrap_or(formatted.snippet.len());\n+        .unwrap_or_else(|| formatted.snippet.len());\n     let mut is_indented = true;\n     for (kind, ref line) in LineClasses::new(&formatted.snippet[FN_MAIN_PREFIX.len()..block_len]) {\n         if !is_first {"}, {"sha": "ffb92d3a83cbfa763e9b6455fee43acae1312440", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -389,7 +389,7 @@ where\n                         result.push('\\n');\n                         result.push_str(indent_str);\n                         // This is the width of the item (without comments).\n-                        line_len = item.item.as_ref().map_or(0, |str| str.len());\n+                        line_len = item.item.as_ref().map_or(0, String::len);\n                     }\n                 } else {\n                     result.push(' ');\n@@ -646,7 +646,7 @@ pub fn get_comment_end(\n     if let Some(i) = block_open_index {\n         match post_snippet.find('/') {\n             Some(j) if j < i => block_open_index = None,\n-            _ if post_snippet[..i].chars().last() == Some('/') => block_open_index = None,\n+            _ if post_snippet[..i].ends_with('/') => block_open_index = None,\n             _ => (),\n         }\n     }\n@@ -811,7 +811,7 @@ where\n pub fn total_item_width(item: &ListItem) -> usize {\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..]))\n         + comment_len(item.post_comment.as_ref().map(|x| &(*x)[..]))\n-        + item.item.as_ref().map_or(0, |str| str.len())\n+        + item.item.as_ref().map_or(0, String::len)\n }\n \n fn comment_len(comment: Option<&str>) -> usize {"}, {"sha": "f8141e0e0d6e2774cc7bb4cf195c0bb1912e972f", "filename": "src/macros.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -933,8 +933,7 @@ impl MacroArgParser {\n \n     /// Returns a collection of parsed macro def's arguments.\n     pub fn parse(mut self, tokens: TokenStream) -> Option<Vec<ParsedMacroArg>> {\n-        let stream: TokenStream = tokens.into();\n-        let mut iter = stream.trees();\n+        let mut iter = tokens.trees();\n \n         while let Some(tok) = iter.next() {\n             match tok {\n@@ -1045,18 +1044,17 @@ fn wrap_macro_args_inner(\n // FIXME: Use multi-line when every thing does not fit on one line.\n fn format_macro_args(\n     context: &RewriteContext<'_>,\n-    toks: TokenStream,\n+    token_stream: TokenStream,\n     shape: Shape,\n ) -> Option<String> {\n     if !context.config.format_macro_matchers() {\n-        let token_stream: TokenStream = toks.into();\n         let span = span_for_token_stream(&token_stream);\n         return Some(match span {\n             Some(span) => context.snippet(span).to_owned(),\n             None => String::new(),\n         });\n     }\n-    let parsed_args = MacroArgParser::new().parse(toks)?;\n+    let parsed_args = MacroArgParser::new().parse(token_stream)?;\n     wrap_macro_args(context, &parsed_args, shape)\n }\n \n@@ -1140,7 +1138,7 @@ fn next_space(tok: &Token) -> SpaceState {\n /// failed).\n pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n     if &mac.node.path.to_string() == \"try\" {\n-        let ts: TokenStream = mac.node.tts.clone().into();\n+        let ts: TokenStream = mac.node.tts.clone();\n         let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n \n         Some(ast::Expr {\n@@ -1194,7 +1192,7 @@ impl MacroParser {\n             TokenTree::Token(..) => return None,\n             TokenTree::Delimited(delimited_span, d, _) => (delimited_span.open.lo(), d),\n         };\n-        let args = tok.joint().into();\n+        let args = tok.joint();\n         match self.toks.next()? {\n             TokenTree::Token(_, Token::FatArrow) => {}\n             _ => return None,"}, {"sha": "49a4638f33fc99c572dfbdceaf9d9f9529c33ac9", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -32,8 +32,10 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n             //               ^^^ Comparing this.\n-            let a_orig_name = a_name.map_or_else(|| a.ident.as_str(), |symbol| symbol.as_str());\n-            let b_orig_name = b_name.map_or_else(|| b.ident.as_str(), |symbol| symbol.as_str());\n+            let a_orig_name =\n+                a_name.map_or_else(|| a.ident.as_str(), syntax_pos::symbol::Symbol::as_str);\n+            let b_orig_name =\n+                b_name.map_or_else(|| b.ident.as_str(), syntax_pos::symbol::Symbol::as_str);\n             let result = a_orig_name.cmp(&b_orig_name);\n             if result != Ordering::Equal {\n                 return result;"}, {"sha": "36483146f054de9ce6231cbf3842087891ffa341", "filename": "src/source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -69,7 +69,7 @@ where\n     // original text for `FileName::Stdin`.\n     let original_text = source_map\n         .and_then(|x| x.get_source_file(&filename.into()))\n-        .and_then(|x| x.src.as_ref().map(|x| x.to_string()));\n+        .and_then(|x| x.src.as_ref().map(ToString::to_string));\n     let original_text = match original_text {\n         Some(ori) => ori,\n         None => fs::read_to_string(ensure_real_path(filename))?,"}, {"sha": "9cc9cb857b1b9088f31f019fdfbe39ebaae54b47", "filename": "src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -71,7 +71,7 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n \n impl LineRangeUtils for SourceMap {\n     fn lookup_line_range(&self, span: Span) -> LineRange {\n-        let snippet = self.span_to_snippet(span).unwrap_or(String::new());\n+        let snippet = self.span_to_snippet(span).unwrap_or_default();\n         let lo = self.lookup_line(span.lo()).unwrap();\n         let hi = self.lookup_line(span.hi()).unwrap();\n "}, {"sha": "14220ba5d7974e73aa47deb7fc9b8c3273db2ddd", "filename": "src/string.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -338,11 +338,13 @@ fn is_new_line(grapheme: &str) -> bool {\n }\n \n fn is_whitespace(grapheme: &str) -> bool {\n-    grapheme.chars().all(|c| c.is_whitespace())\n+    grapheme.chars().all(char::is_whitespace)\n }\n \n fn is_punctuation(grapheme: &str) -> bool {\n-    grapheme.chars().all(|c| c.is_punctuation_other())\n+    grapheme\n+        .chars()\n+        .all(UnicodeCategories::is_punctuation_other)\n }\n \n fn graphemes_width(graphemes: &[&str]) -> usize {"}, {"sha": "0ee25ff5c19f94c02895664136e67c0a77cdda9e", "filename": "src/test/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -34,7 +34,7 @@ struct TestSetting {\n impl Default for TestSetting {\n     fn default() -> Self {\n         TestSetting {\n-            stack_size: 8388608, // 8MB\n+            stack_size: 8_388_608, // 8MB\n         }\n     }\n }\n@@ -90,12 +90,13 @@ fn verify_config_used(path: &Path, config_name: &str) {\n         if path.extension().map_or(false, |f| f == \"rs\") {\n             // check if \"// rustfmt-<config_name>:\" appears in the file.\n             let filebuf = BufReader::new(\n-                fs::File::open(&path).expect(&format!(\"couldn't read file {}\", path.display())),\n+                fs::File::open(&path)\n+                    .unwrap_or_else(|_| panic!(\"couldn't read file {}\", path.display())),\n             );\n             assert!(\n                 filebuf\n                     .lines()\n-                    .map(|l| l.unwrap())\n+                    .map(Result::unwrap)\n                     .take_while(|l| l.starts_with(\"//\"))\n                     .any(|l| l.starts_with(&format!(\"// rustfmt-{}\", config_name))),\n                 format!(\n@@ -249,7 +250,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n         let mut failures = HashMap::new();\n         failures.insert(source.to_owned(), compare);\n         print_mismatches_default_message(failures);\n-        assert!(false, \"Text does not match expected output\");\n+        panic!(\"Text does not match expected output\");\n     }\n }\n \n@@ -565,8 +566,8 @@ fn get_config(config_file: Option<&Path>) -> Config {\n \n // Reads significant comments of the form: `// rustfmt-key: value` into a hash map.\n fn read_significant_comments(file_name: &Path) -> HashMap<String, String> {\n-    let file =\n-        fs::File::open(file_name).expect(&format!(\"couldn't read file {}\", file_name.display()));\n+    let file = fs::File::open(file_name)\n+        .unwrap_or_else(|_| panic!(\"couldn't read file {}\", file_name.display()));\n     let reader = BufReader::new(file);\n     let pattern = r\"^\\s*//\\s*rustfmt-([^:]+):\\s*(\\S+)\";\n     let regex = regex::Regex::new(pattern).expect(\"failed creating pattern 1\");\n@@ -962,10 +963,10 @@ fn configuration_snippet_tests() {\n     fn get_code_blocks() -> Vec<ConfigCodeBlock> {\n         let mut file_iter = BufReader::new(\n             fs::File::open(Path::new(CONFIGURATIONS_FILE_NAME))\n-                .expect(&format!(\"couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n+                .unwrap_or_else(|_| panic!(\"couldn't read file {}\", CONFIGURATIONS_FILE_NAME)),\n         )\n         .lines()\n-        .map(|l| l.unwrap())\n+        .map(Result::unwrap)\n         .enumerate();\n         let mut code_blocks: Vec<ConfigCodeBlock> = Vec::new();\n         let mut hash_set = Config::hash_set();\n@@ -988,7 +989,7 @@ fn configuration_snippet_tests() {\n     let blocks = get_code_blocks();\n     let failures = blocks\n         .iter()\n-        .map(|b| b.formatted_is_idempotent())\n+        .map(ConfigCodeBlock::formatted_is_idempotent)\n         .fold(0, |acc, r| acc + (!r as u32));\n \n     // Display results."}, {"sha": "0b69c3603d47866f260e00bc0c1035a237de3479", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -135,7 +135,7 @@ pub fn rewrite_with_alignment<T: AlignedItem>(\n \n         let snippet = context.snippet(missing_span);\n         if snippet.trim_start().starts_with(\"//\") {\n-            let offset = snippet.lines().next().map_or(0, |l| l.len());\n+            let offset = snippet.lines().next().map_or(0, str::len);\n             // 2 = \",\" + \"\\n\"\n             init_hi + BytePos(offset as u32 + 2)\n         } else if snippet.trim_start().starts_with(\"/*\") {"}, {"sha": "b1d3b12ea1429d82dcea665123d6a72dd37e703b", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7862051e7daadb4532e55c56bfa3ae8cd34251c6/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7862051e7daadb4532e55c56bfa3ae8cd34251c6", "patch": "@@ -146,7 +146,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         if let Some(first_stmt) = b.stmts.first() {\n             let hi = inner_attrs\n                 .and_then(|attrs| inner_attributes(attrs).first().map(|attr| attr.span.lo()))\n-                .unwrap_or(first_stmt.span().lo());\n+                .unwrap_or_else(|| first_stmt.span().lo());\n \n             let snippet = self.snippet(mk_sp(self.last_pos, hi));\n             let len = CommentCodeSlices::new(snippet)"}]}