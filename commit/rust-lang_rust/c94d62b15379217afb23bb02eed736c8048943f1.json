{"sha": "c94d62b15379217afb23bb02eed736c8048943f1", "node_id": "C_kwDOAAsO6NoAKGM5NGQ2MmIxNTM3OTIxN2FmYjIzYmIwMmVlZDczNmM4MDQ4OTQzZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T12:37:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T12:37:49Z"}, "message": "Auto merge of #7949 - Serial-ATA:issue-7921, r=flip1995\n\nFix suggestion for deref expressions in redundant_pattern_matching\n\nchangelog: Fix suggestion for deref expressions in [`redundant_pattern_matching`]\n\ncloses: #7921", "tree": {"sha": "a58d88e0d56ab4d368ae943ab521bcdcdc9a366d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58d88e0d56ab4d368ae943ab521bcdcdc9a366d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c94d62b15379217afb23bb02eed736c8048943f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c94d62b15379217afb23bb02eed736c8048943f1", "html_url": "https://github.com/rust-lang/rust/commit/c94d62b15379217afb23bb02eed736c8048943f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c94d62b15379217afb23bb02eed736c8048943f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830f2205d4002b26f7fd36d8467fb491eb2306ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/830f2205d4002b26f7fd36d8467fb491eb2306ac", "html_url": "https://github.com/rust-lang/rust/commit/830f2205d4002b26f7fd36d8467fb491eb2306ac"}, {"sha": "e54c341d05265e3293649d65481eacb06994bef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54c341d05265e3293649d65481eacb06994bef5", "html_url": "https://github.com/rust-lang/rust/commit/e54c341d05265e3293649d65481eacb06994bef5"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "349dd9e41a2eab8dafa5f0dfa8c7efa41d8ab015", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c94d62b15379217afb23bb02eed736c8048943f1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94d62b15379217afb23bb02eed736c8048943f1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c94d62b15379217afb23bb02eed736c8048943f1", "patch": "@@ -1782,7 +1782,8 @@ mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n     use clippy_utils::diagnostics::span_lint_and_then;\n     use clippy_utils::higher;\n-    use clippy_utils::source::{snippet, snippet_with_applicability};\n+    use clippy_utils::source::snippet;\n+    use clippy_utils::sugg::Sugg;\n     use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, is_type_lang_item, match_type};\n     use clippy_utils::{is_lang_ctor, is_qpath_def_path, is_trait_method, paths};\n     use if_chain::if_chain;\n@@ -1792,7 +1793,7 @@ mod redundant_pattern_match {\n     use rustc_hir::LangItem::{OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n     use rustc_hir::{\n         intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n-        Arm, Block, Expr, ExprKind, LangItem, MatchSource, Node, Pat, PatKind, QPath,\n+        Arm, Block, Expr, ExprKind, LangItem, MatchSource, Node, Pat, PatKind, QPath, UnOp,\n     };\n     use rustc_lint::LateContext;\n     use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n@@ -2046,8 +2047,10 @@ mod redundant_pattern_match {\n \n         let result_expr = match &let_expr.kind {\n             ExprKind::AddrOf(_, _, borrowed) => borrowed,\n+            ExprKind::Unary(UnOp::Deref, deref) => deref,\n             _ => let_expr,\n         };\n+\n         span_lint_and_then(\n             cx,\n             REDUNDANT_PATTERN_MATCHING,\n@@ -2066,12 +2069,15 @@ mod redundant_pattern_match {\n                 // ^^^^^^^^^^^^^^^^^^^\n                 let span = expr_span.until(op_span.shrink_to_hi());\n \n-                let mut app = if needs_drop {\n+                let app = if needs_drop {\n                     Applicability::MaybeIncorrect\n                 } else {\n                     Applicability::MachineApplicable\n                 };\n-                let sugg = snippet_with_applicability(cx, op_span, \"_\", &mut app);\n+\n+                let sugg = Sugg::hir_with_macro_callsite(cx, result_expr, \"_\")\n+                    .maybe_par()\n+                    .to_string();\n \n                 diag.span_suggestion(span, \"try this\", format!(\"{} {}.{}\", keyword, sugg, good_method), app);\n "}, {"sha": "cc93859269c228c990bb7707bf711f6f0461572f", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=c94d62b15379217afb23bb02eed736c8048943f1", "patch": "@@ -80,3 +80,9 @@ const fn issue6067() {\n \n     None::<()>.is_none();\n }\n+\n+#[allow(clippy::deref_addrof, dead_code)]\n+fn issue7921() {\n+    if (&None::<()>).is_none() {}\n+    if (&None::<()>).is_none() {}\n+}"}, {"sha": "280dca40c011d18bda8fa4b18e32bb7c0ede0f6b", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=c94d62b15379217afb23bb02eed736c8048943f1", "patch": "@@ -95,3 +95,9 @@ const fn issue6067() {\n         None => true,\n     };\n }\n+\n+#[allow(clippy::deref_addrof, dead_code)]\n+fn issue7921() {\n+    if let None = *(&None::<()>) {}\n+    if let None = *&None::<()> {}\n+}"}, {"sha": "27ff812ba45ec0b9245dd00e8e27336a6150efd6", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=c94d62b15379217afb23bb02eed736c8048943f1", "patch": "@@ -130,5 +130,17 @@ LL | |         None => true,\n LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n-error: aborting due to 19 previous errors\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:101:12\n+   |\n+LL |     if let None = *(&None::<()>) {}\n+   |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:102:12\n+   |\n+LL |     if let None = *&None::<()> {}\n+   |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n+\n+error: aborting due to 21 previous errors\n "}, {"sha": "83c783385efec866d9dcf0df9503e96c4a7c4c2f", "filename": "tests/ui/redundant_pattern_matching_result.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=c94d62b15379217afb23bb02eed736c8048943f1", "patch": "@@ -70,8 +70,8 @@ fn issue5504() {\n     }\n \n     fn try_result_opt() -> Result<i32, i32> {\n-        while r#try!(result_opt()).is_some() {}\n-        if r#try!(result_opt()).is_some() {}\n+        while (r#try!(result_opt())).is_some() {}\n+        if (r#try!(result_opt())).is_some() {}\n         Ok(42)\n     }\n "}, {"sha": "d674d061e4dd701e82f06219b01f44c65f204e8a", "filename": "tests/ui/redundant_pattern_matching_result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c94d62b15379217afb23bb02eed736c8048943f1/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=c94d62b15379217afb23bb02eed736c8048943f1", "patch": "@@ -88,13 +88,13 @@ error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_result.rs:85:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n-   |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n+   |         ----------^^^^^^^----------------------- help: try this: `while (r#try!(result_opt())).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_result.rs:86:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n-   |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n+   |         -------^^^^^^^----------------------- help: try this: `if (r#try!(result_opt())).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n   --> $DIR/redundant_pattern_matching_result.rs:92:12"}]}