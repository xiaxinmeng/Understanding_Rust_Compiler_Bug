{"sha": "d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmFmNTNlMDQzNzlhZGJkZWY2Y2RhZWY1ZDQzZTY0YzQ1ZDZhMmE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-25T17:41:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-25T17:41:24Z"}, "message": "Search for `clippy.toml` recursively", "tree": {"sha": "ab1b6c4a113b8d23ed467ab2d414a4157c296e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1b6c4a113b8d23ed467ab2d414a4157c296e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYD5laAAoJEF5CfHlMukXoELIQAJiH2gM7Jl9O+VihGNcrHt6y\nFNJgxGvsjD57TGZ2rsdwxvwdEi1Kvhq1/M4GaYD2pp0FZbq9mI1qrw6M5BrkQpYj\nzD03cWatQ9HLSpWbFF7N2Q5xzWw5R1J7lpCMmI8qeLSahYTyj9V/GiPk/opJWD/k\njRjw9UNzpdHHgShZkSRYWe8owInqiHkYDLtuVJO0+DIu2gBtTi0ZKwao3Fh8w4+D\n6Hi+OZlRKeWqO+jhgC3JmH/xSZjsKbD0gmtWuezkDZC6FBsIRL+Oc8ZbTXiGsQDx\n5ghl8fu6H7VVa/kO/bgr+TeM/oJvjAg6WuWGlAQzqOIp5Bs2UBn+6lhySDZOqQY7\nZvyMojCfBkUZqM/AfmZtiRUWniLAhUo0hrDvapS7CHoFPW+GVgebRNH7Hr5cJsvy\nwge5plqqlufKLWwdLN/ElvF3x0hCQtSEfc9uyIn9f/KVpBQmgZnRW4ZCaj6CWjxw\n8FvGuBMe6mAG1qmBmhEDvd5Sd33lpQssgNPTPtTqlT2VRb61thhti9cHsvmNAwOl\nQSFGoUmZXZunpC/xe5zR9+OtBMa35/oVtKjizxLOj4As3rfkc0KGnIXeXdJllUeX\nWFGjFm3S+McHCmJSmTN+4FpHKReLRkYkblfBndOh8ySYU5K+0DUDrDE3FScB41m2\nO3dyeYDLwRpEDgY/USOz\n=odx4\n-----END PGP SIGNATURE-----", "payload": "tree ab1b6c4a113b8d23ed467ab2d414a4157c296e9d\nparent 49c2c2c62862d9aebe5a4fe8c8cca3e011ffd988\nauthor mcarton <cartonmartin+git@gmail.com> 1477417284 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1477417284 +0200\n\nSearch for `clippy.toml` recursively\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "html_url": "https://github.com/rust-lang/rust/commit/d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52af53e04379adbdef6cdaef5d43e64c45d6a2a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c2c2c62862d9aebe5a4fe8c8cca3e011ffd988", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c2c2c62862d9aebe5a4fe8c8cca3e011ffd988", "html_url": "https://github.com/rust-lang/rust/commit/49c2c2c62862d9aebe5a4fe8c8cca3e011ffd988"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "2b2ecac9cdb658560ab6b6e7ef9f3df5d2f9ab94", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d52af53e04379adbdef6cdaef5d43e64c45d6a2a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52af53e04379adbdef6cdaef5d43e64c45d6a2a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "patch": "@@ -136,17 +136,23 @@ mod reexport {\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n-    let conf = match utils::conf::file(reg.args()) {\n+    let conf = match utils::conf::file_from_args(reg.args()) {\n         Ok(file_name) => {\n             // if the user specified a file, it must exist, otherwise default to `clippy.toml` but\n             // do not require the file to exist\n-            let (file_name, must_exist) = if let Some(ref file_name) = file_name {\n-                (&**file_name, true)\n+            let file_name = if let Some(file_name) = file_name {\n+                Some(file_name)\n             } else {\n-                (\"clippy.toml\", false)\n+                match utils::conf::lookup_conf_file() {\n+                    Ok(path) => path,\n+                    Err(error) => {\n+                        reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", error)).emit();\n+                        None\n+                    }\n+                }\n             };\n \n-            let (conf, errors) = utils::conf::read(file_name, must_exist);\n+            let (conf, errors) = utils::conf::read(file_name.as_ref().map(|p| p.as_ref()));\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {"}, {"sha": "0dccaec8ed8c1b6ce09814dcf03bef4aebe0604a", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d52af53e04379adbdef6cdaef5d43e64c45d6a2a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52af53e04379adbdef6cdaef5d43e64c45d6a2a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "patch": "@@ -2,14 +2,13 @@\n \n #![deny(missing_docs_in_private_items)]\n \n-use std::{fmt, fs, io};\n+use std::{env, fmt, fs, io, path};\n use std::io::Read;\n use syntax::{ast, codemap};\n-use syntax::parse::token;\n use toml;\n \n /// Get the configuration file from arguments.\n-pub fn file(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option<token::InternedString>, (&'static str, codemap::Span)> {\n+pub fn file_from_args(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option<path::PathBuf>, (&'static str, codemap::Span)> {\n     for arg in args.iter().filter_map(|a| a.meta_item()) {\n         match arg.node {\n             ast::MetaItemKind::Word(ref name) |\n@@ -21,7 +20,7 @@ pub fn file(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option\n             ast::MetaItemKind::NameValue(ref name, ref value) => {\n                 if name == &\"conf_file\" {\n                     return if let ast::LitKind::Str(ref file, _) = value.node {\n-                        Ok(Some(file.clone()))\n+                        Ok(Some(file.to_string().into()))\n                     } else {\n                         Err((\"`conf_file` value must be a string\", value.span))\n                     };\n@@ -179,13 +178,51 @@ define_Conf! {\n     (\"enum-variant-name-threshold\", enum_variant_name_threshold, 3 => u64),\n }\n \n-/// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif\n-/// `!must_exist`, in which case, it will return the default configuration.\n+/// Search for the configuration file.\n+pub fn lookup_conf_file() -> io::Result<Option<path::PathBuf>> {\n+    /// Possible filename to search for.\n+    const CONFIG_FILE_NAMES: [&'static str; 2] = [\".clippy.toml\", \"clippy.toml\"];\n+\n+    let mut current = try!(env::current_dir());\n+\n+    loop {\n+        for config_file_name in &CONFIG_FILE_NAMES {\n+            let config_file = current.join(config_file_name);\n+            match fs::metadata(&config_file) {\n+                // Only return if it's a file to handle the unlikely situation of a directory named\n+                // `clippy.toml`.\n+                Ok(ref md) if md.is_file() => return Ok(Some(config_file)),\n+                // Return the error if it's something other than `NotFound`; otherwise we didn't\n+                // find the project file yet, and continue searching.\n+                Err(e) => {\n+                    if e.kind() != io::ErrorKind::NotFound {\n+                        return Err(e);\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        // If the current directory has no parent, we're done searching.\n+        if !current.pop() {\n+            return Ok(None);\n+        }\n+    }\n+}\n+\n+/// Read the `toml` configuration file.\n+///\n /// In case of error, the function tries to continue as much as possible.\n-pub fn read(path: &str, must_exist: bool) -> (Conf, Vec<Error>) {\n+pub fn read(path: Option<&path::Path>) -> (Conf, Vec<Error>) {\n     let mut conf = Conf::default();\n     let mut errors = Vec::new();\n \n+    let path = if let Some(path) = path {\n+        path\n+    } else {\n+        return (conf, errors);\n+    };\n+\n     let file = match fs::File::open(path) {\n         Ok(mut file) => {\n             let mut buf = String::new();\n@@ -197,9 +234,6 @@ pub fn read(path: &str, must_exist: bool) -> (Conf, Vec<Error>) {\n \n             buf\n         }\n-        Err(ref err) if !must_exist && err.kind() == io::ErrorKind::NotFound => {\n-            return (conf, errors);\n-        }\n         Err(err) => {\n             errors.push(err.into());\n             return (conf, errors);"}]}