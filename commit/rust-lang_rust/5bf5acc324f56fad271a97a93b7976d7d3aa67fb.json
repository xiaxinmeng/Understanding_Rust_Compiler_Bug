{"sha": "5bf5acc324f56fad271a97a93b7976d7d3aa67fb", "node_id": "C_kwDOAAsO6NoAKDViZjVhY2MzMjRmNTZmYWQyNzFhOTdhOTNiNzk3NmQ3ZDNhYTY3ZmI", "commit": {"author": {"name": "Kjetil Kjeka", "email": "kjetilkjeka@gmail.com", "date": "2022-03-07T14:15:26Z"}, "committer": {"name": "Kjetil Kjeka", "email": "kjetilkjeka@gmail.com", "date": "2022-04-25T14:35:19Z"}, "message": "Add test for asserting correct generation of ptx-kernel args", "tree": {"sha": "1441ffcdac75b6ab45b867f92e83d00dec18dbae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1441ffcdac75b6ab45b867f92e83d00dec18dbae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf5acc324f56fad271a97a93b7976d7d3aa67fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5acc324f56fad271a97a93b7976d7d3aa67fb", "html_url": "https://github.com/rust-lang/rust/commit/5bf5acc324f56fad271a97a93b7976d7d3aa67fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5acc324f56fad271a97a93b7976d7d3aa67fb/comments", "author": {"login": "kjetilkjeka", "id": 5366742, "node_id": "MDQ6VXNlcjUzNjY3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5366742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjetilkjeka", "html_url": "https://github.com/kjetilkjeka", "followers_url": "https://api.github.com/users/kjetilkjeka/followers", "following_url": "https://api.github.com/users/kjetilkjeka/following{/other_user}", "gists_url": "https://api.github.com/users/kjetilkjeka/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjetilkjeka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjetilkjeka/subscriptions", "organizations_url": "https://api.github.com/users/kjetilkjeka/orgs", "repos_url": "https://api.github.com/users/kjetilkjeka/repos", "events_url": "https://api.github.com/users/kjetilkjeka/events{/privacy}", "received_events_url": "https://api.github.com/users/kjetilkjeka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjetilkjeka", "id": 5366742, "node_id": "MDQ6VXNlcjUzNjY3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5366742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjetilkjeka", "html_url": "https://github.com/kjetilkjeka", "followers_url": "https://api.github.com/users/kjetilkjeka/followers", "following_url": "https://api.github.com/users/kjetilkjeka/following{/other_user}", "gists_url": "https://api.github.com/users/kjetilkjeka/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjetilkjeka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjetilkjeka/subscriptions", "organizations_url": "https://api.github.com/users/kjetilkjeka/orgs", "repos_url": "https://api.github.com/users/kjetilkjeka/repos", "events_url": "https://api.github.com/users/kjetilkjeka/events{/privacy}", "received_events_url": "https://api.github.com/users/kjetilkjeka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352abbaadeab323c1b5a69d4669e052e9a34fb67", "url": "https://api.github.com/repos/rust-lang/rust/commits/352abbaadeab323c1b5a69d4669e052e9a34fb67", "html_url": "https://github.com/rust-lang/rust/commit/352abbaadeab323c1b5a69d4669e052e9a34fb67"}], "stats": {"total": 254, "additions": 254, "deletions": 0}, "files": [{"sha": "5bf44f949fdf666a4e346a1a046c062a48cceaf0", "filename": "src/test/assembly/nvptx-kernel-abi/nvptx-kernel-args-abi-v7.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/5bf5acc324f56fad271a97a93b7976d7d3aa67fb/src%2Ftest%2Fassembly%2Fnvptx-kernel-abi%2Fnvptx-kernel-args-abi-v7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf5acc324f56fad271a97a93b7976d7d3aa67fb/src%2Ftest%2Fassembly%2Fnvptx-kernel-abi%2Fnvptx-kernel-args-abi-v7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fnvptx-kernel-abi%2Fnvptx-kernel-args-abi-v7.rs?ref=5bf5acc324f56fad271a97a93b7976d7d3aa67fb", "patch": "@@ -0,0 +1,254 @@\n+// assembly-output: ptx-linker\n+// compile-flags: --crate-type cdylib -C target-cpu=sm_86\n+// only-nvptx64\n+// ignore-nvptx64\n+\n+// The following ABI tests are made with nvcc 11.6 does.\n+//\n+// The PTX ABI stability is tied to major versions of the PTX ISA\n+// These tests assume major version 7\n+//\n+//\n+// The following correspondence between types are assumed:\n+// u<N> - uint<N>_t\n+// i<N> - int<N>_t\n+// [T, N] - std::array<T, N>\n+// &T - T const*\n+// &mut T - T*\n+\n+// CHECK: .version 7\n+\n+#![feature(abi_ptx, lang_items, no_core)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+#[repr(C)]\n+pub struct SingleU8 {\n+    f: u8,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleU8 {\n+    f: u8,\n+    g: u8,\n+}\n+\n+#[repr(C)]\n+pub struct TripleU8 {\n+    f: u8,\n+    g: u8,\n+    h: u8,\n+}\n+\n+#[repr(C)]\n+pub struct TripleU16 {\n+    f: u16,\n+    g: u16,\n+    h: u16,\n+}\n+#[repr(C)]\n+pub struct TripleU32 {\n+    f: u32,\n+    g: u32,\n+    h: u32,\n+}\n+#[repr(C)]\n+pub struct TripleU64 {\n+    f: u64,\n+    g: u64,\n+    h: u64,\n+}\n+\n+#[repr(C)]\n+pub struct DoubleFloat {\n+    f: f32,\n+    g: f32,\n+}\n+\n+#[repr(C)]\n+pub struct TripleFloat {\n+    f: f32,\n+    g: f32,\n+    h: f32,\n+}\n+\n+#[repr(C)]\n+pub struct TripleDouble {\n+    f: f64,\n+    g: f64,\n+    h: f64,\n+}\n+\n+#[repr(C)]\n+pub struct ManyIntegers {\n+    f: u8,\n+    g: u16,\n+    h: u32,\n+    i: u64,\n+}\n+\n+#[repr(C)]\n+pub struct ManyNumerics {\n+    f: u8,\n+    g: u16,\n+    h: u32,\n+    i: u64,\n+    j: f32,\n+    k: f64,\n+}\n+\n+// CHECK: .visible .entry f_u8_arg(\n+// CHECK: .param .u8 f_u8_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u8_arg(_a: u8) {}\n+\n+// CHECK: .visible .entry f_u16_arg(\n+// CHECK: .param .u16 f_u16_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u16_arg(_a: u16) {}\n+\n+// CHECK: .visible .entry f_u32_arg(\n+// CHECK: .param .u32 f_u32_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u32_arg(_a: u32) {}\n+\n+// CHECK: .visible .entry f_u64_arg(\n+// CHECK: .param .u64 f_u64_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u64_arg(_a: u64) {}\n+\n+// CHECK: .visible .entry f_u128_arg(\n+// CHECK: .param .align 16 .b8 f_u128_arg_param_0[16]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u128_arg(_a: u128) {}\n+\n+// CHECK: .visible .entry f_i8_arg(\n+// CHECK: .param .u8 f_i8_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_i8_arg(_a: i8) {}\n+\n+// CHECK: .visible .entry f_i16_arg(\n+// CHECK: .param .u16 f_i16_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_i16_arg(_a: i16) {}\n+\n+// CHECK: .visible .entry f_i32_arg(\n+// CHECK: .param .u32 f_i32_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_i32_arg(_a: i32) {}\n+\n+// CHECK: .visible .entry f_i64_arg(\n+// CHECK: .param .u64 f_i64_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_i64_arg(_a: i64) {}\n+\n+// CHECK: .visible .entry f_i128_arg(\n+// CHECK: .param .align 16 .b8 f_i128_arg_param_0[16]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_i128_arg(_a: i128) {}\n+\n+// CHECK: .visible .entry f_f32_arg(\n+// CHECK: .param .f32 f_f32_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_f32_arg(_a: f32) {}\n+\n+// CHECK: .visible .entry f_f64_arg(\n+// CHECK: .param .f64 f_f64_arg_param_0\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_f64_arg(_a: f64) {}\n+\n+// CHECK: .visible .entry f_single_u8_arg(\n+// CHECK: .param .align 1 .b8 f_single_u8_arg_param_0[1]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_single_u8_arg(_a: SingleU8) {}\n+\n+// CHECK: .visible .entry f_double_u8_arg(\n+// CHECK: .param .align 1 .b8 f_double_u8_arg_param_0[2]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_double_u8_arg(_a: DoubleU8) {}\n+\n+// CHECK: .visible .entry f_triple_u8_arg(\n+// CHECK: .param .align 1 .b8 f_triple_u8_arg_param_0[3]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_triple_u8_arg(_a: TripleU8) {}\n+\n+// CHECK: .visible .entry f_triple_u16_arg(\n+// CHECK: .param .align 2 .b8 f_triple_u16_arg_param_0[6]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_triple_u16_arg(_a: TripleU16) {}\n+\n+// CHECK: .visible .entry f_triple_u32_arg(\n+// CHECK: .param .align 4 .b8 f_triple_u32_arg_param_0[12]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_triple_u32_arg(_a: TripleU32) {}\n+\n+// CHECK: .visible .entry f_triple_u64_arg(\n+// CHECK: .param .align 8 .b8 f_triple_u64_arg_param_0[24]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_triple_u64_arg(_a: TripleU64) {}\n+\n+// CHECK: .visible .entry f_many_integers_arg(\n+// CHECK: .param .align 8 .b8 f_many_integers_arg_param_0[16]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_many_integers_arg(_a: ManyIntegers) {}\n+\n+// CHECK: .visible .entry f_double_float_arg(\n+// CHECK: .param .align 4 .b8 f_double_float_arg_param_0[8]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_double_float_arg(_a: DoubleFloat) {}\n+\n+// CHECK: .visible .entry f_triple_float_arg(\n+// CHECK: .param .align 4 .b8 f_triple_float_arg_param_0[12]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_triple_float_arg(_a: TripleFloat) {}\n+\n+// CHECK: .visible .entry f_triple_double_arg(\n+// CHECK: .param .align 8 .b8 f_triple_double_arg_param_0[24]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_triple_double_arg(_a: TripleDouble) {}\n+\n+// CHECK: .visible .entry f_many_numerics_arg(\n+// CHECK: .param .align 8 .b8 f_many_numerics_arg_param_0[32]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_many_numerics_arg(_a: ManyNumerics) {}\n+\n+// CHECK: .visible .entry f_byte_array_arg(\n+// CHECK: .param .align 1 .b8 f_byte_array_arg_param_0[5]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_byte_array_arg(_a: [u8; 5]) {}\n+\n+// CHECK: .visible .entry f_float_array_arg(\n+// CHECK: .param .align 4 .b8 f_float_array_arg_param_0[20]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_float_array_arg(_a: [f32; 5]) {}\n+\n+// CHECK: .visible .entry f_u128_array_arg(\n+// CHECK: .param .align 16 .b8 f_u128_array_arg_param_0[80]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u128_array_arg(_a: [u128; 5]) {}\n+\n+// CHECK: .visible .entry f_u32_slice_arg(\n+// CHECK: .param .u64 f_u32_slice_arg_param_0\n+// CHECK: .param .u64 f_u32_slice_arg_param_1\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_u32_slice_arg(_a: &[u32]) {}\n+\n+// CHECK: .visible .entry f_tuple_u8_u8_arg(\n+// CHECK: .param .align 1 .b8 f_tuple_u8_u8_arg_param_0[2]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_tuple_u8_u8_arg(_a: (u8, u8)) {}\n+\n+// CHECK: .visible .entry f_tuple_u32_u32_arg(\n+// CHECK: .param .align 4 .b8 f_tuple_u32_u32_arg_param_0[8]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_tuple_u32_u32_arg(_a: (u32, u32)) {}\n+\n+\n+// CHECK: .visible .entry f_tuple_u8_u8_u32_arg(\n+// CHECK: .param .align 4 .b8 f_tuple_u8_u8_u32_arg_param_0[8]\n+#[no_mangle]\n+pub unsafe extern \"ptx-kernel\" fn f_tuple_u8_u8_u32_arg(_a: (u8, u8, u32)) {}"}]}