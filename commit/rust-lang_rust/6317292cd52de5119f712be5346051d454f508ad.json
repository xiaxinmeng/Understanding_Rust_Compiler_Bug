{"sha": "6317292cd52de5119f712be5346051d454f508ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTcyOTJjZDUyZGU1MTE5ZjcxMmJlNTM0NjA1MWQ0NTRmNTA4YWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-30T16:18:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-30T16:18:48Z"}, "message": "internal: more obviously correct code for cache priming progerss\n\nIt doesn't make sense for the prime_caches itself send begin/end events\n-- the caller knows perfectly fine when they happen!", "tree": {"sha": "e34626b94dc314506fd71616e9cd93ab2e75984f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e34626b94dc314506fd71616e9cd93ab2e75984f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6317292cd52de5119f712be5346051d454f508ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6317292cd52de5119f712be5346051d454f508ad", "html_url": "https://github.com/rust-lang/rust/commit/6317292cd52de5119f712be5346051d454f508ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6317292cd52de5119f712be5346051d454f508ad/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1987b45e90a4f4bceabe4added1998dc0b2092", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1987b45e90a4f4bceabe4added1998dc0b2092", "html_url": "https://github.com/rust-lang/rust/commit/bb1987b45e90a4f4bceabe4added1998dc0b2092"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "88a9240bfac31f4bbde220e80b916c65e00dc5a6", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6317292cd52de5119f712be5346051d454f508ad/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317292cd52de5119f712be5346051d454f508ad/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=6317292cd52de5119f712be5346051d454f508ad", "patch": "@@ -8,39 +8,26 @@ use ide_db::base_db::SourceDatabase;\n \n use crate::RootDatabase;\n \n+/// We started indexing a crate.\n #[derive(Debug)]\n-pub enum PrimeCachesProgress {\n-    Started,\n-    /// We started indexing a crate.\n-    StartedOnCrate {\n-        on_crate: String,\n-        n_done: usize,\n-        n_total: usize,\n-    },\n-    /// We finished indexing all crates.\n-    Finished,\n+pub struct PrimeCachesProgress {\n+    pub on_crate: String,\n+    pub n_done: usize,\n+    pub n_total: usize,\n }\n \n pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress) + Sync)) {\n     let _p = profile::span(\"prime_caches\");\n     let graph = db.crate_graph();\n     let topo = &graph.crates_in_topological_order();\n \n-    cb(PrimeCachesProgress::Started);\n-    // Take care to emit the finish signal even when the computation is canceled.\n-    let _d = stdx::defer(|| cb(PrimeCachesProgress::Finished));\n-\n     // FIXME: This would be easy to parallelize, since it's in the ideal ordering for that.\n     // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n     // cancellation, so we cannot use rayon.\n     for (i, &crate_id) in topo.iter().enumerate() {\n         let crate_name = graph[crate_id].display_name.as_deref().unwrap_or_default().to_string();\n \n-        cb(PrimeCachesProgress::StartedOnCrate {\n-            on_crate: crate_name,\n-            n_done: i,\n-            n_total: topo.len(),\n-        });\n+        cb(PrimeCachesProgress { on_crate: crate_name, n_done: i, n_total: topo.len() });\n         db.crate_def_map(crate_id);\n         db.import_map(crate_id);\n     }"}, {"sha": "38e0e9c65b36a113f82d941320ece4fddf731b18", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6317292cd52de5119f712be5346051d454f508ad/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6317292cd52de5119f712be5346051d454f508ad/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6317292cd52de5119f712be5346051d454f508ad", "patch": "@@ -8,11 +8,10 @@ use std::{\n \n use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n-use ide::{FileId, PrimeCachesProgress};\n use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n-use vfs::ChangeKind;\n+use vfs::{ChangeKind, FileId};\n \n use crate::{\n     config::Config,\n@@ -67,6 +66,13 @@ pub(crate) enum Task {\n     FetchBuildData(BuildDataProgress),\n }\n \n+#[derive(Debug)]\n+pub(crate) enum PrimeCachesProgress {\n+    Begin,\n+    Report(ide::PrimeCachesProgress),\n+    End { cancelled: bool },\n+}\n+\n impl fmt::Debug for Event {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let debug_verbose_not = |not: &Notification, f: &mut fmt::Formatter| {\n@@ -209,17 +215,17 @@ impl GlobalState {\n                             }\n                         }\n                         Task::PrimeCaches(progress) => match progress {\n-                            PrimeCachesProgress::Started => prime_caches_progress.push(progress),\n-                            PrimeCachesProgress::StartedOnCrate { .. } => {\n+                            PrimeCachesProgress::Begin => prime_caches_progress.push(progress),\n+                            PrimeCachesProgress::Report(_) => {\n                                 match prime_caches_progress.last_mut() {\n-                                    Some(last @ PrimeCachesProgress::StartedOnCrate { .. }) => {\n+                                    Some(last @ PrimeCachesProgress::Report(_)) => {\n                                         // Coalesce subsequent update events.\n                                         *last = progress;\n                                     }\n                                     _ => prime_caches_progress.push(progress),\n                                 }\n                             }\n-                            PrimeCachesProgress::Finished => prime_caches_progress.push(progress),\n+                            PrimeCachesProgress::End { .. } => prime_caches_progress.push(progress),\n                         },\n                         Task::FetchWorkspace(progress) => {\n                             let (state, msg) = match progress {\n@@ -275,17 +281,20 @@ impl GlobalState {\n                 for progress in prime_caches_progress {\n                     let (state, message, fraction);\n                     match progress {\n-                        PrimeCachesProgress::Started => {\n+                        PrimeCachesProgress::Begin => {\n                             state = Progress::Begin;\n                             message = None;\n                             fraction = 0.0;\n                         }\n-                        PrimeCachesProgress::StartedOnCrate { on_crate, n_done, n_total } => {\n+                        PrimeCachesProgress::Report(report) => {\n                             state = Progress::Report;\n-                            message = Some(format!(\"{}/{} ({})\", n_done, n_total, on_crate));\n-                            fraction = Progress::fraction(n_done, n_total);\n+                            message = Some(format!(\n+                                \"{}/{} ({})\",\n+                                report.n_done, report.n_total, report.on_crate\n+                            ));\n+                            fraction = Progress::fraction(report.n_done, report.n_total);\n                         }\n-                        PrimeCachesProgress::Finished => {\n+                        PrimeCachesProgress::End { cancelled: _ } => {\n                             state = Progress::End;\n                             message = None;\n                             fraction = 1.0;\n@@ -422,13 +431,16 @@ impl GlobalState {\n                     self.task_pool.handle.spawn_with_sender({\n                         let analysis = self.snapshot().analysis;\n                         move |sender| {\n-                            let cb = |progress| {\n-                                sender.send(Task::PrimeCaches(progress)).unwrap();\n-                            };\n-                            match analysis.prime_caches(cb) {\n-                                Ok(()) => (),\n-                                Err(_canceled) => (),\n-                            }\n+                            sender.send(Task::PrimeCaches(PrimeCachesProgress::Begin)).unwrap();\n+                            let res = analysis.prime_caches(|progress| {\n+                                let report = PrimeCachesProgress::Report(progress);\n+                                sender.send(Task::PrimeCaches(report)).unwrap();\n+                            });\n+                            sender\n+                                .send(Task::PrimeCaches(PrimeCachesProgress::End {\n+                                    cancelled: res.is_err(),\n+                                }))\n+                                .unwrap();\n                         }\n                     });\n                 }"}]}