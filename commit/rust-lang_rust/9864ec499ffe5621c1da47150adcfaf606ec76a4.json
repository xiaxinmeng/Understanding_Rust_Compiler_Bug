{"sha": "9864ec499ffe5621c1da47150adcfaf606ec76a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NjRlYzQ5OWZmZTU2MjFjMWRhNDcxNTBhZGNmYWY2MDZlYzc2YTQ=", "commit": {"author": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2019-11-24T20:44:19Z"}, "committer": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2020-01-14T16:57:59Z"}, "message": "Implement `finish_non_exhaustive` for `DebugStruct`.", "tree": {"sha": "b5f00a763ee035479005df44dc3d583e59f98f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f00a763ee035479005df44dc3d583e59f98f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9864ec499ffe5621c1da47150adcfaf606ec76a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9864ec499ffe5621c1da47150adcfaf606ec76a4", "html_url": "https://github.com/rust-lang/rust/commit/9864ec499ffe5621c1da47150adcfaf606ec76a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9864ec499ffe5621c1da47150adcfaf606ec76a4/comments", "author": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6122db3fa22031c48ca6b332fc856b8d098027", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6122db3fa22031c48ca6b332fc856b8d098027", "html_url": "https://github.com/rust-lang/rust/commit/cb6122db3fa22031c48ca6b332fc856b8d098027"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "dd0f3ccb15841721ca16c28c1288b3e13baccf21", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9864ec499ffe5621c1da47150adcfaf606ec76a4/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9864ec499ffe5621c1da47150adcfaf606ec76a4/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=9864ec499ffe5621c1da47150adcfaf606ec76a4", "patch": "@@ -159,6 +159,62 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n         self\n     }\n \n+    /// Marks the struct as non-exhaustive, indicating to the reader that there are some other\n+    /// fields that are not shown in the debug representation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(debug_non_exhaustive)]\n+    /// use std::fmt;\n+    ///\n+    /// struct Bar {\n+    ///     bar: i32,\n+    ///     hidden: f32,\n+    /// }\n+    ///\n+    /// impl fmt::Debug for Bar {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         fmt.debug_struct(\"Bar\")\n+    ///            .field(\"bar\", &self.bar)\n+    ///            .finish_non_exhaustive() // Show that some other field(s) exist.\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\", Bar { bar: 10, hidden: 1.0 }),\n+    ///     \"Bar { bar: 10, .. }\",\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"debug_non_exhaustive\", issue = \"67364\")]\n+    pub fn finish_non_exhaustive(&mut self) -> fmt::Result {\n+        self.result = self.result.and_then(|_| {\n+            // Draw non-exhaustive dots (`..`), and open brace if necessary (no fields).\n+            if self.is_pretty() {\n+                if !self.has_fields {\n+                    self.fmt.write_str(\" {\\n\")?;\n+                }\n+                let mut slot = None;\n+                let mut state = Default::default();\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot, &mut state);\n+                writer.write_str(\"..\\n\")?;\n+            } else {\n+                if self.has_fields {\n+                    self.fmt.write_str(\", ..\")?;\n+                } else {\n+                    self.fmt.write_str(\" { ..\")?;\n+                }\n+            }\n+            if self.is_pretty() {\n+                self.fmt.write_str(\"}\")?\n+            } else {\n+                self.fmt.write_str(\" }\")?;\n+            }\n+            Ok(())\n+        });\n+        self.result\n+    }\n+\n     /// Finishes output and returns any error encountered.\n     ///\n     /// # Examples"}, {"sha": "d8ec6764bc620eb71c6684c723f5dd2227eeea1d", "filename": "src/libcore/tests/fmt/builders.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/9864ec499ffe5621c1da47150adcfaf606ec76a4/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9864ec499ffe5621c1da47150adcfaf606ec76a4/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fbuilders.rs?ref=9864ec499ffe5621c1da47150adcfaf606ec76a4", "patch": "@@ -93,6 +93,89 @@ mod debug_struct {\n             format!(\"{:#?}\", Bar)\n         );\n     }\n+\n+    #[test]\n+    fn test_only_non_exhaustive() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt.debug_struct(\"Foo\")\n+                    .finish_non_exhaustive()\n+            }\n+        }\n+\n+\n+        assert_eq!(\"Foo { .. }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\n+\"Foo {\n+    ..\n+}\",\n+                   format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_multiple_and_non_exhaustive() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt.debug_struct(\"Foo\")\n+                    .field(\"bar\", &true)\n+                    .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n+                    .finish_non_exhaustive()\n+            }\n+        }\n+\n+        assert_eq!(\"Foo { bar: true, baz: 10/20, .. }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\n+\"Foo {\n+    bar: true,\n+    baz: 10/20,\n+    ..\n+}\",\n+                   format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_nested_non_exhaustive() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt.debug_struct(\"Foo\")\n+                    .field(\"bar\", &true)\n+                    .field(\"baz\", &format_args!(\"{}/{}\", 10, 20))\n+                    .finish_non_exhaustive()\n+            }\n+        }\n+\n+        struct Bar;\n+\n+        impl fmt::Debug for Bar {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt.debug_struct(\"Bar\")\n+                    .field(\"foo\", &Foo)\n+                    .field(\"hello\", &\"world\")\n+                    .finish_non_exhaustive()\n+            }\n+        }\n+\n+        assert_eq!(\"Bar { foo: Foo { bar: true, baz: 10/20, .. }, hello: \\\"world\\\", .. }\",\n+                   format!(\"{:?}\", Bar));\n+        assert_eq!(\n+\"Bar {\n+    foo: Foo {\n+        bar: true,\n+        baz: 10/20,\n+        ..\n+    },\n+    hello: \\\"world\\\",\n+    ..\n+}\",\n+                   format!(\"{:#?}\", Bar));\n+    }\n+\n }\n \n mod debug_tuple {"}, {"sha": "8c034938c2bb9881a58de26f4cc1e5e6ae5ecafb", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9864ec499ffe5621c1da47150adcfaf606ec76a4/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9864ec499ffe5621c1da47150adcfaf606ec76a4/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=9864ec499ffe5621c1da47150adcfaf606ec76a4", "patch": "@@ -5,6 +5,7 @@\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(debug_map_key_value)]\n+#![feature(debug_non_exhaustive)]\n #![feature(dec2flt)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]"}]}