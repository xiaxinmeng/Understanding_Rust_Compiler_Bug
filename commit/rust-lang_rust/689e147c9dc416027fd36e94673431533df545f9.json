{"sha": "689e147c9dc416027fd36e94673431533df545f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWUxNDdjOWRjNDE2MDI3ZmQzNmU5NDY3MzQzMTUzM2RmNTQ1Zjk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-23T11:46:38Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:54Z"}, "message": "Collect inner items in expression macros", "tree": {"sha": "fe8c4d6937134388bd23416706c08a4de046cf06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe8c4d6937134388bd23416706c08a4de046cf06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689e147c9dc416027fd36e94673431533df545f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689e147c9dc416027fd36e94673431533df545f9", "html_url": "https://github.com/rust-lang/rust/commit/689e147c9dc416027fd36e94673431533df545f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689e147c9dc416027fd36e94673431533df545f9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a81427304114d2c6ada9e9258ffe31e715c25bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a81427304114d2c6ada9e9258ffe31e715c25bc", "html_url": "https://github.com/rust-lang/rust/commit/5a81427304114d2c6ada9e9258ffe31e715c25bc"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "bbde0b80241362d63d7ba9aeb3d78041e27977a0", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=689e147c9dc416027fd36e94673431533df545f9", "patch": "@@ -564,12 +564,14 @@ impl ExprCollector<'_> {\n             });\n         let tree = &self.item_trees[index].1;\n \n+        // FIXME: This probably breaks with `use` items, since they produce multiple item tree nodes\n+\n         // Root file (non-macro).\n         tree.all_inner_items()\n             .chain(tree.top_level_items().iter().copied())\n             .filter_map(|mod_item| mod_item.downcast::<S>())\n             .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value)\n-            .unwrap()\n+            .unwrap_or_else(|| panic!(\"couldn't find inner item for {:?}\", id))\n     }\n \n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {"}, {"sha": "81397b06318db48cb6a01a0e9663e858c8d787e5", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=689e147c9dc416027fd36e94673431533df545f9", "patch": "@@ -317,6 +317,26 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn macro_inner_item() {\n+        do_check(\n+            r\"\n+            macro_rules! mac {\n+                () => {{\n+                    fn inner() {}\n+                    inner();\n+                }};\n+            }\n+\n+            fn foo() {\n+                mac!();\n+                <|>\n+            }\n+        \",\n+            &[],\n+        );\n+    }\n+\n     fn do_check_local_name(ra_fixture: &str, expected_offset: u32) {\n         let (db, position) = TestDB::with_position(ra_fixture);\n         let file_id = position.file_id;"}, {"sha": "a1a78fc5c5135d7c81942cc6f272c2a4866a1e4a", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=689e147c9dc416027fd36e94673431533df545f9", "patch": "@@ -12,7 +12,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ast::{AstNode, AttrsOwner, ModuleItemOwner, NameOwner, StructKind, TypeAscriptionOwner};\n+use ast::{AstNode, AttrsOwner, NameOwner, StructKind, TypeAscriptionOwner};\n use either::Either;\n use hir_expand::{\n     ast_id_map::FileAstId,\n@@ -73,25 +73,28 @@ impl ItemTree {\n         };\n \n         let hygiene = Hygiene::new(db.upcast(), file_id);\n+        let ctx = lower::Ctx::new(db, hygiene.clone(), file_id);\n         let mut top_attrs = None;\n-        let (macro_storage, file_storage);\n-        let item_owner = match_ast! {\n+        let mut item_tree = match_ast! {\n             match syntax {\n-                ast::MacroItems(items) => {\n-                    macro_storage = items;\n-                    &macro_storage as &dyn ModuleItemOwner\n-                },\n                 ast::SourceFile(file) => {\n                     top_attrs = Some(Attrs::new(&file, &hygiene));\n-                    file_storage = file;\n-                    &file_storage\n+                    ctx.lower_module_items(&file)\n+                },\n+                ast::MacroItems(items) => {\n+                    ctx.lower_module_items(&items)\n+                },\n+                // Macros can expand to expressions. We return an empty item tree in this case, but\n+                // still need to collect inner items.\n+                ast::Expr(e) => {\n+                    ctx.lower_inner_items(e.syntax())\n+                },\n+                _ => {\n+                    panic!(\"cannot create item tree from {:?}\", syntax);\n                 },\n-                _ => return Arc::new(Self::empty(file_id)),\n             }\n         };\n \n-        let ctx = lower::Ctx::new(db, hygiene, file_id);\n-        let mut item_tree = ctx.lower(item_owner);\n         item_tree.top_attrs = top_attrs.unwrap_or_default();\n         Arc::new(item_tree)\n     }"}, {"sha": "3bb437e8105ca854c08dff3dbc0c9acdd8389599", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689e147c9dc416027fd36e94673431533df545f9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=689e147c9dc416027fd36e94673431533df545f9", "patch": "@@ -52,7 +52,7 @@ impl Ctx {\n         }\n     }\n \n-    pub(super) fn lower(mut self, item_owner: &dyn ModuleItemOwner) -> ItemTree {\n+    pub(super) fn lower_module_items(mut self, item_owner: &dyn ModuleItemOwner) -> ItemTree {\n         self.tree.top_level = item_owner\n             .items()\n             .flat_map(|item| self.lower_mod_item(&item, false))\n@@ -61,6 +61,11 @@ impl Ctx {\n         self.tree\n     }\n \n+    pub(super) fn lower_inner_items(mut self, within: &SyntaxNode) -> ItemTree {\n+        self.collect_inner_items(within);\n+        self.tree\n+    }\n+\n     fn lower_mod_item(&mut self, item: &ast::ModuleItem, inner: bool) -> Option<ModItems> {\n         assert!(inner || self.inner_items.is_empty());\n "}]}