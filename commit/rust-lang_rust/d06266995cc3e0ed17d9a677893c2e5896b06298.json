{"sha": "d06266995cc3e0ed17d9a677893c2e5896b06298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjI2Njk5NWNjM2UwZWQxN2Q5YTY3Nzg5M2MyZTU4OTZiMDYyOTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-13T11:31:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-13T11:31:56Z"}, "message": "collections: move hashmap's example to the struct.\n\nMost people go straight to the struct, not looking at the module, so the\nexample was well hidden.", "tree": {"sha": "049b8aa85dccd7340da1236ed591145f38cbb209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049b8aa85dccd7340da1236ed591145f38cbb209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d06266995cc3e0ed17d9a677893c2e5896b06298", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d06266995cc3e0ed17d9a677893c2e5896b06298", "html_url": "https://github.com/rust-lang/rust/commit/d06266995cc3e0ed17d9a677893c2e5896b06298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d06266995cc3e0ed17d9a677893c2e5896b06298/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cbba7c54e4e1e02d4ff3ffacf46d15d0f3a039c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbba7c54e4e1e02d4ff3ffacf46d15d0f3a039c", "html_url": "https://github.com/rust-lang/rust/commit/6cbba7c54e4e1e02d4ff3ffacf46d15d0f3a039c"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "fdf09a039848c6b979a81b05468735b7ff3db61e", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d06266995cc3e0ed17d9a677893c2e5896b06298/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06266995cc3e0ed17d9a677893c2e5896b06298/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=d06266995cc3e0ed17d9a677893c2e5896b06298", "patch": "@@ -9,56 +9,6 @@\n // except according to those terms.\n \n //! Unordered containers, implemented as hash-tables (`HashSet` and `HashMap` types)\n-//!\n-//! The tables use a keyed hash with new random keys generated for each container, so the ordering\n-//! of a set of keys in a hash table is randomized.\n-//!\n-//! This is currently implemented with robin hood hashing, as described in [1][2][3].\n-//!\n-//! # Example\n-//!\n-//! ```rust\n-//! use collections::HashMap;\n-//!\n-//! // type inference lets us omit an explicit type signature (which\n-//! // would be `HashMap<&str, &str>` in this example).\n-//! let mut book_reviews = HashMap::new();\n-//!\n-//! // review some books.\n-//! book_reviews.insert(\"Adventures of Hucklebury Fin\",      \"My favorite book.\");\n-//! book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\");\n-//! book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\");\n-//! book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n-//!\n-//! // check for a specific one.\n-//! if !book_reviews.contains_key(& &\"Les Mis\u00e9rables\") {\n-//!     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n-//!              book_reviews.len());\n-//! }\n-//!\n-//! // oops, this review has a lot of spelling mistakes, let's delete it.\n-//! book_reviews.remove(& &\"The Adventures of Sherlock Holmes\");\n-//!\n-//! // look up the values associated with some keys.\n-//! let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n-//! for book in to_find.iter() {\n-//!     match book_reviews.find(book) {\n-//!         Some(review) => println!(\"{}: {}\", *book, *review),\n-//!         None => println!(\"{} is unreviewed.\", *book)\n-//!     }\n-//! }\n-//!\n-//! // iterate over everything.\n-//! for (book, review) in book_reviews.iter() {\n-//!     println!(\"{}: \\\"{}\\\"\", *book, *review);\n-//! }\n-//! ```\n-//!\n-//! Relevant papers/articles:\n-//!\n-//! [1]: Pedro Celis. [\"Robin Hood Hashing\"](https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf)\n-//! [2]: (http://codecapsule.com/2013/11/11/robin-hood-hashing/)\n-//! [3]: (http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/)\n \n use std::container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use std::clone::Clone;\n@@ -667,14 +617,64 @@ static INITIAL_LOAD_FACTOR: Fraction = (9, 10);\n // `table::RawTable::new`, but I'm not confident it works for all sane alignments,\n // especially if a type needs more alignment than `malloc` provides.\n \n-/// A hash map implementation which uses linear probing with Robin Hood bucket\n-/// stealing.\n+/// A hash map implementation which uses linear probing with Robin\n+/// Hood bucket stealing.\n ///\n /// The hashes are all keyed by the task-local random number generator\n-/// on creation by default. This can be overriden with one of the constructors.\n+/// on creation by default, this means the ordering of the keys is\n+/// randomized, but makes the tables more resistant to\n+/// denial-of-service attacks (Hash DoS). This behaviour can be\n+/// overriden with one of the constructors.\n ///\n /// It is required that the keys implement the `Eq` and `Hash` traits, although\n /// this can frequently be achieved by using `#[deriving(Eq, Hash)]`.\n+///\n+/// Relevant papers/articles:\n+///\n+/// 1. Pedro Celis. [\"Robin Hood Hashing\"](https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf)\n+/// 2. Emmanuel Goossaert. [\"Robin Hood\n+///    hashing\"](http://codecapsule.com/2013/11/11/robin-hood-hashing/)\n+/// 3. Emmanuel Goossaert. [\"Robin Hood hashing: backward shift\n+///    deletion\"](http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/)\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use collections::HashMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `HashMap<&str, &str>` in this example).\n+/// let mut book_reviews = HashMap::new();\n+///\n+/// // review some books.\n+/// book_reviews.insert(\"Adventures of Hucklebury Fin\",      \"My favorite book.\");\n+/// book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\");\n+/// book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\");\n+/// book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n+///\n+/// // check for a specific one.\n+/// if !book_reviews.contains_key(& &\"Les Mis\u00e9rables\") {\n+///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n+///              book_reviews.len());\n+/// }\n+///\n+/// // oops, this review has a lot of spelling mistakes, let's delete it.\n+/// book_reviews.remove(& &\"The Adventures of Sherlock Holmes\");\n+///\n+/// // look up the values associated with some keys.\n+/// let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n+/// for book in to_find.iter() {\n+///     match book_reviews.find(book) {\n+///         Some(review) => println!(\"{}: {}\", *book, *review),\n+///         None => println!(\"{} is unreviewed.\", *book)\n+///     }\n+/// }\n+///\n+/// // iterate over everything.\n+/// for (book, review) in book_reviews.iter() {\n+///     println!(\"{}: \\\"{}\\\"\", *book, *review);\n+/// }\n+/// ```\n #[deriving(Clone)]\n pub struct HashMap<K, V, H = sip::SipHasher> {\n     // All hashes are keyed on these values, to prevent hash collision attacks."}]}