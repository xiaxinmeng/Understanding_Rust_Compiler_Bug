{"sha": "3b47cdc4398c8d7b422077372bb65e95ecc637d8", "node_id": "C_kwDOAAsO6NoAKDNiNDdjZGM0Mzk4YzhkN2I0MjIwNzczNzJiYjY1ZTk1ZWNjNjM3ZDg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T21:35:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T15:59:21Z"}, "message": "Add Span to StmtKind::Let.", "tree": {"sha": "451f3d853afb4285cc6bd2a3e0679d637fd8c8f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451f3d853afb4285cc6bd2a3e0679d637fd8c8f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b47cdc4398c8d7b422077372bb65e95ecc637d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b47cdc4398c8d7b422077372bb65e95ecc637d8", "html_url": "https://github.com/rust-lang/rust/commit/3b47cdc4398c8d7b422077372bb65e95ecc637d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b47cdc4398c8d7b422077372bb65e95ecc637d8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28d74a9b7286c7e93484541326c92bdddb587f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d74a9b7286c7e93484541326c92bdddb587f1a", "html_url": "https://github.com/rust-lang/rust/commit/28d74a9b7286c7e93484541326c92bdddb587f1a"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "a3dbe931daacdd9cb0beb8e3bd2a63d1f65f0a88", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3b47cdc4398c8d7b422077372bb65e95ecc637d8", "patch": "@@ -1984,6 +1984,13 @@ impl<'tcx> Rvalue<'tcx> {\n }\n \n impl BorrowKind {\n+    pub fn mutability(&self) -> Mutability {\n+        match *self {\n+            BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => Mutability::Not,\n+            BorrowKind::Mut { .. } => Mutability::Mut,\n+        }\n+    }\n+\n     pub fn allows_two_phase_borrow(&self) -> bool {\n         match *self {\n             BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => false,"}, {"sha": "7d79a13d3fde3d5737f9a85576b9e292220ab023", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=3b47cdc4398c8d7b422077372bb65e95ecc637d8", "patch": "@@ -227,6 +227,9 @@ pub enum StmtKind<'tcx> {\n \n         /// The lint level for this `let` statement.\n         lint_level: LintLevel,\n+\n+        /// Span of the `let <PAT> = <INIT>` part.\n+        span: Span,\n     },\n }\n \n@@ -594,6 +597,55 @@ impl<'tcx> Pat<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n+    /// `match foo() { Some(a) => (), None => () }`\n+    pub fn each_binding(&self, mut f: impl FnMut(Symbol, BindingMode, Ty<'tcx>, Span)) {\n+        self.walk_always(|p| {\n+            if let PatKind::Binding { name, mode, ty, .. } = p.kind {\n+                f(name, mode, ty, p.span);\n+            }\n+        });\n+    }\n+\n+    /// Walk the pattern in left-to-right order.\n+    ///\n+    /// If `it(pat)` returns `false`, the children are not visited.\n+    pub fn walk(&self, mut it: impl FnMut(&Pat<'tcx>) -> bool) {\n+        self.walk_(&mut it)\n+    }\n+\n+    fn walk_(&self, it: &mut impl FnMut(&Pat<'tcx>) -> bool) {\n+        if !it(self) {\n+            return;\n+        }\n+\n+        use PatKind::*;\n+        match &self.kind {\n+            Wild | Range(..) | Binding { subpattern: None, .. } | Constant { .. } => {}\n+            AscribeUserType { subpattern, .. }\n+            | Binding { subpattern: Some(subpattern), .. }\n+            | Deref { subpattern } => subpattern.walk_(it),\n+            Leaf { subpatterns } | Variant { subpatterns, .. } => {\n+                subpatterns.iter().for_each(|field| field.pattern.walk_(it))\n+            }\n+            Or { pats } => pats.iter().for_each(|p| p.walk_(it)),\n+            Array { box ref prefix, ref slice, box ref suffix }\n+            | Slice { box ref prefix, ref slice, box ref suffix } => {\n+                prefix.iter().chain(slice.iter()).chain(suffix.iter()).for_each(|p| p.walk_(it))\n+            }\n+        }\n+    }\n+\n+    /// Walk the pattern in left-to-right order.\n+    ///\n+    /// If you always want to recurse, prefer this method over `walk`.\n+    pub fn walk_always(&self, mut it: impl FnMut(&Pat<'tcx>)) {\n+        self.walk(|p| {\n+            it(p);\n+            true\n+        })\n+    }\n }\n \n impl<'tcx> IntoDiagnosticArg for Pat<'tcx> {\n@@ -879,7 +931,7 @@ mod size_asserts {\n     static_assert_size!(ExprKind<'_>, 40);\n     static_assert_size!(Pat<'_>, 72);\n     static_assert_size!(PatKind<'_>, 56);\n-    static_assert_size!(Stmt<'_>, 48);\n-    static_assert_size!(StmtKind<'_>, 40);\n+    static_assert_size!(Stmt<'_>, 56);\n+    static_assert_size!(StmtKind<'_>, 48);\n     // tidy-alphabetical-end\n }"}, {"sha": "5614528c4cb2524babf43a18b5d95d69bcb72432", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=3b47cdc4398c8d7b422077372bb65e95ecc637d8", "patch": "@@ -175,6 +175,7 @@ pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stm\n             ref pattern,\n             lint_level: _,\n             else_block,\n+            span: _,\n         } => {\n             if let Some(init) = initializer {\n                 visitor.visit_expr(&visitor.thir()[*init]);"}, {"sha": "609ab19289c9a494c691ad3105c472aa768ea83a", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=3b47cdc4398c8d7b422077372bb65e95ecc637d8", "patch": "@@ -115,6 +115,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     initializer: Some(initializer),\n                     lint_level,\n                     else_block: Some(else_block),\n+                    span: _,\n                 } => {\n                     // When lowering the statement `let <pat> = <expr> else { <else> };`,\n                     // the `<else>` block is nested in the parent scope enclosing this statement.\n@@ -278,6 +279,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     initializer,\n                     lint_level,\n                     else_block: None,\n+                    span: _,\n                 } => {\n                     let ignores_expr_result = matches!(pattern.kind, PatKind::Wild);\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result });"}, {"sha": "8aacec53f94597d818cd98a55940d8fb0db117c6", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=3b47cdc4398c8d7b422077372bb65e95ecc637d8", "patch": "@@ -105,6 +105,10 @@ impl<'tcx> Cx<'tcx> {\n                             }\n                         }\n \n+                        let span = match local.init {\n+                            Some(init) => local.span.with_hi(init.span.hi()),\n+                            None => local.span,\n+                        };\n                         let stmt = Stmt {\n                             kind: StmtKind::Let {\n                                 remainder_scope,\n@@ -116,6 +120,7 @@ impl<'tcx> Cx<'tcx> {\n                                 initializer: local.init.map(|init| self.mirror_expr(init)),\n                                 else_block,\n                                 lint_level: LintLevel::Explicit(local.hir_id),\n+                                span,\n                             },\n                             opt_destruction_scope: opt_dxn_ext,\n                         };"}, {"sha": "ed61d6ee78b1d387c9fb5d067af001ea56e2958e", "filename": "compiler/rustc_mir_build/src/thir/print.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b47cdc4398c8d7b422077372bb65e95ecc637d8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fprint.rs?ref=3b47cdc4398c8d7b422077372bb65e95ecc637d8", "patch": "@@ -151,6 +151,7 @@ impl<'a, 'tcx> ThirPrinter<'a, 'tcx> {\n                 initializer,\n                 else_block,\n                 lint_level,\n+                span,\n             } => {\n                 print_indented!(self, \"kind: Let {\", depth_lvl + 1);\n                 print_indented!(\n@@ -181,6 +182,7 @@ impl<'a, 'tcx> ThirPrinter<'a, 'tcx> {\n                 }\n \n                 print_indented!(self, format!(\"lint_level: {:?}\", lint_level), depth_lvl + 2);\n+                print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 2);\n                 print_indented!(self, \"}\", depth_lvl + 1);\n             }\n         }"}]}