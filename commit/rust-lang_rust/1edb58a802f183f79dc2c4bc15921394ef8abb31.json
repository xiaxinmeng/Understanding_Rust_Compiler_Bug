{"sha": "1edb58a802f183f79dc2c4bc15921394ef8abb31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZGI1OGE4MDJmMTgzZjc5ZGMyYzRiYzE1OTIxMzk0ZWY4YWJiMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T11:08:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T11:08:06Z"}, "message": "reformat", "tree": {"sha": "24114171c61a9f433b9a54008057fa0297f91302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24114171c61a9f433b9a54008057fa0297f91302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1edb58a802f183f79dc2c4bc15921394ef8abb31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1edb58a802f183f79dc2c4bc15921394ef8abb31", "html_url": "https://github.com/rust-lang/rust/commit/1edb58a802f183f79dc2c4bc15921394ef8abb31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1edb58a802f183f79dc2c4bc15921394ef8abb31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6983091d6d255bcfd17c4f8c14015d8abc77928d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6983091d6d255bcfd17c4f8c14015d8abc77928d", "html_url": "https://github.com/rust-lang/rust/commit/6983091d6d255bcfd17c4f8c14015d8abc77928d"}], "stats": {"total": 263, "additions": 126, "deletions": 137}, "files": [{"sha": "9949312c84cc505fc21fb04d8f2847958da3cffc", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -6,7 +6,7 @@ matrix:\n       before_script:\n         - rustup component add rustfmt-preview\n       script:\n-        - cargo fmt --all -- --write-mode=diff\n+        - cargo fmt --all -- --check\n         - cargo test\n         - cargo gen-kinds --verify\n         - cargo gen-tests --verify"}, {"sha": "4235d2648ad3a903ab9d71655d16bdf70323f7ba", "filename": "src/lexer/classes.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flexer%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flexer%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fclasses.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,12 +1,17 @@\n use unicode_xid::UnicodeXID;\n \n pub fn is_ident_start(c: char) -> bool {\n-    (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_'\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || c == '_'\n         || (c > '\\x7f' && UnicodeXID::is_xid_start(c))\n }\n \n pub fn is_ident_continue(c: char) -> bool {\n-    (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_'\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || (c >= '0' && c <= '9')\n+        || c == '_'\n         || (c > '\\x7f' && UnicodeXID::is_xid_continue(c))\n }\n "}, {"sha": "f647838ea36daade46a5a607578cdfaa99d23103", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,22 +1,22 @@\n-mod ptr;\n+mod classes;\n mod comments;\n-mod strings;\n mod numbers;\n-mod classes;\n+mod ptr;\n+mod strings;\n \n use {\n-    TextUnit,\n     SyntaxKind::{self, *},\n+    TextUnit,\n };\n \n use self::{\n-    ptr::Ptr,\n     classes::*,\n+    comments::{scan_comment, scan_shebang},\n     numbers::scan_number,\n+    ptr::Ptr,\n     strings::{\n-        is_string_literal_start, scan_byte_char_or_string, scan_char,\n-        scan_raw_string, scan_string},\n-    comments::{scan_comment, scan_shebang},\n+        is_string_literal_start, scan_byte_char_or_string, scan_char, scan_raw_string, scan_string,\n+    },\n };\n \n /// A token of Rust source."}, {"sha": "5c4641a2dd0770ce613c2d7eae4aa9277e9dcbba", "filename": "src/lexer/numbers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flexer%2Fnumbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flexer%2Fnumbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fnumbers.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,5 +1,5 @@\n-use lexer::ptr::Ptr;\n use lexer::classes::*;\n+use lexer::ptr::Ptr;\n \n use SyntaxKind::{self, *};\n "}, {"sha": "91d06016916d51983de9e90b3d5ad68bcbe8c2a1", "filename": "src/lib.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -11,44 +11,42 @@\n //!   [rfc#2256]: <https://github.com/rust-lang/rfcs/pull/2256>\n //!   [RFC.md]: <https://github.com/matklad/libsyntax2/blob/master/docs/RFC.md>\n \n-#![forbid(missing_debug_implementations, unconditional_recursion, future_incompatible)]\n+#![forbid(\n+    missing_debug_implementations,\n+    unconditional_recursion,\n+    future_incompatible\n+)]\n #![deny(bad_style, missing_docs)]\n #![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n-extern crate unicode_xid;\n extern crate text_unit;\n+extern crate unicode_xid;\n \n mod lexer;\n mod parser;\n-mod yellow;\n mod syntax_kinds;\n+mod yellow;\n \n pub use {\n-    text_unit::{TextRange, TextUnit},\n+    lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n+    text_unit::{TextRange, TextUnit},\n     yellow::{SyntaxNode, SyntaxNodeRef},\n-    lexer::{tokenize, Token},\n };\n \n-pub(crate) use {\n-    yellow::SyntaxError\n-};\n+pub(crate) use yellow::SyntaxError;\n \n pub fn parse(text: String) -> SyntaxNode {\n     let tokens = tokenize(&text);\n     parser::parse::<yellow::GreenBuilder>(text, &tokens)\n }\n \n-\n /// Utilities for simple uses of the parser.\n pub mod utils {\n-    use std::{\n-        fmt::Write,\n-        collections::BTreeSet\n-    };\n+    use std::{collections::BTreeSet, fmt::Write};\n \n-    use {SyntaxNode, SyntaxNodeRef, SyntaxError};\n+    use {SyntaxError, SyntaxNode, SyntaxNodeRef};\n \n     /// Parse a file and create a string representation of the resulting parse tree.\n     pub fn dump_tree_green(syntax: &SyntaxNode) -> String {\n@@ -58,11 +56,19 @@ pub mod utils {\n         go(syntax, &mut result, 0, &mut errors);\n         return result;\n \n-        fn go(node: SyntaxNodeRef, buff: &mut String, level: usize, errors: &mut BTreeSet<SyntaxError>) {\n+        fn go(\n+            node: SyntaxNodeRef,\n+            buff: &mut String,\n+            level: usize,\n+            errors: &mut BTreeSet<SyntaxError>,\n+        ) {\n             buff.push_str(&String::from(\"  \").repeat(level));\n             write!(buff, \"{:?}\\n\", node).unwrap();\n-            let my_errors: Vec<_> = errors.iter().filter(|e| e.offset == node.range().start())\n-                .cloned().collect();\n+            let my_errors: Vec<_> = errors\n+                .iter()\n+                .filter(|e| e.offset == node.range().start())\n+                .cloned()\n+                .collect();\n             for err in my_errors {\n                 errors.remove(&err);\n                 buff.push_str(&String::from(\"  \").repeat(level));\n@@ -73,8 +79,11 @@ pub mod utils {\n                 go(child, buff, level + 1, errors)\n             }\n \n-            let my_errors: Vec<_> = errors.iter().filter(|e| e.offset == node.range().end())\n-                .cloned().collect();\n+            let my_errors: Vec<_> = errors\n+                .iter()\n+                .filter(|e| e.offset == node.range().end())\n+                .cloned()\n+                .collect();\n             for err in my_errors {\n                 errors.remove(&err);\n                 buff.push_str(&String::from(\"  \").repeat(level));"}, {"sha": "0086d32eaee3a22ee892963b1eb9607765afde07", "filename": "src/parser/event.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -8,9 +8,9 @@\n //! `start node`, `finish node`, and `FileBuilder` converts\n //! this stream to a real tree.\n use {\n-    TextUnit,\n-    SyntaxKind::{self, TOMBSTONE},\n     lexer::Token,\n+    SyntaxKind::{self, TOMBSTONE},\n+    TextUnit,\n };\n \n pub(crate) trait Sink {"}, {"sha": "5d8d57a8095b598e009388605e574a40a73f6dc4", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,9 +1,9 @@\n use super::*;\n \n-mod structs;\n-mod use_item;\n mod consts;\n+mod structs;\n mod traits;\n+mod use_item;\n \n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n@@ -12,9 +12,8 @@ pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     }\n }\n \n-pub(super) const ITEM_FIRST: TokenSet = token_set![\n-    EXTERN_KW, MOD_KW, USE_KW, STRUCT_KW, ENUM_KW, FN_KW, PUB_KW, POUND\n-];\n+pub(super) const ITEM_FIRST: TokenSet =\n+    token_set![EXTERN_KW, MOD_KW, USE_KW, STRUCT_KW, ENUM_KW, FN_KW, PUB_KW, POUND];\n \n fn item(p: &mut Parser) {\n     let item = p.start();"}, {"sha": "e24f1055ef2ac005965b13f089a099829b7ebf02", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -21,20 +21,17 @@\n //! After adding a new inline-test, run `cargo collect-tests` to extract\n //! it as a standalone text-fixture into `tests/data/parser/inline`, and\n //! run `cargo test` once to create the \"gold\" value.\n-mod items;\n mod attributes;\n mod expressions;\n-mod types;\n-mod patterns;\n+mod items;\n mod paths;\n+mod patterns;\n mod type_params;\n+mod types;\n \n use {\n+    parser::{parser::Parser, token_set::TokenSet},\n     SyntaxKind::{self, *},\n-    parser::{\n-        parser::Parser,\n-        token_set::TokenSet\n-    }\n };\n \n pub(crate) fn file(p: &mut Parser) {"}, {"sha": "db76364b211ab569c13ab56ee873c663bbb616e3", "filename": "src/parser/input.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Finput.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,8 +1,4 @@\n-use {\n-    SyntaxKind, TextRange, TextUnit,\n-    SyntaxKind::EOF,\n-    lexer::Token,\n-};\n+use {lexer::Token, SyntaxKind, SyntaxKind::EOF, TextRange, TextUnit};\n \n use std::ops::{Add, AddAssign};\n "}, {"sha": "8631baa2e92288a33cf933d051690d5b646455fe", "filename": "src/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,18 +1,14 @@\n #[macro_use]\n mod token_set;\n-mod parser;\n-mod input;\n mod event;\n mod grammar;\n+mod input;\n+mod parser;\n \n-use {\n-    lexer::Token,\n-    parser::event::{process}\n-};\n+use {lexer::Token, parser::event::process};\n \n pub(crate) use self::event::Sink;\n \n-\n /// Parse a sequence of tokens into the representative node tree\n pub(crate) fn parse<S: Sink>(text: String, tokens: &[Token]) -> S::Tree {\n     let events = {"}, {"sha": "c653e352457a73e26024499f6365b34c485c493d", "filename": "src/parser/parser/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fparser%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fparser%2Fparser%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fparser%2Fimp.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,5 +1,5 @@\n-use parser::input::{InputPosition, ParserInput};\n use parser::event::Event;\n+use parser::input::{InputPosition, ParserInput};\n \n use SyntaxKind::{self, EOF, TOMBSTONE};\n "}, {"sha": "4c21c02aed48c999d0fadd5312d94000a55f12e9", "filename": "src/syntax_kinds/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fsyntax_kinds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fsyntax_kinds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fmod.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,7 +1,7 @@\n mod generated;\n \n use std::fmt;\n-use ::{SyntaxKind::*};\n+use SyntaxKind::*;\n \n pub use self::generated::SyntaxKind;\n \n@@ -16,7 +16,6 @@ pub(crate) struct SyntaxInfo {\n     pub name: &'static str,\n }\n \n-\n impl SyntaxKind {\n     pub(crate) fn is_trivia(self: SyntaxKind) -> bool {\n         match self {"}, {"sha": "0f7ca45d77d1fa746bcda150c365ff0659f42e3d", "filename": "src/yellow/builder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fbuilder.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,7 +1,7 @@\n use {\n+    parser::Sink,\n+    yellow::{GreenNode, GreenNodeBuilder, SyntaxError, SyntaxNode, SyntaxRoot},\n     SyntaxKind, TextRange, TextUnit,\n-    yellow::{SyntaxNode, SyntaxRoot, GreenNode, GreenNodeBuilder, SyntaxError},\n-    parser::Sink\n };\n \n pub(crate) struct GreenBuilder {\n@@ -12,9 +12,7 @@ pub(crate) struct GreenBuilder {\n     errors: Vec<SyntaxError>,\n }\n \n-impl GreenBuilder {\n-\n-}\n+impl GreenBuilder {}\n \n impl Sink for GreenBuilder {\n     type Tree = SyntaxNode;\n@@ -53,13 +51,14 @@ impl Sink for GreenBuilder {\n     }\n \n     fn error(&mut self, message: String) {\n-        self.errors.push(SyntaxError { message, offset: self.pos })\n+        self.errors.push(SyntaxError {\n+            message,\n+            offset: self.pos,\n+        })\n     }\n \n     fn finish(self) -> SyntaxNode {\n         let root = SyntaxRoot::new(self.root.unwrap(), self.errors);\n         SyntaxNode::new_owned(root)\n     }\n }\n-\n-"}, {"sha": "507e4d57eb0259d274feef7fab16f4b2ff60c551", "filename": "src/yellow/green.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,5 +1,8 @@\n use std::sync::Arc;\n-use {SyntaxKind::{self, *}, TextUnit};\n+use {\n+    SyntaxKind::{self, *},\n+    TextUnit,\n+};\n \n #[derive(Clone, Debug)]\n pub(crate) enum GreenNode {\n@@ -36,9 +39,7 @@ impl GreenNode {\n         fn go(node: &GreenNode, buff: &mut String) {\n             match node {\n                 GreenNode::Leaf(l) => buff.push_str(&l.text()),\n-                GreenNode::Branch(b) => {\n-                    b.children().iter().for_each(|child| go(child, buff))\n-                }\n+                GreenNode::Branch(b) => b.children().iter().for_each(|child| go(child, buff)),\n             }\n         }\n     }\n@@ -71,7 +72,6 @@ impl GreenNodeBuilder {\n     }\n }\n \n-\n #[test]\n fn assert_send_sync() {\n     fn f<T: Send + Sync>() {}\n@@ -80,14 +80,8 @@ fn assert_send_sync() {\n \n #[derive(Clone, Debug)]\n pub(crate) enum GreenLeaf {\n-    Whitespace {\n-        newlines: u8,\n-        spaces: u8,\n-    },\n-    Token {\n-        kind: SyntaxKind,\n-        text: Arc<str>,\n-    },\n+    Whitespace { newlines: u8, spaces: u8 },\n+    Token { kind: SyntaxKind, text: Arc<str> },\n }\n \n impl GreenLeaf {\n@@ -96,10 +90,16 @@ impl GreenLeaf {\n             let newlines = text.bytes().take_while(|&b| b == b'\\n').count();\n             let spaces = text[newlines..].bytes().take_while(|&b| b == b' ').count();\n             if newlines + spaces == text.len() && newlines <= N_NEWLINES && spaces <= N_SPACES {\n-                return GreenLeaf::Whitespace { newlines: newlines as u8, spaces: spaces as u8 };\n+                return GreenLeaf::Whitespace {\n+                    newlines: newlines as u8,\n+                    spaces: spaces as u8,\n+                };\n             }\n         }\n-        GreenLeaf::Token { kind, text: text.to_owned().into_boxed_str().into() }\n+        GreenLeaf::Token {\n+            kind,\n+            text: text.to_owned().into_boxed_str().into(),\n+        }\n     }\n \n     pub(crate) fn kind(&self) -> SyntaxKind {\n@@ -141,7 +141,11 @@ pub(crate) struct GreenBranch {\n impl GreenBranch {\n     fn new(kind: SyntaxKind, children: Vec<GreenNode>) -> GreenBranch {\n         let text_len = children.iter().map(|x| x.text_len()).sum::<TextUnit>();\n-        GreenBranch { text_len, kind, children }\n+        GreenBranch {\n+            text_len,\n+            kind,\n+            children,\n+        }\n     }\n \n     pub fn kind(&self) -> SyntaxKind {\n@@ -156,4 +160,3 @@ impl GreenBranch {\n         self.children.as_slice()\n     }\n }\n-"}, {"sha": "cada65d2f4e3e933c62d31bacbe4d6be2892e32e", "filename": "src/yellow/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,12 +1,12 @@\n+mod builder;\n mod green;\n mod red;\n mod syntax;\n-mod builder;\n \n+pub use self::syntax::{SyntaxNode, SyntaxNodeRef};\n pub(crate) use self::{\n+    builder::GreenBuilder,\n     green::{GreenNode, GreenNodeBuilder},\n     red::RedNode,\n     syntax::{SyntaxError, SyntaxRoot},\n-    builder::GreenBuilder,\n };\n-pub use self::syntax::{SyntaxNode, SyntaxNodeRef};"}, {"sha": "8907100e4d1edeb4b8e54c76f1fc52a864bbb6a5", "filename": "src/yellow/red.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,11 +1,5 @@\n-use std::{\n-    ptr,\n-    sync::RwLock,\n-};\n-use {\n-    TextUnit,\n-    yellow::GreenNode,\n-};\n+use std::{ptr, sync::RwLock};\n+use {yellow::GreenNode, TextUnit};\n \n #[derive(Debug)]\n pub(crate) struct RedNode {\n@@ -22,9 +16,7 @@ struct ParentData {\n }\n \n impl RedNode {\n-    pub fn new_root(\n-        green: GreenNode,\n-    ) -> RedNode {\n+    pub fn new_root(green: GreenNode) -> RedNode {\n         RedNode::new(green, None)\n     }\n \n@@ -42,13 +34,14 @@ impl RedNode {\n         RedNode::new(green, Some(parent_data))\n     }\n \n-    fn new(\n-        green: GreenNode,\n-        parent: Option<ParentData>,\n-    ) -> RedNode {\n+    fn new(green: GreenNode, parent: Option<ParentData>) -> RedNode {\n         let n_children = green.children().len();\n         let children = (0..n_children).map(|_| None).collect();\n-        RedNode { green, parent, children: RwLock::new(children) }\n+        RedNode {\n+            green,\n+            parent,\n+            children: RwLock::new(children),\n+        }\n     }\n \n     pub(crate) fn green(&self) -> &GreenNode {\n@@ -75,12 +68,15 @@ impl RedNode {\n         if children[idx].is_none() {\n             let green_children = self.green.children();\n             let start_offset = self.start_offset()\n-                + green_children[..idx].iter().map(|x| x.text_len()).sum::<TextUnit>();\n-            let child = RedNode::new_child(green_children[idx].clone(), self.into(), start_offset, idx);\n+                + green_children[..idx]\n+                    .iter()\n+                    .map(|x| x.text_len())\n+                    .sum::<TextUnit>();\n+            let child =\n+                RedNode::new_child(green_children[idx].clone(), self.into(), start_offset, idx);\n             children[idx] = Some(child)\n         }\n         children[idx].as_ref().unwrap().into()\n-\n     }\n \n     pub(crate) fn parent(&self) -> Option<ptr::NonNull<RedNode>> {"}, {"sha": "19a9b8ac25e29071e60372c16e54c086837b466a", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,17 +1,12 @@\n-use std::{\n-    fmt,\n-    sync::Arc,\n-    ptr,\n-    ops::Deref,\n-};\n+use std::{fmt, ops::Deref, ptr, sync::Arc};\n \n use {\n-    TextRange, TextUnit,\n+    yellow::{GreenNode, RedNode},\n     SyntaxKind::{self, *},\n-    yellow::{RedNode, GreenNode},\n+    TextRange, TextUnit,\n };\n \n-pub trait TreeRoot: Deref<Target=SyntaxRoot> + Clone {}\n+pub trait TreeRoot: Deref<Target = SyntaxRoot> + Clone {}\n impl TreeRoot for Arc<SyntaxRoot> {}\n impl<'a> TreeRoot for &'a SyntaxRoot {}\n \n@@ -50,7 +45,10 @@ impl SyntaxNode<Arc<SyntaxRoot>> {\n     pub(crate) fn new_owned(root: SyntaxRoot) -> Self {\n         let root = Arc::new(root);\n         let red_weak = ptr::NonNull::from(&root.red);\n-        SyntaxNode { root, red: red_weak }\n+        SyntaxNode {\n+            root,\n+            red: red_weak,\n+        }\n     }\n }\n \n@@ -68,10 +66,7 @@ impl<ROOT: TreeRoot> SyntaxNode<ROOT> {\n \n     pub fn range(&self) -> TextRange {\n         let red = self.red();\n-        TextRange::offset_len(\n-            red.start_offset(),\n-            red.green().text_len(),\n-        )\n+        TextRange::offset_len(red.start_offset(), red.green().text_len())\n     }\n \n     pub fn text(&self) -> String {"}, {"sha": "eb955278e1a371a2c824f73a3343463bce490e78", "filename": "tests/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,8 +1,8 @@\n extern crate libsyntax2;\n extern crate testutils;\n \n-use libsyntax2::{parse};\n-use libsyntax2::utils::{dump_tree_green};\n+use libsyntax2::parse;\n+use libsyntax2::utils::dump_tree_green;\n use testutils::dir_tests;\n \n #[test]"}, {"sha": "43b8065418d7a0451bcc0ced22d8ea71d3b9f79f", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,8 +1,8 @@\n extern crate difference;\n extern crate file;\n \n-use std::path::{Path, PathBuf};\n use std::fs::read_dir;\n+use std::path::{Path, PathBuf};\n \n use difference::Changeset;\n "}, {"sha": "1259301279d996dc1a86c0f1ed2d8958655cfdb5", "filename": "tools/src/bin/main.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1edb58a802f183f79dc2c4bc15921394ef8abb31/tools%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edb58a802f183f79dc2c4bc15921394ef8abb31/tools%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fbin%2Fmain.rs?ref=1edb58a802f183f79dc2c4bc15921394ef8abb31", "patch": "@@ -1,18 +1,14 @@\n extern crate clap;\n #[macro_use]\n extern crate failure;\n-extern crate tera;\n+extern crate itertools;\n extern crate ron;\n+extern crate tera;\n extern crate walkdir;\n-extern crate itertools;\n \n-use std::{\n-    fs,\n-    path::{Path},\n-    collections::HashSet,\n-};\n use clap::{App, Arg, SubCommand};\n use itertools::Itertools;\n+use std::{collections::HashSet, fs, path::Path};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -29,7 +25,7 @@ fn main() -> Result<()> {\n             Arg::with_name(\"verify\")\n                 .long(\"--verify\")\n                 .help(\"Verify that generated code is up-to-date\")\n-                .global(true)\n+                .global(true),\n         )\n         .subcommand(SubCommand::with_name(\"gen-kinds\"))\n         .subcommand(SubCommand::with_name(\"gen-tests\"))\n@@ -66,9 +62,8 @@ fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n fn get_kinds() -> Result<String> {\n     let grammar = grammar()?;\n     let template = fs::read_to_string(SYNTAX_KINDS_TEMPLATE)?;\n-    let ret = tera::Tera::one_off(&template, &grammar, false).map_err(|e| {\n-        format_err!(\"template error: {}\", e)\n-    })?;\n+    let ret = tera::Tera::one_off(&template, &grammar, false)\n+        .map_err(|e| format_err!(\"template error: {}\", e))?;\n     Ok(ret)\n }\n \n@@ -142,7 +137,8 @@ fn tests_from_dir(dir: &Path) -> Result<HashSet<Test>> {\n fn collect_tests(s: &str) -> Vec<Test> {\n     let mut res = vec![];\n     let prefix = \"// \";\n-    let comment_blocks = s.lines()\n+    let comment_blocks = s\n+        .lines()\n         .map(str::trim_left)\n         .group_by(|line| line.starts_with(prefix));\n \n@@ -181,4 +177,3 @@ fn existing_tests(dir: &Path) -> Result<HashSet<Test>> {\n     }\n     Ok(res)\n }\n-"}]}