{"sha": "9a0b9c69600946c8c665705df2cec9ed7ce63d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMGI5YzY5NjAwOTQ2YzhjNjY1NzA1ZGYyY2VjOWVkN2NlNjNkNzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T17:46:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-12T17:46:03Z"}, "message": "remove old branch of unwind logic", "tree": {"sha": "4ee2732de9101745fe249c0962873bcd7dba0d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee2732de9101745fe249c0962873bcd7dba0d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0b9c69600946c8c665705df2cec9ed7ce63d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0b9c69600946c8c665705df2cec9ed7ce63d71", "html_url": "https://github.com/rust-lang/rust/commit/9a0b9c69600946c8c665705df2cec9ed7ce63d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0b9c69600946c8c665705df2cec9ed7ce63d71/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "152527f443c51517bb867befa93809ce5b9b1cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/152527f443c51517bb867befa93809ce5b9b1cd1", "html_url": "https://github.com/rust-lang/rust/commit/152527f443c51517bb867befa93809ce5b9b1cd1"}], "stats": {"total": 22, "additions": 1, "deletions": 21}, "files": [{"sha": "210d6cc16967e3baf871a75dbe75a17105bec03a", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b9c69600946c8c665705df2cec9ed7ce63d71/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b9c69600946c8c665705df2cec9ed7ce63d71/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=9a0b9c69600946c8c665705df2cec9ed7ce63d71", "patch": "@@ -275,18 +275,7 @@ pub fn from_fn_attrs(\n     } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n         // Special attribute for allocator functions, which can't unwind\n         false\n-    } else if let Some(_) = id {\n-        // rust-lang/rust#64655, rust-lang/rust#63909: to minimize\n-        // risk associated with changing cases where nounwind\n-        // attribute is attached, this code is deliberately mimicking\n-        // old control flow based on whether `id` is `Some` or `None`.\n-        //\n-        // However, in the long term we should either:\n-        // - fold this into final else (i.e. stop inspecting `id`)\n-        // - or, adopt Rust PR #63909.\n-        //\n-        // see also Rust RFC 2753.\n-\n+    } else {\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         if sig.abi == Abi::Rust || sig.abi == Abi::RustCall {\n             // Any Rust method (or `extern \"Rust\" fn` or `extern\n@@ -312,15 +301,6 @@ pub fn from_fn_attrs(\n             // In either case, we mark item as explicitly nounwind.\n             false\n         }\n-    } else {\n-        // assume this can possibly unwind, avoiding the application of a\n-        // `nounwind` attribute below.\n-        //\n-        // (But: See comments in previous branch. Specifically, it is\n-        // unclear whether there is real value in the assumption this\n-        // can unwind. The conservatism here may just be papering over\n-        // a real problem by making some UB a bit harder to hit.)\n-        true\n     });\n \n     // Always annotate functions with the target-cpu they are compiled for."}]}