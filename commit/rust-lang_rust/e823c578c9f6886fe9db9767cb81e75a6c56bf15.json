{"sha": "e823c578c9f6886fe9db9767cb81e75a6c56bf15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjNjNTc4YzlmNjg4NmZlOWRiOTc2N2NiODFlNzVhNmM1NmJmMTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-28T13:00:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-28T13:02:38Z"}, "message": "Use InFile for AstId", "tree": {"sha": "903f9f2ded4a197c2736b4459cda89c6639dd277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903f9f2ded4a197c2736b4459cda89c6639dd277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e823c578c9f6886fe9db9767cb81e75a6c56bf15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e823c578c9f6886fe9db9767cb81e75a6c56bf15", "html_url": "https://github.com/rust-lang/rust/commit/e823c578c9f6886fe9db9767cb81e75a6c56bf15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e823c578c9f6886fe9db9767cb81e75a6c56bf15/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16030528b53d38e24c1e5733aa4cc46058d0bbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16030528b53d38e24c1e5733aa4cc46058d0bbd1", "html_url": "https://github.com/rust-lang/rust/commit/16030528b53d38e24c1e5733aa4cc46058d0bbd1"}], "stats": {"total": 63, "additions": 16, "deletions": 47}, "files": [{"sha": "9a755704f20b7f9d76f141d19e7c38b5545058d5", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=e823c578c9f6886fe9db9767cb81e75a6c56bf15", "patch": "@@ -105,7 +105,7 @@ impl HasSource for TypeAlias {\n impl HasSource for MacroDef {\n     type Ast = ast::MacroCall;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::MacroCall> {\n-        InFile { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n+        InFile { file_id: self.id.ast_id.file_id, value: self.id.ast_id.to_node(db) }\n     }\n }\n impl HasSource for ImplBlock {"}, {"sha": "346019f884c0471e1799855eb8d655128e99d4ae", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=e823c578c9f6886fe9db9767cb81e75a6c56bf15", "patch": "@@ -157,7 +157,7 @@ where\n     N: ast::AttrsOwner,\n     D: DefDatabase,\n {\n-    let src = InFile::new(src.file_id(), src.to_node(db));\n+    let src = InFile::new(src.file_id, src.to_node(db));\n     Attrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n }\n "}, {"sha": "6daf7d3a3945bf9c7d4d6d0a9b1a1d2e51a3c925", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=e823c578c9f6886fe9db9767cb81e75a6c56bf15", "patch": "@@ -108,7 +108,7 @@ pub trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n     fn source(self, db: &(impl AstDatabase + InternDatabase)) -> InFile<N> {\n         let loc = self.lookup_intern(db);\n         let value = loc.ast_id.to_node(db);\n-        InFile { file_id: loc.ast_id.file_id(), value }\n+        InFile { file_id: loc.ast_id.file_id, value }\n     }\n     fn module(self, db: &impl InternDatabase) -> ModuleId {\n         let loc = self.lookup_intern(db);\n@@ -525,7 +525,7 @@ impl HasSource for FunctionLoc {\n \n     fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::FnDef> {\n         let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id, node)\n     }\n }\n \n@@ -534,7 +534,7 @@ impl HasSource for TypeAliasLoc {\n \n     fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::TypeAliasDef> {\n         let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id, node)\n     }\n }\n \n@@ -543,7 +543,7 @@ impl HasSource for ConstLoc {\n \n     fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::ConstDef> {\n         let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id, node)\n     }\n }\n \n@@ -552,7 +552,7 @@ impl HasSource for StaticLoc {\n \n     fn source(&self, db: &impl db::DefDatabase) -> InFile<ast::StaticDef> {\n         let node = self.ast_id.to_node(db);\n-        InFile::new(self.ast_id.file_id(), node)\n+        InFile::new(self.ast_id.file_id, node)\n     }\n }\n "}, {"sha": "df42ea84a26e7e1b7448a72474215d7e397fb589", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=e823c578c9f6886fe9db9767cb81e75a6c56bf15", "patch": "@@ -267,15 +267,15 @@ impl ModuleData {\n             return InFile::new(file_id.into(), Either::A(sf));\n         }\n         let decl = self.declaration.unwrap();\n-        InFile::new(decl.file_id(), Either::B(decl.to_node(db)))\n+        InFile::new(decl.file_id, Either::B(decl.to_node(db)))\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n     pub fn declaration_source(&self, db: &impl DefDatabase) -> Option<InFile<ast::Module>> {\n         let decl = self.declaration?;\n         let value = decl.to_node(db);\n-        Some(InFile { file_id: decl.file_id(), value })\n+        Some(InFile { file_id: decl.file_id, value })\n     }\n }\n \n@@ -309,7 +309,7 @@ mod diagnostics {\n                     }\n                     let decl = declaration.to_node(db);\n                     sink.push(UnresolvedModule {\n-                        file: declaration.file_id(),\n+                        file: declaration.file_id,\n                         decl: AstPtr::new(&decl),\n                         candidate: candidate.clone(),\n                     })"}, {"sha": "e800cc68e4e43a31b3800397f50028e862821911", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=e823c578c9f6886fe9db9767cb81e75a6c56bf15", "patch": "@@ -668,15 +668,15 @@ fn unresolved_module_diagnostics() {\n             module: LocalModuleId(\n                 0,\n             ),\n-            declaration: AstId {\n+            declaration: InFile {\n                 file_id: HirFileId(\n                     FileId(\n                         FileId(\n                             0,\n                         ),\n                     ),\n                 ),\n-                file_ast_id: FileAstId {\n+                value: FileAstId {\n                     raw: ErasedFileAstId(\n                         1,\n                     ),"}, {"sha": "fb88d2ac27aa998e4a16f1f89536de648bde608c", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e823c578c9f6886fe9db9767cb81e75a6c56bf15/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=e823c578c9f6886fe9db9767cb81e75a6c56bf15", "patch": "@@ -13,7 +13,7 @@ pub mod diagnostics;\n pub mod builtin_macro;\n pub mod quote;\n \n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n use std::sync::Arc;\n \n use ra_db::{salsa, CrateId, FileId};\n@@ -70,7 +70,7 @@ impl HirFileId {\n             HirFileIdRepr::FileId(file_id) => file_id,\n             HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n-                loc.ast_id.file_id().original_file(db)\n+                loc.ast_id.file_id.original_file(db)\n             }\n         }\n     }\n@@ -214,43 +214,12 @@ impl ExpansionInfo {\n ///\n /// It is stable across reparses, and can be used as salsa key/value.\n // FIXME: isn't this just a `Source<FileAstId<N>>` ?\n-#[derive(Debug)]\n-pub struct AstId<N: AstNode> {\n-    file_id: HirFileId,\n-    file_ast_id: FileAstId<N>,\n-}\n-\n-impl<N: AstNode> Clone for AstId<N> {\n-    fn clone(&self) -> AstId<N> {\n-        *self\n-    }\n-}\n-impl<N: AstNode> Copy for AstId<N> {}\n-\n-impl<N: AstNode> PartialEq for AstId<N> {\n-    fn eq(&self, other: &Self) -> bool {\n-        (self.file_id, self.file_ast_id) == (other.file_id, other.file_ast_id)\n-    }\n-}\n-impl<N: AstNode> Eq for AstId<N> {}\n-impl<N: AstNode> Hash for AstId<N> {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        (self.file_id, self.file_ast_id).hash(hasher);\n-    }\n-}\n+pub type AstId<N> = InFile<FileAstId<N>>;\n \n impl<N: AstNode> AstId<N> {\n-    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n-        AstId { file_id, file_ast_id }\n-    }\n-\n-    pub fn file_id(&self) -> HirFileId {\n-        self.file_id\n-    }\n-\n     pub fn to_node(&self, db: &dyn db::AstDatabase) -> N {\n         let root = db.parse_or_expand(self.file_id).unwrap();\n-        db.ast_id_map(self.file_id).get(self.file_ast_id).to_node(&root)\n+        db.ast_id_map(self.file_id).get(self.value).to_node(&root)\n     }\n }\n "}]}