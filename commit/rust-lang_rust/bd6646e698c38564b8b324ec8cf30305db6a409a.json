{"sha": "bd6646e698c38564b8b324ec8cf30305db6a409a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNjY0NmU2OThjMzg1NjRiOGIzMjRlYzhjZjMwMzA1ZGI2YTQwOWE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T09:20:58Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T09:20:58Z"}, "message": "Make last-use pass properly handle closed-over variables\n\nCloses #1399", "tree": {"sha": "6fb4068a45ed012ae42f8dc75d8d95e7115136f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb4068a45ed012ae42f8dc75d8d95e7115136f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6646e698c38564b8b324ec8cf30305db6a409a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6646e698c38564b8b324ec8cf30305db6a409a", "html_url": "https://github.com/rust-lang/rust/commit/bd6646e698c38564b8b324ec8cf30305db6a409a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6646e698c38564b8b324ec8cf30305db6a409a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c125d8829f38eadd62f4feef9b4f6b55b6aed7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c125d8829f38eadd62f4feef9b4f6b55b6aed7d", "html_url": "https://github.com/rust-lang/rust/commit/1c125d8829f38eadd62f4feef9b4f6b55b6aed7d"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "4d1c26ddbbc96ae6fc17600cc5dd789d3c8a68f0", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd6646e698c38564b8b324ec8cf30305db6a409a/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6646e698c38564b8b324ec8cf30305db6a409a/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=bd6646e698c38564b8b324ec8cf30305db6a409a", "patch": "@@ -63,6 +63,13 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n     ret mini_table;\n }\n \n+fn is_block(cx: ctx, id: node_id) -> bool {\n+    alt ty::struct(cx.tcx, ty::node_id_to_monotype(cx.tcx, id)) {\n+      ty::ty_fn({proto: proto_block., _}) { true }\n+      _ { false }\n+    }\n+}\n+\n fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n     alt ex.node {\n       expr_ret(oexpr) {\n@@ -135,9 +142,8 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         let arg_ts = ty::ty_fn_args(cx.tcx, ty::expr_ty(cx.tcx, f));\n         for arg in args {\n             alt arg.node {\n-              //NDM--register captured as uses\n-              expr_fn(_, _, _, captured) { fns += [arg]; }\n-              expr_fn_block(_, _) { fns += [arg]; }\n+              expr_fn(proto_block., _, _, _) { fns += [arg]; }\n+              expr_fn_block(_, _) when is_block(cx, arg.id) { fns += [arg]; }\n               _ {\n                 alt arg_ts[i].mode {\n                   by_mut_ref. { clear_if_path(cx, arg, v, false); }\n@@ -163,6 +169,15 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n             visit::visit_fn(fk, decl, body, sp, id, cx, v);\n         });\n     } else {\n+        alt cx.tcx.freevars.find(id) {\n+          some(vars) {\n+            for v in *vars {\n+                clear_in_current(cx, ast_util::def_id_of_def(v.def).node,\n+                                 false);\n+            }\n+          }\n+          _ {}\n+        }\n         let old = nil;\n         cx.blocks <-> old;\n         visit::visit_fn(fk, decl, body, sp, id, cx, v);"}, {"sha": "1399839a1ed04806789748c36600af257ce2ee9c", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd6646e698c38564b8b324ec8cf30305db6a409a/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6646e698c38564b8b324ec8cf30305db6a409a/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=bd6646e698c38564b8b324ec8cf30305db6a409a", "patch": "@@ -0,0 +1,8 @@\n+// Make sure #1399 stays fixed\n+\n+fn main() {\n+    fn invoke(f: lambda()) { f(); }\n+    let k = ~22;\n+    let _u = {a: k};\n+    invoke {||log(error, k);}\n+}"}]}