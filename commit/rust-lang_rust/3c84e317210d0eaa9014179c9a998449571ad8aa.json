{"sha": "3c84e317210d0eaa9014179c9a998449571ad8aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjODRlMzE3MjEwZDBlYWE5MDE0MTc5YzlhOTk4NDQ5NTcxYWQ4YWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-03T22:36:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-03T22:41:01Z"}, "message": "Use a struct rather than a 4-tuple", "tree": {"sha": "b714f0d62fbf15b6d1c69d0445e77b2f5e096d4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b714f0d62fbf15b6d1c69d0445e77b2f5e096d4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c84e317210d0eaa9014179c9a998449571ad8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c84e317210d0eaa9014179c9a998449571ad8aa", "html_url": "https://github.com/rust-lang/rust/commit/3c84e317210d0eaa9014179c9a998449571ad8aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c84e317210d0eaa9014179c9a998449571ad8aa/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9d0ccc2fe4d81c0ff2ecf8d42c59413e24fa38", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9d0ccc2fe4d81c0ff2ecf8d42c59413e24fa38", "html_url": "https://github.com/rust-lang/rust/commit/fb9d0ccc2fe4d81c0ff2ecf8d42c59413e24fa38"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "a7120080eed3b69f476c22c4345be2de9df256b8", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3c84e317210d0eaa9014179c9a998449571ad8aa/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84e317210d0eaa9014179c9a998449571ad8aa/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=3c84e317210d0eaa9014179c9a998449571ad8aa", "patch": "@@ -282,6 +282,17 @@ pub struct VecPerParamSpace<T> {\n     content: Vec<T>,\n }\n \n+/**\n+ * The `split` function converts one `VecPerParamSpace` into this\n+ * `SeparateVecsPerParamSpace` structure.\n+ */\n+pub struct SeparateVecsPerParamSpace<T> {\n+    pub types: Vec<T>,\n+    pub selfs: Vec<T>,\n+    pub assocs: Vec<T>,\n+    pub fns: Vec<T>,\n+}\n+\n impl<T:fmt::Show> fmt::Show for VecPerParamSpace<T> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(fmt, \"VecPerParamSpace {{\"));\n@@ -464,24 +475,30 @@ impl<T> VecPerParamSpace<T> {\n     }\n \n     pub fn map_move<U>(self, pred: |T| -> U) -> VecPerParamSpace<U> {\n-        let (t, s, a, f) = self.split();\n+        let SeparateVecsPerParamSpace {\n+            types: t,\n+            selfs: s,\n+            assocs: a,\n+            fns: f\n+        } = self.split();\n+\n         VecPerParamSpace::new(t.into_iter().map(|p| pred(p)).collect(),\n                               s.into_iter().map(|p| pred(p)).collect(),\n                               a.into_iter().map(|p| pred(p)).collect(),\n                               f.into_iter().map(|p| pred(p)).collect())\n     }\n \n-    pub fn split(self) -> (Vec<T>, Vec<T>, Vec<T>, Vec<T>) {\n+    pub fn split(self) -> SeparateVecsPerParamSpace<T> {\n         let VecPerParamSpace { type_limit, self_limit, assoc_limit, content } = self;\n \n         let mut content_iter = content.into_iter();\n \n-        let types = content_iter.by_ref().take(type_limit).collect();\n-        let selfs = content_iter.by_ref().take(self_limit - type_limit).collect();\n-        let assocs = content_iter.by_ref().take(assoc_limit - self_limit).collect();\n-        let fns = content_iter.collect();\n-\n-        (types, selfs, assocs, fns)\n+        SeparateVecsPerParamSpace {\n+            types: content_iter.by_ref().take(type_limit).collect(),\n+            selfs: content_iter.by_ref().take(self_limit - type_limit).collect(),\n+            assocs: content_iter.by_ref().take(assoc_limit - self_limit).collect(),\n+            fns: content_iter.collect()\n+        }\n     }\n \n     pub fn with_vec(mut self, space: ParamSpace, vec: Vec<T>)"}, {"sha": "fbd4db959ce0cbbca74fb3b3f7e15ce841d3002c", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c84e317210d0eaa9014179c9a998449571ad8aa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c84e317210d0eaa9014179c9a998449571ad8aa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3c84e317210d0eaa9014179c9a998449571ad8aa", "patch": "@@ -205,7 +205,12 @@ pub fn trans_static_method_callee(bcx: Block,\n     // type parameters that belong to the trait but also some that\n     // belong to the method:\n     let rcvr_substs = node_id_substs(bcx, ExprId(expr_id));\n-    let (rcvr_type, rcvr_self, rcvr_assoc, rcvr_method) = rcvr_substs.types.split();\n+    let subst::SeparateVecsPerParamSpace {\n+        types: rcvr_type,\n+        selfs: rcvr_self,\n+        assocs: rcvr_assoc,\n+        fns: rcvr_method\n+    } = rcvr_substs.types.split();\n \n     // Lookup the precise impl being called. To do that, we need to\n     // create a trait reference identifying the self type and other\n@@ -266,7 +271,12 @@ pub fn trans_static_method_callee(bcx: Block,\n             // that with the `rcvr_method` from before, which tells us\n             // the type parameters from the *method*, to yield\n             // `callee_substs=[[T=int],[],[U=String]]`.\n-            let (impl_type, impl_self, impl_assoc, _) = impl_substs.types.split();\n+            let subst::SeparateVecsPerParamSpace {\n+                types: impl_type,\n+                selfs: impl_self,\n+                assocs: impl_assoc,\n+                fns: _\n+            } = impl_substs.types.split();\n             let callee_substs =\n                 Substs::erased(VecPerParamSpace::new(impl_type,\n                                                      impl_self,\n@@ -399,8 +409,13 @@ fn combine_impl_and_methods_tps(bcx: Block,\n \n     // Break apart the type parameters from the node and type\n     // parameters from the receiver.\n-    let (_, _, _, node_method) = node_substs.types.split();\n-    let (rcvr_type, rcvr_self, rcvr_assoc, rcvr_method) = rcvr_substs.types.clone().split();\n+    let node_method = node_substs.types.split().fns;\n+    let subst::SeparateVecsPerParamSpace {\n+        types: rcvr_type,\n+        selfs: rcvr_self,\n+        assocs: rcvr_assoc,\n+        fns: rcvr_method\n+    } = rcvr_substs.types.clone().split();\n     assert!(rcvr_method.is_empty());\n     subst::Substs {\n         regions: subst::ErasedRegions,"}]}