{"sha": "81f511cc2b70a539357f39ba0dfd223224fe5d88", "node_id": "C_kwDOAAsO6NoAKDgxZjUxMWNjMmI3MGE1MzkzNTdmMzliYTBkZmQyMjMyMjRmZTVkODg", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-05-29T02:17:28Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-07T15:16:55Z"}, "message": "Move beta rustfmt downloads to rustbuild", "tree": {"sha": "7010146aae837fab47951d94bf3da9741e676db3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7010146aae837fab47951d94bf3da9741e676db3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f511cc2b70a539357f39ba0dfd223224fe5d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f511cc2b70a539357f39ba0dfd223224fe5d88", "html_url": "https://github.com/rust-lang/rust/commit/81f511cc2b70a539357f39ba0dfd223224fe5d88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f511cc2b70a539357f39ba0dfd223224fe5d88/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd6409ddef6ae0be42e91c8c36ddbce984311773", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6409ddef6ae0be42e91c8c36ddbce984311773", "html_url": "https://github.com/rust-lang/rust/commit/bd6409ddef6ae0be42e91c8c36ddbce984311773"}], "stats": {"total": 248, "additions": 153, "deletions": 95}, "files": [{"sha": "635e4f3703b1c52b761b31783efab4b4e1f189f2", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 21, "deletions": 63, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=81f511cc2b70a539357f39ba0dfd223224fe5d88", "patch": "@@ -63,31 +63,30 @@ def support_xz():\n     except tarfile.CompressionError:\n         return False\n \n-def get(base, url, path, checksums, verbose=False, do_verify=True):\n+def get(base, url, path, checksums, verbose=False):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n \n     try:\n-        if do_verify:\n-            if url not in checksums:\n-                raise RuntimeError((\"src/stage0.json doesn't contain a checksum for {}. \"\n-                                    \"Pre-built artifacts might not available for this \"\n-                                    \"target at this time, see https://doc.rust-lang.org/nightly\"\n-                                    \"/rustc/platform-support.html for more information.\")\n-                                   .format(url))\n-            sha256 = checksums[url]\n-            if os.path.exists(path):\n-                if verify(path, sha256, False):\n-                    if verbose:\n-                        print(\"using already-download file\", path)\n-                    return\n-                else:\n-                    if verbose:\n-                        print(\"ignoring already-download file\",\n-                            path, \"due to failed verification\")\n-                    os.unlink(path)\n+        if url not in checksums:\n+            raise RuntimeError((\"src/stage0.json doesn't contain a checksum for {}. \"\n+                                \"Pre-built artifacts might not be available for this \"\n+                                \"target at this time, see https://doc.rust-lang.org/nightly\"\n+                                \"/rustc/platform-support.html for more information.\")\n+                                .format(url))\n+        sha256 = checksums[url]\n+        if os.path.exists(path):\n+            if verify(path, sha256, False):\n+                if verbose:\n+                    print(\"using already-download file\", path)\n+                return\n+            else:\n+                if verbose:\n+                    print(\"ignoring already-download file\",\n+                        path, \"due to failed verification\")\n+                os.unlink(path)\n         download(temp_path, \"{}/{}\".format(base, url), True, verbose)\n-        if do_verify and not verify(temp_path, sha256, verbose):\n+        if not verify(temp_path, sha256, verbose):\n             raise RuntimeError(\"failed verification\")\n         if verbose:\n             print(\"moving {} to {}\".format(temp_path, path))\n@@ -430,7 +429,6 @@ class RustBuild(object):\n     def __init__(self):\n         self.checksums_sha256 = {}\n         self.stage0_compiler = None\n-        self.stage0_rustfmt = None\n         self._download_url = ''\n         self.build = ''\n         self.build_dir = ''\n@@ -484,31 +482,10 @@ def download_toolchain(self):\n             with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(key)\n \n-        if self.rustfmt() and self.rustfmt().startswith(bin_root) and (\n-            not os.path.exists(self.rustfmt())\n-            or self.program_out_of_date(\n-                self.rustfmt_stamp(),\n-                \"\" if self.stage0_rustfmt is None else self.stage0_rustfmt.channel()\n-            )\n-        ):\n-            if self.stage0_rustfmt is not None:\n-                tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n-                filename = \"rustfmt-{}-{}{}\".format(\n-                    self.stage0_rustfmt.version, self.build, tarball_suffix,\n-                )\n-                self._download_component_helper(\n-                    filename, \"rustfmt-preview\", tarball_suffix, key=self.stage0_rustfmt.date\n-                )\n-                self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(bin_root))\n-                self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(bin_root))\n-                with output(self.rustfmt_stamp()) as rustfmt_stamp:\n-                    rustfmt_stamp.write(self.stage0_rustfmt.channel())\n-\n     def _download_component_helper(\n-        self, filename, pattern, tarball_suffix, key=None\n+        self, filename, pattern, tarball_suffix,\n     ):\n-        if key is None:\n-            key = self.stage0_compiler.date\n+        key = self.stage0_compiler.date\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, key)\n         if not os.path.exists(rustc_cache):\n@@ -524,7 +501,6 @@ def _download_component_helper(\n                 tarball,\n                 self.checksums_sha256,\n                 verbose=self.verbose,\n-                do_verify=True,\n             )\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n@@ -634,16 +610,6 @@ def rustc_stamp(self):\n         \"\"\"\n         return os.path.join(self.bin_root(), '.rustc-stamp')\n \n-    def rustfmt_stamp(self):\n-        \"\"\"Return the path for .rustfmt-stamp\n-\n-        >>> rb = RustBuild()\n-        >>> rb.build_dir = \"build\"\n-        >>> rb.rustfmt_stamp() == os.path.join(\"build\", \"stage0\", \".rustfmt-stamp\")\n-        True\n-        \"\"\"\n-        return os.path.join(self.bin_root(), '.rustfmt-stamp')\n-\n     def program_out_of_date(self, stamp_path, key):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n         if not os.path.exists(stamp_path) or self.clean:\n@@ -717,12 +683,6 @@ def rustc(self):\n         \"\"\"Return config path for rustc\"\"\"\n         return self.program_config('rustc')\n \n-    def rustfmt(self):\n-        \"\"\"Return config path for rustfmt\"\"\"\n-        if self.stage0_rustfmt is None:\n-            return None\n-        return self.program_config('rustfmt')\n-\n     def program_config(self, program):\n         \"\"\"Return config path for the given program at the given stage\n \n@@ -1082,8 +1042,6 @@ def bootstrap(help_triggered):\n         data = json.load(f)\n     build.checksums_sha256 = data[\"checksums_sha256\"]\n     build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n-    if data.get(\"rustfmt\") is not None:\n-        build.stage0_rustfmt = Stage0Toolchain(data[\"rustfmt\"])\n \n     build.set_dist_environment(data[\"dist_server\"])\n "}, {"sha": "47551c5082e4bbecd43a798dbdcfe2e5b80e0d85", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=81f511cc2b70a539357f39ba0dfd223224fe5d88", "patch": "@@ -728,7 +728,8 @@ impl<'a> Builder<'a> {\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Run { ref paths } => (Kind::Run, &paths[..]),\n-            Subcommand::Format { .. } | Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n+            Subcommand::Format { .. } => (Kind::Format, &[][..]),\n+            Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n                 panic!()\n             }\n         };\n@@ -1192,6 +1193,10 @@ impl<'a> Builder<'a> {\n         Config::download_rustc(self)\n     }\n \n+    pub(crate) fn initial_rustfmt(&self) -> Option<PathBuf> {\n+        Config::initial_rustfmt(self)\n+    }\n+\n     /// Prepares an invocation of `cargo` to be run.\n     ///\n     /// This will create a `Command` that represents a pending execution of"}, {"sha": "1beb198340711a08189ece187e4eb590aab3b809", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 116, "deletions": 17, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=81f511cc2b70a539357f39ba0dfd223224fe5d88", "patch": "@@ -3,7 +3,7 @@\n //! This module implements parsing `config.toml` configuration files to tweak\n //! how the build runs.\n \n-use std::cell::Cell;\n+use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::collections::{HashMap, HashSet};\n use std::env;\n@@ -204,10 +204,27 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n-    pub initial_rustfmt: Option<PathBuf>,\n+    #[cfg(not(test))]\n+    initial_rustfmt: RefCell<RustfmtState>,\n+    #[cfg(test)]\n+    pub initial_rustfmt: RefCell<RustfmtState>,\n     pub out: PathBuf,\n }\n \n+#[derive(Clone, Debug)]\n+pub enum RustfmtState {\n+    SystemToolchain(PathBuf),\n+    Downloaded(PathBuf),\n+    Unavailable,\n+    LazyEvaluated,\n+}\n+\n+impl Default for RustfmtState {\n+    fn default() -> Self {\n+        RustfmtState::LazyEvaluated\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum LlvmLibunwind {\n     No,\n@@ -1151,13 +1168,22 @@ impl Config {\n             set(&mut config.missing_tools, t.missing_tools);\n         }\n \n-        config.initial_rustfmt = build.rustfmt.or_else(|| {\n-            // Cargo does not provide a RUSTFMT environment variable, so we\n-            // synthesize it manually.\n-            let rustfmt = config.initial_rustc.with_file_name(exe(\"rustfmt\", config.build));\n-\n-            if rustfmt.exists() { Some(rustfmt) } else { None }\n-        });\n+        if let Some(r) = build.rustfmt {\n+            *config.initial_rustfmt.borrow_mut() = if r.exists() {\n+                RustfmtState::SystemToolchain(r)\n+            } else {\n+                RustfmtState::Unavailable\n+            };\n+        } else {\n+            // If using a system toolchain for bootstrapping, see if that has rustfmt available.\n+            let host = config.build;\n+            let rustfmt_path = config.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n+            let bin_root = config.out.join(host.triple).join(\"stage0\");\n+            if !rustfmt_path.starts_with(&bin_root) {\n+                // Using a system-provided toolchain; we shouldn't download rustfmt.\n+                *config.initial_rustfmt.borrow_mut() = RustfmtState::SystemToolchain(rustfmt_path);\n+            }\n+        }\n \n         // Now that we've reached the end of our configuration, infer the\n         // default values for all options that we haven't otherwise stored yet.\n@@ -1327,6 +1353,25 @@ impl Config {\n         })\n     }\n \n+    pub(crate) fn initial_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n+        match &mut *builder.config.initial_rustfmt.borrow_mut() {\n+            RustfmtState::SystemToolchain(p) | RustfmtState::Downloaded(p) => Some(p.clone()),\n+            RustfmtState::Unavailable => None,\n+            r @ RustfmtState::LazyEvaluated => {\n+                if builder.config.dry_run {\n+                    return Some(PathBuf::new());\n+                }\n+                let path = maybe_download_rustfmt(builder);\n+                *r = if let Some(p) = &path {\n+                    RustfmtState::Downloaded(p.clone())\n+                } else {\n+                    RustfmtState::Unavailable\n+                };\n+                path\n+            }\n+        }\n+    }\n+\n     pub fn verbose(&self) -> bool {\n         self.verbose > 0\n     }\n@@ -1437,6 +1482,44 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n     Some(commit.to_string())\n }\n \n+fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n+    #[derive(Deserialize)]\n+    struct Stage0Metadata {\n+        dist_server: String,\n+        rustfmt: Option<RustfmtMetadata>,\n+    }\n+    #[derive(Deserialize)]\n+    struct RustfmtMetadata {\n+        date: String,\n+        version: String,\n+    }\n+\n+    let stage0_json = builder.read(&builder.src.join(\"src\").join(\"stage0.json\"));\n+    let metadata = t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n+    let RustfmtMetadata { date, version } = metadata.rustfmt?;\n+    let channel = format!(\"{version}-{date}\");\n+    let mut dist_server = env::var(\"RUSTUP_DIST_SERVER\").unwrap_or(metadata.dist_server);\n+    dist_server.push_str(\"/dist\");\n+\n+    let host = builder.config.build;\n+    let rustfmt_path = builder.config.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n+    let bin_root = builder.config.out.join(host.triple).join(\"stage0\");\n+    let rustfmt_stamp = bin_root.join(\".rustfmt-stamp\");\n+    if rustfmt_path.exists() && !program_out_of_date(&rustfmt_stamp, &channel) {\n+        return Some(rustfmt_path);\n+    }\n+\n+    let filename = format!(\"rustfmt-{version}-{build}.tar.xz\", build = host.triple);\n+    download_component(builder, &dist_server, filename, \"rustfmt-preview\", &date, \"stage0\");\n+    assert!(rustfmt_path.exists());\n+\n+    builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n+    builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n+\n+    builder.create(&rustfmt_stamp, &channel);\n+    Some(rustfmt_path)\n+}\n+\n fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n     builder.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n     // FIXME: support downloading artifacts from the beta channel\n@@ -1474,18 +1557,34 @@ fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n /// Download a single component of a CI-built toolchain (not necessarily a published nightly).\n // NOTE: intentionally takes an owned string to avoid downloading multiple times by accident\n fn download_ci_component(builder: &Builder<'_>, filename: String, prefix: &str, commit: &str) {\n+    download_component(\n+        builder,\n+        \"https://ci-artifacts.rust-lang.org/rustc-builds\",\n+        filename,\n+        prefix,\n+        commit,\n+        \"ci-rustc\",\n+    )\n+}\n+\n+fn download_component(\n+    builder: &Builder<'_>,\n+    base_url: &str,\n+    filename: String,\n+    prefix: &str,\n+    key: &str,\n+    destination: &str,\n+) {\n     let cache_dst = builder.out.join(\"cache\");\n-    let rustc_cache = cache_dst.join(commit);\n-    if !rustc_cache.exists() {\n-        t!(fs::create_dir_all(&rustc_cache));\n+    let cache_dir = cache_dst.join(key);\n+    if !cache_dir.exists() {\n+        t!(fs::create_dir_all(&cache_dir));\n     }\n \n-    let base = \"https://ci-artifacts.rust-lang.org\";\n-    let url = format!(\"rustc-builds/{commit}\");\n-    let tarball = rustc_cache.join(&filename);\n+    let tarball = cache_dir.join(&filename);\n     if !tarball.exists() {\n-        builder.download_component(base, &format!(\"{url}/{filename}\"), &tarball, \"\");\n+        builder.download_component(base_url, &format!(\"{key}/{filename}\"), &tarball, \"\");\n     }\n-    let bin_root = builder.out.join(builder.config.build.triple).join(\"ci-rustc\");\n+    let bin_root = builder.out.join(builder.config.build.triple).join(destination);\n     builder.unpack(&tarball, &bin_root, prefix)\n }"}, {"sha": "60a53c28686b0b06cc2eb16646d6dc94b449965f", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=81f511cc2b70a539357f39ba0dfd223224fe5d88", "patch": "@@ -1,7 +1,7 @@\n //! Runs rustfmt on the repository.\n \n+use crate::builder::Builder;\n use crate::util::{output, t};\n-use crate::Build;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -42,7 +42,7 @@ struct RustfmtConfig {\n     ignore: Vec<String>,\n }\n \n-pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n+pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     if build.config.dry_run {\n         return;\n     }\n@@ -112,15 +112,11 @@ pub fn format(build: &Build, check: bool, paths: &[PathBuf]) {\n     }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n \n-    let rustfmt_path = build\n-        .config\n-        .initial_rustfmt\n-        .as_ref()\n-        .unwrap_or_else(|| {\n-            eprintln!(\"./x.py fmt is not supported on this channel\");\n-            std::process::exit(1);\n-        })\n-        .to_path_buf();\n+    let rustfmt_path = build.initial_rustfmt().unwrap_or_else(|| {\n+        eprintln!(\"./x.py fmt is not supported on this channel\");\n+        std::process::exit(1);\n+    });\n+    assert!(rustfmt_path.exists(), \"{}\", rustfmt_path.display());\n     let src = build.src.clone();\n     let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n     let walker = match paths.get(0) {"}, {"sha": "4974a1c5b7b452d7daeb019b33f7e163d57cc13a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=81f511cc2b70a539357f39ba0dfd223224fe5d88", "patch": "@@ -661,7 +661,7 @@ impl Build {\n         self.maybe_update_submodules();\n \n         if let Subcommand::Format { check, paths } = &self.config.cmd {\n-            return format::format(self, *check, &paths);\n+            return format::format(&builder::Builder::new(&self), *check, &paths);\n         }\n \n         if let Subcommand::Clean { all } = self.config.cmd {"}, {"sha": "fdce078bbedf5cd6741fa6bc31d9e5f668fb168e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f511cc2b70a539357f39ba0dfd223224fe5d88/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=81f511cc2b70a539357f39ba0dfd223224fe5d88", "patch": "@@ -1010,7 +1010,7 @@ impl Step for Tidy {\n \n         if builder.config.channel == \"dev\" || builder.config.channel == \"nightly\" {\n             builder.info(\"fmt check\");\n-            if builder.config.initial_rustfmt.is_none() {\n+            if builder.initial_rustfmt().is_none() {\n                 let inferred_rustfmt_dir = builder.config.initial_rustc.parent().unwrap();\n                 eprintln!(\n                     \"\\\n@@ -1023,7 +1023,7 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n                 );\n                 std::process::exit(1);\n             }\n-            crate::format::format(&builder.build, !builder.config.cmd.bless(), &[]);\n+            crate::format::format(&builder, !builder.config.cmd.bless(), &[]);\n         }\n     }\n "}]}