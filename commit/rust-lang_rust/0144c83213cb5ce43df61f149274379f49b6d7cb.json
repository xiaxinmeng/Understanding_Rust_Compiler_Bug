{"sha": "0144c83213cb5ce43df61f149274379f49b6d7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDRjODMyMTNjYjVjZTQzZGY2MWYxNDkyNzQzNzlmNDliNmQ3Y2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-27T19:05:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-30T21:23:44Z"}, "message": "std::rt: Change Thread interface to require an explicit join\n\nMakes it more obvious what's going on", "tree": {"sha": "aa4a8117325521e49c07bb1e5a679bad6f9827db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa4a8117325521e49c07bb1e5a679bad6f9827db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0144c83213cb5ce43df61f149274379f49b6d7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0144c83213cb5ce43df61f149274379f49b6d7cb", "html_url": "https://github.com/rust-lang/rust/commit/0144c83213cb5ce43df61f149274379f49b6d7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0144c83213cb5ce43df61f149274379f49b6d7cb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7265cc6530b242f9590a3207f2bfdf9a5425a32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7265cc6530b242f9590a3207f2bfdf9a5425a32c", "html_url": "https://github.com/rust-lang/rust/commit/7265cc6530b242f9590a3207f2bfdf9a5425a32c"}], "stats": {"total": 114, "additions": 69, "deletions": 45}, "files": [{"sha": "5bc520b8a5feb44f3d1ab91e6c7cd62a228c8dc6", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -674,10 +674,11 @@ mod test {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n                 let port_cell = Cell::new(port);\n-                let _thread = do spawntask_thread {\n+                let thread = do spawntask_thread {\n                     let _p = port_cell.take();\n                 };\n                 let _chan = chan;\n+                thread.join();\n             }\n         }\n     }\n@@ -689,13 +690,15 @@ mod test {\n                 let (port, chan) = oneshot::<int>();\n                 let chan_cell = Cell::new(chan);\n                 let port_cell = Cell::new(port);\n-                let _thread1 = do spawntask_thread {\n+                let thread1 = do spawntask_thread {\n                     let _p = port_cell.take();\n                 };\n-                let _thread2 = do spawntask_thread {\n+                let thread2 = do spawntask_thread {\n                     let c = chan_cell.take();\n                     c.send(1);\n                 };\n+                thread1.join();\n+                thread2.join();\n             }\n         }\n     }\n@@ -707,19 +710,21 @@ mod test {\n                 let (port, chan) = oneshot::<int>();\n                 let chan_cell = Cell::new(chan);\n                 let port_cell = Cell::new(port);\n-                let _thread1 = do spawntask_thread {\n+                let thread1 = do spawntask_thread {\n                     let port_cell = Cell::new(port_cell.take());\n                     let res = do spawntask_try {\n                         port_cell.take().recv();\n                     };\n                     assert!(res.is_err());\n                 };\n-                let _thread2 = do spawntask_thread {\n+                let thread2 = do spawntask_thread {\n                     let chan_cell = Cell::new(chan_cell.take());\n                     do spawntask {\n                         chan_cell.take();\n                     }\n                 };\n+                thread1.join();\n+                thread2.join();\n             }\n         }\n     }\n@@ -731,12 +736,14 @@ mod test {\n                 let (port, chan) = oneshot::<~int>();\n                 let chan_cell = Cell::new(chan);\n                 let port_cell = Cell::new(port);\n-                let _thread1 = do spawntask_thread {\n+                let thread1 = do spawntask_thread {\n                     chan_cell.take().send(~10);\n                 };\n-                let _thread2 = do spawntask_thread {\n+                let thread2 = do spawntask_thread {\n                     assert!(port_cell.take().recv() == ~10);\n                 };\n+                thread1.join();\n+                thread2.join();\n             }\n         }\n     }"}, {"sha": "e9e4b655dd7e684ae6fc5befb4953f869acd2e4d", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -343,7 +343,9 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     }\n \n     // Wait for schedulers\n-    { let _threads = threads; }\n+    for threads.consume_iter().advance() |thread| {\n+        thread.join();\n+    }\n \n     // Return the exit code\n     unsafe {"}, {"sha": "98df38f9b1dc59a1793f62fe21e4ff8ae76163d3", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -901,10 +901,8 @@ mod test {\n                 sched.run();\n             };\n \n-            // wait for the end\n-            let _thread1 = normal_thread;\n-            let _thread2 = special_thread;\n-\n+            normal_thread.join();\n+            special_thread.join();\n         }\n     }\n \n@@ -1074,16 +1072,19 @@ mod test {\n             sched2.enqueue_task(task2);\n \n             let sched1_cell = Cell::new(sched1);\n-            let _thread1 = do Thread::start {\n+            let thread1 = do Thread::start {\n                 let sched1 = sched1_cell.take();\n                 sched1.run();\n             };\n \n             let sched2_cell = Cell::new(sched2);\n-            let _thread2 = do Thread::start {\n+            let thread2 = do Thread::start {\n                 let sched2 = sched2_cell.take();\n                 sched2.run();\n             };\n+\n+            thread1.join();\n+            thread2.join();\n         }\n     }\n "}, {"sha": "260903cbcbfb4703a9dde3d8099460ee17f2e04b", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -125,7 +125,9 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         }\n \n         // Wait for schedulers\n-        let _threads = threads;\n+        for threads.consume_iter().advance() |thread| {\n+            thread.join();\n+        }\n     }\n \n }"}, {"sha": "ed0137d3b0ff52132172c335b03b02a2b47ee65f", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -16,7 +16,8 @@ type raw_thread = libc::c_void;\n \n pub struct Thread {\n     main: ~fn(),\n-    raw_thread: *raw_thread\n+    raw_thread: *raw_thread,\n+    joined: bool\n }\n \n impl Thread {\n@@ -27,18 +28,28 @@ impl Thread {\n         let raw = substart(&main);\n         Thread {\n             main: main,\n-            raw_thread: raw\n+            raw_thread: raw,\n+            joined: false\n         }\n     }\n+\n+    pub fn join(self) {\n+        assert!(!self.joined);\n+        let mut this = self;\n+        unsafe { rust_raw_thread_join(this.raw_thread); }\n+        this.joined = true;\n+    }\n }\n \n impl Drop for Thread {\n     fn drop(&self) {\n-        unsafe { rust_raw_thread_join_delete(self.raw_thread) }\n+        assert!(self.joined);\n+        unsafe { rust_raw_thread_delete(self.raw_thread) }\n     }\n }\n \n extern {\n     pub unsafe fn rust_raw_thread_start(f: &(~fn())) -> *raw_thread;\n-    pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n+    pub unsafe fn rust_raw_thread_join(thread: *raw_thread);\n+    pub unsafe fn rust_raw_thread_delete(thread: *raw_thread);\n }"}, {"sha": "d0ca38317cbededd13675b41c17ad764ee7f982b", "filename": "src/libstd/rt/uv/async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fasync.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -94,12 +94,13 @@ mod test {\n             let mut loop_ = Loop::new();\n             let watcher = AsyncWatcher::new(&mut loop_, |w, _| w.close(||()) );\n             let watcher_cell = Cell::new(watcher);\n-            let _thread = do Thread::start {\n+            let thread = do Thread::start {\n                 let mut watcher = watcher_cell.take();\n                 watcher.send();\n             };\n             loop_.run();\n             loop_.close();\n+            thread.join();\n         }\n     }\n }"}, {"sha": "8ea4a197269a8d0e16f9a1d52e553d52a5761076", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -715,7 +715,7 @@ mod test {\n                 }\n             }\n \n-            let _client_thread = do Thread::start {\n+            let client_thread = do Thread::start {\n                 rtdebug!(\"starting client thread\");\n                 let mut loop_ = Loop::new();\n                 let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n@@ -739,6 +739,7 @@ mod test {\n             let mut loop_ = loop_;\n             loop_.run();\n             loop_.close();\n+            client_thread.join();\n         }\n     }\n \n@@ -790,7 +791,7 @@ mod test {\n                 }\n             }\n \n-            let _client_thread = do Thread::start {\n+            let client_thread = do Thread::start {\n                 rtdebug!(\"starting client thread\");\n                 let mut loop_ = Loop::new();\n                 let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n@@ -814,6 +815,7 @@ mod test {\n             let mut loop_ = loop_;\n             loop_.run();\n             loop_.close();\n+            client_thread.join();\n         }\n     }\n \n@@ -855,7 +857,7 @@ mod test {\n                 server.close(||{});\n             }\n \n-            do Thread::start {\n+            let thread = do Thread::start {\n                 let mut loop_ = Loop::new();\n                 let mut client = UdpWatcher::new(&loop_);\n                 assert!(client.bind(client_addr).is_ok());\n@@ -873,6 +875,7 @@ mod test {\n \n             loop_.run();\n             loop_.close();\n+            thread.join();\n         }\n     }\n \n@@ -914,7 +917,7 @@ mod test {\n                 server.close(||{});\n             }\n \n-            do Thread::start {\n+            let thread = do Thread::start {\n                 let mut loop_ = Loop::new();\n                 let mut client = UdpWatcher::new(&loop_);\n                 assert!(client.bind(client_addr).is_ok());\n@@ -932,6 +935,7 @@ mod test {\n \n             loop_.run();\n             loop_.close();\n+            thread.join();\n         }\n     }\n }"}, {"sha": "53ccd20186dfbb4d8ae4599f860ef9342a62881b", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -222,11 +222,12 @@ mod test_remote {\n                 };\n                 remote_cell.put_back(remote);\n             }\n-            let _thread = do Thread::start {\n+            let thread = do Thread::start {\n                 remote_cell.take().fire();\n             };\n \n             assert!(tube.recv() == 1);\n+            thread.join();\n         }\n     }\n }"}, {"sha": "313567d1248ecda8e192529afe043c95c5d09ae4", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -12,7 +12,6 @@\n \n use comm::{GenericChan, GenericPort};\n use comm;\n-use libc;\n use prelude::*;\n use task;\n \n@@ -37,18 +36,16 @@ The executing thread has no access to a task pointer and will be using\n a normal large stack.\n */\n pub fn run_in_bare_thread(f: ~fn()) {\n+    use cell::Cell;\n+    use rt::thread::Thread;\n+\n+    let f_cell = Cell::new(f);\n     let (port, chan) = comm::stream();\n     // FIXME #4525: Unfortunate that this creates an extra scheduler but it's\n-    // necessary since rust_raw_thread_join_delete is blocking\n+    // necessary since rust_raw_thread_join is blocking\n     do task::spawn_sched(task::SingleThreaded) {\n-        unsafe {\n-            let closure: &fn() = || {\n-                f()\n-            };\n-            let thread = rust_raw_thread_start(&closure);\n-            rust_raw_thread_join_delete(thread);\n-            chan.send(());\n-        }\n+        Thread::start(f_cell.take()).join();\n+        chan.send(());\n     }\n     port.recv();\n }\n@@ -70,14 +67,6 @@ fn test_run_in_bare_thread_exchange() {\n     }\n }\n \n-#[allow(non_camel_case_types)] // runtime type\n-pub type raw_thread = libc::c_void;\n-\n-extern {\n-    fn rust_raw_thread_start(f: &(&fn())) -> *raw_thread;\n-    fn rust_raw_thread_join_delete(thread: *raw_thread);\n-}\n-\n \n /// Changes the current working directory to the specified\n /// path while acquiring a global lock, then calls `action`."}, {"sha": "bcf5575cede4a36624e6e99860f48c63b4dde0a0", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -751,9 +751,14 @@ rust_raw_thread_start(fn_env_pair *fn) {\n }\n \n extern \"C\" void\n-rust_raw_thread_join_delete(raw_thread *thread) {\n+rust_raw_thread_join(raw_thread *thread) {\n     assert(thread);\n     thread->join();\n+}\n+\n+extern \"C\" void\n+rust_raw_thread_delete(raw_thread *thread) {\n+    assert(thread);\n     delete thread;\n }\n "}, {"sha": "d6692d378baf42c2fd12fd16f7ebf171994eb129", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/0144c83213cb5ce43df61f149274379f49b6d7cb/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=0144c83213cb5ce43df61f149274379f49b6d7cb", "patch": "@@ -211,7 +211,8 @@ linenoiseHistorySetMaxLen\n linenoiseHistorySave\n linenoiseHistoryLoad\n rust_raw_thread_start\n-rust_raw_thread_join_delete\n+rust_raw_thread_join\n+rust_raw_thread_delete\n rust_get_rt_tls_key\n swap_registers\n rust_readdir"}]}