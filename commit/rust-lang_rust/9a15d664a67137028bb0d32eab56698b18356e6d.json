{"sha": "9a15d664a67137028bb0d32eab56698b18356e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMTVkNjY0YTY3MTM3MDI4YmIwZDMyZWFiNTY2OThiMTgzNTZlNmQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:33:55Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:37:02Z"}, "message": "Omit lifetime intrinsics for function arguments and similar top-level items\n\nFunction arguments are live for the whole function scope, so adding\nlifetime intrinsics around them adds no value. The same is true for drop\nhint allocas and everything else that goes directly through\nlvalue_scratch_datum. So the easiest fix is to emit lifetime intrinsics\nonly for lvalue datums that are created in to_lvalue_datum_in_scope().\n\nThe reduces peak memory usage and LLVM times by about 1-4%, depending on\nthe crate.", "tree": {"sha": "99ed853ae3a1045e95472824e57464ac2868ee34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99ed853ae3a1045e95472824e57464ac2868ee34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a15d664a67137028bb0d32eab56698b18356e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a15d664a67137028bb0d32eab56698b18356e6d", "html_url": "https://github.com/rust-lang/rust/commit/9a15d664a67137028bb0d32eab56698b18356e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a15d664a67137028bb0d32eab56698b18356e6d/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "727a5d543d662231224002c3345f78b0bebf8c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/727a5d543d662231224002c3345f78b0bebf8c6b", "html_url": "https://github.com/rust-lang/rust/commit/727a5d543d662231224002c3345f78b0bebf8c6b"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "a57b5d1bbde26d75fa593c251712e049c1451646", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a15d664a67137028bb0d32eab56698b18356e6d/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a15d664a67137028bb0d32eab56698b18356e6d/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=9a15d664a67137028bb0d32eab56698b18356e6d", "patch": "@@ -304,9 +304,7 @@ pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n     let scratch = alloc_ty(bcx, ty, name);\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n-    call_lifetime_start(bcx, scratch);\n     let bcx = populate(arg, bcx, scratch);\n-    bcx.fcx.schedule_lifetime_end(scope, scratch);\n     bcx.fcx.schedule_drop_mem(scope, scratch, ty, None);\n \n     DatumBlock::new(bcx, Datum::new(scratch, ty, Lvalue::new(\"datum::lvalue_scratch_datum\")))\n@@ -499,7 +497,12 @@ impl<'tcx> Datum<'tcx, Rvalue> {\n             ByValue => {\n                 lvalue_scratch_datum(\n                     bcx, self.ty, name, scope, self,\n-                    |this, bcx, llval| this.store_to(bcx, llval))\n+                    |this, bcx, llval| {\n+                        call_lifetime_start(bcx, llval);\n+                        let bcx = this.store_to(bcx, llval);\n+                        bcx.fcx.schedule_lifetime_end(scope, llval);\n+                        bcx\n+                    })\n             }\n         }\n     }"}]}