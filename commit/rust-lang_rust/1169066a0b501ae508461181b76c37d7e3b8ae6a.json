{"sha": "1169066a0b501ae508461181b76c37d7e3b8ae6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNjkwNjZhMGI1MDFhZTUwODQ2MTE4MWI3NmMzN2Q3ZTNiOGFlNmE=", "commit": {"author": {"name": "Araam Borhanian", "email": "dobbybabee@gmail.com", "date": "2019-01-13T15:19:02Z"}, "committer": {"name": "unknown", "email": "unknown@example.com", "date": "2019-02-01T18:21:19Z"}, "message": "Adding lint for too many lines.", "tree": {"sha": "e67f1db054f9b0d96e10ec27843e0ca0cb62d1d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67f1db054f9b0d96e10ec27843e0ca0cb62d1d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1169066a0b501ae508461181b76c37d7e3b8ae6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1169066a0b501ae508461181b76c37d7e3b8ae6a", "html_url": "https://github.com/rust-lang/rust/commit/1169066a0b501ae508461181b76c37d7e3b8ae6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1169066a0b501ae508461181b76c37d7e3b8ae6a/comments", "author": null, "committer": null, "parents": [{"sha": "5176a5c4b70423ca1fc4dbaa77ada0f40afdb479", "url": "https://api.github.com/repos/rust-lang/rust/commits/5176a5c4b70423ca1fc4dbaa77ada0f40afdb479", "html_url": "https://github.com/rust-lang/rust/commit/5176a5c4b70423ca1fc4dbaa77ada0f40afdb479"}], "stats": {"total": 241, "additions": 228, "deletions": 13}, "files": [{"sha": "2ef2a184746139c26ce6745e14f3c17d58247dd3", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -64,6 +64,7 @@ impl LintPass for AssignOps {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n+    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         match &expr.node {\n             hir::ExprKind::AssignOp(op, lhs, rhs) => {"}, {"sha": "f052ad6e5ac6e9833f5f7f616fc7e8eb66d1d75d", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -177,6 +177,7 @@ fn check_compare(cx: &LateContext<'_, '_>, bit_op: &Expr, cmp_op: BinOpKind, cmp\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_bit_mask(\n     cx: &LateContext<'_, '_>,\n     bit_op: BinOpKind,"}, {"sha": "2602ad45986bcd8970965e9ad1b0d12f76b26c05", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -59,7 +59,7 @@ impl LintPass for EqOp {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n-    #[allow(clippy::similar_names)]\n+    #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(op, ref left, ref right) = e.node {\n             if in_macro(e.span) {"}, {"sha": "9710eba21adedb8cc9ac66a5571dfc93cf128e91", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n+use crate::utils::{iter_input_pats, snippet, span_lint, type_is_unsafe_function};\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n@@ -31,6 +31,22 @@ declare_clippy_lint! {\n     \"functions with too many arguments\"\n }\n \n+/// **What it does:** Checks for functions with a large amount of lines.\n+///\n+/// **Why is this bad?** Functions with a lot of lines are harder to understand\n+/// due to having to look at a larger amount of code to understand what the\n+/// function is doing. Consider splitting the body of the function into\n+/// multiple functions.\n+///\n+/// **Known problems:** None.\n+///\n+/// ```\n+declare_clippy_lint! {\n+    pub TOO_MANY_LINES,\n+    pedantic,\n+    \"functions with too many lines\"\n+}\n+\n /// **What it does:** Checks for public functions that dereferences raw pointer\n /// arguments but are not marked unsafe.\n ///\n@@ -62,17 +78,21 @@ declare_clippy_lint! {\n #[derive(Copy, Clone)]\n pub struct Functions {\n     threshold: u64,\n+    max_lines: u64\n }\n \n impl Functions {\n-    pub fn new(threshold: u64) -> Self {\n-        Self { threshold }\n+    pub fn new(threshold: u64, max_lines: u64) -> Self {\n+        Self {\n+            threshold,\n+            max_lines\n+        }\n     }\n }\n \n impl LintPass for Functions {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(TOO_MANY_ARGUMENTS, NOT_UNSAFE_PTR_ARG_DEREF)\n+        lint_array!(TOO_MANY_ARGUMENTS, TOO_MANY_LINES, NOT_UNSAFE_PTR_ARG_DEREF)\n     }\n \n     fn name(&self) -> &'static str {\n@@ -123,6 +143,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         }\n \n         self.check_raw_ptr(cx, unsafety, decl, body, nodeid);\n+        self.check_line_number(cx, span);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n@@ -153,6 +174,54 @@ impl<'a, 'tcx> Functions {\n         }\n     }\n \n+    fn check_line_number(self, cx: &LateContext, span: Span) {\n+        let code_snippet = snippet(cx, span, \"..\");\n+        let mut line_count = 0;\n+        let mut in_comment = false;\n+        for mut line in code_snippet.lines() {\n+            if in_comment {\n+                let end_comment_loc = match line.find(\"*/\") {\n+                    Some(i) => i,\n+                    None => continue\n+                };\n+                in_comment = false;\n+                line = &line[end_comment_loc..];\n+            }\n+            line = line.trim_left();\n+            if line.is_empty() || line.starts_with(\"//\") { continue; }\n+            if line.contains(\"/*\") {\n+                let mut count_line: bool = !line.starts_with(\"/*\");\n+                let close_counts = line.match_indices(\"*/\").count();\n+                let open_counts = line.match_indices(\"/*\").count();\n+\n+                if close_counts > 1 || open_counts > 1 {\n+                    line_count += 1;\n+                } else if close_counts == 1 {\n+                    match line.find(\"*/\") {\n+                        Some(i) => {\n+                            line = line[i..].trim_left();\n+                            if !line.is_empty() && !line.starts_with(\"//\") {\n+                                count_line = true;\n+                            }\n+                        },\n+                        None => continue\n+                    }\n+                } else {\n+                    in_comment = true;\n+                }\n+                if count_line { line_count += 1; }\n+            } else {\n+                // No multipart comment, no single comment, non-empty string.\n+                line_count += 1;\n+            }\n+        }\n+\n+        if line_count > self.max_lines {\n+            span_lint(cx, TOO_MANY_LINES, span,\n+                      \"This function has a large number of lines.\")\n+        }\n+    }\n+\n     fn check_raw_ptr(\n         self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "8e8657c9d028645d0f47e9ee2f1d3ec402f7f215", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -290,6 +290,7 @@ pub fn read_conf(reg: &rustc_plugin::Registry<'_>) -> Conf {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n #[rustfmt::skip]\n pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     let mut store = reg.sess.lint_store.borrow_mut();\n@@ -427,7 +428,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(\n             conf.blacklisted_names.iter().cloned().collect()\n     ));\n-    reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n+    reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold, conf.too_many_lines_threshold));\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents.iter().cloned().collect()));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n@@ -527,6 +528,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         enum_glob_use::ENUM_GLOB_USE,\n         enum_variants::MODULE_NAME_REPETITIONS,\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n+        functions::TOO_MANY_LINES,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,"}, {"sha": "06266257d1e5facc611aa7d4bdc9cd65d3d72eff", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -472,6 +472,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // we don't want to check expanded macros\n         if in_macro(expr.span) {\n@@ -1066,6 +1067,7 @@ fn detect_manual_memcpy<'a, 'tcx>(\n \n /// Check for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n+#[allow(clippy::too_many_lines)]\n fn check_for_loop_range<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,"}, {"sha": "4ce2ae03b9fb92c0c79ad87296b6f737d363b9d8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -1005,6 +1005,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n /// Checks for the `OR_FUN_CALL` lint.\n+#[allow(clippy::too_many_lines)]\n fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     /// Check for `unwrap_or(T::new())` or `unwrap_or(T::default())`.\n     fn check_unwrap_or_default(\n@@ -1151,6 +1152,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n }\n \n /// Checks for the `EXPECT_FUN_CALL` lint.\n+#[allow(clippy::too_many_lines)]\n fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Span, name: &str, args: &[hir::Expr]) {\n     // Strip `&`, `as_ref()` and `as_str()` off `arg` until we're left with either a `String` or\n     // `&str`"}, {"sha": "a8cc5eeec9f2ec08813fc8afcc0d04a5c35a6163", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -73,6 +73,7 @@ macro_rules! need {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n+    #[allow(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "fbf60db28ee4053a7a19c748a0f771911f3b3126", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -158,6 +158,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             );\n         }\n     }\n+    #[allow(clippy::too_many_lines)]\n     fn check_name(&mut self, span: Span, name: Name) {\n         let interned_name = name.as_str();\n         if interned_name.chars().any(char::is_uppercase) {"}, {"sha": "5a54971f49e0e40f25cab81865391d20c8efc08a", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -151,6 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<BodyId>) {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n     let sig = cx.tcx.fn_sig(fn_def_id);"}, {"sha": "5c994d8a2bc9231322e54aec03018ed799fb368b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -80,6 +80,7 @@ impl LintPass for RedundantClone {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n+    #[allow(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,"}, {"sha": "56e1aa4a4e1fdf1bb01d6f19042139bd685f032b", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -226,7 +226,7 @@ impl LintPass for Transmute {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n-    #[allow(clippy::similar_names)]\n+    #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {"}, {"sha": "e81df4af383ba545fc5ddafe04bbdd8bfb0eabe3", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -240,8 +240,9 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n ///\n /// The parameter `is_local` distinguishes the context of the type; types from\n /// local bindings should only be checked for the `BORROWED_BOX` lint.\n-fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n-    if in_macro(hir_ty.span) {\n+#[allow(clippy::too_many_lines)]\n+fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n+    if in_macro(ast_ty.span) {\n         return;\n     }\n     match hir_ty.node {\n@@ -1968,7 +1969,7 @@ impl LintPass for ImplicitHasher {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n-    #[allow(clippy::cast_possible_truncation)]\n+    #[allow(clippy::cast_possible_truncation, clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         use syntax_pos::BytePos;\n "}, {"sha": "5a76b965d2695d52fcb8b6e64025417249e9b937", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -194,6 +194,7 @@ struct PrintVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n+    #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr) {\n         print!(\"    if let ExprKind::\");\n         let current = format!(\"{}.node\", self.current);\n@@ -506,6 +507,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         }\n     }\n \n+    #[allow(clippy::too_many_lines)]\n     fn visit_pat(&mut self, pat: &Pat) {\n         print!(\"    if let PatKind::\");\n         let current = format!(\"{}.node\", self.current);"}, {"sha": "4ab274e598fa2c82d68da58c9efe8354354b9657", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -148,6 +148,8 @@ define_Conf! {\n     (literal_representation_threshold, \"literal_representation_threshold\", 16384 => u64),\n     /// Lint: TRIVIALLY_COPY_PASS_BY_REF. The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference.\n     (trivial_copy_size_limit, \"trivial_copy_size_limit\", None => Option<u64>),\n+    /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n+    (too_many_lines_threshold, \"too_many_lines_threshold\", 101 => u64),\n }\n \n impl Default for Conf {"}, {"sha": "2b0b0e7121fafd801ca4bb91ab9ebb94ef020c93", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n         .hash(&mut self.s);\n     }\n \n-    #[allow(clippy::many_single_char_names)]\n+    #[allow(clippy::many_single_char_names, clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr) {\n         if let Some(e) = constant_simple(self.cx, self.tables, e) {\n             return e.hash(&mut self.s);"}, {"sha": "b41895f3c2bd8603190395e1cea754bde1cd69dc", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -20,6 +20,7 @@ fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }\n \n+#[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     exit("}, {"sha": "ec2ac20684b890e64339272565255153024f9bac", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `third-party`\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `third-party`\n \n error: aborting due to previous error\n "}, {"sha": "5d8baf438df374684fbfe94b0339d81e3bc3a9b6", "filename": "tests/ui/functions_maxlines.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui%2Ffunctions_maxlines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui%2Ffunctions_maxlines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions_maxlines.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -0,0 +1,112 @@\n+#![warn(clippy::all, clippy::pedantic)]\n+\n+// TOO_MANY_LINES\n+fn good_lines() {\n+    /* println!(\"This is good.\"); */\n+    // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* */ // println!(\"This is good.\");\n+    /* println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\"); */\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+    println!(\"This is good.\");\n+}\n+\n+fn bad_lines() {\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+}\n+\n+fn main() {}"}, {"sha": "9e1b2fe568a4e4ab675b29d2af1c662066126caf", "filename": "tests/ui/functions_maxlines.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui%2Ffunctions_maxlines.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui%2Ffunctions_maxlines.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions_maxlines.stderr?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -0,0 +1,16 @@\n+error: This function has a large number of lines.\n+  --> $DIR/functions_maxlines.rs:59:1\n+   |\n+LL | / fn bad_lines() {\n+LL | |     println!(\"This is bad.\");\n+LL | |     println!(\"This is bad.\");\n+LL | |     println!(\"This is bad.\");\n+...  |\n+LL | |     println!(\"This is bad.\");\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::too-many-lines` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a40b80378efc06e8be9a9c55494a216a387946a8", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1169066a0b501ae508461181b76c37d7e3b8ae6a/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=1169066a0b501ae508461181b76c37d7e3b8ae6a", "patch": "@@ -1,6 +1,6 @@\n #![feature(exclusive_range_pattern)]\n #![warn(clippy::all)]\n-#![allow(unused, clippy::redundant_pattern_matching)]\n+#![allow(unused, clippy::redundant_pattern_matching, clippy::too_many_lines)]\n #![warn(clippy::match_same_arms)]\n \n fn dummy() {}"}]}