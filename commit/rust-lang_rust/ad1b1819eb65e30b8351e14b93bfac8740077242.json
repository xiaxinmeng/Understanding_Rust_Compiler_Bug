{"sha": "ad1b1819eb65e30b8351e14b93bfac8740077242", "node_id": "C_kwDOAAsO6NoAKGFkMWIxODE5ZWI2NWUzMGI4MzUxZTE0YjkzYmZhYzg3NDAwNzcyNDI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-23T15:03:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-26T17:00:31Z"}, "message": "Remove resolve_elided_lifetimes.", "tree": {"sha": "eb020cf852ec14d98619e4050a8af734f9eda889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb020cf852ec14d98619e4050a8af734f9eda889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1b1819eb65e30b8351e14b93bfac8740077242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1b1819eb65e30b8351e14b93bfac8740077242", "html_url": "https://github.com/rust-lang/rust/commit/ad1b1819eb65e30b8351e14b93bfac8740077242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1b1819eb65e30b8351e14b93bfac8740077242/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30565e5871ce59e1277879bcd391adf9f544b39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/30565e5871ce59e1277879bcd391adf9f544b39e", "html_url": "https://github.com/rust-lang/rust/commit/30565e5871ce59e1277879bcd391adf9f544b39e"}], "stats": {"total": 59, "additions": 6, "deletions": 53}, "files": [{"sha": "7b751c663d24b8fbdfd9ab3eb436293b647ebf3d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 53, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ad1b1819eb65e30b8351e14b93bfac8740077242/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1b1819eb65e30b8351e14b93bfac8740077242/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ad1b1819eb65e30b8351e14b93bfac8740077242", "patch": "@@ -808,7 +808,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // resolved the same as the `'_` in `&'_ Foo`.\n                         //\n                         // cc #48468\n-                        self.resolve_elided_lifetimes(&[lifetime])\n                     }\n                     LifetimeName::Param(..) | LifetimeName::Static => {\n                         // If the user wrote an explicit name, use that.\n@@ -1082,15 +1081,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         match lifetime_ref.name {\n-            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Infer => {\n-                self.resolve_elided_lifetimes(&[lifetime_ref])\n-            }\n             hir::LifetimeName::Static => self.insert_lifetime(lifetime_ref, Region::Static),\n             hir::LifetimeName::Param(param_def_id, _) => {\n                 self.resolve_lifetime_ref(param_def_id, lifetime_ref)\n             }\n             // If we've already reported an error, just ignore `lifetime_ref`.\n             hir::LifetimeName::Error => {}\n+            // Those will be resolved by typechecking.\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault | hir::LifetimeName::Infer => {}\n         }\n     }\n \n@@ -1737,26 +1735,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             return;\n         }\n \n-        let mut elide_lifetimes = true;\n-        let lifetimes: Vec<_> = generic_args\n-            .args\n-            .iter()\n-            .filter_map(|arg| match arg {\n-                hir::GenericArg::Lifetime(lt) => {\n-                    if !lt.is_elided() {\n-                        elide_lifetimes = false;\n-                    }\n-                    Some(lt)\n-                }\n-                _ => None,\n-            })\n-            .collect();\n-        // We short-circuit here if all are elided in order to pluralize\n-        // possible errors\n-        if elide_lifetimes {\n-            self.resolve_elided_lifetimes(&lifetimes);\n-        } else {\n-            lifetimes.iter().for_each(|lt| self.visit_lifetime(lt));\n+        for arg in generic_args.args {\n+            if let hir::GenericArg::Lifetime(lt) = arg {\n+                self.visit_lifetime(lt);\n+            }\n         }\n \n         // Figure out if this is a type/trait segment,\n@@ -2027,35 +2009,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn resolve_elided_lifetimes(&mut self, lifetime_refs: &[&'tcx hir::Lifetime]) {\n-        debug!(\"resolve_elided_lifetimes(lifetime_refs={:?})\", lifetime_refs);\n-\n-        if lifetime_refs.is_empty() {\n-            return;\n-        }\n-\n-        let mut scope = self.scope;\n-        loop {\n-            match *scope {\n-                // Do not assign any resolution, it will be inferred.\n-                Scope::Body { .. } => return,\n-\n-                Scope::Root | Scope::Elision { .. } => break,\n-\n-                Scope::Binder { s, .. }\n-                | Scope::ObjectLifetimeDefault { s, .. }\n-                | Scope::Supertrait { s, .. }\n-                | Scope::TraitRefBoundary { s, .. } => {\n-                    scope = s;\n-                }\n-            }\n-        }\n-\n-        for lt in lifetime_refs {\n-            self.tcx.sess.delay_span_bug(lt.span, \"Missing lifetime specifier\");\n-        }\n-    }\n-\n     fn resolve_object_lifetime_default(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         debug!(\"resolve_object_lifetime_default(lifetime_ref={:?})\", lifetime_ref);\n         let mut late_depth = 0;"}]}