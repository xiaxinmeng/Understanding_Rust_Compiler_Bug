{"sha": "fc3297ff0574f5c4101e76e34c083c7f599cd956", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzI5N2ZmMDU3NGY1YzQxMDFlNzZlMzRjMDgzYzdmNTk5Y2Q5NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T16:26:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T16:26:08Z"}, "message": "auto merge of #8499 : nickdesaulniers/rust/issue7169, r=graydon\n\nreview? @brson \r\ntests are green", "tree": {"sha": "103242cfbe29e13dce29d6de705d8abecb64e5ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103242cfbe29e13dce29d6de705d8abecb64e5ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc3297ff0574f5c4101e76e34c083c7f599cd956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3297ff0574f5c4101e76e34c083c7f599cd956", "html_url": "https://github.com/rust-lang/rust/commit/fc3297ff0574f5c4101e76e34c083c7f599cd956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc3297ff0574f5c4101e76e34c083c7f599cd956/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435020ecc42c472302dcbcce64abc1a9943b80b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/435020ecc42c472302dcbcce64abc1a9943b80b9", "html_url": "https://github.com/rust-lang/rust/commit/435020ecc42c472302dcbcce64abc1a9943b80b9"}, {"sha": "0932ab336ffd9c53d3a164e0f94fcab2206c3fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0932ab336ffd9c53d3a164e0f94fcab2206c3fee", "html_url": "https://github.com/rust-lang/rust/commit/0932ab336ffd9c53d3a164e0f94fcab2206c3fee"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "89a8d33955d0e50faa1de34d984a19ff4b2aafd9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=fc3297ff0574f5c4101e76e34c083c7f599cd956", "patch": "@@ -65,14 +65,14 @@ pub fn source_name(input: &input) -> @str {\n     }\n }\n \n-pub fn default_configuration(sess: Session, argv0: @str, input: &input) ->\n+pub fn default_configuration(sess: Session) ->\n    ast::CrateConfig {\n-    let (libc, tos) = match sess.targ_cfg.os {\n-        session::os_win32 =>   (@\"msvcrt.dll\", @\"win32\"),\n-        session::os_macos =>   (@\"libc.dylib\", @\"macos\"),\n-        session::os_linux =>   (@\"libc.so.6\",  @\"linux\"),\n-        session::os_android => (@\"libc.so\",    @\"android\"),\n-        session::os_freebsd => (@\"libc.so.7\",  @\"freebsd\")\n+    let tos = match sess.targ_cfg.os {\n+        session::os_win32 =>   @\"win32\",\n+        session::os_macos =>   @\"macos\",\n+        session::os_linux =>   @\"linux\",\n+        session::os_android => @\"android\",\n+        session::os_freebsd => @\"freebsd\"\n     };\n \n     // ARM is bi-endian, however using NDK seems to default\n@@ -92,10 +92,7 @@ pub fn default_configuration(sess: Session, argv0: @str, input: &input) ->\n          mk(@\"target_arch\", arch),\n          mk(@\"target_endian\", end),\n          mk(@\"target_word_size\", wordsz),\n-         mk(@\"target_libc\", libc),\n-         // Build bindings.\n-         mk(@\"build_compiler\", argv0),\n-         mk(@\"build_input\", source_name(input))];\n+    ];\n }\n \n pub fn append_configuration(cfg: &mut ast::CrateConfig, name: @str) {\n@@ -104,11 +101,11 @@ pub fn append_configuration(cfg: &mut ast::CrateConfig, name: @str) {\n     }\n }\n \n-pub fn build_configuration(sess: Session, argv0: @str, input: &input) ->\n+pub fn build_configuration(sess: Session) ->\n    ast::CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items\n-    let default_cfg = default_configuration(sess, argv0, input);\n+    let default_cfg = default_configuration(sess);\n     let mut user_cfg = sess.opts.cfg.clone();\n     // If the user wants a test runner, then add the test cfg\n     if sess.opts.test { append_configuration(&mut user_cfg, @\"test\") }\n@@ -980,7 +977,7 @@ pub fn list_metadata(sess: Session, path: &Path, out: @io::Writer) {\n mod test {\n \n     use driver::driver::{build_configuration, build_session};\n-    use driver::driver::{build_session_options, optgroups, str_input};\n+    use driver::driver::{build_session_options, optgroups};\n \n     use extra::getopts::groups::getopts;\n     use extra::getopts;\n@@ -998,7 +995,7 @@ mod test {\n         let sessopts = build_session_options(\n             @\"rustc\", matches, diagnostic::emit);\n         let sess = build_session(sessopts, diagnostic::emit);\n-        let cfg = build_configuration(sess, @\"whatever\", &str_input(@\"\"));\n+        let cfg = build_configuration(sess);\n         assert!((attr::contains_name(cfg, \"test\")));\n     }\n \n@@ -1016,7 +1013,7 @@ mod test {\n         let sessopts = build_session_options(\n             @\"rustc\", matches, diagnostic::emit);\n         let sess = build_session(sessopts, diagnostic::emit);\n-        let cfg = build_configuration(sess, @\"whatever\", &str_input(@\"\"));\n+        let cfg = build_configuration(sess);\n         let mut test_items = cfg.iter().filter(|m| \"test\" == m.name());\n         assert!(test_items.next().is_some());\n         assert!(test_items.next().is_none());"}, {"sha": "d709e732ab4d87a599cfbda4bcb089d779c2c971", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=fc3297ff0574f5c4101e76e34c083c7f599cd956", "patch": "@@ -252,7 +252,7 @@ pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n     let sess = build_session(sopts, demitter);\n     let odir = getopts::opt_maybe_str(matches, \"out-dir\").map_move(|o| Path(o));\n     let ofile = getopts::opt_maybe_str(matches, \"o\").map_move(|o| Path(o));\n-    let cfg = build_configuration(sess, binary, &input);\n+    let cfg = build_configuration(sess);\n     let pretty = do getopts::opt_default(matches, \"pretty\", \"normal\").map_move |a| {\n         parse_pretty(sess, a)\n     };"}, {"sha": "a8321dd95a1594276dbc35195b0af29cb2f855c4", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=fc3297ff0574f5c4101e76e34c083c7f599cd956", "patch": "@@ -10,8 +10,6 @@\n \n //! AST-parsing helpers\n \n-\n-use rustc::driver::driver::{file_input, str_input};\n use rustc::driver::driver;\n use rustc::driver::session;\n use syntax::ast;\n@@ -29,14 +27,15 @@ pub fn from_str(source: @str) -> @ast::Crate {\n \n pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::Crate {\n     parse::parse_crate_from_file(\n-        file, cfg(sess, file_input((*file).clone())), sess.parse_sess)\n+        file, cfg(sess), sess.parse_sess)\n }\n \n pub fn from_str_sess(sess: session::Session, source: @str) -> @ast::Crate {\n     parse::parse_crate_from_source_str(\n-        @\"-\", source, cfg(sess, str_input(source)), sess.parse_sess)\n+        @\"-\", source, cfg(sess), sess.parse_sess)\n }\n \n-fn cfg(sess: session::Session, input: driver::input) -> ast::CrateConfig {\n-    driver::build_configuration(sess, @\"rustdoc\", &input)\n+fn cfg(sess: session::Session) -> ast::CrateConfig {\n+    driver::build_configuration(sess)\n }\n+"}, {"sha": "10c6832e08714f36cb870c2debdc81b826e3aa80", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=fc3297ff0574f5c4101e76e34c083c7f599cd956", "patch": "@@ -142,7 +142,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     // Stage 1: parse the input and filter it into the program (as necessary)\n     //\n     debug!(\"parsing: %s\", input);\n-    let crate = parse_input(sess, binary, input);\n+    let crate = parse_input(sess, binary);\n     let mut to_run = ~[];       // statements to run (emitted back into code)\n     let new_locals = @mut ~[];  // new locals being defined\n     let mut result = None;      // resultant expression (to print via pp)\n@@ -222,7 +222,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     let test = program.test_code(input, &result, *new_locals);\n     debug!(\"testing with ^^^^^^ %?\", (||{ println(test) })());\n     let dinput = driver::str_input(test.to_managed());\n-    let cfg = driver::build_configuration(sess, binary, &dinput);\n+    let cfg = driver::build_configuration(sess);\n \n     let crate = driver::phase_1_parse_input(sess, cfg.clone(), &dinput);\n     let expanded_crate = driver::phase_2_configure_and_expand(sess, cfg, crate);\n@@ -241,7 +241,7 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     let code = program.code(input, &result);\n     debug!(\"actually running ^^^^^^ %?\", (||{ println(code) })());\n     let input = driver::str_input(code.to_managed());\n-    let cfg = driver::build_configuration(sess, binary, &input);\n+    let cfg = driver::build_configuration(sess);\n     let outputs = driver::build_output_filenames(&input, &None, &None, [], sess);\n     let sess = driver::build_session(options, diagnostic::emit);\n \n@@ -266,11 +266,10 @@ fn run(mut program: ~Program, binary: ~str, lib_search_paths: ~[~str],\n     //\n     return (program, jit::consume_engine());\n \n-    fn parse_input(sess: session::Session, binary: @str,\n-                   input: &str) -> @ast::Crate {\n+    fn parse_input(sess: session::Session, input: &str) -> @ast::Crate {\n         let code = fmt!(\"fn main() {\\n %s \\n}\", input);\n         let input = driver::str_input(code.to_managed());\n-        let cfg = driver::build_configuration(sess, binary, &input);\n+        let cfg = driver::build_configuration(sess);\n         driver::phase_1_parse_input(sess, cfg.clone(), &input)\n     }\n \n@@ -308,7 +307,7 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n         let input = driver::file_input(src_path.clone());\n         let sess = driver::build_session(options, diagnostic::emit);\n         *sess.building_library = true;\n-        let cfg = driver::build_configuration(sess, binary, &input);\n+        let cfg = driver::build_configuration(sess);\n         let outputs = driver::build_output_filenames(\n             &input, &None, &None, [], sess);\n         // If the library already exists and is newer than the source"}, {"sha": "9ef341e439a97e62b9e56953915046433a6dec71", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=fc3297ff0574f5c4101e76e34c083c7f599cd956", "patch": "@@ -108,7 +108,7 @@ impl<'self> PkgScript<'self> {\n         };\n         let input = driver::file_input(script);\n         let sess = driver::build_session(options, diagnostic::emit);\n-        let cfg = driver::build_configuration(sess, binary, &input);\n+        let cfg = driver::build_configuration(sess);\n         let crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n         let crate = driver::phase_2_configure_and_expand(sess, cfg.clone(), crate);\n         let work_dir = build_pkg_id_in_workspace(id, workspace);"}, {"sha": "de80aafb44135ae43358dc2dca952bf67385f540", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3297ff0574f5c4101e76e34c083c7f599cd956/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=fc3297ff0574f5c4101e76e34c083c7f599cd956", "patch": "@@ -225,7 +225,7 @@ pub fn compile_input(ctxt: &Ctx,\n \n     // Infer dependencies that rustpkg needs to build, by scanning for\n     // `extern mod` directives.\n-    let cfg = driver::build_configuration(sess, binary, &input);\n+    let cfg = driver::build_configuration(sess);\n     let mut crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n     crate = driver::phase_2_configure_and_expand(sess, cfg, crate);\n "}]}