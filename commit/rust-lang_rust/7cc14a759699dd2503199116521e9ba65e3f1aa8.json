{"sha": "7cc14a759699dd2503199116521e9ba65e3f1aa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYzE0YTc1OTY5OWRkMjUwMzE5OTExNjUyMWU5YmE2NWUzZjFhYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-30T17:18:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-30T17:18:57Z"}, "message": ":arrow_up: lsp-server", "tree": {"sha": "6eae262f4746b2663b3ee97fa45fb78547220df5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eae262f4746b2663b3ee97fa45fb78547220df5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc14a759699dd2503199116521e9ba65e3f1aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc14a759699dd2503199116521e9ba65e3f1aa8", "html_url": "https://github.com/rust-lang/rust/commit/7cc14a759699dd2503199116521e9ba65e3f1aa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc14a759699dd2503199116521e9ba65e3f1aa8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a3722470e5297c72dcaccaf2f113e7b758606d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a3722470e5297c72dcaccaf2f113e7b758606d", "html_url": "https://github.com/rust-lang/rust/commit/72a3722470e5297c72dcaccaf2f113e7b758606d"}], "stats": {"total": 170, "additions": 85, "deletions": 85}, "files": [{"sha": "f02df9e763bbc0d58c91cdcfc3472dda924bc415", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7cc14a759699dd2503199116521e9ba65e3f1aa8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7cc14a759699dd2503199116521e9ba65e3f1aa8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7cc14a759699dd2503199116521e9ba65e3f1aa8", "patch": "@@ -662,7 +662,7 @@ dependencies = [\n \n [[package]]\n name = \"lsp-server\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1074,8 +1074,9 @@ version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.14.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jod-thread 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lsp-server 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lsp-server 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.60.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_ide_api 0.1.0\",\n@@ -1937,7 +1938,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \"checksum lock_api 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8912e782533a93a167888781b836336a6ca5da6175c05944c86cf28c31104dc\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n-\"checksum lsp-server 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"47632ec528046c1a39f14448f1ee7d66d4b7b83e1771590b62e6c08665dea053\"\n+\"checksum lsp-server 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"148cfb1c0b3295c23d9fb4a20fd1b242f5e6f46c525fdcc7f5c0a65710362012\"\n \"checksum lsp-types 0.60.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fe3edefcd66dde1f7f1df706f46520a3c93adc5ca4bc5747da6621195e894efd\"\n \"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\""}, {"sha": "4f834519c9c00b43c93203a95985f9f6e7d54b9d", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=7cc14a759699dd2503199116521e9ba65e3f1aa8", "patch": "@@ -21,12 +21,13 @@ thread_worker = { path = \"../thread_worker\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_ide_api = { path = \"../ra_ide_api\" }\n-lsp-server = \"0.1.0\"\n+lsp-server = \"0.2.0\"\n ra_project_model = { path = \"../ra_project_model\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n \n [dev-dependencies]\n+jod-thread = \"0.1.0\"\n tempfile = \"3\"\n test_utils = { path = \"../test_utils\" }\n "}, {"sha": "88504bb8966356ea57f001cc90901e0862747f48", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=7cc14a759699dd2503199116521e9ba65e3f1aa8", "patch": "@@ -1,5 +1,5 @@\n use flexi_logger::{Duplicate, Logger};\n-use lsp_server::{run_server, stdio_transport, LspServerError};\n+use lsp_server::Connection;\n \n use ra_lsp_server::{show_message, Result, ServerConfig};\n use ra_prof;\n@@ -29,46 +29,46 @@ fn main() -> Result<()> {\n }\n \n fn main_inner() -> Result<()> {\n-    let (sender, receiver, io_threads) = stdio_transport();\n     let cwd = std::env::current_dir()?;\n-    let caps = serde_json::to_value(ra_lsp_server::server_capabilities()).unwrap();\n-    run_server(caps, sender, receiver, |params, s, r| {\n-        let params: lsp_types::InitializeParams = serde_json::from_value(params)?;\n-        let root = params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n+    let (connection, io_threads) = Connection::stdio();\n+    let server_capabilities = serde_json::to_value(ra_lsp_server::server_capabilities()).unwrap();\n \n-        let workspace_roots = params\n-            .workspace_folders\n-            .map(|workspaces| {\n-                workspaces\n-                    .into_iter()\n-                    .filter_map(|it| it.uri.to_file_path().ok())\n-                    .collect::<Vec<_>>()\n-            })\n-            .filter(|workspaces| !workspaces.is_empty())\n-            .unwrap_or_else(|| vec![root]);\n+    let initialize_params = connection.initialize(server_capabilities)?;\n+    let initialize_params: lsp_types::InitializeParams = serde_json::from_value(initialize_params)?;\n \n-        let server_config: ServerConfig = params\n-            .initialization_options\n-            .and_then(|v| {\n-                serde_json::from_value(v)\n-                    .map_err(|e| {\n-                        log::error!(\"failed to deserialize config: {}\", e);\n-                        show_message(\n-                            lsp_types::MessageType::Error,\n-                            format!(\"failed to deserialize config: {}\", e),\n-                            s,\n-                        );\n-                    })\n-                    .ok()\n-            })\n-            .unwrap_or_default();\n+    let root = initialize_params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n+\n+    let workspace_roots = initialize_params\n+        .workspace_folders\n+        .map(|workspaces| {\n+            workspaces.into_iter().filter_map(|it| it.uri.to_file_path().ok()).collect::<Vec<_>>()\n+        })\n+        .filter(|workspaces| !workspaces.is_empty())\n+        .unwrap_or_else(|| vec![root]);\n+\n+    let server_config: ServerConfig = initialize_params\n+        .initialization_options\n+        .and_then(|v| {\n+            serde_json::from_value(v)\n+                .map_err(|e| {\n+                    log::error!(\"failed to deserialize config: {}\", e);\n+                    show_message(\n+                        lsp_types::MessageType::Error,\n+                        format!(\"failed to deserialize config: {}\", e),\n+                        &connection.sender,\n+                    );\n+                })\n+                .ok()\n+        })\n+        .unwrap_or_default();\n+\n+    ra_lsp_server::main_loop(\n+        workspace_roots,\n+        initialize_params.capabilities,\n+        server_config,\n+        &connection,\n+    )?;\n \n-        ra_lsp_server::main_loop(workspace_roots, params.capabilities, server_config, r, s)\n-    })\n-    .map_err(|err| match err {\n-        LspServerError::ProtocolError(err) => err.into(),\n-        LspServerError::ServerError(err) => err,\n-    })?;\n     log::info!(\"shutting down IO...\");\n     io_threads.join()?;\n     log::info!(\"... IO is down\");"}, {"sha": "42ebb5cdf26aa47270144b55b808aa7006f05f5a", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=7cc14a759699dd2503199116521e9ba65e3f1aa8", "patch": "@@ -5,7 +5,7 @@ pub(crate) mod pending_requests;\n use std::{error::Error, fmt, path::PathBuf, sync::Arc, time::Instant};\n \n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n-use lsp_server::{handle_shutdown, ErrorCode, Message, Notification, Request, RequestId, Response};\n+use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_ide_api::{Canceled, FeatureFlags, FileId, LibraryData};\n use ra_prof::profile;\n@@ -51,8 +51,7 @@ pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     client_caps: ClientCapabilities,\n     config: ServerConfig,\n-    msg_receiver: &Receiver<Message>,\n-    msg_sender: &Sender<Message>,\n+    connection: &Connection,\n ) -> Result<()> {\n     log::info!(\"server_config: {:#?}\", config);\n     // FIXME: support dynamic workspace loading.\n@@ -69,7 +68,7 @@ pub fn main_loop(\n                     show_message(\n                         req::MessageType::Error,\n                         format!(\"rust-analyzer failed to load workspace: {}\", e),\n-                        msg_sender,\n+                        &connection.sender,\n                     );\n                 }\n             }\n@@ -89,7 +88,7 @@ pub fn main_loop(\n                 show_message(\n                     req::MessageType::Error,\n                     format!(\"unknown feature flag: {:?}\", flag),\n-                    msg_sender,\n+                    &connection.sender,\n                 );\n             }\n         }\n@@ -119,8 +118,7 @@ pub fn main_loop(\n     log::info!(\"server initialized, serving requests\");\n     let main_res = main_loop_inner(\n         &pool,\n-        msg_sender,\n-        msg_receiver,\n+        connection,\n         task_sender,\n         task_receiver.clone(),\n         &mut state,\n@@ -130,7 +128,7 @@ pub fn main_loop(\n     log::info!(\"waiting for tasks to finish...\");\n     task_receiver\n         .into_iter()\n-        .for_each(|task| on_task(task, msg_sender, &mut pending_requests, &mut state));\n+        .for_each(|task| on_task(task, &connection.sender, &mut pending_requests, &mut state));\n     log::info!(\"...tasks have finished\");\n     log::info!(\"joining threadpool...\");\n     drop(pool);\n@@ -196,8 +194,7 @@ impl fmt::Debug for Event {\n \n fn main_loop_inner(\n     pool: &ThreadPool,\n-    msg_sender: &Sender<Message>,\n-    msg_receiver: &Receiver<Message>,\n+    connection: &Connection,\n     task_sender: Sender<Task>,\n     task_receiver: Receiver<Task>,\n     state: &mut WorldState,\n@@ -214,7 +211,7 @@ fn main_loop_inner(\n     loop {\n         log::trace!(\"selecting\");\n         let event = select! {\n-            recv(msg_receiver) -> msg => match msg {\n+            recv(&connection.receiver) -> msg => match msg {\n                 Ok(msg) => Event::Msg(msg),\n                 Err(RecvError) => Err(\"client exited without shutdown\")?,\n             },\n@@ -238,7 +235,7 @@ fn main_loop_inner(\n         let mut state_changed = false;\n         match event {\n             Event::Task(task) => {\n-                on_task(task, msg_sender, pending_requests, state);\n+                on_task(task, &connection.sender, pending_requests, state);\n                 state.maybe_collect_garbage();\n             }\n             Event::Vfs(task) => {\n@@ -252,21 +249,21 @@ fn main_loop_inner(\n             }\n             Event::Msg(msg) => match msg {\n                 Message::Request(req) => {\n-                    if handle_shutdown(&req, msg_sender) {\n+                    if connection.handle_shutdown(&req)? {\n                         return Ok(());\n                     };\n                     on_request(\n                         state,\n                         pending_requests,\n                         pool,\n                         &task_sender,\n-                        msg_sender,\n+                        &connection.sender,\n                         loop_start,\n                         req,\n                     )?\n                 }\n                 Message::Notification(not) => {\n-                    on_notification(msg_sender, state, pending_requests, &mut subs, not)?;\n+                    on_notification(&connection.sender, state, pending_requests, &mut subs, not)?;\n                     state_changed = true;\n                 }\n                 Message::Response(resp) => log::error!(\"unexpected response: {:?}\", resp),\n@@ -294,7 +291,7 @@ fn main_loop_inner(\n             let n_packages: usize = state.workspaces.iter().map(|it| it.n_packages()).sum();\n             if state.feature_flags().get(\"notifications.workspace-loaded\") {\n                 let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n-                show_message(req::MessageType::Info, msg, msg_sender);\n+                show_message(req::MessageType::Info, msg, &connection.sender);\n             }\n             // Only send the notification first time\n             send_workspace_notification = false;"}, {"sha": "89f65cef45f31f02c18c17e3a3d2260d9cc50526", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc14a759699dd2503199116521e9ba65e3f1aa8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=7cc14a759699dd2503199116521e9ba65e3f1aa8", "patch": "@@ -8,16 +8,17 @@ use std::{\n \n use crossbeam_channel::{after, select, Receiver};\n use flexi_logger::Logger;\n-use lsp_server::{Message, Notification, Request};\n+use lsp_server::{Connection, Message, Notification, Request};\n use lsp_types::{\n-    request::Shutdown, ClientCapabilities, DidOpenTextDocumentParams, GotoCapability,\n-    TextDocumentClientCapabilities, TextDocumentIdentifier, TextDocumentItem, Url,\n+    notification::{DidOpenTextDocument, Exit},\n+    request::Shutdown,\n+    ClientCapabilities, DidOpenTextDocumentParams, GotoCapability, TextDocumentClientCapabilities,\n+    TextDocumentIdentifier, TextDocumentItem, Url,\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n-use thread_worker::Worker;\n \n use ra_lsp_server::{main_loop, req, ServerConfig};\n \n@@ -83,7 +84,8 @@ pub struct Server {\n     req_id: Cell<u64>,\n     messages: RefCell<Vec<Message>>,\n     dir: TempDir,\n-    worker: Worker<Message, Message>,\n+    _thread: jod_thread::JoinHandle<()>,\n+    client: Connection,\n }\n \n impl Server {\n@@ -96,11 +98,11 @@ impl Server {\n         let path = dir.path().to_path_buf();\n \n         let roots = if roots.is_empty() { vec![path] } else { roots };\n+        let (connection, client) = Connection::memory();\n \n-        let worker = Worker::<Message, Message>::spawn(\n-            \"test server\",\n-            128,\n-            move |msg_receiver, msg_sender| {\n+        let _thread = jod_thread::Builder::new()\n+            .name(\"test server\".to_string())\n+            .spawn(move || {\n                 main_loop(\n                     roots,\n                     ClientCapabilities {\n@@ -116,26 +118,24 @@ impl Server {\n                         experimental: None,\n                     },\n                     ServerConfig { with_sysroot, ..ServerConfig::default() },\n-                    &msg_receiver,\n-                    &msg_sender,\n+                    &connection,\n                 )\n                 .unwrap()\n-            },\n-        );\n-        let res = Server { req_id: Cell::new(1), dir, messages: Default::default(), worker };\n+            })\n+            .expect(\"failed to spawn a thread\");\n+\n+        let res =\n+            Server { req_id: Cell::new(1), dir, messages: Default::default(), client, _thread };\n \n         for (path, text) in files {\n-            res.send_notification(Notification::new(\n-                \"textDocument/didOpen\".to_string(),\n-                &DidOpenTextDocumentParams {\n-                    text_document: TextDocumentItem {\n-                        uri: Url::from_file_path(path).unwrap(),\n-                        language_id: \"rust\".to_string(),\n-                        version: 0,\n-                        text,\n-                    },\n+            res.notification::<DidOpenTextDocument>(DidOpenTextDocumentParams {\n+                text_document: TextDocumentItem {\n+                    uri: Url::from_file_path(path).unwrap(),\n+                    language_id: \"rust\".to_string(),\n+                    version: 0,\n+                    text,\n                 },\n-            ))\n+            })\n         }\n         res\n     }\n@@ -184,7 +184,7 @@ impl Server {\n     }\n     fn send_request_(&self, r: Request) -> Value {\n         let id = r.id.clone();\n-        self.worker.sender().send(r.into()).unwrap();\n+        self.client.sender.send(r.into()).unwrap();\n         while let Some(msg) = self.recv() {\n             match msg {\n                 Message::Request(req) => panic!(\"unexpected request: {:?}\", req),\n@@ -225,13 +225,13 @@ impl Server {\n         }\n     }\n     fn recv(&self) -> Option<Message> {\n-        recv_timeout(&self.worker.receiver()).map(|msg| {\n+        recv_timeout(&self.client.receiver).map(|msg| {\n             self.messages.borrow_mut().push(msg.clone());\n             msg\n         })\n     }\n     fn send_notification(&self, not: Notification) {\n-        self.worker.sender().send(Message::Notification(not)).unwrap();\n+        self.client.sender.send(Message::Notification(not)).unwrap();\n     }\n \n     pub fn path(&self) -> &Path {\n@@ -241,7 +241,8 @@ impl Server {\n \n impl Drop for Server {\n     fn drop(&mut self) {\n-        self.send_request::<Shutdown>(());\n+        self.request::<Shutdown>((), Value::Null);\n+        self.notification::<Exit>(());\n     }\n }\n "}]}