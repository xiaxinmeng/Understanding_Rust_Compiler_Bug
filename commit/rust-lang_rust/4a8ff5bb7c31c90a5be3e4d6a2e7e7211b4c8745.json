{"sha": "4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOGZmNWJiN2MzMWM5MGE1YmUzZTRkNmEyZTdlNzIxMWI0Yzg3NDU=", "commit": {"author": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2019-08-15T15:07:38Z"}, "committer": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2019-08-15T15:07:38Z"}, "message": "Remove `run-pass` directory #62593", "tree": {"sha": "b1ba9fe9d1808a1d7db95018ab7b365708ab7e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ba9fe9d1808a1d7db95018ab7b365708ab7e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745", "html_url": "https://github.com/rust-lang/rust/commit/4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745/comments", "author": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a90d0876d17c8ce3cb903c867acd70cb8379de60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a90d0876d17c8ce3cb903c867acd70cb8379de60", "html_url": "https://github.com/rust-lang/rust/commit/a90d0876d17c8ce3cb903c867acd70cb8379de60"}], "stats": {"total": 1913, "additions": 0, "deletions": 1913}, "files": [{"sha": "fdf0573b5e3ec829db9814d51d57fe647253c73f", "filename": "src/test/run-pass/abi/abi-sysv64-arg-passing.rs", "status": "removed", "additions": 0, "deletions": 366, "changes": 366, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fabi-sysv64-arg-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fabi-sysv64-arg-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fabi-sysv64-arg-passing.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,366 +0,0 @@\n-// Checks if the \"sysv64\" calling convention behaves the same as the\n-// \"C\" calling convention on platforms where both should be the same\n-\n-// This file contains versions of the following run-pass tests with\n-// the calling convention changed to \"sysv64\"\n-\n-// cabi-int-widening\n-// extern-pass-char\n-// extern-pass-u32\n-// extern-pass-u64\n-// extern-pass-double\n-// extern-pass-empty\n-// extern-pass-TwoU8s\n-// extern-pass-TwoU16s\n-// extern-pass-TwoU32s\n-// extern-pass-TwoU64s\n-// extern-return-TwoU8s\n-// extern-return-TwoU16s\n-// extern-return-TwoU32s\n-// extern-return-TwoU64s\n-// foreign-fn-with-byval\n-// issue-28676\n-// issue-62350-sysv-neg-reg-counts\n-// struct-return\n-\n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-windows\n-\n-// note: windows is ignored as rust_test_helpers does not have the sysv64 abi on windows\n-\n-#[allow(dead_code)]\n-#[allow(improper_ctypes)]\n-\n-#[cfg(target_arch = \"x86_64\")]\n-mod tests {\n-    #[repr(C)]\n-    #[derive(Copy, Clone, PartialEq, Debug)]\n-    pub struct TwoU8s {\n-        one: u8, two: u8\n-    }\n-\n-    #[repr(C)]\n-    #[derive(Copy, Clone, PartialEq, Debug)]\n-    pub struct TwoU16s {\n-        one: u16, two: u16\n-    }\n-\n-    #[repr(C)]\n-    #[derive(Copy, Clone, PartialEq, Debug)]\n-    pub struct TwoU32s {\n-        one: u32, two: u32\n-    }\n-\n-    #[repr(C)]\n-    #[derive(Copy, Clone, PartialEq, Debug)]\n-    pub struct TwoU64s {\n-        one: u64, two: u64\n-    }\n-\n-    #[repr(C)]\n-    pub struct ManyInts {\n-        arg1: i8,\n-        arg2: i16,\n-        arg3: i32,\n-        arg4: i16,\n-        arg5: i8,\n-        arg6: TwoU8s,\n-    }\n-\n-    #[repr(C)]\n-    pub struct Empty;\n-\n-    #[repr(C)]\n-    #[derive(Copy, Clone)]\n-    pub struct S {\n-        x: u64,\n-        y: u64,\n-        z: u64,\n-    }\n-\n-    #[repr(C)]\n-    #[derive(Copy, Clone)]\n-    pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n-\n-    #[derive(Copy, Clone)]\n-    pub struct QuadFloats { a: f32, b: f32, c: f32, d: f32 }\n-\n-    #[repr(C)]\n-    #[derive(Copy, Clone)]\n-    pub struct Floats { a: f64, b: u8, c: f64 }\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern \"sysv64\" {\n-        pub fn rust_int8_to_int32(_: i8) -> i32;\n-        pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n-        pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n-        pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n-        pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n-        pub fn rust_dbg_extern_empty_struct(v1: ManyInts, e: Empty, v2: ManyInts);\n-        pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n-        pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n-        pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n-        pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n-        pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n-        pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n-        pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n-        pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n-        pub fn get_x(x: S) -> u64;\n-        pub fn get_y(x: S) -> u64;\n-        pub fn get_z(x: S) -> u64;\n-        pub fn get_c_many_params(_: *const (), _: *const (),\n-                                 _: *const (), _: *const (), f: Quad) -> u64;\n-        pub fn get_c_exhaust_sysv64_ints(\n-            _: *const (),\n-            _: *const (),\n-            _: *const (),\n-            _: *const (),\n-            _: *const (),\n-            _: *const (),\n-            _: *const (),\n-            h: QuadFloats,\n-        ) -> f32;\n-        pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n-        pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n-    }\n-\n-    pub fn cabi_int_widening() {\n-        let x = unsafe {\n-            rust_int8_to_int32(-1)\n-        };\n-\n-        assert!(x == -1);\n-    }\n-\n-    pub fn extern_pass_char() {\n-        unsafe {\n-            assert_eq!(22, rust_dbg_extern_identity_u8(22));\n-        }\n-    }\n-\n-    pub fn extern_pass_u32() {\n-        unsafe {\n-            assert_eq!(22, rust_dbg_extern_identity_u32(22));\n-        }\n-    }\n-\n-    pub fn extern_pass_u64() {\n-        unsafe {\n-            assert_eq!(22, rust_dbg_extern_identity_u64(22));\n-        }\n-    }\n-\n-    pub fn extern_pass_double() {\n-        unsafe {\n-            assert_eq!(22.0_f64, rust_dbg_extern_identity_double(22.0_f64));\n-        }\n-    }\n-\n-    pub fn extern_pass_empty() {\n-        unsafe {\n-            let x = ManyInts {\n-                arg1: 2,\n-                arg2: 3,\n-                arg3: 4,\n-                arg4: 5,\n-                arg5: 6,\n-                arg6: TwoU8s { one: 7, two: 8, }\n-            };\n-            let y = ManyInts {\n-                arg1: 1,\n-                arg2: 2,\n-                arg3: 3,\n-                arg4: 4,\n-                arg5: 5,\n-                arg6: TwoU8s { one: 6, two: 7, }\n-            };\n-            let empty = Empty;\n-            rust_dbg_extern_empty_struct(x, empty, y);\n-        }\n-    }\n-\n-    pub fn extern_pass_twou8s() {\n-        unsafe {\n-            let x = TwoU8s {one: 22, two: 23};\n-            let y = rust_dbg_extern_identity_TwoU8s(x);\n-            assert_eq!(x, y);\n-        }\n-    }\n-\n-    pub fn extern_pass_twou16s() {\n-        unsafe {\n-            let x = TwoU16s {one: 22, two: 23};\n-            let y = rust_dbg_extern_identity_TwoU16s(x);\n-            assert_eq!(x, y);\n-        }\n-    }\n-\n-    pub fn extern_pass_twou32s() {\n-        unsafe {\n-            let x = TwoU32s {one: 22, two: 23};\n-            let y = rust_dbg_extern_identity_TwoU32s(x);\n-            assert_eq!(x, y);\n-        }\n-    }\n-\n-    pub fn extern_pass_twou64s() {\n-        unsafe {\n-            let x = TwoU64s {one: 22, two: 23};\n-            let y = rust_dbg_extern_identity_TwoU64s(x);\n-            assert_eq!(x, y);\n-        }\n-    }\n-\n-    pub fn extern_return_twou8s() {\n-        unsafe {\n-            let y = rust_dbg_extern_return_TwoU8s();\n-            assert_eq!(y.one, 10);\n-            assert_eq!(y.two, 20);\n-        }\n-    }\n-\n-    pub fn extern_return_twou16s() {\n-        unsafe {\n-            let y = rust_dbg_extern_return_TwoU16s();\n-            assert_eq!(y.one, 10);\n-            assert_eq!(y.two, 20);\n-        }\n-    }\n-\n-    pub fn extern_return_twou32s() {\n-        unsafe {\n-            let y = rust_dbg_extern_return_TwoU32s();\n-            assert_eq!(y.one, 10);\n-            assert_eq!(y.two, 20);\n-        }\n-    }\n-\n-    pub fn extern_return_twou64s() {\n-        unsafe {\n-            let y = rust_dbg_extern_return_TwoU64s();\n-            assert_eq!(y.one, 10);\n-            assert_eq!(y.two, 20);\n-        }\n-    }\n-\n-    #[inline(never)]\n-    fn indirect_call(func: unsafe extern \"sysv64\" fn(s: S) -> u64, s: S) -> u64 {\n-        unsafe {\n-            func(s)\n-        }\n-    }\n-\n-    pub fn foreign_fn_with_byval() {\n-        let s = S { x: 1, y: 2, z: 3 };\n-        assert_eq!(s.x, indirect_call(get_x, s));\n-        assert_eq!(s.y, indirect_call(get_y, s));\n-        assert_eq!(s.z, indirect_call(get_z, s));\n-    }\n-\n-    fn test() {\n-        use std::ptr;\n-        unsafe {\n-            let null = ptr::null();\n-            let q = Quad {\n-                a: 1,\n-                b: 2,\n-                c: 3,\n-                d: 4\n-            };\n-            assert_eq!(get_c_many_params(null, null, null, null, q), q.c);\n-        }\n-    }\n-\n-    pub fn issue_28676() {\n-        test();\n-    }\n-\n-    fn test_62350() {\n-        use std::ptr;\n-        unsafe {\n-            let null = ptr::null();\n-            let q = QuadFloats {\n-                a: 10.2,\n-                b: 20.3,\n-                c: 30.4,\n-                d: 40.5\n-            };\n-            assert_eq!(\n-                get_c_exhaust_sysv64_ints(null, null, null, null, null, null, null, q),\n-                q.c,\n-            );\n-        }\n-    }\n-\n-    pub fn issue_62350() {\n-        test_62350();\n-    }\n-\n-    fn test1() {\n-        unsafe {\n-            let q = Quad { a: 0xaaaa_aaaa_aaaa_aaaa,\n-                     b: 0xbbbb_bbbb_bbbb_bbbb,\n-                     c: 0xcccc_cccc_cccc_cccc,\n-                     d: 0xdddd_dddd_dddd_dddd };\n-            let qq = rust_dbg_abi_1(q);\n-            println!(\"a: {:x}\", qq.a as usize);\n-            println!(\"b: {:x}\", qq.b as usize);\n-            println!(\"c: {:x}\", qq.c as usize);\n-            println!(\"d: {:x}\", qq.d as usize);\n-            assert_eq!(qq.a, q.c + 1);\n-            assert_eq!(qq.b, q.d - 1);\n-            assert_eq!(qq.c, q.a + 1);\n-            assert_eq!(qq.d, q.b - 1);\n-        }\n-    }\n-\n-    fn test2() {\n-        unsafe {\n-            let f = Floats { a: 1.234567890e-15_f64,\n-                     b: 0b_1010_1010,\n-                     c: 1.0987654321e-15_f64 };\n-            let ff = rust_dbg_abi_2(f);\n-            println!(\"a: {}\", ff.a as f64);\n-            println!(\"b: {}\", ff.b as usize);\n-            println!(\"c: {}\", ff.c as f64);\n-            assert_eq!(ff.a, f.c + 1.0f64);\n-            assert_eq!(ff.b, 0xff);\n-            assert_eq!(ff.c, f.a - 1.0f64);\n-        }\n-    }\n-\n-    pub fn struct_return() {\n-        test1();\n-        test2();\n-    }\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n-fn main() {\n-    use tests::*;\n-    cabi_int_widening();\n-    extern_pass_char();\n-    extern_pass_u32();\n-    extern_pass_u64();\n-    extern_pass_double();\n-    extern_pass_empty();\n-    extern_pass_twou8s();\n-    extern_pass_twou16s();\n-    extern_pass_twou32s();\n-    extern_pass_twou64s();\n-    extern_return_twou8s();\n-    extern_return_twou16s();\n-    extern_return_twou32s();\n-    extern_return_twou64s();\n-    foreign_fn_with_byval();\n-    issue_28676();\n-    issue_62350();\n-    struct_return();\n-}\n-\n-#[cfg(not(target_arch = \"x86_64\"))]\n-fn main() {\n-\n-}"}, {"sha": "a0d6e968252a2378ae3b06cf3fd0286986e536ed", "filename": "src/test/run-pass/abi/abi-sysv64-register-usage.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fabi-sysv64-register-usage.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,95 +0,0 @@\n-// Checks if the correct registers are being used to pass arguments\n-// when the sysv64 ABI is specified.\n-\n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-\n-#![feature(asm)]\n-\n-#[cfg(target_arch = \"x86_64\")]\n-pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n-                                         rcx: i64, r8 : i64, r9 : i64,\n-                                         xmm0: f32, xmm1: f32, xmm2: f32,\n-                                         xmm3: f32, xmm4: f32, xmm5: f32,\n-                                         xmm6: f32, xmm7: f32) -> i64 {\n-    assert_eq!(rdi, 1);\n-    assert_eq!(rsi, 2);\n-    assert_eq!(rdx, 3);\n-    assert_eq!(rcx, 4);\n-    assert_eq!(r8,  5);\n-    assert_eq!(r9,  6);\n-    assert_eq!(xmm0, 1.0f32);\n-    assert_eq!(xmm1, 2.0f32);\n-    assert_eq!(xmm2, 4.0f32);\n-    assert_eq!(xmm3, 8.0f32);\n-    assert_eq!(xmm4, 16.0f32);\n-    assert_eq!(xmm5, 32.0f32);\n-    assert_eq!(xmm6, 64.0f32);\n-    assert_eq!(xmm7, 128.0f32);\n-    42\n-}\n-\n-// this struct contains 8 i64's, while only 6 can be passed in registers.\n-#[cfg(target_arch = \"x86_64\")]\n-#[derive(PartialEq, Eq, Debug)]\n-pub struct LargeStruct(i64, i64, i64, i64, i64, i64, i64, i64);\n-\n-#[cfg(target_arch = \"x86_64\")]\n-#[inline(never)]\n-pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct {\n-    foo.0 *= 1;\n-    foo.1 *= 2;\n-    foo.2 *= 3;\n-    foo.3 *= 4;\n-    foo.4 *= 5;\n-    foo.5 *= 6;\n-    foo.6 *= 7;\n-    foo.7 *= 8;\n-    foo\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n-pub fn main() {\n-    let result: i64;\n-    unsafe {\n-        asm!(\"mov rdi, 1;\n-              mov rsi, 2;\n-              mov rdx, 3;\n-              mov rcx, 4;\n-              mov r8,  5;\n-              mov r9,  6;\n-              mov eax, 0x3F800000;\n-              movd xmm0, eax;\n-              mov eax, 0x40000000;\n-              movd xmm1, eax;\n-              mov eax, 0x40800000;\n-              movd xmm2, eax;\n-              mov eax, 0x41000000;\n-              movd xmm3, eax;\n-              mov eax, 0x41800000;\n-              movd xmm4, eax;\n-              mov eax, 0x42000000;\n-              movd xmm5, eax;\n-              mov eax, 0x42800000;\n-              movd xmm6, eax;\n-              mov eax, 0x43000000;\n-              movd xmm7, eax;\n-              call r10\n-              \"\n-            : \"={rax}\"(result)\n-            : \"{r10}\"(all_the_registers as usize)\n-            : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n-            : \"intel\", \"alignstack\"\n-        )\n-    }\n-    assert_eq!(result, 42);\n-\n-    assert_eq!(\n-        large_struct_by_val(LargeStruct(1, 2, 3, 4, 5, 6, 7, 8)),\n-        LargeStruct(1, 4, 9, 16, 25, 36, 49, 64)\n-    );\n-}\n-\n-#[cfg(not(target_arch = \"x86_64\"))]\n-pub fn main() {}"}, {"sha": "110f3eee1ef81cd34fa26571a0f5db55923ba795", "filename": "src/test/run-pass/abi/abort-on-c-abi.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fabort-on-c-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fabort-on-c-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fabort-on-c-abi.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,36 +0,0 @@\n-#![allow(unused_must_use)]\n-// Since we mark some ABIs as \"nounwind\" to LLVM, we must make sure that\n-// we never unwind through them.\n-\n-// ignore-cloudabi no env and process\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n-\n-use std::{env, panic};\n-use std::io::prelude::*;\n-use std::io;\n-use std::process::{Command, Stdio};\n-\n-extern \"C\" fn panic_in_ffi() {\n-    panic!(\"Test\");\n-}\n-\n-fn test() {\n-    let _ = panic::catch_unwind(|| { panic_in_ffi(); });\n-    // The process should have aborted by now.\n-    io::stdout().write(b\"This should never be printed.\\n\");\n-    let _ = io::stdout().flush();\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    if args.len() > 1 && args[1] == \"test\" {\n-        return test();\n-    }\n-\n-    let mut p = Command::new(&args[0])\n-                        .stdout(Stdio::piped())\n-                        .stdin(Stdio::piped())\n-                        .arg(\"test\").spawn().unwrap();\n-    assert!(!p.wait().unwrap().success());\n-}"}, {"sha": "6d7e3f3cd5c1a89be9d8aa435cfff3ad26c96558", "filename": "src/test/run-pass/abi/anon-extern-mod.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fanon-extern-mod.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,17 +0,0 @@\n-// pretty-expanded FIXME #23616\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_get_test_int() -> libc::intptr_t;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let _ = rust_get_test_int();\n-    }\n-}"}, {"sha": "948b5e688ebcce26a76da4bbc36344f63d14b48e", "filename": "src/test/run-pass/abi/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,9 +0,0 @@\n-#![crate_name=\"anonexternmod\"]\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_get_test_int() -> libc::intptr_t;\n-}"}, {"sha": "de6b0e2118a58a965d57aeda07cd3b290b3438ee", "filename": "src/test/run-pass/abi/auxiliary/foreign_lib.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fauxiliary%2Fforeign_lib.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,38 +0,0 @@\n-#![crate_name=\"foreign_lib\"]\n-\n-#![feature(rustc_private)]\n-\n-pub mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub mod rustrt2 {\n-    extern crate libc;\n-\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub mod rustrt3 {\n-    // Different type, but same ABI (on all supported platforms).\n-    // Ensures that we don't ICE or trigger LLVM asserts when\n-    // importing the same symbol under different types.\n-    // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n-        pub fn rust_get_test_int() -> *const u8;\n-    }\n-}\n-\n-pub fn local_uses() {\n-    unsafe {\n-        let x = rustrt::rust_get_test_int();\n-        assert_eq!(x, rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n-    }\n-}"}, {"sha": "3b997295c122a748fcc3dae5a04466006a318dae", "filename": "src/test/run-pass/abi/c-stack-as-value.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fc-stack-as-value.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,17 +0,0 @@\n-// pretty-expanded FIXME #23616\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#![feature(rustc_private)]\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub fn main() {\n-    let _foo = rustrt::rust_get_test_int;\n-}"}, {"sha": "f6524c6a3d902c92259d46ffe8fcc35d0743bc14", "filename": "src/test/run-pass/abi/cabi-int-widening.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fcabi-int-widening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fcabi-int-widening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fcabi-int-widening.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,14 +0,0 @@\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_int8_to_int32(_: i8) -> i32;\n-}\n-\n-fn main() {\n-    let x = unsafe {\n-        rust_int8_to_int32(-1)\n-    };\n-\n-    assert!(x == -1);\n-}"}, {"sha": "948b5e688ebcce26a76da4bbc36344f63d14b48e", "filename": "src/test/run-pass/abi/consts/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fconsts%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,9 +0,0 @@\n-#![crate_name=\"anonexternmod\"]\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_get_test_int() -> libc::intptr_t;\n-}"}, {"sha": "77168be5374b2d6f690eb6c56e245efd0652dbb4", "filename": "src/test/run-pass/abi/cross-crate/anon-extern-mod-cross-crate-2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fcross-crate%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fcross-crate%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fcross-crate%2Fanon-extern-mod-cross-crate-2.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-// aux-build:anon-extern-mod-cross-crate-1.rs\n-// pretty-expanded FIXME #23616\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-extern crate anonexternmod;\n-\n-use anonexternmod::rust_get_test_int;\n-\n-pub fn main() {\n-    unsafe {\n-        rust_get_test_int();\n-    }\n-}"}, {"sha": "948b5e688ebcce26a76da4bbc36344f63d14b48e", "filename": "src/test/run-pass/abi/cross-crate/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fcross-crate%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,9 +0,0 @@\n-#![crate_name=\"anonexternmod\"]\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_get_test_int() -> libc::intptr_t;\n-}"}, {"sha": "f2c1e1f654016fd09c37b73d74a6a1ac891d751c", "filename": "src/test/run-pass/abi/duplicated-external-mods.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fduplicated-external-mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fduplicated-external-mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fduplicated-external-mods.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,8 +0,0 @@\n-// aux-build:anon-extern-mod-cross-crate-1.rs\n-// aux-build:anon-extern-mod-cross-crate-1.rs\n-// pretty-expanded FIXME #23616\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-extern crate anonexternmod;\n-\n-pub fn main() { }"}, {"sha": "d4568d38e25c9eeab736fbd41a345ccc1eb5e792", "filename": "src/test/run-pass/abi/extern/auxiliary/extern-crosscrate-source.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,31 +0,0 @@\n-#![crate_name=\"externcallback\"]\n-#![crate_type = \"lib\"]\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-pub mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-pub fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        println!(\"n = {}\", n);\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        fact(data - 1) * data\n-    }\n-}"}, {"sha": "81f884dada9b8435735b7e77570600292ebf0f02", "filename": "src/test/run-pass/abi/extern/extern-call-deep.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-deep.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,39 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc to test ffi with\n-// ignore-emscripten blows the JS stack\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + 1\n-    }\n-}\n-\n-fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        println!(\"n = {}\", n);\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    let result = count(1000);\n-    println!(\"result = {}\", result);\n-    assert_eq!(result, 1000);\n-}"}, {"sha": "b31489b1e10cc66c6c2d053b53ce36c07bdf38ca", "filename": "src/test/run-pass/abi/extern/extern-call-deep2.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-deep2.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,44 +0,0 @@\n-// run-pass\n-#![allow(unused_must_use)]\n-// ignore-emscripten no threads support\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-use std::thread;\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + 1\n-    }\n-}\n-\n-fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        println!(\"n = {}\", n);\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    // Make sure we're on a thread with small Rust stacks (main currently\n-    // has a large stack)\n-    thread::spawn(move|| {\n-        let result = count(1000);\n-        println!(\"result = {}\", result);\n-        assert_eq!(result, 1000);\n-    }).join();\n-}"}, {"sha": "158b54e4b8cdd6a9ba74cd4f609c9cd1bd8a42e2", "filename": "src/test/run-pass/abi/extern/extern-call-indirect.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-indirect.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,38 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        fact(data - 1) * data\n-    }\n-}\n-\n-fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        println!(\"n = {}\", n);\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    let result = fact(10);\n-    println!(\"result = {}\", result);\n-    assert_eq!(result, 3628800);\n-}"}, {"sha": "a7b1065c9e1f674b02f187bdc215b7b12f3f569d", "filename": "src/test/run-pass/abi/extern/extern-call-scrub.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-call-scrub.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,48 +0,0 @@\n-// run-pass\n-#![allow(unused_must_use)]\n-// This time we're testing repeatedly going up and down both stacks to\n-// make sure the stack pointers are maintained properly in both\n-// directions\n-\n-// ignore-emscripten no threads support\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-use std::thread;\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n-                             data: libc::uintptr_t)\n-                             -> libc::uintptr_t;\n-    }\n-}\n-\n-extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1 {\n-        data\n-    } else {\n-        count(data - 1) + count(data - 1)\n-    }\n-}\n-\n-fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        println!(\"n = {}\", n);\n-        rustrt::rust_dbg_call(cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    // Make sure we're on a thread with small Rust stacks (main currently\n-    // has a large stack)\n-    thread::spawn(move|| {\n-        let result = count(12);\n-        println!(\"result = {}\", result);\n-        assert_eq!(result, 2048);\n-    }).join();\n-}"}, {"sha": "123ce20ca262f3d2d02458b2f17e132c1a4ac457", "filename": "src/test/run-pass/abi/extern/extern-crosscrate.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-crosscrate.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-// aux-build:extern-crosscrate-source.rs\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#![feature(rustc_private)]\n-\n-extern crate externcallback;\n-extern crate libc;\n-\n-fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n-    unsafe {\n-        println!(\"n = {}\", n);\n-        externcallback::rustrt::rust_dbg_call(externcallback::cb, n)\n-    }\n-}\n-\n-pub fn main() {\n-    let result = fact(10);\n-    println!(\"result = {}\", result);\n-    assert_eq!(result, 3628800);\n-}"}, {"sha": "285bce2e19c31f04e4edc594e666492ff229582c", "filename": "src/test/run-pass/abi/extern/extern-pass-TwoU16s.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU16s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,25 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a foreign function that accepts and returns a struct\n-// by value.\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub struct TwoU16s {\n-    one: u16, two: u16\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let x = TwoU16s {one: 22, two: 23};\n-        let y = rust_dbg_extern_identity_TwoU16s(x);\n-        assert_eq!(x, y);\n-    }\n-}"}, {"sha": "fb18aa8d22fdab00ee29dbbb02efb8d66f4c00ff", "filename": "src/test/run-pass/abi/extern/extern-pass-TwoU32s.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU32s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,25 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a foreign function that accepts and returns a struct\n-// by value.\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub struct TwoU32s {\n-    one: u32, two: u32\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let x = TwoU32s {one: 22, two: 23};\n-        let y = rust_dbg_extern_identity_TwoU32s(x);\n-        assert_eq!(x, y);\n-    }\n-}"}, {"sha": "419648263aa9baecebb83f774ed2a3f87ba2761f", "filename": "src/test/run-pass/abi/extern/extern-pass-TwoU64s.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU64s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,25 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a foreign function that accepts and returns a struct\n-// by value.\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub struct TwoU64s {\n-    one: u64, two: u64\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let x = TwoU64s {one: 22, two: 23};\n-        let y = rust_dbg_extern_identity_TwoU64s(x);\n-        assert_eq!(x, y);\n-    }\n-}"}, {"sha": "53a6a0f29f8a6ff0d7174b461344f782eae1a12d", "filename": "src/test/run-pass/abi/extern/extern-pass-TwoU8s.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-TwoU8s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,25 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a foreign function that accepts and returns a struct\n-// by value.\n-\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub struct TwoU8s {\n-    one: u8, two: u8\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let x = TwoU8s {one: 22, two: 23};\n-        let y = rust_dbg_extern_identity_TwoU8s(x);\n-        assert_eq!(x, y);\n-    }\n-}"}, {"sha": "22f841b45527e8eaa8e3952718c7188aa3be6329", "filename": "src/test/run-pass/abi/extern/extern-pass-char.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-char.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,16 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a function that takes/returns a u8.\n-\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        assert_eq!(22, rust_dbg_extern_identity_u8(22));\n-    }\n-}"}, {"sha": "dbd0a2dfa4889f423d8ae7b0e37efc7a317e4a27", "filename": "src/test/run-pass/abi/extern/extern-pass-double.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-double.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        assert_eq!(22.0_f64, rust_dbg_extern_identity_double(22.0_f64));\n-    }\n-}"}, {"sha": "07099a24204835161e1578055d911697b26e990e", "filename": "src/test/run-pass/abi/extern/extern-pass-empty.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-empty.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,55 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)] // FIXME: this test is inherently not FFI-safe.\n-\n-// Test a foreign function that accepts empty struct.\n-\n-// pretty-expanded FIXME #23616\n-// ignore-msvc\n-// ignore-emscripten emcc asserts on an empty struct as an argument\n-\n-#[repr(C)]\n-struct TwoU8s {\n-    one: u8,\n-    two: u8,\n-}\n-\n-#[repr(C)]\n-struct ManyInts {\n-    arg1: i8,\n-    arg2: i16,\n-    arg3: i32,\n-    arg4: i16,\n-    arg5: i8,\n-    arg6: TwoU8s,\n-}\n-\n-#[repr(C)]\n-struct Empty;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_dbg_extern_empty_struct(v1: ManyInts, e: Empty, v2: ManyInts);\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let x = ManyInts {\n-            arg1: 2,\n-            arg2: 3,\n-            arg3: 4,\n-            arg4: 5,\n-            arg5: 6,\n-            arg6: TwoU8s { one: 7, two: 8, }\n-        };\n-        let y = ManyInts {\n-            arg1: 1,\n-            arg2: 2,\n-            arg3: 3,\n-            arg4: 4,\n-            arg5: 5,\n-            arg6: TwoU8s { one: 6, two: 7, }\n-        };\n-        let empty = Empty;\n-        rust_dbg_extern_empty_struct(x, empty, y);\n-    }\n-}"}, {"sha": "f2efdb7d3664ea7964d75674825179f8cb857db2", "filename": "src/test/run-pass/abi/extern/extern-pass-u32.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-u32.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,16 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a function that takes/returns a u32.\n-\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        assert_eq!(22, rust_dbg_extern_identity_u32(22));\n-    }\n-}"}, {"sha": "975446d430c2869b56619c915e73d3882b2e89fd", "filename": "src/test/run-pass/abi/extern/extern-pass-u64.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-pass-u64.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,16 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-// Test a call to a function that takes/returns a u64.\n-\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        assert_eq!(22, rust_dbg_extern_identity_u64(22));\n-    }\n-}"}, {"sha": "dd884ee77fe77d961632117badda3a5897358304", "filename": "src/test/run-pass/abi/extern/extern-return-TwoU16s.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU16s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-pub struct TwoU16s {\n-    one: u16, two: u16\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let y = rust_dbg_extern_return_TwoU16s();\n-        assert_eq!(y.one, 10);\n-        assert_eq!(y.two, 20);\n-    }\n-}"}, {"sha": "d6aaf5c9eaf1b8a99ab5511181fb02970d61f281", "filename": "src/test/run-pass/abi/extern/extern-return-TwoU32s.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU32s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-pub struct TwoU32s {\n-    one: u32, two: u32\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let y = rust_dbg_extern_return_TwoU32s();\n-        assert_eq!(y.one, 10);\n-        assert_eq!(y.two, 20);\n-    }\n-}"}, {"sha": "c5e4ebadc182ad14a8224f501845330fa063e6a0", "filename": "src/test/run-pass/abi/extern/extern-return-TwoU64s.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU64s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-pub struct TwoU64s {\n-    one: u64, two: u64\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let y = rust_dbg_extern_return_TwoU64s();\n-        assert_eq!(y.one, 10);\n-        assert_eq!(y.two, 20);\n-    }\n-}"}, {"sha": "a7cd21b207359bb190bd5560aebf2f4f9e50c397", "filename": "src/test/run-pass/abi/extern/extern-return-TwoU8s.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fextern%2Fextern-return-TwoU8s.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-pub struct TwoU8s {\n-    one: u8, two: u8\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        let y = rust_dbg_extern_return_TwoU8s();\n-        assert_eq!(y.one, 10);\n-        assert_eq!(y.two, 20);\n-    }\n-}"}, {"sha": "de6b0e2118a58a965d57aeda07cd3b290b3438ee", "filename": "src/test/run-pass/abi/foreign/auxiliary/foreign_lib.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fauxiliary%2Fforeign_lib.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,38 +0,0 @@\n-#![crate_name=\"foreign_lib\"]\n-\n-#![feature(rustc_private)]\n-\n-pub mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub mod rustrt2 {\n-    extern crate libc;\n-\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub mod rustrt3 {\n-    // Different type, but same ABI (on all supported platforms).\n-    // Ensures that we don't ICE or trigger LLVM asserts when\n-    // importing the same symbol under different types.\n-    // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n-        pub fn rust_get_test_int() -> *const u8;\n-    }\n-}\n-\n-pub fn local_uses() {\n-    unsafe {\n-        let x = rustrt::rust_get_test_int();\n-        assert_eq!(x, rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n-    }\n-}"}, {"sha": "c6afa07ad050325c81173858e410ad23051f2a86", "filename": "src/test/run-pass/abi/foreign/foreign-call-no-runtime.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-call-no-runtime.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,55 +0,0 @@\n-// run-pass\n-// ignore-emscripten no threads support\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-use std::mem;\n-use std::thread;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t),\n-                     data: libc::uintptr_t) -> libc::uintptr_t;\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        thread::spawn(move|| {\n-            let i: isize = 100;\n-            rust_dbg_call(callback_isize, mem::transmute(&i));\n-        }).join().unwrap();\n-\n-        thread::spawn(move|| {\n-            let i: i32 = 100;\n-            rust_dbg_call(callback_i32, mem::transmute(&i));\n-        }).join().unwrap();\n-\n-        thread::spawn(move|| {\n-            let i: i64 = 100;\n-            rust_dbg_call(callback_i64, mem::transmute(&i));\n-        }).join().unwrap();\n-    }\n-}\n-\n-extern fn callback_isize(data: libc::uintptr_t) {\n-    unsafe {\n-        let data: *const isize = mem::transmute(data);\n-        assert_eq!(*data, 100);\n-    }\n-}\n-\n-extern fn callback_i64(data: libc::uintptr_t) {\n-    unsafe {\n-        let data: *const i64 = mem::transmute(data);\n-        assert_eq!(*data, 100);\n-    }\n-}\n-\n-extern fn callback_i32(data: libc::uintptr_t) {\n-    unsafe {\n-        let data: *const i32 = mem::transmute(data);\n-        assert_eq!(*data, 100);\n-    }\n-}"}, {"sha": "3c9f0f583d48779c9944931eea4c33f72692c1d1", "filename": "src/test/run-pass/abi/foreign/foreign-dupe.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-dupe.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,17 +0,0 @@\n-// run-pass\n-// aux-build:foreign_lib.rs\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-// Check that we can still call duplicated extern (imported) functions\n-// which were declared in another crate. See issues #32740 and #32783.\n-\n-\n-extern crate foreign_lib;\n-\n-pub fn main() {\n-    unsafe {\n-        let x = foreign_lib::rustrt::rust_get_test_int();\n-        assert_eq!(x, foreign_lib::rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, foreign_lib::rustrt3::rust_get_test_int());\n-    }\n-}"}, {"sha": "3a35599aa573f5047e5656e843b815752c7077db", "filename": "src/test/run-pass/abi/foreign/foreign-fn-with-byval.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-fn-with-byval.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,32 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#[derive(Copy, Clone)]\n-pub struct S {\n-    x: u64,\n-    y: u64,\n-    z: u64,\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn get_x(x: S) -> u64;\n-    pub fn get_y(x: S) -> u64;\n-    pub fn get_z(x: S) -> u64;\n-}\n-\n-#[inline(never)]\n-fn indirect_call(func: unsafe extern fn(s: S) -> u64, s: S) -> u64 {\n-    unsafe {\n-        func(s)\n-    }\n-}\n-\n-fn main() {\n-    let s = S { x: 1, y: 2, z: 3 };\n-    assert_eq!(s.x, indirect_call(get_x, s));\n-    assert_eq!(s.y, indirect_call(get_y, s));\n-    assert_eq!(s.z, indirect_call(get_z, s));\n-}"}, {"sha": "2f33fb4765690eb1ab341cd927e17a38e0950615", "filename": "src/test/run-pass/abi/foreign/foreign-no-abi.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fforeign%2Fforeign-no-abi.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-// ABI is cdecl by default\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-// pretty-expanded FIXME #23616\n-\n-#![feature(rustc_private)]\n-\n-mod rustrt {\n-    extern crate libc;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-pub fn main() {\n-    unsafe {\n-        rustrt::rust_get_test_int();\n-    }\n-}"}, {"sha": "d34933cde4246e1ef04709c4eb87f8dfaf4ff868", "filename": "src/test/run-pass/abi/invoke-external-foreign.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Finvoke-external-foreign.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,16 +0,0 @@\n-// aux-build:foreign_lib.rs\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-// The purpose of this test is to check that we can\n-// successfully (and safely) invoke external, cdecl\n-// functions from outside the crate.\n-\n-// pretty-expanded FIXME #23616\n-\n-extern crate foreign_lib;\n-\n-pub fn main() {\n-    unsafe {\n-        let _foo = foreign_lib::rustrt::rust_get_test_int();\n-    }\n-}"}, {"sha": "77a4787ba943d436719ba13ea719f501a072d6fc", "filename": "src/test/run-pass/abi/issues/auxiliary/issue-25185-1.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fauxiliary%2Fissue-25185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fauxiliary%2Fissue-25185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fauxiliary%2Fissue-25185-1.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,8 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![crate_type = \"rlib\"]\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    pub fn rust_dbg_extern_identity_u32(u: u32) -> u32;\n-}"}, {"sha": "7ce3df255a3314a6be4b640db589ac71cda8ce55", "filename": "src/test/run-pass/abi/issues/auxiliary/issue-25185-2.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fauxiliary%2Fissue-25185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fauxiliary%2Fissue-25185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fauxiliary%2Fissue-25185-2.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,3 +0,0 @@\n-extern crate issue_25185_1;\n-\n-pub use issue_25185_1::rust_dbg_extern_identity_u32;"}, {"sha": "383c9a1e9c4ab9aeffea22f98970fa0b6e76628c", "filename": "src/test/run-pass/abi/issues/issue-25185.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-25185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-25185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-25185.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// aux-build:issue-25185-1.rs\n-// aux-build:issue-25185-2.rs\n-// ignore-wasm32-bare no libc for ffi testing\n-\n-extern crate issue_25185_2;\n-\n-fn main() {\n-    let x = unsafe {\n-        issue_25185_2::rust_dbg_extern_identity_u32(1)\n-    };\n-    assert_eq!(x, 1);\n-}"}, {"sha": "2b83478ca61158d3288143c9bb5c8737b090ab56", "filename": "src/test/run-pass/abi/issues/issue-28676.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-28676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-28676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fissues%2Fissue-28676.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,35 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-#![allow(improper_ctypes)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#[derive(Copy, Clone)]\n-pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n-\n-mod rustrt {\n-    use super::Quad;\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn get_c_many_params(_: *const (), _: *const (),\n-                                 _: *const (), _: *const (), f: Quad) -> u64;\n-    }\n-}\n-\n-fn test() {\n-    unsafe {\n-        let null = std::ptr::null();\n-        let q = Quad {\n-            a: 1,\n-            b: 2,\n-            c: 3,\n-            d: 4\n-        };\n-        assert_eq!(rustrt::get_c_many_params(null, null, null, null, q), q.c);\n-    }\n-}\n-\n-pub fn main() {\n-    test();\n-}"}, {"sha": "dcf537866c50bd5ee2808e0c4e19fc1112f3e9f6", "filename": "src/test/run-pass/abi/lib-defaults.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Flib-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Flib-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Flib-defaults.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,16 +0,0 @@\n-// dont-check-compiler-stderr (rust-lang/rust#54222)\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-// compile-flags: -lrust_test_helpers\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern \"C\" {\n-    pub fn rust_dbg_extern_identity_u32(x: u32) -> u32;\n-}\n-\n-fn main() {\n-    unsafe {\n-        rust_dbg_extern_identity_u32(42);\n-    }\n-}"}, {"sha": "28abef5cf4edcf488f785818e79930e92bf85b18", "filename": "src/test/run-pass/abi/macros/macros-in-extern.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fmacros%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fmacros%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fmacros%2Fmacros-in-extern.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,30 +0,0 @@\n-// run-pass\n-// ignore-wasm32\n-\n-#![feature(decl_macro, macros_in_extern)]\n-\n-macro_rules! returns_isize(\n-    ($ident:ident) => (\n-        fn $ident() -> isize;\n-    )\n-);\n-\n-macro takes_u32_returns_u32($ident:ident) {\n-    fn $ident (arg: u32) -> u32;\n-}\n-\n-macro_rules! emits_nothing(\n-    () => ()\n-);\n-\n-fn main() {\n-    assert_eq!(unsafe { rust_get_test_int() }, 1isize);\n-    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEFu32);\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    returns_isize!(rust_get_test_int);\n-    takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    emits_nothing!();\n-}"}, {"sha": "dc9fee03b776c0bae1930e7519c34f9c10bdd169", "filename": "src/test/run-pass/abi/mir/mir_codegen_calls_variadic.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fmir%2Fmir_codegen_calls_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fmir%2Fmir_codegen_calls_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fmir%2Fmir_codegen_calls_variadic.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,22 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_interesting_average(_: i64, ...) -> f64;\n-}\n-\n-fn test<T, U>(a: i64, b: i64, c: i64, d: i64, e: i64, f: T, g: U) -> i64 {\n-    unsafe {\n-        rust_interesting_average(6, a, a as f64,\n-                                    b, b as f64,\n-                                    c, c as f64,\n-                                    d, d as f64,\n-                                    e, e as f64,\n-                                    f, g) as i64\n-    }\n-}\n-\n-fn main(){\n-    assert_eq!(test(10, 20, 30, 40, 50, 60_i64, 60.0_f64), 70);\n-}"}, {"sha": "19edf9779f35ee2a29ff9c5a6cb6771f108d963f", "filename": "src/test/run-pass/abi/numbers-arithmetic/i128-ffi.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fnumbers-arithmetic%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fnumbers-arithmetic%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fnumbers-arithmetic%2Fi128-ffi.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-#![allow(improper_ctypes)]\n-\n-// MSVC doesn't support 128 bit integers, and other Windows\n-// C compilers have very inconsistent views on how the ABI\n-// should look like.\n-\n-// ignore-windows\n-// ignore-32bit\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern \"C\" {\n-    fn identity(f: u128) -> u128;\n-    fn square(f: i128) -> i128;\n-    fn sub(f: i128, f: i128) -> i128;\n-}\n-\n-fn main() {\n-    unsafe {\n-        let a = 0x734C_C2F2_A521;\n-        let b = 0x33EE_0E2A_54E2_59DA_A0E7_8E41;\n-        let b_out = identity(b);\n-        assert_eq!(b, b_out);\n-        let a_square = square(a);\n-        assert_eq!(b, a_square as u128);\n-        let k = 0x1234_5678_9ABC_DEFF_EDCB_A987_6543_210;\n-        let k_d = 0x2468_ACF1_3579_BDFF_DB97_530E_CA86_420;\n-        let k_out = sub(k_d, k);\n-        assert_eq!(k, k_out);\n-    }\n-}"}, {"sha": "15fe3804f9b4ff73c46a2784207715e90a471026", "filename": "src/test/run-pass/abi/proc_macro/auxiliary/test-macros.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fproc_macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fproc_macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fproc_macro%2Fauxiliary%2Ftest-macros.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,26 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn nop_attr(_attr: TokenStream, input: TokenStream) -> TokenStream {\n-    assert!(_attr.to_string().is_empty());\n-    input\n-}\n-\n-#[proc_macro_attribute]\n-pub fn no_output(_attr: TokenStream, _input: TokenStream) -> TokenStream {\n-    assert!(_attr.to_string().is_empty());\n-    assert!(!_input.to_string().is_empty());\n-    \"\".parse().unwrap()\n-}\n-\n-#[proc_macro]\n-pub fn emit_input(input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "99e3f7d14fd16e12ac228daae726065d9359af8f", "filename": "src/test/run-pass/abi/proc_macro/macros-in-extern.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fproc_macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fproc_macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fproc_macro%2Fmacros-in-extern.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,24 +0,0 @@\n-// aux-build:test-macros.rs\n-// ignore-wasm32\n-\n-#![feature(macros_in_extern)]\n-\n-extern crate test_macros;\n-\n-use test_macros::{nop_attr, no_output, emit_input};\n-\n-fn main() {\n-    assert_eq!(unsafe { rust_get_test_int() }, 1isize);\n-    assert_eq!(unsafe { rust_dbg_extern_identity_u32(0xDEADBEEF) }, 0xDEADBEEF);\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    #[no_output]\n-    fn some_definitely_unknown_symbol_which_should_be_removed();\n-\n-    #[nop_attr]\n-    fn rust_get_test_int() -> isize;\n-\n-    emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-}"}, {"sha": "014ccac31b7a55ce156571960bfa57e39515ce71", "filename": "src/test/run-pass/abi/rfcs/rfc1717/library-override.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Frfcs%2Frfc1717%2Flibrary-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Frfcs%2Frfc1717%2Flibrary-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Frfcs%2Frfc1717%2Flibrary-override.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,14 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare no libc to test ffi with\n-// compile-flags: -lstatic=wronglibrary:rust_test_helpers\n-\n-#[link(name = \"wronglibrary\", kind = \"dylib\")]\n-extern \"C\" {\n-    pub fn rust_dbg_extern_identity_u32(x: u32) -> u32;\n-}\n-\n-fn main() {\n-    unsafe {\n-        rust_dbg_extern_identity_u32(42);\n-    }\n-}"}, {"sha": "e90efface687bc6dcf57016e66737ec92bf48b79", "filename": "src/test/run-pass/abi/segfault-no-out-of-stack.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fsegfault-no-out-of-stack.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,48 +0,0 @@\n-#![allow(unused_imports)]\n-// ignore-cloudabi can't run commands\n-// ignore-emscripten can't run commands\n-// ignore-sgx no processes\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-use std::process::{Command, ExitStatus};\n-use std::env;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_get_null_ptr() -> *mut ::libc::c_char;\n-}\n-\n-#[cfg(unix)]\n-fn check_status(status: std::process::ExitStatus)\n-{\n-    use libc;\n-    use std::os::unix::process::ExitStatusExt;\n-\n-    assert!(status.signal() == Some(libc::SIGSEGV)\n-            || status.signal() == Some(libc::SIGBUS));\n-}\n-\n-#[cfg(not(unix))]\n-fn check_status(status: std::process::ExitStatus)\n-{\n-    assert!(!status.success());\n-}\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    if args.len() > 1 && args[1] == \"segfault\" {\n-        unsafe { *rust_get_null_ptr() = 1; }; // trigger a segfault\n-    } else {\n-        let segfault = Command::new(&args[0]).arg(\"segfault\").output().unwrap();\n-        let stderr = String::from_utf8_lossy(&segfault.stderr);\n-        let stdout = String::from_utf8_lossy(&segfault.stdout);\n-        println!(\"stdout: {}\", stdout);\n-        println!(\"stderr: {}\", stderr);\n-        println!(\"status: {}\", segfault.status);\n-        check_status(segfault.status);\n-        assert!(!stderr.contains(\"has overflowed its stack\"));\n-    }\n-}"}, {"sha": "1274f032a3e298fdaac584eecdd6c1dbc7a83d09", "filename": "src/test/run-pass/abi/stack-probes-lto.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fstack-probes-lto.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,18 +0,0 @@\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-mips\n-// ignore-mips64\n-// ignore-powerpc\n-// ignore-s390x\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-wasm\n-// ignore-cloudabi no processes\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n-// ignore-musl FIXME #31506\n-// ignore-pretty\n-// compile-flags: -C lto\n-// no-prefer-dynamic\n-\n-include!(\"stack-probes.rs\");"}, {"sha": "773d0ace90ed9dbc25792c4097c68e45768645d1", "filename": "src/test/run-pass/abi/stack-probes.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fstack-probes.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,67 +0,0 @@\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-mips\n-// ignore-mips64\n-// ignore-powerpc\n-// ignore-s390x\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-wasm\n-// ignore-cloudabi no processes\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n-// ignore-musl FIXME #31506\n-\n-use std::mem;\n-use std::process::Command;\n-use std::thread;\n-use std::env;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    #[link_name = \"rust_dbg_extern_identity_u64\"]\n-    fn black_box(u: u64);\n-}\n-\n-fn main() {\n-    let args = env::args().skip(1).collect::<Vec<_>>();\n-    if args.len() > 0 {\n-        match &args[0][..] {\n-            \"main-thread\" => recurse(&[]),\n-            \"child-thread\" => thread::spawn(|| recurse(&[])).join().unwrap(),\n-            _ => panic!(),\n-        }\n-        return\n-    }\n-\n-    let me = env::current_exe().unwrap();\n-\n-    // The linux kernel has some different behavior for the main thread because\n-    // the main thread's stack can typically grow. We can't always guarantee\n-    // that we report stack overflow on the main thread, see #43052 for some\n-    // details\n-    if cfg!(not(target_os = \"linux\")) {\n-        assert_overflow(Command::new(&me).arg(\"main-thread\"));\n-    }\n-    assert_overflow(Command::new(&me).arg(\"child-thread\"));\n-}\n-\n-#[allow(unconditional_recursion)]\n-fn recurse(array: &[u64]) {\n-    unsafe { black_box(array.as_ptr() as u64); }\n-    #[allow(deprecated)]\n-    let local: [_; 1024] = unsafe { mem::uninitialized() };\n-    recurse(&local);\n-}\n-\n-fn assert_overflow(cmd: &mut Command) {\n-    let output = cmd.output().unwrap();\n-    assert!(!output.status.success());\n-    let stdout = String::from_utf8_lossy(&output.stdout);\n-    let stderr = String::from_utf8_lossy(&output.stderr);\n-    println!(\"status: {}\", output.status);\n-    println!(\"stdout: {}\", stdout);\n-    println!(\"stderr: {}\", stderr);\n-    assert!(stdout.is_empty());\n-    assert!(stderr.contains(\"has overflowed its stack\\n\"));\n-}"}, {"sha": "5d6fa416b9895e7e3aa2a1890a64f3c9846589cb", "filename": "src/test/run-pass/abi/statics/static-mut-foreign.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,41 +0,0 @@\n-// run-pass\n-// Constants (static variables) can be used to match in patterns, but mutable\n-// statics cannot. This ensures that there's some form of error if this is\n-// attempted.\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    static mut rust_dbg_static_mut: libc::c_int;\n-    pub fn rust_dbg_static_mut_check_four();\n-}\n-\n-unsafe fn static_bound(_: &'static libc::c_int) {}\n-\n-fn static_bound_set(a: &'static mut libc::c_int) {\n-    *a = 3;\n-}\n-\n-unsafe fn run() {\n-    assert_eq!(rust_dbg_static_mut, 3);\n-    rust_dbg_static_mut = 4;\n-    assert_eq!(rust_dbg_static_mut, 4);\n-    rust_dbg_static_mut_check_four();\n-    rust_dbg_static_mut += 1;\n-    assert_eq!(rust_dbg_static_mut, 5);\n-    rust_dbg_static_mut *= 3;\n-    assert_eq!(rust_dbg_static_mut, 15);\n-    rust_dbg_static_mut = -3;\n-    assert_eq!(rust_dbg_static_mut, -3);\n-    static_bound(&rust_dbg_static_mut);\n-    static_bound_set(&mut rust_dbg_static_mut);\n-}\n-\n-pub fn main() {\n-    unsafe { run() }\n-}"}, {"sha": "5930fc4acbbe365016d44067f87d566d9a7d457f", "filename": "src/test/run-pass/abi/structs-enums/struct-return.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstructs-enums%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fstructs-enums%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fstructs-enums%2Fstruct-return.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,64 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n-\n-#[repr(C)]\n-#[derive(Copy, Clone)]\n-pub struct Floats { a: f64, b: u8, c: f64 }\n-\n-mod rustrt {\n-    use super::{Floats, Quad};\n-\n-    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-    extern {\n-        pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n-        pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n-    }\n-}\n-\n-fn test1() {\n-    unsafe {\n-        let q = Quad { a: 0xaaaa_aaaa_aaaa_aaaa,\n-                 b: 0xbbbb_bbbb_bbbb_bbbb,\n-                 c: 0xcccc_cccc_cccc_cccc,\n-                 d: 0xdddd_dddd_dddd_dddd };\n-        let qq = rustrt::rust_dbg_abi_1(q);\n-        println!(\"a: {:x}\", qq.a as usize);\n-        println!(\"b: {:x}\", qq.b as usize);\n-        println!(\"c: {:x}\", qq.c as usize);\n-        println!(\"d: {:x}\", qq.d as usize);\n-        assert_eq!(qq.a, q.c + 1);\n-        assert_eq!(qq.b, q.d - 1);\n-        assert_eq!(qq.c, q.a + 1);\n-        assert_eq!(qq.d, q.b - 1);\n-    }\n-}\n-\n-#[cfg(target_pointer_width = \"64\")]\n-fn test2() {\n-    unsafe {\n-        let f = Floats { a: 1.234567890e-15_f64,\n-                 b: 0b_1010_1010,\n-                 c: 1.0987654321e-15_f64 };\n-        let ff = rustrt::rust_dbg_abi_2(f);\n-        println!(\"a: {}\", ff.a as f64);\n-        println!(\"b: {}\", ff.b as usize);\n-        println!(\"c: {}\", ff.c as f64);\n-        assert_eq!(ff.a, f.c + 1.0f64);\n-        assert_eq!(ff.b, 0xff);\n-        assert_eq!(ff.c, f.a - 1.0f64);\n-    }\n-}\n-\n-#[cfg(target_pointer_width = \"32\")]\n-fn test2() {\n-}\n-\n-pub fn main() {\n-    test1();\n-    test2();\n-}"}, {"sha": "00f04d5b7ff3de7358f0399ce6b7ef5db7b1957a", "filename": "src/test/run-pass/abi/union/union-c-interop.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Funion%2Funion-c-interop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Funion%2Funion-c-interop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Funion%2Funion-c-interop.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,37 +0,0 @@\n-// run-pass\n-#![allow(non_snake_case)]\n-\n-// ignore-wasm32-bare no libc to test ffi with\n-\n-#[derive(Clone, Copy)]\n-#[repr(C)]\n-struct LARGE_INTEGER_U {\n-    LowPart: u32,\n-    HighPart: u32,\n-}\n-\n-#[derive(Clone, Copy)]\n-#[repr(C)]\n-union LARGE_INTEGER {\n-  __unnamed__: LARGE_INTEGER_U,\n-  u: LARGE_INTEGER_U,\n-  QuadPart: u64,\n-}\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern \"C\" {\n-    fn increment_all_parts(_: LARGE_INTEGER) -> LARGE_INTEGER;\n-}\n-\n-fn main() {\n-    unsafe {\n-        let mut li = LARGE_INTEGER { QuadPart: 0 };\n-        let li_c = increment_all_parts(li);\n-        li.__unnamed__.LowPart += 1;\n-        li.__unnamed__.HighPart += 1;\n-        li.u.LowPart += 1;\n-        li.u.HighPart += 1;\n-        li.QuadPart += 1;\n-        assert_eq!(li.QuadPart, li_c.QuadPart);\n-    }\n-}"}, {"sha": "d6fbb1773b29fb103ad3d7fbac70f0500e41ccea", "filename": "src/test/run-pass/abi/variadic-ffi.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90d0876d17c8ce3cb903c867acd70cb8379de60/src%2Ftest%2Frun-pass%2Fabi%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi%2Fvariadic-ffi.rs?ref=a90d0876d17c8ce3cb903c867acd70cb8379de60", "patch": "@@ -1,83 +0,0 @@\n-// ignore-wasm32-bare no libc to test ffi with\n-#![feature(c_variadic)]\n-\n-use std::ffi::VaList;\n-\n-#[link(name = \"rust_test_helpers\", kind = \"static\")]\n-extern {\n-    fn rust_interesting_average(_: u64, ...) -> f64;\n-\n-    // FIXME: we need to disable this lint for `VaList`,\n-    // since it contains a `MaybeUninit<i32>` on the asmjs target,\n-    // and this type isn't FFI-safe. This is OK for now,\n-    // since the type is layout-compatible with `i32`.\n-    #[cfg_attr(target_arch = \"asmjs\", allow(improper_ctypes))]\n-    fn rust_valist_interesting_average(_: u64, _: VaList) -> f64;\n-}\n-\n-pub unsafe extern \"C\" fn test_valist_forward(n: u64, mut ap: ...) -> f64 {\n-    rust_valist_interesting_average(n, ap.as_va_list())\n-}\n-\n-pub unsafe extern \"C\" fn test_va_copy(_: u64, mut ap: ...) {\n-    let mut ap2 = ap.clone();\n-    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 30);\n-\n-    // Advance one pair in the copy before checking\n-    let mut ap2 = ap.clone();\n-    let _ = ap2.arg::<u64>();\n-    let _ = ap2.arg::<f64>();\n-    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 50);\n-\n-    // Advance one pair in the original\n-    let _ = ap.arg::<u64>();\n-    let _ = ap.arg::<f64>();\n-\n-    let mut ap2 = ap.clone();\n-    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 50);\n-\n-    let mut ap2 = ap.clone();\n-    let _ = ap2.arg::<u64>();\n-    let _ = ap2.arg::<f64>();\n-    assert_eq!(rust_valist_interesting_average(2, ap2.as_va_list()) as i64, 70);\n-}\n-\n-pub fn main() {\n-    // Call without variadic arguments\n-    unsafe {\n-        assert!(rust_interesting_average(0).is_nan());\n-    }\n-\n-    // Call with direct arguments\n-    unsafe {\n-        assert_eq!(rust_interesting_average(1, 10i64, 10.0f64) as i64, 20);\n-    }\n-\n-    // Call with named arguments, variable number of them\n-    let (x1, x2, x3, x4) = (10i64, 10.0f64, 20i64, 20.0f64);\n-    unsafe {\n-        assert_eq!(rust_interesting_average(2, x1, x2, x3, x4) as i64, 30);\n-    }\n-\n-    // A function that takes a function pointer\n-    unsafe fn call(fp: unsafe extern fn(u64, ...) -> f64) {\n-        let (x1, x2, x3, x4) = (10i64, 10.0f64, 20i64, 20.0f64);\n-        assert_eq!(fp(2, x1, x2, x3, x4) as i64, 30);\n-    }\n-\n-    unsafe {\n-        call(rust_interesting_average);\n-\n-        // Make a function pointer, pass indirectly\n-        let x: unsafe extern fn(u64, ...) -> f64 = rust_interesting_average;\n-        call(x);\n-    }\n-\n-    unsafe {\n-        assert_eq!(test_valist_forward(2, 10i64, 10f64, 20i64, 20f64) as i64, 30);\n-    }\n-\n-    unsafe {\n-        test_va_copy(4, 10i64, 10f64, 20i64, 20f64, 30i64, 30f64, 40i64, 40f64);\n-    }\n-}"}]}