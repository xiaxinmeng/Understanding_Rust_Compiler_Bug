{"sha": "e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NmE4YzI2MGMwYmNjNGU3YTg5NDNmMDFkNzVkNzBmZjY0MGZiMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T23:33:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T23:33:18Z"}, "message": "Auto merge of #87285 - GuillaumeGomez:intra-doc-span, r=estebank\n\nImprove intra doc errors display\n\n#87169\n\n`@jyn514` This is what I had in mind to avoid having duplicated backticks. I also gave a try to simply updating the span for the suggestion/help messages but I think this current one is better because less \"noisy\". Anyway, that allows you to see the result. ;)", "tree": {"sha": "181ac3fd98a0b5b7855a0a4cbb622102918073f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/181ac3fd98a0b5b7855a0a4cbb622102918073f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "html_url": "https://github.com/rust-lang/rust/commit/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "492723897e9b4db6701b3a75b72618d08a7d5319", "url": "https://api.github.com/repos/rust-lang/rust/commits/492723897e9b4db6701b3a75b72618d08a7d5319", "html_url": "https://github.com/rust-lang/rust/commit/492723897e9b4db6701b3a75b72618d08a7d5319"}, {"sha": "0f7f85ede9e816c01f9b0696b6113f2b4fad0d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7f85ede9e816c01f9b0696b6113f2b4fad0d02", "html_url": "https://github.com/rust-lang/rust/commit/0f7f85ede9e816c01f9b0696b6113f2b4fad0d02"}], "stats": {"total": 355, "additions": 239, "deletions": 116}, "files": [{"sha": "ddb7b85d34a0483aae6300ae5695d99affdf3e66", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -19,7 +19,7 @@ use rustc_resolve::ParentScope;\n use rustc_session::lint::Lint;\n use rustc_span::hygiene::{MacroKind, SyntaxContext};\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{BytePos, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use pulldown_cmark::LinkType;\n@@ -1193,16 +1193,20 @@ impl LinkCollector<'_, '_> {\n         let report_mismatch = |specified: Disambiguator, resolved: Disambiguator| {\n             // The resolved item did not match the disambiguator; give a better error than 'not found'\n             let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-            let callback = |diag: &mut DiagnosticBuilder<'_>, sp| {\n+            let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n                 let note = format!(\n                     \"this link resolved to {} {}, which is not {} {}\",\n                     resolved.article(),\n                     resolved.descr(),\n                     specified.article(),\n                     specified.descr()\n                 );\n-                diag.note(&note);\n-                suggest_disambiguator(resolved, diag, path_str, dox, sp, &ori_link.range);\n+                if let Some(sp) = sp {\n+                    diag.span_label(sp, &note);\n+                } else {\n+                    diag.note(&note);\n+                }\n+                suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n             };\n             report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n         };\n@@ -1699,6 +1703,51 @@ impl Suggestion {\n             Self::RemoveDisambiguator => path_str.into(),\n         }\n     }\n+\n+    fn as_help_span(\n+        &self,\n+        path_str: &str,\n+        ori_link: &str,\n+        sp: rustc_span::Span,\n+    ) -> Vec<(rustc_span::Span, String)> {\n+        let inner_sp = match ori_link.find('(') {\n+            Some(index) => sp.with_hi(sp.lo() + BytePos(index as _)),\n+            None => sp,\n+        };\n+        let inner_sp = match ori_link.find('!') {\n+            Some(index) => inner_sp.with_hi(inner_sp.lo() + BytePos(index as _)),\n+            None => inner_sp,\n+        };\n+        let inner_sp = match ori_link.find('@') {\n+            Some(index) => inner_sp.with_lo(inner_sp.lo() + BytePos(index as u32 + 1)),\n+            None => inner_sp,\n+        };\n+        match self {\n+            Self::Prefix(prefix) => {\n+                // FIXME: if this is an implied shortcut link, it's bad style to suggest `@`\n+                let mut sugg = vec![(sp.with_hi(inner_sp.lo()), format!(\"{}@\", prefix))];\n+                if sp.hi() != inner_sp.hi() {\n+                    sugg.push((inner_sp.shrink_to_hi().with_hi(sp.hi()), String::new()));\n+                }\n+                sugg\n+            }\n+            Self::Function => {\n+                let mut sugg = vec![(inner_sp.shrink_to_hi().with_hi(sp.hi()), \"()\".to_string())];\n+                if sp.lo() != inner_sp.lo() {\n+                    sugg.push((inner_sp.shrink_to_lo().with_lo(sp.lo()), String::new()));\n+                }\n+                sugg\n+            }\n+            Self::Macro => {\n+                let mut sugg = vec![(inner_sp.shrink_to_hi(), \"!\".to_string())];\n+                if sp.lo() != inner_sp.lo() {\n+                    sugg.push((inner_sp.shrink_to_lo().with_lo(sp.lo()), String::new()));\n+                }\n+                sugg\n+            }\n+            Self::RemoveDisambiguator => return vec![(sp, path_str.into())],\n+        }\n+    }\n }\n \n /// Reports a diagnostic for an intra-doc link.\n@@ -1732,7 +1781,16 @@ fn report_diagnostic(\n     tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n-        let span = super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs);\n+        let span =\n+            super::source_span_for_markdown_range(tcx, dox, link_range, &item.attrs).map(|sp| {\n+                if dox.bytes().nth(link_range.start) == Some(b'`')\n+                    && dox.bytes().nth(link_range.end - 1) == Some(b'`')\n+                {\n+                    sp.with_lo(sp.lo() + BytePos(1)).with_hi(sp.hi() - BytePos(1))\n+                } else {\n+                    sp\n+                }\n+            });\n \n         if let Some(sp) = span {\n             diag.set_span(sp);\n@@ -1938,9 +1996,8 @@ fn resolution_failure(\n                                 disambiguator,\n                                 diag,\n                                 path_str,\n-                                diag_info.dox,\n+                                diag_info.ori_link,\n                                 sp,\n-                                &diag_info.link_range,\n                             )\n                         }\n \n@@ -2007,7 +2064,7 @@ fn anchor_failure(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, failure: A\n             if let Some((fragment_offset, _)) =\n                 diag_info.ori_link.char_indices().filter(|(_, x)| *x == '#').nth(anchor_idx)\n             {\n-                sp = sp.with_lo(sp.lo() + rustc_span::BytePos(fragment_offset as _));\n+                sp = sp.with_lo(sp.lo() + BytePos(fragment_offset as _));\n             }\n             diag.span_label(sp, \"invalid anchor\");\n         }\n@@ -2075,14 +2132,7 @@ fn ambiguity_error(\n \n         for res in candidates {\n             let disambiguator = Disambiguator::from_res(res);\n-            suggest_disambiguator(\n-                disambiguator,\n-                diag,\n-                path_str,\n-                diag_info.dox,\n-                sp,\n-                &diag_info.link_range,\n-            );\n+            suggest_disambiguator(disambiguator, diag, path_str, diag_info.ori_link, sp);\n         }\n     });\n }\n@@ -2093,21 +2143,20 @@ fn suggest_disambiguator(\n     disambiguator: Disambiguator,\n     diag: &mut DiagnosticBuilder<'_>,\n     path_str: &str,\n-    dox: &str,\n+    ori_link: &str,\n     sp: Option<rustc_span::Span>,\n-    link_range: &Range<usize>,\n ) {\n     let suggestion = disambiguator.suggestion();\n     let help = format!(\"to link to the {}, {}\", disambiguator.descr(), suggestion.descr());\n \n     if let Some(sp) = sp {\n-        let msg = if dox.bytes().nth(link_range.start) == Some(b'`') {\n-            format!(\"`{}`\", suggestion.as_help(path_str))\n+        let mut spans = suggestion.as_help_span(path_str, ori_link, sp);\n+        if spans.len() > 1 {\n+            diag.multipart_suggestion(&help, spans, Applicability::MaybeIncorrect);\n         } else {\n-            suggestion.as_help(path_str)\n-        };\n-\n-        diag.span_suggestion(sp, &help, msg, Applicability::MaybeIncorrect);\n+            let (sp, suggestion_text) = spans.pop().unwrap();\n+            diag.span_suggestion_verbose(sp, &help, suggestion_text, Applicability::MaybeIncorrect);\n+        }\n     } else {\n         diag.help(&format!(\"{}: {}\", help, suggestion.as_help(path_str)));\n     }"}, {"sha": "04594ad414250cc1d88072e6d7e764992b86f43b", "filename": "src/test/rustdoc-ui/assoc-item-not-in-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fassoc-item-not-in-scope.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -1,8 +1,8 @@\n error: unresolved link to `S::fmt`\n-  --> $DIR/assoc-item-not-in-scope.rs:4:14\n+  --> $DIR/assoc-item-not-in-scope.rs:4:15\n    |\n LL | /// Link to [`S::fmt`]\n-   |              ^^^^^^^^ the struct `S` has no field or associated item named `fmt`\n+   |               ^^^^^^ the struct `S` has no field or associated item named `fmt`\n    |\n note: the lint level is defined here\n   --> $DIR/assoc-item-not-in-scope.rs:1:9"}, {"sha": "e87c26e9cc5b0d69921a825e56e83ab49d7a0a8c", "filename": "src/test/rustdoc-ui/intra-doc/ambiguity.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -12,26 +12,26 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@true]\n-   |      ^^^^^^^^\n+   |      ^^^^\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL | /// [prim@true]\n-   |      ^^^^^^^^^\n+   |      ^^^^^\n \n error: `ambiguous` is both a struct and a function\n-  --> $DIR/ambiguity.rs:27:6\n+  --> $DIR/ambiguity.rs:27:7\n    |\n LL | /// [`ambiguous`] is ambiguous.\n-   |      ^^^^^^^^^^^ ambiguous link\n+   |       ^^^^^^^^^ ambiguous link\n    |\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [`struct@ambiguous`] is ambiguous.\n-   |      ^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^\n help: to link to the function, add parentheses\n    |\n LL | /// [`ambiguous()`] is ambiguous.\n-   |      ^^^^^^^^^^^^^\n+   |                ^^\n \n error: `ambiguous` is both a struct and a function\n   --> $DIR/ambiguity.rs:29:6\n@@ -42,30 +42,30 @@ LL | /// [ambiguous] is ambiguous.\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [struct@ambiguous] is ambiguous.\n-   |      ^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^\n help: to link to the function, add parentheses\n    |\n LL | /// [ambiguous()] is ambiguous.\n-   |      ^^^^^^^^^^^\n+   |               ^^\n \n error: `multi_conflict` is a struct, a function, and a macro\n-  --> $DIR/ambiguity.rs:31:6\n+  --> $DIR/ambiguity.rs:31:7\n    |\n LL | /// [`multi_conflict`] is a three-way conflict.\n-   |      ^^^^^^^^^^^^^^^^ ambiguous link\n+   |       ^^^^^^^^^^^^^^ ambiguous link\n    |\n help: to link to the struct, prefix with `struct@`\n    |\n LL | /// [`struct@multi_conflict`] is a three-way conflict.\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^\n help: to link to the function, add parentheses\n    |\n LL | /// [`multi_conflict()`] is a three-way conflict.\n-   |      ^^^^^^^^^^^^^^^^^^\n+   |                     ^^\n help: to link to the macro, add an exclamation mark\n    |\n LL | /// [`multi_conflict!`] is a three-way conflict.\n-   |      ^^^^^^^^^^^^^^^^^\n+   |                     ^\n \n error: `type_and_value` is both a module and a constant\n   --> $DIR/ambiguity.rs:33:16\n@@ -76,26 +76,26 @@ LL | /// Ambiguous [type_and_value].\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// Ambiguous [mod@type_and_value].\n-   |                ^^^^^^^^^^^^^^^^^^\n+   |                ^^^^\n help: to link to the constant, prefix with `const@`\n    |\n LL | /// Ambiguous [const@type_and_value].\n-   |                ^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^\n \n error: `foo::bar` is both an enum and a function\n-  --> $DIR/ambiguity.rs:35:42\n+  --> $DIR/ambiguity.rs:35:43\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar`].\n-   |                                          ^^^^^^^^^^ ambiguous link\n+   |                                           ^^^^^^^^ ambiguous link\n    |\n help: to link to the enum, prefix with `enum@`\n    |\n LL | /// Ambiguous non-implied shortcut link [`enum@foo::bar`].\n-   |                                          ^^^^^^^^^^^^^^^\n+   |                                           ^^^^^\n help: to link to the function, add parentheses\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar()`].\n-   |                                          ^^^^^^^^^^^^\n+   |                                                   ^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "142008cf76508f5acddc1b6743a2c398a5428b8a", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -1,7 +1,9 @@\n #![deny(rustdoc::broken_intra_doc_links)]\n //~^ NOTE lint level is defined\n pub enum S {}\n+fn S() {}\n \n+#[macro_export]\n macro_rules! m {\n     () => {};\n }\n@@ -41,6 +43,12 @@ trait T {}\n //~| NOTE this link resolved\n //~| HELP add an exclamation mark\n \n+/// Link to [m()]\n+//~^ ERROR unresolved link to `m`\n+//~| NOTE this link resolves to the macro `m`\n+//~| HELP add an exclamation mark\n+/// and to [m!()]\n+\n /// Link to [const@s]\n //~^ ERROR incompatible link kind for `s`\n //~| NOTE this link resolved"}, {"sha": "8d1519516ee76d7833d8de96c1b82f565239c8c4", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "modified", "additions": 78, "deletions": 34, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -1,95 +1,139 @@\n error: incompatible link kind for `S`\n-  --> $DIR/disambiguator-mismatch.rs:14:14\n+  --> $DIR/disambiguator-mismatch.rs:16:14\n    |\n LL | /// Link to [struct@S]\n-   |              ^^^^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n+   |              ^^^^^^^^ this link resolved to an enum, which is not a struct\n    |\n note: the lint level is defined here\n   --> $DIR/disambiguator-mismatch.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this link resolved to an enum, which is not a struct\n+help: to link to the enum, prefix with `enum@`\n+   |\n+LL | /// Link to [enum@S]\n+   |              ^^^^^\n \n error: incompatible link kind for `S`\n-  --> $DIR/disambiguator-mismatch.rs:19:14\n+  --> $DIR/disambiguator-mismatch.rs:21:14\n    |\n LL | /// Link to [mod@S]\n-   |              ^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n+   |              ^^^^^ this link resolved to an enum, which is not a module\n+   |\n+help: to link to the enum, prefix with `enum@`\n    |\n-   = note: this link resolved to an enum, which is not a module\n+LL | /// Link to [enum@S]\n+   |              ^^^^^\n \n error: incompatible link kind for `S`\n-  --> $DIR/disambiguator-mismatch.rs:24:14\n+  --> $DIR/disambiguator-mismatch.rs:26:14\n    |\n LL | /// Link to [union@S]\n-   |              ^^^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n+   |              ^^^^^^^ this link resolved to an enum, which is not a union\n    |\n-   = note: this link resolved to an enum, which is not a union\n+help: to link to the enum, prefix with `enum@`\n+   |\n+LL | /// Link to [enum@S]\n+   |              ^^^^^\n \n error: incompatible link kind for `S`\n-  --> $DIR/disambiguator-mismatch.rs:29:14\n+  --> $DIR/disambiguator-mismatch.rs:31:14\n    |\n LL | /// Link to [trait@S]\n-   |              ^^^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n+   |              ^^^^^^^ this link resolved to an enum, which is not a trait\n+   |\n+help: to link to the enum, prefix with `enum@`\n    |\n-   = note: this link resolved to an enum, which is not a trait\n+LL | /// Link to [enum@S]\n+   |              ^^^^^\n \n error: incompatible link kind for `T`\n-  --> $DIR/disambiguator-mismatch.rs:34:14\n+  --> $DIR/disambiguator-mismatch.rs:36:14\n    |\n LL | /// Link to [struct@T]\n-   |              ^^^^^^^^ help: to link to the trait, prefix with `trait@`: `trait@T`\n+   |              ^^^^^^^^ this link resolved to a trait, which is not a struct\n    |\n-   = note: this link resolved to a trait, which is not a struct\n+help: to link to the trait, prefix with `trait@`\n+   |\n+LL | /// Link to [trait@T]\n+   |              ^^^^^^\n \n error: incompatible link kind for `m`\n-  --> $DIR/disambiguator-mismatch.rs:39:14\n+  --> $DIR/disambiguator-mismatch.rs:41:14\n    |\n LL | /// Link to [derive@m]\n-   |              ^^^^^^^^ help: to link to the macro, add an exclamation mark: `m!`\n+   |              ^^^^^^^^ this link resolved to a macro, which is not a derive macro\n+   |\n+help: to link to the macro, add an exclamation mark\n    |\n-   = note: this link resolved to a macro, which is not a derive macro\n+LL | /// Link to [m!]\n+   |             --^\n+\n+error: unresolved link to `m`\n+  --> $DIR/disambiguator-mismatch.rs:46:14\n+   |\n+LL | /// Link to [m()]\n+   |              ^^^ this link resolves to the macro `m`, which is not in the value namespace\n+   |\n+help: to link to the macro, add an exclamation mark\n+   |\n+LL | /// Link to [m!()]\n+   |               ^\n \n error: incompatible link kind for `s`\n-  --> $DIR/disambiguator-mismatch.rs:44:14\n+  --> $DIR/disambiguator-mismatch.rs:52:14\n    |\n LL | /// Link to [const@s]\n-   |              ^^^^^^^ help: to link to the static, prefix with `static@`: `static@s`\n+   |              ^^^^^^^ this link resolved to a static, which is not a constant\n    |\n-   = note: this link resolved to a static, which is not a constant\n+help: to link to the static, prefix with `static@`\n+   |\n+LL | /// Link to [static@s]\n+   |              ^^^^^^^\n \n error: incompatible link kind for `c`\n-  --> $DIR/disambiguator-mismatch.rs:49:14\n+  --> $DIR/disambiguator-mismatch.rs:57:14\n    |\n LL | /// Link to [static@c]\n-   |              ^^^^^^^^ help: to link to the constant, prefix with `const@`: `const@c`\n+   |              ^^^^^^^^ this link resolved to a constant, which is not a static\n+   |\n+help: to link to the constant, prefix with `const@`\n    |\n-   = note: this link resolved to a constant, which is not a static\n+LL | /// Link to [const@c]\n+   |              ^^^^^^\n \n error: incompatible link kind for `c`\n-  --> $DIR/disambiguator-mismatch.rs:54:14\n+  --> $DIR/disambiguator-mismatch.rs:62:14\n    |\n LL | /// Link to [fn@c]\n-   |              ^^^^ help: to link to the constant, prefix with `const@`: `const@c`\n+   |              ^^^^ this link resolved to a constant, which is not a function\n    |\n-   = note: this link resolved to a constant, which is not a function\n+help: to link to the constant, prefix with `const@`\n+   |\n+LL | /// Link to [const@c]\n+   |              ^^^^^^\n \n error: incompatible link kind for `c`\n-  --> $DIR/disambiguator-mismatch.rs:59:14\n+  --> $DIR/disambiguator-mismatch.rs:67:14\n    |\n LL | /// Link to [c()]\n-   |              ^^^ help: to link to the constant, prefix with `const@`: `const@c`\n+   |              ^^^ this link resolved to a constant, which is not a function\n+   |\n+help: to link to the constant, prefix with `const@`\n    |\n-   = note: this link resolved to a constant, which is not a function\n+LL | /// Link to [const@c]\n+   |              ^^^^^^--\n \n error: incompatible link kind for `f`\n-  --> $DIR/disambiguator-mismatch.rs:64:14\n+  --> $DIR/disambiguator-mismatch.rs:72:14\n    |\n LL | /// Link to [const@f]\n-   |              ^^^^^^^ help: to link to the function, add parentheses: `f()`\n+   |              ^^^^^^^ this link resolved to a function, which is not a constant\n+   |\n+help: to link to the function, add parentheses\n    |\n-   = note: this link resolved to a function, which is not a constant\n+LL | /// Link to [f()]\n+   |             --^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "87d107b9c573be30a167d635e348596983e90c3e", "filename": "src/test/rustdoc-ui/intra-doc/errors.stderr", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -92,37 +92,45 @@ error: unresolved link to `Vec::into_iter`\n   --> $DIR/errors.rs:63:6\n    |\n LL | /// [type@Vec::into_iter]\n-   |      ^^^^^^^^^^^^^^^^^^^\n-   |      |\n-   |      this link resolves to the associated function `into_iter`, which is not in the type namespace\n-   |      help: to link to the associated function, add parentheses: `Vec::into_iter()`\n+   |      ^^^^^^^^^^^^^^^^^^^ this link resolves to the associated function `into_iter`, which is not in the type namespace\n+   |\n+help: to link to the associated function, add parentheses\n+   |\n+LL | /// [Vec::into_iter()]\n+   |     --             ^^\n \n error: unresolved link to `S`\n   --> $DIR/errors.rs:68:6\n    |\n LL | /// [S!]\n-   |      ^^\n-   |      |\n-   |      this link resolves to the struct `S`, which is not in the macro namespace\n-   |      help: to link to the struct, prefix with `struct@`: `struct@S`\n+   |      ^^ this link resolves to the struct `S`, which is not in the macro namespace\n+   |\n+help: to link to the struct, prefix with `struct@`\n+   |\n+LL | /// [struct@S]\n+   |      ^^^^^^^--\n \n error: unresolved link to `S::h`\n   --> $DIR/errors.rs:78:6\n    |\n LL | /// [type@S::h]\n-   |      ^^^^^^^^^\n-   |      |\n-   |      this link resolves to the associated function `h`, which is not in the type namespace\n-   |      help: to link to the associated function, add parentheses: `S::h()`\n+   |      ^^^^^^^^^ this link resolves to the associated function `h`, which is not in the type namespace\n+   |\n+help: to link to the associated function, add parentheses\n+   |\n+LL | /// [S::h()]\n+   |     --   ^^\n \n error: unresolved link to `T::g`\n   --> $DIR/errors.rs:86:6\n    |\n LL | /// [type@T::g]\n-   |      ^^^^^^^^^\n-   |      |\n-   |      this link resolves to the associated function `g`, which is not in the type namespace\n-   |      help: to link to the associated function, add parentheses: `T::g()`\n+   |      ^^^^^^^^^ this link resolves to the associated function `g`, which is not in the type namespace\n+   |\n+help: to link to the associated function, add parentheses\n+   |\n+LL | /// [T::g()]\n+   |     --   ^^\n \n error: unresolved link to `T::h`\n   --> $DIR/errors.rs:91:6\n@@ -134,10 +142,12 @@ error: unresolved link to `m`\n   --> $DIR/errors.rs:98:6\n    |\n LL | /// [m()]\n-   |      ^^^\n-   |      |\n-   |      this link resolves to the macro `m`, which is not in the value namespace\n-   |      help: to link to the macro, add an exclamation mark: `m!`\n+   |      ^^^ this link resolves to the macro `m`, which is not in the value namespace\n+   |\n+help: to link to the macro, add an exclamation mark\n+   |\n+LL | /// [m!()]\n+   |       ^\n \n error: aborting due to 20 previous errors\n "}, {"sha": "3ab35d2df07b0c3f0c98ddc67fee0f393feb61bb", "filename": "src/test/rustdoc-ui/intra-doc/field-ice.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ffield-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ffield-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ffield-ice.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -1,15 +1,18 @@\n error: incompatible link kind for `Foo::bar`\n-  --> $DIR/field-ice.rs:5:6\n+  --> $DIR/field-ice.rs:5:7\n    |\n LL | /// [`Foo::bar()`]\n-   |      ^^^^^^^^^^^^ help: to link to the field, remove the disambiguator: ``Foo::bar``\n+   |       ^^^^^^^^^^ this link resolved to a field, which is not a function\n    |\n note: the lint level is defined here\n   --> $DIR/field-ice.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this link resolved to a field, which is not a function\n+help: to link to the field, remove the disambiguator\n+   |\n+LL | /// [`Foo::bar`]\n+   |       ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c2de5607ed64ae6afeae2329e8f672ab52b7af58", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -2,14 +2,17 @@ error: incompatible link kind for `u8::MIN`\n   --> $DIR/incompatible-primitive-disambiguator.rs:2:6\n    |\n LL | //! [static@u8::MIN]\n-   |      ^^^^^^^^^^^^^^ help: to link to the associated constant, prefix with `const@`: `const@u8::MIN`\n+   |      ^^^^^^^^^^^^^^ this link resolved to an associated constant, which is not a static\n    |\n note: the lint level is defined here\n   --> $DIR/incompatible-primitive-disambiguator.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this link resolved to an associated constant, which is not a static\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | //! [const@u8::MIN]\n+   |      ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4dc1ce209007ee64b243524732c64bb745ea9b3c", "filename": "src/test/rustdoc-ui/intra-doc/prim-conflict.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -12,11 +12,11 @@ LL | #![deny(rustdoc::broken_intra_doc_links)]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n-   |      ^^^^^^^^\n+   |      ^^^^\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL | /// [prim@char]\n-   |      ^^^^^^^^^\n+   |      ^^^^^\n \n error: `char` is both a module and a builtin type\n   --> $DIR/prim-conflict.rs:10:6\n@@ -27,27 +27,33 @@ LL | /// [type@char]\n help: to link to the module, prefix with `mod@`\n    |\n LL | /// [mod@char]\n-   |      ^^^^^^^^\n+   |      ^^^^\n help: to link to the builtin type, prefix with `prim@`\n    |\n LL | /// [prim@char]\n-   |      ^^^^^^^^^\n+   |      ^^^^^\n \n error: incompatible link kind for `char`\n   --> $DIR/prim-conflict.rs:19:6\n    |\n LL | /// [struct@char]\n-   |      ^^^^^^^^^^^ help: to link to the module, prefix with `mod@`: `mod@char`\n+   |      ^^^^^^^^^^^ this link resolved to a module, which is not a struct\n    |\n-   = note: this link resolved to a module, which is not a struct\n+help: to link to the module, prefix with `mod@`\n+   |\n+LL | /// [mod@char]\n+   |      ^^^^\n \n error: incompatible link kind for `char`\n   --> $DIR/prim-conflict.rs:26:10\n    |\n LL |     //! [struct@char]\n-   |          ^^^^^^^^^^^ help: to link to the builtin type, prefix with `prim@`: `prim@char`\n+   |          ^^^^^^^^^^^ this link resolved to a builtin type, which is not a struct\n+   |\n+help: to link to the builtin type, prefix with `prim@`\n    |\n-   = note: this link resolved to a builtin type, which is not a struct\n+LL |     //! [prim@char]\n+   |          ^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "31d2dbe963758a23e70865d1a70fd951111c59de", "filename": "src/test/rustdoc-ui/issue-74134.private.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -1,8 +1,8 @@\n warning: public documentation for `public_item` links to private item `PrivateType`\n-  --> $DIR/issue-74134.rs:19:10\n+  --> $DIR/issue-74134.rs:19:11\n    |\n LL |     /// [`PrivateType`]\n-   |          ^^^^^^^^^^^^^ this item is private\n+   |           ^^^^^^^^^^^ this item is private\n    |\n    = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without"}, {"sha": "6a3173e3e0d6e68e9803d7723032b09d546c693e", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e66a8c260c0bcc4e7a8943f01d75d70ff640fb38/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=e66a8c260c0bcc4e7a8943f01d75d70ff640fb38", "patch": "@@ -1,8 +1,8 @@\n warning: public documentation for `public_item` links to private item `PrivateType`\n-  --> $DIR/issue-74134.rs:19:10\n+  --> $DIR/issue-74134.rs:19:11\n    |\n LL |     /// [`PrivateType`]\n-   |          ^^^^^^^^^^^^^ this item is private\n+   |           ^^^^^^^^^^^ this item is private\n    |\n    = note: `#[warn(rustdoc::private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`"}]}