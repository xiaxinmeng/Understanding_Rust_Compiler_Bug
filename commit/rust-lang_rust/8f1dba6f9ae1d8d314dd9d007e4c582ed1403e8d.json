{"sha": "8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMWRiYTZmOWFlMWQ4ZDMxNGRkOWQwMDdlNGM1ODJlZDE0MDNlOGQ=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-08T16:12:15Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-08T16:12:15Z"}, "message": "feat: add attributes support on struct fields and method #3870\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "e6d269d0a10de37aff7c5f2c2849eab9a9108b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6d269d0a10de37aff7c5f2c2849eab9a9108b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "html_url": "https://github.com/rust-lang/rust/commit/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a5e164838e1dc2abcc6b79d4fc2f96ffd2507c", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a5e164838e1dc2abcc6b79d4fc2f96ffd2507c", "html_url": "https://github.com/rust-lang/rust/commit/18a5e164838e1dc2abcc6b79d4fc2f96ffd2507c"}], "stats": {"total": 73, "additions": 30, "deletions": 43}, "files": [{"sha": "7fc4cd76e1a58b14043aaf23213725707c5862b8", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "patch": "@@ -4,19 +4,17 @@ use std::sync::Arc;\n \n use either::Either;\n use hir_expand::{\n-    hygiene::Hygiene,\n     name::{AsName, Name},\n     InFile,\n };\n use ra_arena::{map::ArenaMap, Arena};\n-use ra_cfg::CfgOptions;\n use ra_prof::profile;\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n-    type_ref::TypeRef, visibility::RawVisibility, EnumId, LocalEnumVariantId, LocalStructFieldId,\n-    Lookup, StructId, UnionId, VariantId,\n+    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef,\n+    visibility::RawVisibility, EnumId, LocalEnumVariantId, LocalStructFieldId, Lookup, StructId,\n+    UnionId, VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -51,8 +49,6 @@ pub struct StructFieldData {\n     pub name: Name,\n     pub type_ref: TypeRef,\n     pub visibility: RawVisibility,\n-    pub attrs: Attrs,\n-    // TODO: add attributes\n }\n \n impl StructData {\n@@ -186,10 +182,6 @@ pub enum StructKind {\n     Unit,\n }\n \n-fn is_cfg_enabled(cfg_options: &CfgOptions, attrs: &Attrs) -> bool {\n-    attrs.by_key(\"cfg\").tt_values().all(|tt| cfg_options.is_cfg_enabled(tt) != Some(false))\n-}\n-\n fn lower_struct(\n     db: &dyn DefDatabase,\n     trace: &mut Trace<StructFieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n@@ -198,41 +190,25 @@ fn lower_struct(\n     match &ast.value {\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n-                let attrs = Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id));\n-\n-                // Need verification about parent cfg_options and current with current attributes\n-                // If it is we are in a case where the cfg is not enabled then we don't have to add this field to check\n-                // if !is_cfg_enabled(&crate_graph[module_id.krate].cfg_options, &attrs) {\n-                //     continue;\n-                // }\n-\n                 trace.alloc(\n                     || Either::Left(fd.clone()),\n                     || StructFieldData {\n                         name: Name::new_tuple_field(i),\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n-                        attrs: Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id)),\n                     },\n                 );\n             }\n             StructKind::Tuple\n         }\n         ast::StructKind::Record(fl) => {\n             for fd in fl.fields() {\n-                let attrs = Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id));\n-                // Need verification about parent cfg_options and current with current attributes\n-                // If it is we are in a case where the cfg is not enabled then we don't have to add this field to check\n-                // if !is_cfg_enabled(&crate_graph[module_id.krate].cfg_options, &attrs) {\n-                //     continue;\n-                // }\n                 trace.alloc(\n                     || Either::Right(fd.clone()),\n                     || StructFieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n-                        attrs: Attrs::new(&fd, &Hygiene::new(db.upcast(), ast.file_id)),\n                     },\n                 );\n             }"}, {"sha": "606ec48b084382f693033aff7733cd9a47e4f547", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "patch": "@@ -7,6 +7,7 @@ use hir_expand::{\n     name::{name, AsName, Name},\n     AstId, InFile,\n };\n+use ra_cfg::CfgOptions;\n use ra_prof::profile;\n use ra_syntax::ast::{\n     self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner, VisibilityOwner,\n@@ -67,6 +68,7 @@ impl FunctionData {\n             }\n         }\n         let attrs = Attrs::new(&src.value, &Hygiene::new(db.upcast(), src.file_id));\n+\n         let ret_type = if let Some(type_ref) = src.value.ret_type().and_then(|rt| rt.type_ref()) {\n             TypeRef::from_ast(type_ref)\n         } else {\n@@ -215,6 +217,7 @@ impl ImplData {\n         let module_id = impl_loc.container.module(db);\n \n         let mut items = Vec::new();\n+\n         if let Some(item_list) = src.value.item_list() {\n             items.extend(collect_impl_items(db, item_list.impl_items(), src.file_id, id));\n             items.extend(collect_impl_items_in_macros(\n@@ -315,39 +318,53 @@ fn collect_impl_items_in_macro(\n     }\n }\n \n+fn is_cfg_enabled(cfg_options: &CfgOptions, attrs: &Attrs) -> bool {\n+    attrs.by_key(\"cfg\").tt_values().all(|tt| cfg_options.is_cfg_enabled(tt) != Some(false))\n+}\n+\n fn collect_impl_items(\n     db: &dyn DefDatabase,\n     impl_items: impl Iterator<Item = ImplItem>,\n     file_id: crate::HirFileId,\n     id: ImplId,\n ) -> Vec<AssocItemId> {\n     let items = db.ast_id_map(file_id);\n+    let crate_graph = db.crate_graph();\n+    let module_id = id.lookup(db).container.module(db);\n \n     impl_items\n-        .map(|item_node| match item_node {\n+        .filter_map(|item_node| match item_node {\n             ast::ImplItem::FnDef(it) => {\n                 let def = FunctionLoc {\n                     container: AssocContainerId::ImplId(id),\n                     ast_id: AstId::new(file_id, items.ast_id(&it)),\n                 }\n                 .intern(db);\n-                def.into()\n+\n+                if !is_cfg_enabled(\n+                    &crate_graph[module_id.krate].cfg_options,\n+                    &db.function_data(def).attrs,\n+                ) {\n+                    None\n+                } else {\n+                    Some(def.into())\n+                }\n             }\n             ast::ImplItem::ConstDef(it) => {\n                 let def = ConstLoc {\n                     container: AssocContainerId::ImplId(id),\n                     ast_id: AstId::new(file_id, items.ast_id(&it)),\n                 }\n                 .intern(db);\n-                def.into()\n+                Some(def.into())\n             }\n             ast::ImplItem::TypeAliasDef(it) => {\n                 let def = TypeAliasLoc {\n                     container: AssocContainerId::ImplId(id),\n                     ast_id: AstId::new(file_id, items.ast_id(&it)),\n                 }\n                 .intern(db);\n-                def.into()\n+                Some(def.into())\n             }\n         })\n         .collect()"}, {"sha": "fb779cbef2671063b38ccb3128016cf6ea6ebe01", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "patch": "@@ -166,14 +166,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         let variant_data = variant_data(db.upcast(), variant_def);\n \n-        let lit_fields: FxHashSet<_> = fields\n-            .iter()\n-            .filter_map(|f| {\n-                // TODO: check if cfg_is_enabled with .attrs ?\n-\n-                Some(&f.name)\n-            })\n-            .collect();\n+        let lit_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n         let missed_fields: Vec<Name> = variant_data\n             .fields()\n             .iter()"}, {"sha": "060814e53217473f8d51abad059c4b1af251e4a6", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=8f1dba6f9ae1d8d314dd9d007e4c582ed1403e8d", "patch": "@@ -324,7 +324,7 @@ fn no_such_field_diagnostics() {\n fn no_such_field_with_feature_flag_diagnostics() {\n     let diagnostics = TestDB::with_files(\n         r#\"\n-        //- /lib.rs\n+        //- /lib.rs crate:foo cfg:feature=foo\n         struct MyStruct {\n             my_val: usize,\n             #[cfg(feature = \"foo\")]\n@@ -336,15 +336,16 @@ fn no_such_field_with_feature_flag_diagnostics() {\n             pub(crate) fn new(my_val: usize, bar: bool) -> Self {\n                 Self { my_val, bar }\n             }\n-\n+        \n             #[cfg(not(feature = \"foo\"))]\n             pub(crate) fn new(my_val: usize, _bar: bool) -> Self {\n                 Self { my_val }\n             }\n         }\n         \"#,\n     )\n-    .diagnostics();\n+    .diagnostics()\n+    .0;\n \n-    assert_snapshot!(diagnostics, \"\");\n+    assert_snapshot!(diagnostics, @r###\"\"###);\n }"}]}