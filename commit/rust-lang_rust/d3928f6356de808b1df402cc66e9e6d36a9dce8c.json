{"sha": "d3928f6356de808b1df402cc66e9e6d36a9dce8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTI4ZjYzNTZkZTgwOGIxZGY0MDJjYzY2ZTllNmQzNmE5ZGNlOGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-01T09:26:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-01T09:26:54Z"}, "message": "more permissive pointer comparison logic", "tree": {"sha": "454cbf9c5174e74dff4b4ae4c77ce02324b767b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/454cbf9c5174e74dff4b4ae4c77ce02324b767b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3928f6356de808b1df402cc66e9e6d36a9dce8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3928f6356de808b1df402cc66e9e6d36a9dce8c", "html_url": "https://github.com/rust-lang/rust/commit/d3928f6356de808b1df402cc66e9e6d36a9dce8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3928f6356de808b1df402cc66e9e6d36a9dce8c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1697b93ed9c5a26b2d6cb45b1c924101b9b811f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1697b93ed9c5a26b2d6cb45b1c924101b9b811f8", "html_url": "https://github.com/rust-lang/rust/commit/1697b93ed9c5a26b2d6cb45b1c924101b9b811f8"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "4f697dbd5b7483118fe1c442a74934aaef7f99af", "filename": "src/operator.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3928f6356de808b1df402cc66e9e6d36a9dce8c/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3928f6356de808b1df402cc66e9e6d36a9dce8c/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=d3928f6356de808b1df402cc66e9e6d36a9dce8c", "patch": "@@ -148,28 +148,21 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     left == right\n                 }\n             }\n-            // Comparing ptr and integer -- we allow compating with NULL, and with addresses\n-            // so close to the end of the `usize` range that they cannot overlap with an allocation\n-            // of the given size.\n+            // Comparing ptr and integer\n             (Scalar::Ptr(ptr), Scalar::Bits { bits, size }) |\n             (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n+\n                 if bits == 0 {\n-                    // Nothing equals 0\n+                    // Nothing equals 0, not even dangling pointers. Ideally we would\n+                    // require them to be in-bounds of their (possilby dead) allocation,\n+                    // but with the allocation gonew e cannot check that.\n                     false\n                 } else {\n-                    // Compute the highest address at which this allocation could live\n-                    let alloc = self.memory.get(ptr.alloc_id)?;\n-                    let max_base_addr =\n-                        (1u128 << self.pointer_size().bits()) - alloc.bytes.len() as u128;\n-                    let max_addr = max_base_addr + ptr.offset.bytes() as u128;\n-                    if bits > max_addr {\n-                        // The integer is too big, this cannot possibly be equal\n-                        false\n-                    } else {\n-                        // TODO: We could also take alignment into account\n-                        return err!(InvalidPointerMath);\n-                    }\n+                    // Live pointers cannot equal an integer, but again do not\n+                    // allow comparing dead pointers.\n+                    self.memory.check_bounds(ptr, false)?;\n+                    false\n                 }\n             }\n         })"}]}