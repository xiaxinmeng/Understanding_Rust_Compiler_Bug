{"sha": "d7d4e670ed53883672d8c4458226d91dcc731569", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZDRlNjcwZWQ1Mzg4MzY3MmQ4YzQ0NTgyMjZkOTFkY2M3MzE1Njk=", "commit": {"author": {"name": "Armin Ronacher", "email": "armin.ronacher@active-4.com", "date": "2017-03-21T23:01:37Z"}, "committer": {"name": "Armin Ronacher", "email": "armin.ronacher@active-4.com", "date": "2017-03-21T23:01:37Z"}, "message": "Added core::cmp::Reverse for sort_by_key reverse sorting", "tree": {"sha": "93ae0fa2f32fe9df813c5fe7d929296c0af44ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ae0fa2f32fe9df813c5fe7d929296c0af44ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7d4e670ed53883672d8c4458226d91dcc731569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d4e670ed53883672d8c4458226d91dcc731569", "html_url": "https://github.com/rust-lang/rust/commit/d7d4e670ed53883672d8c4458226d91dcc731569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7d4e670ed53883672d8c4458226d91dcc731569/comments", "author": {"login": "mitsuhiko", "id": 7396, "node_id": "MDQ6VXNlcjczOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitsuhiko", "html_url": "https://github.com/mitsuhiko", "followers_url": "https://api.github.com/users/mitsuhiko/followers", "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}", "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions", "organizations_url": "https://api.github.com/users/mitsuhiko/orgs", "repos_url": "https://api.github.com/users/mitsuhiko/repos", "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}", "received_events_url": "https://api.github.com/users/mitsuhiko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitsuhiko", "id": 7396, "node_id": "MDQ6VXNlcjczOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitsuhiko", "html_url": "https://github.com/mitsuhiko", "followers_url": "https://api.github.com/users/mitsuhiko/followers", "following_url": "https://api.github.com/users/mitsuhiko/following{/other_user}", "gists_url": "https://api.github.com/users/mitsuhiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitsuhiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitsuhiko/subscriptions", "organizations_url": "https://api.github.com/users/mitsuhiko/orgs", "repos_url": "https://api.github.com/users/mitsuhiko/repos", "events_url": "https://api.github.com/users/mitsuhiko/events{/privacy}", "received_events_url": "https://api.github.com/users/mitsuhiko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134c4a0f08a3d1f55ea8968fbe728fa935c71698", "url": "https://api.github.com/repos/rust-lang/rust/commits/134c4a0f08a3d1f55ea8968fbe728fa935c71698", "html_url": "https://github.com/rust-lang/rust/commit/134c4a0f08a3d1f55ea8968fbe728fa935c71698"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "d87615ad9a2c2649d28f930d485ec0f0f72e2bf8", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d7d4e670ed53883672d8c4458226d91dcc731569/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d4e670ed53883672d8c4458226d91dcc731569/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d7d4e670ed53883672d8c4458226d91dcc731569", "patch": "@@ -322,6 +322,40 @@ impl Ordering {\n     }\n }\n \n+/// A helper struct for reverse ordering.\n+///\n+/// This struct is a helper to be used with functions like `Vec::sort_by_key` and\n+/// can be used to reverse order a part of a key.\n+///\n+/// Example usage:\n+///\n+/// ```\n+/// use std::cmp::Reverse;\n+///\n+/// let mut v = vec![1, 2, 3, 4, 5, 6];\n+/// v.sort_by_key(|&num| (num >= 3, Reverse(num)));\n+/// assert_eq!(v, vec![3, 2, 1, 6, 5, 4]);\n+/// ```\n+#[derive(PartialEq, Eq, Debug)]\n+#[stable(feature = \"rust1\", since = \"1.8.0\")]\n+pub struct Reverse<T: Ord + PartialOrd + Eq + PartialEq>(pub T);\n+\n+#[stable(feature = \"rust1\", since = \"1.8.0\")]\n+impl<T: Ord + PartialOrd + Eq + PartialEq> PartialOrd for Reverse<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Reverse<T>) -> Option<Ordering> {\n+        other.0.partial_cmp(&self.0)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.8.0\")]\n+impl<T: Ord + PartialOrd + Eq + PartialEq> Ord for Reverse<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Reverse<T>) -> Ordering {\n+        other.0.cmp(&self.0)\n+    }\n+}\n+\n /// Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).\n ///\n /// An order is a total order if it is (for all `a`, `b` and `c`):"}]}