{"sha": "75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZTFhY2I2M2E2NDJmYTc4Y2I4YzM4MmQ3NDYyYjQxZmEyYjU2Y2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-22T10:32:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-22T10:32:03Z"}, "message": "Auto merge of #78242 - Nadrieril:rename-overlapping_endpoints-lint, r=varkor\n\nRename `overlapping_patterns` lint\n\nAs discussed in https://github.com/rust-lang/rust/issues/65477. I also tweaked a few things along the way.\n\nr? `@varkor`\n`@rustbot` modify labels: +A-exhaustiveness-checking", "tree": {"sha": "6fc1ec36755859c505831a2f1ee074990e09b165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc1ec36755859c505831a2f1ee074990e09b165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "html_url": "https://github.com/rust-lang/rust/commit/75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793931f4220297f20116d61ac1a76c74b0fa3311", "url": "https://api.github.com/repos/rust-lang/rust/commits/793931f4220297f20116d61ac1a76c74b0fa3311", "html_url": "https://github.com/rust-lang/rust/commit/793931f4220297f20116d61ac1a76c74b0fa3311"}, {"sha": "5b6c175566e55e29c0d2c39cb0dab2119ac40c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6c175566e55e29c0d2c39cb0dab2119ac40c82", "html_url": "https://github.com/rust-lang/rust/commit/5b6c175566e55e29c0d2c39cb0dab2119ac40c82"}], "stats": {"total": 230, "additions": 123, "deletions": 107}, "files": [{"sha": "2336b52619ab8a0e40230522d306b06ab17b1d17", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -283,7 +283,6 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_MUT,\n         UNREACHABLE_CODE,\n         UNREACHABLE_PATTERNS,\n-        OVERLAPPING_PATTERNS,\n         UNUSED_MUST_USE,\n         UNUSED_UNSAFE,\n         PATH_STATEMENTS,\n@@ -335,6 +334,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"exceeding_bitshifts\", \"arithmetic_overflow\");\n     store.register_renamed(\"redundant_semicolon\", \"redundant_semicolons\");\n     store.register_renamed(\"intra_doc_link_resolution_failure\", \"broken_intra_doc_links\");\n+    store.register_renamed(\"overlapping_patterns\", \"overlapping_range_endpoints\");\n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");"}, {"sha": "6a48b8f4dfbb294adc2e4e8aee5e5130205dd1a3", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -588,8 +588,8 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `overlapping_patterns` lint detects `match` arms that have\n-    /// [range patterns] that overlap.\n+    /// The `overlapping_range_endpoints` lint detects `match` arms that have [range patterns] that\n+    /// overlap on their endpoints.\n     ///\n     /// [range patterns]: https://doc.rust-lang.org/nightly/reference/patterns.html#range-patterns\n     ///\n@@ -607,13 +607,12 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// It is likely a mistake to have range patterns in a match expression\n-    /// that overlap. Check that the beginning and end values are what you\n-    /// expect, and keep in mind that with `..=` the left and right bounds are\n-    /// inclusive.\n-    pub OVERLAPPING_PATTERNS,\n+    /// It is likely a mistake to have range patterns in a match expression that overlap in this\n+    /// way. Check that the beginning and end values are what you expect, and keep in mind that\n+    /// with `..=` the left and right bounds are inclusive.\n+    pub OVERLAPPING_RANGE_ENDPOINTS,\n     Warn,\n-    \"detects overlapping patterns\"\n+    \"detects range patterns with overlapping endpoints\"\n }\n \n declare_lint! {\n@@ -2809,7 +2808,7 @@ declare_lint_pass! {\n         DEAD_CODE,\n         UNREACHABLE_CODE,\n         UNREACHABLE_PATTERNS,\n-        OVERLAPPING_PATTERNS,\n+        OVERLAPPING_RANGE_ENDPOINTS,\n         BINDINGS_WITH_VARIANT_NAME,\n         UNUSED_MACROS,\n         WARNINGS,"}, {"sha": "dd0c61a2882f30686c895a90aa78662850c0c2aa", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -161,7 +161,7 @@ impl IntRange {\n         // 2       --------   // 2 -------\n         let (lo, hi) = self.boundaries();\n         let (other_lo, other_hi) = other.boundaries();\n-        lo == other_hi || hi == other_lo\n+        (lo == other_hi || hi == other_lo) && !self.is_singleton() && !other.is_singleton()\n     }\n \n     fn to_pat<'tcx>(&self, tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Pat<'tcx> {\n@@ -273,7 +273,7 @@ impl IntRange {\n         let mut borders: Vec<_> = row_borders.chain(self_borders).collect();\n         borders.sort_unstable();\n \n-        self.lint_overlapping_patterns(pcx, hir_id, overlaps);\n+        self.lint_overlapping_range_endpoints(pcx, hir_id, overlaps);\n \n         // We're going to iterate through every adjacent pair of borders, making sure that\n         // each represents an interval of nonnegative length, and convert each such\n@@ -296,30 +296,30 @@ impl IntRange {\n             .collect()\n     }\n \n-    fn lint_overlapping_patterns(\n+    fn lint_overlapping_range_endpoints(\n         &self,\n         pcx: PatCtxt<'_, '_, '_>,\n         hir_id: Option<HirId>,\n         overlaps: Vec<(IntRange, Span)>,\n     ) {\n         if let (true, Some(hir_id)) = (!overlaps.is_empty(), hir_id) {\n             pcx.cx.tcx.struct_span_lint_hir(\n-                lint::builtin::OVERLAPPING_PATTERNS,\n+                lint::builtin::OVERLAPPING_RANGE_ENDPOINTS,\n                 hir_id,\n                 pcx.span,\n                 |lint| {\n-                    let mut err = lint.build(\"multiple patterns covering the same range\");\n-                    err.span_label(pcx.span, \"overlapping patterns\");\n+                    let mut err = lint.build(\"multiple patterns overlap on their endpoints\");\n                     for (int_range, span) in overlaps {\n-                        // Use the real type for user display of the ranges:\n                         err.span_label(\n                             span,\n                             &format!(\n-                                \"this range overlaps on `{}`\",\n-                                int_range.to_pat(pcx.cx.tcx, pcx.ty),\n+                                \"this range overlaps on `{}`...\",\n+                                int_range.to_pat(pcx.cx.tcx, pcx.ty)\n                             ),\n                         );\n                     }\n+                    err.span_label(pcx.span, \"... with this range\");\n+                    err.note(\"you likely meant to write mutually exclusive ranges\");\n                     err.emit();\n                 },\n             );"}, {"sha": "b028fcae0775bca8a33ef8459995b3ffe09e2f20", "filename": "src/test/ui/issues/issue-21475.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fissues%2Fissue-21475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fissues%2Fissue-21475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21475.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(unused_imports, overlapping_patterns)]\n+#![allow(unused_imports, overlapping_range_endpoints)]\n // pretty-expanded FIXME #23616\n \n use m::{START, END};"}, {"sha": "a3e26a41232c7b382d9545dc33a92949c73ed539", "filename": "src/test/ui/issues/issue-26251.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fissues%2Fissue-26251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fissues%2Fissue-26251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26251.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(overlapping_patterns)]\n+#![allow(overlapping_range_endpoints)]\n \n fn main() {\n     let x = 'a';"}, {"sha": "ef573db8210469a38dab99a9fc3b12c2a0bd8f9d", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,5 +1,6 @@\n #![feature(exclusive_range_pattern)]\n #![feature(assoc_char_consts)]\n+#![allow(overlapping_range_endpoints)]\n #![deny(unreachable_patterns)]\n \n macro_rules! m {"}, {"sha": "b1440375494b1697c19200a6335d54fb7ad2f8be", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:47:8\n+  --> $DIR/exhaustiveness.rs:48:8\n    |\n LL |     m!(0u8, 0..255);\n    |        ^^^ pattern `u8::MAX` not covered\n@@ -8,7 +8,7 @@ LL |     m!(0u8, 0..255);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:48:8\n+  --> $DIR/exhaustiveness.rs:49:8\n    |\n LL |     m!(0u8, 0..=254);\n    |        ^^^ pattern `u8::MAX` not covered\n@@ -17,7 +17,7 @@ LL |     m!(0u8, 0..=254);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `0_u8` not covered\n-  --> $DIR/exhaustiveness.rs:49:8\n+  --> $DIR/exhaustiveness.rs:50:8\n    |\n LL |     m!(0u8, 1..=255);\n    |        ^^^ pattern `0_u8` not covered\n@@ -26,7 +26,7 @@ LL |     m!(0u8, 1..=255);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `42_u8` not covered\n-  --> $DIR/exhaustiveness.rs:50:8\n+  --> $DIR/exhaustiveness.rs:51:8\n    |\n LL |     m!(0u8, 0..42 | 43..=255);\n    |        ^^^ pattern `42_u8` not covered\n@@ -35,7 +35,7 @@ LL |     m!(0u8, 0..42 | 43..=255);\n    = note: the matched value is of type `u8`\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:51:8\n+  --> $DIR/exhaustiveness.rs:52:8\n    |\n LL |     m!(0i8, -128..127);\n    |        ^^^ pattern `i8::MAX` not covered\n@@ -44,7 +44,7 @@ LL |     m!(0i8, -128..127);\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:52:8\n+  --> $DIR/exhaustiveness.rs:53:8\n    |\n LL |     m!(0i8, -128..=126);\n    |        ^^^ pattern `i8::MAX` not covered\n@@ -53,7 +53,7 @@ LL |     m!(0i8, -128..=126);\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n-  --> $DIR/exhaustiveness.rs:53:8\n+  --> $DIR/exhaustiveness.rs:54:8\n    |\n LL |     m!(0i8, -127..=127);\n    |        ^^^ pattern `i8::MIN` not covered\n@@ -62,7 +62,7 @@ LL |     m!(0i8, -127..=127);\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `0_i8` not covered\n-  --> $DIR/exhaustiveness.rs:54:11\n+  --> $DIR/exhaustiveness.rs:55:11\n    |\n LL |     match 0i8 {\n    |           ^^^ pattern `0_i8` not covered\n@@ -71,7 +71,7 @@ LL |     match 0i8 {\n    = note: the matched value is of type `i8`\n \n error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:59:8\n+  --> $DIR/exhaustiveness.rs:60:8\n    |\n LL |     m!(0u128, 0..=ALMOST_MAX);\n    |        ^^^^^ pattern `u128::MAX` not covered\n@@ -80,7 +80,7 @@ LL |     m!(0u128, 0..=ALMOST_MAX);\n    = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n-  --> $DIR/exhaustiveness.rs:60:8\n+  --> $DIR/exhaustiveness.rs:61:8\n    |\n LL |     m!(0u128, 0..=4);\n    |        ^^^^^ pattern `5_u128..=u128::MAX` not covered\n@@ -89,7 +89,7 @@ LL |     m!(0u128, 0..=4);\n    = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `0_u128` not covered\n-  --> $DIR/exhaustiveness.rs:61:8\n+  --> $DIR/exhaustiveness.rs:62:8\n    |\n LL |     m!(0u128, 1..=u128::MAX);\n    |        ^^^^^ pattern `0_u128` not covered\n@@ -98,7 +98,7 @@ LL |     m!(0u128, 1..=u128::MAX);\n    = note: the matched value is of type `u128`\n \n error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n-  --> $DIR/exhaustiveness.rs:69:11\n+  --> $DIR/exhaustiveness.rs:70:11\n    |\n LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered"}, {"sha": "5ea92b07081afda2889b3363ab7630d718d01494", "filename": "src/test/ui/pattern/usefulness/integer-ranges/overlapping_range_endpoints.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,5 +1,5 @@\n #![feature(exclusive_range_pattern)]\n-#![deny(overlapping_patterns)]\n+#![deny(overlapping_range_endpoints)]\n \n macro_rules! m {\n     ($s:expr, $t1:pat, $t2:pat) => {\n@@ -12,27 +12,33 @@ macro_rules! m {\n }\n \n fn main() {\n-    m!(0u8, 20..=30, 30..=40); //~ ERROR multiple patterns covering the same range\n-    m!(0u8, 30..=40, 20..=30); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20..=30, 30..=40); //~ ERROR multiple patterns overlap on their endpoints\n+    m!(0u8, 30..=40, 20..=30); //~ ERROR multiple patterns overlap on their endpoints\n     m!(0u8, 20..=30, 31..=40);\n     m!(0u8, 20..=30, 29..=40);\n-    m!(0u8, 20.. 30, 29..=40); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20.. 30, 29..=40); //~ ERROR multiple patterns overlap on their endpoints\n     m!(0u8, 20.. 30, 28..=40);\n     m!(0u8, 20.. 30, 30..=40);\n     m!(0u8, 20..=30, 30..=30);\n-    m!(0u8, 20..=30, 30..=31); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20..=30, 30..=31); //~ ERROR multiple patterns overlap on their endpoints\n     m!(0u8, 20..=30, 29..=30);\n     m!(0u8, 20..=30, 20..=20);\n     m!(0u8, 20..=30, 20..=21);\n-    m!(0u8, 20..=30, 19..=20); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20..=30, 19..=20); //~ ERROR multiple patterns overlap on their endpoints\n     m!(0u8, 20..=30, 20);\n     m!(0u8, 20..=30, 25);\n     m!(0u8, 20..=30, 30);\n     m!(0u8, 20.. 30, 29);\n-    m!(0u8, 20, 20..=30); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20, 20..=30);\n     m!(0u8, 25, 20..=30);\n-    m!(0u8, 30, 20..=30); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 30, 20..=30);\n \n+    match 0u8 {\n+        0..=10 => {}\n+        20..=30 => {}\n+        10..=20 => {} //~ ERROR multiple patterns overlap on their endpoints\n+        _ => {}\n+    }\n     match (0u8, true) {\n         (0..=10, true) => {}\n         (10..20, true) => {} // not detected\n@@ -41,13 +47,13 @@ fn main() {\n     }\n     match (true, 0u8) {\n         (true, 0..=10) => {}\n-        (true, 10..20) => {} //~ ERROR multiple patterns covering the same range\n+        (true, 10..20) => {} //~ ERROR multiple patterns overlap on their endpoints\n         (false, 10..20) => {}\n         _ => {}\n     }\n     match Some(0u8) {\n         Some(0..=10) => {}\n-        Some(10..20) => {} //~ ERROR multiple patterns covering the same range\n+        Some(10..20) => {} //~ ERROR multiple patterns overlap on their endpoints\n         _ => {}\n     }\n }"}, {"sha": "24c0419e1dde3e2f36d32e3244403ed42d71ff62", "filename": "src/test/ui/pattern/usefulness/integer-ranges/overlapping_range_endpoints.stderr", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,80 +1,89 @@\n-error: multiple patterns covering the same range\n+error: multiple patterns overlap on their endpoints\n   --> $DIR/overlapping_range_endpoints.rs:15:22\n    |\n LL |     m!(0u8, 20..=30, 30..=40);\n-   |             -------  ^^^^^^^ overlapping patterns\n+   |             -------  ^^^^^^^ ... with this range\n    |             |\n-   |             this range overlaps on `30_u8`\n+   |             this range overlaps on `30_u8`...\n    |\n note: the lint level is defined here\n   --> $DIR/overlapping_range_endpoints.rs:2:9\n    |\n-LL | #![deny(overlapping_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(overlapping_range_endpoints)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n+error: multiple patterns overlap on their endpoints\n   --> $DIR/overlapping_range_endpoints.rs:16:22\n    |\n LL |     m!(0u8, 30..=40, 20..=30);\n-   |             -------  ^^^^^^^ overlapping patterns\n+   |             -------  ^^^^^^^ ... with this range\n    |             |\n-   |             this range overlaps on `30_u8`\n+   |             this range overlaps on `30_u8`...\n+   |\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n+error: multiple patterns overlap on their endpoints\n   --> $DIR/overlapping_range_endpoints.rs:19:22\n    |\n LL |     m!(0u8, 20.. 30, 29..=40);\n-   |             -------  ^^^^^^^ overlapping patterns\n+   |             -------  ^^^^^^^ ... with this range\n    |             |\n-   |             this range overlaps on `29_u8`\n+   |             this range overlaps on `29_u8`...\n+   |\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n+error: multiple patterns overlap on their endpoints\n   --> $DIR/overlapping_range_endpoints.rs:23:22\n    |\n LL |     m!(0u8, 20..=30, 30..=31);\n-   |             -------  ^^^^^^^ overlapping patterns\n+   |             -------  ^^^^^^^ ... with this range\n    |             |\n-   |             this range overlaps on `30_u8`\n+   |             this range overlaps on `30_u8`...\n+   |\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n+error: multiple patterns overlap on their endpoints\n   --> $DIR/overlapping_range_endpoints.rs:27:22\n    |\n LL |     m!(0u8, 20..=30, 19..=20);\n-   |             -------  ^^^^^^^ overlapping patterns\n+   |             -------  ^^^^^^^ ... with this range\n    |             |\n-   |             this range overlaps on `20_u8`\n-\n-error: multiple patterns covering the same range\n-  --> $DIR/overlapping_range_endpoints.rs:32:17\n+   |             this range overlaps on `20_u8`...\n    |\n-LL |     m!(0u8, 20, 20..=30);\n-   |             --  ^^^^^^^ overlapping patterns\n-   |             |\n-   |             this range overlaps on `20_u8`\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n-  --> $DIR/overlapping_range_endpoints.rs:34:17\n+error: multiple patterns overlap on their endpoints\n+  --> $DIR/overlapping_range_endpoints.rs:39:9\n    |\n-LL |     m!(0u8, 30, 20..=30);\n-   |             --  ^^^^^^^ overlapping patterns\n-   |             |\n-   |             this range overlaps on `30_u8`\n+LL |         0..=10 => {}\n+   |         ------ this range overlaps on `10_u8`...\n+LL |         20..=30 => {}\n+   |         ------- this range overlaps on `20_u8`...\n+LL |         10..=20 => {}\n+   |         ^^^^^^^ ... with this range\n+   |\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n-  --> $DIR/overlapping_range_endpoints.rs:44:16\n+error: multiple patterns overlap on their endpoints\n+  --> $DIR/overlapping_range_endpoints.rs:50:16\n    |\n LL |         (true, 0..=10) => {}\n-   |                ------ this range overlaps on `10_u8`\n+   |                ------ this range overlaps on `10_u8`...\n LL |         (true, 10..20) => {}\n-   |                ^^^^^^ overlapping patterns\n+   |                ^^^^^^ ... with this range\n+   |\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: multiple patterns covering the same range\n-  --> $DIR/overlapping_range_endpoints.rs:50:14\n+error: multiple patterns overlap on their endpoints\n+  --> $DIR/overlapping_range_endpoints.rs:56:14\n    |\n LL |         Some(0..=10) => {}\n-   |              ------ this range overlaps on `10_u8`\n+   |              ------ this range overlaps on `10_u8`...\n LL |         Some(10..20) => {}\n-   |              ^^^^^^ overlapping patterns\n+   |              ^^^^^^ ... with this range\n+   |\n+   = note: you likely meant to write mutually exclusive ranges\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "fb4d59b05780e20570ec531b8d190cfa9f7553be", "filename": "src/test/ui/pattern/usefulness/integer-ranges/reachability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,4 +1,5 @@\n #![feature(exclusive_range_pattern)]\n+#![allow(overlapping_range_endpoints)]\n #![deny(unreachable_patterns)]\n \n macro_rules! m {"}, {"sha": "9a02fac6a75dd47f6a14e6e2a60d73efa50f70da", "filename": "src/test/ui/pattern/usefulness/integer-ranges/reachability.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75e1acb63a642fa78cb8c382d7462b41fa2b56cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr?ref=75e1acb63a642fa78cb8c382d7462b41fa2b56cd", "patch": "@@ -1,149 +1,149 @@\n error: unreachable pattern\n-  --> $DIR/reachability.rs:16:17\n+  --> $DIR/reachability.rs:17:17\n    |\n LL |     m!(0u8, 42, 42);\n    |                 ^^\n    |\n note: the lint level is defined here\n-  --> $DIR/reachability.rs:2:9\n+  --> $DIR/reachability.rs:3:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:20:22\n+  --> $DIR/reachability.rs:21:22\n    |\n LL |     m!(0u8, 20..=30, 20);\n    |                      ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:21:22\n+  --> $DIR/reachability.rs:22:22\n    |\n LL |     m!(0u8, 20..=30, 21);\n    |                      ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:22:22\n+  --> $DIR/reachability.rs:23:22\n    |\n LL |     m!(0u8, 20..=30, 25);\n    |                      ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:23:22\n+  --> $DIR/reachability.rs:24:22\n    |\n LL |     m!(0u8, 20..=30, 29);\n    |                      ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:24:22\n+  --> $DIR/reachability.rs:25:22\n    |\n LL |     m!(0u8, 20..=30, 30);\n    |                      ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:27:21\n+  --> $DIR/reachability.rs:28:21\n    |\n LL |     m!(0u8, 20..30, 20);\n    |                     ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:28:21\n+  --> $DIR/reachability.rs:29:21\n    |\n LL |     m!(0u8, 20..30, 21);\n    |                     ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:29:21\n+  --> $DIR/reachability.rs:30:21\n    |\n LL |     m!(0u8, 20..30, 25);\n    |                     ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:30:21\n+  --> $DIR/reachability.rs:31:21\n    |\n LL |     m!(0u8, 20..30, 29);\n    |                     ^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:34:22\n+  --> $DIR/reachability.rs:35:22\n    |\n LL |     m!(0u8, 20..=30, 20..=30);\n    |                      ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:35:22\n+  --> $DIR/reachability.rs:36:22\n    |\n LL |     m!(0u8, 20.. 30, 20.. 30);\n    |                      ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:36:22\n+  --> $DIR/reachability.rs:37:22\n    |\n LL |     m!(0u8, 20..=30, 20.. 30);\n    |                      ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:38:22\n+  --> $DIR/reachability.rs:39:22\n    |\n LL |     m!(0u8, 20..=30, 21..=30);\n    |                      ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:39:22\n+  --> $DIR/reachability.rs:40:22\n    |\n LL |     m!(0u8, 20..=30, 20..=29);\n    |                      ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:41:24\n+  --> $DIR/reachability.rs:42:24\n    |\n LL |     m!('a', 'A'..='z', 'a'..='z');\n    |                        ^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:48:9\n+  --> $DIR/reachability.rs:49:9\n    |\n LL |         5..=8 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:54:9\n+  --> $DIR/reachability.rs:55:9\n    |\n LL |         5..15 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:61:9\n+  --> $DIR/reachability.rs:62:9\n    |\n LL |         5..25 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:69:9\n+  --> $DIR/reachability.rs:70:9\n    |\n LL |         5..25 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:75:9\n+  --> $DIR/reachability.rs:76:9\n    |\n LL |         5..15 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:82:9\n+  --> $DIR/reachability.rs:83:9\n    |\n LL |         '\\u{D7FF}'..='\\u{E000}' => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:103:9\n+  --> $DIR/reachability.rs:104:9\n    |\n LL |         &FOO => {}\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/reachability.rs:104:9\n+  --> $DIR/reachability.rs:105:9\n    |\n LL |         BAR => {}\n    |         ^^^"}]}