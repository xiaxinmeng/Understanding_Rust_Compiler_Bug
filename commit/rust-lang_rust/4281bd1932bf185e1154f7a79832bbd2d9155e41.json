{"sha": "4281bd1932bf185e1154f7a79832bbd2d9155e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODFiZDE5MzJiZjE4NWUxMTU0ZjdhNzk4MzJiYmQyZDkxNTVlNDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T17:24:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T17:24:08Z"}, "message": "rollup merge of #20754: nikomatsakis/int-feature\n\nConflicts:\n\tsrc/test/compile-fail/borrowck-move-out-of-overloaded-auto-deref.rs\n\tsrc/test/compile-fail/issue-2590.rs\n\tsrc/test/compile-fail/lint-stability.rs\n\tsrc/test/compile-fail/slice-mut-2.rs\n\tsrc/test/compile-fail/std-uncopyable-atomics.rs", "tree": {"sha": "27263299612651b57cb595a2cebf4830dc113904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27263299612651b57cb595a2cebf4830dc113904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4281bd1932bf185e1154f7a79832bbd2d9155e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4281bd1932bf185e1154f7a79832bbd2d9155e41", "html_url": "https://github.com/rust-lang/rust/commit/4281bd1932bf185e1154f7a79832bbd2d9155e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4281bd1932bf185e1154f7a79832bbd2d9155e41/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed88c11af9495e7119da4ac59f329a33cedac59", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed88c11af9495e7119da4ac59f329a33cedac59", "html_url": "https://github.com/rust-lang/rust/commit/8ed88c11af9495e7119da4ac59f329a33cedac59"}, {"sha": "a661bd6575dd3fac17cf77fdea8b76ca790ac212", "url": "https://api.github.com/repos/rust-lang/rust/commits/a661bd6575dd3fac17cf77fdea8b76ca790ac212", "html_url": "https://github.com/rust-lang/rust/commit/a661bd6575dd3fac17cf77fdea8b76ca790ac212"}], "stats": {"total": 4539, "additions": 2404, "deletions": 2135}, "files": [{"sha": "802fb05796d665d91b8e5ffc0d42ee03aba47a51", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,6 +12,7 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(box_syntax)]\n+#![feature(int_uint)]\n \n #![deny(warnings)]\n "}, {"sha": "4a85637625a22ff09465e7b73e83b950ddd32ce3", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -68,6 +68,7 @@\n #![allow(unknown_features)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n #[macro_use]\n extern crate core;"}, {"sha": "e3d075c0f39b9066ab67db49862c1b2eb150b582", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -32,6 +32,7 @@\n #![feature(unsafe_destructor)]\n #![feature(unboxed_closures)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![allow(missing_docs)]\n \n extern crate alloc;"}, {"sha": "54ab26c4f7763d694b6757f491e0be212003caab", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -27,6 +27,7 @@\n #![feature(box_syntax)]\n #![feature(unboxed_closures)]\n #![feature(old_impl_check)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![no_std]\n \n #[macro_use]"}, {"sha": "28f8cf588bea9a1a408876d308837a45b3e9bdd4", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -59,9 +59,10 @@\n #![no_std]\n #![allow(unknown_features, raw_pointer_derive)]\n #![cfg_attr(stage0, allow(unused_attributes))]\n-#![feature(intrinsics, lang_items)]\n+#![allow(unknown_features)] #![feature(intrinsics, lang_items)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![deny(missing_docs)]\n \n #[macro_use]"}, {"sha": "f6415518864bf934e80e8f62adcaa66b61af14a6", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,15 +15,15 @@ macro_rules! panic {\n         panic!(\"explicit panic\")\n     );\n     ($msg:expr) => ({\n-        static _MSG_FILE_LINE: (&'static str, &'static str, uint) = ($msg, file!(), line!());\n+        static _MSG_FILE_LINE: (&'static str, &'static str, usize) = ($msg, file!(), line!());\n         ::core::panicking::panic(&_MSG_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // The leading _'s are to avoid dead code warnings if this is\n         // used inside a dead function. Just `#[allow(dead_code)]` is\n         // insufficient, since the user may have\n         // `#[forbid(dead_code)]` and which cannot be overridden.\n-        static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n+        static _FILE_LINE: (&'static str, usize) = (file!(), line!());\n         ::core::panicking::panic_fmt(format_args!($fmt, $($arg)*), &_FILE_LINE)\n     });\n }"}, {"sha": "0d371dbe15375bd1c0d14c210939ee160f2d920c", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,6 +11,7 @@\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate core;\n extern crate test;"}, {"sha": "fb6c98515f7f004375247f771fb22c7d52fd50d1", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,6 +17,7 @@\n #![crate_name = \"flate\"]\n #![unstable]\n #![staged_api]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "70ad8d28d271ff727f6841c3f2fd8a8e63d60e53", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -25,6 +25,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(slicing_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "470ef6e7e57a3df4136e3508edbea919ad074dde", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -87,6 +87,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(slicing_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![deny(missing_docs)]\n \n #[cfg(test)] #[macro_use] extern crate log;"}, {"sha": "b48fe2e42786d67188e806dfb17dea480de8d288", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -273,6 +273,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n #![feature(slicing_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n use self::LabelText::*;\n "}, {"sha": "34964bbae51bcfc2b11138c3dc09184c2a61ceb8", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,6 +12,7 @@\n #![crate_type = \"rlib\"]\n #![cfg_attr(not(feature = \"cargo-build\"), unstable)]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "a166dc369cb1bfa5eb8f671a205833896fcab888", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -168,6 +168,7 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![deny(missing_docs)]\n \n extern crate regex;"}, {"sha": "4d605253ab06474c6671c4cdd8f416e45d373099", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -22,7 +22,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![no_std]\n #![unstable]\n #![staged_api]"}, {"sha": "6a7062a419e59d7bed2ff483bec4202c7e9e56a5", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -26,6 +26,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate serialize;\n #[macro_use] extern crate log;"}, {"sha": "45f42336ceb45707091a06a3b44a705e02b9abfe", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -26,6 +26,7 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![deny(missing_docs)]\n \n #[cfg(test)]"}, {"sha": "48e0d40bb5d52641763a54de30c42a2a7d438003", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -27,6 +27,7 @@\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(old_impl_check)]\n "}, {"sha": "620b8f277dddcd95a5a7959a96b6c31699d91d24", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -216,7 +216,7 @@ impl LintPass for TypeLimits {\n                         match lit.node {\n                             ast::LitInt(v, ast::SignedIntLit(_, ast::Plus)) |\n                             ast::LitInt(v, ast::UnsuffixedIntLit(ast::Plus)) => {\n-                                let int_type = if t == ast::TyIs {\n+                                let int_type = if let ast::TyIs(_) = t {\n                                     cx.sess().target.int_type\n                                 } else { t };\n                                 let (min, max) = int_ty_range(int_type);\n@@ -233,7 +233,7 @@ impl LintPass for TypeLimits {\n                         };\n                     },\n                     ty::ty_uint(t) => {\n-                        let uint_type = if t == ast::TyUs {\n+                        let uint_type = if let ast::TyUs(_) = t {\n                             cx.sess().target.uint_type\n                         } else { t };\n                         let (min, max) = uint_ty_range(uint_type);\n@@ -296,7 +296,7 @@ impl LintPass for TypeLimits {\n         // warnings are consistent between 32- and 64-bit platforms\n         fn int_ty_range(int_ty: ast::IntTy) -> (i64, i64) {\n             match int_ty {\n-                ast::TyIs=>    (i64::MIN,        i64::MAX),\n+                ast::TyIs(_) =>    (i64::MIN,        i64::MAX),\n                 ast::TyI8 =>   (i8::MIN  as i64, i8::MAX  as i64),\n                 ast::TyI16 =>  (i16::MIN as i64, i16::MAX as i64),\n                 ast::TyI32 =>  (i32::MIN as i64, i32::MAX as i64),\n@@ -306,7 +306,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_range(uint_ty: ast::UintTy) -> (u64, u64) {\n             match uint_ty {\n-                ast::TyUs=>   (u64::MIN,         u64::MAX),\n+                ast::TyUs(_) =>   (u64::MIN,         u64::MAX),\n                 ast::TyU8 =>  (u8::MIN   as u64, u8::MAX   as u64),\n                 ast::TyU16 => (u16::MIN  as u64, u16::MAX  as u64),\n                 ast::TyU32 => (u32::MIN  as u64, u32::MAX  as u64),\n@@ -323,7 +323,7 @@ impl LintPass for TypeLimits {\n \n         fn int_ty_bits(int_ty: ast::IntTy, target_int_ty: ast::IntTy) -> u64 {\n             match int_ty {\n-                ast::TyIs=>    int_ty_bits(target_int_ty, target_int_ty),\n+                ast::TyIs(_) =>    int_ty_bits(target_int_ty, target_int_ty),\n                 ast::TyI8 =>   i8::BITS  as u64,\n                 ast::TyI16 =>  i16::BITS as u64,\n                 ast::TyI32 =>  i32::BITS as u64,\n@@ -333,7 +333,7 @@ impl LintPass for TypeLimits {\n \n         fn uint_ty_bits(uint_ty: ast::UintTy, target_uint_ty: ast::UintTy) -> u64 {\n             match uint_ty {\n-                ast::TyUs=>    uint_ty_bits(target_uint_ty, target_uint_ty),\n+                ast::TyUs(_) =>    uint_ty_bits(target_uint_ty, target_uint_ty),\n                 ast::TyU8 =>   u8::BITS  as u64,\n                 ast::TyU16 =>  u16::BITS as u64,\n                 ast::TyU32 =>  u32::BITS as u64,\n@@ -404,12 +404,12 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     fn check_def(&mut self, sp: Span, ty_id: ast::NodeId, path_id: ast::NodeId) {\n         match self.cx.tcx.def_map.borrow()[path_id].clone() {\n-            def::DefPrimTy(ast::TyInt(ast::TyIs)) => {\n+            def::DefPrimTy(ast::TyInt(ast::TyIs(_))) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `isize` in foreign module, while \\\n                                    libc::c_int or libc::c_long should be used\");\n             }\n-            def::DefPrimTy(ast::TyUint(ast::TyUs)) => {\n+            def::DefPrimTy(ast::TyUint(ast::TyUs(_))) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `usize` in foreign module, while \\\n                                    libc::c_uint or libc::c_ulong should be used\");"}, {"sha": "bdd08ad6c4952038af1029b1982de787ee9c047b", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -61,7 +61,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_char => mywrite!(w, \"c\"),\n         ty::ty_int(t) => {\n             match t {\n-                ast::TyIs => mywrite!(w, \"is\"),\n+                ast::TyIs(_) => mywrite!(w, \"is\"),\n                 ast::TyI8 => mywrite!(w, \"MB\"),\n                 ast::TyI16 => mywrite!(w, \"MW\"),\n                 ast::TyI32 => mywrite!(w, \"ML\"),\n@@ -70,7 +70,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         }\n         ty::ty_uint(t) => {\n             match t {\n-                ast::TyUs => mywrite!(w, \"us\"),\n+                ast::TyUs(_) => mywrite!(w, \"us\"),\n                 ast::TyU8 => mywrite!(w, \"Mb\"),\n                 ast::TyU16 => mywrite!(w, \"Mw\"),\n                 ast::TyU32 => mywrite!(w, \"Ml\"),"}, {"sha": "52352e920ce36a3922683413684780e822e951d9", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -528,12 +528,12 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n \n         eval_const_expr_partial(tcx, &**base)\n             .and_then(|val| define_casts!(val, {\n-                ty::ty_int(ast::TyIs) => (int, const_int, i64),\n+                ty::ty_int(ast::TyIs(_)) => (int, const_int, i64),\n                 ty::ty_int(ast::TyI8) => (i8, const_int, i64),\n                 ty::ty_int(ast::TyI16) => (i16, const_int, i64),\n                 ty::ty_int(ast::TyI32) => (i32, const_int, i64),\n                 ty::ty_int(ast::TyI64) => (i64, const_int, i64),\n-                ty::ty_uint(ast::TyUs) => (uint, const_uint, u64),\n+                ty::ty_uint(ast::TyUs(_)) => (uint, const_uint, u64),\n                 ty::ty_uint(ast::TyU8) => (u8, const_uint, u64),\n                 ty::ty_uint(ast::TyU16) => (u16, const_uint, u64),\n                 ty::ty_uint(ast::TyU32) => (u32, const_uint, u64),"}, {"sha": "ef86e67de1606af77d7c0e3397fb7309412f1f0f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -2341,12 +2341,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: intern_ty(arena, interner, ty_bool),\n             char: intern_ty(arena, interner, ty_char),\n             err: intern_ty(arena, interner, ty_err),\n-            int: intern_ty(arena, interner, ty_int(ast::TyIs)),\n+            int: intern_ty(arena, interner, ty_int(ast::TyIs(false))),\n             i8: intern_ty(arena, interner, ty_int(ast::TyI8)),\n             i16: intern_ty(arena, interner, ty_int(ast::TyI16)),\n             i32: intern_ty(arena, interner, ty_int(ast::TyI32)),\n             i64: intern_ty(arena, interner, ty_int(ast::TyI64)),\n-            uint: intern_ty(arena, interner, ty_uint(ast::TyUs)),\n+            uint: intern_ty(arena, interner, ty_uint(ast::TyUs(false))),\n             u8: intern_ty(arena, interner, ty_uint(ast::TyU8)),\n             u16: intern_ty(arena, interner, ty_uint(ast::TyU16)),\n             u32: intern_ty(arena, interner, ty_uint(ast::TyU32)),\n@@ -2692,7 +2692,7 @@ impl FlagComputation {\n \n pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyIs   => tcx.types.int,\n+        ast::TyIs(_)   => tcx.types.int,\n         ast::TyI8   => tcx.types.i8,\n         ast::TyI16  => tcx.types.i16,\n         ast::TyI32  => tcx.types.i32,\n@@ -2702,7 +2702,7 @@ pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> {\n \n pub fn mk_mach_uint<'tcx>(tcx: &ctxt<'tcx>, tm: ast::UintTy) -> Ty<'tcx> {\n     match tm {\n-        ast::TyUs   => tcx.types.uint,\n+        ast::TyUs(_)   => tcx.types.uint,\n         ast::TyU8   => tcx.types.u8,\n         ast::TyU16  => tcx.types.u16,\n         ast::TyU32  => tcx.types.u32,\n@@ -3363,7 +3363,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n \n         let result = match ty.sty {\n             // uint and int are ffi-unsafe\n-            ty_uint(ast::TyUs) | ty_int(ast::TyIs) => {\n+            ty_uint(ast::TyUs(_)) | ty_int(ast::TyIs(_)) => {\n                 TC::ReachesFfiUnsafe\n             }\n \n@@ -3937,7 +3937,7 @@ pub fn type_is_fresh(ty: Ty) -> bool {\n \n pub fn type_is_uint(ty: Ty) -> bool {\n     match ty.sty {\n-      ty_infer(IntVar(_)) | ty_uint(ast::TyUs) => true,\n+      ty_infer(IntVar(_)) | ty_uint(ast::TyUs(_)) => true,\n       _ => false\n     }\n }\n@@ -3983,7 +3983,7 @@ pub fn type_is_signed(ty: Ty) -> bool {\n \n pub fn type_is_machine(ty: Ty) -> bool {\n     match ty.sty {\n-        ty_int(ast::TyIs) | ty_uint(ast::TyUs) => false,\n+        ty_int(ast::TyIs(_)) | ty_uint(ast::TyUs(_)) => false,\n         ty_int(..) | ty_uint(..) | ty_float(..) => true,\n         _ => false\n     }"}, {"sha": "d29a47b65b0a3d51df8b147f812e48be4390c037", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -31,6 +31,7 @@\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n #![allow(unknown_features)]\n #![feature(slicing_syntax, box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "eedad75c89fe276ab284cf2e1da1ffdce3deb345", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -21,6 +21,7 @@\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n \n #[macro_use] extern crate log;"}, {"sha": "071549a213c7632619c6f0f8dd4519d86937d3b6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -28,6 +28,7 @@\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "a4f9b1f98d4c969cbc1bec5cae04130ad0e5a89c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -25,6 +25,7 @@\n #![allow(unknown_features)]\n #![feature(link_args)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate libc;\n "}, {"sha": "ea6ecfbb92b4f2f3a90b685eaf48a0b56406a23f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -19,6 +19,7 @@\n \n #![feature(slicing_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n@@ -819,15 +820,15 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\",    TyChar);\n         table.intern(\"f32\",     TyFloat(TyF32));\n         table.intern(\"f64\",     TyFloat(TyF64));\n-        table.intern(\"int\",     TyInt(TyIs));\n-        table.intern(\"isize\",   TyInt(TyIs));\n+        table.intern(\"int\",     TyInt(TyIs(true)));\n+        table.intern(\"isize\",   TyInt(TyIs(false)));\n         table.intern(\"i8\",      TyInt(TyI8));\n         table.intern(\"i16\",     TyInt(TyI16));\n         table.intern(\"i32\",     TyInt(TyI32));\n         table.intern(\"i64\",     TyInt(TyI64));\n         table.intern(\"str\",     TyStr);\n-        table.intern(\"uint\",    TyUint(TyUs));\n-        table.intern(\"usize\",   TyUint(TyUs));\n+        table.intern(\"uint\",    TyUint(TyUs(true)));\n+        table.intern(\"usize\",   TyUint(TyUs(false)));\n         table.intern(\"u8\",      TyUint(TyU8));\n         table.intern(\"u16\",     TyUint(TyU16));\n         table.intern(\"u32\",     TyUint(TyU32));"}, {"sha": "4859598e63c7abcc6230998ec263f94f3ff345f9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -28,6 +28,7 @@\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "88ce36a710a0c606ff06c32ce1c6f1f769f84a9d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -917,8 +917,8 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n             ty::ty_int(t) => {\n                 let llty = Type::int_from_ty(cx.ccx(), t);\n                 let min = match t {\n-                    ast::TyIs if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n-                    ast::TyIs => i64::MIN as u64,\n+                    ast::TyIs(_) if llty == Type::i32(cx.ccx()) => i32::MIN as u64,\n+                    ast::TyIs(_) => i64::MIN as u64,\n                     ast::TyI8 => i8::MIN as u64,\n                     ast::TyI16 => i16::MIN as u64,\n                     ast::TyI32 => i32::MIN as u64,"}, {"sha": "2f58baab7fca944327b5e073538c0e9150431f62", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -1804,14 +1804,14 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool => (\"bool\".to_string(), DW_ATE_boolean),\n         ty::ty_char => (\"char\".to_string(), DW_ATE_unsigned_char),\n         ty::ty_int(int_ty) => match int_ty {\n-            ast::TyIs => (\"isize\".to_string(), DW_ATE_signed),\n+            ast::TyIs(_) => (\"isize\".to_string(), DW_ATE_signed),\n             ast::TyI8 => (\"i8\".to_string(), DW_ATE_signed),\n             ast::TyI16 => (\"i16\".to_string(), DW_ATE_signed),\n             ast::TyI32 => (\"i32\".to_string(), DW_ATE_signed),\n             ast::TyI64 => (\"i64\".to_string(), DW_ATE_signed)\n         },\n         ty::ty_uint(uint_ty) => match uint_ty {\n-            ast::TyUs => (\"usize\".to_string(), DW_ATE_unsigned),\n+            ast::TyUs(_) => (\"usize\".to_string(), DW_ATE_unsigned),\n             ast::TyU8 => (\"u8\".to_string(), DW_ATE_unsigned),\n             ast::TyU16 => (\"u16\".to_string(), DW_ATE_unsigned),\n             ast::TyU32 => (\"u32\".to_string(), DW_ATE_unsigned),\n@@ -3739,12 +3739,12 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bool              => output.push_str(\"bool\"),\n         ty::ty_char              => output.push_str(\"char\"),\n         ty::ty_str               => output.push_str(\"str\"),\n-        ty::ty_int(ast::TyIs)     => output.push_str(\"isize\"),\n+        ty::ty_int(ast::TyIs(_))     => output.push_str(\"isize\"),\n         ty::ty_int(ast::TyI8)    => output.push_str(\"i8\"),\n         ty::ty_int(ast::TyI16)   => output.push_str(\"i16\"),\n         ty::ty_int(ast::TyI32)   => output.push_str(\"i32\"),\n         ty::ty_int(ast::TyI64)   => output.push_str(\"i64\"),\n-        ty::ty_uint(ast::TyUs)    => output.push_str(\"usize\"),\n+        ty::ty_uint(ast::TyUs(_))    => output.push_str(\"usize\"),\n         ty::ty_uint(ast::TyU8)   => output.push_str(\"u8\"),\n         ty::ty_uint(ast::TyU16)  => output.push_str(\"u16\"),\n         ty::ty_uint(ast::TyU32)  => output.push_str(\"u32\"),"}, {"sha": "71a7789eb393277ec4a7372554d44a399001d6a1", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -112,7 +112,7 @@ impl Type {\n \n     pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type {\n         match t {\n-            ast::TyIs => ccx.int_type(),\n+            ast::TyIs(_) => ccx.int_type(),\n             ast::TyI8 => Type::i8(ccx),\n             ast::TyI16 => Type::i16(ccx),\n             ast::TyI32 => Type::i32(ccx),\n@@ -122,7 +122,7 @@ impl Type {\n \n     pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type {\n         match t {\n-            ast::TyUs => ccx.int_type(),\n+            ast::TyUs(_) => ccx.int_type(),\n             ast::TyU8 => Type::i8(ccx),\n             ast::TyU16 => Type::i16(ccx),\n             ast::TyU32 => Type::i32(ccx),"}, {"sha": "99330797422299b817bbdc9521f663151ce13e88", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -263,7 +263,7 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n         }\n \n         match unsized_part_of_type(cx.tcx(), t).sty {\n-            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs),\n+            ty::ty_str | ty::ty_vec(..) => Type::uint_from_ty(cx, ast::TyUs(false)),\n             ty::ty_trait(_) => Type::vtable_ptr(cx),\n             _ => panic!(\"Unexpected type returned from unsized_part_of_type : {}\",\n                        t.repr(cx.tcx()))"}, {"sha": "1d184131dede3c017b35d279018f1a922db35200", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -2459,7 +2459,7 @@ fn try_index_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     // First, try built-in indexing.\n     match (ty::index(adjusted_ty), &index_ty.sty) {\n-        (Some(ty), &ty::ty_uint(ast::TyUs)) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n+        (Some(ty), &ty::ty_uint(ast::TyUs(_))) | (Some(ty), &ty::ty_infer(ty::IntVar(_))) => {\n             debug!(\"try_index_step: success, using built-in indexing\");\n             fcx.write_adjustment(base_expr.id, base_expr.span, ty::AdjustDerefRef(adjustment));\n             return Some((tcx.types.uint, ty));\n@@ -3225,8 +3225,24 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n         if ty::type_is_integral(lhs_t) && ast_util::is_shift_binop(op) {\n             // Shift is a special case: rhs must be uint, no matter what lhs is\n-            check_expr_has_type(fcx, &**rhs, fcx.tcx().types.uint);\n-            fcx.write_ty(expr.id, lhs_t);\n+            check_expr(fcx, &**rhs);\n+            let rhs_ty = fcx.expr_ty(&**rhs);\n+            let rhs_ty = fcx.infcx().resolve_type_vars_if_possible(&rhs_ty);\n+            if ty::type_is_integral(rhs_ty) {\n+                fcx.write_ty(expr.id, lhs_t);\n+            } else {\n+                fcx.type_error_message(\n+                    expr.span,\n+                    |actual| {\n+                        format!(\n+                            \"right-hand-side of a shift operation must have integral type, \\\n+                             not `{}`\",\n+                            actual)\n+                    },\n+                    rhs_ty,\n+                    None);\n+                fcx.write_ty(expr.id, fcx.tcx().types.err);\n+            }\n             return;\n         }\n \n@@ -4787,7 +4803,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                 ast::TyU16 => disr as u16 as Disr == disr,\n                 ast::TyU32 => disr as u32 as Disr == disr,\n                 ast::TyU64 => disr as u64 as Disr == disr,\n-                ast::TyUs => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n+                ast::TyUs(_) => uint_in_range(ccx, ccx.tcx.sess.target.uint_type, disr)\n             }\n         }\n         fn int_in_range(ccx: &CrateCtxt, ty: ast::IntTy, disr: ty::Disr) -> bool {\n@@ -4796,7 +4812,7 @@ pub fn check_enum_variants(ccx: &CrateCtxt,\n                 ast::TyI16 => disr as i16 as Disr == disr,\n                 ast::TyI32 => disr as i32 as Disr == disr,\n                 ast::TyI64 => disr as i64 as Disr == disr,\n-                ast::TyIs => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n+                ast::TyIs(_) => int_in_range(ccx, ccx.tcx.sess.target.int_type, disr)\n             }\n         }\n         match ty {"}, {"sha": "f15d53290e761de75895711b9640575c564f29bc", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -77,6 +77,7 @@ This API is completely unstable and subject to change.\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n \n #[macro_use] extern crate log;"}, {"sha": "a44c73e8c4120f91d9b986673e6a68273003faf8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -1389,12 +1389,12 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n         match self.sty {\n             ty::ty_bool => Primitive(Bool),\n             ty::ty_char => Primitive(Char),\n-            ty::ty_int(ast::TyIs) => Primitive(Isize),\n+            ty::ty_int(ast::TyIs(_)) => Primitive(Isize),\n             ty::ty_int(ast::TyI8) => Primitive(I8),\n             ty::ty_int(ast::TyI16) => Primitive(I16),\n             ty::ty_int(ast::TyI32) => Primitive(I32),\n             ty::ty_int(ast::TyI64) => Primitive(I64),\n-            ty::ty_uint(ast::TyUs) => Primitive(Usize),\n+            ty::ty_uint(ast::TyUs(_)) => Primitive(Usize),\n             ty::ty_uint(ast::TyU8) => Primitive(U8),\n             ty::ty_uint(ast::TyU16) => Primitive(U16),\n             ty::ty_uint(ast::TyU32) => Primitive(U32),\n@@ -2269,12 +2269,12 @@ fn resolve_type(cx: &DocContext,\n             ast::TyStr => return Primitive(Str),\n             ast::TyBool => return Primitive(Bool),\n             ast::TyChar => return Primitive(Char),\n-            ast::TyInt(ast::TyIs) => return Primitive(Isize),\n+            ast::TyInt(ast::TyIs(_)) => return Primitive(Isize),\n             ast::TyInt(ast::TyI8) => return Primitive(I8),\n             ast::TyInt(ast::TyI16) => return Primitive(I16),\n             ast::TyInt(ast::TyI32) => return Primitive(I32),\n             ast::TyInt(ast::TyI64) => return Primitive(I64),\n-            ast::TyUint(ast::TyUs) => return Primitive(Usize),\n+            ast::TyUint(ast::TyUs(_)) => return Primitive(Usize),\n             ast::TyUint(ast::TyU8) => return Primitive(U8),\n             ast::TyUint(ast::TyU16) => return Primitive(U16),\n             ast::TyUint(ast::TyU32) => return Primitive(U32),"}, {"sha": "6d5df3d777d8677f125c09cadb994a0537496003", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -19,6 +19,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "942a8cfa2c5b931b4c17e633915555c7cf31062d", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -28,6 +28,7 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(old_impl_check)]\n #![feature(slicing_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "dc157c7d67660ef6d5a4a0888267cfe06f69db40", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -110,6 +110,7 @@\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(box_syntax)]\n #![feature(old_impl_check)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "626372db23b5f23a2b760441adc4f688f62ff3b4", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -44,7 +44,7 @@ macro_rules! panic {\n     ($msg:expr) => ({\n         $crate::rt::begin_unwind($msg, {\n             // static requires less code at runtime, more constant data\n-            static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            static _FILE_LINE: (&'static str, usize) = (file!(), line!());\n             &_FILE_LINE\n         })\n     });\n@@ -54,7 +54,7 @@ macro_rules! panic {\n             // used inside a dead function. Just `#[allow(dead_code)]` is\n             // insufficient, since the user may have\n             // `#[forbid(dead_code)]` and which cannot be overridden.\n-            static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            static _FILE_LINE: (&'static str, usize) = (file!(), line!());\n             &_FILE_LINE\n         })\n     });\n@@ -466,7 +466,7 @@ pub mod builtin {\n \n     /// A macro which expands to the line number on which it was invoked.\n     ///\n-    /// The expanded expression has type `uint`, and the returned line is not\n+    /// The expanded expression has type `usize`, and the returned line is not\n     /// the invocation of the `line!()` macro itself, but rather the first macro\n     /// invocation leading up to the invocation of the `line!()` macro.\n     ///\n@@ -481,7 +481,7 @@ pub mod builtin {\n \n     /// A macro which expands to the column number on which it was invoked.\n     ///\n-    /// The expanded expression has type `uint`, and the returned column is not\n+    /// The expanded expression has type `usize`, and the returned column is not\n     /// the invocation of the `column!()` macro itself, but rather the first macro\n     /// invocation leading up to the invocation of the `column!()` macro.\n     ///"}, {"sha": "630f7768885de6ec6097834c0b90a2a312398f6f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -1075,15 +1075,29 @@ pub struct Typedef {\n     pub typ: P<Ty>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n-    TyIs,\n+    TyIs(bool /* is this deprecated `int`? */),\n     TyI8,\n     TyI16,\n     TyI32,\n     TyI64,\n }\n \n+impl PartialEq for IntTy {\n+    fn eq(&self, other: &IntTy) -> bool {\n+        match (*self, *other) {\n+            // true/false need to compare the same, so this can't be derived\n+            (TyIs(_), TyIs(_)) |\n+            (TyI8, TyI8) |\n+            (TyI16, TyI16) |\n+            (TyI32, TyI32) |\n+            (TyI64, TyI64) => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n impl fmt::Show for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::String::fmt(self, f)\n@@ -1099,27 +1113,41 @@ impl fmt::String for IntTy {\n impl IntTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n-            TyIs => 1,\n-            TyI8 => 2,\n+            TyIs(true) /* i */ => 1,\n+            TyIs(false) /* is */ | TyI8 => 2,\n             TyI16 | TyI32 | TyI64  => 3,\n         }\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+#[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n-    TyUs,\n+    TyUs(bool /* is this deprecated uint? */),\n     TyU8,\n     TyU16,\n     TyU32,\n     TyU64,\n }\n \n+impl PartialEq for UintTy {\n+    fn eq(&self, other: &UintTy) -> bool {\n+        match (*self, *other) {\n+            // true/false need to compare the same, so this can't be derived\n+            (TyUs(_), TyUs(_)) |\n+            (TyU8, TyU8) |\n+            (TyU16, TyU16) |\n+            (TyU32, TyU32) |\n+            (TyU64, TyU64) => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n impl UintTy {\n     pub fn suffix_len(&self) -> uint {\n         match *self {\n-            TyUs => 1,\n-            TyU8 => 2,\n+            TyUs(true) /* u */ => 1,\n+            TyUs(false) /* us */ | TyU8 => 2,\n             TyU16 | TyU32 | TyU64  => 3,\n         }\n     }"}, {"sha": "bc7fbd46fd8bac52f795026e8f48854f315ffa3f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -127,8 +127,10 @@ pub fn is_path(e: P<Expr>) -> bool {\n /// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n     let s = match t {\n-        TyIs if val.is_some() => \"is\",\n-        TyIs => \"isize\",\n+        TyIs(true) if val.is_some() => \"i\",\n+        TyIs(true) => \"int\",\n+        TyIs(false) if val.is_some() => \"is\",\n+        TyIs(false) => \"isize\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n         TyI32 => \"i32\",\n@@ -148,7 +150,7 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n     match t {\n         TyI8 => 0x80u64,\n         TyI16 => 0x8000u64,\n-        TyIs | TyI32 => 0x80000000u64, // actually ni about TyIs\n+        TyIs(_) | TyI32 => 0x80000000u64, // actually ni about TyIs\n         TyI64 => 0x8000000000000000u64\n     }\n }\n@@ -157,8 +159,10 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n /// We want to avoid \"42uint\" in favor of \"42u\"\n pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n     let s = match t {\n-        TyUs if val.is_some() => \"us\",\n-        TyUs => \"usize\",\n+        TyUs(true) if val.is_some() => \"u\",\n+        TyUs(true) => \"uint\",\n+        TyUs(false) if val.is_some() => \"us\",\n+        TyUs(false) => \"usize\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\",\n         TyU32 => \"u32\",\n@@ -175,7 +179,7 @@ pub fn uint_ty_max(t: UintTy) -> u64 {\n     match t {\n         TyU8 => 0xffu64,\n         TyU16 => 0xffffu64,\n-        TyUs | TyU32 => 0xffffffffu64, // actually ni about TyUs\n+        TyUs(_) | TyU32 => 0xffffffffu64, // actually ni about TyUs\n         TyU64 => 0xffffffffffffffffu64\n     }\n }"}, {"sha": "6f57c06d33e885d682d33f5d0c6856bec4429a3f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -464,10 +464,10 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n         \"u32\" => Some(UnsignedInt(ast::TyU32)),\n         \"i64\" => Some(SignedInt(ast::TyI64)),\n         \"u64\" => Some(UnsignedInt(ast::TyU64)),\n-        \"int\" => Some(SignedInt(ast::TyIs)),\n-        \"uint\" => Some(UnsignedInt(ast::TyUs)),\n-        \"isize\" => Some(SignedInt(ast::TyIs)),\n-        \"usize\" => Some(UnsignedInt(ast::TyUs)),\n+        \"int\" => Some(SignedInt(ast::TyIs(true))),\n+        \"uint\" => Some(UnsignedInt(ast::TyUs(true))),\n+        \"isize\" => Some(SignedInt(ast::TyIs(false))),\n+        \"usize\" => Some(UnsignedInt(ast::TyUs(false))),\n         _ => None\n     }\n }\n@@ -511,7 +511,7 @@ impl IntType {\n             SignedInt(ast::TyI16) | UnsignedInt(ast::TyU16) |\n             SignedInt(ast::TyI32) | UnsignedInt(ast::TyU32) |\n             SignedInt(ast::TyI64) | UnsignedInt(ast::TyU64) => true,\n-            SignedInt(ast::TyIs) | UnsignedInt(ast::TyUs) => false\n+            SignedInt(ast::TyIs(_)) | UnsignedInt(ast::TyUs(_)) => false\n         }\n     }\n }"}, {"sha": "c34142aec39c8e7aa4158717613ceda9531ff8f0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -642,10 +642,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprLit(P(respan(sp, lit))))\n     }\n     fn expr_uint(&self, span: Span, i: uint) -> P<ast::Expr> {\n-        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n+        self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs(false))))\n     }\n     fn expr_int(&self, sp: Span, i: int) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs, ast::Sign::new(i))))\n+        self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs(false),\n+                                                                  ast::Sign::new(i))))\n     }\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(u as u64, ast::UnsignedIntLit(ast::TyU8)))"}, {"sha": "e6b6f7bbd49c3d0f09d99bd7fcfd5d7fad69cce2", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -1031,7 +1031,7 @@ impl<'a> MethodDef<'a> {\n             let arms: Vec<ast::Arm> = variants.iter().enumerate()\n                 .map(|(index, variant)| {\n                     let pat = variant_to_pat(cx, sp, type_ident, &**variant);\n-                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs));\n+                    let lit = ast::LitInt(index as u64, ast::UnsignedIntLit(ast::TyUs(false)));\n                     cx.arm(sp, vec![pat], cx.expr_lit(sp, lit))\n                 }).collect();\n "}, {"sha": "1359cada67396fa1c57059051996216e41559017", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -98,13 +98,13 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n                                        rand_name,\n                                        vec!(rng.clone()));\n \n-            // need to specify the uint-ness of the random number\n-            let uint_ty = cx.ty_ident(trait_span, cx.ident_of(\"uint\"));\n+            // need to specify the usize-ness of the random number\n+            let usize_ty = cx.ty_ident(trait_span, cx.ident_of(\"usize\"));\n             let value_ident = cx.ident_of(\"__value\");\n             let let_statement = cx.stmt_let_typed(trait_span,\n                                                   false,\n                                                   value_ident,\n-                                                  uint_ty,\n+                                                  usize_ty,\n                                                   rv_call);\n \n             // rand() % variants.len()"}, {"sha": "c42b188302cc3ab25c1001c80b183535604622e9", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -244,10 +244,10 @@ pub mod rt {\n     }\n \n     macro_rules! impl_to_source_int {\n-        (signed, $t:ty, $tag:ident) => (\n+        (signed, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    let lit = ast::LitInt(*self as u64, ast::SignedIntLit(ast::$tag,\n+                    let lit = ast::LitInt(*self as u64, ast::SignedIntLit($tag,\n                                                                           ast::Sign::new(*self)));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }\n@@ -258,10 +258,10 @@ pub mod rt {\n                 }\n             }\n         );\n-        (unsigned, $t:ty, $tag:ident) => (\n+        (unsigned, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit(ast::$tag));\n+                    let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit($tag));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }\n             }\n@@ -273,17 +273,17 @@ pub mod rt {\n         );\n     }\n \n-    impl_to_source_int! { signed, int, TyIs }\n-    impl_to_source_int! { signed, i8,  TyI8 }\n-    impl_to_source_int! { signed, i16, TyI16 }\n-    impl_to_source_int! { signed, i32, TyI32 }\n-    impl_to_source_int! { signed, i64, TyI64 }\n+    impl_to_source_int! { signed, int, ast::TyIs(false) }\n+    impl_to_source_int! { signed, i8,  ast::TyI8 }\n+    impl_to_source_int! { signed, i16, ast::TyI16 }\n+    impl_to_source_int! { signed, i32, ast::TyI32 }\n+    impl_to_source_int! { signed, i64, ast::TyI64 }\n \n-    impl_to_source_int! { unsigned, uint, TyUs }\n-    impl_to_source_int! { unsigned, u8,   TyU8 }\n-    impl_to_source_int! { unsigned, u16,  TyU16 }\n-    impl_to_source_int! { unsigned, u32,  TyU32 }\n-    impl_to_source_int! { unsigned, u64,  TyU64 }\n+    impl_to_source_int! { unsigned, uint, ast::TyUs(false) }\n+    impl_to_source_int! { unsigned, u8,   ast::TyU8 }\n+    impl_to_source_int! { unsigned, u16,  ast::TyU16 }\n+    impl_to_source_int! { unsigned, u32,  ast::TyU32 }\n+    impl_to_source_int! { unsigned, u64,  ast::TyU64 }\n \n     // Alas ... we write these out instead. All redundant.\n "}, {"sha": "8175c0a9eecf4805d88fd571467b3c241a4a359f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -93,6 +93,9 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     // OIBIT specific features\n     (\"optin_builtin_traits\", Active),\n \n+    // int and uint are now deprecated\n+    (\"int_uint\", Active),\n+\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n     (\"test_accepted_feature\", Accepted),\n@@ -155,6 +158,14 @@ impl<'a> Context<'a> {\n         }\n     }\n \n+    fn warn_feature(&self, feature: &str, span: Span, explain: &str) {\n+        if !self.has_feature(feature) {\n+            self.span_handler.span_warn(span, explain);\n+            self.span_handler.span_help(span, &format!(\"add #![feature({})] to the \\\n+                                                       crate attributes to silence this warning\",\n+                                                      feature)[]);\n+        }\n+    }\n     fn has_feature(&self, feature: &str) -> bool {\n         self.features.iter().any(|&n| n == feature)\n     }\n@@ -332,6 +343,31 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n+        match t.node {\n+            ast::TyPath(ref p, _) => {\n+                match &*p.segments {\n+\n+                    [ast::PathSegment { identifier, .. }] => {\n+                        let name = token::get_ident(identifier);\n+                        let msg = if name == \"int\" {\n+                            Some(\"the `int` type is deprecated; \\\n+                                  use `isize` or a fixed-sized integer\")\n+                        } else if name == \"uint\" {\n+                            Some(\"the `uint` type is deprecated; \\\n+                                  use `usize` or a fixed-sized integer\")\n+                        } else {\n+                            None\n+                        };\n+\n+                        if let Some(msg) = msg {\n+                            self.context.warn_feature(\"int_uint\", t.span, msg)\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            _ => {}\n+        }\n         visit::walk_ty(self, t);\n     }\n \n@@ -343,6 +379,25 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental in alpha release; \\\n                                    you can call `Box::new` instead.\");\n             }\n+            ast::ExprLit(ref lit) => {\n+                match lit.node {\n+                    ast::LitInt(_, ty) => {\n+                        let msg = if let ast::SignedIntLit(ast::TyIs(true), _) = ty {\n+                            Some(\"the `i` suffix on integers is deprecated; use `is` \\\n+                                  or one of the fixed-sized suffixes\")\n+                        } else if let ast::UnsignedIntLit(ast::TyUs(true)) = ty {\n+                            Some(\"the `u` suffix on integers is deprecated; use `us` \\\n+                                 or one of the fixed-sized suffixes\")\n+                        } else {\n+                            None\n+                        };\n+                        if let Some(msg) = msg {\n+                            self.context.warn_feature(\"int_uint\", e.span, msg);\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "9c947f422e9a99247610fc92dabfff90b75a0711", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -27,6 +27,7 @@\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n #![feature(quote, unsafe_destructor)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "f1f547ba0c7dd52e24855c6f32f558ecb390e743", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -702,14 +702,14 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n     if let Some(suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match suf {\n-            \"i\"   => ast::SignedIntLit(ast::TyIs, ast::Plus),\n-            \"is\"   => ast::SignedIntLit(ast::TyIs, ast::Plus),\n+            \"i\"   => ast::SignedIntLit(ast::TyIs(true), ast::Plus),\n+            \"is\"   => ast::SignedIntLit(ast::TyIs(false), ast::Plus),\n             \"i8\"  => ast::SignedIntLit(ast::TyI8, ast::Plus),\n             \"i16\" => ast::SignedIntLit(ast::TyI16, ast::Plus),\n             \"i32\" => ast::SignedIntLit(ast::TyI32, ast::Plus),\n             \"i64\" => ast::SignedIntLit(ast::TyI64, ast::Plus),\n-            \"u\"   => ast::UnsignedIntLit(ast::TyUs),\n-            \"us\"   => ast::UnsignedIntLit(ast::TyUs),\n+            \"u\"   => ast::UnsignedIntLit(ast::TyUs(true)),\n+            \"us\"   => ast::UnsignedIntLit(ast::TyUs(false)),\n             \"u8\"  => ast::UnsignedIntLit(ast::TyU8),\n             \"u16\" => ast::UnsignedIntLit(ast::TyU16),\n             \"u32\" => ast::UnsignedIntLit(ast::TyU32),"}, {"sha": "2117b68c08e5974a59ed34af9bc4628ad93a487f", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -51,6 +51,7 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n #![deny(missing_docs)]\n \n #[macro_use] extern crate log;"}, {"sha": "c4cb53d6cb7b6e19cf557c613cc756d794ba0ac3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -34,6 +34,7 @@\n #![allow(unknown_features)]\n #![feature(asm, slicing_syntax)]\n #![feature(box_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate getopts;\n extern crate regex;"}, {"sha": "17607383beed1435bdf6cb71a92e822f41e45b6b", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -30,6 +30,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![no_std]\n #![feature(slicing_syntax)]\n+#![allow(unknown_features)] #![feature(int_uint)]\n \n extern crate core;\n "}, {"sha": "6845116e4a4cefdfc81de8f20375d75f8b61e6a1", "filename": "src/test/compile-fail-fulldeps/issue-18986.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,6 +15,6 @@ pub use use_from_trait_xc::Trait;\n \n fn main() {\n     match () {\n-        Trait { x: 42u } => () //~ ERROR use of trait `Trait` in a struct pattern\n+        Trait { x: 42us } => () //~ ERROR use of trait `Trait` in a struct pattern\n     }\n }"}, {"sha": "bad192fc2cfea95bbb149a26748cde2747ef57ed", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n \n-struct sty(Vec<int> );\n+struct sty(Vec<isize> );\n \n-fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<int> {}\n+fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<isize> {}\n \n fn main() {\n     let _foo = unpack(|s| {"}, {"sha": "673314ec4c9978bf98327b22ff2b8c5ea7e6b73b", "filename": "src/test/compile-fail/arg-count-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farg-count-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farg-count-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farg-count-mismatch.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern: parameters were supplied\n \n-fn f(x: int) { }\n+fn f(x: isize) { }\n \n fn main() { let i: (); i = f(); }"}, {"sha": "1f657ca58326eb4bafbd3db64a52d82807add1b9", "filename": "src/test/compile-fail/arg-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farg-type-mismatch.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,6 +11,6 @@\n \n // error-pattern: mismatched types\n \n-fn f(x: int) { }\n+fn f(x: isize) { }\n \n fn main() { let i: (); i = f(()); }"}, {"sha": "3b4810a86abd559597a7e61c13065638a6f3bc3d", "filename": "src/test/compile-fail/array-old-syntax-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,5 +11,5 @@\n // Test that the old fixed length array syntax is a parsing error.\n \n fn main() {\n-    let _x: [int, ..3] = [0i, 1, 2]; //~ ERROR\n+    let _x: [isize, ..3] = [0is, 1, 2]; //~ ERROR\n }"}, {"sha": "c1b88290bc39cc80737d50af8062ef70555494aa", "filename": "src/test/compile-fail/array-old-syntax-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,5 +11,5 @@\n // Test that the old repeating array syntax gives an error.\n \n fn main() {\n-    let _ = [0i, ..3]; //~ ERROR\n+    let _ = [0is, ..3]; //~ ERROR\n }"}, {"sha": "ffbb25e266ac644c6bb46943b3f462ff9bb92b51", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,18 +10,18 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n-    let y: int;\n+    let x: isize;\n+    let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5u)); //~ ERROR input operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5u)); //~ ERROR input operand constraint contains '+'\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5us)); //~ ERROR input operand constraint contains '='\n+        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5us)); //~ ERROR input operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "8bc6f206dec02c7118c09a82ab3a621922fbfe47", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -18,17 +18,17 @@\n           target_arch = \"x86_64\"))]\n pub fn main() {\n     // assignment not dead\n-    let mut x: int = 0;\n+    let mut x: isize = 0;\n     unsafe {\n         // extra colon\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u), \"0\"(x) : : \"cc\");\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us), \"0\"(x) : : \"cc\");\n         //~^ WARNING unrecognized option\n     }\n     assert_eq!(x, 5);\n \n     unsafe {\n         // comma in place of a colon\n-        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8u) : \"cc\", \"volatile\");\n+        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8us) : \"cc\", \"volatile\");\n         //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);"}, {"sha": "9ad5d7e9f09eefbf021648eae0ff8cf739e7115c", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,18 +10,18 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     x = 1; //~ NOTE prior assignment occurs here\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u)); //~ ERROR re-assignment of immutable variable `x`\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us)); //~ ERROR re-assignment of immutable variable `x`\n     }\n     foo(x);\n }"}, {"sha": "b58d41e1d825c163ca84fe737b25dba72debf493", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,16 +10,16 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5u)); //~ ERROR output operand constraint lacks '='\n+        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5us)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "5e71a2c731dd275e2db7fde4ff78c407d206eeb0", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(asm)]\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n           target_arch = \"arm\",\n           target_arch = \"aarch64\"))]\n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     unsafe {\n         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x)); //~ ERROR use of possibly uninitialized variable: `x`\n     }"}, {"sha": "540272a8e2c58b511542504a666fdf20fb4be2c1", "filename": "src/test/compile-fail/assign-imm-local-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-imm-local-twice.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let v: int;\n+    let v: isize;\n     v = 1; //~ NOTE prior assignment occurs here\n     println!(\"v={}\", v);\n     v = 2; //~ ERROR re-assignment of immutable variable"}, {"sha": "0694420e7666fed35f4935e80f659ba03b7b5cb5", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,23 +9,23 @@\n // except according to those terms.\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n \n-  how_hungry : int,\n+  how_hungry : isize,\n }\n \n impl cat {\n-    pub fn speak(&self) { self.meows += 1u; }\n+    pub fn speak(&self) { self.meows += 1us; }\n }\n \n-fn cat(in_x : uint, in_y : int) -> cat {\n+fn cat(in_x : usize, in_y : isize) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y\n     }\n }\n \n fn main() {\n-  let nyan : cat = cat(52u, 99);\n+  let nyan : cat = cat(52us, 99);\n   nyan.speak = |&:| println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "ba8e4a652d337397609eb7c254de9b938e6f96a8", "filename": "src/test/compile-fail/assoc-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-inherent.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,7 +13,7 @@\n struct Foo;\n \n impl Foo {\n-    type Bar = int; //~ERROR associated items are not allowed in inherent impls\n+    type Bar = isize; //~ERROR associated items are not allowed in inherent impls\n }\n \n fn main() {}"}, {"sha": "adccd73beae2dc97651f38cdc1f844e6611cd74e", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n // Test equality constraints on associated types in a where clause.\n \n pub trait ToInt {\n-    fn to_int(&self) -> int;\n+    fn to_int(&self) -> isize;\n }\n \n pub trait GetToInt\n@@ -21,13 +21,13 @@ pub trait GetToInt\n     fn get(&self) -> <Self as GetToInt>::R;\n }\n \n-fn foo<G>(g: G) -> int\n+fn foo<G>(g: G) -> isize\n     where G : GetToInt\n {\n     ToInt::to_int(&g.get()) //~ ERROR not implemented\n }\n \n-fn bar<G : GetToInt>(g: G) -> int\n+fn bar<G : GetToInt>(g: G) -> isize\n     where G::R : ToInt\n {\n     ToInt::to_int(&g.get()) // OK"}, {"sha": "755a9f2d73f6271f22dbb263c9bcc40aeeeedeba", "filename": "src/test/compile-fail/associated-types-eq-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -18,9 +18,9 @@ pub trait Foo {\n \n struct Bar;\n \n-impl Foo for int {\n-    type A = uint;\n-    fn boo(&self) -> uint { 42 }\n+impl Foo for isize {\n+    type A = usize;\n+    fn boo(&self) -> usize { 42 }\n }\n \n fn baz<I: Foo>(x: &<I as Foo<A=Bar>>::A) {}"}, {"sha": "ed81c0fccbc854687bde295941db5657b497988c", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -18,9 +18,9 @@ pub trait Foo {\n \n struct Bar;\n \n-impl Foo for int {\n-    type A = uint;\n-    fn boo(&self) -> uint {\n+impl Foo for isize {\n+    type A = usize;\n+    fn boo(&self) -> usize {\n         42\n     }\n }\n@@ -40,7 +40,7 @@ pub fn baz(x: &Foo<A=Bar>) {\n \n \n pub fn main() {\n-    let a = 42i;\n+    let a = 42is;\n     foo1(a); //~ERROR expected usize, found struct Bar\n     baz(&a); //~ERROR expected usize, found struct Bar\n }"}, {"sha": "9baa7f1ad5a6901237f64cb4f1777590e47d638d", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,15 +12,15 @@\n \n trait Foo {\n     type A;\n-    fn bar() -> int;\n+    fn bar() -> isize;\n }\n \n-impl Foo for int {\n-    type A = uint;\n-    fn bar() -> int { 42 }\n+impl Foo for isize {\n+    type A = usize;\n+    fn bar() -> isize { 42 }\n }\n \n pub fn main() {\n-    let x: int = Foo::<A=uint>::bar();\n+    let x: isize = Foo::<A=usize>::bar();\n     //~^ERROR unexpected binding of associated item in expression path\n }"}, {"sha": "d5678c155fd2db44dd4f6a94e354ff6a3ee7b196", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,43 +17,43 @@ pub trait TheTrait<T> {\n }\n \n struct IntStruct {\n-    x: int\n+    x: isize\n }\n \n-impl<'a> TheTrait<&'a int> for IntStruct {\n-    type A = &'a int;\n+impl<'a> TheTrait<&'a isize> for IntStruct {\n+    type A = &'a isize;\n \n-    fn get(&self, t: &'a int) -> &'a int {\n+    fn get(&self, t: &'a isize) -> &'a isize {\n         t\n     }\n }\n \n struct UintStruct {\n-    x: int\n+    x: isize\n }\n \n-impl<'a> TheTrait<&'a int> for UintStruct {\n-    type A = &'a uint;\n+impl<'a> TheTrait<&'a isize> for UintStruct {\n+    type A = &'a usize;\n \n-    fn get(&self, t: &'a int) -> &'a uint {\n+    fn get(&self, t: &'a isize) -> &'a usize {\n         panic!()\n     }\n }\n \n fn foo<T>()\n-    where T : for<'x> TheTrait<&'x int, A = &'x int>\n+    where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n {\n     // ok for IntStruct, but not UintStruct\n }\n \n fn bar<T>()\n-    where T : for<'x> TheTrait<&'x int, A = &'x uint>\n+    where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n {\n     // ok for UintStruct, but not IntStruct\n }\n \n fn baz<T>()\n-    where T : for<'x,'y> TheTrait<&'x int, A = &'y int>\n+    where T : for<'x,'y> TheTrait<&'x isize, A = &'y isize>\n {\n     // not ok for either struct, due to the use of two lifetimes\n }"}, {"sha": "31492406fedd35fd6350e65b660ef44fa24c6c28", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -19,24 +19,24 @@ pub trait Foo {\n \n struct Bar;\n \n-impl Foo for int {\n-    type A = uint;\n+impl Foo for isize {\n+    type A = usize;\n     type B = char;\n-    fn boo(&self) -> uint {\n+    fn boo(&self) -> usize {\n         42\n     }\n }\n \n pub fn main() {\n-    let a = &42i as &Foo<A=uint, B=char>;\n+    let a = &42is as &Foo<A=usize, B=char>;\n \n-    let b = &42i as &Foo<A=uint>;\n+    let b = &42is as &Foo<A=usize>;\n     //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n \n-    let c = &42i as &Foo<B=char>;\n+    let c = &42is as &Foo<B=char>;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n-    let d = &42i as &Foo;\n+    let d = &42is as &Foo;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n     //~| ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n }"}, {"sha": "b6c4d59c8488299d859beb46d72f50da458e35f4", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,7 +16,7 @@ trait Foo<T> {\n     fn get_bar(&self) -> Self::Bar;\n }\n \n-fn f<T:Foo<int>>(t: &T) {\n+fn f<T:Foo<isize>>(t: &T) {\n     let u: <T as Foo<usize>>::Bar = t.get_bar();\n     //~^ ERROR the trait `Foo<usize>` is not implemented for the type `T`\n }"}, {"sha": "fa09ae793bf632c75198a0fad1b8d7056838040c", "filename": "src/test/compile-fail/associated-types-issue-17359.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,7 +15,7 @@ trait Trait {\n     type Type;\n }\n \n-impl Trait for int {}  //~ ERROR missing: `Type`\n+impl Trait for isize {}  //~ ERROR missing: `Type`\n \n fn main() {}\n "}, {"sha": "fd60896c29885b262a657fec9efa2de3a2716162", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n struct Struct {\n-    x: int,\n+    x: isize,\n }\n \n impl Struct {"}, {"sha": "74c8dffced5cf9e0d06f2847c0fab8e00dc14d78", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,8 +14,8 @@ pub trait Foo {\n     type A;\n }\n \n-impl Foo for int {\n-    type A = uint;\n+impl Foo for isize {\n+    type A = usize;\n }\n \n pub fn f1<T: Foo>(a: T, x: T::A) {}\n@@ -45,7 +45,7 @@ pub fn f1_uint_int() {\n }\n \n pub fn f2_int() {\n-    let _: int = f2(2is);\n+    let _: isize = f2(2is);\n     //~^ ERROR expected `isize`, found `usize`\n }\n "}, {"sha": "917c03fbf4b1c427097d4de2ac42960912bc4475", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,7 +17,7 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-fn foo2<I>(x: <I as for<'x> Foo<&'x int>>::A)\n+fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n     //~^ ERROR expected identifier, found keyword `for`\n     //~| ERROR expected one of `::` or `>`\n {"}, {"sha": "285a77d6b657ae8bd35d012f2b320cab4441b2c2", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,15 +17,15 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-fn foo<'a, I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&'a int>>::A)\n+fn foo<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A)\n {\n     let y: I::A = x;\n }\n \n-fn bar<'a, 'b, I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&'a int>>::A,\n-    y: <I as Foo<&'b int>>::A,\n+fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A,\n+    y: <I as Foo<&'b isize>>::A,\n     cond: bool)\n {\n     // x and y here have two distinct lifetimes:"}, {"sha": "a79d5c4649a49e2e82fa7b71850b3ccc1f144db4", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,7 +17,7 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-fn foo2<I : for<'x> Foo<&'x int>>(\n+fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: I::A)\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n {\n@@ -28,15 +28,15 @@ fn foo2<I : for<'x> Foo<&'x int>>(\n     // specifically for fn signatures.\n }\n \n-fn foo3<I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&int>>::A)\n+fn foo3<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A)\n {\n     // OK, in this case we spelled out the precise regions involved, though we left one of\n     // them anonymous.\n }\n \n-fn foo4<'a, I : for<'x> Foo<&'x int>>(\n-    x: <I as Foo<&'a int>>::A)\n+fn foo4<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A)\n {\n     // OK, in this case we spelled out the precise regions involved.\n }"}, {"sha": "44ad0bb01138fe2d085d315f974abd11ec940281", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,18 +17,18 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-struct SomeStruct<I : for<'x> Foo<&'x int>> {\n+struct SomeStruct<I : for<'x> Foo<&'x isize>> {\n     field: I::A\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n-struct AnotherStruct<I : for<'x> Foo<&'x int>> {\n-    field: <I as Foo<&int>>::A\n+struct AnotherStruct<I : for<'x> Foo<&'x isize>> {\n+    field: <I as Foo<&isize>>::A\n     //~^ ERROR missing lifetime specifier\n }\n \n-struct YetAnotherStruct<'a, I : for<'x> Foo<&'x int>> {\n-    field: <I as Foo<&'a int>>::A\n+struct YetAnotherStruct<'a, I : for<'x> Foo<&'x isize>> {\n+    field: <I as Foo<&'a isize>>::A\n }\n \n pub fn main() {}"}, {"sha": "af46a1b42d07855ff2f122ea4edbd8e2eafb7df4", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,17 +17,17 @@ pub trait Foo<T> {\n     fn get(&self, t: T) -> Self::A;\n }\n \n-trait SomeTrait<I : for<'x> Foo<&'x int>> {\n+trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: I::A);\n     //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n }\n \n-trait AnotherTrait<I : for<'x> Foo<&'x int>> {\n-    fn some_method(&self, arg: <I as Foo<&int>>::A);\n+trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method(&self, arg: <I as Foo<&isize>>::A);\n }\n \n-trait YetAnotherTrait<I : for<'x> Foo<&'x int>> {\n-    fn some_method<'a>(&self, arg: <I as Foo<&'a int>>::A);\n+trait YetAnotherTrait<I : for<'x> Foo<&'x isize>> {\n+    fn some_method<'a>(&self, arg: <I as Foo<&'a isize>>::A);\n }\n \n pub fn main() {}"}, {"sha": "aecbf217a5b25e916155829b81188bf7401049ac", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,15 +12,15 @@\n \n trait Foo {\n     type A;\n-    fn bar() -> int;\n+    fn bar() -> isize;\n }\n \n-impl Foo for int {\n-    type A = uint;\n-    fn bar() -> int { 42 }\n+impl Foo for isize {\n+    type A = usize;\n+    fn bar() -> isize { 42 }\n }\n \n pub fn main() {\n-    let x: int = Foo::bar();\n+    let x: isize = Foo::bar();\n     //~^ ERROR type annotations required\n }"}, {"sha": "ad3f467a454713e2fb8c6a0cfe58d8d93f6335ea", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -27,7 +27,7 @@ trait MyIter {\n     fn test(&self);\n }\n \n-impl<'a> MyIter for &'a [int] {\n+impl<'a> MyIter for &'a [isize] {\n     fn test_mut(&mut self) { }\n     fn test(&self) { }\n }"}, {"sha": "2c5749e0d5d39ae81127625caa1a3a79b4e7cddf", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     assert_eq!(z, 21);\n     let forty: fish = fish{a: box 40};\n     let two: fish = fish{a: box 2};\n-    let answer: int = forty.a + two.a;\n+    let answer: isize = forty.a + two.a;\n     //~^ ERROR binary operation `+` cannot be applied to type `Box<isize>`\n     println!(\"{}\", answer);\n     assert_eq!(answer, 42);"}, {"sha": "e5dbdbd237db87a2daac4d4df70f743a611d629b", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,8 +10,8 @@\n \n // Tests that a function with a ! annotation always actually fails\n \n-fn bad_bang(i: uint) -> ! {\n-    return 7u; //~ ERROR `return` in a function declared as diverging [E0166]\n+fn bad_bang(i: usize) -> ! {\n+    return 7us; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n \n-fn main() { bad_bang(5u); }\n+fn main() { bad_bang(5us); }"}, {"sha": "414421c8b77ce2bd4dc20818187c9fc037ced096", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,8 +10,8 @@\n \n // Tests that a function with a ! annotation always actually fails\n \n-fn bad_bang(i: uint) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    if i < 0u { } else { panic!(); }\n+fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n+    if i < 0us { } else { panic!(); }\n }\n \n-fn main() { bad_bang(5u); }\n+fn main() { bad_bang(5us); }"}, {"sha": "938664887327be367b34840c8a240f1b2903a115", "filename": "src/test/compile-fail/bad-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: can't capture dynamic environment in a fn item;\n fn foo() {\n-    let x: int;\n+    let x: isize;\n     fn bar() { log(debug, x); }\n }\n fn main() { foo(); }"}, {"sha": "39a6922cfd0b653ec2ba3520ff6a8362525f4ae4", "filename": "src/test/compile-fail/bad-env-capture2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: can't capture dynamic environment in a fn item;\n-fn foo(x: int) {\n+fn foo(x: isize) {\n     fn bar() { log(debug, x); }\n }\n fn main() { foo(2); }"}, {"sha": "8857b94ddce0c7bf0c678788600e9335b646dbad", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: can't capture dynamic environment in a fn item;\n-fn foo(x: int) {\n+fn foo(x: isize) {\n     fn mth() {\n         fn bar() { log(debug, x); }\n     }"}, {"sha": "321dca8989134f92391abda79aa2b74fc11c4f14", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main(x: int) { } //~ ERROR: main function expects type\n+fn main(x: isize) { } //~ ERROR: main function expects type"}, {"sha": "33043ff5524a45753ad6826c9661f4025ec4ef5d", "filename": "src/test/compile-fail/bad-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-match.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n // error-pattern: expected\n \n fn main() {\n-  let int x = 5;\n+  let isize x = 5;\n   match x;\n }\n "}, {"sha": "8e5a6054b89280593ad0d587251b5d2e43466262", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1u.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n+    1us.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n trait bar {\n     fn bar<T:Send>(&self);\n }\n \n-impl bar for uint {\n+impl bar for usize {\n     fn bar<T:Send>(&self) {\n     }\n }"}, {"sha": "79fe4e7165ec378d133e49be0faa3846781e4b9a", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -33,28 +33,28 @@ trait Trait<T> {\n }\n \n struct S2 {\n-    contents: int,\n+    contents: isize,\n }\n \n-impl Trait<int> for S2 {\n-    fn new<U>(x: int, _: U) -> S2 {\n+impl Trait<isize> for S2 {\n+    fn new<U>(x: isize, _: U) -> S2 {\n         S2 {\n             contents: x,\n         }\n     }\n }\n \n fn foo<'a>() {\n-    let _ = S::new::<int,f64>(1, 1.0);\n+    let _ = S::new::<isize,f64>(1, 1.0);\n     //~^ ERROR too many type parameters provided\n \n-    let _ = S::<'a,int>::new::<f64>(1, 1.0);\n+    let _ = S::<'a,isize>::new::<f64>(1, 1.0);\n     //~^ ERROR too many lifetime parameters provided\n \n-    let _: S2 = Trait::new::<int,f64>(1, 1.0);\n+    let _: S2 = Trait::new::<isize,f64>(1, 1.0);\n     //~^ ERROR too many type parameters provided\n \n-    let _: S2 = Trait::<'a,int>::new::<f64>(1, 1.0);\n+    let _: S2 = Trait::<'a,isize>::new::<f64>(1, 1.0);\n     //~^ ERROR too many lifetime parameters provided\n }\n "}, {"sha": "b208c6f4244efc15399e48ed35144882db82e119", "filename": "src/test/compile-fail/bad-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-name.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,5 +11,5 @@\n // error-pattern: expected\n \n fn main() {\n-  let x.y::<int>.z foo;\n+  let x.y::<isize>.z foo;\n }"}, {"sha": "d17fa68b47cbe21f2d5d654894f0e8968fc98e48", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn f() -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    3i\n+    3is\n }\n fn main() { }"}, {"sha": "0d84a5e7d0280bffdde45f64d69385013857fb2a", "filename": "src/test/compile-fail/better-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `3`\n+    let x: [isize 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `3`\n }"}, {"sha": "375f6c5d0475ecfc507f1286c49daee538739f5f", "filename": "src/test/compile-fail/bind-struct-early-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    struct Foo { x: int }\n+    struct Foo { x: isize }\n     match (Foo { x: 10 }) {\n         Foo { ref x: ref x } => {}, //~ ERROR unexpected `:`\n         _ => {}"}, {"sha": "704d856f106b280468522ff0377c02c0882c77a3", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n \n // error-pattern: unresolved\n \n-enum color { rgb(int, int, int), rgba(int, int, int, int), }\n+enum color { rgb(isize, isize, isize), rgba(isize, isize, isize, isize), }\n \n fn main() {\n     let red: color = rgb(255, 0, 0);"}, {"sha": "12555c550729ca13c405ccd11cd14e5c8572c169", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,29 +13,29 @@\n // Tests that we can't assign to or mutably borrow upvars from `Fn`\n // closures (issue #17780)\n \n-fn set(x: &mut uint) { *x = 5; }\n+fn set(x: &mut usize) { *x = 5; }\n \n fn main() {\n     // By-ref captures\n     {\n-        let mut x = 0u;\n+        let mut x = 0us;\n         let _f = |&:| x = 42; //~ ERROR cannot assign\n \n-        let mut y = 0u;\n+        let mut y = 0us;\n         let _g = |&:| set(&mut y); //~ ERROR cannot borrow\n \n-        let mut z = 0u;\n+        let mut z = 0us;\n         let _h = |&mut:| { set(&mut z); |&:| z = 42; }; //~ ERROR cannot assign\n     }\n     // By-value captures\n     {\n-        let mut x = 0u;\n+        let mut x = 0us;\n         let _f = move |&:| x = 42; //~ ERROR cannot assign\n \n-        let mut y = 0u;\n+        let mut y = 0us;\n         let _g = move |&:| set(&mut y); //~ ERROR cannot borrow\n \n-        let mut z = 0u;\n+        let mut z = 0us;\n         let _h = move |&mut:| { set(&mut z); move |&:| z = 42; }; //~ ERROR cannot assign\n     }\n }"}, {"sha": "e6fe60a9004b6b1f00bfccc6062b84dfc4af32a3", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,33 +11,33 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-struct Foo(Box<int>, int);\n+struct Foo(Box<isize>, isize);\n \n-struct Bar(int, int);\n+struct Bar(isize, isize);\n \n fn main() {\n-    let x = (box 1i, 2i);\n+    let x = (box 1is, 2is);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n-    let mut x = (1i, 2i);\n+    let mut x = (1is, 2is);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n \n-    let mut x = (1i, 2i);\n+    let mut x = (1is, 2is);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n \n \n-    let x = Foo(box 1i, 2i);\n+    let x = Foo(box 1is, 2is);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n-    let mut x = Bar(1i, 2i);\n+    let mut x = Bar(1is, 2is);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n \n-    let mut x = Bar(1i, 2i);\n+    let mut x = Bar(1is, 2is);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n }"}, {"sha": "92f16d8ffcedb8351c2835ead67828a7f602929b", "filename": "src/test/compile-fail/borrowck-and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-and-init.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let i: int;\n+    let i: isize;\n \n     println!(\"{}\", false && { i = 5; true });\n     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`"}, {"sha": "5ee2b89dd9839d4e9d510dfb457a9312ea9d055f", "filename": "src/test/compile-fail/borrowck-anon-fields-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-struct.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n // Tests that we are able to distinguish when loans borrow different\n // anonymous fields of a tuple vs the same anonymous field.\n \n-struct Y(uint, uint);\n+struct Y(usize, usize);\n \n fn distinct_variant() {\n     let mut y = Y(1, 2);"}, {"sha": "88486756b66598dff4d8ce3f6dbdc33d66b6d675", "filename": "src/test/compile-fail/borrowck-anon-fields-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n // anonymous fields of a tuple vs the same anonymous field.\n \n fn distinct_variant() {\n-    let mut y = (1i, 2i);\n+    let mut y = (1is, 2is);\n \n     let a = match y {\n         (ref mut a, _) => a\n@@ -27,7 +27,7 @@ fn distinct_variant() {\n }\n \n fn same_variant() {\n-    let mut y = (1i, 2i);\n+    let mut y = (1is, 2is);\n \n     let a = match y {\n         (ref mut a, _) => a"}, {"sha": "4e1b85283a6b1d3a0e72c0ae9d3c5c68291b9b57", "filename": "src/test/compile-fail/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-variant.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n // anonymous fields of an enum variant vs the same anonymous field.\n \n enum Foo {\n-    X, Y(uint, uint)\n+    X, Y(usize, usize)\n }\n \n fn distinct_variant() {"}, {"sha": "ac9ddc2ce6503d492ad3bbd4504e4fd8fd728ef7", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,9 +12,9 @@\n #![feature(box_syntax)]\n \n fn f() {\n-    let mut a = [box 0i, box 1i];\n+    let mut a = [box 0is, box 1is];\n     drop(a[0]);\n-    a[1] = box 2i;\n+    a[1] = box 2is;\n     drop(a[0]); //~ ERROR use of moved value: `a[..]`\n }\n "}, {"sha": "3a2c6f038510721794edb2b4a60884df0767cdd5", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,22 +9,22 @@\n // except according to those terms.\n \n struct Point {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n fn a() {\n     let mut p = vec!(1);\n \n     // Create an immutable pointer into p's contents:\n-    let q: &int = &p[0];\n+    let q: &isize = &p[0];\n \n     p[0] = 5; //~ ERROR cannot borrow\n \n     println!(\"{}\", *q);\n }\n \n-fn borrow<F>(_x: &[int], _f: F) where F: FnOnce() {}\n+fn borrow<F>(_x: &[isize], _f: F) where F: FnOnce() {}\n \n fn b() {\n     // here we alias the mutable vector into an imm slice and try to"}, {"sha": "802b83119b7c31ce633d72363368b9990fae38b6", "filename": "src/test/compile-fail/borrowck-assign-comp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct point { x: int, y: int }\n+struct point { x: isize, y: isize }\n \n fn a() {\n     let mut p = point {x: 3, y: 4};\n     let q = &p;\n \n     // This assignment is illegal because the field x is not\n     // inherently mutable; since `p` was made immutable, `p.x` is now\n-    // immutable.  Otherwise the type of &_q.x (&int) would be wrong.\n+    // immutable.  Otherwise the type of &_q.x (&isize) would be wrong.\n     p.x = 5; //~ ERROR cannot assign to `p.x`\n     q.x;\n }"}, {"sha": "d66cdb99a74636b6d09f26a3d39d37bc65897b89", "filename": "src/test/compile-fail/borrowck-assign-to-andmut-in-aliasable-loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-aliasable-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-aliasable-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-aliasable-loc.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n struct S<'a> {\n-    pointer: &'a mut int\n+    pointer: &'a mut isize\n }\n \n fn a(s: &S) {"}, {"sha": "77aa57ef1b5ba6f8bf78ffe5e01aba097447a83c", "filename": "src/test/compile-fail/borrowck-assign-to-andmut-in-borrowed-loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-andmut-in-borrowed-loc.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n struct S<'a> {\n-    pointer: &'a mut int\n+    pointer: &'a mut isize\n }\n \n fn copy_borrowed_ptr<'a>(p: &'a mut S<'a>) -> S<'a> {"}, {"sha": "1b5b1899e0d9d34d0272c77172381b228f2c5cae", "filename": "src/test/compile-fail/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-constants.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static foo: int = 5;\n+static foo: isize = 5;\n \n fn main() {\n     // assigning to various global constants"}, {"sha": "ea020dc0685218085da8d1e20fa4fea524245b11", "filename": "src/test/compile-fail/borrowck-auto-mut-ref-to-immut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n // Tests that auto-ref can't create mutable aliases to immutable memory.\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n impl Foo {"}, {"sha": "d5f09305808f0bc3e54454cf0d8ca6f97e3bfb3e", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,10 +10,10 @@\n \n enum Either<T, U> { Left(T), Right(U) }\n \n-struct X(Either<(uint,uint), fn()>);\n+struct X(Either<(usize,usize), fn()>);\n \n impl X {\n-    pub fn with<F>(&self, blk: F) where F: FnOnce(&Either<(uint, uint), fn()>) {\n+    pub fn with<F>(&self, blk: F) where F: FnOnce(&Either<(usize, usize), fn()>) {\n         let X(ref e) = *self;\n         blk(e)\n     }"}, {"sha": "4d1939be5b9f7350eeeb6772b458d21badf7227d", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,12 +13,12 @@\n \n #![feature(box_syntax)]\n \n-fn rewrite(v: &mut Box<uint>) -> uint {\n+fn rewrite(v: &mut Box<usize>) -> usize {\n     *v = box 22;\n     **v\n }\n \n-fn add(v: &uint, w: uint) -> uint {\n+fn add(v: &usize, w: usize) -> usize {\n     *v + w\n }\n "}, {"sha": "9eda3689334c19f4176be63c228ea93157ac9e62", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,12 +13,12 @@\n \n #![feature(box_syntax)]\n \n-fn rewrite(v: &mut Box<uint>) -> uint {\n+fn rewrite(v: &mut Box<usize>) -> usize {\n     *v = box 22;\n     **v\n }\n \n-fn add(v: &uint, w: Box<uint>) -> uint {\n+fn add(v: &usize, w: Box<usize>) -> usize {\n     *v + *w\n }\n "}, {"sha": "a09ee439245434dfc57eca2f51de09ce7713a35a", "filename": "src/test/compile-fail/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n-    let x: int;\n+    let x: isize;\n     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n         println!(\"{}\", x);\n     });"}, {"sha": "397c55a502afd6df79bc38cd10f8efd9dac70046", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,8 +17,8 @@ struct Foo {\n impl Copy for Foo {}\n \n struct Bar {\n-  int1: int,\n-  int2: int,\n+  int1: isize,\n+  int2: isize,\n }\n \n impl Copy for Bar {}"}, {"sha": "ae4c09c59d720c2d3a004b981994d6786da59db5", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,8 +16,8 @@ struct Foo {\n impl Copy for Foo {}\n \n struct Bar {\n-  int1: int,\n-  int2: int,\n+  int1: isize,\n+  int2: isize,\n }\n \n impl Copy for Bar {}"}, {"sha": "fbb3824cd4060089081cc91475581b5229c84658", "filename": "src/test/compile-fail/borrowck-borrow-from-temporary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-temporary.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,9 +11,9 @@\n // Test lifetimes are linked properly when we take reference\n // to interior.\n \n-struct Foo(int);\n+struct Foo(isize);\n \n-fn foo<'a>() -> &'a int {\n+fn foo<'a>() -> &'a isize {\n     let &Foo(ref x) = &Foo(3); //~ ERROR borrowed value does not live long enough\n     x\n }"}, {"sha": "9126058a4e6f41cacf0ecc08f0d87948b9dc1de1", "filename": "src/test/compile-fail/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,20 +13,20 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-fn foo(t0: & &mut int) {\n+fn foo(t0: & &mut isize) {\n     let t1 = t0;\n-    let p: &int = &**t0;\n+    let p: &isize = &**t0;\n     **t1 = 22; //~ ERROR cannot assign\n }\n \n-fn foo3(t0: &mut &mut int) {\n+fn foo3(t0: &mut &mut isize) {\n     let t1 = &mut *t0;\n-    let p: &int = &**t0; //~ ERROR cannot borrow\n+    let p: &isize = &**t0; //~ ERROR cannot borrow\n     **t1 = 22;\n }\n \n-fn foo4(t0: & &mut int) {\n-    let x:  &mut int = &mut **t0; //~ ERROR cannot borrow\n+fn foo4(t0: & &mut isize) {\n+    let x:  &mut isize = &mut **t0; //~ ERROR cannot borrow\n     *x += 1;\n }\n "}, {"sha": "5db9ad2e3a4a9608bc93424a8bdc64a72e152bfb", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -32,25 +32,25 @@ impl<T> DerefMut for Own<T> {\n }\n \n struct Point {\n-    x: int,\n-    y: int\n+    x: isize,\n+    y: isize\n }\n \n impl Point {\n-    fn get(&self) -> (int, int) {\n+    fn get(&self) -> (isize, isize) {\n         (self.x, self.y)\n     }\n \n-    fn set(&mut self, x: int, y: int) {\n+    fn set(&mut self, x: isize, y: isize) {\n         self.x = x;\n         self.y = y;\n     }\n \n-    fn x_ref(&self) -> &int {\n+    fn x_ref(&self) -> &isize {\n         &self.x\n     }\n \n-    fn y_mut(&mut self) -> &mut int {\n+    fn y_mut(&mut self) -> &mut isize {\n         &mut self.y\n     }\n }\n@@ -67,15 +67,15 @@ fn deref_mut_field2(mut x: Own<Point>) {\n     let _i = &mut x.y;\n }\n \n-fn deref_extend_field(x: &Own<Point>) -> &int {\n+fn deref_extend_field(x: &Own<Point>) -> &isize {\n     &x.y\n }\n \n-fn deref_extend_mut_field1(x: &Own<Point>) -> &mut int {\n+fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_field2(x: &mut Own<Point>) -> &mut int {\n+fn deref_extend_mut_field2(x: &mut Own<Point>) -> &mut isize {\n     &mut x.y\n }\n \n@@ -126,15 +126,15 @@ fn deref_mut_method2(mut x: Own<Point>) {\n     x.set(0, 0);\n }\n \n-fn deref_extend_method(x: &Own<Point>) -> &int {\n+fn deref_extend_method(x: &Own<Point>) -> &isize {\n     x.x_ref()\n }\n \n-fn deref_extend_mut_method1(x: &Own<Point>) -> &mut int {\n+fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n     x.y_mut() //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_method2(x: &mut Own<Point>) -> &mut int {\n+fn deref_extend_mut_method2(x: &mut Own<Point>) -> &mut isize {\n     x.y_mut()\n }\n "}, {"sha": "75680de9c9effb5b433cdf51762a35207cb8999d", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -26,25 +26,25 @@ impl<T> Deref for Rc<T> {\n }\n \n struct Point {\n-    x: int,\n-    y: int\n+    x: isize,\n+    y: isize\n }\n \n impl Point {\n-    fn get(&self) -> (int, int) {\n+    fn get(&self) -> (isize, isize) {\n         (self.x, self.y)\n     }\n \n-    fn set(&mut self, x: int, y: int) {\n+    fn set(&mut self, x: isize, y: isize) {\n         self.x = x;\n         self.y = y;\n     }\n \n-    fn x_ref(&self) -> &int {\n+    fn x_ref(&self) -> &isize {\n         &self.x\n     }\n \n-    fn y_mut(&mut self) -> &mut int {\n+    fn y_mut(&mut self) -> &mut isize {\n         &mut self.y\n     }\n }\n@@ -61,15 +61,15 @@ fn deref_mut_field2(mut x: Rc<Point>) {\n     let _i = &mut x.y; //~ ERROR cannot borrow\n }\n \n-fn deref_extend_field(x: &Rc<Point>) -> &int {\n+fn deref_extend_field(x: &Rc<Point>) -> &isize {\n     &x.y\n }\n \n-fn deref_extend_mut_field1(x: &Rc<Point>) -> &mut int {\n+fn deref_extend_mut_field1(x: &Rc<Point>) -> &mut isize {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_field2(x: &mut Rc<Point>) -> &mut int {\n+fn deref_extend_mut_field2(x: &mut Rc<Point>) -> &mut isize {\n     &mut x.y //~ ERROR cannot borrow\n }\n \n@@ -97,15 +97,15 @@ fn deref_mut_method2(mut x: Rc<Point>) {\n     x.set(0, 0); //~ ERROR cannot borrow\n }\n \n-fn deref_extend_method(x: &Rc<Point>) -> &int {\n+fn deref_extend_method(x: &Rc<Point>) -> &isize {\n     x.x_ref()\n }\n \n-fn deref_extend_mut_method1(x: &Rc<Point>) -> &mut int {\n+fn deref_extend_mut_method1(x: &Rc<Point>) -> &mut isize {\n     x.y_mut() //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut_method2(x: &mut Rc<Point>) -> &mut int {\n+fn deref_extend_mut_method2(x: &mut Rc<Point>) -> &mut isize {\n     x.y_mut() //~ ERROR cannot borrow\n }\n "}, {"sha": "bfe53b739f4a8811b9373d0f2713f9d8fa9593d7", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -31,39 +31,39 @@ impl<T> DerefMut for Own<T> {\n     }\n }\n \n-fn deref_imm(x: Own<int>) {\n+fn deref_imm(x: Own<isize>) {\n     let _i = &*x;\n }\n \n-fn deref_mut1(x: Own<int>) {\n+fn deref_mut1(x: Own<isize>) {\n     let _i = &mut *x; //~ ERROR cannot borrow\n }\n \n-fn deref_mut2(mut x: Own<int>) {\n+fn deref_mut2(mut x: Own<isize>) {\n     let _i = &mut *x;\n }\n \n-fn deref_extend<'a>(x: &'a Own<int>) -> &'a int {\n+fn deref_extend<'a>(x: &'a Own<isize>) -> &'a isize {\n     &**x\n }\n \n-fn deref_extend_mut1<'a>(x: &'a Own<int>) -> &'a mut int {\n+fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n     &mut **x //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut2<'a>(x: &'a mut Own<int>) -> &'a mut int {\n+fn deref_extend_mut2<'a>(x: &'a mut Own<isize>) -> &'a mut isize {\n     &mut **x\n }\n \n-fn assign1<'a>(x: Own<int>) {\n+fn assign1<'a>(x: Own<isize>) {\n     *x = 3; //~ ERROR cannot borrow\n }\n \n-fn assign2<'a>(x: &'a Own<int>) {\n+fn assign2<'a>(x: &'a Own<isize>) {\n     **x = 3; //~ ERROR cannot borrow\n }\n \n-fn assign3<'a>(x: &'a mut Own<int>) {\n+fn assign3<'a>(x: &'a mut Own<isize>) {\n     **x = 3;\n }\n "}, {"sha": "153368f4894a45da50bafd2fe2daffc5c7ce679f", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -25,39 +25,39 @@ impl<T> Deref for Rc<T> {\n     }\n }\n \n-fn deref_imm(x: Rc<int>) {\n+fn deref_imm(x: Rc<isize>) {\n     let _i = &*x;\n }\n \n-fn deref_mut1(x: Rc<int>) {\n+fn deref_mut1(x: Rc<isize>) {\n     let _i = &mut *x; //~ ERROR cannot borrow\n }\n \n-fn deref_mut2(mut x: Rc<int>) {\n+fn deref_mut2(mut x: Rc<isize>) {\n     let _i = &mut *x; //~ ERROR cannot borrow\n }\n \n-fn deref_extend<'a>(x: &'a Rc<int>) -> &'a int {\n+fn deref_extend<'a>(x: &'a Rc<isize>) -> &'a isize {\n     &**x\n }\n \n-fn deref_extend_mut1<'a>(x: &'a Rc<int>) -> &'a mut int {\n+fn deref_extend_mut1<'a>(x: &'a Rc<isize>) -> &'a mut isize {\n     &mut **x //~ ERROR cannot borrow\n }\n \n-fn deref_extend_mut2<'a>(x: &'a mut Rc<int>) -> &'a mut int {\n+fn deref_extend_mut2<'a>(x: &'a mut Rc<isize>) -> &'a mut isize {\n     &mut **x //~ ERROR cannot borrow\n }\n \n-fn assign1<'a>(x: Rc<int>) {\n+fn assign1<'a>(x: Rc<isize>) {\n     *x = 3; //~ ERROR cannot assign\n }\n \n-fn assign2<'a>(x: &'a Rc<int>) {\n+fn assign2<'a>(x: &'a Rc<isize>) {\n     **x = 3; //~ ERROR cannot assign\n }\n \n-fn assign3<'a>(x: &'a mut Rc<int>) {\n+fn assign3<'a>(x: &'a mut Rc<isize>) {\n     **x = 3; //~ ERROR cannot assign\n }\n "}, {"sha": "98d1905ed9068155797f616b3f75a29db5ab128f", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,7 +16,7 @@ extern crate collections;\n use std::collections::HashMap;\n \n fn main() {\n-    let mut buggy_map: HashMap<uint, &uint> = HashMap::new();\n+    let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n     buggy_map.insert(42, &*box 1); //~ ERROR borrowed value does not live long enough\n \n     // but it is ok if we use a temporary"}, {"sha": "648d0d81ffbc0ef28fd99d0da26338f68e6cb177", "filename": "src/test/compile-fail/borrowck-box-insensitivity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-box-insensitivity.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,23 +11,23 @@\n #![feature(box_syntax)]\n \n struct A {\n-    x: Box<int>,\n-    y: int,\n+    x: Box<isize>,\n+    y: isize,\n }\n \n struct B {\n-    x: Box<int>,\n-    y: Box<int>,\n+    x: Box<isize>,\n+    y: Box<isize>,\n }\n \n struct C {\n     x: Box<A>,\n-    y: int,\n+    y: isize,\n }\n \n struct D {\n     x: Box<A>,\n-    y: Box<int>,\n+    y: Box<isize>,\n }\n \n fn copy_after_move() {"}, {"sha": "a52eaeeb9c3e303d89566aca0a5f2c4c13fe6f76", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo() -> int {\n-    let x: int;\n+fn foo() -> isize {\n+    let x: isize;\n \n-    while 1i != 2  {\n+    while 1is != 2  {\n         break;\n         x = 0;\n     }\n \n     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n-    return 17i;\n+    return 17is;\n }\n \n fn main() { println!(\"{}\", foo()); }"}, {"sha": "8a6a036945b78e60994964d9cde1d1c53cf65b3d", "filename": "src/test/compile-fail/borrowck-break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo() -> int {\n-    let x: int;\n+fn foo() -> isize {\n+    let x: isize;\n \n     loop {\n         break;"}, {"sha": "010ddb792ccc6f18fc954cdc737c339a52590b64", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -56,8 +56,8 @@ fn test6() {\n }\n \n fn test7() {\n-    fn foo<F>(_: F) where F: FnMut(Box<FnMut(int)>, int) {}\n-    let mut f = |&mut: g: Box<FnMut(int)>, b: int| {};\n+    fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n+    let mut f = |&mut: g: Box<FnMut(isize)>, b: isize| {};\n     f(box |a| { //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n         foo(f); //~ ERROR: cannot move out of captured outer variable\n     }, 3);"}, {"sha": "bc0b667e895d003928fa38c2693ec266f606d606", "filename": "src/test/compile-fail/borrowck-call-method-from-mut-aliasable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-method-from-mut-aliasable.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int,\n+    x: isize,\n }\n \n impl Foo {"}, {"sha": "29c7d6920bd95c6426d86f28b2201a104c66d4ca", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,53 +13,53 @@\n \n #![feature(box_syntax)]\n \n-fn get(x: &int) -> int {\n+fn get(x: &isize) -> isize {\n     *x\n }\n \n-fn set(x: &mut int) {\n+fn set(x: &mut isize) {\n     *x = 4;\n }\n \n fn a() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 4;\n     let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c2 = |&mut:| x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n-    let mut x = box 3i;\n+    let mut x = box 3is;\n     let c1 = |&mut:| get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }\n \n fn g() {\n     struct Foo {\n-        f: Box<int>\n+        f: Box<isize>\n     }\n \n     let mut x = box Foo { f: box 3 };\n@@ -69,7 +69,7 @@ fn g() {\n \n fn h() {\n     struct Foo {\n-        f: Box<int>\n+        f: Box<isize>\n     }\n \n     let mut x = box Foo { f: box 3 };"}, {"sha": "8260774190967b417962d319ce0ce46cc0bfd1a4", "filename": "src/test/compile-fail/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,15 +11,15 @@\n // Tests that two closures cannot simultaneously have mutable\n // and immutable access to the variable. Issue #6801.\n \n-fn get(x: &int) -> int {\n+fn get(x: &isize) -> isize {\n     *x\n }\n \n-fn set(x: &mut int) {\n+fn set(x: &mut isize) {\n     *x = 4;\n }\n \n-fn a(x: &int) {\n+fn a(x: &isize) {\n     let c1 = |&mut:| set(&mut *x);\n     //~^ ERROR cannot borrow\n     let c2 = |&mut:| set(&mut *x);"}, {"sha": "5cb49ab77114bda503a5126d16635e26b7359f09", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,37 +15,37 @@\n #![feature(box_syntax)]\n \n fn a() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 4;\n     let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n-fn set(x: &mut int) {\n+fn set(x: &mut isize) {\n     *x = 4;\n }\n \n fn b() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 5;\n     let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 5;\n     let c2 = |&mut:| { let _y = |&mut:| set(&mut x); }; // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn g() {\n     struct Foo {\n-        f: Box<int>\n+        f: Box<isize>\n     }\n \n     let mut x = box Foo { f: box 3 };"}, {"sha": "cf86602af0be22106ddb8ff056b512b37c81098d", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int,\n+    x: isize,\n }\n \n pub fn main() {"}, {"sha": "f9a6d5ac84575617db471360a6fead5f28f34f4f", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,35 +14,35 @@\n //  may be *immutable*, but we cannot allow\n // multiple borrows.\n \n-fn get(x: &int) -> int {\n+fn get(x: &isize) -> isize {\n     *x\n }\n \n-fn set(x: &mut int) -> int {\n+fn set(x: &mut isize) -> isize {\n     *x\n }\n \n-fn a(x: &mut int) {\n+fn a(x: &mut isize) {\n     let c1 = |&mut:| get(x);\n     let c2 = |&mut:| get(x);\n }\n \n-fn b(x: &mut int) {\n+fn b(x: &mut isize) {\n     let c1 = |&mut:| get(x);\n     let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n-fn c(x: &mut int) {\n+fn c(x: &mut isize) {\n     let c1 = |&mut:| get(x);\n     let c2 = |&mut:| { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n }\n \n-fn d(x: &mut int) {\n+fn d(x: &mut isize) {\n     let c1 = |&mut:| set(x);\n     let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n-fn e(x: &mut int) {\n+fn e(x: &mut isize) {\n     let c1 = |&mut:| x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n }\n "}, {"sha": "b6529da18838b96c5f38694f699885b195eb1f11", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,7 +15,7 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-  x: int\n+  x: isize\n }\n \n impl Drop for Foo {"}, {"sha": "fe5142a77341fe6152c7caea3666f12620f2da1c", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-struct A { a: int, b: Box<int> }\n+struct A { a: isize, b: Box<isize> }\n \n fn deref_after_move() {\n     let x = A { a: 1, b: box 2 };"}, {"sha": "6884ac153a16ba83c6a584ce0f8d7898ef5f03de", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,11 +13,11 @@\n #![feature(box_syntax)]\n \n struct Foo {\n-    a: [Box<int>; 3],\n+    a: [Box<isize>; 3],\n }\n \n fn main() {\n-    let mut y = 1i;\n+    let mut y = 1is;\n     let x = Some(&mut y);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n@@ -28,7 +28,7 @@ fn main() {\n     for &a in f.a.iter() {  //~ ERROR cannot move out\n     }\n \n-    let x = Some(box 1i);\n+    let x = Some(box 1is);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n }"}, {"sha": "d2f99ea696af2bddc9502e36bb3a0491ceac4bc7", "filename": "src/test/compile-fail/borrowck-for-loop-head-linkage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,11 +11,11 @@\n use std::iter::repeat;\n \n fn main() {\n-    let mut vector = vec![1u, 2];\n+    let mut vector = vec![1us, 2];\n     for &x in vector.iter() {\n         let cap = vector.capacity();\n         vector.extend(repeat(0));      //~ ERROR cannot borrow\n-        vector[1u] = 5u;   //~ ERROR cannot borrow\n+        vector[1us] = 5us;   //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "b98833776fbaf80166847e848664aff5b9e438da", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int; if 1i > 2 { x = 10; }\n+    let x: isize; if 1is > 2 { x = 10; }\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "c74edfd8d070c21411f343f8dd7b253fd29a06f4", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int;\n-    if 1i > 2 {\n+    let x: isize;\n+    if 1is > 2 {\n         println!(\"whoops\");\n     } else {\n         x = 10;"}, {"sha": "fabfce6ffb3886ac059a2bfb4839bb4e308e6a7e", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut _a = 3i;\n+    let mut _a = 3is;\n     let _b = &mut _a;\n     {\n         let _c = &*_b;"}, {"sha": "3c20abab8bdeffac38047bab550ff1647a130cc5", "filename": "src/test/compile-fail/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let j = |&:| -> int {\n-        let i: int;\n+    let j = |&:| -> isize {\n+        let i: isize;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     j();"}, {"sha": "31ca39c3f9b36772a15acd3d81c7908625c55c66", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let f  = |&:| -> int {\n-        let i: int;\n+    let f  = |&:| -> isize {\n+        let i: isize;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };\n     println!(\"{}\", f());"}, {"sha": "569ddb80c2fe20dc47dec55c7263e884d5423477", "filename": "src/test/compile-fail/borrowck-init-in-fru.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,8 +10,8 @@\n \n #[derive(Clone)]\n struct point {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n fn main() {"}, {"sha": "e0d93fd1d475bc4622a9185cf1ef76d843cdab63", "filename": "src/test/compile-fail/borrowck-init-op-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n \n fn test() {\n-    let v: int;\n+    let v: isize;\n     v += 1; //~ ERROR use of possibly uninitialized variable: `v`\n     v.clone();\n }"}, {"sha": "a036286f3634a0ca8470638a0ea68e47bd514141", "filename": "src/test/compile-fail/borrowck-init-plus-equal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-plus-equal.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test() {\n-    let mut v: int;\n+    let mut v: isize;\n     v = v + 1; //~ ERROR use of possibly uninitialized variable: `v`\n     v.clone();\n }"}, {"sha": "d729af844cb39dd0d465e6577146fc1f768ede7d", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,11 +12,11 @@ extern crate collections;\n use std::collections::HashSet;\n \n struct Foo {\n-  n: HashSet<int>,\n+  n: HashSet<isize>,\n }\n \n impl Foo {\n-    pub fn foo<F>(&mut self, mut fun: F) where F: FnMut(&int) {\n+    pub fn foo<F>(&mut self, mut fun: F) where F: FnMut(&isize) {\n         for f in self.n.iter() {\n             fun(f);\n         }"}, {"sha": "cc562afa9f818ecbe89946d1c0d64378020f1a69", "filename": "src/test/compile-fail/borrowck-issue-14498.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,11 +13,11 @@\n \n #![feature(box_syntax)]\n \n-struct A { a: int }\n-struct B<'a> { a: Box<&'a mut int> }\n+struct A { a: isize }\n+struct B<'a> { a: Box<&'a mut isize> }\n \n fn borrow_in_var_from_var() {\n-    let mut x: int = 1;\n+    let mut x: isize = 1;\n     let y = box &mut x;\n     let p = &y;\n     let q = &***p;\n@@ -37,7 +37,7 @@ fn borrow_in_var_from_field() {\n }\n \n fn borrow_in_field_from_var() {\n-    let mut x: int = 1;\n+    let mut x: isize = 1;\n     let y = B { a: box &mut x };\n     let p = &y.a;\n     let q = &***p;"}, {"sha": "dc1c73efc409ebcb9c1d301bccddc0bbebed3715", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1i);\n+    let x = Some(box 1is);\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move"}, {"sha": "0b76044f8d61bc875d464ddd44e67c8ad4b2dd03", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1i);\n+    let x = Some(box 1is);\n     match x {\n       Some(ref y) => {\n         let _b = *y; //~ ERROR cannot move out"}, {"sha": "ca8efb5dc967d7f5286982ec741c73a7b20e62c3", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,13 +16,13 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n-fn borrow_mut(_v: &mut int) {}\n+fn borrow(_v: &isize) {}\n+fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n-fn inc(v: &mut Box<int>) {\n+fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n }\n "}, {"sha": "491a0d40bec427a2088104768023c663c5c95fa1", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,12 +16,12 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n-fn borrow_mut(_v: &mut int) {}\n+fn borrow(_v: &isize) {}\n+fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n-fn inc(v: &mut Box<int>) {\n+fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n }\n \n@@ -41,7 +41,7 @@ fn block_overarching_alias_mut() {\n \n     let mut v = box 3;\n     let mut x = &mut v;\n-    for _ in range(0i, 3) {\n+    for _ in range(0is, 3) {\n         borrow(&*v); //~ ERROR cannot borrow\n     }\n     *x = box 5;\n@@ -113,8 +113,8 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn loop_break_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where\n-    F: FnMut(&'r mut uint) -> bool,\n+fn loop_break_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F) where\n+    F: FnMut(&'r mut usize) -> bool,\n {\n     // Here we check that when you break out of an inner loop, the\n     // borrows that go out of scope as you exit the inner loop are\n@@ -123,21 +123,23 @@ fn loop_break_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where\n     while cond() {\n         while cond() {\n             // this borrow is limited to the scope of `r`...\n-            let r: &'r mut uint = produce();\n+            let r: &'r mut usize = produce();\n             if !f(&mut *r) {\n                 break; // ...so it is not live as exit the `while` loop here\n             }\n         }\n     }\n }\n \n-fn loop_loop_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where F: FnMut(&'r mut uint) -> bool {\n+fn loop_loop_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F)\n+    where F: FnMut(&'r mut usize) -> bool\n+{\n     // Similar to `loop_break_pops_scopes` but for the `loop` keyword\n \n     while cond() {\n         while cond() {\n             // this borrow is limited to the scope of `r`...\n-            let r: &'r mut uint = produce();\n+            let r: &'r mut usize = produce();\n             if !f(&mut *r) {\n                 continue; // ...so it is not live as exit (and re-enter) the `while` loop here\n             }"}, {"sha": "f501682847f5fc7c3c8e9fc29acd2bea49f0d9ff", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -19,10 +19,10 @@ fn separate_arms() {\n         None => {\n             // It is ok to reassign x here, because there is in\n             // fact no outstanding loan of x!\n-            x = Some(0i);\n+            x = Some(0is);\n         }\n         Some(ref _i) => {\n-            x = Some(1i); //~ ERROR cannot assign\n+            x = Some(1is); //~ ERROR cannot assign\n         }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "177976c15f0f46831762f717273b6f699c3227fd", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,13 +16,13 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n-fn borrow_mut(_v: &mut int) {}\n+fn borrow(_v: &isize) {}\n+fn borrow_mut(_v: &mut isize) {}\n fn cond() -> bool { panic!() }\n fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n-fn inc(v: &mut Box<int>) {\n+fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n }\n "}, {"sha": "5f5ff4014e109cfcbbd84e7f7f2edfdb9b79afa9", "filename": "src/test/compile-fail/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    let x = [1i].iter(); //~ ERROR borrowed value does not live long enough\n+    let x = [1is].iter(); //~ ERROR borrowed value does not live long enough\n                          //~^^ NOTE reference must be valid for the block\n                          //~^^ HELP consider using a `let` binding to increase its lifetime\n }"}, {"sha": "bff22257760ebb8989f948a87d7c6bfa04e94830", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,12 +12,12 @@\n \n use std::thread::Thread;\n \n-fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n+fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n \n fn box_imm() {\n-    let v = box 3i;\n+    let v = box 3is;\n     let _w = &v;\n     Thread::spawn(move|| {\n         println!(\"v={}\", *v);\n@@ -26,7 +26,7 @@ fn box_imm() {\n }\n \n fn box_imm_explicit() {\n-    let v = box 3i;\n+    let v = box 3is;\n     let _w = &v;\n     Thread::spawn(move|| {\n         println!(\"v={}\", *v);"}, {"sha": "f3f18807314f9638a77502d488bb48d0702e6f40", "filename": "src/test/compile-fail/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn take(_v: Box<int>) {\n+fn take(_v: Box<isize>) {\n }\n \n fn box_imm() {"}, {"sha": "a52a4484b20d123440a7c602d20c1c8d9ed6eee9", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n+fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n     f(v);\n }\n "}, {"sha": "902762f687ed9a46d3275f74b3c89626c6683462", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,7 +13,7 @@\n use std::ops::Add;\n \n #[derive(Clone)]\n-struct foo(Box<uint>);\n+struct foo(Box<usize>);\n \n impl Add for foo {\n     type Output = foo;"}, {"sha": "b1eb06d16b19ae47b1d199caeb62b42fc79d8eb0", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,20 +12,20 @@ use std::ops::Add;\n \n #[derive(Copy)]\n struct Point {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n-impl Add<int> for Point {\n-    type Output = int;\n+impl Add<isize> for Point {\n+    type Output = isize;\n \n-    fn add(self, z: int) -> int {\n+    fn add(self, z: isize) -> isize {\n         self.x + self.y + z\n     }\n }\n \n impl Point {\n-    pub fn times(&self, z: int) -> int {\n+    pub fn times(&self, z: isize) -> isize {\n         self.x * self.y * z\n     }\n }"}, {"sha": "014b27f9659b03d3b7ec72191a9749f1daf30d32", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-struct point { x: int, y: int }\n+struct point { x: isize, y: isize }\n \n trait methods {\n     fn impurem(&self);"}, {"sha": "21d9dea77b26aefff8e4071559a1d9b94c8788e1", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,17 +12,17 @@\n // (locally rooted) mutable, unique vector, and that we then prevent\n // modifications to the contents.\n \n-fn takes_imm_elt<F>(_v: &int, f: F) where F: FnOnce() {\n+fn takes_imm_elt<F>(_v: &isize, f: F) where F: FnOnce() {\n     f();\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let mut v: Vec<int> = vec!(1, 2, 3);\n+    let mut v: Vec<isize> = vec!(1, 2, 3);\n     takes_imm_elt(&v[0], || {})\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let mut v: Vec<int> = vec!(1, 2, 3);\n+    let mut v: Vec<isize> = vec!(1, 2, 3);\n     takes_imm_elt(\n         &v[0],\n         || { //~ ERROR cannot borrow `v` as mutable"}, {"sha": "575d67c0b834a45126c2b9fafbe693e9c4133883", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,15 +11,15 @@\n // Test that immutable pattern bindings cannot be reassigned.\n \n enum E {\n-    Foo(int)\n+    Foo(isize)\n }\n \n struct S {\n-    bar: int,\n+    bar: isize,\n }\n \n pub fn main() {\n-    match 1i {\n+    match 1is {\n         x => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n@@ -37,13 +37,13 @@ pub fn main() {\n         }\n     }\n \n-    match (1i,) {\n+    match (1is,) {\n         (x,) => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n     }\n \n-    match [1i,2,3] {\n+    match [1is,2,3] {\n         [x,_,_] => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }"}, {"sha": "b0d546cd5c803584846c8cc52100894542708e28", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,6 +13,6 @@\n pub fn main() {\n     let bar = box 3;\n     let _g = |&mut:| {\n-        let _h = move |:| -> int { *bar }; //~ ERROR cannot move out of captured outer variable\n+        let _h = move |:| -> isize { *bar }; //~ ERROR cannot move out of captured outer variable\n     };\n }"}, {"sha": "2d82c8be519712feea5960cd3ee185ed1def58dc", "filename": "src/test/compile-fail/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-error-with-note.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -45,7 +45,7 @@ fn move_in_match() {\n \n // from issue-8064\n struct A {\n-    a: Box<int>,\n+    a: Box<isize>,\n }\n \n fn free<T>(_: T) {}"}, {"sha": "0d1a51bbf351efe85dd3d443c02a34a56696a3b6", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let a = box box 2i;\n+    let a = box box 2is;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "8310d4ba1444af4ed249726f6867424948604751", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn foo(x: *const Box<int>) -> Box<int> {\n+fn foo(x: *const Box<isize>) -> Box<isize> {\n     let y = *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     return y;\n }"}, {"sha": "43bf3f25d1ab9ff4d8380bb8750cb7f857b62679", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-fn call_f<F:FnOnce() -> int>(f: F) -> int {\n+fn call_f<F:FnOnce() -> isize>(f: F) -> isize {\n     f()\n }\n "}, {"sha": "5bdea6a2bd9962898812feaeb71637fc7372ae76", "filename": "src/test/compile-fail/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-mut-base-ptr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,8 +13,8 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-fn foo(t0: &mut int) {\n-    let p: &int = &*t0; // Freezes `*t0`\n+fn foo(t0: &mut isize) {\n+    let p: &isize = &*t0; // Freezes `*t0`\n     let t1 = t0;        //~ ERROR cannot move out of `t0`\n     *t1 = 22;\n }"}, {"sha": "507f073adb2e15e34b643b56b011f4669930202e", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n pub fn main() {\n-    let _x = Rc::new(vec!(1i, 2)).into_iter();\n+    let _x = Rc::new(vec!(1is, 2)).into_iter();\n     //~^ ERROR cannot move out of borrowed content\n }"}, {"sha": "2f81aa8f3818ec3071e11db11fd526b02aca936d", "filename": "src/test/compile-fail/borrowck-move-out-of-static-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-static-item.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,7 +13,7 @@\n use std::marker;\n \n struct Foo {\n-    foo: int,\n+    foo: isize,\n     nocopy: marker::NoCopy\n }\n "}, {"sha": "88871dda659cf696d3bb53d50a5c292638731ea4", "filename": "src/test/compile-fail/borrowck-move-subcomponent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n struct S {\n-  x : Box<int>\n+  x : Box<isize>\n }\n \n fn f<T>(_: T) {}"}, {"sha": "33ac5d7fceba029ee39d16544f6dd6230176468b", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,9 +15,9 @@ use std::thread::Thread;\n fn borrow<T>(_: &T) { }\n \n fn different_vars_after_borrows() {\n-    let x1 = box 1i;\n+    let x1 = box 1is;\n     let p1 = &x1;\n-    let x2 = box 2i;\n+    let x2 = box 2is;\n     let p2 = &x2;\n     Thread::spawn(move|| {\n         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n@@ -28,9 +28,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1 = box 1i;\n+    let x1 = box 1is;\n     drop(x1);\n-    let x2 = box 2i;\n+    let x2 = box 2is;\n     drop(x2);\n     Thread::spawn(move|| {\n         drop(x1); //~ ERROR capture of moved value: `x1`\n@@ -39,7 +39,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x = box 1i;\n+    let x = box 1is;\n     let p = &x;\n     Thread::spawn(move|| {\n         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n@@ -49,7 +49,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x = box 1i;\n+    let x = box 1is;\n     drop(x);\n     Thread::spawn(move|| {\n         drop(x); //~ ERROR capture of moved value: `x`"}, {"sha": "b6626a835e454fc22ed5f04ea58b6d858c984d07", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let x: int = 3;\n-    let y: &mut int = &mut x; //~ ERROR cannot borrow\n+    let x: isize = 3;\n+    let y: &mut isize = &mut x; //~ ERROR cannot borrow\n     *y = 5;\n     println!(\"{}\", *y);\n }"}, {"sha": "71dc61abb64e9c7d7e3e44b20e230b3917c0445d", "filename": "src/test/compile-fail/borrowck-mut-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-borrow-of-mut-base-ptr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,16 +13,16 @@\n //\n // Example from src/middle/borrowck/doc.rs\n \n-fn foo<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &int = &*t0;     // Freezes `*t0`\n+fn foo<'a>(mut t0: &'a mut isize,\n+           mut t1: &'a mut isize) {\n+    let p: &isize = &*t0;     // Freezes `*t0`\n     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n     **t2 += 1;              // Mutates `*t0`\n }\n \n-fn bar<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &mut int = &mut *t0; // Claims `*t0`\n+fn bar<'a>(mut t0: &'a mut isize,\n+           mut t1: &'a mut isize) {\n+    let p: &mut isize = &mut *t0; // Claims `*t0`\n     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n }"}, {"sha": "b8a92db4e422334eca533c5c27702df16e9bf831", "filename": "src/test/compile-fail/borrowck-mut-slice-of-imm-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn write(v: &mut [int]) {\n+fn write(v: &mut [isize]) {\n     v[0] += 1;\n }\n "}, {"sha": "44353ab5d960ae5d33a97767bdf3385c4c65017a", "filename": "src/test/compile-fail/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mutate-in-guard.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n enum Enum<'a> {\n-    A(&'a int),\n+    A(&'a isize),\n     B(bool),\n }\n \n-fn foo() -> int {\n+fn foo() -> isize {\n     let mut n = 42;\n     let mut x = Enum::A(&mut n);\n     match x {"}, {"sha": "27871a6ab16cdaf2ec0120132c46d6aeb9f3e193", "filename": "src/test/compile-fail/borrowck-or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-or-init.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let i: int;\n+    let i: isize;\n \n     println!(\"{}\", false || { i = 5; true });\n     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`"}, {"sha": "7d35a27c0ae2016093916cdcc3d83f25b235647e", "filename": "src/test/compile-fail/borrowck-overloaded-call.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-call.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,23 +13,23 @@\n use std::ops::{Fn, FnMut, FnOnce};\n \n struct SFn {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n-impl Fn<(int,),int> for SFn {\n-    extern \"rust-call\" fn call(&self, (z,): (int,)) -> int {\n+impl Fn<(isize,),isize> for SFn {\n+    extern \"rust-call\" fn call(&self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }\n \n struct SFnMut {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n-impl FnMut<(int,),int> for SFnMut {\n-    extern \"rust-call\" fn call_mut(&mut self, (z,): (int,)) -> int {\n+impl FnMut<(isize,),isize> for SFnMut {\n+    extern \"rust-call\" fn call_mut(&mut self, (z,): (isize,)) -> isize {\n         self.x * self.y * z\n     }\n }\n@@ -38,8 +38,8 @@ struct SFnOnce {\n     x: String,\n }\n \n-impl FnOnce<(String,),uint> for SFnOnce {\n-    extern \"rust-call\" fn call_once(self, (z,): (String,)) -> uint {\n+impl FnOnce<(String,),usize> for SFnOnce {\n+    extern \"rust-call\" fn call_once(self, (z,): (String,)) -> usize {\n         self.x.len() + z.len()\n     }\n }"}, {"sha": "da3da47fa902992124bf1e2de4d0d2f3bb199345", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,16 +16,16 @@ struct MyVec<T> {\n     data: Vec<T>,\n }\n \n-impl<T> Index<uint> for MyVec<T> {\n+impl<T> Index<usize> for MyVec<T> {\n     type Output = T;\n \n-    fn index(&self, &i: &uint) -> &T {\n+    fn index(&self, &i: &usize) -> &T {\n         &self.data[i]\n     }\n }\n \n fn main() {\n-    let v = MyVec { data: vec!(box 1i, box 2, box 3) };\n+    let v = MyVec { data: vec!(box 1is, box 2, box 3) };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of indexed content"}, {"sha": "9193a28511e70e069a540969b9048b168d7d9875", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,14 +14,14 @@\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl Index<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index<'a>(&'a self, z: &String) -> &'a int {\n+    fn index<'a>(&'a self, z: &String) -> &'a isize {\n         if z.as_slice() == \"x\" {\n             &self.x\n         } else {\n@@ -31,9 +31,9 @@ impl Index<String> for Foo {\n }\n \n impl IndexMut<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut int {\n+    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut isize {\n         if z.as_slice() == \"x\" {\n             &mut self.x\n         } else {"}, {"sha": "7259ca8971d2b6ca363c47349679cfb9d355110d", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,14 +11,14 @@\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl Index<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index<'a>(&'a self, z: &String) -> &'a int {\n+    fn index<'a>(&'a self, z: &String) -> &'a isize {\n         if z.as_slice() == \"x\" {\n             &self.x\n         } else {\n@@ -28,9 +28,9 @@ impl Index<String> for Foo {\n }\n \n impl IndexMut<String> for Foo {\n-    type Output = int;\n+    type Output = isize;\n \n-    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut int {\n+    fn index_mut<'a>(&'a mut self, z: &String) -> &'a mut isize {\n         if z.as_slice() == \"x\" {\n             &mut self.x\n         } else {\n@@ -40,13 +40,13 @@ impl IndexMut<String> for Foo {\n }\n \n struct Bar {\n-    x: int,\n+    x: isize,\n }\n \n-impl Index<int> for Bar {\n-    type Output = int;\n+impl Index<isize> for Bar {\n+    type Output = isize;\n \n-    fn index<'a>(&'a self, z: &int) -> &'a int {\n+    fn index<'a>(&'a self, z: &isize) -> &'a isize {\n         &self.x\n     }\n }"}, {"sha": "d176245823ef5b4e079e9b71d83453b74fdad49a", "filename": "src/test/compile-fail/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut x: Option<int> = None;\n+    let mut x: Option<isize> = None;\n     match x {\n       None => {\n           // Note: on this branch, no borrow has occurred."}, {"sha": "6f5dfa67be50debc5837b965d18eff2e5281c4bb", "filename": "src/test/compile-fail/borrowck-reborrow-from-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-mut.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,8 +14,8 @@ struct Foo {\n }\n \n struct Bar {\n-  int1: int,\n-  int2: int,\n+  int1: isize,\n+  int2: isize,\n }\n \n fn borrow_same_field_twice_mut_mut(foo: &mut Foo) {"}, {"sha": "eee407472bf14c12342ce07bf4d20200f88dcfc4", "filename": "src/test/compile-fail/borrowck-reborrow-from-shorter-lived-andmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-reborrow-from-shorter-lived-andmut.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n // borrowed (but otherwise non-aliasable) location is illegal.\n \n struct S<'a> {\n-    pointer: &'a mut int\n+    pointer: &'a mut isize\n }\n \n fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {"}, {"sha": "1784b72a69927161c6b93973c5164dd7e8677ccf", "filename": "src/test/compile-fail/borrowck-ref-mut-of-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-mut-of-imm.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn destructure(x: Option<int>) -> int {\n+fn destructure(x: Option<isize>) -> isize {\n     match x {\n       None => 0,\n       Some(ref mut v) => *v //~ ERROR cannot borrow"}, {"sha": "c3a1e808e37f8aa5381ea83c85e9129e849655fd", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n fn main() {\n     // Original borrow ends at end of function\n-    let mut x = 1u;\n+    let mut x = 1us;\n     let y = &mut x;\n     let z = &x; //~ ERROR cannot borrow\n }\n@@ -21,7 +21,7 @@ fn foo() {\n     match true {\n         true => {\n             // Original borrow ends at end of match arm\n-            let mut x = 1u;\n+            let mut x = 1us;\n             let y = &x;\n             let z = &mut x; //~ ERROR cannot borrow\n         }\n@@ -33,7 +33,7 @@ fn foo() {\n fn bar() {\n     // Original borrow ends at end of closure\n     |&:| {\n-        let mut x = 1u;\n+        let mut x = 1us;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow\n     };"}, {"sha": "74d435b35e7ebf010e854d765a7d5b02f16f0078", "filename": "src/test/compile-fail/borrowck-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-return.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() -> int {\n-    let x: int;\n+fn f() -> isize {\n+    let x: isize;\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n "}, {"sha": "bbfc5f89a8d7a1476fd6b258a6e4ea416b9688f6", "filename": "src/test/compile-fail/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-struct-update-with-dtor.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,10 +15,10 @@\n use std::marker::NoCopy as NP;\n \n \n-struct S { a: int, np: NP }\n+struct S { a: isize, np: NP }\n impl Drop for S { fn drop(&mut self) { } }\n \n-struct T { a: int, mv: Box<int> }\n+struct T { a: isize, mv: Box<isize> }\n impl Drop for T { fn drop(&mut self) { } }\n \n fn f(s0:S) {"}, {"sha": "0102a909188468ff92dc6625fc6e916abe974fae", "filename": "src/test/compile-fail/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-swap-mut-base-ptr.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,9 +15,9 @@\n \n use std::mem::swap;\n \n-fn foo<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &int = &*t0;     // Freezes `*t0`\n+fn foo<'a>(mut t0: &'a mut isize,\n+           mut t1: &'a mut isize) {\n+    let p: &isize = &*t0;     // Freezes `*t0`\n     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n     *t1 = 22;\n }"}, {"sha": "5b5c5f4da912c6177d77fd626cdc0cfe613e6cbe", "filename": "src/test/compile-fail/borrowck-unary-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unary-move.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n \n-fn foo(x: Box<int>) -> int {\n+fn foo(x: Box<isize>) -> isize {\n     let y = &*x;\n     free(x); //~ ERROR cannot move out of `x` because it is borrowed\n     *y\n }\n \n-fn free(_x: Box<int>) {\n+fn free(_x: Box<isize>) {\n }\n \n fn main() {"}, {"sha": "8e7e2e3e77782e9aa3cb33be33ec026bf4a2db22", "filename": "src/test/compile-fail/borrowck-unboxed-closures.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unboxed-closures.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,17 +10,17 @@\n \n #![feature(overloaded_calls, unboxed_closures)]\n \n-fn a<F:Fn(int, int) -> int>(mut f: F) {\n+fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n     //~^ ERROR cannot borrow `f` as immutable\n }\n \n-fn b<F:FnMut(int, int) -> int>(f: F) {\n+fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n     f(1, 2);    //~ ERROR cannot borrow immutable local variable\n }\n \n-fn c<F:FnOnce(int, int) -> int>(f: F) {\n+fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n     f(1, 2);\n     f(1, 2);    //~ ERROR use of moved value\n }"}, {"sha": "acd827d6c620b941a232d3430658519b803624c2", "filename": "src/test/compile-fail/borrowck-uninit-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-after-item.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let bar;\n-    fn baz(_x: int) { }\n+    fn baz(_x: isize) { }\n     baz(bar); //~ ERROR use of possibly uninitialized variable: `bar`\n }"}, {"sha": "e253ecc74b9a5243bf5625234d170343afcd8ba8", "filename": "src/test/compile-fail/borrowck-uninit-in-assignop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit-in-assignop.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,33 +12,33 @@\n // expression is detected.\n \n pub fn main() {\n-    let x: int;\n+    let x: isize;\n     x += 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x -= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x *= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x /= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x %= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x ^= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x &= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x |= 1; //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x <<= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n \n-    let x: int;\n+    let x: isize;\n     x >>= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "f4b73bc889fb787c6f8c16c16696dba84cd8fd2d", "filename": "src/test/compile-fail/borrowck-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uninit.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(x: int) { println!(\"{}\", x); }\n+fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: int;\n+    let x: isize;\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "7fadf6d466033f960e0595a91d9dbd5aa915ffae", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,49 +10,49 @@\n \n #![feature(box_syntax)]\n \n-fn borrow(_v: &int) {}\n+fn borrow(_v: &isize) {}\n \n fn local() {\n-    let mut v = box 3i;\n+    let mut v = box 3is;\n     borrow(&*v);\n }\n \n fn local_rec() {\n-    struct F { f: Box<int> }\n+    struct F { f: Box<isize> }\n     let mut v = F {f: box 3};\n     borrow(&*v.f);\n }\n \n fn local_recs() {\n     struct F { f: G }\n     struct G { g: H }\n-    struct H { h: Box<int> }\n+    struct H { h: Box<isize> }\n     let mut v = F {f: G {g: H {h: box 3}}};\n     borrow(&*v.f.g.h);\n }\n \n fn aliased_imm() {\n-    let mut v = box 3i;\n+    let mut v = box 3is;\n     let _w = &v;\n     borrow(&*v);\n }\n \n fn aliased_mut() {\n-    let mut v = box 3i;\n+    let mut v = box 3is;\n     let _w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n-    let mut v = box 3i;\n-    let mut w = box 4i;\n+    let mut v = box 3is;\n+    let mut w = box 4is;\n     let _x = &mut w;\n     borrow(&*v);\n }\n \n fn aliased_other_reassign() {\n-    let mut v = box 3i;\n-    let mut w = box 4i;\n+    let mut v = box 3is;\n+    let mut w = box 4is;\n     let mut _x = &mut w;\n     _x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`"}, {"sha": "94c1d3a6a4505a1b68dae4f3c6747e7d4a2d6a5f", "filename": "src/test/compile-fail/borrowck-use-in-index-lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-in-index-lvalue.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn test() {\n-    let w: &mut [int];\n+    let w: &mut [isize];\n     w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n \n-    let mut w: &mut [int];\n+    let mut w: &mut [isize];\n     w[5] = 0; //~ ERROR use of possibly uninitialized variable: `w`\n }\n "}, {"sha": "42e12622b69200b1a2650019b8fca2ef6b517286", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,14 +10,14 @@\n \n #![feature(box_syntax)]\n \n-struct A { a: int, b: int }\n+struct A { a: isize, b: isize }\n \n impl Copy for A {}\n \n-struct B { a: int, b: Box<int> }\n+struct B { a: isize, b: Box<isize> }\n \n fn var_copy_after_var_borrow() {\n-    let mut x: int = 1;\n+    let mut x: isize = 1;\n     let p = &mut x;\n     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n     *p = 2;\n@@ -61,7 +61,7 @@ fn fu_field_copy_after_field_borrow() {\n }\n \n fn var_deref_after_var_borrow() {\n-    let mut x: Box<int> = box 1;\n+    let mut x: Box<isize> = box 1;\n     let p = &mut x;\n     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n     **p = 2;"}, {"sha": "577334cce95042c53ef2c267e37c6720ed9f1683", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,29 +10,29 @@\n \n #![feature(advanced_slice_patterns)]\n \n-fn a<'a>() -> &'a [int] {\n+fn a<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR does not live long enough\n     let tail = match vec {\n         [_, tail..] => tail,\n         _ => panic!(\"a\")\n     };\n     tail\n }\n \n-fn b<'a>() -> &'a [int] {\n+fn b<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR does not live long enough\n     let init = match vec {\n         [init.., _] => init,\n         _ => panic!(\"b\")\n     };\n     init\n }\n \n-fn c<'a>() -> &'a [int] {\n+fn c<'a>() -> &'a [isize] {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR does not live long enough\n     let slice = match vec {\n         [_, slice.., _] => slice,\n         _ => panic!(\"c\")"}, {"sha": "565b8ca2f6856d7000acb007581ea1acf4ebb231", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n fn a() {\n     let mut v = vec!(1, 2, 3);\n-    let vb: &mut [int] = v.as_mut_slice();\n+    let vb: &mut [isize] = v.as_mut_slice();\n     match vb {\n         [_a, tail..] => {\n             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow"}, {"sha": "8869e99efd52a1e75c64c6be062173026fec0753", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut a = [1i, 2, 3, 4];\n+    let mut a = [1is, 2, 3, 4];\n     let t = match a {\n         [1, 2, tail..] => tail,\n         _ => unreachable!()"}, {"sha": "49994ebdbba44e17a1b5083f7773dbd7dc2d458e", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn a() {\n-    let mut vec = [box 1i, box 2, box 3];\n+    let mut vec = [box 1is, box 2, box 3];\n     match vec {\n         [box ref _a, _, _] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n@@ -21,8 +21,8 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let mut vec = vec!(box 1is, box 2, box 3);\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_b..] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n@@ -31,8 +31,8 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let mut vec = vec!(box 1is, box 2, box 3);\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a,         //~ ERROR cannot move out\n          _b..] => {  //~^ NOTE attempting to move value to here\n@@ -49,8 +49,8 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let mut vec = vec!(box 1is, box 2, box 3);\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a..,     //~ ERROR cannot move out\n          _b] => {} //~ NOTE attempting to move value to here\n@@ -60,8 +60,8 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n-    let vec: &mut [Box<int>] = vec.as_mut_slice();\n+    let mut vec = vec!(box 1is, box 2, box 3);\n+    let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out\n         //~^ NOTE attempting to move value to here"}, {"sha": "bcd1aa81d4c2ec68c96c78a549c9085ba3ff2568", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn a<'a>() -> &'a int {\n+fn a<'a>() -> &'a isize {\n     let vec = vec!(1, 2, 3, 4);\n-    let vec: &[int] = vec.as_slice(); //~ ERROR `vec` does not live long enough\n+    let vec: &[isize] = vec.as_slice(); //~ ERROR `vec` does not live long enough\n     let tail = match vec {\n         [_a, tail..] => &tail[0],\n         _ => panic!(\"foo\")"}, {"sha": "4752120d691262a65ef577512520791cc55df296", "filename": "src/test/compile-fail/borrowck-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n fn test(cond: bool) {\n     let v;\n     while cond {\n-        v = 3i;\n+        v = 3is;\n         break;\n     }\n     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`"}, {"sha": "f163cf602bfa65d0bffe4721a35866757d91d491", "filename": "src/test/compile-fail/borrowck-while.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() -> int {\n-    let mut x: int;\n-    while 1i == 1 { x = 10; }\n+fn f() -> isize {\n+    let mut x: isize;\n+    while 1is == 1 { x = 10; }\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n "}, {"sha": "0ec4f3dce11713fa3aaa107f2f6ef00d324bf605", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -22,6 +22,6 @@ impl <T: Sync> Foo for T { }\n \n fn main() {\n     let (tx, rx) = channel();\n-    1193182i.foo(tx);\n-    assert!(rx.recv() == 1193182i);\n+    1193182is.foo(tx);\n+    assert!(rx.recv() == 1193182is);\n }"}, {"sha": "9148f13c4ddd3a511afa114a9bb2831dce4fe6f5", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = 1i;\n+    let x = 1is;\n     move|:| { x = 2; };\n     //~^ ERROR: cannot assign to immutable captured outer variable\n "}, {"sha": "fd50918a313e272569c2202292945db2b98293fc", "filename": "src/test/compile-fail/capture1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcapture1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcapture1.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,6 +12,6 @@\n // error-pattern: can't capture dynamic environment in a fn item;\n \n fn main() {\n-    let bar: int = 5;\n-    fn foo() -> int { return bar; }\n+    let bar: isize = 5;\n+    fn foo() -> isize { return bar; }\n }"}, {"sha": "a7f0917ed86b9a15da621a1c150f541744fc4f11", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(_x: int) { }\n+fn foo(_x: isize) { }\n \n fn main() {\n     let v: u64 = 5;\n-    let x = foo as extern \"C\" fn() -> int;\n+    let x = foo as extern \"C\" fn() -> isize;\n     //~^ ERROR mismatched types\n-    let y = v as extern \"Rust\" fn(int) -> (int, int);\n+    let y = v as extern \"Rust\" fn(isize) -> (isize, isize);\n     //~^ ERROR non-scalar cast\n     y(x());\n }"}, {"sha": "d1e3fe252537db496f2fe8ae881875390e2c9266", "filename": "src/test/compile-fail/check-static-immutable-mut-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-immutable-mut-slices.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n // Checks that immutable static items can't have mutable slices\n \n-static TEST: &'static mut [int] = &mut [];\n+static TEST: &'static mut [isize] = &mut [];\n //~^ ERROR statics are not allowed to have mutable references\n \n pub fn main() { }"}, {"sha": "7c4f9ada2d35e0d41cca32446a7a884cd247c33e", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -26,7 +26,7 @@ impl Drop for WithDtor {\n // 3. Expr calls with unsafe arguments for statics are rejected\n enum SafeEnum {\n     Variant1,\n-    Variant2(int),\n+    Variant2(isize),\n     Variant3(WithDtor),\n     Variant4(String)\n }\n@@ -45,7 +45,7 @@ static STATIC3: SafeEnum = SafeEnum::Variant3(WithDtor);\n // a destructor.\n enum UnsafeEnum {\n     Variant5,\n-    Variant6(int)\n+    Variant6(isize)\n }\n \n impl Drop for UnsafeEnum {\n@@ -132,11 +132,11 @@ static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n //~^ ERROR mutable statics are not allowed to have destructors\n \n-static STATIC19: Box<int> =\n+static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR statics are not allowed to have custom pointers\n \n pub fn main() {\n-    let y = { static x: Box<int> = box 3; x };\n+    let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR statics are not allowed to have custom pointers\n }"}, {"sha": "31e09e877c7086805907218c8b42116ac653290d", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,9 +15,9 @@ trait noisy {\n }\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n \n-  how_hungry : int,\n+  how_hungry : isize,\n   name : String,\n }\n \n@@ -50,7 +50,7 @@ impl cat {\n     }\n }\n \n-fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n+fn cat(in_x : usize, in_y : isize, in_name: String) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "d709ffdc3fc125c3d29b23dd303937286dfeffa9", "filename": "src/test/compile-fail/class-implements-bad-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,10 +10,10 @@\n \n // error-pattern:nonexistent\n class cat : nonexistent {\n-  let meows: uint;\n-  new(in_x : uint) { self.meows = in_x; }\n+  let meows: usize;\n+  new(in_x : usize) { self.meows = in_x; }\n }\n \n fn main() {\n-  let nyan = cat(0u);\n+  let nyan = cat(0us);\n }"}, {"sha": "3b921e072790ba5f3db9dea45c500fced06b5edc", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,19 +13,19 @@ trait animal {\n }\n \n struct cat {\n-  meows: uint,\n+  meows: usize,\n }\n \n impl animal for cat {\n     //~^ ERROR not all trait items implemented, missing: `eat`\n }\n \n-fn cat(in_x : uint) -> cat {\n+fn cat(in_x : usize) -> cat {\n     cat {\n         meows: in_x\n     }\n }\n \n fn main() {\n-  let nyan = cat(0u);\n+  let nyan = cat(0us);\n }"}, {"sha": "4d8e4bca784be93db98b7d0c37bac9821e9e6da9", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n struct cat {\n-  meows : uint,\n+  meows : usize,\n }\n \n impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");\n-      meows += 1u; //~ ERROR unresolved name\n+      meows += 1us; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }\n "}, {"sha": "f8ddf83c9c637d080ce1687009d75408ae891a83", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,7 +13,7 @@\n extern crate \"coherence-lib\" as lib;\n use lib::Remote1;\n \n-impl<T> Remote1<T> for int { }\n+impl<T> Remote1<T> for isize { }\n //~^ ERROR E0117\n \n fn main() { }"}, {"sha": "684773098cd959accdc4540d8ee89ddc6e827291", "filename": "src/test/compile-fail/coherence-bigint-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-int.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for int { } //~ ERROR E0117\n+impl Remote1<BigInt> for isize { } //~ ERROR E0117\n \n fn main() { }"}, {"sha": "28747674b8b10a40ecc1a490ab89b273b47520c2", "filename": "src/test/compile-fail/coherence-bigint-vecint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-vecint.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,6 +15,6 @@ use lib::Remote1;\n \n pub struct BigInt;\n \n-impl Remote1<BigInt> for Vec<int> { } //~ ERROR E0117\n+impl Remote1<BigInt> for Vec<isize> { } //~ ERROR E0117\n \n fn main() { }"}, {"sha": "27d97d18c949f16f0935f92de930368030e7f0f5", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,23 +16,23 @@ use std::default::Default;\n // for the same type (though this crate doesn't).\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n trait Even { }\n \n trait Odd { }\n \n-impl Even for int { }\n+impl Even for isize { }\n \n-impl Odd for uint { }\n+impl Odd for usize { }\n \n impl<T:Even> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n impl<T:Odd> MyTrait for T {\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n fn main() { }"}, {"sha": "0f233b78c72160b2bc833bac871dba077622281d", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,19 +16,19 @@ use std::default::Default;\n // for the same type (though this crate doesn't implement them at all).\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n trait Even { }\n \n trait Odd { }\n \n impl<T:Even> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n impl<T:Odd> MyTrait for T {\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n fn main() { }"}, {"sha": "1f6bb08871c76db6ff94850c8fb35d2c3be3548f", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-cross-crate.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -19,11 +19,11 @@ use std::default::Default;\n struct MyThingy;\n \n impl Go for MyThingy {\n-    fn go(&self, arg: int) { }\n+    fn go(&self, arg: isize) { }\n }\n \n impl GoMut for MyThingy { //~ ERROR conflicting implementations\n-    fn go_mut(&mut self, arg: int) { }\n+    fn go_mut(&mut self, arg: isize) { }\n }\n \n fn main() { }"}, {"sha": "c3563792ce3c7d2e5b9f8c17a183560838ff5f9a", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -26,11 +26,11 @@ impl<T> MyTrait<T> for T { //~ ERROR E0119\n \n #[derive(Clone)]\n struct MyType {\n-    dummy: uint\n+    dummy: usize\n }\n \n impl MyTrait<MyType> for MyType {\n-    fn get(&self) -> uint { (*self).clone() }\n+    fn get(&self) -> usize { (*self).clone() }\n }\n \n fn main() { }"}, {"sha": "eeaa68677eb670c37c44e7852401966608bfcbb3", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-trait.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,19 +16,19 @@ trait OtherTrait {\n }\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n impl<T:OtherTrait> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n struct MyType {\n-    dummy: uint\n+    dummy: usize\n }\n \n impl MyTrait for MyType {\n-    fn get(&self) -> uint { self.dummy }\n+    fn get(&self) -> usize { self.dummy }\n }\n \n impl OtherTrait for MyType {"}, {"sha": "980e4256d2b854d635c4ccdaff00a97a4d710025", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,19 +15,19 @@ use std::default::Default;\n // specific T.\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n impl<T> MyTrait for T { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n struct MyType {\n-    dummy: uint\n+    dummy: usize\n }\n \n impl MyTrait for MyType {\n-    fn get(&self) -> uint { self.dummy }\n+    fn get(&self) -> usize { self.dummy }\n }\n \n fn main() { }"}, {"sha": "0bd0224b246d1503fff6b5fbcf97274a2f0ff9d3", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,10 +16,10 @@ use lib::TheTrait;\n \n struct TheType;\n \n-impl TheTrait<uint> for int { } //~ ERROR E0117\n+impl TheTrait<usize> for isize { } //~ ERROR E0117\n \n-impl TheTrait<TheType> for int { } //~ ERROR E0117\n+impl TheTrait<TheType> for isize { } //~ ERROR E0117\n \n-impl TheTrait<int> for TheType { }\n+impl TheTrait<isize> for TheType { }\n \n fn main() { }"}, {"sha": "9673fb6a21392dd3e619715beaa4c51b98fa31c2", "filename": "src/test/compile-fail/coherence-tuple-conflict.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-tuple-conflict.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,15 +15,15 @@ use std::default::Default;\n // specific T.\n \n trait MyTrait {\n-    fn get(&self) -> uint;\n+    fn get(&self) -> usize;\n }\n \n impl<T> MyTrait for (T,T) { //~ ERROR E0119\n-    fn get(&self) -> uint { 0 }\n+    fn get(&self) -> usize { 0 }\n }\n \n impl<A,B> MyTrait for (A,B) {\n-    fn get(&self) -> uint { self.dummy }\n+    fn get(&self) -> usize { self.dummy }\n }\n \n fn main() { }"}, {"sha": "305acfec40114aad89cc92258594b8cc07c338b4", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,5 +13,5 @@ use std::sync::mpsc::Receiver;\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Receiver<int>>();   //~ ERROR: `core::marker::Sync` is not implemented\n+    test::<Receiver<isize>>();   //~ ERROR: `core::marker::Sync` is not implemented\n }"}, {"sha": "de2c96920c38b45d8bcbfe5d38a32eb54a2c0ec3", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,5 +13,5 @@ use std::sync::mpsc::Sender;\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();     //~ ERROR: `core::marker::Sync` is not implemented\n+    test::<Sender<isize>>();     //~ ERROR: `core::marker::Sync` is not implemented\n }"}, {"sha": "62e8fccbda058bf1d16157627d9dad4408198220", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static A: uint = { 1u; 2 };\n+static A: usize = { 1us; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n-static B: uint = { { } 2 };\n+static B: usize = { { } 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n macro_rules! foo {\n     () => (()) //~ ERROR: blocks in constants are limited to items and tail expressions\n }\n-static C: uint = { foo!(); 2 };\n+static C: usize = { foo!(); 2 };\n \n-static D: uint = { let x = 4u; 2 };\n+static D: usize = { let x = 4us; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "ad05c7c423f958c01c054e4f65f83ab28bef031d", "filename": "src/test/compile-fail/const-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-recursive.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // error-pattern: recursive constant\n-static a: int = b;\n-static b: int = a;\n+static a: isize = b;\n+static b: isize = a;\n \n fn main() {\n }"}, {"sha": "1201db437b9615d052318702036966740dc4275c", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,14 +10,14 @@\n \n #[derive(Show)]\n struct foo {\n-  i: int,\n+  i: isize,\n }\n \n impl Drop for foo {\n     fn drop(&mut self) {}\n }\n \n-fn foo(i:int) -> foo {\n+fn foo(i:isize) -> foo {\n     foo {\n         i: i\n     }"}, {"sha": "6015652668e3578417d85486dd48e311b84140e8", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -22,10 +22,10 @@ impl S { }\n impl T for S { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-static s: uint = 0u;\n+static s: usize = 0us;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-const c: uint = 0u;\n+const c: usize = 0us;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }\n@@ -34,7 +34,7 @@ mod m { }\n extern \"C\" { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-type A = uint;\n+type A = usize;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n fn main() { }"}, {"sha": "6e9b120aa69b5a6b27a173b69a5ec41cc7535969", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,25 +9,25 @@\n // except according to those terms.\n \n use std::num::FromPrimitive;\n-use std::int;\n+use std::isize;\n \n #[derive(FromPrimitive)]\n-struct A { x: int }\n+struct A { x: isize }\n //~^^ ERROR `FromPrimitive` cannot be derived for structs\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n #[derive(FromPrimitive)]\n-struct B(int);\n+struct B(isize);\n //~^^ ERROR `FromPrimitive` cannot be derived for structs\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n #[derive(FromPrimitive)]\n-enum C { Foo(int), Bar(uint) }\n+enum C { Foo(isize), Bar(usize) }\n //~^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n //~^^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n \n #[derive(FromPrimitive)]\n-enum D { Baz { x: int } }\n+enum D { Baz { x: isize } }\n //~^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n //~^^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n "}, {"sha": "5166ef8f72f8b1c1cedc01c7031f2376a2cb0ad3", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n trait T {}\n-impl T for int {}\n+impl T for isize {}\n \n fn main() {\n     // For an expression of the form:\n@@ -27,17 +27,17 @@ fn main() {\n     // if n > m, it's a type mismatch error.\n \n     // n < m\n-    let &x = &(&1i as &T);\n-    let &x = &&(&1i as &T);\n-    let &&x = &&(&1i as &T);\n+    let &x = &(&1is as &T);\n+    let &x = &&(&1is as &T);\n+    let &&x = &&(&1is as &T);\n \n     // n == m\n-    let &x = &1i as &T;      //~ ERROR type `&T` cannot be dereferenced\n-    let &&x = &(&1i as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1i as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n+    let &x = &1is as &T;      //~ ERROR type `&T` cannot be dereferenced\n+    let &&x = &(&1is as &T);  //~ ERROR type `&T` cannot be dereferenced\n+    let box x = box 1is as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n \n     // n > m\n-    let &&x = &1i as &T;     //~ ERROR found &-ptr\n-    let &&&x = &(&1i as &T); //~ ERROR found &-ptr\n-    let box box x = box 1i as Box<T>;    //~ ERROR found box\n+    let &&x = &1is as &T;     //~ ERROR found &-ptr\n+    let &&&x = &(&1is as &T); //~ ERROR found &-ptr\n+    let box box x = box 1is as Box<T>;    //~ ERROR found box\n }"}, {"sha": "26b247d0d0f2eb01f97109aa278a35494f25064b", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-impl<'a> Drop for &'a mut int {\n+impl<'a> Drop for &'a mut isize {\n     //~^ ERROR the Drop trait may only be implemented on structures\n     //~^^ ERROR E0117\n     fn drop(&mut self) {"}, {"sha": "7dbb8fc92e345bd3021f2485628f9dcd7ab332a1", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n-    f1: int,\n+    f1: isize,\n     f2: &'static str,\n     ptr: T\n }\n@@ -23,19 +23,19 @@ struct Bar;\n \n #[derive(PartialEq,Eq)]\n struct Bar1 {\n-    f: int\n+    f: isize\n }\n \n trait ToBar {\n     fn to_bar(&self) -> Bar;\n-    fn to_val(&self) -> int;\n+    fn to_val(&self) -> isize;\n }\n \n impl ToBar for Bar1 {\n     fn to_bar(&self) -> Bar {\n         Bar\n     }\n-    fn to_val(&self) -> int {\n+    fn to_val(&self) -> isize {\n         self.f\n     }\n }"}, {"sha": "634b5999e9ef28c33bb5adf313ee1ca0f44b1468", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,7 +13,7 @@\n #![feature(box_syntax)]\n \n struct Fat<T: ?Sized> {\n-    f1: int,\n+    f1: isize,\n     f2: &'static str,\n     ptr: T\n }\n@@ -23,19 +23,19 @@ struct Bar;\n \n #[derive(PartialEq,Eq)]\n struct Bar1 {\n-    f: int\n+    f: isize\n }\n \n trait ToBar {\n     fn to_bar(&self) -> Bar;\n-    fn to_val(&self) -> int;\n+    fn to_val(&self) -> isize;\n }\n \n impl ToBar for Bar1 {\n     fn to_bar(&self) -> Bar {\n         Bar\n     }\n-    fn to_val(&self) -> int {\n+    fn to_val(&self) -> isize {\n         self.f\n     }\n }"}, {"sha": "160197368d6d983c673f924eb1508fbd62e1a3b1", "filename": "src/test/compile-fail/dst-bad-coerce2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -21,8 +21,8 @@ impl Bar for Foo {}\n pub fn main() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int; 3]> = &f1;\n-    let f3: &mut Fat<[int]> = f2; //~ ERROR mismatched types\n+    let f2: &Fat<[isize; 3]> = &f1;\n+    let f3: &mut Fat<[isize]> = f2; //~ ERROR mismatched types\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };"}, {"sha": "347a2d2ecbe68599cff25e0f6804a01c110d28eb", "filename": "src/test/compile-fail/dst-bad-coerce3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce3.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -21,8 +21,8 @@ impl Bar for Foo {}\n fn baz<'a>() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n-    let f2: &Fat<[int; 3]> = &f1; //~ ERROR `f1` does not live long enough\n-    let f3: &'a Fat<[int]> = f2;\n+    let f2: &Fat<[isize; 3]> = &f1; //~ ERROR `f1` does not live long enough\n+    let f3: &'a Fat<[isize]> = f2;\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };"}, {"sha": "032835d9460cb509df10b8c31b9466395db76afe", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -18,8 +18,8 @@ struct Fat<T: ?Sized> {\n }\n \n pub fn main() {\n-    let f: Fat<[int; 3]> = Fat { ptr: [5i, 6, 7] };\n-    let g: &Fat<[int]> = &f;\n-    let h: &Fat<Fat<[int]>> = &Fat { ptr: *g };\n+    let f: Fat<[isize; 3]> = Fat { ptr: [5is, 6, 7] };\n+    let g: &Fat<[isize]> = &f;\n+    let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "2a66b87fece3fc86f4f56cc166b6066eb7427d31", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -18,10 +18,10 @@ struct S;\n \n impl Copy for S {}\n \n-impl Index<uint> for S {\n+impl Index<usize> for S {\n     type Output = str;\n \n-    fn index<'a>(&'a self, _: &uint) -> &'a str {\n+    fn index<'a>(&'a self, _: &usize) -> &'a str {\n         \"hello\"\n     }\n }\n@@ -30,11 +30,11 @@ struct T;\n \n impl Copy for T {}\n \n-impl Index<uint> for T {\n+impl Index<usize> for T {\n     type Output = Show + 'static;\n \n-    fn index<'a>(&'a self, idx: &uint) -> &'a (Show + 'static) {\n-        static x: uint = 42;\n+    fn index<'a>(&'a self, idx: &usize) -> &'a (Show + 'static) {\n+        static x: usize = 42;\n         &x\n     }\n }"}, {"sha": "69bda8c1671e7ccc4f0b4e147ce58e5ac5f239f2", "filename": "src/test/compile-fail/dst-rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-rvalue.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,8 +17,8 @@ pub fn main() {\n     //~^ ERROR E0161\n     //~^^ ERROR cannot move out of borrowed content\n \n-    let array: &[int] = &[1, 2, 3];\n-    let _x: Box<[int]> = box *array;\n+    let array: &[isize] = &[1, 2, 3];\n+    let _x: Box<[isize]> = box *array;\n     //~^ ERROR E0161\n     //~^^ ERROR cannot move out of borrowed content\n }"}, {"sha": "18ec55e10bb9a0410c1b54f6568687281275b0a6", "filename": "src/test/compile-fail/duplicate-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-parameter.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(a: int, a: int) {}\n+fn f(a: isize, a: isize) {}\n //~^ ERROR identifier `a` is bound more than once in this parameter list\n \n fn main() {"}, {"sha": "f3d8fcf31d76c057c3813188e998167d0f33bb7b", "filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod Foo {\n-    pub static X: int = 42;\n+    pub static X: isize = 42;\n }\n \n enum Foo {  //~ ERROR duplicate definition of type or module `Foo`"}, {"sha": "1d7794336a09671999d7f8f50ae9dff971bc9357", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -53,6 +53,6 @@ enum Ei32 {\n // u64 currently allows negative numbers, and i64 allows numbers greater than `1<<63`.  This is a\n // little counterintuitive, but since the discriminant can store all the bits, and extracting it\n // with a cast requires specifying the signedness, there is no loss of information in those cases.\n-// This also applies to int and uint on 64-bit targets.\n+// This also applies to isize and usize on 64-bit targets.\n \n pub fn main() { }"}, {"sha": "7be06ec7de81223cb53e512e1ee756433d3cb150", "filename": "src/test/compile-fail/enum-in-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-in-scope.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct hello(int);\n+struct hello(isize);\n \n fn main() {\n     let hello = 0; //~ERROR declaration of `hello` shadows"}, {"sha": "90030488dd60bb5f7ea0d25130b8928dde1f278a", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n impl Drop for Foo {"}, {"sha": "63ed74dfa490efe10a6f3bc2d7db629a2f7ff0da", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo {\n-    x: int\n+    x: isize\n }\n \n trait Bar : Drop {"}, {"sha": "fbc5263d82d1018a0d3825953784eea47c077ddb", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n struct Foo<'a,'b> {\n-    x: &'a int,\n-    y: &'b int,\n+    x: &'a isize,\n+    y: &'b isize,\n }\n \n impl<'a,'b> Foo<'a,'b> {"}, {"sha": "3a391e7c609ff35dd72d07d254e6bb9b65334366", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern: unresolved name\n mod foo {\n-    pub fn x(y: int) { log(debug, y); }\n-    fn z(y: int) { log(debug, y); }\n+    pub fn x(y: isize) { log(debug, y); }\n+    fn z(y: isize) { log(debug, y); }\n }\n \n fn main() { foo::z(10); }"}, {"sha": "d2c88865d54f21126eb1c8bd95d87de1014486c9", "filename": "src/test/compile-fail/extern-with-type-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-with-type-bounds.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -22,10 +22,10 @@ extern \"rust-intrinsic\" {\n \n     // Bounds aren't checked right now, so this should work\n     // even though it's incorrect.\n-    fn size_of<T: Clone>() -> uint;\n+    fn size_of<T: Clone>() -> usize;\n \n     // Unresolved bounds should still error.\n-    fn align_of<T: NoSuchTrait>() -> uint;\n+    fn align_of<T: NoSuchTrait>() -> usize;\n     //~^ ERROR attempt to bound type parameter with a nonexistent trait `NoSuchTrait`\n }\n "}, {"sha": "a37a8a326a66cd1a42ea05243b9e48ea9af0f174", "filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = [ 1i, 2, 3, 4, 5 ];\n+    let x = [ 1is, 2, 3, 4, 5 ];\n     match x {\n         [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n         [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches"}, {"sha": "016a03942891fc96a73b4b64b957fcc0c59ba2d0", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+mod u {\n+    type X = uint; //~ WARN the `uint` type is deprecated\n+    struct Foo {\n+        x: uint //~ WARN the `uint` type is deprecated\n+    }\n+    fn bar(x: uint) { //~ WARN the `uint` type is deprecated\n+        1u; //~ WARN the `u` suffix on integers is deprecated\n+    }\n+}\n+mod i {\n+    type X = int; //~ WARN the `int` type is deprecated\n+    struct Foo {\n+        x: int //~ WARN the `int` type is deprecated\n+    }\n+    fn bar(x: int) { //~ WARN the `int` type is deprecated\n+        1i; //~ WARN the `i` suffix on integers is deprecated\n+    }\n+}\n+\n+fn main() {\n+    // make compilation fail, after feature gating\n+    let () = 1u8; //~ ERROR\n+}"}, {"sha": "c5c355cfbce84c2e606b20952f72c416bdeaac0e", "filename": "src/test/compile-fail/fn-bad-block-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-bad-block-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-bad-block-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-bad-block-type.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:mismatched types\n \n-fn f() -> int { true }\n+fn f() -> isize { true }\n \n fn main() { }"}, {"sha": "b2394a29899e71ff0eaa23deb2946edd7dcf97ba", "filename": "src/test/compile-fail/fn-item-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,8 +11,8 @@\n // Test that the types of distinct fn items are not compatible by\n // default. See also `run-pass/fn-item-type-*.rs`.\n \n-fn foo(x: int) -> int { x * 2 }\n-fn bar(x: int) -> int { x * 4 }\n+fn foo(x: isize) -> isize { x * 2 }\n+fn bar(x: isize) -> isize { x * 4 }\n \n fn eq<T>(x: T, y: T) { }\n "}, {"sha": "3f5a92605b7e90fdfd93b31c3198759d648c3b99", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     let _: () = (box |&mut:| -> isize unimplemented!()) as Box<FnMut() -> isize>;\n     //~^ ERROR Box<core::ops::FnMut() -> isize>\n \n-    needs_fn(1i); //~ ERROR `core::ops::Fn(isize) -> isize`\n+    needs_fn(1is); //~ ERROR `core::ops::Fn(isize) -> isize`\n }"}, {"sha": "838e65e1d0574718d893ed2856e2daab64c0d057", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn takes_imm(x: &int) { }\n+fn takes_imm(x: &isize) { }\n \n-fn takes_mut(x: &mut int) { }\n+fn takes_mut(x: &mut isize) { }\n \n fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n     f(t)"}, {"sha": "fd920f923944de0f1f1f9b0808f4850a54a38109", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n struct MyStruct {\n-    x: int,\n-    y: int,\n+    x: isize,\n+    y: isize,\n }\n \n impl MyStruct {\n-    fn next(&mut self) -> Option<int> {\n+    fn next(&mut self) -> Option<isize> {\n         Some(self.x)\n     }\n }"}, {"sha": "c381fcf3efb06c9a2405f434c7df094ee7dd5696", "filename": "src/test/compile-fail/for-loop-refutable-pattern-error-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,6 +11,6 @@\n \n fn main() {\n     for\n-        &1i //~ ERROR refutable pattern in `for` loop binding\n-        in [1i].iter() {}\n+        &1is //~ ERROR refutable pattern in `for` loop binding\n+        in [1is].iter() {}\n }"}, {"sha": "46a18c981835b5f962f9efc6618188622328ea52", "filename": "src/test/compile-fail/forget-init-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforget-init-unsafe.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,6 +12,6 @@ use std::intrinsics::{init, forget};\n \n // Test that the `forget` and `init` intrinsics are really unsafe\n pub fn main() {\n-    let stuff = init::<int>(); //~ ERROR call to unsafe function requires unsafe\n+    let stuff = init::<isize>(); //~ ERROR call to unsafe function requires unsafe\n     forget(stuff);             //~ ERROR call to unsafe function requires unsafe\n }"}, {"sha": "dc0c9a093fff8c302932d8e084b11b787d3904e0", "filename": "src/test/compile-fail/fully-qualified-type-name3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name3.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,8 +12,8 @@\n \n // ignore-test\n \n-type T1 = uint;\n-type T2 = int;\n+type T1 = usize;\n+type T2 = isize;\n \n fn bar(x: T1) -> T2 {\n     return x;"}, {"sha": "7ce32bbc975c6f4d0b8fbd103d10e84e6c942436", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,7 +12,7 @@\n \n use std::sync::Arc;\n \n-struct A { y: Arc<int>, x: Arc<int> }\n+struct A { y: Arc<isize>, x: Arc<isize> }\n \n impl Drop for A {\n     fn drop(&mut self) { println!(\"x={}\", *self.x); }"}, {"sha": "f4b9830d579a4593b73ddd82923290723b45c768", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,22 +17,22 @@ mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n }\n \n fn b\u00e4r( //~ ERROR non-ascii idents\n-    b\u00e4z: int //~ ERROR non-ascii idents\n+    b\u00e4z: isize //~ ERROR non-ascii idents\n     ) {\n-    let _\u00f6: int; //~ ERROR non-ascii idents\n+    let _\u00f6: isize; //~ ERROR non-ascii idents\n \n     match (1, 2) {\n         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n     }\n }\n \n struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n-    f\u00f6\u00f6: int //~ ERROR non-ascii idents\n+    f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n }\n \n enum B\u00e4r { //~ ERROR non-ascii idents\n     B\u00e4z { //~ ERROR non-ascii idents\n-        q\u00fcx: int //~ ERROR non-ascii idents\n+        q\u00fcx: isize //~ ERROR non-ascii idents\n     }\n }\n "}, {"sha": "02f09749d614d359b49e2ac85093762bed9136a5", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,6 +15,6 @@ impl<A, B, C = (A, B)> Foo<A, B, C> {\n }\n \n fn main() {\n-    Foo::<int>::new();\n+    Foo::<isize>::new();\n     //~^ ERROR too few type parameters provided\n }"}, {"sha": "d88da2625c187cba2fc872afec0620f37ce028ed", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,6 +17,6 @@ impl<T, A = Heap> Vec<T, A> {\n }\n \n fn main() {\n-    Vec::<int, Heap, bool>::new();\n+    Vec::<isize, Heap, bool>::new();\n     //~^ ERROR too many type parameters provided\n }"}, {"sha": "19d303488acb0f6d077d56da7a8e4ba76af184c8", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,6 +13,6 @@ struct Heap;\n struct Vec<T, A = Heap>;\n \n fn main() {\n-    let _: Vec<int, Heap, bool>;\n+    let _: Vec<isize, Heap, bool>;\n     //~^ ERROR wrong number of type arguments: expected at most 2, found 3\n }"}, {"sha": "fce8a07d7270d3444fb83e4343a77e2bc90f7886", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -23,7 +23,7 @@ mod bar {\n \n     struct C;\n \n-    type D = int;\n+    type D = isize;\n }\n \n fn foo<T>() {}"}, {"sha": "db1e1e8efe42f2d77185d0a4c157aa7a82ce6e91", "filename": "src/test/compile-fail/hashmap-iter-value-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n-    my_stuff.insert(0i, 42i);\n+    my_stuff.insert(0is, 42is);\n \n     let (_, thing) = my_stuff.iter().next().unwrap();\n "}, {"sha": "40673dd92b89da30a93860500889bb705aff346a", "filename": "src/test/compile-fail/hashmap-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n-    my_stuff.insert(0i, 42i);\n+    my_stuff.insert(0is, 42is);\n \n     let mut it = my_stuff.iter();\n     my_stuff.insert(1, 43); //~ ERROR cannot borrow"}, {"sha": "3efe0501267e9b1ac6c5f031ac022586e3562548", "filename": "src/test/compile-fail/hrtb-conflate-regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,12 +16,12 @@ trait Foo<X> {\n }\n \n fn want_foo2<T>()\n-    where T : for<'a,'b> Foo<(&'a int, &'b int)>\n+    where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n {\n }\n \n fn want_foo1<T>()\n-    where T : for<'z> Foo<(&'z int, &'z int)>\n+    where T : for<'z> Foo<(&'z isize, &'z isize)>\n {\n }\n \n@@ -30,7 +30,7 @@ fn want_foo1<T>()\n \n struct SomeStruct;\n \n-impl<'a> Foo<(&'a int, &'a int)> for SomeStruct\n+impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n {\n }\n "}, {"sha": "2365f494075d2126a786c54564b9d7168240def6", "filename": "src/test/compile-fail/hrtb-debruijn-in-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-debruijn-in-receiver.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -14,7 +14,7 @@\n use std::collections::HashMap;\n \n struct Foo<'a> {\n-    map: HashMap<uint, &'a str>\n+    map: HashMap<usize, &'a str>\n }\n \n impl<'a> Foo<'a> {"}, {"sha": "249256f8e01a6a0e6f2da50b6f279640caa72245", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits-transitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,13 +12,13 @@\n \n trait Foo<'tcx>\n {\n-    fn foo(&'tcx self) -> &'tcx int;\n+    fn foo(&'tcx self) -> &'tcx isize;\n }\n \n trait Bar<'ccx>\n     : for<'tcx> Foo<'tcx>\n {\n-    fn bar(&'ccx self) -> &'ccx int;\n+    fn bar(&'ccx self) -> &'ccx isize;\n }\n \n trait Baz"}, {"sha": "441ad76b6023ca980430def642c4c8e7ef77372a", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -12,13 +12,13 @@\n \n trait Foo<'tcx>\n {\n-    fn foo(&'tcx self) -> &'tcx int;\n+    fn foo(&'tcx self) -> &'tcx isize;\n }\n \n trait Bar<'ccx>\n     : for<'tcx> Foo<'tcx>\n {\n-    fn bar(&'ccx self) -> &'ccx int;\n+    fn bar(&'ccx self) -> &'ccx isize;\n }\n \n fn want_foo_for_some_tcx<'x,F>(f: &'x F)"}, {"sha": "17939cf9fe026aee6f4c7d22301fe872de0acdfd", "filename": "src/test/compile-fail/hrtb-identity-fn-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,7 +16,7 @@ trait FnLike<A,R> {\n }\n \n fn call_repeatedly<F>(f: F)\n-    where F : for<'a> FnLike<&'a int, &'a int>\n+    where F : for<'a> FnLike<&'a isize, &'a isize>\n {\n     // Result is stored: cannot re-assign `x`\n     let mut x = 3;"}, {"sha": "1e04e685e41b8b3434ca2b62dfd92671eea445eb", "filename": "src/test/compile-fail/huge-array-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,5 +11,5 @@\n // error-pattern: too big for the current\n \n fn main() {\n-   let fat : [u8; (1<<61)+(1<<31)] = [0; (1u64<<61) as uint +(1u64<<31) as uint];\n+   let fat : [u8; (1<<61)+(1<<31)] = [0; (1u64<<61) as usize +(1u64<<31) as usize];\n }"}, {"sha": "d83779c4f0f0ca12e1241bce003217eb0ca79521", "filename": "src/test/compile-fail/if-let.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -20,36 +20,36 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1i, { //~ ERROR irrefutable if-let\n+    foo!(a, 1is, { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1i, { //~ ERROR irrefutable if-let\n+    bar!(a, 1is, { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    if let a = 1i { //~ ERROR irrefutable if-let\n+    if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n-    if let a = 1i { //~ ERROR irrefutable if-let\n+    if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     } else if true {\n         println!(\"else-if in irrefutable if-let\");\n     } else {\n         println!(\"else in irrefutable if-let\");\n     }\n \n-    if let 1i = 2i {\n+    if let 1is = 2is {\n         println!(\"refutable pattern\");\n-    } else if let a = 1i { //~ ERROR irrefutable if-let\n+    } else if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n     if true {\n         println!(\"if\");\n-    } else if let a = 1i { //~ ERROR irrefutable if-let\n+    } else if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "99927d8b9bf5518d5bfee7903441443f6996de5b", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n \n-fn f(y: Box<int>) {\n+fn f(y: Box<isize>) {\n     *y = 5; //~ ERROR cannot assign\n }\n \n fn g() {\n-    let _frob = |&: q: Box<int>| { *q = 2; }; //~ ERROR cannot assign\n+    let _frob = |&: q: Box<isize>| { *q = 2; }; //~ ERROR cannot assign\n \n }\n "}, {"sha": "8c8f67e40abef59af082a594b670b2e9a9122eb6", "filename": "src/test/compile-fail/impl-bounds-checking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -17,8 +17,8 @@ trait Getter<T: Clone2> {\n     fn get(&self) -> T;\n }\n \n-impl Getter<int> for int { //~ ERROR the trait `Clone2` is not implemented\n-    fn get(&self) -> int { *self }\n+impl Getter<isize> for isize { //~ ERROR the trait `Clone2` is not implemented\n+    fn get(&self) -> isize { *self }\n }\n \n fn main() { }"}, {"sha": "7a7673d871d7564158588ad6e4ca9af2f9364239", "filename": "src/test/compile-fail/impl-not-adjacent-to-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-not-adjacent-to-type.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,8 +10,8 @@\n \n mod foo {\n     pub struct Foo {\n-        x: int,\n-        y: int,\n+        x: isize,\n+        y: isize,\n     }\n }\n "}, {"sha": "c9399afbb93b2a998d29e6cac491d9dfc6fb32ed", "filename": "src/test/compile-fail/impl-unused-tps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,19 +16,19 @@ trait Bar {\n     type Out;\n }\n \n-impl<T> Foo<T> for [int;0] {\n+impl<T> Foo<T> for [isize;0] {\n     // OK, T is used in `Foo<T>`.\n }\n \n-impl<T,U> Foo<T> for [int;1] {\n+impl<T,U> Foo<T> for [isize;1] {\n     //~^ ERROR the type parameter `U` is not constrained\n }\n \n-impl<T,U> Foo<T> for [int;2] where T : Bar<Out=U> {\n+impl<T,U> Foo<T> for [isize;2] where T : Bar<Out=U> {\n     // OK, `U` is now constrained by the output type parameter.\n }\n \n-impl<T:Bar<Out=U>,U> Foo<T> for [int;3] {\n+impl<T:Bar<Out=U>,U> Foo<T> for [isize;3] {\n     // OK, same as above but written differently.\n }\n "}, {"sha": "d329f72f788ae4d7a7ba017fce605485364e9f47", "filename": "src/test/compile-fail/implicit-method-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,5 +11,5 @@\n use std::num::SignedInt;\n \n fn main() {\n-    let _f = 10i.abs; //~ ERROR attempted to take value of method\n+    let _f = 10is.abs; //~ ERROR attempted to take value of method\n }"}, {"sha": "0f6e3dc134d9b973bfbbab9293604c77e082e14d", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -13,13 +13,13 @@\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n-    pub fn common() -> uint { return 0u; }\n+    pub fn common() -> usize { return 0us; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n     pub fn f2() { println!(\"f2\"); }\n-    pub fn common() -> uint { return 1u; }\n+    pub fn common() -> usize { return 1us; }\n }\n \n mod test {"}, {"sha": "503fa4eca527bbc9c1b1639076d43d79837af58f", "filename": "src/test/compile-fail/import-shadow-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use bar::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "0c107cf27f5928fc96087c3bcc325e0de6cd9962", "filename": "src/test/compile-fail/import-shadow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "bf90973c2857e7a8039d7a0685cf9157ef2728fb", "filename": "src/test/compile-fail/import-shadow-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use foo::Baz;\n use bar::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "f21fdaae47ba0e29e5f789afec78e05271321e42", "filename": "src/test/compile-fail/import-shadow-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "dc300bc7baa7705823103a9f7c2f37382eb8399a", "filename": "src/test/compile-fail/import-shadow-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use foo::Baz;\n use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "fa3b75c70f0b68a75250c93b5c50638e20257bf6", "filename": "src/test/compile-fail/import-shadow-6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use qux::*;\n use foo::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "34aba15b3922892d781b5b15545ec9f39115f10e", "filename": "src/test/compile-fail/import-shadow-7.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -16,11 +16,11 @@ use foo::*;\n use qux::*; //~ERROR a type named `Baz` has already been imported in this module\n \n mod foo {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod bar {\n-    pub type Baz = int;\n+    pub type Baz = isize;\n }\n \n mod qux {"}, {"sha": "876c1e481f60497c348853c19e382b427c86b12e", "filename": "src/test/compile-fail/index-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    (return)[0u]; //~ ERROR the type of this value must be known in this context\n+    (return)[0us]; //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "901d8783d0278997a9e6dfd00e909b2f1af4a40e", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure that indexing an array is only valid with a `uint`, not any other\n+// Make sure that indexing an array is only valid with a `usize`, not any other\n // integral type.\n \n fn main() {\n     fn bar<T>(_: T) {}\n     [0][0u8]; //~ ERROR: the trait `core::ops::Index<u8>` is not implemented\n     //~^ ERROR: the trait `core::ops::Index<u8>` is not implemented\n \n-    [0][0]; // should infer to be a uint\n+    [0][0]; // should infer to be a usize\n \n     let i = 0;      // i is an IntVar\n-    [0][i];         // i should be locked to uint\n-    bar::<int>(i);  // i should not be re-coerced back to an int\n+    [0][i];         // i should be locked to usize\n+    bar::<isize>(i);  // i should not be re-coerced back to an isize\n     //~^ ERROR: mismatched types\n }\n "}, {"sha": "a922f5fe4527e41f07590d6cedaa0524c09d818b", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -15,8 +15,8 @@ trait to_opt {\n     fn to_option(&self) -> Option<Self>;\n }\n \n-impl to_opt for uint {\n-    fn to_option(&self) -> Option<uint> {\n+impl to_opt for usize {\n+    fn to_option(&self) -> Option<usize> {\n         Some(*self)\n     }\n }\n@@ -27,12 +27,12 @@ impl<T:Clone> to_opt for Option<T> {\n     }\n }\n \n-fn function<T:to_opt + Clone>(counter: uint, t: T) {\n-    if counter > 0u {\n-        function(counter - 1u, t.to_option());\n+fn function<T:to_opt + Clone>(counter: usize, t: T) {\n+    if counter > 0us {\n+        function(counter - 1us, t.to_option());\n     }\n }\n \n fn main() {\n-    function(22u, 22u);\n+    function(22us, 22us);\n }"}, {"sha": "a57c015d684b6c8510e94c647b19163a36c6e978", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,6 +11,6 @@\n \n // error-pattern: illegal recursive enum type; wrap the inner value in a box\n \n-enum mlist { cons(int, mlist), nil, }\n+enum mlist { cons(isize, mlist), nil, }\n \n fn main() { let a = mlist::cons(10, mlist::cons(11, mlist::nil)); }"}, {"sha": "2aeaf6efaa4c064b882b932492d8e95193f3db38", "filename": "src/test/compile-fail/int-literal-too-large-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fint-literal-too-large-span.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n // issue #17123\n \n fn main() {\n-    100000000000000000000000000000000 //~ ERROR int literal is too large\n+    100000000000000000000000000000000is //~ ERROR int literal is too large\n \n         ; // the span shouldn't point to this.\n }"}, {"sha": "ef651dd9ce7293d24df0f468a9a62ba8cbb39f9b", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n pub fn main() {\n-    let v: Vec<int> = vec!(0, 1, 2, 3, 4, 5);\n+    let v: Vec<isize> = vec!(0, 1, 2, 3, 4, 5);\n     let s: String = \"abcdef\".to_string();\n-    v.as_slice()[3u];\n+    v.as_slice()[3us];\n     v.as_slice()[3];\n     v.as_slice()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n@@ -21,7 +21,7 @@ pub fn main() {\n     //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     v.as_slice()[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n-    s.as_bytes()[3u];\n+    s.as_bytes()[3us];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ERROR the trait `core::ops::Index<u8>` is not implemented"}, {"sha": "a80d393155539ed1e3b10b0f6f5c3143373a31c4", "filename": "src/test/compile-fail/intrinsic-return-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintrinsic-return-address.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -20,7 +20,7 @@ unsafe fn f() {\n     //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n }\n \n-unsafe fn g() -> int {\n+unsafe fn g() -> isize {\n     let _ = return_address();\n     //~^ ERROR invalid use of `return_address` intrinsic: function does not use out pointer\n     0"}, {"sha": "03d4e9b81eb2924f34a5ecf0e3b05c6aac855607", "filename": "src/test/compile-fail/issue-10200.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10200.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo(bool);\n-fn foo(_: uint) -> Foo { Foo(false) }\n+fn foo(_: usize) -> Foo { Foo(false) }\n \n fn main() {\n     match Foo(true) {"}, {"sha": "45f6e55914a1b07ba3a8c28cd3e87dc4858ee94f", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -10,8 +10,8 @@\n \n #![feature(box_syntax)]\n \n-fn test<'x>(x: &'x int) {\n-    drop::<Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n+fn test<'x>(x: &'x isize) {\n+    drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(box |z| {\n         x\n         //~^ ERROR cannot infer an appropriate lifetime\n     });"}, {"sha": "b077081c5b0c819f52ab9ebf9902ca4db3f70d40", "filename": "src/test/compile-fail/issue-10392-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10392-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10392-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10392-2.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A { foo: int }\n+struct A { foo: isize }\n \n fn a() -> A { panic!() }\n "}, {"sha": "3f8d26bfec05d2fad0cf89648384aa54cdd7aed7", "filename": "src/test/compile-fail/issue-10392.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10392.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A { foo: int }\n+struct A { foo: isize }\n \n fn a() -> A { panic!() }\n "}, {"sha": "c1102bc84aba7faf1effc8ebd3cc83059660d2b7", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4281bd1932bf185e1154f7a79832bbd2d9155e41/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=4281bd1932bf185e1154f7a79832bbd2d9155e41", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1i;\n+    let x = box 1is;\n     let f = move|:| {\n         let _a = x;\n         drop(x);"}]}