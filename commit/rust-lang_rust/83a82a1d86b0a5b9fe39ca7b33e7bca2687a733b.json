{"sha": "83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTgyYTFkODZiMGE1YjlmZTM5Y2E3YjMzZTdiY2EyNjg3YTczM2I=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T23:41:54Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-05T23:41:54Z"}, "message": "Remove redundancy in lint documentation\n\nThe default level is always given in the declare_lint! macro, no need to\nadd it inconsistently in the documentation.", "tree": {"sha": "cd7d5706358b41939a910a0c39b2de13c5c6bb26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7d5706358b41939a910a0c39b2de13c5c6bb26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "html_url": "https://github.com/rust-lang/rust/commit/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f245f6c951e6dca16dd02851237e5f271a31d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f245f6c951e6dca16dd02851237e5f271a31d0", "html_url": "https://github.com/rust-lang/rust/commit/13f245f6c951e6dca16dd02851237e5f271a31d0"}], "stats": {"total": 199, "additions": 97, "deletions": 102}, "files": [{"sha": "98e2fa97eba728d884967d63880ffddd07b288d4", "filename": "src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fapprox_const.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::Lit_::*;\n use syntax::ast::Lit;\n use syntax::ast::FloatTy::*;\n \n-/// **What it does:** This lint checks for floating point literals that approximate constants which are defined in [`std::f32::consts`](https://doc.rust-lang.org/stable/std/f32/consts/#constants) or [`std::f64::consts`](https://doc.rust-lang.org/stable/std/f64/consts/#constants), respectively, suggesting to use the predefined constant. This lint is `Warn` by default.\n+/// **What it does:** This lint checks for floating point literals that approximate constants which are defined in [`std::f32::consts`](https://doc.rust-lang.org/stable/std/f32/consts/#constants) or [`std::f64::consts`](https://doc.rust-lang.org/stable/std/f64/consts/#constants), respectively, suggesting to use the predefined constant.\n ///\n /// **Why is this bad?** Usually, the definition in the standard library is more precise than what people come up with. If you find that your definition is actually more precise, please [file a Rust issue](https://github.com/rust-lang/rust/issues).\n ///"}, {"sha": "231a08779cc1ac76521666970f6d21eb2bdc50bc", "filename": "src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -9,7 +9,7 @@ use syntax::attr::*;\n use syntax::ast::{Attribute, Lit, Lit_, MetaList, MetaWord, MetaNameValue};\n use utils::{in_macro, match_path, span_lint, BEGIN_UNWIND};\n \n-/// **What it does:** This lint `Warn`s on items annotated with `#[inline(always)]`, unless the annotated function is empty or simply panics.\n+/// **What it does:** This lint checks for items annotated with `#[inline(always)]`, unless the annotated function is empty or simply panics.\n ///\n /// **Why is this bad?** While there are valid uses of this annotation (and once you know when to use it, by all means `allow` this lint), it's a common newbie-mistake to pepper one's code with it.\n ///\n@@ -27,7 +27,7 @@ declare_lint! {\n     \"`#[inline(always)]` is a bad idea in most cases\"\n }\n \n-/// **What it does:** This lint `Warn`s on `#[deprecated]` annotations with a `since` field that is not a valid semantic version..\n+/// **What it does:** This lint checks for `#[deprecated]` annotations with a `since` field that is not a valid semantic version..\n ///\n /// **Why is this bad?** For checking the version of the deprecation, it must be valid semver. Failing that, the contained information is useless.\n ///"}, {"sha": "b9925f10fa21a3b55c36ddf86e5f8b82b3bc3e0e", "filename": "src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::Lit_::*;\n \n use utils::span_lint;\n \n-/// **What it does:** This lint checks for incompatible bit masks in comparisons. It is `Warn` by default.\n+/// **What it does:** This lint checks for incompatible bit masks in comparisons.\n ///\n /// The formula for detecting if an expression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\n /// is one of {`&`, `|`} and `<cmp_op>` is one of {`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following table:\n@@ -43,8 +43,6 @@ declare_lint! {\n /// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|\n /// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|\n ///\n-/// This lint is `Warn` by default.\n-///\n /// **Why is this bad?** Not equally evil as [`bad_bit_mask`](#bad_bit_mask), but still a bit misleading, because the bit mask is ineffective.\n ///\n /// **Known problems:** False negatives: This lint will only match instances where we have figured out the math (which is for a power-of-two compared value). This means things like `x | 1 >= 7` (which would be better written as `x >= 6`) will not be reported (but bit masks like this are fairly uncommon)."}, {"sha": "65fbce640cfda035035e9f9e61df4943e54142dc", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::{LateLintPass, LateContext, LintArray, LintPass};\n use rustc_front::intravisit::{Visitor, walk_expr};\n use utils::*;\n \n-/// **What it does:** This lint checks for `if` conditions that use blocks to contain an expression. It is `Warn` by default.\n+/// **What it does:** This lint checks for `if` conditions that use blocks to contain an expression.\n ///\n /// **Why is this bad?** It isn't really rust style, same as using parentheses to contain expressions.\n ///\n@@ -15,7 +15,7 @@ declare_lint! {\n     \"braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\"\n }\n \n-/// **What it does:** This lint checks for `if` conditions that use blocks containing statements, or conditions that use closures with blocks. It is `Warn` by default.\n+/// **What it does:** This lint checks for `if` conditions that use blocks containing statements, or conditions that use closures with blocks.\n ///\n /// **Why is this bad?** Using blocks in the condition makes it hard to read.\n ///"}, {"sha": "03c43ef5dc8c51261083b832a0194541cb84b997", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -20,7 +20,7 @@ use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n \n /// **What it does:** This lint checks for nested `if`-statements which can be collapsed by\n /// `&&`-combining their conditions and for `else { if .. }` expressions that can be collapsed to\n-/// `else if ..`. It is `Warn` by default.\n+/// `else if ..`.\n ///\n /// **Why is this bad?** Each `if`-statement adds one level of nesting, which makes code look more complex than it really is.\n ///"}, {"sha": "b2be1dddbee109f42c4ed1e7fb6aef3ae28980ea", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -11,7 +11,7 @@ use rustc_front::intravisit::{Visitor, walk_expr};\n \n use utils::{in_macro, LimitStack, span_help_and_lint};\n \n-/// **What it does:** It `Warn`s on methods with high cyclomatic complexity\n+/// **What it does:** This lint checks for methods with high cyclomatic complexity\n ///\n /// **Why is this bad?** Methods of high cyclomatic complexity tend to be badly readable. Also LLVM will usually optimize small methods better.\n ///"}, {"sha": "6dc3d73419620788dc7253ef731c656f90791b97", "filename": "src/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdrop_ref.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -15,7 +15,7 @@ use utils::{match_def_path, span_note_and_lint};\n /// **Example:**\n /// ```rust\n /// let mut lock_guard = mutex.lock();\n-/// std::mem::drop(&lock_guard) //Should have been drop(lock_guard), mutex still locked\n+/// std::mem::drop(&lock_guard) // Should have been drop(lock_guard), mutex still locked\n /// operation_that_requires_mutex_to_be_unlocked();\n /// ```\n declare_lint! {"}, {"sha": "49037cd9ae7ff994d5465b8be49d56757ba15a84", "filename": "src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use rustc_front::util as ast_util;\n \n use utils::{is_exp_equal, span_lint};\n \n-/// **What it does:** This lint checks for equal operands to comparisons and bitwise binary operators (`&`, `|` and `^`). It is `Warn` by default.\n+/// **What it does:** This lint checks for equal operands to comparisons and bitwise binary operators (`&`, `|` and `^`).\n ///\n /// **Why is this bad?** This is usually just a typo.\n ///"}, {"sha": "60bfbbc59c351c165215cde504ea4f3b0de88a6b", "filename": "src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -14,7 +14,7 @@ use utils::span_lint;\n \n pub struct EscapePass;\n \n-/// **What it does:** This lint checks for usage of `Box<T>` where an unboxed `T` would work fine. It is `Warn` by default.\n+/// **What it does:** This lint checks for usage of `Box<T>` where an unboxed `T` would work fine.\n ///\n /// **Why is this bad?** This is an unnecessary allocation, and bad for performance. It is only necessary to allocate if you wish to move the box into something.\n ///"}, {"sha": "280392a50b10205b60b100c14e1e8abc97cc93a5", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -9,7 +9,7 @@ use utils::{snippet_opt, span_lint_and_then, is_adjusted};\n pub struct EtaPass;\n \n \n-/// **What it does:** This lint checks for closures which just call another function where the function can be called directly. `unsafe` functions or calls where types get adjusted are ignored. It is `Warn` by default.\n+/// **What it does:** This lint checks for closures which just call another function where the function can be called directly. `unsafe` functions or calls where types get adjusted are ignored.\n ///\n /// **Why is this bad?** Needlessly creating a closure just costs heap space and adds code for no benefit.\n ///"}, {"sha": "1a62ffb4ae0b7320d78395594f04c18c678cf141", "filename": "src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -5,7 +5,7 @@ use syntax::codemap::Span;\n use consts::{constant_simple, is_negative, Constant};\n use utils::{span_lint, snippet, in_macro};\n \n-/// **What it does:** This lint checks for identity operations, e.g. `x + 0`. It is `Warn` by default.\n+/// **What it does:** This lint checks for identity operations, e.g. `x + 0`.\n ///\n /// **Why is this bad?** This code can be removed without changing the meaning. So it just obscures what's going on. Delete it mercilessly.\n ///"}, {"sha": "2aa2fc6da349787c22adc89acf231ac74e45aaea", "filename": "src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems_after_statements.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -5,8 +5,7 @@ use syntax::attr::*;\n use syntax::ast::*;\n use utils::in_macro;\n \n-/// **What it does:** It `Warn`s on blocks where there are items that are declared in the middle of\n-/// or after the statements\n+/// **What it does:** This lints checks for items declared after some statement in a block\n ///\n /// **Why is this bad?** Items live for the entire scope they are declared in. But statements are\n /// processed in order. This might cause confusion as it's hard to figure out which item is meant"}, {"sha": "120e880cde6f2131c38003944cbfb3018300d478", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -11,7 +11,7 @@ use syntax::ast::Lit;\n \n use utils::{get_item_name, snippet, span_lint, walk_ptrs_ty};\n \n-/// **What it does:** This lint checks for getting the length of something via `.len()` just to compare to zero, and suggests using `.is_empty()` where applicable. It is `Warn` by default.\n+/// **What it does:** This lint checks for getting the length of something via `.len()` just to compare to zero, and suggests using `.is_empty()` where applicable.\n ///\n /// **Why is this bad?** Some structures can answer `.is_empty()` much faster than calculating their length. So it is good to get into the habit of using `.is_empty()`, and having it is cheap. Besides, it makes the intent clearer than a comparison.\n ///\n@@ -24,7 +24,7 @@ declare_lint! {\n      could be used instead\"\n }\n \n-/// **What it does:** This lint checks for items that implement `.len()` but not `.is_empty()`. It is `Warn` by default.\n+/// **What it does:** This lint checks for items that implement `.len()` but not `.is_empty()`.\n ///\n /// **Why is this bad?** It is good custom to have both methods, because for some data structures, asking about the length will be a costly operation, whereas `.is_empty()` can usually answer in constant time. Also it used to lead to false positives on the [`len_zero`](#len_zero) lint \u2013 currently that lint will ignore such entities.\n ///"}, {"sha": "f30163f465631c136b8bbb20aec11220cb5a1e7f", "filename": "src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -8,7 +8,7 @@ use std::collections::{HashSet, HashMap};\n \n use utils::{in_external_macro, span_lint};\n \n-/// **What it does:** This lint checks for lifetime annotations which can be removed by relying on lifetime elision. It is `Warn` by default.\n+/// **What it does:** This lint checks for lifetime annotations which can be removed by relying on lifetime elision.\n ///\n /// **Why is this bad?** The additional lifetimes make the code look more complicated, while there is nothing out of the ordinary going on. Removing them leads to more readable code.\n ///\n@@ -22,7 +22,7 @@ declare_lint! {\n      would allow omitting them\"\n }\n \n-/// **What it does:** This lint checks for lifetimes in generics that are never used anywhere else. It is `Warn` by default.\n+/// **What it does:** This lint checks for lifetimes in generics that are never used anywhere else.\n ///\n /// **Why is this bad?** The additional lifetimes make the code look more complicated, while there is nothing out of the ordinary going on. Removing them leads to more readable code.\n ///"}, {"sha": "4620d6a3e818bd0e271ca28128611ff991b60cc4", "filename": "src/loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -13,7 +13,7 @@ use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type,\n             span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, walk_ptrs_ty};\n use utils::{BTREEMAP_PATH, HASHMAP_PATH, LL_PATH, OPTION_PATH, RESULT_PATH, VEC_PATH};\n \n-/// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index. It is `Warn` by default.\n+/// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index.\n ///\n /// **Why is this bad?** Just iterating the collection itself makes the intent more clear and is probably faster.\n ///\n@@ -31,7 +31,7 @@ declare_lint! {\n     \"for-looping over a range of indices where an iterator over items would do\"\n }\n \n-/// **What it does:** This lint checks for loops on `x.iter()` where `&x` will do, and suggest the latter. It is `Warn` by default.\n+/// **What it does:** This lint checks for loops on `x.iter()` where `&x` will do, and suggest the latter.\n ///\n /// **Why is this bad?** Readability.\n ///\n@@ -44,7 +44,7 @@ declare_lint! {\n     \"for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\"\n }\n \n-/// **What it does:** This lint checks for loops on `x.next()`. It is `Warn` by default.\n+/// **What it does:** This lint checks for loops on `x.next()`.\n ///\n /// **Why is this bad?** `next()` returns either `Some(value)` if there was a value, or `None` otherwise. The insidious thing is that `Option<_>` implements `IntoIterator`, so that possibly one value will be iterated, leading to some hard to find bugs. No one will want to write such code [except to win an Underhanded Rust Contest](https://www.reddit.com/r/rust/comments/3hb0wm/underhanded_rust_contest/cu5yuhr).\n ///\n@@ -57,7 +57,7 @@ declare_lint! {\n     \"for-looping over `_.next()` which is probably not intended\"\n }\n \n-/// **What it does:** This lint checks for `for` loops over `Option` values. It is `Warn` by default.\n+/// **What it does:** This lint checks for `for` loops over `Option` values.\n ///\n /// **Why is this bad?** Readability. This is more clearly expressed as an `if let`.\n ///\n@@ -70,7 +70,7 @@ declare_lint! {\n     \"for-looping over an `Option`, which is more clearly expressed as an `if let`\"\n }\n \n-/// **What it does:** This lint checks for `for` loops over `Result` values. It is `Warn` by default.\n+/// **What it does:** This lint checks for `for` loops over `Result` values.\n ///\n /// **Why is this bad?** Readability. This is more clearly expressed as an `if let`.\n ///\n@@ -83,7 +83,7 @@ declare_lint! {\n     \"for-looping over a `Result`, which is more clearly expressed as an `if let`\"\n }\n \n-/// **What it does:** This lint detects `loop + match` combinations that are easier written as a `while let` loop. It is `Warn` by default.\n+/// **What it does:** This lint detects `loop + match` combinations that are easier written as a `while let` loop.\n ///\n /// **Why is this bad?** The `while let` loop is usually shorter and more readable\n ///\n@@ -110,7 +110,7 @@ declare_lint! {\n     \"`loop { if let { ... } else break }` can be written as a `while let` loop\"\n }\n \n-/// **What it does:** This lint checks for using `collect()` on an iterator without using the result. It is `Warn` by default.\n+/// **What it does:** This lint checks for using `collect()` on an iterator without using the result.\n ///\n /// **Why is this bad?** It is more idiomatic to use a `for` loop over the iterator instead.\n ///\n@@ -124,7 +124,7 @@ declare_lint! {\n      written as a for loop\"\n }\n \n-/// **What it does:** This lint checks for loops over ranges `x..y` where both `x` and `y` are constant and `x` is greater or equal to `y`, unless the range is reversed or has a negative `.step_by(_)`. It is `Warn` by default.\n+/// **What it does:** This lint checks for loops over ranges `x..y` where both `x` and `y` are constant and `x` is greater or equal to `y`, unless the range is reversed or has a negative `.step_by(_)`.\n ///\n /// **Why is it bad?** Such loops will either be skipped or loop until wrap-around (in debug code, this may `panic!()`). Both options are probably not intended.\n ///\n@@ -137,7 +137,7 @@ declare_lint! {\n     \"Iterating over an empty range, such as `10..0` or `5..5`\"\n }\n \n-/// **What it does:** This lint checks `for` loops over slices with an explicit counter and suggests the use of `.enumerate()`. It is `Warn` by default.\n+/// **What it does:** This lint checks `for` loops over slices with an explicit counter and suggests the use of `.enumerate()`.\n ///\n /// **Why is it bad?** Not only is the version using `.enumerate()` more readable, the compiler is able to remove bounds checks which can lead to faster code in some instances.\n ///\n@@ -150,7 +150,7 @@ declare_lint! {\n     \"for-looping with an explicit counter when `_.enumerate()` would do\"\n }\n \n-/// **What it does:** This lint checks for empty `loop` expressions. It is `Warn` by default.\n+/// **What it does:** This lint checks for empty `loop` expressions.\n ///\n /// **Why is this bad?** Those busy loops burn CPU cycles without doing anything. Think of the environment and either block on something or at least make the thread sleep for some microseconds.\n ///\n@@ -163,7 +163,7 @@ declare_lint! {\n     \"empty `loop {}` detected\"\n }\n \n-/// **What it does:** This lint checks for `while let` expressions on iterators. It is `Warn` by default.\n+/// **What it does:** This lint checks for `while let` expressions on iterators.\n ///\n /// **Why is this bad?** Readability. A simple `for` loop is shorter and conveys the intent better.\n ///"}, {"sha": "e0255c52fb513e4cebff70c2ccdcaebf88530ae7", "filename": "src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmap_clone.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use utils::{CLONE_PATH, OPTION_PATH};\n use utils::{is_adjusted, match_path, match_trait_method, match_type, snippet, span_help_and_lint};\n use utils::{walk_ptrs_ty, walk_ptrs_ty_depth};\n \n-/// **What it does:** This lint checks for mapping clone() over an iterator. It is `Warn` by default and suggests to use `.cloned()` instead.\n+/// **What it does:** This lint checks for mapping clone() over an iterator.\n ///\n /// **Why is this bad?** It makes the code less readable.\n ///"}, {"sha": "6be5d0bf24f72b5b4f11d25ad21f6a591a32b698", "filename": "src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -11,7 +11,7 @@ use syntax::codemap::Span;\n use utils::{COW_PATH, OPTION_PATH, RESULT_PATH};\n use utils::{match_type, snippet, span_lint, span_note_and_lint, span_lint_and_then, in_external_macro, expr_block};\n \n-/// **What it does:** This lint checks for matches with a single arm where an `if let` will usually suffice. It is `Warn` by default.\n+/// **What it does:** This lint checks for matches with a single arm where an `if let` will usually suffice.\n ///\n /// **Why is this bad?** Just readability \u2013 `if let` nests less than a `match`.\n ///\n@@ -30,7 +30,7 @@ declare_lint! {\n      is `_ => {}`) is used; recommends `if let` instead\"\n }\n \n-/// **What it does:** This lint checks for matches with a two arms where an `if let` will usually suffice. It is `Allow` by default.\n+/// **What it does:** This lint checks for matches with a two arms where an `if let` will usually suffice.\n ///\n /// **Why is this bad?** Just readability \u2013 `if let` nests less than a `match`.\n ///\n@@ -49,7 +49,7 @@ declare_lint! {\n      recommends `if let` instead\"\n }\n \n-/// **What it does:** This lint checks for matches where all arms match a reference, suggesting to remove the reference and deref the matched expression instead. It also checks for `if let &foo = bar` blocks. It is `Warn` by default.\n+/// **What it does:** This lint checks for matches where all arms match a reference, suggesting to remove the reference and deref the matched expression instead. It also checks for `if let &foo = bar` blocks.\n ///\n /// **Why is this bad?** It just makes the code less readable. That reference destructuring adds nothing to the code.\n ///\n@@ -70,7 +70,7 @@ declare_lint! {\n      dereferenced instead\"\n }\n \n-/// **What it does:** This lint checks for matches where match expression is a `bool`. It suggests to replace the expression with an `if...else` block. It is `Warn` by default.\n+/// **What it does:** This lint checks for matches where match expression is a `bool`. It suggests to replace the expression with an `if...else` block.\n ///\n /// **Why is this bad?** It makes the code less readable.\n ///\n@@ -90,7 +90,7 @@ declare_lint! {\n     \"a match on boolean expression; recommends `if..else` block instead\"\n }\n \n-/// **What it does:** This lint checks for overlapping match arms. It is `Warn` by default.\n+/// **What it does:** This lint checks for overlapping match arms.\n ///\n /// **Why is this bad?** It is likely to be an error and if not, makes the code less obvious.\n ///"}, {"sha": "40d975545e9f609a48cd031486288e8a7601f3ba", "filename": "src/methods.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -18,7 +18,7 @@ use rustc::middle::cstore::CrateStore;\n #[derive(Clone)]\n pub struct MethodsPass;\n \n-/// **What it does:** This lint checks for `.unwrap()` calls on `Option`s. It is `Allow` by default.\n+/// **What it does:** This lint checks for `.unwrap()` calls on `Option`s.\n ///\n /// **Why is this bad?** Usually it is better to handle the `None` case, or to at least call `.expect(_)` with a more helpful message. Still, for a lot of quick-and-dirty code, `unwrap` is a good choice, which is why this lint is `Allow` by default.\n ///\n@@ -30,7 +30,7 @@ declare_lint! {\n     \"using `Option.unwrap()`, which should at least get a better message using `expect()`\"\n }\n \n-/// **What it does:** This lint checks for `.unwrap()` calls on `Result`s. It is `Allow` by default.\n+/// **What it does:** This lint checks for `.unwrap()` calls on `Result`s.\n ///\n /// **Why is this bad?** `result.unwrap()` will let the thread panic on `Err` values. Normally, you want to implement more sophisticated error handling, and propagate errors upwards with `try!`.\n ///\n@@ -44,7 +44,7 @@ declare_lint! {\n     \"using `Result.unwrap()`, which might be better handled\"\n }\n \n-/// **What it does:** This lint checks for `.to_string()` method calls on values of type `&str`. It is `Warn` by default.\n+/// **What it does:** This lint checks for `.to_string()` method calls on values of type `&str`.\n ///\n /// **Why is this bad?** This uses the whole formatting machinery just to clone a string. Using `.to_owned()` is lighter on resources. You can also consider using a [`Cow<'a, str>`](http://doc.rust-lang.org/std/borrow/enum.Cow.html) instead in some cases.\n ///\n@@ -56,7 +56,7 @@ declare_lint! {\n     \"using `to_string()` on a str, which should be `to_owned()`\"\n }\n \n-/// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`. It is `Warn` by default.\n+/// **What it does:** This lint checks for `.to_string()` method calls on values of type `String`.\n ///\n /// **Why is this bad?** This is an non-efficient way to clone a `String`, `.clone()` should be used\n /// instead. `String` implements `ToString` mostly for generics.\n@@ -69,7 +69,7 @@ declare_lint! {\n     \"calling `String::to_string` which is inefficient\"\n }\n \n-/// **What it does:** This lint checks for methods that should live in a trait implementation of a `std` trait (see [llogiq's blog post](http://llogiq.github.io/2015/07/30/traits.html) for further information) instead of an inherent implementation. It is `Warn` by default.\n+/// **What it does:** This lint checks for methods that should live in a trait implementation of a `std` trait (see [llogiq's blog post](http://llogiq.github.io/2015/07/30/traits.html) for further information) instead of an inherent implementation.\n ///\n /// **Why is this bad?** Implementing the traits improve ergonomics for users of the code, often with very little cost. Also people seeing a `mul(..)` method may expect `*` to work equally, so you should have good reason to disappoint them.\n ///\n@@ -87,7 +87,7 @@ declare_lint! {\n     \"defining a method that should be implementing a std trait\"\n }\n \n-/// **What it does:** This lint checks for methods with certain name prefixes and `Warn`s (by default) if the prefix doesn't match how self is taken. The actual rules are:\n+/// **What it does:** This lint checks for methods with certain name prefixes and which doesn't match how self is taken. The actual rules are:\n ///\n /// |Prefix |`self` taken        |\n /// |-------|--------------------|\n@@ -97,7 +97,7 @@ declare_lint! {\n /// |`is_`  |`&self` or none     |\n /// |`to_`  |`&self`             |\n ///\n-/// **Why is this bad?** Consistency breeds readability. If you follow the conventions, your users won't be surprised that they e.g. need to supply a mutable reference to a `as_`.. function.\n+/// **Why is this bad?** Consistency breeds readability. If you follow the conventions, your users won't be surprised that they e.g. need to supply a mutable reference to a `as_..` function.\n ///\n /// **Known problems:** None\n ///\n@@ -114,7 +114,7 @@ declare_lint! {\n      `self` with the wrong convention\"\n }\n \n-/// **What it does:** This is the same as [`wrong_self_convention`](#wrong_self_convention), but for public items. This lint is `Allow` by default.\n+/// **What it does:** This is the same as [`wrong_self_convention`](#wrong_self_convention), but for public items.\n ///\n /// **Why is this bad?** See [`wrong_self_convention`](#wrong_self_convention).\n ///\n@@ -132,7 +132,7 @@ declare_lint! {\n      `self` with the wrong convention\"\n }\n \n-/// **What it does:** This lint `Warn`s on using `ok().expect(..)`.\n+/// **What it does:** This lint checks for usage of `ok().expect(..)`.\n ///\n /// **Why is this bad?** Because you usually call `expect()` on the `Result` directly to get a good error message.\n ///\n@@ -145,7 +145,7 @@ declare_lint! {\n      calling `expect` directly on the Result\"\n }\n \n-/// **What it does:** This lint `Warn`s on `_.map(_).unwrap_or(_)`.\n+/// **What it does:** This lint checks for usage of `_.map(_).unwrap_or(_)`.\n ///\n /// **Why is this bad?** Readability, this can be written more concisely as `_.map_or(_, _)`.\n ///\n@@ -234,7 +234,7 @@ declare_lint! {\n     \"using any `*or` method when the `*or_else` would do\"\n }\n \n-/// **What it does:** This lint `Warn`s on using `.extend(s)` on a `vec` to extend the vec by a slice.\n+/// **What it does:** This lint checks for usage of `.extend(s)` on a `Vec` to extend the vector by a slice.\n ///\n /// **Why is this bad?** Since Rust 1.6, the `extend_from_slice(_)` method is stable and at least for now faster.\n ///"}, {"sha": "57ec9d9173436d3909877aaeee20c73c489200d2", "filename": "src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -8,7 +8,7 @@ use consts::{Constant, constant_simple};\n use utils::{match_def_path, span_lint};\n use self::MinMax::{Min, Max};\n \n-/// **What it does:** This lint checks for expressions where `std::cmp::min` and `max` are used to clamp values, but switched so that the result is constant. It is `Warn` by default.\n+/// **What it does:** This lint checks for expressions where `std::cmp::min` and `max` are used to clamp values, but switched so that the result is constant.\n ///\n /// **Why is this bad?** This is in all probability not the intended outcome. At the least it hurts readability of the code.\n ///"}, {"sha": "c0aed78225a6df415196dc6231d5eb0ecb92a154", "filename": "src/misc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -13,7 +13,7 @@ use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use utils::{get_item_name, match_path, snippet, get_parent_expr, span_lint};\n use utils::{span_help_and_lint, walk_ptrs_ty, is_integer_literal, implements_trait};\n \n-/// **What it does:** This lint checks for function arguments and let bindings denoted as `ref`. It is `Warn` by default.\n+/// **What it does:** This lint checks for function arguments and let bindings denoted as `ref`.\n ///\n /// **Why is this bad?** The `ref` declaration makes the function take an owned value, but turns the argument into a reference (which means that the value is destroyed when exiting the function). This adds not much value: either take a reference type, or take an owned value and create references in the body.\n ///\n@@ -78,7 +78,7 @@ impl LateLintPass for TopLevelRefPass {\n     }\n }\n \n-/// **What it does:** This lint checks for comparisons to NAN. It is `Deny` by default.\n+/// **What it does:** This lint checks for comparisons to NAN.\n ///\n /// **Why is this bad?** NAN does not compare meaningfully to anything \u2013 not even itself \u2013 so those comparisons are simply wrong.\n ///\n@@ -123,7 +123,7 @@ fn check_nan(cx: &LateContext, path: &Path, span: Span) {\n     });\n }\n \n-/// **What it does:** This lint checks for (in-)equality comparisons on floating-point values (apart from zero), except in functions called `*eq*` (which probably implement equality for a type involving floats). It is `Warn` by default.\n+/// **What it does:** This lint checks for (in-)equality comparisons on floating-point values (apart from zero), except in functions called `*eq*` (which probably implement equality for a type involving floats).\n ///\n /// **Why is this bad?** Floating point calculations are usually imprecise, so asking if two values are *exactly* equal is asking for trouble. For a good guide on what to do, see [the floating point guide](http://www.floating-point-gui.de/errors/comparison).\n ///\n@@ -189,7 +189,7 @@ fn is_float(cx: &LateContext, expr: &Expr) -> bool {\n     }\n }\n \n-/// **What it does:** This lint checks for conversions to owned values just for the sake of a comparison. It is `Warn` by default.\n+/// **What it does:** This lint checks for conversions to owned values just for the sake of a comparison.\n ///\n /// **Why is this bad?** The comparison can operate on a reference, so creating an owned value effectively throws it away directly afterwards, which is needlessly consuming code and heap space.\n ///\n@@ -283,7 +283,7 @@ fn is_str_arg(cx: &LateContext, args: &[P<Expr>]) -> bool {\n     }\n }\n \n-/// **What it does:** This lint checks for getting the remainder of a division by one. It is `Warn` by default.\n+/// **What it does:** This lint checks for getting the remainder of a division by one.\n ///\n /// **Why is this bad?** The result can only ever be zero. No one will write such code deliberately, unless trying to win an Underhanded Rust Contest. Even for that contest, it's probably a bad idea. Use something more underhanded.\n ///\n@@ -313,7 +313,7 @@ impl LateLintPass for ModuloOne {\n     }\n }\n \n-/// **What it does:** This lint checks for patterns in the form `name @ _`. It is `Warn` by default.\n+/// **What it does:** This lint checks for patterns in the form `name @ _`.\n ///\n /// **Why is this bad?** It's almost always more readable to just use direct bindings.\n ///"}, {"sha": "59a0102aacf08661244c4fa6f269e478638cf2b0", "filename": "src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -8,7 +8,7 @@ use syntax::visit::FnKind;\n \n use utils::{span_lint, span_help_and_lint};\n \n-/// **What it does:** This lint `Warn`s on struct field patterns bound to wildcards.\n+/// **What it does:** This lint checks for structure field patterns bound to wildcards.\n ///\n /// **Why is this bad?** Using `..` instead is shorter and leaves the focus on the fields that are actually bound.\n ///\n@@ -20,7 +20,7 @@ declare_lint! {\n     \"Struct fields are bound to a wildcard instead of using `..`\"\n }\n \n-/// **What it does:** This lint `Warn`s on function arguments having the similar names differing by an underscore\n+/// **What it does:** This lint checks for function arguments having the similar names differing by an underscore\n ///\n /// **Why is this bad?** It affects code readability\n ///"}, {"sha": "1759a89242b2e29bd2714e953f6595175c1764b1", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use rustc::middle::ty::{TypeAndMut, TyRef};\n \n use utils::{in_external_macro, span_lint};\n \n-/// **What it does:** This lint checks for instances of `mut mut` references. It is `Warn` by default.\n+/// **What it does:** This lint checks for instances of `mut mut` references.\n ///\n /// **Why is this bad?** Multiple `mut`s don't add anything meaningful to the source.\n ///"}, {"sha": "35904533719d676ac1214037085af7ba2502a7fd", "filename": "src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use utils::span_lint;\n use rustc::middle::ty::{TypeAndMut, TypeVariants, MethodCall, TyS};\n use syntax::ptr::P;\n \n-/// **What it does:** This lint detects giving a mutable reference to a function that only requires an immutable reference. It is `Warn` by default.\n+/// **What it does:** This lint detects giving a mutable reference to a function that only requires an immutable reference.\n ///\n /// **Why is this bad?** The immutable reference rules out all other references to the value. Also the code misleads about the intent of the call site.\n ///"}, {"sha": "cf1c347750c89f6e62f60b15ebe23b4471e6d0b2", "filename": "src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmutex_atomic.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -11,7 +11,7 @@ use rustc::middle::subst::ParamSpace;\n \n use utils::{span_lint, MUTEX_PATH, match_type};\n \n-/// **What it does:** It `Warn`s on usages of `Mutex<X>` where an atomic will do\n+/// **What it does:** This lint checks for usages of `Mutex<X>` where an atomic will do.\n ///\n /// **Why is this bad?** Using a Mutex just to make access to a plain bool or reference sequential is shooting flies with cannons. `std::atomic::AtomicBool` and `std::atomic::AtomicPtr` are leaner and faster.\n ///\n@@ -24,7 +24,7 @@ declare_lint! {\n     \"using a Mutex where an atomic value could be used instead\"\n }\n \n-/// **What it does:** It `Warn`s on usages of `Mutex<X>` where `X` is an integral type.\n+/// **What it does:** This lint checks for usages of `Mutex<X>` where `X` is an integral type.\n ///\n /// **Why is this bad?** Using a Mutex just to make access to a plain integer sequential is shooting flies with cannons. `std::atomic::usize` is leaner and faster.\n ///"}, {"sha": "52b3108f6fae6bc05da40934d46abe8d5eb65e59", "filename": "src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -9,7 +9,7 @@ use syntax::ast::Lit_::*;\n \n use utils::{span_lint, snippet};\n \n-/// **What it does:** This lint checks for expressions of the form `if c { true } else { false }` (or vice versa) and suggest using the condition directly. It is `Warn` by default.\n+/// **What it does:** This lint checks for expressions of the form `if c { true } else { false }` (or vice versa) and suggest using the condition directly.\n ///\n /// **Why is this bad?** Redundant code.\n ///"}, {"sha": "646ebbbd0159d36c70c647de56670f050867b499", "filename": "src/needless_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_features.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -8,7 +8,7 @@ use rustc_front::hir::*;\n use utils::span_lint;\n use utils;\n \n-/// **What it does:** This lint `Warn`s on use of the `as_slice(..)` function, which is unstable.\n+/// **What it does:** This lint checks for usage of the `as_slice(..)` function, which is unstable.\n ///\n /// **Why is this bad?** Using this function doesn't make your code better, but it will preclude it from building with stable Rust.\n ///\n@@ -22,7 +22,7 @@ declare_lint! {\n see https://github.com/rust-lang/rust/issues/27729\"\n }\n \n-/// **What it does:** This lint `Warn`s on use of the `as_mut_slice(..)` function, which is unstable.\n+/// **What it does:** This lint checks for usage of the `as_mut_slice(..)` function, which is unstable.\n ///\n /// **Why is this bad?** Using this function doesn't make your code better, but it will preclude it from building with stable Rust.\n ///"}, {"sha": "d18930c8cccec08590cd5666c3bce335c2a8357c", "filename": "src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_update.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use rustc_front::hir::{Expr, ExprStruct};\n \n use utils::span_lint;\n \n-/// **What it does:** This lint `Warn`s on needlessly including a base struct on update when all fields are changed anyway.\n+/// **What it does:** This lint warns on needlessly including a base struct on update when all fields are changed anyway.\n ///\n /// **Why is this bad?** This will cost resources (because the base has to be somewhere), and make the code less readable.\n ///"}, {"sha": "e1067f27ab9d8d99b37f22e2b4fdcd62df40d905", "filename": "src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fno_effect.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -6,7 +6,7 @@ use rustc_front::hir::{Stmt, StmtSemi};\n use utils::in_macro;\n use utils::span_lint;\n \n-/// **What it does:** This lint `Warn`s on statements which have no effect.\n+/// **What it does:** This lint checks for statements which have no effect.\n ///\n /// **Why is this bad?** Similar to dead code, these statements are actually executed. However, as they have no effect, all they do is make the code less readable.\n ///"}, {"sha": "a5766604cec44ea757755677a3d8584843788353", "filename": "src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use utils::{walk_ptrs_ty_depth, match_type, span_lint, OPEN_OPTIONS_PATH};\n use syntax::codemap::{Span, Spanned};\n use syntax::ast::Lit_::LitBool;\n \n-/// **What it does:** This lint checks for duplicate open options as well as combinations that make no sense. It is `Warn` by default.\n+/// **What it does:** This lint checks for duplicate open options as well as combinations that make no sense.\n ///\n /// **Why is this bad?** In the best case, the code will be harder to read than necessary. I don't know the worst case.\n ///"}, {"sha": "5337942b4e0f726845fe274ab08612042053ea7d", "filename": "src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpanic.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,14 +4,14 @@ use syntax::ast::Lit_::LitStr;\n \n use utils::{span_lint, in_external_macro, match_path, BEGIN_UNWIND};\n \n-/// **What it does:** Warn about missing parameters in `panic!`.\n+/// **What it does:** This lint checks for missing parameters in `panic!`.\n ///\n /// **Known problems:** Should you want to use curly brackets in `panic!` without any parameter,\n /// this lint will warn.\n ///\n /// **Example:**\n /// ```\n-/// panic!(\"This panic! is probably missing a parameter there: {}\");\n+/// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n /// ```\n declare_lint! {\n     pub PANIC_PARAMS, Warn, \"missing parameters in `panic!`\""}, {"sha": "009a79b1673bd514e7ccb0af74afa9344e56fc99", "filename": "src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprecedence.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::*;\n \n use utils::{span_lint, snippet};\n \n-/// **What it does:** This lint checks for operations where precedence may be unclear and `Warn`s about them by default, suggesting to add parentheses. Currently it catches the following:\n+/// **What it does:** This lint checks for operations where precedence may be unclear and suggests to add parentheses. Currently it catches the following:\n /// * mixed usage of arithmetic and bit shifting/combining operators without parentheses\n /// * a \"negative\" numeric literal (which is really a unary `-` followed by a numeric literal) followed by a method call\n ///"}, {"sha": "d8f5fd488aa9cccc65c991cce99af6239619dbf5", "filename": "src/print.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprint.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -2,8 +2,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use utils::{IO_PRINT_PATH, is_expn_of, match_path, span_lint};\n \n-/// **What it does:** This lint warns whenever you print on *stdout*. This lint is `Allow` by\n-/// default, the purpose is to catch debugging remnants.\n+/// **What it does:** This lint warns whenever you print on *stdout*. The purpose of this lint is to catch debugging remnants.\n ///\n /// **Why is this bad?** People often print on *stdout* while debugging an application and might\n /// forget to remove those prints afterward."}, {"sha": "707adcfeb07cd2f57b07ad2f7c9a225763457b06", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::ty;\n use utils::{span_lint, match_type};\n use utils::{STRING_PATH, VEC_PATH};\n \n-/// **What it does:** This lint checks for function arguments of type `&String` or `&Vec` unless the references are mutable. It is `Warn` by default.\n+/// **What it does:** This lint checks for function arguments of type `&String` or `&Vec` unless the references are mutable.\n ///\n /// **Why is this bad?** Requiring the argument to be of the specific size makes the function less useful for no benefit; slices in the form of `&[T]` or `&str` usually suffice and can be obtained from other types, too.\n ///"}, {"sha": "895bd180168735404790a82609bb2cb0095619f2", "filename": "src/ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Franges.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -3,7 +3,7 @@ use rustc_front::hir::*;\n use syntax::codemap::Spanned;\n use utils::{is_integer_literal, match_type, snippet};\n \n-/// **What it does:** This lint checks for iterating over ranges with a `.step_by(0)`, which never terminates. It is `Warn` by default.\n+/// **What it does:** This lint checks for iterating over ranges with a `.step_by(0)`, which never terminates.\n ///\n /// **Why is this bad?** This very much looks like an oversight, since with `loop { .. }` there is an obvious better way to endlessly loop.\n ///\n@@ -14,7 +14,7 @@ declare_lint! {\n     pub RANGE_STEP_BY_ZERO, Warn,\n     \"using Range::step_by(0), which produces an infinite iterator\"\n }\n-/// **What it does:** This lint checks for zipping a collection with the range of `0.._.len()`. It is `Warn` by default.\n+/// **What it does:** This lint checks for zipping a collection with the range of `0.._.len()`.\n ///\n /// **Why is this bad?** The code is better expressed with `.enumerate()`.\n ///"}, {"sha": "81193793a2360c307990576788656c90b09752ec", "filename": "src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -10,7 +10,7 @@ use rustc::lint::*;\n \n use utils::{match_path, REGEX_NEW_PATH, span_lint};\n \n-/// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax. It is `deny` by default.\n+/// **What it does:** This lint checks `Regex::new(_)` invocations for correct regex syntax.\n ///\n /// **Why is this bad?** This will lead to a runtime panic.\n ///"}, {"sha": "3d830e9e372d83715e9e29f530e254039c6d7352", "filename": "src/returns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -6,7 +6,7 @@ use syntax::visit::FnKind;\n \n use utils::{span_lint, span_lint_and_then, snippet_opt, match_path_ast, in_external_macro};\n \n-/// **What it does:** This lint checks for return statements at the end of a block. It is `Warn` by default.\n+/// **What it does:** This lint checks for return statements at the end of a block.\n ///\n /// **Why is this bad?** Removing the `return` and semicolon will make the code more rusty.\n ///\n@@ -18,7 +18,7 @@ declare_lint! {\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n-/// **What it does:** This lint checks for `let`-bindings, which are subsequently returned. It is `Warn` by default.\n+/// **What it does:** This lint checks for `let`-bindings, which are subsequently returned.\n ///\n /// **Why is this bad?** It is just extraneous code. Remove it to make your code more rusty.\n ///"}, {"sha": "ff9ea47f065f19b77c37738990b9b1bbc96558d5", "filename": "src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -9,7 +9,7 @@ use rustc::middle::def::Def;\n \n use utils::{is_from_for_desugar, in_external_macro, snippet, span_lint, span_note_and_lint, DiagnosticWrapper};\n \n-/// **What it does:** This lint checks for bindings that shadow other bindings already in scope, while just changing reference level or mutability. It is `Allow` by default.\n+/// **What it does:** This lint checks for bindings that shadow other bindings already in scope, while just changing reference level or mutability.\n ///\n /// **Why is this bad?** Not much, in fact it's a very common pattern in Rust code. Still, some may opt to avoid it in their code base, they can set this lint to `Warn`.\n ///\n@@ -21,7 +21,7 @@ declare_lint! {\n     \"rebinding a name to itself, e.g. `let mut x = &mut x`\"\n }\n \n-/// **What it does:** This lint checks for bindings that shadow other bindings already in scope, while reusing the original value. It is `Allow` by default.\n+/// **What it does:** This lint checks for bindings that shadow other bindings already in scope, while reusing the original value.\n ///\n /// **Why is this bad?** Not too much, in fact it's a common pattern in Rust code. Still, some argue that name shadowing like this hurts readability, because a value may be bound to different things depending on position in the code.\n ///\n@@ -34,7 +34,7 @@ declare_lint! {\n     `let x = x + 1`\"\n }\n \n-/// **What it does:** This lint checks for bindings that shadow other bindings already in scope, either without a initialization or with one that does not even use the original value. This lint is `Warn` by default.\n+/// **What it does:** This lint checks for bindings that shadow other bindings already in scope, either without a initialization or with one that does not even use the original value.\n ///\n /// **Why is this bad?** Name shadowing can hurt readability, especially in large code bases, because it is easy to lose track of the active binding at any place in the code. This can be alleviated by either giving more specific names to bindings ore introducing more scopes to contain the bindings.\n ///"}, {"sha": "f1a1341460e68d4fd57d10aa367cb71dafb6e93e", "filename": "src/strings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -10,7 +10,7 @@ use syntax::codemap::Spanned;\n use utils::{is_exp_equal, match_type, span_lint, walk_ptrs_ty, get_parent_expr};\n use utils::STRING_PATH;\n \n-/// **What it does:** This lint matches code of the form `x = x + y` (without `let`!). It is `Allow` by default.\n+/// **What it does:** This lint matches code of the form `x = x + y` (without `let`!).\n ///\n /// **Why is this bad?** Because this expression needs another copy as opposed to `x.push_str(y)` (in practice LLVM will usually elide it, though). Despite [llogiq](https://github.com/llogiq)'s reservations, this lint also is `allow` by default, as some people opine that it's more readable.\n ///\n@@ -28,7 +28,7 @@ declare_lint! {\n     \"using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\"\n }\n \n-/// **What it does:** The `string_add` lint matches all instances of `x + _` where `x` is of type `String`, but only if [`string_add_assign`](#string_add_assign) does *not* match.  It is `Allow` by default.\n+/// **What it does:** The `string_add` lint matches all instances of `x + _` where `x` is of type `String`, but only if [`string_add_assign`](#string_add_assign) does *not* match.\n ///\n /// **Why is this bad?** It's not bad in and of itself. However, this particular `Add` implementation is asymmetric (the other operand need not be `String`, but `x` does), while addition as mathematically defined is symmetric, also the `String::push_str(_)` function is a perfectly good replacement. Therefore some dislike it and wish not to have it in their code.\n ///\n@@ -49,7 +49,7 @@ declare_lint! {\n }\n \n /// **What it does:** This lint matches the `as_bytes` method called on string\n-/// literals that contain only ascii characters. It is `Warn` by default.\n+/// literals that contain only ascii characters.\n ///\n /// **Why is this bad?** Byte string literals (e.g. `b\"foo\"`) can be used instead. They are shorter but less discoverable than `as_bytes()`.\n ///"}, {"sha": "417ec540856c4bf58dc91b41b7c6d3c2f8a85185", "filename": "src/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftemporary_assignment.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,9 +4,9 @@ use rustc_front::hir::{Expr, ExprAssign, ExprField, ExprStruct, ExprTup, ExprTup\n use utils::is_adjusted;\n use utils::span_lint;\n \n-/// **What it does:** This lint `Warn`s on creating a struct or tuple just to assign a value in it.\n+/// **What it does:** This lint checks for construction of a structure or tuple just to assign a value in it.\n ///\n-/// **Why is this bad?** Readability. If the struct is only created to be updated, why not write the struct you want in the first place?\n+/// **Why is this bad?** Readability. If the structure is only created to be updated, why not write the structure you want in the first place?\n ///\n /// **Known problems:** None.\n ///"}, {"sha": "0dd5b60e77adc161d8f6643c2eb4101122402693", "filename": "src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftransmute.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc_front::hir::*;\n use utils;\n \n-/// **What it does:** This lint checks for transmutes to the original type of the object. It is `Warn` by default.\n+/// **What it does:** This lint checks for transmutes to the original type of the object.\n ///\n /// **Why is this bad?** Readability. The code tricks people into thinking that the original value was of some other type.\n ///"}, {"sha": "498a084984f750d2b54ee8ea196fff128415bd93", "filename": "src/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -15,7 +15,7 @@ use utils::*;\n #[allow(missing_copy_implementations)]\n pub struct TypePass;\n \n-/// **What it does:** This lint checks for use of `Box<Vec<_>>` anywhere in the code. It is `Warn` by default.\n+/// **What it does:** This lint checks for use of `Box<Vec<_>>` anywhere in the code.\n ///\n /// **Why is this bad?** `Vec` already keeps its contents in a separate area on the heap. So if you `Box` it, you just add another level of indirection without any benefit whatsoever.\n ///\n@@ -27,7 +27,7 @@ declare_lint! {\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n-/// **What it does:** This lint checks for usage of any `LinkedList`, suggesting to use a `Vec` or a `VecDeque` (formerly called `RingBuf`). It is `Warn` by default.\n+/// **What it does:** This lint checks for usage of any `LinkedList`, suggesting to use a `Vec` or a `VecDeque` (formerly called `RingBuf`).\n ///\n /// **Why is this bad?** Gankro says:\n ///\n@@ -78,7 +78,7 @@ impl LateLintPass for TypePass {\n #[allow(missing_copy_implementations)]\n pub struct LetPass;\n \n-/// **What it does:** This lint checks for binding a unit value. It is `Warn` by default.\n+/// **What it does:** This lint checks for binding a unit value.\n ///\n /// **Why is this bad?** A unit value cannot usefully be used anywhere. So binding one is kind of pointless.\n ///\n@@ -121,7 +121,7 @@ impl LateLintPass for LetPass {\n     }\n }\n \n-/// **What it does:** This lint checks for comparisons to unit. It is `Warn` by default.\n+/// **What it does:** This lint checks for comparisons to unit.\n ///\n /// **Why is this bad?** Unit is always equal to itself, and thus is just a clumsily written constant. Mostly this happens when someone accidentally adds semicolons at the end of the operands.\n ///\n@@ -405,7 +405,7 @@ impl LateLintPass for CastPass {\n     }\n }\n \n-/// **What it does:** This lint checks for types used in structs, parameters and `let` declarations above a certain complexity threshold. It is `Warn` by default.\n+/// **What it does:** This lint checks for types used in structs, parameters and `let` declarations above a certain complexity threshold.\n ///\n /// **Why is this bad?** Too complex types make the code less readable. Consider using a `type` definition to simplify them.\n ///\n@@ -539,7 +539,7 @@ impl<'v> Visitor<'v> for TypeComplexityVisitor {\n     }\n }\n \n-/// **What it does:** This lint points out expressions where a character literal is casted to u8 and suggests using a byte literal instead.\n+/// **What it does:** This lint points out expressions where a character literal is casted to `u8` and suggests using a byte literal instead.\n ///\n /// **Why is this bad?** In general, casting values to smaller types is error-prone and should be avoided where possible. In the particular case of converting a character literal to u8, it is easy to avoid by just using a byte literal instead. As an added bonus, `b'a'` is even slightly shorter than `'a' as u8`.\n ///"}, {"sha": "63ffe219d9bf461773f9dbbea483c90343e3ca0e", "filename": "src/unicode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -8,7 +8,7 @@ use unicode_normalization::UnicodeNormalization;\n \n use utils::{snippet, span_help_and_lint};\n \n-/// **What it does:** This lint checks for the unicode zero-width space in the code. It is `Warn` by default.\n+/// **What it does:** This lint checks for the unicode zero-width space in the code.\n ///\n /// **Why is this bad?** Having an invisible character in the code makes for all sorts of April fools, but otherwise is very much frowned upon.\n ///\n@@ -20,7 +20,7 @@ declare_lint! {\n     \"using a zero-width space in a string literal, which is confusing\"\n }\n \n-/// **What it does:** This lint checks for non-ascii characters in string literals. It is `Allow` by default.\n+/// **What it does:** This lint checks for non-ascii characters in string literals.\n ///\n /// **Why is this bad?** Yeah, we know, the 90's called and wanted their charset back. Even so, there still are editors and other programs out there that don't work well with unicode. So if the code is meant to be used internationally, on multiple operating systems, or has other portability requirements, activating this lint could be useful.\n ///\n@@ -33,7 +33,7 @@ declare_lint! {\n      using the \\\\u escape instead\"\n }\n \n-/// **What it does:** This lint checks for string literals that contain unicode in a form that is not equal to its [NFC-recomposition](http://www.unicode.org/reports/tr15/#Norm_Forms). This lint is `Allow` by default.\n+/// **What it does:** This lint checks for string literals that contain unicode in a form that is not equal to its [NFC-recomposition](http://www.unicode.org/reports/tr15/#Norm_Forms).\n ///\n /// **Why is this bad?** If such a string is compared to another, the results may be surprising.\n ///"}, {"sha": "fe3c1f901991ea19f225d8728ce574be0e336616", "filename": "src/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvec.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -7,7 +7,6 @@ use utils::{BOX_NEW_PATH, VEC_FROM_ELEM_PATH};\n use utils::{is_expn_of, match_path, snippet, span_lint_and_then};\n \n /// **What it does:** This lint warns about using `&vec![..]` when using `&[..]` would be possible.\n-/// It is `Warn` by default.\n ///\n /// **Why is this bad?** This is less efficient.\n ///"}, {"sha": "1576d699a4ab83bd5ba5ff7d8c217a90d40f2a17", "filename": "src/zero_div_zero.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=83a82a1d86b0a5b9fe39ca7b33e7bca2687a733b", "patch": "@@ -4,12 +4,12 @@ use rustc_front::hir::*;\n use utils::span_help_and_lint;\n use consts::{Constant, constant_simple, FloatWidth};\n \n-/// ZeroDivZeroPass is a pass that checks for a binary expression that consists\n-/// of 0.0/0.0, which is always NaN. It is more clear to replace instances of\n-/// 0.0/0.0 with std::f32::NaN or std::f64::NaN, depending on the precision.\n+/// `ZeroDivZeroPass` is a pass that checks for a binary expression that consists\n+/// `of 0.0/0.0`, which is always NaN. It is more clear to replace instances of\n+/// `0.0/0.0` with `std::f32::NaN` or `std::f64::NaN`, depending on the precision.\n pub struct ZeroDivZeroPass;\n \n-/// **What it does:** This lint checks for `0.0 / 0.0`. It is `Warn` by default.\n+/// **What it does:** This lint checks for `0.0 / 0.0`.\n ///\n /// **Why is this bad?** It's less readable than `std::f32::NAN` or `std::f64::NAN`\n ///"}]}