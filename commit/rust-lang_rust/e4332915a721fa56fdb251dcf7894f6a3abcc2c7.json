{"sha": "e4332915a721fa56fdb251dcf7894f6a3abcc2c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MzMyOTE1YTcyMWZhNTZmZGIyNTFkY2Y3ODk0ZjZhM2FiY2MyYzc=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2020-10-10T06:49:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-10T06:49:43Z"}, "message": "Draft a CONTRIBUTING.md (#33)", "tree": {"sha": "a9f9e32affc14bf3739f3164efbc72339e3965ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f9e32affc14bf3739f3164efbc72339e3965ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4332915a721fa56fdb251dcf7894f6a3abcc2c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfgVmHCRBK7hj4Ov3rIwAAdHIIAHfvbyvdZ8GRaSMdzwNRaDc4\n9iRcIKvgLFG/WPSCcwSoQjVj0GTwSdtRaZD/gfgvTnUqBR1hMmrDBTHQSKJxYOD8\ndg75wEVDwzCGc/Li2HMOIwyXKh460Myrpc7ij4sBh3ufSyViz5W4WwHd3nG03PDH\n8TAHkfeQZIN3ZUuA79eYg+xcOZduH6TAxhaSViaayldcQHsBjuRsNygYMALvhGbw\nzrWPIIwyZKmw0sBBzb/7wUTmveMlklmHXimCTu0lD2b4QxHxYnR2N6yClMliKckO\nmBBY1IZTtsA59rd7/8RXcIVp/bvHsFElZp5Ue5YN5BVYLJZEmwUbxpkf8xRt6gE=\n=7GUb\n-----END PGP SIGNATURE-----\n", "payload": "tree a9f9e32affc14bf3739f3164efbc72339e3965ee\nparent 48729010ec4a4d9e386c7edf3f7f11d9ec72b763\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1602312583 -0700\ncommitter GitHub <noreply@github.com> 1602312583 -0700\n\nDraft a CONTRIBUTING.md (#33)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4332915a721fa56fdb251dcf7894f6a3abcc2c7", "html_url": "https://github.com/rust-lang/rust/commit/e4332915a721fa56fdb251dcf7894f6a3abcc2c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4332915a721fa56fdb251dcf7894f6a3abcc2c7/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48729010ec4a4d9e386c7edf3f7f11d9ec72b763", "url": "https://api.github.com/repos/rust-lang/rust/commits/48729010ec4a4d9e386c7edf3f7f11d9ec72b763", "html_url": "https://github.com/rust-lang/rust/commit/48729010ec4a4d9e386c7edf3f7f11d9ec72b763"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "f9ba12d3a1b3adb53ddd6f321837a60f5f7860e7", "filename": "CONTRIBUTING.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e4332915a721fa56fdb251dcf7894f6a3abcc2c7/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4332915a721fa56fdb251dcf7894f6a3abcc2c7/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=e4332915a721fa56fdb251dcf7894f6a3abcc2c7", "patch": "@@ -0,0 +1,32 @@\n+# Contributing to `std::simd`\n+\n+Simple version:\n+1. Fork it and `git clone` it\n+2. Create your feature branch: `git checkout -b my-branch`\n+3. Write your changes.\n+4. Test it: `cargo test`. Remember to enable whatever SIMD features you intend to test by setting `RUSTFLAGS`.\n+5. Commit your changes: `git commit add ./path/to/changes && git commit -m 'Fix some bug'`\n+6. Push the branch: `git push --set-upstream origin my-branch`\n+7. Submit a pull request!\n+\n+## Taking on an Issue\n+\n+SIMD can be quite complex, and even a \"simple\" issue can be huge. If an issue is organized like a tracking issue, with an itemized list of items that don't necessarily have to be done in a specific order, please take the issue one item at a time. This will help by letting work proceed apace on the rest of the issue. If it's a (relatively) small issue, feel free to announce your intention to solve it on the issue tracker and take it in one go!\n+\n+## CI\n+\n+We currently have 2 CI matrices through Travis CI and GitHub Actions that will automatically build and test your change in order to verify that `std::simd`'s portable API is, in fact, portable. If your change builds locally, but does not build on either, this is likely due to a platform-specific concern that your code has not addressed. Please consult the build logs and address the error, or ask for help if you need it.\n+\n+## Beyond stdsimd\n+\n+A large amount of the core SIMD implementation is found in the rustc_codegen_* crates in the [main rustc repo](https://github.com/rust-lang/rust). In addition, actual platform-specific functions are implemented in [stdarch]. Not all changes to `std::simd` require interacting with either of these, but if you're wondering where something is and it doesn't seem to be in this repository, those might be where to start looking.\n+\n+## Questions? Concerns? Need Help?\n+\n+Please feel free to ask in the [#project-portable-simd][zulip-portable-simd] stream on the [rust-lang Zulip][zulip] for help with making changes to `std::simd`!\n+If your changes include directly modifying the compiler, it might also be useful to ask in [#t-compiler/help][zulip-compiler-help].\n+\n+[zulip-portable-simd]: https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd\n+[zulip-compiler-help]: https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp\n+[zulip]: https://rust-lang.zulipchat.com\n+[stdarch]: https://github.com/rust-lang/stdarch"}]}