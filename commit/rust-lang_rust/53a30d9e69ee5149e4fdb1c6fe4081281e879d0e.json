{"sha": "53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYTMwZDllNjllZTUxNDllNGZkYjFjNmZlNDA4MTI4MWU4NzlkMGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-26T12:58:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-26T12:58:54Z"}, "message": "Merge #1919\n\n1919: move diff to ra_syntax r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "acb80dc5a8a91853f49ddf632a461a66df180ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb80dc5a8a91853f49ddf632a461a66df180ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdjLYOCRBK7hj4Ov3rIwAAdHIIAGmKTvcW0XG/sf4Zq2ARdL21\nxfvE0BTZf55JDCQs0Ay8dyJLiy6wcTYv5l6gnW89m/j7zHt9uILjldZMy8/B/4s7\njHY/OXujfprQF8dq4i3yxwxH+WvYQJlARBm1YcWywzNv0jrUneBYjWvNU826cVc1\ntxJntcuH6ErehR9WwtppYb12gleKxhtap5fH62gAQTT9jEaddtuCuEys6PMCYTYq\nv0Bh1/uf/vfdWQWfBf9AZaYnasYScR/ZEFzVP/uxGn2En78Xzj4QVkPDh0fyOSEk\n5iaa3hBk9z11gjroH6b8xQ6L9Oopqjr2puP2mj5C+c7mY88hV9PW04RGatcvm/Q=\n=zc4F\n-----END PGP SIGNATURE-----\n", "payload": "tree acb80dc5a8a91853f49ddf632a461a66df180ad4\nparent 3882231f3231db03144107f72c6052f773fe2375\nparent 1a4b42400544a652a053a34263967689d47f554b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1569502734 +0000\ncommitter GitHub <noreply@github.com> 1569502734 +0000\n\nMerge #1919\n\n1919: move diff to ra_syntax r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "html_url": "https://github.com/rust-lang/rust/commit/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3882231f3231db03144107f72c6052f773fe2375", "url": "https://api.github.com/repos/rust-lang/rust/commits/3882231f3231db03144107f72c6052f773fe2375", "html_url": "https://github.com/rust-lang/rust/commit/3882231f3231db03144107f72c6052f773fe2375"}, {"sha": "1a4b42400544a652a053a34263967689d47f554b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4b42400544a652a053a34263967689d47f554b", "html_url": "https://github.com/rust-lang/rust/commit/1a4b42400544a652a053a34263967689d47f554b"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "2a685f26ed04d8d8adef742e4ea4c40cf3567c24", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "patch": "@@ -7,7 +7,7 @@ use ra_fmt::leading_indent;\n use ra_syntax::{\n     algo,\n     ast::{self, TypeBoundsOwner},\n-    AstNode, Direction, InsertPosition, NodeOrToken, SyntaxElement,\n+    AstNode, Direction, InsertPosition, SyntaxElement,\n     SyntaxKind::*,\n     T,\n };\n@@ -27,29 +27,8 @@ impl<N: AstNode> AstEditor<N> {\n     }\n \n     pub fn into_text_edit(self, builder: &mut TextEditBuilder) {\n-        // FIXME: this is both horrible inefficient and gives larger than\n-        // necessary diff. I bet there's a cool algorithm to diff trees properly.\n-        go(builder, self.original_ast.syntax().clone().into(), self.ast().syntax().clone().into());\n-\n-        fn go(buf: &mut TextEditBuilder, lhs: SyntaxElement, rhs: SyntaxElement) {\n-            if lhs.kind() == rhs.kind() && lhs.text_range().len() == rhs.text_range().len() {\n-                if match (&lhs, &rhs) {\n-                    (NodeOrToken::Node(lhs), NodeOrToken::Node(rhs)) => lhs.text() == rhs.text(),\n-                    (NodeOrToken::Token(lhs), NodeOrToken::Token(rhs)) => lhs.text() == rhs.text(),\n-                    _ => false,\n-                } {\n-                    return;\n-                }\n-            }\n-            if let (Some(lhs), Some(rhs)) = (lhs.as_node(), rhs.as_node()) {\n-                if lhs.children_with_tokens().count() == rhs.children_with_tokens().count() {\n-                    for (lhs, rhs) in lhs.children_with_tokens().zip(rhs.children_with_tokens()) {\n-                        go(buf, lhs, rhs)\n-                    }\n-                    return;\n-                }\n-            }\n-            buf.replace(lhs.text_range(), rhs.to_string())\n+        for (from, to) in algo::diff(&self.original_ast.syntax(), self.ast().syntax()) {\n+            builder.replace(from.text_range(), to.to_string())\n         }\n     }\n "}, {"sha": "46680a08f96aa8816c49cc2e91db639d28281767", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53a30d9e69ee5149e4fdb1c6fe4081281e879d0e/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=53a30d9e69ee5149e4fdb1c6fe4081281e879d0e", "patch": "@@ -63,6 +63,48 @@ pub enum InsertPosition<T> {\n     After(T),\n }\n \n+/// Finds minimal the diff, which, applied to `from`, will result in `to`.\n+///\n+/// Specifically, returns a map whose keys are descendants of `from` and values\n+/// are descendants of `to`, such that  `replace_descendants(from, map) == to`.\n+///\n+/// A trivial solution is a singletom map `{ from: to }`, but this function\n+/// tries to find a more fine-grained diff.\n+pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> FxHashMap<SyntaxElement, SyntaxElement> {\n+    let mut buf = FxHashMap::default();\n+    // FIXME: this is both horrible inefficient and gives larger than\n+    // necessary diff. I bet there's a cool algorithm to diff trees properly.\n+    go(&mut buf, from.clone().into(), to.clone().into());\n+    return buf;\n+\n+    fn go(\n+        buf: &mut FxHashMap<SyntaxElement, SyntaxElement>,\n+        lhs: SyntaxElement,\n+        rhs: SyntaxElement,\n+    ) {\n+        if lhs.kind() == rhs.kind() && lhs.text_range().len() == rhs.text_range().len() {\n+            if match (&lhs, &rhs) {\n+                (NodeOrToken::Node(lhs), NodeOrToken::Node(rhs)) => {\n+                    lhs.green() == rhs.green() || lhs.text() == rhs.text()\n+                }\n+                (NodeOrToken::Token(lhs), NodeOrToken::Token(rhs)) => lhs.text() == rhs.text(),\n+                _ => false,\n+            } {\n+                return;\n+            }\n+        }\n+        if let (Some(lhs), Some(rhs)) = (lhs.as_node(), rhs.as_node()) {\n+            if lhs.children_with_tokens().count() == rhs.children_with_tokens().count() {\n+                for (lhs, rhs) in lhs.children_with_tokens().zip(rhs.children_with_tokens()) {\n+                    go(buf, lhs, rhs)\n+                }\n+                return;\n+            }\n+        }\n+        buf.insert(lhs, rhs);\n+    }\n+}\n+\n /// Adds specified children (tokens or nodes) to the current node at the\n /// specific position.\n ///"}]}