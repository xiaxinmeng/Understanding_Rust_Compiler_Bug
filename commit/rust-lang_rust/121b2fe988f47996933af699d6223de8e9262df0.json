{"sha": "121b2fe988f47996933af699d6223de8e9262df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWIyZmU5ODhmNDc5OTY5MzNhZjY5OWQ2MjIzZGU4ZTkyNjJkZjA=", "commit": {"author": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2016-08-27T23:30:30Z"}, "committer": {"name": "Christopher Serr", "email": "christopher.serr@gmail.com", "date": "2016-08-27T23:40:14Z"}, "message": "Improve Demangling of Rust Symbols\n\nThis turns `..` into `::`, handles some more escapes and gets rid of\nunwanted underscores at the beginning of path elements.\n\n![Image of Diff](http://puu.sh/qQIN3.png)", "tree": {"sha": "0c060acdf915d46669b2a28c1a6725868c1bbf4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c060acdf915d46669b2a28c1a6725868c1bbf4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121b2fe988f47996933af699d6223de8e9262df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121b2fe988f47996933af699d6223de8e9262df0", "html_url": "https://github.com/rust-lang/rust/commit/121b2fe988f47996933af699d6223de8e9262df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121b2fe988f47996933af699d6223de8e9262df0/comments", "author": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CryZe", "id": 1451630, "node_id": "MDQ6VXNlcjE0NTE2MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1451630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryZe", "html_url": "https://github.com/CryZe", "followers_url": "https://api.github.com/users/CryZe/followers", "following_url": "https://api.github.com/users/CryZe/following{/other_user}", "gists_url": "https://api.github.com/users/CryZe/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryZe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryZe/subscriptions", "organizations_url": "https://api.github.com/users/CryZe/orgs", "repos_url": "https://api.github.com/users/CryZe/repos", "events_url": "https://api.github.com/users/CryZe/events{/privacy}", "received_events_url": "https://api.github.com/users/CryZe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23064af5ec7f52b287e2c60823fed92a4763502", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23064af5ec7f52b287e2c60823fed92a4763502", "html_url": "https://github.com/rust-lang/rust/commit/a23064af5ec7f52b287e2c60823fed92a4763502"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "a509b80eaca9143eb33bc218b2efbce111637cb2", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/121b2fe988f47996933af699d6223de8e9262df0/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b2fe988f47996933af699d6223de8e9262df0/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=121b2fe988f47996933af699d6223de8e9262df0", "patch": "@@ -137,10 +137,21 @@ pub fn demangle(writer: &mut Write, s: &str) -> io::Result<()> {\n             let i: usize = inner[.. (inner.len() - rest.len())].parse().unwrap();\n             inner = &rest[i..];\n             rest = &rest[..i];\n+            if rest.starts_with(\"_$\") {\n+                rest = &rest[1..];\n+            }\n             while !rest.is_empty() {\n-                if rest.starts_with(\"$\") {\n+                if rest.starts_with(\".\") {\n+                    if let Some('.') = rest[1..].chars().next() {\n+                        writer.write_all(b\"::\")?;\n+                        rest = &rest[2..];\n+                    } else {\n+                        writer.write_all(b\".\")?;\n+                        rest = &rest[1..];\n+                    }\n+                } else if rest.starts_with(\"$\") {\n                     macro_rules! demangle {\n-                        ($($pat:expr, => $demangled:expr),*) => ({\n+                        ($($pat:expr => $demangled:expr),*) => ({\n                             $(if rest.starts_with($pat) {\n                                 try!(writer.write_all($demangled));\n                                 rest = &rest[$pat.len()..];\n@@ -155,29 +166,32 @@ pub fn demangle(writer: &mut Write, s: &str) -> io::Result<()> {\n \n                     // see src/librustc/back/link.rs for these mappings\n                     demangle! (\n-                        \"$SP$\", => b\"@\",\n-                        \"$BP$\", => b\"*\",\n-                        \"$RF$\", => b\"&\",\n-                        \"$LT$\", => b\"<\",\n-                        \"$GT$\", => b\">\",\n-                        \"$LP$\", => b\"(\",\n-                        \"$RP$\", => b\")\",\n-                        \"$C$\", => b\",\",\n+                        \"$SP$\" => b\"@\",\n+                        \"$BP$\" => b\"*\",\n+                        \"$RF$\" => b\"&\",\n+                        \"$LT$\" => b\"<\",\n+                        \"$GT$\" => b\">\",\n+                        \"$LP$\" => b\"(\",\n+                        \"$RP$\" => b\")\",\n+                        \"$C$\" => b\",\",\n \n                         // in theory we can demangle any Unicode code point, but\n                         // for simplicity we just catch the common ones.\n-                        \"$u7e$\", => b\"~\",\n-                        \"$u20$\", => b\" \",\n-                        \"$u27$\", => b\"'\",\n-                        \"$u5b$\", => b\"[\",\n-                        \"$u5d$\", => b\"]\",\n-                        \"$u7b$\", => b\"{\",\n-                        \"$u7d$\", => b\"}\"\n+                        \"$u7e$\" => b\"~\",\n+                        \"$u20$\" => b\" \",\n+                        \"$u27$\" => b\"'\",\n+                        \"$u5b$\" => b\"[\",\n+                        \"$u5d$\" => b\"]\",\n+                        \"$u7b$\" => b\"{\",\n+                        \"$u7d$\" => b\"}\",\n+                        \"$u3b$\" => b\";\",\n+                        \"$u2b$\" => b\"+\",\n+                        \"$u22$\" => b\"\\\"\"\n                     )\n                 } else {\n-                    let idx = match rest.find('$') {\n+                    let idx = match rest.char_indices().find(|&(_, c)| c == '$' || c == '.') {\n                         None => rest.len(),\n-                        Some(i) => i,\n+                        Some((i, _)) => i,\n                     };\n                     writer.write_all(rest[..idx].as_bytes())?;\n                     rest = &rest[idx..];\n@@ -212,6 +226,7 @@ mod tests {\n         t!(\"_ZN8$RF$testE\", \"&test\");\n         t!(\"_ZN8$BP$test4foobE\", \"*test::foob\");\n         t!(\"_ZN9$u20$test4foobE\", \" test::foob\");\n+        t!(\"_ZN35Bar$LT$$u5b$u32$u3b$$u20$4$u5d$$GT$E\", \"Bar<[u32; 4]>\");\n     }\n \n     #[test]\n@@ -226,4 +241,17 @@ mod tests {\n         t!(\"ZN13test$u20$test4foobE\", \"test test::foob\");\n         t!(\"ZN12test$RF$test4foobE\", \"test&test::foob\");\n     }\n+\n+    #[test]\n+    fn demangle_elements_beginning_with_underscore() {\n+        t!(\"_ZN13_$LT$test$GT$E\", \"<test>\");\n+        t!(\"_ZN28_$u7b$$u7b$closure$u7d$$u7d$E\", \"{{closure}}\");\n+        t!(\"_ZN15__STATIC_FMTSTRE\", \"__STATIC_FMTSTR\");\n+    }\n+\n+    #[test]\n+    fn demangle_trait_impls() {\n+        t!(\"_ZN71_$LT$Test$u20$$u2b$$u20$$u27$static$u20$as$u20$foo..Bar$LT$Test$GT$$GT$3barE\",\n+           \"<Test + 'static as foo::Bar<Test>>::bar\");\n+    }\n }"}]}