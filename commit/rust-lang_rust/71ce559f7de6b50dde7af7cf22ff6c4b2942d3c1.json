{"sha": "71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2U1NTlmN2RlNmI1MGRkZTdhZjdjZjIyZmY2YzRiMjk0MmQzYzE=", "commit": {"author": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-14T05:08:26Z"}, "committer": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2013-12-14T05:35:41Z"}, "message": "Dead-code pass now marks and warns foreign items", "tree": {"sha": "153c00fed7769fe8f1881ee28f9a395d471a1168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153c00fed7769fe8f1881ee28f9a395d471a1168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "html_url": "https://github.com/rust-lang/rust/commit/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/comments", "author": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ad32f388557c6b1f709d59a940adfa3332a5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ad32f388557c6b1f709d59a940adfa3332a5f2", "html_url": "https://github.com/rust-lang/rust/commit/d5ad32f388557c6b1f709d59a940adfa3332a5f2"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "9007e4bd90a9d22964ebfcb456450a11e20d312f", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "patch": "@@ -37,6 +37,7 @@ fn should_explore(tcx: ty::ctxt, def_id: ast::DefId) -> bool {\n     match tcx.items.find(&def_id.node) {\n         Some(&ast_map::node_item(..))\n         | Some(&ast_map::node_method(..))\n+        | Some(&ast_map::node_foreign_item(..))\n         | Some(&ast_map::node_trait_method(..)) => true,\n         _ => false\n     }\n@@ -106,8 +107,7 @@ impl MarkSymbolVisitor {\n                 match item.node {\n                     ast::item_fn(..)\n                     | ast::item_ty(..)\n-                    | ast::item_static(..)\n-                    | ast::item_foreign_mod(_) => {\n+                    | ast::item_static(..) => {\n                         visit::walk_item(self, item, ());\n                     }\n                     _ => ()\n@@ -119,6 +119,9 @@ impl MarkSymbolVisitor {\n             ast_map::node_method(method, _, _) => {\n                 visit::walk_block(self, method.body, ());\n             }\n+            ast_map::node_foreign_item(foreign_item, _, _, _) => {\n+                visit::walk_foreign_item(self, foreign_item, ());\n+            }\n             _ => ()\n         }\n     }\n@@ -299,19 +302,31 @@ impl DeadVisitor {\n         }\n         false\n     }\n+\n+    fn warn_dead_code(&mut self, id: ast::NodeId,\n+                      span: codemap::Span, ident: &ast::Ident) {\n+        self.tcx.sess.add_lint(dead_code, id, span,\n+                               format!(\"code is never used: `{}`\",\n+                                       token::ident_to_str(ident)));\n+    }\n }\n \n impl Visitor<()> for DeadVisitor {\n     fn visit_item(&mut self, item: @ast::item, _: ()) {\n         let ctor_id = get_struct_ctor_id(item);\n         if !self.symbol_is_live(item.id, ctor_id) && should_warn(item) {\n-            self.tcx.sess.add_lint(dead_code, item.id, item.span,\n-                                   format!(\"code is never used: `{}`\",\n-                                           token::ident_to_str(&item.ident)));\n+            self.warn_dead_code(item.id, item.span, &item.ident);\n         }\n         visit::walk_item(self, item, ());\n     }\n \n+    fn visit_foreign_item(&mut self, fi: @ast::foreign_item, _: ()) {\n+        if !self.symbol_is_live(fi.id, None) {\n+            self.warn_dead_code(fi.id, fi.span, &fi.ident);\n+        }\n+        visit::walk_foreign_item(self, fi, ());\n+    }\n+\n     fn visit_fn(&mut self, fk: &visit::fn_kind,\n                 _: &ast::fn_decl, block: ast::P<ast::Block>,\n                 span: codemap::Span, id: ast::NodeId, _: ()) {\n@@ -320,10 +335,7 @@ impl Visitor<()> for DeadVisitor {\n             visit::fk_method(..) => {\n                 let ident = visit::name_of_fn(fk);\n                 if !self.symbol_is_live(id, None) {\n-                    self.tcx.sess\n-                            .add_lint(dead_code, id, span,\n-                                      format!(\"code is never used: `{}`\",\n-                                              token::ident_to_str(&ident)));\n+                    self.warn_dead_code(id, span, &ident);\n                 }\n             }\n             _ => ()"}, {"sha": "c1d4d367e25f27fd842318b233a3dc98d07f6e93", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "patch": "@@ -29,12 +29,15 @@\n \n #[allow(non_camel_case_types)]; // C types\n \n-use std::libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t, c_double};\n+use std::libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n use std::libc::ssize_t;\n use std::libc::{malloc, free};\n use std::libc;\n use std::vec;\n \n+#[cfg(test)]\n+use std::libc::uintptr_t;\n+\n pub use self::errors::*;\n \n pub static OK: c_int = 0;\n@@ -541,7 +544,9 @@ extern {\n     pub fn rust_is_ipv4_sockaddr(addr: *sockaddr) -> c_int;\n     pub fn rust_is_ipv6_sockaddr(addr: *sockaddr) -> c_int;\n \n+    #[cfg(test)]\n     fn rust_uv_handle_type_max() -> uintptr_t;\n+    #[cfg(test)]\n     fn rust_uv_req_type_max() -> uintptr_t;\n     fn rust_uv_get_udp_handle_from_send_req(req: *uv_udp_send_t) -> *uv_udp_t;\n "}, {"sha": "5212b6fc15ec4e392406cf9272ec02f710d51ff8", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "patch": "@@ -10,6 +10,7 @@\n \n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n+#[allow(dead_code)];\n \n // function names are almost identical to C's libmath, a few have been\n // renamed, grep for \"rename:\""}, {"sha": "29d77959997f6ead55104d12acffdc7da3c5f37a", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "patch": "@@ -40,11 +40,27 @@ fn bar2() {\n pub fn pub_fn() {\n     let foo2_struct = Foo2;\n     foo2_struct.foo2();\n+\n+    blah::baz();\n }\n \n-// not warned because it's used in the parameter of `free` below\n-enum c_void {}\n+mod blah {\n+    use std::libc::size_t;\n+    // not warned because it's used in the parameter of `free` and return of\n+    // `malloc` below, which are also used.\n+    enum c_void {}\n+\n+    extern {\n+        fn free(p: *c_void);\n+        fn malloc(size: size_t) -> *c_void;\n+    }\n+\n+    pub fn baz() {\n+        unsafe { free(malloc(4)); }\n+    }\n+}\n \n+enum c_void {} //~ ERROR: code is never used\n extern {\n-    fn free(p: *c_void);\n+    fn free(p: *c_void); //~ ERROR: code is never used\n }"}, {"sha": "726d778c3bb2b7e0b4e0df27af1169ee12a6d377", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=71ce559f7de6b50dde7af7cf22ff6c4b2942d3c1", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[forbid(ctypes)];\n+#[allow(dead_code)];\n \n mod xx {\n     extern {"}]}