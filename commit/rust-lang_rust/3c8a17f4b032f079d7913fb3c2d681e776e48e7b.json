{"sha": "3c8a17f4b032f079d7913fb3c2d681e776e48e7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOGExN2Y0YjAzMmYwNzlkNzkxM2ZiM2MyZDY4MWU3NzZlNDhlN2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-30T01:26:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-30T01:26:30Z"}, "message": "Rollup merge of #38649 - GuillaumeGomez:atomicint_docs, r=frewsxcv\n\nAdd missing urls for atomic_int macros types\n\nr? @frewsxcv", "tree": {"sha": "9bc35fc7760e9a489dc875d25d5c101664360124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bc35fc7760e9a489dc875d25d5c101664360124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c8a17f4b032f079d7913fb3c2d681e776e48e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8a17f4b032f079d7913fb3c2d681e776e48e7b", "html_url": "https://github.com/rust-lang/rust/commit/3c8a17f4b032f079d7913fb3c2d681e776e48e7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c8a17f4b032f079d7913fb3c2d681e776e48e7b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332a4cc6162cec3990e755775faf9e7da1a3aa8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/332a4cc6162cec3990e755775faf9e7da1a3aa8f", "html_url": "https://github.com/rust-lang/rust/commit/332a4cc6162cec3990e755775faf9e7da1a3aa8f"}, {"sha": "94d58c203ea7d29f0fcefccb15960a493504fa18", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d58c203ea7d29f0fcefccb15960a493504fa18", "html_url": "https://github.com/rust-lang/rust/commit/94d58c203ea7d29f0fcefccb15960a493504fa18"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "63d786074639dccb12219904fdf091d9b0c58f93", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3c8a17f4b032f079d7913fb3c2d681e776e48e7b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8a17f4b032f079d7913fb3c2d681e776e48e7b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=3c8a17f4b032f079d7913fb3c2d681e776e48e7b", "patch": "@@ -958,12 +958,16 @@ macro_rules! atomic_int {\n \n             /// Loads a value from the atomic integer.\n             ///\n-            /// `load` takes an `Ordering` argument which describes the memory ordering of this\n+            /// `load` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n             ///\n             /// # Panics\n             ///\n-            /// Panics if `order` is `Release` or `AcqRel`.\n+            /// Panics if `order` is [`Release`] or [`AcqRel`].\n+            ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            /// [`Release`]: enum.Ordering.html#variant.Release\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             ///\n             /// # Examples\n             ///\n@@ -982,9 +986,11 @@ macro_rules! atomic_int {\n \n             /// Stores a value into the atomic integer.\n             ///\n-            /// `store` takes an `Ordering` argument which describes the memory ordering of this\n+            /// `store` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n             ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            ///\n             /// # Examples\n             ///\n             /// ```\n@@ -1007,9 +1013,11 @@ macro_rules! atomic_int {\n \n             /// Stores a value into the atomic integer, returning the old value.\n             ///\n-            /// `swap` takes an `Ordering` argument which describes the memory ordering of this\n+            /// `swap` takes an [`Ordering`] argument which describes the memory ordering of this\n             /// operation.\n             ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            ///\n             /// # Examples\n             ///\n             /// ```\n@@ -1031,9 +1039,11 @@ macro_rules! atomic_int {\n             /// The return value is always the previous value. If it is equal to `current`, then the\n             /// value was updated.\n             ///\n-            /// `compare_and_swap` also takes an `Ordering` argument which describes the memory\n+            /// `compare_and_swap` also takes an [`Ordering`] argument which describes the memory\n             /// ordering of this operation.\n             ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            ///\n             /// # Examples\n             ///\n             /// ```\n@@ -1069,11 +1079,15 @@ macro_rules! atomic_int {\n             /// containing the previous value. On success this value is guaranteed to be equal to\n             /// `current`.\n             ///\n-            /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of\n-            /// this operation. The first describes the required ordering if the operation succeeds\n-            /// while the second describes the required ordering when the operation fails. The\n-            /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker\n-            /// than the success ordering.\n+            /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n+            /// ordering of this operation. The first describes the required ordering if\n+            /// the operation succeeds while the second describes the required ordering when\n+            /// the operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and\n+            /// must be equivalent or weaker than the success ordering.\n+            ///\n+            /// [`Ordering`]: enum.Ordering.html\n+            /// [`Release`]: enum.Ordering.html#variant.Release\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             ///\n             /// # Examples\n             ///\n@@ -1107,16 +1121,21 @@ macro_rules! atomic_int {\n             /// Stores a value into the atomic integer if the current value is the same as the\n             /// `current` value.\n             ///\n-            /// Unlike `compare_exchange`, this function is allowed to spuriously fail even when the\n-            /// comparison succeeds, which can result in more efficient code on some platforms. The\n-            /// return value is a result indicating whether the new value was written and containing\n-            /// the previous value.\n+            /// Unlike [`compare_exchange`], this function is allowed to spuriously fail even\n+            /// when the comparison succeeds, which can result in more efficient code on some\n+            /// platforms. The return value is a result indicating whether the new value was\n+            /// written and containing the previous value.\n             ///\n-            /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n+            /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n             /// ordering of this operation. The first describes the required ordering if the\n             /// operation succeeds while the second describes the required ordering when the\n-            /// operation fails. The failure ordering can't be `Release` or `AcqRel` and must be\n-            /// equivalent or weaker than the success ordering.\n+            /// operation fails. The failure ordering can't be [`Release`] or [`AcqRel`] and\n+            /// must be equivalent or weaker than the success ordering.\n+            ///\n+            /// [`compare_exchange`]: #method.compare_exchange\n+            /// [`Ordering`]: enum.Ordering.html\n+            /// [`Release`]: enum.Ordering.html#variant.Release\n+            /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n             ///\n             /// # Examples\n             ///"}]}