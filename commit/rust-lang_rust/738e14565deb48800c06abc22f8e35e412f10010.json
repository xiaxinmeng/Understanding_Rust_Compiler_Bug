{"sha": "738e14565deb48800c06abc22f8e35e412f10010", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOGUxNDU2NWRlYjQ4ODAwYzA2YWJjMjJmOGUzNWU0MTJmMTAwMTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-05T10:54:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T11:04:02Z"}, "message": "syntax: Use `Token` in visitors and fix a mut visitor test", "tree": {"sha": "6b9a2aedad6b40438eb53271705779a7075627af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b9a2aedad6b40438eb53271705779a7075627af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/738e14565deb48800c06abc22f8e35e412f10010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/738e14565deb48800c06abc22f8e35e412f10010", "html_url": "https://github.com/rust-lang/rust/commit/738e14565deb48800c06abc22f8e35e412f10010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/738e14565deb48800c06abc22f8e35e412f10010/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ce3f458939e6fe073bca6128526cb23f0797ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ce3f458939e6fe073bca6128526cb23f0797ba", "html_url": "https://github.com/rust-lang/rust/commit/67ce3f458939e6fe073bca6128526cb23f0797ba"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "41073773e9f9bb246571ecc108695566fd4bcdd2", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=738e14565deb48800c06abc22f8e35e412f10010", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n use syntax::visit;\n use syntax::symbol::{kw, sym};\n-use syntax::parse::token::{self, TokenKind};\n+use syntax::parse::token::{self, Token};\n use syntax_pos::Span;\n \n /// Creates `DefId`s for nodes in the AST.\n@@ -325,8 +325,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n     }\n \n-    fn visit_token(&mut self, t: TokenKind) {\n-        if let token::Interpolated(nt) = t {\n+    fn visit_token(&mut self, t: Token) {\n+        if let token::Interpolated(nt) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {\n                 if let ExprKind::Mac(..) = expr.node {\n                     self.visit_macro_invoc(expr.id);"}, {"sha": "6d0b142fb2409e713d21ccd7b5789144797bfb64", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=738e14565deb48800c06abc22f8e35e412f10010", "patch": "@@ -34,7 +34,7 @@ use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::is_builtin_attr;\n-use syntax::parse::token::{self, TokenKind};\n+use syntax::parse::token::{self, Token};\n use syntax::span_err;\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::{kw, sym};\n@@ -1052,8 +1052,8 @@ impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n         self.resolver.current_module = parent;\n     }\n \n-    fn visit_token(&mut self, t: TokenKind) {\n-        if let token::Interpolated(nt) = t {\n+    fn visit_token(&mut self, t: Token) {\n+        if let token::Interpolated(nt) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {\n                 if let ast::ExprKind::Mac(..) = expr.node {\n                     self.visit_invoc(expr.id);"}, {"sha": "4d7f0a97b0fa55ec0daf368c6e85f1ece4b1c11d", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=738e14565deb48800c06abc22f8e35e412f10010", "patch": "@@ -9,7 +9,7 @@\n \n use crate::ast::*;\n use crate::source_map::{Spanned, respan};\n-use crate::parse::token::{self, Token, TokenKind};\n+use crate::parse::token::{self, Token};\n use crate::ptr::P;\n use crate::ThinVec;\n use crate::tokenstream::*;\n@@ -262,7 +262,7 @@ pub trait MutVisitor: Sized {\n         noop_visit_tts(tts, self);\n     }\n \n-    fn visit_token(&mut self, t: &mut TokenKind) {\n+    fn visit_token(&mut self, t: &mut Token) {\n         noop_visit_token(t, self);\n     }\n \n@@ -576,9 +576,8 @@ pub fn noop_visit_arg<T: MutVisitor>(Arg { id, pat, ty }: &mut Arg, vis: &mut T)\n \n pub fn noop_visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {\n     match tt {\n-        TokenTree::Token(Token { kind, span }) => {\n-            vis.visit_token(kind);\n-            vis.visit_span(span);\n+        TokenTree::Token(token) => {\n+            vis.visit_token(token);\n         }\n         TokenTree::Delimited(DelimSpan { open, close }, _delim, tts) => {\n             vis.visit_span(open);\n@@ -595,15 +594,24 @@ pub fn noop_visit_tts<T: MutVisitor>(TokenStream(tts): &mut TokenStream, vis: &m\n     })\n }\n \n-// apply ident visitor if it's an ident, apply other visits to interpolated nodes\n-pub fn noop_visit_token<T: MutVisitor>(t: &mut TokenKind, vis: &mut T) {\n-    match t {\n+// Apply ident visitor if it's an ident, apply other visits to interpolated nodes.\n+// In practice the ident part is not actually used by specific visitors right now,\n+// but there's a test below checking that it works.\n+pub fn noop_visit_token<T: MutVisitor>(t: &mut Token, vis: &mut T) {\n+    let Token { kind, span } = t;\n+    match kind {\n+        token::Ident(name, _) | token::Lifetime(name) => {\n+            let mut ident = Ident::new(*name, *span);\n+            vis.visit_ident(&mut ident);\n+            *name = ident.name;\n+        }\n         token::Interpolated(nt) => {\n             let mut nt = Lrc::make_mut(nt);\n             vis.visit_interpolated(&mut nt);\n         }\n         _ => {}\n     }\n+    vis.visit_span(span);\n }\n \n /// Apply visitor to elements of interpolated nodes."}, {"sha": "4e6a8274a478caa6ceb82057a9898e26c01a1774", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/738e14565deb48800c06abc22f8e35e412f10010/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=738e14565deb48800c06abc22f8e35e412f10010", "patch": "@@ -14,7 +14,7 @@\n //! those that are created by the expansion of a macro.\n \n use crate::ast::*;\n-use crate::parse::token::TokenKind;\n+use crate::parse::token::Token;\n use crate::tokenstream::{TokenTree, TokenStream};\n \n use syntax_pos::Span;\n@@ -151,7 +151,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_tts(&mut self, tts: TokenStream) {\n         walk_tts(self, tts)\n     }\n-    fn visit_token(&mut self, _t: TokenKind) {}\n+    fn visit_token(&mut self, _t: Token) {}\n     // FIXME: add `visit_interpolated` and `walk_interpolated`\n     fn visit_vis(&mut self, vis: &'ast Visibility) {\n         walk_vis(self, vis)\n@@ -855,7 +855,7 @@ pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute)\n \n pub fn walk_tt<'a, V: Visitor<'a>>(visitor: &mut V, tt: TokenTree) {\n     match tt {\n-        TokenTree::Token(token) => visitor.visit_token(token.kind),\n+        TokenTree::Token(token) => visitor.visit_token(token),\n         TokenTree::Delimited(_, _, tts) => visitor.visit_tts(tts),\n     }\n }"}]}