{"sha": "d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZGZlMTk1N2I2NTQxZGU4ZmUyNzk3ZTI0OGZlNGJkMmZhYzAyZDk=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-09-14T22:57:55Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-09-16T18:46:52Z"}, "message": "Align with _mut conventions\n\nAs per [RFC\n52](https://github.com/rust-lang/rfcs/blob/master/active/0052-ownership-variants.md),\nuse `_mut` suffixes to mark mutable variants, and `into_iter` for moving\niterators.\n\n[breaking-change]", "tree": {"sha": "a6e36c294538942b621d79f28424caa02a093a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e36c294538942b621d79f28424caa02a093a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "html_url": "https://github.com/rust-lang/rust/commit/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828e075abd8ee2f8c16f6cb1b93c0d99307e704d", "url": "https://api.github.com/repos/rust-lang/rust/commits/828e075abd8ee2f8c16f6cb1b93c0d99307e704d", "html_url": "https://github.com/rust-lang/rust/commit/828e075abd8ee2f8c16f6cb1b93c0d99307e704d"}], "stats": {"total": 361, "additions": 293, "deletions": 68}, "files": [{"sha": "cf5c1eed15cd0d0a0ceb9188f723728e53be4e45", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -475,9 +475,15 @@ impl<T> DList<T> {\n         Items{nelem: self.len(), head: &self.list_head, tail: self.list_tail}\n     }\n \n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n+        self.iter_mut()\n+    }\n+\n     /// Provides a forward iterator with mutable references.\n     #[inline]\n-    pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n+    pub fn iter_mut<'a>(&'a mut self) -> MutItems<'a, T> {\n         let head_raw = match self.list_head {\n             Some(ref mut h) => Rawlink::some(&mut **h),\n             None => Rawlink::none(),\n@@ -490,10 +496,15 @@ impl<T> DList<T> {\n         }\n     }\n \n+    /// Deprecated: use `into_iter`.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(self) -> MoveItems<T> {\n+        self.into_iter()\n+    }\n \n     /// Consumes the list into an iterator yielding elements by value.\n     #[inline]\n-    pub fn move_iter(self) -> MoveItems<T> {\n+    pub fn into_iter(self) -> MoveItems<T> {\n         MoveItems{list: self}\n     }\n }"}, {"sha": "a3dc1d30031043a3c5b2c605add79d8517d0186e", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -250,6 +250,12 @@ impl<T> RingBuf<T> {\n         Items{index: 0, rindex: self.nelts, lo: self.lo, elts: self.elts.as_slice()}\n     }\n \n+    /// Deprecated: use `iter_mut`\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n+        self.iter_mut()\n+    }\n+\n     /// Returns a front-to-back iterator which returns mutable references.\n     ///\n     /// # Example\n@@ -267,7 +273,7 @@ impl<T> RingBuf<T> {\n     /// let b: &[_] = &[&mut 3, &mut 1, &mut 2];\n     /// assert_eq!(buf.mut_iter().collect::<Vec<&mut int>>().as_slice(), b);\n     /// ```\n-    pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n+    pub fn iter_mut<'a>(&'a mut self) -> MutItems<'a, T> {\n         let start_index = raw_index(self.lo, self.elts.len(), 0);\n         let end_index = raw_index(self.lo, self.elts.len(), self.nelts);\n "}, {"sha": "aac34bfd15581d81980d2127784a825d076dc04e", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -260,6 +260,12 @@ impl<V> SmallIntMap<V> {\n         }\n     }\n \n+    /// Deprecated: use `iter_mut`\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'r>(&'r mut self) -> MutEntries<'r, V> {\n+        self.iter_mut()\n+    }\n+\n     /// Returns an iterator visiting all key-value pairs in ascending order by the keys,\n     /// with mutable references to the values.\n     /// The iterator's element type is `(uint, &'r mut V)`.\n@@ -282,14 +288,22 @@ impl<V> SmallIntMap<V> {\n     ///     assert_eq!(value, &\"x\");\n     /// }\n     /// ```\n-    pub fn mut_iter<'r>(&'r mut self) -> MutEntries<'r, V> {\n+    pub fn iter_mut<'r>(&'r mut self) -> MutEntries<'r, V> {\n         MutEntries {\n             front: 0,\n             back: self.v.len(),\n             iter: self.v.mut_iter()\n         }\n     }\n \n+    /// Deprecated: use `into_iter` instead.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(&mut self)\n+        -> FilterMap<(uint, Option<V>), (uint, V),\n+                Enumerate<vec::MoveItems<Option<V>>>> {\n+        self.into_iter()\n+    }\n+\n     /// Returns an iterator visiting all key-value pairs in ascending order by\n     /// the keys, emptying (but not consuming) the original `SmallIntMap`.\n     /// The iterator's element type is `(uint, &'r V)`.\n@@ -309,7 +323,7 @@ impl<V> SmallIntMap<V> {\n     ///\n     /// assert_eq!(vec, vec![(1, \"a\"), (2, \"b\"), (3, \"c\")]);\n     /// ```\n-    pub fn move_iter(&mut self)\n+    pub fn into_iter(&mut self)\n         -> FilterMap<(uint, Option<V>), (uint, V),\n                 Enumerate<vec::MoveItems<Option<V>>>>\n     {"}, {"sha": "0a7c84b5c0c55f2b12bc975d5ae394f40938f675", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 60, "deletions": 19, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -226,10 +226,10 @@ impl<K: Ord, V> Map<K, V> for TreeMap<K, V> {\n }\n \n impl<K: Ord, V> MutableMap<K, V> for TreeMap<K, V> {\n-    // See comments on def_tree_find_mut_with\n+    // See comments on tree_find_with_mut\n     #[inline]\n     fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V> {\n-        tree_find_mut_with(&mut self.root, |x| key.cmp(x))\n+        tree_find_with_mut(&mut self.root, |x| key.cmp(x))\n     }\n \n     fn swap(&mut self, key: K, value: V) -> Option<V> {\n@@ -361,6 +361,12 @@ impl<K: Ord, V> TreeMap<K, V> {\n         RevEntries{iter: self.iter()}\n     }\n \n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'a>(&'a mut self) -> MutEntries<'a, K, V> {\n+        self.iter_mut()\n+    }\n+\n     /// Gets a lazy forward iterator over the key-value pairs in the\n     /// map, with the values being mutable.\n     ///\n@@ -383,15 +389,21 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// assert_eq!(map.find(&\"b\"), Some(&12));\n     /// assert_eq!(map.find(&\"c\"), Some(&3));\n     /// ```\n-    pub fn mut_iter<'a>(&'a mut self) -> MutEntries<'a, K, V> {\n+    pub fn iter_mut<'a>(&'a mut self) -> MutEntries<'a, K, V> {\n         MutEntries {\n             stack: vec!(),\n-            node: mut_deref(&mut self.root),\n+            node: deref_mut(&mut self.root),\n             remaining_min: self.length,\n             remaining_max: self.length\n         }\n     }\n \n+    /// Deprecated: use `rev_iter_mut`.\n+    #[deprecated = \"use rev_iter_mut\"]\n+    pub fn mut_rev_iter<'a>(&'a mut self) -> RevMutEntries<'a, K, V> {\n+        self.rev_iter_mut()\n+    }\n+\n     /// Gets a lazy reverse iterator over the key-value pairs in the\n     /// map, with the values being mutable.\n     ///\n@@ -414,10 +426,15 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// assert_eq!(map.find(&\"b\"), Some(&12));\n     /// assert_eq!(map.find(&\"c\"), Some(&13));\n     /// ```\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> RevMutEntries<'a, K, V> {\n+    pub fn rev_iter_mut<'a>(&'a mut self) -> RevMutEntries<'a, K, V> {\n         RevMutEntries{iter: self.mut_iter()}\n     }\n \n+    /// Deprecated: use `into_iter`.\n+    #[depreated = \"use into_iter\"]\n+    pub fn move_iter(self) -> MoveEntries<K, V> {\n+        self.into_iter()\n+    }\n \n     /// Gets a lazy iterator that consumes the treemap.\n     ///\n@@ -434,7 +451,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// let vec: Vec<(&str, int)> = map.move_iter().collect();\n     /// assert_eq!(vec, vec![(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n     /// ```\n-    pub fn move_iter(self) -> MoveEntries<K, V> {\n+    pub fn into_iter(self) -> MoveEntries<K, V> {\n         let TreeMap { root: root, length: length } = self;\n         let stk = match root {\n             None => vec!(),\n@@ -477,6 +494,12 @@ impl<K, V> TreeMap<K, V> {\n         tree_find_with(&self.root, f)\n     }\n \n+    /// Deprecated: use `find_with_mut`.\n+    #[deprecated = \"use find_with_mut\"]\n+    pub fn find_mut_with<'a>(&'a mut self, f:|&K| -> Ordering) -> Option<&'a mut V> {\n+        self.find_with_mut(f)\n+    }\n+\n     /// Returns the value for which `f(key)` returns `Equal`. `f` is invoked\n     /// with current key and guides tree navigation. That means `f` should\n     /// be aware of natural ordering of the tree.\n@@ -497,8 +520,8 @@ impl<K, V> TreeMap<K, V> {\n     /// assert_eq!(t.find(&\"User-Agent\"), Some(&new_ua));\n     /// ```\n     #[inline]\n-    pub fn find_mut_with<'a>(&'a mut self, f:|&K| -> Ordering) -> Option<&'a mut V> {\n-        tree_find_mut_with(&mut self.root, f)\n+    pub fn find_with_mut<'a>(&'a mut self, f:|&K| -> Ordering) -> Option<&'a mut V> {\n+        tree_find_with_mut(&mut self.root, f)\n     }\n }\n \n@@ -594,15 +617,21 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Gets a lazy iterator that should be initialized using\n     /// `traverse_left`/`traverse_right`/`traverse_complete`.\n-    fn mut_iter_for_traversal<'a>(&'a mut self) -> MutEntries<'a, K, V> {\n+    fn iter_mut_for_traversal<'a>(&'a mut self) -> MutEntries<'a, K, V> {\n         MutEntries {\n             stack: vec!(),\n-            node: mut_deref(&mut self.root),\n+            node: deref_mut(&mut self.root),\n             remaining_min: 0,\n             remaining_max: self.length\n         }\n     }\n \n+    /// Deprecated: use `lower_bound_mut`.\n+    #[deprecated = \"use lower_bound_mut\"]\n+    pub fn mut_lower_bound<'a>(&'a mut self, k: &K) -> MutEntries<'a, K, V> {\n+        self.lower_bound_mut(k)\n+    }\n+\n     /// Returns a lazy value iterator to the first key-value pair (with\n     /// the value being mutable) whose key is not less than `k`.\n     ///\n@@ -633,8 +662,14 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// assert_eq!(map.find(&6), Some(&\"changed\"));\n     /// assert_eq!(map.find(&8), Some(&\"changed\"));\n     /// ```\n-    pub fn mut_lower_bound<'a>(&'a mut self, k: &K) -> MutEntries<'a, K, V> {\n-        bound_setup!(self.mut_iter_for_traversal(), k, true)\n+    pub fn lower_bound_mut<'a>(&'a mut self, k: &K) -> MutEntries<'a, K, V> {\n+        bound_setup!(self.iter_mut_for_traversal(), k, true)\n+    }\n+\n+    /// Deprecated: use `upper_bound_mut`.\n+    #[deprecated = \"use upper_bound_mut\"]\n+    pub fn mut_upper_bound<'a>(&'a mut self, k: &K) -> MutEntries<'a, K, V> {\n+        self.upper_bound_mut(k)\n     }\n \n     /// Returns a lazy iterator to the first key-value pair (with the\n@@ -667,8 +702,8 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// assert_eq!(map.find(&6), Some(&\"changed\"));\n     /// assert_eq!(map.find(&8), Some(&\"changed\"));\n     /// ```\n-    pub fn mut_upper_bound<'a>(&'a mut self, k: &K) -> MutEntries<'a, K, V> {\n-        bound_setup!(self.mut_iter_for_traversal(), k, false)\n+    pub fn upper_bound_mut<'a>(&'a mut self, k: &K) -> MutEntries<'a, K, V> {\n+        bound_setup!(self.iter_mut_for_traversal(), k, false)\n     }\n }\n \n@@ -862,7 +897,7 @@ define_iterator! {\n define_iterator! {\n     MutEntries,\n     RevMutEntries,\n-    deref = mut_deref,\n+    deref = deref_mut,\n \n     addr_mut = mut\n }\n@@ -877,7 +912,7 @@ fn deref<'a, K, V>(node: &'a Option<Box<TreeNode<K, V>>>) -> *const TreeNode<K,\n     }\n }\n \n-fn mut_deref<K, V>(x: &mut Option<Box<TreeNode<K, V>>>)\n+fn deref_mut<K, V>(x: &mut Option<Box<TreeNode<K, V>>>)\n              -> *mut TreeNode<K, V> {\n     match *x {\n         Some(ref mut n) => {\n@@ -1169,6 +1204,12 @@ impl<T: Ord> TreeSet<T> {\n         RevSetItems{iter: self.map.rev_iter()}\n     }\n \n+    /// Deprecated: use `into_iter`.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(self) -> MoveSetItems<T> {\n+        self.into_iter()\n+    }\n+\n     /// Creates a consuming iterator, that is, one that moves each value out of the\n     /// set in ascending order. The set cannot be used after calling this.\n     ///\n@@ -1183,8 +1224,8 @@ impl<T: Ord> TreeSet<T> {\n     /// assert_eq!(v, vec![1, 2, 3, 4, 5]);\n     /// ```\n     #[inline]\n-    pub fn move_iter(self) -> MoveSetItems<T> {\n-        self.map.move_iter().map(|(value, _)| value)\n+    pub fn into_iter(self) -> MoveSetItems<T> {\n+        self.map.into_iter().map(|(value, _)| value)\n     }\n \n     /// Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\n@@ -1488,7 +1529,7 @@ fn tree_find_with<'r, K, V>(node: &'r Option<Box<TreeNode<K, V>>>,\n }\n \n // See comments above tree_find_with\n-fn tree_find_mut_with<'r, K, V>(node: &'r mut Option<Box<TreeNode<K, V>>>,\n+fn tree_find_with_mut<'r, K, V>(node: &'r mut Option<Box<TreeNode<K, V>>>,\n                                 f: |&K| -> Ordering) -> Option<&'r mut V> {\n \n     let mut current = node;"}, {"sha": "f447bcba917a8951781e1e423ea1f0ec8d0886e1", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -267,6 +267,12 @@ impl<T> TrieMap<T> {\n         iter\n     }\n \n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'a>(&'a mut self) -> MutEntries<'a, T> {\n+        self.iter_mut()\n+    }\n+\n     /// Gets an iterator over the key-value pairs in the map, with the\n     /// ability to mutate the values.\n     ///\n@@ -284,7 +290,7 @@ impl<T> TrieMap<T> {\n     /// assert_eq!(map.find(&2), Some(&-2));\n     /// assert_eq!(map.find(&3), Some(&-3));\n     /// ```\n-    pub fn mut_iter<'a>(&'a mut self) -> MutEntries<'a, T> {\n+    pub fn iter_mut<'a>(&'a mut self) -> MutEntries<'a, T> {\n         let mut iter = unsafe {MutEntries::new()};\n         iter.stack[0] = self.root.children.mut_iter();\n         iter.length = 1;\n@@ -425,13 +431,19 @@ impl<T> TrieMap<T> {\n     }\n     // If `upper` is true then returns upper_bound else returns lower_bound.\n     #[inline]\n-    fn mut_bound<'a>(&'a mut self, key: uint, upper: bool) -> MutEntries<'a, T> {\n+    fn bound_mut<'a>(&'a mut self, key: uint, upper: bool) -> MutEntries<'a, T> {\n         bound!(MutEntries, self = self,\n                key = key, is_upper = upper,\n                slice_from = mut_slice_from, iter = mut_iter,\n                mutability = mut)\n     }\n \n+    /// Deprecated: use `lower_bound_mut`.\n+    #[deprecated = \"use lower_bound_mut\"]\n+    pub fn mut_lower_bound<'a>(&'a mut self, key: uint) -> MutEntries<'a, T> {\n+        self.lower_bound_mut(key)\n+    }\n+\n     /// Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\n     /// If all keys in the map are less than `key` an empty iterator is returned.\n     ///\n@@ -453,8 +465,14 @@ impl<T> TrieMap<T> {\n     /// assert_eq!(map.find(&4), Some(&\"changed\"));\n     /// assert_eq!(map.find(&6), Some(&\"changed\"));\n     /// ```\n-    pub fn mut_lower_bound<'a>(&'a mut self, key: uint) -> MutEntries<'a, T> {\n-        self.mut_bound(key, false)\n+    pub fn lower_bound_mut<'a>(&'a mut self, key: uint) -> MutEntries<'a, T> {\n+        self.bound_mut(key, false)\n+    }\n+\n+    /// Deprecated: use `upper_bound_mut`.\n+    #[deprecated = \"use upper_bound_mut\"]\n+    pub fn mut_upper_bound<'a>(&'a mut self, key: uint) -> MutEntries<'a, T> {\n+        self.upper_bound_mut(key)\n     }\n \n     /// Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\n@@ -478,8 +496,8 @@ impl<T> TrieMap<T> {\n     /// assert_eq!(map.find(&4), Some(&\"b\"));\n     /// assert_eq!(map.find(&6), Some(&\"changed\"));\n     /// ```\n-    pub fn mut_upper_bound<'a>(&'a mut self, key: uint) -> MutEntries<'a, T> {\n-        self.mut_bound(key, true)\n+    pub fn upper_bound_mut<'a>(&'a mut self, key: uint) -> MutEntries<'a, T> {\n+        self.bound_mut(key, true)\n     }\n }\n "}, {"sha": "3557390ef9651af9a86516533a37034ce1d73d10", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -724,6 +724,12 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    /// Deprecated: use `into_iter`.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(self) -> MoveItems<T> {\n+        self.into_iter()\n+    }\n+\n     /// Creates a consuming iterator, that is, one that moves each\n     /// value out of the vector (from start to end). The vector cannot\n     /// be used after calling this.\n@@ -738,7 +744,7 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     #[inline]\n-    pub fn move_iter(self) -> MoveItems<T> {\n+    pub fn into_iter(self) -> MoveItems<T> {\n         unsafe {\n             let iter = mem::transmute(self.as_slice().iter());\n             let ptr = self.ptr;\n@@ -822,6 +828,11 @@ impl<T> Vec<T> {\n         self.as_slice().iter()\n     }\n \n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a,T> {\n+        self.iter_mut()\n+    }\n \n     /// Returns an iterator over mutable references to the elements of the\n     /// vector in order.\n@@ -835,7 +846,7 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     #[inline]\n-    pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a,T> {\n+    pub fn iter_mut<'a>(&'a mut self) -> MutItems<'a,T> {\n         self.as_mut_slice().mut_iter()\n     }\n \n@@ -927,6 +938,12 @@ impl<T> Vec<T> {\n         self.as_slice().last()\n     }\n \n+    /// Deprecated: use `last_mut`.\n+    #[deprecated = \"use last_mut\"]\n+    pub fn mut_last<'a>(&'a mut self) -> Option<&'a mut T> {\n+        self.last_mut()\n+    }\n+\n     /// Returns a mutable reference to the last element of a vector, or `None`\n     /// if it is empty.\n     ///\n@@ -938,7 +955,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec, vec![1i, 2, 4]);\n     /// ```\n     #[inline]\n-    pub fn mut_last<'a>(&'a mut self) -> Option<&'a mut T> {\n+    pub fn last_mut<'a>(&'a mut self) -> Option<&'a mut T> {\n         self.as_mut_slice().mut_last()\n     }\n \n@@ -1105,6 +1122,13 @@ impl<T> Vec<T> {\n         self.extend(other.move_iter());\n     }\n \n+    /// Deprecated: use `slice_mut`.\n+    #[deprecated = \"use slice_mut\"]\n+    pub fn mut_slice<'a>(&'a mut self, start: uint, end: uint)\n+                         -> &'a mut [T] {\n+        self.slice_mut(start, end)\n+    }\n+\n     /// Returns a mutable slice of `self` between `start` and `end`.\n     ///\n     /// # Failure\n@@ -1119,11 +1143,17 @@ impl<T> Vec<T> {\n     /// assert!(vec.mut_slice(0, 2) == [1, 2]);\n     /// ```\n     #[inline]\n-    pub fn mut_slice<'a>(&'a mut self, start: uint, end: uint)\n+    pub fn slice_mut<'a>(&'a mut self, start: uint, end: uint)\n                          -> &'a mut [T] {\n         self.as_mut_slice().mut_slice(start, end)\n     }\n \n+    /// Deprecated: use \"slice_from_mut\".\n+    #[deprecated = \"use slice_from_mut\"]\n+    pub fn mut_slice_from<'a>(&'a mut self, start: uint) -> &'a mut [T] {\n+        self.slice_from_mut(start)\n+    }\n+\n     /// Returns a mutable slice of `self` from `start` to the end of the `Vec`.\n     ///\n     /// # Failure\n@@ -1137,10 +1167,16 @@ impl<T> Vec<T> {\n     /// assert!(vec.mut_slice_from(2) == [3, 4]);\n     /// ```\n     #[inline]\n-    pub fn mut_slice_from<'a>(&'a mut self, start: uint) -> &'a mut [T] {\n+    pub fn slice_from_mut<'a>(&'a mut self, start: uint) -> &'a mut [T] {\n         self.as_mut_slice().mut_slice_from(start)\n     }\n \n+    /// Deprecated: use `slice_to_mut`.\n+    #[deprecated = \"use slice_to_mut\"]\n+    pub fn mut_slice_to<'a>(&'a mut self, end: uint) -> &'a mut [T] {\n+        self.slice_to_mut(end)\n+    }\n+\n     /// Returns a mutable slice of `self` from the start of the `Vec` to `end`.\n     ///\n     /// # Failure\n@@ -1154,10 +1190,16 @@ impl<T> Vec<T> {\n     /// assert!(vec.mut_slice_to(2) == [1, 2]);\n     /// ```\n     #[inline]\n-    pub fn mut_slice_to<'a>(&'a mut self, end: uint) -> &'a mut [T] {\n+    pub fn slice_to_mut<'a>(&'a mut self, end: uint) -> &'a mut [T] {\n         self.as_mut_slice().mut_slice_to(end)\n     }\n \n+    /// Deprecated: use `split_at_mut`.\n+    #[deprecated = \"use split_at_mut\"]\n+    pub fn mut_split_at<'a>(&'a mut self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n+        self.split_at_mut(mid)\n+    }\n+\n     /// Returns a pair of mutable slices that divides the `Vec` at an index.\n     ///\n     /// The first will contain all indices from `[0, mid)` (excluding\n@@ -1193,7 +1235,7 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     #[inline]\n-    pub fn mut_split_at<'a>(&'a mut self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n+    pub fn split_at_mut<'a>(&'a mut self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n         self.as_mut_slice().mut_split_at(mid)\n     }\n "}, {"sha": "cd6e8f3e666e10fdd29ecaed7cda5333cd483071", "filename": "src/libcore/option.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -372,17 +372,29 @@ impl<T> Option<T> {\n         Item{opt: self.as_ref()}\n     }\n \n+    /// Deprecated: use `iter_mut`\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'r>(&'r mut self) -> Item<&'r mut T> {\n+        self.iter_mut()\n+    }\n+\n     /// Returns a mutable iterator over the possibly contained value.\n     #[inline]\n     #[unstable = \"waiting for iterator conventions\"]\n-    pub fn mut_iter<'r>(&'r mut self) -> Item<&'r mut T> {\n+    pub fn iter_mut<'r>(&'r mut self) -> Item<&'r mut T> {\n         Item{opt: self.as_mut()}\n     }\n \n+    /// Deprecated: use `into_iter`.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(self) -> Item<T> {\n+        self.into_iter()\n+    }\n+\n     /// Returns a consuming iterator over the possibly contained value.\n     #[inline]\n     #[unstable = \"waiting for iterator conventions\"]\n-    pub fn move_iter(self) -> Item<T> {\n+    pub fn into_iter(self) -> Item<T> {\n         Item{opt: self}\n     }\n "}, {"sha": "42416a640bf653e47c7c1fb5f5e0c6d2be68ea82", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -113,6 +113,10 @@ pub use intrinsics::set_memory;\n #[unstable = \"may need a different name after pending changes to pointer types\"]\n pub fn null<T>() -> *const T { 0 as *const T }\n \n+/// Deprecated: use `null_mut`.\n+#[deprecated = \"use null_mut\"]\n+pub fn mut_null<T>() -> *mut T { null_mut() }\n+\n /// Create an unsafe mutable null pointer.\n ///\n /// # Example\n@@ -125,7 +129,7 @@ pub fn null<T>() -> *const T { 0 as *const T }\n /// ```\n #[inline]\n #[unstable = \"may need a different name after pending changes to pointer types\"]\n-pub fn mut_null<T>() -> *mut T { 0 as *mut T }\n+pub fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n /// Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n #[inline]"}, {"sha": "426ae8f09298c0d7c7b88d24e99ba112a6235658", "filename": "src/libcore/result.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -500,17 +500,29 @@ impl<T, E> Result<T, E> {\n         Item{opt: self.as_ref().ok()}\n     }\n \n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter<'r>(&'r mut self) -> Item<&'r mut T> {\n+        self.iter_mut()\n+    }\n+\n     /// Returns a mutable iterator over the possibly contained value.\n     #[inline]\n     #[unstable = \"waiting for iterator conventions\"]\n-    pub fn mut_iter<'r>(&'r mut self) -> Item<&'r mut T> {\n+    pub fn iter_mut<'r>(&'r mut self) -> Item<&'r mut T> {\n         Item{opt: self.as_mut().ok()}\n     }\n \n+    /// Deprecated: `use into_iter`.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(self) -> Item<T> {\n+        self.into_iter()\n+    }\n+\n     /// Returns a consuming iterator over the possibly contained value.\n     #[inline]\n     #[unstable = \"waiting for iterator conventions\"]\n-    pub fn move_iter(self) -> Item<T> {\n+    pub fn into_iter(self) -> Item<T> {\n         Item{opt: self.ok()}\n     }\n "}, {"sha": "05b0c1e4f70ba49f9624fa7ff2119aa17db65819", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -486,38 +486,80 @@ pub trait MutableSlice<'a, T> {\n     /// Primarily intended for getting a &mut [T] from a [T, ..N].\n     fn as_mut_slice(self) -> &'a mut [T];\n \n+    /// Deprecated: use `slice_mut`.\n+    #[deprecated = \"use slice_mut\"]\n+    fn mut_slice(self, start: uint, end: uint) -> &'a mut [T] {\n+        self.slice_mut(start, end)\n+    }\n+\n     /// Returns a mutable subslice spanning the interval [`start`, `end`).\n     ///\n     /// Fails when the end of the new slice lies beyond the end of the\n     /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n     ///\n     /// Slicing with `start` equal to `end` yields an empty slice.\n-    fn mut_slice(self, start: uint, end: uint) -> &'a mut [T];\n+    fn slice_mut(self, start: uint, end: uint) -> &'a mut [T];\n+\n+    /// Deprecated: use `slice_from_mut`.\n+    #[deprecated = \"use slice_from_mut\"]\n+    fn mut_slice_from(self, start: uint) -> &'a mut [T] {\n+        self.slice_from_mut(start)\n+    }\n \n     /// Returns a mutable subslice from `start` to the end of the slice.\n     ///\n     /// Fails when `start` is strictly greater than the length of the original slice.\n     ///\n     /// Slicing from `self.len()` yields an empty slice.\n-    fn mut_slice_from(self, start: uint) -> &'a mut [T];\n+    fn slice_from_mut(self, start: uint) -> &'a mut [T];\n+\n+    /// Deprecated: use `slice_to_mut`.\n+    #[deprecated = \"use slice_to_mut\"]\n+    fn mut_slice_to(self, end: uint) -> &'a mut [T] {\n+        self.slice_to_mut(end)\n+    }\n \n     /// Returns a mutable subslice from the start of the slice to `end`.\n     ///\n     /// Fails when `end` is strictly greater than the length of the original slice.\n     ///\n     /// Slicing to `0` yields an empty slice.\n-    fn mut_slice_to(self, end: uint) -> &'a mut [T];\n+    fn slice_to_mut(self, end: uint) -> &'a mut [T];\n+\n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    fn mut_iter(self) -> MutItems<'a, T> {\n+        self.iter_mut()\n+    }\n \n     /// Returns an iterator that allows modifying each value\n-    fn mut_iter(self) -> MutItems<'a, T>;\n+    fn iter_mut(self) -> MutItems<'a, T>;\n+\n+    /// Deprecated: use `last_mut`.\n+    #[deprecated = \"use last_mut\"]\n+    fn mut_last(self) -> Option<&'a mut T> {\n+        self.last_mut()\n+    }\n \n     /// Returns a mutable pointer to the last item in the vector.\n-    fn mut_last(self) -> Option<&'a mut T>;\n+    fn last_mut(self) -> Option<&'a mut T>;\n+\n+    /// Deprecated: use `split_mut`.\n+    #[deprecated = \"use split_mut\"]\n+    fn mut_split(self, pred: |&T|: 'a -> bool) -> MutSplits<'a, T> {\n+        self.split_mut(pred)\n+    }\n \n     /// Returns an iterator over the mutable subslices of the vector\n     /// which are separated by elements that match `pred`.  The\n     /// matched element is not contained in the subslices.\n-    fn mut_split(self, pred: |&T|: 'a -> bool) -> MutSplits<'a, T>;\n+    fn split_mut(self, pred: |&T|: 'a -> bool) -> MutSplits<'a, T>;\n+\n+    /// Deprecated: use `chunks_mut`.\n+    #[deprecated = \"use chunks_mut\"]\n+    fn mut_chunks(self, chunk_size: uint) -> MutChunks<'a, T> {\n+        self.chunks_mut(chunk_size)\n+    }\n \n     /**\n      * Returns an iterator over `chunk_size` elements of the vector at a time.\n@@ -529,7 +571,7 @@ pub trait MutableSlice<'a, T> {\n      *\n      * Fails if `chunk_size` is 0.\n      */\n-    fn mut_chunks(self, chunk_size: uint) -> MutChunks<'a, T>;\n+    fn chunks_mut(self, chunk_size: uint) -> MutChunks<'a, T>;\n \n     /**\n      * Returns a mutable reference to the first element in this slice\n@@ -587,6 +629,11 @@ pub trait MutableSlice<'a, T> {\n     /// ```\n     fn swap(self, a: uint, b: uint);\n \n+    /// Deprecated: use `split_at_mut`.\n+    #[deprecated = \"use split_at_mut\"]\n+    fn mut_split_at(self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n+        self.split_at_mut(mid)\n+    }\n \n     /// Divides one `&mut` into two at an index.\n     ///\n@@ -620,7 +667,7 @@ pub trait MutableSlice<'a, T> {\n     ///     assert!(right == &mut []);\n     /// }\n     /// ```\n-    fn mut_split_at(self, mid: uint) -> (&'a mut [T], &'a mut [T]);\n+    fn split_at_mut(self, mid: uint) -> (&'a mut [T], &'a mut [T]);\n \n     /// Reverse the order of elements in a vector, in place.\n     ///\n@@ -633,8 +680,14 @@ pub trait MutableSlice<'a, T> {\n     /// ```\n     fn reverse(self);\n \n+    /// Deprecated: use `unsafe_mut`.\n+    #[deprecated = \"use unsafe_mut\"]\n+    unsafe fn unsafe_mut_ref(self, index: uint) -> &'a mut T {\n+        self.unsafe_mut(index)\n+    }\n+\n     /// Returns an unsafe mutable pointer to the element in index\n-    unsafe fn unsafe_mut_ref(self, index: uint) -> &'a mut T;\n+    unsafe fn unsafe_mut(self, index: uint) -> &'a mut T;\n \n     /// Return an unsafe mutable pointer to the vector's buffer.\n     ///\n@@ -701,7 +754,7 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n     #[inline]\n     fn as_mut_slice(self) -> &'a mut [T] { self }\n \n-    fn mut_slice(self, start: uint, end: uint) -> &'a mut [T] {\n+    fn slice_mut(self, start: uint, end: uint) -> &'a mut [T] {\n         assert!(start <= end);\n         assert!(end <= self.len());\n         unsafe {\n@@ -713,18 +766,18 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n     }\n \n     #[inline]\n-    fn mut_slice_from(self, start: uint) -> &'a mut [T] {\n+    fn slice_from_mut(self, start: uint) -> &'a mut [T] {\n         let len = self.len();\n         self.mut_slice(start, len)\n     }\n \n     #[inline]\n-    fn mut_slice_to(self, end: uint) -> &'a mut [T] {\n+    fn slice_to_mut(self, end: uint) -> &'a mut [T] {\n         self.mut_slice(0, end)\n     }\n \n     #[inline]\n-    fn mut_split_at(self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n+    fn split_at_mut(self, mid: uint) -> (&'a mut [T], &'a mut [T]) {\n         unsafe {\n             let len = self.len();\n             let self2: &'a mut [T] = mem::transmute_copy(&self);\n@@ -733,7 +786,7 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n     }\n \n     #[inline]\n-    fn mut_iter(self) -> MutItems<'a, T> {\n+    fn iter_mut(self) -> MutItems<'a, T> {\n         unsafe {\n             let p = self.as_mut_ptr();\n             if mem::size_of::<T>() == 0 {\n@@ -751,19 +804,19 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n     }\n \n     #[inline]\n-    fn mut_last(self) -> Option<&'a mut T> {\n+    fn last_mut(self) -> Option<&'a mut T> {\n         let len = self.len();\n         if len == 0 { return None; }\n         Some(&mut self[len - 1])\n     }\n \n     #[inline]\n-    fn mut_split(self, pred: |&T|: 'a -> bool) -> MutSplits<'a, T> {\n+    fn split_mut(self, pred: |&T|: 'a -> bool) -> MutSplits<'a, T> {\n         MutSplits { v: self, pred: pred, finished: false }\n     }\n \n     #[inline]\n-    fn mut_chunks(self, chunk_size: uint) -> MutChunks<'a, T> {\n+    fn chunks_mut(self, chunk_size: uint) -> MutChunks<'a, T> {\n         assert!(chunk_size > 0);\n         MutChunks { v: self, chunk_size: chunk_size }\n     }\n@@ -817,7 +870,7 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n     }\n \n     #[inline]\n-    unsafe fn unsafe_mut_ref(self, index: uint) -> &'a mut T {\n+    unsafe fn unsafe_mut(self, index: uint) -> &'a mut T {\n         transmute((self.repr().data as *mut T).offset(index as int))\n     }\n "}, {"sha": "5559f222fe219d906782c8788e3c3a47b12ec756", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -32,7 +32,7 @@ trait HomogeneousTuple3<T> {\n     fn as_slice<'a>(&'a self) -> &'a [T];\n     fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T];\n     fn iter<'a>(&'a self) -> Items<'a, T>;\n-    fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T>;\n+    fn iter_mut<'a>(&'a mut self) -> MutItems<'a, T>;\n     fn get<'a>(&'a self, index: uint) -> Option<&'a T>;\n     fn get_mut<'a>(&'a mut self, index: uint) -> Option<&'a mut T>;\n }\n@@ -63,7 +63,7 @@ impl<T> HomogeneousTuple3<T> for (T, T, T) {\n         slice.iter()\n     }\n \n-    fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n+    fn iter_mut<'a>(&'a mut self) -> MutItems<'a, T> {\n         self.as_mut_slice().mut_iter()\n     }\n "}, {"sha": "4a58f4e75de705467758da9db0385adb91b07864", "filename": "src/libstd/collections/hashmap/map.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -1193,6 +1193,12 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n         Entries { inner: self.table.iter() }\n     }\n \n+    /// Deprecated: use `iter_mut`.\n+    #[deprecated = \"use iter_mut\"]\n+    pub fn mut_iter(&mut self) -> MutEntries<K, V> {\n+        self.iter_mut()\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order,\n     /// with mutable references to the values.\n     /// Iterator element type is `(&'a K, &'a mut V)`.\n@@ -1216,10 +1222,16 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n-    pub fn mut_iter(&mut self) -> MutEntries<K, V> {\n+    pub fn iter_mut(&mut self) -> MutEntries<K, V> {\n         MutEntries { inner: self.table.mut_iter() }\n     }\n \n+    /// Deprecated: use `into_iter`.\n+    #[deprecated = \"use into_iter\"]\n+    pub fn move_iter(self) -> MoveEntries<K, V> {\n+        self.into_iter()\n+    }\n+\n     /// Creates a consuming iterator, that is, one that moves each key-value\n     /// pair out of the map in arbitrary order. The map cannot be used after\n     /// calling this.\n@@ -1237,7 +1249,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// // Not possible with .iter()\n     /// let vec: Vec<(&str, int)> = map.move_iter().collect();\n     /// ```\n-    pub fn move_iter(self) -> MoveEntries<K, V> {\n+    pub fn into_iter(self) -> MoveEntries<K, V> {\n         MoveEntries {\n             inner: self.table.move_iter().map(|(_, k, v)| (k, v))\n         }"}, {"sha": "33e760f11cea44e7bdedbcc22a9a203d2c9d105e", "filename": "src/libstd/collections/hashmap/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -674,14 +674,14 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n-    pub fn mut_iter(&mut self) -> MutEntries<K, V> {\n+    pub fn iter_mut(&mut self) -> MutEntries<K, V> {\n         MutEntries {\n             iter: self.raw_buckets(),\n             elems_left: self.size(),\n         }\n     }\n \n-    pub fn move_iter(self) -> MoveEntries<K, V> {\n+    pub fn into_iter(self) -> MoveEntries<K, V> {\n         MoveEntries {\n             iter: self.raw_buckets(),\n             table: self,"}, {"sha": "76f86d66ff5465fdda123a30d43fd8747b90b304", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -265,7 +265,7 @@ impl<W: Writer> Writer for LineBufferedWriter<W> {\n struct InternalBufferedWriter<W>(BufferedWriter<W>);\n \n impl<W> InternalBufferedWriter<W> {\n-    fn get_mut_ref<'a>(&'a mut self) -> &'a mut BufferedWriter<W> {\n+    fn get_mut<'a>(&'a mut self) -> &'a mut BufferedWriter<W> {\n         let InternalBufferedWriter(ref mut w) = *self;\n         return w;\n     }"}, {"sha": "e46f52b3ad7b97dfea5438c787fb6c7fc06ae23c", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8dfe1957b6541de8fe2797e248fe4bd2fac02d9/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=d8dfe1957b6541de8fe2797e248fe4bd2fac02d9", "patch": "@@ -449,7 +449,7 @@ enum Flavor<T> {\n #[doc(hidden)]\n trait UnsafeFlavor<T> {\n     fn inner_unsafe<'a>(&'a self) -> &'a UnsafeCell<Flavor<T>>;\n-    unsafe fn mut_inner<'a>(&'a self) -> &'a mut Flavor<T> {\n+    unsafe fn inner_mut<'a>(&'a self) -> &'a mut Flavor<T> {\n         &mut *self.inner_unsafe().get()\n     }\n     unsafe fn inner<'a>(&'a self) -> &'a Flavor<T> {"}]}