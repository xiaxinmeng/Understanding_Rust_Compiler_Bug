{"sha": "7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTAxZjBmNmFmNjc4YWEwYTA4MWVhMWMzMmQzYWZhN2QxYmQ2NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-27T13:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-27T13:04:14Z"}, "message": "Auto merge of #4137 - euclio:let-return, r=oli-obk\n\ntweak `let_and_return` diagnostic\n\nchangelog: `let_and_return`: label the unnecessary let binding and convert the note to a structured\nsuggestion", "tree": {"sha": "0153d70efb66ddb15ba67788ba480866cadef7d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0153d70efb66ddb15ba67788ba480866cadef7d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "html_url": "https://github.com/rust-lang/rust/commit/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0a2884d2caba68c71f3ca2edbe2653bd2369b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0a2884d2caba68c71f3ca2edbe2653bd2369b1", "html_url": "https://github.com/rust-lang/rust/commit/eb0a2884d2caba68c71f3ca2edbe2653bd2369b1"}, {"sha": "effea41fe4c27a570985d018eb9981dc550bd055", "url": "https://api.github.com/repos/rust-lang/rust/commits/effea41fe4c27a570985d018eb9981dc550bd055", "html_url": "https://github.com/rust-lang/rust/commit/effea41fe4c27a570985d018eb9981dc550bd055"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "8976d73fc9a240effeb2cfb9e3623f359bbf59c7", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use syntax::visit::FnKind;\n use syntax_pos::BytePos;\n \n-use crate::utils::{in_macro_or_desugar, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{in_macro_or_desugar, match_path_ast, snippet_opt, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block.\n@@ -164,13 +164,28 @@ impl Return {\n             if match_path_ast(path, &[&*ident.name.as_str()]);\n             if !in_external_macro(cx.sess(), initexpr.span);\n             then {\n-                    span_note_and_lint(cx,\n-                                       LET_AND_RETURN,\n-                                       retexpr.span,\n-                                       \"returning the result of a let binding from a block. \\\n-                                       Consider returning the expression directly.\",\n-                                       initexpr.span,\n-                                       \"this expression can be directly returned\");\n+                span_lint_and_then(\n+                    cx,\n+                    LET_AND_RETURN,\n+                    retexpr.span,\n+                    \"returning the result of a let binding from a block\",\n+                    |err| {\n+                        err.span_label(local.span, \"unnecessary let binding\");\n+\n+                        if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n+                            err.multipart_suggestion(\n+                                \"return the expression directly\",\n+                                vec![\n+                                    (local.span, String::new()),\n+                                    (retexpr.span, snippet),\n+                                ],\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.span_help(initexpr.span, \"this expression can be directly returned\");\n+                        }\n+                    },\n+                );\n             }\n         }\n     }"}, {"sha": "74d070dc4b28a663e085acf9f409503a0bffee54", "filename": "tests/ui/author/matches.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/tests%2Fui%2Fauthor%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/tests%2Fui%2Fauthor%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stderr?ref=7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "patch": "@@ -1,15 +1,17 @@\n-error: returning the result of a let binding from a block. Consider returning the expression directly.\n+error: returning the result of a let binding from a block\n   --> $DIR/matches.rs:9:13\n    |\n+LL |             let x = 3;\n+   |             ---------- unnecessary let binding\n LL |             x\n    |             ^\n    |\n    = note: `-D clippy::let-and-return` implied by `-D warnings`\n-note: this expression can be directly returned\n-  --> $DIR/matches.rs:8:21\n+help: return the expression directly\n+   |\n+LL |             \n+LL |             3\n    |\n-LL |             let x = 3;\n-   |                     ^\n \n error: aborting due to previous error\n "}, {"sha": "319f45c0a8a0b071ce168aac260ac0b85bc429b4", "filename": "tests/ui/let_return.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b501f0f6af678aa0a081ea1c32d3afa7d1bd641/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=7b501f0f6af678aa0a081ea1c32d3afa7d1bd641", "patch": "@@ -1,27 +1,30 @@\n-error: returning the result of a let binding from a block. Consider returning the expression directly.\n+error: returning the result of a let binding from a block\n   --> $DIR/let_return.rs:7:5\n    |\n+LL |     let x = 5;\n+   |     ---------- unnecessary let binding\n LL |     x\n    |     ^\n    |\n    = note: `-D clippy::let-and-return` implied by `-D warnings`\n-note: this expression can be directly returned\n-  --> $DIR/let_return.rs:6:13\n+help: return the expression directly\n+   |\n+LL |     \n+LL |     5\n    |\n-LL |     let x = 5;\n-   |             ^\n \n-error: returning the result of a let binding from a block. Consider returning the expression directly.\n+error: returning the result of a let binding from a block\n   --> $DIR/let_return.rs:13:9\n    |\n+LL |         let x = 5;\n+   |         ---------- unnecessary let binding\n LL |         x\n    |         ^\n+help: return the expression directly\n    |\n-note: this expression can be directly returned\n-  --> $DIR/let_return.rs:12:17\n+LL |         \n+LL |         5\n    |\n-LL |         let x = 5;\n-   |                 ^\n \n error: aborting due to 2 previous errors\n "}]}