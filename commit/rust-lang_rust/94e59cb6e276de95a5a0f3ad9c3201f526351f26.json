{"sha": "94e59cb6e276de95a5a0f3ad9c3201f526351f26", "node_id": "C_kwDOAAsO6NoAKDk0ZTU5Y2I2ZTI3NmRlOTVhNWEwZjNhZDljMzIwMWY1MjYzNTFmMjY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-01-28T15:07:21Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-01-28T15:07:57Z"}, "message": "Rename `is_object_safe` to `check_is_object_safe` to hint side effects", "tree": {"sha": "20c9009e76a6e45c88174319b72654f13bce106f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20c9009e76a6e45c88174319b72654f13bce106f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e59cb6e276de95a5a0f3ad9c3201f526351f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e59cb6e276de95a5a0f3ad9c3201f526351f26", "html_url": "https://github.com/rust-lang/rust/commit/94e59cb6e276de95a5a0f3ad9c3201f526351f26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e59cb6e276de95a5a0f3ad9c3201f526351f26/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6de40b536f6d592de3d0a00626a4dc595d40078", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6de40b536f6d592de3d0a00626a4dc595d40078", "html_url": "https://github.com/rust-lang/rust/commit/d6de40b536f6d592de3d0a00626a4dc595d40078"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "d0637a694e4c8a8c4dcb91d7faa945106368d734", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -834,7 +834,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         _ => {}\n     }\n     if !trait_should_be_self.is_empty() {\n-        if tcx.is_object_safe(trait_def_id) {\n+        if tcx.check_is_object_safe(trait_def_id) {\n             return;\n         }\n         let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();"}, {"sha": "bbde59c953a026375ef708e93141d0691d3fd2c5", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -169,7 +169,7 @@ fn check_object_overlap<'tcx>(\n         });\n \n         for component_def_id in component_def_ids {\n-            if !tcx.is_object_safe(component_def_id) {\n+            if !tcx.check_is_object_safe(component_def_id) {\n                 // Without the 'object_safe_for_dispatch' feature this is an error\n                 // which will be reported by wfcheck. Ignore it here.\n                 // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`."}, {"sha": "ade9c037c519405d04470edbf8c5741f8e9cba07", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -1823,7 +1823,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         .trait_ref()\n                         .and_then(|t| t.trait_def_id())\n                         .map_or(false, |def_id| {\n-                            fcx.tcx.is_object_safe(def_id)\n+                            fcx.tcx.check_is_object_safe(def_id)\n                         })\n                 })\n             }"}, {"sha": "e90342b8e8efa8bc85912e8fcd3a0290652fd5ec", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -1274,8 +1274,8 @@ rustc_queries! {\n     query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n         desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n     }\n-    query is_object_safe(trait_id: DefId) -> bool {\n-        desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n+    query check_is_object_safe(trait_id: DefId) -> bool {\n+        desc { |tcx| \"checking if trait `{}` is object safe\", tcx.def_path_str(trait_id) }\n     }\n \n     /// Gets the ParameterEnvironment for a given item; this environment"}, {"sha": "ca8463510d54e123206fa2c433d22188b0bebf3b", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -363,7 +363,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     }\n \n     fn compute_object_safe_goal(&mut self, trait_def_id: DefId) -> QueryResult<'tcx> {\n-        if self.tcx().is_object_safe(trait_def_id) {\n+        if self.tcx().check_is_object_safe(trait_def_id) {\n             self.make_canonical_response(Certainty::Yes)\n         } else {\n             Err(NoSolution)"}, {"sha": "db331f946775d2f39e734dce472ab67fadeefc79", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -1749,7 +1749,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let is_object_safe = match ty.kind() {\n             ty::Dynamic(predicates, _, ty::Dyn) => {\n                 // If the `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n-                predicates.principal_def_id().map_or(true, |def_id| self.tcx.is_object_safe(def_id))\n+                predicates\n+                    .principal_def_id()\n+                    .map_or(true, |def_id| self.tcx.check_is_object_safe(def_id))\n             }\n             // We only want to suggest `impl Trait` to `dyn Trait`s.\n             // For example, `fn foo() -> str` needs to be filtered out."}, {"sha": "18d30771035fdbcebf4bdf961ff9bbccd2993ed1", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ObjectSafe(trait_def_id) => {\n-                    if !self.selcx.tcx().is_object_safe(trait_def_id) {\n+                    if !self.selcx.tcx().check_is_object_safe(trait_def_id) {\n                         ProcessResult::Error(CodeSelectionError(Unimplemented))\n                     } else {\n                         ProcessResult::Changed(vec![])"}, {"sha": "565cfca9090e19c2c5e41d7d24fd0eb874661733", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -62,7 +62,7 @@ fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> &'_ [Object\n     )\n }\n \n-fn is_object_safe(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n+fn check_is_object_safe(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n     let violations = tcx.object_safety_violations(trait_def_id);\n \n     if violations.is_empty() {\n@@ -884,5 +884,6 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { object_safety_violations, is_object_safe, ..*providers };\n+    *providers =\n+        ty::query::Providers { object_safety_violations, check_is_object_safe, ..*providers };\n }"}, {"sha": "7b7abcf552ab7da31b513f5346fbad37e814113a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -466,7 +466,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if let Some(principal) = data.principal() {\n                         if !self.infcx.tcx.features().object_safe_for_dispatch {\n                             principal.with_self_ty(self.tcx(), self_ty)\n-                        } else if self.tcx().is_object_safe(principal.def_id()) {\n+                        } else if self.tcx().check_is_object_safe(principal.def_id()) {\n                             principal.with_self_ty(self.tcx(), self_ty)\n                         } else {\n                             return;"}, {"sha": "9c84bfaad492bce593d072a43b55c36bda4c707d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -1009,7 +1009,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // `T` -> `Trait`\n             (_, &ty::Dynamic(ref data, r, ty::Dyn)) => {\n                 let mut object_dids = data.auto_traits().chain(data.principal_def_id());\n-                if let Some(did) = object_dids.find(|did| !tcx.is_object_safe(*did)) {\n+                if let Some(did) = object_dids.find(|did| !tcx.check_is_object_safe(*did)) {\n                     return Err(TraitNotObjectSafe(did));\n                 }\n "}, {"sha": "b8f5aeee2d593f4386107e3d11b4f9a2144cffa4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -797,7 +797,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ObjectSafe(trait_def_id) => {\n-                    if self.tcx().is_object_safe(trait_def_id) {\n+                    if self.tcx().check_is_object_safe(trait_def_id) {\n                         Ok(EvaluatedToOk)\n                     } else {\n                         Ok(EvaluatedToErr)"}, {"sha": "84f7e8362081871f9321492d60eaef815efeee43", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e59cb6e276de95a5a0f3ad9c3201f526351f26/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=94e59cb6e276de95a5a0f3ad9c3201f526351f26", "patch": "@@ -580,7 +580,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     }\n \n     fn is_object_safe(&self, trait_id: chalk_ir::TraitId<RustInterner<'tcx>>) -> bool {\n-        self.interner.tcx.is_object_safe(trait_id.0)\n+        self.interner.tcx.check_is_object_safe(trait_id.0)\n     }\n \n     fn hidden_opaque_type("}]}