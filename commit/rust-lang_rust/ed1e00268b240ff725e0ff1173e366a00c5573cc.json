{"sha": "ed1e00268b240ff725e0ff1173e366a00c5573cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMWUwMDI2OGIyNDBmZjcyNWUwZmYxMTczZTM2NmEwMGM1NTczY2M=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T01:41:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T08:25:27Z"}, "message": "Enforce the weakened shadowing restriction.", "tree": {"sha": "191c3c8a22569c8d1359de5d51e1008208fb1db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191c3c8a22569c8d1359de5d51e1008208fb1db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1e00268b240ff725e0ff1173e366a00c5573cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1e00268b240ff725e0ff1173e366a00c5573cc", "html_url": "https://github.com/rust-lang/rust/commit/ed1e00268b240ff725e0ff1173e366a00c5573cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1e00268b240ff725e0ff1173e366a00c5573cc/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72544afd71a8f5ba86aeae7c1c2950816dc992b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72544afd71a8f5ba86aeae7c1c2950816dc992b4", "html_url": "https://github.com/rust-lang/rust/commit/72544afd71a8f5ba86aeae7c1c2950816dc992b4"}], "stats": {"total": 85, "additions": 68, "deletions": 17}, "files": [{"sha": "2bf517600b73d693321e6487886a20167ab5a5e0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ed1e00268b240ff725e0ff1173e366a00c5573cc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1e00268b240ff725e0ff1173e366a00c5573cc/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ed1e00268b240ff725e0ff1173e366a00c5573cc", "patch": "@@ -13,6 +13,7 @@\n //! Here we build the \"reduced graph\": the graph of the module tree without\n //! any imports resolved.\n \n+use macros;\n use resolve_imports::ImportDirectiveSubclass::{self, GlobImport};\n use {Module, ModuleS, ModuleKind};\n use Namespace::{self, TypeNS, ValueNS};\n@@ -39,6 +40,7 @@ use syntax::ast::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::ext::base::{MultiItemModifier, Resolver as SyntaxResolver};\n use syntax::ext::hygiene::Mark;\n use syntax::feature_gate::{self, emit_feature_err};\n+use syntax::ext::tt::macro_rules;\n use syntax::parse::token::keywords;\n use syntax::visit::{self, Visitor};\n \n@@ -77,7 +79,7 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Constructs the reduced graph for one item.\n-    fn build_reduced_graph_for_item(&mut self, item: &Item) {\n+    fn build_reduced_graph_for_item(&mut self, item: &Item, expansion: Mark) {\n         let parent = self.current_module;\n         let name = item.ident.name;\n         let sp = item.span;\n@@ -188,9 +190,28 @@ impl<'b> Resolver<'b> {\n                 // We need to error on `#[macro_use] extern crate` when it isn't at the\n                 // crate root, because `$crate` won't work properly.\n                 let is_crate_root = self.current_module.parent.is_none();\n-                for def in self.crate_loader.load_macros(item, is_crate_root) {\n-                    match def.kind {\n-                        LoadedMacroKind::Def(def) => self.add_macro(Mark::root(), def),\n+                for loaded_macro in self.crate_loader.load_macros(item, is_crate_root) {\n+                    match loaded_macro.kind {\n+                        LoadedMacroKind::Def(mut def) => {\n+                            let name = def.ident.name;\n+                            if def.use_locally {\n+                                let ext = macro_rules::compile(&self.session.parse_sess, &def);\n+                                let shadowing =\n+                                    self.resolve_macro_name(Mark::root(), name, false).is_some();\n+                                self.expansion_data[&Mark::root()].module.macros.borrow_mut()\n+                                    .insert(name, macros::NameBinding {\n+                                        ext: Rc::new(ext),\n+                                        expansion: expansion,\n+                                        shadowing: shadowing,\n+                                        span: loaded_macro.import_site,\n+                                    });\n+                                self.macro_names.insert(name);\n+                            }\n+                            if def.export {\n+                                def.id = self.next_node_id();\n+                                self.exported_macros.push(def);\n+                            }\n+                        }\n                         LoadedMacroKind::CustomDerive(name, ext) => {\n                             self.insert_custom_derive(&name, ext, item.span);\n                         }\n@@ -527,6 +548,7 @@ impl<'b> Resolver<'b> {\n \n pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n     pub resolver: &'a mut Resolver<'b>,\n+    pub expansion: Mark,\n }\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n@@ -562,7 +584,7 @@ impl<'a, 'b> Visitor for BuildReducedGraphVisitor<'a, 'b> {\n         }\n \n         let parent = self.resolver.current_module;\n-        self.resolver.build_reduced_graph_for_item(item);\n+        self.resolver.build_reduced_graph_for_item(item, self.expansion);\n         visit::walk_item(self, item);\n         self.resolver.current_module = parent;\n     }"}, {"sha": "ab6b0f24338ff4c3ff4c4bcd77248bb836a85663", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed1e00268b240ff725e0ff1173e366a00c5573cc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1e00268b240ff725e0ff1173e366a00c5573cc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ed1e00268b240ff725e0ff1173e366a00c5573cc", "patch": "@@ -1073,6 +1073,7 @@ pub struct Resolver<'a> {\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n     ambiguity_errors: Vec<AmbiguityError<'a>>,\n+    macro_shadowing_errors: FnvHashSet<Span>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1248,6 +1249,7 @@ impl<'a> Resolver<'a> {\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n+            macro_shadowing_errors: FnvHashSet(),\n \n             arenas: arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {"}, {"sha": "55f077b4d9ac333b6c18aecd744fb79dbb3b389b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ed1e00268b240ff725e0ff1173e366a00c5573cc/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1e00268b240ff725e0ff1173e366a00c5573cc/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=ed1e00268b240ff725e0ff1173e366a00c5573cc", "patch": "@@ -22,10 +22,14 @@ use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ext::tt::macro_rules;\n use syntax::parse::token::intern;\n use syntax::util::lev_distance::find_best_match_for_name;\n+use syntax_pos::{Span, DUMMY_SP};\n \n // FIXME(jseyfried) Merge with `::NameBinding`.\n pub struct NameBinding {\n-    ext: Rc<SyntaxExtension>,\n+    pub ext: Rc<SyntaxExtension>,\n+    pub expansion: Mark,\n+    pub shadowing: bool,\n+    pub span: Span,\n }\n \n #[derive(Clone)]\n@@ -69,24 +73,26 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         self.collect_def_ids(mark, expansion);\n         self.current_module = self.expansion_data[&mark].module;\n-        expansion.visit_with(&mut BuildReducedGraphVisitor { resolver: self });\n+        expansion.visit_with(&mut BuildReducedGraphVisitor { resolver: self, expansion: mark });\n     }\n \n     fn add_macro(&mut self, scope: Mark, mut def: ast::MacroDef) {\n         if &def.ident.name.as_str() == \"macro_rules\" {\n             self.session.span_err(def.span, \"user-defined macros may not be named `macro_rules`\");\n         }\n         if def.use_locally {\n-            self.macro_names.insert(def.ident.name);\n-            let ext = macro_rules::compile(&self.session.parse_sess, &def);\n-\n-            let mut module = self.expansion_data[&scope].module;\n+            let ExpansionData { mut module, backtrace, .. } = self.expansion_data[&scope];\n             while module.macros_escape {\n                 module = module.parent.unwrap();\n             }\n-            module.macros.borrow_mut().insert(def.ident.name, NameBinding {\n-                ext: Rc::new(ext),\n-            });\n+            let binding = NameBinding {\n+                ext: Rc::new(macro_rules::compile(&self.session.parse_sess, &def)),\n+                expansion: backtrace.data().prev_ctxt.data().outer_mark,\n+                shadowing: self.resolve_macro_name(scope, def.ident.name, false).is_some(),\n+                span: def.span,\n+            };\n+            module.macros.borrow_mut().insert(def.ident.name, binding);\n+            self.macro_names.insert(def.ident.name);\n         }\n         if def.export {\n             def.id = self.next_node_id();\n@@ -100,6 +106,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n         }\n         self.graph_root.macros.borrow_mut().insert(ident.name, NameBinding {\n             ext: ext,\n+            expansion: Mark::root(),\n+            shadowing: false,\n+            span: DUMMY_SP,\n         });\n     }\n \n@@ -138,7 +147,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { ref attr, .. } => (intern(&*attr.name()), attr.span),\n         };\n \n-        self.resolve_macro_name(scope, name).or_else(|| {\n+        self.resolve_macro_name(scope, name, true).or_else(|| {\n             let mut err =\n                 self.session.struct_span_err(span, &format!(\"macro undefined: '{}!'\", name));\n             self.suggest_macro_name(&name.as_str(), &mut err);\n@@ -153,10 +162,28 @@ impl<'a> base::Resolver for Resolver<'a> {\n }\n \n impl<'a> Resolver<'a> {\n-    fn resolve_macro_name(&mut self, scope: Mark, name: ast::Name) -> Option<Rc<SyntaxExtension>> {\n-        let mut module = self.expansion_data[&scope].module;\n+    pub fn resolve_macro_name(&mut self, scope: Mark, name: ast::Name, record_used: bool)\n+                              -> Option<Rc<SyntaxExtension>> {\n+        let ExpansionData { mut module, backtrace, .. } = self.expansion_data[&scope];\n         loop {\n             if let Some(binding) = module.macros.borrow().get(&name) {\n+                let mut backtrace = backtrace.data();\n+                while binding.expansion != backtrace.outer_mark {\n+                    if backtrace.outer_mark != Mark::root() {\n+                        backtrace = backtrace.prev_ctxt.data();\n+                        continue\n+                    }\n+\n+                    if record_used && binding.shadowing &&\n+                       self.macro_shadowing_errors.insert(binding.span) {\n+                        let msg = format!(\"`{}` is already in scope\", name);\n+                        self.session.struct_span_err(binding.span, &msg)\n+                            .note(\"macro-expanded `macro_rules!`s and `#[macro_use]`s \\\n+                                   may not shadow existing macros (see RFC 1560)\")\n+                            .emit();\n+                    }\n+                    break\n+                }\n                 return Some(binding.ext.clone());\n             }\n             match module.parent {"}]}