{"sha": "527292a1a697c8831fc1ec01b1047ecebc10f809", "node_id": "C_kwDOAAsO6NoAKDUyNzI5MmExYTY5N2M4ODMxZmMxZWMwMWIxMDQ3ZWNlYmMxMGY4MDk", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-16T02:24:14Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-16T02:24:14Z"}, "message": "do not suggest a placeholder to const and static without a type", "tree": {"sha": "bf0afe4c72b4c7fd2684d2818063472f1589c5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0afe4c72b4c7fd2684d2818063472f1589c5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527292a1a697c8831fc1ec01b1047ecebc10f809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527292a1a697c8831fc1ec01b1047ecebc10f809", "html_url": "https://github.com/rust-lang/rust/commit/527292a1a697c8831fc1ec01b1047ecebc10f809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527292a1a697c8831fc1ec01b1047ecebc10f809/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44197abb0b3ffe4908892e1e08ab1cd721ff3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44197abb0b3ffe4908892e1e08ab1cd721ff3b9", "html_url": "https://github.com/rust-lang/rust/commit/b44197abb0b3ffe4908892e1e08ab1cd721ff3b9"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "d89b3da049ce0e6ebc559a0d5d939e7c04ffd60c", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527292a1a697c8831fc1ec01b1047ecebc10f809/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527292a1a697c8831fc1ec01b1047ecebc10f809/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=527292a1a697c8831fc1ec01b1047ecebc10f809", "patch": "@@ -637,6 +637,10 @@ impl Handler {\n         inner.steal((span, key)).map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n     }\n \n+    pub fn has_stashed_diagnostic(&self, span: Span, key: StashKey) -> bool {\n+        self.inner.borrow().stashed_diagnostics.get(&(span, key)).is_some()\n+    }\n+\n     /// Emit all stashed diagnostics.\n     pub fn emit_stashed_diagnostics(&self) -> Option<ErrorGuaranteed> {\n         self.inner.borrow_mut().emit_stashed_diagnostics()"}, {"sha": "8f5b4815cf8b44980294e8d0f5e3840ebc5fe0c5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/527292a1a697c8831fc1ec01b1047ecebc10f809/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527292a1a697c8831fc1ec01b1047ecebc10f809/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=527292a1a697c8831fc1ec01b1047ecebc10f809", "patch": "@@ -25,7 +25,7 @@ use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -852,12 +852,14 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             tcx.ensure().type_of(trait_item_id.def_id);\n         }\n \n-        hir::TraitItemKind::Const(..) => {\n+        hir::TraitItemKind::Const(hir_ty, _) => {\n             tcx.ensure().type_of(trait_item_id.def_id);\n             // Account for `const C: _;`.\n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, visitor.0, false, None, \"constant\");\n+            if !tcx.sess.diagnostic().has_stashed_diagnostic(hir_ty.span, StashKey::ItemNoType) {\n+                placeholder_type_error(tcx, None, visitor.0, false, None, \"constant\");\n+            }\n         }\n \n         hir::TraitItemKind::Type(_, Some(_)) => {"}, {"sha": "97e0b213f2e7913ab6923bb5c5aaabc88b36de03", "filename": "src/test/ui/typeck/do-not-suggest-placeholder-to-const-static-without-type.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/527292a1a697c8831fc1ec01b1047ecebc10f809/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527292a1a697c8831fc1ec01b1047ecebc10f809/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.rs?ref=527292a1a697c8831fc1ec01b1047ecebc10f809", "patch": "@@ -0,0 +1,8 @@\n+trait Foo {\n+    const A; //~ ERROR missing type for `const` item\n+    static B;\n+    //~^ ERROR associated `static` items are not allowed\n+    //~| ERROR missing type for `static` item\n+}\n+\n+fn main() {}"}, {"sha": "8982d6285617d911e962cfc2d08ecbb6ccbba4dd", "filename": "src/test/ui/typeck/do-not-suggest-placeholder-to-const-static-without-type.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/527292a1a697c8831fc1ec01b1047ecebc10f809/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/527292a1a697c8831fc1ec01b1047ecebc10f809/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-placeholder-to-const-static-without-type.stderr?ref=527292a1a697c8831fc1ec01b1047ecebc10f809", "patch": "@@ -0,0 +1,20 @@\n+error: associated `static` items are not allowed\n+  --> $DIR/do-not-suggest-placeholder-to-const-static-without-type.rs:3:5\n+   |\n+LL |     static B;\n+   |     ^^^^^^^^^\n+\n+error: missing type for `const` item\n+  --> $DIR/do-not-suggest-placeholder-to-const-static-without-type.rs:2:12\n+   |\n+LL |     const A;\n+   |            ^ help: provide a type for the item: `: <type>`\n+\n+error: missing type for `static` item\n+  --> $DIR/do-not-suggest-placeholder-to-const-static-without-type.rs:3:13\n+   |\n+LL |     static B;\n+   |             ^ help: provide a type for the item: `: <type>`\n+\n+error: aborting due to 3 previous errors\n+"}]}