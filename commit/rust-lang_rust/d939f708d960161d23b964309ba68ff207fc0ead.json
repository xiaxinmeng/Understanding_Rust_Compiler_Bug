{"sha": "d939f708d960161d23b964309ba68ff207fc0ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzlmNzA4ZDk2MDE2MWQyM2I5NjQzMDliYTY4ZmYyMDdmYzBlYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-18T03:08:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-18T03:08:52Z"}, "message": "Auto merge of #68915 - timvermeulen:non_fused_iter, r=Amanieu\n\nFix bugs in Peekable and Flatten when using non-fused iterators\n\nI fixed a couple of bugs with regard to the `Peekable` and `Flatten`/`FlatMap` iterators when the underlying iterator isn't fused. For testing, I also added a `NonFused` iterator wrapper that panics when `next` or `next_back` is called on an iterator that has returned `None` before, which will hopefully make it easier to spot these mistakes in the future.\n\n### Peekable\n\n`Peekable::next_back` was implemented as\n```rust\nself.iter.next_back().or_else(|| self.peeked.take().and_then(|x| x))\n```\nwhich is incorrect because when the `peeked` field is `Some(None)`, then `None` has already been returned from the inner iterator and what it returns from `next_back` can no longer be relied upon. `test_peekable_non_fused` tests this.\n\n### Flatten\n\nWhen a `FlattenCompat` instance only has a `backiter` remaining (i.e. `self.frontiter` is `None` and `self.iter` is empty), then `next` will call `self.iter.next()` every time, so the `iter` field needs to be fused. I fixed it by giving it the type `Fuse<I>` instead of `I`, I think this is the only way to fix it. `test_flatten_non_fused_outer` tests this.\n\nFurthermore, previously `FlattenCompat::next` did not set `self.frontiter` to `None` after it returned `None`, which is incorrect when the inner iterator type isn't fused. I just delegated it to `try_fold` because that already handles it correctly. `test_flatten_non_fused_inner` tests this.\n\nr? @scottmcm", "tree": {"sha": "3d74426fb6f269a3de59ca76a4b1560423b3e265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d74426fb6f269a3de59ca76a4b1560423b3e265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d939f708d960161d23b964309ba68ff207fc0ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d939f708d960161d23b964309ba68ff207fc0ead", "html_url": "https://github.com/rust-lang/rust/commit/d939f708d960161d23b964309ba68ff207fc0ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d939f708d960161d23b964309ba68ff207fc0ead/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5b641e9ef3fc5ed2b9944121f75902f639cb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5b641e9ef3fc5ed2b9944121f75902f639cb0a", "html_url": "https://github.com/rust-lang/rust/commit/ae5b641e9ef3fc5ed2b9944121f75902f639cb0a"}, {"sha": "8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "html_url": "https://github.com/rust-lang/rust/commit/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "4202e52448dcfc358a865fb4cb9fe58d404a870e", "filename": "src/libcore/iter/adapters/flatten.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d939f708d960161d23b964309ba68ff207fc0ead/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d939f708d960161d23b964309ba68ff207fc0ead/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs?ref=d939f708d960161d23b964309ba68ff207fc0ead", "patch": "@@ -1,7 +1,7 @@\n use crate::fmt;\n use crate::ops::Try;\n \n-use super::super::{DoubleEndedIterator, FusedIterator, Iterator};\n+use super::super::{DoubleEndedIterator, Fuse, FusedIterator, Iterator};\n use super::Map;\n \n /// An iterator that maps each element to an iterator, and yields the elements\n@@ -239,14 +239,17 @@ where\n /// this type.\n #[derive(Clone, Debug)]\n struct FlattenCompat<I, U> {\n-    iter: I,\n+    iter: Fuse<I>,\n     frontiter: Option<U>,\n     backiter: Option<U>,\n }\n-impl<I, U> FlattenCompat<I, U> {\n+impl<I, U> FlattenCompat<I, U>\n+where\n+    I: Iterator,\n+{\n     /// Adapts an iterator by flattening it, for use in `flatten()` and `flat_map()`.\n     fn new(iter: I) -> FlattenCompat<I, U> {\n-        FlattenCompat { iter, frontiter: None, backiter: None }\n+        FlattenCompat { iter: iter.fuse(), frontiter: None, backiter: None }\n     }\n }\n \n@@ -261,8 +264,9 @@ where\n     fn next(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.frontiter {\n-                if let elt @ Some(_) = inner.next() {\n-                    return elt;\n+                match inner.next() {\n+                    None => self.frontiter = None,\n+                    elt @ Some(_) => return elt,\n                 }\n             }\n             match self.iter.next() {\n@@ -348,8 +352,9 @@ where\n     fn next_back(&mut self) -> Option<U::Item> {\n         loop {\n             if let Some(ref mut inner) = self.backiter {\n-                if let elt @ Some(_) = inner.next_back() {\n-                    return elt;\n+                match inner.next_back() {\n+                    None => self.backiter = None,\n+                    elt @ Some(_) => return elt,\n                 }\n             }\n             match self.iter.next_back() {"}, {"sha": "3c0ddcb2bc871022d9a7bd1d2372d3ece86bbdc8", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d939f708d960161d23b964309ba68ff207fc0ead/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d939f708d960161d23b964309ba68ff207fc0ead/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=d939f708d960161d23b964309ba68ff207fc0ead", "patch": "@@ -1480,7 +1480,11 @@ where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<Self::Item> {\n-        self.iter.next_back().or_else(|| self.peeked.take().and_then(|x| x))\n+        match self.peeked.as_mut() {\n+            Some(v @ Some(_)) => self.iter.next_back().or_else(|| v.take()),\n+            Some(None) => None,\n+            None => self.iter.next_back(),\n+        }\n     }\n \n     #[inline]"}, {"sha": "98e3eeb982bde665ec826959a60db1ac6580e064", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d939f708d960161d23b964309ba68ff207fc0ead/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d939f708d960161d23b964309ba68ff207fc0ead/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=d939f708d960161d23b964309ba68ff207fc0ead", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n@@ -2940,3 +2942,73 @@ fn test_partition() {\n     check(xs, |&x| x < 3, 3); // small\n     check(xs, |&x| x > 6, 3); // large\n }\n+\n+/// An iterator that panics whenever `next` or next_back` is called\n+/// after `None` has already been returned. This does not violate\n+/// `Iterator`'s contract. Used to test that iterator adaptors don't\n+/// poll their inner iterators after exhausting them.\n+struct NonFused<I> {\n+    iter: I,\n+    done: bool,\n+}\n+\n+impl<I> NonFused<I> {\n+    fn new(iter: I) -> Self {\n+        Self { iter, done: false }\n+    }\n+}\n+\n+impl<I> Iterator for NonFused<I>\n+where\n+    I: Iterator,\n+{\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        assert!(!self.done, \"this iterator has already returned None\");\n+        self.iter.next().or_else(|| {\n+            self.done = true;\n+            None\n+        })\n+    }\n+}\n+\n+impl<I> DoubleEndedIterator for NonFused<I>\n+where\n+    I: DoubleEndedIterator,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        assert!(!self.done, \"this iterator has already returned None\");\n+        self.iter.next_back().or_else(|| {\n+            self.done = true;\n+            None\n+        })\n+    }\n+}\n+\n+#[test]\n+fn test_peekable_non_fused() {\n+    let mut iter = NonFused::new(empty::<i32>()).peekable();\n+\n+    assert_eq!(iter.peek(), None);\n+    assert_eq!(iter.next_back(), None);\n+}\n+\n+#[test]\n+fn test_flatten_non_fused_outer() {\n+    let mut iter = NonFused::new(once(0..2)).flatten();\n+\n+    assert_eq!(iter.next_back(), Some(1));\n+    assert_eq!(iter.next(), Some(0));\n+    assert_eq!(iter.next(), None);\n+}\n+\n+#[test]\n+fn test_flatten_non_fused_inner() {\n+    let mut iter = once(0..1).chain(once(1..3)).flat_map(NonFused::new);\n+\n+    assert_eq!(iter.next_back(), Some(2));\n+    assert_eq!(iter.next(), Some(0));\n+    assert_eq!(iter.next(), Some(1));\n+    assert_eq!(iter.next(), None);\n+}"}]}