{"sha": "f543770de26849fee46d7974ba9212e402c22151", "node_id": "C_kwDOAAsO6NoAKGY1NDM3NzBkZTI2ODQ5ZmVlNDZkNzk3NGJhOTIxMmU0MDJjMjIxNTE", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-19T15:27:08Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-19T15:27:08Z"}, "message": "rustdoc: Do not filter out `Self: Sized` bounds", "tree": {"sha": "0ed4f6e42426b1db87892ea02d88e4e96796770b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed4f6e42426b1db87892ea02d88e4e96796770b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f543770de26849fee46d7974ba9212e402c22151", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmNQF3MACgkQzXXjHOLP\n19moFA/+OpheiskAsCGpOIy0pJABefhvffy5smIqDxuvOHxGvG2/f45U2LtlZEe7\nlP8uU1hjH+l31IKEqisDfNW3cMCHpy7P+UZ+ExydymVcaodUse+7ki7z6Gr1Kb46\naEg+V7dZe2NM2j5VCItfrylVUShN3aSli3xujvJIekLG435qNhCp9nXw8v3sbJap\ncyOP7kBOWQ18SleVab+tk/UZihcI+292/p/ge4FmttjkXplmNxQJ/lqweXWBiykX\nKHtKExSAmptgsWepXb4zMhmiFhzwvsM8UJunAsF60n0lD5B9Kr9RmGIC7Sf/lf+C\n7xZ9KSJO3y3wuJkgzuvsh00BNCNwYCjniF7lnggnysLRZZpXdIUaiVnuTjqnuOPD\n2kXevHJRadAVqw//ohacm7wmRCqPR0DdDzybug4rV8Pol3KWY/k4lX89Ip3D5HvN\nIi6d0yOPNX3dMHyFmRo47f6DxHTUSBOXH37wudKKDWI8sgrOJcmvQd5hXWoCh/iw\nGft1j2sZG+MJql4888Ueu8mQlMVc6AmIoLO/Wi+bH8oCJnMhukfUvjlxR9spNsAv\n3K2CYGxfA3Nl76wR7iF8YzqVcr3aR/nacv59Pm+Zu+B7gIxcFlHoO4t44o+KSyuD\nUQ4Gr4XK8UXWx6TqoK630avL1j0zIjMRGgPoMynRBm0p4KR0FAk=\n=Fvgy\n-----END PGP SIGNATURE-----", "payload": "tree 0ed4f6e42426b1db87892ea02d88e4e96796770b\nparent e94827e5b09b5b098ea10d0c57a84892fc73b5a7\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666193228 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666193228 +0200\n\nrustdoc: Do not filter out `Self: Sized` bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f543770de26849fee46d7974ba9212e402c22151", "html_url": "https://github.com/rust-lang/rust/commit/f543770de26849fee46d7974ba9212e402c22151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f543770de26849fee46d7974ba9212e402c22151/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "html_url": "https://github.com/rust-lang/rust/commit/e94827e5b09b5b098ea10d0c57a84892fc73b5a7"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "70f8c70877627321278aad386ea5eae0dee47d39", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f543770de26849fee46d7974ba9212e402c22151/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f543770de26849fee46d7974ba9212e402c22151/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f543770de26849fee46d7974ba9212e402c22151", "patch": "@@ -774,31 +774,36 @@ fn clean_ty_generics<'tcx>(\n     let mut where_predicates =\n         where_predicates.into_iter().flat_map(|p| clean_predicate(*p, cx)).collect::<Vec<_>>();\n \n-    // Type parameters have a Sized bound by default unless removed with\n-    // ?Sized. Scan through the predicates and mark any type parameter with\n-    // a Sized bound, removing the bounds as we find them.\n+    // In the surface language, all type parameters except `Self` have an\n+    // implicit `Sized` bound unless removed with `?Sized`.\n+    // However, in the list of where-predicates below, `Sized` appears like a\n+    // normal bound: It's either present (the type is sized) or\n+    // absent (the type is unsized) but never *maybe* (i.e. `?Sized`).\n     //\n-    // Note that associated types also have a sized bound by default, but we\n+    // This is unsuitable for rendering.\n+    // Thus, as a first step remove all `Sized` bounds that should be implicit.\n+    //\n+    // Note that associated types also have an implicit `Sized` bound but we\n     // don't actually know the set of associated types right here so that's\n-    // handled in cleaning associated types\n+    // handled when cleaning associated types.\n     let mut sized_params = FxHashSet::default();\n-    where_predicates.retain(|pred| match *pred {\n-        WherePredicate::BoundPredicate { ty: Generic(ref g), ref bounds, .. } => {\n-            if bounds.iter().any(|b| b.is_sized_bound(cx)) {\n-                sized_params.insert(*g);\n-                false\n-            } else {\n-                true\n-            }\n+    where_predicates.retain(|pred| {\n+        if let WherePredicate::BoundPredicate { ty: Generic(g), bounds, .. } = pred\n+        && *g != kw::SelfUpper\n+        && bounds.iter().any(|b| b.is_sized_bound(cx))\n+        {\n+            sized_params.insert(*g);\n+            false\n+        } else {\n+            true\n         }\n-        _ => true,\n     });\n \n-    // Run through the type parameters again and insert a ?Sized\n-    // unbound for any we didn't find to be Sized.\n+    // As a final step, go through the type parameters again and insert a\n+    // `?Sized` bound for each one we didn't find to be `Sized`.\n     for tp in &stripped_params {\n-        if matches!(tp.kind, types::GenericParamDefKind::Type { .. })\n-            && !sized_params.contains(&tp.name)\n+        if let types::GenericParamDefKind::Type { .. } = tp.kind\n+        && !sized_params.contains(&tp.name)\n         {\n             where_predicates.push(WherePredicate::BoundPredicate {\n                 ty: Type::Generic(tp.name),"}, {"sha": "e7a13acc6f864bd7cc41de40033c6d556ac275e6", "filename": "src/test/rustdoc/inline_cross/auxiliary/issue-24183.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f543770de26849fee46d7974ba9212e402c22151/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fissue-24183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f543770de26849fee46d7974ba9212e402c22151/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fissue-24183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fissue-24183.rs?ref=f543770de26849fee46d7974ba9212e402c22151", "patch": "@@ -0,0 +1,14 @@\n+#![crate_type = \"lib\"]\n+\n+pub trait U/*: ?Sized */ {\n+    fn modified(self) -> Self\n+    where\n+        Self: Sized\n+    {\n+        self\n+    }\n+\n+    fn touch(&self)/* where Self: ?Sized */{}\n+}\n+\n+pub trait S: Sized {}"}, {"sha": "6955a961499ba5a4f73b891f2b77debb6957443b", "filename": "src/test/rustdoc/inline_cross/issue-24183.method_no_where_self_sized.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f543770de26849fee46d7974ba9212e402c22151/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.method_no_where_self_sized.html", "raw_url": "https://github.com/rust-lang/rust/raw/f543770de26849fee46d7974ba9212e402c22151/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.method_no_where_self_sized.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.method_no_where_self_sized.html?ref=f543770de26849fee46d7974ba9212e402c22151", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">fn <a href=\"#method.touch\" class=\"fnname\">touch</a>(&amp;self)</h4>\n\\ No newline at end of file"}, {"sha": "d11b6955f3c0f796d9fd46281404f909c2bc156c", "filename": "src/test/rustdoc/inline_cross/issue-24183.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f543770de26849fee46d7974ba9212e402c22151/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f543770de26849fee46d7974ba9212e402c22151/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-24183.rs?ref=f543770de26849fee46d7974ba9212e402c22151", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+#![crate_name = \"usr\"]\n+\n+// aux-crate:issue_24183=issue-24183.rs\n+// edition: 2021\n+\n+// @has usr/trait.U.html\n+// @has - '//*[@class=\"item-decl\"]' \"pub trait U {\"\n+// @has - '//*[@id=\"method.modified\"]' \\\n+// \"fn modified(self) -> Self\\\n+// where \\\n+//     Self: Sized\"\n+// @snapshot method_no_where_self_sized - '//*[@id=\"method.touch\"]/*[@class=\"code-header\"]'\n+pub use issue_24183::U;\n+\n+// @has usr/trait.S.html\n+// @has - '//*[@class=\"item-decl\"]' 'pub trait S: Sized {'\n+pub use issue_24183::S;"}]}