{"sha": "5118aadee2c45352bea4357649cae682a3ded452", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMThhYWRlZTJjNDUzNTJiZWE0MzU3NjQ5Y2FlNjgyYTNkZWQ0NTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-07T11:32:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-07T11:32:39Z"}, "message": "reenable rustc run pass tests", "tree": {"sha": "680692ce81a9ae1b5fd80152a61ec1c3215bc2ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680692ce81a9ae1b5fd80152a61ec1c3215bc2ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5118aadee2c45352bea4357649cae682a3ded452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5118aadee2c45352bea4357649cae682a3ded452", "html_url": "https://github.com/rust-lang/rust/commit/5118aadee2c45352bea4357649cae682a3ded452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5118aadee2c45352bea4357649cae682a3ded452/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0377990dc6c0d238e750965f017401efec7da4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0377990dc6c0d238e750965f017401efec7da4fc", "html_url": "https://github.com/rust-lang/rust/commit/0377990dc6c0d238e750965f017401efec7da4fc"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "ae0ac1f8adf0b5db3c486b594cbe711876294e31", "filename": "tests/compiletest.rs", "status": "modified", "additions": 58, "deletions": 7, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5118aadee2c45352bea4357649cae682a3ded452/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5118aadee2c45352bea4357649cae682a3ded452/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=5118aadee2c45352bea4357649cae682a3ded452", "patch": "@@ -81,12 +81,63 @@ fn compile_test() {\n     let host = std::str::from_utf8(&host).expect(\"sysroot is not utf8\");\n     let host = host.split(\"\\nhost: \").skip(1).next().expect(\"no host: part in rustc -vV\");\n     let host = host.split(\"\\n\").next().expect(\"no \\n after host\");\n-    run_pass();\n-    for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target, host);\n-        if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n-            miri_pass(&path, &target, host);\n+\n+    if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {\n+        let mut mir_not_found = 0;\n+        let mut crate_not_found = 0;\n+        let mut success = 0;\n+        let mut failed = 0;\n+        for file in std::fs::read_dir(path).unwrap() {\n+            let file = file.unwrap();\n+            let path = file.path();\n+            if !file.metadata().unwrap().is_file() || !path.to_str().unwrap().ends_with(\".rs\") {\n+                continue;\n+            }\n+            let stderr = std::io::stderr();\n+            write!(stderr.lock(), \"test [miri-pass] {} ... \", path.display()).unwrap();\n+            let mut cmd = std::process::Command::new(\"target/debug/miri\");\n+            cmd.arg(path);\n+            let libs = Path::new(&sysroot).join(\"lib\");\n+            let sysroot = libs.join(\"rustlib\").join(&host).join(\"lib\");\n+            let paths = std::env::join_paths(&[libs, sysroot]).unwrap();\n+            cmd.env(compiletest::procsrv::dylib_env_var(), paths);\n+\n+            match cmd.output() {\n+                Ok(ref output) if output.status.success() => {\n+                    success += 1;\n+                    writeln!(stderr.lock(), \"ok\").unwrap()\n+                },\n+                Ok(output) => {\n+                    let output_err = std::str::from_utf8(&output.stderr).unwrap();\n+                    if let Some(text) = output_err.splitn(2, \"no mir for `\").nth(1) {\n+                        mir_not_found += 1;\n+                        let end = text.find('`').unwrap();\n+                        writeln!(stderr.lock(), \"NO MIR FOR `{}`\", &text[..end]).unwrap();\n+                    } else if let Some(text) = output_err.splitn(2, \"can't find crate for `\").nth(1) {\n+                        crate_not_found += 1;\n+                        let end = text.find('`').unwrap();\n+                        writeln!(stderr.lock(), \"CAN'T FIND CRATE FOR `{}`\", &text[..end]).unwrap();\n+                    } else {\n+                        failed += 1;\n+                        writeln!(stderr.lock(), \"FAILED with exit code {:?}\", output.status.code()).unwrap();\n+                        writeln!(stderr.lock(), \"stdout: \\n {}\", std::str::from_utf8(&output.stdout).unwrap()).unwrap();\n+                        writeln!(stderr.lock(), \"stderr: \\n {}\", output_err).unwrap();\n+                    }\n+                }\n+                Err(e) => {\n+                    writeln!(stderr.lock(), \"FAILED: {}\", e).unwrap();\n+                    panic!(\"failed to execute miri\");\n+                },\n+            }\n         }\n-    });\n-    compile_fail(&sysroot);\n+        let stderr = std::io::stderr();\n+        writeln!(stderr.lock(), \"{} success, {} mir not found, {} crate not found, {} failed\", success, mir_not_found, crate_not_found, failed).unwrap();\n+        assert_eq!(failed, 0, \"some tests failed\");\n+    } else {\n+        run_pass();\n+        for_all_targets(&sysroot, |target| {\n+            miri_pass(\"tests/run-pass\", &target, host);\n+        });\n+        compile_fail(&sysroot);\n+    }\n }"}]}