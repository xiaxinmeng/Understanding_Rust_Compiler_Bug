{"sha": "96481b7786fb1a987c2e912769ee5269fffbea0c", "node_id": "C_kwDOAAsO6NoAKDk2NDgxYjc3ODZmYjFhOTg3YzJlOTEyNzY5ZWU1MjY5ZmZmYmVhMGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T10:28:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-16T10:28:52Z"}, "message": "Auto merge of #12773 - Veykril:self-compl, r=Veykril\n\nfix: Improve self param completion applicability\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/9522", "tree": {"sha": "99a2d87cb01540e9a03732d73cfcd1b832c60b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99a2d87cb01540e9a03732d73cfcd1b832c60b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96481b7786fb1a987c2e912769ee5269fffbea0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96481b7786fb1a987c2e912769ee5269fffbea0c", "html_url": "https://github.com/rust-lang/rust/commit/96481b7786fb1a987c2e912769ee5269fffbea0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96481b7786fb1a987c2e912769ee5269fffbea0c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3796adeaaea3d28085c7795ebef39176dc85372", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3796adeaaea3d28085c7795ebef39176dc85372", "html_url": "https://github.com/rust-lang/rust/commit/d3796adeaaea3d28085c7795ebef39176dc85372"}, {"sha": "b96f8f18b072c823aef4571c6d1f95259156503d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96f8f18b072c823aef4571c6d1f95259156503d", "html_url": "https://github.com/rust-lang/rust/commit/b96f8f18b072c823aef4571c6d1f95259156503d"}], "stats": {"total": 142, "additions": 124, "deletions": 18}, "files": [{"sha": "cc6c17450b5d19e29c9993a8edef33abee9768d7", "filename": "crates/ide-completion/src/completions/fn_param.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=96481b7786fb1a987c2e912769ee5269fffbea0c", "patch": "@@ -5,11 +5,11 @@ use ide_db::FxHashMap;\n use syntax::{\n     algo,\n     ast::{self, HasModuleItem},\n-    match_ast, AstNode, Direction, SyntaxKind, TextRange,\n+    match_ast, AstNode, Direction, SyntaxKind, TextRange, TextSize,\n };\n \n use crate::{\n-    context::{ParamKind, PatternContext},\n+    context::{ParamContext, ParamKind, PatternContext},\n     CompletionContext, CompletionItem, CompletionItemKind, Completions,\n };\n \n@@ -24,7 +24,7 @@ pub(crate) fn complete_fn_param(\n     ctx: &CompletionContext,\n     pattern_ctx: &PatternContext,\n ) -> Option<()> {\n-    let ((param_list, _, param_kind), impl_) = match pattern_ctx {\n+    let (ParamContext { param_list, kind, .. }, impl_) = match pattern_ctx {\n         PatternContext { param_ctx: Some(kind), impl_, .. } => (kind, impl_),\n         _ => return None,\n     };\n@@ -43,7 +43,7 @@ pub(crate) fn complete_fn_param(\n         item.add_to(acc)\n     };\n \n-    match param_kind {\n+    match kind {\n         ParamKind::Function(function) => {\n             fill_fn_params(ctx, function, param_list, impl_, add_new_item_to_acc);\n         }\n@@ -105,7 +105,7 @@ fn fill_fn_params(\n     }\n     remove_duplicated(&mut file_params, param_list.params());\n     let self_completion_items = [\"self\", \"&self\", \"mut self\", \"&mut self\"];\n-    if should_add_self_completions(param_list, impl_) {\n+    if should_add_self_completions(ctx.token.text_range().start(), param_list, impl_) {\n         self_completion_items.into_iter().for_each(|self_item| add_new_item_to_acc(self_item));\n     }\n \n@@ -156,10 +156,18 @@ fn remove_duplicated(\n     })\n }\n \n-fn should_add_self_completions(param_list: &ast::ParamList, impl_: &Option<ast::Impl>) -> bool {\n-    let no_params = param_list.params().next().is_none() && param_list.self_param().is_none();\n-\n-    impl_.is_some() && no_params\n+fn should_add_self_completions(\n+    cursor: TextSize,\n+    param_list: &ast::ParamList,\n+    impl_: &Option<ast::Impl>,\n+) -> bool {\n+    if impl_.is_none() || param_list.self_param().is_some() {\n+        return false;\n+    }\n+    match param_list.params().next() {\n+        Some(first) => first.pat().map_or(false, |pat| pat.syntax().text_range().contains(cursor)),\n+        None => true,\n+    }\n }\n \n fn comma_wrapper(ctx: &CompletionContext) -> Option<(impl Fn(&str) -> String, TextRange)> {"}, {"sha": "49b8537029da829e1991d21b00377fa19e9229d3", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=96481b7786fb1a987c2e912769ee5269fffbea0c", "patch": "@@ -438,6 +438,10 @@ impl Test for T {\n             expect![[r#\"\n                 sp Self\n                 st T\n+                bn &mut self\n+                bn &self\n+                bn mut self\n+                bn self\n             \"#]],\n         );\n "}, {"sha": "7c53db9bf28e85f744a001728e9656d6be7c4ba8", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=96481b7786fb1a987c2e912769ee5269fffbea0c", "patch": "@@ -199,7 +199,7 @@ pub(super) enum Qualified {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub(super) struct PatternContext {\n     pub(super) refutability: PatternRefutability,\n-    pub(super) param_ctx: Option<(ast::ParamList, ast::Param, ParamKind)>,\n+    pub(super) param_ctx: Option<ParamContext>,\n     pub(super) has_type_ascription: bool,\n     pub(super) parent_pat: Option<ast::Pat>,\n     pub(super) ref_token: Option<SyntaxToken>,\n@@ -209,6 +209,13 @@ pub(super) struct PatternContext {\n     pub(super) impl_: Option<ast::Impl>,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub(super) struct ParamContext {\n+    pub(super) param_list: ast::ParamList,\n+    pub(super) param: ast::Param,\n+    pub(super) kind: ParamKind,\n+}\n+\n /// The state of the lifetime we are completing.\n #[derive(Debug)]\n pub(super) struct LifetimeContext {"}, {"sha": "fabbbe867ee53106a4b038e66bb316acf36589dc", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=96481b7786fb1a987c2e912769ee5269fffbea0c", "patch": "@@ -13,8 +13,9 @@ use syntax::{\n use crate::context::{\n     AttrCtx, CompletionAnalysis, CompletionContext, DotAccess, DotAccessKind, ExprCtx,\n     ItemListKind, LifetimeContext, LifetimeKind, NameContext, NameKind, NameRefContext,\n-    NameRefKind, ParamKind, PathCompletionCtx, PathKind, PatternContext, PatternRefutability,\n-    Qualified, QualifierCtx, TypeAscriptionTarget, TypeLocation, COMPLETION_MARKER,\n+    NameRefKind, ParamContext, ParamKind, PathCompletionCtx, PathKind, PatternContext,\n+    PatternRefutability, Qualified, QualifierCtx, TypeAscriptionTarget, TypeLocation,\n+    COMPLETION_MARKER,\n };\n \n impl<'a> CompletionContext<'a> {\n@@ -990,7 +991,7 @@ fn pattern_context_for(\n     original_file: &SyntaxNode,\n     pat: ast::Pat,\n ) -> PatternContext {\n-    let mut is_param = None;\n+    let mut param_ctx = None;\n     let (refutability, has_type_ascription) =\n     pat\n         .syntax()\n@@ -1003,7 +1004,7 @@ fn pattern_context_for(\n                     ast::LetStmt(let_) => return (PatternRefutability::Irrefutable, let_.ty().is_some()),\n                     ast::Param(param) => {\n                         let has_type_ascription = param.ty().is_some();\n-                        is_param = (|| {\n+                        param_ctx = (|| {\n                             let fake_param_list = param.syntax().parent().and_then(ast::ParamList::cast)?;\n                             let param_list = find_node_in_file_compensated(sema, original_file, &fake_param_list)?;\n                             let param_list_owner = param_list.syntax().parent()?;\n@@ -1014,7 +1015,9 @@ fn pattern_context_for(\n                                     _ => return None,\n                                 }\n                             };\n-                            Some((param_list, param, kind))\n+                            Some(ParamContext {\n+                                param_list, param, kind\n+                            })\n                         })();\n                         return (PatternRefutability::Irrefutable, has_type_ascription)\n                     },\n@@ -1033,7 +1036,7 @@ fn pattern_context_for(\n \n     PatternContext {\n         refutability,\n-        param_ctx: is_param,\n+        param_ctx,\n         has_type_ascription,\n         parent_pat: pat.syntax().parent().and_then(ast::Pat::cast),\n         mut_token,"}, {"sha": "03db08a911e92afc8c7abd89603fb3bde9257ff9", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=96481b7786fb1a987c2e912769ee5269fffbea0c", "patch": "@@ -6,7 +6,7 @@ use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n-    context::{ParamKind, PatternContext},\n+    context::{ParamContext, ParamKind, PatternContext},\n     render::{\n         variant::{format_literal_label, visible_fields},\n         RenderContext,\n@@ -102,7 +102,7 @@ fn render_pat(\n     let needs_ascription = matches!(\n         pattern_ctx,\n         PatternContext {\n-            param_ctx: Some((.., ParamKind::Function(_))),\n+            param_ctx: Some(ParamContext { kind: ParamKind::Function(_), .. }),\n             has_type_ascription: false,\n             ..\n         }"}, {"sha": "877b5f216433171995b578ba6ae316a4075e831a", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96481b7786fb1a987c2e912769ee5269fffbea0c/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=96481b7786fb1a987c2e912769ee5269fffbea0c", "patch": "@@ -630,3 +630,87 @@ fn f(v: u32) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn in_method_param() {\n+    check_empty(\n+        r#\"\n+struct Ty(u8);\n+\n+impl Ty {\n+    fn foo($0)\n+}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            st Ty\n+            bn &mut self\n+            bn &self\n+            bn Self(\u2026)   Self($1): Self$0\n+            bn Ty(\u2026)     Ty($1): Ty$0\n+            bn mut self\n+            bn self\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+    check_empty(\n+        r#\"\n+struct Ty(u8);\n+\n+impl Ty {\n+    fn foo(s$0)\n+}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            st Ty\n+            bn &mut self\n+            bn &self\n+            bn Self(\u2026)   Self($1): Self$0\n+            bn Ty(\u2026)     Ty($1): Ty$0\n+            bn mut self\n+            bn self\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+    check_empty(\n+        r#\"\n+struct Ty(u8);\n+\n+impl Ty {\n+    fn foo(s$0, foo: u8)\n+}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            st Ty\n+            bn &mut self\n+            bn &self\n+            bn Self(\u2026)   Self($1): Self$0\n+            bn Ty(\u2026)     Ty($1): Ty$0\n+            bn mut self\n+            bn self\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+    check_empty(\n+        r#\"\n+struct Ty(u8);\n+\n+impl Ty {\n+    fn foo(foo: u8, b$0)\n+}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            st Ty\n+            bn Self(\u2026) Self($1): Self$0\n+            bn Ty(\u2026)   Ty($1): Ty$0\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+}"}]}