{"sha": "1382d307d32cd6400adf4416fabc80517b0eed2c", "node_id": "C_kwDOAAsO6NoAKDEzODJkMzA3ZDMyY2Q2NDAwYWRmNDQxNmZhYmM4MDUxN2IwZWVkMmM", "commit": {"author": {"name": "Jean CASPAR", "email": "55629512+JeanCASPAR@users.noreply.github.com", "date": "2022-08-17T17:48:25Z"}, "committer": {"name": "Jean CASPAR", "email": "55629512+JeanCASPAR@users.noreply.github.com", "date": "2022-08-22T17:21:39Z"}, "message": "Migrate ast_lowering::expr to SessionDiagnostic", "tree": {"sha": "161164a59053fd2e444d3567cc66866e53030bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161164a59053fd2e444d3567cc66866e53030bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1382d307d32cd6400adf4416fabc80517b0eed2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1382d307d32cd6400adf4416fabc80517b0eed2c", "html_url": "https://github.com/rust-lang/rust/commit/1382d307d32cd6400adf4416fabc80517b0eed2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1382d307d32cd6400adf4416fabc80517b0eed2c/comments", "author": {"login": "JeanCASPAR", "id": 55629512, "node_id": "MDQ6VXNlcjU1NjI5NTEy", "avatar_url": "https://avatars.githubusercontent.com/u/55629512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeanCASPAR", "html_url": "https://github.com/JeanCASPAR", "followers_url": "https://api.github.com/users/JeanCASPAR/followers", "following_url": "https://api.github.com/users/JeanCASPAR/following{/other_user}", "gists_url": "https://api.github.com/users/JeanCASPAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeanCASPAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeanCASPAR/subscriptions", "organizations_url": "https://api.github.com/users/JeanCASPAR/orgs", "repos_url": "https://api.github.com/users/JeanCASPAR/repos", "events_url": "https://api.github.com/users/JeanCASPAR/events{/privacy}", "received_events_url": "https://api.github.com/users/JeanCASPAR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeanCASPAR", "id": 55629512, "node_id": "MDQ6VXNlcjU1NjI5NTEy", "avatar_url": "https://avatars.githubusercontent.com/u/55629512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeanCASPAR", "html_url": "https://github.com/JeanCASPAR", "followers_url": "https://api.github.com/users/JeanCASPAR/followers", "following_url": "https://api.github.com/users/JeanCASPAR/following{/other_user}", "gists_url": "https://api.github.com/users/JeanCASPAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeanCASPAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeanCASPAR/subscriptions", "organizations_url": "https://api.github.com/users/JeanCASPAR/orgs", "repos_url": "https://api.github.com/users/JeanCASPAR/repos", "events_url": "https://api.github.com/users/JeanCASPAR/events{/privacy}", "received_events_url": "https://api.github.com/users/JeanCASPAR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0043d10c712769b45d6cb7fb3fcc141878263d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0043d10c712769b45d6cb7fb3fcc141878263d18", "html_url": "https://github.com/rust-lang/rust/commit/0043d10c712769b45d6cb7fb3fcc141878263d18"}], "stats": {"total": 205, "additions": 125, "deletions": 80}, "files": [{"sha": "d704e5c60231e9f9062e99cc867b509affeffe01", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 74, "deletions": 4, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1382d307d32cd6400adf4416fabc80517b0eed2c/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1382d307d32cd6400adf4416fabc80517b0eed2c/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=1382d307d32cd6400adf4416fabc80517b0eed2c", "patch": "@@ -3,7 +3,7 @@ use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic, Clone, Copy)]\n-#[error(ast_lowering::generic_type_with_parentheses, code = \"E0214\")]\n+#[diag(ast_lowering::generic_type_with_parentheses, code = \"E0214\")]\n pub struct GenericTypeWithParentheses {\n     #[primary_span]\n     #[label]\n@@ -30,7 +30,7 @@ impl AddSubdiagnostic for UseAngleBrackets {\n \n #[derive(SessionDiagnostic)]\n #[help]\n-#[error(ast_lowering::invalid_abi, code = \"E0703\")]\n+#[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n pub struct InvalidAbi {\n     #[primary_span]\n     #[label]\n@@ -40,7 +40,7 @@ pub struct InvalidAbi {\n }\n \n #[derive(SessionDiagnostic, Clone, Copy)]\n-#[error(ast_lowering::assoc_ty_parentheses)]\n+#[diag(ast_lowering::assoc_ty_parentheses)]\n pub struct AssocTyParentheses {\n     #[primary_span]\n     pub span: Span,\n@@ -72,9 +72,79 @@ impl AddSubdiagnostic for AssocTyParenthesesSub {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_lowering::misplaced_impl_trait, code = \"E0562\")]\n+#[diag(ast_lowering::misplaced_impl_trait, code = \"E0562\")]\n pub struct MisplacedImplTrait {\n     #[primary_span]\n     pub span: Span,\n     pub position: String,\n }\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::rustc_box_attribute_error)]\n+pub struct RustcBoxAttributeError {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::underscore_expr_lhs_assign)]\n+pub struct UnderscoreExprLhsAssign {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::base_expression_double_dot)]\n+pub struct BaseExpressionDoubleDot {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::await_only_in_async_fn_and_blocks, code = \"E0728\")]\n+pub struct AwaitOnlyInAsyncFnAndBlocks {\n+    #[primary_span]\n+    #[label]\n+    pub dot_await_span: Span,\n+    #[label(ast_lowering::this_not_async)]\n+    pub item_span: Option<Span>,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::generator_too_many_parameters, code = \"E0628\")]\n+pub struct GeneratorTooManyParameters {\n+    #[primary_span]\n+    pub fn_decl_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::closure_cannot_be_static, code = \"E0697\")]\n+pub struct ClosureCannotBeStatic {\n+    #[primary_span]\n+    pub fn_decl_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[help]\n+#[diag(ast_lowering::async_non_move_closure_not_supported, code = \"E0708\")]\n+pub struct AsyncNonMoveClosureNotSupported {\n+    #[primary_span]\n+    pub fn_decl_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::functional_record_update_destructuring_assignment)]\n+pub struct FunctionalRecordUpdateDestructuringAssignemnt {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::async_generators_not_supported, code = \"E0727\")]\n+pub struct AsyncGeneratorsNotSupported {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "e470df122b6d3a1a93c3a42ef0608d6ededfc1a8", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 76, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1382d307d32cd6400adf4416fabc80517b0eed2c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1382d307d32cd6400adf4416fabc80517b0eed2c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1382d307d32cd6400adf4416fabc80517b0eed2c", "patch": "@@ -1,3 +1,8 @@\n+use super::errors::{\n+    AsyncGeneratorsNotSupported, AsyncNonMoveClosureNotSupported, AwaitOnlyInAsyncFnAndBlocks,\n+    BaseExpressionDoubleDot, ClosureCannotBeStatic, FunctionalRecordUpdateDestructuringAssignemnt,\n+    GeneratorTooManyParameters, RustcBoxAttributeError, UnderscoreExprLhsAssign,\n+};\n use super::ResolverAstLoweringExt;\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n use crate::{FnDeclKind, ImplTraitPosition};\n@@ -6,7 +11,6 @@ use rustc_ast::attr;\n use rustc_ast::ptr::P as AstP;\n use rustc_ast::*;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n@@ -45,13 +49,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             let hir_id = self.lower_node_id(e.id);\n                             return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n                         } else {\n-                            self.tcx.sess\n-                                .struct_span_err(\n-                                    e.span,\n-                                    \"#[rustc_box] requires precisely one argument \\\n-                                    and no other attributes are allowed\",\n-                                )\n-                                .emit();\n+                            self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n                             hir::ExprKind::Err\n                         }\n                     } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n@@ -211,13 +209,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr_range(e.span, e1.as_deref(), e2.as_deref(), lims)\n                 }\n                 ExprKind::Underscore => {\n-                    self.tcx\n-                        .sess.struct_span_err(\n-                            e.span,\n-                            \"in expressions, `_` can only be used on the left-hand side of an assignment\",\n-                        )\n-                        .span_label(e.span, \"`_` not allowed here\")\n-                        .emit();\n+                    self.tcx.sess.emit_err(UnderscoreExprLhsAssign { span: e.span });\n                     hir::ExprKind::Err\n                 }\n                 ExprKind::Path(ref qself, ref path) => {\n@@ -249,11 +241,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let rest = match &se.rest {\n                         StructRest::Base(e) => Some(self.lower_expr(e)),\n                         StructRest::Rest(sp) => {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(*sp, \"base expression required after `..`\")\n-                                .span_label(*sp, \"add a base expression here\")\n-                                .emit();\n+                            self.tcx.sess.emit_err(BaseExpressionDoubleDot { span: *sp });\n                             Some(&*self.arena.alloc(self.expr_err(*sp)))\n                         }\n                         StructRest::None => None,\n@@ -662,17 +650,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n+                self.tcx.sess.emit_err(AwaitOnlyInAsyncFnAndBlocks {\n                     dot_await_span,\n-                    E0728,\n-                    \"`await` is only allowed inside `async` functions and blocks\"\n-                );\n-                err.span_label(dot_await_span, \"only allowed inside `async` functions and blocks\");\n-                if let Some(item_sp) = self.current_item {\n-                    err.span_label(item_sp, \"this is not `async`\");\n-                }\n-                err.emit();\n+                    item_span: self.current_item,\n+                });\n             }\n         }\n         let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n@@ -892,13 +873,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match generator_kind {\n             Some(hir::GeneratorKind::Gen) => {\n                 if decl.inputs.len() > 1 {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        fn_decl_span,\n-                        E0628,\n-                        \"too many parameters for a generator (expected 0 or 1 parameters)\"\n-                    )\n-                    .emit();\n+                    self.tcx.sess.emit_err(GeneratorTooManyParameters { fn_decl_span });\n                 }\n                 Some(movability)\n             }\n@@ -907,13 +882,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             None => {\n                 if movability == Movability::Static {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        fn_decl_span,\n-                        E0697,\n-                        \"closures cannot be static\"\n-                    )\n-                    .emit();\n+                    self.tcx.sess.emit_err(ClosureCannotBeStatic { fn_decl_span });\n                 }\n                 None\n             }\n@@ -960,17 +929,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let body = self.with_new_scopes(|this| {\n             // FIXME(cramertj): allow `async` non-`move` closures with arguments.\n             if capture_clause == CaptureBy::Ref && !decl.inputs.is_empty() {\n-                struct_span_err!(\n-                    this.tcx.sess,\n-                    fn_decl_span,\n-                    E0708,\n-                    \"`async` non-`move` closures with parameters are not currently supported\",\n-                )\n-                .help(\n-                    \"consider using `let` statements to manually capture \\\n-                    variables by reference before entering an `async move` closure\",\n-                )\n-                .emit();\n+                this.tcx.sess.emit_err(AsyncNonMoveClosureNotSupported { fn_decl_span });\n             }\n \n             // Transform `async |x: u8| -> X { ... }` into\n@@ -1210,20 +1169,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {\n-                        self.tcx\n-                            .sess\n-                            .struct_span_err(\n-                                e.span,\n-                                \"functional record updates are not allowed in destructuring \\\n-                                    assignments\",\n-                            )\n-                            .span_suggestion(\n-                                e.span,\n-                                \"consider removing the trailing pattern\",\n-                                \"\",\n-                                rustc_errors::Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n+                        self.tcx.sess.emit_err(FunctionalRecordUpdateDestructuringAssignemnt {\n+                            span: e.span,\n+                        });\n                         true\n                     }\n                     StructRest::Rest(_) => true,\n@@ -1420,13 +1368,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Gen) => {}\n             Some(hir::GeneratorKind::Async(_)) => {\n-                struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0727,\n-                    \"`async` generators are not yet supported\"\n-                )\n-                .emit();\n+                self.tcx.sess.emit_err(AsyncGeneratorsNotSupported { span });\n             }\n             None => self.generator_kind = Some(hir::GeneratorKind::Gen),\n         }"}, {"sha": "47f2305b9136ef2f3842e000b4ccb6e4540210d5", "filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1382d307d32cd6400adf4416fabc80517b0eed2c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1382d307d32cd6400adf4416fabc80517b0eed2c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl?ref=1382d307d32cd6400adf4416fabc80517b0eed2c", "patch": "@@ -16,3 +16,36 @@ ast_lowering_remove_parentheses = remove these parentheses\n \n ast_lowering_misplaced_impl_trait =\n     `impl Trait` only allowed in function and inherent method return types, not in {$position}\n+\n+ast_lowering_rustc_box_attribute_error =\n+    #[rustc_box] requires precisely one argument and no other attributes are allowed\n+\n+ast_lowering_underscore_expr_lhs_assign =\n+    in expressions, `_` can only be used on the left-hand side of an assignment\n+    .label = `_` not allowed here\n+\n+ast_lowering_base_expression_double_dot =\n+    base expression required after `..`\n+    .label = add a base expression here\n+\n+ast_lowering_await_only_in_async_fn_and_blocks =\n+    `await` is only allowed inside `async` functions and blocks\n+    .label = only allowed inside `async` functions and blocks\n+\n+ast_lowering_this_not_async = this is not `async`\n+\n+ast_lowering_generator_too_many_parameters =\n+    too many parameters for a generator (expected 0 or 1 parameters)\n+\n+ast_lowering_closure_cannot_be_static = closures cannot be static\n+\n+ast_lowering_async_non_move_closure_not_supported =\n+    `async` non-`move` closures with parameters are not currently supported\n+    .help = consider using `let` statements to manually capture variables by reference before entering an `async move` closure\n+\n+ast_lowering_functional_record_update_destructuring_assignment =\n+    functional record updates are not allowed in destructuring assignments\n+    .suggestion = consider removing the trailing pattern\n+\n+ast_lowering_async_generators_not_supported =\n+    `async` generators are not yet supported"}]}