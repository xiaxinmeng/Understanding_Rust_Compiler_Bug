{"sha": "4252e482569f00612e768811cbe0295562095343", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNTJlNDgyNTY5ZjAwNjEyZTc2ODgxMWNiZTAyOTU1NjIwOTUzNDM=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-11-20T21:16:15Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-12-22T11:17:43Z"}, "message": "Add documentation on migrating away from compare_and_swap", "tree": {"sha": "676f361ba7ffa600150201527bde271b6b74f15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/676f361ba7ffa600150201527bde271b6b74f15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4252e482569f00612e768811cbe0295562095343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4252e482569f00612e768811cbe0295562095343", "html_url": "https://github.com/rust-lang/rust/commit/4252e482569f00612e768811cbe0295562095343", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4252e482569f00612e768811cbe0295562095343/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3abba5e21f362e325d52d922676ef26513a668e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3abba5e21f362e325d52d922676ef26513a668e2", "html_url": "https://github.com/rust-lang/rust/commit/3abba5e21f362e325d52d922676ef26513a668e2"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "4fc455d06edea4041a6268571032946aa96ebb21", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4252e482569f00612e768811cbe0295562095343/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4252e482569f00612e768811cbe0295562095343/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4252e482569f00612e768811cbe0295562095343", "patch": "@@ -464,6 +464,23 @@ impl AtomicBool {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n     ///\n+    /// # Migrating to `compare_exchange` and `compare_exchange_weak`\n+    ///\n+    /// `compare_and_swap` is equivalent to `compare_exchange` with the following mapping for\n+    /// memory orderings:\n+    ///\n+    /// Original | Success | Failure\n+    /// -------- | ------- | -------\n+    /// Relaxed  | Relaxed | Relaxed\n+    /// Acquire  | Acquire | Acquire\n+    /// Release  | Release | Relaxed\n+    /// AcqRel   | AcqRel  | Acquire\n+    /// SeqCst   | SeqCst  | SeqCst\n+    ///\n+    /// `compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds,\n+    /// which allows the compiler to generate better assembly code when the compare and swap\n+    /// is used in a loop.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1070,6 +1087,23 @@ impl<T> AtomicPtr<T> {\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n     ///\n+    /// # Migrating to `compare_exchange` and `compare_exchange_weak`\n+    ///\n+    /// `compare_and_swap` is equivalent to `compare_exchange` with the following mapping for\n+    /// memory orderings:\n+    ///\n+    /// Original | Success | Failure\n+    /// -------- | ------- | -------\n+    /// Relaxed  | Relaxed | Relaxed\n+    /// Acquire  | Acquire | Acquire\n+    /// Release  | Release | Relaxed\n+    /// AcqRel   | AcqRel  | Acquire\n+    /// SeqCst   | SeqCst  | SeqCst\n+    ///\n+    /// `compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds,\n+    /// which allows the compiler to generate better assembly code when the compare and swap\n+    /// is used in a loop.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1612,6 +1646,23 @@ happens, and using [`Release`] makes the load part [`Relaxed`].\n **Note**: This method is only available on platforms that support atomic\n operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n \n+# Migrating to `compare_exchange` and `compare_exchange_weak`\n+\n+`compare_and_swap` is equivalent to `compare_exchange` with the following mapping for\n+memory orderings:\n+\n+Original | Success | Failure\n+-------- | ------- | -------\n+Relaxed  | Relaxed | Relaxed\n+Acquire  | Acquire | Acquire\n+Release  | Release | Relaxed\n+AcqRel   | AcqRel  | Acquire\n+SeqCst   | SeqCst  | SeqCst\n+\n+`compare_exchange_weak` is allowed to fail spuriously even when the comparison succeeds,\n+which allows the compiler to generate better assembly code when the compare and swap\n+is used in a loop.\n+\n # Examples\n \n ```"}]}