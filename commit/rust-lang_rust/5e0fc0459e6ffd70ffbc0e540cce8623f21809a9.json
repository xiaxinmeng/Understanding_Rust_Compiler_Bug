{"sha": "5e0fc0459e6ffd70ffbc0e540cce8623f21809a9", "node_id": "C_kwDOAAsO6NoAKDVlMGZjMDQ1OWU2ZmZkNzBmZmJjMGU1NDBjY2U4NjIzZjIxODA5YTk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-17T13:31:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-17T14:46:27Z"}, "message": "rustdoc: Correctly merge import's and its target's docs in one more case", "tree": {"sha": "5e15b93e72030bd59925b72415bf3db913d3e3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e15b93e72030bd59925b72415bf3db913d3e3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9", "html_url": "https://github.com/rust-lang/rust/commit/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d64f229a09515978e6f338b821057a64334a0b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d64f229a09515978e6f338b821057a64334a0b5", "html_url": "https://github.com/rust-lang/rust/commit/2d64f229a09515978e6f338b821057a64334a0b5"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "bc497af9b938112d3eb6253cafd4787cbeec0358", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5e0fc0459e6ffd70ffbc0e540cce8623f21809a9", "patch": "@@ -39,6 +39,7 @@ use std::hash::Hash;\n use std::mem;\n use thin_vec::ThinVec;\n \n+use crate::clean::inline::merge_attrs;\n use crate::core::{self, DocContext, ImplTraitParam};\n use crate::formats::item_type::ItemType;\n use crate::visit_ast::Module as DocModule;\n@@ -2373,21 +2374,22 @@ fn clean_maybe_renamed_item<'tcx>(\n             _ => unreachable!(\"not yet converted\"),\n         };\n \n-        let mut extra_attrs = Vec::new();\n+        let mut import_attrs = Vec::new();\n+        let mut target_attrs = Vec::new();\n         if let Some(import_id) = import_id &&\n             let Some(hir::Node::Item(use_node)) = cx.tcx.hir().find_by_def_id(import_id)\n         {\n             let is_inline = inline::load_attrs(cx, import_id.to_def_id()).lists(sym::doc).get_word_attr(sym::inline).is_some();\n             // Then we get all the various imports' attributes.\n-            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs, is_inline);\n-            add_without_unwanted_attributes(&mut extra_attrs, inline::load_attrs(cx, def_id), is_inline);\n+            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut import_attrs, is_inline);\n+            add_without_unwanted_attributes(&mut target_attrs, inline::load_attrs(cx, def_id), is_inline);\n         } else {\n             // We only keep the item's attributes.\n-            extra_attrs.extend_from_slice(inline::load_attrs(cx, def_id));\n+            target_attrs.extend_from_slice(inline::load_attrs(cx, def_id));\n         }\n \n-        let attrs = Attributes::from_ast(&extra_attrs);\n-        let cfg = extra_attrs.cfg(cx.tcx, &cx.cache.hidden_cfg);\n+        let import_parent = import_id.map(|import_id| cx.tcx.local_parent(import_id).to_def_id());\n+        let (attrs, cfg) =  merge_attrs(cx, import_parent, &target_attrs, Some(&import_attrs));\n \n         let mut item =\n             Item::from_def_id_and_attrs_and_parts(def_id, Some(name), kind, Box::new(attrs), cfg);"}, {"sha": "31fef032b0fc959cfca692666144c9a22e36fcd3", "filename": "tests/rustdoc-ui/intra-doc/import-inline-merge.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9/tests%2Frustdoc-ui%2Fintra-doc%2Fimport-inline-merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0fc0459e6ffd70ffbc0e540cce8623f21809a9/tests%2Frustdoc-ui%2Fintra-doc%2Fimport-inline-merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fimport-inline-merge.rs?ref=5e0fc0459e6ffd70ffbc0e540cce8623f21809a9", "patch": "@@ -0,0 +1,16 @@\n+// Import for `A` is inlined and doc comments on the import and `A` itself are merged.\n+// After the merge they still have correct parent scopes to resolve both `[A]` and `[B]`.\n+\n+// check-pass\n+\n+#![allow(rustdoc::private_intra_doc_links)]\n+\n+mod m {\n+    /// [B]\n+    pub struct A {}\n+\n+    pub struct B {}\n+}\n+\n+/// [A]\n+pub use m::A;"}]}