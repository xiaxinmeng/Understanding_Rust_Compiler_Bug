{"sha": "18557500cb91596f3614d4cf65439f8c5f47b2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTU3NTAwY2I5MTU5NmYzNjE0ZDRjZjY1NDM5ZjhjNWY0N2IyZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T16:38:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T16:38:33Z"}, "message": "Auto merge of #27026 - nagisa:overflowing-unsigned, r=pnkfelix\n\nThis commit fixes the negate_unsigned feature gate to appropriately\r\naccount for inferred variables.\r\n\r\nThis is technically a [breaking-change], but I\u2019d consider it a bug fix.\r\n\r\ncc @brson for your relnotes.\r\n\r\nFixes https://github.com/rust-lang/rust/issues/24676\r\nFixes #26840 \r\nFixes https://github.com/rust-lang/rust/issues/25206", "tree": {"sha": "3ac4aee355a54a98d516ca396c6e3a56f30343ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac4aee355a54a98d516ca396c6e3a56f30343ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18557500cb91596f3614d4cf65439f8c5f47b2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18557500cb91596f3614d4cf65439f8c5f47b2e0", "html_url": "https://github.com/rust-lang/rust/commit/18557500cb91596f3614d4cf65439f8c5f47b2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18557500cb91596f3614d4cf65439f8c5f47b2e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d4faf989cea236e2e1669ab85d060d1c62cd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d4faf989cea236e2e1669ab85d060d1c62cd85", "html_url": "https://github.com/rust-lang/rust/commit/39d4faf989cea236e2e1669ab85d060d1c62cd85"}, {"sha": "0ca8e4994ee43ba9dfbded6e129b30ff5fe7a994", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca8e4994ee43ba9dfbded6e129b30ff5fe7a994", "html_url": "https://github.com/rust-lang/rust/commit/0ca8e4994ee43ba9dfbded6e129b30ff5fe7a994"}], "stats": {"total": 182, "additions": 92, "deletions": 90}, "files": [{"sha": "8141916dd60fc61d6fcf1f3fc12cbea03ff6df6c", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -12,8 +12,6 @@\n \n // FIXME: #6220 Implement floating point formatting\n \n-#![allow(unsigned_negation)]\n-\n use prelude::*;\n \n use fmt;"}, {"sha": "c2a9b8c8308cd5c6c91f80637fabe69992f565c9", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -517,7 +517,6 @@ pub trait Neg {\n macro_rules! neg_impl_core {\n     ($id:ident => $body:expr, $($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[allow(unsigned_negation)]\n         impl Neg for $t {\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             type Output = $t;"}, {"sha": "247c3dcb9c705bd026026181607624f07cf6cd48", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![allow(unsigned_negation)]\n-\n use core::fmt::radix;\n \n #[test]"}, {"sha": "1b2210c89edcb04af85df8d7e2d430319f4c1928", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -126,7 +126,6 @@ impl IsaacRng {\n \n     /// Refills the output buffer (`self.rsl`)\n     #[inline]\n-    #[allow(unsigned_negation)]\n     fn isaac(&mut self) {\n         self.c = self.c + w(1);\n         // abbreviations"}, {"sha": "6d29a1031c6bc9859bd976c90afa2de89f416f5c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -75,6 +75,15 @@ enum TargetLint {\n \n     /// Temporary renaming, used for easing migration pain; see #16545\n     Renamed(String, LintId),\n+\n+    /// Lint with this name existed previously, but has been removed/deprecated.\n+    /// The string argument is the reason for removal.\n+    Removed(String),\n+}\n+\n+enum FindLintError {\n+    NotFound,\n+    Removed\n }\n \n impl LintStore {\n@@ -166,30 +175,42 @@ impl LintStore {\n         self.by_name.insert(old_name.to_string(), Renamed(new_name.to_string(), target));\n     }\n \n+    pub fn register_removed(&mut self, name: &str, reason: &str) {\n+        self.by_name.insert(name.into(), Removed(reason.into()));\n+    }\n+\n     #[allow(unused_variables)]\n     fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)\n-                 -> Option<LintId>\n+                 -> Result<LintId, FindLintError>\n     {\n         match self.by_name.get(lint_name) {\n-            Some(&Id(lint_id)) => Some(lint_id),\n+            Some(&Id(lint_id)) => Ok(lint_id),\n             Some(&Renamed(ref new_name, lint_id)) => {\n                 let warning = format!(\"lint {} has been renamed to {}\",\n                                       lint_name, new_name);\n                 match span {\n                     Some(span) => sess.span_warn(span, &warning[..]),\n                     None => sess.warn(&warning[..]),\n                 };\n-                Some(lint_id)\n-            }\n-            None => None\n+                Ok(lint_id)\n+            },\n+            Some(&Removed(ref reason)) => {\n+                let warning = format!(\"lint {} has been removed: {}\", lint_name, reason);\n+                match span {\n+                    Some(span) => sess.span_warn(span, &warning[..]),\n+                    None => sess.warn(&warning[..])\n+                }\n+                Err(FindLintError::Removed)\n+            },\n+            None => Err(FindLintError::NotFound)\n         }\n     }\n \n     pub fn process_command_line(&mut self, sess: &Session) {\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             match self.find_lint(&lint_name[..], sess, None) {\n-                Some(lint_id) => self.set_level(lint_id, (level, CommandLine)),\n-                None => {\n+                Ok(lint_id) => self.set_level(lint_id, (level, CommandLine)),\n+                Err(_) => {\n                     match self.lint_groups.iter().map(|(&x, pair)| (x, pair.0.clone()))\n                                                  .collect::<FnvHashMap<&'static str,\n                                                                        Vec<LintId>>>()\n@@ -398,8 +419,8 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                 }\n                 Ok((lint_name, level, span)) => {\n                     match self.lints.find_lint(&lint_name, &self.tcx.sess, Some(span)) {\n-                        Some(lint_id) => vec![(lint_id, level, span)],\n-                        None => {\n+                        Ok(lint_id) => vec![(lint_id, level, span)],\n+                        Err(FindLintError::NotFound) => {\n                             match self.lints.lint_groups.get(&lint_name[..]) {\n                                 Some(&(ref v, _)) => v.iter()\n                                                       .map(|lint_id: &LintId|\n@@ -412,7 +433,8 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                                     continue;\n                                 }\n                             }\n-                        }\n+                        },\n+                        Err(FindLintError::Removed) => { continue; }\n                     }\n                 }\n             };"}, {"sha": "0f16c06a9dbbca7b3ff2cf97ca61c1cef0a76bcc", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(non_camel_case_types)]\n-#![allow(unsigned_negation)]\n \n use self::ConstVal::*;\n \n@@ -27,7 +26,6 @@ use util::num::ToPrimitive;\n use syntax::ast::{self, Expr};\n use syntax::ast_util;\n use syntax::codemap::Span;\n-use syntax::feature_gate;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::{codemap, visit};\n@@ -745,13 +743,6 @@ pub fn eval_const_expr_with_substs<'tcx, S>(tcx: &ty::ctxt<'tcx>,\n           Float(f) => Float(-f),\n           Int(n) =>  try!(const_int_checked_neg(n, e, expr_int_type)),\n           Uint(i) => {\n-              if !tcx.sess.features.borrow().negate_unsigned {\n-                  feature_gate::emit_feature_err(\n-                      &tcx.sess.parse_sess.span_diagnostic,\n-                      \"negate_unsigned\",\n-                      e.span,\n-                      \"unary negation of unsigned integers may be removed in the future\");\n-              }\n               try!(const_uint_checked_neg(i, e, expr_uint_type))\n           }\n           Str(_) => signal!(e, NegateOnString),"}, {"sha": "e82e0d790e1bb7d2d85139b79f95dc8b02bb74b0", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -88,12 +88,6 @@ impl LintPass for WhileTrue {\n     }\n }\n \n-declare_lint! {\n-    UNSIGNED_NEGATION,\n-    Warn,\n-    \"using an unary minus operator on unsigned type\"\n-}\n-\n declare_lint! {\n     UNUSED_COMPARISONS,\n     Warn,\n@@ -128,8 +122,7 @@ impl TypeLimits {\n \n impl LintPass for TypeLimits {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSIGNED_NEGATION, UNUSED_COMPARISONS, OVERFLOWING_LITERALS,\n-                    EXCEEDING_BITSHIFTS)\n+        lint_array!(UNUSED_COMPARISONS, OVERFLOWING_LITERALS, EXCEEDING_BITSHIFTS)\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n@@ -139,9 +132,12 @@ impl LintPass for TypeLimits {\n                     ast::ExprLit(ref lit) => {\n                         match lit.node {\n                             ast::LitInt(_, ast::UnsignedIntLit(_)) => {\n-                                cx.span_lint(UNSIGNED_NEGATION, e.span,\n-                                             \"negation of unsigned int literal may \\\n-                                             be unintentional\");\n+                                check_unsigned_negation_feature(cx, e.span);\n+                            },\n+                            ast::LitInt(_, ast::UnsuffixedIntLit(_)) => {\n+                                if let ty::TyUint(_) = cx.tcx.expr_ty(e).sty {\n+                                    check_unsigned_negation_feature(cx, e.span);\n+                                }\n                             },\n                             _ => ()\n                         }\n@@ -150,9 +146,7 @@ impl LintPass for TypeLimits {\n                         let t = cx.tcx.expr_ty(&**expr);\n                         match t.sty {\n                             ty::TyUint(_) => {\n-                                cx.span_lint(UNSIGNED_NEGATION, e.span,\n-                                             \"negation of unsigned int variable may \\\n-                                             be unintentional\");\n+                                check_unsigned_negation_feature(cx, e.span);\n                             },\n                             _ => ()\n                         }\n@@ -385,6 +379,18 @@ impl LintPass for TypeLimits {\n                 _ => false\n             }\n         }\n+\n+        fn check_unsigned_negation_feature(cx: &Context, span: Span) {\n+            if !cx.sess().features.borrow().negate_unsigned {\n+                // FIXME(#27141): change this to syntax::feature_gate::emit_feature_err\u2026\n+                cx.sess().span_warn(span,\n+                    \"unary negation of unsigned integers will be feature gated in the future\");\n+                // \u2026and remove following two expressions.\n+                if option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some() { return; }\n+                cx.sess().fileline_help(span, \"add #![feature(negate_unsigned)] to the \\\n+                                               crate attributes to enable the gate in advance\");\n+            }\n+        }\n     }\n }\n "}, {"sha": "54c1a79e10a9b709a43e8ea5c05d2dce6fd2f6dc", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -134,4 +134,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_renamed(\"raw_pointer_deriving\", \"raw_pointer_derive\");\n \n     store.register_renamed(\"unknown_features\", \"unused_features\");\n+\n+    store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n }"}, {"sha": "7b2bdee50fe7880321d9abb2a6fafc4fd82a141d", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -41,8 +41,6 @@\n //!   used unboxed and any field can have pointers (including mutable)\n //!   taken to it, implementing them for Rust seems difficult.\n \n-#![allow(unsigned_negation)]\n-\n pub use self::Repr::*;\n \n use std::rc::Rc;"}, {"sha": "a98f7a8678c22f5547ab0af564d66bd414f4f228", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -114,7 +114,6 @@ use syntax::attr::AttrMetaMethods;\n use syntax::ast::{self, DefId, Visibility};\n use syntax::ast_util::{self, local_def};\n use syntax::codemap::{self, Span};\n-use syntax::feature_gate;\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::print::pprust;\n@@ -3074,15 +3073,6 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                       tcx.lang_items.neg_trait(),\n                                                       expr, &**oprnd, oprnd_t, unop);\n                     }\n-                    if let ty::TyUint(_) = oprnd_t.sty {\n-                        if !tcx.sess.features.borrow().negate_unsigned {\n-                            feature_gate::emit_feature_err(\n-                                &tcx.sess.parse_sess.span_diagnostic,\n-                                \"negate_unsigned\",\n-                                expr.span,\n-                                \"unary negation of unsigned integers may be removed in the future\");\n-                        }\n-                    }\n                 }\n             }\n         }"}, {"sha": "10cdc0c5833771d300a215ca7ade65aa0d497bd7", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -12,7 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n-#![allow(unsigned_negation)]\n #![doc(primitive = \"f32\")]\n \n use prelude::v1::*;"}, {"sha": "902c78c0a46f869e9f8306783fff25f53c0e7495", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![doc(hidden)]\n-#![allow(unsigned_negation)]\n \n macro_rules! uint_module { ($T:ident) => (\n "}, {"sha": "f991e5328c1042a72774833e18c06ead1a5e1e1b", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -17,7 +17,6 @@\n // evaluation below (e.g. that performed by trans and llvm), so if you\n // change this warn to a deny, then the compiler will exit before\n // those errors are detected.\n-#![warn(unsigned_negation)]\n \n use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n@@ -69,8 +68,6 @@ const VALS_I64: (i64, i64, i64, i64) =\n \n const VALS_U8: (u8, u8, u8, u8) =\n     (-u8::MIN,\n-     //~^ WARNING negation of unsigned int variable may be unintentional\n-     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n      u8::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u8::MAX + 1,\n@@ -81,8 +78,6 @@ const VALS_U8: (u8, u8, u8, u8) =\n \n const VALS_U16: (u16, u16, u16, u16) =\n     (-u16::MIN,\n-     //~^ WARNING negation of unsigned int variable may be unintentional\n-     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n      u16::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u16::MAX + 1,\n@@ -93,8 +88,6 @@ const VALS_U16: (u16, u16, u16, u16) =\n \n const VALS_U32: (u32, u32, u32, u32) =\n     (-u32::MIN,\n-     //~^ WARNING negation of unsigned int variable may be unintentional\n-     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n      u32::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u32::MAX + 1,\n@@ -105,8 +98,6 @@ const VALS_U32: (u32, u32, u32, u32) =\n \n const VALS_U64: (u64, u64, u64, u64) =\n     (-u64::MIN,\n-     //~^ WARNING negation of unsigned int variable may be unintentional\n-     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n      u64::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u64::MAX + 1,"}, {"sha": "7dc654fe1c8d569f0c5ec3916d13da4da449e80d", "filename": "src/test/compile-fail/feature-gate-negate-unsigned.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d4faf989cea236e2e1669ab85d060d1c62cd85/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs?ref=39d4faf989cea236e2e1669ab85d060d1c62cd85", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that negating unsigned integers is gated by `negate_unsigned` feature\n-// gate\n-\n-const MAX: usize = -1;\n-//~^ ERROR unary negation of unsigned integers may be removed in the future\n-\n-fn main() {}"}, {"sha": "839d50ae63f90359901ecb01dda7ad1489ecf6a4", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -50,14 +50,3 @@ fn qux() {\n         i += 1;\n     }\n }\n-\n-fn quy() {\n-    let i = -23_usize; //~ WARNING negation of unsigned int literal may be unintentional\n-                  //~^ WARNING unused variable\n-}\n-\n-fn quz() {\n-    let i = 23_usize;\n-    let j = -i;   //~ WARNING negation of unsigned int variable may be unintentional\n-                  //~^ WARNING unused variable\n-}"}, {"sha": "95c8e62be53bcaad427512c7b9fae0811a96e4e1", "filename": "src/test/run-pass/feature-gate-negate-unsigned.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Ftest%2Frun-pass%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18557500cb91596f3614d4cf65439f8c5f47b2e0/src%2Ftest%2Frun-pass%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffeature-gate-negate-unsigned.rs?ref=18557500cb91596f3614d4cf65439f8c5f47b2e0", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that negating unsigned integers is gated by `negate_unsigned` feature\n+// gate\n+\n+struct S;\n+impl std::ops::Neg for S {\n+    type Output = u32;\n+    fn neg(self) -> u32 { 0 }\n+}\n+\n+const _MAX: usize = -1;\n+//~^ WARN unary negation of unsigned integers will be feature gated in the future\n+\n+fn main() {\n+    let a = -1;\n+    //~^ WARN unary negation of unsigned integers will be feature gated in the future\n+    let _b : u8 = a; // for infering variable a to u8.\n+\n+    -a;\n+    //~^ WARN unary negation of unsigned integers will be feature gated in the future\n+\n+    let _d = -1u8;\n+    //~^ WARN unary negation of unsigned integers will be feature gated in the future\n+\n+    for _ in -10..10u8 {}\n+    //~^ WARN unary negation of unsigned integers will be feature gated in the future\n+\n+    -S; // should not trigger the gate; issue 26840\n+}"}]}