{"sha": "f6eda9937956667c01bc567ab4a9bd6a19f71635", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZWRhOTkzNzk1NjY2N2MwMWJjNTY3YWI0YTliZDZhMTlmNzE2MzU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-18T18:29:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T10:56:54Z"}, "message": "Move test harness generation into libsyntax_ext", "tree": {"sha": "74e7efcf49348e9fecfd83f99550cd06c4b82075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e7efcf49348e9fecfd83f99550cd06c4b82075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6eda9937956667c01bc567ab4a9bd6a19f71635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6eda9937956667c01bc567ab4a9bd6a19f71635", "html_url": "https://github.com/rust-lang/rust/commit/f6eda9937956667c01bc567ab4a9bd6a19f71635", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6eda9937956667c01bc567ab4a9bd6a19f71635/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad0daa220fd5e00ce425c9208869ea0d6f4b981", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad0daa220fd5e00ce425c9208869ea0d6f4b981", "html_url": "https://github.com/rust-lang/rust/commit/4ad0daa220fd5e00ce425c9208869ea0d6f4b981"}], "stats": {"total": 157, "additions": 57, "deletions": 100}, "files": [{"sha": "58edb898c2584bf78fa6276360033014be82bf08", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f6eda9937956667c01bc567ab4a9bd6a19f71635", "patch": "@@ -456,7 +456,7 @@ fn configure_and_expand_inner<'a>(\n     sess.profiler(|p| p.end_activity(\"macro expansion\"));\n \n     time(sess, \"maybe building test harness\", || {\n-        syntax::test::modify_for_testing(\n+        syntax_ext::test_harness::modify_for_testing(\n             &sess.parse_sess,\n             &mut resolver,\n             sess.opts.test,"}, {"sha": "17f379f31b2fdfa7d37d68c19b59251a95e70b9a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f6eda9937956667c01bc567ab4a9bd6a19f71635", "patch": "@@ -156,7 +156,6 @@ pub mod show_span;\n pub mod std_inject;\n pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n-pub mod test;\n pub mod tokenstream;\n pub mod visit;\n "}, {"sha": "73310df305b32cb9892b5e5ce2e1327f6ac794c7", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=f6eda9937956667c01bc567ab4a9bd6a19f71635", "patch": "@@ -10,11 +10,11 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-fmt_macros = { path = \"../libfmt_macros\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n+fmt_macros = { path = \"../libfmt_macros\" }\n+log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n-log = \"0.4\"\n+syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "cd0d0886239b34123f12c257eba18aea0c302d67", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=f6eda9937956667c01bc567ab4a9bd6a19f71635", "patch": "@@ -7,6 +7,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n+#![feature(mem_take)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unicode_internals)]\n@@ -38,11 +39,11 @@ mod global_asm;\n mod log_syntax;\n mod source_util;\n mod test;\n-mod test_case;\n mod trace_macros;\n \n pub mod plugin_macro_defs;\n pub mod proc_macro_decls;\n+pub mod test_harness;\n \n pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, edition: Edition) {\n     let mut register = |name, kind| resolver.register_builtin_macro(\n@@ -89,7 +90,7 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n         bench: test::expand_bench,\n         global_allocator: global_allocator::expand,\n         test: test::expand_test,\n-        test_case: test_case::expand,\n+        test_case: test::expand_test_case,\n     }\n \n     register_derive! {"}, {"sha": "36aeb3065ff2634b4a4f1dbbb2311bf3ae6cd06a", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=f6eda9937956667c01bc567ab4a9bd6a19f71635", "patch": "@@ -7,11 +7,44 @@ use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::print::pprust;\n+use syntax::source_map::respan;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n \n use std::iter;\n \n+// #[test_case] is used by custom test authors to mark tests\n+// When building for test, it needs to make the item public and gensym the name\n+// Otherwise, we'll omit the item. This behavior means that any item annotated\n+// with #[test_case] is never addressable.\n+//\n+// We mark item with an inert attribute \"rustc_test_marker\" which the test generation\n+// logic will pick up on.\n+pub fn expand_test_case(\n+    ecx: &mut ExtCtxt<'_>,\n+    attr_sp: Span,\n+    meta_item: &ast::MetaItem,\n+    anno_item: Annotatable\n+) -> Vec<Annotatable> {\n+    check_builtin_macro_attribute(ecx, meta_item, sym::test_case);\n+\n+    if !ecx.ecfg.should_test { return vec![]; }\n+\n+    let sp = attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(ecx.current_expansion.mark));\n+    let mut item = anno_item.expect_item();\n+    item = item.map(|mut item| {\n+        item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n+        item.ident = item.ident.gensym();\n+        item.attrs.push(\n+            ecx.attribute(sp,\n+                ecx.meta_word(sp, sym::rustc_test_marker))\n+        );\n+        item\n+    });\n+\n+    return vec![Annotatable::Item(item)]\n+}\n+\n pub fn expand_test(\n     cx: &mut ExtCtxt<'_>,\n     attr_sp: Span,"}, {"sha": "ea4a8d541ab9928f8636bdde77b24a1adfc17532", "filename": "src/libsyntax_ext/test_case.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4ad0daa220fd5e00ce425c9208869ea0d6f4b981/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad0daa220fd5e00ce425c9208869ea0d6f4b981/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=4ad0daa220fd5e00ce425c9208869ea0d6f4b981", "patch": "@@ -1,44 +0,0 @@\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-\n-// #[test_case] is used by custom test authors to mark tests\n-// When building for test, it needs to make the item public and gensym the name\n-// Otherwise, we'll omit the item. This behavior means that any item annotated\n-// with #[test_case] is never addressable.\n-//\n-// We mark item with an inert attribute \"rustc_test_marker\" which the test generation\n-// logic will pick up on.\n-\n-use syntax::ast;\n-use syntax::attr::check_builtin_macro_attribute;\n-use syntax::ext::base::*;\n-use syntax::ext::build::AstBuilder;\n-use syntax::ext::hygiene::SyntaxContext;\n-use syntax::source_map::respan;\n-use syntax::symbol::sym;\n-use syntax_pos::Span;\n-\n-pub fn expand(\n-    ecx: &mut ExtCtxt<'_>,\n-    attr_sp: Span,\n-    meta_item: &ast::MetaItem,\n-    anno_item: Annotatable\n-) -> Vec<Annotatable> {\n-    check_builtin_macro_attribute(ecx, meta_item, sym::test_case);\n-\n-    if !ecx.ecfg.should_test { return vec![]; }\n-\n-    let sp = attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(ecx.current_expansion.id));\n-    let mut item = anno_item.expect_item();\n-    item = item.map(|mut item| {\n-        item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n-        item.ident = item.ident.gensym();\n-        item.attrs.push(\n-            ecx.attribute(sp,\n-                ecx.meta_word(sp, sym::rustc_test_marker))\n-        );\n-        item\n-    });\n-\n-    return vec![Annotatable::Item(item)]\n-}"}, {"sha": "061f5c3408b3bc7be53f0cb00a9eb87ded6e1348", "filename": "src/libsyntax_ext/test_harness.rs", "status": "renamed", "additions": 16, "deletions": 48, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eda9937956667c01bc567ab4a9bd6a19f71635/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=f6eda9937956667c01bc567ab4a9bd6a19f71635", "patch": "@@ -1,35 +1,23 @@\n // Code that generates a test runner to run all the tests in a crate\n \n-#![allow(dead_code)]\n-#![allow(unused_imports)]\n-\n-use HasTestSignature::*;\n-\n-use std::iter;\n-use std::slice;\n-use std::mem;\n-use std::vec;\n-\n use log::debug;\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::{DUMMY_SP, NO_EXPANSION, Span, SourceFile, BytePos};\n-\n-use crate::attr::{self, HasAttrs};\n-use crate::source_map::{self, SourceMap, ExpnInfo, ExpnKind, dummy_spanned, respan};\n-use crate::config;\n-use crate::entry::{self, EntryPointType};\n-use crate::ext::base::{ExtCtxt, Resolver};\n-use crate::ext::build::AstBuilder;\n-use crate::ext::expand::ExpansionConfig;\n-use crate::ext::hygiene::{self, ExpnId, SyntaxContext, MacroKind};\n-use crate::mut_visit::{*, ExpectOne};\n-use crate::feature_gate::Features;\n-use crate::util::map_in_place::MapInPlace;\n-use crate::parse::{token, ParseSess};\n-use crate::ast::{self, Ident};\n-use crate::ptr::P;\n-use crate::symbol::{self, Symbol, kw, sym};\n-use crate::ThinVec;\n+use syntax::ast::{self, Ident};\n+use syntax::attr;\n+use syntax::entry::{self, EntryPointType};\n+use syntax::ext::base::{ExtCtxt, Resolver};\n+use syntax::ext::build::AstBuilder;\n+use syntax::ext::expand::ExpansionConfig;\n+use syntax::ext::hygiene::{ExpnId, MacroKind};\n+use syntax::feature_gate::Features;\n+use syntax::mut_visit::{*, ExpectOne};\n+use syntax::parse::ParseSess;\n+use syntax::ptr::P;\n+use syntax::source_map::{ExpnInfo, ExpnKind, dummy_spanned};\n+use syntax::symbol::{kw, sym, Symbol};\n+use syntax_pos::{Span, DUMMY_SP};\n+\n+use std::{iter, mem};\n \n struct Test {\n     span: Span,\n@@ -42,10 +30,7 @@ struct TestCtxt<'a> {\n     ext_cx: ExtCtxt<'a>,\n     test_cases: Vec<Test>,\n     reexport_test_harness_main: Option<Symbol>,\n-    is_libtest: bool,\n-    features: &'a Features,\n     test_runner: Option<ast::Path>,\n-\n     // top-level re-export submodule, filled out after folding is finished\n     toplevel_reexport: Option<Ident>,\n }\n@@ -267,11 +252,7 @@ fn generate_test_harness(sess: &ParseSess,\n         path: Vec::new(),\n         test_cases: Vec::new(),\n         reexport_test_harness_main,\n-        // N.B., doesn't consider the value of `--crate-name` passed on the command line.\n-        is_libtest: attr::find_crate_name(&krate.attrs)\n-            .map(|s| s == sym::test).unwrap_or(false),\n         toplevel_reexport: None,\n-        features,\n         test_runner\n     };\n \n@@ -282,19 +263,6 @@ fn generate_test_harness(sess: &ParseSess,\n     }.visit_crate(krate);\n }\n \n-enum HasTestSignature {\n-    Yes,\n-    No(BadTestSignature),\n-}\n-\n-#[derive(PartialEq)]\n-enum BadTestSignature {\n-    NotEvenAFunction,\n-    WrongTypeSignature,\n-    NoArgumentsAllowed,\n-    ShouldPanicOnlyWithNoArgs,\n-}\n-\n /// Creates a function item for use as the main function of a test build.\n /// This function will call the `test_runner` as specified by the crate attribute\n fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {", "previous_filename": "src/libsyntax/test.rs"}]}