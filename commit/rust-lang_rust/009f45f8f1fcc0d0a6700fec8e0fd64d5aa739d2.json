{"sha": "009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOWY0NWY4ZjFmY2MwZDBhNjcwMGZlYzhlMGZkNjRkNWFhNzM5ZDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-04-18T00:24:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-04-24T15:08:40Z"}, "message": "Run tests for the cargo submodule in tree\n\nPreviously the `cargotest` suite would run some arbitrary revision of Cargo's\ntest suite, but now that we're bundling it in tree we should be running the\nCargo submodule's test suite instead.", "tree": {"sha": "abc4626ede154916ba1690697f94e1b61dc0d462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc4626ede154916ba1690697f94e1b61dc0d462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "html_url": "https://github.com/rust-lang/rust/commit/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846891aeff1a2a73524c404c6eeff5e8daf4caa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/846891aeff1a2a73524c404c6eeff5e8daf4caa2", "html_url": "https://github.com/rust-lang/rust/commit/846891aeff1a2a73524c404c6eeff5e8daf4caa2"}], "stats": {"total": 80, "additions": 48, "deletions": 32}, "files": [{"sha": "03efb7fc8b0dbb54973ee1b6188f3faf14fffe36", "filename": "cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "patch": "@@ -1 +1 @@\n-Subproject commit 8326a3683a9045d825e4fdc4021af340ee3b3755\n+Subproject commit 03efb7fc8b0dbb54973ee1b6188f3faf14fffe36"}, {"sha": "8ab07e9e5b564498f1f80a8b23cbf8b2fc7bcdc3", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "patch": "@@ -78,14 +78,6 @@ pub fn linkcheck(build: &Build, host: &str) {\n pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let ref compiler = Compiler::new(stage, host);\n \n-    // Configure PATH to find the right rustc. NB. we have to use PATH\n-    // and not RUSTC because the Cargo test suite has tests that will\n-    // fail if rustc is not spelled `rustc`.\n-    let path = build.sysroot(compiler).join(\"bin\");\n-    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n-    let sep = if cfg!(windows) { \";\" } else {\":\" };\n-    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n-\n     // Note that this is a short, cryptic, and not scoped directory name. This\n     // is currently to minimize the length of path on Windows where we otherwise\n     // quickly run into path name limit constraints.\n@@ -95,9 +87,35 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(compiler, &mut cmd);\n-    build.run(cmd.env(\"PATH\", newpath)\n-                 .arg(&build.cargo)\n-                 .arg(&out_dir));\n+    build.run(cmd.arg(&build.cargo)\n+                 .arg(&out_dir)\n+                 .env(\"RUSTC\", build.compiler_path(compiler))\n+                 .env(\"RUSTDOC\", build.rustdoc(compiler)))\n+}\n+\n+/// Runs `cargo test` for `cargo` packaged with Rust.\n+pub fn cargo(build: &Build, stage: u32, host: &str) {\n+    let ref compiler = Compiler::new(stage, host);\n+\n+    // Configure PATH to find the right rustc. NB. we have to use PATH\n+    // and not RUSTC because the Cargo test suite has tests that will\n+    // fail if rustc is not spelled `rustc`.\n+    let path = build.sysroot(compiler).join(\"bin\");\n+    let old_path = ::std::env::var(\"PATH\").expect(\"\");\n+    let sep = if cfg!(windows) { \";\" } else {\":\" };\n+    let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n+\n+    let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n+    cargo.arg(\"--manifest-path\").arg(build.src.join(\"cargo/Cargo.toml\"));\n+\n+    // Don't build tests dynamically, just a pain to work with\n+    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n+    // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n+    // available.\n+    cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n+\n+    build.run(cargo.env(\"PATH\", newpath));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler."}, {"sha": "5f518ea56027d914216d9ebebc09f3cbd2378292", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "patch": "@@ -557,6 +557,19 @@ impl Build {\n             cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n         }\n \n+        // When being built Cargo will at some point call `nmake.exe` on Windows\n+        // MSVC. Unfortunately `nmake` will read these two environment variables\n+        // below and try to intepret them. We're likely being run, however, from\n+        // MSYS `make` which uses the same variables.\n+        //\n+        // As a result, to prevent confusion and errors, we remove these\n+        // variables from our environment to prevent passing MSYS make flags to\n+        // nmake, causing it to blow up.\n+        if cfg!(target_env = \"msvc\") {\n+            cargo.env_remove(\"MAKE\");\n+            cargo.env_remove(\"MAKEFLAGS\");\n+        }\n+\n         // Environment variables *required* needed throughout the build\n         //\n         // FIXME: should update code to not require this env var"}, {"sha": "a5df741e2bfc83965d5f6fbc722fd90dd6c030bb", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "patch": "@@ -55,6 +55,7 @@ check:\n check-aux:\n \t$(Q)$(BOOTSTRAP) test \\\n \t\tsrc/tools/cargotest \\\n+\t\tcargo \\\n \t\tsrc/test/pretty \\\n \t\tsrc/test/run-pass/pretty \\\n \t\tsrc/test/run-fail/pretty \\"}, {"sha": "d811e1122c42fd0a15ff1dd6ea26e8dc2d00f501", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "patch": "@@ -470,6 +470,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|s| s.name(\"librustc\"))\n          .host(true)\n          .run(move |s| check::cargotest(build, s.stage, s.target));\n+    rules.test(\"check-cargo\", \"cargo\")\n+         .dep(|s| s.name(\"tool-cargo\"))\n+         .host(true)\n+         .run(move |s| check::cargo(build, s.stage, s.target));\n     rules.test(\"check-tidy\", \"src/tools/tidy\")\n          .dep(|s| s.name(\"tool-tidy\").stage(0))\n          .default(true)"}, {"sha": "012ee835494e8e3120d0c973a243918d23ec8544", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=009f45f8f1fcc0d0a6700fec8e0fd64d5aa739d2", "patch": "@@ -22,12 +22,6 @@ struct Test {\n }\n \n const TEST_REPOS: &'static [Test] = &[\n-    Test {\n-        name: \"cargo\",\n-        repo: \"https://github.com/rust-lang/cargo\",\n-        sha: \"0e1e34be7540bdaed4918457654fbf028cf69e56\",\n-        lock: None,\n-    },\n     Test {\n         name: \"iron\",\n         repo: \"https://github.com/iron/iron\",\n@@ -61,20 +55,6 @@ const TEST_REPOS: &'static [Test] = &[\n ];\n \n fn main() {\n-    // One of the projects being tested here is Cargo, and when being tested\n-    // Cargo will at some point call `nmake.exe` on Windows MSVC. Unfortunately\n-    // `nmake` will read these two environment variables below and try to\n-    // intepret them. We're likely being run, however, from MSYS `make` which\n-    // uses the same variables.\n-    //\n-    // As a result, to prevent confusion and errors, we remove these variables\n-    // from our environment to prevent passing MSYS make flags to nmake, causing\n-    // it to blow up.\n-    if cfg!(target_env = \"msvc\") {\n-        env::remove_var(\"MAKE\");\n-        env::remove_var(\"MAKEFLAGS\");\n-    }\n-\n     let args = env::args().collect::<Vec<_>>();\n     let ref cargo = args[1];\n     let out_dir = Path::new(&args[2]);"}]}