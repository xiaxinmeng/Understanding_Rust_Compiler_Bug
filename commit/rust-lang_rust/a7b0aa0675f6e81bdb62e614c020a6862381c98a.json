{"sha": "a7b0aa0675f6e81bdb62e614c020a6862381c98a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjBhYTA2NzVmNmU4MWJkYjYyZTYxNGMwMjBhNjg2MjM4MWM5OGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-20T23:02:01Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-01-26T15:18:55Z"}, "message": "rustc_span: move pretty syntax from macro_backtrace to ExpnKind::descr.", "tree": {"sha": "4bf5d1d55161b299505f9287ccbe4664302e650f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bf5d1d55161b299505f9287ccbe4664302e650f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b0aa0675f6e81bdb62e614c020a6862381c98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b0aa0675f6e81bdb62e614c020a6862381c98a", "html_url": "https://github.com/rust-lang/rust/commit/a7b0aa0675f6e81bdb62e614c020a6862381c98a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b0aa0675f6e81bdb62e614c020a6862381c98a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787c458eeb20e447989124e2900e02e8e03b1c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/787c458eeb20e447989124e2900e02e8e03b1c51", "html_url": "https://github.com/rust-lang/rust/commit/787c458eeb20e447989124e2900e02e8e03b1c51"}], "stats": {"total": 45, "additions": 18, "deletions": 27}, "files": [{"sha": "f915f44c17ab977d3928106defede80da0073d31", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -596,10 +596,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             let suggested_limit = self.cx.ecfg.recursion_limit * 2;\n             let mut err = self.cx.struct_span_err(\n                 expn_data.call_site,\n-                &format!(\n-                    \"recursion limit reached while expanding the macro `{}`\",\n-                    expn_data.kind.descr()\n-                ),\n+                &format!(\"recursion limit reached while expanding `{}`\", expn_data.kind.descr()),\n             );\n             err.help(&format!(\n                 \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\","}, {"sha": "a368a881674d86fac4bb50077b8ca44f08b0a6ee", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -732,12 +732,16 @@ pub enum ExpnKind {\n }\n \n impl ExpnKind {\n-    pub fn descr(&self) -> Symbol {\n+    pub fn descr(&self) -> String {\n         match *self {\n-            ExpnKind::Root => kw::PathRoot,\n-            ExpnKind::Macro(_, descr) => descr,\n-            ExpnKind::AstPass(kind) => Symbol::intern(kind.descr()),\n-            ExpnKind::Desugaring(kind) => Symbol::intern(kind.descr()),\n+            ExpnKind::Root => kw::PathRoot.to_string(),\n+            ExpnKind::Macro(macro_kind, name) => match macro_kind {\n+                MacroKind::Bang => format!(\"{}!\", name),\n+                MacroKind::Attr => format!(\"#[{}]\", name),\n+                MacroKind::Derive => format!(\"#[derive({})]\", name),\n+            },\n+            ExpnKind::AstPass(kind) => kind.descr().to_string(),\n+            ExpnKind::Desugaring(kind) => format!(\"desugaring of {}\", kind.descr()),\n         }\n     }\n }"}, {"sha": "764312021efaf7cc9b571c805b2d2fe7e8754632", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -455,19 +455,9 @@ impl Span {\n             }\n             // Don't print recursive invocations.\n             if !expn_data.call_site.source_equal(&prev_span) {\n-                let (pre, post) = match expn_data.kind {\n-                    ExpnKind::Root => break,\n-                    ExpnKind::Desugaring(..) => (\"desugaring of \", \"\"),\n-                    ExpnKind::AstPass(..) => (\"\", \"\"),\n-                    ExpnKind::Macro(macro_kind, _) => match macro_kind {\n-                        MacroKind::Bang => (\"\", \"!\"),\n-                        MacroKind::Attr => (\"#[\", \"]\"),\n-                        MacroKind::Derive => (\"#[derive(\", \")]\"),\n-                    },\n-                };\n                 result.push(MacroBacktrace {\n                     call_site: expn_data.call_site,\n-                    macro_decl_name: format!(\"{}{}{}\", pre, expn_data.kind.descr(), post),\n+                    macro_decl_name: expn_data.kind.descr(),\n                     def_site_span: expn_data.def_site,\n                 });\n             }"}, {"sha": "1cc59051605cdac313f5284be7851ad86b29520b", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -1,4 +1,4 @@\n-error: recursion limit reached while expanding the macro `recurse`\n+error: recursion limit reached while expanding `recurse!`\n   --> $DIR/recursion_limit_macro.rs:10:31\n    |\n LL |     ($t:tt $($tail:tt)*) => { recurse!($($tail)*) };"}, {"sha": "6ea0bc73dc05700251d9287f7c758c88d9c60522", "filename": "src/test/ui/infinite/infinite-macro-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.rs?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -1,5 +1,5 @@\n macro_rules! recursive {\n-    () => (recursive!()) //~ ERROR recursion limit reached while expanding the macro `recursive`\n+    () => (recursive!()) //~ ERROR recursion limit reached while expanding `recursive!`\n }\n \n fn main() {"}, {"sha": "159312e5c1b53e1cc27a021814049c8153a9e4ee", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -1,4 +1,4 @@\n-error: recursion limit reached while expanding the macro `recursive`\n+error: recursion limit reached while expanding `recursive!`\n   --> $DIR/infinite-macro-expansion.rs:2:12\n    |\n LL |     () => (recursive!())"}, {"sha": "00acc20fc9e5e8f0a53edfd889999113122e764d", "filename": "src/test/ui/issues/issue-16098.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fissues%2Fissue-16098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fissues%2Fissue-16098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.rs?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -4,7 +4,7 @@ macro_rules! prob1 {\n     };\n     ($n:expr) => {\n         if ($n % 3 == 0) || ($n % 5 == 0) {\n-            $n + prob1!($n - 1); //~ ERROR recursion limit reached while expanding the macro `prob1`\n+            $n + prob1!($n - 1); //~ ERROR recursion limit reached while expanding `prob1!`\n         } else {\n             prob1!($n - 1);\n         }"}, {"sha": "2b9657d46283bd8d4fc238560058d1af1980789a", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -1,4 +1,4 @@\n-error: recursion limit reached while expanding the macro `prob1`\n+error: recursion limit reached while expanding `prob1!`\n   --> $DIR/issue-16098.rs:7:18\n    |\n LL |             $n + prob1!($n - 1);"}, {"sha": "4e86daffb61bab1aada2a404217c327e4608f569", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7b0aa0675f6e81bdb62e614c020a6862381c98a/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -20,7 +20,7 @@ LL |     my_faulty_macro!();\n    = note: to `my_faulty_macro ! (bcd) ;`\n    = note: expanding `my_faulty_macro! { bcd }`\n \n-error: recursion limit reached while expanding the macro `my_recursive_macro`\n+error: recursion limit reached while expanding `my_recursive_macro!`\n   --> $DIR/trace_faulty_macros.rs:22:9\n    |\n LL |         my_recursive_macro!();"}, {"sha": "b68b0978ab8012f871c80736fb910d14b89c4498", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=a7b0aa0675f6e81bdb62e614c020a6862381c98a", "patch": "@@ -1 +1 @@\n-Subproject commit f6449ba236db31995255ac5e4cad4ab88296a7c6\n+Subproject commit b68b0978ab8012f871c80736fb910d14b89c4498"}]}