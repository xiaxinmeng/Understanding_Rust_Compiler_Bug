{"sha": "1ef70a00ab2727360e36ec07bccc2838caa1db64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjcwYTAwYWIyNzI3MzYwZTM2ZWMwN2JjY2MyODM4Y2FhMWRiNjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-13T21:29:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-28T07:02:26Z"}, "message": "Add repeat method on slice", "tree": {"sha": "391f20d4ddfd44e75b5554825d0b786af412b3cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391f20d4ddfd44e75b5554825d0b786af412b3cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef70a00ab2727360e36ec07bccc2838caa1db64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef70a00ab2727360e36ec07bccc2838caa1db64", "html_url": "https://github.com/rust-lang/rust/commit/1ef70a00ab2727360e36ec07bccc2838caa1db64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef70a00ab2727360e36ec07bccc2838caa1db64/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ac1b5faab32d268a85dfde6c6592b7183c5864", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ac1b5faab32d268a85dfde6c6592b7183c5864", "html_url": "https://github.com/rust-lang/rust/commit/14ac1b5faab32d268a85dfde6c6592b7183c5864"}], "stats": {"total": 125, "additions": 72, "deletions": 53}, "files": [{"sha": "7085b7ea3224b93c45cba18ad49868f7f57207d2", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1ef70a00ab2727360e36ec07bccc2838caa1db64/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef70a00ab2727360e36ec07bccc2838caa1db64/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=1ef70a00ab2727360e36ec07bccc2838caa1db64", "patch": "@@ -1722,6 +1722,77 @@ impl<T> [T] {\n         // NB see hack module in this file\n         hack::into_vec(self)\n     }\n+\n+    /// Creates a vector by repeating a slice `n` times.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(repeat_generic_slice)]\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"repeat_generic_slice\",\n+               reason = \"it's on str, why not on slice?\",\n+               issue = \"48784\")]\n+    pub fn repeat(&self, n: usize) -> Vec<T> where T: Copy {\n+        if n == 0 {\n+            return Vec::new();\n+        }\n+\n+        // If `n` is larger than zero, it can be split as\n+        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n+        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n+        // and `rem` is the remaining part of `n`.\n+\n+        // Using `Vec` to access `set_len()`.\n+        let mut buf = Vec::with_capacity(self.len() * n);\n+\n+        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n+        buf.extend(self);\n+        {\n+            let mut m = n >> 1;\n+            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n+            while m > 0 {\n+                // `buf.extend(buf)`:\n+                unsafe {\n+                    ptr::copy_nonoverlapping(\n+                        buf.as_ptr(),\n+                        (buf.as_mut_ptr() as *mut T).add(buf.len()),\n+                        buf.len(),\n+                    );\n+                    // `buf` has capacity of `self.len() * n`.\n+                    let buf_len = buf.len();\n+                    buf.set_len(buf_len * 2);\n+                }\n+\n+                m >>= 1;\n+            }\n+        }\n+\n+        // `rem` (`= n - 2^expn`) repetition is done by copying\n+        // first `rem` repetitions from `buf` itself.\n+        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n+        if rem_len > 0 {\n+            // `buf.extend(buf[0 .. rem_len])`:\n+            unsafe {\n+                // This is non-overlapping since `2^expn > rem`.\n+                ptr::copy_nonoverlapping(\n+                    buf.as_ptr(),\n+                    (buf.as_mut_ptr() as *mut T).add(buf.len()),\n+                    rem_len,\n+                );\n+                // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n+                let buf_cap = buf.capacity();\n+                buf.set_len(buf_cap);\n+            }\n+        }\n+        buf\n+    }\n }\n \n #[lang = \"slice_u8\"]"}, {"sha": "2f118d094ecc25485e59235ac54c7d66396137b1", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1ef70a00ab2727360e36ec07bccc2838caa1db64/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef70a00ab2727360e36ec07bccc2838caa1db64/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=1ef70a00ab2727360e36ec07bccc2838caa1db64", "patch": "@@ -2067,59 +2067,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {\n-        if n == 0 {\n-            return String::new();\n-        }\n-\n-        // If `n` is larger than zero, it can be split as\n-        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n-        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n-        // and `rem` is the remaining part of `n`.\n-\n-        // Using `Vec` to access `set_len()`.\n-        let mut buf = Vec::with_capacity(self.len() * n);\n-\n-        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n-        buf.extend(self.as_bytes());\n-        {\n-            let mut m = n >> 1;\n-            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n-            while m > 0 {\n-                // `buf.extend(buf)`:\n-                unsafe {\n-                    ptr::copy_nonoverlapping(\n-                        buf.as_ptr(),\n-                        (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n-                        buf.len(),\n-                    );\n-                    // `buf` has capacity of `self.len() * n`.\n-                    let buf_len = buf.len();\n-                    buf.set_len(buf_len * 2);\n-                }\n-\n-                m >>= 1;\n-            }\n-        }\n-\n-        // `rem` (`= n - 2^expn`) repetition is done by copying\n-        // first `rem` repetitions from `buf` itself.\n-        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n-        if rem_len > 0 {\n-            // `buf.extend(buf[0 .. rem_len])`:\n-            unsafe {\n-                // This is non-overlapping since `2^expn > rem`.\n-                ptr::copy_nonoverlapping(\n-                    buf.as_ptr(),\n-                    (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n-                    rem_len,\n-                );\n-                // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n-                let buf_cap = buf.capacity();\n-                buf.set_len(buf_cap);\n-            }\n-        }\n-\n-        unsafe { String::from_utf8_unchecked(buf) }\n+        unsafe { String::from_utf8_unchecked(self.as_bytes().repeat(n)) }\n     }\n \n     /// Checks if all characters in this string are within the ASCII range."}]}