{"sha": "33358dc3c5c1f5d627544075de6ff37b9e328efa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzU4ZGMzYzVjMWY1ZDYyNzU0NDA3NWRlNmZmMzdiOWUzMjhlZmE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-05T16:46:16Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-11T22:13:52Z"}, "message": "Remove the CharExt trait, now that libcore has inherent methods for char", "tree": {"sha": "9c3009498c7b9e8d8eb5e38d1d5f07a96eb21596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c3009498c7b9e8d8eb5e38d1d5f07a96eb21596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33358dc3c5c1f5d627544075de6ff37b9e328efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33358dc3c5c1f5d627544075de6ff37b9e328efa", "html_url": "https://github.com/rust-lang/rust/commit/33358dc3c5c1f5d627544075de6ff37b9e328efa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33358dc3c5c1f5d627544075de6ff37b9e328efa/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c52534f72f035b898efe3b86028741576f1499", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c52534f72f035b898efe3b86028741576f1499", "html_url": "https://github.com/rust-lang/rust/commit/34c52534f72f035b898efe3b86028741576f1499"}], "stats": {"total": 297, "additions": 107, "deletions": 190}, "files": [{"sha": "2c433a7ac9ed5516b7968a84d85eeaf1143e1d4b", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 104, "deletions": 153, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=33358dc3c5c1f5d627544075de6ff37b9e328efa", "patch": "@@ -13,153 +13,9 @@\n use slice;\n use str::from_utf8_unchecked_mut;\n use super::*;\n-use super::CharExt as C;\n use super::printable::is_printable;\n use unicode::tables::{conversions, derived_property, general_category, property};\n \n-#[stable(feature = \"core\", since = \"1.6.0\")]\n-impl CharExt for char {\n-    #[inline]\n-    fn is_digit(self, radix: u32) -> bool {\n-        self.to_digit(radix).is_some()\n-    }\n-\n-    #[inline]\n-    fn to_digit(self, radix: u32) -> Option<u32> {\n-        if radix > 36 {\n-            panic!(\"to_digit: radix is too high (maximum 36)\");\n-        }\n-        let val = match self {\n-          '0' ... '9' => self as u32 - '0' as u32,\n-          'a' ... 'z' => self as u32 - 'a' as u32 + 10,\n-          'A' ... 'Z' => self as u32 - 'A' as u32 + 10,\n-          _ => return None,\n-        };\n-        if val < radix { Some(val) }\n-        else { None }\n-    }\n-\n-    #[inline]\n-    fn escape_unicode(self) -> EscapeUnicode {\n-        let c = self as u32;\n-\n-        // or-ing 1 ensures that for c==0 the code computes that one\n-        // digit should be printed and (which is the same) avoids the\n-        // (31 - 32) underflow\n-        let msb = 31 - (c | 1).leading_zeros();\n-\n-        // the index of the most significant hex digit\n-        let ms_hex_digit = msb / 4;\n-        EscapeUnicode {\n-            c: self,\n-            state: EscapeUnicodeState::Backslash,\n-            hex_digit_idx: ms_hex_digit as usize,\n-        }\n-    }\n-\n-    #[inline]\n-    fn escape_default(self) -> EscapeDefault {\n-        let init_state = match self {\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            '\\x20' ... '\\x7e' => EscapeDefaultState::Char(self),\n-            _ => EscapeDefaultState::Unicode(self.escape_unicode())\n-        };\n-        EscapeDefault { state: init_state }\n-    }\n-\n-    #[inline]\n-    fn escape_debug(self) -> EscapeDebug {\n-        let init_state = match self {\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            c if is_printable(c) => EscapeDefaultState::Char(c),\n-            c => EscapeDefaultState::Unicode(c.escape_unicode()),\n-        };\n-        EscapeDebug(EscapeDefault { state: init_state })\n-    }\n-\n-    #[inline]\n-    fn len_utf8(self) -> usize {\n-        let code = self as u32;\n-        if code < MAX_ONE_B {\n-            1\n-        } else if code < MAX_TWO_B {\n-            2\n-        } else if code < MAX_THREE_B {\n-            3\n-        } else {\n-            4\n-        }\n-    }\n-\n-    #[inline]\n-    fn len_utf16(self) -> usize {\n-        let ch = self as u32;\n-        if (ch & 0xFFFF) == ch { 1 } else { 2 }\n-    }\n-\n-    #[inline]\n-    fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n-        let code = self as u32;\n-        unsafe {\n-            let len =\n-            if code < MAX_ONE_B && !dst.is_empty() {\n-                *dst.get_unchecked_mut(0) = code as u8;\n-                1\n-            } else if code < MAX_TWO_B && dst.len() >= 2 {\n-                *dst.get_unchecked_mut(0) = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n-                *dst.get_unchecked_mut(1) = (code & 0x3F) as u8 | TAG_CONT;\n-                2\n-            } else if code < MAX_THREE_B && dst.len() >= 3  {\n-                *dst.get_unchecked_mut(0) = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n-                *dst.get_unchecked_mut(1) = (code >>  6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code & 0x3F) as u8 | TAG_CONT;\n-                3\n-            } else if dst.len() >= 4 {\n-                *dst.get_unchecked_mut(0) = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n-                *dst.get_unchecked_mut(1) = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(2) = (code >>  6 & 0x3F) as u8 | TAG_CONT;\n-                *dst.get_unchecked_mut(3) = (code & 0x3F) as u8 | TAG_CONT;\n-                4\n-            } else {\n-                panic!(\"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf8(),\n-                    code,\n-                    dst.len())\n-            };\n-            from_utf8_unchecked_mut(dst.get_unchecked_mut(..len))\n-        }\n-    }\n-\n-    #[inline]\n-    fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n-        let mut code = self as u32;\n-        unsafe {\n-            if (code & 0xFFFF) == code && !dst.is_empty() {\n-                // The BMP falls through (assuming non-surrogate, as it should)\n-                *dst.get_unchecked_mut(0) = code as u16;\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n-            } else if dst.len() >= 2 {\n-                // Supplementary planes break into surrogates.\n-                code -= 0x1_0000;\n-                *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n-                *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n-                slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n-            } else {\n-                panic!(\"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n-                    from_u32_unchecked(code).len_utf16(),\n-                    code,\n-                    dst.len())\n-            }\n-        }\n-    }\n-}\n-\n #[lang = \"char\"]\n impl char {\n     /// Checks if a `char` is a digit in the given radix.\n@@ -211,7 +67,7 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn is_digit(self, radix: u32) -> bool {\n-        C::is_digit(self, radix)\n+        self.to_digit(radix).is_some()\n     }\n \n     /// Converts a `char` to a digit in the given radix.\n@@ -265,7 +121,17 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n-        C::to_digit(self, radix)\n+        if radix > 36 {\n+            panic!(\"to_digit: radix is too high (maximum 36)\");\n+        }\n+        let val = match self {\n+          '0' ... '9' => self as u32 - '0' as u32,\n+          'a' ... 'z' => self as u32 - 'a' as u32 + 10,\n+          'A' ... 'Z' => self as u32 - 'A' as u32 + 10,\n+          _ => return None,\n+        };\n+        if val < radix { Some(val) }\n+        else { None }\n     }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a\n@@ -305,7 +171,20 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_unicode(self) -> EscapeUnicode {\n-        C::escape_unicode(self)\n+        let c = self as u32;\n+\n+        // or-ing 1 ensures that for c==0 the code computes that one\n+        // digit should be printed and (which is the same) avoids the\n+        // (31 - 32) underflow\n+        let msb = 31 - (c | 1).leading_zeros();\n+\n+        // the index of the most significant hex digit\n+        let ms_hex_digit = msb / 4;\n+        EscapeUnicode {\n+            c: self,\n+            state: EscapeUnicodeState::Backslash,\n+            hex_digit_idx: ms_hex_digit as usize,\n+        }\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character\n@@ -345,7 +224,15 @@ impl char {\n     #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n-        C::escape_debug(self)\n+        let init_state = match self {\n+            '\\t' => EscapeDefaultState::Backslash('t'),\n+            '\\r' => EscapeDefaultState::Backslash('r'),\n+            '\\n' => EscapeDefaultState::Backslash('n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n+            c if is_printable(c) => EscapeDefaultState::Char(c),\n+            c => EscapeDefaultState::Unicode(c.escape_unicode()),\n+        };\n+        EscapeDebug(EscapeDefault { state: init_state })\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character\n@@ -400,7 +287,15 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn escape_default(self) -> EscapeDefault {\n-        C::escape_default(self)\n+        let init_state = match self {\n+            '\\t' => EscapeDefaultState::Backslash('t'),\n+            '\\r' => EscapeDefaultState::Backslash('r'),\n+            '\\n' => EscapeDefaultState::Backslash('n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n+            '\\x20' ... '\\x7e' => EscapeDefaultState::Char(self),\n+            _ => EscapeDefaultState::Unicode(self.escape_unicode())\n+        };\n+        EscapeDefault { state: init_state }\n     }\n \n     /// Returns the number of bytes this `char` would need if encoded in UTF-8.\n@@ -451,7 +346,16 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len_utf8(self) -> usize {\n-        C::len_utf8(self)\n+        let code = self as u32;\n+        if code < MAX_ONE_B {\n+            1\n+        } else if code < MAX_TWO_B {\n+            2\n+        } else if code < MAX_THREE_B {\n+            3\n+        } else {\n+            4\n+        }\n     }\n \n     /// Returns the number of 16-bit code units this `char` would need if\n@@ -476,7 +380,8 @@ impl char {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len_utf16(self) -> usize {\n-        C::len_utf16(self)\n+        let ch = self as u32;\n+        if (ch & 0xFFFF) == ch { 1 } else { 2 }\n     }\n \n     /// Encodes this character as UTF-8 into the provided byte buffer,\n@@ -518,7 +423,35 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {\n-        C::encode_utf8(self, dst)\n+        let code = self as u32;\n+        unsafe {\n+            let len =\n+            if code < MAX_ONE_B && !dst.is_empty() {\n+                *dst.get_unchecked_mut(0) = code as u8;\n+                1\n+            } else if code < MAX_TWO_B && dst.len() >= 2 {\n+                *dst.get_unchecked_mut(0) = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;\n+                *dst.get_unchecked_mut(1) = (code & 0x3F) as u8 | TAG_CONT;\n+                2\n+            } else if code < MAX_THREE_B && dst.len() >= 3  {\n+                *dst.get_unchecked_mut(0) = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;\n+                *dst.get_unchecked_mut(1) = (code >>  6 & 0x3F) as u8 | TAG_CONT;\n+                *dst.get_unchecked_mut(2) = (code & 0x3F) as u8 | TAG_CONT;\n+                3\n+            } else if dst.len() >= 4 {\n+                *dst.get_unchecked_mut(0) = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;\n+                *dst.get_unchecked_mut(1) = (code >> 12 & 0x3F) as u8 | TAG_CONT;\n+                *dst.get_unchecked_mut(2) = (code >>  6 & 0x3F) as u8 | TAG_CONT;\n+                *dst.get_unchecked_mut(3) = (code & 0x3F) as u8 | TAG_CONT;\n+                4\n+            } else {\n+                panic!(\"encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}\",\n+                    from_u32_unchecked(code).len_utf8(),\n+                    code,\n+                    dst.len())\n+            };\n+            from_utf8_unchecked_mut(dst.get_unchecked_mut(..len))\n+        }\n     }\n \n     /// Encodes this character as UTF-16 into the provided `u16` buffer,\n@@ -558,7 +491,25 @@ impl char {\n     #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n     #[inline]\n     pub fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16] {\n-        C::encode_utf16(self, dst)\n+        let mut code = self as u32;\n+        unsafe {\n+            if (code & 0xFFFF) == code && !dst.is_empty() {\n+                // The BMP falls through (assuming non-surrogate, as it should)\n+                *dst.get_unchecked_mut(0) = code as u16;\n+                slice::from_raw_parts_mut(dst.as_mut_ptr(), 1)\n+            } else if dst.len() >= 2 {\n+                // Supplementary planes break into surrogates.\n+                code -= 0x1_0000;\n+                *dst.get_unchecked_mut(0) = 0xD800 | ((code >> 10) as u16);\n+                *dst.get_unchecked_mut(1) = 0xDC00 | ((code as u16) & 0x3FF);\n+                slice::from_raw_parts_mut(dst.as_mut_ptr(), 2)\n+            } else {\n+                panic!(\"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n+                    from_u32_unchecked(code).len_utf16(),\n+                    code,\n+                    dst.len())\n+            }\n+        }\n     }\n \n     /// Returns true if this `char` is an alphabetic code point, and false if not."}, {"sha": "c051a1ff8c8861bb7b0b01f97bdf7848095580d2", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=33358dc3c5c1f5d627544075de6ff37b9e328efa", "patch": "@@ -119,34 +119,6 @@ pub const MAX: char = '\\u{10ffff}';\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';\n \n-// NB: the stabilization and documentation for this trait is in\n-// unicode/char.rs, not here\n-#[allow(missing_docs)] // docs in libunicode/u_char.rs\n-#[doc(hidden)]\n-#[unstable(feature = \"core_char_ext\",\n-           reason = \"the stable interface is `impl char` in later crate\",\n-           issue = \"32110\")]\n-pub trait CharExt {\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn is_digit(self, radix: u32) -> bool;\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn to_digit(self, radix: u32) -> Option<u32>;\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn escape_unicode(self) -> EscapeUnicode;\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn escape_default(self) -> EscapeDefault;\n-    #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n-    fn escape_debug(self) -> EscapeDebug;\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn len_utf8(self) -> usize;\n-    #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn len_utf16(self) -> usize;\n-    #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n-    fn encode_utf8(self, dst: &mut [u8]) -> &mut str;\n-    #[stable(feature = \"unicode_encode_char\", since = \"1.15.0\")]\n-    fn encode_utf16(self, dst: &mut [u16]) -> &mut [u16];\n-}\n-\n /// Returns an iterator that yields the hexadecimal Unicode escape of a\n /// character, as `char`s.\n ///"}, {"sha": "cc3ad71117a5d34d268811adec3ddb72b372019d", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=33358dc3c5c1f5d627544075de6ff37b9e328efa", "patch": "@@ -62,6 +62,3 @@ pub use slice::SliceExt;\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use str::StrExt;\n-#[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n-#[doc(no_inline)]\n-pub use char::CharExt;"}, {"sha": "0882984e0774c580b18cdb826dbcda35e9f599c1", "filename": "src/libcore/unicode/str.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Funicode%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Funicode%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fstr.rs?ref=33358dc3c5c1f5d627544075de6ff37b9e328efa", "patch": "@@ -9,9 +9,6 @@\n // except according to those terms.\n \n //! Unicode-intensive string manipulations.\n-//!\n-//! This module provides functionality to `str` that requires the Unicode\n-//! methods provided by the unicode parts of the CharExt trait.\n \n use char;\n use iter::{Filter, FusedIterator};\n@@ -109,7 +106,7 @@ impl<I> Iterator for Utf16Encoder<I>\n \n         let mut buf = [0; 2];\n         self.chars.next().map(|ch| {\n-            let n = CharExt::encode_utf16(ch, &mut buf).len();\n+            let n = ch.encode_utf16(&mut buf).len();\n             if n == 2 {\n                 self.extra = buf[1];\n             }"}, {"sha": "1f7b1bde9141aeef323e54014bfc6d33c860eeac", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=33358dc3c5c1f5d627544075de6ff37b9e328efa", "patch": "@@ -16,7 +16,7 @@ use unicode::version::UnicodeVersion;\n use unicode::bool_trie::{BoolTrie, SmallBoolTrie};\n \n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n-/// `CharExt` and `UnicodeStrPrelude` traits are based on.\n+/// `char` and `str` methods are based on.\n pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n     major: 10,\n     minor: 0,"}, {"sha": "82262cc76627f361dcc90ab96034ce8666588c3e", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/33358dc3c5c1f5d627544075de6ff37b9e328efa/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=33358dc3c5c1f5d627544075de6ff37b9e328efa", "patch": "@@ -470,7 +470,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n             unicode_version = re.search(pattern, readme.read()).groups()\n         rf.write(\"\"\"\n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n-/// `CharExt` and `UnicodeStrPrelude` traits are based on.\n+/// `char` and `str` methods are based on.\n pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n     major: %s,\n     minor: %s,"}]}