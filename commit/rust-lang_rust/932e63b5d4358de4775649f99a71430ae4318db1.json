{"sha": "932e63b5d4358de4775649f99a71430ae4318db1", "node_id": "C_kwDOAAsO6NoAKDkzMmU2M2I1ZDQzNThkZTQ3NzU2NDlmOTlhNzE0MzBhZTQzMThkYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T11:23:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-17T11:23:05Z"}, "message": "Auto merge of #13239 - mdx97:mathew/fix-add-reference-for-macros, r=Veykril\n\nFix add reference action on macros.\n\nBefore we were using the range of the corresponding expression node in the macro expanded file, which is obviously incorrect as we are setting the text in the original source.\n\nFor some reason, the test I added is failing and I haven't found a way to fix it. Does anyone know why `check_fix` wouldn't work with macros? Getting this error:\n\n```text\nthread 'handlers::type_mismatch::tests::test_add_reference_to_macro_call' panicked at 'no diagnostics', crates/ide-diagnostics/src/handlers/type_mismatch.rs:317:9\n```\n\ncloses #13219", "tree": {"sha": "b8ab9723f7d06d5f741abcc100a1f21518a27394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ab9723f7d06d5f741abcc100a1f21518a27394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/932e63b5d4358de4775649f99a71430ae4318db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/932e63b5d4358de4775649f99a71430ae4318db1", "html_url": "https://github.com/rust-lang/rust/commit/932e63b5d4358de4775649f99a71430ae4318db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/932e63b5d4358de4775649f99a71430ae4318db1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e3f41c2a8dc2559e3cd22fddadc505556aa1fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e3f41c2a8dc2559e3cd22fddadc505556aa1fa", "html_url": "https://github.com/rust-lang/rust/commit/b6e3f41c2a8dc2559e3cd22fddadc505556aa1fa"}, {"sha": "a65ca20210b4cf82c32f11249208f990af3fb816", "url": "https://api.github.com/repos/rust-lang/rust/commits/a65ca20210b4cf82c32f11249208f990af3fb816", "html_url": "https://github.com/rust-lang/rust/commit/a65ca20210b4cf82c32f11249208f990af3fb816"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "62c69f90baa4f9f55b1b15bcb827f67883c3f1cd", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/932e63b5d4358de4775649f99a71430ae4318db1/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932e63b5d4358de4775649f99a71430ae4318db1/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=932e63b5d4358de4775649f99a71430ae4318db1", "patch": "@@ -59,9 +59,6 @@ fn add_reference(\n     d: &hir::TypeMismatch,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n-    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n-    let expr_node = d.expr.value.to_node(&root);\n-\n     let range = ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range;\n \n     let (_, mutability) = d.expected.as_reference()?;\n@@ -72,7 +69,7 @@ fn add_reference(\n \n     let ampersands = format!(\"&{}\", mutability.as_keyword_for_ref());\n \n-    let edit = TextEdit::insert(expr_node.syntax().text_range().start(), ampersands);\n+    let edit = TextEdit::insert(range.start(), ampersands);\n     let source_change =\n         SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n     acc.push(fix(\"add_reference_here\", \"Add reference here\", source_change, range));\n@@ -314,6 +311,34 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn test_add_reference_to_macro_call() {\n+        check_fix(\n+            r#\"\n+macro_rules! thousand {\n+    () => {\n+        1000_u64\n+    };\n+}\n+fn test(foo: &u64) {}\n+fn main() {\n+    test($0thousand!());\n+}\n+            \"#,\n+            r#\"\n+macro_rules! thousand {\n+    () => {\n+        1000_u64\n+    };\n+}\n+fn test(foo: &u64) {}\n+fn main() {\n+    test(&thousand!());\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_add_mutable_reference_to_let_stmt() {\n         check_fix("}]}