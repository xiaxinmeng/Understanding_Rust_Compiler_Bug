{"sha": "659d325982c38346a57cd7a999b27b8f478092a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OWQzMjU5ODJjMzgzNDZhNTdjZDdhOTk5YjI3YjhmNDc4MDkyYTA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-01T13:26:22Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-01T13:27:12Z"}, "message": "Implement compressed where clause with Rfc style", "tree": {"sha": "31350259c1218f906f941870cd3e35f321f28e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31350259c1218f906f941870cd3e35f321f28e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659d325982c38346a57cd7a999b27b8f478092a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659d325982c38346a57cd7a999b27b8f478092a0", "html_url": "https://github.com/rust-lang/rust/commit/659d325982c38346a57cd7a999b27b8f478092a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659d325982c38346a57cd7a999b27b8f478092a0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6c2d6e997209a14bd954861fe1a35326d4251e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6c2d6e997209a14bd954861fe1a35326d4251e", "html_url": "https://github.com/rust-lang/rust/commit/ec6c2d6e997209a14bd954861fe1a35326d4251e"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "f317081f58676b60e6b871a8eabe410f61f97ff6", "filename": "src/items.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/659d325982c38346a57cd7a999b27b8f478092a0/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659d325982c38346a57cd7a999b27b8f478092a0/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=659d325982c38346a57cd7a999b27b8f478092a0", "patch": "@@ -259,12 +259,12 @@ impl<'a> FmtVisitor<'a> {\n         span: Span,\n         block: &ast::Block,\n     ) -> Option<String> {\n-        let mut newline_brace = newline_for_brace(self.config, &generics.where_clause);\n         let context = self.get_context();\n \n         let block_snippet = self.snippet(mk_sp(block.span.lo, block.span.hi));\n         let has_body = !block_snippet[1..block_snippet.len() - 1].trim().is_empty() ||\n             !context.config.fn_empty_single_line();\n+        let mut newline_brace = newline_for_brace(self.config, &generics.where_clause, has_body);\n \n         let (mut result, force_newline_brace) = try_opt!(rewrite_fn_base(\n             &context,\n@@ -591,6 +591,7 @@ pub fn format_impl(\n             \"{\",\n             false,\n             last_line_width(&ref_and_type) == 1,\n+            false,\n             where_span_end,\n             item.span,\n             self_ty.span.hi,\n@@ -983,6 +984,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             \"{\",\n             false,\n             trait_bound_str.is_empty() && last_line_width(&generics_str) == 1,\n+            false,\n             None,\n             item.span,\n             pos_before_where,\n@@ -1216,6 +1218,7 @@ fn format_tuple_struct(\n                 \";\",\n                 true,\n                 false,\n+                false,\n                 None,\n                 span,\n                 body_hi,\n@@ -1313,6 +1316,7 @@ pub fn rewrite_type_alias(\n         \"=\",\n         true,\n         true,\n+        false,\n         Some(span.hi),\n         span,\n         generics.span.hi,\n@@ -2034,45 +2038,39 @@ fn rewrite_fn_base(\n     }\n \n     let should_compress_where = match context.config.where_density() {\n-        Density::Compressed => !result.contains('\\n') || put_args_in_block,\n+        Density::Compressed => !result.contains('\\n'),\n         Density::CompressedIfEmpty => !has_body && !result.contains('\\n'),\n         _ => false,\n-    } || (put_args_in_block && ret_str.is_empty());\n+    };\n \n     let pos_before_where = match fd.output {\n         ast::FunctionRetTy::Default(..) => args_span.hi,\n         ast::FunctionRetTy::Ty(ref ty) => ty.span.hi,\n     };\n+\n     if where_clause.predicates.len() == 1 && should_compress_where {\n-        let budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(last_line_width(&result))\n-        );\n+        let budget = context\n+            .config\n+            .max_width()\n+            .checked_sub(last_line_used_width(&result, indent.width()))\n+            .unwrap_or(0);\n         if let Some(where_clause_str) = rewrite_where_clause(\n             context,\n             where_clause,\n             context.config.fn_brace_style(),\n             Shape::legacy(budget, indent),\n             Density::Compressed,\n             \"{\",\n-            !has_braces,\n-            put_args_in_block && ret_str.is_empty(),\n+            true,\n+            false, // Force where clause on the next line\n+            true,  // Compress where\n             Some(span.hi),\n             span,\n             pos_before_where,\n         ) {\n-            if !where_clause_str.contains('\\n') {\n-                if last_line_width(&result) + where_clause_str.len() > context.config.max_width() {\n-                    result.push('\\n');\n-                }\n-\n-                result.push_str(&where_clause_str);\n-\n-                force_new_line_for_brace |= last_line_contains_single_line_comment(&result);\n-                return Some((result, force_new_line_for_brace));\n-            }\n+            result.push_str(&where_clause_str);\n+            force_new_line_for_brace |= last_line_contains_single_line_comment(&result);\n+            return Some((result, force_new_line_for_brace));\n         }\n     }\n \n@@ -2085,6 +2083,7 @@ fn rewrite_fn_base(\n         \"{\",\n         !has_braces,\n         put_args_in_block && ret_str.is_empty(),\n+        false,\n         Some(span.hi),\n         span,\n         pos_before_where,\n@@ -2502,6 +2501,8 @@ fn rewrite_where_clause_rfc_style(\n     suppress_comma: bool,\n     // where clause can be kept on the current line.\n     snuggle: bool,\n+    // copmressed single where clause\n+    compress_where: bool,\n     span_end: Option<BytePos>,\n     span: Span,\n     span_end_before_where: BytePos,\n@@ -2568,14 +2569,21 @@ fn rewrite_where_clause_rfc_style(\n     } else {\n         \"\\n\".to_owned() + &clause_shape.indent.to_string(context.config)\n     };\n+    let clause_sep = if compress_where && comment_before.is_empty() && comment_after.is_empty() &&\n+        !preds_str.contains('\\n') && 6 + preds_str.len() <= shape.width\n+    {\n+        String::from(\" \")\n+    } else {\n+        format!(\"\\n{}\", clause_shape.indent.to_string(context.config))\n+    };\n     Some(format!(\n-        \"{}{}{}where{}{}\\n{}{}\",\n+        \"{}{}{}where{}{}{}{}\",\n         starting_newline,\n         comment_before,\n         newline_before_where,\n         newline_after_where,\n         comment_after,\n-        clause_shape.indent.to_string(context.config),\n+        clause_sep,\n         preds_str\n     ))\n }\n@@ -2589,6 +2597,7 @@ fn rewrite_where_clause(\n     terminator: &str,\n     suppress_comma: bool,\n     snuggle: bool,\n+    compress_where: bool,\n     span_end: Option<BytePos>,\n     span: Span,\n     span_end_before_where: BytePos,\n@@ -2605,6 +2614,7 @@ fn rewrite_where_clause(\n             terminator,\n             suppress_comma,\n             snuggle,\n+            compress_where,\n             span_end,\n             span,\n             span_end_before_where,\n@@ -2771,6 +2781,7 @@ fn format_generics(\n             terminator,\n             false,\n             trimmed_last_line_width(&result) == 1,\n+            false,\n             Some(span.hi),\n             span,\n             generics.span.hi,"}]}