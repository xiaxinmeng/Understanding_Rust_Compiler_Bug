{"sha": "6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "node_id": "C_kwDOAAsO6NoAKDZkMWNkY2FlZTUyZTM1N2RmYjM1MDAwOTFiZGQxOGEyZTBjNzYzZmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-17T22:44:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-17T22:44:26Z"}, "message": "Rollup merge of #105458 - Ayush1325:blocking_spawn, r=Mark-Simulacrum\n\nAllow blocking `Command::output`\n\n### Problem\nCurrently, `Command::output` is internally implemented using `Command::spawn`. This is problematic because some targets (like UEFI) do not actually support multitasking and thus block while the program is executing. This coupling does not make much sense as `Command::output` is supposed to block until the execution is complete anyway and thus does not need to rely on a non-blocking `Child` or any other intermediate.\n\n### Solution\nThis PR moves the implementation of `Command::output` to `std::sys`. This means targets can choose to implement only `Command::output` without having to implement `Command::spawn`.\n\n### Additional Information\n\nThis was originally conceived when working on https://github.com/rust-lang/rust/pull/100316. Currently, the only target I know about that will benefit from this change is UEFI.\n\nThis PR can also be used to implement more efficient `Command::output` since the intermediate `Process` is not actually needed anymore, but that is outside the scope of this PR.\n\nSince this is not a public API change, I'm not sure if an RFC is needed or not.", "tree": {"sha": "8c77db364a89edb08e1552ac86b4d74a6baae5a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c77db364a89edb08e1552ac86b4d74a6baae5a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjnkZKCRBK7hj4Ov3rIwAAYREIAJYPzX3qtqRwHw9MQhpNBjB5\nbj557u6+vGJwC8O4MoJng3f38guwX5HyF+7M8TIrYbH/2Lplvnpw8R1j7RzgMm/O\n6KVuyZquoxspsv++jENNF5zdtA/iQpCehmivXX8ua1f+vVWCnq6iSy7Io4OkJq/a\noDLhiE4+N1q54a451TDB3byZPJXRDHAR6DuPcwhY3AXW5REX/mnpTW65IUjNC5kW\nfB96VUMjjuloXueD3B9oG1kWBxtMZu/RyIVLaDWIK/iNaT64isTpjbF7u9GZPuku\nQaJJCesAm9+yEXaV/cZaQNu1zzfq8putzMhTDMO73/5fiOchatFoTtCI7cKcZvA=\n=/oQN\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c77db364a89edb08e1552ac86b4d74a6baae5a1\nparent 5dc0b6ff6d76cefa32b1393800067c743f163dcc\nparent a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671317066 +0100\ncommitter GitHub <noreply@github.com> 1671317066 +0100\n\nRollup merge of #105458 - Ayush1325:blocking_spawn, r=Mark-Simulacrum\n\nAllow blocking `Command::output`\n\n### Problem\nCurrently, `Command::output` is internally implemented using `Command::spawn`. This is problematic because some targets (like UEFI) do not actually support multitasking and thus block while the program is executing. This coupling does not make much sense as `Command::output` is supposed to block until the execution is complete anyway and thus does not need to rely on a non-blocking `Child` or any other intermediate.\n\n### Solution\nThis PR moves the implementation of `Command::output` to `std::sys`. This means targets can choose to implement only `Command::output` without having to implement `Command::spawn`.\n\n### Additional Information\n\nThis was originally conceived when working on https://github.com/rust-lang/rust/pull/100316. Currently, the only target I know about that will benefit from this change is UEFI.\n\nThis PR can also be used to implement more efficient `Command::output` since the intermediate `Process` is not actually needed anymore, but that is outside the scope of this PR.\n\nSince this is not a public API change, I'm not sure if an RFC is needed or not.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "html_url": "https://github.com/rust-lang/rust/commit/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dc0b6ff6d76cefa32b1393800067c743f163dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc0b6ff6d76cefa32b1393800067c743f163dcc", "html_url": "https://github.com/rust-lang/rust/commit/5dc0b6ff6d76cefa32b1393800067c743f163dcc"}, {"sha": "a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3", "html_url": "https://github.com/rust-lang/rust/commit/a94793d8d17e4cfe2e727c30c36e174b8d6b6ee3"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "17aff342c1599455b2160b43b456bdb8f752246e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -362,6 +362,10 @@ impl Read for ChildStdout {\n     fn is_read_vectored(&self) -> bool {\n         self.inner.is_read_vectored()\n     }\n+\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.inner.read_to_end(buf)\n+    }\n }\n \n impl AsInner<AnonPipe> for ChildStdout {\n@@ -907,10 +911,8 @@ impl Command {\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn output(&mut self) -> io::Result<Output> {\n-        self.inner\n-            .spawn(imp::Stdio::MakePipe, false)\n-            .map(Child::from_inner)\n-            .and_then(|p| p.wait_with_output())\n+        let (status, stdout, stderr) = self.inner.output()?;\n+        Ok(Output { status: ExitStatus(status), stdout, stderr })\n     }\n \n     /// Executes a command as a child process, waiting for it to finish and"}, {"sha": "a744d0ab6404334e2b43512a5b81b9283a687a84", "filename": "library/std/src/sys/unix/pipe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -58,6 +58,10 @@ impl AnonPipe {\n         self.0.is_read_vectored()\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0.read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "4c99d758c93a3156e1ccfafe6252443c4f4468b5", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -35,6 +35,11 @@ impl Command {\n         Ok((Process { handle: Handle::new(process_handle) }, ours))\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n         if self.saw_nul() {\n             return io::const_io_error!("}, {"sha": "39d1c8b1d8ebc75d0da500c882e4683bd167ba40", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -133,6 +133,11 @@ impl Command {\n         }\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     // Attempts to fork the process. If successful, returns Ok((0, -1))\n     // in the child, and Ok((child_pid, -1)) in the parent.\n     #[cfg(not(target_os = \"linux\"))]"}, {"sha": "f28ca58d02038ade1af035abc4f7abc627455b0d", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -20,6 +20,10 @@ impl Command {\n         unsupported()\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        unsupported()\n+    }\n+\n     pub fn exec(&mut self, _default: Stdio) -> io::Error {\n         unsupported_err()\n     }"}, {"sha": "f549d37c301165fad9019ca014f5770398cdcf5c", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -108,6 +108,11 @@ impl Command {\n         }\n     }\n \n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n+\n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n         let ret = Command::spawn(self, default, false);\n         match ret {"}, {"sha": "0bba673b458cb690011d413db588dffb9bde88c1", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -15,6 +15,10 @@ impl AnonPipe {\n         self.0\n     }\n \n+    pub fn read_to_end(&self, _buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.0\n+    }\n+\n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         self.0\n     }"}, {"sha": "a494f2d6b4c1529314c3a2a4b91184d9d6fa1697", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -75,6 +75,10 @@ impl Command {\n     ) -> io::Result<(Process, StdioPipes)> {\n         unsupported()\n     }\n+\n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        unsupported()\n+    }\n }\n \n impl From<AnonPipe> for Stdio {"}, {"sha": "7b25edaa556f082e211cf0f90ad07ba67181d29f", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io::{self, IoSlice, IoSliceMut};\n+use crate::io::{self, IoSlice, IoSliceMut, Read};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -261,6 +261,10 @@ impl AnonPipe {\n         self.inner.is_read_vectored()\n     }\n \n+    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        self.handle().read_to_end(buf)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         unsafe {\n             let len = crate::cmp::min(buf.len(), c::DWORD::MAX as usize) as c::DWORD;"}, {"sha": "10bc949e1f45faf7c167e66e6b5c61a4c2aae980", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -351,6 +351,11 @@ impl Command {\n             ))\n         }\n     }\n+\n+    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+        let (proc, pipes) = self.spawn(Stdio::MakePipe, false)?;\n+        crate::sys_common::process::wait_with_output(proc, pipes)\n+    }\n }\n \n impl fmt::Debug for Command {"}, {"sha": "ae11412067b549a719ec243442bd2beb7606c270", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1cdcaee52e357dfb3500091bdd18a2e0c763ff/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=6d1cdcaee52e357dfb3500091bdd18a2e0c763ff", "patch": "@@ -4,7 +4,9 @@\n use crate::collections::BTreeMap;\n use crate::env;\n use crate::ffi::{OsStr, OsString};\n-use crate::sys::process::EnvKey;\n+use crate::io;\n+use crate::sys::pipe::read2;\n+use crate::sys::process::{EnvKey, ExitStatus, Process, StdioPipes};\n \n // Stores a set of changes to an environment\n #[derive(Clone, Debug)]\n@@ -117,3 +119,30 @@ impl<'a> ExactSizeIterator for CommandEnvs<'a> {\n         self.iter.is_empty()\n     }\n }\n+\n+pub fn wait_with_output(\n+    mut process: Process,\n+    mut pipes: StdioPipes,\n+) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {\n+    drop(pipes.stdin.take());\n+\n+    let (mut stdout, mut stderr) = (Vec::new(), Vec::new());\n+    match (pipes.stdout.take(), pipes.stderr.take()) {\n+        (None, None) => {}\n+        (Some(out), None) => {\n+            let res = out.read_to_end(&mut stdout);\n+            res.unwrap();\n+        }\n+        (None, Some(err)) => {\n+            let res = err.read_to_end(&mut stderr);\n+            res.unwrap();\n+        }\n+        (Some(out), Some(err)) => {\n+            let res = read2(out, &mut stdout, err, &mut stderr);\n+            res.unwrap();\n+        }\n+    }\n+\n+    let status = process.wait()?;\n+    Ok((status, stdout, stderr))\n+}"}]}