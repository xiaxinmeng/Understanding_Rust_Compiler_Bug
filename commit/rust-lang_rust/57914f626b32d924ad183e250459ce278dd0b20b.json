{"sha": "57914f626b32d924ad183e250459ce278dd0b20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTE0ZjYyNmIzMmQ5MjRhZDE4M2UyNTA0NTljZTI3OGRkMGIyMGI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-20T02:32:50Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:04:45Z"}, "message": "Move eh_personality() onto CrateContext", "tree": {"sha": "df241ac62c593542248f42b4757908cf34ea30d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df241ac62c593542248f42b4757908cf34ea30d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57914f626b32d924ad183e250459ce278dd0b20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57914f626b32d924ad183e250459ce278dd0b20b", "html_url": "https://github.com/rust-lang/rust/commit/57914f626b32d924ad183e250459ce278dd0b20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57914f626b32d924ad183e250459ce278dd0b20b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3198797050cc46cb784a6454f4ad0fcc9d068211", "url": "https://api.github.com/repos/rust-lang/rust/commits/3198797050cc46cb784a6454f4ad0fcc9d068211", "html_url": "https://github.com/rust-lang/rust/commit/3198797050cc46cb784a6454f4ad0fcc9d068211"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "21eccb101f73af24c2dc1d58299336897bbf756c", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=57914f626b32d924ad183e250459ce278dd0b20b", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> DropValue<'tcx> {\n \n         let mut pad_bcx = fcx.build_new_block(\"unwind_custom_\");\n \n-        let llpersonality = pad_bcx.fcx().eh_personality();\n+        let llpersonality = pad_bcx.ccx.eh_personality();\n \n         let resume_bcx = fcx.build_new_block(\"resume\");\n         let val = if base::wants_msvc_seh(fcx.ccx.sess()) {"}, {"sha": "ce5a72c7a0f21eb1ada81c0536054f8c3bf81af4", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=57914f626b32d924ad183e250459ce278dd0b20b", "patch": "@@ -285,50 +285,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         BlockAndBuilder::new(self.new_block(name), self)\n     }\n \n-    pub fn eh_personality(&self) -> ValueRef {\n-        // The exception handling personality function.\n-        //\n-        // If our compilation unit has the `eh_personality` lang item somewhere\n-        // within it, then we just need to translate that. Otherwise, we're\n-        // building an rlib which will depend on some upstream implementation of\n-        // this function, so we just codegen a generic reference to it. We don't\n-        // specify any of the types for the function, we just make it a symbol\n-        // that LLVM can later use.\n-        //\n-        // Note that MSVC is a little special here in that we don't use the\n-        // `eh_personality` lang item at all. Currently LLVM has support for\n-        // both Dwarf and SEH unwind mechanisms for MSVC targets and uses the\n-        // *name of the personality function* to decide what kind of unwind side\n-        // tables/landing pads to emit. It looks like Dwarf is used by default,\n-        // injecting a dependency on the `_Unwind_Resume` symbol for resuming\n-        // an \"exception\", but for MSVC we want to force SEH. This means that we\n-        // can't actually have the personality function be our standard\n-        // `rust_eh_personality` function, but rather we wired it up to the\n-        // CRT's custom personality function, which forces LLVM to consider\n-        // landing pads as \"landing pads for SEH\".\n-        let ccx = self.ccx;\n-        let tcx = ccx.tcx();\n-        match tcx.lang_items.eh_personality() {\n-            Some(def_id) if !base::wants_msvc_seh(ccx.sess()) => {\n-                Callee::def(ccx, def_id, tcx.intern_substs(&[])).reify(ccx)\n-            }\n-            _ => {\n-                if let Some(llpersonality) = ccx.eh_personality().get() {\n-                    return llpersonality\n-                }\n-                let name = if base::wants_msvc_seh(ccx.sess()) {\n-                    \"__CxxFrameHandler3\"\n-                } else {\n-                    \"rust_eh_personality\"\n-                };\n-                let fty = Type::variadic_func(&[], &Type::i32(ccx));\n-                let f = declare::declare_cfn(ccx, name, fty);\n-                ccx.eh_personality().set(Some(f));\n-                f\n-            }\n-        }\n-    }\n-\n     // Returns a ValueRef of the \"eh_unwind_resume\" lang item if one is defined,\n     // otherwise declares it as an external function.\n     pub fn eh_unwind_resume(&self) -> Callee<'tcx> {"}, {"sha": "25a7a5eddd46426d55a156458fa79bf97535cc41", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=57914f626b32d924ad183e250459ce278dd0b20b", "patch": "@@ -16,6 +16,8 @@ use rustc::hir::def::ExportMap;\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n use debuginfo;\n+use callee::Callee;\n+use base;\n use declare;\n use glue::DropGlueKind;\n use monomorphize::Instance;\n@@ -825,10 +827,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().dbg_cx\n     }\n \n-    pub fn eh_personality<'a>(&'a self) -> &'a Cell<Option<ValueRef>> {\n-        &self.local().eh_personality\n-    }\n-\n     pub fn eh_unwind_resume<'a>(&'a self) -> &'a Cell<Option<ValueRef>> {\n         &self.local().eh_unwind_resume\n     }\n@@ -909,6 +907,50 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         base_n::push_str(idx as u64, base_n::ALPHANUMERIC_ONLY, &mut name);\n         name\n     }\n+\n+    pub fn eh_personality(&self) -> ValueRef {\n+        // The exception handling personality function.\n+        //\n+        // If our compilation unit has the `eh_personality` lang item somewhere\n+        // within it, then we just need to translate that. Otherwise, we're\n+        // building an rlib which will depend on some upstream implementation of\n+        // this function, so we just codegen a generic reference to it. We don't\n+        // specify any of the types for the function, we just make it a symbol\n+        // that LLVM can later use.\n+        //\n+        // Note that MSVC is a little special here in that we don't use the\n+        // `eh_personality` lang item at all. Currently LLVM has support for\n+        // both Dwarf and SEH unwind mechanisms for MSVC targets and uses the\n+        // *name of the personality function* to decide what kind of unwind side\n+        // tables/landing pads to emit. It looks like Dwarf is used by default,\n+        // injecting a dependency on the `_Unwind_Resume` symbol for resuming\n+        // an \"exception\", but for MSVC we want to force SEH. This means that we\n+        // can't actually have the personality function be our standard\n+        // `rust_eh_personality` function, but rather we wired it up to the\n+        // CRT's custom personality function, which forces LLVM to consider\n+        // landing pads as \"landing pads for SEH\".\n+        let tcx = self.tcx();\n+        match tcx.lang_items.eh_personality() {\n+            Some(def_id) if !base::wants_msvc_seh(self.sess()) => {\n+                Callee::def(self, def_id, tcx.intern_substs(&[])).reify(self)\n+            }\n+            _ => {\n+                if let Some(llpersonality) = self.local().eh_personality.get() {\n+                    return llpersonality\n+                }\n+                let name = if base::wants_msvc_seh(self.sess()) {\n+                    \"__CxxFrameHandler3\"\n+                } else {\n+                    \"rust_eh_personality\"\n+                };\n+                let fty = Type::variadic_func(&[], &Type::i32(self));\n+                let f = declare::declare_cfn(self, name, fty);\n+                self.local().eh_personality.set(Some(f));\n+                f\n+            }\n+        }\n+    }\n+\n }\n \n pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);"}, {"sha": "b7116ba1f338baadec8f4abebeabe3e0ea588945", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=57914f626b32d924ad183e250459ce278dd0b20b", "patch": "@@ -718,7 +718,7 @@ fn trans_msvc_try<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n     let llfn = get_rust_try_fn(bcx.fcx(), &mut |bcx| {\n         let ccx = bcx.ccx;\n \n-        bcx.set_personality_fn(bcx.fcx().eh_personality());\n+        bcx.set_personality_fn(bcx.ccx.eh_personality());\n \n         let normal = bcx.fcx().build_new_block(\"normal\");\n         let catchswitch = bcx.fcx().build_new_block(\"catchswitch\");\n@@ -855,7 +855,7 @@ fn trans_gnu_try<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>,\n         // rust_try ignores the selector.\n         let lpad_ty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)],\n                                     false);\n-        let vals = catch.landing_pad(lpad_ty, bcx.fcx().eh_personality(), 1, catch.fcx().llfn);\n+        let vals = catch.landing_pad(lpad_ty, bcx.ccx.eh_personality(), 1, catch.fcx().llfn);\n         catch.add_clause(vals, C_null(Type::i8p(ccx)));\n         let ptr = catch.extract_value(vals, 0);\n         catch.store(ptr, catch.bitcast(local_ptr, Type::i8p(ccx).ptr_to()));"}, {"sha": "2b408e3170eed18a1064457f23c5eda95164513b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=57914f626b32d924ad183e250459ce278dd0b20b", "patch": "@@ -848,7 +848,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         self.landing_pads[target_bb] = Some(bcx.llbb());\n \n         let ccx = bcx.ccx;\n-        let llpersonality = self.fcx.eh_personality();\n+        let llpersonality = self.ccx.eh_personality();\n         let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n         let llretval = bcx.landing_pad(llretty, llpersonality, 1, self.fcx.llfn);\n         bcx.set_cleanup(llretval);"}, {"sha": "71f431def68d4588cacbcdf82f116068d9dc44f9", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57914f626b32d924ad183e250459ce278dd0b20b/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=57914f626b32d924ad183e250459ce278dd0b20b", "patch": "@@ -313,7 +313,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     mircx.cleanup_kinds.iter_enumerated().map(|(bb, cleanup_kind)| {\n         if let CleanupKind::Funclet = *cleanup_kind {\n             let bcx = mircx.build_block(bb);\n-            bcx.set_personality_fn(fcx.eh_personality());\n+            bcx.set_personality_fn(mircx.ccx.eh_personality());\n             if base::wants_msvc_seh(fcx.ccx.sess()) {\n                 return Some(Funclet::new(bcx.cleanup_pad(None, &[])));\n             }"}]}