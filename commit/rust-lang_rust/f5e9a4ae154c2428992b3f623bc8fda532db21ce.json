{"sha": "f5e9a4ae154c2428992b3f623bc8fda532db21ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTlhNGFlMTU0YzI0Mjg5OTJiM2Y2MjNiYzhmZGE1MzJkYjIxY2U=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-11-10T17:27:55Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-11-10T17:27:55Z"}, "message": "compiletest/raise_fd_limit: use libc instead of custom impl\n\nFixes #29751.", "tree": {"sha": "705423e162a80f1e26e73475e99fd03beaeb0aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705423e162a80f1e26e73475e99fd03beaeb0aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e9a4ae154c2428992b3f623bc8fda532db21ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e9a4ae154c2428992b3f623bc8fda532db21ce", "html_url": "https://github.com/rust-lang/rust/commit/f5e9a4ae154c2428992b3f623bc8fda532db21ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e9a4ae154c2428992b3f623bc8fda532db21ce/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9aa32ac728b297ed8f62e592e1de5ac86b6e4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9aa32ac728b297ed8f62e592e1de5ac86b6e4a3", "html_url": "https://github.com/rust-lang/rust/commit/e9aa32ac728b297ed8f62e592e1de5ac86b6e4a3"}], "stats": {"total": 27, "additions": 5, "deletions": 22}, "files": [{"sha": "0cf90ec95f38e3c838e40e08ce6e2f57580cb080", "filename": "src/compiletest/raise_fd_limit.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f5e9a4ae154c2428992b3f623bc8fda532db21ce/src%2Fcompiletest%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e9a4ae154c2428992b3f623bc8fda532db21ce/src%2Fcompiletest%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fraise_fd_limit.rs?ref=f5e9a4ae154c2428992b3f623bc8fda532db21ce", "patch": "@@ -23,25 +23,8 @@ pub unsafe fn raise_fd_limit() {\n     use std::mem::size_of_val;\n     use std::ptr::null_mut;\n \n-    type rlim_t = libc::uint64_t;\n-\n-    #[repr(C)]\n-    struct rlimit {\n-        rlim_cur: rlim_t,\n-        rlim_max: rlim_t\n-    }\n-    extern {\n-        // name probably doesn't need to be mut, but the C function doesn't\n-        // specify const\n-        fn sysctl(name: *mut libc::c_int, namelen: libc::c_uint,\n-                  oldp: *mut libc::c_void, oldlenp: *mut libc::size_t,\n-                  newp: *mut libc::c_void, newlen: libc::size_t) -> libc::c_int;\n-        fn getrlimit(resource: libc::c_int, rlp: *mut rlimit) -> libc::c_int;\n-        fn setrlimit(resource: libc::c_int, rlp: *const rlimit) -> libc::c_int;\n-    }\n     static CTL_KERN: libc::c_int = 1;\n     static KERN_MAXFILESPERPROC: libc::c_int = 29;\n-    static RLIMIT_NOFILE: libc::c_int = 8;\n \n     // The strategy here is to fetch the current resource limits, read the\n     // kern.maxfilesperproc sysctl value, and bump the soft resource limit for\n@@ -51,25 +34,25 @@ pub unsafe fn raise_fd_limit() {\n     let mut mib: [libc::c_int; 2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n     let mut maxfiles: libc::c_int = 0;\n     let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n-    if sysctl(&mut mib[0], 2, &mut maxfiles as *mut _ as *mut _, &mut size,\n+    if libc::sysctl(&mut mib[0], 2, &mut maxfiles as *mut _ as *mut _, &mut size,\n               null_mut(), 0) != 0 {\n         let err = io::Error::last_os_error();\n         panic!(\"raise_fd_limit: error calling sysctl: {}\", err);\n     }\n \n     // Fetch the current resource limits\n-    let mut rlim = rlimit{rlim_cur: 0, rlim_max: 0};\n-    if getrlimit(RLIMIT_NOFILE, &mut rlim) != 0 {\n+    let mut rlim = libc::rlimit{rlim_cur: 0, rlim_max: 0};\n+    if libc::getrlimit(libc::RLIMIT_NOFILE, &mut rlim) != 0 {\n         let err = io::Error::last_os_error();\n         panic!(\"raise_fd_limit: error calling getrlimit: {}\", err);\n     }\n \n     // Bump the soft limit to the smaller of kern.maxfilesperproc and the hard\n     // limit\n-    rlim.rlim_cur = cmp::min(maxfiles as rlim_t, rlim.rlim_max);\n+    rlim.rlim_cur = cmp::min(maxfiles as libc::rlim_t, rlim.rlim_max);\n \n     // Set our newly-increased resource limit\n-    if setrlimit(RLIMIT_NOFILE, &rlim) != 0 {\n+    if libc::setrlimit(libc::RLIMIT_NOFILE, &rlim) != 0 {\n         let err = io::Error::last_os_error();\n         panic!(\"raise_fd_limit: error calling setrlimit: {}\", err);\n     }"}]}