{"sha": "b7cefd0c962e8ad8a77de45ede39d615d0f78924", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Y2VmZDBjOTYyZThhZDhhNzdkZTQ1ZWRlMzlkNjE1ZDBmNzg5MjQ=", "commit": {"author": {"name": "ILyoan", "email": "ilyoan@gmail.com", "date": "2013-01-11T09:08:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-14T21:58:13Z"}, "message": "allowing the entry point name to be something other than main\nadd build tests", "tree": {"sha": "298487862da34c93e52d312447e777b843faef16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298487862da34c93e52d312447e777b843faef16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cefd0c962e8ad8a77de45ede39d615d0f78924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cefd0c962e8ad8a77de45ede39d615d0f78924", "html_url": "https://github.com/rust-lang/rust/commit/b7cefd0c962e8ad8a77de45ede39d615d0f78924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cefd0c962e8ad8a77de45ede39d615d0f78924/comments", "author": {"login": "ILyoan", "id": 2672194, "node_id": "MDQ6VXNlcjI2NzIxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2672194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ILyoan", "html_url": "https://github.com/ILyoan", "followers_url": "https://api.github.com/users/ILyoan/followers", "following_url": "https://api.github.com/users/ILyoan/following{/other_user}", "gists_url": "https://api.github.com/users/ILyoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ILyoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ILyoan/subscriptions", "organizations_url": "https://api.github.com/users/ILyoan/orgs", "repos_url": "https://api.github.com/users/ILyoan/repos", "events_url": "https://api.github.com/users/ILyoan/events{/privacy}", "received_events_url": "https://api.github.com/users/ILyoan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8490757fb9dc55f521f9cfb0fd4fb05b0f6bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8490757fb9dc55f521f9cfb0fd4fb05b0f6bf6", "html_url": "https://github.com/rust-lang/rust/commit/0e8490757fb9dc55f521f9cfb0fd4fb05b0f6bf6"}], "stats": {"total": 141, "additions": 127, "deletions": 14}, "files": [{"sha": "0c4b9635a36b905e491acb7b72b4dff2602b830c", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -25,6 +25,7 @@ use syntax::codemap::span;\n use syntax::fold;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n+use syntax::attr::attrs_contains_name;\n \n export modify_for_testing;\n \n@@ -88,13 +89,11 @@ fn fold_mod(cx: test_ctxt, m: ast::_mod, fld: fold::ast_fold) -> ast::_mod {\n     // Remove any defined main function from the AST so it doesn't clash with\n     // the one we're going to add. Only if compiling an executable.\n \n-    // FIXME (#2403): This is sloppy. Instead we should have some mechanism to\n-    // indicate to the translation pass which function we want to be main.\n     fn nomain(cx: test_ctxt, item: @ast::item) -> Option<@ast::item> {\n         match item.node {\n           ast::item_fn(*) => {\n-            if item.ident == cx.sess.ident_of(~\"main\")\n-                && !cx.sess.building_library {\n+            if attrs_contains_name(item.attrs, ~\"main\")\n+                    && !cx.sess.building_library {\n                 option::None\n             } else { option::Some(item) }\n           }\n@@ -498,7 +497,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n     let item_ = ast::item_fn(decl, ast::impure_fn, ~[], body);\n     let item: ast::item =\n         {ident: cx.sess.ident_of(~\"main\"),\n-         attrs: ~[],\n+         attrs: ~[attr::mk_attr(attr::mk_word_item(~\"main\"))],\n          id: cx.sess.next_node_id(),\n          node: item_,\n          vis: ast::public,"}, {"sha": "e5d3eb558b38b4a3a5adfc34c0ffbc20662339a5", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -59,7 +59,7 @@ use syntax::ast_util::{def_id_of_def, dummy_sp, local_def};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private, visibility_to_privacy};\n use syntax::ast_util::has_legacy_export_attr;\n-use syntax::attr::{attr_metas, contains_name};\n+use syntax::attr::{attr_metas, contains_name, attrs_contains_name};\n use syntax::parse::token::ident_interner;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::{pat_to_str, path_to_str};\n@@ -857,6 +857,9 @@ fn Resolver(session: Session, lang_items: LanguageItems,\n \n         namespaces: ~[ TypeNS, ValueNS ],\n \n+        attr_main_fn: None,\n+        main_fns: ~[],\n+\n         def_map: HashMap(),\n         export_map2: HashMap(),\n         trait_map: @HashMap(),\n@@ -916,6 +919,11 @@ struct Resolver {\n     // The four namespaces.\n     namespaces: ~[Namespace],\n \n+    // The function that has attribute named 'main'\n+    mut attr_main_fn: Option<(node_id, span)>,\n+    // The functions named 'main'\n+    mut main_fns: ~[Option<(node_id, span)>],\n+\n     def_map: DefMap,\n     export_map2: ExportMap2,\n     trait_map: TraitMap,\n@@ -937,6 +945,7 @@ impl Resolver {\n         self.resolve_crate();\n         self.session.abort_if_errors();\n \n+        self.check_duplicate_main();\n         self.check_for_unused_imports_if_necessary();\n     }\n \n@@ -3923,15 +3932,22 @@ impl Resolver {\n             item_fn(ref fn_decl, _, ref ty_params, ref block) => {\n                 // If this is the main function, we must record it in the\n                 // session.\n-                //\n-                // For speed, we put the string comparison last in this chain\n-                // of conditionals.\n+                if !self.session.building_library {\n+                    if self.attr_main_fn.is_none() &&\n+                           item.ident == special_idents::main {\n \n-                if !self.session.building_library &&\n-                    is_none(&self.session.main_fn) &&\n-                    item.ident == special_idents::main {\n+                        self.main_fns.push(Some((item.id, item.span)));\n+                    }\n \n-                    self.session.main_fn = Some((item.id, item.span));\n+                    if attrs_contains_name(item.attrs, ~\"main\") {\n+                        if self.attr_main_fn.is_none() {\n+                            self.attr_main_fn = Some((item.id, item.span));\n+                        } else {\n+                            self.session.span_err(\n+                                    item.span,\n+                                    ~\"multiple 'main' functions\");\n+                        }\n+                    }\n                 }\n \n                 self.resolve_function(OpaqueFunctionRibKind,\n@@ -5353,6 +5369,30 @@ impl Resolver {\n         self.def_map.insert(node_id, def);\n     }\n \n+    //\n+    // main function checking\n+    //\n+    // be sure that there is only one main function\n+    //\n+    fn check_duplicate_main() {\n+        if self.attr_main_fn.is_none() {\n+            if self.main_fns.len() >= 1u {\n+                let mut i = 1u;\n+                while i < self.main_fns.len() {\n+                    let (_, dup_main_span) =\n+                            option::unwrap(self.main_fns[i]);\n+                    self.session.span_err(\n+                        dup_main_span,\n+                        ~\"multiple 'main' functions\");\n+                    i += 1;\n+                }\n+                self.session.main_fn = self.main_fns[0];\n+            }\n+        } else {\n+            self.session.main_fn = self.attr_main_fn;\n+        }\n+    }\n+\n     //\n     // Unused import checking\n     //"}, {"sha": "5a3046ac2486b4bf7ecfd29f27847e9429ad8dfd", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -2153,13 +2153,21 @@ fn register_fn_fuller(ccx: @crate_ctxt,\n     ccx.item_symbols.insert(node_id, ps);\n \n     // FIXME #4404 android JNI hacks\n-    let is_main = is_main_name(path) && (!ccx.sess.building_library ||\n+    let is_main = is_main_fn(&ccx.sess, node_id) &&\n+                     (!ccx.sess.building_library ||\n                       (ccx.sess.building_library &&\n                        ccx.sess.targ_cfg.os == session::os_android));\n     if is_main { create_main_wrapper(ccx, sp, llfn); }\n     llfn\n }\n \n+fn is_main_fn(sess: &Session, node_id: ast::node_id) -> bool {\n+    match sess.main_fn {\n+        Some((main_id, _)) => node_id == main_id,\n+        None => false\n+    }\n+}\n+\n // Create a _rust_main(args: ~[str]) function which will be called from the\n // runtime rust_start function\n fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef) {"}, {"sha": "723aefb91cb9cd3506b30ca99ed00729faf41214", "filename": "src/test/compile-fail/multiple-main-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Fcompile-fail%2Fmultiple-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Fcompile-fail%2Fmultiple-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultiple-main-2.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[main]\n+fn bar() {\n+}\n+\n+#[main]\n+fn foo() { //~ ERROR multiple 'main' functions\n+}"}, {"sha": "36da3e6e84a22dcc10e37a7492757d6c9d9a3837", "filename": "src/test/compile-fail/multiple-main-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Fcompile-fail%2Fmultiple-main-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Fcompile-fail%2Fmultiple-main-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultiple-main-3.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[main]\n+fn main1() {\n+}\n+\n+mod foo {\n+    #[main]\n+    fn main2() { //~ ERROR multiple 'main' functions\n+    }\n+}"}, {"sha": "78fb9d3e39a33d9c67a2144e982fd087d1bb56c3", "filename": "src/test/run-pass/attr-main-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    fail\n+}\n+\n+#[main]\n+fn foo() {\n+}"}, {"sha": "782240fd982d52acef78da198cda0225ea2dd0db", "filename": "src/test/run-pass/attr-main.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Frun-pass%2Fattr-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cefd0c962e8ad8a77de45ede39d615d0f78924/src%2Ftest%2Frun-pass%2Fattr-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main.rs?ref=b7cefd0c962e8ad8a77de45ede39d615d0f78924", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[main]\n+fn foo() {\n+}"}]}