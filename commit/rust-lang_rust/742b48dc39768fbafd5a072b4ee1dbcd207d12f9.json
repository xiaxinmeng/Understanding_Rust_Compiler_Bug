{"sha": "742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmI0OGRjMzk3NjhmYmFmZDVhMDcyYjRlZTFkYmNkMjA3ZDEyZjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T02:02:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-30T02:02:54Z"}, "message": "Be more specific in the suggestion filtering", "tree": {"sha": "a2882370a20dd26c9104a547e9c22ff69318a492", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2882370a20dd26c9104a547e9c22ff69318a492"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "html_url": "https://github.com/rust-lang/rust/commit/742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa", "html_url": "https://github.com/rust-lang/rust/commit/0e7e9382fa1a6e50c976cd74ca420d7cb10591fa"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "53d1ac7b02496528274f8c208034b41d54239ad7", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "patch": "@@ -380,23 +380,59 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 if let PatKind::Binding(..) = inner.node {\n                                     let parent_id = tcx.hir().get_parent_node_by_hir_id(pat.hir_id);\n                                     let parent = tcx.hir().get_by_hir_id(parent_id);\n+                                    debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, parent);\n                                     match parent {\n-                                        hir::Node::Item(_) |\n-                                        hir::Node::ForeignItem(_) |\n-                                        hir::Node::TraitItem(_) |\n-                                        hir::Node::ImplItem(_)  => { // this pat is an argument\n+                                        hir::Node::Item(hir::Item {\n+                                            node: hir::ItemKind::Fn(..), ..\n+                                        }) |\n+                                        hir::Node::ForeignItem(hir::ForeignItem {\n+                                            node: hir::ForeignItemKind::Fn(..), ..\n+                                        }) |\n+                                        hir::Node::TraitItem(hir::TraitItem {\n+                                            node: hir::TraitItemKind::Method(..), ..\n+                                        }) |\n+                                        hir::Node::ImplItem(hir::ImplItem {\n+                                            node: hir::ImplItemKind::Method(..), ..\n+                                        }) => { // this pat is likely an argument\n                                             if let Ok(snippet) = tcx.sess.source_map()\n-                                                .span_to_snippet(pat.span)\n+                                                .span_to_snippet(inner.span)\n                                             { // FIXME: turn into structured suggestion, will need\n-                                              // a span that also includes the the type.\n+                                              // a span that also includes the the arg's type.\n                                                 err.help(&format!(\n                                                     \"did you mean `{}: &{}`?\",\n-                                                    &snippet[1..],\n+                                                    snippet,\n                                                     expected,\n                                                 ));\n                                             }\n                                         }\n-                                        _ => {} // don't provide the suggestion from above #55175\n+                                        hir::Node::Expr(hir::Expr {\n+                                            node: hir::ExprKind::Match(..), ..\n+                                        }) => { // rely on match ergonomics\n+                                            if let Ok(snippet) = tcx.sess.source_map()\n+                                                .span_to_snippet(inner.span)\n+                                            {\n+                                                err.span_suggestion(\n+                                                    pat.span,\n+                                                    \"you can rely on match ergonomics and remove \\\n+                                                     the explicit borrow\",\n+                                                    snippet,\n+                                                    Applicability::MaybeIncorrect,\n+                                                );\n+                                            }\n+                                        }\n+                                        hir::Node::Pat(_) => {  // nested `&&pat`\n+                                            if let Ok(snippet) = tcx.sess.source_map()\n+                                                .span_to_snippet(inner.span)\n+                                            {\n+                                                err.span_suggestion(\n+                                                    pat.span,\n+                                                    \"you can probaly remove the explicit borrow\",\n+                                                    snippet,\n+                                                    Applicability::MaybeIncorrect,\n+                                                );\n+                                            }\n+                                        }\n+                                        _ => {} // don't provide suggestions in other cases #55175\n                                     }\n                                 }\n                                 err.emit();"}, {"sha": "47ecadfd01afb1508776a487e192b57c2307aafc", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "patch": "@@ -20,7 +20,10 @@ error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:31:10\n    |\n LL |     let &&x = &1isize as &T;\n-   |          ^^ expected trait T, found reference\n+   |          ^^\n+   |          |\n+   |          expected trait T, found reference\n+   |          help: you can probaly remove the explicit borrow: `x`\n    |\n    = note: expected type `dyn T`\n               found type `&_`\n@@ -29,7 +32,10 @@ error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:36:11\n    |\n LL |     let &&&x = &(&1isize as &T);\n-   |           ^^ expected trait T, found reference\n+   |           ^^\n+   |           |\n+   |           expected trait T, found reference\n+   |           help: you can probaly remove the explicit borrow: `x`\n    |\n    = note: expected type `dyn T`\n               found type `&_`"}, {"sha": "833b8998c338a35a2ce93225c114863cd76cd76f", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/742b48dc39768fbafd5a072b4ee1dbcd207d12f9/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=742b48dc39768fbafd5a072b4ee1dbcd207d12f9", "patch": "@@ -12,7 +12,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:18:9\n    |\n LL | fn agh(&&bar: &u32) {\n-   |         ^^^^ expected u32, found reference\n+   |         ^^^^\n+   |         |\n+   |         expected u32, found reference\n+   |         help: you can probaly remove the explicit borrow: `bar`\n    |\n    = note: expected type `u32`\n               found type `&_`"}]}