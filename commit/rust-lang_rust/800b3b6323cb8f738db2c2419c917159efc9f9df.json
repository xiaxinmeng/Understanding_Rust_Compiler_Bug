{"sha": "800b3b6323cb8f738db2c2419c917159efc9f9df", "node_id": "C_kwDOAAsO6NoAKDgwMGIzYjYzMjNjYjhmNzM4ZGIyYzI0MTljOTE3MTU5ZWZjOWY5ZGY", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-27T01:56:14Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T14:03:32Z"}, "message": "adding doc and simplifying function", "tree": {"sha": "ae63a5dd1902959c286050bd7d3ca0b4699f430a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae63a5dd1902959c286050bd7d3ca0b4699f430a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/800b3b6323cb8f738db2c2419c917159efc9f9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/800b3b6323cb8f738db2c2419c917159efc9f9df", "html_url": "https://github.com/rust-lang/rust/commit/800b3b6323cb8f738db2c2419c917159efc9f9df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/800b3b6323cb8f738db2c2419c917159efc9f9df/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072f69e4c16bb49f9fd94989029d3e5086e8ac22", "url": "https://api.github.com/repos/rust-lang/rust/commits/072f69e4c16bb49f9fd94989029d3e5086e8ac22", "html_url": "https://github.com/rust-lang/rust/commit/072f69e4c16bb49f9fd94989029d3e5086e8ac22"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "4518b2a76a97392f59b72a0625e073a674f4de35", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/800b3b6323cb8f738db2c2419c917159efc9f9df/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800b3b6323cb8f738db2c2419c917159efc9f9df/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=800b3b6323cb8f738db2c2419c917159efc9f9df", "patch": "@@ -51,41 +51,50 @@ pub(crate) fn publish_diagnostics(\n \n pub(crate) fn fetch_dependency_list(\n     state: GlobalStateSnapshot,\n-    _params: FetchDependencyListParams,\n-) -> Result<FetchDependencyListResult> {\n+    _params: lsp_ext::FetchDependencyListParams,\n+) -> Result<lsp_ext::FetchDependencyListResult> {\n     let crates = state.analysis.fetch_crates()?;\n-    Ok(FetchDependencyListResult {\n-        crates: crates\n-            .into_iter()\n-            .filter_map(|it| {\n-                let root_file_path = state.file_id_to_file_path(it.root_file_id);\n-                crate_path(it.name.as_ref(), root_file_path).map(|crate_path| CrateInfoResult {\n-                    name: it.name,\n-                    version: it.version,\n-                    path: crate_path.to_string(),\n-                })\n+    let crate_infos = crates\n+        .into_iter()\n+        .filter_map(|it| {\n+            let root_file_path = state.file_id_to_file_path(it.root_file_id);\n+            crate_path(it.name.as_ref(), root_file_path).map(|path| CrateInfoResult {\n+                name: it.name,\n+                version: it.version,\n+                path: path.to_string(),\n             })\n-            .collect(),\n-    })\n+        })\n+        .collect();\n+    Ok(FetchDependencyListResult { crates: crate_infos })\n }\n \n-//Thats a best effort to try and find the crate path\n+/// Searches for the directory of a Rust crate with a given name in the directory tree\n+/// of the root file of that crate.\n+///\n+/// # Arguments\n+///\n+/// * `crate_name`: The name of the crate to search for. This should be a `Some` value if\n+///   a crate name has been specified, or `None` if no crate name has been specified.\n+/// * `root_file_path`: The path to the root file of the crate.\n+///\n+/// # Returns\n+///\n+/// An `Option` value representing the path to the directory of the crate with the given\n+/// name, if such a crate is found. If no crate with the given name is found, this function\n+/// returns `None`.\n fn crate_path(crate_name: Option<&String>, root_file_path: VfsPath) -> Option<VfsPath> {\n     crate_name.and_then(|crate_name| {\n-        let mut crate_path = None;\n         let mut root_path = root_file_path;\n         while let Some(path) = root_path.parent() {\n-            match path.name_and_extension() {\n-                Some((name, _)) => {\n-                    if name.starts_with(crate_name.as_str()) {\n-                        crate_path = Some(path);\n-                        break;\n-                    }\n+            if let Some((name, _)) = path.name_and_extension() {\n+                if name.starts_with(crate_name.as_str()) {\n+                    return Some(path);\n                 }\n-                None => break,\n+            } else {\n+                break;\n             }\n             root_path = path;\n         }\n-        crate_path\n+        None\n     })\n }\n\\ No newline at end of file"}]}