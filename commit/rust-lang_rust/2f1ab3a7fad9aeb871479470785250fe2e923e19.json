{"sha": "2f1ab3a7fad9aeb871479470785250fe2e923e19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMWFiM2E3ZmFkOWFlYjg3MTQ3OTQ3MDc4NTI1MGZlMmU5MjNlMTk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T13:49:39Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-27T13:49:39Z"}, "message": "syntax: Add new values that can be used with the quasiquoter", "tree": {"sha": "b0d4908c2cce74a5018055ecb37813e5e2b4b172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d4908c2cce74a5018055ecb37813e5e2b4b172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f1ab3a7fad9aeb871479470785250fe2e923e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ab3a7fad9aeb871479470785250fe2e923e19", "html_url": "https://github.com/rust-lang/rust/commit/2f1ab3a7fad9aeb871479470785250fe2e923e19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f1ab3a7fad9aeb871479470785250fe2e923e19/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28885635108c6def3c2503cbcaeba90fbd011f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/28885635108c6def3c2503cbcaeba90fbd011f90", "html_url": "https://github.com/rust-lang/rust/commit/28885635108c6def3c2503cbcaeba90fbd011f90"}], "stats": {"total": 159, "additions": 157, "deletions": 2}, "files": [{"sha": "9f3145e4e4ee6359e4014eaacd39abb9d1fda2ce", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 157, "deletions": 2, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/2f1ab3a7fad9aeb871479470785250fe2e923e19/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f1ab3a7fad9aeb871479470785250fe2e923e19/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=2f1ab3a7fad9aeb871479470785250fe2e923e19", "patch": "@@ -42,8 +42,7 @@ pub mod rt {\n     pub use ast::*;\n     pub use parse::token::*;\n     pub use parse::new_parser_from_tts;\n-    pub use codemap::BytePos;\n-    pub use codemap::span;\n+    pub use codemap::{BytePos, span, dummy_spanned};\n \n     use print::pprust;\n     use print::pprust::{item_to_str, ty_to_str};\n@@ -119,6 +118,90 @@ pub mod rt {\n         }\n     }\n \n+    impl ToSource for ast::blk {\n+        fn to_source(&self, cx: @ext_ctxt) -> ~str {\n+            pprust::block_to_str(self, cx.parse_sess().interner)\n+        }\n+    }\n+\n+    impl<'self> ToSource for &'self str {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_str(@str::from_slice(*self)));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for int {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for i8 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i8));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for i16 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i16));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+\n+    impl ToSource for i32 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i32));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for i64 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_int(*self as i64, ast::ty_i64));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for uint {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for u8 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u8));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for u16 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u16));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for u32 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u32));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n+    impl ToSource for u64 {\n+        fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n+            let lit = dummy_spanned(ast::lit_uint(*self as u64, ast::ty_u64));\n+            pprust::lit_to_str(@lit)\n+        }\n+    }\n+\n     // Alas ... we write these out instead. All redundant.\n \n     impl ToTokens for ast::ident {\n@@ -163,6 +246,78 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for ast::blk {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl<'self> ToTokens for &'self str {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for int {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for i8 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for i16 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for i32 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for i64 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for uint {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for u8 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for u16 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for u32 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ToTokens for u64 {\n+        fn to_tokens(&self, cx: @ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n     pub trait ExtParseUtils {\n         fn parse_item(&self, s: ~str) -> @ast::item;\n         fn parse_expr(&self, s: ~str) -> @ast::expr;"}]}