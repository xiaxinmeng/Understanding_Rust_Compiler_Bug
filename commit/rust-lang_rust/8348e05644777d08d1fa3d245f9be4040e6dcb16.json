{"sha": "8348e05644777d08d1fa3d245f9be4040e6dcb16", "node_id": "C_kwDOAAsO6NoAKDgzNDhlMDU2NDQ3NzdkMDhkMWZhM2QyNDVmOWJlNDA0MGU2ZGNiMTY", "commit": {"author": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-18T17:07:48Z"}, "committer": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-18T17:07:48Z"}, "message": "Make x use the x and x.ps1 scripts\n\nThis removes another python search from bootstrap.", "tree": {"sha": "d23a0feb1a170c74b37bbf7dd3a95ce40b1b7de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23a0feb1a170c74b37bbf7dd3a95ce40b1b7de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8348e05644777d08d1fa3d245f9be4040e6dcb16", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTou3NNtBmr78Wcak/5H7IMIOEwbAUCY59I7gAKCRD5H7IMIOEw\nbIyIAQDa/M2fkaiS2F3VnOra0Su05OUh4DOhhQP8psGVlvSCWwD/Ut59tFumGBk8\njH3Gqv/lGs2IR3m5sUjq55sT+u15Wg4=\n=TZOZ\n-----END PGP SIGNATURE-----", "payload": "tree d23a0feb1a170c74b37bbf7dd3a95ce40b1b7de5\nparent 35a99eef32a2b7b9d8e77dde539f869e522d181f\nauthor Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1671383268 +0100\ncommitter Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1671383268 +0100\n\nMake x use the x and x.ps1 scripts\n\nThis removes another python search from bootstrap.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8348e05644777d08d1fa3d245f9be4040e6dcb16", "html_url": "https://github.com/rust-lang/rust/commit/8348e05644777d08d1fa3d245f9be4040e6dcb16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8348e05644777d08d1fa3d245f9be4040e6dcb16/comments", "author": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "committer": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "f07ff43efe987fec445e76d8102f6c2bbdcabd4a", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 32, "deletions": 40, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8348e05644777d08d1fa3d245f9be4040e6dcb16/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8348e05644777d08d1fa3d245f9be4040e6dcb16/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=8348e05644777d08d1fa3d245f9be4040e6dcb16", "patch": "@@ -1,51 +1,43 @@\n-//! Run `x.py` from any subdirectory of a rust compiler checkout.\n+//! Run bootstrap from any subdirectory of a rust compiler checkout.\n //!\n //! We prefer `exec`, to avoid adding an extra process in the process tree.\n //! However, since `exec` isn't available on Windows, we indirect through\n //! `exec_or_status`, which will call `exec` on unix and `status` on Windows.\n //!\n-//! We use `python`, `python3`, or `python2` as the python interpreter to run\n-//! `x.py`, in that order of preference.\n+//! We use `powershell.exe x.ps1` on Windows, and `sh -c x` on Unix, those are\n+//! the ones that call `x.py`. We use `sh -c` on Unix, because it is a standard.\n+//! We also don't use `pwsh` on Windows, because it is not installed by default;\n \n use std::{\n-    env::{self, consts::EXE_EXTENSION},\n-    io,\n+    env, io,\n+    path::Path,\n     process::{self, Command, ExitStatus},\n };\n \n-const PYTHON: &str = \"python\";\n-const PYTHON2: &str = \"python2\";\n-const PYTHON3: &str = \"python3\";\n-\n-fn python() -> &'static str {\n-    let val = match env::var_os(\"PATH\") {\n-        Some(val) => val,\n-        None => return PYTHON,\n-    };\n-\n-    let mut python2 = false;\n-    let mut python3 = false;\n-\n-    for dir in env::split_paths(&val) {\n-        // `python` should always take precedence over python2 / python3 if it exists\n-        if dir.join(PYTHON).with_extension(EXE_EXTENSION).exists() {\n-            return PYTHON;\n-        }\n+#[cfg(windows)]\n+fn x_command(dir: &Path) -> Command {\n+    let mut cmd = Command::new(\"powershell.exe\");\n+    cmd.args([\n+        \"-NoLogo\",\n+        \"-NoProfile\",\n+        \"-NonInteractive\",\n+        \"-ExecutionPolicy\",\n+        \"RemoteSigned\",\n+        \"-Command\",\n+        \"./x.ps1\",\n+    ])\n+    .current_dir(dir);\n+    cmd\n+}\n \n-        python2 |= dir.join(PYTHON2).with_extension(EXE_EXTENSION).exists();\n-        python3 |= dir.join(PYTHON3).with_extension(EXE_EXTENSION).exists();\n-    }\n+#[cfg(unix)]\n+fn x_command(dir: &Path) -> Command {\n+    Command::new(dir.join(\"x\"))\n+}\n \n-    // try 3 before 2\n-    if python3 {\n-        PYTHON3\n-    } else if python2 {\n-        PYTHON2\n-    } else {\n-        // Python was not found on path, so exit\n-        eprintln!(\"Unable to find python in your PATH. Please check it is installed.\");\n-        process::exit(1);\n-    }\n+#[cfg(not(any(windows, unix)))]\n+fn x_command(_dir: &Path) -> Command {\n+    compile_error!(\"Unsupported platform\");\n }\n \n #[cfg(unix)]\n@@ -72,15 +64,15 @@ fn main() {\n         let candidate = dir.join(\"x.py\");\n \n         if candidate.exists() {\n-            let mut python = Command::new(python());\n+            let mut cmd = x_command(dir);\n \n-            python.arg(&candidate).args(env::args().skip(1)).current_dir(dir);\n+            cmd.args(env::args().skip(1)).current_dir(dir);\n \n-            let result = exec_or_status(&mut python);\n+            let result = exec_or_status(&mut cmd);\n \n             match result {\n                 Err(error) => {\n-                    eprintln!(\"Failed to invoke `{}`: {}\", candidate.display(), error);\n+                    eprintln!(\"Failed to invoke `{:?}`: {}\", cmd, error);\n                 }\n                 Ok(status) => {\n                     process::exit(status.code().unwrap_or(1));"}]}