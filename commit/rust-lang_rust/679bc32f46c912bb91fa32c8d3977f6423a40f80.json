{"sha": "679bc32f46c912bb91fa32c8d3977f6423a40f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OWJjMzJmNDZjOTEyYmI5MWZhMzJjOGQzOTc3ZjY0MjNhNDBmODA=", "commit": {"author": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-08-30T17:06:13Z"}, "committer": {"name": "daubaris", "email": "paulius.daubaris@gmail.com", "date": "2018-08-30T17:06:13Z"}, "message": "range_plus_one suggestion should not remove braces fix", "tree": {"sha": "c15c310df53faa3608cbe1445ba580f96828925d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c15c310df53faa3608cbe1445ba580f96828925d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679bc32f46c912bb91fa32c8d3977f6423a40f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679bc32f46c912bb91fa32c8d3977f6423a40f80", "html_url": "https://github.com/rust-lang/rust/commit/679bc32f46c912bb91fa32c8d3977f6423a40f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679bc32f46c912bb91fa32c8d3977f6423a40f80/comments", "author": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daubaris", "id": 16244425, "node_id": "MDQ6VXNlcjE2MjQ0NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/16244425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daubaris", "html_url": "https://github.com/daubaris", "followers_url": "https://api.github.com/users/daubaris/followers", "following_url": "https://api.github.com/users/daubaris/following{/other_user}", "gists_url": "https://api.github.com/users/daubaris/gists{/gist_id}", "starred_url": "https://api.github.com/users/daubaris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daubaris/subscriptions", "organizations_url": "https://api.github.com/users/daubaris/orgs", "repos_url": "https://api.github.com/users/daubaris/repos", "events_url": "https://api.github.com/users/daubaris/events{/privacy}", "received_events_url": "https://api.github.com/users/daubaris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f78d64bd024cb793743d76da1c53f538b895d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f78d64bd024cb793743d76da1c53f538b895d7", "html_url": "https://github.com/rust-lang/rust/commit/d3f78d64bd024cb793743d76da1c53f538b895d7"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "d86f264addab99df26b4fc4dac7f558fabff08bf", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/679bc32f46c912bb91fa32c8d3977f6423a40f80/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679bc32f46c912bb91fa32c8d3977f6423a40f80/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=679bc32f46c912bb91fa32c8d3977f6423a40f80", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use syntax::ast::RangeLimits;\n use syntax::source_map::Spanned;\n-use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then};\n+use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then, snippet_opt};\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n use crate::utils::sugg::Sugg;\n \n@@ -49,7 +49,10 @@ declare_clippy_lint! {\n /// **Why is this bad?** The code is more readable with an inclusive range\n /// like `x..=y`.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Will add unnecessary pair of parentheses when the\n+/// expression is not wrapped in a pair but starts with a opening parenthesis\n+/// and ends with a closing one.\n+/// I.e: let _ = (f()+1)..(f()+1) results in let _ = ((f()+1)..(f()+1)).\n ///\n /// **Example:**\n /// ```rust\n@@ -145,9 +148,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     |db| {\n                         let start = start.map_or(\"\".to_owned(), |x| Sugg::hir(cx, x, \"x\").to_string());\n                         let end = Sugg::hir(cx, y, \"y\");\n-                        db.span_suggestion(expr.span,\n+                        if let Some(is_wrapped) = &snippet_opt(cx, expr.span) {\n+                            if is_wrapped.starts_with(\"(\") && is_wrapped.ends_with(\")\") {\n+                                db.span_suggestion(expr.span,\n+                                           \"use\",\n+                                           format!(\"({}..={})\", start, end));\n+                            } else {\n+                                db.span_suggestion(expr.span,\n                                            \"use\",\n                                            format!(\"{}..={}\", start, end));\n+                            }\n+                        }\n                     },\n                 );\n             }"}, {"sha": "9b51176b7caaffcbf3b16b1abd5fcc3fceb4dc9f", "filename": "tests/ui/range_plus_minus_one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/679bc32f46c912bb91fa32c8d3977f6423a40f80/tests%2Fui%2Frange_plus_minus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679bc32f46c912bb91fa32c8d3977f6423a40f80/tests%2Fui%2Frange_plus_minus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_plus_minus_one.stderr?ref=679bc32f46c912bb91fa32c8d3977f6423a40f80", "patch": "@@ -42,7 +42,7 @@ error: an inclusive range would be more readable\n   --> $DIR/range_plus_minus_one.rs:28:13\n    |\n 28 |     let _ = (f()+1)..(f()+1);\n-   |             ^^^^^^^^^^^^^^^^ help: use: `(f()+1)..=f()`\n+   |             ^^^^^^^^^^^^^^^^ help: use: `((f()+1)..=f())`\n \n error: aborting due to 7 previous errors\n "}]}