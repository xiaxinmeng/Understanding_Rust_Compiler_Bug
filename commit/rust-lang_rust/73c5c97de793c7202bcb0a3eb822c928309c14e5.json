{"sha": "73c5c97de793c7202bcb0a3eb822c928309c14e5", "node_id": "C_kwDOAAsO6NoAKDczYzVjOTdkZTc5M2M3MjAyYmNiMGEzZWI4MjJjOTI4MzA5YzE0ZTU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-16T13:45:48Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-16T13:47:42Z"}, "message": "Add `SyntaxContext::is_root`", "tree": {"sha": "305945cd3381e009e11e75d7cf052d2f877eba4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/305945cd3381e009e11e75d7cf052d2f877eba4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73c5c97de793c7202bcb0a3eb822c928309c14e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73c5c97de793c7202bcb0a3eb822c928309c14e5", "html_url": "https://github.com/rust-lang/rust/commit/73c5c97de793c7202bcb0a3eb822c928309c14e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73c5c97de793c7202bcb0a3eb822c928309c14e5/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b334696fffe8c08d2e6a978862849d5a89f875", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b334696fffe8c08d2e6a978862849d5a89f875", "html_url": "https://github.com/rust-lang/rust/commit/99b334696fffe8c08d2e6a978862849d5a89f875"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "40bfa3715be7b71ffb74ae1490136e66c824811a", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=73c5c97de793c7202bcb0a3eb822c928309c14e5", "patch": "@@ -9,7 +9,7 @@ use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::symbol::{kw, sym, Ident};\n \n use rustc_span::edition::Edition;\n-use rustc_span::{Span, SyntaxContext};\n+use rustc_span::Span;\n \n const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n                                         `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, \\\n@@ -72,7 +72,7 @@ pub(super) fn parse(\n                                             // `SyntaxContext::root()` from a foreign crate will\n                                             // have the edition of that crate (which we manually\n                                             // retrieve via the `edition` parameter).\n-                                            if span.ctxt() == SyntaxContext::root() {\n+                                            if span.ctxt().is_root() {\n                                                 edition\n                                             } else {\n                                                 span.edition()"}, {"sha": "6b03619438189d7e99ac598eb7d8d9c43ce1156e", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=73c5c97de793c7202bcb0a3eb822c928309c14e5", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::hir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::MirSpanview;\n-use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n+use rustc_span::{BytePos, Pos, Span};\n \n use std::cmp;\n use std::io::{self, Write};\n@@ -327,7 +327,7 @@ fn compute_block_span(data: &BasicBlockData<'_>, body_span: Span) -> Span {\n     let mut span = data.terminator().source_info.span;\n     for statement_span in data.statements.iter().map(|statement| statement.source_info.span) {\n         // Only combine Spans from the root context, and within the function's body_span.\n-        if statement_span.ctxt() == SyntaxContext::root() && body_span.contains(statement_span) {\n+        if statement_span.ctxt().is_root() && body_span.contains(statement_span) {\n             span = span.to(statement_span);\n         }\n     }"}, {"sha": "9f2ff4378425edad21cd47d7446efe7bbf021880", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=73c5c97de793c7202bcb0a3eb822c928309c14e5", "patch": "@@ -507,7 +507,7 @@ impl HygieneData {\n             self.normalize_to_macro_rules(call_site_ctxt)\n         };\n \n-        if call_site_ctxt == SyntaxContext::root() {\n+        if call_site_ctxt.is_root() {\n             return self.apply_mark_internal(ctxt, expn_id, transparency);\n         }\n \n@@ -671,12 +671,17 @@ impl SyntaxContext {\n     }\n \n     #[inline]\n-    pub(crate) fn as_u32(self) -> u32 {\n+    pub const fn is_root(self) -> bool {\n+        self.0 == SyntaxContext::root().as_u32()\n+    }\n+\n+    #[inline]\n+    pub(crate) const fn as_u32(self) -> u32 {\n         self.0\n     }\n \n     #[inline]\n-    pub(crate) fn from_u32(raw: u32) -> SyntaxContext {\n+    pub(crate) const fn from_u32(raw: u32) -> SyntaxContext {\n         SyntaxContext(raw)\n     }\n \n@@ -1500,7 +1505,7 @@ impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {\n         const TAG_EXPANSION: u8 = 0;\n         const TAG_NO_EXPANSION: u8 = 1;\n \n-        if *self == SyntaxContext::root() {\n+        if self.is_root() {\n             TAG_NO_EXPANSION.hash_stable(ctx, hasher);\n         } else {\n             TAG_EXPANSION.hash_stable(ctx, hasher);"}, {"sha": "e7a53c63e83bdc7091cfabe5551299054ef7544d", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c5c97de793c7202bcb0a3eb822c928309c14e5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=73c5c97de793c7202bcb0a3eb822c928309c14e5", "patch": "@@ -826,9 +826,9 @@ impl Span {\n         // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n         // have an incomplete span than a completely nonsensical one.\n         if span_data.ctxt != end_data.ctxt {\n-            if span_data.ctxt == SyntaxContext::root() {\n+            if span_data.ctxt.is_root() {\n                 return end;\n-            } else if end_data.ctxt == SyntaxContext::root() {\n+            } else if end_data.ctxt.is_root() {\n                 return self;\n             }\n             // Both spans fall within a macro.\n@@ -837,7 +837,7 @@ impl Span {\n         Span::new(\n             cmp::min(span_data.lo, end_data.lo),\n             cmp::max(span_data.hi, end_data.hi),\n-            if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },\n+            if span_data.ctxt.is_root() { end_data.ctxt } else { span_data.ctxt },\n             if span_data.parent == end_data.parent { span_data.parent } else { None },\n         )\n     }\n@@ -855,7 +855,7 @@ impl Span {\n         Span::new(\n             span.hi,\n             end.lo,\n-            if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },\n+            if end.ctxt.is_root() { end.ctxt } else { span.ctxt },\n             if span.parent == end.parent { span.parent } else { None },\n         )\n     }\n@@ -879,9 +879,9 @@ impl Span {\n         // Return the macro span on its own to avoid weird diagnostic output. It is preferable to\n         // have an incomplete span than a completely nonsensical one.\n         if span_data.ctxt != end_data.ctxt {\n-            if span_data.ctxt == SyntaxContext::root() {\n+            if span_data.ctxt.is_root() {\n                 return end;\n-            } else if end_data.ctxt == SyntaxContext::root() {\n+            } else if end_data.ctxt.is_root() {\n                 return self;\n             }\n             // Both spans fall within a macro.\n@@ -890,7 +890,7 @@ impl Span {\n         Span::new(\n             span_data.lo,\n             end_data.lo,\n-            if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },\n+            if end_data.ctxt.is_root() { end_data.ctxt } else { span_data.ctxt },\n             if span_data.parent == end_data.parent { span_data.parent } else { None },\n         )\n     }"}]}