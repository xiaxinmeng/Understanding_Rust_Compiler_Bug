{"sha": "b03fa1a3fe02cd0087982cc22bda7598a9fc39eb", "node_id": "C_kwDOAAsO6NoAKGIwM2ZhMWEzZmUwMmNkMDA4Nzk4MmNjMjJiZGE3NTk4YTlmYzM5ZWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-26T12:02:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T12:02:54Z"}, "message": "Rollup merge of #102706 - ferrocene:pa-ignore-doc-index, r=jyn514\n\nSupport excluding the generation of the standalone docs\n\nFor Ferrocene we need to exclude the generation of the standalone docs (which include the index page, which we want to replace with our own), but with the way bootstrap is currently implemented that proved not possible. This PR aims to support that.\n\nThe first problem is that the `doc::Standalone` step did two things: it generated the \"standalone\" documentation (which includes the index page and all the pages at the root of the documentation tree), but it also generated some files like `rust.css` and `version_info.html` that other step like `doc::TheBook` required. This meant generating the book required generating the index page, which made disabling the index page generation problematic.\n\nThe approach I took to fix the first problem is to split the step into `doc::Standalone` and `doc::SharedAssets`, with `doc::TheBook` now depending on `doc::SharedAssets`.\n\nThe second problem is that disabling the `doc::Standalone` proved to be tricky due to its path, `src/doc`. The path is accurate, as the source files for that step are `src/doc/*.md`. The problem is, bootstrap treats `--exclude` as a *suffix*, and so it also excluded the Cargo book whose source lives at `src/tools/cargo/src/doc`.\n\nThe approach I took to fix the second problem is to add the `standalone` path in addition to `src/doc`, so that you can pass `--exclude standalone`. I'm not fully happy with the solution, and the other idea I had was to just move the standalone docs source code to `src/doc/standalone`. I feel that second approach is cleaner, but also requires more changes and might require more consensus.\n\nThis PR is best reviewed commit-by-commit.\n\nr? `@jyn514`", "tree": {"sha": "73f2a5812c23065a135d05f1bedb04a44871d91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f2a5812c23065a135d05f1bedb04a44871d91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03fa1a3fe02cd0087982cc22bda7598a9fc39eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWSHuCRBK7hj4Ov3rIwAATmQIABVqhH0mSq3cZq44oV5DrvSE\nmOUXONGX5LNA/Bhocr52RcnJOgj6IX4W/zLWkAb3u5YoDq2HM4HHwVFeDeBXjCn4\nHlFcNPGt65hX70cp7Qri008TCDRWhl67oyiGKY/46JZcklOZ1Bv2MqA2VupaE/q/\nwL7HZxA+lfK9R/Kh0D/tTPoBZINWQPirO1AWeDsTzV8feOzsTkw8ClbqbEakXvKB\nuTvtAnQ9RJ1mtOxIHiYShNAmISVsihq+St4nPXHDOgEnIbfT2qlDHW0T8sJjVzkU\n0diFDjidg5jum48Wbfg8EWcbZc/ZV1xzLH1yq2kGuzP6d5KJiwtuwCFMlQ+vAGk=\n=K3kz\n-----END PGP SIGNATURE-----\n", "payload": "tree 73f2a5812c23065a135d05f1bedb04a44871d91a\nparent 5b6455318a1e273c9fa4eb0d6ebad9e1f2c0ef51\nparent 91c09d44f60c22e0874bcef393e2fa67e1875c01\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666785774 +0530\ncommitter GitHub <noreply@github.com> 1666785774 +0530\n\nRollup merge of #102706 - ferrocene:pa-ignore-doc-index, r=jyn514\n\nSupport excluding the generation of the standalone docs\n\nFor Ferrocene we need to exclude the generation of the standalone docs (which include the index page, which we want to replace with our own), but with the way bootstrap is currently implemented that proved not possible. This PR aims to support that.\n\nThe first problem is that the `doc::Standalone` step did two things: it generated the \"standalone\" documentation (which includes the index page and all the pages at the root of the documentation tree), but it also generated some files like `rust.css` and `version_info.html` that other step like `doc::TheBook` required. This meant generating the book required generating the index page, which made disabling the index page generation problematic.\n\nThe approach I took to fix the first problem is to split the step into `doc::Standalone` and `doc::SharedAssets`, with `doc::TheBook` now depending on `doc::SharedAssets`.\n\nThe second problem is that disabling the `doc::Standalone` proved to be tricky due to its path, `src/doc`. The path is accurate, as the source files for that step are `src/doc/*.md`. The problem is, bootstrap treats `--exclude` as a *suffix*, and so it also excluded the Cargo book whose source lives at `src/tools/cargo/src/doc`.\n\nThe approach I took to fix the second problem is to add the `standalone` path in addition to `src/doc`, so that you can pass `--exclude standalone`. I'm not fully happy with the solution, and the other idea I had was to just move the standalone docs source code to `src/doc/standalone`. I feel that second approach is cleaner, but also requires more changes and might require more consensus.\n\nThis PR is best reviewed commit-by-commit.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03fa1a3fe02cd0087982cc22bda7598a9fc39eb", "html_url": "https://github.com/rust-lang/rust/commit/b03fa1a3fe02cd0087982cc22bda7598a9fc39eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03fa1a3fe02cd0087982cc22bda7598a9fc39eb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b6455318a1e273c9fa4eb0d6ebad9e1f2c0ef51", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6455318a1e273c9fa4eb0d6ebad9e1f2c0ef51", "html_url": "https://github.com/rust-lang/rust/commit/5b6455318a1e273c9fa4eb0d6ebad9e1f2c0ef51"}, {"sha": "91c09d44f60c22e0874bcef393e2fa67e1875c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c09d44f60c22e0874bcef393e2fa67e1875c01", "html_url": "https://github.com/rust-lang/rust/commit/91c09d44f60c22e0874bcef393e2fa67e1875c01"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "ea06caf9c3311e95a093a1a02567b5cab93c47dc", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b03fa1a3fe02cd0087982cc22bda7598a9fc39eb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03fa1a3fe02cd0087982cc22bda7598a9fc39eb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b03fa1a3fe02cd0087982cc22bda7598a9fc39eb", "patch": "@@ -228,7 +228,7 @@ impl Step for TheBook {\n         }\n \n         // build the version info page and CSS\n-        builder.ensure(Standalone { compiler, target });\n+        let shared_assets = builder.ensure(SharedAssets { target });\n \n         // build the redirect pages\n         builder.info(&format!(\"Documenting book redirect pages ({})\", target));\n@@ -237,7 +237,7 @@ impl Step for TheBook {\n             let path = file.path();\n             let path = path.to_str().unwrap();\n \n-            invoke_rustdoc(builder, compiler, target, path);\n+            invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n \n         if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n@@ -251,6 +251,7 @@ impl Step for TheBook {\n fn invoke_rustdoc(\n     builder: &Builder<'_>,\n     compiler: Compiler,\n+    shared_assets: &SharedAssetsPaths,\n     target: TargetSelection,\n     markdown: &str,\n ) {\n@@ -260,7 +261,6 @@ fn invoke_rustdoc(\n \n     let header = builder.src.join(\"src/doc/redirect.inc\");\n     let footer = builder.src.join(\"src/doc/footer.inc\");\n-    let version_info = out.join(\"version_info.html\");\n \n     let mut cmd = builder.rustdoc_cmd(compiler);\n \n@@ -269,7 +269,7 @@ fn invoke_rustdoc(\n     cmd.arg(\"--html-after-content\")\n         .arg(&footer)\n         .arg(\"--html-before-content\")\n-        .arg(&version_info)\n+        .arg(&shared_assets.version_info)\n         .arg(\"--html-in-header\")\n         .arg(&header)\n         .arg(\"--markdown-no-toc\")\n@@ -300,7 +300,7 @@ impl Step for Standalone {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.path(\"src/doc\").default_condition(builder.config.docs)\n+        run.path(\"src/doc\").alias(\"standalone\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -325,21 +325,11 @@ impl Step for Standalone {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n+        let version_info = builder.ensure(SharedAssets { target: self.target }).version_info;\n+\n         let favicon = builder.src.join(\"src/doc/favicon.inc\");\n         let footer = builder.src.join(\"src/doc/footer.inc\");\n         let full_toc = builder.src.join(\"src/doc/full-toc.inc\");\n-        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n-\n-        let version_input = builder.src.join(\"src/doc/version_info.html.template\");\n-        let version_info = out.join(\"version_info.html\");\n-\n-        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n-            let info = t!(fs::read_to_string(&version_input))\n-                .replace(\"VERSION\", &builder.rust_release())\n-                .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n-                .replace(\"STAMP\", builder.rust_info.sha().unwrap_or(\"\"));\n-            t!(fs::write(&version_info, &info));\n-        }\n \n         for file in t!(fs::read_dir(builder.src.join(\"src/doc\"))) {\n             let file = t!(file);\n@@ -401,6 +391,45 @@ impl Step for Standalone {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub struct SharedAssetsPaths {\n+    pub version_info: PathBuf,\n+}\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct SharedAssets {\n+    target: TargetSelection,\n+}\n+\n+impl Step for SharedAssets {\n+    type Output = SharedAssetsPaths;\n+    const DEFAULT: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        // Other tasks depend on this, no need to execute it on its own\n+        run.never()\n+    }\n+\n+    // Generate shared resources used by other pieces of documentation.\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let out = builder.doc_out(self.target);\n+\n+        let version_input = builder.src.join(\"src\").join(\"doc\").join(\"version_info.html.template\");\n+        let version_info = out.join(\"version_info.html\");\n+        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n+            let info = t!(fs::read_to_string(&version_input))\n+                .replace(\"VERSION\", &builder.rust_release())\n+                .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n+                .replace(\"STAMP\", builder.rust_info.sha().unwrap_or(\"\"));\n+            t!(fs::write(&version_info, &info));\n+        }\n+\n+        builder.copy(&builder.src.join(\"src\").join(\"doc\").join(\"rust.css\"), &out.join(\"rust.css\"));\n+\n+        SharedAssetsPaths { version_info }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub stage: u32,\n@@ -429,7 +458,8 @@ impl Step for Std {\n         let target = self.target;\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n+\n+        builder.ensure(SharedAssets { target: self.target });\n \n         let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n         let mut extra_args = vec!["}]}