{"sha": "30fde047804b6555ad982e7d55fea9e54815ea39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZmRlMDQ3ODA0YjY1NTVhZDk4MmU3ZDU1ZmVhOWU1NDgxNWVhMzk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-01T17:31:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-02T18:44:27Z"}, "message": "Clean up error messages regarding break/continue inside consts", "tree": {"sha": "6af4f4cd792efeb22dd9b05ba090e787eefd0588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6af4f4cd792efeb22dd9b05ba090e787eefd0588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30fde047804b6555ad982e7d55fea9e54815ea39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30fde047804b6555ad982e7d55fea9e54815ea39", "html_url": "https://github.com/rust-lang/rust/commit/30fde047804b6555ad982e7d55fea9e54815ea39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30fde047804b6555ad982e7d55fea9e54815ea39/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00050f4cf7d602566afd511b66ae6645f92987d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00050f4cf7d602566afd511b66ae6645f92987d", "html_url": "https://github.com/rust-lang/rust/commit/b00050f4cf7d602566afd511b66ae6645f92987d"}], "stats": {"total": 89, "additions": 42, "deletions": 47}, "files": [{"sha": "2365bdda932fb6542bd3c71fb6b2b728a8e0633c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/30fde047804b6555ad982e7d55fea9e54815ea39/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fde047804b6555ad982e7d55fea9e54815ea39/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=30fde047804b6555ad982e7d55fea9e54815ea39", "patch": "@@ -103,6 +103,7 @@ pub struct LoweringContext<'a> {\n     loop_scopes: Vec<NodeId>,\n     is_in_loop_condition: bool,\n     is_in_trait_impl: bool,\n+    is_in_anon_const: bool,\n \n     /// What to do when we encounter either an \"anonymous lifetime\n     /// reference\". The term \"anonymous\" is meant to encompass both\n@@ -230,6 +231,7 @@ pub fn lower_crate(\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n         is_in_trait_impl: false,\n+        is_in_anon_const: false,\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n@@ -968,31 +970,30 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n-        match destination {\n-            Some((id, label)) => {\n-                let target_id = if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                    Ok(self.lower_node_id(loop_id).node_id)\n-                } else {\n-                    Err(hir::LoopIdError::UnresolvedLabel)\n-                };\n-                hir::Destination {\n-                    label: self.lower_label(Some(label)),\n-                    target_id,\n+        let target_id = if self.is_in_anon_const {\n+            Err(hir::LoopIdError::OutsideLoopScope)\n+        } else {\n+            match destination {\n+                Some((id, _)) => {\n+                    if let Def::Label(loop_id) = self.expect_full_def(id) {\n+                        Ok(self.lower_node_id(loop_id).node_id)\n+                    } else {\n+                        Err(hir::LoopIdError::UnresolvedLabel)\n+                    }\n                 }\n-            }\n-            None => {\n-                let target_id = self.loop_scopes\n-                    .last()\n-                    .map(|innermost_loop_id| *innermost_loop_id)\n-                    .map(|id| Ok(self.lower_node_id(id).node_id))\n-                    .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                    .into();\n-\n-                hir::Destination {\n-                    label: None,\n-                    target_id,\n+                None => {\n+                    self.loop_scopes\n+                        .last()\n+                        .map(|innermost_loop_id| *innermost_loop_id)\n+                        .map(|id| Ok(self.lower_node_id(id).node_id))\n+                        .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n+                        .into()\n                 }\n             }\n+        };\n+        hir::Destination {\n+            label: self.lower_label(destination.map(|(_, label)| label)),\n+            target_id,\n         }\n     }\n \n@@ -3440,13 +3441,22 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(c.id);\n+        let was_in_loop_condition = self.is_in_loop_condition;\n+        self.is_in_loop_condition = false;\n+        let was_in_anon_const = self.is_in_anon_const;\n+        self.is_in_anon_const = true;\n \n-        hir::AnonConst {\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(c.id);\n+        let anon_const = hir::AnonConst {\n             id: node_id,\n             hir_id,\n             body: self.lower_body(None, |this| this.lower_expr(&c.value)),\n-        }\n+        };\n+\n+        self.is_in_anon_const = was_in_anon_const;\n+        self.is_in_loop_condition = was_in_loop_condition;\n+\n+        anon_const\n     }\n \n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {"}, {"sha": "8be5b925a399e35bf86d8f2cd068a581aad72cba", "filename": "src/test/ui/closure-array-break-length.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30fde047804b6555ad982e7d55fea9e54815ea39/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fde047804b6555ad982e7d55fea9e54815ea39/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.rs?ref=30fde047804b6555ad982e7d55fea9e54815ea39", "patch": "@@ -11,9 +11,7 @@\n fn main() {\n     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n \n-    while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n-    //~^ ERROR: `continue` outside of loop\n+    while |_: [_; continue]| {} {} //~ ERROR: `continue` outside of loop\n \n-    while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n-    //~^ ERROR: `break` outside of loop\n+    while |_: [_; break]| {} {} //~ ERROR: `break` outside of loop\n }"}, {"sha": "f62b1354370929bbb065ff54b0b4ff99152ce8a0", "filename": "src/test/ui/closure-array-break-length.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/30fde047804b6555ad982e7d55fea9e54815ea39/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30fde047804b6555ad982e7d55fea9e54815ea39/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr?ref=30fde047804b6555ad982e7d55fea9e54815ea39", "patch": "@@ -4,31 +4,18 @@ error[E0268]: `continue` outside of loop\n LL |     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n    |             ^^^^^^^^ cannot break outside of a loop\n \n-error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n-  --> $DIR/closure-array-break-length.rs:14:19\n-   |\n-LL |     while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n-   |                   ^^^^^^^^ unlabeled `continue` in the condition of a `while` loop\n-\n error[E0268]: `continue` outside of loop\n   --> $DIR/closure-array-break-length.rs:14:19\n    |\n-LL |     while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n+LL |     while |_: [_; continue]| {} {} //~ ERROR: `continue` outside of loop\n    |                   ^^^^^^^^ cannot break outside of a loop\n \n-error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n-  --> $DIR/closure-array-break-length.rs:17:19\n-   |\n-LL |     while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n-   |                   ^^^^^ unlabeled `break` in the condition of a `while` loop\n-\n error[E0268]: `break` outside of loop\n-  --> $DIR/closure-array-break-length.rs:17:19\n+  --> $DIR/closure-array-break-length.rs:16:19\n    |\n-LL |     while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n+LL |     while |_: [_; break]| {} {} //~ ERROR: `break` outside of loop\n    |                   ^^^^^ cannot break outside of a loop\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors occurred: E0268, E0590.\n-For more information about an error, try `rustc --explain E0268`.\n+For more information about this error, try `rustc --explain E0268`."}]}