{"sha": "c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjhmZDJiZjViOTZjZWY1ZWE0MmQ4MzNlOWNhY2NmMDAyY2Y1ZTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-03T02:08:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-03T02:08:15Z"}, "message": "Rollup merge of #64975 - crgl:clone-from-linked-list, r=bluss\n\nImplement Clone::clone_from for LinkedList\n\nSee #28481. This represents a substantial speedup when the list sizes are comparable, and shouldn't ever be significantly worse. Technically split_off is doing an unnecessary search, but the code is hopefully cleaner as a result. I'm happy to rework anything that needs to be changed as well!", "tree": {"sha": "bc0a35398302bac8be9b3739553550f2cd0fe621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0a35398302bac8be9b3739553550f2cd0fe621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlVgPCRBK7hj4Ov3rIwAAdHIIADpV2/f9XtUtVr7iratmELPo\n+EhJkHpQom62JONEI40HJ/z0TjeaoKrKdDAKt8BkzohmBWIx071D5rn/5p7nJCfQ\nhAuLN8fCFXpmY/9UWAtqQt6q3K4MTSFH91vXCy1h7DGagpJd/TkZSIaczWJFQCCj\nr+1qri5kPnAwXglYtLCNCE6vADOGmK7T+osz9KKTLaLi31sAfDuVNaVbcOLa+phf\nZx+uM/6HOxkMQ2NPEbXQvmaxDEHjQRueyuSkoYPTcnZfOEwhloopPwrqLYpJjusP\nXWZO+/XUheYzbE54eJ2gP7I17WDZZAV0UAzDfKsrHJCwYb4vNaQ6HvMRrg7pHTw=\n=fboS\n-----END PGP SIGNATURE-----\n", "payload": "tree bc0a35398302bac8be9b3739553550f2cd0fe621\nparent faf2e8087c54d2a778e293f093a34fa18f48f0f2\nparent 864e6feaf857f4a48ace3eafd2003a32ac46602b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570068495 +0200\ncommitter GitHub <noreply@github.com> 1570068495 +0200\n\nRollup merge of #64975 - crgl:clone-from-linked-list, r=bluss\n\nImplement Clone::clone_from for LinkedList\n\nSee #28481. This represents a substantial speedup when the list sizes are comparable, and shouldn't ever be significantly worse. Technically split_off is doing an unnecessary search, but the code is hopefully cleaner as a result. I'm happy to rework anything that needs to be changed as well!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9", "html_url": "https://github.com/rust-lang/rust/commit/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf2e8087c54d2a778e293f093a34fa18f48f0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf2e8087c54d2a778e293f093a34fa18f48f0f2", "html_url": "https://github.com/rust-lang/rust/commit/faf2e8087c54d2a778e293f093a34fa18f48f0f2"}, {"sha": "864e6feaf857f4a48ace3eafd2003a32ac46602b", "url": "https://api.github.com/repos/rust-lang/rust/commits/864e6feaf857f4a48ace3eafd2003a32ac46602b", "html_url": "https://github.com/rust-lang/rust/commit/864e6feaf857f4a48ace3eafd2003a32ac46602b"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "702df250999fbed23ebee3dd16ac53f5485719f6", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9", "patch": "@@ -1197,6 +1197,19 @@ impl<T: Clone> Clone for LinkedList<T> {\n     fn clone(&self) -> Self {\n         self.iter().cloned().collect()\n     }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        let mut iter_other = other.iter();\n+        if self.len() > other.len() {\n+            self.split_off(other.len());\n+        }\n+        for (elem, elem_other) in self.iter_mut().zip(&mut iter_other) {\n+            elem.clone_from(elem_other);\n+        }\n+        if !iter_other.is_empty() {\n+            self.extend(iter_other.cloned());\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1001f6bba3b823573c7c15d378875b9fa222b0db", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=c4f8fd2bf5b96cef5ea42d833e9caccf002cf5e9", "patch": "@@ -110,6 +110,49 @@ fn test_append() {\n     check_links(&n);\n }\n \n+#[test]\n+fn test_clone_from() {\n+    // Short cloned from long\n+    {\n+        let v = vec![1, 2, 3, 4, 5];\n+        let u = vec![8, 7, 6, 2, 3, 4, 5];\n+        let mut m = list_from(&v);\n+        let n = list_from(&u);\n+        m.clone_from(&n);\n+        check_links(&m);\n+        assert_eq!(m, n);\n+        for elt in u {\n+            assert_eq!(m.pop_front(), Some(elt))\n+        }\n+    }\n+    // Long cloned from short\n+    {\n+        let v = vec![1, 2, 3, 4, 5];\n+        let u = vec![6, 7, 8];\n+        let mut m = list_from(&v);\n+        let n = list_from(&u);\n+        m.clone_from(&n);\n+        check_links(&m);\n+        assert_eq!(m, n);\n+        for elt in u {\n+            assert_eq!(m.pop_front(), Some(elt))\n+        }\n+    }\n+    // Two equal length lists\n+    {\n+        let v = vec![1, 2, 3, 4, 5];\n+        let u = vec![9, 8, 1, 2, 3];\n+        let mut m = list_from(&v);\n+        let n = list_from(&u);\n+        m.clone_from(&n);\n+        check_links(&m);\n+        assert_eq!(m, n);\n+        for elt in u {\n+            assert_eq!(m.pop_front(), Some(elt))\n+        }\n+    }\n+}\n+\n #[test]\n fn test_insert_prev() {\n     let mut m = list_from(&[0, 2, 4, 6, 8]);"}]}