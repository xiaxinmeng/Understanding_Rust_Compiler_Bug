{"sha": "f9c15de1fd271032ff44288fa2f0599edd9dd204", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzE1ZGUxZmQyNzEwMzJmZjQ0Mjg4ZmEyZjA1OTllZGQ5ZGQyMDQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-11T01:37:21Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-11T01:47:22Z"}, "message": "treemap: use an &mut parameter for skew and split\n\nresults in a small performance improvement and reduces the compiled\ncode size", "tree": {"sha": "96b06bf7615bac8af3c8feb7fdfc3075d1880f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b06bf7615bac8af3c8feb7fdfc3075d1880f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c15de1fd271032ff44288fa2f0599edd9dd204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c15de1fd271032ff44288fa2f0599edd9dd204", "html_url": "https://github.com/rust-lang/rust/commit/f9c15de1fd271032ff44288fa2f0599edd9dd204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c15de1fd271032ff44288fa2f0599edd9dd204/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d7014e55c06a184b02ccf724497c4c72d4d2041", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7014e55c06a184b02ccf724497c4c72d4d2041", "html_url": "https://github.com/rust-lang/rust/commit/9d7014e55c06a184b02ccf724497c4c72d4d2041"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "c3cb45a2bfb386436c0a826e1a7c6e1c5a488f8f", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f9c15de1fd271032ff44288fa2f0599edd9dd204/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c15de1fd271032ff44288fa2f0599edd9dd204/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=f9c15de1fd271032ff44288fa2f0599edd9dd204", "patch": "@@ -576,29 +576,25 @@ pure fn each_reverse<K: Ord, V>(node: &r/Option<~TreeNode<K, V>>,\n }\n \n // Remove left horizontal link by rotating right\n-fn skew<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn skew<K: Ord, V>(node: &mut ~TreeNode<K, V>) {\n     if node.left.map_default(false, |x| x.level == node.level) {\n         let mut save = node.left.swap_unwrap();\n         node.left <-> save.right; // save.right now None\n-        save.right = Some(node);\n-        save\n-    } else {\n-        node // nothing to do\n+        *node <-> save;\n+        node.right = Some(save);\n     }\n }\n \n // Remove dual horizontal link by rotating left and increasing level of\n // the parent\n-fn split<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn split<K: Ord, V>(node: &mut ~TreeNode<K, V>) {\n     if node.right.map_default(false,\n       |x| x.right.map_default(false, |y| y.level == node.level)) {\n         let mut save = node.right.swap_unwrap();\n         node.right <-> save.left; // save.left now None\n-        save.left = Some(node);\n         save.level += 1;\n-        save\n-    } else {\n-        node // nothing to do\n+        *node <-> save;\n+        node.left = Some(save);\n     }\n }\n \n@@ -611,11 +607,15 @@ fn insert<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: K,\n         let mut save = node.swap_unwrap();\n         if key < save.key {\n             let inserted = insert(&mut save.left, key, value);\n-            *node = Some(split(skew(save))); // re-balance, if necessary\n+            skew(&mut save);\n+            split(&mut save);\n+            *node = Some(save); // re-balance, if necessary\n             inserted\n         } else if save.key < key {\n             let inserted = insert(&mut save.right, key, value);\n-            *node = Some(split(skew(save))); // re-balance, if necessary\n+            skew(&mut save);\n+            split(&mut save);\n+            *node = Some(save); // re-balance, if necessary\n             inserted\n         } else {\n             save.key = key;\n@@ -684,15 +684,24 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n                 do save.right.mutate |mut x| { x.level = save.level; x }\n             }\n \n-            save = skew(save);\n+            skew(&mut save);\n+\n+            match save.right {\n+              Some(ref mut right) => {\n+                skew(right);\n+                match right.right {\n+                  Some(ref mut x) => { skew(x) },\n+                  None => ()\n+                }\n+              }\n+              None => ()\n+            }\n \n-            do save.right.mutate |mut right| {\n-                right = skew(right);\n-                right.right.mutate(skew);\n-                right\n+            split(&mut save);\n+            match save.right {\n+              Some(ref mut x) => { split(x) },\n+              None => ()\n             }\n-            save = split(save);\n-            save.right.mutate(split);\n         }\n \n         *node = Some(save);"}]}