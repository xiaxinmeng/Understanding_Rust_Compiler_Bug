{"sha": "28d74a9b7286c7e93484541326c92bdddb587f1a", "node_id": "C_kwDOAAsO6NoAKDI4ZDc0YTliNzI4NmM3ZTkzNDg0NTQxMzI2YzkyYmRkZGI1ODdmMWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-27T17:39:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T15:59:21Z"}, "message": "Shrink binding span.", "tree": {"sha": "11ed01e45b54e46a5c84acdcbd81ff989df4e60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ed01e45b54e46a5c84acdcbd81ff989df4e60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d74a9b7286c7e93484541326c92bdddb587f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d74a9b7286c7e93484541326c92bdddb587f1a", "html_url": "https://github.com/rust-lang/rust/commit/28d74a9b7286c7e93484541326c92bdddb587f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d74a9b7286c7e93484541326c92bdddb587f1a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea7b59d12ad34f18e03c2c6646cd8971dc2f216", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea7b59d12ad34f18e03c2c6646cd8971dc2f216", "html_url": "https://github.com/rust-lang/rust/commit/fea7b59d12ad34f18e03c2c6646cd8971dc2f216"}], "stats": {"total": 741, "additions": 302, "deletions": 439}, "files": [{"sha": "2fee1721f994b5e90b08578fb95c5eb7c2f84d67", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -879,25 +879,33 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n         hir::PatKind::Binding(.., name, Some(sub)) => (*name, sub),\n         _ => return,\n     };\n-    let binding_span = pat.span.with_hi(name.span.hi());\n+    let mk_span = |pat_span, ident_span: Span| {\n+        if let Some(ident_span) = ident_span.find_ancestor_inside(pat_span) {\n+            pat_span.with_hi(ident_span.hi())\n+        } else {\n+            pat_span\n+        }\n+    };\n+    let binding_span = mk_span(pat.span, name.span);\n \n     let typeck_results = cx.typeck_results;\n     let sess = cx.tcx.sess;\n \n     // Get the binding move, extract the mutability if by-ref.\n-    let mut_outer = match typeck_results.extract_binding_mode(sess, pat.hir_id, pat.span) {\n+    let mut_outer = match typeck_results.extract_binding_mode(sess, pat.hir_id, binding_span) {\n         Some(ty::BindByValue(_)) if is_binding_by_move(cx, pat.hir_id) => {\n             // We have `x @ pat` where `x` is by-move. Reject all borrows in `pat`.\n             let mut conflicts_ref = Vec::new();\n-            sub.each_binding(|_, hir_id, span, _| {\n+            sub.each_binding(|_, hir_id, span, ident| {\n+                let span = mk_span(span, ident.span);\n                 match typeck_results.extract_binding_mode(sess, hir_id, span) {\n                     Some(ty::BindByValue(_)) | None => {}\n                     Some(ty::BindByReference(_)) => conflicts_ref.push(span),\n                 }\n             });\n             if !conflicts_ref.is_empty() {\n                 sess.emit_err(BorrowOfMovedValue {\n-                    span: pat.span,\n+                    span: binding_span,\n                     binding_span,\n                     conflicts_ref,\n                     name,\n@@ -920,6 +928,7 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n     let mut conflicts_mut_mut = Vec::new();\n     let mut conflicts_mut_ref = Vec::new();\n     sub.each_binding(|_, hir_id, span, name| {\n+        let span = mk_span(span, name.span);\n         match typeck_results.extract_binding_mode(sess, hir_id, span) {\n             Some(ty::BindByReference(mut_inner)) => match (mut_outer, mut_inner) {\n                 // Both sides are `ref`.\n@@ -957,20 +966,20 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n     // Report errors if any.\n     if report_mut_mut {\n         // Report mutability conflicts for e.g. `ref mut x @ Some(ref mut y)`.\n-        sess.emit_err(MultipleMutBorrows { span: pat.span, occurences });\n+        sess.emit_err(MultipleMutBorrows { span: binding_span, occurences });\n     } else if report_mut_ref {\n         // Report mutability conflicts for e.g. `ref x @ Some(ref mut y)` or the converse.\n         match mut_outer {\n             Mutability::Mut => {\n-                sess.emit_err(AlreadyMutBorrowed { span: pat.span, occurences });\n+                sess.emit_err(AlreadyMutBorrowed { span: binding_span, occurences });\n             }\n             Mutability::Not => {\n-                sess.emit_err(AlreadyBorrowed { span: pat.span, occurences });\n+                sess.emit_err(AlreadyBorrowed { span: binding_span, occurences });\n             }\n         };\n     } else if report_move_conflict {\n         // Report by-ref and by-move conflicts, e.g. `ref x @ y`.\n-        sess.emit_err(MovedWhileBorrowed { span: pat.span, occurences });\n+        sess.emit_err(MovedWhileBorrowed { span: binding_span, occurences });\n     }\n }\n "}, {"sha": "0ca14c3f3bc66970d55559f2e932954431083e27", "filename": "tests/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,18 +2,16 @@ error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n    |\n LL |         ref foo @ [.., ref mut bar] => (),\n-   |         -------^^^^^^^^-----------^\n-   |         |              |\n-   |         |              value is mutably borrowed by `bar` here\n+   |         ^^^^^^^        ----------- value is mutably borrowed by `bar` here\n+   |         |\n    |         value is borrowed by `foo` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n    |\n LL |         ref foo @ Some(box ref mut s) => (),\n-   |         -------^^^^^^^^^^^^---------^\n-   |         |                  |\n-   |         |                  value is mutably borrowed by `s` here\n+   |         ^^^^^^^            --------- value is mutably borrowed by `s` here\n+   |         |\n    |         value is borrowed by `foo` here\n \n error[E0382]: borrow of moved value: `x`"}, {"sha": "25838fbf0abdcdebac13d92efebf6fff391a05b5", "filename": "tests/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,18 +2,16 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n    |\n LL |         Some(ref _y @ _z) => {}\n-   |              ------^^^--\n-   |              |        |\n-   |              |        value is moved into `_z` here\n+   |              ^^^^^^   -- value is moved into `_z` here\n+   |              |\n    |              value is borrowed by `_y` here\n \n error: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:19:14\n    |\n LL |         Some(_z @ ref _y) => {}\n-   |              --^^^------\n-   |              |    |\n-   |              |    value borrowed here after move\n+   |              ^^   ------ value borrowed here after move\n+   |              |\n    |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n    |\n@@ -26,18 +24,16 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n-   |              ----------^^^--\n-   |              |            |\n-   |              |            value is moved into `_z` here\n+   |              ^^^^^^^^^^   -- value is moved into `_z` here\n+   |              |\n    |              value is mutably borrowed by `_y` here\n \n error: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:33:14\n    |\n LL |         Some(_z @ ref mut _y) => {}\n-   |              --^^^----------\n-   |              |    |\n-   |              |    value borrowed here after move\n+   |              ^^   ---------- value borrowed here after move\n+   |              |\n    |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n    |"}, {"sha": "9305facc406f68f260873d3d21e5ab14a58b72ce", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,72 +2,64 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n-   |         -----^^^^^^^-\n-   |         |           |\n-   |         |           value is moved into `b` here\n+   |         ^^^^^       - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:34:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n-   |         -----^^^^^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^       --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:36:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n-   |         -----^^^^^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^       --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n-   |         -----^^^^^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^       --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n-   |         -----^^^^^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^       --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n-   |         ---------^^^^^^^-----\n-   |         |               |\n-   |         |               value is borrowed by `b` here\n+   |         ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n-   |         ---------^^^^^^^-----\n-   |         |               |\n-   |         |               value is borrowed by `b` here\n+   |         ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n-   |           ---------^^^^^^^-----\n-   |           |               |\n-   |           |               value is borrowed by `b` here\n+   |           ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |           |\n    |           value is mutably borrowed by `a` here\n \n error[E0382]: borrow of moved value"}, {"sha": "c440f4619f52a56db5d14214466efa959b4fecbb", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,9 +2,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:6:9\n    |\n LL |     let a @ ref b = U;\n-   |         -^^^-----\n-   |         |   |\n-   |         |   value borrowed here after move\n+   |         ^   ----- value borrowed here after move\n+   |         |\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n    |"}, {"sha": "13989ebadcb50d83314e0bcd1d972b6262ecb89c", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 50, "deletions": 75, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,9 +2,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:22:9\n    |\n LL |     let a @ ref b = U;\n-   |         -^^^-----\n-   |         |   |\n-   |         |   value borrowed here after move\n+   |         ^   ----- value borrowed here after move\n+   |         |\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n    |\n@@ -17,9 +16,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |         -^^^^^^^^^^^^---------^^^^^^-----^\n-   |         |            |              |\n-   |         |            |              value borrowed here after move\n+   |         ^            ---------      ----- value borrowed here after move\n+   |         |            |\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n@@ -33,9 +31,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |              -----^^^---------\n-   |              |       |\n-   |              |       value borrowed here after move\n+   |              ^^^^^   --------- value borrowed here after move\n+   |              |\n    |              value moved into `b` here\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n    |\n@@ -48,9 +45,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n-   |                                 -^^^-----\n-   |                                 |   |\n-   |                                 |   value borrowed here after move\n+   |                                 ^   ----- value borrowed here after move\n+   |                                 |\n    |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n    |\n@@ -63,9 +59,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n-   |         -^^^^---------^^-----^\n-   |         |    |          |\n-   |         |    |          value borrowed here after move\n+   |         ^    ---------  ----- value borrowed here after move\n+   |         |    |\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n@@ -79,9 +74,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n    |\n LL |     let a @ ref b = u();\n-   |         -^^^-----\n-   |         |   |\n-   |         |   value borrowed here after move\n+   |         ^   ----- value borrowed here after move\n+   |         |\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n    |\n@@ -94,9 +88,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |         -^^^^^^^^^^^^---------^^^^^^-----^\n-   |         |            |              |\n-   |         |            |              value borrowed here after move\n+   |         ^            ---------      ----- value borrowed here after move\n+   |         |            |\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n@@ -110,9 +103,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |              -----^^^---------\n-   |              |       |\n-   |              |       value borrowed here after move\n+   |              ^^^^^   --------- value borrowed here after move\n+   |              |\n    |              value moved into `b` here\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n    |\n@@ -125,9 +117,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n-   |                                 -^^^-----\n-   |                                 |   |\n-   |                                 |   value borrowed here after move\n+   |                                 ^   ----- value borrowed here after move\n+   |                                 |\n    |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n    |\n@@ -140,9 +131,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n-   |         -^^^^---------^^-----^\n-   |         |    |          |\n-   |         |    |          value borrowed here after move\n+   |         ^    ---------  ----- value borrowed here after move\n+   |         |    |\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n@@ -156,9 +146,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:42:9\n    |\n LL |         a @ Some(ref b) => {}\n-   |         -^^^^^^^^-----^\n-   |         |        |\n-   |         |        value borrowed here after move\n+   |         ^        ----- value borrowed here after move\n+   |         |\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n    |\n@@ -171,9 +160,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n-   |         |                 |              |\n-   |         |                 |              value borrowed here after move\n+   |         ^                 ---------      ----- value borrowed here after move\n+   |         |                 |\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n@@ -187,9 +175,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                   -----^^^---------\n-   |                   |       |\n-   |                   |       value borrowed here after move\n+   |                   ^^^^^   --------- value borrowed here after move\n+   |                   |\n    |                   value moved into `b` here\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n    |\n@@ -202,9 +189,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                                      -^^^-----\n-   |                                      |   |\n-   |                                      |   value borrowed here after move\n+   |                                      ^   ----- value borrowed here after move\n+   |                                      |\n    |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n    |\n@@ -217,9 +203,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n-   |         -----^^^^^^^^^-----^^---------^^\n-   |         |             |      |\n-   |         |             |      value borrowed here after move\n+   |         ^^^^^         -----  --------- value borrowed here after move\n+   |         |             |\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n@@ -233,9 +218,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n    |\n LL |         a @ Some(ref b) => {}\n-   |         -^^^^^^^^-----^\n-   |         |        |\n-   |         |        value borrowed here after move\n+   |         ^        ----- value borrowed here after move\n+   |         |\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n    |\n@@ -248,9 +232,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n-   |         |                 |              |\n-   |         |                 |              value borrowed here after move\n+   |         ^                 ---------      ----- value borrowed here after move\n+   |         |                 |\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n@@ -264,9 +247,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                   -----^^^---------\n-   |                   |       |\n-   |                   |       value borrowed here after move\n+   |                   ^^^^^   --------- value borrowed here after move\n+   |                   |\n    |                   value moved into `b` here\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n    |\n@@ -279,9 +261,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |                                      -^^^-----\n-   |                                      |   |\n-   |                                      |   value borrowed here after move\n+   |                                      ^   ----- value borrowed here after move\n+   |                                      |\n    |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n    |\n@@ -294,9 +275,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n-   |         -----^^^^^^^^^-----^^---------^^\n-   |         |             |      |\n-   |         |             |      value borrowed here after move\n+   |         ^^^^^         -----  --------- value borrowed here after move\n+   |         |             |\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n@@ -310,9 +290,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n    |\n LL |     fn f1(a @ ref b: U) {}\n-   |           -^^^-----\n-   |           |   |\n-   |           |   value borrowed here after move\n+   |           ^   ----- value borrowed here after move\n+   |           |\n    |           value moved into `a` here\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n    |\n@@ -325,9 +304,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           -----^^^^^^^^-----^^^^^^^^^^-----^\n-   |           |            |              |\n-   |           |            |              value borrowed here after move\n+   |           ^^^^^        -----          ----- value borrowed here after move\n+   |           |            |\n    |           |            value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n@@ -341,9 +319,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                    -^^^-----\n-   |                    |   |\n-   |                    |   value borrowed here after move\n+   |                    ^   ----- value borrowed here after move\n+   |                    |\n    |                    value moved into `b` here\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n    |\n@@ -356,9 +333,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                               -----^^^-----\n-   |                               |       |\n-   |                               |       value borrowed here after move\n+   |                               ^^^^^   ----- value borrowed here after move\n+   |                               |\n    |                               value moved into `d` here\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n    |\n@@ -371,9 +347,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n-   |           -^^^^---------^^-----^\n-   |           |    |          |\n-   |           |    |          value borrowed here after move\n+   |           ^    ---------  ----- value borrowed here after move\n+   |           |    |\n    |           |    value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait"}, {"sha": "00593b2a98f2b1cb8edd840fe25f2bfe7631d752", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 50, "deletions": 75, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,234 +2,209 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:24:9\n    |\n LL |     let ref a @ b = U;\n-   |         -----^^^-\n-   |         |       |\n-   |         |       value is moved into `b` here\n+   |         ^^^^^   - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n-   |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n-   |         |                |              |\n-   |         |                |              value is moved into `e` here\n+   |         ^^^^^            -----          - value is moved into `e` here\n+   |         |                |\n    |         |                value is moved into `c` here\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:26:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n-   |                  -----^^^-----\n-   |                  |       |\n-   |                  |       value is moved into `c` here\n+   |                  ^^^^^   ----- value is moved into `c` here\n+   |                  |\n    |                  value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:26:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n-   |                                 -----^^^-\n-   |                                 |       |\n-   |                                 |       value is moved into `e` here\n+   |                                 ^^^^^   - value is moved into `e` here\n+   |                                 |\n    |                                 value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n-   |         ---------^^^^-^^-----^\n-   |         |            |  |\n-   |         |            |  value is moved into `c` here\n+   |         ^^^^^^^^^    -  ----- value is moved into `c` here\n+   |         |            |\n    |         |            value is moved into `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n-   |         -----^^^-\n-   |         |       |\n-   |         |       value is moved into `b` here\n+   |         ^^^^^   - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n-   |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n-   |         |                |              |\n-   |         |                |              value is moved into `e` here\n+   |         ^^^^^            -----          - value is moved into `e` here\n+   |         |                |\n    |         |                value is moved into `c` here\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n-   |                  -----^^^-----\n-   |                  |       |\n-   |                  |       value is moved into `c` here\n+   |                  ^^^^^   ----- value is moved into `c` here\n+   |                  |\n    |                  value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n-   |                                 -----^^^-\n-   |                                 |       |\n-   |                                 |       value is moved into `e` here\n+   |                                 ^^^^^   - value is moved into `e` here\n+   |                                 |\n    |                                 value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n-   |         ---------^^^^-^^-----^\n-   |         |            |  |\n-   |         |            |  value is moved into `c` here\n+   |         ^^^^^^^^^    -  ----- value is moved into `c` here\n+   |         |            |\n    |         |            value is moved into `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:47:9\n    |\n LL |         ref a @ Some(b) => {}\n-   |         -----^^^^^^^^-^\n-   |         |            |\n-   |         |            value is moved into `b` here\n+   |         ^^^^^        - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:52:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n-   |         |                     |              |\n-   |         |                     |              value is moved into `e` here\n+   |         ^^^^^                 -----          - value is moved into `e` here\n+   |         |                     |\n    |         |                     value is moved into `c` here\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:52:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |                       -----^^^-----\n-   |                       |       |\n-   |                       |       value is moved into `c` here\n+   |                       ^^^^^   ----- value is moved into `c` here\n+   |                       |\n    |                       value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:52:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |                                      -----^^^-\n-   |                                      |       |\n-   |                                      |       value is moved into `e` here\n+   |                                      ^^^^^   - value is moved into `e` here\n+   |                                      |\n    |                                      value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:59:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n-   |         ---------^^^^^^^^^-^^-----^^\n-   |         |                 |  |\n-   |         |                 |  value is moved into `c` here\n+   |         ^^^^^^^^^         -  ----- value is moved into `c` here\n+   |         |                 |\n    |         |                 value is moved into `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:64:9\n    |\n LL |         ref a @ Some(b) => {}\n-   |         -----^^^^^^^^-^\n-   |         |            |\n-   |         |            value is moved into `b` here\n+   |         ^^^^^        - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n-   |         |                     |              |\n-   |         |                     |              value is moved into `e` here\n+   |         ^^^^^                 -----          - value is moved into `e` here\n+   |         |                     |\n    |         |                     value is moved into `c` here\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |                       -----^^^-----\n-   |                       |       |\n-   |                       |       value is moved into `c` here\n+   |                       ^^^^^   ----- value is moved into `c` here\n+   |                       |\n    |                       value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n-   |                                      -----^^^-\n-   |                                      |       |\n-   |                                      |       value is moved into `e` here\n+   |                                      ^^^^^   - value is moved into `e` here\n+   |                                      |\n    |                                      value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:78:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n-   |         ---------^^^^^^^^^-^^-----^^\n-   |         |                 |  |\n-   |         |                 |  value is moved into `c` here\n+   |         ^^^^^^^^^         -  ----- value is moved into `c` here\n+   |         |                 |\n    |         |                 value is moved into `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n-   |           -----^^^-\n-   |           |       |\n-   |           |       value is moved into `b` here\n+   |           ^^^^^   - value is moved into `b` here\n+   |           |\n    |           value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n-   |           |                |              |\n-   |           |                |              value is moved into `e` here\n+   |           ^^^^^            -----          - value is moved into `e` here\n+   |           |                |\n    |           |                value is moved into `c` here\n    |           value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                    -----^^^-----\n-   |                    |       |\n-   |                    |       value is moved into `c` here\n+   |                    ^^^^^   ----- value is moved into `c` here\n+   |                    |\n    |                    value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                                   -----^^^-\n-   |                                   |       |\n-   |                                   |       value is moved into `e` here\n+   |                                   ^^^^^   - value is moved into `e` here\n+   |                                   |\n    |                                   value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n-   |           ---------^^^^-^^-----^\n-   |           |            |  |\n-   |           |            |  value is moved into `c` here\n+   |           ^^^^^^^^^    -  ----- value is moved into `c` here\n+   |           |            |\n    |           |            value is moved into `b` here\n    |           value is mutably borrowed by `a` here\n "}, {"sha": "d6409d1b643b9b4d089fa5db5586b47ca654dee7", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 64, "deletions": 96, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,296 +2,264 @@ error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n-   |         ---------^^^^^^^^^^^^^-----^\n-   |         |                     |\n-   |         |                     value is borrowed by `a` here\n+   |         ^^^^^^^^^             ----- value is borrowed by `a` here\n+   |         |\n    |         value is mutably borrowed by `z` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n-   |         ---------^^^^-----------------^\n-   |         |            |       |\n-   |         |            |       value is mutably borrowed by `c` here\n+   |         ^^^^^^^^^    -----   --------- value is mutably borrowed by `c` here\n+   |         |            |\n    |         |            value is borrowed by `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n-   |                      -----^^^---------\n-   |                      |       |\n-   |                      |       value is mutably borrowed by `c` here\n+   |                      ^^^^^   --------- value is mutably borrowed by `c` here\n+   |                      |\n    |                      value is borrowed by `b` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n    |\n LL |     let ref a @ ref mut b = U;\n-   |         -----^^^---------\n-   |         |       |\n-   |         |       value is mutably borrowed by `b` here\n+   |         ^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref mut a @ ref b = U;\n-   |         ---------^^^-----\n-   |         |           |\n-   |         |           value is borrowed by `b` here\n+   |         ^^^^^^^^^   ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         -----^^^^---------^^---------^\n-   |         |        |          |\n-   |         |        |          value is mutably borrowed by `c` here\n+   |         ^^^^^    ---------  --------- value is mutably borrowed by `c` here\n+   |         |        |\n    |         |        value is mutably borrowed by `b` here\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n-   |         ---------^^^^-----^^-----^\n-   |         |            |      |\n-   |         |            |      value is borrowed by `c` here\n+   |         ^^^^^^^^^    -----  ----- value is borrowed by `c` here\n+   |         |            |\n    |         |            value is borrowed by `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n-   |         ---------^^^-----\n-   |         |           |\n-   |         |           value is borrowed by `b` here\n+   |         ^^^^^^^^^   ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n-   |         -----^^^---------\n-   |         |       |\n-   |         |       value is mutably borrowed by `b` here\n+   |         ^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:9\n    |\n LL |     let ref mut a @ ref b = U;\n-   |         ---------^^^-----\n-   |         |           |\n-   |         |           value is borrowed by `b` here\n+   |         ^^^^^^^^^   ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n    |\n LL |     let ref a @ ref mut b = U;\n-   |         -----^^^---------\n-   |         |       |\n-   |         |       value is mutably borrowed by `b` here\n+   |         ^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n-   |         ---------^^^^^^-----^\n-   |         |              |\n-   |         |              value is borrowed by `b` here\n+   |         ^^^^^^^^^      ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n-   |                                 ---------^^^^^^^-----^\n-   |                                 |               |\n-   |                                 |               value is borrowed by `b` here\n+   |                                 ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |                                 |\n    |                                 value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-   |         -----^^^^^^---------^\n-   |         |          |\n-   |         |          value is mutably borrowed by `b` here\n+   |         ^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-   |                                 -----^^^^^^^---------^\n-   |                                 |           |\n-   |                                 |           value is mutably borrowed by `b` here\n+   |                                 ^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                 |\n    |                                 value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n-   |         -----^^^^^^---------^\n-   |         |          |\n-   |         |          value is mutably borrowed by `b` here\n+   |         ^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n-   |                                 -----^^^^^^^---------^\n-   |                                 |           |\n-   |                                 |           value is mutably borrowed by `b` here\n+   |                                 ^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                 |\n    |                                 value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n-   |         ---------^^^^^^-----^\n-   |         |              |\n-   |         |              value is borrowed by `b` here\n+   |         ^^^^^^^^^      ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n-   |                                 ---------^^^^^^^-----^\n-   |                                 |               |\n-   |                                 |               value is borrowed by `b` here\n+   |                                 ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |                                 |\n    |                                 value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n-   |         -----^^^^^^---------^\n-   |         |          |\n-   |         |          value is mutably borrowed by `b` here\n+   |         ^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n-   |                                 -----^^^^^^^---------^\n-   |                                 |           |\n-   |                                 |           value is mutably borrowed by `b` here\n+   |                                 ^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                 |\n    |                                 value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n-   |         ---------^^^^^^-----^\n-   |         |              |\n-   |         |              value is borrowed by `b` here\n+   |         ^^^^^^^^^      ----- value is borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n-   |                                 ---------^^^^^^^-----^\n-   |                                 |               |\n-   |                                 |               value is borrowed by `b` here\n+   |                                 ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |                                 |\n    |                                 value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         -----^^^^---------^^---------^\n-   |         |        |          |\n-   |         |        |          value is mutably borrowed by `c` here\n+   |         ^^^^^    ---------  --------- value is mutably borrowed by `c` here\n+   |         |        |\n    |         |        value is mutably borrowed by `b` here\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         -----^^^^---------^^---------^\n-   |         |        |          |\n-   |         |        |          value is mutably borrowed by `c` here\n+   |         ^^^^^    ---------  --------- value is mutably borrowed by `c` here\n+   |         |        |\n    |         |        value is mutably borrowed by `b` here\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n-   |         -----^^^^---------^^---------^\n-   |         |        |          |\n-   |         |        |          value is mutably borrowed by `c` here\n+   |         ^^^^^    ---------  --------- value is mutably borrowed by `c` here\n+   |         |        |\n    |         |        value is mutably borrowed by `b` here\n    |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:134:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n-   |         ---------^^^^-----^^-----^\n-   |         |            |      |\n-   |         |            |      value is borrowed by `c` here\n+   |         ^^^^^^^^^    -----  ----- value is borrowed by `c` here\n+   |         |            |\n    |         |            value is borrowed by `b` here\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n-   |           -----^^^---------\n-   |           |       |\n-   |           |       value is mutably borrowed by `b` here\n+   |           ^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n    |           value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n-   |           ---------^^^-----\n-   |           |           |\n-   |           |           value is borrowed by `b` here\n+   |           ^^^^^^^^^   ----- value is borrowed by `b` here\n+   |           |\n    |           value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n-   |           -----^^^^^^^^^^^----------------^^^^^^^^\n-   |           |               |\n-   |           |               value is mutably borrowed by `mid` here\n+   |           ^^^^^           ----------- value is mutably borrowed by `mid` here\n+   |           |\n    |           value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                      -----^^^-------------\n-   |                      |       |           |\n-   |                      |       |           value is moved into `c` here\n+   |                      ^^^^^   ---------   - value is moved into `c` here\n+   |                      |       |\n    |                      |       value is mutably borrowed by `b` here\n    |                      value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                              ---------^^^-\n-   |                              |           |\n-   |                              |           value is moved into `c` here\n+   |                              ^^^^^^^^^   - value is moved into `c` here\n+   |                              |\n    |                              value is mutably borrowed by `b` here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable"}, {"sha": "24189d0615c706d22edbafda42a0ccb83c69f7a9", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 73, "deletions": 113, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,98 +2,80 @@ error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:26:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ---------^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ---------^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ---------^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ---------^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n-   |         ---------^^^---------\n-   |         |           |\n-   |         |           value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:44:9\n    |\n-LL |       let ref mut a @ (\n-   |           ^--------\n-   |           |\n-   |  _________value is mutably borrowed by `a` here\n-   | |\n-LL | |\n-LL | |         ref mut b,\n-   | |         --------- value is mutably borrowed by `b` here\n-LL | |         [\n-LL | |             ref mut c,\n-   | |             --------- value is mutably borrowed by `c` here\n-LL | |             ref mut d,\n-   | |             --------- value is mutably borrowed by `d` here\n-LL | |             ref e,\n-   | |             ----- value is borrowed by `e` here\n-LL | |         ]\n-LL | |     ) = (U, [U, U, U]);\n-   | |_____^\n+LL |     let ref mut a @ (\n+   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n+LL |\n+LL |         ref mut b,\n+   |         --------- value is mutably borrowed by `b` here\n+LL |         [\n+LL |             ref mut c,\n+   |             --------- value is mutably borrowed by `c` here\n+LL |             ref mut d,\n+   |             --------- value is mutably borrowed by `d` here\n+LL |             ref e,\n+   |             ----- value is borrowed by `e` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:54:9\n    |\n-LL |       let ref mut a @ (\n-   |           ^--------\n-   |           |\n-   |  _________value is mutably borrowed by `a` here\n-   | |\n-LL | |\n-LL | |             ref mut b,\n-   | |             --------- value is mutably borrowed by `b` here\n-LL | |             [\n-LL | |                 ref mut c,\n-   | |                 --------- value is mutably borrowed by `c` here\n-LL | |                 ref mut d,\n-   | |                 --------- value is mutably borrowed by `d` here\n-LL | |                 ref e,\n-   | |                 ----- value is borrowed by `e` here\n-LL | |             ]\n-LL | |         ) = (u(), [u(), u(), u()]);\n-   | |_________^\n+LL |     let ref mut a @ (\n+   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n+LL |\n+LL |             ref mut b,\n+   |             --------- value is mutably borrowed by `b` here\n+LL |             [\n+LL |                 ref mut c,\n+   |                 --------- value is mutably borrowed by `c` here\n+LL |                 ref mut d,\n+   |                 --------- value is mutably borrowed by `d` here\n+LL |                 ref e,\n+   |                 ----- value is borrowed by `e` here\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:64:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n-   |         -^^^^---------^^---------^\n-   |         |    |          |\n-   |         |    |          value borrowed here after move\n+   |         ^    ---------  --------- value borrowed here after move\n+   |         |    |\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n@@ -107,9 +89,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n-   |         -^^^^-^^^-^^-^^\n-   |         |    |   |  |\n-   |         |    |   |  value borrowed here after move\n+   |         ^    -   -  - value borrowed here after move\n+   |         |    |   |\n    |         |    |   value borrowed here after move\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n@@ -124,9 +105,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n-   |         -^^^^^^^^---------\n-   |         |        |\n-   |         |        value borrowed here after move\n+   |         ^        --------- value borrowed here after move\n+   |         |\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n    |\n@@ -139,9 +119,8 @@ error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n-   |         -^^^^^^^^^---------^^---------^\n-   |         |         |          |\n-   |         |         |          value borrowed here after move\n+   |         ^         ---------  --------- value borrowed here after move\n+   |         |         |\n    |         |         value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n@@ -155,127 +134,108 @@ error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ---------^^^^^^---------^\n-   |         |              |\n-   |         |              value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:76:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ---------^^^^^^^---------^\n-   |                                     |               |\n-   |                                     |               value is mutably borrowed by `b` here\n+   |                                     ^^^^^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                     |\n    |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ---------^^^^^^---------^\n-   |         |              |\n-   |         |              value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ---------^^^^^^^---------^\n-   |                                     |               |\n-   |                                     |               value is mutably borrowed by `b` here\n+   |                                     ^^^^^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                     |\n    |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:89:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ---------^^^^^^---------^\n-   |         |              |\n-   |         |              value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:89:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ---------^^^^^^^---------^\n-   |                                     |               |\n-   |                                     |               value is mutably borrowed by `b` here\n+   |                                     ^^^^^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                     |\n    |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:101:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ---------^^^^^^---------^\n-   |         |              |\n-   |         |              value is mutably borrowed by `b` here\n+   |         ^^^^^^^^^      --------- value is mutably borrowed by `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:101:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ---------^^^^^^^---------^\n-   |                                     |               |\n-   |                                     |               value is mutably borrowed by `b` here\n+   |                                     ^^^^^^^^^       --------- value is mutably borrowed by `b` here\n+   |                                     |\n    |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n-   |           ---------^^^---------\n-   |           |           |\n-   |           |           value is mutably borrowed by `b` here\n+   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n    |           value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n-   |           ---------^^^---------\n-   |           |           |\n-   |           |           value is mutably borrowed by `b` here\n+   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n    |           value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n    |\n-LL |           ref mut a @ [\n-   |           ^--------\n-   |           |\n-   |  _________value is mutably borrowed by `a` here\n-   | |\n-LL | |\n-LL | |             [ref b @ .., _],\n-   | |              ---------- value is borrowed by `b` here\n-LL | |             [_, ref mut mid @ ..],\n-   | |                 ---------------- value is mutably borrowed by `mid` here\n-LL | |             ..,\n-LL | |             [..],\n-LL | |         ] : [[U; 4]; 5]\n-   | |_________^\n+LL |         ref mut a @ [\n+   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n+LL |\n+LL |             [ref b @ .., _],\n+   |              ----- value is borrowed by `b` here\n+LL |             [_, ref mut mid @ ..],\n+   |                 ----------- value is mutably borrowed by `mid` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                      ---------^^^-------------\n-   |                      |           |           |\n-   |                      |           |           value is moved into `c` here\n+   |                      ^^^^^^^^^   ---------   - value is moved into `c` here\n+   |                      |           |\n    |                      |           value is mutably borrowed by `b` here\n    |                      value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                                  ---------^^^-\n-   |                                  |           |\n-   |                                  |           value is moved into `c` here\n+   |                                  ^^^^^^^^^   - value is moved into `c` here\n+   |                                  |\n    |                                  value is mutably borrowed by `b` here\n \n error[E0499]: cannot borrow value as mutable more than once at a time"}, {"sha": "36515c1a29bb5b98b0fec65e6edf25769978bc27", "filename": "tests/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,36 +2,32 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:26:9\n    |\n LL |     let ref a @ b = NotCopy;\n-   |         -----^^^-\n-   |         |       |\n-   |         |       value is moved into `b` here\n+   |         ^^^^^   - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n-   |         ---------^^^-\n-   |         |           |\n-   |         |           value is moved into `b` here\n+   |         ^^^^^^^^^   - value is moved into `b` here\n+   |         |\n    |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:34:12\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n-   |            -----^^^-\n-   |            |       |\n-   |            |       value is moved into `b` here\n+   |            ^^^^^   - value is moved into `b` here\n+   |            |\n    |            value is borrowed by `a` here\n \n error: borrow of moved value\n   --> $DIR/default-binding-modes-both-sides-independent.rs:34:29\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n-   |                             -^^^-----\n-   |                             |   |\n-   |                             |   value borrowed here after move\n+   |                             ^   ----- value borrowed here after move\n+   |                             |\n    |                             value moved into `b` here\n    |                             move occurs because `b` has type `NotCopy` which does not implement the `Copy` trait\n    |\n@@ -44,9 +40,8 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:42:9\n    |\n LL |         ref a @ b => {\n-   |         -----^^^-\n-   |         |       |\n-   |         |       value is moved into `b` here\n+   |         ^^^^^   - value is moved into `b` here\n+   |         |\n    |         value is borrowed by `a` here\n \n error[E0382]: borrow of moved value"}, {"sha": "69ce5d440af81850c53cabc4e1d44d7ddba04803", "filename": "tests/ui/suggestions/ref-pattern-binding.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d74a9b7286c7e93484541326c92bdddb587f1a/tests%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr?ref=28d74a9b7286c7e93484541326c92bdddb587f1a", "patch": "@@ -2,9 +2,8 @@ error: borrow of moved value\n   --> $DIR/ref-pattern-binding.rs:10:9\n    |\n LL |     let _moved @ ref _from = String::from(\"foo\");\n-   |         ------^^^---------\n-   |         |        |\n-   |         |        value borrowed here after move\n+   |         ^^^^^^   --------- value borrowed here after move\n+   |         |\n    |         value moved into `_moved` here\n    |         move occurs because `_moved` has type `String` which does not implement the `Copy` trait\n    |\n@@ -17,27 +16,24 @@ error: cannot move out of value because it is borrowed\n   --> $DIR/ref-pattern-binding.rs:11:9\n    |\n LL |     let ref _moved @ _from = String::from(\"foo\");\n-   |         ----------^^^-----\n-   |         |            |\n-   |         |            value is moved into `_from` here\n+   |         ^^^^^^^^^^   ----- value is moved into `_from` here\n+   |         |\n    |         value is borrowed by `_moved` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/ref-pattern-binding.rs:15:9\n    |\n LL |     let ref _moved @ S { f } = S { f: String::from(\"foo\") };\n-   |         ----------^^^^^^^-^^\n-   |         |                |\n-   |         |                value is moved into `f` here\n+   |         ^^^^^^^^^^       - value is moved into `f` here\n+   |         |\n    |         value is borrowed by `_moved` here\n \n error: borrow of moved value\n   --> $DIR/ref-pattern-binding.rs:18:9\n    |\n LL |     let _moved @ S { ref f } = S { f: String::from(\"foo\") };\n-   |         ------^^^^^^^-----^^\n-   |         |            |\n-   |         |            value borrowed here after move\n+   |         ^^^^^^       ----- value borrowed here after move\n+   |         |\n    |         value moved into `_moved` here\n    |         move occurs because `_moved` has type `S` which does not implement the `Copy` trait\n    |"}]}