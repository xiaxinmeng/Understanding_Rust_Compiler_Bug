{"sha": "ebca9c6ab9332e0befea6ca57bd4789e606cd305", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViY2E5YzZhYjkzMzJlMGJlZmVhNmNhNTdiZDQ3ODllNjA2Y2QzMDU=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-04-21T08:50:14Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-16T11:56:24Z"}, "message": "Add a file with test cases", "tree": {"sha": "6646a82ee2923efca88231cea09fab5bc57f247e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6646a82ee2923efca88231cea09fab5bc57f247e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebca9c6ab9332e0befea6ca57bd4789e606cd305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebca9c6ab9332e0befea6ca57bd4789e606cd305", "html_url": "https://github.com/rust-lang/rust/commit/ebca9c6ab9332e0befea6ca57bd4789e606cd305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebca9c6ab9332e0befea6ca57bd4789e606cd305/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f5893610b8511eefde072b580e7f7a286aa422", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f5893610b8511eefde072b580e7f7a286aa422", "html_url": "https://github.com/rust-lang/rust/commit/11f5893610b8511eefde072b580e7f7a286aa422"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "53cf2846e836a8e864ec3669df9356f1fac3acf7", "filename": "src/test/run-pass/label_break_value.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/ebca9c6ab9332e0befea6ca57bd4789e606cd305/src%2Ftest%2Frun-pass%2Flabel_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebca9c6ab9332e0befea6ca57bd4789e606cd305/src%2Ftest%2Frun-pass%2Flabel_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabel_break_value.rs?ref=ebca9c6ab9332e0befea6ca57bd4789e606cd305", "patch": "@@ -0,0 +1,121 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test control flow to follow label_break_value semantics\n+fn label_break(a: bool, b: bool) -> u32 {\n+    let mut v = 0;\n+    'b: {\n+        v = 1;\n+        if a {\n+            break 'b;\n+        }\n+        v = 2;\n+        if b {\n+            break 'b;\n+        }\n+        v = 3;\n+    }\n+    return v;\n+}\n+\n+// Test that values can be returned\n+fn break_value(a: bool, b: bool) -> u32 {\n+    let result = 'block: {\n+        if a { break 'block 1; }\n+        if b { break 'block 2; }\n+        3\n+    };\n+    result\n+}\n+\n+// Test nesting of labeled blocks\n+// here we only check that it compiles\n+fn label_break_nested() {\n+    'b: {\n+        println!(\"hi\");\n+        if false {\n+            break 'b;\n+        }\n+        'c: {\n+            if false {\n+                break 'b;\n+            }\n+            break 'c;\n+        }\n+        println!(\"hello\");\n+        if true {\n+            break 'b;\n+        }\n+    }\n+}\n+\n+// Tests for mixing labeled blocks with loop constructs\n+// This function should be the identity function\n+fn label_break_mixed(v: u32) -> u32 {\n+    let mut r = 0;\n+    'b: {\n+        // Unlabeled break still works\n+        // (only crossing boundaries is an error)\n+        loop {\n+            break;\n+        }\n+        if v == 0 {\n+            break 'b;\n+        }\n+        // Labeled breaking an inner loop still works\n+        'c: loop {\n+            if r == 1 {\n+                break 'c;\n+            }\n+            r += 1;\n+        }\n+        assert_eq!(r, 1);\n+        if v == 1 {\n+            break 'b;\n+        }\n+        // Labeled breaking an outer loop still works\n+        'd: loop {\n+            'e: {\n+                if v == r {\n+                    break 'b;\n+                }\n+                if r == 5 {\n+                    break 'd;\n+                }\n+                r += 1;\n+            }\n+        }\n+        assert_eq!(r, 5);\n+        assert!(v > r);\n+        // Here we test return from inside a labeled block\n+        return v;\n+    }\n+    r\n+}\n+\n+pub fn main() {\n+    assert_eq!(label_break(true, false), 1);\n+    assert_eq!(label_break(false, true), 2);\n+    assert_eq!(label_break(false, false), 3);\n+\n+    assert_eq!(break_value(true, false), 1);\n+    assert_eq!(break_value(false, true), 2);\n+    assert_eq!(break_value(false, false), 3);\n+\n+    assert_eq!(label_break_mixed(0), 0);\n+    assert_eq!(label_break_mixed(1), 1);\n+    assert_eq!(label_break_mixed(2), 2);\n+    assert_eq!(label_break_mixed(3), 3);\n+    assert_eq!(label_break_mixed(4), 4);\n+    assert_eq!(label_break_mixed(5), 5);\n+    assert_eq!(label_break_mixed(6), 6);\n+\n+    // FIXME: ensure that labeled blocks work if produced by macros and in match arms\n+}"}]}