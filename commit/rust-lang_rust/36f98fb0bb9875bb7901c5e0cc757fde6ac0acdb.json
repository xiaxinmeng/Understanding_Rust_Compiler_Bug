{"sha": "36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Zjk4ZmIwYmI5ODc1YmI3OTAxYzVlMGNjNzU3ZmRlNmFjMGFjZGI=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-04-19T18:36:53Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-04-19T18:36:53Z"}, "message": "Demonstrate accessing external variable in first example", "tree": {"sha": "cad9c0093383fdd9b890cb10163cf0661a929ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad9c0093383fdd9b890cb10163cf0661a929ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "html_url": "https://github.com/rust-lang/rust/commit/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5809644ad6ee87dc28afd8200fa8e12213f4f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5809644ad6ee87dc28afd8200fa8e12213f4f29", "html_url": "https://github.com/rust-lang/rust/commit/b5809644ad6ee87dc28afd8200fa8e12213f4f29"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "6eee1a4d49a2137f8d860fc5b14cd93c7c68e486", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=36f98fb0bb9875bb7901c5e0cc757fde6ac0acdb", "patch": "@@ -1717,27 +1717,32 @@ environment (sometimes referred to as \"capturing\" variables in their\n environment). For example, you couldn't write the following:\n \n ~~~~ {.ignore}\n-let foo = 10;\n+let x = 3;\n \n-// `bar` cannot refer to `foo`\n-fn bar() -> () { println!(\"{}\", foo); }\n+// `fun` cannot refer to `x`\n+fn fun() -> () { println!(\"{}\", x); }\n ~~~~\n \n Rust also supports _closures_, functions that can access variables in\n-the enclosing scope.  Compare `foo` in these:\n+the enclosing scope.  Compare `x` in these:\n \n ~~~~\n-fn            bar() -> () { println!(\"{}\", foo) }; // cannot reach enclosing scope\n-let closure = |foo| -> () { println!(\"{}\", foo) }; // can reach enclosing scope\n+let x = 3;\n+\n+// `fun` is an invalid definition\n+fn  fun       () -> () { println!(\"{}\", x) }; // cannot reach enclosing scope\n+let closure = || -> () { println!(\"{}\", x) }; // can reach enclosing scope\n+\n+fun();      // Still won't work\n+closure();  // Prints: 3\n ~~~~\n \n Closures can be utilized in this fashion:\n \n ~~~~\n-// Create a nameless function and assign it to `closure`.\n-// It's sole argument is a yet unknown `foo` to be supplied\n-// by the caller.\n-let closure = |foo| -> () { println!(\"{}\", foo) };\n+// Create a nameless function and assign it to `closure`. It's sole\n+// argument is a yet unknown `x` to be supplied by the caller.\n+let closure = |x| -> () { println!(\"{}\", x) };\n \n // Define `call_closure_with_ten` to take one argument and return null `()`.\n // `fun` is a function which takes one `int` argument `|int|` and also returns\n@@ -1752,7 +1757,7 @@ call_closure_with_ten(closure);\n This can be simplified by removing null arguments:\n \n ~~~~\n-let closure = |foo| println!(\"{}\", foo);\n+let closure = |x| println!(\"{}\", x);\n fn call_closure_with_ten(fun: |int|) { fun(10); }\n \n call_closure_with_ten(closure);"}]}