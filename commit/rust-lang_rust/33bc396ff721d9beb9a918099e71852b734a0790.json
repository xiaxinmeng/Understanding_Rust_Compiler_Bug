{"sha": "33bc396ff721d9beb9a918099e71852b734a0790", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYmMzOTZmZjcyMWQ5YmViOWE5MTgwOTllNzE4NTJiNzM0YTA3OTA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-06T14:18:57Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-12T21:41:58Z"}, "message": "Make `FalseEdges` always have two targets\n\nWe never have more than one imaginary target, so we have no reason for\na `Vec`", "tree": {"sha": "c74093594243147b5476b3a1718f0997aa6e434b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74093594243147b5476b3a1718f0997aa6e434b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33bc396ff721d9beb9a918099e71852b734a0790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33bc396ff721d9beb9a918099e71852b734a0790", "html_url": "https://github.com/rust-lang/rust/commit/33bc396ff721d9beb9a918099e71852b734a0790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33bc396ff721d9beb9a918099e71852b734a0790/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55cee44671ecb0869cc7fbac0ad62f6236893d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/55cee44671ecb0869cc7fbac0ad62f6236893d06", "html_url": "https://github.com/rust-lang/rust/commit/55cee44671ecb0869cc7fbac0ad62f6236893d06"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "f18afe7b6327ce8994a25bdd5b9f206cb97caf2f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -1196,9 +1196,9 @@ pub enum TerminatorKind<'tcx> {\n     FalseEdges {\n         /// The target normal control flow will take\n         real_target: BasicBlock,\n-        /// The list of blocks control flow could conceptually take, but won't\n+        /// A block control flow could conceptually take, but won't\n         /// in practice\n-        imaginary_targets: Vec<BasicBlock>,\n+        imaginary_target: BasicBlock,\n     },\n     /// A terminator for blocks that only take one path in reality, but where we\n     /// reserve the right to unwind in borrowck, even if it won't happen in practice.\n@@ -1335,8 +1335,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             SwitchInt { ref targets, .. } => None.into_iter().chain(&targets[..]),\n             FalseEdges {\n                 ref real_target,\n-                ref imaginary_targets,\n-            } => Some(real_target).into_iter().chain(&imaginary_targets[..]),\n+                ref imaginary_target,\n+            } => Some(real_target).into_iter().chain(slice::from_ref(imaginary_target)),\n         }\n     }\n \n@@ -1422,10 +1422,10 @@ impl<'tcx> TerminatorKind<'tcx> {\n             } => None.into_iter().chain(&mut targets[..]),\n             FalseEdges {\n                 ref mut real_target,\n-                ref mut imaginary_targets,\n+                ref mut imaginary_target,\n             } => Some(real_target)\n                 .into_iter()\n-                .chain(&mut imaginary_targets[..]),\n+                .chain(slice::from_mut(imaginary_target)),\n         }\n     }\n \n@@ -1722,12 +1722,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Assert { cleanup: None, .. } => vec![\"\".into()],\n             Assert { .. } => vec![\"success\".into(), \"unwind\".into()],\n             FalseEdges {\n-                ref imaginary_targets,\n                 ..\n             } => {\n-                let mut l = vec![\"real\".into()];\n-                l.resize(imaginary_targets.len() + 1, \"imaginary\".into());\n-                l\n+                vec![\"real\".into(), \"imaginary\".into()]\n             }\n             FalseUnwind {\n                 unwind: Some(_), ..\n@@ -3356,10 +3353,10 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Unreachable => Unreachable,\n             FalseEdges {\n                 real_target,\n-                ref imaginary_targets,\n+                imaginary_target,\n             } => FalseEdges {\n                 real_target,\n-                imaginary_targets: imaginary_targets.clone(),\n+                imaginary_target,\n             },\n             FalseUnwind {\n                 real_target,"}, {"sha": "335db27d2356e47b11dba05caa73767dac9303f9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -780,7 +780,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdges {\n                 real_target: _,\n-                imaginary_targets: _,\n+                imaginary_target: _,\n             }\n             | TerminatorKind::FalseUnwind {\n                 real_target: _,"}, {"sha": "7933fb80a3642168b5790f64fce6ba7450db4cf4", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -244,7 +244,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdges {\n                 real_target: _,\n-                imaginary_targets: _,\n+                imaginary_target: _,\n             }\n             | TerminatorKind::FalseUnwind {\n                 real_target: _,"}, {"sha": "104a8cb4894bfd530ead805bfd227f27073e3839", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -1792,12 +1792,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             TerminatorKind::FalseEdges {\n                 real_target,\n-                ref imaginary_targets,\n+                imaginary_target,\n             } => {\n                 self.assert_iscleanup(body, block_data, real_target, is_cleanup);\n-                for target in imaginary_targets {\n-                    self.assert_iscleanup(body, block_data, *target, is_cleanup);\n-                }\n+                self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);\n             }\n             TerminatorKind::FalseUnwind {\n                 real_target,"}, {"sha": "353842730c7e7900054ce55fcb5b7433750a4c1e", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -961,9 +961,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         source_info,\n                         TerminatorKind::FalseEdges {\n                             real_target: second_candidate.pre_binding_block,\n-                            imaginary_targets: vec![\n-                                first_candidate.next_candidate_pre_binding_block\n-                            ],\n+                            imaginary_target: first_candidate.next_candidate_pre_binding_block,\n                         }\n                     )\n                 } else {\n@@ -984,7 +982,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     source_info,\n                     TerminatorKind::FalseEdges {\n                         real_target: unreachable,\n-                        imaginary_targets: vec![candidate.next_candidate_pre_binding_block],\n+                        imaginary_targets: candidate.next_candidate_pre_binding_block,\n                     }\n                 );\n                 self.cfg.terminate(unreachable, source_info, TerminatorKind::Unreachable);\n@@ -1001,7 +999,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 source_info,\n                 TerminatorKind::FalseEdges {\n                     real_target: block,\n-                    imaginary_targets: vec![last_candidate.next_candidate_pre_binding_block]\n+                    imaginary_target: last_candidate.next_candidate_pre_binding_block,\n                 }\n             );\n             Some(block)\n@@ -1330,7 +1328,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             candidate_source_info,\n             TerminatorKind::FalseEdges {\n                 real_target: block,\n-                imaginary_targets: vec![candidate.next_candidate_pre_binding_block],\n+                imaginary_target: candidate.next_candidate_pre_binding_block,\n             },\n         );\n         self.ascribe_types(block, &candidate.ascriptions);"}, {"sha": "9350881f1e1fce07f42baf4bd7ae0f2986168136", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -802,11 +802,9 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation<'tcx>\n                     self.propagate_bits_into_entry_set_for(in_out, dest_bb, dirty_list);\n                 }\n             }\n-            mir::TerminatorKind::FalseEdges { real_target, ref imaginary_targets } => {\n+            mir::TerminatorKind::FalseEdges { real_target, imaginary_target } => {\n                 self.propagate_bits_into_entry_set_for(in_out, real_target, dirty_list);\n-                for target in imaginary_targets {\n-                    self.propagate_bits_into_entry_set_for(in_out, *target, dirty_list);\n-                }\n+                self.propagate_bits_into_entry_set_for(in_out, imaginary_target, dirty_list);\n             }\n             mir::TerminatorKind::FalseUnwind { real_target, unwind } => {\n                 self.propagate_bits_into_entry_set_for(in_out, real_target, dirty_list);"}, {"sha": "e20d5eb2e3d36f2527e89125147aa9e0edcd2eb4", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33bc396ff721d9beb9a918099e71852b734a0790/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=33bc396ff721d9beb9a918099e71852b734a0790", "patch": "@@ -791,11 +791,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n             }\n             TerminatorKind::Abort => { }\n             TerminatorKind::Unreachable => { }\n-            TerminatorKind::FalseEdges { ref mut real_target, ref mut imaginary_targets } => {\n+            TerminatorKind::FalseEdges { ref mut real_target, ref mut imaginary_target } => {\n                 *real_target = self.update_target(*real_target);\n-                for target in imaginary_targets {\n-                    *target = self.update_target(*target);\n-                }\n+                *imaginary_target = self.update_target(*imaginary_target);\n             }\n             TerminatorKind::FalseUnwind { real_target: _ , unwind: _ } =>\n                 // see the ordering of passes in the optimized_mir query."}]}