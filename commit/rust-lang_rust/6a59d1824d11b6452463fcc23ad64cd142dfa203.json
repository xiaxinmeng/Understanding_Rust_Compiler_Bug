{"sha": "6a59d1824d11b6452463fcc23ad64cd142dfa203", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTlkMTgyNGQxMWI2NDUyNDYzZmNjMjNhZDY0Y2QxNDJkZmEyMDM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T20:08:02Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T22:47:56Z"}, "message": "syntax: replace sess.span_diagnostic.cm with sess.codemap().", "tree": {"sha": "00094186d425e59e31f44e6f161f27bf0f685884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00094186d425e59e31f44e6f161f27bf0f685884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a59d1824d11b6452463fcc23ad64cd142dfa203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a59d1824d11b6452463fcc23ad64cd142dfa203", "html_url": "https://github.com/rust-lang/rust/commit/6a59d1824d11b6452463fcc23ad64cd142dfa203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a59d1824d11b6452463fcc23ad64cd142dfa203/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f786437bd223740d9767345731d458d10936f8d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f786437bd223740d9767345731d458d10936f8d7", "html_url": "https://github.com/rust-lang/rust/commit/f786437bd223740d9767345731d458d10936f8d7"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "b9ff39547f3cf836f2dd44e19c548d68159c660d", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -287,11 +287,9 @@ fn main() {\n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n                                          syntax::diagnostics::registry::Registry::new(&[]));\n-    let filemap = parse::string_to_filemap(&session.parse_sess,\n-                                           code,\n-                                           String::from_str(\"<n/a>\"));\n+    let filemap = session.parse_sess.codemap().new_filemap(String::from_str(\"<n/a>\"), code);\n     let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n-    let ref cm = lexer.span_diagnostic.cm;\n+    let cm = session.codemap();\n \n     // ANTLR\n     let mut token_file = File::open(&Path::new(&args.next().unwrap())).unwrap();"}, {"sha": "87634886009efd159ba79c420745ed4fa1e7c655", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -231,7 +231,7 @@ impl Session {\n         &self.parse_sess.span_diagnostic\n     }\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n-        &self.parse_sess.span_diagnostic.cm\n+        self.parse_sess.codemap()\n     }\n     // This exists to help with refactoring to eliminate impossible\n     // cases later on"}, {"sha": "e375ec3afc2545a7c5259e87ab35c6bd1b2878ec", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -25,9 +25,7 @@ use syntax::parse;\n pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new();\n-    let fm = parse::string_to_filemap(&sess,\n-                                      src.to_string(),\n-                                      \"<stdin>\".to_string());\n+    let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), src.to_string());\n \n     let mut out = Vec::new();\n     doit(&sess,\n@@ -62,7 +60,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n     loop {\n         let next = lexer.next_token();\n \n-        let snip = |sp| sess.span_diagnostic.cm.span_to_snippet(sp).unwrap();\n+        let snip = |sp| sess.codemap().span_to_snippet(sp).unwrap();\n \n         if next.tok == token::Eof { break }\n \n@@ -178,7 +176,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n \n         // as mentioned above, use the original source code instead of\n         // stringifying this token\n-        let snip = sess.span_diagnostic.cm.span_to_snippet(next.sp).unwrap();\n+        let snip = sess.codemap().span_to_snippet(next.sp).unwrap();\n         if klass == \"\" {\n             try!(write!(out, \"{}\", Escape(&snip)));\n         } else {"}, {"sha": "2d3c2e8223aede864faabbdbb36d47ede5ca9a9c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -648,7 +648,7 @@ impl<'a> ExtCtxt<'a> {\n         parse::tts_to_parser(self.parse_sess, tts.to_vec(), self.cfg())\n     }\n \n-    pub fn codemap(&self) -> &'a CodeMap { &self.parse_sess.span_diagnostic.cm }\n+    pub fn codemap(&self) -> &'a CodeMap { self.parse_sess.codemap() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n     pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }\n     pub fn call_site(&self) -> Span {"}, {"sha": "0db83c6f1b1379184b1276da4273d668d7cc805b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -58,6 +58,10 @@ impl ParseSess {\n             included_mod_stack: RefCell::new(vec![])\n         }\n     }\n+\n+    pub fn codemap(&self) -> &CodeMap {\n+        &self.span_diagnostic.cm\n+    }\n }\n \n // a bunch of utility functions of the form parse_<thing>_from_<source>\n@@ -170,7 +174,7 @@ pub fn new_parser_from_source_str<'a>(sess: &'a ParseSess,\n                                       name: String,\n                                       source: String)\n                                       -> Parser<'a> {\n-    filemap_to_parser(sess, string_to_filemap(sess, source, name), cfg)\n+    filemap_to_parser(sess, sess.codemap().new_filemap(name, source), cfg)\n }\n \n /// Create a new parser, handling errors as appropriate\n@@ -234,8 +238,7 @@ pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     };\n     match str::from_utf8(&bytes[..]).ok() {\n         Some(s) => {\n-            string_to_filemap(sess, s.to_string(),\n-                              path.to_str().unwrap().to_string())\n+            sess.codemap().new_filemap(path.to_str().unwrap().to_string(), s.to_string())\n         }\n         None => {\n             err(&format!(\"{:?} is not UTF-8 encoded\", path.display()));\n@@ -244,13 +247,6 @@ pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     }\n }\n \n-/// Given a session and a string, add the string to\n-/// the session's codemap and return the new filemap\n-pub fn string_to_filemap(sess: &ParseSess, source: String, path: String)\n-                         -> Rc<FileMap> {\n-    sess.span_diagnostic.cm.new_filemap(path, source)\n-}\n-\n /// Given a filemap, produce a sequence of token-trees\n pub fn filemap_to_tts(sess: &ParseSess, filemap: Rc<FileMap>)\n     -> Vec<ast::TokenTree> {\n@@ -1104,7 +1100,7 @@ mod tests {\n \n         let span = tts.iter().rev().next().unwrap().get_span();\n \n-        match sess.span_diagnostic.cm.span_to_snippet(span) {\n+        match sess.codemap().span_to_snippet(span) {\n             Ok(s) => assert_eq!(&s[..], \"{ body }\"),\n             Err(_) => panic!(\"could not get snippet\"),\n         }"}, {"sha": "d890708d12349f4d1fb82744123f522e14abaacf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -4835,8 +4835,7 @@ impl<'a> Parser<'a> {\n                     outer_attrs: &[ast::Attribute],\n                     id_sp: Span)\n                     -> PResult<(ast::Item_, Vec<ast::Attribute> )> {\n-        let mut prefix = PathBuf::from(&self.sess.span_diagnostic.cm\n-                                            .span_to_filename(self.span));\n+        let mut prefix = PathBuf::from(&self.sess.codemap().span_to_filename(self.span));\n         prefix.pop();\n         let mut dir_path = prefix;\n         for part in &self.mod_path_stack {"}, {"sha": "458e3f7f0bd9b048e5381f6f198545ecc6ed18ba", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -301,7 +301,7 @@ fn ignored_span(cx: &TestCtxt, sp: Span) -> Span {\n             allow_internal_unstable: true,\n         }\n     };\n-    let expn_id = cx.sess.span_diagnostic.cm.record_expansion(info);\n+    let expn_id = cx.sess.codemap().record_expansion(info);\n     let mut sp = sp;\n     sp.expn_id = expn_id;\n     return sp;"}, {"sha": "6e6e2d181b9ef195f3b2f16a85052d062557b40c", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a59d1824d11b6452463fcc23ad64cd142dfa203/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=6a59d1824d11b6452463fcc23ad64cd142dfa203", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use ast;\n-use parse::{ParseSess,string_to_filemap,filemap_to_tts};\n+use parse::{ParseSess,filemap_to_tts};\n use parse::new_parser_from_source_str;\n use parse::parser::Parser;\n use parse::token;\n@@ -19,8 +19,7 @@ use str::char_at;\n /// Map a string to tts, using a made-up filename:\n pub fn string_to_tts(source_str: String) -> Vec<ast::TokenTree> {\n     let ps = ParseSess::new();\n-    filemap_to_tts(&ps,\n-                   string_to_filemap(&ps, source_str, \"bogofile\".to_string()))\n+    filemap_to_tts(&ps, ps.codemap().new_filemap(\"bogofile\".to_string(), source_str))\n }\n \n /// Map string to parser (via tts)"}]}