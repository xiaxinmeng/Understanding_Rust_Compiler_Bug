{"sha": "94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDZlZWUzMzU3ZTI0OTEzZDEzMzFiMWZlMGJkNGU0NTI0YmRhYjY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-10-23T00:24:20Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-10-25T22:53:30Z"}, "message": "Add a KleeneOp enum for clarity", "tree": {"sha": "a4ef575aa5d0be4ebb9ae8cbd25f96a1fedc6338", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ef575aa5d0be4ebb9ae8cbd25f96a1fedc6338"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "html_url": "https://github.com/rust-lang/rust/commit/94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34dacb80cea4071233fb74b479e1f8c148a0be03", "url": "https://api.github.com/repos/rust-lang/rust/commits/34dacb80cea4071233fb74b479e1f8c148a0be03", "html_url": "https://github.com/rust-lang/rust/commit/34dacb80cea4071233fb74b479e1f8c148a0be03"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "580b93eb4c6f31f46324fd5db2b6f4e1e7a05b8b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "patch": "@@ -609,6 +609,14 @@ impl Delimiter {\n     }\n }\n \n+/// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n+/// for token sequences.\n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub enum KleeneOp {\n+    ZeroOrMore,\n+    OneOrMore,\n+}\n+\n /// When the main rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token-tree. This is a very\n /// loose structure, such that all sorts of different AST-fragments can\n@@ -633,12 +641,9 @@ pub enum TokenTree {\n \n     // These only make sense for right-hand-sides of MBE macros:\n \n-    /// A kleene-style repetition sequence with a span, a `TTForest`,\n-    /// an optional separator, and a boolean where true indicates\n-    /// zero or more (..), and false indicates one or more (+).\n+    /// A Kleene-style repetition sequence with an optional separator.\n     // FIXME(eddyb) #6308 Use Rc<[TokenTree]> after DST.\n-    TtSequence(Span, Rc<Vec<TokenTree>>, Option<::parse::token::Token>, bool),\n-\n+    TtSequence(Span, Rc<Vec<TokenTree>>, Option<::parse::token::Token>, KleeneOp),\n     /// A syntactic variable that will be filled in by macro expansion.\n     TtNonterminal(Span, Ident)\n }\n@@ -711,9 +716,9 @@ pub type Matcher = Spanned<Matcher_>;\n pub enum Matcher_ {\n     /// Match one token\n     MatchTok(::parse::token::Token),\n-    /// Match repetitions of a sequence: body, separator, zero ok?,\n+    /// Match repetitions of a sequence: body, separator, Kleene operator,\n     /// lo, hi position-in-match-array used:\n-    MatchSeq(Vec<Matcher> , Option<::parse::token::Token>, bool, uint, uint),\n+    MatchSeq(Vec<Matcher> , Option<::parse::token::Token>, KleeneOp, uint, uint),\n     /// Parse a Rust NT: name to bind, name of NT, position in match array:\n     MatchNonterminal(Ident, Ident, uint)\n }"}, {"sha": "cea8cab52654d3e3a0af7fe6f73b15224cef6b90", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "patch": "@@ -323,9 +323,9 @@ pub fn parse(sess: &ParseSess,\n             } else {\n                 match ei.elts[idx].node.clone() {\n                   /* need to descend into sequence */\n-                  MatchSeq(ref matchers, ref sep, zero_ok,\n+                  MatchSeq(ref matchers, ref sep, kleene_op,\n                            match_idx_lo, match_idx_hi) => {\n-                    if zero_ok {\n+                    if kleene_op == ast::ZeroOrMore {\n                         let mut new_ei = ei.clone();\n                         new_ei.idx += 1u;\n                         //we specifically matched zero repeats."}, {"sha": "3b51fb380b816853611a75d0e4cb6762355a5827", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "patch": "@@ -232,10 +232,11 @@ pub fn add_new_extension<'cx>(cx: &'cx mut ExtCtxt,\n         ms(MatchSeq(vec!(\n             ms(MatchNonterminal(lhs_nm, special_idents::matchers, 0u)),\n             ms(MatchTok(FAT_ARROW)),\n-            ms(MatchNonterminal(rhs_nm, special_idents::tt, 1u))), Some(SEMI), false, 0u, 2u)),\n+            ms(MatchNonterminal(rhs_nm, special_idents::tt, 1u))), Some(SEMI),\n+                                ast::OneOrMore, 0u, 2u)),\n         //to phase into semicolon-termination instead of\n         //semicolon-separation\n-        ms(MatchSeq(vec!(ms(MatchTok(SEMI))), None, true, 2u, 2u)));\n+        ms(MatchSeq(vec!(ms(MatchTok(SEMI))), None, ast::ZeroOrMore, 2u, 2u)));\n \n \n     // Parse the macro_rules! invocation (`none` is for no interpolations):"}, {"sha": "1bb519f66cd55fca25fc26930f80c3a2f727787c", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "patch": "@@ -227,9 +227,9 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 r.stack.last_mut().unwrap().idx += 1;\n                 return ret_val;\n             }\n-            TtSequence(sp, tts, sep, zerok) => {\n+            TtSequence(sp, tts, sep, kleene_op) => {\n                 // FIXME(pcwalton): Bad copy.\n-                match lockstep_iter_size(&TtSequence(sp, tts.clone(), sep.clone(), zerok), r) {\n+                match lockstep_iter_size(&TtSequence(sp, tts.clone(), sep.clone(), kleene_op), r) {\n                     LisUnconstrained => {\n                         r.sp_diag.span_fatal(\n                             sp.clone(), /* blame macro writer */\n@@ -243,7 +243,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                         }\n                     LisConstraint(len, _) => {\n                         if len == 0 {\n-                            if !zerok {\n+                            if kleene_op == ast::OneOrMore {\n                                 // FIXME #2887 blame invoker\n                                 r.sp_diag.span_fatal(sp.clone(),\n                                                      \"this must repeat at least once\");"}, {"sha": "7bf751c2d5ebf3b4a7a9c50767bdd4e4c20d618d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "patch": "@@ -2497,27 +2497,30 @@ impl<'a> Parser<'a> {\n         return e;\n     }\n \n-    /// Parse an optional separator followed by a kleene-style\n+    /// Parse an optional separator followed by a Kleene-style\n     /// repetition token (+ or *).\n-    pub fn parse_sep_and_zerok(&mut self) -> (Option<token::Token>, bool) {\n-        fn parse_zerok(parser: &mut Parser) -> Option<bool> {\n+    pub fn parse_sep_and_kleene_op(&mut self) -> (Option<token::Token>, ast::KleeneOp) {\n+        fn parse_kleene_op(parser: &mut Parser) -> Option<ast::KleeneOp> {\n             match parser.token {\n-                token::BINOP(token::STAR) | token::BINOP(token::PLUS) => {\n-                    let zerok = parser.token == token::BINOP(token::STAR);\n+                token::BINOP(token::STAR) => {\n                     parser.bump();\n-                    Some(zerok)\n+                    Some(ast::ZeroOrMore)\n+                },\n+                token::BINOP(token::PLUS) => {\n+                    parser.bump();\n+                    Some(ast::OneOrMore)\n                 },\n                 _ => None\n             }\n         };\n \n-        match parse_zerok(self) {\n-            Some(zerok) => return (None, zerok),\n+        match parse_kleene_op(self) {\n+            Some(kleene_op) => return (None, kleene_op),\n             None => {}\n         }\n \n         let separator = self.bump_and_get();\n-        match parse_zerok(self) {\n+        match parse_kleene_op(self) {\n             Some(zerok) => (Some(separator), zerok),\n             None => self.fatal(\"expected `*` or `+`\")\n         }\n@@ -2564,11 +2567,11 @@ impl<'a> Parser<'a> {\n                         seq_sep_none(),\n                         |p| p.parse_token_tree()\n                     );\n-                    let (s, z) = p.parse_sep_and_zerok();\n+                    let (sep, repeat) = p.parse_sep_and_kleene_op();\n                     let seq = match seq {\n                         Spanned { node, .. } => node,\n                     };\n-                    TtSequence(mk_sp(sp.lo, p.span.hi), Rc::new(seq), s, z)\n+                    TtSequence(mk_sp(sp.lo, p.span.hi), Rc::new(seq), sep, repeat)\n                 } else {\n                     TtNonterminal(sp, p.parse_ident())\n                 }\n@@ -2679,8 +2682,8 @@ impl<'a> Parser<'a> {\n                 if ms.len() == 0u {\n                     self.fatal(\"repetition body must be nonempty\");\n                 }\n-                let (sep, zerok) = self.parse_sep_and_zerok();\n-                MatchSeq(ms, sep, zerok, name_idx_lo, *name_idx)\n+                let (sep, kleene_op) = self.parse_sep_and_kleene_op();\n+                MatchSeq(ms, sep, kleene_op, name_idx_lo, *name_idx)\n             } else {\n                 let bound_to = self.parse_ident();\n                 self.expect(&token::COLON);"}, {"sha": "0a77343547bf857010786ec19d71b2286eca96c9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d6eee3357e24913d1331b1fe0bd4e4524bdab6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=94d6eee3357e24913d1331b1fe0bd4e4524bdab6", "patch": "@@ -1037,20 +1037,23 @@ impl<'a> State<'a> {\n                     _ => Ok(())\n                 }\n             }\n-            ast::TtSequence(_, ref tts, ref sep, zerok) => {\n+            ast::TtSequence(_, ref tts, ref separator, kleene_op) => {\n                 try!(word(&mut self.s, \"$(\"));\n                 for tt_elt in (*tts).iter() {\n                     try!(self.print_tt(tt_elt));\n                 }\n                 try!(word(&mut self.s, \")\"));\n-                match *sep {\n+                match *separator {\n                     Some(ref tk) => {\n                         try!(word(&mut self.s,\n                                   parse::token::to_string(tk).as_slice()));\n                     }\n                     None => ()\n                 }\n-                word(&mut self.s, if zerok { \"*\" } else { \"+\" })\n+                match kleene_op {\n+                    ast::ZeroOrMore => word(&mut self.s, \"*\"),\n+                    ast::OneOrMore => word(&mut self.s, \"+\"),\n+                }\n             }\n             ast::TtNonterminal(_, name) => {\n                 try!(word(&mut self.s, \"$\"));"}]}