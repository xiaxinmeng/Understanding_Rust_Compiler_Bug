{"sha": "f52a87c44e84a0089819e77ad85ea24b88d547e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MmE4N2M0NGU4NGEwMDg5ODE5ZTc3YWQ4NWVhMjRiODhkNTQ3ZTc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-13T17:32:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-07-13T17:32:45Z"}, "message": "Centralize error spaning and add an enum to make this treatment easier", "tree": {"sha": "8d2e554e6d96baa04382de2cc6a1938e0f50c6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2e554e6d96baa04382de2cc6a1938e0f50c6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52a87c44e84a0089819e77ad85ea24b88d547e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52a87c44e84a0089819e77ad85ea24b88d547e7", "html_url": "https://github.com/rust-lang/rust/commit/f52a87c44e84a0089819e77ad85ea24b88d547e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52a87c44e84a0089819e77ad85ea24b88d547e7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf0b1b399e884cff01393e817738da48bab64fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf0b1b399e884cff01393e817738da48bab64fd", "html_url": "https://github.com/rust-lang/rust/commit/cbf0b1b399e884cff01393e817738da48bab64fd"}], "stats": {"total": 139, "additions": 80, "deletions": 59}, "files": [{"sha": "1fa8e63f57e17d4d8f378e6d4e782c435ba34584", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 77, "deletions": 56, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/f52a87c44e84a0089819e77ad85ea24b88d547e7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52a87c44e84a0089819e77ad85ea24b88d547e7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f52a87c44e84a0089819e77ad85ea24b88d547e7", "patch": "@@ -116,24 +116,37 @@ mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n-fn resolve_err_417<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n-    resolve_err!(this, span, E0417, \"{}\", formatted);\n+pub enum ResolutionError<'b, 'a:'b, 'tcx:'a> {\n+    /// error: static variables cannot be referenced in a pattern\n+    StaticVariableReference(&'b Resolver<'a, 'tcx>, syntax::codemap::Span),\n+    /// error: does not name a struct\n+    DoesNotNameAStruct(&'b Resolver<'a, 'tcx>, syntax::codemap::Span),\n+    /// error: is a struct variant name, but this expression uses it like a function name\n+    StructVariantUsedAsFunction(&'a Resolver<'a, 'tcx>, syntax::codemap::Span),\n+    /// error: unresolved import\n+    UnresolvedImport(&'b Resolver<'a, 'tcx>, syntax::codemap::Span),\n+    /// error: failed to resolve\n+    FailedToResolve(&'b Resolver<'a, 'tcx>, syntax::codemap::Span),\n }\n \n-fn resolve_err_422<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n-    resolve_err!(this, span, E0422, \"{}\", formatted);\n-}\n-\n-fn resolve_err_423<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n-    resolve_err!(this, span, E0423, \"{}\", formatted);\n-}\n-\n-fn resolve_err_432<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n-    resolve_err!(this, span, E0432, \"{}\", formatted);\n-}\n-\n-fn resolve_err_433<'a, 'tcx>(this: &Resolver<'a, 'tcx>, span: syntax::codemap::Span, formatted: &str) {\n-    resolve_err!(this, span, E0433, \"{}\", formatted);\n+fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolution_error: &ResolutionError<'b, 'a, 'tcx>, formatted: &str) {\n+    match resolution_error {\n+        &ResolutionError::StaticVariableReference(resolver, span) => {\n+            resolve_err!(resolver, span, E0417, \"{}\", formatted);\n+        },\n+        &ResolutionError::DoesNotNameAStruct(resolver, span) => {\n+            resolve_err!(resolver, span, E0422, \"{}\", formatted);\n+        },\n+        &ResolutionError::StructVariantUsedAsFunction(resolver, span) => {\n+            resolve_err!(resolver, span, E0423, \"{}\", formatted);\n+        },\n+        &ResolutionError::UnresolvedImport(resolver, span) => {\n+            resolve_err!(resolver, span, E0432, \"{}\", formatted);\n+        },\n+        &ResolutionError::FailedToResolve(resolver, span) => {\n+            resolve_err!(resolver, span, E0433, \"{}\", formatted);\n+        },\n+    }\n }\n \n #[derive(Copy, Clone)]\n@@ -1330,7 +1343,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                               PathSearch,\n                                               true) {\n                 Failed(Some((span, msg))) => {\n-                    resolve_err_433(self, span, &*format!(\"failed to resolve. {}\", msg));\n+                    resolve_error(&ResolutionError::FailedToResolve(self, span),\n+                                  &*format!(\"failed to resolve. {}\",\n+                                        msg)\n+                                 );\n                 },\n                 Failed(None) => (), // Continue up the search chain.\n                 Indeterminate => {\n@@ -1588,12 +1604,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          .span_to_snippet((*imports)[index].span)\n                          .unwrap();\n             if sn.contains(\"::\") {\n-                resolve_err_432(self, (*imports)[index].span, \"unresolved import\");\n+                resolve_error(&ResolutionError::UnresolvedImport(self, (*imports)[index].span),\n+                              \"unresolved import\");\n             } else {\n-                resolve_err_432(self, (*imports)[index].span,\n-                    &*format!(\"unresolved import (maybe you meant `{}::*`?)\",\n-                          sn)\n-                );\n+                resolve_error(&ResolutionError::UnresolvedImport(self, (*imports)[index].span),\n+                              &*format!(\"unresolved import (maybe you meant `{}::*`?)\",\n+                                    sn)\n+                             );\n             }\n         }\n \n@@ -2549,10 +2566,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 self.record_def(pattern.id, path_res);\n                             }\n                             DefStatic(..) => {\n-                                resolve_err_417(self, path.span,\n-                                             \"static variables cannot be \\\n-                                              referenced in a pattern, \\\n-                                              use a `const` instead\");\n+                                resolve_error(&ResolutionError::StaticVariableReference(&self, path.span),\n+                                              \"static variables cannot be \\\n+                                               referenced in a pattern, \\\n+                                               use a `const` instead\");\n                             }\n                             _ => {\n                                 // If anything ends up here entirely resolved,\n@@ -2630,7 +2647,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         result => {\n                             debug!(\"(resolving pattern) didn't find struct \\\n                                     def: {:?}\", result);\n-                            resolve_err_422(self, path.span,\n+                            resolve_error(&ResolutionError::DoesNotNameAStruct(self, path.span),\n                                          &*format!(\"`{}` does not name a structure\",\n                                              path_names_to_string(path, 0)));\n                         }\n@@ -2678,10 +2695,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 return FoundConst(def, LastMod(AllPublic));\n                             }\n                             DefStatic(..) => {\n-                                resolve_err_417(self, span,\n-                                             \"static variables cannot be \\\n-                                              referenced in a pattern, \\\n-                                              use a `const` instead\");\n+                                resolve_error(&ResolutionError::StaticVariableReference(self, span),\n+                                              \"static variables cannot be \\\n+                                               referenced in a pattern, \\\n+                                               use a `const` instead\");\n                                 return BareIdentifierPatternUnresolved;\n                             }\n                             _ => {\n@@ -2698,9 +2715,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Failed(err) => {\n                 match err {\n                     Some((span, msg)) => {\n-                        resolve_err_433(self, span,\n-                                     &*format!(\"failed to resolve: {}\",\n-                                         msg));\n+                        resolve_error(&ResolutionError::FailedToResolve(self, span),\n+                                      &*format!(\"failed to resolve. {}\",\n+                                            msg)\n+                                     );\n                     }\n                     None => ()\n                 }\n@@ -2929,9 +2947,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 };\n \n-                resolve_err_433(self, span,\n-                             &*format!(\"failed to resolve: {}\",\n-                                 msg));\n+                resolve_error(&ResolutionError::FailedToResolve(self, span),\n+                              &*format!(\"failed to resolve. {}\",\n+                                    msg)\n+                             );\n                 return None;\n             }\n             Indeterminate => panic!(\"indeterminate unexpected\"),\n@@ -2990,11 +3009,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 };\n \n-                /*self.resolve_error(span, &format!(\"failed to resolve. {}\",\n-                                                 msg));*/\n-                resolve_err_433(self, span,\n-                             &*format!(\"failed to resolve: {}\",\n-                                 msg));\n+                resolve_error(&ResolutionError::FailedToResolve(self, span),\n+                              &*format!(\"failed to resolve. {}\",\n+                                    msg)\n+                             );\n                 return None;\n             }\n \n@@ -3090,9 +3108,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                          failed to resolve {}\", name);\n \n                 if let Some((span, msg)) = err {\n-                    resolve_err_433(self, span,\n-                                 &*format!(\"failed to resolve: {}\",\n-                                     msg))\n+                    resolve_error(&ResolutionError::FailedToResolve(self, span),\n+                                  &*format!(\"failed to resolve. {}\",\n+                                        msg)\n+                                 )\n                 }\n \n                 return None;\n@@ -3294,11 +3313,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     // Check if struct variant\n                     if let DefVariant(_, _, true) = path_res.base_def {\n                         let path_name = path_names_to_string(path, 0);\n-                        resolve_err_423(self, expr.span,\n-                                     &*format!(\"`{}` is a struct variant name, but \\\n-                                          this expression \\\n-                                          uses it like a function name\",\n-                                         path_name));\n+\n+                        resolve_error(&ResolutionError::StructVariantUsedAsFunction(self, expr.span),\n+                                      &*format!(\"`{}` is a struct variant name, but \\\n+                                           this expression \\\n+                                           uses it like a function name\",\n+                                          path_name));\n \n                         let msg = format!(\"did you mean to write: \\\n                                            `{} {{ /* fields */ }}`?\",\n@@ -3335,11 +3355,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     match type_res.map(|r| r.base_def) {\n                         Some(DefTy(struct_id, _))\n                             if self.structs.contains_key(&struct_id) => {\n-                                resolve_err_423(self, expr.span,\n-                                             &*format!(\"{}` is a structure name, but \\\n-                                                   this expression \\\n-                                                   uses it like a function name\",\n-                                                  path_name));\n+                                resolve_error(&ResolutionError::StructVariantUsedAsFunction(self, expr.span),\n+                                              &*format!(\"`{}` is a struct variant name, but \\\n+                                                  this expression \\\n+                                                  uses it like a function name\",\n+                                                 path_name));\n \n                                 let msg = format!(\"did you mean to write: \\\n                                                      `{} {{ /* fields */ }}`?\",\n@@ -3414,7 +3434,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     Some(definition) => self.record_def(expr.id, definition),\n                     None => {\n                         debug!(\"(resolving expression) didn't find struct def\",);\n-                        resolve_err_422(self, path.span,\n+\n+                        resolve_error(&ResolutionError::DoesNotNameAStruct(self, path.span),\n                                      &*format!(\"`{}` does not name a structure\",\n                                          path_names_to_string(path, 0)));\n                     }"}, {"sha": "196de63bfd979584c6d1f1756e9418e90111444f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52a87c44e84a0089819e77ad85ea24b88d547e7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52a87c44e84a0089819e77ad85ea24b88d547e7/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=f52a87c44e84a0089819e77ad85ea24b88d547e7", "patch": "@@ -272,13 +272,13 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new())\n                     };\n-                    ::resolve_err_432(self.resolver, span,\n-                                      &*format!(\"unresolved import `{}`{}\",\n+                    ::resolve_error(&::ResolutionError::UnresolvedImport(self.resolver, span),\n+                                    &*format!(\"unresolved import `{}`{}\",\n                                             import_path_to_string(\n                                                 &import_directive.module_path,\n                                                 import_directive.subclass),\n                                             help)\n-                                     );\n+                                   );\n                 }\n                 ResolveResult::Indeterminate => break, // Bail out. We'll come around next time.\n                 ResolveResult::Success(()) => () // Good. Continue."}]}