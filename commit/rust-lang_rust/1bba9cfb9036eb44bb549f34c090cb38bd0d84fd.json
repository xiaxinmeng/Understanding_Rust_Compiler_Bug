{"sha": "1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYmE5Y2ZiOTAzNmViNDRiYjU0OWYzNGMwOTBjYjM4YmQwZDg0ZmQ=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2020-02-06T11:32:42Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2020-02-11T08:40:58Z"}, "message": "rustbuild: include channel in sanitizers installed name\n\nAllows parallel install of different rust channels\n\nSigned-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>", "tree": {"sha": "ad55fece7f35195367077a857afdbd49b4ffc563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad55fece7f35195367077a857afdbd49b4ffc563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "html_url": "https://github.com/rust-lang/rust/commit/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4242d9052a42cdf329c3a2430d02a3b3d415cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4242d9052a42cdf329c3a2430d02a3b3d415cb", "html_url": "https://github.com/rust-lang/rust/commit/dc4242d9052a42cdf329c3a2430d02a3b3d415cb"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "5790f236cc8fd947f2cb6011fe4da88770cee265", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "patch": "@@ -571,7 +571,7 @@ impl Step for Sanitizers {\n         }\n \n         let out_dir = builder.native_dir(self.target).join(\"sanitizers\");\n-        let runtimes = supported_sanitizers(&out_dir, self.target);\n+        let runtimes = supported_sanitizers(&out_dir, self.target, &builder.config.channel);\n         if runtimes.is_empty() {\n             return runtimes;\n         }\n@@ -635,7 +635,11 @@ pub struct SanitizerRuntime {\n }\n \n /// Returns sanitizers available on a given target.\n-fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<SanitizerRuntime> {\n+fn supported_sanitizers(\n+    out_dir: &Path,\n+    target: Interned<String>,\n+    channel: &str,\n+) -> Vec<SanitizerRuntime> {\n     let mut result = Vec::new();\n     match &*target {\n         \"x86_64-apple-darwin\" => {\n@@ -644,7 +648,7 @@ fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<Sanitiz\n                     cmake_target: format!(\"clang_rt.{}_osx_dynamic\", s),\n                     path: out_dir\n                         .join(&format!(\"build/lib/darwin/libclang_rt.{}_osx_dynamic.dylib\", s)),\n-                    name: format!(\"librustc_rt.{}.dylib\", s),\n+                    name: format!(\"librustc-{}_rt.{}.dylib\", channel, s),\n                 });\n             }\n         }\n@@ -653,7 +657,7 @@ fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<Sanitiz\n                 result.push(SanitizerRuntime {\n                     cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n                     path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc_rt.{}.a\", s),\n+                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n                 });\n             }\n         }\n@@ -662,7 +666,7 @@ fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<Sanitiz\n                 result.push(SanitizerRuntime {\n                     cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n                     path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc_rt.{}.a\", s),\n+                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n                 });\n             }\n         }\n@@ -671,7 +675,7 @@ fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<Sanitiz\n                 result.push(SanitizerRuntime {\n                     cmake_target: format!(\"clang_rt.{}-aarch64\", s),\n                     path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-aarch64.a\", s)),\n-                    name: format!(\"librustc_rt.{}.a\", s),\n+                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n                 });\n             }\n         }"}, {"sha": "aaa4448fc19337eec4f2fcdb1fa712baecba68c2", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "patch": "@@ -765,20 +765,23 @@ fn link_sanitizer_runtime(sess: &Session, crate_type: config::CrateType, linker:\n     let default_sysroot = filesearch::get_or_default_sysroot();\n     let default_tlib =\n         filesearch::make_target_lib_path(&default_sysroot, sess.opts.target_triple.triple());\n+    let channel = option_env!(\"CFG_RELEASE_CHANNEL\")\n+        .map(|channel| format!(\"-{}\", channel))\n+        .unwrap_or_default();\n \n     match sess.opts.target_triple.triple() {\n         \"x86_64-apple-darwin\" => {\n             // On Apple platforms, the sanitizer is always built as a dylib, and\n             // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n             // rpath to the library as well (the rpath should be absolute, see\n             // PR #41352 for details).\n-            let libname = format!(\"rustc_rt.{}\", name);\n+            let libname = format!(\"rustc{}_rt.{}\", channel, name);\n             let rpath = default_tlib.to_str().expect(\"non-utf8 component in path\");\n             linker.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n             linker.link_dylib(Symbol::intern(&libname));\n         }\n         \"x86_64-unknown-linux-gnu\" | \"x86_64-fuchsia\" | \"aarch64-fuchsia\" => {\n-            let filename = format!(\"librustc_rt.{}.a\", name);\n+            let filename = format!(\"librustc{}_rt.{}.a\", channel, name);\n             let path = default_tlib.join(&filename);\n             linker.link_whole_rlib(&path);\n         }"}, {"sha": "ea2af6e192e7c1d0c927393717dcab497c453240", "filename": "src/librustc_codegen_ssa/build.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/src%2Flibrustc_codegen_ssa%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bba9cfb9036eb44bb549f34c090cb38bd0d84fd/src%2Flibrustc_codegen_ssa%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbuild.rs?ref=1bba9cfb9036eb44bb549f34c090cb38bd0d84fd", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+    println!(\"cargo:rerun-if-env-changed=CFG_RELEASE_CHANNEL\");\n+}"}]}