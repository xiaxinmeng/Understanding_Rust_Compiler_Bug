{"sha": "53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZTNiZWUwY2ZjZDc1NDFiNWVlODgyYWI0YjQ3YzlkZGU5NzgwYjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-25T09:16:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-25T09:41:34Z"}, "message": "insert space after `->`", "tree": {"sha": "649a191b49dc715f865b53db9073ea34177c4c17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649a191b49dc715f865b53db9073ea34177c4c17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "html_url": "https://github.com/rust-lang/rust/commit/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea948e9fbb519ab5f4a21e0cce0dc5f0f365a716", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea948e9fbb519ab5f4a21e0cce0dc5f0f365a716", "html_url": "https://github.com/rust-lang/rust/commit/ea948e9fbb519ab5f4a21e0cce0dc5f0f365a716"}], "stats": {"total": 231, "additions": 119, "deletions": 112}, "files": [{"sha": "26a3111fd80dbfba97092dd11e89cac466c41d0a", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 117, "deletions": 111, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "patch": "@@ -81,7 +81,7 @@ fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n     Some(text[pos..].into())\n }\n \n-pub(crate) const TRIGGER_CHARS: &str = \".=\";\n+pub(crate) const TRIGGER_CHARS: &str = \".=>\";\n \n pub(crate) fn on_char_typed(\n     db: &RootDatabase,\n@@ -100,10 +100,12 @@ fn on_char_typed_inner(\n     offset: TextUnit,\n     char_typed: char,\n ) -> Option<SingleFileChange> {\n+    assert!(TRIGGER_CHARS.contains(char_typed));\n     match char_typed {\n         '.' => on_dot_typed(file, offset),\n         '=' => on_eq_typed(file, offset),\n-        _ => None,\n+        '>' => on_arrow_typed(file, offset),\n+        _ => unreachable!(),\n     }\n }\n \n@@ -169,6 +171,25 @@ fn on_dot_typed(file: &SourceFile, offset: TextUnit) -> Option<SingleFileChange>\n     })\n }\n \n+/// Adds a space after an arrow when `fn foo() { ... }` is turned into `fn foo() -> { ... }`\n+fn on_arrow_typed(file: &SourceFile, offset: TextUnit) -> Option<SingleFileChange> {\n+    let file_text = file.syntax().text();\n+    assert_eq!(file_text.char_at(offset), Some('>'));\n+    let after_arrow = offset + TextUnit::of_char('>');\n+    if file_text.char_at(after_arrow) != Some('{') {\n+        return None;\n+    }\n+    if find_node_at_offset::<ast::RetType>(file.syntax(), offset).is_none() {\n+        return None;\n+    }\n+\n+    Some(SingleFileChange {\n+        label: \"add space after return type\".to_string(),\n+        edit: TextEdit::insert(after_arrow, \" \".to_string()),\n+        cursor_position: Some(after_arrow),\n+    })\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test_utils::{add_cursor, assert_eq_text, extract_offset};\n@@ -177,25 +198,84 @@ mod tests {\n \n     use super::*;\n \n-    fn type_char(char_typed: char, before: &str, after: &str) {\n+    #[test]\n+    fn test_on_enter() {\n+        fn apply_on_enter(before: &str) -> Option<String> {\n+            let (offset, before) = extract_offset(before);\n+            let (analysis, file_id) = single_file(&before);\n+            let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n+\n+            assert_eq!(result.source_file_edits.len(), 1);\n+            let actual = result.source_file_edits[0].edit.apply(&before);\n+            let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n+            Some(actual)\n+        }\n+\n+        fn do_check(before: &str, after: &str) {\n+            let actual = apply_on_enter(before).unwrap();\n+            assert_eq_text!(after, &actual);\n+        }\n+\n+        fn do_check_noop(text: &str) {\n+            assert!(apply_on_enter(text).is_none())\n+        }\n+\n+        do_check(\n+            r\"\n+/// Some docs<|>\n+fn foo() {\n+}\n+\",\n+            r\"\n+/// Some docs\n+/// <|>\n+fn foo() {\n+}\n+\",\n+        );\n+        do_check(\n+            r\"\n+impl S {\n+    /// Some<|> docs.\n+    fn foo() {}\n+}\n+\",\n+            r\"\n+impl S {\n+    /// Some\n+    /// <|> docs.\n+    fn foo() {}\n+}\n+\",\n+        );\n+        do_check_noop(r\"<|>//! docz\");\n+    }\n+\n+    fn do_type_char(char_typed: char, before: &str) -> Option<(String, SingleFileChange)> {\n         let (offset, before) = extract_offset(before);\n         let edit = TextEdit::insert(offset, char_typed.to_string());\n         let before = edit.apply(&before);\n         let parse = SourceFile::parse(&before);\n-        if let Some(result) = on_char_typed_inner(&parse.tree(), offset, char_typed) {\n-            let actual = result.edit.apply(&before);\n-            assert_eq_text!(after, &actual);\n-        } else {\n-            assert_eq_text!(&before, after)\n-        };\n+        on_char_typed_inner(&parse.tree(), offset, char_typed)\n+            .map(|it| (it.edit.apply(&before), it))\n     }\n \n-    fn type_eq(before: &str, after: &str) {\n-        type_char('=', before, after);\n+    fn type_char(char_typed: char, before: &str, after: &str) {\n+        let (actual, file_change) = do_type_char(char_typed, before)\n+            .expect(&format!(\"typing `{}` did nothing\", char_typed));\n+\n+        if after.contains(\"<|>\") {\n+            let (offset, after) = extract_offset(after);\n+            assert_eq_text!(&after, &actual);\n+            assert_eq!(file_change.cursor_position, Some(offset))\n+        } else {\n+            assert_eq_text!(after, &actual);\n+        }\n     }\n \n-    fn type_dot(before: &str, after: &str) {\n-        type_char('.', before, after);\n+    fn type_char_noop(char_typed: char, before: &str) {\n+        let file_change = do_type_char(char_typed, before);\n+        assert!(file_change.is_none())\n     }\n \n     #[test]\n@@ -209,7 +289,8 @@ mod tests {\n         //     let foo =;\n         // }\n         // \");\n-        type_eq(\n+        type_char(\n+            '=',\n             r\"\n fn foo() {\n     let foo <|> 1 + 1\n@@ -236,7 +317,8 @@ fn foo() {\n \n     #[test]\n     fn indents_new_chain_call() {\n-        type_dot(\n+        type_char(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n@@ -250,25 +332,21 @@ fn foo() {\n             }\n             \",\n         );\n-        type_dot(\n+        type_char_noop(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n                     <|>\n             }\n             \",\n-            r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n-                    .\n-            }\n-            \",\n         )\n     }\n \n     #[test]\n     fn indents_new_chain_call_with_semi() {\n-        type_dot(\n+        type_char(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n@@ -282,25 +360,21 @@ fn foo() {\n             }\n             \",\n         );\n-        type_dot(\n+        type_char_noop(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n                     <|>;\n             }\n             \",\n-            r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n-                    .;\n-            }\n-            \",\n         )\n     }\n \n     #[test]\n     fn indents_continued_chain_call() {\n-        type_dot(\n+        type_char(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n@@ -316,27 +390,22 @@ fn foo() {\n             }\n             \",\n         );\n-        type_dot(\n+        type_char_noop(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 self.child_impl(db, name)\n                     .first()\n                     <|>\n             }\n             \",\n-            r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                self.child_impl(db, name)\n-                    .first()\n-                    .\n-            }\n-            \",\n         );\n     }\n \n     #[test]\n     fn indents_middle_of_chain_call() {\n-        type_dot(\n+        type_char(\n+            '.',\n             r\"\n             fn source_impl() {\n                 let var = enum_defvariant_list().unwrap()\n@@ -354,7 +423,8 @@ fn foo() {\n             }\n             \",\n         );\n-        type_dot(\n+        type_char_noop(\n+            '.',\n             r\"\n             fn source_impl() {\n                 let var = enum_defvariant_list().unwrap()\n@@ -363,95 +433,31 @@ fn foo() {\n                     .unwrap();\n             }\n             \",\n-            r\"\n-            fn source_impl() {\n-                let var = enum_defvariant_list().unwrap()\n-                    .\n-                    .nth(92)\n-                    .unwrap();\n-            }\n-            \",\n         );\n     }\n \n     #[test]\n     fn dont_indent_freestanding_dot() {\n-        type_dot(\n+        type_char_noop(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n                 <|>\n             }\n             \",\n-            r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-                .\n-            }\n-            \",\n         );\n-        type_dot(\n+        type_char_noop(\n+            '.',\n             r\"\n             pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n             <|>\n             }\n             \",\n-            r\"\n-            pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n-            .\n-            }\n-            \",\n         );\n     }\n \n     #[test]\n-    fn test_on_enter() {\n-        fn apply_on_enter(before: &str) -> Option<String> {\n-            let (offset, before) = extract_offset(before);\n-            let (analysis, file_id) = single_file(&before);\n-            let result = analysis.on_enter(FilePosition { offset, file_id }).unwrap()?;\n-\n-            assert_eq!(result.source_file_edits.len(), 1);\n-            let actual = result.source_file_edits[0].edit.apply(&before);\n-            let actual = add_cursor(&actual, result.cursor_position.unwrap().offset);\n-            Some(actual)\n-        }\n-\n-        fn do_check(before: &str, after: &str) {\n-            let actual = apply_on_enter(before).unwrap();\n-            assert_eq_text!(after, &actual);\n-        }\n-\n-        fn do_check_noop(text: &str) {\n-            assert!(apply_on_enter(text).is_none())\n-        }\n-\n-        do_check(\n-            r\"\n-/// Some docs<|>\n-fn foo() {\n-}\n-\",\n-            r\"\n-/// Some docs\n-/// <|>\n-fn foo() {\n-}\n-\",\n-        );\n-        do_check(\n-            r\"\n-impl S {\n-    /// Some<|> docs.\n-    fn foo() {}\n-}\n-\",\n-            r\"\n-impl S {\n-    /// Some\n-    /// <|> docs.\n-    fn foo() {}\n-}\n-\",\n-        );\n-        do_check_noop(r\"<|>//! docz\");\n+    fn adds_space_after_return_type() {\n+        type_char('>', \"fn foo() -<|>{ 92 }\", \"fn foo() -><|> { 92 }\")\n     }\n }"}, {"sha": "eea0965edbea6d77ea1eaf4828e685b490c2a6d2", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "patch": "@@ -38,7 +38,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         document_range_formatting_provider: None,\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n             first_trigger_character: \"=\".to_string(),\n-            more_trigger_character: Some(vec![\".\".to_string()]),\n+            more_trigger_character: Some(vec![\".\".to_string(), \">\".to_string()]),\n         }),\n         selection_range_provider: Some(GenericCapability::default()),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),"}, {"sha": "6f1e59b4b26714e4b71bda5923e00476d6cd7dd4", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=53e3bee0cfcd7541b5ee882ab4b47c9dde9780b8", "patch": "@@ -132,6 +132,7 @@ pub fn handle_on_enter(\n     }\n }\n \n+// Don't forget to add new trigger characters to `ServerCapabilities` in `caps.rs`.\n pub fn handle_on_type_formatting(\n     world: WorldSnapshot,\n     params: req::DocumentOnTypeFormattingParams,"}]}