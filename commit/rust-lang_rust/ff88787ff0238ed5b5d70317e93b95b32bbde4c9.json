{"sha": "ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "node_id": "C_kwDOAAsO6NoAKGZmODg3ODdmZjAyMzhlZDViNWQ3MDMxN2U5M2I5NWIzMmJiZGU0Yzk", "commit": {"author": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-03-14T22:01:14Z"}, "committer": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-03-28T01:01:23Z"}, "message": "check for write macro and write_fmt with err msg\nadded ui test\nblessed stderrs\nfixed typo\nreblessed", "tree": {"sha": "272aaca0b129f04af3b5f2f440f85134b1fadbcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272aaca0b129f04af3b5f2f440f85134b1fadbcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "html_url": "https://github.com/rust-lang/rust/commit/ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/comments", "author": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2036fdd24f77d607dcfaa24c48fbe85d3f785823", "url": "https://api.github.com/repos/rust-lang/rust/commits/2036fdd24f77d607dcfaa24c48fbe85d3f785823", "html_url": "https://github.com/rust-lang/rust/commit/2036fdd24f77d607dcfaa24c48fbe85d3f785823"}], "stats": {"total": 138, "additions": 125, "deletions": 13}, "files": [{"sha": "95d1a7df69867ef0b14d93dfe83e22ee5167b4de", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "patch": "@@ -245,6 +245,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n+    fn suggest_missing_writer(\n+        &self,\n+        rcvr_ty: Ty<'tcx>,\n+        args: (&'tcx hir::Expr<'tcx>, &'tcx [hir::Expr<'tcx>]),\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let (ty_str, _ty_file) = self.tcx.short_ty_string(rcvr_ty);\n+        let mut err =\n+            struct_span_err!(self.tcx.sess, args.0.span, E0599, \"cannot write into `{}`\", ty_str);\n+        err.span_note(\n+            args.0.span,\n+            \"must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\",\n+        );\n+        if let ExprKind::Lit(_) = args.0.kind {\n+            err.span_help(\n+                args.0.span.shrink_to_lo(),\n+                \"a writer is needed before this format string\",\n+            );\n+        };\n+\n+        err\n+    }\n+\n     pub fn report_no_match_method_error(\n         &self,\n         mut span: Span,\n@@ -323,16 +345,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let mut err = struct_span_err!(\n-            tcx.sess,\n-            span,\n-            E0599,\n-            \"no {} named `{}` found for {} `{}` in the current scope\",\n-            item_kind,\n-            item_name,\n-            rcvr_ty.prefix_string(self.tcx),\n-            ty_str_reported,\n-        );\n+        let is_write = sugg_span.ctxt().outer_expn_data().macro_def_id.map_or(false, |def_id| {\n+            tcx.is_diagnostic_item(sym::write_macro, def_id)\n+                || tcx.is_diagnostic_item(sym::writeln_macro, def_id)\n+        }) && item_name.name == Symbol::intern(\"write_fmt\");\n+        let mut err = if is_write\n+            && let Some(args) = args\n+        {\n+            self.suggest_missing_writer(rcvr_ty, args)\n+        } else {\n+            struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0599,\n+                \"no {} named `{}` found for {} `{}` in the current scope\",\n+                item_kind,\n+                item_name,\n+                rcvr_ty.prefix_string(self.tcx),\n+                ty_str_reported,\n+            )\n+        };\n         if tcx.sess.source_map().is_multiline(sugg_span) {\n             err.span_label(sugg_span.with_hi(span.lo()), \"\");\n         }"}, {"sha": "7df965c3684e2709ba54d90993435c26c0049061", "filename": "tests/ui/macros/missing-writer.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/tests%2Fui%2Fmacros%2Fmissing-writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/tests%2Fui%2Fmacros%2Fmissing-writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmissing-writer.rs?ref=ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "patch": "@@ -0,0 +1,17 @@\n+// Check error for missing writer in writeln! and write! macro\n+fn main() {\n+    let x = 1;\n+    let y = 2;\n+    write!(\"{}_{}\", x, y);\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP you might be missing a string literal to format with\n+    //~| ERROR cannot write into `&'static str`\n+    //~| NOTE must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+    //~| HELP a writer is needed before this format string\n+    writeln!(\"{}_{}\", x, y);\n+    //~^ ERROR format argument must be a string literal\n+    //~| HELP you might be missing a string literal to format with\n+    //~| ERROR cannot write into `&'static str`\n+    //~| NOTE must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+    //~| HELP a writer is needed before this format string\n+}"}, {"sha": "86dfe7d65ea6255bf11dba625675ae6057aac561", "filename": "tests/ui/macros/missing-writer.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/tests%2Fui%2Fmacros%2Fmissing-writer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/tests%2Fui%2Fmacros%2Fmissing-writer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmissing-writer.stderr?ref=ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "patch": "@@ -0,0 +1,59 @@\n+error: format argument must be a string literal\n+  --> $DIR/missing-writer.rs:5:21\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |                     ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     write!(\"{}_{}\", \"{} {}\", x, y);\n+   |                     ++++++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/missing-writer.rs:11:23\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |                       ^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     writeln!(\"{}_{}\", \"{} {}\", x, y);\n+   |                       ++++++++\n+\n+error[E0599]: cannot write into `&'static str`\n+  --> $DIR/missing-writer.rs:5:12\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |     -------^^^^^^^------- method not found in `&str`\n+   |\n+note: must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+  --> $DIR/missing-writer.rs:5:12\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |            ^^^^^^^\n+help: a writer is needed before this format string\n+  --> $DIR/missing-writer.rs:5:12\n+   |\n+LL |     write!(\"{}_{}\", x, y);\n+   |            ^\n+\n+error[E0599]: cannot write into `&'static str`\n+  --> $DIR/missing-writer.rs:11:14\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |     ---------^^^^^^^------- method not found in `&str`\n+   |\n+note: must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+  --> $DIR/missing-writer.rs:11:14\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |              ^^^^^^^\n+help: a writer is needed before this format string\n+  --> $DIR/missing-writer.rs:11:14\n+   |\n+LL |     writeln!(\"{}_{}\", x, y);\n+   |              ^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "94710f4503f56d1dda7eb045047aeeac53780054", "filename": "tests/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/tests%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff88787ff0238ed5b5d70317e93b95b32bbde4c9/tests%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=ff88787ff0238ed5b5d70317e93b95b32bbde4c9", "patch": "@@ -21,18 +21,22 @@ note: required by a bound in `BufWriter`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n \n error[E0599]: the method `write_fmt` exists for struct `BufWriter<&dyn Write>`, but its trait bounds were not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:5\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `BufWriter<&dyn Write>` due to unsatisfied trait bounds\n+   |     ---------^^---------------- method cannot be called on `BufWriter<&dyn Write>` due to unsatisfied trait bounds\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n    = note: doesn't satisfy `BufWriter<&dyn std::io::Write>: std::io::Write`\n    |\n+note: must implement `io::Write`, `fmt::Write`, or have a `write_fmt` method\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n+   |\n+LL |     writeln!(fp, \"hello world\").unwrap();\n+   |              ^^\n    = note: the following trait bounds were not satisfied:\n            `&dyn std::io::Write: std::io::Write`\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n-   = note: this error originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}]}