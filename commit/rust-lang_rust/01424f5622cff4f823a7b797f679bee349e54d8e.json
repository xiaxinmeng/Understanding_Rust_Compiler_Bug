{"sha": "01424f5622cff4f823a7b797f679bee349e54d8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDI0ZjU2MjJjZmY0ZjgyM2E3Yjc5N2Y2NzliZWUzNDllNTRkOGU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-28T17:43:55Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-08-31T16:22:36Z"}, "message": "Support unions here and there", "tree": {"sha": "68c4cd2b12c2aae611829c64f0cabf89ca791743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68c4cd2b12c2aae611829c64f0cabf89ca791743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01424f5622cff4f823a7b797f679bee349e54d8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJXxwRMAAoJEF5CfHlMukXoKf8QAJuM86FOxyK0lL9Al9OmFsOp\nPFqDz04p9+4czkMA+AIbYP3ha8AvkU9Fm06MaeTIldIZzAoQ6w6Ul/2RcRX2emUV\ngccRP38en8GjE+vxO7FPtoUAdMutly8CEkbO+OHyfbItAZfthhxC9cIK41E+5JlJ\nmiFyBLySmIoo//jm0rqlcYmcdwRWL68gXZl9S+KhVwqWBwp9fbh1y5Jktnehn2eB\nLERJzvIVxuuwHV5EJ6zRb0voyvUvZgG8LwFaSVxlMw9ne7R1T/PZejObGEBeiFkU\nErwGdmb6Kct0vIAYfnWSvWOkeF3mop5HwoNtEGNum8fBuSJ8chVhOdcrKywHBwVE\npLAWUgmSO1q7VS1fIsQ6lrU9KM22s7HM478kQS6YtXKxtwBHicwhklvhhUjvQB7/\nt8v8GiPGLMxIT9Y/30JlQjqyvjy3HDdZ2iVHct5mX6Bq9hoxYMAiThb+y7YR+RnQ\ny0o0uqwifWSE7NLBD2d27+fcnwj3845raOkdyvtSFKYKE7PORXJ9JqbAJEDlIJU5\nXDAeTO9AE8HE8N2nfDYrFF0WJj9/6gVFDMIqqqi6OYLoch6gxjpXHaQSniDLjD2U\nVTR2gVbXID2g6uHCA3IfTtsEONO0KxreaXCeph01QoiOklSo6s/33nBwH6f28sE3\nvjIkzEYLeT7uinFay1tV\n=Dolm\n-----END PGP SIGNATURE-----", "payload": "tree 68c4cd2b12c2aae611829c64f0cabf89ca791743\nparent ee3f3bf2603bc0161db779c0ddf528af2f7ed14c\nauthor mcarton <cartonmartin+git@gmail.com> 1472406235 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1472660556 +0200\n\nSupport unions here and there\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01424f5622cff4f823a7b797f679bee349e54d8e", "html_url": "https://github.com/rust-lang/rust/commit/01424f5622cff4f823a7b797f679bee349e54d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01424f5622cff4f823a7b797f679bee349e54d8e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee3f3bf2603bc0161db779c0ddf528af2f7ed14c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3f3bf2603bc0161db779c0ddf528af2f7ed14c", "html_url": "https://github.com/rust-lang/rust/commit/ee3f3bf2603bc0161db779c0ddf528af2f7ed14c"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "17d17a445afd53e09b4751e941a4678f054fe69c", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01424f5622cff4f823a7b797f679bee349e54d8e/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01424f5622cff4f823a7b797f679bee349e54d8e/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=01424f5622cff4f823a7b797f679bee349e54d8e", "patch": "@@ -140,8 +140,10 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n             return; // ty is not Copy\n         }\n \n-        // Some types are not Clone by default but could be cloned `by hand` if necessary\n         match ty.sty {\n+            TypeVariants::TyUnion(..) => return,\n+\n+            // Some types are not Clone by default but could be cloned \u201cby hand\u201d if necessary\n             TypeVariants::TyEnum(def, substs) |\n             TypeVariants::TyStruct(def, substs) => {\n                 for variant in &def.variants {"}, {"sha": "d43e31c6a3db9a8903542ac62523da8502191c96", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01424f5622cff4f823a7b797f679bee349e54d8e/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01424f5622cff4f823a7b797f679bee349e54d8e/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=01424f5622cff4f823a7b797f679bee349e54d8e", "patch": "@@ -209,7 +209,8 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n         }\n         ty::TyProjection(_) => ty.ty_to_def_id().map_or(false, |id| has_is_empty_impl(cx, &id)),\n         ty::TyEnum(id, _) |\n-        ty::TyStruct(id, _) => has_is_empty_impl(cx, &id.did),\n+        ty::TyStruct(id, _) |\n+        ty::TyUnion(id, _) => has_is_empty_impl(cx, &id.did),\n         ty::TyArray(..) | ty::TyStr => true,\n         _ => false,\n     }"}, {"sha": "cf4467f30a59271abe40ea019cf4efdf1890db6f", "filename": "tests/compile-fail/derive.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01424f5622cff4f823a7b797f679bee349e54d8e/tests%2Fcompile-fail%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01424f5622cff4f823a7b797f679bee349e54d8e/tests%2Fcompile-fail%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderive.rs?ref=01424f5622cff4f823a7b797f679bee349e54d8e", "patch": "@@ -1,6 +1,8 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![feature(untagged_unions)]\n+\n #![deny(warnings)]\n #![allow(dead_code)]\n \n@@ -45,6 +47,20 @@ impl Clone for Qux {\n     fn clone(&self) -> Self { Qux }\n }\n \n+// looks like unions don't support deriving Clone for now\n+#[derive(Copy)]\n+union Union {\n+    a: u8,\n+}\n+\n+impl Clone for Union {\n+    fn clone(&self) -> Self {\n+        Union {\n+            a: 42,\n+        }\n+    }\n+}\n+\n // See #666\n #[derive(Copy)]\n struct Lt<'a> {"}, {"sha": "6616f7bdc86c03a4ee2a0f95fdc2521056768068", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01424f5622cff4f823a7b797f679bee349e54d8e/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01424f5622cff4f823a7b797f679bee349e54d8e/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=01424f5622cff4f823a7b797f679bee349e54d8e", "patch": "@@ -4,6 +4,7 @@\n #![deny(no_effect, unnecessary_operation)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n+#![feature(untagged_unions)]\n \n struct Unit;\n struct Tuple(i32);\n@@ -15,6 +16,11 @@ enum Enum {\n     Struct { field: i32 },\n }\n \n+union Union {\n+    a: u8,\n+    b: f64,\n+}\n+\n fn get_number() -> i32 { 0 }\n fn get_struct() -> Struct { Struct { field: 0 } }\n \n@@ -30,6 +36,7 @@ fn main() {\n     Tuple(0); //~ERROR statement with no effect\n     Struct { field: 0 }; //~ERROR statement with no effect\n     Struct { ..s }; //~ERROR statement with no effect\n+    Union { a: 0 }; //~ERROR statement with no effect\n     Enum::Tuple(0); //~ERROR statement with no effect\n     Enum::Struct { field: 0 }; //~ERROR statement with no effect\n     5 + 6; //~ERROR statement with no effect"}]}