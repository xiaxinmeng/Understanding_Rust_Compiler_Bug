{"sha": "fdd6f4e56c7470e939c874957f9c70e908b92f6f", "node_id": "C_kwDOAAsO6NoAKGZkZDZmNGU1NmM3NDcwZTkzOWM4NzQ5NTdmOWM3MGU5MDhiOTJmNmY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-07T04:57:45Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-07T05:53:22Z"}, "message": "Add in ValuePair::Term\n\nThis adds in an enum when matching on positions which can either be types or consts.\nIt will default to emitting old special cased error messages for types.", "tree": {"sha": "e46b5bd8fc93098e423f1a34196b5711d5c0259b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46b5bd8fc93098e423f1a34196b5711d5c0259b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd6f4e56c7470e939c874957f9c70e908b92f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd6f4e56c7470e939c874957f9c70e908b92f6f", "html_url": "https://github.com/rust-lang/rust/commit/fdd6f4e56c7470e939c874957f9c70e908b92f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd6f4e56c7470e939c874957f9c70e908b92f6f/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f624427f8771c00819684c783bb841bf72095704", "url": "https://api.github.com/repos/rust-lang/rust/commits/f624427f8771c00819684c783bb841bf72095704", "html_url": "https://github.com/rust-lang/rust/commit/f624427f8771c00819684c783bb841bf72095704"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "aa74a92ad1f4f2cd8e8e9ea955939f2d124d414b", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6f4e56c7470e939c874957f9c70e908b92f6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6f4e56c7470e939c874957f9c70e908b92f6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=fdd6f4e56c7470e939c874957f9c70e908b92f6f", "patch": "@@ -288,21 +288,13 @@ impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        match (a, b) {\n-            (ty::Term::Ty(a), ty::Term::Ty(b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n-            }\n-            (ty::Term::Const(a), ty::Term::Const(b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n-            }\n-            (_, _) => todo!(),\n-        }\n+        TypeTrace { cause: cause.clone(), values: Terms(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n }\n "}, {"sha": "7b82b5a8b8f878547d7ed8bfff2216af23d13364", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6f4e56c7470e939c874957f9c70e908b92f6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6f4e56c7470e939c874957f9c70e908b92f6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fdd6f4e56c7470e939c874957f9c70e908b92f6f", "patch": "@@ -2127,6 +2127,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Types(exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Consts(exp_found) => self.expected_found_str(exp_found),\n+            infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),\n@@ -2166,6 +2167,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         Some(self.cmp(exp_found.expected, exp_found.found))\n     }\n \n+    fn expected_found_str_term(\n+        &self,\n+        exp_found: ty::error::ExpectedFound<ty::Term<'tcx>>,\n+    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n+        let exp_found = self.resolve_vars_if_possible(exp_found);\n+        if exp_found.references_error() {\n+            return None;\n+        }\n+\n+        Some(match (exp_found.expected, exp_found.found) {\n+            (ty::Term::Ty(expected), ty::Term::Ty(found)) => self.cmp(expected, found),\n+            (expected, found) => (\n+                DiagnosticStyledString::highlighted(expected.to_string()),\n+                DiagnosticStyledString::highlighted(found.to_string()),\n+            ),\n+        })\n+    }\n+\n     /// Returns a string of the form \"expected `{}`, found `{}`\".\n     fn expected_found_str<T: fmt::Display + TypeFoldable<'tcx>>(\n         &self,"}, {"sha": "19ac40e7e8a9a676cb60fde348aca220f3d5183c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6f4e56c7470e939c874957f9c70e908b92f6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6f4e56c7470e939c874957f9c70e908b92f6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=fdd6f4e56c7470e939c874957f9c70e908b92f6f", "patch": "@@ -371,6 +371,7 @@ pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),\n+    Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }"}, {"sha": "e2847b6b72b8638f741e7a8d9ff8f71ee9d2f682", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6f4e56c7470e939c874957f9c70e908b92f6f/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6f4e56c7470e939c874957f9c70e908b92f6f/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=fdd6f4e56c7470e939c874957f9c70e908b92f6f", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(());\n    |     ^^^ lifetime mismatch\n    |\n-   = note: expected reference `&'a ()`\n-                   found type `&()`\n+   = note: expected type `&'a ()`\n+              found type `&()`\n note: the lifetime requirement is introduced here\n   --> $DIR/higher-ranked-projection.rs:15:33\n    |"}, {"sha": "9a0b40d43a0639425ffcffcfd46835e91bc0558a", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fdd6f4e56c7470e939c874957f9c70e908b92f6f/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdd6f4e56c7470e939c874957f9c70e908b92f6f/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=fdd6f4e56c7470e939c874957f9c70e908b92f6f", "patch": "@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     take_foo(|a: &i32| a);\n    |     ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected reference `&i32`\n-              found reference `&i32`\n+   = note: expected type `&i32`\n+              found type `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/issue-79187-2.rs:9:14\n    |\n@@ -42,8 +42,8 @@ error[E0308]: mismatched types\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |     ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected reference `&i32`\n-              found reference `&i32`\n+   = note: expected type `&i32`\n+              found type `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/issue-79187-2.rs:10:14\n    |"}]}