{"sha": "c0be61972461458ac28195e2034fa6e3d775fcf3", "node_id": "C_kwDOAAsO6NoAKGMwYmU2MTk3MjQ2MTQ1OGFjMjgxOTVlMjAzNGZhNmUzZDc3NWZjZjM", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-04-19T08:43:09Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-04-19T08:43:20Z"}, "message": "incr. comp.: Don't export impl_stable_hash_via_hash!() and warn about using it.", "tree": {"sha": "a577e35b08474e047f8b61e9449cdfd943f8d0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a577e35b08474e047f8b61e9449cdfd943f8d0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0be61972461458ac28195e2034fa6e3d775fcf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0be61972461458ac28195e2034fa6e3d775fcf3", "html_url": "https://github.com/rust-lang/rust/commit/c0be61972461458ac28195e2034fa6e3d775fcf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0be61972461458ac28195e2034fa6e3d775fcf3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357", "html_url": "https://github.com/rust-lang/rust/commit/e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "25353290fd50c4943c018554102791388342163d", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -207,9 +207,14 @@ pub trait ToStableHashKey<HCX> {\n     fn to_stable_hash_key(&self, hcx: &HCX) -> Self::KeyType;\n }\n \n-// Implement HashStable by just calling `Hash::hash()`. This works fine for\n-// self-contained values that don't depend on the hashing context `CTX`.\n-#[macro_export]\n+/// Implement HashStable by just calling `Hash::hash()`.\n+///\n+/// **WARNING** This is only valid for types that *really* don't need any context for fingerprinting.\n+/// But it is easy to misuse this macro (see [#96013](https://github.com/rust-lang/rust/issues/96013)\n+/// for examples). Therefore this macro is not exported and should only be used in the limited cases\n+/// here in this module.\n+///\n+/// Use `#[derive(HashStable_Generic)]` instead.\n macro_rules! impl_stable_hash_via_hash {\n     ($t:ty) => {\n         impl<CTX> $crate::stable_hasher::HashStable<CTX> for $t {\n@@ -246,12 +251,14 @@ impl<CTX> HashStable<CTX> for ! {\n }\n \n impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n+    #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         self.get().hash_stable(ctx, hasher)\n     }\n }\n \n impl<CTX> HashStable<CTX> for ::std::num::NonZeroUsize {\n+    #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         self.get().hash_stable(ctx, hasher)\n     }\n@@ -272,12 +279,14 @@ impl<CTX> HashStable<CTX> for f64 {\n }\n \n impl<CTX> HashStable<CTX> for ::std::cmp::Ordering {\n+    #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         (*self as i8).hash_stable(ctx, hasher);\n     }\n }\n \n impl<T1: HashStable<CTX>, CTX> HashStable<CTX> for (T1,) {\n+    #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         let (ref _0,) = *self;\n         _0.hash_stable(ctx, hasher);"}, {"sha": "09a7ceadf29dc4c84791c6283f6fb57464809bbd", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -39,6 +39,7 @@ pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_serialize::json::Json;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::SourceMap;\n+use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n \n use std::borrow::Cow;\n@@ -1531,6 +1532,7 @@ pub fn add_elided_lifetime_in_path_suggestion(\n /// Useful type to use with `Result<>` indicate that an error has already\n /// been reported to the user, so no need to continue checking.\n #[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(HashStable_Generic)]\n pub struct ErrorGuaranteed(());\n \n impl ErrorGuaranteed {\n@@ -1540,5 +1542,3 @@ impl ErrorGuaranteed {\n         ErrorGuaranteed(())\n     }\n }\n-\n-rustc_data_structures::impl_stable_hash_via_hash!(ErrorGuaranteed);"}, {"sha": "ec543d4bbc52a482c6f383636163ce8259c9ddd9", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -76,9 +76,10 @@ rustc_index::newtype_index! {\n     /// integers starting at zero, so a mapping that maps all or most nodes within\n     /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n     /// tree or hash map.\n+    #[derive(HashStable_Generic)]\n     pub struct ItemLocalId { .. }\n }\n-rustc_data_structures::impl_stable_hash_via_hash!(ItemLocalId);\n+\n impl ItemLocalId {\n     /// Signal local id which should never be used.\n     pub const INVALID: ItemLocalId = ItemLocalId::MAX;"}, {"sha": "92b0735c23ae38126c2967c1c6ace078eb1f4c2b", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_ast::{AttrId, Attribute};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_error_messages::MultiSpan;\n+use rustc_hir::HashStableContext;\n use rustc_hir::HirId;\n use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n@@ -147,7 +148,7 @@ impl<HCX: rustc_hir::HashStableContext> ToStableHashKey<HCX> for LintExpectation\n /// Setting for how to handle a lint.\n ///\n /// See: <https://doc.rust-lang.org/rustc/lints/levels.html>\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, HashStable_Generic)]\n pub enum Level {\n     /// The `allow` level will not issue any message.\n     Allow,\n@@ -175,8 +176,6 @@ pub enum Level {\n     Forbid,\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(Level);\n-\n impl Level {\n     /// Converts a level to a lower-case string.\n     pub fn as_str(self) -> &'static str {"}, {"sha": "976d7c2b9ecfd84bdc2d0535927a36468cdd6116", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -3,14 +3,14 @@\n \n pub use crate::options::*;\n \n-use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n+use crate::{lint, HashStableContext};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::impl_stable_hash_via_hash;\n \n+use rustc_data_structures::stable_hasher::ToStableHashKey;\n use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n@@ -80,7 +80,7 @@ pub enum CFProtection {\n     Full,\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Hash)]\n+#[derive(Clone, Copy, Debug, PartialEq, Hash, HashStable_Generic)]\n pub enum OptLevel {\n     No,         // -O0\n     Less,       // -O1\n@@ -90,8 +90,6 @@ pub enum OptLevel {\n     SizeMin,    // -Oz\n }\n \n-impl_stable_hash_via_hash!(OptLevel);\n-\n /// This is what the `LtoCli` values get mapped to after resolving defaults and\n /// and taking other command line options into account.\n ///\n@@ -232,15 +230,13 @@ impl SwitchWithOptPath {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic)]\n #[derive(Encodable, Decodable)]\n pub enum SymbolManglingVersion {\n     Legacy,\n     V0,\n }\n \n-impl_stable_hash_via_hash!(SymbolManglingVersion);\n-\n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n pub enum DebugInfo {\n     None,\n@@ -279,7 +275,7 @@ impl FromStr for SplitDwarfKind {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord, HashStable_Generic)]\n #[derive(Encodable, Decodable)]\n pub enum OutputType {\n     Bitcode,\n@@ -292,7 +288,13 @@ pub enum OutputType {\n     DepInfo,\n }\n \n-impl_stable_hash_via_hash!(OutputType);\n+impl<HCX: HashStableContext> ToStableHashKey<HCX> for OutputType {\n+    type KeyType = Self;\n+\n+    fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {\n+        *self\n+    }\n+}\n \n impl OutputType {\n     fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n@@ -398,7 +400,7 @@ pub enum TrimmedDefPaths {\n /// *Do not* switch `BTreeMap` out for an unsorted container type! That would break\n /// dependency tracking for command-line arguments. Also only hash keys, since tracking\n /// should only depend on the output types, not the paths they're written to.\n-#[derive(Clone, Debug, Hash)]\n+#[derive(Clone, Debug, Hash, HashStable_Generic)]\n pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n \n impl OutputTypes {\n@@ -630,7 +632,7 @@ impl Input {\n     }\n }\n \n-#[derive(Clone, Hash, Debug)]\n+#[derive(Clone, Hash, Debug, HashStable_Generic)]\n pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n     filestem: String,\n@@ -639,8 +641,6 @@ pub struct OutputFilenames {\n     pub outputs: OutputTypes,\n }\n \n-impl_stable_hash_via_hash!(OutputFilenames);\n-\n pub const RLINK_EXT: &str = \"rlink\";\n pub const RUST_CGU_EXT: &str = \"rcgu\";\n pub const DWARF_OBJECT_EXT: &str = \"dwo\";\n@@ -854,15 +854,14 @@ impl DebuggingOptions {\n }\n \n // The type of entry function, so users can have their own entry functions\n-#[derive(Copy, Clone, PartialEq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Hash, Debug, HashStable_Generic)]\n pub enum EntryFnType {\n     Main,\n     Start,\n }\n \n-impl_stable_hash_via_hash!(EntryFnType);\n-\n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, Encodable, Decodable)]\n+#[derive(HashStable_Generic)]\n pub enum CrateType {\n     Executable,\n     Dylib,\n@@ -872,8 +871,6 @@ pub enum CrateType {\n     ProcMacro,\n }\n \n-impl_stable_hash_via_hash!(CrateType);\n-\n impl CrateType {\n     /// When generated, is this crate type an archive?\n     pub fn is_archive(&self) -> bool {"}, {"sha": "56a6b6f3b03efe6d18c98fd80ad69e1fa6c5af2c", "filename": "compiler/rustc_session/src/search_paths.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsearch_paths.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -26,7 +26,7 @@ pub struct SearchPathFile {\n     pub file_name_str: String,\n }\n \n-#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq, Encodable, Decodable)]\n+#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq, Encodable, Decodable, HashStable_Generic)]\n pub enum PathKind {\n     Native,\n     Crate,\n@@ -36,8 +36,6 @@ pub enum PathKind {\n     All,\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(PathKind);\n-\n impl PathKind {\n     pub fn matches(&self, kind: PathKind) -> bool {\n         match (self, kind) {"}, {"sha": "8064c217457bb561bc66185b27d75822f0fbce1e", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -18,6 +18,7 @@ impl Session {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n+#[derive(HashStable_Generic)]\n pub enum NativeLibKind {\n     /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC)\n     Static {\n@@ -57,9 +58,8 @@ impl NativeLibKind {\n     }\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(NativeLibKind);\n-\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n+#[derive(HashStable_Generic)]\n pub struct NativeLib {\n     pub name: String,\n     pub new_name: Option<String>,\n@@ -73,8 +73,6 @@ impl NativeLib {\n     }\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(NativeLib);\n-\n /// A path that has been canonicalized along with its original, non-canonicalized form\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub struct CanonicalizedPath {"}, {"sha": "b0307cc20d174f39645a81d5a8f7646ff515eda9", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0be61972461458ac28195e2034fa6e3d775fcf3/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=c0be61972461458ac28195e2034fa6e3d775fcf3", "patch": "@@ -1130,6 +1130,7 @@ impl ExternalSource {\n pub struct OffsetOverflowError;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n+#[derive(HashStable_Generic)]\n pub enum SourceFileHashAlgorithm {\n     Md5,\n     Sha1,\n@@ -1149,8 +1150,6 @@ impl FromStr for SourceFileHashAlgorithm {\n     }\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);\n-\n /// The hash of the on-disk source file used for debug info.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[derive(HashStable_Generic, Encodable, Decodable)]"}]}