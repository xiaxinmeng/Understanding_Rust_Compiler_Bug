{"sha": "30b8468c7eebd5bad26674dc58009f3b2c3929fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjg0NjhjN2VlYmQ1YmFkMjY2NzRkYzU4MDA5ZjNiMmMzOTI5ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-28T16:10:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-28T16:15:49Z"}, "message": "Simplify heavy tests\n\nProgress notifications are edge triggered, while status is level\ntriggered. This makes it a hared to misuse signal for the readiness of\nthe server.", "tree": {"sha": "6ef4bdce936e601ebc17283e3af164827cc3499f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef4bdce936e601ebc17283e3af164827cc3499f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b8468c7eebd5bad26674dc58009f3b2c3929fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b8468c7eebd5bad26674dc58009f3b2c3929fb", "html_url": "https://github.com/rust-lang/rust/commit/30b8468c7eebd5bad26674dc58009f3b2c3929fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b8468c7eebd5bad26674dc58009f3b2c3929fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92a6dcc3605410f9af2214b6565aa1f9898c85ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/92a6dcc3605410f9af2214b6565aa1f9898c85ea", "html_url": "https://github.com/rust-lang/rust/commit/92a6dcc3605410f9af2214b6565aa1f9898c85ea"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "453ce4fa88f892b0676150985a227067f5c5e825", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/30b8468c7eebd5bad26674dc58009f3b2c3929fb/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b8468c7eebd5bad26674dc58009f3b2c3929fb/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=30b8468c7eebd5bad26674dc58009f3b2c3929fb", "patch": "@@ -8,14 +8,11 @@ use std::{\n \n use crossbeam_channel::{after, select, Receiver};\n use lsp_server::{Connection, Message, Notification, Request};\n-use lsp_types::{\n-    notification::Exit, request::Shutdown, TextDocumentIdentifier, Url, WorkDoneProgress,\n-};\n-use lsp_types::{ProgressParams, ProgressParamsValue};\n+use lsp_types::{notification::Exit, request::Shutdown, TextDocumentIdentifier, Url};\n use project_model::ProjectManifest;\n-use rust_analyzer::{config::Config, main_loop};\n+use rust_analyzer::{config::Config, lsp_ext, main_loop};\n use serde::Serialize;\n-use serde_json::{to_string_pretty, Value};\n+use serde_json::{json, to_string_pretty, Value};\n use test_utils::{find_mismatch, Fixture};\n use vfs::AbsPathBuf;\n \n@@ -106,9 +103,12 @@ impl<'a> Project<'a> {\n                     ..Default::default()\n                 }),\n                 window: Some(lsp_types::WindowClientCapabilities {\n-                    work_done_progress: Some(true),\n+                    work_done_progress: Some(false),\n                     ..Default::default()\n                 }),\n+                experimental: Some(json!({\n+                    \"statusNotification\": true,\n+                })),\n                 ..Default::default()\n             },\n         );\n@@ -192,9 +192,6 @@ impl Server {\n         while let Some(msg) = self.recv().unwrap_or_else(|Timeout| panic!(\"timeout: {:?}\", r)) {\n             match msg {\n                 Message::Request(req) => {\n-                    if req.method == \"window/workDoneProgress/create\" {\n-                        continue;\n-                    }\n                     if req.method == \"client/registerCapability\" {\n                         let params = req.params.to_string();\n                         if [\"workspace/didChangeWatchedFiles\", \"textDocument/didSave\"]\n@@ -220,14 +217,13 @@ impl Server {\n     }\n     pub(crate) fn wait_until_workspace_is_loaded(self) -> Server {\n         self.wait_for_message_cond(1, &|msg: &Message| match msg {\n-            Message::Notification(n) if n.method == \"$/progress\" => {\n-                match n.clone().extract::<ProgressParams>(\"$/progress\").unwrap() {\n-                    ProgressParams {\n-                        token: lsp_types::ProgressToken::String(ref token),\n-                        value: ProgressParamsValue::WorkDone(WorkDoneProgress::End(_)),\n-                    } if token == \"rustAnalyzer/roots scanned\" => true,\n-                    _ => false,\n-                }\n+            Message::Notification(n) if n.method == \"rust-analyzer/status\" => {\n+                let status = n\n+                    .clone()\n+                    .extract::<lsp_ext::StatusParams>(\"rust-analyzer/status\")\n+                    .unwrap()\n+                    .status;\n+                matches!(status, lsp_ext::Status::Ready)\n             }\n             _ => false,\n         })"}]}