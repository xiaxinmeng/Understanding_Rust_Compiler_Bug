{"sha": "7403ee9d07a1b096e9628871bd97e39f464c3aa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MDNlZTlkMDdhMWIwOTZlOTYyODg3MWJkOTdlMzlmNDY0YzNhYTU=", "commit": {"author": {"name": "Micha\u0142 Krasnoborski", "email": "mkrdln@gmail.com", "date": "2017-02-01T22:47:03Z"}, "committer": {"name": "Micha\u0142 Krasnoborski", "email": "mkrdln@gmail.com", "date": "2017-02-01T22:47:03Z"}, "message": "Adjust heuristics to better handle \"{}...\" format strings.", "tree": {"sha": "4863c5d592d5f3843f69431fb49342339ceb2c8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4863c5d592d5f3843f69431fb49342339ceb2c8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7403ee9d07a1b096e9628871bd97e39f464c3aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7403ee9d07a1b096e9628871bd97e39f464c3aa5", "html_url": "https://github.com/rust-lang/rust/commit/7403ee9d07a1b096e9628871bd97e39f464c3aa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7403ee9d07a1b096e9628871bd97e39f464c3aa5/comments", "author": {"login": "krdln", "id": 3074996, "node_id": "MDQ6VXNlcjMwNzQ5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3074996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krdln", "html_url": "https://github.com/krdln", "followers_url": "https://api.github.com/users/krdln/followers", "following_url": "https://api.github.com/users/krdln/following{/other_user}", "gists_url": "https://api.github.com/users/krdln/gists{/gist_id}", "starred_url": "https://api.github.com/users/krdln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krdln/subscriptions", "organizations_url": "https://api.github.com/users/krdln/orgs", "repos_url": "https://api.github.com/users/krdln/repos", "events_url": "https://api.github.com/users/krdln/events{/privacy}", "received_events_url": "https://api.github.com/users/krdln/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krdln", "id": 3074996, "node_id": "MDQ6VXNlcjMwNzQ5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/3074996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krdln", "html_url": "https://github.com/krdln", "followers_url": "https://api.github.com/users/krdln/followers", "following_url": "https://api.github.com/users/krdln/following{/other_user}", "gists_url": "https://api.github.com/users/krdln/gists{/gist_id}", "starred_url": "https://api.github.com/users/krdln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krdln/subscriptions", "organizations_url": "https://api.github.com/users/krdln/orgs", "repos_url": "https://api.github.com/users/krdln/repos", "events_url": "https://api.github.com/users/krdln/events{/privacy}", "received_events_url": "https://api.github.com/users/krdln/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e74b55b9da5a163e02bbcbf97e7ea24d48742943", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74b55b9da5a163e02bbcbf97e7ea24d48742943", "html_url": "https://github.com/rust-lang/rust/commit/e74b55b9da5a163e02bbcbf97e7ea24d48742943"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "a870b6f88fb8385db163313a9101fa803ca03004", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7403ee9d07a1b096e9628871bd97e39f464c3aa5/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7403ee9d07a1b096e9628871bd97e39f464c3aa5/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7403ee9d07a1b096e9628871bd97e39f464c3aa5", "patch": "@@ -281,17 +281,20 @@ impl<'a> Arguments<'a> {\n         let pieces_length: W<usize> = self.pieces.iter()\n             .map(|x| W(x.len())).sum();\n \n-        // If they are any arguments to format, the string will most likely\n-        // double in size. So we're pre-doubling it here.\n-        let multiplier = if self.args.is_empty() { W(1) } else { W(2) };\n-\n-        let capacity = multiplier * pieces_length;\n-        if multiplier == W(2) && (W(1)..W(8)).contains(capacity) {\n-            // Allocations smaller than 8 don't really make sense for String.\n-            8\n+        if self.args.is_empty() {\n+            pieces_length.0\n+        } else if self.pieces[0] == \"\" && pieces_length < W(16) {\n+            // If the format string starts with an argument,\n+            // don't preallocate anything, unless length\n+            // of pieces is significant.\n+            0\n         } else {\n-            capacity.0\n+            // There are some arguments, so any additional push\n+            // will reallocate the string. To avoid that,\n+            // we're \"pre-doubling\" the capacity here.\n+            (pieces_length * W(2)).0\n         }\n+\n     }\n }\n "}, {"sha": "5d204c7d523d681a937b5f3d540c889cb7920948", "filename": "src/libcoretest/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7403ee9d07a1b096e9628871bd97e39f464c3aa5/src%2Flibcoretest%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7403ee9d07a1b096e9628871bd97e39f464c3aa5/src%2Flibcoretest%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fmod.rs?ref=7403ee9d07a1b096e9628871bd97e39f464c3aa5", "patch": "@@ -31,8 +31,10 @@ fn test_pointer_formats_data_pointer() {\n \n #[test]\n fn test_estimated_capacity() {\n+    assert_eq!(format_args!(\"\").estimated_capacity(), 0);\n     assert_eq!(format_args!(\"{}\", \"\").estimated_capacity(), 0);\n     assert_eq!(format_args!(\"Hello\").estimated_capacity(), 5);\n     assert_eq!(format_args!(\"Hello, {}!\", \"\").estimated_capacity(), 16);\n-    assert_eq!(format_args!(\"{}, hello!\", \"World\").estimated_capacity(), 16);\n+    assert_eq!(format_args!(\"{}, hello!\", \"World\").estimated_capacity(), 0);\n+    assert_eq!(format_args!(\"{}. 16-bytes piece\", \"World\").estimated_capacity(), 32);\n }"}]}