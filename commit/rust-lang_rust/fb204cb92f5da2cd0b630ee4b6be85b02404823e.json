{"sha": "fb204cb92f5da2cd0b630ee4b6be85b02404823e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjA0Y2I5MmY1ZGEyY2QwYjYzMGVlNGI2YmU4NWIwMjQwNDgyM2U=", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2018-10-12T13:34:14Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2018-11-29T20:04:09Z"}, "message": "Add template parameter debuginfo to generic types\n\nThis changes debuginfo generation to add template parameters to\ngeneric types.  With this change the DWARF now has\nDW_TAG_template_type_param for types, not just for functions, like:\n\n <2><40d>: Abbrev Number: 6 (DW_TAG_structure_type)\n    <40e>   DW_AT_name        : (indirect string, offset: 0x375): Generic<i32>\n    <412>   DW_AT_byte_size   : 4\n    <413>   DW_AT_alignment   : 4\n...\n <3><41f>: Abbrev Number: 8 (DW_TAG_template_type_param)\n    <420>   DW_AT_type        : <0x42a>\n    <424>   DW_AT_name        : (indirect string, offset: 0xa65e): T\n\nCloses #9224", "tree": {"sha": "4586fecc69bb15a73ec5337261eef0a3cb840151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4586fecc69bb15a73ec5337261eef0a3cb840151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb204cb92f5da2cd0b630ee4b6be85b02404823e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb204cb92f5da2cd0b630ee4b6be85b02404823e", "html_url": "https://github.com/rust-lang/rust/commit/fb204cb92f5da2cd0b630ee4b6be85b02404823e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb204cb92f5da2cd0b630ee4b6be85b02404823e/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "html_url": "https://github.com/rust-lang/rust/commit/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a"}], "stats": {"total": 133, "additions": 115, "deletions": 18}, "files": [{"sha": "cd21ef6bfa8349e01dcdab570344442482dce3ff", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -22,7 +22,7 @@ use abi;\n use value::Value;\n \n use llvm;\n-use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n+use llvm::debuginfo::{DIArray, DIType, DIFile, DIScope, DIDescriptor,\n                       DICompositeType, DILexicalBlock, DIFlags};\n use llvm_util;\n \n@@ -35,12 +35,14 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc::ty::Instance;\n use common::CodegenCx;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n-use rustc::ty::layout::{self, Align, HasDataLayout, Integer, IntegerExt, LayoutOf,\n+use rustc::ty::layout::{self, Align, Integer, IntegerExt, LayoutOf,\n                         PrimitiveExt, Size, TyLayout};\n+use rustc::ty::subst::UnpackedKind;\n use rustc::session::config;\n use rustc::util::nodemap::FxHashMap;\n use rustc_fs_util::path2cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_target::abi::HasDataLayout;\n \n use libc::{c_uint, c_longlong};\n use std::ffi::CString;\n@@ -273,6 +275,7 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n \n                 // ... and attach them to the stub to complete it.\n                 set_members_of_composite_type(cx,\n+                                              unfinished_type,\n                                               member_holding_stub,\n                                               member_descriptions);\n                 return MetadataCreationResult::new(metadata_stub, true);\n@@ -1214,6 +1217,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     member_description_factory.create_member_descriptions(cx);\n \n                 set_members_of_composite_type(cx,\n+                                              self.enum_type,\n                                               variant_type_metadata,\n                                               member_descriptions);\n                 vec![\n@@ -1254,6 +1258,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         .create_member_descriptions(cx);\n \n                     set_members_of_composite_type(cx,\n+                                                  self.enum_type,\n                                                   variant_type_metadata,\n                                                   member_descriptions);\n                     MemberDescription {\n@@ -1295,6 +1300,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         member_description_factory.create_member_descriptions(cx);\n \n                     set_members_of_composite_type(cx,\n+                                                  self.enum_type,\n                                                   variant_type_metadata,\n                                                   variant_member_descriptions);\n \n@@ -1354,6 +1360,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             .create_member_descriptions(cx);\n \n                         set_members_of_composite_type(cx,\n+                                                      self.enum_type,\n                                                       variant_type_metadata,\n                                                       member_descriptions);\n \n@@ -1765,13 +1772,15 @@ fn composite_type_metadata(\n                                                      containing_scope);\n     // ... and immediately create and add the member descriptions.\n     set_members_of_composite_type(cx,\n+                                  composite_type,\n                                   composite_type_metadata,\n                                   member_descriptions);\n \n     composite_type_metadata\n }\n \n-fn set_members_of_composite_type(cx: &CodegenCx<'ll, '_>,\n+fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n+                                 composite_type: Ty<'tcx>,\n                                  composite_type_metadata: &'ll DICompositeType,\n                                  member_descriptions: Vec<MemberDescription<'ll>>) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n@@ -1815,10 +1824,57 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, '_>,\n         })\n         .collect();\n \n+    let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {\n         let type_array = create_DIArray(DIB(cx), &member_metadata[..]);\n-        llvm::LLVMRustDICompositeTypeSetTypeArray(\n-            DIB(cx), composite_type_metadata, type_array);\n+        llvm::LLVMRustDICompositeTypeReplaceArrays(\n+            DIB(cx), composite_type_metadata, Some(type_array), type_params);\n+    }\n+}\n+\n+// Compute the type parameters for a type, if any, for the given\n+// metadata.\n+fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'ll DIArray> {\n+    if let ty::Adt(def, substs) = ty.sty {\n+        if !substs.types().next().is_none() {\n+            let generics = cx.tcx.generics_of(def.did);\n+            let names = get_parameter_names(cx, generics);\n+            let template_params: Vec<_> = substs.iter().zip(names).filter_map(|(kind, name)| {\n+                if let UnpackedKind::Type(ty) = kind.unpack() {\n+                    let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+                    let actual_type_metadata =\n+                        type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n+                    let name = SmallCStr::new(&name.as_str());\n+                    Some(unsafe {\n+\n+                        Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n+                            DIB(cx),\n+                            None,\n+                            name.as_ptr(),\n+                            actual_type_metadata,\n+                            unknown_file_metadata(cx),\n+                            0,\n+                            0,\n+                        ))\n+                    })\n+                } else {\n+                    None\n+                }\n+            }).collect();\n+\n+            return Some(create_DIArray(DIB(cx), &template_params[..]));\n+        }\n+    }\n+    return Some(create_DIArray(DIB(cx), &[]));\n+\n+    fn get_parameter_names(cx: &CodegenCx,\n+                           generics: &ty::Generics)\n+                           -> Vec<InternedString> {\n+        let mut names = generics.parent.map_or(vec![], |def_id| {\n+            get_parameter_names(cx, cx.tcx.generics_of(def_id))\n+        });\n+        names.extend(generics.params.iter().map(|param| param.name));\n+        names\n     }\n }\n "}, {"sha": "88915c2beb027b81d1dc1aaae312b67f6d9dc711", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -1586,9 +1586,10 @@ extern \"C\" {\n                                             LineNo: c_uint)\n                                             -> &'a DINameSpace;\n \n-    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: &DIBuilder<'a>,\n-                                               CompositeType: &'a DIType,\n-                                               TypeArray: &'a DIArray);\n+    pub fn LLVMRustDICompositeTypeReplaceArrays(Builder: &DIBuilder<'a>,\n+                                                CompositeType: &'a DIType,\n+                                                Elements: Option<&'a DIArray>,\n+                                                Params: Option<&'a DIArray>);\n \n \n     pub fn LLVMRustDIBuilderCreateDebugLocation(Context: &'a Context,"}, {"sha": "908518d87a37e9a08085655c38b6769df9fd9594", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -824,11 +824,13 @@ LLVMRustDIBuilderCreateNameSpace(LLVMRustDIBuilderRef Builder,\n }\n \n extern \"C\" void\n-LLVMRustDICompositeTypeSetTypeArray(LLVMRustDIBuilderRef Builder,\n-                                    LLVMMetadataRef CompositeTy,\n-                                    LLVMMetadataRef TyArray) {\n+LLVMRustDICompositeTypeReplaceArrays(LLVMRustDIBuilderRef Builder,\n+                                     LLVMMetadataRef CompositeTy,\n+                                     LLVMMetadataRef Elements,\n+                                     LLVMMetadataRef Params) {\n   DICompositeType *Tmp = unwrapDI<DICompositeType>(CompositeTy);\n-  Builder->replaceArrays(Tmp, DINodeArray(unwrap<MDTuple>(TyArray)));\n+  Builder->replaceArrays(Tmp, DINodeArray(unwrap<MDTuple>(Elements)),\n+                         DINodeArray(unwrap<MDTuple>(Params)));\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "9d5dbf1cc0a096a9e281709b5c6b6aae5f694d43", "filename": "src/test/codegen/generic-debug.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgeneric-debug.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// ignore-windows\n+\n+// compile-flags: -g -C no-prepopulate-passes\n+\n+// CHECK-LABEL: @main\n+// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_structure_type,{{.*}}name: \"Generic<i32>\",{{.*}}\n+// CHECK: {{.*}}DITemplateTypeParameter{{.*}}name: \"Type\",{{.*}}\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n+\n+pub struct Generic<Type>(Type);\n+\n+fn main () {\n+    let generic = Generic(10);\n+}"}, {"sha": "c9c2395534882ea8f1944745c8a9a63472e77069", "filename": "src/test/debuginfo/associated-types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fassociated-types.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-lldb-version: 310\n+// Some versions of the non-rust-enabled LLDB print the wrong generic\n+// parameter type names in this test.\n+// rust-lldb\n \n // compile-flags:-g\n "}, {"sha": "df1f1e3d4ee2f77801eaee853b398e0b7d800e23", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -11,7 +11,10 @@\n // ignore-tidy-linelength\n \n // compile-flags:-g\n-// min-lldb-version: 310\n+\n+// Some versions of the non-rust-enabled LLDB print the wrong generic\n+// parameter type names in this test.\n+// rust-lldb\n \n // === GDB TESTS ===================================================================================\n "}, {"sha": "ebaac96946c193c6fd9dd2584e6fffe32427055b", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -9,7 +9,10 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// min-lldb-version: 310\n+\n+// Some versions of the non-rust-enabled LLDB print the wrong generic\n+// parameter type names in this test.\n+// rust-lldb\n \n // compile-flags:-g\n "}, {"sha": "8bda0e419151ad9d5875d13c09fcba3dd212ae3e", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -41,7 +41,7 @@\n // lldb-command:run\n \n // lldb-command:print case1\n-// lldbr-check:(generic_tuple_style_enum::Regular<u16, u32, u64>::Case1) case1 = { = 0 = 31868 = 31868 = 31868 = 31868 }\n+// lldbr-check:(generic_tuple_style_enum::Regular<u16, u32, u64>::Case1) case1 = { __0 = 0 __1 = 31868 __2 = 31868 __3 = 31868 __4 = 31868 }\n \n // lldb-command:print case2\n // lldbr-check:(generic_tuple_style_enum::Regular<i16, i32, i64>::Case2) case2 = Regular<i16, i32, i64>::Case2 { Case1: 0, Case2: 286331153, Case3: 286331153 }\n@@ -50,7 +50,7 @@\n // lldbr-check:(generic_tuple_style_enum::Regular<i16, i32, i64>::Case3) case3 = Regular<i16, i32, i64>::Case3 { Case1: 0, Case2: 6438275382588823897 }\n \n // lldb-command:print univariant\n-// lldbr-check:(generic_tuple_style_enum::Univariant<i64>) univariant = { TheOnlyCase = { = -1 } }\n+// lldbr-check:(generic_tuple_style_enum::Univariant<i64>) univariant = Univariant<i64> { TheOnlyCase: Univariant<i64>::TheOnlyCase(-1) }\n \n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "f4f7bdcecc65a12ab0a4c42b391896f461567d91", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb204cb92f5da2cd0b630ee4b6be85b02404823e/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=fb204cb92f5da2cd0b630ee4b6be85b02404823e", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-lldb-version: 310\n+// Some versions of the non-rust-enabled LLDB print the wrong generic\n+// parameter type names in this test.\n+// rust-lldb\n \n // compile-flags:-g\n "}]}