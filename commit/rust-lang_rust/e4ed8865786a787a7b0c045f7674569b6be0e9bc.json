{"sha": "e4ed8865786a787a7b0c045f7674569b6be0e9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZWQ4ODY1Nzg2YTc4N2E3YjBjMDQ1Zjc2NzQ1NjliNmJlMGU5YmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-21T22:06:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T22:32:03Z"}, "message": "pre-expansion gate box_syntax", "tree": {"sha": "fd5bde6d3fba8bce56b1a8dee06ef74e0b141f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5bde6d3fba8bce56b1a8dee06ef74e0b141f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ed8865786a787a7b0c045f7674569b6be0e9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ed8865786a787a7b0c045f7674569b6be0e9bc", "html_url": "https://github.com/rust-lang/rust/commit/e4ed8865786a787a7b0c045f7674569b6be0e9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ed8865786a787a7b0c045f7674569b6be0e9bc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137ded8ab1edf5112c45e0b6854272ae2e9d3a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/137ded8ab1edf5112c45e0b6854272ae2e9d3a6d", "html_url": "https://github.com/rust-lang/rust/commit/137ded8ab1edf5112c45e0b6854272ae2e9d3a6d"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "7243f5c032016e22d789a5d3c87f9b101284eef0", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=e4ed8865786a787a7b0c045f7674569b6be0e9bc", "patch": "@@ -153,9 +153,6 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n \n }\n \n-const EXPLAIN_BOX_SYNTAX: &str =\n-    \"box expression syntax is experimental; you can call `Box::new` instead\";\n-\n pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n     \"attributes on expressions are experimental\";\n \n@@ -503,9 +500,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n-            ast::ExprKind::Box(_) => {\n-                gate_feature_post!(&self, box_syntax, e.span, EXPLAIN_BOX_SYNTAX);\n-            }\n             ast::ExprKind::Type(..) => {\n                 // To avoid noise about type ascription in common syntax errors, only emit if it\n                 // is the *only* error.\n@@ -809,6 +803,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n     gate_all!(label_break_value, \"labels on blocks are unstable\");\n+    gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "e7dd15654d8062bf55138ffa5881a0404056a06a", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=e4ed8865786a787a7b0c045f7674569b6be0e9bc", "patch": "@@ -453,7 +453,9 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (lo.to(span), ExprKind::Box(e))\n+                let span = lo.to(span);\n+                self.sess.gated_spans.box_syntax.borrow_mut().push(span);\n+                (span, ExprKind::Box(e))\n             }\n             token::Ident(..) if self.token.is_ident_named(sym::not) => {\n                 // `not` is just an ordinary identifier in Rust-the-language,"}, {"sha": "febaa71477509a76ca10fbd449a4b5c990d3ec44", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=e4ed8865786a787a7b0c045f7674569b6be0e9bc", "patch": "@@ -48,6 +48,8 @@ crate struct GatedSpans {\n     pub try_blocks: Lock<Vec<Span>>,\n     /// Spans collected for gating `label_break_value`, e.g. `'label: { ... }`.\n     pub label_break_value: Lock<Vec<Span>>,\n+    /// Spans collected for gating `box_syntax`, e.g. `box $expr`.\n+    pub box_syntax: Lock<Vec<Span>>,\n }\n \n /// Info about a parsing session."}, {"sha": "c23953a9e099e1dfa279390e63506790b6ea8aa9", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs?ref=e4ed8865786a787a7b0c045f7674569b6be0e9bc", "patch": "@@ -1,6 +1,9 @@\n // Test that the use of the box syntax is gated by `box_syntax` feature gate.\n \n-fn main() {\n+#[cfg(FALSE)]\n+fn foo() {\n     let x = box 3;\n     //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead\n }\n+\n+fn main() {}"}, {"sha": "cbafa50257706e53cb7efde0f8de5fd1360310ed", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ed8865786a787a7b0c045f7674569b6be0e9bc/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=e4ed8865786a787a7b0c045f7674569b6be0e9bc", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box_syntax.rs:4:13\n+  --> $DIR/feature-gate-box_syntax.rs:5:13\n    |\n LL |     let x = box 3;\n    |             ^^^^^"}]}