{"sha": "877bba91d54457c104ff0bf67fd46a499a451cf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3N2JiYTkxZDU0NDU3YzEwNGZmMGJmNjdmZDQ2YTQ5OWE0NTFjZjY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2013-07-16T08:27:54Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2013-07-16T16:05:24Z"}, "message": "Permit C-style enums in vector repeat length expressions (N.B. values only, not type signatures)", "tree": {"sha": "249bac609cba75ada5b665a9d096da2505ffbf21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/249bac609cba75ada5b665a9d096da2505ffbf21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877bba91d54457c104ff0bf67fd46a499a451cf6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877bba91d54457c104ff0bf67fd46a499a451cf6", "html_url": "https://github.com/rust-lang/rust/commit/877bba91d54457c104ff0bf67fd46a499a451cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877bba91d54457c104ff0bf67fd46a499a451cf6/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f", "html_url": "https://github.com/rust-lang/rust/commit/274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f"}], "stats": {"total": 157, "additions": 127, "deletions": 30}, "files": [{"sha": "2cf99e07dc9f13ae4b6f61b960bb3facc0a6b978", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -165,10 +165,58 @@ pub fn classify(e: &expr,\n pub fn lookup_const(tcx: ty::ctxt, e: &expr) -> Option<@expr> {\n     match tcx.def_map.find(&e.id) {\n         Some(&ast::def_static(def_id, false)) => lookup_const_by_id(tcx, def_id),\n+        Some(&ast::def_variant(enum_def, variant_def)) => lookup_variant_by_id(tcx,\n+                                                                               enum_def,\n+                                                                               variant_def),\n         _ => None\n     }\n }\n \n+pub fn lookup_variant_by_id(tcx: ty::ctxt,\n+                            enum_def: ast::def_id,\n+                            variant_def: ast::def_id)\n+                       -> Option<@expr> {\n+    fn variant_expr(variants: &[ast::variant], id: ast::node_id) -> Option<@expr> {\n+        for variants.iter().advance |variant| {\n+            if variant.node.id == id {\n+                return variant.node.disr_expr;\n+            }\n+        }\n+        None\n+    }\n+\n+    if ast_util::is_local(enum_def) {\n+        match tcx.items.find(&enum_def.node) {\n+            None => None,\n+            Some(&ast_map::node_item(it, _)) => match it.node {\n+                item_enum(ast::enum_def { variants: ref variants }, _) => {\n+                    variant_expr(*variants, variant_def.node)\n+                }\n+                _ => None\n+            },\n+            Some(_) => None\n+        }\n+    } else {\n+        let maps = astencode::Maps {\n+            root_map: @mut HashMap::new(),\n+            method_map: @mut HashMap::new(),\n+            vtable_map: @mut HashMap::new(),\n+            write_guard_map: @mut HashSet::new(),\n+            capture_map: @mut HashMap::new()\n+        };\n+        match csearch::maybe_get_item_ast(tcx, enum_def,\n+            |a, b, c, d| astencode::decode_inlined_item(a, b, maps, /*bar*/ copy c, d)) {\n+            csearch::found(ast::ii_item(item)) => match item.node {\n+                item_enum(ast::enum_def { variants: ref variants }, _) => {\n+                    variant_expr(*variants, variant_def.node)\n+                }\n+                _ => None\n+            },\n+            _ => None\n+        }\n+    }\n+}\n+\n pub fn lookup_const_by_id(tcx: ty::ctxt,\n                           def_id: ast::def_id)\n                        -> Option<@expr> {\n@@ -237,13 +285,13 @@ pub enum const_val {\n }\n \n pub fn eval_const_expr(tcx: middle::ty::ctxt, e: &expr) -> const_val {\n-    match eval_const_expr_partial(tcx, e) {\n+    match eval_const_expr_partial(&tcx, e) {\n         Ok(r) => r,\n         Err(s) => tcx.sess.span_fatal(e.span, s)\n     }\n }\n \n-pub fn eval_const_expr_partial(tcx: middle::ty::ctxt, e: &expr)\n+pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &expr)\n                             -> Result<const_val, ~str> {\n     use middle::ty;\n     fn fromb(b: bool) -> Result<const_val, ~str> { Ok(const_int(b as i64)) }\n@@ -360,7 +408,7 @@ pub fn eval_const_expr_partial(tcx: middle::ty::ctxt, e: &expr)\n         }\n       }\n       expr_cast(base, _) => {\n-        let ety = ty::expr_ty(tcx, e);\n+        let ety = tcx.expr_ty(e);\n         let base = eval_const_expr_partial(tcx, base);\n         match /*bad*/copy base {\n             Err(_) => base,\n@@ -390,8 +438,8 @@ pub fn eval_const_expr_partial(tcx: middle::ty::ctxt, e: &expr)\n         }\n       }\n       expr_path(_) => {\n-          match lookup_const(tcx, e) {\n-              Some(actual_e) => eval_const_expr_partial(tcx, actual_e),\n+          match lookup_const(tcx.ty_ctxt(), e) {\n+              Some(actual_e) => eval_const_expr_partial(&tcx.ty_ctxt(), actual_e),\n               None => Err(~\"Non-constant path in constant expr\")\n           }\n       }"}, {"sha": "ae2a27ed6ed7b193d11e520c15aa05f5bfc99a25", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -309,7 +309,7 @@ pub fn check_expr(e: @expr, (cx, v): (Context, visit::vt<Context>)) {\n                        \"explicit copy requires a copyable argument\");\n         }\n         expr_repeat(element, count_expr, _) => {\n-            let count = ty::eval_repeat_count(cx.tcx, count_expr);\n+            let count = ty::eval_repeat_count(&cx.tcx, count_expr);\n             if count > 1 {\n                 let element_ty = ty::expr_ty(cx.tcx, element);\n                 check_copy(cx, element_ty, element.span,"}, {"sha": "561c9a3399a04e089c407497122c437ba6d00606", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -417,7 +417,7 @@ pub fn write_content(bcx: block,\n                     return expr::trans_into(bcx, element, Ignore);\n                 }\n                 SaveIn(lldest) => {\n-                    let count = ty::eval_repeat_count(bcx.tcx(), count_expr);\n+                    let count = ty::eval_repeat_count(&bcx.tcx(), count_expr);\n                     if count == 0 {\n                         return bcx;\n                     }\n@@ -509,7 +509,7 @@ pub fn elements_required(bcx: block, content_expr: &ast::expr) -> uint {\n         },\n         ast::expr_vec(ref es, _) => es.len(),\n         ast::expr_repeat(_, count_expr, _) => {\n-            ty::eval_repeat_count(bcx.tcx(), count_expr)\n+            ty::eval_repeat_count(&bcx.tcx(), count_expr)\n         }\n         _ => bcx.tcx().sess.span_bug(content_expr.span,\n                                      \"Unexpected evec content\")"}, {"sha": "eb69798d0cce8db5ba4af299ef4d60ead65e8770", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -4230,42 +4230,57 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n     return t_norm;\n }\n \n+pub trait ExprTyProvider {\n+    pub fn expr_ty(&self, ex: &ast::expr) -> t;\n+    pub fn ty_ctxt(&self) -> ctxt;\n+}\n+\n+impl ExprTyProvider for ctxt {\n+    pub fn expr_ty(&self, ex: &ast::expr) -> t {\n+        expr_ty(*self, ex)\n+    }\n+\n+    pub fn ty_ctxt(&self) -> ctxt {\n+        *self\n+    }\n+}\n+\n // Returns the repeat count for a repeating vector expression.\n-pub fn eval_repeat_count(tcx: ctxt, count_expr: &ast::expr) -> uint {\n+pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::expr) -> uint {\n     match const_eval::eval_const_expr_partial(tcx, count_expr) {\n       Ok(ref const_val) => match *const_val {\n         const_eval::const_int(count) => if count < 0 {\n-            tcx.sess.span_err(count_expr.span,\n-                              \"expected positive integer for \\\n-                               repeat count but found negative integer\");\n+            tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                        \"expected positive integer for \\\n+                                         repeat count but found negative integer\");\n             return 0;\n         } else {\n             return count as uint\n         },\n         const_eval::const_uint(count) => return count as uint,\n         const_eval::const_float(count) => {\n-            tcx.sess.span_err(count_expr.span,\n-                              \"expected positive integer for \\\n-                               repeat count but found float\");\n+            tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                        \"expected positive integer for \\\n+                                         repeat count but found float\");\n             return count as uint;\n         }\n         const_eval::const_str(_) => {\n-            tcx.sess.span_err(count_expr.span,\n-                              \"expected positive integer for \\\n-                               repeat count but found string\");\n+            tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                        \"expected positive integer for \\\n+                                         repeat count but found string\");\n             return 0;\n         }\n         const_eval::const_bool(_) => {\n-            tcx.sess.span_err(count_expr.span,\n-                              \"expected positive integer for \\\n-                               repeat count but found boolean\");\n+            tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                        \"expected positive integer for \\\n+                                         repeat count but found boolean\");\n             return 0;\n         }\n       },\n       Err(*) => {\n-        tcx.sess.span_err(count_expr.span,\n-                          \"expected constant integer for repeat count \\\n-                           but found variable\");\n+        tcx.ty_ctxt().sess.span_err(count_expr.span,\n+                                    \"expected constant integer for repeat count \\\n+                                     but found variable\");\n         return 0;\n       }\n     }"}, {"sha": "1186f8cecabc5fe62e565d8ea7312d93599825c6", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -479,7 +479,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n         }\n       }\n       ast::ty_fixed_length_vec(ref a_mt, e) => {\n-        match const_eval::eval_const_expr_partial(tcx, e) {\n+        match const_eval::eval_const_expr_partial(&tcx, e) {\n           Ok(ref r) => {\n             match *r {\n               const_eval::const_int(i) =>"}, {"sha": "396fae68f737cae4bdf36b043918ad8b330da8b9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -83,7 +83,7 @@ use middle::pat_util;\n use middle::lint::unreachable_code;\n use middle::ty::{FnSig, VariantInfo_};\n use middle::ty::{ty_param_bounds_and_ty, ty_param_substs_and_ty};\n-use middle::ty::{substs, param_ty};\n+use middle::ty::{substs, param_ty, ExprTyProvider};\n use middle::ty;\n use middle::typeck::astconv::AstConv;\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n@@ -290,6 +290,16 @@ pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n     }\n }\n \n+impl ExprTyProvider for FnCtxt {\n+    pub fn expr_ty(&self, ex: &ast::expr) -> ty::t {\n+        self.expr_ty(ex)\n+    }\n+\n+    pub fn ty_ctxt(&self) -> ty::ctxt {\n+        self.ccx.tcx\n+    }\n+}\n+\n pub fn check_item_types(ccx: @mut CrateCtxt, crate: &ast::crate) {\n     let visit = visit::mk_simple_visitor(@visit::SimpleVisitor {\n         visit_item: |a| check_item(ccx, a),\n@@ -797,7 +807,7 @@ impl FnCtxt {\n         pat.repr(self.tcx())\n     }\n \n-    pub fn expr_ty(&self, ex: @ast::expr) -> ty::t {\n+    pub fn expr_ty(&self, ex: &ast::expr) -> ty::t {\n         match self.inh.node_types.find(&ex.id) {\n             Some(&t) => t,\n             None => {\n@@ -2250,8 +2260,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             }\n           }\n           ast::expr_repeat(element, count_expr, mutbl) => {\n-            let _ = ty::eval_repeat_count(tcx, count_expr);\n             check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n+            let _ = ty::eval_repeat_count(fcx, count_expr);\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mutability = match vst {\n                 ast::expr_vstore_mut_box | ast::expr_vstore_mut_slice => {\n@@ -2730,8 +2740,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         fcx.write_ty(id, typ);\n       }\n       ast::expr_repeat(element, count_expr, mutbl) => {\n-        let count = ty::eval_repeat_count(tcx, count_expr);\n         check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n+        let count = ty::eval_repeat_count(fcx, count_expr);\n         let t: ty::t = fcx.infcx().next_ty_var();\n         check_expr_has_type(fcx, element, t);\n         let element_ty = fcx.expr_ty(element);\n@@ -3126,7 +3136,7 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n                 // that the expression is in an form that eval_const_expr can\n                 // handle, so we may still get an internal compiler error\n \n-                match const_eval::eval_const_expr_partial(ccx.tcx, e) {\n+                match const_eval::eval_const_expr_partial(&ccx.tcx, e) {\n                   Ok(const_eval::const_int(val)) => {\n                     *disr_val = val as int;\n                   }"}, {"sha": "ae590ad7d1f71c06e038e34cdb000e265ed8a94e", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877bba91d54457c104ff0bf67fd46a499a451cf6/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=877bba91d54457c104ff0bf67fd46a499a451cf6", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Flopsy {\n+    Bunny = 2\n+}\n+\n+static BAR:uint = Bunny as uint;\n+static BAR2:uint = BAR;\n+\n+fn main() {\n+    let v = [0, .. Bunny as uint];\n+    let v = [0, .. BAR];\n+    let v = [0, .. BAR2];\n+    static BAR3:uint = BAR2;\n+    let v = [0, .. BAR3];\n+}\n\\ No newline at end of file"}]}