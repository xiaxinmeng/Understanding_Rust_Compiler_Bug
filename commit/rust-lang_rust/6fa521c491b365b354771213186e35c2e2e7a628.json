{"sha": "6fa521c491b365b354771213186e35c2e2e7a628", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTUyMWM0OTFiMzY1YjM1NDc3MTIxMzE4NmUzNWMyZTJlN2E2Mjg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-27T23:11:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-10-28T15:24:09Z"}, "message": "Fix weird bugs", "tree": {"sha": "5c6de69264fcb96662ad08ce053c39a631e850cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6de69264fcb96662ad08ce053c39a631e850cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa521c491b365b354771213186e35c2e2e7a628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa521c491b365b354771213186e35c2e2e7a628", "html_url": "https://github.com/rust-lang/rust/commit/6fa521c491b365b354771213186e35c2e2e7a628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa521c491b365b354771213186e35c2e2e7a628/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dafd2c6908f19d573a94b8fc1e99b58460453a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dafd2c6908f19d573a94b8fc1e99b58460453a8", "html_url": "https://github.com/rust-lang/rust/commit/3dafd2c6908f19d573a94b8fc1e99b58460453a8"}], "stats": {"total": 91, "additions": 60, "deletions": 31}, "files": [{"sha": "2de5ddf243f490c2995e121eecb33bb28460ba56", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6fa521c491b365b354771213186e35c2e2e7a628/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa521c491b365b354771213186e35c2e2e7a628/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6fa521c491b365b354771213186e35c2e2e7a628", "patch": "@@ -37,7 +37,7 @@ pub use self::ExternalLocation::*;\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::cmp::Ordering;\n-use std::collections::BTreeMap;\n+use std::collections::{BTreeMap, HashSet};\n use std::default::Default;\n use std::error;\n use std::fmt::{self, Display, Formatter, Write as FmtWrite};\n@@ -3206,12 +3206,37 @@ fn render_deref_methods(w: &mut fmt::Formatter, cx: &Context, impl_: &Impl,\n     }\n }\n \n+fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n+    let self_type_opt = match item.inner {\n+        clean::MethodItem(ref method) => method.decl.self_type(),\n+        clean::TyMethodItem(ref method) => method.decl.self_type(),\n+        _ => None\n+    };\n+\n+    if let Some(self_ty) = self_type_opt {\n+        let (by_mut_ref, by_box) = match self_ty {\n+            SelfTy::SelfBorrowed(_, mutability) |\n+            SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n+                (mutability == Mutability::Mutable, false)\n+            },\n+            SelfTy::SelfExplicit(clean::ResolvedPath { did, .. }) => {\n+                (false, Some(did) == cache().owned_box_did)\n+            },\n+            _ => (false, false),\n+        };\n+\n+        (deref_mut_ || !by_mut_ref) && !by_box\n+    } else {\n+        false\n+    }\n+}\n+\n fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLink,\n                render_mode: RenderMode, outer_version: Option<&str>,\n                show_def_docs: bool) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n         let id = derive_id(match i.inner_impl().trait_ {\n-            Some(ref t) => format!(\"impl-{}\", Escape(&format!(\"{:#}\", t))),\n+            Some(ref t) => format!(\"impl-{}\", small_url_encode(&format!(\"{:#}\", t))),\n             None => \"impl\".to_string(),\n         });\n         write!(w, \"<h3 id='{}' class='impl'><span class='in-band'><code>{}</code>\",\n@@ -3243,30 +3268,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n \n         let render_method_item: bool = match render_mode {\n             RenderMode::Normal => true,\n-            RenderMode::ForDeref { mut_: deref_mut_ } => {\n-                let self_type_opt = match item.inner {\n-                    clean::MethodItem(ref method) => method.decl.self_type(),\n-                    clean::TyMethodItem(ref method) => method.decl.self_type(),\n-                    _ => None\n-                };\n-\n-                if let Some(self_ty) = self_type_opt {\n-                    let (by_mut_ref, by_box) = match self_ty {\n-                        SelfTy::SelfBorrowed(_, mutability) |\n-                        SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n-                            (mutability == Mutability::Mutable, false)\n-                        },\n-                        SelfTy::SelfExplicit(clean::ResolvedPath { did, .. }) => {\n-                            (false, Some(did) == cache().owned_box_did)\n-                        },\n-                        _ => (false, false),\n-                    };\n-\n-                    (deref_mut_ || !by_mut_ref) && !by_box\n-                } else {\n-                    false\n-                }\n-            },\n+            RenderMode::ForDeref { mut_: deref_mut_ } => should_render_item(&item, deref_mut_),\n         };\n \n         match item.inner {\n@@ -3513,12 +3515,16 @@ impl<'a> fmt::Display for Sidebar<'a> {\n     }\n }\n \n-fn get_methods(i: &clean::Impl) -> Vec<String> {\n+fn get_methods(i: &clean::Impl, for_deref: bool) -> Vec<String> {\n     i.items.iter().filter_map(|item| {\n         match item.name {\n             // Maybe check with clean::Visibility::Public as well?\n             Some(ref name) if !name.is_empty() && item.visibility.is_some() && item.is_method() => {\n-                Some(format!(\"<a href=\\\"#method.{name}\\\">{name}</a>\", name = name))\n+                if !for_deref || should_render_item(item, false) {\n+                    Some(format!(\"<a href=\\\"#method.{name}\\\">{name}</a>\", name = name))\n+                } else {\n+                    None\n+                }\n             }\n             _ => None,\n         }\n@@ -3546,7 +3552,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n     if let Some(v) = c.impls.get(&it.def_id) {\n         let ret = v.iter()\n                    .filter(|i| i.inner_impl().trait_.is_none())\n-                   .flat_map(|i| get_methods(i.inner_impl()))\n+                   .flat_map(|i| get_methods(i.inner_impl(), false))\n                    .collect::<String>();\n         if !ret.is_empty() {\n             out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#methods\\\">Methods\\\n@@ -3574,17 +3580,23 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         out.push_str(\"</a>\");\n                         let ret = impls.iter()\n                                        .filter(|i| i.inner_impl().trait_.is_none())\n-                                       .flat_map(|i| get_methods(i.inner_impl()))\n+                                       .flat_map(|i| get_methods(i.inner_impl(), true))\n                                        .collect::<String>();\n                         out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", ret));\n                     }\n                 }\n             }\n+            let mut links = HashSet::new();\n             let ret = v.iter()\n                        .filter_map(|i| if let Some(ref i) = i.inner_impl().trait_ {\n                            let out = format!(\"{:#}\", i).replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n                            let encoded = small_url_encode(&format!(\"{:#}\", i));\n-                           Some(format!(\"<a href=\\\"#impl-{:#}\\\">{}</a>\", encoded, out))\n+                           let generated = format!(\"<a href=\\\"#impl-{}\\\">{}</a>\", encoded, out);\n+                           if !links.contains(&generated) && links.insert(generated.clone()) {\n+                               Some(generated)\n+                           } else {\n+                               None\n+                           }\n                        } else {\n                            None\n                        })"}, {"sha": "e0153e1e6f67c0cb83bfd91ce0d3326667d00cd8", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fa521c491b365b354771213186e35c2e2e7a628/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa521c491b365b354771213186e35c2e2e7a628/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=6fa521c491b365b354771213186e35c2e2e7a628", "patch": "@@ -69,15 +69,32 @@ struct FileEntry {\n \n type Cache = HashMap<PathBuf, FileEntry>;\n \n+fn small_url_encode(s: &str) -> String {\n+    s.replace(\"<\", \"%3C\")\n+     .replace(\">\", \"%3E\")\n+     .replace(\" \", \"%20\")\n+     .replace(\"?\", \"%3F\")\n+     .replace(\"'\", \"%27\")\n+     .replace(\"&\", \"%26\")\n+     .replace(\",\", \"%2C\")\n+     .replace(\":\", \"%3A\")\n+     .replace(\";\", \"%3B\")\n+     .replace(\"[\", \"%5B\")\n+     .replace(\"]\", \"%5D\")\n+}\n+\n impl FileEntry {\n     fn parse_ids(&mut self, file: &Path, contents: &str, errors: &mut bool) {\n         if self.ids.is_empty() {\n             with_attrs_in_source(contents, \" id\", |fragment, i, _| {\n                 let frag = fragment.trim_left_matches(\"#\").to_owned();\n+                let encoded = small_url_encode(&frag);\n                 if !self.ids.insert(frag) {\n                     *errors = true;\n                     println!(\"{}:{}: id is not unique: `{}`\", file.display(), i, fragment);\n                 }\n+                // Just in case, we also add the encoded id.\n+                self.ids.insert(encoded);\n             });\n         }\n     }"}]}