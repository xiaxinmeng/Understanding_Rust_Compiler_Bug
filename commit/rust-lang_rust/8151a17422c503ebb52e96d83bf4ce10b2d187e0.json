{"sha": "8151a17422c503ebb52e96d83bf4ce10b2d187e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNTFhMTc0MjJjNTAzZWJiNTJlOTZkODNiZjRjZTEwYjJkMTg3ZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-02T08:45:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-02T08:45:02Z"}, "message": "Auto merge of #4049 - airt:fix-4033-search_is_some, r=flip1995\n\nFix #4033 search_is_some\n\nFixes #4033.\n\nSuggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()` (Lint [search_is_some](https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some))\n\nFnDecl of `find`:\n\n```rust\nfn find<P>(&mut self, mut p: P) -> Option<Self::Item> where\n    P: FnMut(&Self::Item) -> bool\n```\n\nFnDecl of `any`:\n\n```rust\nfn any<F>(&mut self, mut f: F) -> bool where\n    F: FnMut(Self::Item) -> bool\n```\n\nIf match on `|&_|` in closure of `find`, only use `|_|` in the suggestion.\n\nPS. It's the first time that I have used the `hir` API, please correct me if there is any mistake \ud83d\ude3a", "tree": {"sha": "9285a7c1000f17f60cad5474e314b436d985a617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9285a7c1000f17f60cad5474e314b436d985a617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8151a17422c503ebb52e96d83bf4ce10b2d187e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8151a17422c503ebb52e96d83bf4ce10b2d187e0", "html_url": "https://github.com/rust-lang/rust/commit/8151a17422c503ebb52e96d83bf4ce10b2d187e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8151a17422c503ebb52e96d83bf4ce10b2d187e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf5d7f04cc73f99ee19be6b93304666f5845665", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf5d7f04cc73f99ee19be6b93304666f5845665", "html_url": "https://github.com/rust-lang/rust/commit/1cf5d7f04cc73f99ee19be6b93304666f5845665"}, {"sha": "d063516c85a2d0ae368911bd8ffe3a9459a252ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d063516c85a2d0ae368911bd8ffe3a9459a252ba", "html_url": "https://github.com/rust-lang/rust/commit/d063516c85a2d0ae368911bd8ffe3a9459a252ba"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "4f8d29a88d677132e1fd405d95ebd04463492f29", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8151a17422c503ebb52e96d83bf4ce10b2d187e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8151a17422c503ebb52e96d83bf4ce10b2d187e0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=8151a17422c503ebb52e96d83bf4ce10b2d187e0", "patch": "@@ -2059,6 +2059,19 @@ fn lint_search_is_some<'a, 'tcx>(\n         );\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n+            // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n+            let any_search_snippet = if_chain! {\n+                if search_method == \"find\";\n+                if let hir::ExprKind::Closure(_, _, body_id, ..) = search_args[1].node;\n+                let closure_body = cx.tcx.hir().body(body_id);\n+                if let Some(closure_arg) = closure_body.arguments.get(0);\n+                if let hir::PatKind::Ref(..) = closure_arg.pat.node;\n+                then {\n+                    Some(search_snippet.replacen('&', \"\", 1))\n+                } else {\n+                    None\n+                }\n+            };\n             // add note if not multi-line\n             span_note_and_lint(\n                 cx,\n@@ -2067,8 +2080,10 @@ fn lint_search_is_some<'a, 'tcx>(\n                 &msg,\n                 expr.span,\n                 &format!(\n-                    \"replace `{0}({1}).is_some()` with `any({1})`\",\n-                    search_method, search_snippet\n+                    \"replace `{0}({1}).is_some()` with `any({2})`\",\n+                    search_method,\n+                    search_snippet,\n+                    any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                 ),\n             );\n         } else {"}, {"sha": "4bf53acf01ef294e706ca29b93e361f414e28cdc", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8151a17422c503ebb52e96d83bf4ce10b2d187e0/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8151a17422c503ebb52e96d83bf4ce10b2d187e0/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=8151a17422c503ebb52e96d83bf4ce10b2d187e0", "patch": "@@ -155,7 +155,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n-   = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n+   = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n   --> $DIR/methods.rs:236:13"}]}