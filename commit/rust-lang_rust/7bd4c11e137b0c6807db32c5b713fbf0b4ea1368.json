{"sha": "7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "node_id": "C_kwDOAAsO6NoAKDdiZDRjMTFlMTM3YjBjNjgwN2RiMzJjNWI3MTNmYmYwYjRlYTEzNjg", "commit": {"author": {"name": "harpsword", "email": "harpswordyyl@gmail.com", "date": "2022-05-08T03:06:52Z"}, "committer": {"name": "harpsword", "email": "harpswordyyl@gmail.com", "date": "2022-05-14T11:19:55Z"}, "message": "fix diagnostics location map incorrectly from rustc span to lsp position for non-BMP char", "tree": {"sha": "cc15e7bc0ee6b1b25b6d2f1e792ae2ed101237b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc15e7bc0ee6b1b25b6d2f1e792ae2ed101237b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "html_url": "https://github.com/rust-lang/rust/commit/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/comments", "author": {"login": "harpsword", "id": 10148927, "node_id": "MDQ6VXNlcjEwMTQ4OTI3", "avatar_url": "https://avatars.githubusercontent.com/u/10148927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpsword", "html_url": "https://github.com/harpsword", "followers_url": "https://api.github.com/users/harpsword/followers", "following_url": "https://api.github.com/users/harpsword/following{/other_user}", "gists_url": "https://api.github.com/users/harpsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpsword/subscriptions", "organizations_url": "https://api.github.com/users/harpsword/orgs", "repos_url": "https://api.github.com/users/harpsword/repos", "events_url": "https://api.github.com/users/harpsword/events{/privacy}", "received_events_url": "https://api.github.com/users/harpsword/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harpsword", "id": 10148927, "node_id": "MDQ6VXNlcjEwMTQ4OTI3", "avatar_url": "https://avatars.githubusercontent.com/u/10148927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpsword", "html_url": "https://github.com/harpsword", "followers_url": "https://api.github.com/users/harpsword/followers", "following_url": "https://api.github.com/users/harpsword/following{/other_user}", "gists_url": "https://api.github.com/users/harpsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpsword/subscriptions", "organizations_url": "https://api.github.com/users/harpsword/orgs", "repos_url": "https://api.github.com/users/harpsword/repos", "events_url": "https://api.github.com/users/harpsword/events{/privacy}", "received_events_url": "https://api.github.com/users/harpsword/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5bbec9b60010dd7389a084c56693baf6bda780", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5bbec9b60010dd7389a084c56693baf6bda780", "html_url": "https://github.com/rust-lang/rust/commit/5d5bbec9b60010dd7389a084c56693baf6bda780"}], "stats": {"total": 365, "additions": 339, "deletions": 26}, "files": [{"sha": "a100fa07ffdd501c8f5972198a4e38e07b8ba644", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_range_map_lsp_position.txt", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_range_map_lsp_position.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_range_map_lsp_position.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_range_map_lsp_position.txt?ref=7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "patch": "@@ -0,0 +1,184 @@\n+[\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            cannot_be_a_base: false,\n+            username: \"\",\n+            password: None,\n+            host: None,\n+            port: None,\n+            path: \"/test/crates/test_diagnostics/src/main.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 3,\n+                    character: 17,\n+                },\n+                end: Position {\n+                    line: 3,\n+                    character: 27,\n+                },\n+            },\n+            severity: Some(\n+                Error,\n+            ),\n+            code: Some(\n+                String(\n+                    \"E0308\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        cannot_be_a_base: false,\n+                        username: \"\",\n+                        password: None,\n+                        host: Some(\n+                            Domain(\n+                                \"doc.rust-lang.org\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/error-index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"E0308\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"mismatched types\\nexpected `u32`, found `&str`\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                cannot_be_a_base: false,\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/test_diagnostics/src/main.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 3,\n+                                    character: 11,\n+                                },\n+                                end: Position {\n+                                    line: 3,\n+                                    character: 14,\n+                                },\n+                            },\n+                        },\n+                        message: \"expected due to this\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fix: None,\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            cannot_be_a_base: false,\n+            username: \"\",\n+            password: None,\n+            host: None,\n+            port: None,\n+            path: \"/test/crates/test_diagnostics/src/main.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 3,\n+                    character: 11,\n+                },\n+                end: Position {\n+                    line: 3,\n+                    character: 14,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"E0308\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        cannot_be_a_base: false,\n+                        username: \"\",\n+                        password: None,\n+                        host: Some(\n+                            Domain(\n+                                \"doc.rust-lang.org\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/error-index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"E0308\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"expected due to this\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                cannot_be_a_base: false,\n+                                username: \"\",\n+                                password: None,\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/crates/test_diagnostics/src/main.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 3,\n+                                    character: 17,\n+                                },\n+                                end: Position {\n+                                    line: 3,\n+                                    character: 27,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fix: None,\n+    },\n+]"}, {"sha": "02621f54df449bb2b8f538bcffe59c7f6a267d8a", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 153, "deletions": 26, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "patch": "@@ -3,11 +3,19 @@\n use std::collections::HashMap;\n \n use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan};\n+use ide::TextRange;\n use itertools::Itertools;\n use stdx::format_to;\n use vfs::{AbsPath, AbsPathBuf};\n \n-use crate::{lsp_ext, to_proto::url_from_abs_path};\n+use crate::{\n+    from_proto,\n+    global_state::GlobalStateSnapshot,\n+    line_index::OffsetEncoding,\n+    lsp_ext,\n+    to_proto::{self, url_from_abs_path},\n+    Result,\n+};\n \n use super::{DiagnosticsMapConfig, Fix};\n \n@@ -57,23 +65,68 @@ fn location(\n     config: &DiagnosticsMapConfig,\n     workspace_root: &AbsPath,\n     span: &DiagnosticSpan,\n+    snap: &GlobalStateSnapshot,\n ) -> lsp_types::Location {\n     let file_name = resolve_path(config, workspace_root, &span.file_name);\n     let uri = url_from_abs_path(&file_name);\n \n-    // FIXME: this doesn't handle UTF16 offsets correctly\n-    let range = lsp_types::Range::new(\n-        lsp_types::Position::new(\n-            (span.line_start as u32).saturating_sub(1),\n-            (span.column_start as u32).saturating_sub(1),\n-        ),\n-        lsp_types::Position::new(\n-            (span.line_end as u32).saturating_sub(1),\n-            (span.column_end as u32).saturating_sub(1),\n-        ),\n-    );\n-\n-    lsp_types::Location { uri, range }\n+    let range = range(span, snap, &uri).unwrap_or_else(|_| {\n+        let offset_encoding = snap.config.offset_encoding();\n+        lsp_types::Range::new(\n+            position(&offset_encoding, span, span.line_start, span.column_start),\n+            position(&offset_encoding, span, span.line_end, span.column_end),\n+        )\n+    });\n+    lsp_types::Location::new(uri, range)\n+}\n+\n+fn range(\n+    span: &DiagnosticSpan,\n+    snap: &GlobalStateSnapshot,\n+    uri: &lsp_types::Url,\n+) -> Result<lsp_types::Range> {\n+    let file_id = from_proto::file_id(snap, &uri)?;\n+    let line_index = snap.file_line_index(file_id)?;\n+    let range =\n+        to_proto::range(&line_index, TextRange::new(span.byte_start.into(), span.byte_end.into()));\n+    Ok(range)\n+}\n+\n+fn position(\n+    offset_encoding: &OffsetEncoding,\n+    span: &DiagnosticSpan,\n+    line_offset: usize,\n+    column_offset: usize,\n+) -> lsp_types::Position {\n+    let line_index = line_offset - span.line_start;\n+\n+    let mut true_column_offset = column_offset;\n+    if let Some(line) = span.text.get(line_index) {\n+        if line.text.chars().count() == line.text.len() {\n+            // all utf-8\n+            return lsp_types::Position {\n+                line: (line_offset as u32).saturating_sub(1),\n+                character: (column_offset as u32).saturating_sub(1),\n+            };\n+        }\n+        let mut char_offset = 0;\n+        let len_func = match offset_encoding {\n+            OffsetEncoding::Utf8 => char::len_utf8,\n+            OffsetEncoding::Utf16 => char::len_utf16,\n+        };\n+        for c in line.text.chars() {\n+            char_offset += 1;\n+            if char_offset > column_offset {\n+                break;\n+            }\n+            true_column_offset += len_func(c) - 1;\n+        }\n+    }\n+\n+    lsp_types::Position {\n+        line: (line_offset as u32).saturating_sub(1),\n+        character: (true_column_offset as u32).saturating_sub(1),\n+    }\n }\n \n /// Extracts a suitable \"primary\" location from a rustc diagnostic.\n@@ -84,18 +137,19 @@ fn primary_location(\n     config: &DiagnosticsMapConfig,\n     workspace_root: &AbsPath,\n     span: &DiagnosticSpan,\n+    snap: &GlobalStateSnapshot,\n ) -> lsp_types::Location {\n     let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n     for span in span_stack.clone() {\n         let abs_path = resolve_path(config, workspace_root, &span.file_name);\n         if !is_dummy_macro_file(&span.file_name) && abs_path.starts_with(workspace_root) {\n-            return location(config, workspace_root, span);\n+            return location(config, workspace_root, span, snap);\n         }\n     }\n \n     // Fall back to the outermost macro invocation if no suitable span comes up.\n     let last_span = span_stack.last().unwrap();\n-    location(config, workspace_root, last_span)\n+    location(config, workspace_root, last_span, snap)\n }\n \n /// Converts a secondary Rust span to a LSP related information\n@@ -105,9 +159,10 @@ fn diagnostic_related_information(\n     config: &DiagnosticsMapConfig,\n     workspace_root: &AbsPath,\n     span: &DiagnosticSpan,\n+    snap: &GlobalStateSnapshot,\n ) -> Option<lsp_types::DiagnosticRelatedInformation> {\n     let message = span.label.clone()?;\n-    let location = location(config, workspace_root, span);\n+    let location = location(config, workspace_root, span, snap);\n     Some(lsp_types::DiagnosticRelatedInformation { location, message })\n }\n \n@@ -142,6 +197,7 @@ fn map_rust_child_diagnostic(\n     config: &DiagnosticsMapConfig,\n     workspace_root: &AbsPath,\n     rd: &flycheck::Diagnostic,\n+    snap: &GlobalStateSnapshot,\n ) -> MappedRustChildDiagnostic {\n     let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n     if spans.is_empty() {\n@@ -157,7 +213,7 @@ fn map_rust_child_diagnostic(\n             if !suggested_replacement.is_empty() {\n                 suggested_replacements.push(suggested_replacement);\n             }\n-            let location = location(config, workspace_root, span);\n+            let location = location(config, workspace_root, span, snap);\n             let edit = lsp_types::TextEdit::new(location.range, suggested_replacement.clone());\n \n             // Only actually emit a quickfix if the suggestion is \"valid enough\".\n@@ -186,21 +242,21 @@ fn map_rust_child_diagnostic(\n     if edit_map.is_empty() {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(config, workspace_root, spans[0]),\n+                location: location(config, workspace_root, spans[0], snap),\n                 message,\n             },\n             suggested_fix: None,\n         })\n     } else {\n         MappedRustChildDiagnostic::SubDiagnostic(SubDiagnostic {\n             related: lsp_types::DiagnosticRelatedInformation {\n-                location: location(config, workspace_root, spans[0]),\n+                location: location(config, workspace_root, spans[0], snap),\n                 message: message.clone(),\n             },\n             suggested_fix: Some(Fix {\n                 ranges: spans\n                     .iter()\n-                    .map(|&span| location(config, workspace_root, span).range)\n+                    .map(|&span| location(config, workspace_root, span, snap).range)\n                     .collect(),\n                 action: lsp_ext::CodeAction {\n                     title: message,\n@@ -242,6 +298,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     config: &DiagnosticsMapConfig,\n     rd: &flycheck::Diagnostic,\n     workspace_root: &AbsPath,\n+    snap: &GlobalStateSnapshot,\n ) -> Vec<MappedRustDiagnostic> {\n     let primary_spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n     if primary_spans.is_empty() {\n@@ -266,15 +323,15 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     let mut tags = Vec::new();\n \n     for secondary_span in rd.spans.iter().filter(|s| !s.is_primary) {\n-        let related = diagnostic_related_information(config, workspace_root, secondary_span);\n+        let related = diagnostic_related_information(config, workspace_root, secondary_span, snap);\n         if let Some(related) = related {\n             subdiagnostics.push(SubDiagnostic { related, suggested_fix: None });\n         }\n     }\n \n     let mut message = rd.message.clone();\n     for child in &rd.children {\n-        let child = map_rust_child_diagnostic(config, workspace_root, child);\n+        let child = map_rust_child_diagnostic(config, workspace_root, child, snap);\n         match child {\n             MappedRustChildDiagnostic::SubDiagnostic(sub) => {\n                 subdiagnostics.push(sub);\n@@ -318,7 +375,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let primary_location = primary_location(config, workspace_root, primary_span);\n+            let primary_location = primary_location(config, workspace_root, primary_span, snap);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -348,7 +405,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 // generated that code.\n                 let is_in_macro_call = i != 0;\n \n-                let secondary_location = location(config, workspace_root, span);\n+                let secondary_location = location(config, workspace_root, span, snap);\n                 if secondary_location == primary_location {\n                     continue;\n                 }\n@@ -478,9 +535,12 @@ fn clippy_code_description(code: Option<&str>) -> Option<lsp_types::CodeDescript\n mod tests {\n     use std::{convert::TryInto, path::Path};\n \n+    use crate::{config::Config, global_state::GlobalState};\n+\n     use super::*;\n \n     use expect_test::{expect_file, ExpectFile};\n+    use lsp_types::ClientCapabilities;\n \n     fn check(diagnostics_json: &str, expect: ExpectFile) {\n         check_with_config(DiagnosticsMapConfig::default(), diagnostics_json, expect)\n@@ -489,7 +549,13 @@ mod tests {\n     fn check_with_config(config: DiagnosticsMapConfig, diagnostics_json: &str, expect: ExpectFile) {\n         let diagnostic: flycheck::Diagnostic = serde_json::from_str(diagnostics_json).unwrap();\n         let workspace_root: &AbsPath = Path::new(\"/test/\").try_into().unwrap();\n-        let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root);\n+        let (sender, _) = crossbeam_channel::unbounded();\n+        let state = GlobalState::new(\n+            sender,\n+            Config::new(workspace_root.to_path_buf(), ClientCapabilities::default()),\n+        );\n+        let snap = state.snapshot();\n+        let actual = map_rust_diagnostic_to_lsp(&config, &diagnostic, workspace_root, &snap);\n         expect.assert_debug_eq(&actual)\n     }\n \n@@ -1028,6 +1094,67 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn rustc_range_map_lsp_position() {\n+        check(\n+            r##\"{\n+            \"message\": \"mismatched types\",\n+            \"code\": {\n+                \"code\": \"E0308\",\n+                \"explanation\": \"Expected type did not match the received type.\\n\\nErroneous code examples:\\n\\n```compile_fail,E0308\\nfn plus_one(x: i32) -> i32 {\\n    x + 1\\n}\\n\\nplus_one(\\\"Not a number\\\");\\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\\n\\nif \\\"Not a bool\\\" {\\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\\n}\\n\\nlet x: f32 = \\\"Not a float\\\";\\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\\n//     |\\n//     expected due to this\\n```\\n\\nThis error occurs when an expression was used in a place where the compiler\\nexpected an expression of a different type. It can occur in several cases, the\\nmost common being when calling a function and passing an argument which has a\\ndifferent type than the matching type in the function declaration.\\n\"\n+            },\n+            \"level\": \"error\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"crates/test_diagnostics/src/main.rs\",\n+                    \"byte_start\": 87,\n+                    \"byte_end\": 105,\n+                    \"line_start\": 4,\n+                    \"line_end\": 4,\n+                    \"column_start\": 18,\n+                    \"column_end\": 24,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let x: u32 = \\\"\ud801\udc00\ud801\udc00\ud801\udc00\ud801\udc00\\\"; // 17-23\",\n+                            \"highlight_start\": 18,\n+                            \"highlight_end\": 24\n+                        }\n+                    ],\n+                    \"label\": \"expected `u32`, found `&str`\",\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"expansion\": null\n+                },\n+                {\n+                    \"file_name\": \"crates/test_diagnostics/src/main.rs\",\n+                    \"byte_start\": 81,\n+                    \"byte_end\": 84,\n+                    \"line_start\": 4,\n+                    \"line_end\": 4,\n+                    \"column_start\": 12,\n+                    \"column_end\": 15,\n+                    \"is_primary\": false,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let x: u32 = \\\"\ud801\udc00\ud801\udc00\ud801\udc00\ud801\udc00\\\"; // 17-23\",\n+                            \"highlight_start\": 12,\n+                            \"highlight_end\": 15\n+                        }\n+                    ],\n+                    \"label\": \"expected due to this\",\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": \"error[E0308]: mismatched types\\n --> crates/test_diagnostics/src/main.rs:4:18\\n  |\\n4 |     let x: u32 = \\\"\ud801\udc00\ud801\udc00\ud801\udc00\ud801\udc00\\\"; // 17-23\\n  |            ---   ^^^^^^ expected `u32`, found `&str`\\n  |            |\\n  |            expected due to this\\n\\n\"\n+        }\"##,\n+            expect_file!(\"./test_data/rustc_range_map_lsp_position.txt\"),\n+        )\n+    }\n+\n     #[test]\n     fn rustc_mismatched_type() {\n         check("}, {"sha": "856948a01273ed9e2170a8626b2146e5cfac6ea6", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd4c11e137b0c6807db32c5b713fbf0b4ea1368/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=7bd4c11e137b0c6807db32c5b713fbf0b4ea1368", "patch": "@@ -370,11 +370,13 @@ impl GlobalState {\n                 loop {\n                     match task {\n                         flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n+                            let snap = self.snapshot();\n                             let diagnostics =\n                                 crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n                                     &self.config.diagnostics_map(),\n                                     &diagnostic,\n                                     &workspace_root,\n+                                    &snap,\n                                 );\n                             for diag in diagnostics {\n                                 match url_to_file_id(&self.vfs.read().0, &diag.url) {"}]}