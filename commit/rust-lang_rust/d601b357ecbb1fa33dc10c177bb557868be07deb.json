{"sha": "d601b357ecbb1fa33dc10c177bb557868be07deb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDFiMzU3ZWNiYjFmYTMzZGMxMGMxNzdiYjU1Nzg2OGJlMDdkZWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T23:59:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-25T23:59:29Z"}, "message": "Debug GC glue enough that marking passes.", "tree": {"sha": "067e93c9dbb44db651b6278feb01d22251ae43d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/067e93c9dbb44db651b6278feb01d22251ae43d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d601b357ecbb1fa33dc10c177bb557868be07deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d601b357ecbb1fa33dc10c177bb557868be07deb", "html_url": "https://github.com/rust-lang/rust/commit/d601b357ecbb1fa33dc10c177bb557868be07deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d601b357ecbb1fa33dc10c177bb557868be07deb/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2474d497ae19472b4366f6d8d62e9a516787c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2474d497ae19472b4366f6d8d62e9a516787c3", "html_url": "https://github.com/rust-lang/rust/commit/2a2474d497ae19472b4366f6d8d62e9a516787c3"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "d90869f31273b301cf19e427501b01eb9c3870c2", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d601b357ecbb1fa33dc10c177bb557868be07deb/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/d601b357ecbb1fa33dc10c177bb557868be07deb/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=d601b357ecbb1fa33dc10c177bb557868be07deb", "patch": "@@ -758,11 +758,6 @@ let crawl_stack_calling_glue\n   let skip_jmp_fix = new_fixup \"skip jump\" in\n   let exit_jmp_fix = new_fixup \"exit jump\" in\n \n-    mov (rc edx) (c task_ptr);          (* switch back to rust stack    *)\n-    mov\n-      (rc esp)\n-      (c (edx_n Abi.task_field_rust_sp));\n-\n     push (ro ebp);                      (* save ebp at entry            *)\n \n     mark repeat_jmp_fix;\n@@ -810,10 +805,7 @@ let crawl_stack_calling_glue\n let gc_glue\n     (e:Il.emitter)\n     : unit =\n-  (* Mark pass. *)\n-  crawl_stack_calling_glue e Abi.frame_glue_fns_field_mark;\n \n-  (* Sweep pass. *)\n   let emit = Il.emit e in\n   let mov dst src = emit (Il.umov dst src) in\n   let push x = emit (Il.Push x) in\n@@ -824,11 +816,26 @@ let gc_glue\n   let ecx_n = word_n (Il.Hreg ecx) in\n   let codefix fix = Il.CodePtr (Il.ImmPtr (fix, Il.CodeTy)) in\n   let mark fix = Il.emit_full e (Some fix) [] Il.Dead in\n-\n   let repeat_jmp_fix = new_fixup \"repeat jump\" in\n   let skip_jmp_fix = new_fixup \"skip jump\" in\n   let exit_jmp_fix = new_fixup \"exit jump\" in\n \n+    mov (rc edx) (c task_ptr);          (* switch back to rust stack    *)\n+    mov\n+      (rc esp)\n+      (c (edx_n Abi.task_field_rust_sp));\n+\n+    (* Mark pass. *)\n+    save_callee_saves e;\n+    push (ro eax);\n+    crawl_stack_calling_glue e Abi.frame_glue_fns_field_mark;\n+\n+    (* For now, stop after marking; sweep is still buggy. *)\n+    pop (rc eax);\n+    restore_callee_saves e;\n+    Il.emit e Il.Ret;\n+\n+    (* Sweep pass. *)\n     mov (rc edx) (c task_ptr);\n     mov (rc edx) (c (edx_n Abi.task_field_gc_alloc_chain));\n     mark repeat_jmp_fix;\n@@ -896,13 +903,23 @@ let unwind_glue\n     (nabi:nabi)\n     (exit_task_fixup:fixup)\n     : unit =\n-  crawl_stack_calling_glue e Abi.frame_glue_fns_field_drop;\n-  let callee =\n-    Abi.load_fixup_codeptr\n-      e (h eax) exit_task_fixup false nabi.nabi_indirect\n-  in\n-    emit_c_call\n-      e (rc eax) (h edx) (h ecx) nabi false callee [| (c task_ptr) |];\n+\n+  let emit = Il.emit e in\n+  let mov dst src = emit (Il.umov dst src) in\n+  let edx_n = word_n (Il.Hreg edx) in\n+\n+    mov (rc edx) (c task_ptr);          (* switch back to rust stack    *)\n+    mov\n+      (rc esp)\n+      (c (edx_n Abi.task_field_rust_sp));\n+\n+    crawl_stack_calling_glue e Abi.frame_glue_fns_field_drop;\n+    let callee =\n+      Abi.load_fixup_codeptr\n+        e (h eax) exit_task_fixup false nabi.nabi_indirect\n+    in\n+      emit_c_call\n+        e (rc eax) (h edx) (h ecx) nabi false callee [| (c task_ptr) |];\n ;;\n \n "}]}