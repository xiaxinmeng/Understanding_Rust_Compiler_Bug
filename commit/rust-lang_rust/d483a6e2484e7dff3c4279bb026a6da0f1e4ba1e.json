{"sha": "d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ODNhNmUyNDg0ZTdkZmYzYzQyNzliYjAyNmE2ZGEwZjFlNGJhMWU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-11T17:19:18Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-11T17:19:18Z"}, "message": "add item_post methods", "tree": {"sha": "ebd1b72cb7f091a1e66d6d22fd975403a2663029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd1b72cb7f091a1e66d6d22fd975403a2663029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e", "html_url": "https://github.com/rust-lang/rust/commit/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8fa8410cdda074f37dd948dc48efc20137d4d62", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8fa8410cdda074f37dd948dc48efc20137d4d62", "html_url": "https://github.com/rust-lang/rust/commit/a8fa8410cdda074f37dd948dc48efc20137d4d62"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "6282a175e9a4a6005576254ac3a392bac683544e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e", "patch": "@@ -758,6 +758,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n             run_lints!(cx, check_item, late_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             hir_visit::walk_item(cx, it);\n+            run_lints!(cx, check_item_post, late_passes, it);\n         })\n     }\n \n@@ -919,6 +920,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n             run_lints!(cx, check_item, early_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             ast_visit::walk_item(cx, it);\n+            run_lints!(cx, check_item, early_passes, it);\n         })\n     }\n "}, {"sha": "5e2e8c4c6d5f8877cf02e1f5df72efbb64f2c564", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d483a6e2484e7dff3c4279bb026a6da0f1e4ba1e", "patch": "@@ -136,6 +136,7 @@ pub trait LateLintPass: LintPass {\n     fn check_mod(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &LateContext, _: &hir::ForeignItem) { }\n     fn check_item(&mut self, _: &LateContext, _: &hir::Item) { }\n+    fn check_item_post(&mut self, _: &LateContext, _: &hir::Item) { }\n     fn check_local(&mut self, _: &LateContext, _: &hir::Local) { }\n     fn check_block(&mut self, _: &LateContext, _: &hir::Block) { }\n     fn check_block_post(&mut self, _: &LateContext, _: &hir::Block) { }\n@@ -180,6 +181,7 @@ pub trait EarlyLintPass: LintPass {\n     fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n     fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }\n+    fn check_item_post(&mut self, _: &EarlyContext, _: &ast::Item) { }\n     fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }\n     fn check_block(&mut self, _: &EarlyContext, _: &ast::Block) { }\n     fn check_block_post(&mut self, _: &EarlyContext, _: &ast::Block) { }"}]}