{"sha": "59481823675a7392e8160b659b0f7fa119df60fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDgxODIzNjc1YTczOTJlODE2MGI2NTliMGY3ZmExMTlkZjYwZmQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-10T17:39:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-18T16:23:36Z"}, "message": "Add Span field for Generics structs", "tree": {"sha": "01405802c217ec5d3d8aa6c2dd9cd46e95c6fdda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01405802c217ec5d3d8aa6c2dd9cd46e95c6fdda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59481823675a7392e8160b659b0f7fa119df60fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59481823675a7392e8160b659b0f7fa119df60fd", "html_url": "https://github.com/rust-lang/rust/commit/59481823675a7392e8160b659b0f7fa119df60fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59481823675a7392e8160b659b0f7fa119df60fd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "html_url": "https://github.com/rust-lang/rust/commit/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe"}], "stats": {"total": 89, "additions": 37, "deletions": 52}, "files": [{"sha": "0b362bac8882b01f782b4534f71a3d0b8630ee45", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -577,13 +577,14 @@ pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: Option<Lifetime>, fld: &mut T) ->\n     o_lt.map(|lt| fld.fold_lifetime(lt))\n }\n \n-pub fn noop_fold_generics<T: Folder>(Generics { ty_params, lifetimes, where_clause }: Generics,\n+pub fn noop_fold_generics<T: Folder>(Generics {ty_params, lifetimes, where_clause, span}: Generics,\n                                      fld: &mut T)\n                                      -> Generics {\n     Generics {\n         ty_params: fld.fold_ty_params(ty_params),\n         lifetimes: fld.fold_lifetime_defs(lifetimes),\n         where_clause: fld.fold_where_clause(where_clause),\n+        span: fld.new_span(span),\n     }\n }\n "}, {"sha": "cb219bbe18ae816f46574331514c85acb5c4528a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -466,6 +466,7 @@ impl<'a> LoweringContext<'a> {\n             ty_params: self.lower_ty_params(&g.ty_params),\n             lifetimes: self.lower_lifetime_defs(&g.lifetimes),\n             where_clause: self.lower_where_clause(&g.where_clause),\n+            span: g.span,\n         }\n     }\n "}, {"sha": "f351384c2b89e01dede2b21e80d3d1a27cd73643", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -36,7 +36,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use util::nodemap::{NodeMap, FnvHashSet};\n \n-use syntax_pos::{BytePos, mk_sp, Span, ExpnId};\n+use syntax_pos::{mk_sp, Span, ExpnId, DUMMY_SP};\n use syntax::codemap::{self, respan, Spanned};\n use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n@@ -301,6 +301,7 @@ pub struct Generics {\n     pub lifetimes: HirVec<LifetimeDef>,\n     pub ty_params: HirVec<TyParam>,\n     pub where_clause: WhereClause,\n+    pub span: Span,\n }\n \n impl Generics {\n@@ -312,6 +313,7 @@ impl Generics {\n                 id: DUMMY_NODE_ID,\n                 predicates: HirVec::new(),\n             },\n+            span: DUMMY_SP,\n         }\n     }\n \n@@ -326,38 +328,6 @@ impl Generics {\n     pub fn is_parameterized(&self) -> bool {\n         self.is_lt_parameterized() || self.is_type_parameterized()\n     }\n-\n-    // Does return a span which includes lifetimes and type parameters,\n-    // not where clause.\n-    pub fn span(&self) -> Option<Span> {\n-        if !self.is_parameterized() {\n-            None\n-        } else {\n-            let mut span: Option<Span> = None;\n-            for lifetime in self.lifetimes.iter() {\n-                if let Some(ref mut span) = span {\n-                    let life_span = lifetime.lifetime.span;\n-                    span.hi = if span.hi > life_span.hi { span.hi } else { life_span.hi };\n-                    span.lo = if span.lo < life_span.lo { span.lo } else { life_span.lo };\n-                } else {\n-                    span = Some(lifetime.lifetime.span.clone());\n-                }\n-            }\n-            for ty_param in self.ty_params.iter() {\n-                if let Some(ref mut span) = span {\n-                    span.lo = if span.lo < ty_param.span.lo { span.lo } else { ty_param.span.lo };\n-                    span.hi = if span.hi > ty_param.span.hi { span.hi } else { ty_param.span.hi };\n-                } else {\n-                    span = Some(ty_param.span.clone());\n-                }\n-            }\n-            if let Some(ref mut span) = span {\n-                span.lo = span.lo - BytePos(1);\n-                span.hi = span.hi + BytePos(1);\n-            }\n-            span\n-        }\n-    }\n }\n \n /// A `where` clause in a definition"}, {"sha": "1cbead123d8715183b366a90e3f1debbb3e48491", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -523,6 +523,7 @@ impl<'a> State<'a> {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: hir::HirVec::new(),\n                     },\n+                    span: syntax_pos::DUMMY_SP,\n                 };\n                 self.print_ty_fn(f.abi, f.unsafety, &f.decl, None, &generics)?;\n             }\n@@ -2224,6 +2225,7 @@ impl<'a> State<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: hir::HirVec::new(),\n             },\n+            span: syntax_pos::DUMMY_SP,\n         };\n         self.print_fn(decl,\n                       unsafety,"}, {"sha": "03ad12d2d99f85ff3edb9bb5e0d4e25e118d1ac4", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -1293,6 +1293,7 @@ impl<'a, 'gcx, 'tcx> Rebuilder<'a, 'gcx, 'tcx> {\n             lifetimes: lifetimes.into(),\n             ty_params: ty_params,\n             where_clause: where_clause,\n+            span: generics.span,\n         }\n     }\n "}, {"sha": "b24eb8cba1cf3c0ed2bfc9ac62838bf10ca49910", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -216,10 +216,10 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n                         hir::ItemFn(_, _, _, _, ref generics, _) => {\n-                            if let Some(gen_span) = generics.span() {\n-                                struct_span_err!(ccx.tcx.sess, gen_span, E0131,\n+                            if generics.is_parameterized() {\n+                                struct_span_err!(ccx.tcx.sess, generics.span, E0131,\n                                          \"main function is not allowed to have type parameters\")\n-                                    .span_label(gen_span,\n+                                    .span_label(generics.span,\n                                                 &format!(\"main cannot have type parameters\"))\n                                     .emit();\n                                 return;\n@@ -269,10 +269,9 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n                     match it.node {\n                         hir::ItemFn(_,_,_,_,ref ps,_)\n                         if ps.is_parameterized() => {\n-                            let sp = if let Some(sp) = ps.span() { sp } else { start_span };\n-                            struct_span_err!(tcx.sess, sp, E0132,\n+                            struct_span_err!(tcx.sess, ps.span, E0132,\n                                 \"start function is not allowed to have type parameters\")\n-                                .span_label(sp,\n+                                .span_label(ps.span,\n                                             &format!(\"start function cannot have type parameters\"))\n                                 .emit();\n                             return;"}, {"sha": "968956d3391a07e091b021e5dcb89b3372344366", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -336,7 +336,7 @@ pub struct TyParam {\n     pub id: NodeId,\n     pub bounds: TyParamBounds,\n     pub default: Option<P<Ty>>,\n-    pub span: Span\n+    pub span: Span,\n }\n \n /// Represents lifetimes and type parameters attached to a declaration\n@@ -346,6 +346,7 @@ pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n     pub ty_params: P<[TyParam]>,\n     pub where_clause: WhereClause,\n+    pub span: Span,\n }\n \n impl Generics {\n@@ -368,7 +369,8 @@ impl Default for Generics {\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n-            }\n+            },\n+            span: DUMMY_SP,\n         }\n     }\n }"}, {"sha": "c566aa5661be0a89a5323890c81b4dca349c9c3a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -698,12 +698,13 @@ pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: Option<Lifetime>, fld: &mut T)\n     o_lt.map(|lt| fld.fold_lifetime(lt))\n }\n \n-pub fn noop_fold_generics<T: Folder>(Generics {ty_params, lifetimes, where_clause}: Generics,\n+pub fn noop_fold_generics<T: Folder>(Generics {ty_params, lifetimes, where_clause, span}: Generics,\n                                      fld: &mut T) -> Generics {\n     Generics {\n         ty_params: fld.fold_ty_params(ty_params),\n         lifetimes: fld.fold_lifetime_defs(lifetimes),\n         where_clause: fld.fold_where_clause(where_clause),\n+        span: fld.new_span(span),\n     }\n }\n "}, {"sha": "eb59a8e24d3fdc32a9ce9ced3a28be34116a8ae8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -674,7 +674,7 @@ pub fn integer_lit(s: &str,\n mod tests {\n     use super::*;\n     use std::rc::Rc;\n-    use syntax_pos::{Span, BytePos, Pos, NO_EXPANSION};\n+    use syntax_pos::{self, Span, BytePos, Pos, NO_EXPANSION};\n     use codemap::Spanned;\n     use ast::{self, PatKind};\n     use abi::Abi;\n@@ -945,7 +945,8 @@ mod tests {\n                                         where_clause: ast::WhereClause {\n                                             id: ast::DUMMY_NODE_ID,\n                                             predicates: Vec::new(),\n-                                        }\n+                                        },\n+                                        span: syntax_pos::DUMMY_SP,\n                                     },\n                                     P(ast::Block {\n                                         stmts: vec!(ast::Stmt {"}, {"sha": "19f44924067db4ec2ee092afa7a50b723e5ddd4d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -716,8 +716,8 @@ impl<'a> Parser<'a> {\n                 let gt_str = Parser::token_to_string(&token::Gt);\n                 let this_token_str = self.this_token_to_string();\n                 Err(self.fatal(&format!(\"expected `{}`, found `{}`\",\n-                                   gt_str,\n-                                   this_token_str)))\n+                                        gt_str,\n+                                        this_token_str)))\n             }\n         }\n     }\n@@ -4251,6 +4251,7 @@ impl<'a> Parser<'a> {\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     pub fn parse_generics(&mut self) -> PResult<'a, ast::Generics> {\n         maybe_whole!(self, NtGenerics);\n+        let span_lo = self.span.lo;\n \n         if self.eat(&token::Lt) {\n             let lifetime_defs = self.parse_lifetime_defs()?;\n@@ -4273,7 +4274,8 @@ impl<'a> Parser<'a> {\n                 where_clause: WhereClause {\n                     id: ast::DUMMY_NODE_ID,\n                     predicates: Vec::new(),\n-                }\n+                },\n+                span: mk_sp(span_lo, self.last_span.hi),\n             })\n         } else {\n             Ok(ast::Generics::default())"}, {"sha": "22b0bb2c07ad09452fa4947431a7b199bffa6b7d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -1001,6 +1001,7 @@ impl<'a> State<'a> {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n                     },\n+                    span: syntax_pos::DUMMY_SP,\n                 };\n                 try!(self.print_ty_fn(f.abi,\n                                  f.unsafety,\n@@ -2982,6 +2983,7 @@ impl<'a> State<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n             },\n+            span: syntax_pos::DUMMY_SP,\n         };\n         try!(self.print_fn(decl,\n                       unsafety,"}, {"sha": "6773088670f582e9fb5fb9af284590725cdf875c", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -488,7 +488,7 @@ impl<'a> TraitDef<'a> {\n             }\n         });\n \n-        let Generics { mut lifetimes, ty_params, mut where_clause } = self.generics\n+        let Generics { mut lifetimes, ty_params, mut where_clause, span } = self.generics\n             .to_generics(cx, self.span, type_ident, generics);\n         let mut ty_params = ty_params.into_vec();\n \n@@ -590,6 +590,7 @@ impl<'a> TraitDef<'a> {\n             lifetimes: lifetimes,\n             ty_params: P::from_vec(ty_params),\n             where_clause: where_clause,\n+            span: span,\n         };\n \n         // Create the reference to the trait."}, {"sha": "210878b7c9f0e09d3d62d1052cc967514bcece27", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -207,14 +207,16 @@ fn mk_ty_param(cx: &ExtCtxt,\n     cx.typaram(span, cx.ident_of(name), bounds, None)\n }\n \n-fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>) -> Generics {\n+fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, span: Span)\n+               -> Generics {\n     Generics {\n         lifetimes: lifetimes,\n         ty_params: P::from_vec(ty_params),\n         where_clause: ast::WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n         },\n+        span: span,\n     }\n }\n \n@@ -257,7 +259,7 @@ impl<'a> LifetimeBounds<'a> {\n                 }\n             })\n             .collect();\n-        mk_generics(lifetimes, ty_params)\n+        mk_generics(lifetimes, ty_params, span)\n     }\n }\n "}, {"sha": "91ff6b85a42ce071efb3077f2e3a3bb46eb87ec7", "filename": "src/test/compile-fail/E0132.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59481823675a7392e8160b659b0f7fa119df60fd/src%2Ftest%2Fcompile-fail%2FE0132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59481823675a7392e8160b659b0f7fa119df60fd/src%2Ftest%2Fcompile-fail%2FE0132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0132.rs?ref=59481823675a7392e8160b659b0f7fa119df60fd", "patch": "@@ -11,7 +11,7 @@\n #![feature(start)]\n \n #[start]\n-fn f<T>() {} //~ ERROR E0132\n+fn f< T >() {} //~ ERROR E0132\n              //~| NOTE start function cannot have type parameters\n \n fn main() {"}]}