{"sha": "a2d55146938972d7eecc19f9315f86d7ecb8f94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZDU1MTQ2OTM4OTcyZDdlZWNjMTlmOTMxNWY4NmQ3ZWNiOGY5NGI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-07-30T19:59:08Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-07-30T19:59:08Z"}, "message": "add docs for references as a primitive", "tree": {"sha": "8f38db638f482ef8b42a1ea185d91e2ae4cb98ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f38db638f482ef8b42a1ea185d91e2ae4cb98ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2d55146938972d7eecc19f9315f86d7ecb8f94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d55146938972d7eecc19f9315f86d7ecb8f94b", "html_url": "https://github.com/rust-lang/rust/commit/a2d55146938972d7eecc19f9315f86d7ecb8f94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2d55146938972d7eecc19f9315f86d7ecb8f94b/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc1baa2900ab344e8e8386aa8314b59051868ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1baa2900ab344e8e8386aa8314b59051868ca", "html_url": "https://github.com/rust-lang/rust/commit/5cc1baa2900ab344e8e8386aa8314b59051868ca"}], "stats": {"total": 161, "additions": 142, "deletions": 19}, "files": [{"sha": "39258dd3a2467500bb9ef17a2e6ba71d4ae5004d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2d55146938972d7eecc19f9315f86d7ecb8f94b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d55146938972d7eecc19f9315f86d7ecb8f94b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a2d55146938972d7eecc19f9315f86d7ecb8f94b", "patch": "@@ -1547,6 +1547,7 @@ pub enum PrimitiveType {\n     Array,\n     Tuple,\n     RawPointer,\n+    Reference,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n@@ -1581,6 +1582,7 @@ impl Type {\n             Array(..) | BorrowedRef { type_: box Array(..), .. } => Some(PrimitiveType::Array),\n             Tuple(..) => Some(PrimitiveType::Tuple),\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n+            BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             _ => None,\n         }\n     }\n@@ -1633,6 +1635,7 @@ impl PrimitiveType {\n             \"slice\" => Some(PrimitiveType::Slice),\n             \"tuple\" => Some(PrimitiveType::Tuple),\n             \"pointer\" => Some(PrimitiveType::RawPointer),\n+            \"reference\" => Some(PrimitiveType::Reference),\n             _ => None,\n         }\n     }\n@@ -1661,6 +1664,7 @@ impl PrimitiveType {\n             Slice => \"slice\",\n             Tuple => \"tuple\",\n             RawPointer => \"pointer\",\n+            Reference => \"reference\",\n         }\n     }\n \n@@ -2556,6 +2560,7 @@ fn build_deref_target_impls(cx: &DocContext,\n             Array => tcx.lang_items.slice_impl(),\n             Tuple => None,\n             RawPointer => tcx.lang_items.const_ptr_impl(),\n+            Reference => None,\n         };\n         if let Some(did) = did {\n             if !did.is_local() {\n@@ -2777,6 +2782,9 @@ fn resolve_type(cx: &DocContext,\n         Def::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(keywords::SelfType.name().to_string());\n         }\n+        Def::TyParam(..) if path.segments.len() == 1 => {\n+            return Generic(format!(\"{:#}\", path));\n+        }\n         Def::SelfTy(..) | Def::TyParam(..) | Def::AssociatedTy(..) => true,\n         _ => false,\n     };"}, {"sha": "33ab5cf47de2c452a9d1b7a0b5ec7904fe5a24aa", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a2d55146938972d7eecc19f9315f86d7ecb8f94b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d55146938972d7eecc19f9315f86d7ecb8f94b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a2d55146938972d7eecc19f9315f86d7ecb8f94b", "patch": "@@ -665,50 +665,48 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 _ => \"\".to_string(),\n             };\n             let m = MutableSpace(mutability);\n+            let amp = if f.alternate() {\n+                \"&\".to_string()\n+            } else {\n+                \"&amp;\".to_string()\n+            };\n             match **ty {\n                 clean::Slice(ref bt) => { // BorrowedRef{ ... Slice(T) } is &[T]\n                     match **bt {\n                         clean::Generic(_) => {\n                             if f.alternate() {\n                                 primitive_link(f, PrimitiveType::Slice,\n-                                    &format!(\"&{}{}[{:#}]\", lt, m, **bt))\n+                                    &format!(\"{}{}{}[{:#}]\", amp, lt, m, **bt))\n                             } else {\n                                 primitive_link(f, PrimitiveType::Slice,\n-                                    &format!(\"&amp;{}{}[{}]\", lt, m, **bt))\n+                                    &format!(\"{}{}{}[{}]\", amp, lt, m, **bt))\n                             }\n                         }\n                         _ => {\n+                            primitive_link(f, PrimitiveType::Slice,\n+                                           &format!(\"{}{}{}[\", amp, lt, m))?;\n                             if f.alternate() {\n-                                primitive_link(f, PrimitiveType::Slice,\n-                                               &format!(\"&{}{}[\", lt, m))?;\n                                 write!(f, \"{:#}\", **bt)?;\n                             } else {\n-                                primitive_link(f, PrimitiveType::Slice,\n-                                               &format!(\"&amp;{}{}[\", lt, m))?;\n                                 write!(f, \"{}\", **bt)?;\n                             }\n                             primitive_link(f, PrimitiveType::Slice, \"]\")\n                         }\n                     }\n                 }\n                 clean::ResolvedPath { typarams: Some(ref v), .. } if !v.is_empty() => {\n-                    if f.alternate() {\n-                        write!(f, \"&{}{}\", lt, m)?;\n-                    } else {\n-                        write!(f, \"&amp;{}{}\", lt, m)?;\n-                    }\n-                    write!(f, \"(\")?;\n+                    write!(f, \"{}{}{}(\", amp, lt, m)?;\n                     fmt_type(&ty, f, use_absolute)?;\n                     write!(f, \")\")\n                 }\n+                clean::Generic(..) => {\n+                    primitive_link(f, PrimitiveType::Reference,\n+                                   &format!(\"{}{}{}\", amp, lt, m))?;\n+                    fmt_type(&ty, f, use_absolute)\n+                }\n                 _ => {\n-                    if f.alternate() {\n-                        write!(f, \"&{}{}\", lt, m)?;\n-                        fmt_type(&ty, f, use_absolute)\n-                    } else {\n-                        write!(f, \"&amp;{}{}\", lt, m)?;\n-                        fmt_type(&ty, f, use_absolute)\n-                    }\n+                    write!(f, \"{}{}{}\", amp, lt, m)?;\n+                    fmt_type(&ty, f, use_absolute)\n                 }\n             }\n         }"}, {"sha": "84dba274a2e74c8769d8fa075c29f0e929a6094b", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/a2d55146938972d7eecc19f9315f86d7ecb8f94b/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2d55146938972d7eecc19f9315f86d7ecb8f94b/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=a2d55146938972d7eecc19f9315f86d7ecb8f94b", "patch": "@@ -722,3 +722,120 @@ mod prim_isize { }\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize { }\n+\n+#[doc(primitive = \"reference\")]\n+//\n+/// References, both shared and mutable.\n+///\n+/// A reference represents a borrow of some owned value. You can get one by using the `&` or `&mut`\n+/// operators on a value, or by using a `ref` or `ref mut` pattern.\n+///\n+/// For those familiar with pointers, a reference is just a pointer that is assumed to not be null.\n+/// In fact, `Option<&T>` has the same memory representation as a nullable pointer, and can be\n+/// passed across FFI boundaries as such.\n+///\n+/// In most cases, references can be used much like the original value. Field access, method\n+/// calling, and indexing work the same (save for mutability rules, of course). In addition, the\n+/// comparison operators transparently defer to the referent's implementation, allowing references\n+/// to be compared the same as owned values.\n+///\n+/// References have a lifetime attached to them, which represents the scope for which the borrow is\n+/// valid. A lifetime is said to \"outlive\" another one if its representative scope is as long or\n+/// longer than the other. The `'static` lifetime is the longest lifetime, which represents the\n+/// total life of the program. For example, string literals have a `'static` lifetime because the\n+/// text data is embedded into the binary of the program, rather than in an allocation that needs\n+/// to be dynamically managed.\n+///\n+/// `&mut T` references can be freely coerced into `&T` references with the same referent type, and\n+/// references with longer lifetimes can be freely coerced into references with shorter ones.\n+///\n+/// For more information on how to use references, see [the book's section on \"References and\n+/// Borrowing\"][book-refs].\n+///\n+/// [book-refs]: ../book/second-edition/ch04-02-references-and-borrowing.html\n+///\n+/// The following traits are implemented for all `&T`, regardless of the type of its referent:\n+///\n+/// * [`Copy`]\n+/// * [`Clone`] \\(Note that this will not defer to `T`'s `Clone` implementation if it exists!)\n+/// * [`Deref`]\n+/// * [`Borrow`]\n+/// * [`Pointer`]\n+///\n+/// [`Copy`]: marker/trait.Copy.html\n+/// [`Clone`]: clone/trait.Clone.html\n+/// [`Deref`]: ops/trait.Deref.html\n+/// [`Borrow`]: borrow/trait.Borrow.html\n+/// [`Pointer`]: fmt/trait.Pointer.html\n+///\n+/// `&mut T` references get all of the above except `Copy` and `Clone` (to prevent creating\n+/// multiple simultaneous mutable borrows), plus the following, regardless of the type of its\n+/// referent:\n+///\n+/// * [`DerefMut`]\n+/// * [`BorrowMut`]\n+///\n+/// [`DerefMut`]: ops/trait.DerefMut.html\n+/// [`BorrowMut`]: borrow/trait.BorrowMut.html\n+///\n+/// The following traits are implemented on `&T` references if the underlying `T` also implements\n+/// that trait:\n+///\n+/// * All the traits in [`std::fmt`] except [`Pointer`] and [`fmt::Write`]\n+/// * [`PartialOrd`]\n+/// * [`Ord`]\n+/// * [`PartialEq`]\n+/// * [`Eq`]\n+/// * [`AsRef`]\n+/// * [`Fn`] \\(in addition, `&T` references get [`FnMut`] and [`FnOnce`] if `T: Fn`)\n+/// * [`Hash`]\n+/// * [`ToSocketAddrs`]\n+///\n+/// [`std::fmt`]: fmt/index.html\n+/// [`fmt::Write`]: fmt/trait.Write.html\n+/// [`PartialOrd`]: cmp/trait.PartialOrd.html\n+/// [`Ord`]: cmp/trait.Ord.html\n+/// [`PartialEq`]: cmp/trait.PartialEq.html\n+/// [`Eq`]: cmp/trait.Eq.html\n+/// [`AsRef`]: convert/trait.AsRef.html\n+/// [`Fn`]: ops/trait.Fn.html\n+/// [`FnMut`]: ops/trait.FnMut.html\n+/// [`FnOnce`]: ops/trait.FnOnce.html\n+/// [`Hash`]: hash/trait.Hash.html\n+/// [`ToSocketAddrs`]: net/trait.ToSocketAddrs.html\n+///\n+/// `&mut T` references get all of the above except `ToSocketAddrs`, plus the following, if `T`\n+/// implements that trait:\n+///\n+/// * [`AsMut`]\n+/// * [`FnMut`] \\(in addition, `&mut T` references get [`FnOnce`] if `T: FnMut`)\n+/// * [`fmt::Write`]\n+/// * [`Iterator`]\n+/// * [`DoubleEndedIterator`]\n+/// * [`ExactSizeIterator`]\n+/// * [`FusedIterator`]\n+/// * [`TrustedLen`]\n+/// * [`Send`] \\(note that `&T` references only get `Send` if `T: Sync`)\n+/// * [`io::Write`]\n+/// * [`Read`]\n+/// * [`Seek`]\n+/// * [`BufRead`]\n+///\n+/// [`AsMut`]: convert/trait.AsMut.html\n+/// [`Iterator`]: iter/trait.Iterator.html\n+/// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n+/// [`ExactSizeIterator`]: iter/trait.ExactSizeIterator.html\n+/// [`FusedIterator`]: iter/trait.FusedIterator.html\n+/// [`TrustedLen`]: iter/trait.TrustedLen.html\n+/// [`Send`]: marker/trait.Send.html\n+/// [`io::Write`]: io/trait.Write.html\n+/// [`Read`]: io/trait.Read.html\n+/// [`Seek`]: io/trait.Seek.html\n+/// [`BufRead`]: io/trait.BufRead.html\n+///\n+/// Note that due to method call deref coercion, simply calling a trait method will act like they\n+/// work on references as well as they do on owned values! The implementations described here are\n+/// meant for generic contexts, where the final type `T` is a type parameter or otherwise not\n+/// locally known.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+mod prim_ref { }"}]}