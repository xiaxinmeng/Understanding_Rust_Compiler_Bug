{"sha": "7ee72256eba49faa53b6885460b5769279893885", "node_id": "C_kwDOAAsO6NoAKDdlZTcyMjU2ZWJhNDlmYWE1M2I2ODg1NDYwYjU3NjkyNzk4OTM4ODU", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2022-10-22T11:50:02Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2022-10-22T12:14:43Z"}, "message": "scip: minor clean-ups\n\nAvoids a couple redundant hash map lookups and so.", "tree": {"sha": "753f966e1c1ebac196c9ab344d4822f34ea6fc94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/753f966e1c1ebac196c9ab344d4822f34ea6fc94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee72256eba49faa53b6885460b5769279893885", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE53alAzPAxlP8it4A4RUtCZTkv4oFAmNT3rMACgkQ4RUtCZTk\nv4okvw/+JHk7eR7AFbuh4jYBMevQVR1yhaOzgeFzWOGcuoNAcAIPylGqiiPef2q4\neU8Di8R7LYWWUfyMNpzXeq0qyONym4oACS0jrC2UW48GyPykblqPoE//jnpKs3OC\nHsvD2mmIvY/NPPH9PnAbOOUc1WMJ4CeMOnKJM4yklY2w2nDcNRysvCwCad2CiWgq\n46xqOREQbwbM0ngU3ZNE5WfNg1xdVi/5l8Lm/W0P8z06ch26C5hXIZLQjougEiIp\n6rgem5nHMr3O0UlUAy1pf40VJLnRKJl+B4xlCFg1n6wuGoUFPpsRKrvpyzZ352gi\nA6kshGZWonShbFV/QM47zTsZVMxgtAUrWBYmmsJCiTFAg49cNpMA9jUFJbclQebo\nAMZE/ZQAFJQP+upC+t2jzV10dVacogxDvTy5m+/7fwi6CKABB5G9zIQQE+IOnmOn\nCsm4bZKQu0kjC891t/VHxmMIeSr4XLOGHeJVH2+qa1jRgop3fgU25jlF6cBX/hrw\nqX2LWt4f1R81pcup3E9GEEzcX7WXC2tIfsDDEBaUa5bJVEdMcTpHbr0OLBPpxNnD\nsj44iDfkxRKb7MLWudybRsyXd8pwts5k/x6e5uXMDLlbtSjHP+I5iLRUF0DB0g6/\nKMCf0ZBwJ6ilpEEcSy96qfAhCerD2Q2hqFxAyNMLcmbddrnSHa4=\n=hLaC\n-----END PGP SIGNATURE-----", "payload": "tree 753f966e1c1ebac196c9ab344d4822f34ea6fc94\nparent 8ee23f4f0aebf344089bfc201f1dbf641534cf94\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1666439402 +0200\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1666440883 +0200\n\nscip: minor clean-ups\n\nAvoids a couple redundant hash map lookups and so.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee72256eba49faa53b6885460b5769279893885", "html_url": "https://github.com/rust-lang/rust/commit/7ee72256eba49faa53b6885460b5769279893885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee72256eba49faa53b6885460b5769279893885/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee23f4f0aebf344089bfc201f1dbf641534cf94", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee23f4f0aebf344089bfc201f1dbf641534cf94", "html_url": "https://github.com/rust-lang/rust/commit/8ee23f4f0aebf344089bfc201f1dbf641534cf94"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "d70bc3f195f3057ad0ac73359afdc4ee1934a9b4", "filename": "crates/rust-analyzer/src/cli/scip.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ee72256eba49faa53b6885460b5769279893885/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee72256eba49faa53b6885460b5769279893885/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fscip.rs?ref=7ee72256eba49faa53b6885460b5769279893885", "patch": "@@ -75,7 +75,7 @@ impl flags::Scip {\n         let mut symbols_emitted: HashSet<TokenId> = HashSet::default();\n         let mut tokens_to_symbol: HashMap<TokenId, String> = HashMap::new();\n \n-        for file in si.files {\n+        for StaticIndexedFile { file_id, tokens, .. } in si.files {\n             let mut local_count = 0;\n             let mut new_local_symbol = || {\n                 let new_symbol = scip::types::Symbol::new_local(local_count);\n@@ -84,7 +84,6 @@ impl flags::Scip {\n                 new_symbol\n             };\n \n-            let StaticIndexedFile { file_id, tokens, .. } = file;\n             let relative_path = match get_relative_filepath(&vfs, &rootpath, file_id) {\n                 Some(relative_path) => relative_path,\n                 None => continue,\n@@ -107,28 +106,23 @@ impl flags::Scip {\n \n                 let mut occurrence = scip_types::Occurrence::default();\n                 occurrence.range = text_range_to_scip_range(&line_index, range);\n-                occurrence.symbol = match tokens_to_symbol.get(&id) {\n-                    Some(symbol) => symbol.clone(),\n-                    None => {\n+                occurrence.symbol = tokens_to_symbol\n+                    .entry(id)\n+                    .or_insert_with(|| {\n                         let symbol = match &token.moniker {\n                             Some(moniker) => moniker_to_symbol(&moniker),\n                             None => new_local_symbol(),\n                         };\n-\n-                        let symbol = scip::symbol::format_symbol(symbol);\n-                        tokens_to_symbol.insert(id, symbol.clone());\n-                        symbol\n-                    }\n-                };\n+                        scip::symbol::format_symbol(symbol)\n+                    })\n+                    .clone();\n \n                 if let Some(def) = token.definition {\n                     if def.range == range {\n                         occurrence.symbol_roles |= scip_types::SymbolRole::Definition as i32;\n                     }\n \n-                    if !symbols_emitted.contains(&id) {\n-                        symbols_emitted.insert(id);\n-\n+                    if symbols_emitted.insert(id) {\n                         let mut symbol_info = scip_types::SymbolInformation::default();\n                         symbol_info.symbol = occurrence.symbol.clone();\n                         if let Some(hover) = &token.hover {"}]}