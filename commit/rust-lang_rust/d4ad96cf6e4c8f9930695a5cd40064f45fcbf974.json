{"sha": "d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "node_id": "C_kwDOAAsO6NoAKGQ0YWQ5NmNmNmU0YzhmOTkzMDY5NWE1Y2Q0MDA2NGY0NWZjYmY5NzQ", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-13T07:54:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T07:54:23Z"}, "message": "Rollup merge of #106754 - compiler-errors:ty-infer-method-is-confusing, r=lcnr\n\nRename `Ty::is_ty_infer` -> `Ty::is_ty_or_numeric_infer`\n\nMakes sure people are aware that they may have a type variable *or* an int/float variable.\n\nr? `@oli-obk` https://github.com/rust-lang/rust/pull/106322#issuecomment-1376913539 but I could instead implement your solution, let me know.\n\n(This will conflict with #106322 for now, ignore that :smile:)", "tree": {"sha": "b02a3893357c44b5af4c47efa28ae71a24570276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02a3893357c44b5af4c47efa28ae71a24570276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwQ4vCRBK7hj4Ov3rIwAAYQ4IAE0V9uQz9+FyvE6xOc/jJ+0p\niak+SYecDj5z+nRtN3KtXp8DTax7cm0O28rzLbRgIzmWul1VIsZPgoSC5zZsB/lg\nl16A9EfxNN+BGQc7DCGVR3Dxv8GvzcFJTyen6S4SkKO4+tpYcMysTCbCds8yUIUx\nkZ8y7937KqYjiIdbQpmJIxvNaPvEG+I9J57Uf064zo3hQd6PmRHT0761naZvqCCo\nyFJi8TRecpA+lYOFLX8twtSJ03zBbS8LxUWnChpMitYSdxSwtqyf36Zdd6UOmjXA\nO9U0vKjAKdstFi47fCrIuWdIG2XxqaYfVRnzHGgIKxwCaqIfX/ZKGP/XFWbq4JE=\n=7AZO\n-----END PGP SIGNATURE-----\n", "payload": "tree b02a3893357c44b5af4c47efa28ae71a24570276\nparent f6f362c3326162049dc09502eb9b2a6f9c6d3c07\nparent 8e27211dbc8b6fd334e33c767641522f1ebb785f\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673596463 +0900\ncommitter GitHub <noreply@github.com> 1673596463 +0900\n\nRollup merge of #106754 - compiler-errors:ty-infer-method-is-confusing, r=lcnr\n\nRename `Ty::is_ty_infer` -> `Ty::is_ty_or_numeric_infer`\n\nMakes sure people are aware that they may have a type variable *or* an int/float variable.\n\nr? `@oli-obk` https://github.com/rust-lang/rust/pull/106322#issuecomment-1376913539 but I could instead implement your solution, let me know.\n\n(This will conflict with #106322 for now, ignore that :smile:)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "html_url": "https://github.com/rust-lang/rust/commit/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f362c3326162049dc09502eb9b2a6f9c6d3c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f362c3326162049dc09502eb9b2a6f9c6d3c07", "html_url": "https://github.com/rust-lang/rust/commit/f6f362c3326162049dc09502eb9b2a6f9c6d3c07"}, {"sha": "8e27211dbc8b6fd334e33c767641522f1ebb785f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e27211dbc8b6fd334e33c767641522f1ebb785f", "html_url": "https://github.com/rust-lang/rust/commit/8e27211dbc8b6fd334e33c767641522f1ebb785f"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "533a3c768eb1693144f6673fcb5175bb2ab68b95", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "patch": "@@ -1782,9 +1782,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             // like when you have two references but one is `usize` and the other\n                             // is `f32`. In those cases we still want to show the `note`. If the\n                             // value from `ef` is `Infer(_)`, then we ignore it.\n-                            if !ef.expected.is_ty_infer() {\n+                            if !ef.expected.is_ty_or_numeric_infer() {\n                                 ef.expected != values.expected\n-                            } else if !ef.found.is_ty_infer() {\n+                            } else if !ef.found.is_ty_or_numeric_infer() {\n                                 ef.found != values.found\n                             } else {\n                                 false"}, {"sha": "b8c843a8a5a225f36b692f6c786d29f4a9c85d4b", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "patch": "@@ -78,7 +78,7 @@ impl InferenceDiagnosticsData {\n     }\n \n     fn where_x_is_kind(&self, in_type: Ty<'_>) -> &'static str {\n-        if in_type.is_ty_infer() {\n+        if in_type.is_ty_or_numeric_infer() {\n             \"\"\n         } else if self.name == \"_\" {\n             // FIXME: Consider specializing this message if there is a single `_`\n@@ -195,12 +195,12 @@ fn ty_to_string<'tcx>(\n         // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n         (ty::FnDef(..), _) => ty.fn_sig(infcx.tcx).print(printer).unwrap().into_buffer(),\n         (_, Some(def_id))\n-            if ty.is_ty_infer()\n+            if ty.is_ty_or_numeric_infer()\n                 && infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn) == Some(def_id) =>\n         {\n             \"Vec<_>\".to_string()\n         }\n-        _ if ty.is_ty_infer() => \"/* Type */\".to_string(),\n+        _ if ty.is_ty_or_numeric_infer() => \"/* Type */\".to_string(),\n         // FIXME: The same thing for closures, but this only works when the closure\n         // does not capture anything.\n         //\n@@ -680,7 +680,7 @@ impl<'tcx> InferSourceKind<'tcx> {\n             | InferSourceKind::ClosureReturn { ty, .. } => {\n                 if ty.is_closure() {\n                     (\"closure\", closure_as_fn_str(infcx, ty))\n-                } else if !ty.is_ty_infer() {\n+                } else if !ty.is_ty_or_numeric_infer() {\n                     (\"normal\", ty_to_string(infcx, ty, None))\n                 } else {\n                     (\"other\", String::new())\n@@ -813,7 +813,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         self.attempt += 1;\n         if let Some(InferSource { kind: InferSourceKind::GenericArg { def_id: did, ..}, .. }) = self.infer_source\n             && let InferSourceKind::LetBinding { ref ty, ref mut def_id, ..} = new_source.kind\n-            && ty.is_ty_infer()\n+            && ty.is_ty_or_numeric_infer()\n         {\n             // Customize the output so we talk about `let x: Vec<_> = iter.collect();` instead of\n             // `let x: _ = iter.collect();`, as this is a very common case."}, {"sha": "bd5b04d5b2baac92b05047c271e24954d8817df8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "patch": "@@ -1686,7 +1686,7 @@ impl<'tcx> Ty<'tcx> {\n     }\n \n     #[inline]\n-    pub fn is_ty_infer(self) -> bool {\n+    pub fn is_ty_or_numeric_infer(self) -> bool {\n         matches!(self.kind(), Infer(_))\n     }\n "}, {"sha": "2dec58ea82a30cbecb1c214e48a7047dd6a780e6", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "patch": "@@ -202,7 +202,7 @@ impl<'tcx> GenericArg<'tcx> {\n     pub fn is_non_region_infer(self) -> bool {\n         match self.unpack() {\n             GenericArgKind::Lifetime(_) => false,\n-            GenericArgKind::Type(ty) => ty.is_ty_infer(),\n+            GenericArgKind::Type(ty) => ty.is_ty_or_numeric_infer(),\n             GenericArgKind::Const(ct) => ct.is_ct_infer(),\n         }\n     }"}, {"sha": "0c7ffb056cc0256e4177ba9a4a1aba7943eba29e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ad96cf6e4c8f9930695a5cd40064f45fcbf974/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d4ad96cf6e4c8f9930695a5cd40064f45fcbf974", "patch": "@@ -2252,8 +2252,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     Ok(None) => {\n                         let ambiguities =\n                             ambiguity::recompute_applicable_impls(self.infcx, &obligation);\n-                        let has_non_region_infer =\n-                            trait_ref.skip_binder().substs.types().any(|t| !t.is_ty_infer());\n+                        let has_non_region_infer = trait_ref\n+                            .skip_binder()\n+                            .substs\n+                            .types()\n+                            .any(|t| !t.is_ty_or_numeric_infer());\n                         // It doesn't make sense to talk about applicable impls if there are more\n                         // than a handful of them.\n                         if ambiguities.len() > 1 && ambiguities.len() < 10 && has_non_region_infer {"}]}