{"sha": "04b0a3a0a6648474006c610b580f90b9097e3461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjBhM2EwYTY2NDg0NzQwMDZjNjEwYjU4MGY5MGI5MDk3ZTM0NjE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-02-22T23:15:11Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-02-22T23:15:11Z"}, "message": "save-analysis: fix impls on primitive types", "tree": {"sha": "95ff7a52daf9596795053d1e7b7463e7ef40e7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ff7a52daf9596795053d1e7b7463e7ef40e7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b0a3a0a6648474006c610b580f90b9097e3461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b0a3a0a6648474006c610b580f90b9097e3461", "html_url": "https://github.com/rust-lang/rust/commit/04b0a3a0a6648474006c610b580f90b9097e3461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b0a3a0a6648474006c610b580f90b9097e3461/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd", "html_url": "https://github.com/rust-lang/rust/commit/dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "a1d63ec0265fe0ad2acf55dd7ce15fadb1ed1bb1", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/04b0a3a0a6648474006c610b580f90b9097e3461/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b0a3a0a6648474006c610b580f90b9097e3461/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=04b0a3a0a6648474006c610b580f90b9097e3461", "patch": "@@ -663,23 +663,21 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         match typ.node {\n             // Common case impl for a struct or something basic.\n             ast::TyPath(ref path, id) => {\n-                match self.lookup_type_ref(id) {\n-                    Some(id) => {\n-                        let sub_span = self.span.sub_span_for_type_name(path.span);\n-                        self.fmt.ref_str(recorder::TypeRef,\n-                                         path.span,\n-                                         sub_span,\n-                                         id,\n-                                         self.cur_scope);\n-                        self.fmt.impl_str(path.span,\n-                                          sub_span,\n-                                          item.id,\n-                                          Some(id),\n-                                          trait_id,\n-                                          self.cur_scope);\n-                    },\n-                    None => ()\n-                }\n+                let sub_span = self.span.sub_span_for_type_name(path.span);\n+                let self_id = self.lookup_type_ref(id).map(|id| {\n+                    self.fmt.ref_str(recorder::TypeRef,\n+                                     path.span,\n+                                     sub_span,\n+                                     id,\n+                                     self.cur_scope);\n+                    id\n+                });\n+                self.fmt.impl_str(path.span,\n+                                  sub_span,\n+                                  item.id,\n+                                  self_id,\n+                                  trait_id,\n+                                  self.cur_scope);\n             },\n             _ => {\n                 // Less useful case, impl for a compound type."}]}