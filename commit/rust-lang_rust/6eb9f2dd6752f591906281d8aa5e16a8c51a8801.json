{"sha": "6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "node_id": "C_kwDOAAsO6NoAKDZlYjlmMmRkNjc1MmY1OTE5MDYyODFkOGFhNWUxNmE4YzUxYTg4MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T07:43:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T07:43:37Z"}, "message": "Auto merge of #107788 - matthiaskrgr:rollup-mw10sli, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #107656 (Bump rust-installer)\n - #107757 (Allow automatically creating vscode `settings.json` with `x setup`)\n - #107769 (Rename `PointerSized` to `PointerLike`)\n - #107770 (rustdoc: use a newline instead of `<br>` to format code headers)\n - #107771 (Tweak ICE message)\n - #107773 (Clearly signal purpose of the yaml template)\n - #107776 (Docs: Fix format of headings in String::reserve)\n - #107779 (Remove astconv usage in diagnostic)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0299332ee938a429d681733bf72c1f15de0aec9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0299332ee938a429d681733bf72c1f15de0aec9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "html_url": "https://github.com/rust-lang/rust/commit/6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba4e95368b2a71018cd995f5254ba3e7422954e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba4e95368b2a71018cd995f5254ba3e7422954e", "html_url": "https://github.com/rust-lang/rust/commit/7ba4e95368b2a71018cd995f5254ba3e7422954e"}, {"sha": "fe26182281f3f43e2dd237e9c0335da9059c9959", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe26182281f3f43e2dd237e9c0335da9059c9959", "html_url": "https://github.com/rust-lang/rust/commit/fe26182281f3f43e2dd237e9c0335da9059c9959"}], "stats": {"total": 540, "additions": 375, "deletions": 165}, "files": [{"sha": "7bec05cc575a875239d1ba10cc269c7827e68ada", "filename": ".github/ISSUE_TEMPLATE/ice.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/.github%2FISSUE_TEMPLATE%2Fice.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/.github%2FISSUE_TEMPLATE%2Fice.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fice.yaml?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,4 +1,4 @@\n-name: Internal Compiler Error (Structured form)\n+name: Internal Compiler Error (for use by automated tooling)\n description: For now, you'll want to use the other ICE template, as GitHub forms have strict limits on the size of fields so backtraces cannot be pasted directly.\n labels: [\"C-bug\", \"I-ICE\", \"T-compiler\"]\n title: \"[ICE]: \""}, {"sha": "fc8e0c67ae09a0ec4b8d22aa8c9d5c9608a27854", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -126,7 +126,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     let vtable = self.get_vtable_ptr(src.layout.ty, data.principal())?;\n                     let vtable = Scalar::from_maybe_pointer(vtable, self);\n                     let data = self.read_immediate(src)?.to_scalar();\n-                    let _assert_pointer_sized = data.to_pointer(self)?;\n+                    let _assert_pointer_like = data.to_pointer(self)?;\n                     let val = Immediate::ScalarPair(data, vtable);\n                     self.write_immediate(val, dest)?;\n                 } else {"}, {"sha": "a392d70f100a4826ddc9e6227c7c20bcabbdbccc", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1200,11 +1200,9 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     if !info.payload().is::<rustc_errors::ExplicitBug>()\n         && !info.payload().is::<rustc_errors::DelayedBugPanic>()\n     {\n-        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&mut d);\n+        handler.emit_err(session_diagnostics::Ice);\n     }\n \n-    handler.emit_note(session_diagnostics::Ice);\n     handler.emit_note(session_diagnostics::IceBugReport { bug_report_url });\n     handler.emit_note(session_diagnostics::IceVersion {\n         version: util::version_str!().unwrap_or(\"unknown_version\"),"}, {"sha": "0454633091568ea61c5de649f85d8b206d79b019", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -287,7 +287,7 @@ language_item_table! {\n     TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n-    PointerSized,            sym::pointer_sized,       pointer_sized,              Target::Trait,          GenericRequirement::Exact(0);\n+    PointerLike,             sym::pointer_like,        pointer_like,               Target::Trait,          GenericRequirement::Exact(0);\n \n     Poll,                    sym::Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;"}, {"sha": "7173239ba619a849b0e71a46e49ed3395dde162e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -765,7 +765,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.cause.clone(),\n             self.param_env,\n             ty::Binder::dummy(\n-                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n+                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerLike, [a]),\n             ),\n         ));\n "}, {"sha": "eaad57d8c2e9f1088ab839e4e266d62b302ea743", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1336,16 +1336,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::Path { segments: [segment], .. },\n             ))\n             | hir::ExprKind::Path(QPath::TypeRelative(ty, segment)) => {\n-                let self_ty = self.astconv().ast_ty_to_ty(ty);\n-                if let Ok(pick) = self.probe_for_name(\n-                    Mode::Path,\n-                    Ident::new(capitalized_name, segment.ident.span),\n-                    Some(expected_ty),\n-                    IsSuggestion(true),\n-                    self_ty,\n-                    expr.hir_id,\n-                    ProbeScope::TraitsInScope,\n-                ) {\n+                if let Some(self_ty) = self.typeck_results.borrow().node_type_opt(ty.hir_id)\n+                    && let Ok(pick) = self.probe_for_name(\n+                        Mode::Path,\n+                        Ident::new(capitalized_name, segment.ident.span),\n+                        Some(expected_ty),\n+                        IsSuggestion(true),\n+                        self_ty,\n+                        expr.hir_id,\n+                        ProbeScope::TraitsInScope,\n+                    )\n+                {\n                     (pick.item, segment)\n                 } else {\n                     return false;"}, {"sha": "1ced75cccbb30251a3a7e918a63ca66e28a72498", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1084,7 +1084,7 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n-        pointer_sized,\n+        pointer_like,\n         poll,\n         position,\n         post_dash_lto: \"post-lto\","}, {"sha": "8525b96c0c21ffdf2927a63b6c2ab5822095bd3a", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -128,9 +128,9 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n-    // A type is `PointerSized` if we can compute its layout, and that layout\n+    // A type is `PointerLike` if we can compute its layout, and that layout\n     // matches the layout of `usize`.\n-    fn consider_builtin_pointer_sized_candidate(\n+    fn consider_builtin_pointer_like_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n@@ -312,8 +312,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             || lang_items.clone_trait() == Some(trait_def_id)\n         {\n             G::consider_builtin_copy_clone_candidate(self, goal)\n-        } else if lang_items.pointer_sized() == Some(trait_def_id) {\n-            G::consider_builtin_pointer_sized_candidate(self, goal)\n+        } else if lang_items.pointer_like() == Some(trait_def_id) {\n+            G::consider_builtin_pointer_like_candidate(self, goal)\n         } else if let Some(kind) = self.tcx().fn_trait_kind_from_def_id(trait_def_id) {\n             G::consider_builtin_fn_trait_candidates(self, goal, kind)\n         } else if lang_items.tuple_trait() == Some(trait_def_id) {"}, {"sha": "f9acf7a53eee5b25b95bd098d87a0a45f057ba0c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -370,11 +370,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         bug!(\"`Copy`/`Clone` does not have an associated type: {:?}\", goal);\n     }\n \n-    fn consider_builtin_pointer_sized_candidate(\n+    fn consider_builtin_pointer_like_candidate(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        bug!(\"`PointerSized` does not have an associated type: {:?}\", goal);\n+        bug!(\"`PointerLike` does not have an associated type: {:?}\", goal);\n     }\n \n     fn consider_builtin_fn_trait_candidates("}, {"sha": "1cf1efc97049bcb740fa65217a2a18b5983d77fb", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         )\n     }\n \n-    fn consider_builtin_pointer_sized_candidate(\n+    fn consider_builtin_pointer_like_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {"}, {"sha": "bba07ed965b210693badf57439a285fd71022fef", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -94,7 +94,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.assemble_candidates_for_transmutability(obligation, &mut candidates);\n             } else if lang_items.tuple_trait() == Some(def_id) {\n                 self.assemble_candidate_for_tuple(obligation, &mut candidates);\n-            } else if lang_items.pointer_sized() == Some(def_id) {\n+            } else if lang_items.pointer_like() == Some(def_id) {\n                 self.assemble_candidate_for_ptr_sized(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {"}, {"sha": "7565918851554bd5de13ae1f88ba4ef551fd3119", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -928,12 +928,12 @@ impl String {\n \n     /// Copies elements from `src` range to the end of the string.\n     ///\n-    /// ## Panics\n+    /// # Panics\n     ///\n     /// Panics if the starting point or end point do not lie on a [`char`]\n     /// boundary, or if they're out of bounds.\n     ///\n-    /// ## Examples\n+    /// # Examples\n     ///\n     /// ```\n     /// #![feature(string_extend_from_within)]"}, {"sha": "e11bca5962a156a9059d7a8ceb561731fe68ee53", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -872,13 +872,14 @@ pub trait Destruct {}\n pub trait Tuple {}\n \n /// A marker for things\n-#[unstable(feature = \"pointer_sized_trait\", issue = \"none\")]\n-#[lang = \"pointer_sized\"]\n+#[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n+#[cfg_attr(bootstrap, lang = \"pointer_sized\")]\n+#[cfg_attr(not(bootstrap), lang = \"pointer_like\")]\n #[rustc_on_unimplemented(\n-    message = \"`{Self}` needs to be a pointer-sized type\",\n-    label = \"`{Self}` needs to be a pointer-sized type\"\n+    message = \"`{Self}` needs to have the same alignment and size as a pointer\",\n+    label = \"`{Self}` needs to be a pointer-like type\"\n )]\n-pub trait PointerSized {}\n+pub trait PointerLike {}\n \n /// Implementations of `Copy` for primitive types.\n ///"}, {"sha": "c98a52450849e9bc9bce15d17a92a5d1e40edd72", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 121, "deletions": 26, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,6 +1,7 @@\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::Config;\n use crate::{t, VERSION};\n+use sha2::Digest;\n use std::env::consts::EXE_SUFFIX;\n use std::fmt::Write as _;\n use std::fs::File;\n@@ -10,6 +11,9 @@ use std::process::Command;\n use std::str::FromStr;\n use std::{fmt, fs, io};\n \n+#[cfg(test)]\n+mod tests;\n+\n #[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n pub enum Profile {\n     Compiler,\n@@ -19,6 +23,13 @@ pub enum Profile {\n     User,\n }\n \n+/// A list of historical hashes of `src/etc/vscode_settings.json`.\n+/// New entries should be appended whenever this is updated so we can detected\n+/// outdated vs. user-modified settings files.\n+static SETTINGS_HASHES: &[&str] =\n+    &[\"ea67e259dedf60d4429b6c349a564ffcd1563cf41c920a856d1f5b16b4701ac8\"];\n+static VSCODE_SETTINGS: &str = include_str!(\"../etc/vscode_settings.json\");\n+\n impl Profile {\n     fn include_path(&self, src_path: &Path) -> PathBuf {\n         PathBuf::from(format!(\"{}/src/bootstrap/defaults/config.{}.toml\", src_path.display(), self))\n@@ -155,6 +166,7 @@ pub fn setup(config: &Config, profile: Profile) {\n \n     if !config.dry_run() {\n         t!(install_git_hook_maybe(&config));\n+        t!(create_vscode_settings_maybe(&config));\n     }\n \n     println!();\n@@ -351,6 +363,34 @@ pub fn interactive_path() -> io::Result<Profile> {\n     Ok(template)\n }\n \n+#[derive(PartialEq)]\n+enum PromptResult {\n+    Yes,   // y/Y/yes\n+    No,    // n/N/no\n+    Print, // p/P/print\n+}\n+\n+/// Prompt a user for a answer, looping until they enter an accepted input or nothing\n+fn prompt_user(prompt: &str) -> io::Result<Option<PromptResult>> {\n+    let mut input = String::new();\n+    loop {\n+        print!(\"{prompt} \");\n+        io::stdout().flush()?;\n+        input.clear();\n+        io::stdin().read_line(&mut input)?;\n+        match input.trim().to_lowercase().as_str() {\n+            \"y\" | \"yes\" => return Ok(Some(PromptResult::Yes)),\n+            \"n\" | \"no\" => return Ok(Some(PromptResult::No)),\n+            \"p\" | \"print\" => return Ok(Some(PromptResult::Print)),\n+            \"\" => return Ok(None),\n+            _ => {\n+                eprintln!(\"error: unrecognized option '{}'\", input.trim());\n+                eprintln!(\"note: press Ctrl+C to exit\");\n+            }\n+        };\n+    }\n+}\n+\n // install a git hook to automatically run tidy, if they want\n fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n     let git = t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n@@ -363,43 +403,98 @@ fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n         return Ok(());\n     }\n \n-    let mut input = String::new();\n-    println!();\n     println!(\n-        \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n+        \"\\nRust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n If you'd like, x.py can install a git hook for you that will automatically run `test tidy` before\n pushing your code to ensure your code is up to par. If you decide later that this behavior is\n undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     );\n \n-    let should_install = loop {\n-        print!(\"Would you like to install the git hook?: [y/N] \");\n-        io::stdout().flush()?;\n-        input.clear();\n-        io::stdin().read_line(&mut input)?;\n-        break match input.trim().to_lowercase().as_str() {\n-            \"y\" | \"yes\" => true,\n-            \"n\" | \"no\" | \"\" => false,\n-            _ => {\n-                eprintln!(\"error: unrecognized option '{}'\", input.trim());\n-                eprintln!(\"note: press Ctrl+C to exit\");\n-                continue;\n-            }\n-        };\n-    };\n-\n-    if should_install {\n-        let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n-        match fs::hard_link(src, &dst) {\n-            Err(e) => eprintln!(\n+    if prompt_user(\"Would you like to install the git hook?: [y/N]\")? != Some(PromptResult::Yes) {\n+        println!(\"Ok, skipping installation!\");\n+        return Ok(());\n+    }\n+    let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n+    match fs::hard_link(src, &dst) {\n+        Err(e) => {\n+            eprintln!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\",\n                 dst.display(),\n                 e\n-            ),\n-            Ok(_) => println!(\"Linked `src/etc/pre-push.sh` to `.git/hooks/pre-push`\"),\n+            );\n+            return Err(e);\n+        }\n+        Ok(_) => println!(\"Linked `src/etc/pre-push.sh` to `.git/hooks/pre-push`\"),\n+    };\n+    Ok(())\n+}\n+\n+/// Create a `.vscode/settings.json` file for rustc development, or just print it\n+fn create_vscode_settings_maybe(config: &Config) -> io::Result<()> {\n+    let (current_hash, historical_hashes) = SETTINGS_HASHES.split_last().unwrap();\n+    let vscode_settings = config.src.join(\".vscode\").join(\"settings.json\");\n+    // If None, no settings.json exists\n+    // If Some(true), is a previous version of settings.json\n+    // If Some(false), is not a previous version (i.e. user modified)\n+    // If it's up to date we can just skip this\n+    let mut mismatched_settings = None;\n+    if let Ok(current) = fs::read_to_string(&vscode_settings) {\n+        let mut hasher = sha2::Sha256::new();\n+        hasher.update(&current);\n+        let hash = hex::encode(hasher.finalize().as_slice());\n+        if hash == *current_hash {\n+            return Ok(());\n+        } else if historical_hashes.contains(&hash.as_str()) {\n+            mismatched_settings = Some(true);\n+        } else {\n+            mismatched_settings = Some(false);\n+        }\n+    }\n+    println!(\n+        \"\\nx.py can automatically install the recommended `.vscode/settings.json` file for rustc development\"\n+    );\n+    match mismatched_settings {\n+        Some(true) => eprintln!(\n+            \"warning: existing `.vscode/settings.json` is out of date, x.py will update it\"\n+        ),\n+        Some(false) => eprintln!(\n+            \"warning: existing `.vscode/settings.json` has been modified by user, x.py will back it up and replace it\"\n+        ),\n+        _ => (),\n+    }\n+    let should_create = match prompt_user(\n+        \"Would you like to create/update `settings.json`, or only print suggested settings?: [y/p/N]\",\n+    )? {\n+        Some(PromptResult::Yes) => true,\n+        Some(PromptResult::Print) => false,\n+        _ => {\n+            println!(\"Ok, skipping settings!\");\n+            return Ok(());\n+        }\n+    };\n+    if should_create {\n+        let path = config.src.join(\".vscode\");\n+        if !path.exists() {\n+            fs::create_dir(&path)?;\n+        }\n+        let verb = match mismatched_settings {\n+            // exists but outdated, we can replace this\n+            Some(true) => \"Updated\",\n+            // exists but user modified, back it up\n+            Some(false) => {\n+                // exists and is not current version or outdated, so back it up\n+                let mut backup = vscode_settings.clone();\n+                backup.set_extension(\"bak\");\n+                eprintln!(\"warning: copying `settings.json` to `settings.json.bak`\");\n+                fs::copy(&vscode_settings, &backup)?;\n+                \"Updated\"\n+            }\n+            _ => \"Created\",\n         };\n+        fs::write(&vscode_settings, &VSCODE_SETTINGS)?;\n+        println!(\"{verb} `.vscode/settings.json`\");\n     } else {\n-        println!(\"Ok, skipping installation!\");\n+        println!(\"\\n{VSCODE_SETTINGS}\");\n     }\n     Ok(())\n }"}, {"sha": "dcf9d18e63210165e38bff00e86cc9c3370bad1a", "filename": "src/bootstrap/setup/tests.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Fbootstrap%2Fsetup%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Fbootstrap%2Fsetup%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup%2Ftests.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -0,0 +1,14 @@\n+use super::{SETTINGS_HASHES, VSCODE_SETTINGS};\n+use sha2::Digest;\n+\n+#[test]\n+fn check_matching_settings_hash() {\n+    let mut hasher = sha2::Sha256::new();\n+    hasher.update(&VSCODE_SETTINGS);\n+    let hash = hex::encode(hasher.finalize().as_slice());\n+    assert_eq!(\n+        &hash,\n+        SETTINGS_HASHES.last().unwrap(),\n+        \"Update `SETTINGS_HASHES` with the new hash of `src/etc/vscode_settings.json`\"\n+    );\n+}"}, {"sha": "cd61a38c5da987c7176353c28d7f040be75b8a6b", "filename": "src/etc/vscode_settings.json", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Fetc%2Fvscode_settings.json", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Fetc%2Fvscode_settings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvscode_settings.json?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -0,0 +1,26 @@\n+{\n+    \"rust-analyzer.checkOnSave.overrideCommand\": [\n+        \"python3\",\n+        \"x.py\",\n+        \"check\",\n+        \"--json-output\"\n+    ],\n+    \"rust-analyzer.linkedProjects\": [\"src/bootstrap/Cargo.toml\", \"Cargo.toml\"],\n+    \"rust-analyzer.rustfmt.overrideCommand\": [\n+        \"./build/host/rustfmt/bin/rustfmt\",\n+        \"--edition=2021\"\n+    ],\n+    \"rust-analyzer.procMacro.server\": \"./build/host/stage0/libexec/rust-analyzer-proc-macro-srv\",\n+    \"rust-analyzer.procMacro.enable\": true,\n+    \"rust-analyzer.cargo.buildScripts.enable\": true,\n+    \"rust-analyzer.cargo.buildScripts.invocationLocation\": \"root\",\n+    \"rust-analyzer.cargo.buildScripts.invocationStrategy\": \"once\",\n+    \"rust-analyzer.cargo.buildScripts.overrideCommand\": [\n+        \"python3\",\n+        \"x.py\",\n+        \"check\",\n+        \"--json-output\"\n+    ],\n+    \"rust-analyzer.cargo.sysroot\": \"./build/host/stage0-sysroot\",\n+    \"rust-analyzer.rustc.source\": \"./Cargo.toml\"\n+}"}, {"sha": "8a7a8ea5fd1f268a69c6e7f39eb319030f032896", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n                 if f.alternate() {\n                     f.write_str(\" \")?;\n                 } else {\n-                    f.write_str(\"<br>\")?;\n+                    f.write_str(\"\\n\")?;\n                 }\n \n                 match pred {\n@@ -352,24 +352,24 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             }\n         } else {\n             let mut br_with_padding = String::with_capacity(6 * indent + 28);\n-            br_with_padding.push_str(\"<br>\");\n+            br_with_padding.push_str(\"\\n\");\n \n             let padding_amout =\n                 if ending == Ending::Newline { indent + 4 } else { indent + \"fn where \".len() };\n \n             for _ in 0..padding_amout {\n                 br_with_padding.push_str(\" \");\n             }\n-            let where_preds = where_preds.to_string().replace(\"<br>\", &br_with_padding);\n+            let where_preds = where_preds.to_string().replace(\"\\n\", &br_with_padding);\n \n             if ending == Ending::Newline {\n                 let mut clause = \" \".repeat(indent.saturating_sub(1));\n                 write!(clause, \"<span class=\\\"where fmt-newline\\\">where{where_preds},</span>\")?;\n                 clause\n             } else {\n-                // insert a <br> tag after a single space but before multiple spaces at the start\n+                // insert a newline after a single space but before multiple spaces at the start\n                 if indent == 0 {\n-                    format!(\"<br><span class=\\\"where\\\">where{where_preds}</span>\")\n+                    format!(\"\\n<span class=\\\"where\\\">where{where_preds}</span>\")\n                 } else {\n                     // put the first one on the same line as the 'where' keyword\n                     let where_preds = where_preds.replacen(&br_with_padding, \" \", 1);\n@@ -1315,7 +1315,8 @@ impl clean::FnDecl {\n \n     /// * `header_len`: The length of the function header and name. In other words, the number of\n     ///   characters in the function declaration up to but not including the parentheses.\n-    ///   <br>Used to determine line-wrapping.\n+    ///   This is expected to go into a `<pre>`/`code-header` block, so indentation and newlines\n+    ///   are preserved.\n     /// * `indent`: The number of spaces to indent each successive line with, if line-wrapping is\n     ///   necessary.\n     pub(crate) fn full_print<'a, 'tcx: 'a>(\n@@ -1363,7 +1364,7 @@ impl clean::FnDecl {\n                 }\n             } else {\n                 if i > 0 {\n-                    args.push_str(\"<br>\");\n+                    args.push_str(\"\\n\");\n                 }\n                 if input.is_const {\n                     args.push_str(\"const \");\n@@ -1389,7 +1390,7 @@ impl clean::FnDecl {\n         let mut args = args.into_inner();\n \n         if self.c_variadic {\n-            args.push_str(\",<br> ...\");\n+            args.push_str(\",\\n ...\");\n             args_plain.push_str(\", ...\");\n         }\n \n@@ -1399,24 +1400,20 @@ impl clean::FnDecl {\n \n         let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n         let output = if declaration_len > 80 {\n-            let full_pad = format!(\"<br>{}\", \" \".repeat(indent + 4));\n-            let close_pad = format!(\"<br>{}\", \" \".repeat(indent));\n+            let full_pad = format!(\"\\n{}\", \" \".repeat(indent + 4));\n+            let close_pad = format!(\"\\n{}\", \" \".repeat(indent));\n             format!(\n                 \"({pad}{args}{close}){arrow}\",\n                 pad = if self.inputs.values.is_empty() { \"\" } else { &full_pad },\n-                args = args.replace(\"<br>\", &full_pad),\n+                args = args.replace(\"\\n\", &full_pad),\n                 close = close_pad,\n                 arrow = arrow\n             )\n         } else {\n-            format!(\"({args}){arrow}\", args = args.replace(\"<br>\", \" \"), arrow = arrow)\n+            format!(\"({args}){arrow}\", args = args.replace(\"\\n\", \" \"), arrow = arrow)\n         };\n \n-        if f.alternate() {\n-            write!(f, \"{}\", output.replace(\"<br>\", \"\\n\"))\n-        } else {\n-            write!(f, \"{}\", output)\n-        }\n+        write!(f, \"{}\", output)\n     }\n }\n "}, {"sha": "9981e4d1ea6ac0992ff21be5514d4230dc77548b", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1 +1 @@\n-Subproject commit 5b2eee7eed72b4894909c5eecbf014ea0b5ad995\n+Subproject commit 9981e4d1ea6ac0992ff21be5514d4230dc77548b"}, {"sha": "70bcbcb6ff44ae3d5851a71b6f729950a41c4795", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -77,7 +77,7 @@ struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n impl Foo {\n     // @has async_fn/struct.Foo.html\n-    // @has - '//*[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    // @has - '//*[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar ) -> impl Iterator<Item = &usize>'\n     pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n     // taken from `tokio` as an example of a method that was particularly bad before\n     // @has - '//*[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\""}, {"sha": "cbda095424b7d1536c6ea359a48c86b76c11ecee", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -31,7 +31,7 @@ impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n // @has foo/struct.Foo.html '//pre[@class=\"rust item-decl\"]' \\\n-//      'pub struct Foo<const N: usize>where u8: Trait<N>'\n+//      'pub struct Foo<const N: usize> where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust item-decl\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);"}, {"sha": "d73393633f3b8c97b1ea04eee609a46ce59a4d50", "filename": "tests/rustdoc/decl-trailing-whitespace.declaration.html", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdecl-trailing-whitespace.declaration.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,9 +1,23 @@\n <code>pub trait Write {\n     // Required methods\n-    fn <a href=\"#tymethod.poll_write\" class=\"fn\">poll_write</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buf: &amp;mut [<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n-<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_close\" class=\"fn\">poll_close</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+    fn <a href=\"#tymethod.poll_write\" class=\"fn\">poll_write</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        buf: &amp;mut [<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_flush\" class=\"fn\">poll_flush</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n+<span class=\"item-spacer\" />    fn <a href=\"#tymethod.poll_close\" class=\"fn\">poll_close</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt;;\n \n     // Provided method\n-    fn <a href=\"#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bufs: &amp;[<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]<br />&#160;&#160;&#160;&#160;) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt; { ... }\n-}</code>\n+    fn <a href=\"#method.poll_write_vectored\" class=\"fn\">poll_write_vectored</a>(\n+        self: <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        cx: &amp;mut <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"{{channel}}/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n+        bufs: &amp;[<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>]\n+    ) -&gt; <a class=\"enum\" href=\"{{channel}}/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"{{channel}}/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"{{channel}}/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct foo::Error\">Error</a>&gt;&gt; { ... }\n+}</code>\n\\ No newline at end of file"}, {"sha": "7ab82bb582965909480eee1defb38a96fe149ec6", "filename": "tests/rustdoc/generic-associated-types/gats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/trait.LendingIterator.html\n pub trait LendingIterator {\n-    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a\"\n+    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a\"\n     type Item<'a> where Self: 'a;\n \n     // @has - '//*[@id=\"tymethod.next\"]//h4[@class=\"code-header\"]' \\\n@@ -23,7 +23,7 @@ impl LendingIterator for () {\n pub struct Infinite<T>(T);\n \n // @has foo/trait.LendingIterator.html\n-// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a = &'a T\"\n+// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a = &'a T\"\n impl<T> LendingIterator for Infinite<T> {\n     type Item<'a> where Self: 'a = &'a T;\n "}, {"sha": "b6a1552bc00caccca655c5439f64878f9567d8d4", "filename": "tests/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -11,7 +11,7 @@ pub use impl_trait_aux::func;\n // @has impl_trait/fn.func2.html\n // @has - '//pre[@class=\"rust item-decl\"]' \"func2<T>(\"\n // @has - '//pre[@class=\"rust item-decl\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n-// @has - '//pre[@class=\"rust item-decl\"]' \"_y: impl Iterator<Item = u8>)\"\n+// @has - '//pre[@class=\"rust item-decl\"]' \"_y: impl Iterator<Item = u8> )\"\n // @!has - '//pre[@class=\"rust item-decl\"]' 'where'\n pub use impl_trait_aux::func2;\n "}, {"sha": "4184086f622abaff7f57fb211360c358ccfe15c8", "filename": "tests/rustdoc/issue-34928.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fissue-34928.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fissue-34928.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-34928.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -2,5 +2,5 @@\n \n pub trait Bar {}\n \n-// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T)where T: Bar;'\n+// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T) where T: Bar;'\n pub struct Foo<T>(pub T) where T: Bar;"}, {"sha": "571d7f06fdc62e401f5b5c161b9a7f79247f4e44", "filename": "tests/rustdoc/reexports-priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-priv.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -98,7 +98,7 @@ pub mod outer {\n         pub use reexports::foo;\n         // @has 'foo/outer/inner/fn.foo_crate.html' '//pre[@class=\"rust item-decl\"]' 'pub(crate) fn foo_crate()'\n         pub(crate) use reexports::foo_crate;\n-        // @has 'foo/outer/inner/fn.foo_super.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) fn foo_super()'\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//pre[@class=\"rust item-decl\"]' 'pub(in outer) fn foo_super( )'\n         pub(super) use::reexports::foo_super;\n         // @!has 'foo/outer/inner/fn.foo_self.html'\n         pub(self) use reexports::foo_self;"}, {"sha": "ef4294c8f76d3c397131c17862c091e2de5f19f8", "filename": "tests/rustdoc/where.SWhere_Simd_item-decl.html", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1 +1,3 @@\n-<pre class=\"rust item-decl\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre>\n\\ No newline at end of file\n+<pre class=\"rust item-decl\"><code>pub struct Simd&lt;T&gt;(_)\n+<span class=\"where\">where\n+         T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre>\n\\ No newline at end of file"}, {"sha": "e8ab061e679dd09f7f39d99ac6a5d397fa770da6", "filename": "tests/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,8 +1,13 @@\n <pre class=\"rust item-decl\"><code>pub trait TraitWhere {\n-    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: 'a</span>;\n+    type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;\n+       <span class=\"where\">where Self: 'a</span>;\n \n     // Provided methods\n-    fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n-<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n-<span class=\"item-spacer\" />    fn <a href=\"#method.merge\" class=\"fn\">merge</a>&lt;T&gt;(self, a: T)<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n+    fn <a href=\"#method.func\" class=\"fn\">func</a>(self)\n+       <span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n+<span class=\"item-spacer\" />    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"{{channel}}/std/io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt;\n+       <span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n+<span class=\"item-spacer\" />    fn <a href=\"#method.merge\" class=\"fn\">merge</a>&lt;T&gt;(self, a: T)\n+       <span class=\"where\">where Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n+             T: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span> { ... }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "8b8a126e89dd524c1364280c2f97445332bd1a98", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -4,7 +4,7 @@ use std::io::Lines;\n \n pub trait MyTrait { fn dummy(&self) { } }\n \n-// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_)where A: MyTrait\"\n+// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_) where A: MyTrait\"\n pub struct Alpha<A>(A) where A: MyTrait;\n // @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B>where B: MyTrait\"\n pub trait Bravo<B> where B: MyTrait { fn get(&self, B: B); }"}, {"sha": "20b60b68e88cfed63dc3f9deb4a1c59fc19f2488", "filename": "tests/rustdoc/whitespace-after-where-clause.enum.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,4 +1,5 @@\n-<pre class=\"rust item-decl\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n+    B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "948ddc499da8ad9c8c2b24fc43eb1ab3ba87d1ee", "filename": "tests/rustdoc/whitespace-after-where-clause.struct.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,4 +1,5 @@\n-<pre class=\"rust item-decl\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n+    B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "0928b48e6b64cf9b9b1d1e8f998e32532cde13ac", "filename": "tests/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,4 +1,5 @@\n-<pre class=\"rust item-decl\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n+<pre class=\"rust item-decl\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where\n+    T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     // Required methods"}, {"sha": "38b6cb8b5c6131ddc25fac5f75acd81eb9eb0550", "filename": "tests/rustdoc/whitespace-after-where-clause.union.html", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,3 +1,4 @@\n-<pre class=\"rust item-decl\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<pre class=\"rust item-decl\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where\n+    B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     /* private fields */\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "81f28c1755deb452976804391ac6d6b5f9ce0d0b", "filename": "tests/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,8 +1,7 @@\n // compile-flags: -Ztreat-err-as-bug=1\n // failure-status: 101\n // rustc-env:RUST_BACKTRACE=1\n-// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: .*unexpectedly panicked.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n // normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\""}, {"sha": "01fb8153cf3846c9be84c82096379456d5c275fc", "filename": "tests/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-eval-query-stack.rs:17:16\n+  --> $DIR/const-eval-query-stack.rs:16:16\n    |\n LL | const X: i32 = 1 / 0;\n    |                ^^^^^ attempt to divide `1_i32` by zero"}, {"sha": "0365d87a6f82aae88f3b23ce85dd8f398d69b2a1", "filename": "tests/ui/dyn-star/align.over_aligned.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(dyn_star)]\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0277]: `AlignedUsize` needs to be a pointer-sized type\n+error[E0277]: `AlignedUsize` needs to have the same alignment and size as a pointer\n   --> $DIR/align.rs:15:13\n    |\n LL |     let x = AlignedUsize(12) as dyn* Debug;\n-   |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-sized type\n+   |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `AlignedUsize`\n+   = help: the trait `PointerLike` is not implemented for `AlignedUsize`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6679997a9402917a5e269ce9ff576be23a481f07", "filename": "tests/ui/dyn-star/align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -13,5 +13,5 @@ struct AlignedUsize(usize);\n \n fn main() {\n     let x = AlignedUsize(12) as dyn* Debug;\n-    //[over_aligned]~^ ERROR `AlignedUsize` needs to be a pointer-sized type\n+    //[over_aligned]~^ ERROR `AlignedUsize` needs to have the same alignment and size as a pointer\n }"}, {"sha": "85749aa7b00e2a886db52603620c04cdd4e05662", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -9,7 +9,7 @@ fn dyn_debug(_: (dyn* Debug + '_)) {\n \n fn polymorphic<T: Debug + ?Sized>(t: &T) {\n     dyn_debug(t);\n-    //~^ ERROR `&T` needs to be a pointer-sized type\n+    //~^ ERROR `&T` needs to have the same alignment and size as a pointer\n }\n \n fn main() {}"}, {"sha": "350630f794138d31a4c28ffe45ed5c0bb0e29fb4", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,14 +1,14 @@\n-error[E0277]: `&T` needs to be a pointer-sized type\n+error[E0277]: `&T` needs to have the same alignment and size as a pointer\n   --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n    |\n LL |     dyn_debug(t);\n-   |               ^ `&T` needs to be a pointer-sized type\n+   |               ^ `&T` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `&T`\n+   = help: the trait `PointerLike` is not implemented for `&T`\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerSized {\n-   |                                          ++++++++++++++++++++++\n+LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerLike {\n+   |                                          +++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "17bc4f303bffabd1ad541756d76b45e791fa61c4", "filename": "tests/ui/dyn-star/check-size-at-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -5,6 +5,6 @@ use std::fmt::Debug;\n \n fn main() {\n     let i = [1, 2, 3, 4] as dyn* Debug;\n-    //~^ ERROR `[i32; 4]` needs to be a pointer-sized type\n+    //~^ ERROR `[i32; 4]` needs to have the same alignment and size as a pointer\n     dbg!(i);\n }"}, {"sha": "19700b40644006df9e1b388ade33cc10dad87b38", "filename": "tests/ui/dyn-star/check-size-at-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: `[i32; 4]` needs to be a pointer-sized type\n+error[E0277]: `[i32; 4]` needs to have the same alignment and size as a pointer\n   --> $DIR/check-size-at-cast.rs:7:13\n    |\n LL |     let i = [1, 2, 3, 4] as dyn* Debug;\n-   |             ^^^^^^^^^^^^ `[i32; 4]` needs to be a pointer-sized type\n+   |             ^^^^^^^^^^^^ `[i32; 4]` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `[i32; 4]`\n+   = help: the trait `PointerLike` is not implemented for `[i32; 4]`\n \n error: aborting due to previous error\n "}, {"sha": "e60144fea74c348aa3a425f99581d59b3f4f5bfd", "filename": "tests/ui/dyn-star/upcast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fupcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fdyn-star%2Fupcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fupcast.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(dyn_star, trait_upcasting)]\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0277]: `dyn* Foo` needs to be a pointer-sized type\n+error[E0277]: `dyn* Foo` needs to have the same alignment and size as a pointer\n   --> $DIR/upcast.rs:30:23\n    |\n LL |     let w: dyn* Bar = w;\n-   |                       ^ `dyn* Foo` needs to be a pointer-sized type\n+   |                       ^ `dyn* Foo` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `dyn* Foo`\n+   = help: the trait `PointerLike` is not implemented for `dyn* Foo`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5a18983a3fa709b892d0efa52feae2183d90a4aa", "filename": "tests/ui/fmt/respanned-literal-issue-106191.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -3,7 +3,7 @@\n // known-bug: #106191\n // unset-rustc-env:RUST_BACKTRACE\n // had to be reverted\n-// error-pattern:internal compiler error\n+// error-pattern:unexpectedly panicked\n // failure-status:101\n // dont-check-compiler-stderr\n "}, {"sha": "f3a773837785e3a98f80e9fcc421b06006b29cb4", "filename": "tests/ui/impl-trait/issues/issue-86800.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -9,9 +9,7 @@ LL | type TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResu\n \n stack backtrace:\n \n-error: internal compiler error: unexpected panic\n-\n-\n+error: the compiler unexpectedly panicked. this is a bug.\n \n \n "}, {"sha": "a3a514fb830958beb540e7452e46f0733f02c019", "filename": "tests/ui/layout/valid_range_oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Flayout%2Fvalid_range_oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Flayout%2Fvalid_range_oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fvalid_range_oob.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -1,4 +1,4 @@\n-error: internal compiler error: unexpected panic\n+error: the compiler unexpectedly panicked. this is a bug.\n \n query stack during panic:\n #0 [layout_of] computing layout of `Foo`"}, {"sha": "7bf08bee9222465b3d01f963615c1fc7da3ba0aa", "filename": "tests/ui/panics/default-backtrace-ice.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanics%2Fdefault-backtrace-ice.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -4,9 +4,7 @@ LL | fn main() { missing_ident; }\n \n stack backtrace:\n \n-error: internal compiler error: unexpected panic\n-\n-\n+error: the compiler unexpectedly panicked. this is a bug.\n \n \n "}, {"sha": "3745a075e6a448086ed3396469b3e19b0c3d8954", "filename": "tests/ui/traits/new-solver/pointer-like.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+#![feature(pointer_like_trait)]\n+\n+use std::marker::PointerLike;\n+\n+fn require_(_: impl PointerLike) {}\n+\n+fn main() {\n+    require_(1usize);\n+    require_(1u16);\n+    //~^ ERROR `u16` needs to have the same alignment and size as a pointer\n+    require_(&1i16);\n+}"}, {"sha": "f695e64187d4423d0603a11c29347955aee7c374", "filename": "tests/ui/traits/new-solver/pointer-like.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `u16` needs to have the same alignment and size as a pointer\n+  --> $DIR/pointer-like.rs:11:14\n+   |\n+LL |     require_(1u16);\n+   |     -------- ^^^^ the trait `PointerLike` is not implemented for `u16`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: the trait bound `u16: PointerLike` is not satisfied\n+note: required by a bound in `require_`\n+  --> $DIR/pointer-like.rs:7:21\n+   |\n+LL | fn require_(_: impl PointerLike) {}\n+   |                     ^^^^^^^^^^^ required by this bound in `require_`\n+help: consider borrowing here\n+   |\n+LL |     require_(&1u16);\n+   |              +\n+LL |     require_(&mut 1u16);\n+   |              ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "15681cd132ec64b583380bbff700f3119bace75f", "filename": "tests/ui/traits/new-solver/pointer-sized.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ba4e95368b2a71018cd995f5254ba3e7422954e/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba4e95368b2a71018cd995f5254ba3e7422954e/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs?ref=7ba4e95368b2a71018cd995f5254ba3e7422954e", "patch": "@@ -1,12 +0,0 @@\n-#![feature(pointer_sized_trait)]\n-\n-use std::marker::PointerSized;\n-\n-fn require_pointer_sized(_: impl PointerSized) {}\n-\n-fn main() {\n-    require_pointer_sized(1usize);\n-    require_pointer_sized(1u16);\n-    //~^ ERROR `u16` needs to be a pointer-sized type\n-    require_pointer_sized(&1i16);\n-}"}, {"sha": "b250b1331bbf9ef1083cc1349d7b6e74ec91e7f7", "filename": "tests/ui/traits/new-solver/pointer-sized.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ba4e95368b2a71018cd995f5254ba3e7422954e/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba4e95368b2a71018cd995f5254ba3e7422954e/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr?ref=7ba4e95368b2a71018cd995f5254ba3e7422954e", "patch": "@@ -1,24 +0,0 @@\n-error[E0277]: `u16` needs to be a pointer-sized type\n-  --> $DIR/pointer-sized.rs:9:27\n-   |\n-LL |     require_pointer_sized(1u16);\n-   |     --------------------- ^^^^ the trait `PointerSized` is not implemented for `u16`\n-   |     |\n-   |     required by a bound introduced by this call\n-   |\n-   = note: the trait bound `u16: PointerSized` is not satisfied\n-note: required by a bound in `require_pointer_sized`\n-  --> $DIR/pointer-sized.rs:5:34\n-   |\n-LL | fn require_pointer_sized(_: impl PointerSized) {}\n-   |                                  ^^^^^^^^^^^^ required by this bound in `require_pointer_sized`\n-help: consider borrowing here\n-   |\n-LL |     require_pointer_sized(&1u16);\n-   |                           +\n-LL |     require_pointer_sized(&mut 1u16);\n-   |                           ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "22c6175048a63ecff25877a248f98d99c970b54a", "filename": "tests/ui/treat-err-as-bug/delay_span_bug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftreat-err-as-bug%2Fdelay_span_bug.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -4,7 +4,7 @@ error: internal compiler error: delayed span bug triggered by #[rustc_error(dela\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: internal compiler error: unexpected panic\n+error: the compiler unexpectedly panicked. this is a bug.\n \n query stack during panic:\n #0 [trigger_delay_span_bug] triggering a delay span bug"}, {"sha": "3a56445a26b58102caea740bef520fef157f3a00", "filename": "tests/ui/treat-err-as-bug/err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftreat-err-as-bug%2Ferr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftreat-err-as-bug%2Ferr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftreat-err-as-bug%2Ferr.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL | pub static C: u32 = 0 - 1;\n    |                     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n \n-error: internal compiler error: unexpected panic\n+error: the compiler unexpectedly panicked. this is a bug.\n \n query stack during panic:\n #0 [eval_to_allocation_raw] const-evaluating + checking `C`"}, {"sha": "6fbac2ee9758e26eada49c860323cbf4c8a58519", "filename": "tests/ui/typeck/issue-107775.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftypeck%2Fissue-107775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftypeck%2Fissue-107775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-107775.rs?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -0,0 +1,40 @@\n+// edition: 2021\n+\n+use std::collections::HashMap;\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+pub trait Trait {\n+    fn do_something<'async_trait>(byte: u8)\n+    ->\n+        Pin<Box<dyn Future<Output = ()> +\n+        Send + 'async_trait>>;\n+}\n+\n+pub struct Struct;\n+\n+impl Trait for Struct {\n+    fn do_something<'async_trait>(byte: u8)\n+        ->\n+            Pin<Box<dyn Future<Output = ()> +\n+            Send + 'async_trait>> {\n+        Box::pin(\n+\n+            async move { let byte = byte; let _: () = {}; })\n+    }\n+}\n+\n+pub struct Map {\n+    map: HashMap<u16, fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>>>,\n+}\n+\n+impl Map {\n+    pub fn new() -> Self {\n+        let mut map = HashMap::new();\n+        map.insert(1, Struct::do_something);\n+        Self { map }\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9ee9c022c6e8cc978514a33e27493d09481b514b", "filename": "tests/ui/typeck/issue-107775.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftypeck%2Fissue-107775.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9f2dd6752f591906281d8aa5e16a8c51a8801/tests%2Fui%2Ftypeck%2Fissue-107775.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-107775.stderr?ref=6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107775.rs:35:16\n+   |\n+LL |         map.insert(1, Struct::do_something);\n+   |                    -  -------------------- this is of type `fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}`, which causes `map` to be inferred as `HashMap<{integer}, fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}>`\n+   |                    |\n+   |                    this is of type `{integer}`, which causes `map` to be inferred as `HashMap<{integer}, fn(u8) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}>`\n+LL |         Self { map }\n+   |                ^^^ expected `HashMap<u16, fn(u8) -> Pin<...>>`, found `HashMap<{integer}, ...>`\n+   |\n+   = note: expected struct `HashMap<u16, fn(_) -> Pin<Box<(dyn Future<Output = ()> + Send + 'static)>>>`\n+              found struct `HashMap<{integer}, fn(_) -> Pin<Box<dyn Future<Output = ()> + Send>> {<Struct as Trait>::do_something::<'_>}>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}