{"sha": "2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzJiOTQyY2ZiMWMxNmJlMWQyODlmN2IyZmVlZTEzZWVlMWQ2Nzk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-12T19:37:06Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-14T19:22:19Z"}, "message": "Remove BorrowckErrors trait\n\nIts methods are now inherent methods of `MirBorrowckCtxt`", "tree": {"sha": "7920927d078f1ac0d82771c15bc11ddd265e2410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7920927d078f1ac0d82771c15bc11ddd265e2410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "html_url": "https://github.com/rust-lang/rust/commit/2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a99038d06f2f7efd4a520b8cdb5da66b15e85f", "html_url": "https://github.com/rust-lang/rust/commit/37a99038d06f2f7efd4a520b8cdb5da66b15e85f"}], "stats": {"total": 244, "additions": 109, "deletions": 135}, "files": [{"sha": "8986e87627e5e6c0102b76ad1523176a32c80806", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "patch": "@@ -22,7 +22,7 @@ use super::{InitializationRequiringAction, PrefixSet};\n use super::error_reporting::{IncludingDowncast, UseSpans};\n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MovePathIndex, MoveOutIndex};\n-use crate::util::borrowck_errors::BorrowckErrors;\n+use crate::util::borrowck_errors;\n \n #[derive(Debug)]\n struct MoveSite {\n@@ -89,7 +89,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 Some(name) => format!(\"`{}`\", name),\n                 None => \"value\".to_owned(),\n             };\n-            let mut err = self.infcx.tcx.cannot_act_on_uninitialized_variable(\n+            let mut err = self.cannot_act_on_uninitialized_variable(\n                 span,\n                 desired_action.as_noun(),\n                 &self.describe_place_with_options(moved_place, IncludingDowncast(true))\n@@ -119,7 +119,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             let msg = \"\"; //FIXME: add \"partially \" or \"collaterally \"\n \n-            let mut err = self.infcx.tcx.cannot_act_on_moved_value(\n+            let mut err = self.cannot_act_on_moved_value(\n                 span,\n                 desired_action.as_noun(),\n                 msg,\n@@ -265,7 +265,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"report_move_out_while_borrowed: location={:?} place={:?} span={:?} borrow={:?}\",\n             location, place, span, borrow\n         );\n-        let tcx = self.infcx.tcx;\n         let value_msg = match self.describe_place(place) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n@@ -281,7 +280,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let move_spans = self.move_spans(place, location);\n         let span = move_spans.args_or_use();\n \n-        let mut err = tcx.cannot_move_when_borrowed(\n+        let mut err = self.cannot_move_when_borrowed(\n             span,\n             &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n         );\n@@ -312,8 +311,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         (place, _span): (&Place<'tcx>, Span),\n         borrow: &BorrowData<'tcx>,\n     ) -> DiagnosticBuilder<'cx> {\n-        let tcx = self.infcx.tcx;\n-\n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.args_or_use();\n \n@@ -322,7 +319,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let use_spans = self.move_spans(place, location);\n         let span = use_spans.var_or_use();\n \n-        let mut err = tcx.cannot_use_when_mutably_borrowed(\n+        let mut err = self.cannot_use_when_mutably_borrowed(\n             span,\n             &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n             borrow_span,\n@@ -372,7 +369,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         };\n \n         // FIXME: supply non-\"\" `opt_via` when appropriate\n-        let tcx = self.infcx.tcx;\n         let first_borrow_desc;\n         let mut err = match (\n             gen_borrow_kind,\n@@ -384,7 +380,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         ) {\n             (BorrowKind::Shared, lft, _, BorrowKind::Mut { .. }, _, rgt) => {\n                 first_borrow_desc = \"mutable \";\n-                tcx.cannot_reborrow_already_borrowed(\n+                self.cannot_reborrow_already_borrowed(\n                     span,\n                     &desc_place,\n                     &msg_place,\n@@ -398,7 +394,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n             (BorrowKind::Mut { .. }, _, lft, BorrowKind::Shared, rgt, _) => {\n                 first_borrow_desc = \"immutable \";\n-                tcx.cannot_reborrow_already_borrowed(\n+                self.cannot_reborrow_already_borrowed(\n                     span,\n                     &desc_place,\n                     &msg_place,\n@@ -413,7 +409,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Mut { .. }, _, _, BorrowKind::Mut { .. }, _, _) => {\n                 first_borrow_desc = \"first \";\n-                tcx.cannot_mutably_borrow_multiply(\n+                self.cannot_mutably_borrow_multiply(\n                     span,\n                     &desc_place,\n                     &msg_place,\n@@ -425,7 +421,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Unique, _, _, BorrowKind::Unique, _, _) => {\n                 first_borrow_desc = \"first \";\n-                tcx.cannot_uniquely_borrow_by_two_closures(\n+                self.cannot_uniquely_borrow_by_two_closures(\n                     span,\n                     &desc_place,\n                     issued_span,\n@@ -435,7 +431,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Mut { .. }, _, _, BorrowKind::Shallow, _, _)\n             | (BorrowKind::Unique, _, _, BorrowKind::Shallow, _, _) => {\n-                let mut err = tcx.cannot_mutate_in_match_guard(\n+                let mut err = self.cannot_mutate_in_match_guard(\n                     span,\n                     issued_span,\n                     &desc_place,\n@@ -453,7 +449,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Unique, _, _, _, _, _) => {\n                 first_borrow_desc = \"first \";\n-                tcx.cannot_uniquely_borrow_by_one_closure(\n+                self.cannot_uniquely_borrow_by_one_closure(\n                     span,\n                     container_name,\n                     &desc_place,\n@@ -467,7 +463,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Shared, lft, _, BorrowKind::Unique, _, _) => {\n                 first_borrow_desc = \"first \";\n-                tcx.cannot_reborrow_already_uniquely_borrowed(\n+                self.cannot_reborrow_already_uniquely_borrowed(\n                     span,\n                     container_name,\n                     &desc_place,\n@@ -482,7 +478,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             (BorrowKind::Mut { .. }, _, lft, BorrowKind::Unique, _, _) => {\n                 first_borrow_desc = \"first \";\n-                tcx.cannot_reborrow_already_uniquely_borrowed(\n+                self.cannot_reborrow_already_uniquely_borrowed(\n                     span,\n                     container_name,\n                     &desc_place,\n@@ -821,7 +817,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let mut err = self.infcx.tcx.path_does_not_live_long_enough(\n+        let mut err = self.path_does_not_live_long_enough(\n             borrow_span,\n             &format!(\"`{}`\", name),\n         );\n@@ -912,9 +908,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.var_or_use();\n \n-        let mut err = self.infcx\n-            .tcx\n-            .cannot_borrow_across_destructor(borrow_span);\n+        let mut err = self.cannot_borrow_across_destructor(borrow_span);\n \n         let what_was_dropped = match self.describe_place(place) {\n             Some(name) => format!(\"`{}`\", name.as_str()),\n@@ -965,9 +959,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             drop_span, borrow_span\n         );\n \n-        let mut err = self.infcx\n-            .tcx\n-            .thread_local_value_does_not_live_long_enough(borrow_span);\n+        let mut err = self.thread_local_value_does_not_live_long_enough(borrow_span);\n \n         err.span_label(\n             borrow_span,\n@@ -1011,8 +1003,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let tcx = self.infcx.tcx;\n-        let mut err = tcx.temporary_value_borrowed_for_too_long(proper_span);\n+        let mut err = self.temporary_value_borrowed_for_too_long(proper_span);\n         err.span_label(\n             proper_span,\n             \"creates a temporary which is freed while still in use\",\n@@ -1055,8 +1046,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         category: ConstraintCategory,\n         opt_place_desc: Option<&String>,\n     ) -> Option<DiagnosticBuilder<'cx>> {\n-        let tcx = self.infcx.tcx;\n-\n         let return_kind = match category {\n             ConstraintCategory::Return => \"return\",\n             ConstraintCategory::Yield => \"yield\",\n@@ -1119,7 +1108,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         };\n \n-        let mut err = tcx.cannot_return_reference_to_local(\n+        let mut err = self.cannot_return_reference_to_local(\n             return_span,\n             return_kind,\n             reference_desc,\n@@ -1144,7 +1133,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n \n-        let mut err = tcx.cannot_capture_in_long_lived_closure(\n+        let mut err = self.cannot_capture_in_long_lived_closure(\n             args_span,\n             captured_var,\n             var_span,\n@@ -1203,7 +1192,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"function\"\n         };\n \n-        let mut err = tcx.borrowed_data_escapes_closure(escape_span, escapes_from);\n+        let mut err = borrowck_errors::borrowed_data_escapes_closure(\n+            tcx,\n+            escape_span,\n+            escapes_from,\n+        );\n \n         err.span_label(\n             upvar_span,\n@@ -1345,9 +1338,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let loan_spans = self.retrieve_borrow_spans(loan);\n         let loan_span = loan_spans.args_or_use();\n \n-        let tcx = self.infcx.tcx;\n         if loan.kind == BorrowKind::Shallow {\n-            let mut err = tcx.cannot_mutate_in_match_guard(\n+            let mut err = self.cannot_mutate_in_match_guard(\n                 span,\n                 loan_span,\n                 &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n@@ -1363,7 +1355,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             return;\n         }\n \n-        let mut err = tcx.cannot_assign_to_borrowed(\n+        let mut err = self.cannot_assign_to_borrowed(\n             span,\n             loan_span,\n             &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n@@ -1427,7 +1419,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some(decl) => (self.describe_place(err_place), decl.source_info.span),\n         };\n \n-        let mut err = self.infcx.tcx.cannot_reassign_immutable(\n+        let mut err = self.cannot_reassign_immutable(\n             span,\n             place_description.as_ref().map(AsRef::as_ref).unwrap_or(\"_\"),\n             from_arg,"}, {"sha": "5b08b5a4ab82894ab00eb9ff8d2f58beba679b24", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "patch": "@@ -41,7 +41,6 @@ use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{do_dataflow, DebugFormatted};\n use crate::dataflow::EverInitializedPlaces;\n use crate::dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use crate::util::borrowck_errors::BorrowckErrors;\n \n use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n@@ -423,7 +422,7 @@ fn downgrade_if_error(diag: &mut Diagnostic) {\n }\n \n pub struct MirBorrowckCtxt<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'cx, 'tcx>,\n+    pub(crate) infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: &'cx Body<'tcx>,\n     mir_def_id: DefId,\n     move_data: &'cx MoveData<'tcx>,\n@@ -1499,8 +1498,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         debug!(\"check_for_local_borrow({:?})\", borrow);\n \n         if borrow_of_local_data(&borrow.borrowed_place) {\n-            let err = self.infcx.tcx\n-                .cannot_borrow_across_generator_yield(\n+            let err = self.cannot_borrow_across_generator_yield(\n                     self.retrieve_borrow_spans(borrow).var_or_use(),\n                     yield_span,\n                 );"}, {"sha": "5939adc5528d9f83dec9571f1b360093ab8ff256", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "patch": "@@ -12,7 +12,6 @@ use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind,\n     LookupResult, MoveError, MovePathIndex,\n };\n-use crate::util::borrowck_errors::BorrowckErrors;\n \n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For\n@@ -254,11 +253,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         )\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n-                        self.infcx.tcx\n-                            .cannot_move_out_of_interior_of_drop(span, ty)\n+                        self.cannot_move_out_of_interior_of_drop(span, ty)\n                     }\n                     IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } =>\n-                        self.infcx.tcx.cannot_move_out_of_interior_noncopy(\n+                        self.cannot_move_out_of_interior_noncopy(\n                             span, ty, Some(*is_index),\n                         ),\n                 },\n@@ -293,7 +291,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             )\n         };\n \n-        self.infcx.tcx.cannot_move_out_of(span, &description)\n+        self.cannot_move_out_of(span, &description)\n     }\n \n     fn report_cannot_move_from_borrowed_content(\n@@ -317,7 +315,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if let Place::Base(PlaceBase::Local(local)) = *deref_base {\n             let decl = &self.body.local_decls[local];\n             if decl.is_ref_for_guard() {\n-                let mut err = self.infcx.tcx.cannot_move_out_of(\n+                let mut err = self.cannot_move_out_of(\n                     span,\n                     &format!(\"`{}` in pattern guard\", decl.name.unwrap()),\n                 );\n@@ -331,7 +329,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         debug!(\"report: ty={:?}\", ty);\n         let mut err = match ty.sty {\n             ty::Array(..) | ty::Slice(..) =>\n-                self.infcx.tcx.cannot_move_out_of_interior_noncopy(span, ty, None),\n+                self.cannot_move_out_of_interior_noncopy(span, ty, None),\n             ty::Closure(def_id, closure_substs)\n                 if def_id == self.mir_def_id && upvar_field.is_some()\n             => {\n@@ -373,7 +371,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     closure_kind_ty, closure_kind, place_description,\n                 );\n \n-                let mut diag = self.infcx.tcx.cannot_move_out_of(span, &place_description);\n+                let mut diag = self.cannot_move_out_of(span, &place_description);\n \n                 diag.span_label(upvar_span, \"captured outer variable\");\n \n@@ -383,13 +381,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let source = self.borrowed_content_source(deref_base);\n                 match (self.describe_place(move_place), source.describe_for_named_place()) {\n                     (Some(place_desc), Some(source_desc)) => {\n-                        self.infcx.tcx.cannot_move_out_of(\n+                        self.cannot_move_out_of(\n                             span,\n                             &format!(\"`{}` which is behind a {}\", place_desc, source_desc),\n                         )\n                     }\n                     (_, _) => {\n-                        self.infcx.tcx.cannot_move_out_of(\n+                        self.cannot_move_out_of(\n                             span,\n                             &source.describe_for_unnamed_place(),\n                         )"}, {"sha": "a3a4e4fef16801aacdff13269a51368524a402f7", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "patch": "@@ -9,7 +9,6 @@ use syntax_pos::symbol::kw;\n \n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::error_reporting::BorrowedContentSource;\n-use crate::util::borrowck_errors::BorrowckErrors;\n use crate::util::collect_writes::FindAssignments;\n use crate::util::suggest_ref_mut;\n use rustc_errors::Applicability;\n@@ -161,13 +160,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         let span = match error_access {\n             AccessKind::Move => {\n-                err = self.infcx.tcx.cannot_move_out_of(span, &(item_msg + &reason));\n+                err = self.cannot_move_out_of(span, &(item_msg + &reason));\n                 err.span_label(span, \"cannot move\");\n                 err.buffer(&mut self.errors_buffer);\n                 return;\n             }\n             AccessKind::Mutate => {\n-                err = self.infcx.tcx.cannot_assign(span, &(item_msg + &reason));\n+                err = self.cannot_assign(span, &(item_msg + &reason));\n                 act = \"assign\";\n                 acted_on = \"written\";\n                 span\n@@ -178,7 +177,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 let borrow_spans = self.borrow_spans(span, location);\n                 let borrow_span = borrow_spans.args_or_use();\n-                err = self.infcx.tcx.cannot_borrow_path_as_mutable_because(\n+                err = self.cannot_borrow_path_as_mutable_because(\n                     borrow_span,\n                     &item_msg,\n                     &reason,"}, {"sha": "efa18587b7ddb7ddbc4b880ba14639e034af2f48", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "patch": "@@ -4,8 +4,8 @@ use crate::borrow_check::nll::region_infer::RegionInferenceContext;\n use crate::borrow_check::nll::type_check::Locations;\n use crate::borrow_check::nll::universal_regions::DefiningTy;\n use crate::borrow_check::nll::ConstraintDescription;\n-use crate::util::borrowck_errors::BorrowckErrors;\n use crate::borrow_check::Upvar;\n+use crate::util::borrowck_errors;\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n@@ -487,9 +487,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             );\n         }\n \n-        let mut diag = infcx\n-            .tcx\n-            .borrowed_data_escapes_closure(span, escapes_from);\n+        let mut diag = borrowck_errors::borrowed_data_escapes_closure(\n+            infcx.tcx,\n+            span,\n+            escapes_from,\n+        );\n \n         if let Some((Some(outlived_fr_name), outlived_fr_span)) = outlived_fr_name_and_span {\n             diag.span_label("}, {"sha": "24bb8938a20451db4dc1455b2bdd45c755780f27", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 63, "deletions": 78, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc2b942cfb1c16be1d289f7b2feee13eee1d679/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=2cc2b942cfb1c16be1d289f7b2feee13eee1d679", "patch": "@@ -2,18 +2,9 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n-pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n-    fn struct_span_err_with_code<S: Into<MultiSpan>>(\n-        self,\n-        sp: S,\n-        msg: &str,\n-        code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'cx>;\n-\n-    fn struct_span_err<S: Into<MultiSpan>>(self, sp: S, msg: &str) -> DiagnosticBuilder<'cx>;\n-\n-    fn cannot_move_when_borrowed(\n-        self,\n+impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n+    pub(crate) fn cannot_move_when_borrowed(\n+        &self,\n         span: Span,\n         desc: &str,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -26,8 +17,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_use_when_mutably_borrowed(\n-        self,\n+    pub(crate) fn cannot_use_when_mutably_borrowed(\n+        &self,\n         span: Span,\n         desc: &str,\n         borrow_span: Span,\n@@ -49,8 +40,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_act_on_uninitialized_variable(\n-        self,\n+    pub(crate) fn cannot_act_on_uninitialized_variable(\n+        &self,\n         span: Span,\n         verb: &str,\n         desc: &str,\n@@ -65,8 +56,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_mutably_borrow_multiply(\n-        self,\n+    pub(crate) fn cannot_mutably_borrow_multiply(\n+        &self,\n         new_loan_span: Span,\n         desc: &str,\n         opt_via: &str,\n@@ -114,8 +105,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_uniquely_borrow_by_two_closures(\n-        self,\n+    pub(crate) fn cannot_uniquely_borrow_by_two_closures(\n+        &self,\n         new_loan_span: Span,\n         desc: &str,\n         old_loan_span: Span,\n@@ -143,8 +134,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_uniquely_borrow_by_one_closure(\n-        self,\n+    pub(crate) fn cannot_uniquely_borrow_by_one_closure(\n+        &self,\n         new_loan_span: Span,\n         container_name: &str,\n         desc_new: &str,\n@@ -174,8 +165,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_reborrow_already_uniquely_borrowed(\n-        self,\n+    pub(crate) fn cannot_reborrow_already_uniquely_borrowed(\n+        &self,\n         new_loan_span: Span,\n         container_name: &str,\n         desc_new: &str,\n@@ -210,8 +201,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_reborrow_already_borrowed(\n-        self,\n+    pub(crate) fn cannot_reborrow_already_borrowed(\n+        &self,\n         span: Span,\n         desc_new: &str,\n         msg_new: &str,\n@@ -263,8 +254,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_assign_to_borrowed(\n-        self,\n+    pub(crate) fn cannot_assign_to_borrowed(\n+        &self,\n         span: Span,\n         borrow_span: Span,\n         desc: &str,\n@@ -285,8 +276,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_reassign_immutable(\n-        self,\n+    pub(crate) fn cannot_reassign_immutable(\n+        &self,\n         span: Span,\n         desc: &str,\n         is_arg: bool,\n@@ -306,12 +297,12 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_assign(self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n+    pub(crate) fn cannot_assign(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n-    fn cannot_move_out_of(\n-        self,\n+    pub(crate) fn cannot_move_out_of(\n+        &self,\n         move_from_span: Span,\n         move_from_desc: &str,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -327,8 +318,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n     /// Signal an error due to an attempt to move out of the interior\n     /// of an array or slice. `is_index` is None when error origin\n     /// didn't capture whether there was an indexing operation or not.\n-    fn cannot_move_out_of_interior_noncopy(\n-        self,\n+    pub(crate) fn cannot_move_out_of_interior_noncopy(\n+        &self,\n         move_from_span: Span,\n         ty: Ty<'_>,\n         is_index: Option<bool>,\n@@ -350,8 +341,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_move_out_of_interior_of_drop(\n-        self,\n+    pub(crate) fn cannot_move_out_of_interior_of_drop(\n+        &self,\n         move_from_span: Span,\n         container_ty: Ty<'_>,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -366,8 +357,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_act_on_moved_value(\n-        self,\n+    pub(crate) fn cannot_act_on_moved_value(\n+        &self,\n         use_span: Span,\n         verb: &str,\n         optional_adverb_for_moved: &str,\n@@ -388,8 +379,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_borrow_path_as_mutable_because(\n-        self,\n+    pub(crate) fn cannot_borrow_path_as_mutable_because(\n+        &self,\n         span: Span,\n         path: &str,\n         reason: &str,\n@@ -404,8 +395,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_mutate_in_match_guard(\n-        self,\n+    pub(crate) fn cannot_mutate_in_match_guard(\n+        &self,\n         mutate_span: Span,\n         match_span: Span,\n         match_place: &str,\n@@ -424,8 +415,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_borrow_across_generator_yield(\n-        self,\n+    pub(crate) fn cannot_borrow_across_generator_yield(\n+        &self,\n         span: Span,\n         yield_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -439,8 +430,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_borrow_across_destructor(\n-        self,\n+    pub(crate) fn cannot_borrow_across_destructor(\n+        &self,\n         borrow_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n@@ -451,8 +442,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn path_does_not_live_long_enough(\n-        self,\n+    pub(crate) fn path_does_not_live_long_enough(\n+        &self,\n         span: Span,\n         path: &str,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -465,8 +456,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_return_reference_to_local(\n-        self,\n+    pub(crate) fn cannot_return_reference_to_local(\n+        &self,\n         span: Span,\n         return_kind: &str,\n         reference_desc: &str,\n@@ -490,8 +481,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_capture_in_long_lived_closure(\n-        self,\n+    pub(crate) fn cannot_capture_in_long_lived_closure(\n+        &self,\n         closure_span: Span,\n         borrowed_path: &str,\n         capture_span: Span,\n@@ -513,22 +504,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn borrowed_data_escapes_closure(\n-        self,\n-        escape_span: Span,\n-        escapes_from: &str,\n-    ) -> DiagnosticBuilder<'cx> {\n-        struct_span_err!(\n-            self,\n-            escape_span,\n-            E0521,\n-            \"borrowed data escapes outside of {}\",\n-            escapes_from,\n-        )\n-    }\n-\n-    fn thread_local_value_does_not_live_long_enough(\n-        self,\n+    pub(crate) fn thread_local_value_does_not_live_long_enough(\n+        &self,\n         span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n@@ -539,8 +516,8 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn temporary_value_borrowed_for_too_long(\n-        self,\n+    pub(crate) fn temporary_value_borrowed_for_too_long(\n+        &self,\n         span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(\n@@ -550,19 +527,27 @@ pub(crate) trait BorrowckErrors<'cx>: Sized + Copy {\n             \"temporary value dropped while borrowed\",\n         )\n     }\n-}\n \n-impl BorrowckErrors<'tcx> for TyCtxt<'tcx> {\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(\n-        self,\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'tcx> {\n-        self.sess.struct_span_err_with_code(sp, msg, code)\n+        self.infcx.tcx.sess.struct_span_err_with_code(sp, msg, code)\n     }\n+}\n \n-    fn struct_span_err<S: Into<MultiSpan>>(self, sp: S, msg: &str) -> DiagnosticBuilder<'tcx> {\n-        self.sess.struct_span_err(sp, msg)\n-    }\n+pub(crate) fn borrowed_data_escapes_closure<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    escape_span: Span,\n+    escapes_from: &str,\n+) -> DiagnosticBuilder<'tcx> {\n+    struct_span_err!(\n+        tcx.sess,\n+        escape_span,\n+        E0521,\n+        \"borrowed data escapes outside of {}\",\n+        escapes_from,\n+    )\n }"}]}