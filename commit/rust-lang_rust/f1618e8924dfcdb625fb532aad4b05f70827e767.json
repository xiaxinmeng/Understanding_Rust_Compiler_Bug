{"sha": "f1618e8924dfcdb625fb532aad4b05f70827e767", "node_id": "C_kwDOAAsO6NoAKGYxNjE4ZTg5MjRkZmNkYjYyNWZiNTMyYWFkNGIwNWY3MDgyN2U3Njc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-22T01:46:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-25T23:41:13Z"}, "message": "handle consts with param/infer in const_eval_resolve better", "tree": {"sha": "3d9632d2e04bffffefd016055a9f05bc6b57b82b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9632d2e04bffffefd016055a9f05bc6b57b82b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1618e8924dfcdb625fb532aad4b05f70827e767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1618e8924dfcdb625fb532aad4b05f70827e767", "html_url": "https://github.com/rust-lang/rust/commit/f1618e8924dfcdb625fb532aad4b05f70827e767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1618e8924dfcdb625fb532aad4b05f70827e767/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dbae3ad19309bb541d9e76638e6aa4b5449f29a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbae3ad19309bb541d9e76638e6aa4b5449f29a", "html_url": "https://github.com/rust-lang/rust/commit/6dbae3ad19309bb541d9e76638e6aa4b5449f29a"}], "stats": {"total": 109, "additions": 47, "deletions": 62}, "files": [{"sha": "4595cf6e270d22f01d93c2a308f938b206f6e603", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f1618e8924dfcdb625fb532aad4b05f70827e767/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1618e8924dfcdb625fb532aad4b05f70827e767/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f1618e8924dfcdb625fb532aad4b05f70827e767", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n use rustc_middle::mir::interpret::{ErrorHandled, EvalToValTreeResult};\n use rustc_middle::traits::select;\n-use rustc_middle::ty::abstract_const::AbstractConst;\n+use rustc_middle::ty::abstract_const::{AbstractConst, FailureKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n@@ -1683,7 +1683,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn const_eval_resolve(\n         &self,\n-        param_env: ty::ParamEnv<'tcx>,\n+        mut param_env: ty::ParamEnv<'tcx>,\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToValTreeResult<'tcx> {\n@@ -1694,10 +1694,45 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // variables\n         if substs.has_infer_types_or_consts() {\n             let ac = AbstractConst::new(self.tcx, unevaluated.shrink());\n-            if let Ok(None) = ac {\n-                substs = InternalSubsts::identity_for_item(self.tcx, unevaluated.def.did);\n-            } else {\n-                return Err(ErrorHandled::TooGeneric);\n+            match ac {\n+                Ok(None) => {\n+                    substs = InternalSubsts::identity_for_item(self.tcx, unevaluated.def.did);\n+                    param_env = self.tcx.param_env(unevaluated.def.did);\n+                }\n+                Ok(Some(ct)) => {\n+                    if ct.unify_failure_kind(self.tcx) == FailureKind::Concrete {\n+                        substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n+                            let needs_replacement =\n+                                arg.has_param_types_or_consts() || arg.has_infer_types_or_consts();\n+                            match arg.unpack() {\n+                                GenericArgKind::Type(_) if needs_replacement => self\n+                                    .tcx\n+                                    .mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                                        universe: ty::UniverseIndex::ROOT,\n+                                        name: ty::BoundVar::from_usize(idx),\n+                                    }))\n+                                    .into(),\n+                                GenericArgKind::Const(ct) if needs_replacement => self\n+                                    .tcx\n+                                    .mk_const(ty::ConstS {\n+                                        ty: ct.ty(),\n+                                        kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                                            universe: ty::UniverseIndex::ROOT,\n+                                            name: ty::BoundConst {\n+                                                var: ty::BoundVar::from_usize(idx),\n+                                                ty: ct.ty(),\n+                                            },\n+                                        }),\n+                                    })\n+                                    .into(),\n+                                _ => arg,\n+                            }\n+                        }));\n+                    } else {\n+                        return Err(ErrorHandled::TooGeneric);\n+                    }\n+                }\n+                Err(guar) => return Err(ErrorHandled::Reported(guar)),\n             }\n         }\n "}, {"sha": "254bc4ab66386bbf345a630e5ec306741b6701e5", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1618e8924dfcdb625fb532aad4b05f70827e767/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1618e8924dfcdb625fb532aad4b05f70827e767/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=f1618e8924dfcdb625fb532aad4b05f70827e767", "patch": "@@ -185,21 +185,12 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         }\n         let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n         match concrete {\n-            Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n-                NotConstEvaluatable::MentionsInfer\n-            } else if uv.has_param_types_or_consts() {\n-                infcx\n-                    .tcx\n-                    .sess\n-                    .delay_span_bug(span, &format!(\"unexpected `TooGeneric` for {:?}\", uv));\n-                NotConstEvaluatable::MentionsParam\n-            } else {\n-                let guar = infcx.tcx.sess.delay_span_bug(\n+            Err(ErrorHandled::TooGeneric) => {\n+                Err(NotConstEvaluatable::Error(infcx.tcx.sess.delay_span_bug(\n                     span,\n                     format!(\"Missing value for constant, but no error reported?\"),\n-                );\n-                NotConstEvaluatable::Error(guar)\n-            }),\n+                )))\n+            }\n             Err(ErrorHandled::Linted) => {\n                 let reported = infcx\n                     .tcx"}, {"sha": "5874625adff61e1ca35d95416fae6af120f30b81", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1618e8924dfcdb625fb532aad4b05f70827e767/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1618e8924dfcdb625fb532aad4b05f70827e767/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs?ref=f1618e8924dfcdb625fb532aad4b05f70827e767", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n@@ -21,11 +23,6 @@ where\n }\n \n fn main() {\n-    // FIXME(generic_const_exprs): We can't correctly infer `T` which requires\n-    // evaluating `{ N + 1 }` which has substs containing an inference var\n     let mut _q = Default::default();\n-    //~^ ERROR type annotations needed\n-\n     _q = foo::<_, 2>(_q);\n-    //~^ ERROR type annotations needed\n }"}, {"sha": "9e8328d37017ea0ee92fd90ed4de5f2064761ecb", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6dbae3ad19309bb541d9e76638e6aa4b5449f29a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6dbae3ad19309bb541d9e76638e6aa4b5449f29a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr?ref=6dbae3ad19309bb541d9e76638e6aa4b5449f29a", "patch": "@@ -1,38 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/const_eval_resolve_canonical.rs:26:9\n-   |\n-LL |     let mut _q = Default::default();\n-   |         ^^^^^^\n-   |\n-help: consider giving `_q` an explicit type\n-   |\n-LL |     let mut _q: _ = Default::default();\n-   |               +++\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/const_eval_resolve_canonical.rs:29:10\n-   |\n-LL |     _q = foo::<_, 2>(_q);\n-   |          ^^^^^^^^^^^ cannot infer the value of the constant `{ N + 1 }`\n-   |\n-note: multiple `impl`s satisfying `(): Foo<{ N + 1 }>` found\n-  --> $DIR/const_eval_resolve_canonical.rs:8:1\n-   |\n-LL | impl Foo<0> for () {\n-   | ^^^^^^^^^^^^^^^^^^\n-...\n-LL | impl Foo<3> for () {\n-   | ^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `foo`\n-  --> $DIR/const_eval_resolve_canonical.rs:18:9\n-   |\n-LL | fn foo<T, const N: usize>(_: T) -> <() as Foo<{ N + 1 }>>::Assoc\n-   |    --- required by a bound in this\n-LL | where\n-LL |     (): Foo<{ N + 1 }>,\n-   |         ^^^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0282, E0283.\n-For more information about an error, try `rustc --explain E0282`."}]}