{"sha": "dbe7ed33cd14166ed52ff02f4db145e199c348cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZTdlZDMzY2QxNDE2NmVkNTJmZjAyZjRkYjE0NWUxOTljMzQ4Y2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T20:19:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T20:19:39Z"}, "message": "Rollup merge of #74340 - davidtwco:issue-73747-improper-ctypes-defns-is-zst-with-params, r=pnkfelix\n\nlint: use `transparent_newtype_field` to avoid ICE\n\nFixes #73747.\n\nThis PR re-uses the `transparent_newtype_field` function instead of manually calling `is_zst` on normalized fields to determine which field in a transparent type is the non-zero-sized field, thus avoiding an ICE.", "tree": {"sha": "873851698947a162abdd85a971618981b1e19b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873851698947a162abdd85a971618981b1e19b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe7ed33cd14166ed52ff02f4db145e199c348cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDhNbCRBK7hj4Ov3rIwAAdHIIADzlm0K2En+g1CG0Ku5Tjmmb\nnm68jY24fNZhlDHa/vKXnT7mICcjcmXyPTKBRQSqrK4i6ZGFjtOHlK6G1Ln+oHWh\nZpavIZmOR3SqsNghfQwC5yqU0fq7Es0FJeUbTPLMDRItKKN0/+7MA8cb+gpxNyJ5\ny8uOI8H8Pf4RNRojNDnArLwFQjE7MAvUdv4/UDF4OtgajEHGE3Kw8EDn4FDjTaIT\nykjJ8SkfjfkaWzBF+HWuxjx1x3FThMRgDTzt5X6Z0X5a77xTNYQmsvmV7Acy05LR\ncdkX2mCfh+06U/Chhsi+iSMbon5rch08ks21uir4+sb9ktiGdGZIlDqbz9Xz/Lg=\n=NGUy\n-----END PGP SIGNATURE-----\n", "payload": "tree 873851698947a162abdd85a971618981b1e19b2a\nparent c4fcf5a7a4e70073e2229641fedfd57a63f3dfed\nparent cccc3109ffc61a742bcaa9241e457ceadb96ce95\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594757979 -0700\ncommitter GitHub <noreply@github.com> 1594757979 -0700\n\nRollup merge of #74340 - davidtwco:issue-73747-improper-ctypes-defns-is-zst-with-params, r=pnkfelix\n\nlint: use `transparent_newtype_field` to avoid ICE\n\nFixes #73747.\n\nThis PR re-uses the `transparent_newtype_field` function instead of manually calling `is_zst` on normalized fields to determine which field in a transparent type is the non-zero-sized field, thus avoiding an ICE.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe7ed33cd14166ed52ff02f4db145e199c348cd", "html_url": "https://github.com/rust-lang/rust/commit/dbe7ed33cd14166ed52ff02f4db145e199c348cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe7ed33cd14166ed52ff02f4db145e199c348cd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed", "html_url": "https://github.com/rust-lang/rust/commit/c4fcf5a7a4e70073e2229641fedfd57a63f3dfed"}, {"sha": "cccc3109ffc61a742bcaa9241e457ceadb96ce95", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccc3109ffc61a742bcaa9241e457ceadb96ce95", "html_url": "https://github.com/rust-lang/rust/commit/cccc3109ffc61a742bcaa9241e457ceadb96ce95"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "46741fcf2ba0c290864bc6aa1b4a39890cd0fc22", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dbe7ed33cd14166ed52ff02f4db145e199c348cd/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe7ed33cd14166ed52ff02f4db145e199c348cd/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dbe7ed33cd14166ed52ff02f4db145e199c348cd", "patch": "@@ -531,23 +531,23 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match ty.kind {\n             ty::FnPtr(_) => true,\n             ty::Ref(..) => true,\n-            ty::Adt(field_def, substs) if field_def.repr.transparent() && !field_def.is_union() => {\n-                for field in field_def.all_fields() {\n-                    let field_ty = self.cx.tcx.normalize_erasing_regions(\n-                        self.cx.param_env,\n-                        field.ty(self.cx.tcx, substs),\n-                    );\n-                    if field_ty.is_zst(self.cx.tcx, field.did) {\n-                        continue;\n-                    }\n+            ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n+                let guaranteed_nonnull_optimization = self\n+                    .cx\n+                    .tcx\n+                    .get_attrs(def.did)\n+                    .iter()\n+                    .any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed));\n+\n+                if guaranteed_nonnull_optimization {\n+                    return true;\n+                }\n \n-                    let attrs = self.cx.tcx.get_attrs(field_def.did);\n-                    if attrs\n-                        .iter()\n-                        .any(|a| a.check_name(sym::rustc_nonnull_optimization_guaranteed))\n-                        || self.ty_is_known_nonnull(field_ty)\n-                    {\n-                        return true;\n+                for variant in &def.variants {\n+                    if let Some(field) = variant.transparent_newtype_field(self.cx.tcx) {\n+                        if self.ty_is_known_nonnull(field.ty(self.cx.tcx, substs)) {\n+                            return true;\n+                        }\n                     }\n                 }\n "}, {"sha": "293ffd5c28e1089cee0a40805786a13f408251a9", "filename": "src/test/ui/lint/lint-ctypes-73747.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbe7ed33cd14166ed52ff02f4db145e199c348cd/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe7ed33cd14166ed52ff02f4db145e199c348cd/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73747.rs?ref=dbe7ed33cd14166ed52ff02f4db145e199c348cd", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#[repr(transparent)]\n+struct NonNullRawComPtr<T: ComInterface> {\n+    inner: std::ptr::NonNull<<T as ComInterface>::VTable>,\n+}\n+\n+trait ComInterface {\n+    type VTable;\n+}\n+\n+extern \"C\" fn invoke<T: ComInterface>(_: Option<NonNullRawComPtr<T>>) {}\n+\n+fn main() {}"}]}