{"sha": "0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOTE4YTg1NzVjZmM3ZDdlYzk3Yjg2ZTg3YzExZTAyM2FjM2EzN2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-25T13:36:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-25T13:36:03Z"}, "message": "improve heuristics for what makes an interesting constraint", "tree": {"sha": "c04cf9936068fffa25e25acc4704bc4003c16edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c04cf9936068fffa25e25acc4704bc4003c16edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "html_url": "https://github.com/rust-lang/rust/commit/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76991ea2377f1652846b89b2a1eb6a67fef7ecf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/76991ea2377f1652846b89b2a1eb6a67fef7ecf3", "html_url": "https://github.com/rust-lang/rust/commit/76991ea2377f1652846b89b2a1eb6a67fef7ecf3"}], "stats": {"total": 128, "additions": 87, "deletions": 41}, "files": [{"sha": "1b540ef74be49e05830e28c9635e08e96cdba54b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -104,7 +104,48 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             categorized_path\n         );\n \n-        // Find what appears to be the most interesting path to report to the user.\n+        // To find the best span to cite, we first try to look for the\n+        // final constraint that is interesting and where the `sup` is\n+        // not unified with the ultimate target region. The reason\n+        // for this is that we have a chain of constraints that lead\n+        // from the source to the target region, something like:\n+        //\n+        //    '0: '1 ('0 is the source)\n+        //    '1: '2\n+        //    '2: '3\n+        //    '3: '4\n+        //    '4: '5\n+        //    '5: '6 ('6 is the target)\n+        //\n+        // Some of those regions are unified with `'6` (in the same\n+        // SCC).  We want to screen those out. After that point, the\n+        // \"closest\" constraint we have to the end is going to be the\n+        // most likely to be the point where the value escapes -- but\n+        // we still want to screen for an \"interesting\" point to\n+        // highlight (e.g., a call site or something).\n+        let target_scc = self.constraint_sccs.scc(target_region);\n+        let best_choice = (0..path.len()).rev().find(|&i| {\n+            let constraint = &self.constraints[path[i]];\n+\n+            let constraint_sup_scc = self.constraint_sccs.scc(constraint.sup);\n+            if constraint_sup_scc == target_scc {\n+                return false;\n+            }\n+\n+            match categorized_path[i].0 {\n+                ConstraintCategory::Boring => false,\n+                _ => true,\n+            }\n+        });\n+        if let Some(i) = best_choice {\n+            let (category, span) = categorized_path[i];\n+            return (category, span, target_region);\n+        }\n+\n+        // If that search fails, that is.. unusual. Maybe everything\n+        // is in the same SCC or something. In that case, find what\n+        // appears to be the most interesting point to report to the\n+        // user via an even more ad-hoc guess.\n         categorized_path.sort_by(|p0, p1| p0.0.cmp(&p1.0));\n         debug!(\"best_blame_constraint: sorted_path={:#?}\", categorized_path);\n "}, {"sha": "c6f8d2e519ca1c7909aca8cb49c3c354cb6c6bd7", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -10,19 +10,21 @@ warning: not reporting region error due to nll\n LL |         self.x.iter().map(|a| a.0)\n    |                ^^^^\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/static-return-lifetime-infered.rs:17:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         - let's call the lifetime of this reference `'1`\n+   |                         ----- `self` is a reference that is only valid in the closure body\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^ cast requires that `'1` must outlive `'static`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` escapes the closure body here\n \n-error: unsatisfied lifetime constraints\n+error: borrowed data escapes outside of closure\n   --> $DIR/static-return-lifetime-infered.rs:21:9\n    |\n+LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n+   |                        -------- `self` is a reference that is only valid in the closure body\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^ cast requires that `'a` must outlive `'static`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` escapes the closure body here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d2b26603426f2b134c345cfe67abd109b1a1550", "filename": "src/test/ui/issue-40288-2.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fissue-40288-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fissue-40288-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40288-2.nll.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -35,22 +35,22 @@ LL |     let mut out = Struct { head: x, _tail: [()] };\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/issue-40288-2.rs:16:31\n+  --> $DIR/issue-40288-2.rs:17:9\n    |\n LL | fn lifetime_transmute_slice<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n    |                                                      - consider changing the type of `y` to `&'a T`\n ...\n-LL |         let slice: &mut [_] = &mut out;\n-   |                               ^^^^^^^^ lifetime `'a` required\n+LL |         slice[0] = y;\n+   |         ^^^^^^^^^^^^ lifetime `'a` required\n \n error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/issue-40288-2.rs:31:41\n+  --> $DIR/issue-40288-2.rs:32:9\n    |\n LL | fn lifetime_transmute_struct<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n    |                                                       - consider changing the type of `y` to `&'a T`\n ...\n-LL |         let dst: &mut Struct<_, [()]> = &mut out;\n-   |                                         ^^^^^^^^ lifetime `'a` required\n+LL |         dst.head = y;\n+   |         ^^^^^^^^^^^^ lifetime `'a` required\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c43c4ce3a0c21fa5080eab79a0596133b418754c", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -11,20 +11,20 @@ LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n    |               ^\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:11:33\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:5\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                     ---         ^       --- these two types are declared with different lifetimes...\n-   |                                 |\n-   |                                 ...but data flows into `z` here\n+   |                     ---                 --- these two types are declared with different lifetimes...\n+LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n+   |     ^^^^^^^^^^^^^ ...but data flows into `z` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-3.rs:11:36\n+  --> $DIR/ex3-both-anon-regions-3.rs:12:5\n    |\n LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                         ---        ^         --- these two types are declared with different lifetimes...\n-   |                                    |\n-   |                                    ...but data flows into `z` here\n+   |                         ---                  --- these two types are declared with different lifetimes...\n+LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n+   |     ^^^^^^^^^^^^^ ...but data flows into `z` here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b879f9a33986d0b8c184a73f28d9378f38fa3aaa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -52,9 +52,9 @@ fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell\n         cell_c,\n         |_outlives1, _outlives2, _outlives3, x, y| {\n             // Only works if 'x: 'y:\n-            let p = x.get(); //~ ERROR\n+            let p = x.get();\n             //~^ WARN not reporting region error due to nll\n-            demand_y(x, y, p)\n+            demand_y(x, y, p) //~ ERROR\n         },\n     );\n }"}, {"sha": "a7a50a3a029817e099b4a2433a4ac47608c4f135", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -1,28 +1,28 @@\n warning: not reporting region error due to nll\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:55:21\n    |\n-LL |             let p = x.get(); //~ ERROR\n+LL |             let p = x.get();\n    |                     ^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-fail-no-postdom.rs:55:21\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:57:13\n    |\n LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n    |          ----------              ---------- lifetime `'2` appears in this argument\n    |          |\n    |          lifetime `'1` appears in this argument\n-LL |             // Only works if 'x: 'y:\n-LL |             let p = x.get(); //~ ERROR\n-   |                     ^^^^^^^ argument requires that `'1` must outlive `'2`\n+...\n+LL |             demand_y(x, y, p) //~ ERROR\n+   |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:53:9\n    |\n LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n LL | |             // Only works if 'x: 'y:\n-LL | |             let p = x.get(); //~ ERROR\n+LL | |             let p = x.get();\n LL | |             //~^ WARN not reporting region error due to nll\n-LL | |             demand_y(x, y, p)\n+LL | |             demand_y(x, y, p) //~ ERROR\n LL | |         },\n    | |_________^\n    |"}, {"sha": "b8e8fae14b005321a37e6e5985bca92dddb1606b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -5,15 +5,15 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |     ^^^\n \n error: borrowed data escapes outside of closure\n-  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:20\n+  --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:33:9\n    |\n LL |     foo(cell, |cell_a, cell_x| {\n    |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n    |                |\n    |                `cell_a` is declared here, outside of the closure body\n LL |         //~^ WARNING not reporting region error due to nll\n LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-   |                    ^^^^^^^^^^^^ `cell_x` escapes the closure body here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ `cell_x` escapes the closure body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:31:15"}, {"sha": "fb98c506c7d280a913b785441d731b06f4f7c1d7", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -5,15 +5,15 @@ LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:24\n+  --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |                                                ---------  - lifetime `'1` appears in this argument\n    |                                                |\n    |                                                lifetime `'2` appears in this argument\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n-   |                        ^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:45:47"}, {"sha": "73d39a8502b6438060cf366c70aad478c2dd4daa", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -5,15 +5,15 @@ LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:24\n+  --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |                                                ----------  ---------- lifetime `'2` appears in this argument\n    |                                                |\n    |                                                lifetime `'1` appears in this argument\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n-   |                        ^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:49:47"}, {"sha": "5b4c669c66ecd84112ad2939746ecdbdc73ef5b5", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d918a8575cfc7d7ec97b86e87c11e023ac3a37c/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=0d918a8575cfc7d7ec97b86e87c11e023ac3a37c", "patch": "@@ -23,13 +23,16 @@ LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/dyn-trait-underscore.rs:18:5\n+  --> $DIR/dyn-trait-underscore.rs:16:52\n    |\n-LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                - let's call the lifetime of this reference `'1`\n-LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cast requires that `'1` must outlive `'static`\n+LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |  ________________-___________________________________^\n+   | |                |\n+   | |                let's call the lifetime of this reference `'1`\n+LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n+LL | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+LL | | }\n+   | |_^ return requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}]}