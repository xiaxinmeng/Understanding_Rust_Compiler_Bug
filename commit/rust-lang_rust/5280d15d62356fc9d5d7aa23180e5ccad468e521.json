{"sha": "5280d15d62356fc9d5d7aa23180e5ccad468e521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyODBkMTVkNjIzNTZmYzlkNWQ3YWEyMzE4MGU1Y2NhZDQ2OGU1MjE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-17T01:05:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T01:05:15Z"}, "message": "Rollup merge of #71164 - RalfJung:uninit-not-undef, r=oli-obk\n\nreword Miri validity errors: undefined -> uninitialized\n\nI don't think we say \"undefined value\" or anything like that anywhere in the docs or so, but we do use the term \"uninitialized memory\", so I think we should do the same here.\n\nLonger-term, I think we should also internally rename \"undef\" to \"uninit\".\n\nr? @oli-obk", "tree": {"sha": "a50661e12dee626df5dab54a79d77b1ece0aa1f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a50661e12dee626df5dab54a79d77b1ece0aa1f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5280d15d62356fc9d5d7aa23180e5ccad468e521", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemQDLCRBK7hj4Ov3rIwAAdHIIAHYk0qI/nZGYA/mJeE5xzULX\nNua6L4cL3svo49K2yUpbn588xoUeg6aa/bmqOr/QiTUEpWwZ46mpPFvsYCOnjpIy\nh7JLqd5YBFvJ8ZEudQbuTSb7MZYNbJjzU82AIkdELb6+IP8WAy0BzK0ICHLRHl7l\njiWGXhMafCnJwxQC0Vxj2IWsFPMiNRaiGwP5mR47kiUOp1L20yeVHCsuy/8xUy0W\nkBNY78HnvpqX36t1ez3UFeGh/f5WimhoirlvNIz9jFpu1pxJycYdxIA7BBnCZ0rB\nBNXEQ92AUjW3Je/VBR6TXvvhmQuIRpk8oFu73Skj1Ea8k22XsZcv2zlZiy336us=\n=K7kw\n-----END PGP SIGNATURE-----\n", "payload": "tree a50661e12dee626df5dab54a79d77b1ece0aa1f6\nparent d19458784f3f25e53484f58f66aef8b973f002bc\nparent 69423bf0493441de320ee58c6ac05b7011655710\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587085515 +0200\ncommitter GitHub <noreply@github.com> 1587085515 +0200\n\nRollup merge of #71164 - RalfJung:uninit-not-undef, r=oli-obk\n\nreword Miri validity errors: undefined -> uninitialized\n\nI don't think we say \"undefined value\" or anything like that anywhere in the docs or so, but we do use the term \"uninitialized memory\", so I think we should do the same here.\n\nLonger-term, I think we should also internally rename \"undef\" to \"uninit\".\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5280d15d62356fc9d5d7aa23180e5ccad468e521", "html_url": "https://github.com/rust-lang/rust/commit/5280d15d62356fc9d5d7aa23180e5ccad468e521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5280d15d62356fc9d5d7aa23180e5ccad468e521/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d19458784f3f25e53484f58f66aef8b973f002bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d19458784f3f25e53484f58f66aef8b973f002bc", "html_url": "https://github.com/rust-lang/rust/commit/d19458784f3f25e53484f58f66aef8b973f002bc"}, {"sha": "69423bf0493441de320ee58c6ac05b7011655710", "url": "https://api.github.com/repos/rust-lang/rust/commits/69423bf0493441de320ee58c6ac05b7011655710", "html_url": "https://github.com/rust-lang/rust/commit/69423bf0493441de320ee58c6ac05b7011655710"}], "stats": {"total": 137, "additions": 126, "deletions": 11}, "files": [{"sha": "83b8d58e0befc80c013f116210607a4c8ea3124e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=5280d15d62356fc9d5d7aa23180e5ccad468e521", "patch": "@@ -322,7 +322,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let value = self.ecx.read_immediate(value)?;\n         // Handle wide pointers.\n         // Check metadata early, for better diagnostics\n-        let place = try_validation!(self.ecx.ref_to_mplace(value), \"undefined pointer\", self.path);\n+        let place = try_validation!(\n+            self.ecx.ref_to_mplace(value),\n+            format_args!(\"uninitialized {}\", kind),\n+            self.path\n+        );\n         if place.layout.is_unsized() {\n             self.check_wide_ptr_meta(place.meta, place.layout)?;\n         }\n@@ -334,7 +338,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     format_args!(\"invalid {} metadata: {}\", kind, msg),\n                     self.path\n                 ),\n-                _ => bug!(\"Unexpected error during ptr size_and_align_of: {}\", err),\n+                _ => bug!(\"unexpected error during ptr size_and_align_of: {}\", err),\n             },\n         };\n         let (size, align) = size_and_align\n@@ -477,10 +481,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             }\n             ty::RawPtr(..) => {\n                 // We are conservative with undef for integers, but try to\n-                // actually enforce our current rules for raw pointers.\n+                // actually enforce the strict rules for raw pointers (mostly because\n+                // that lets us re-use `ref_to_mplace`).\n                 let place = try_validation!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    \"undefined pointer\",\n+                    \"uninitialized raw pointer\",\n                     self.path\n                 );\n                 if place.layout.is_unsized() {\n@@ -776,14 +781,14 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         // For some errors we might be able to provide extra information\n                         match err.kind {\n                             err_ub!(InvalidUndefBytes(Some(ptr))) => {\n-                                // Some byte was undefined, determine which\n+                                // Some byte was uninitialized, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n                                 let i = usize::try_from(ptr.offset.bytes() / layout.size.bytes())\n                                     .unwrap();\n                                 self.path.push(PathElem::ArrayElem(i));\n \n-                                throw_validation_failure!(\"undefined bytes\", self.path)\n+                                throw_validation_failure!(\"uninitialized bytes\", self.path)\n                             }\n                             // Other errors shouldn't be possible\n                             _ => return Err(err),"}, {"sha": "8907b0c160f88ef91ac90654e2ec694083a94290", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=5280d15d62356fc9d5d7aa23180e5ccad468e521", "patch": "@@ -0,0 +1,65 @@\n+#![feature(const_transmute)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n+\n+//! Test the \"array of int\" fast path in validity checking, and in particular whether it\n+//! points at the right array element.\n+\n+use std::mem;\n+\n+#[repr(C)]\n+union MaybeUninit<T: Copy> {\n+    uninit: (),\n+    init: T,\n+}\n+\n+const UNINIT_INT_0: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [0]\n+    [\n+        MaybeUninit { uninit: () }.init,\n+        1,\n+        2,\n+    ]\n+};\n+const UNINIT_INT_1: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [1]\n+    mem::transmute(\n+        [\n+            0u8,\n+            0u8,\n+            0u8,\n+            0u8,\n+            1u8,\n+            MaybeUninit { uninit: () }.init,\n+            1u8,\n+            1u8,\n+            2u8,\n+            2u8,\n+            MaybeUninit { uninit: () }.init,\n+            2u8,\n+        ]\n+    )\n+};\n+const UNINIT_INT_2: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [2]\n+    mem::transmute(\n+        [\n+            0u8,\n+            0u8,\n+            0u8,\n+            0u8,\n+            1u8,\n+            1u8,\n+            1u8,\n+            1u8,\n+            2u8,\n+            2u8,\n+            2u8,\n+            MaybeUninit { uninit: () }.init,\n+        ]\n+    )\n+};\n+\n+fn main() {}"}, {"sha": "b4a3c63b5a103f71f74a04249a2da36b0f548a06", "filename": "src/test/ui/consts/const-eval/ub-int-array.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr?ref=5280d15d62356fc9d5d7aa23180e5ccad468e521", "patch": "@@ -0,0 +1,45 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:15:1\n+   |\n+LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     [\n+...  |\n+LL | |     ]\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:24:1\n+   |\n+LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     mem::transmute(\n+...  |\n+LL | |     )\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [1]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:44:1\n+   |\n+LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     mem::transmute(\n+...  |\n+LL | |     )\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [2]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "10f4c8c03330ebdaa9498752c70161c9499b5c83", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=5280d15d62356fc9d5d7aa23180e5ccad468e521", "patch": "@@ -6,11 +6,11 @@ use std::mem;\n \n const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n-//~^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n+//~| type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n \n const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n-//~^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n+//~| type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n \n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value"}, {"sha": "f12753e5dcacc38b80a4e9db6480a995bf94f5dd", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=5280d15d62356fc9d5d7aa23180e5ccad468e521", "patch": "@@ -62,7 +62,7 @@ LL | |\n LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n LL | |     mem::transmute((42, uninit_len))\n LL | | };\n-   | |__^ type validation failed: encountered undefined pointer\n+   | |__^ type validation failed: encountered uninitialized reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -130,7 +130,7 @@ LL | |\n LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n LL | |     mem::transmute((42, uninit_len))\n LL | | };\n-   | |__^ type validation failed: encountered undefined pointer\n+   | |__^ type validation failed: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "2545167aa02f7a7f413c09fd39b93af4b5c997c6", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5280d15d62356fc9d5d7aa23180e5ccad468e521/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=5280d15d62356fc9d5d7aa23180e5ccad468e521", "patch": "@@ -27,7 +27,7 @@ LL | |         unsafe { UNION.field3 },\n ...  |\n LL | |     a: 42,\n LL | | };\n-   | |__^ type validation failed: encountered undefined bytes at .b[1]\n+   | |__^ type validation failed: encountered uninitialized bytes at .b[1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}