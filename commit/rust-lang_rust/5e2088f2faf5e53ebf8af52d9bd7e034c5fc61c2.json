{"sha": "5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjA4OGYyZmFmNWU1M2ViZjhhZjUyZDliZDdlMDM0YzVmYzYxYzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-06T18:35:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-06T19:37:59Z"}, "message": "rustc: For stack local derived tydescs, allocate the root tydesc separately from the parameter tydescs. This allows SROA, and consequently inlining, to work.", "tree": {"sha": "40970fee362706cd492367af1e8aabd6186512cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40970fee362706cd492367af1e8aabd6186512cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2", "html_url": "https://github.com/rust-lang/rust/commit/5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858", "html_url": "https://github.com/rust-lang/rust/commit/57a5c3ac9f7091c8a2f52a7fd2cab86d8a103858"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "86ddcddf28a4691ca9a63a29e8086e058e76859c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5e2088f2faf5e53ebf8af52d9bd7e034c5fc61c2", "patch": "@@ -1592,24 +1592,25 @@ fn linearize_ty_params(@block_ctxt cx, ty.t t) ->\n }\n \n fn trans_stack_local_derived_tydesc(@block_ctxt cx, ValueRef llsz,\n-        ValueRef llalign, ValueRef lltydescs) -> result {\n-    auto lltydesc = alloca(cx, T_tydesc(cx.fcx.lcx.ccx.tn));\n+        ValueRef llalign, ValueRef llroottydesc, ValueRef llparamtydescs)\n+        -> result {\n+    auto llmyroottydesc = alloca(cx, T_tydesc(cx.fcx.lcx.ccx.tn));\n \n     // By convention, desc 0 is the root descriptor.\n-    auto llroottydesc = cx.build.Load(cx.build.GEP(lltydescs,\n-                                                   vec(C_int(0), C_int(0))));\n     llroottydesc = cx.build.Load(llroottydesc);\n-    cx.build.Store(llroottydesc, lltydesc);\n+    cx.build.Store(llroottydesc, llmyroottydesc);\n \n     // Store a pointer to the rest of the descriptors.\n-    auto llfirstparam = cx.build.GEP(lltydescs, vec(C_int(0), C_int(1)));\n+    auto llfirstparam = cx.build.GEP(llparamtydescs, vec(C_int(0), C_int(0)));\n     cx.build.Store(llfirstparam,\n-                   cx.build.GEP(lltydesc, vec(C_int(0), C_int(0))));\n+                   cx.build.GEP(llmyroottydesc, vec(C_int(0), C_int(0))));\n \n-    cx.build.Store(llsz, cx.build.GEP(lltydesc, vec(C_int(0), C_int(1))));\n-    cx.build.Store(llalign, cx.build.GEP(lltydesc, vec(C_int(0), C_int(2))));\n+    cx.build.Store(llsz,\n+                   cx.build.GEP(llmyroottydesc, vec(C_int(0), C_int(1))));\n+    cx.build.Store(llalign,\n+                   cx.build.GEP(llmyroottydesc, vec(C_int(0), C_int(2))));\n \n-    ret res(cx, lltydesc);\n+    ret res(cx, llmyroottydesc);\n }\n \n fn mk_derived_tydesc(@block_ctxt cx, ty.t t, bool escapes) -> result {\n@@ -1621,19 +1622,6 @@ fn mk_derived_tydesc(@block_ctxt cx, ty.t t, bool escapes) -> result {\n \n     auto root = get_static_tydesc(cx, t, tys._0).tydesc;\n \n-    auto tydescs = alloca(cx, T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)),\n-                                      1u /* for root*/ + n_params));\n-\n-    auto i = 0;\n-    auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n-    cx.build.Store(root, tdp);\n-    i += 1;\n-    for (ValueRef td in tys._1) {\n-        auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n-        cx.build.Store(td, tdp);\n-        i += 1;\n-    }\n-\n     auto bcx = cx;\n     auto sz = size_of(bcx, t);\n     bcx = sz.bcx;\n@@ -1642,14 +1630,38 @@ fn mk_derived_tydesc(@block_ctxt cx, ty.t t, bool escapes) -> result {\n \n     auto v;\n     if (escapes) {\n+        auto tydescs = alloca(cx, T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)),\n+                                          1u /* for root*/ + n_params));\n+\n+        auto i = 0;\n+        auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n+        cx.build.Store(root, tdp);\n+        i += 1;\n+        for (ValueRef td in tys._1) {\n+            auto tdp = cx.build.GEP(tydescs, vec(C_int(0), C_int(i)));\n+            cx.build.Store(td, tdp);\n+            i += 1;\n+        }\n+\n         v = trans_upcall(bcx, \"upcall_get_type_desc\",\n                          vec(p2i(bcx.fcx.lcx.ccx.crate_ptr),\n                              sz.val,\n                              align.val,\n                              C_int((1u + n_params) as int),\n                              vp2i(bcx, tydescs)), true);\n     } else {\n-        v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val, tydescs);\n+        auto llparamtydescs = alloca(cx,\n+            T_array(T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn)), n_params));\n+\n+        auto i = 0;\n+        for (ValueRef td in tys._1) {\n+            auto tdp = cx.build.GEP(llparamtydescs, vec(C_int(0), C_int(i)));\n+            cx.build.Store(td, tdp);\n+            i += 1;\n+        }\n+\n+        v = trans_stack_local_derived_tydesc(bcx, sz.val, align.val, root,\n+                                             llparamtydescs);\n     }\n \n     ret res(v.bcx, vi2p(v.bcx, v.val, T_ptr(T_tydesc(cx.fcx.lcx.ccx.tn))));"}]}