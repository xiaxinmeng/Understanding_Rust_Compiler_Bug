{"sha": "c23fe81764281c35b58dcf578a494076bf2325c0", "node_id": "C_kwDOAAsO6NoAKGMyM2ZlODE3NjQyODFjMzViNThkY2Y1NzhhNDk0MDc2YmYyMzI1YzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-01T19:52:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-04T01:55:51Z"}, "message": "Use head span for rustc_on_unimplemented's enclosing_scope attr", "tree": {"sha": "a2cdce71cb9ca7e9bafa9d8fab95b624b75f831d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2cdce71cb9ca7e9bafa9d8fab95b624b75f831d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c23fe81764281c35b58dcf578a494076bf2325c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c23fe81764281c35b58dcf578a494076bf2325c0", "html_url": "https://github.com/rust-lang/rust/commit/c23fe81764281c35b58dcf578a494076bf2325c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c23fe81764281c35b58dcf578a494076bf2325c0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f0c3f79a85329dd79a54694ff8a7f427c842e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f0c3f79a85329dd79a54694ff8a7f427c842e9", "html_url": "https://github.com/rust-lang/rust/commit/84f0c3f79a85329dd79a54694ff8a7f427c842e9"}], "stats": {"total": 317, "additions": 120, "deletions": 197}, "files": [{"sha": "8fd2e1de7a16943df7a96e9150558833caac724b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -526,7 +526,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 });\n \n                             let enclosing_scope_span =\n-                                tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(body));\n+                                tcx.hir().span(tcx.hir().local_def_id_to_hir_id(body));\n \n                             err.span_label(enclosing_scope_span, s);\n                         }"}, {"sha": "4fe2ecd1e3811ddf960b01c726bd976fbc499be2", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "modified", "additions": 26, "deletions": 43, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1,17 +1,12 @@\n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:14:11\n    |\n-LL |       let x = || {\n-   |  _____________-\n-LL | |         f(Foo{});\n-   | |         - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |         |\n-   | |         required by a bound introduced by this call\n-LL | |         let y = || {\n-LL | |             f(Foo{});\n-LL | |         };\n-LL | |     };\n-   | |_____- in this scope\n+LL |     let x = || {\n+   |             -- in this scope\n+LL |         f(Foo{});\n+   |         - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n   --> $DIR/enclosing-scope.rs:10:9\n@@ -22,14 +17,12 @@ LL | fn f<T: Trait>(x: T) {}\n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:16:15\n    |\n-LL |           let y = || {\n-   |  _________________-\n-LL | |             f(Foo{});\n-   | |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |             |\n-   | |             required by a bound introduced by this call\n-LL | |         };\n-   | |_________- in this scope\n+LL |         let y = || {\n+   |                 -- in this scope\n+LL |             f(Foo{});\n+   |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n   --> $DIR/enclosing-scope.rs:10:9\n@@ -40,19 +33,13 @@ LL | fn f<T: Trait>(x: T) {}\n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:22:15\n    |\n-LL | / fn main() {\n-LL | |     let x = || {\n-LL | |         f(Foo{});\n-LL | |         let y = || {\n-...  |\n-LL | |             f(Foo{});\n-   | |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |             |\n-   | |             required by a bound introduced by this call\n-...  |\n-LL | |     f(Foo{});\n-LL | | }\n-   | |_- in this scope\n+LL | fn main() {\n+   | --------- in this scope\n+...\n+LL |             f(Foo{});\n+   |             - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |             |\n+   |             required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n   --> $DIR/enclosing-scope.rs:10:9\n@@ -63,17 +50,13 @@ LL | fn f<T: Trait>(x: T) {}\n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:26:7\n    |\n-LL | / fn main() {\n-LL | |     let x = || {\n-LL | |         f(Foo{});\n-LL | |         let y = || {\n-...  |\n-LL | |     f(Foo{});\n-   | |     - ^^^^^ the trait `Trait` is not implemented for `Foo`\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | | }\n-   | |_- in this scope\n+LL | fn main() {\n+   | --------- in this scope\n+...\n+LL |     f(Foo{});\n+   |     - ^^^^^ the trait `Trait` is not implemented for `Foo`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n   --> $DIR/enclosing-scope.rs:10:9"}, {"sha": "bc06fde49e993c3305934510f91e48268a907558", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1493,17 +1493,11 @@ LL |     if (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:132:19\n    |\n-LL | / fn nested_within_if_expr() {\n-LL | |     if &let 0 = 0 {}\n-LL | |\n-LL | |\n-...  |\n-LL | |     if (let 0 = 0)? {}\n-   | |                   ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn nested_within_if_expr() {\n+   | -------------------------- this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     if (let 0 = 0)? {}\n+   |                   ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n@@ -1693,17 +1687,11 @@ LL |     while (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:224:22\n    |\n-LL | / fn nested_within_while_expr() {\n-LL | |     while &let 0 = 0 {}\n-LL | |\n-LL | |\n-...  |\n-LL | |     while (let 0 = 0)? {}\n-   | |                      ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn nested_within_while_expr() {\n+   | ----------------------------- this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     while (let 0 = 0)? {}\n+   |                      ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n@@ -1881,17 +1869,11 @@ LL |     (let 0 = 0)?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/disallowed-positions.rs:325:16\n    |\n-LL | / fn outside_if_and_while_expr() {\n-LL | |     &let 0 = 0;\n-LL | |\n-LL | |\n-...  |\n-LL | |     (let 0 = 0)?;\n-   | |                ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn outside_if_and_while_expr() {\n+   | ------------------------------ this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     (let 0 = 0)?;\n+   |                ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n "}, {"sha": "27e6a603acd91689accbfe1fbe4b6e19139170e3", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -22,13 +22,10 @@ LL |     Ok(Err(123_i32)?)\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:11:12\n    |\n-LL | / fn option_to_result() -> Result<u64, String> {\n-LL | |     Some(3)?;\n-   | |            ^ use `.ok_or(...)?` to provide an error compatible with `Result<u64, String>`\n-LL | |\n-LL | |     Ok(10)\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn option_to_result() -> Result<u64, String> {\n+   | -------------------------------------------- this function returns a `Result`\n+LL |     Some(3)?;\n+   |            ^ use `.ok_or(...)?` to provide an error compatible with `Result<u64, String>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -38,12 +35,10 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n   --> $DIR/bad-interconversion.rs:17:31\n    |\n-LL | / fn control_flow_to_result() -> Result<u64, String> {\n-LL | |     Ok(ControlFlow::Break(123)?)\n-   | |                               ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Result<u64, String>`\n-LL | |\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn control_flow_to_result() -> Result<u64, String> {\n+   | -------------------------------------------------- this function returns a `Result`\n+LL |     Ok(ControlFlow::Break(123)?)\n+   |                               ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Result<u64, String>`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -53,12 +48,10 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:22:22\n    |\n-LL | / fn result_to_option() -> Option<u16> {\n-LL | |     Some(Err(\"hello\")?)\n-   | |                      ^ use `.ok()?` if you want to discard the `Result<Infallible, &str>` error information\n-LL | |\n-LL | | }\n-   | |_- this function returns an `Option`\n+LL | fn result_to_option() -> Option<u16> {\n+   | ------------------------------------ this function returns an `Option`\n+LL |     Some(Err(\"hello\")?)\n+   |                      ^ use `.ok()?` if you want to discard the `Result<Infallible, &str>` error information\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -68,12 +61,10 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n   --> $DIR/bad-interconversion.rs:27:33\n    |\n-LL | / fn control_flow_to_option() -> Option<u64> {\n-LL | |     Some(ControlFlow::Break(123)?)\n-   | |                                 ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Option<u64>`\n-LL | |\n-LL | | }\n-   | |_- this function returns an `Option`\n+LL | fn control_flow_to_option() -> Option<u64> {\n+   | ------------------------------------------ this function returns an `Option`\n+LL |     Some(ControlFlow::Break(123)?)\n+   |                                 ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Option<u64>`\n    |\n    = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -83,40 +74,32 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:32:39\n    |\n-LL | / fn result_to_control_flow() -> ControlFlow<String> {\n-LL | |     ControlFlow::Continue(Err(\"hello\")?)\n-   | |                                       ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `ControlFlow<String>`\n-LL | |\n-LL | | }\n-   | |_- this function returns a `ControlFlow`\n+LL | fn result_to_control_flow() -> ControlFlow<String> {\n+   | -------------------------------------------------- this function returns a `ControlFlow`\n+LL |     ControlFlow::Continue(Err(\"hello\")?)\n+   |                                       ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `ControlFlow<String>`\n    |\n    = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n    = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error[E0277]: the `?` operator can only be used on `ControlFlow`s in a function that returns `ControlFlow`\n   --> $DIR/bad-interconversion.rs:37:12\n    |\n-LL | / fn option_to_control_flow() -> ControlFlow<u64> {\n-LL | |     Some(3)?;\n-   | |            ^ this `?` produces `Option<Infallible>`, which is incompatible with `ControlFlow<u64>`\n-LL | |\n-LL | |     ControlFlow::Break(10)\n-LL | | }\n-   | |_- this function returns a `ControlFlow`\n+LL | fn option_to_control_flow() -> ControlFlow<u64> {\n+   | ----------------------------------------------- this function returns a `ControlFlow`\n+LL |     Some(3)?;\n+   |            ^ this `?` produces `Option<Infallible>`, which is incompatible with `ControlFlow<u64>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n    = help: the trait `FromResidual` is implemented for `ControlFlow<B, C>`\n \n error[E0277]: the `?` operator in a function that returns `ControlFlow<B, _>` can only be used on other `ControlFlow<B, _>`s (with the same Break type)\n   --> $DIR/bad-interconversion.rs:43:29\n    |\n-LL | / fn control_flow_to_control_flow() -> ControlFlow<i64> {\n-LL | |     ControlFlow::Break(4_u8)?;\n-   | |                             ^ this `?` produces `ControlFlow<u8, Infallible>`, which is incompatible with `ControlFlow<i64>`\n-LL | |\n-LL | |     ControlFlow::Continue(())\n-LL | | }\n-   | |_- this function returns a `ControlFlow`\n+LL | fn control_flow_to_control_flow() -> ControlFlow<i64> {\n+   | ----------------------------------------------------- this function returns a `ControlFlow`\n+LL |     ControlFlow::Break(4_u8)?;\n+   |                             ^ this `?` produces `ControlFlow<u8, Infallible>`, which is incompatible with `ControlFlow<i64>`\n    |\n    = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n    = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`"}, {"sha": "fabc1ff2c762ec34a85441720de9a79fa4c19a97", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1,13 +1,11 @@\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/option-to-result.rs:5:6\n    |\n-LL | / fn test_result() -> Result<(),()> {\n-LL | |     let a:Option<()> = Some(());\n-LL | |     a?;\n-   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<(), ()>`\n-LL | |     Ok(())\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn test_result() -> Result<(),()> {\n+   | --------------------------------- this function returns a `Result`\n+LL |     let a:Option<()> = Some(());\n+LL |     a?;\n+   |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<(), ()>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -17,13 +15,11 @@ LL | | }\n error[E0277]: the `?` operator can only be used on `Option`s, not `Result`s, in a function that returns `Option`\n   --> $DIR/option-to-result.rs:11:6\n    |\n-LL | / fn test_option() -> Option<i32>{\n-LL | |     let a:Result<i32, i32> = Ok(5);\n-LL | |     a?;\n-   | |      ^ use `.ok()?` if you want to discard the `Result<Infallible, i32>` error information\n-LL | |     Some(5)\n-LL | | }\n-   | |_- this function returns an `Option`\n+LL | fn test_option() -> Option<i32>{\n+   | ------------------------------- this function returns an `Option`\n+LL |     let a:Result<i32, i32> = Ok(5);\n+LL |     a?;\n+   |      ^ use `.ok()?` if you want to discard the `Result<Infallible, i32>` error information\n    |\n    = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n    = help: the following other types implement trait `FromResidual<R>`:"}, {"sha": "9ee540c79fdda6ace10d8ec0b64a889ba486cacf", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1,51 +1,44 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:7:6\n    |\n-LL | / fn a_function() -> u32 {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |      ^ cannot use the `?` operator in a function that returns `u32`\n-LL | |     22\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn a_function() -> u32 {\n+   | ---------------------- this function should return `Result` or `Option` to accept `?`\n+LL |     let x: Option<u32> = None;\n+LL |     x?;\n+   |      ^ cannot use the `?` operator in a function that returns `u32`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:14:10\n    |\n-LL |       let a_closure = || {\n-   |  _____________________-\n-LL | |         let x: Option<u32> = None;\n-LL | |         x?;\n-   | |          ^ cannot use the `?` operator in a closure that returns `{integer}`\n-LL | |         22\n-LL | |     };\n-   | |_____- this function should return `Result` or `Option` to accept `?`\n+LL |     let a_closure = || {\n+   |                     -- this function should return `Result` or `Option` to accept `?`\n+LL |         let x: Option<u32> = None;\n+LL |         x?;\n+   |          ^ cannot use the `?` operator in a closure that returns `{integer}`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n \n error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:26:14\n    |\n-LL | /         fn a_method() {\n-LL | |             let x: Option<u32> = None;\n-LL | |             x?;\n-   | |              ^ cannot use the `?` operator in a method that returns `()`\n-LL | |         }\n-   | |_________- this function should return `Result` or `Option` to accept `?`\n+LL |         fn a_method() {\n+   |         ------------- this function should return `Result` or `Option` to accept `?`\n+LL |             let x: Option<u32> = None;\n+LL |             x?;\n+   |              ^ cannot use the `?` operator in a method that returns `()`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n \n error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option-diagnostics.rs:39:14\n    |\n-LL | /         fn a_trait_method() {\n-LL | |             let x: Option<u32> = None;\n-LL | |             x?;\n-   | |              ^ cannot use the `?` operator in a trait method that returns `()`\n-LL | |         }\n-   | |_________- this function should return `Result` or `Option` to accept `?`\n+LL |         fn a_trait_method() {\n+   |         ------------------- this function should return `Result` or `Option` to accept `?`\n+LL |             let x: Option<u32> = None;\n+LL |             x?;\n+   |              ^ cannot use the `?` operator in a trait method that returns `()`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n "}, {"sha": "fad6a1fe8237b925ddd144ac937760a4f2eab81a", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1,13 +1,11 @@\n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n   --> $DIR/try-on-option.rs:5:6\n    |\n-LL | / fn foo() -> Result<u32, ()> {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<u32, ()>`\n-LL | |     Ok(22)\n-LL | | }\n-   | |_- this function returns a `Result`\n+LL | fn foo() -> Result<u32, ()> {\n+   | --------------------------- this function returns a `Result`\n+LL |     let x: Option<u32> = None;\n+LL |     x?;\n+   |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<u32, ()>`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n    = help: the following other types implement trait `FromResidual<R>`:\n@@ -17,13 +15,11 @@ LL | | }\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-on-option.rs:11:6\n    |\n-LL | / fn bar() -> u32 {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |      ^ cannot use the `?` operator in a function that returns `u32`\n-LL | |     22\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn bar() -> u32 {\n+   | --------------- this function should return `Result` or `Option` to accept `?`\n+LL |     let x: Option<u32> = None;\n+LL |     x?;\n+   |      ^ cannot use the `?` operator in a function that returns `u32`\n    |\n    = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n "}, {"sha": "7cd38e0cf95eaf339f0dcafb31d7de20b160ebb4", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23fe81764281c35b58dcf578a494076bf2325c0/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=c23fe81764281c35b58dcf578a494076bf2325c0", "patch": "@@ -1,15 +1,11 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:7:31\n    |\n-LL | / fn main() {\n-LL | |     // error for a `Try` type on a non-`Try` fn\n-LL | |     std::fs::File::open(\"foo\")?;\n-   | |                               ^ cannot use the `?` operator in a function that returns `()`\n-LL | |\n-...  |\n-LL | |     try_trait_generic::<()>();\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn main() {\n+   | --------- this function should return `Result` or `Option` to accept `?`\n+LL |     // error for a `Try` type on a non-`Try` fn\n+LL |     std::fs::File::open(\"foo\")?;\n+   |                               ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n \n@@ -24,17 +20,11 @@ LL |     ()?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n   --> $DIR/try-operator-on-main.rs:10:7\n    |\n-LL | / fn main() {\n-LL | |     // error for a `Try` type on a non-`Try` fn\n-LL | |     std::fs::File::open(\"foo\")?;\n-LL | |\n-LL | |     // a non-`Try` type on a non-`Try` fn\n-LL | |     ()?;\n-   | |       ^ cannot use the `?` operator in a function that returns `()`\n-...  |\n-LL | |     try_trait_generic::<()>();\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n+LL | fn main() {\n+   | --------- this function should return `Result` or `Option` to accept `?`\n+...\n+LL |     ()?;\n+   |       ^ cannot use the `?` operator in a function that returns `()`\n    |\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n "}]}