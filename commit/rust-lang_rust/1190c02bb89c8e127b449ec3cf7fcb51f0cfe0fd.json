{"sha": "1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "node_id": "C_kwDOAAsO6NoAKDExOTBjMDJiYjg5YzhlMTI3YjQ0OWVjM2NmN2ZjYjUxZjBjZmUwZmQ", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-05-14T17:21:23Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-05-14T17:21:23Z"}, "message": "fix #10773", "tree": {"sha": "de78585dc7196eb3e2995c739bd6697f11253666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de78585dc7196eb3e2995c739bd6697f11253666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "html_url": "https://github.com/rust-lang/rust/commit/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "371120bdbf58a331db5dcfb2d9cddc040f486de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/371120bdbf58a331db5dcfb2d9cddc040f486de8", "html_url": "https://github.com/rust-lang/rust/commit/371120bdbf58a331db5dcfb2d9cddc040f486de8"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "3d5c0514b58c335fb3075316839c29e61b9e2412", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "patch": "@@ -5,7 +5,8 @@ use clippy_utils::ty::{is_copy, is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, path_to_local, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, MatchSource, Node, PatKind};\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, MatchSource, Node, PatKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -138,6 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 if_chain! {\n                     if let ExprKind::Path(ref qpath) = path.kind;\n                     if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n+                    if !is_ty_alias(qpath);\n                     then {\n                         let a = cx.typeck_results().expr_ty(e);\n                         let b = cx.typeck_results().expr_ty(arg);\n@@ -195,3 +197,12 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n         }\n     }\n }\n+\n+/// `cx.qpath_res` seems to return `AssocFn` so we do this instead\n+fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n+    match *qpath {\n+        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n+        QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => is_ty_alias(&qpath),\n+        _ => false,\n+    }\n+}"}, {"sha": "c16caa38fe93ecbc46bddec79855a9d5e95e9b29", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "patch": "@@ -33,6 +33,11 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn dont_lint_on_type_alias() {\n+    type A = i32;\n+    _ = A::from(0i32);\n+}\n+\n fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n@@ -106,6 +111,7 @@ fn main() {\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n \n+    dont_lint_on_type_alias();\n     dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_expr_implementing_iterator();"}, {"sha": "c75a2bce4ca23e19b3197a12cfb4d58d558f597d", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "patch": "@@ -33,6 +33,11 @@ fn test_issue_3913() -> Result<(), std::io::Error> {\n     Ok(())\n }\n \n+fn dont_lint_on_type_alias() {\n+    type A = i32;\n+    _ = A::from(0i32);\n+}\n+\n fn dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr() {\n     let text = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     let lines = text.lines();\n@@ -106,6 +111,7 @@ fn main() {\n     test_questionmark().unwrap();\n     test_issue_3913().unwrap();\n \n+    dont_lint_on_type_alias();\n     dont_lint_into_iter_on_immutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_mutable_local_implementing_iterator_in_expr();\n     lint_into_iter_on_expr_implementing_iterator();"}, {"sha": "4dca3aac5336124a3f16f27d8a3ad4a42bf379ff", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=1190c02bb89c8e127b449ec3cf7fcb51f0cfe0fd", "patch": "@@ -23,97 +23,97 @@ LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:45:22\n+  --> $DIR/useless_conversion.rs:50:22\n    |\n LL |     if Some(\"ok\") == lines.into_iter().next() {}\n    |                      ^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `lines`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:50:21\n+  --> $DIR/useless_conversion.rs:55:21\n    |\n LL |     let mut lines = text.lines().into_iter();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:56:22\n+  --> $DIR/useless_conversion.rs:61:22\n    |\n LL |     if Some(\"ok\") == text.lines().into_iter().next() {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `text.lines()`\n \n error: useless conversion to the same type: `std::ops::Range<i32>`\n-  --> $DIR/useless_conversion.rs:62:13\n+  --> $DIR/useless_conversion.rs:67:13\n    |\n LL |     let _ = NUMBERS.into_iter().next();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n \n error: useless conversion to the same type: `std::ops::Range<i32>`\n-  --> $DIR/useless_conversion.rs:67:17\n+  --> $DIR/useless_conversion.rs:72:17\n    |\n LL |     let mut n = NUMBERS.into_iter();\n    |                 ^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `NUMBERS`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:128:21\n+  --> $DIR/useless_conversion.rs:134:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:129:21\n+  --> $DIR/useless_conversion.rs:135:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:130:13\n+  --> $DIR/useless_conversion.rs:136:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:131:13\n+  --> $DIR/useless_conversion.rs:137:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines<'_>`\n-  --> $DIR/useless_conversion.rs:132:13\n+  --> $DIR/useless_conversion.rs:138:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:133:13\n+  --> $DIR/useless_conversion.rs:139:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:134:21\n+  --> $DIR/useless_conversion.rs:140:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:139:13\n+  --> $DIR/useless_conversion.rs:145:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:145:23\n+  --> $DIR/useless_conversion.rs:151:23\n    |\n LL |     let _: Foo<'a'> = s2.into();\n    |                       ^^^^^^^^^ help: consider removing `.into()`: `s2`\n \n error: useless conversion to the same type: `Foo<'a'>`\n-  --> $DIR/useless_conversion.rs:147:13\n+  --> $DIR/useless_conversion.rs:153:13\n    |\n LL |     let _ = Foo::<'a'>::from(s3);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider removing `Foo::<'a'>::from()`: `s3`\n \n error: useless conversion to the same type: `std::vec::IntoIter<Foo<'a'>>`\n-  --> $DIR/useless_conversion.rs:149:13\n+  --> $DIR/useless_conversion.rs:155:13\n    |\n LL |     let _ = vec![s4, s4, s4].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![s4, s4, s4].into_iter()`"}]}