{"sha": "f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YzM1ZDllNDE3MWVhOTRiOTNkZDdjNmNhY2FhYjZjMTVkYTZkYzA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-03T14:08:28Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-05T22:34:01Z"}, "message": "fix handling of consts in borrow-checking\n\nI'm not sure how correct it this, but it gets whatever needs to compile\nto compile.", "tree": {"sha": "8ab3a75f39d995f5b68e66ef81dbfcf1c8bb4849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab3a75f39d995f5b68e66ef81dbfcf1c8bb4849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "html_url": "https://github.com/rust-lang/rust/commit/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a8a70d0d208e845cd49c3304bd56a2f3415d5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a8a70d0d208e845cd49c3304bd56a2f3415d5a", "html_url": "https://github.com/rust-lang/rust/commit/87a8a70d0d208e845cd49c3304bd56a2f3415d5a"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "890680b8b293b063731e690c1a1c25b32321ca38", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "patch": "@@ -192,6 +192,11 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         node_id: id,\n         move_data: &mdpe.move_data,\n         param_env: param_env,\n+        locals_are_invalidated_at_exit: match tcx.hir.body_owner_kind(id) {\n+            hir::BodyOwnerKind::Const |\n+            hir::BodyOwnerKind::Static(_) => false,\n+            hir::BodyOwnerKind::Fn => true,\n+        },\n         storage_dead_or_drop_error_reported: FxHashSet(),\n     };\n \n@@ -223,6 +228,9 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     node_id: ast::NodeId,\n     move_data: &'cx MoveData<'tcx>,\n     param_env: ParamEnv<'gcx>,\n+    /// This keeps track of whether local variables are free-ed when the function\n+    /// exits even without a `StorageDead`.\n+    locals_are_invalidated_at_exit: bool,\n     /// This field keeps track of when storage dead or drop errors are reported\n     /// in order to stop duplicate error reporting and identify the conditions required\n     /// for a \"temporary value dropped here while still borrowed\" error. See #45360.\n@@ -957,6 +965,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // FIXME(nll-rfc#40): do more precise destructor tracking here. For now\n         // we just know that all locals are dropped at function exit (otherwise\n         // we'll have a memory leak) and assume that all statics have a destructor.\n+        //\n+        // FIXME: allow thread-locals to borrow other thread locals?x\n         let (might_be_alive, will_be_dropped) = match root_place {\n             Place::Static(statik) => {\n                 // Thread-locals might be dropped after the function exits, but\n@@ -971,7 +981,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Place::Local(_) => {\n                 // Locals are always dropped at function exit, and if they\n                 // have a destructor it would've been called already.\n-                (false, true)\n+                (false, self.locals_are_invalidated_at_exit)\n             }\n             Place::Projection(..) => {\n                 bug!(\"root of {:?} is a projection ({:?})?\", place, root_place)\n@@ -1514,17 +1524,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Overlap::Disjoint\n                 }\n             }\n-            (Place::Static(statik1), Place::Static(statik2)) => {\n-                // We ignore borrows of mutable statics elsewhere, but\n-                // we need to keep track of thread-locals so we can\n-                // complain if they live loner than the function.\n-                if statik1.def_id == statik2.def_id {\n-                    debug!(\"place_element_conflict: DISJOINT-OR-EQ-STATIC\");\n-                    Overlap::EqualOrDisjoint\n-                } else {\n-                    debug!(\"place_element_conflict: DISJOINT-STATIC\");\n-                    Overlap::Disjoint\n-                }\n+            (Place::Static(..), Place::Static(..)) => {\n+                // Borrows of statics do not have to be tracked here.\n+                debug!(\"place_element_conflict: IGNORED-STATIC\");\n+                Overlap::Disjoint\n             }\n             (Place::Local(_), Place::Static(_)) |\n             (Place::Static(_), Place::Local(_)) => {"}]}