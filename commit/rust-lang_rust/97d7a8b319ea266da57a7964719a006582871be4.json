{"sha": "97d7a8b319ea266da57a7964719a006582871be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDdhOGIzMTllYTI2NmRhNTdhNzk2NDcxOWEwMDY1ODI4NzFiZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T16:32:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T16:32:25Z"}, "message": "Auto merge of #5737 - Uriopass:unit-for-ord, r=flip1995\n\nReprise: new lint: Unintentional return of unit from closures expecting Ord\n\nThis lint catches cases where the last statement of a closure expecting\nan instance of Ord has a trailing semi-colon. It compiles since the\nclosure ends up return () which also implements Ord but causes\nunexpected results in cases such as sort_by_key.\n\nFixes #5080\n\nReprise of #5348 where I addressed all the comments there\n\nchangelog: add lint [`unit_return_expecting_ord`]", "tree": {"sha": "ed9c78eef840b53ef62ca8dc892e38ed8cfdc807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed9c78eef840b53ef62ca8dc892e38ed8cfdc807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d7a8b319ea266da57a7964719a006582871be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d7a8b319ea266da57a7964719a006582871be4", "html_url": "https://github.com/rust-lang/rust/commit/97d7a8b319ea266da57a7964719a006582871be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d7a8b319ea266da57a7964719a006582871be4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca58e7dda4a9eb142599638c59dc04d15961175", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca58e7dda4a9eb142599638c59dc04d15961175", "html_url": "https://github.com/rust-lang/rust/commit/2ca58e7dda4a9eb142599638c59dc04d15961175"}, {"sha": "126790999a128a880ca276c49afd2927a66ffbbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/126790999a128a880ca276c49afd2927a66ffbbe", "html_url": "https://github.com/rust-lang/rust/commit/126790999a128a880ca276c49afd2927a66ffbbe"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "1c927b5f83a583b0dceeec84bfd737e00641e3cb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97d7a8b319ea266da57a7964719a006582871be4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/97d7a8b319ea266da57a7964719a006582871be4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=97d7a8b319ea266da57a7964719a006582871be4", "patch": "@@ -1679,6 +1679,7 @@ Released 2018-09-13\n [`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n+[`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n [`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map"}, {"sha": "7a4ca3902b33109771365e97e10cdea8fc93f6b4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97d7a8b319ea266da57a7964719a006582871be4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d7a8b319ea266da57a7964719a006582871be4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=97d7a8b319ea266da57a7964719a006582871be4", "patch": "@@ -300,6 +300,7 @@ mod trivially_copy_pass_by_ref;\n mod try_err;\n mod types;\n mod unicode;\n+mod unit_return_expecting_ord;\n mod unnamed_address;\n mod unnecessary_sort_by;\n mod unnested_or_patterns;\n@@ -826,6 +827,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n         &unicode::ZERO_WIDTH_SPACE,\n+        &unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n@@ -891,6 +893,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box attrs::Attributes);\n     store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n     store.register_late_pass(|| box unicode::Unicode);\n+    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n@@ -1436,6 +1439,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n@@ -1692,6 +1696,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),"}, {"sha": "fceb885516b81f3c4b5814044c82c0de169c4c9c", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/97d7a8b319ea266da57a7964719a006582871be4/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d7a8b319ea266da57a7964719a006582871be4/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=97d7a8b319ea266da57a7964719a006582871be4", "patch": "@@ -0,0 +1,177 @@\n+use crate::utils::{get_trait_def_id, paths, span_lint, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{Expr, ExprKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{BytePos, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for functions that expect closures of type\n+    /// Fn(...) -> Ord where the implemented closure returns the unit type.\n+    /// The lint also suggests to remove the semi-colon at the end of the statement if present.\n+    ///\n+    /// **Why is this bad?** Likely, returning the unit type is unintentional, and\n+    /// could simply be caused by an extra semi-colon. Since () implements Ord\n+    /// it doesn't cause a compilation error.\n+    /// This is the same reasoning behind the unit_cmp lint.\n+    ///\n+    /// **Known problems:** If returning unit is intentional, then there is no\n+    /// way of specifying this without triggering needless_return lint\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut twins = vec!((1,1), (2,2));\n+    /// twins.sort_by_key(|x| { x.1; });\n+    /// ```\n+    pub UNIT_RETURN_EXPECTING_ORD,\n+    correctness,\n+    \"fn arguments of type Fn(...) -> Ord returning the unit type ().\"\n+}\n+\n+declare_lint_pass!(UnitReturnExpectingOrd => [UNIT_RETURN_EXPECTING_ORD]);\n+\n+fn get_trait_predicates_for_trait_id<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    generics: GenericPredicates<'tcx>,\n+    trait_id: Option<DefId>,\n+) -> Vec<TraitPredicate<'tcx>> {\n+    let mut preds = Vec::new();\n+    for (pred, _) in generics.predicates {\n+        if_chain! {\n+            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind();\n+            let trait_pred = cx.tcx.erase_late_bound_regions(&poly_trait_pred);\n+            if let Some(trait_def_id) = trait_id;\n+            if trait_def_id == trait_pred.trait_ref.def_id;\n+            then {\n+                preds.push(trait_pred);\n+            }\n+        }\n+    }\n+    preds\n+}\n+\n+fn get_projection_pred<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    generics: GenericPredicates<'tcx>,\n+    pred: TraitPredicate<'tcx>,\n+) -> Option<ProjectionPredicate<'tcx>> {\n+    generics.predicates.iter().find_map(|(proj_pred, _)| {\n+        if let PredicateKind::Projection(proj_pred) = proj_pred.kind() {\n+            let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred);\n+            if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n+                return Some(projection_pred);\n+            }\n+        }\n+        None\n+    })\n+}\n+\n+fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Vec<(usize, String)> {\n+    let mut args_to_check = Vec::new();\n+    if let Some(def_id) = cx.tables().type_dependent_def_id(expr.hir_id) {\n+        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let generics = cx.tcx.predicates_of(def_id);\n+        let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n+        let ord_preds = get_trait_predicates_for_trait_id(cx, generics, get_trait_def_id(cx, &paths::ORD));\n+        let partial_ord_preds =\n+            get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().partial_ord_trait());\n+        // Trying to call erase_late_bound_regions on fn_sig.inputs() gives the following error\n+        // The trait `rustc::ty::TypeFoldable<'_>` is not implemented for `&[&rustc::ty::TyS<'_>]`\n+        let inputs_output = cx.tcx.erase_late_bound_regions(&fn_sig.inputs_and_output());\n+        inputs_output\n+            .iter()\n+            .rev()\n+            .skip(1)\n+            .rev()\n+            .enumerate()\n+            .for_each(|(i, inp)| {\n+                for trait_pred in &fn_mut_preds {\n+                    if_chain! {\n+                        if trait_pred.self_ty() == inp;\n+                        if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n+                        then {\n+                            if ord_preds.iter().any(|ord| ord.self_ty() == return_ty_pred.ty) {\n+                                args_to_check.push((i, \"Ord\".to_string()));\n+                            } else if partial_ord_preds.iter().any(|pord| pord.self_ty() == return_ty_pred.ty) {\n+                                args_to_check.push((i, \"PartialOrd\".to_string()));\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+    }\n+    args_to_check\n+}\n+\n+fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n+    if_chain! {\n+        if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n+        if let ty::Closure(_def_id, substs) = &cx.tables().node_type(arg.hir_id).kind;\n+        let ret_ty = substs.as_closure().sig().output();\n+        let ty = cx.tcx.erase_late_bound_regions(&ret_ty);\n+        if ty.is_unit();\n+        then {\n+            if_chain! {\n+                let body = cx.tcx.hir().body(body_id);\n+                if let ExprKind::Block(block, _) = body.value.kind;\n+                if block.expr.is_none();\n+                if let Some(stmt) = block.stmts.last();\n+                if let StmtKind::Semi(_) = stmt.kind;\n+                then {\n+                    let data = stmt.span.data();\n+                    // Make a span out of the semicolon for the help message\n+                    Some((span, Some(Span::new(data.hi-BytePos(1), data.hi, data.ctxt))))\n+                } else {\n+                    Some((span, None))\n+                }\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind {\n+            let arg_indices = get_args_to_check(cx, expr);\n+            for (i, trait_name) in arg_indices {\n+                if i < args.len() {\n+                    match check_arg(cx, &args[i]) {\n+                        Some((span, None)) => {\n+                            span_lint(\n+                                cx,\n+                                UNIT_RETURN_EXPECTING_ORD,\n+                                span,\n+                                &format!(\n+                                    \"this closure returns \\\n+                                   the unit type which also implements {}\",\n+                                    trait_name\n+                                ),\n+                            );\n+                        },\n+                        Some((span, Some(last_semi))) => {\n+                            span_lint_and_help(\n+                                cx,\n+                                UNIT_RETURN_EXPECTING_ORD,\n+                                span,\n+                                &format!(\n+                                    \"this closure returns \\\n+                                   the unit type which also implements {}\",\n+                                    trait_name\n+                                ),\n+                                Some(last_semi),\n+                                &\"probably caused by this trailing semicolon\".to_string(),\n+                            );\n+                        },\n+                        None => {},\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "96b004904aa2dce9032db127e0c20c4e70f2eac6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97d7a8b319ea266da57a7964719a006582871be4/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d7a8b319ea266da57a7964719a006582871be4/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=97d7a8b319ea266da57a7964719a006582871be4", "patch": "@@ -2292,6 +2292,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"unit_return_expecting_ord\",\n+        group: \"correctness\",\n+        desc: \"fn arguments of type Fn(...) -> Ord returning the unit type ().\",\n+        deprecation: None,\n+        module: \"unit_return_expecting_ord\",\n+    },\n     Lint {\n         name: \"unknown_clippy_lints\",\n         group: \"style\","}, {"sha": "bdb4710cc69723ca836eef19c18d2f4b06151167", "filename": "tests/ui/unit_return_expecting_ord.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/97d7a8b319ea266da57a7964719a006582871be4/tests%2Fui%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d7a8b319ea266da57a7964719a006582871be4/tests%2Fui%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.rs?ref=97d7a8b319ea266da57a7964719a006582871be4", "patch": "@@ -0,0 +1,36 @@\n+#![warn(clippy::unit_return_expecting_ord)]\n+#![allow(clippy::needless_return)]\n+#![allow(clippy::unused_unit)]\n+#![feature(is_sorted)]\n+\n+struct Struct {\n+    field: isize,\n+}\n+\n+fn double(i: isize) -> isize {\n+    i * 2\n+}\n+\n+fn unit(_i: isize) {}\n+\n+fn main() {\n+    let mut structs = vec![Struct { field: 2 }, Struct { field: 1 }];\n+    structs.sort_by_key(|s| {\n+        double(s.field);\n+    });\n+    structs.sort_by_key(|s| double(s.field));\n+    structs.is_sorted_by_key(|s| {\n+        double(s.field);\n+    });\n+    structs.is_sorted_by_key(|s| {\n+        if s.field > 0 {\n+            ()\n+        } else {\n+            return ();\n+        }\n+    });\n+    structs.sort_by_key(|s| {\n+        return double(s.field);\n+    });\n+    structs.sort_by_key(|s| unit(s.field));\n+}"}, {"sha": "e63d58746090b73d36947e98efb4de0963b88dc7", "filename": "tests/ui/unit_return_expecting_ord.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/97d7a8b319ea266da57a7964719a006582871be4/tests%2Fui%2Funit_return_expecting_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d7a8b319ea266da57a7964719a006582871be4/tests%2Fui%2Funit_return_expecting_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_return_expecting_ord.stderr?ref=97d7a8b319ea266da57a7964719a006582871be4", "patch": "@@ -0,0 +1,39 @@\n+error: this closure returns the unit type which also implements Ord\n+  --> $DIR/unit_return_expecting_ord.rs:18:25\n+   |\n+LL |     structs.sort_by_key(|s| {\n+   |                         ^^^\n+   |\n+   = note: `-D clippy::unit-return-expecting-ord` implied by `-D warnings`\n+help: probably caused by this trailing semicolon\n+  --> $DIR/unit_return_expecting_ord.rs:19:24\n+   |\n+LL |         double(s.field);\n+   |                        ^\n+\n+error: this closure returns the unit type which also implements PartialOrd\n+  --> $DIR/unit_return_expecting_ord.rs:22:30\n+   |\n+LL |     structs.is_sorted_by_key(|s| {\n+   |                              ^^^\n+   |\n+help: probably caused by this trailing semicolon\n+  --> $DIR/unit_return_expecting_ord.rs:23:24\n+   |\n+LL |         double(s.field);\n+   |                        ^\n+\n+error: this closure returns the unit type which also implements PartialOrd\n+  --> $DIR/unit_return_expecting_ord.rs:25:30\n+   |\n+LL |     structs.is_sorted_by_key(|s| {\n+   |                              ^^^\n+\n+error: this closure returns the unit type which also implements Ord\n+  --> $DIR/unit_return_expecting_ord.rs:35:25\n+   |\n+LL |     structs.sort_by_key(|s| unit(s.field));\n+   |                         ^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}