{"sha": "9ed3661427670346b8071ee32a6577892e8ea506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZDM2NjE0Mjc2NzAzNDZiODA3MWVlMzJhNjU3Nzg5MmU4ZWE1MDY=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-06-20T11:34:22Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-08-30T18:16:23Z"}, "message": "Add note about why no_mangle and export_name are unsafe", "tree": {"sha": "9cc6c21d82feeb3dd35ff9d8e2c27051a27f9814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cc6c21d82feeb3dd35ff9d8e2c27051a27f9814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed3661427670346b8071ee32a6577892e8ea506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed3661427670346b8071ee32a6577892e8ea506", "html_url": "https://github.com/rust-lang/rust/commit/9ed3661427670346b8071ee32a6577892e8ea506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed3661427670346b8071ee32a6577892e8ea506/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b0ab5195f0b7f9e05881e775219eea9cc410f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b0ab5195f0b7f9e05881e775219eea9cc410f6", "html_url": "https://github.com/rust-lang/rust/commit/79b0ab5195f0b7f9e05881e775219eea9cc410f6"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "4bc55b8717e01fbd1ce4c7c47aa25a9f2aac1c30", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9ed3661427670346b8071ee32a6577892e8ea506/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed3661427670346b8071ee32a6577892e8ea506/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9ed3661427670346b8071ee32a6577892e8ea506", "patch": "@@ -236,6 +236,18 @@ impl UnsafeCode {\n \n         cx.struct_span_lint(UNSAFE_CODE, span, decorate);\n     }\n+\n+    fn report_overriden_symbol_name(&self, cx: &EarlyContext<'_>, span: Span, msg: &str) {\n+        self.report_unsafe(cx, span, |lint| {\n+            lint.build(msg)\n+                .note(\n+                    \"the linker's behavior with multiple libraries exporting duplicate symbol \\\n+                    names is undefined and Rust cannot provide guarantees when you manually \\\n+                    override them\",\n+                )\n+                .emit();\n+        })\n+    }\n }\n \n impl EarlyLintPass for UnsafeCode {\n@@ -279,27 +291,35 @@ impl EarlyLintPass for UnsafeCode {\n \n             ast::ItemKind::Fn(..) => {\n                 if attr::contains_name(&it.attrs, sym::no_mangle) {\n-                    self.report_unsafe(cx, it.ident.span, |lint| {\n-                        lint.build(\"declaration of a `no_mangle` function\").emit();\n-                    })\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        it.ident.span,\n+                        \"declaration of a `no_mangle` function\",\n+                    );\n                 }\n                 if attr::contains_name(&it.attrs, sym::export_name) {\n-                    self.report_unsafe(cx, it.ident.span, |lint| {\n-                        lint.build(\"declaration of a function with `export_name`\").emit();\n-                    })\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        it.ident.span,\n+                        \"declaration of a function with `export_name`\",\n+                    );\n                 }\n             }\n \n             ast::ItemKind::Static(..) => {\n                 if attr::contains_name(&it.attrs, sym::no_mangle) {\n-                    self.report_unsafe(cx, it.ident.span, |lint| {\n-                        lint.build(\"declaration of a `no_mangle` static\").emit();\n-                    })\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        it.ident.span,\n+                        \"declaration of a `no_mangle` static\",\n+                    );\n                 }\n                 if attr::contains_name(&it.attrs, sym::export_name) {\n-                    self.report_unsafe(cx, it.ident.span, |lint| {\n-                        lint.build(\"declaration of a static with `export_name`\").emit();\n-                    })\n+                    self.report_overriden_symbol_name(\n+                        cx,\n+                        it.ident.span,\n+                        \"declaration of a static with `export_name`\",\n+                    );\n                 }\n             }\n "}, {"sha": "fa22498dc0f37ecd8402b5c72315760e6738ba13", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ed3661427670346b8071ee32a6577892e8ea506/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ed3661427670346b8071ee32a6577892e8ea506/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=9ed3661427670346b8071ee32a6577892e8ea506", "patch": "@@ -9,24 +9,31 @@ note: the lint level is defined here\n    |\n LL | #![deny(unsafe_code)]\n    |         ^^^^^^^^^^^\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a `no_mangle` static\n   --> $DIR/lint-unsafe-code.rs:32:21\n    |\n LL | #[no_mangle] static FOO: u32 = 5;\n    |                     ^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a function with `export_name`\n   --> $DIR/lint-unsafe-code.rs:34:27\n    |\n LL | #[export_name = \"bar\"] fn bar() {}\n    |                           ^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a static with `export_name`\n   --> $DIR/lint-unsafe-code.rs:35:31\n    |\n LL | #[export_name = \"BAR\"] static BAR: u32 = 5;\n    |                               ^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of an `unsafe` function\n   --> $DIR/lint-unsafe-code.rs:37:1\n@@ -115,6 +122,7 @@ LL |         #[no_mangle] fn foo() {}\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a `no_mangle` static\n@@ -126,6 +134,7 @@ LL |         #[no_mangle] static FOO: u32 = 5;\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a function with `export_name`\n@@ -137,6 +146,7 @@ LL |         #[export_name = \"bar\"] fn bar() {}\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a static with `export_name`\n@@ -148,6 +158,7 @@ LL |         #[export_name = \"BAR\"] static BAR: u32 = 5;\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of an `unsafe` block"}]}