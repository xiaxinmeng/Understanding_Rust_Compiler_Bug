{"sha": "dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWYzNTMwOWQxMGJlZDJmMDljZDU1YjNlOWVhOTgwYTU4YzYyYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T10:20:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-15T10:20:05Z"}, "message": "Auto merge of #69182 - Dylan-DPC:rollup-ifsa9fx, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #64069 (Added From<Vec<NonZeroU8>> for CString)\n - #66721 (implement LowerExp and UpperExp for integers)\n - #69106 (Fix std::fs::copy on WASI target)\n - #69154 (Avoid calling `fn_sig` on closures)\n - #69166 (Check `has_typeck_tables` before calling `typeck_tables_of`)\n - #69180 (Suggest a comma if a struct initializer field fails to parse)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "72b0aff59d492542867e747604c2abee64856211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b0aff59d492542867e747604c2abee64856211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "html_url": "https://github.com/rust-lang/rust/commit/dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19288ddfd6b3448c2c221d75610bff722a6582e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/19288ddfd6b3448c2c221d75610bff722a6582e8", "html_url": "https://github.com/rust-lang/rust/commit/19288ddfd6b3448c2c221d75610bff722a6582e8"}, {"sha": "e9db0613acb2dfdb6a892873d59d0626b20c6cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9db0613acb2dfdb6a892873d59d0626b20c6cc8", "html_url": "https://github.com/rust-lang/rust/commit/e9db0613acb2dfdb6a892873d59d0626b20c6cc8"}], "stats": {"total": 394, "additions": 387, "deletions": 7}, "files": [{"sha": "c187471fb5faa172353b2eeb65f951de3e517e41", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -4,6 +4,7 @@\n \n use crate::fmt;\n use crate::mem::MaybeUninit;\n+use crate::num::flt2dec;\n use crate::ops::{Div, Rem, Sub};\n use crate::ptr;\n use crate::slice;\n@@ -256,6 +257,161 @@ macro_rules! impl_Display {\n     };\n }\n \n+macro_rules! impl_Exp {\n+    ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n+        fn $name(\n+            mut n: $u,\n+            is_nonnegative: bool,\n+            upper: bool,\n+            f: &mut fmt::Formatter<'_>\n+        ) -> fmt::Result {\n+            let (mut n, mut exponent, trailing_zeros, added_precision) = {\n+                let mut exponent = 0;\n+                // count and remove trailing decimal zeroes\n+                while n % 10 == 0 && n >= 10 {\n+                    n /= 10;\n+                    exponent += 1;\n+                }\n+                let trailing_zeros = exponent;\n+\n+                let (added_precision, subtracted_precision) = match f.precision() {\n+                    Some(fmt_prec) => {\n+                        // number of decimal digits minus 1\n+                        let mut tmp = n;\n+                        let mut prec = 0;\n+                        while tmp >= 10 {\n+                            tmp /= 10;\n+                            prec += 1;\n+                        }\n+                        (fmt_prec.saturating_sub(prec), prec.saturating_sub(fmt_prec))\n+                    }\n+                    None => (0,0)\n+                };\n+                for _ in 1..subtracted_precision {\n+                    n/=10;\n+                    exponent += 1;\n+                }\n+                if subtracted_precision != 0 {\n+                    let rem = n % 10;\n+                    n /= 10;\n+                    exponent += 1;\n+                    // round up last digit\n+                    if rem >= 5 {\n+                        n += 1;\n+                    }\n+                }\n+                (n, exponent, trailing_zeros, added_precision)\n+            };\n+\n+            // 39 digits (worst case u128) + . = 40\n+            let mut buf = [MaybeUninit::<u8>::uninit(); 40];\n+            let mut curr = buf.len() as isize; //index for buf\n+            let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n+            let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n+\n+            // decode 2 chars at a time\n+            while n >= 100 {\n+                let d1 = ((n % 100) as isize) << 1;\n+                curr -= 2;\n+                unsafe {\n+                    ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);\n+                }\n+                n /= 100;\n+                exponent += 2;\n+            }\n+            // n is <= 99, so at most 2 chars long\n+            let mut n = n as isize; // possibly reduce 64bit math\n+            // decode second-to-last character\n+            if n >= 10 {\n+                curr -= 1;\n+                unsafe {\n+                    *buf_ptr.offset(curr) = (n as u8 % 10_u8) + b'0';\n+                }\n+                n /= 10;\n+                exponent += 1;\n+            }\n+            // add decimal point iff >1 mantissa digit will be printed\n+            if exponent != trailing_zeros || added_precision != 0 {\n+                curr -= 1;\n+                unsafe {\n+                    *buf_ptr.offset(curr) = b'.';\n+                }\n+            }\n+\n+            let buf_slice = unsafe {\n+                // decode last character\n+                curr -= 1;\n+                *buf_ptr.offset(curr) = (n as u8) + b'0';\n+\n+                let len = buf.len() - curr as usize;\n+                slice::from_raw_parts(buf_ptr.offset(curr), len)\n+            };\n+\n+            // stores 'e' (or 'E') and the up to 2-digit exponent\n+            let mut exp_buf = [MaybeUninit::<u8>::uninit(); 3];\n+            let exp_ptr = MaybeUninit::first_ptr_mut(&mut exp_buf);\n+            let exp_slice = unsafe {\n+                *exp_ptr.offset(0) = if upper {b'E'} else {b'e'};\n+                let len = if exponent < 10 {\n+                    *exp_ptr.offset(1) = (exponent as u8) + b'0';\n+                    2\n+                } else {\n+                    let off = exponent << 1;\n+                    ptr::copy_nonoverlapping(lut_ptr.offset(off), exp_ptr.offset(1), 2);\n+                    3\n+                };\n+                slice::from_raw_parts(exp_ptr, len)\n+            };\n+\n+            let parts = &[\n+                flt2dec::Part::Copy(buf_slice),\n+                flt2dec::Part::Zero(added_precision),\n+                flt2dec::Part::Copy(exp_slice)\n+            ];\n+            let sign = if !is_nonnegative {\n+                &b\"-\"[..]\n+            } else if f.sign_plus() {\n+                &b\"+\"[..]\n+            } else {\n+                &b\"\"[..]\n+            };\n+            let formatted = flt2dec::Formatted{sign, parts};\n+            f.pad_formatted_parts(&formatted)\n+        }\n+\n+        $(\n+            #[stable(feature = \"integer_exp_format\", since = \"1.42.0\")]\n+            impl fmt::LowerExp for $t {\n+                #[allow(unused_comparisons)]\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                    let is_nonnegative = *self >= 0;\n+                    let n = if is_nonnegative {\n+                        self.$conv_fn()\n+                    } else {\n+                        // convert the negative num to positive by summing 1 to it's 2 complement\n+                        (!self.$conv_fn()).wrapping_add(1)\n+                    };\n+                    $name(n, is_nonnegative, false, f)\n+                }\n+            })*\n+        $(\n+            #[stable(feature = \"integer_exp_format\", since = \"1.42.0\")]\n+            impl fmt::UpperExp for $t {\n+                #[allow(unused_comparisons)]\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                    let is_nonnegative = *self >= 0;\n+                    let n = if is_nonnegative {\n+                        self.$conv_fn()\n+                    } else {\n+                        // convert the negative num to positive by summing 1 to it's 2 complement\n+                        (!self.$conv_fn()).wrapping_add(1)\n+                    };\n+                    $name(n, is_nonnegative, true, f)\n+                }\n+            })*\n+    };\n+}\n+\n // Include wasm32 in here since it doesn't reflect the native pointer size, and\n // often cares strongly about getting a smaller code size.\n #[cfg(any(target_pointer_width = \"64\", target_arch = \"wasm32\"))]\n@@ -265,13 +421,20 @@ mod imp {\n         i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n             as u64 via to_u64 named fmt_u64\n     );\n+    impl_Exp!(\n+        i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n+            as u64 via to_u64 named exp_u64\n+    );\n }\n \n #[cfg(not(any(target_pointer_width = \"64\", target_arch = \"wasm32\")))]\n mod imp {\n     use super::*;\n     impl_Display!(i8, u8, i16, u16, i32, u32, isize, usize as u32 via to_u32 named fmt_u32);\n     impl_Display!(i64, u64 as u64 via to_u64 named fmt_u64);\n+    impl_Exp!(i8, u8, i16, u16, i32, u32, isize, usize as u32 via to_u32 named exp_u32);\n+    impl_Exp!(i64, u64 as u64 via to_u64 named exp_u64);\n }\n \n impl_Display!(i128, u128 as u128 via to_u128 named fmt_u128);\n+impl_Exp!(i128, u128 as u128 via to_u128 named exp_u128);"}, {"sha": "a50c2b46a919b320d68be0754608a46481bd5760", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -38,6 +38,16 @@ fn test_format_int() {\n     assert_eq!(format!(\"{:o}\", 1i16), \"1\");\n     assert_eq!(format!(\"{:o}\", 1i32), \"1\");\n     assert_eq!(format!(\"{:o}\", 1i64), \"1\");\n+    assert_eq!(format!(\"{:e}\", 1isize), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1i8), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1i16), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1i32), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1i64), \"1e0\");\n+    assert_eq!(format!(\"{:E}\", 1isize), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1i8), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1i16), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1i32), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1i64), \"1E0\");\n \n     assert_eq!(format!(\"{}\", 1usize), \"1\");\n     assert_eq!(format!(\"{}\", 1u8), \"1\");\n@@ -69,13 +79,79 @@ fn test_format_int() {\n     assert_eq!(format!(\"{:o}\", 1u16), \"1\");\n     assert_eq!(format!(\"{:o}\", 1u32), \"1\");\n     assert_eq!(format!(\"{:o}\", 1u64), \"1\");\n+    assert_eq!(format!(\"{:e}\", 1u8), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1u16), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1u32), \"1e0\");\n+    assert_eq!(format!(\"{:e}\", 1u64), \"1e0\");\n+    assert_eq!(format!(\"{:E}\", 1u8), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1u16), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1u32), \"1E0\");\n+    assert_eq!(format!(\"{:E}\", 1u64), \"1E0\");\n \n     // Test a larger number\n     assert_eq!(format!(\"{:b}\", 55), \"110111\");\n     assert_eq!(format!(\"{:o}\", 55), \"67\");\n     assert_eq!(format!(\"{}\", 55), \"55\");\n     assert_eq!(format!(\"{:x}\", 55), \"37\");\n     assert_eq!(format!(\"{:X}\", 55), \"37\");\n+    assert_eq!(format!(\"{:e}\", 55), \"5.5e1\");\n+    assert_eq!(format!(\"{:E}\", 55), \"5.5E1\");\n+    assert_eq!(format!(\"{:e}\", 10000000000u64), \"1e10\");\n+    assert_eq!(format!(\"{:E}\", 10000000000u64), \"1E10\");\n+    assert_eq!(format!(\"{:e}\", 10000000001u64), \"1.0000000001e10\");\n+    assert_eq!(format!(\"{:E}\", 10000000001u64), \"1.0000000001E10\");\n+}\n+\n+#[test]\n+fn test_format_int_exp_limits() {\n+    use core::{i128, i16, i32, i64, i8, u128, u16, u32, u64, u8};\n+    assert_eq!(format!(\"{:e}\", i8::MIN), \"-1.28e2\");\n+    assert_eq!(format!(\"{:e}\", i8::MAX), \"1.27e2\");\n+    assert_eq!(format!(\"{:e}\", i16::MIN), \"-3.2768e4\");\n+    assert_eq!(format!(\"{:e}\", i16::MAX), \"3.2767e4\");\n+    assert_eq!(format!(\"{:e}\", i32::MIN), \"-2.147483648e9\");\n+    assert_eq!(format!(\"{:e}\", i32::MAX), \"2.147483647e9\");\n+    assert_eq!(format!(\"{:e}\", i64::MIN), \"-9.223372036854775808e18\");\n+    assert_eq!(format!(\"{:e}\", i64::MAX), \"9.223372036854775807e18\");\n+    assert_eq!(format!(\"{:e}\", i128::MIN), \"-1.70141183460469231731687303715884105728e38\");\n+    assert_eq!(format!(\"{:e}\", i128::MAX), \"1.70141183460469231731687303715884105727e38\");\n+\n+    assert_eq!(format!(\"{:e}\", u8::MAX), \"2.55e2\");\n+    assert_eq!(format!(\"{:e}\", u16::MAX), \"6.5535e4\");\n+    assert_eq!(format!(\"{:e}\", u32::MAX), \"4.294967295e9\");\n+    assert_eq!(format!(\"{:e}\", u64::MAX), \"1.8446744073709551615e19\");\n+    assert_eq!(format!(\"{:e}\", u128::MAX), \"3.40282366920938463463374607431768211455e38\");\n+}\n+\n+#[test]\n+fn test_format_int_exp_precision() {\n+    use core::{i128, i16, i32, i64, i8};\n+\n+    //test that float and integer match\n+    let big_int: u32 = 314_159_265;\n+    assert_eq!(format!(\"{:.1e}\", big_int), format!(\"{:.1e}\", f64::from(big_int)));\n+\n+    //test adding precision\n+    assert_eq!(format!(\"{:.10e}\", i8::MIN), \"-1.2800000000e2\");\n+    assert_eq!(format!(\"{:.10e}\", i16::MIN), \"-3.2768000000e4\");\n+    assert_eq!(format!(\"{:.10e}\", i32::MIN), \"-2.1474836480e9\");\n+    assert_eq!(format!(\"{:.20e}\", i64::MIN), \"-9.22337203685477580800e18\");\n+    assert_eq!(format!(\"{:.40e}\", i128::MIN), \"-1.7014118346046923173168730371588410572800e38\");\n+\n+    //test rounding\n+    assert_eq!(format!(\"{:.1e}\", i8::MIN), \"-1.3e2\");\n+    assert_eq!(format!(\"{:.1e}\", i16::MIN), \"-3.3e4\");\n+    assert_eq!(format!(\"{:.1e}\", i32::MIN), \"-2.1e9\");\n+    assert_eq!(format!(\"{:.1e}\", i64::MIN), \"-9.2e18\");\n+    assert_eq!(format!(\"{:.1e}\", i128::MIN), \"-1.7e38\");\n+\n+    //test huge precision\n+    assert_eq!(format!(\"{:.1000e}\", 1), format!(\"1.{}e0\", \"0\".repeat(1000)));\n+    //test zero precision\n+    assert_eq!(format!(\"{:.0e}\", 1), format!(\"1e0\",));\n+\n+    //test padding with precision (and sign)\n+    assert_eq!(format!(\"{:+10.3e}\", 1), \"  +1.000e0\");\n }\n \n #[test]\n@@ -86,13 +162,17 @@ fn test_format_int_zero() {\n     assert_eq!(format!(\"{:o}\", 0), \"0\");\n     assert_eq!(format!(\"{:x}\", 0), \"0\");\n     assert_eq!(format!(\"{:X}\", 0), \"0\");\n+    assert_eq!(format!(\"{:e}\", 0), \"0e0\");\n+    assert_eq!(format!(\"{:E}\", 0), \"0E0\");\n \n     assert_eq!(format!(\"{}\", 0u32), \"0\");\n     assert_eq!(format!(\"{:?}\", 0u32), \"0\");\n     assert_eq!(format!(\"{:b}\", 0u32), \"0\");\n     assert_eq!(format!(\"{:o}\", 0u32), \"0\");\n     assert_eq!(format!(\"{:x}\", 0u32), \"0\");\n     assert_eq!(format!(\"{:X}\", 0u32), \"0\");\n+    assert_eq!(format!(\"{:e}\", 0u32), \"0e0\");\n+    assert_eq!(format!(\"{:E}\", 0u32), \"0E0\");\n }\n \n #[test]"}, {"sha": "4fdabed54b852a683dc079e50d269c5ddcd99a7b", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -288,7 +288,10 @@ pub fn const_eval_raw_provider<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n \n-    if def_id.is_local() && tcx.typeck_tables_of(def_id).tainted_by_errors {\n+    if def_id.is_local()\n+        && tcx.has_typeck_tables(def_id)\n+        && tcx.typeck_tables_of(def_id).tainted_by_errors\n+    {\n         return Err(ErrorHandled::Reported);\n     }\n "}, {"sha": "20b9df0a2d9b63207163665cc43f97f94af3dece", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -1832,10 +1832,16 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 Err(mut e) => {\n+                    e.span_label(struct_sp, \"while parsing this struct\");\n                     if let Some(f) = recovery_field {\n                         fields.push(f);\n+                        e.span_suggestion(\n+                            self.prev_span.shrink_to_hi(),\n+                            \"try adding a comma\",\n+                            \",\".into(),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                    e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n                     self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n                     self.eat(&token::Comma);"}, {"sha": "80d914d8d0ae5d27186adae7a31ea0836089b82c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -2280,7 +2280,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.check_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.check_name(sym::track_caller) {\n-            if tcx.fn_sig(id).abi() != abi::Abi::Rust {\n+            if tcx.is_closure(id) || tcx.fn_sig(id).abi() != abi::Abi::Rust {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n             }\n@@ -2301,7 +2301,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 codegen_fn_attrs.export_name = Some(s);\n             }\n         } else if attr.check_name(sym::target_feature) {\n-            if tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n+            if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == Unsafety::Normal {\n                 let msg = \"`#[target_feature(..)]` can only be applied to `unsafe` functions\";\n                 tcx.sess\n                     .struct_span_err(attr.span, msg)"}, {"sha": "04eaba515ff22081bf137b840bc46970375b2301", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -6,6 +6,7 @@ use crate::fmt::{self, Write};\n use crate::io;\n use crate::mem;\n use crate::memchr;\n+use crate::num::NonZeroU8;\n use crate::ops;\n use crate::os::raw::c_char;\n use crate::ptr;\n@@ -741,6 +742,32 @@ impl From<Box<CStr>> for CString {\n     }\n }\n \n+#[stable(feature = \"cstring_from_vec_of_nonzerou8\", since = \"1.43.0\")]\n+impl From<Vec<NonZeroU8>> for CString {\n+    /// Converts a [`Vec`]`<`[`NonZeroU8`]`>` into a [`CString`] without\n+    /// copying nor checking for inner null bytes.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`NonZeroU8`]: ../num/struct.NonZeroU8.html\n+    /// [`Vec`]: ../vec/struct.Vec.html\n+    #[inline]\n+    fn from(v: Vec<NonZeroU8>) -> CString {\n+        unsafe {\n+            // Transmute `Vec<NonZeroU8>` to `Vec<u8>`.\n+            let v: Vec<u8> = {\n+                // Safety:\n+                //   - transmuting between `NonZeroU8` and `u8` is sound;\n+                //   - `alloc::Layout<NonZeroU8> == alloc::Layout<u8>`.\n+                let (ptr, len, cap): (*mut NonZeroU8, _, _) = Vec::into_raw_parts(v);\n+                Vec::from_raw_parts(ptr.cast::<u8>(), len, cap)\n+            };\n+            // Safety: `v` cannot contain null bytes, given the type-level\n+            // invariant of `NonZeroU8`.\n+            CString::from_vec_unchecked(v)\n+        }\n+    }\n+}\n+\n #[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]\n impl Clone for Box<CStr> {\n     #[inline]"}, {"sha": "799585ffc0acf451325d17e952cd3267186bf6bd", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -309,6 +309,7 @@\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n+#![feature(vec_into_raw_parts)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n "}, {"sha": "a11f61fdd69fde3545567766c1993f7ae7a52bb1", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -12,7 +12,6 @@ use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n \n-pub use crate::sys_common::fs::copy;\n pub use crate::sys_common::fs::remove_dir_all;\n \n pub struct File {\n@@ -647,3 +646,12 @@ fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n pub fn osstr2str(f: &OsStr) -> io::Result<&str> {\n     f.to_str().ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"input must be utf-8\"))\n }\n+\n+pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+    use crate::fs::File;\n+\n+    let mut reader = File::open(from)?;\n+    let mut writer = File::create(to)?;\n+\n+    io::copy(&mut reader, &mut writer)\n+}"}, {"sha": "c98f199b60e498c8a928942470c96bce19dc5b7f", "filename": "src/test/ui/consts/issue-68684.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fconsts%2Fissue-68684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fconsts%2Fissue-68684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68684.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+enum _Enum {\n+    A(),\n+}\n+\n+type _E = _Enum;\n+\n+const fn _a() -> _Enum {\n+    _E::A()\n+}\n+\n+const _A: _Enum = _a();\n+\n+fn main() {}"}, {"sha": "85ebd66b66cb64610fdc9d9a4d7179a81af0140e", "filename": "src/test/ui/macros/issue-68060.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -0,0 +1,16 @@\n+// build-fail\n+\n+#![feature(track_caller)]\n+\n+fn main() {\n+    (0..)\n+        .map(\n+            #[target_feature(enable = \"\")]\n+            //~^ ERROR: the feature named `` is not valid for this target\n+            //~| ERROR: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+            #[track_caller]\n+            //~^ ERROR: `#[track_caller]` requires Rust ABI\n+            |_| (),\n+        )\n+        .next();\n+}"}, {"sha": "230867410d966f9c704ddca039e5a0797ceb21bf", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -0,0 +1,24 @@\n+error: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+  --> $DIR/issue-68060.rs:8:13\n+   |\n+LL |             #[target_feature(enable = \"\")]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only be applied to `unsafe` functions\n+...\n+LL |             |_| (),\n+   |             ------ not an `unsafe` function\n+\n+error: the feature named `` is not valid for this target\n+  --> $DIR/issue-68060.rs:8:30\n+   |\n+LL |             #[target_feature(enable = \"\")]\n+   |                              ^^^^^^^^^^^ `` is not valid for this target\n+\n+error[E0737]: `#[track_caller]` requires Rust ABI\n+  --> $DIR/issue-68060.rs:11:13\n+   |\n+LL |             #[track_caller]\n+   |             ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0737`."}, {"sha": "c3f747b61b99fe9563b5771a5ab0af5c2e3e5b9b", "filename": "src/test/ui/parser/removed-syntax-with-1.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -2,8 +2,9 @@ error: expected one of `,`, `.`, `?`, `}`, or an operator, found `with`\n   --> $DIR/removed-syntax-with-1.rs:8:25\n    |\n LL |     let b = S { foo: () with a, bar: () };\n-   |             -           ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator\n-   |             |\n+   |             -          -^^^^ expected one of `,`, `.`, `?`, `}`, or an operator\n+   |             |          |\n+   |             |          help: try adding a comma: `,`\n    |             while parsing this struct\n \n error: aborting due to previous error"}, {"sha": "613b976848f703807516042c5e512d39335dc720", "filename": "src/test/ui/suggestions/struct-initializer-comma.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -0,0 +1,13 @@\n+struct Foo {\n+    first: bool,\n+    second: u8,\n+}\n+\n+fn main() {\n+    let a = Foo {\n+        //~^ ERROR missing field\n+        first: true\n+        second: 25\n+        //~^ ERROR expected one of\n+    };\n+}"}, {"sha": "731e8e10ab3ca016898bbaddcb4a1f19647ff41e", "filename": "src/test/ui/suggestions/struct-initializer-comma.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbef35309d10bed2f09cd55b3e9ea980a58c62aa/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr?ref=dbef35309d10bed2f09cd55b3e9ea980a58c62aa", "patch": "@@ -0,0 +1,23 @@\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found `second`\n+  --> $DIR/struct-initializer-comma.rs:10:9\n+   |\n+LL |     let a = Foo {\n+   |             --- while parsing this struct\n+LL |\n+LL |         first: true\n+   |                    -\n+   |                    |\n+   |                    expected one of `,`, `.`, `?`, `}`, or an operator\n+   |                    help: try adding a comma: `,`\n+LL |         second: 25\n+   |         ^^^^^^ unexpected token\n+\n+error[E0063]: missing field `second` in initializer of `Foo`\n+  --> $DIR/struct-initializer-comma.rs:7:13\n+   |\n+LL |     let a = Foo {\n+   |             ^^^ missing `second`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0063`."}]}