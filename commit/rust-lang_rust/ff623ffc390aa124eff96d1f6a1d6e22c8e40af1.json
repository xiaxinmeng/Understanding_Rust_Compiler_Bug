{"sha": "ff623ffc390aa124eff96d1f6a1d6e22c8e40af1", "node_id": "C_kwDOAAsO6NoAKGZmNjIzZmZjMzkwYWExMjRlZmY5NmQxZjZhMWQ2ZTIyYzhlNDBhZjE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-30T01:39:53Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-13T23:58:53Z"}, "message": "Cleanup retrieve_closure_constraint_info", "tree": {"sha": "cc51c3c9a28b91b995513cc4594bfbb0c0f3cd63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc51c3c9a28b91b995513cc4594bfbb0c0f3cd63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1", "html_url": "https://github.com/rust-lang/rust/commit/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2be63018572634850de5ae982a2963e1e3e2d1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be63018572634850de5ae982a2963e1e3e2d1eb", "html_url": "https://github.com/rust-lang/rust/commit/2be63018572634850de5ae982a2963e1e3e2d1eb"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "6d323b03cdaa3f1640e96cc74b004173e853ffb9", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=ff623ffc390aa124eff96d1f6a1d6e22c8e40af1", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> Index<OutlivesConstraintIndex> for OutlivesConstraintSet<'tcx> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub struct OutlivesConstraint<'tcx> {\n     // NB. The ordering here is not significant for correctness, but\n     // it is for convenience. Before we dump the constraints in the"}, {"sha": "79a3a247c48a5c207cdf7af2d5ff711abc4b9739", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff623ffc390aa124eff96d1f6a1d6e22c8e40af1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=ff623ffc390aa124eff96d1f6a1d6e22c8e40af1", "patch": "@@ -1801,35 +1801,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     pub(crate) fn retrieve_closure_constraint_info(\n         &self,\n-        constraint: &OutlivesConstraint<'tcx>,\n-    ) -> BlameConstraint<'tcx> {\n-        let loc = match constraint.locations {\n-            Locations::All(span) => {\n-                return BlameConstraint {\n-                    category: constraint.category,\n-                    from_closure: false,\n-                    cause: ObligationCause::dummy_with_span(span),\n-                    variance_info: constraint.variance_info,\n-                };\n+        constraint: OutlivesConstraint<'tcx>,\n+    ) -> Option<(ConstraintCategory<'tcx>, Span)> {\n+        match constraint.locations {\n+            Locations::All(_) => None,\n+            Locations::Single(loc) => {\n+                self.closure_bounds_mapping[&loc].get(&(constraint.sup, constraint.sub)).copied()\n             }\n-            Locations::Single(loc) => loc,\n-        };\n-\n-        let opt_span_category =\n-            self.closure_bounds_mapping[&loc].get(&(constraint.sup, constraint.sub));\n-        opt_span_category\n-            .map(|&(category, span)| BlameConstraint {\n-                category,\n-                from_closure: true,\n-                cause: ObligationCause::dummy_with_span(span),\n-                variance_info: constraint.variance_info,\n-            })\n-            .unwrap_or(BlameConstraint {\n-                category: constraint.category,\n-                from_closure: false,\n-                cause: ObligationCause::dummy_with_span(constraint.span),\n-                variance_info: constraint.variance_info,\n-            })\n+        }\n     }\n \n     /// Finds a good `ObligationCause` to blame for the fact that `fr1` outlives `fr2`.\n@@ -2072,19 +2051,28 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mut categorized_path: Vec<BlameConstraint<'tcx>> = path\n             .iter()\n             .map(|constraint| {\n-                if constraint.category == ConstraintCategory::ClosureBounds {\n-                    self.retrieve_closure_constraint_info(&constraint)\n-                } else {\n-                    BlameConstraint {\n-                        category: constraint.category,\n-                        from_closure: false,\n-                        cause: ObligationCause::new(\n-                            constraint.span,\n-                            CRATE_HIR_ID,\n-                            cause_code.clone(),\n-                        ),\n-                        variance_info: constraint.variance_info,\n-                    }\n+                let (category, span, from_closure, cause_code) =\n+                    if constraint.category == ConstraintCategory::ClosureBounds {\n+                        if let Some((category, span)) =\n+                            self.retrieve_closure_constraint_info(*constraint)\n+                        {\n+                            (category, span, true, ObligationCauseCode::MiscObligation)\n+                        } else {\n+                            (\n+                                constraint.category,\n+                                constraint.span,\n+                                false,\n+                                ObligationCauseCode::MiscObligation,\n+                            )\n+                        }\n+                    } else {\n+                        (constraint.category, constraint.span, false, cause_code.clone())\n+                    };\n+                BlameConstraint {\n+                    category,\n+                    from_closure,\n+                    cause: ObligationCause::new(span, CRATE_HIR_ID, cause_code),\n+                    variance_info: constraint.variance_info,\n                 }\n             })\n             .collect();"}]}