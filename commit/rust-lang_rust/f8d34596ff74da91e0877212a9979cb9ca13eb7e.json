{"sha": "f8d34596ff74da91e0877212a9979cb9ca13eb7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZDM0NTk2ZmY3NGRhOTFlMDg3NzIxMmE5OTc5Y2I5Y2ExM2ViN2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-30T17:29:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-30T17:29:13Z"}, "message": "Auto merge of #53803 - pietroalbini:fix-manifest-2, r=alexcrichton\n\nFix manifests for broken tools: take 2\n\nThis is a follow up of #53715, to avoid stripping unavailable components from the extensions list. This time I also figured out how to test the changes, so the produced manifest is correct.\n\nAlong with the fix I added a README with instructions on how to test the tool, and a new `BUILD_MANIFEST_DISABLE_SIGNING` env var to avoid dealing with gpg while testing the tool. I chose an env var instead of a flag because it's more difficult to have it slip in by accident on CI, and there is also another protection that panics if that env var is set on CI, just to be sure we don't release unsigned artifacts.\n\nr? @alexcrichton\ncc https://github.com/rust-lang-nursery/rustup.rs/issues/1486", "tree": {"sha": "46b99e38d06320c792945c2f5489e468d30720d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b99e38d06320c792945c2f5489e468d30720d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8d34596ff74da91e0877212a9979cb9ca13eb7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d34596ff74da91e0877212a9979cb9ca13eb7e", "html_url": "https://github.com/rust-lang/rust/commit/f8d34596ff74da91e0877212a9979cb9ca13eb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8d34596ff74da91e0877212a9979cb9ca13eb7e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685fb543174f8f2cadc38ec0b2c6df635eb1c087", "url": "https://api.github.com/repos/rust-lang/rust/commits/685fb543174f8f2cadc38ec0b2c6df635eb1c087", "html_url": "https://github.com/rust-lang/rust/commit/685fb543174f8f2cadc38ec0b2c6df635eb1c087"}, {"sha": "38e2d00152358ed6021d1853a792cf3b9c9ae5c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e2d00152358ed6021d1853a792cf3b9c9ae5c4", "html_url": "https://github.com/rust-lang/rust/commit/38e2d00152358ed6021d1853a792cf3b9c9ae5c4"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "6834f56efe7dbb7f26841a64a6015be884bcd450", "filename": "src/tools/build-manifest/README.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8d34596ff74da91e0877212a9979cb9ca13eb7e/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8d34596ff74da91e0877212a9979cb9ca13eb7e/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=f8d34596ff74da91e0877212a9979cb9ca13eb7e", "patch": "@@ -0,0 +1,30 @@\n+# build-manifest\n+\n+This tool generates the manifests uploaded to static.rust-lang.org and used by\n+rustup. The tool is invoked by the bootstrap tool.\n+\n+## Testing changes locally\n+\n+In order to test the changes locally you need to have a valid dist directory\n+available locally. If you don't want to build all the compiler, you can easily\n+create one from the nightly artifacts with:\n+\n+```\n+#!/bin/bash\n+for cmpn in rust rustc rust-std rust-docs cargo; do\n+    wget https://static.rust-lang.org/dist/${cmpn}-nightly-x86_64-unknown-linux-gnu.tar.gz\n+done\n+```\n+\n+Then, you can generate the manifest and all the packages from `path/to/dist` to\n+`path/to/output` with:\n+\n+```\n+$ BUILD_MANIFEST_DISABLE_SIGNING=1 cargo +nightly run \\\n+    path/to/dist path/to/output 1970-01-01 \\\n+    nightly nightly nightly nightly nightly nightly nightly \\\n+    http://example.com\n+```\n+\n+In the future, if the tool complains about missing arguments just add more\n+`nightly`s in the middle."}, {"sha": "39d57f4c93b3ccc2f1d1ad9dca496e931e2944e6", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f8d34596ff74da91e0877212a9979cb9ca13eb7e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d34596ff74da91e0877212a9979cb9ca13eb7e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=f8d34596ff74da91e0877212a9979cb9ca13eb7e", "patch": "@@ -121,6 +121,17 @@ static TARGETS: &'static [&'static str] = &[\n     \"x86_64-unknown-redox\",\n ];\n \n+static DOCS_TARGETS: &'static [&'static str] = &[\n+    \"i686-apple-darwin\",\n+    \"i686-pc-windows-gnu\",\n+    \"i686-pc-windows-msvc\",\n+    \"i686-unknown-linux-gnu\",\n+    \"x86_64-apple-darwin\",\n+    \"x86_64-pc-windows-gnu\",\n+    \"x86_64-pc-windows-msvc\",\n+    \"x86_64-unknown-linux-gnu\",\n+];\n+\n static MINGW: &'static [&'static str] = &[\n     \"i686-pc-windows-gnu\",\n     \"x86_64-pc-windows-gnu\",\n@@ -216,9 +227,23 @@ struct Builder {\n     rustfmt_git_commit_hash: Option<String>,\n     llvm_tools_git_commit_hash: Option<String>,\n     lldb_git_commit_hash: Option<String>,\n+\n+    should_sign: bool,\n }\n \n fn main() {\n+    // Avoid signing packages while manually testing\n+    // Do NOT set this envvar in CI\n+    let should_sign = env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err();\n+\n+    // Safety check to ensure signing is always enabled on CI\n+    // The CI environment variable is set by both Travis and AppVeyor\n+    if !should_sign && env::var(\"CI\").is_ok() {\n+        println!(\"The 'BUILD_MANIFEST_DISABLE_SIGNING' env var can't be enabled on CI.\");\n+        println!(\"If you're not running this on CI, unset the 'CI' env var.\");\n+        panic!();\n+    }\n+\n     let mut args = env::args().skip(1);\n     let input = PathBuf::from(args.next().unwrap());\n     let output = PathBuf::from(args.next().unwrap());\n@@ -231,8 +256,12 @@ fn main() {\n     let llvm_tools_release = args.next().unwrap();\n     let lldb_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n+\n+    // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n-    t!(io::stdin().read_to_string(&mut passphrase));\n+    if should_sign {\n+        t!(io::stdin().read_to_string(&mut passphrase));\n+    }\n \n     Builder {\n         rust_release,\n@@ -265,6 +294,8 @@ fn main() {\n         rustfmt_git_commit_hash: None,\n         llvm_tools_git_commit_hash: None,\n         lldb_git_commit_hash: None,\n+\n+        should_sign,\n     }.build();\n }\n \n@@ -318,7 +349,7 @@ impl Builder {\n         self.package(\"cargo\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-mingw\", &mut manifest.pkg, MINGW);\n         self.package(\"rust-std\", &mut manifest.pkg, TARGETS);\n-        self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n+        self.package(\"rust-docs\", &mut manifest.pkg, DOCS_TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n         self.package(\"rls-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"clippy-preview\", &mut manifest.pkg, HOSTS);\n@@ -402,11 +433,7 @@ impl Builder {\n                         Some(p) => p,\n                         None => return false,\n                     };\n-                    let target = match pkg.target.get(&c.target) {\n-                        Some(t) => t,\n-                        None => return false,\n-                    };\n-                    target.available\n+                    pkg.target.get(&c.target).is_some()\n                 };\n                 extensions.retain(&has_component);\n                 components.retain(&has_component);\n@@ -588,6 +615,10 @@ impl Builder {\n     }\n \n     fn sign(&self, path: &Path) {\n+        if !self.should_sign {\n+            return;\n+        }\n+\n         let filename = path.file_name().unwrap().to_str().unwrap();\n         let asc = self.output.join(format!(\"{}.asc\", filename));\n         println!(\"signing: {:?}\", path);"}]}