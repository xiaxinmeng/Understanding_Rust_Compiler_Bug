{"sha": "f0f242cb4f9ee49427b03af21c31239e8132ac96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZjI0MmNiNGY5ZWU0OTQyN2IwM2FmMjFjMzEyMzllODEzMmFjOTY=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-11T03:09:04Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-11T03:09:04Z"}, "message": "Adjusted the hashset buckets to lump functions/consts together as their names must be unique.", "tree": {"sha": "0898b7ddb26c12b97214fb15ed9e450186f65ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0898b7ddb26c12b97214fb15ed9e450186f65ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0f242cb4f9ee49427b03af21c31239e8132ac96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f242cb4f9ee49427b03af21c31239e8132ac96", "html_url": "https://github.com/rust-lang/rust/commit/f0f242cb4f9ee49427b03af21c31239e8132ac96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0f242cb4f9ee49427b03af21c31239e8132ac96/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785723e0d942bba935fb2de6fb451d57a2c06b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/785723e0d942bba935fb2de6fb451d57a2c06b1a", "html_url": "https://github.com/rust-lang/rust/commit/785723e0d942bba935fb2de6fb451d57a2c06b1a"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "660da364527716a0ae1bd167f824c81c389b239b", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0f242cb4f9ee49427b03af21c31239e8132ac96/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0f242cb4f9ee49427b03af21c31239e8132ac96/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=f0f242cb4f9ee49427b03af21c31239e8132ac96", "patch": "@@ -9,24 +9,25 @@ use hir::db::HirDatabase;\n \n use rustc_hash::FxHashSet;\n \n+/// Generate a collection of associated items that are missing from a \n+/// `impl Trait for` block.\n pub fn get_missing_impl_items(\n     db: &impl HirDatabase,\n     analyzer: &hir::SourceAnalyzer,\n     impl_block: &ast::ImplBlock,\n ) -> Vec<hir::AssocItem> {\n-    // since the names are unique only to each associated type (fn/type/const),\n-    // create buckets of each already implemented type that we'll use in the\n-    // lookup later.\n-    let mut impl_fns = FxHashSet::default();\n+    \n+    // Names must be unique between constants and functions. However, type aliases\n+    // may share the same name as a function or constant.\n+    let mut impl_fns_consts = FxHashSet::default();\n     let mut impl_type = FxHashSet::default();\n-    let mut impl_const = FxHashSet::default();\n \n     if let Some(item_list) = impl_block.item_list() {\n         for item in item_list.impl_items() {\n             match item {\n                 ast::ImplItem::FnDef(f) => {\n                     if let Some(n) = f.name() {\n-                        impl_fns.insert(n.syntax().to_string());\n+                        impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n \n@@ -38,7 +39,7 @@ pub fn get_missing_impl_items(\n \n                 ast::ImplItem::ConstDef(c) => {\n                     if let Some(n) = c.name() {\n-                        impl_const.insert(n.syntax().to_string());\n+                        impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n             }\n@@ -50,10 +51,10 @@ pub fn get_missing_impl_items(\n             .items(db)\n             .iter()\n             .filter(|i| match i {\n-                hir::AssocItem::Function(f) => !impl_fns.contains(&f.name(db).to_string()),\n+                hir::AssocItem::Function(f) => !impl_fns_consts.contains(&f.name(db).to_string()),\n                 hir::AssocItem::TypeAlias(t) => !impl_type.contains(&t.name(db).to_string()),\n                 hir::AssocItem::Const(c) => {\n-                    c.name(db).map(|n| !impl_const.contains(&n.to_string())).unwrap_or_default()\n+                    c.name(db).map(|n| !impl_fns_consts.contains(&n.to_string())).unwrap_or_default()\n                 }\n             })\n             .map(|i| i.clone())"}]}