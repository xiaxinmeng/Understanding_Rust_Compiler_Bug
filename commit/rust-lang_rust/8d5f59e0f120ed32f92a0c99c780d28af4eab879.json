{"sha": "8d5f59e0f120ed32f92a0c99c780d28af4eab879", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNWY1OWUwZjEyMGVkMzJmOTJhMGM5OWM3ODBkMjhhZjRlYWI4Nzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:37:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:40:19Z"}, "message": "minor: align import style with styleguide", "tree": {"sha": "9f2780683eb264a06b920bbe22d5da841531f15e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f2780683eb264a06b920bbe22d5da841531f15e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d5f59e0f120ed32f92a0c99c780d28af4eab879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5f59e0f120ed32f92a0c99c780d28af4eab879", "html_url": "https://github.com/rust-lang/rust/commit/8d5f59e0f120ed32f92a0c99c780d28af4eab879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d5f59e0f120ed32f92a0c99c780d28af4eab879/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6633a88a8b2c580aa1aa38354aa858236dfc17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6633a88a8b2c580aa1aa38354aa858236dfc17e", "html_url": "https://github.com/rust-lang/rust/commit/a6633a88a8b2c580aa1aa38354aa858236dfc17e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "766d8c62888f5cf8247876a23bbd3476b2569377", "filename": "crates/ide_db/src/ty_filter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d5f59e0f120ed32f92a0c99c780d28af4eab879/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d5f59e0f120ed32f92a0c99c780d28af4eab879/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=8d5f59e0f120ed32f92a0c99c780d28af4eab879", "patch": "@@ -4,7 +4,7 @@\n \n use std::iter;\n \n-use hir::{Adt, Semantics, Type};\n+use hir::Semantics;\n use syntax::ast::{self, make};\n \n use crate::RootDatabase;\n@@ -20,9 +20,9 @@ impl TryEnum {\n     const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n \n     /// Returns `Some(..)` if the provided type is an enum that implements `std::ops::Try`.\n-    pub fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n+    pub fn from_ty(sema: &Semantics<RootDatabase>, ty: &hir::Type) -> Option<TryEnum> {\n         let enum_ = match ty.as_adt() {\n-            Some(Adt::Enum(it)) => it,\n+            Some(hir::Adt::Enum(it)) => it,\n             _ => return None,\n         };\n         TryEnum::ALL.iter().find_map(|&var| {"}]}