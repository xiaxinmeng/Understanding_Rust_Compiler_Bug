{"sha": "ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "node_id": "C_kwDOAAsO6NoAKGVmMGJhMWQyY2VhZDcwOWYxMWZlNzkxMmUwZDJiZDhjM2Y1ZTFiMjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-13T21:39:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-04T05:55:47Z"}, "message": "type parameters have unit metadata if they are sized", "tree": {"sha": "1d2db8806d269c5a25369e36d2507a0eb9693c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2db8806d269c5a25369e36d2507a0eb9693c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "html_url": "https://github.com/rust-lang/rust/commit/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7684101a51f1c375ec84aef5d2fbdeb214bbc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7684101a51f1c375ec84aef5d2fbdeb214bbc2", "html_url": "https://github.com/rust-lang/rust/commit/6d7684101a51f1c375ec84aef5d2fbdeb214bbc2"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "061520189e9801a58863ec54e3d5541a3d591703", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "patch": "@@ -2244,12 +2244,13 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    /// Returns the type of metadata for (potentially fat) pointers to this type.\n+    /// Returns the type of metadata for (potentially fat) pointers to this type,\n+    /// and a boolean signifying if this is conditional on this type being `Sized`.\n     pub fn ptr_metadata_ty(\n         self,\n         tcx: TyCtxt<'tcx>,\n         normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n-    ) -> Ty<'tcx> {\n+    ) -> (Ty<'tcx>, bool) {\n         let tail = tcx.struct_tail_with_normalize(self, normalize);\n         match tail.kind() {\n             // Sized types\n@@ -2269,28 +2270,31 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Error(_)\n+            // Extern types have metadata = ().\n             | ty::Foreign(..)\n             // If returned by `struct_tail_without_normalization` this is a unit struct\n             // without any fields, or not a struct, and therefore is Sized.\n             | ty::Adt(..)\n             // If returned by `struct_tail_without_normalization` this is the empty tuple,\n             // a.k.a. unit type, which is Sized\n-            | ty::Tuple(..) => tcx.types.unit,\n+            | ty::Tuple(..) => (tcx.types.unit, false),\n \n-            ty::Str | ty::Slice(_) => tcx.types.usize,\n+            ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n                 let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n-                tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])\n+                (tcx.type_of(dyn_metadata).subst(tcx, &[self.into()]), false)\n             },\n \n-            ty::Projection(_)\n-            | ty::Param(_)\n-            | ty::Opaque(..)\n+            // type parameters only have unit metadata if they're sized, so return true\n+            // to make sure we double check this during confirmation\n+            ty::Param(_) |  ty::Projection(_) => (tcx.types.unit, true),\n+\n+            ty::Opaque(..)\n             | ty::Infer(ty::TyVar(_))\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n-                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?}\", tail)\n+                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?}\", self)\n             }\n         }\n     }"}, {"sha": "823b03eab950d53eda9f998c97378174099c21f4", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "patch": "@@ -1399,6 +1399,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n                 let tail = selcx.tcx().struct_tail_with_normalize(self_ty, |ty| {\n+                    // We throw away any obligations we get from this, since we normalize\n+                    // and confirm these obligations once again during confirmation\n                     normalize_with_depth(\n                         selcx,\n                         obligation.param_env,\n@@ -1415,7 +1417,6 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Int(_)\n                     | ty::Uint(_)\n                     | ty::Float(_)\n-                    | ty::Foreign(_)\n                     | ty::Str\n                     | ty::Array(..)\n                     | ty::Slice(_)\n@@ -1428,6 +1429,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Generator(..)\n                     | ty::GeneratorWitness(..)\n                     | ty::Never\n+                    // Extern types have unit metadata, according to RFC 2850\n+                    | ty::Foreign(_)\n                     // If returned by `struct_tail_without_normalization` this is a unit struct\n                     // without any fields, or not a struct, and therefore is Sized.\n                     | ty::Adt(..)\n@@ -1436,9 +1439,10 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // Integers and floats are always Sized, and so have unit type metadata.\n                     | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(..)) => true,\n \n-                    ty::Projection(..)\n-                    | ty::Opaque(..)\n-                    | ty::Param(..)\n+                    // type parameters and unnormalized projections have pointer metadata if they're still known to be sized\n+                    ty::Param(_) | ty::Projection(..) => tail.is_sized(selcx.tcx().at(obligation.cause.span), obligation.param_env),\n+\n+                    ty::Opaque(..)\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n@@ -1657,7 +1661,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n     let mut obligations = vec![];\n-    let metadata_ty = self_ty.ptr_metadata_ty(tcx, |ty| {\n+    let (metadata_ty, check_is_sized) = self_ty.ptr_metadata_ty(tcx, |ty| {\n         normalize_with_depth_to(\n             selcx,\n             obligation.param_env,\n@@ -1667,6 +1671,19 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n             &mut obligations,\n         )\n     });\n+    if check_is_sized {\n+        let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(\n+            tcx.require_lang_item(LangItem::Sized, None),\n+            tcx.mk_substs_trait(self_ty, &[]),\n+        ))\n+        .without_const()\n+        .to_predicate(tcx);\n+        obligations.push(Obligation::new(\n+            obligation.cause.clone(),\n+            obligation.param_env,\n+            sized_predicate,\n+        ));\n+    }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n     let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);"}, {"sha": "097881256ba8d16745103f60d80c20f1c852539f", "filename": "src/test/ui/traits/pointee-tail-is-generic.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs?ref=ef0ba1d2cead709f11fe7912e0d2bd8c3f5e1b28", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(ptr_metadata)]\n+\n+fn a<T>() {\n+    b::<T>();\n+    b::<std::cell::Cell<T>>();\n+}\n+\n+fn b<T: std::ptr::Pointee<Metadata = ()>>() {}\n+\n+fn main() {}"}]}