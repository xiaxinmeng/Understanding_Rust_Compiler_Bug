{"sha": "ecdc8aae4193a4306b379803897ff367f1f65379", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZGM4YWFlNDE5M2E0MzA2YjM3OTgwMzg5N2ZmMzY3ZjFmNjUzNzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-07T03:12:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-07T23:54:17Z"}, "message": "Remove impl_id from trait_ref. Unused", "tree": {"sha": "bcdee37054ae4c580f25c3cf1fc771d9343ab7cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcdee37054ae4c580f25c3cf1fc771d9343ab7cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecdc8aae4193a4306b379803897ff367f1f65379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecdc8aae4193a4306b379803897ff367f1f65379", "html_url": "https://github.com/rust-lang/rust/commit/ecdc8aae4193a4306b379803897ff367f1f65379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecdc8aae4193a4306b379803897ff367f1f65379/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fcf562d163e57acdc4a7e5b0504df2dea6e34e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcf562d163e57acdc4a7e5b0504df2dea6e34e6", "html_url": "https://github.com/rust-lang/rust/commit/2fcf562d163e57acdc4a7e5b0504df2dea6e34e6"}], "stats": {"total": 20, "additions": 4, "deletions": 16}, "files": [{"sha": "4c138d4c34a18bf17ba429c6d94a83a5cd0aa3a2", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -647,9 +647,6 @@ fn convert_struct(ccx: @crate_ctxt,\n     let cms = convert_methods(ccx, struct_def.methods, rp, bounds);\n     for struct_def.traits.each |trait_ref| {\n         check_methods_against_trait(ccx, tps, rp, selfty, *trait_ref, cms);\n-        // trait_ref.impl_id represents (class, trait) pair\n-        write_ty_to_tcx(tcx, trait_ref.impl_id, tpt.ty);\n-        tcx.tcache.insert(local_def(trait_ref.impl_id), tpt);\n     }\n \n     // If this struct is enum-like or tuple-like, create the type of its"}, {"sha": "134f5e68e922ca1df1ef6884f408b5bbbbf94e99", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -1417,7 +1417,7 @@ type attribute_ = {style: attr_style, value: meta_item, is_sugared_doc: bool};\n  */\n #[auto_serialize]\n #[auto_deserialize]\n-type trait_ref = {path: @path, ref_id: node_id, impl_id: node_id};\n+type trait_ref = {path: @path, ref_id: node_id};\n \n #[auto_serialize]\n #[auto_deserialize]"}, {"sha": "6d6e10b717e0eb333b44f07d4f6e81c6f574401e", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -254,9 +254,6 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n         // so we can find the self_ty\n         for traits.each |p| {\n             cx.map.insert(p.ref_id, node_item(i, item_path));\n-            // This is so we can look up the right things when\n-            // encoding/decoding\n-            cx.map.insert(p.impl_id, node_item(i, item_path));\n         }\n         for (*methods).each |tm| {\n             let id = ast_util::trait_method_to_ty_method(*tm).id;\n@@ -282,9 +279,6 @@ fn map_struct_def(struct_def: @ast::struct_def, parent_node: ast_node,\n     // so we can find the self_ty\n     for struct_def.traits.each |p| {\n         cx.map.insert(p.ref_id, parent_node);\n-        // This is so we can look up the right things when\n-        // encoding/decoding\n-        cx.map.insert(p.impl_id, parent_node);\n     }\n     let d_id = ast_util::local_def(id);\n     let p = extend(cx, ident);"}, {"sha": "7a1b973c3a1bfdd3f471e654fdf06d5cc9570028", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -393,7 +393,6 @@ fn mk_impl(\n     let opt_trait = Some(@{\n         path: path,\n         ref_id: cx.next_id(),\n-        impl_id: cx.next_id(),\n     });\n \n     let ty = cx.ty_path("}, {"sha": "2aca54446d74e6bf796a44eb58b06e43630a8cba", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -220,8 +220,7 @@ fn create_derived_impl(cx: ext_ctxt,\n     let trait_path = @move trait_path;\n     let trait_ref = {\n         path: trait_path,\n-        ref_id: cx.next_id(),\n-        impl_id: cx.next_id(),\n+        ref_id: cx.next_id()\n     };\n     let trait_ref = @move trait_ref;\n "}, {"sha": "59d4ac13ff2fb964846882759fc1dd45c34471e5", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -280,8 +280,7 @@ fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n }\n \n fn fold_trait_ref(&&p: @trait_ref, fld: ast_fold) -> @trait_ref {\n-    @{path: fld.fold_path(p.path), ref_id: fld.new_id(p.ref_id),\n-     impl_id: fld.new_id(p.impl_id)}\n+    @{path: fld.fold_path(p.path), ref_id: fld.new_id(p.ref_id)}\n }\n \n fn fold_struct_field(&&f: @struct_field, fld: ast_fold) -> @struct_field {"}, {"sha": "36f5bbe481967e1824328931a8c514765e40cf06", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdc8aae4193a4306b379803897ff367f1f65379/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ecdc8aae4193a4306b379803897ff367f1f65379", "patch": "@@ -2821,7 +2821,7 @@ impl Parser {\n \n     fn parse_trait_ref() -> @trait_ref {\n         @{path: self.parse_path_with_tps(false),\n-          ref_id: self.get_id(), impl_id: self.get_id()}\n+          ref_id: self.get_id()}\n     }\n \n     fn parse_trait_ref_list(ket: token::Token) -> ~[@trait_ref] {"}]}