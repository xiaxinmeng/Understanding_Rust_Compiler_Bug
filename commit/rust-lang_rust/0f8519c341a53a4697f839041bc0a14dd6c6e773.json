{"sha": "0f8519c341a53a4697f839041bc0a14dd6c6e773", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODUxOWMzNDFhNTNhNDY5N2Y4MzkwNDFiYzBhMTRkZDZjNmU3NzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-26T18:09:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-19T08:39:18Z"}, "message": "Fix various bugs around empty structs and patterns", "tree": {"sha": "18b709c1f83410598d7ddcf20410001099eafd58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b709c1f83410598d7ddcf20410001099eafd58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f8519c341a53a4697f839041bc0a14dd6c6e773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8519c341a53a4697f839041bc0a14dd6c6e773", "html_url": "https://github.com/rust-lang/rust/commit/0f8519c341a53a4697f839041bc0a14dd6c6e773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f8519c341a53a4697f839041bc0a14dd6c6e773/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e48b0e380319dc586a329baac640b9457feb87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e48b0e380319dc586a329baac640b9457feb87a", "html_url": "https://github.com/rust-lang/rust/commit/3e48b0e380319dc586a329baac640b9457feb87a"}], "stats": {"total": 222, "additions": 143, "deletions": 79}, "files": [{"sha": "3380b3a6c1484308d6607692c73345f7001a98e0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     }\n                     ty::TyEnum(adt, substs) => {\n                         match cx.tcx.def_map.borrow()[&self.id].full_def() {\n-                            def::DefVariant(enum_id, variant_id, true) => {\n+                            def::DefVariant(enum_id, variant_id, _) => {\n                                 debug_assert!(adt.did == enum_id);\n                                 let index = adt.variant_index_with_id(variant_id);\n                                 let field_refs = field_refs(&adt.variants[index], fields);"}, {"sha": "21958387056d9da4d94db31699bbba74dd38a26c", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -21,6 +21,7 @@ use check::{check_expr_with_lvalue_pref};\n use check::{instantiate_path, resolve_ty_and_def_ufcs, structurally_resolved_type};\n use require_same_types;\n use util::nodemap::FnvHashMap;\n+use session::Session;\n \n use std::cmp;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -136,6 +137,12 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         }\n         hir::PatEnum(..) | hir::PatIdent(..)\n                 if pat_is_resolved_const(&tcx.def_map.borrow(), pat) => {\n+            if let hir::PatEnum(ref path, ref subpats) = pat.node {\n+                if !(subpats.is_some() && subpats.as_ref().unwrap().is_empty()) {\n+                    bad_struct_kind_err(tcx.sess, pat.span, path);\n+                    return;\n+                }\n+            }\n             let const_did = tcx.def_map.borrow().get(&pat.id).unwrap().def_id();\n             let const_scheme = tcx.lookup_item_type(const_did);\n             assert!(const_scheme.generics.is_empty());\n@@ -192,11 +199,12 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n         }\n         hir::PatIdent(_, ref path, _) => {\n             let path = hir_util::ident_to_path(path.span, path.node);\n-            check_pat_enum(pcx, pat, &path, Some(&[]), expected);\n+            check_pat_enum(pcx, pat, &path, Some(&[]), expected, false);\n         }\n         hir::PatEnum(ref path, ref subpats) => {\n             let subpats = subpats.as_ref().map(|v| &v[..]);\n-            check_pat_enum(pcx, pat, path, subpats, expected);\n+            let is_tuple_struct_pat = !(subpats.is_some() && subpats.unwrap().is_empty());\n+            check_pat_enum(pcx, pat, path, subpats, expected, is_tuple_struct_pat);\n         }\n         hir::PatQPath(ref qself, ref path) => {\n             let self_ty = fcx.to_ty(&qself.ty);\n@@ -572,11 +580,19 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx hir::Pat,\n     fcx.write_substs(pat.id, ty::ItemSubsts { substs: item_substs.clone() });\n }\n \n+// This function exists due to the warning \"diagnostic code E0164 already used\"\n+fn bad_struct_kind_err(sess: &Session, span: Span, path: &hir::Path) {\n+    let name = pprust::path_to_string(path);\n+    span_err!(sess, span, E0164,\n+        \"`{}` does not name a tuple variant or a tuple struct\", name);\n+}\n+\n pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                                 pat: &hir::Pat,\n                                 path: &hir::Path,\n                                 subpats: Option<&'tcx [P<hir::Pat>]>,\n-                                expected: Ty<'tcx>)\n+                                expected: Ty<'tcx>,\n+                                is_tuple_struct_pat: bool)\n {\n     // Typecheck the path.\n     let fcx = pcx.fcx;\n@@ -618,25 +634,43 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                      path_scheme, &ctor_predicates,\n                      opt_ty, def, pat.span, pat.id);\n \n+    let report_bad_struct_kind = || {\n+        bad_struct_kind_err(tcx.sess, pat.span, path);\n+        fcx.write_error(pat.id);\n+\n+        if let Some(subpats) = subpats {\n+            for pat in subpats {\n+                check_pat(pcx, &**pat, tcx.types.err);\n+            }\n+        }\n+    };\n+\n     // If we didn't have a fully resolved path to start with, we had an\n     // associated const, and we should quit now, since the rest of this\n     // function uses checks specific to structs and enums.\n     if path_res.depth != 0 {\n-        let pat_ty = fcx.node_ty(pat.id);\n-        demand::suptype(fcx, pat.span, expected, pat_ty);\n+        if is_tuple_struct_pat {\n+            report_bad_struct_kind();\n+        } else {\n+            let pat_ty = fcx.node_ty(pat.id);\n+            demand::suptype(fcx, pat.span, expected, pat_ty);\n+        }\n         return;\n     }\n \n     let pat_ty = fcx.node_ty(pat.id);\n     demand::eqtype(fcx, pat.span, expected, pat_ty);\n \n-\n     let real_path_ty = fcx.node_ty(pat.id);\n     let (arg_tys, kind_name): (Vec<_>, &'static str) = match real_path_ty.sty {\n         ty::TyEnum(enum_def, expected_substs)\n             if def == def::DefVariant(enum_def.did, def.def_id(), false) =>\n         {\n             let variant = enum_def.variant_of_def(def);\n+            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n+                report_bad_struct_kind();\n+                return;\n+            }\n             (variant.fields\n                     .iter()\n                     .map(|f| fcx.instantiate_type_scheme(pat.span,\n@@ -646,26 +680,21 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n              \"variant\")\n         }\n         ty::TyStruct(struct_def, expected_substs) => {\n-            (struct_def.struct_variant()\n-                       .fields\n-                       .iter()\n-                       .map(|f| fcx.instantiate_type_scheme(pat.span,\n-                                                            expected_substs,\n-                                                            &f.unsubst_ty()))\n-                       .collect(),\n+            let variant = struct_def.struct_variant();\n+            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n+                report_bad_struct_kind();\n+                return;\n+            }\n+            (variant.fields\n+                    .iter()\n+                    .map(|f| fcx.instantiate_type_scheme(pat.span,\n+                                                         expected_substs,\n+                                                         &f.unsubst_ty()))\n+                    .collect(),\n              \"struct\")\n         }\n         _ => {\n-            let name = pprust::path_to_string(path);\n-            span_err!(tcx.sess, pat.span, E0164,\n-                \"`{}` does not name a non-struct variant or a tuple struct\", name);\n-            fcx.write_error(pat.id);\n-\n-            if let Some(subpats) = subpats {\n-                for pat in subpats {\n-                    check_pat(pcx, &**pat, tcx.types.err);\n-                }\n-            }\n+            report_bad_struct_kind();\n             return;\n         }\n     };"}, {"sha": "bed22aa1e931583379ca755fdbf33819feb8a499", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -1446,7 +1446,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               -> Option<(ty::AdtDef<'tcx>, ty::VariantDef<'tcx>)>\n     {\n         let (adt, variant) = match def {\n-            def::DefVariant(enum_id, variant_id, true) => {\n+            def::DefVariant(enum_id, variant_id, _) => {\n                 let adt = self.tcx().lookup_adt_def(enum_id);\n                 (adt, adt.variant_with_id(variant_id))\n             }"}, {"sha": "b2d44301eed8dcb44d81832a2564fee820ae7b58", "filename": "src/test/compile-fail/empty-struct-braces-gate-2.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -20,8 +20,7 @@ enum E {\n fn main() {\n     let e2: Empty2 = Empty2 {}; //~ ERROR empty structs and enum variants with braces are unstable\n     let e2: Empty2 = Empty2;\n-    // Issue #28692\n-    // let e5: E = E::Empty5 {}; // ERROR empty structs and enum variants with braces are unstable\n+    let e5: E = E::Empty5 {}; //~ ERROR empty structs and enum variants with braces are unstable\n     let e5: E = E::Empty5;\n \n     match e2 {\n@@ -33,17 +32,15 @@ fn main() {\n     match e2 {\n         Empty2 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 {} => {} // ERROR empty structs and enum variants with braces are unstable\n-    // }\n+    match e5 {\n+        E::Empty5 {} => {} //~ ERROR empty structs and enum variants with braces are unstable\n+    }\n     match e5 {\n         E::Empty5 => {}\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 { .. } => {} // ERROR empty structs and enum variants with braces are unstable\n-    // }\n+    match e5 {\n+        E::Empty5 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n+    }\n \n     let e22 = Empty2 { ..e2 }; //~ ERROR empty structs and enum variants with braces are unstable\n }"}, {"sha": "6a6c3f16c04afed220bc08c3777f9272147ce677", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -10,7 +10,6 @@\n \n // Can't use empty braced struct as constant pattern\n \n-#![deny(warnings)]\n #![feature(braced_empty_structs)]\n \n struct Empty1 {}\n@@ -23,11 +22,10 @@ fn main() {\n     let e1 = Empty1 {};\n     let e2 = E::Empty2 {};\n \n-    // Issue #28692\n-    // match e1 {\n-    //     Empty1 => () // ERROR incorrect error\n-    // }\n+    match e1 {\n+        Empty1 => () // Not an error, `Empty1` is interpreted as a new binding\n+    }\n     match e2 {\n-        E::Empty2 => () //~ ERROR `E::Empty2` does not name a non-struct variant or a tuple struct\n+        E::Empty2 => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     }\n }"}, {"sha": "d98d64b712a8b42b36705daa7217813b9983b537", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -14,13 +14,8 @@\n \n struct Empty1 {}\n \n-enum E {\n-    Empty2 {}\n-}\n-\n fn main() {\n     let e1 = Empty1 {};\n-    let e2 = E::Empty2 {};\n \n     // Rejected by parser as yet\n     // match e1 {\n@@ -29,11 +24,4 @@ fn main() {\n     match e1 {\n         Empty1(..) => () //~ ERROR unresolved enum variant, struct or const `Empty1`\n     }\n-    // Issue #28692\n-    // match e2 {\n-    //     E::Empty2() => () // ERROR unresolved enum variant, struct or const `Empty2`\n-    // }\n-    // match e2 {\n-    //     E::Empty2(..) => () // ERROR unresolved enum variant, struct or const `Empty2`\n-    // }\n }"}, {"sha": "9fae203f3894d4f42232953d7f4e978a825bd1c0", "filename": "src/test/compile-fail/empty-struct-braces-pat-3.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-3.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use empty braced struct as enum pattern\n+\n+#![feature(braced_empty_structs)]\n+\n+enum E {\n+    Empty2 {}\n+}\n+\n+fn main() {\n+    let e2 = E::Empty2 {};\n+\n+    // Rejected by parser as yet\n+    // match e2 {\n+    //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    // }\n+    match e2 {\n+        E::Empty2(..) => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    }\n+}"}, {"sha": "f9af71527a17eef8959cb91136d43ea57a9c0c3c", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -12,8 +12,6 @@\n \n #![feature(braced_empty_structs)]\n \n-FIXME //~ ERROR expected item, found `FIXME`\n-\n struct Empty1;\n \n enum E {\n@@ -24,17 +22,18 @@ fn main() {\n     let e1 = Empty1;\n     let e2 = E::Empty2;\n \n-    // Issue #28692\n-    // match e1 {\n-    //     Empty1() => () // ERROR variable `Empty1` should have a snake case name\n-    // }\n+    // Rejected by parser as yet\n     // match e1 {\n-    //     Empty1(..) => () // ERROR variable `Empty1` should have a snake case name\n-    // }\n-    // match e2 {\n-    //     E::Empty2() => () // ERROR variable `Empty2` should have a snake case name\n+    //     Empty1() => () // ERROR `Empty1` does not name a tuple variant or a tuple struct\n     // }\n+    match e1 {\n+        Empty1(..) => () //~ ERROR `Empty1` does not name a tuple variant or a tuple struct\n+    }\n+    // Rejected by parser as yet\n     // match e2 {\n-    //     E::Empty2(..) => () // ERROR variable `Empty2` should have a snake case name\n+    //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n+    match e2 {\n+        E::Empty2(..) => () //~ ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n+    }\n }"}, {"sha": "56452449d4ee13e705fd55b66e3335e81e17ea06", "filename": "src/test/compile-fail/issue-19086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19086.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     let f = FooB { x: 3, y: 4 };\n     match f {\n         FooB(a, b) => println!(\"{} {}\", a, b),\n-//~^ ERROR `FooB` does not name a non-struct variant or a tuple struct\n+//~^ ERROR `FooB` does not name a tuple variant or a tuple struct\n     }\n }"}, {"sha": "ff2846dc705bbca12cad936c5ef43cec7016aa69", "filename": "src/test/compile-fail/issue-27831.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     let Bar { .. } = x; //~ ERROR empty structs and enum variants with braces are unstable\n \n     match Enum::Bar {\n-        Enum::Bar { .. } //~ ERROR `Enum::Bar` does not name a struct\n+        Enum::Bar { .. } //~ ERROR empty structs and enum variants with braces are unstable\n            => {}\n         Enum::Foo { .. } //~ ERROR `Enum::Foo` does not name a struct\n            => {}"}, {"sha": "f7d53ba23daf50e8a2ac69fa64feeda4fed69cfb", "filename": "src/test/compile-fail/issue-28992-empty.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28992-empty.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use constants as tuple struct patterns\n+\n+#![feature(associated_consts)]\n+\n+const C1: i32 = 0;\n+\n+struct S;\n+\n+impl S {\n+    const C2: i32 = 0;\n+}\n+\n+fn main() {\n+    if let C1(..) = 0 {} //~ ERROR `C1` does not name a tuple variant or a tuple struct\n+    if let S::C2(..) = 0 {} //~ ERROR `S::C2` does not name a tuple variant or a tuple struct\n+}"}, {"sha": "a4ba93ea1733311c7ccac7f0e4516c7f4510da1a", "filename": "src/test/compile-fail/match-pattern-field-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-pattern-field-mismatch-2.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -20,7 +20,7 @@ fn main() {\n           color::rgb(_, _, _) => { }\n           color::cmyk(_, _, _, _) => { }\n           color::no_color(_) => { }\n-          //~^ ERROR this pattern has 1 field, but the corresponding variant has no fields\n+          //~^ ERROR `color::no_color` does not name a tuple variant or a tuple struct\n         }\n     }\n }"}, {"sha": "891a586423efcb0d0f7ccc228399297511ef029a", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -25,7 +25,7 @@ fn f(_c: char) {}\n fn main() {\n     match A::B(1, 2) {\n         A::B(_, _, _) => (), //~ ERROR this pattern has 3 fields, but\n-        A::D(_) => (),       //~ ERROR this pattern has 1 field, but\n+        A::D(_) => (),       //~ ERROR `A::D` does not name a tuple variant or a tuple struct\n         _ => ()\n     }\n     match 'c' {"}, {"sha": "80ea1bc3a0e49d23b92016165060043766ae653f", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f8519c341a53a4697f839041bc0a14dd6c6e773/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=0f8519c341a53a4697f839041bc0a14dd6c6e773", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     let e3: Empty3 = Empty3 {};\n     let e3: Empty3 = Empty3;\n     let e4: E = E::Empty4 {};\n-    // let e5: E = E::Empty5 {}; // Issue #28692\n+    let e5: E = E::Empty5 {};\n     let e5: E = E::Empty5;\n \n     match e1 {\n@@ -46,11 +46,10 @@ fn main() {\n         E::Empty4 {} => {}\n         _ => {}\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 {} => {}\n-    //     _ => {}\n-    // }\n+    match e5 {\n+        E::Empty5 {} => {}\n+        _ => {}\n+    }\n \n     match e1 {\n         Empty1 { .. } => {}\n@@ -65,11 +64,10 @@ fn main() {\n         E::Empty4 { .. } => {}\n         _ => {}\n     }\n-    // Issue #28692\n-    // match e5 {\n-    //     E::Empty5 { .. } => {}\n-    //     _ => {}\n-    // }\n+    match e5 {\n+        E::Empty5 { .. } => {}\n+        _ => {}\n+    }\n \n     match e2 {\n         Empty2 => {}"}]}