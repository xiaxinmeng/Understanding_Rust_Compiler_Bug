{"sha": "73729e94c87281dd7193dbdc86b4de2963b8fd72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNzI5ZTk0Yzg3MjgxZGQ3MTkzZGJkYzg2YjRkZTI5NjNiOGZkNzI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T00:50:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T00:50:57Z"}, "message": "std: Move comm primitives away from UnsafeArc\n\nThey currently still use `&mut self`, this migration was aimed towards moving\nfrom UnsafeArc<T> to Arc<Unsafe<T>>", "tree": {"sha": "9bc042e0c8201095faa0c34b792072b55ddc5b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bc042e0c8201095faa0c34b792072b55ddc5b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73729e94c87281dd7193dbdc86b4de2963b8fd72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73729e94c87281dd7193dbdc86b4de2963b8fd72", "html_url": "https://github.com/rust-lang/rust/commit/73729e94c87281dd7193dbdc86b4de2963b8fd72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73729e94c87281dd7193dbdc86b4de2963b8fd72/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d49aef7c024dba42fe9e440c06065235fa8a73f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49aef7c024dba42fe9e440c06065235fa8a73f7", "html_url": "https://github.com/rust-lang/rust/commit/d49aef7c024dba42fe9e440c06065235fa8a73f7"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "fd5b92ba46913e26fe3468c16a62d45294925ad0", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=73729e94c87281dd7193dbdc86b4de2963b8fd72", "patch": "@@ -271,6 +271,8 @@\n // And now that you've seen all the races that I found and attempted to fix,\n // here's the code for you to find some more!\n \n+use alloc::arc::Arc;\n+\n use cell::Cell;\n use clone::Clone;\n use iter::Iterator;\n@@ -283,7 +285,6 @@ use owned::Box;\n use result::{Ok, Err, Result};\n use rt::local::Local;\n use rt::task::{Task, BlockedTask};\n-use sync::arc::UnsafeArc;\n use ty::Unsafe;\n \n pub use comm::select::{Select, Handle};\n@@ -352,7 +353,7 @@ pub struct Sender<T> {\n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n pub struct SyncSender<T> {\n-    inner: UnsafeArc<sync::Packet<T>>,\n+    inner: Arc<Unsafe<sync::Packet<T>>>,\n     // can't share in an arc\n     marker: marker::NoShare,\n }\n@@ -386,10 +387,10 @@ pub enum TrySendError<T> {\n }\n \n enum Flavor<T> {\n-    Oneshot(UnsafeArc<oneshot::Packet<T>>),\n-    Stream(UnsafeArc<stream::Packet<T>>),\n-    Shared(UnsafeArc<shared::Packet<T>>),\n-    Sync(UnsafeArc<sync::Packet<T>>),\n+    Oneshot(Arc<Unsafe<oneshot::Packet<T>>>),\n+    Stream(Arc<Unsafe<stream::Packet<T>>>),\n+    Shared(Arc<Unsafe<shared::Packet<T>>>),\n+    Sync(Arc<Unsafe<sync::Packet<T>>>),\n }\n \n #[doc(hidden)]\n@@ -435,8 +436,8 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// println!(\"{}\", rx.recv());\n /// ```\n pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n-    let (a, b) = UnsafeArc::new2(oneshot::Packet::new());\n-    (Sender::new(Oneshot(b)), Receiver::new(Oneshot(a)))\n+    let a = Arc::new(Unsafe::new(oneshot::Packet::new()));\n+    (Sender::new(Oneshot(a.clone())), Receiver::new(Oneshot(a)))\n }\n \n /// Creates a new synchronous, bounded channel.\n@@ -471,8 +472,8 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(rx.recv(), 2);\n /// ```\n pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n-    let (a, b) = UnsafeArc::new2(sync::Packet::new(bound));\n-    (SyncSender::new(a), Receiver::new(Sync(b)))\n+    let a = Arc::new(Unsafe::new(sync::Packet::new(bound)));\n+    (SyncSender::new(a.clone()), Receiver::new(Sync(a)))\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -557,13 +558,13 @@ impl<T: Send> Sender<T> {\n \n         let (new_inner, ret) = match *unsafe { self.inner() } {\n             Oneshot(ref p) => {\n-                let p = p.get();\n                 unsafe {\n+                    let p = p.get();\n                     if !(*p).sent() {\n                         return (*p).send(t);\n                     } else {\n-                        let (a, b) = UnsafeArc::new2(stream::Packet::new());\n-                        match (*p).upgrade(Receiver::new(Stream(b))) {\n+                        let a = Arc::new(Unsafe::new(stream::Packet::new()));\n+                        match (*p).upgrade(Receiver::new(Stream(a.clone()))) {\n                             oneshot::UpSuccess => {\n                                 let ret = (*a.get()).send(t);\n                                 (a, ret)\n@@ -598,17 +599,21 @@ impl<T: Send> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper) = match *unsafe { self.inner() } {\n             Oneshot(ref p) => {\n-                let (a, b) = UnsafeArc::new2(shared::Packet::new());\n-                match unsafe { (*p.get()).upgrade(Receiver::new(Shared(a))) } {\n-                    oneshot::UpSuccess | oneshot::UpDisconnected => (b, None),\n-                    oneshot::UpWoke(task) => (b, Some(task))\n+                let a = Arc::new(Unsafe::new(shared::Packet::new()));\n+                match unsafe {\n+                    (*p.get()).upgrade(Receiver::new(Shared(a.clone())))\n+                } {\n+                    oneshot::UpSuccess | oneshot::UpDisconnected => (a, None),\n+                    oneshot::UpWoke(task) => (a, Some(task))\n                 }\n             }\n             Stream(ref p) => {\n-                let (a, b) = UnsafeArc::new2(shared::Packet::new());\n-                match unsafe { (*p.get()).upgrade(Receiver::new(Shared(a))) } {\n-                    stream::UpSuccess | stream::UpDisconnected => (b, None),\n-                    stream::UpWoke(task) => (b, Some(task)),\n+                let a = Arc::new(Unsafe::new(shared::Packet::new()));\n+                match unsafe {\n+                    (*p.get()).upgrade(Receiver::new(Shared(a.clone())))\n+                } {\n+                    stream::UpSuccess | stream::UpDisconnected => (a, None),\n+                    stream::UpWoke(task) => (a, Some(task)),\n                 }\n             }\n             Shared(ref p) => {\n@@ -645,7 +650,7 @@ impl<T: Send> Drop for Sender<T> {\n ////////////////////////////////////////////////////////////////////////////////\n \n impl<T: Send> SyncSender<T> {\n-    fn new(inner: UnsafeArc<sync::Packet<T>>) -> SyncSender<T> {\n+    fn new(inner: Arc<Unsafe<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner, marker: marker::NoShare }\n     }\n "}, {"sha": "f9e8fd1e534bfca0815c67d746e6e676546fa6ee", "filename": "src/libstd/comm/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Foneshot.rs?ref=73729e94c87281dd7193dbdc86b4de2963b8fd72", "patch": "@@ -15,7 +15,7 @@\n /// this type is to have one and exactly one allocation when the chan/port pair\n /// is created.\n ///\n-/// Another possible optimization would be to not use an UnsafeArc box because\n+/// Another possible optimization would be to not use an Arc box because\n /// in theory we know when the shared packet can be deallocated (no real need\n /// for the atomic reference counting), but I was having trouble how to destroy\n /// the data early in a drop of a Port."}, {"sha": "f2f95da18425b4e166ba31738c5b5655b4ae3a66", "filename": "src/libstd/sync/mpsc_queue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc_queue.rs?ref=73729e94c87281dd7193dbdc86b4de2963b8fd72", "patch": "@@ -158,9 +158,10 @@ impl<T: Send> Drop for Queue<T> {\n mod tests {\n     use prelude::*;\n \n+    use alloc::arc::Arc;\n+\n     use native;\n     use super::{Queue, Data, Empty, Inconsistent};\n-    use sync::arc::UnsafeArc;\n \n     #[test]\n     fn test_full() {\n@@ -179,22 +180,22 @@ mod tests {\n             Inconsistent | Data(..) => fail!()\n         }\n         let (tx, rx) = channel();\n-        let q = UnsafeArc::new(q);\n+        let q = Arc::new(q);\n \n         for _ in range(0, nthreads) {\n             let tx = tx.clone();\n             let q = q.clone();\n             native::task::spawn(proc() {\n                 for i in range(0, nmsgs) {\n-                    unsafe { (*q.get()).push(i); }\n+                    q.push(i);\n                 }\n                 tx.send(());\n             });\n         }\n \n         let mut i = 0u;\n         while i < nthreads * nmsgs {\n-            match unsafe { (*q.get()).pop() } {\n+            match q.pop() {\n                 Empty | Inconsistent => {},\n                 Data(_) => { i += 1 }\n             }"}, {"sha": "093933c82fc16979da519a30e8f996eba555d6a7", "filename": "src/libstd/sync/spsc_queue.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73729e94c87281dd7193dbdc86b4de2963b8fd72/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fspsc_queue.rs?ref=73729e94c87281dd7193dbdc86b4de2963b8fd72", "patch": "@@ -52,7 +52,7 @@ struct Node<T> {\n }\n \n /// The single-producer single-consumer queue. This structure is not cloneable,\n-/// but it can be safely shared in an UnsafeArc if it is guaranteed that there\n+/// but it can be safely shared in an Arc if it is guaranteed that there\n /// is only one popper and one pusher touching the queue at any one point in\n /// time.\n pub struct Queue<T> {\n@@ -227,9 +227,11 @@ impl<T: Send> Drop for Queue<T> {\n #[cfg(test)]\n mod test {\n     use prelude::*;\n+\n+    use alloc::arc::Arc;\n     use native;\n+\n     use super::Queue;\n-    use sync::arc::UnsafeArc;\n \n     #[test]\n     fn smoke() {\n@@ -274,7 +276,8 @@ mod test {\n         stress_bound(1);\n \n         fn stress_bound(bound: uint) {\n-            let (a, b) = UnsafeArc::new2(Queue::new(bound));\n+            let a = Arc::new(Queue::new(bound));\n+            let b = a.clone();\n             let (tx, rx) = channel();\n             native::task::spawn(proc() {\n                 for _ in range(0, 100000) {"}]}