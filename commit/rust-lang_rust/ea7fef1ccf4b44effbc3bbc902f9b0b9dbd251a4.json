{"sha": "ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhN2ZlZjFjY2Y0YjQ0ZWZmYmMzYmJjOTAyZjliMGI5ZGJkMjUxYTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-12-18T05:10:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-01-02T19:33:38Z"}, "message": "bootstrap: Link LLVM as a dylib with ThinLTO\n\nWhen building a distributed compiler on Linux where we use ThinLTO to\ncreate the LLVM shared object this commit switches the compiler to\ndynamically linking that LLVM artifact instead of statically linking to\nLLVM. The primary goal here is to reduce CI compile times, avoiding two+\nThinLTO builds of all of LLVM. By linking dynamically to LLVM we'll\nreuse the one ThinLTO step done by LLVM's build itself.\n\nLots of discussion about this change can be found [here] and down. A\nperf run will show whether this is worth it or not!\n\n[here]: https://github.com/rust-lang/rust/pull/53245#issuecomment-417015334", "tree": {"sha": "44748ddc1ac03ae5ade8faee09eeb26bc6d2704e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44748ddc1ac03ae5ade8faee09eeb26bc6d2704e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "html_url": "https://github.com/rust-lang/rust/commit/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a36b960df626cbb8bea74f01243318b73f0bd201", "url": "https://api.github.com/repos/rust-lang/rust/commits/a36b960df626cbb8bea74f01243318b73f0bd201", "html_url": "https://github.com/rust-lang/rust/commit/a36b960df626cbb8bea74f01243318b73f0bd201"}], "stats": {"total": 68, "additions": 17, "deletions": 51}, "files": [{"sha": "cc539d4c89571b0b371f3f3c3ea784c1997bc533", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "patch": "@@ -38,7 +38,6 @@ impl Step for Std {\n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n \n@@ -85,7 +84,6 @@ impl Step for Rustc {\n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n \n@@ -136,7 +134,6 @@ impl Step for CodegenBackend {\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }\n@@ -174,7 +171,6 @@ impl Step for Test {\n         builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   true);\n \n@@ -222,7 +218,6 @@ impl Step for Rustdoc {\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);\n "}, {"sha": "0d2546a0e9ca9f6b30c6f8bc1111ad4773dc3ab9", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "patch": "@@ -19,6 +19,7 @@ use build_helper::{output, mtime, up_to_date};\n use filetime::FileTime;\n use serde_json;\n \n+use crate::dist;\n use crate::util::{exe, libdir, is_dylib};\n use crate::{Compiler, Mode, GitRepo};\n use crate::native;\n@@ -104,7 +105,6 @@ impl Step for Std {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n \n@@ -365,7 +365,6 @@ impl Step for Test {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   false);\n \n@@ -493,7 +492,6 @@ impl Step for Rustc {\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n-                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n \n@@ -636,47 +634,18 @@ impl Step for CodegenBackend {\n \n         let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n \n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"rustc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n         cargo.arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n         let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n \n-        let mut cargo_tails_args = vec![];\n-\n-        if builder.config.llvm_thin_lto {\n-            cargo_tails_args.push(\"--\".to_string());\n-\n-            let num_jobs = builder.jobs();\n-\n-            if !target.contains(\"msvc\") {\n-                // Here we assume that the linker is clang. If it's not, there'll\n-                // be linker errors.\n-                cargo_tails_args.push(\"-Clink-arg=-fuse-ld=lld\".to_string());\n-                cargo_tails_args.push(\"-Clink-arg=-flto=thin\".to_string());\n-\n-                if builder.config.llvm_optimize {\n-                    cargo_tails_args.push(\"-Clink-arg=-O2\".to_string());\n-                }\n-\n-                // Let's make LLD respect the `-j` option.\n-                let num_jobs_arg = format!(\"-Clink-arg=-Wl,--thinlto-jobs={}\", num_jobs);\n-                cargo_tails_args.push(num_jobs_arg);\n-            } else {\n-                // Here we assume that the linker is lld-link.exe. lld-link.exe\n-                // does not need the extra arguments except for num_jobs\n-                let num_jobs_arg = format!(\"-Clink-arg=/opt:lldltojobs={}\", num_jobs);\n-                cargo_tails_args.push(num_jobs_arg);\n-            }\n-        }\n-\n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n-                              cargo_tails_args,\n                               &tmp_stamp,\n                               false);\n         if builder.config.dry_run {\n@@ -749,7 +718,9 @@ pub fn build_codegen_backend(builder: &Builder,\n                                          \"libstdc++.a\");\n                 cargo.env(\"LLVM_STATIC_STDCPP\", file);\n             }\n-            if builder.config.llvm_link_shared {\n+            if builder.config.llvm_link_shared ||\n+                (builder.config.llvm_thin_lto && backend != \"emscripten\")\n+            {\n                 cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n             }\n         }\n@@ -989,6 +960,8 @@ impl Step for Assemble {\n             copy_lld_to_sysroot(builder, target_compiler, &lld_install);\n         }\n \n+        dist::maybe_install_llvm_dylib(builder, target_compiler.host, &sysroot);\n+\n         // Link the compiler binary itself into place\n         let out_dir = builder.cargo_out(build_compiler, Mode::Rustc, host);\n         let rustc = out_dir.join(exe(\"rustc_binary\", &*host));\n@@ -1015,7 +988,6 @@ pub fn add_to_sysroot(builder: &Builder, sysroot_dst: &Path, stamp: &Path) {\n \n pub fn run_cargo(builder: &Builder,\n                  cargo: &mut Command,\n-                 tail_args: Vec<String>,\n                  stamp: &Path,\n                  is_check: bool)\n     -> Vec<PathBuf>\n@@ -1038,7 +1010,7 @@ pub fn run_cargo(builder: &Builder,\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, &mut |msg| {\n         let filenames = match msg {\n             CargoMessage::CompilerArtifact { filenames, .. } => filenames,\n             _ => return,\n@@ -1163,7 +1135,6 @@ pub fn run_cargo(builder: &Builder,\n pub fn stream_cargo(\n     builder: &Builder,\n     cargo: &mut Command,\n-    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage),\n ) -> bool {\n     if builder.config.dry_run {\n@@ -1174,10 +1145,6 @@ pub fn stream_cargo(\n     cargo.arg(\"--message-format\").arg(\"json\")\n          .stdout(Stdio::piped());\n \n-    for arg in tail_args {\n-        cargo.arg(arg);\n-    }\n-\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "97a359639cb83a0dc3cd4efe5461d4d6479ec71c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "patch": "@@ -1877,13 +1877,13 @@ impl Step for HashSign {\n // LLVM tools are linked dynamically.\n // Note: This function does no yet support Windows but we also don't support\n //       linking LLVM tools dynamically on Windows yet.\n-fn maybe_install_llvm_dylib(builder: &Builder,\n-                            target: Interned<String>,\n-                            image: &Path) {\n+pub fn maybe_install_llvm_dylib(builder: &Builder,\n+                                target: Interned<String>,\n+                                sysroot: &Path) {\n     let src_libdir = builder\n         .llvm_out(target)\n         .join(\"lib\");\n-    let dst_libdir = image.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n+    let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n     t!(fs::create_dir_all(&dst_libdir));\n \n     if target.contains(\"apple-darwin\") {"}, {"sha": "d31ea0f845873743cfaa82d2020aba28981c353b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "patch": "@@ -77,7 +77,7 @@ impl Step for ToolBuild {\n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\""}, {"sha": "98cf20a7ba7f40901a7bc2e902969c9c2fe04f8e", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=ea7fef1ccf4b44effbc3bbc902f9b0b9dbd251a4", "patch": "@@ -132,6 +132,10 @@ fn main() {\n             continue;\n         }\n \n+        if flag.starts_with(\"-flto\") {\n+            continue;\n+        }\n+\n         // -Wdate-time is not supported by the netbsd cross compiler\n         if is_crossed && target.contains(\"netbsd\") && flag.contains(\"date-time\") {\n             continue;"}]}