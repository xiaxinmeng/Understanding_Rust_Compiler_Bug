{"sha": "e4fcee579ea33fb2b38ddb947850d5ee612e6479", "node_id": "C_kwDOAAsO6NoAKGU0ZmNlZTU3OWVhMzNmYjJiMzhkZGI5NDc4NTBkNWVlNjEyZTY0Nzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-31T21:39:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-31T21:39:44Z"}, "message": "Rollup merge of #99984 - ChrisDenton:fix-miri, r=Mark-Simulacrum\n\nFix compat.rs for `cfg(miri)`\n\nFixes #99982", "tree": {"sha": "11f01f1e61594c765db1811d425c8dfa8014ab8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f01f1e61594c765db1811d425c8dfa8014ab8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4fcee579ea33fb2b38ddb947850d5ee612e6479", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5vagCRBK7hj4Ov3rIwAA8HMIAIAsuz+CSA3FPkdcjv7t0yW8\nH22WGRQyXUUgbDtkSXmfg7mpH//XjVXh7PleYi4ZEC/HRkDHBibwcgPnzpkFnNGh\nxmu/AXWA6eqUIVfdeDcGyx34kXe6ecUJGMS+4CFfcPXtsHRndO1HE+1U8EiUzCRz\njpezmwIxXCJwGFRvEiiK5p/4MkuBMrba2oqbCNVYqL13KRZZ0GSI3aeshmE7civn\nQfhRQUDzeJe3t16OzOwQrc3KuiN9PYQLxdO6W3Ke8ar5m/Gb6fE52eSP7FaVVuhM\nveG0YAiwtROgJMKJp5rL1YGIysey6mm5JZM6sHNapkC45qJcXWgdpj8I/IJ2lvA=\n=UjzH\n-----END PGP SIGNATURE-----\n", "payload": "tree 11f01f1e61594c765db1811d425c8dfa8014ab8d\nparent 0c3989e556b882622aa326cecd267e1306807776\nparent bf0b18e91005d22081b5122c4dba8ee7f1c108d5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659303584 +0200\ncommitter GitHub <noreply@github.com> 1659303584 +0200\n\nRollup merge of #99984 - ChrisDenton:fix-miri, r=Mark-Simulacrum\n\nFix compat.rs for `cfg(miri)`\n\nFixes #99982\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fcee579ea33fb2b38ddb947850d5ee612e6479", "html_url": "https://github.com/rust-lang/rust/commit/e4fcee579ea33fb2b38ddb947850d5ee612e6479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4fcee579ea33fb2b38ddb947850d5ee612e6479/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c3989e556b882622aa326cecd267e1306807776", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3989e556b882622aa326cecd267e1306807776", "html_url": "https://github.com/rust-lang/rust/commit/0c3989e556b882622aa326cecd267e1306807776"}, {"sha": "bf0b18e91005d22081b5122c4dba8ee7f1c108d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0b18e91005d22081b5122c4dba8ee7f1c108d5", "html_url": "https://github.com/rust-lang/rust/commit/bf0b18e91005d22081b5122c4dba8ee7f1c108d5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ccc90177a2034740f83e1ffd2bebc0a0f839c93e", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4fcee579ea33fb2b38ddb947850d5ee612e6479/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fcee579ea33fb2b38ddb947850d5ee612e6479/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=e4fcee579ea33fb2b38ddb947850d5ee612e6479", "patch": "@@ -180,8 +180,8 @@ macro_rules! compat_fn_with_fallback {\n \n             fn load_from_module(module: Option<Module>) -> F {\n                 unsafe {\n-                    static symbol_name: &CStr = ansi_str!(sym $symbol);\n-                    if let Some(f) = module.and_then(|m| m.proc_address(symbol_name)) {\n+                    static SYMBOL_NAME: &CStr = ansi_str!(sym $symbol);\n+                    if let Some(f) = module.and_then(|m| m.proc_address(SYMBOL_NAME)) {\n                         PTR.store(f.as_ptr(), Ordering::Relaxed);\n                         mem::transmute(f)\n                     } else {\n@@ -251,7 +251,7 @@ macro_rules! compat_fn_optional {\n             pub fn option() -> Option<F> {\n                 let mut func = NonNull::new(PTR.load(Ordering::Relaxed));\n                 if func.is_none() {\n-                    Module::new($module).map(preload);\n+                    unsafe { Module::new($module).map(preload) };\n                     func = NonNull::new(PTR.load(Ordering::Relaxed));\n                 }\n                 unsafe {\n@@ -262,8 +262,8 @@ macro_rules! compat_fn_optional {\n             #[allow(unused)]\n             pub(in crate::sys) fn preload(module: Module) {\n                 unsafe {\n-                    let symbol_name = ansi_str!(sym $symbol);\n-                    if let Some(f) = module.proc_address(symbol_name) {\n+                    static SYMBOL_NAME: &CStr = ansi_str!(sym $symbol);\n+                    if let Some(f) = module.proc_address(SYMBOL_NAME) {\n                         PTR.store(f.as_ptr(), Ordering::Relaxed);\n                     }\n                 }"}]}