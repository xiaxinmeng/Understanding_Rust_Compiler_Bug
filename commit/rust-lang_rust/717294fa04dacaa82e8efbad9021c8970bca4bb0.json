{"sha": "717294fa04dacaa82e8efbad9021c8970bca4bb0", "node_id": "C_kwDOAAsO6NoAKDcxNzI5NGZhMDRkYWNhYTgyZThlZmJhZDkwMjFjODk3MGJjYTRiYjA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-12T11:55:46Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T09:48:26Z"}, "message": "Inform the user which trait is meant in the diagnostic itself instead of relying on the span making it obvious", "tree": {"sha": "e98a49bdf27327d5295a2dd47fcacb5d84654149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e98a49bdf27327d5295a2dd47fcacb5d84654149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/717294fa04dacaa82e8efbad9021c8970bca4bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/717294fa04dacaa82e8efbad9021c8970bca4bb0", "html_url": "https://github.com/rust-lang/rust/commit/717294fa04dacaa82e8efbad9021c8970bca4bb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/717294fa04dacaa82e8efbad9021c8970bca4bb0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb26b35b12d810d7a8215869d9e434c4b0c7f25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb26b35b12d810d7a8215869d9e434c4b0c7f25c", "html_url": "https://github.com/rust-lang/rust/commit/cb26b35b12d810d7a8215869d9e434c4b0c7f25c"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "2d3b4663f06ce82f17f272d63bf4a0b86efe282e", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -1853,7 +1853,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         )],\n     ) {\n         let mut derives = Vec::<(String, Span, Symbol)>::new();\n-        let mut traits = Vec::<Span>::new();\n+        let mut traits = Vec::new();\n         for (pred, _, _) in unsatisfied_predicates {\n             let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = pred.kind().skip_binder() else { continue };\n             let adt = match trait_pred.self_ty().ty_adt_def() {\n@@ -1892,10 +1892,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     derives.push((self_name, self_span, diagnostic_name));\n                 } else {\n-                    traits.push(self.tcx.def_span(trait_pred.def_id()));\n+                    traits.push(trait_pred.def_id());\n                 }\n             } else {\n-                traits.push(self.tcx.def_span(trait_pred.def_id()));\n+                traits.push(trait_pred.def_id());\n             }\n         }\n         traits.sort();\n@@ -1918,10 +1918,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let len = traits.len();\n         if len > 0 {\n-            let span: MultiSpan = traits.into();\n+            let span =\n+                MultiSpan::from_spans(traits.iter().map(|&did| self.tcx.def_span(did)).collect());\n+            let mut names = format!(\"`{}`\", self.tcx.def_path_str(traits[0]));\n+            for (i, &did) in traits.iter().enumerate().skip(1) {\n+                if len > 2 {\n+                    names.push_str(\", \");\n+                }\n+                if i == len - 1 {\n+                    names.push_str(\" and \");\n+                }\n+                names.push('`');\n+                names.push_str(&self.tcx.def_path_str(did));\n+                names.push('`');\n+            }\n             err.span_note(\n                 span,\n-                &format!(\"the following trait{} must be implemented\", pluralize!(len),),\n+                &format!(\"the trait{} {} must be implemented\", pluralize!(len), names),\n             );\n         }\n "}, {"sha": "6e236ca5296a17eee6b9489dbcb05e4b3a4b32b6", "filename": "src/test/ui/binop/issue-28837.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `Add<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Add<_>`\n-note: the following trait must be implemented\n+note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0369]: cannot subtract `A` from `A`\n@@ -27,7 +27,7 @@ note: an implementation of `Sub<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Sub<_>`\n-note: the following trait must be implemented\n+note: the trait `Sub` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0369]: cannot multiply `A` by `A`\n@@ -43,7 +43,7 @@ note: an implementation of `Mul<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Mul<_>`\n-note: the following trait must be implemented\n+note: the trait `Mul` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0369]: cannot divide `A` by `A`\n@@ -59,7 +59,7 @@ note: an implementation of `Div<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Div<_>`\n-note: the following trait must be implemented\n+note: the trait `Div` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0369]: cannot mod `A` by `A`\n@@ -75,7 +75,7 @@ note: an implementation of `Rem<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Rem<_>`\n-note: the following trait must be implemented\n+note: the trait `Rem` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0369]: no implementation for `A & A`\n@@ -91,7 +91,7 @@ note: an implementation of `BitAnd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `BitAnd<_>`\n-note: the following trait must be implemented\n+note: the trait `BitAnd` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error[E0369]: no implementation for `A | A`\n@@ -107,7 +107,7 @@ note: an implementation of `BitOr<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `BitOr<_>`\n-note: the following trait must be implemented\n+note: the trait `BitOr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error[E0369]: no implementation for `A << A`\n@@ -123,7 +123,7 @@ note: an implementation of `Shl<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Shl<_>`\n-note: the following trait must be implemented\n+note: the trait `Shl` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error[E0369]: no implementation for `A >> A`\n@@ -139,7 +139,7 @@ note: an implementation of `Shr<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^ must implement `Shr<_>`\n-note: the following trait must be implemented\n+note: the trait `Shr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error[E0369]: binary operation `==` cannot be applied to type `A`"}, {"sha": "c313ed6037f3ab043aef865989ef6725449c7fb7", "filename": "src/test/ui/binop/issue-3820.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-3820.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `Mul<_>` might be missing for `Thing`\n    |\n LL | struct Thing {\n    | ^^^^^^^^^^^^ must implement `Mul<_>`\n-note: the following trait must be implemented\n+note: the trait `Mul` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error: aborting due to previous error"}, {"sha": "8a88332b73e105f8b06c85c634f8cdeefba70f7e", "filename": "src/test/ui/destructuring-assignment/note-unsupported.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -49,7 +49,7 @@ note: an implementation of `AddAssign<_>` might be missing for `S`\n    |\n LL | struct S { x: u8, y: u8 }\n    | ^^^^^^^^ must implement `AddAssign<_>`\n-note: the following trait must be implemented\n+note: the trait `AddAssign` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0067]: invalid left-hand side of assignment"}, {"sha": "fe9956b70bdd75f3e9cb374adbb589cde91d2e50", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -41,7 +41,7 @@ note: an implementation of `Not` might be missing for `Question`\n    |\n LL | enum Question {\n    | ^^^^^^^^^^^^^ must implement `Not`\n-note: the following trait must be implemented\n+note: the trait `Not` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`"}, {"sha": "bc342dc46893b80e02778235fc7437037bb9d406", "filename": "src/test/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -25,7 +25,7 @@ LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n    |\n    = note: the following trait bounds were not satisfied:\n            `RawImpl<()>: Raw<()>`\n-note: the following trait must be implemented\n+note: the trait `Raw` must be implemented\n   --> $DIR/issue-62742.rs:12:1\n    |\n LL | pub trait Raw<T: ?Sized> {"}, {"sha": "f8375d4ef9014ba6e7dcfe0ca100c93ee114a47d", "filename": "src/test/ui/issues/issue-14091-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -9,7 +9,7 @@ note: an implementation of `Not` might be missing for `BytePos`\n    |\n LL | pub struct BytePos(pub u32);\n    | ^^^^^^^^^^^^^^^^^^ must implement `Not`\n-note: the following trait must be implemented\n+note: the trait `Not` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f4e647491eb7390efc4ba288ba0a788b0bd2484", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -61,7 +61,7 @@ LL |      .take()\n    = note: the following trait bounds were not satisfied:\n            `Foo: Iterator`\n            which is required by `&mut Foo: Iterator`\n-note: the following trait must be implemented\n+note: the trait `Iterator` must be implemented\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `take`, perhaps you need to implement it:"}, {"sha": "2393791a9b2a81106ad423e13de7bb2f245282ff", "filename": "src/test/ui/mismatched_types/assignment-operator-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `AddAssign<_>` might be missing for `Foo`\n    |\n LL | struct Foo;\n    | ^^^^^^^^^^ must implement `AddAssign<_>`\n-note: the following trait must be implemented\n+note: the trait `AddAssign` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error: aborting due to previous error"}, {"sha": "10d42b7e3c0b8de4892a98ee411bb38e709c8198", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -35,7 +35,7 @@ note: an implementation of `BitOr<_>` might be missing for `E`\n    |\n LL | enum E { A, B }\n    | ^^^^^^ must implement `BitOr<_>`\n-note: the following trait must be implemented\n+note: the trait `BitOr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n error: aborting due to 5 previous errors"}, {"sha": "5d4d692b2cffb7e5c39ccc0754002018c7ca9ed1", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -26,7 +26,7 @@ note: an implementation of `Add<_>` might be missing for `World`\n    |\n LL | enum World {\n    | ^^^^^^^^^^ must implement `Add<_>`\n-note: the following trait must be implemented\n+note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0369]: cannot add `String` to `&str`"}, {"sha": "37788612f4371dd6ce95af228211a59799424d6a", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -27,7 +27,7 @@ LL | default impl<T> Foo for T {\n    | ^^^^^^^^^^^^^^^^---^^^^^-\n    | |\n    | unsatisfied trait bound introduced here\n-note: the following trait must be implemented\n+note: the trait `Foo` must be implemented\n   --> $DIR/specialization-trait-not-implemented.rs:7:1\n    |\n LL | trait Foo {"}, {"sha": "14e8a2675dd18dca6b2dc57fc4c4a973d1d2ebee", "filename": "src/test/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -20,7 +20,7 @@ LL |     let y = x.test();\n            `Enum: Clone`\n            `Enum: Default`\n            `CloneEnum: Default`\n-note: the following trait must be implemented\n+note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n help: consider annotating `Enum` with `#[derive(Clone)]`\n    |"}, {"sha": "5434472ceecc7605e3b324553e86d07a6acb0517", "filename": "src/test/ui/suggestions/restrict-type-not-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -11,7 +11,7 @@ note: an implementation of `Add<_>` might be missing for `Wrapper<T>`\n    |\n LL | struct Wrapper<T>(T);\n    | ^^^^^^^^^^^^^^^^^ must implement `Add<_>`\n-note: the following trait must be implemented\n+note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |"}, {"sha": "edc5aeffdcd65fda4697a7fcc12895bd9ca88f54", "filename": "src/test/ui/type/type-ascription-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/717294fa04dacaa82e8efbad9021c8970bca4bb0/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-precedence.stderr?ref=717294fa04dacaa82e8efbad9021c8970bca4bb0", "patch": "@@ -33,7 +33,7 @@ note: an implementation of `std::ops::Neg` might be missing for `Z`\n    |\n LL | struct Z;\n    | ^^^^^^^^ must implement `std::ops::Neg`\n-note: the following trait must be implemented\n+note: the trait `std::ops::Neg` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n error[E0308]: mismatched types"}]}