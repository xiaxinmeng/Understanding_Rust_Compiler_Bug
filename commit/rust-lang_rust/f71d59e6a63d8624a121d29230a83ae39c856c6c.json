{"sha": "f71d59e6a63d8624a121d29230a83ae39c856c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MWQ1OWU2YTYzZDg2MjRhMTIxZDI5MjMwYTgzYWUzOWM4NTZjNmM=", "commit": {"author": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-02-15T20:21:13Z"}, "committer": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-24T20:14:21Z"}, "message": "Lint for type repetition in trait bounds.\n\nThis lint adds warning if types are redundantly repeated in trait bounds i.e. `T: Copy, T: Clone` instead of `T: Copy + Clone`. This is a late pass trait lint and has necessitated the addition of code to allow hashing of TyKinds without taking into account Span information.", "tree": {"sha": "f5faa17f3c0d7bb86239f5be45dbcf5e3314eba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5faa17f3c0d7bb86239f5be45dbcf5e3314eba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71d59e6a63d8624a121d29230a83ae39c856c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71d59e6a63d8624a121d29230a83ae39c856c6c", "html_url": "https://github.com/rust-lang/rust/commit/f71d59e6a63d8624a121d29230a83ae39c856c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71d59e6a63d8624a121d29230a83ae39c856c6c/comments", "author": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e04ff3974f62997a7b73c2f39b726202b5a0dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e04ff3974f62997a7b73c2f39b726202b5a0dd", "html_url": "https://github.com/rust-lang/rust/commit/f8e04ff3974f62997a7b73c2f39b726202b5a0dd"}], "stats": {"total": 214, "additions": 210, "deletions": 4}, "files": [{"sha": "faffb1a67f1a29091b3d5a688be48a0a93a8f1d4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f71d59e6a63d8624a121d29230a83ae39c856c6c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71d59e6a63d8624a121d29230a83ae39c856c6c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f71d59e6a63d8624a121d29230a83ae39c856c6c", "patch": "@@ -265,6 +265,7 @@ pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n pub mod transmuting_null;\n+pub mod trait_bounds;\n pub mod trivially_copy_pass_by_ref;\n pub mod try_err;\n pub mod types;\n@@ -588,6 +589,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box checked_conversions::CheckedConversions);\n     reg.register_late_lint_pass(box integer_division::IntegerDivision);\n     reg.register_late_lint_pass(box inherent_to_string::InherentToString);\n+    reg.register_late_lint_pass(box trait_bounds::TraitBounds);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -868,6 +870,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n         transmuting_null::TRANSMUTING_NULL,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n         try_err::TRY_ERR,\n         types::ABSURD_EXTREME_COMPARISONS,"}, {"sha": "1f4c68507604595ea688ebaffe6b4fb8386904b6", "filename": "clippy_lints/src/trait_bounds.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f71d59e6a63d8624a121d29230a83ae39c856c6c/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71d59e6a63d8624a121d29230a83ae39c856c6c/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=f71d59e6a63d8624a121d29230a83ae39c856c6c", "patch": "@@ -0,0 +1,63 @@\n+use crate::utils::{in_macro, span_help_and_lint, SpanlessHash};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc::hir::*;\n+\n+declare_clippy_lint! {\n+    pub TYPE_REPETITION_IN_BOUNDS,\n+    complexity,\n+    \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct TraitBounds;\n+\n+impl LintPass for TraitBounds {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TYPE_REPETITION_IN_BOUNDS)\n+    }\n+\n+    fn name(&self) -> &'static str {\n+        \"TypeRepetitionInBounds\"\n+    }\n+}\n+\n+\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n+    fn check_generics(&mut self, cx: &LateContext<'a, 'tcx>, gen: &'tcx Generics) {\n+        if in_macro(gen.span) {\n+            return;\n+        }\n+        let hash = | ty | -> u64 {\n+            let mut hasher = SpanlessHash::new(cx, cx.tables);\n+            hasher.hash_ty(ty);\n+            hasher.finish()\n+        };\n+        let mut map = FxHashMap::default();\n+        for bound in &gen.where_clause.predicates {\n+            if let WherePredicate::BoundPredicate(ref p) = bound {\n+                let h = hash(&p.bounded_ty);\n+                if let Some(ref v) = map.insert(h, p.bounds) {\n+                    let mut hint_string = format!(\"consider combining the bounds: `{:?}: \", p.bounded_ty);\n+                    for &b in v.iter() {\n+                        hint_string.push_str(&format!(\"{:?}, \", b));\n+                    }\n+                    for &b in p.bounds.iter() {\n+                        hint_string.push_str(&format!(\"{:?}, \", b));\n+                    }\n+                    hint_string.truncate(hint_string.len() - 2);\n+                    hint_string.push('`');\n+                    span_help_and_lint(\n+                        cx,\n+                        TYPE_REPETITION_IN_BOUNDS,\n+                        p.span,\n+                        \"this type has already been used as a bound predicate\",\n+                        &hint_string,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "929c15a6ee55e0e78f01f1bced69798246e7e7f7", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 115, "deletions": 4, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/f71d59e6a63d8624a121d29230a83ae39c856c6c/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71d59e6a63d8624a121d29230a83ae39c856c6c/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=f71d59e6a63d8624a121d29230a83ae39c856c6c", "patch": "@@ -3,7 +3,7 @@ use crate::utils::differing_macro_contexts;\n use rustc::hir::ptr::P;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n-use rustc::ty::TypeckTables;\n+use rustc::ty::{Ty, TypeckTables};\n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n use syntax::ast::Name;\n@@ -438,9 +438,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(fun);\n                 self.hash_exprs(args);\n             },\n-            ExprKind::Cast(ref e, ref _ty) | ExprKind::Type(ref e, ref _ty) => {\n+            ExprKind::Cast(ref e, ref ty) => {\n+                let c: fn(_, _) -> _ = ExprKind::Cast;\n+                c.hash(&mut self.s);\n                 self.hash_expr(e);\n-                // TODO: _ty\n+                self.hash_ty(ty);\n             },\n             ExprKind::Closure(cap, _, eid, _, _) => {\n                 match cap {\n@@ -512,9 +514,22 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(e);\n                 }\n             },\n-            ExprKind::Tup(ref v) | ExprKind::Array(ref v) => {\n+            ExprKind::Tup(ref tup) => {\n+                let c: fn(_) -> _ = ExprKind::Tup;\n+                c.hash(&mut self.s);\n+                self.hash_exprs(tup);\n+            },\n+            ExprKind::Array(ref v) => {\n+                let c: fn(_) -> _ = ExprKind::Array;\n+                c.hash(&mut self.s);\n                 self.hash_exprs(v);\n             },\n+            ExprKind::Type(ref e, ref ty) => {\n+                let c: fn(_, _) -> _ = ExprKind::Type;\n+                c.hash(&mut self.s);\n+                self.hash_expr(e);\n+                self.hash_ty(ty);\n+            },\n             ExprKind::Unary(lop, ref le) => {\n                 lop.hash(&mut self.s);\n                 self.hash_expr(le);\n@@ -574,4 +589,100 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n         }\n     }\n+\n+    pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n+        if let LifetimeName::Param(ref name) = lifetime.name {\n+            match name {\n+                ParamName::Plain(ref ident) => {\n+                    ident.name.hash(&mut self.s);\n+                },\n+                ParamName::Fresh(ref size) => {\n+                    size.hash(&mut self.s);\n+                },\n+                _ => {},\n+            }\n+        }\n+    }\n+\n+    pub fn hash_ty(&mut self, ty: &Ty) {\n+        std::mem::discriminant(&ty.node).hash(&mut self.s);\n+        match ty.node {\n+            Ty::Slice(ty) => {\n+                self.hash_ty(ty);\n+            },\n+            Ty::Array(ty, anon_const) => {\n+                self.hash_ty(ty);\n+                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+            },\n+            Ty::Ptr(mut_ty) => {\n+                self.hash_ty(&mut_ty.ty);\n+                mut_ty.mutbl.hash(&mut self.s);\n+            },\n+            Ty::Rptr(lifetime, mut_ty) => {\n+                self.hash_lifetime(lifetime);\n+                self.hash_ty(&mut_ty.ty);\n+                mut_ty.mutbl.hash(&mut self.s);\n+            },\n+            Ty::BareFn(bfn) => {\n+                bfn.unsafety.hash(&mut self.s);\n+                bfn.abi.hash(&mut self.s);\n+                for arg in &bfn.decl.inputs {\n+                    self.hash_ty(&arg);\n+                }\n+                match bfn.decl.output {\n+                    FunctionRetTy::DefaultReturn(_) => {\n+                        ().hash(&mut self.s);\n+                    },\n+                    FunctionRetTy::Return(ref ty) => {\n+                        self.hash_ty(ty);\n+                    },\n+                }\n+                bfn.decl.c_variadic.hash(&mut self.s);\n+            },\n+            Ty::Tup(ty_list) => {\n+                for ty in ty_list {\n+                    self.hash_ty(ty);\n+                }\n+\n+            },\n+            Ty::Path(qpath) => {\n+                match qpath {\n+                    QPath::Resolved(ref maybe_ty, ref path) => {\n+                        if let Some(ref ty) = maybe_ty {\n+                            self.hash_ty(ty);\n+                        }\n+                        for segment in &path.segments {\n+                            segment.ident.name.hash(&mut self.s);\n+                        }\n+                    }, \n+                    QPath::TypeRelative(ref ty, ref segment) => {\n+                        self.hash_ty(ty);\n+                        segment.ident.name.hash(&mut self.s);\n+                    },\n+                }\n+            },\n+            Ty::Def(_, arg_list) => {\n+                for arg in arg_list {\n+                    match arg {\n+                        GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n+                        GenericArg::Type(ref ty) => self.hash_ty(ty),\n+                        GenericArg::Const(ref ca) => {\n+                            self.hash_expr(&self.cx.tcx.hir().body(ca.value.body).value);\n+                        },\n+                    }\n+                }\n+            },\n+            Ty::TraitObject(_, lifetime) => {\n+                self.hash_lifetime(lifetime);\n+\n+            },\n+            Ty::Typeof(anon_const) => {\n+                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+            },\n+            Ty::CVarArgs(lifetime) => {\n+                self.hash_lifetime(lifetime);\n+            },\n+            Ty::Err | Ty::Infer | Ty::Never => {},\n+        }\n+    }\n }"}, {"sha": "3aa0d0da5617007ed86b009df4253b7997b42aec", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f71d59e6a63d8624a121d29230a83ae39c856c6c/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71d59e6a63d8624a121d29230a83ae39c856c6c/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=f71d59e6a63d8624a121d29230a83ae39c856c6c", "patch": "@@ -0,0 +1,14 @@\n+#[deny(clippy::type_repetition_in_bounds)]\n+\n+pub fn foo<T>(_t: T) where T: Copy, T: Clone {\n+    unimplemented!();\n+}\n+\n+pub fn bar<T, U>(_t: T, _u: U) where T: Copy, U: Clone {\n+    unimplemented!();\n+}\n+\n+\n+fn main() {\n+\n+}"}, {"sha": "1b49c69533ce575efcb16b46ef3e78d8c1c8721b", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f71d59e6a63d8624a121d29230a83ae39c856c6c/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f71d59e6a63d8624a121d29230a83ae39c856c6c/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=f71d59e6a63d8624a121d29230a83ae39c856c6c", "patch": "@@ -0,0 +1,15 @@\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:3:37\n+   |\n+LL | pub fn foo<T>(_t: T) where T: Copy, T: Clone {\n+   |                                     ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/type_repetition_in_bounds.rs:1:8\n+   |\n+LL | #[deny(clippy::type_repetition_in_bounds)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider combining the bounds: `T: Copy + Clone`\n+\n+error: aborting due to previous error\n+"}]}