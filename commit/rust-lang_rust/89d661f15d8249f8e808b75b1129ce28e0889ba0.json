{"sha": "89d661f15d8249f8e808b75b1129ce28e0889ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDY2MWYxNWQ4MjQ5ZjhlODA4Yjc1YjExMjljZTI4ZTA4ODliYTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-07T12:46:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-07T12:46:59Z"}, "message": "Rollup merge of #70857 - faern:use-assoc-int-float-consts, r=dtolnay\n\nDon't import integer and float modules, use assoc consts 2\n\nFollow up to #70777. I missed quite a lot of places. Partially because I wanted to keep the size of the last PR down, and partially because my regexes were not good enough :)\n\nr? @dtolnay", "tree": {"sha": "f993f7af10bd88484c767278196a488c6ee5bebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f993f7af10bd88484c767278196a488c6ee5bebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d661f15d8249f8e808b75b1129ce28e0889ba0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejHZDCRBK7hj4Ov3rIwAAdHIIAAXohZ4nZycJT/NO87ucqKdp\naF+rpaQBBM5uJvyMWzulowVRE44U2o/itebR7+soVUVvYNzd3kfCdXQmI5X6ctka\ntEfDrVlVkxM2/gaj2wtueZOWybplXr11fcpDfcjFZrGp/e+N47Myt7A6xqpt5IGt\njAzGANLw6FXg1eLXc7ovcWdXZYRPWBfLwyCQHjs5UhqhEyclQLXQvFKjvtwj6eeV\nufkr3zfUExWNZOOaIBlcRGbI3LgJQqvXGPXD970sypImmosrTt/7km4gsattZLxJ\ntDjugiaNfhKSyXImJZDXC1GKhnMGhbKA3mIcifqAXs84JuBNkIYrgiDmgXLUaAE=\n=cl9y\n-----END PGP SIGNATURE-----\n", "payload": "tree f993f7af10bd88484c767278196a488c6ee5bebf\nparent 78c64d062a86b865b41d4d07fead520e13bb9df5\nparent f7778d36c7246622c4c2330183f68cb9afd08c62\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586263619 +0200\ncommitter GitHub <noreply@github.com> 1586263619 +0200\n\nRollup merge of #70857 - faern:use-assoc-int-float-consts, r=dtolnay\n\nDon't import integer and float modules, use assoc consts 2\n\nFollow up to #70777. I missed quite a lot of places. Partially because I wanted to keep the size of the last PR down, and partially because my regexes were not good enough :)\n\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d661f15d8249f8e808b75b1129ce28e0889ba0", "html_url": "https://github.com/rust-lang/rust/commit/89d661f15d8249f8e808b75b1129ce28e0889ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d661f15d8249f8e808b75b1129ce28e0889ba0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c64d062a86b865b41d4d07fead520e13bb9df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c64d062a86b865b41d4d07fead520e13bb9df5", "html_url": "https://github.com/rust-lang/rust/commit/78c64d062a86b865b41d4d07fead520e13bb9df5"}, {"sha": "f7778d36c7246622c4c2330183f68cb9afd08c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7778d36c7246622c4c2330183f68cb9afd08c62", "html_url": "https://github.com/rust-lang/rust/commit/f7778d36c7246622c4c2330183f68cb9afd08c62"}], "stats": {"total": 120, "additions": 52, "deletions": 68}, "files": [{"sha": "0780b33e53ae6f207a7aed3156efad46582dbf95", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -608,7 +608,7 @@ unsafe impl<#[may_dangle] T, A: AllocRef> Drop for RawVec<T, A> {\n \n #[inline]\n fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {\n-    if mem::size_of::<usize>() < 8 && alloc_size > core::isize::MAX as usize {\n+    if mem::size_of::<usize>() < 8 && alloc_size > isize::MAX as usize {\n         Err(CapacityOverflow)\n     } else {\n         Ok(())"}, {"sha": "c02ba267056d6dd391e51cd97bbbdbaf4906302e", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -50,7 +50,7 @@ fn trait_object() {\n \n #[test]\n fn float_nan_ne() {\n-    let x = Arc::new(std::f32::NAN);\n+    let x = Arc::new(f32::NAN);\n     assert!(x != x);\n     assert!(!(x == x));\n }"}, {"sha": "96b6c32a1fa8ec4c3a6ae68e55758e2dd9ff1cb1", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -475,7 +475,7 @@ fn test_range_large() {\n \n #[test]\n fn test_range_inclusive_max_value() {\n-    let max = std::usize::MAX;\n+    let max = usize::MAX;\n     let map: BTreeMap<_, _> = vec![(max, 0)].into_iter().collect();\n \n     assert_eq!(map.range(max..=max).collect::<Vec<_>>(), &[(&max, &0)]);"}, {"sha": "501b4f0f816be3f861bf768de3fecc45576875db", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -50,7 +50,7 @@ fn trait_object() {\n \n #[test]\n fn float_nan_ne() {\n-    let x = Rc::new(std::f32::NAN);\n+    let x = Rc::new(f32::NAN);\n     assert!(x != x);\n     assert!(!(x == x));\n }"}, {"sha": "305baa68729eb2a2fb512cac2a98b6bc7b33dd4b", "filename": "src/libcore/benches/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -1,4 +1,3 @@\n-use std::f64;\n use test::Bencher;\n \n #[bench]"}, {"sha": "a1ce33d0bb49ef90f8f065874273e4cda9f39a3e", "filename": "src/libcore/benches/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -5,7 +5,6 @@ mod strategy {\n \n use core::num::flt2dec::MAX_SIG_DIGITS;\n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n-use std::f64;\n use std::io::Write;\n use std::vec::Vec;\n use test::Bencher;"}, {"sha": "1a1dbcd7b871aaab2e22a1c847a521fd097b0dd2", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -76,7 +76,6 @@ fn test_cmp_by() {\n #[test]\n fn test_partial_cmp_by() {\n     use core::cmp::Ordering;\n-    use core::f64;\n \n     let f = |x: i32, y: i32| (x * x).partial_cmp(&y);\n     let xs = || [1, 2, 3, 4].iter().copied();\n@@ -2894,7 +2893,7 @@ fn test_is_sorted() {\n     assert!(![1, 3, 2].iter().is_sorted());\n     assert!([0].iter().is_sorted());\n     assert!(std::iter::empty::<i32>().is_sorted());\n-    assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted());\n+    assert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n     assert!([-2, -1, 0, 3].iter().is_sorted());\n     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n     assert!(![\"c\", \"bb\", \"aaa\"].iter().is_sorted());"}, {"sha": "c098b9c2ba27ddf1618fe74d97f1b8913e12ef62", "filename": "src/libcore/tests/num/dec2flt/rawfp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Frawfp.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -1,8 +1,6 @@\n use core::num::dec2flt::rawfp::RawFloat;\n use core::num::dec2flt::rawfp::{fp_to_float, next_float, prev_float, round_normal};\n use core::num::diy_float::Fp;\n-use std::f32;\n-use std::f64;\n \n fn integer_decode(f: f64) -> (u64, i16, i8) {\n     RawFloat::integer_decode(f)"}, {"sha": "181bbb8e18784c3515d03f2d6b58d576a222c400", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -205,8 +205,6 @@ test_impl_from! { test_u32f64, u32, f64 }\n // Float -> Float\n #[test]\n fn test_f32f64() {\n-    use core::f32;\n-\n     let max: f64 = f32::MAX.into();\n     assert_eq!(max as f32, f32::MAX);\n     assert!(max.is_normal());\n@@ -704,5 +702,5 @@ macro_rules! test_float {\n     };\n }\n \n-test_float!(f32, f32, ::core::f32::INFINITY, ::core::f32::NEG_INFINITY, ::core::f32::NAN);\n-test_float!(f64, f64, ::core::f64::INFINITY, ::core::f64::NEG_INFINITY, ::core::f64::NAN);\n+test_float!(f32, f32, f32::INFINITY, f32::NEG_INFINITY, f32::NAN);\n+test_float!(f64, f64, f64::INFINITY, f64::NEG_INFINITY, f64::NAN);"}, {"sha": "3c83f0f2300038ca4a4ddf5a1204f256e63193af", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -61,25 +61,23 @@ fn test_range_inclusive() {\n \n #[test]\n fn test_range_is_empty() {\n-    use core::f32::*;\n-\n     assert!(!(0.0..10.0).is_empty());\n     assert!((-0.0..0.0).is_empty());\n     assert!((10.0..0.0).is_empty());\n \n-    assert!(!(NEG_INFINITY..INFINITY).is_empty());\n-    assert!((EPSILON..NAN).is_empty());\n-    assert!((NAN..EPSILON).is_empty());\n-    assert!((NAN..NAN).is_empty());\n+    assert!(!(f32::NEG_INFINITY..f32::INFINITY).is_empty());\n+    assert!((f32::EPSILON..f32::NAN).is_empty());\n+    assert!((f32::NAN..f32::EPSILON).is_empty());\n+    assert!((f32::NAN..f32::NAN).is_empty());\n \n     assert!(!(0.0..=10.0).is_empty());\n     assert!(!(-0.0..=0.0).is_empty());\n     assert!((10.0..=0.0).is_empty());\n \n-    assert!(!(NEG_INFINITY..=INFINITY).is_empty());\n-    assert!((EPSILON..=NAN).is_empty());\n-    assert!((NAN..=EPSILON).is_empty());\n-    assert!((NAN..=NAN).is_empty());\n+    assert!(!(f32::NEG_INFINITY..=f32::INFINITY).is_empty());\n+    assert!((f32::EPSILON..=f32::NAN).is_empty());\n+    assert!((f32::NAN..=f32::EPSILON).is_empty());\n+    assert!((f32::NAN..=f32::NAN).is_empty());\n }\n \n #[test]"}, {"sha": "9b9420cc13f85fc35623863030252519c126d466", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -1108,14 +1108,14 @@ mod slice_index {\n \n             // note: using 0 specifically ensures that the result of overflowing is 0..0,\n             //       so that `get` doesn't simply return None for the wrong reason.\n-            bad: data[0 ..= ::std::usize::MAX];\n+            bad: data[0 ..= usize::MAX];\n             message: \"maximum usize\";\n         }\n \n         in mod rangetoinclusive_overflow {\n             data: [0, 1];\n \n-            bad: data[..= ::std::usize::MAX];\n+            bad: data[..= usize::MAX];\n             message: \"maximum usize\";\n         }\n     } // panic_cases!\n@@ -1709,7 +1709,7 @@ fn test_is_sorted() {\n     assert!(![1, 3, 2].is_sorted());\n     assert!([0].is_sorted());\n     assert!(empty.is_sorted());\n-    assert!(![0.0, 1.0, std::f32::NAN].is_sorted());\n+    assert!(![0.0, 1.0, f32::NAN].is_sorted());\n     assert!([-2, -1, 0, 3].is_sorted());\n     assert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));\n     assert!(![\"c\", \"bb\", \"aaa\"].is_sorted());"}, {"sha": "7a6675dc82fa6ef70e9f526c206c100cb95f9ee4", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -14,7 +14,7 @@ fn creation() {\n #[test]\n #[should_panic]\n fn new_overflow() {\n-    let _ = Duration::new(::core::u64::MAX, 1_000_000_000);\n+    let _ = Duration::new(u64::MAX, 1_000_000_000);\n }\n \n #[test]\n@@ -86,7 +86,7 @@ fn checked_add() {\n         Duration::new(0, 500_000_000).checked_add(Duration::new(0, 500_000_001)),\n         Some(Duration::new(1, 1))\n     );\n-    assert_eq!(Duration::new(1, 0).checked_add(Duration::new(::core::u64::MAX, 0)), None);\n+    assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n }\n \n #[test]\n@@ -133,7 +133,7 @@ fn checked_mul() {\n     assert_eq!(Duration::new(1, 1).checked_mul(3), Some(Duration::new(3, 3)));\n     assert_eq!(Duration::new(0, 500_000_001).checked_mul(4), Some(Duration::new(2, 4)));\n     assert_eq!(Duration::new(0, 500_000_001).checked_mul(4000), Some(Duration::new(2000, 4000)));\n-    assert_eq!(Duration::new(::core::u64::MAX - 1, 0).checked_mul(2), None);\n+    assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n }\n \n #[test]"}, {"sha": "ea1e281425c8904b02c1266809e769e289678f54", "filename": "src/libcore/tests/tuple.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibcore%2Ftests%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftuple.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -1,5 +1,4 @@\n use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::f64::NAN;\n \n #[test]\n fn test_clone() {\n@@ -34,12 +33,12 @@ fn test_partial_ord() {\n     assert!(big >= small);\n     assert!(big >= big);\n \n-    assert!(!((1.0f64, 2.0f64) < (NAN, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) <= (NAN, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) > (NAN, 3.0)));\n-    assert!(!((1.0f64, 2.0f64) >= (NAN, 3.0)));\n-    assert!(((1.0f64, 2.0f64) < (2.0, NAN)));\n-    assert!(!((2.0f64, 2.0f64) < (2.0, NAN)));\n+    assert!(!((1.0f64, 2.0f64) < (f64::NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) <= (f64::NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) > (f64::NAN, 3.0)));\n+    assert!(!((1.0f64, 2.0f64) >= (f64::NAN, 3.0)));\n+    assert!(((1.0f64, 2.0f64) < (2.0, f64::NAN)));\n+    assert!(!((2.0f64, 2.0f64) < (2.0, f64::NAN)));\n }\n \n #[test]"}, {"sha": "ca349a7890a580278ab090e2733f92b50233f580", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -1528,7 +1528,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     }\n }\n \n-pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n+pub const CODEGEN_WORKER_ID: usize = usize::MAX;\n \n /// `FatalError` is explicitly not `Send`.\n #[must_use]"}, {"sha": "8bd4ffd0a565ecedbc24bda2ad1d4be876b51353", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -507,7 +507,7 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n-pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n+pub const CODEGEN_WORKER_ID: usize = usize::MAX;\n \n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,"}, {"sha": "3f5738a93a96d8f64e0347efed242e18e186ff45", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -1361,7 +1361,7 @@ impl EmitterWriter {\n                 let mut multilines = FxHashMap::default();\n \n                 // Get the left-side margin to remove it\n-                let mut whitespace_margin = std::usize::MAX;\n+                let mut whitespace_margin = usize::MAX;\n                 for line_idx in 0..annotated_file.lines.len() {\n                     let file = annotated_file.file.clone();\n                     let line = &annotated_file.lines[line_idx];\n@@ -1373,19 +1373,19 @@ impl EmitterWriter {\n                         }\n                     }\n                 }\n-                if whitespace_margin == std::usize::MAX {\n+                if whitespace_margin == usize::MAX {\n                     whitespace_margin = 0;\n                 }\n \n                 // Left-most column any visible span points at.\n-                let mut span_left_margin = std::usize::MAX;\n+                let mut span_left_margin = usize::MAX;\n                 for line in &annotated_file.lines {\n                     for ann in &line.annotations {\n                         span_left_margin = min(span_left_margin, ann.start_col);\n                         span_left_margin = min(span_left_margin, ann.end_col);\n                     }\n                 }\n-                if span_left_margin == std::usize::MAX {\n+                if span_left_margin == usize::MAX {\n                     span_left_margin = 0;\n                 }\n \n@@ -1421,7 +1421,7 @@ impl EmitterWriter {\n                 } else {\n                     termize::dimensions()\n                         .map(|(w, _)| w.saturating_sub(code_offset))\n-                        .unwrap_or(std::usize::MAX)\n+                        .unwrap_or(usize::MAX)\n                 };\n \n                 let margin = Margin::new("}, {"sha": "46c38840516e2bc133ad393d7ed9f0d108bc25be", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -307,7 +307,7 @@ impl<'a, T: Idx> BitIter<'a, T> {\n         // additional state about whether we have started.\n         BitIter {\n             word: 0,\n-            offset: std::usize::MAX - (WORD_BITS - 1),\n+            offset: usize::MAX - (WORD_BITS - 1),\n             iter: words.iter(),\n             marker: PhantomData,\n         }"}, {"sha": "3cb250891ef934de3f86473ee2be89fc84e45680", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -612,7 +612,7 @@ fn receiver_is_dispatchable<'tcx>(\n     // FIXME(mikeyhew) this is a total hack. Once object_safe_for_dispatch is stabilized, we can\n     // replace this with `dyn Trait`\n     let unsized_self_ty: Ty<'tcx> =\n-        tcx.mk_ty_param(::std::u32::MAX, Symbol::intern(\"RustaceansAreAwesome\"));\n+        tcx.mk_ty_param(u32::MAX, Symbol::intern(\"RustaceansAreAwesome\"));\n \n     // `Receiver[Self => U]`\n     let unsized_receiver_ty ="}, {"sha": "56e4ac5c72a49df2f5f554c502f5aa6629a852cf", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -3650,11 +3650,7 @@ struct ProvisionalEvaluation {\n \n impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {\n     fn default() -> Self {\n-        Self {\n-            dfn: Cell::new(0),\n-            reached_depth: Cell::new(std::usize::MAX),\n-            map: Default::default(),\n-        }\n+        Self { dfn: Cell::new(0), reached_depth: Cell::new(usize::MAX), map: Default::default() }\n     }\n }\n \n@@ -3753,7 +3749,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n             op(fresh_trait_ref, eval.result);\n         }\n \n-        self.reached_depth.set(std::usize::MAX);\n+        self.reached_depth.set(usize::MAX);\n     }\n }\n "}, {"sha": "c5e9a288c9ce89994a7ebea3211cd587f5451736", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -2620,13 +2620,13 @@ fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n         _ => None,\n     };\n     if let Some(Lit { kind: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) = sole_meta_list {\n-        if *ordinal <= std::usize::MAX as u128 {\n+        if *ordinal <= usize::MAX as u128 {\n             Some(*ordinal as usize)\n         } else {\n             let msg = format!(\"ordinal value in `link_ordinal` is too large: `{}`\", &ordinal);\n             tcx.sess\n                 .struct_span_err(attr.span, &msg)\n-                .note(\"the value may not exceed `std::usize::MAX`\")\n+                .note(\"the value may not exceed `usize::MAX`\")\n                 .emit();\n             None\n         }"}, {"sha": "cacc28b6e60e4e9e50b3a029365c721fdfc87860", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -198,7 +198,7 @@ use std::num::FpCategory as Fp;\n use std::ops::Index;\n use std::str::FromStr;\n use std::string;\n-use std::{char, f64, fmt, str};\n+use std::{char, fmt, str};\n \n use crate::Encodable;\n "}, {"sha": "a6ec1580aca36a5d13605c538ea76609724c0c17", "filename": "src/libserialize/tests/opaque.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibserialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibserialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fopaque.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -53,63 +53,63 @@ fn test_unit() {\n #[test]\n fn test_u8() {\n     let mut vec = vec![];\n-    for i in ::std::u8::MIN..::std::u8::MAX {\n+    for i in u8::MIN..u8::MAX {\n         vec.push(i);\n     }\n     check_round_trip(vec);\n }\n \n #[test]\n fn test_u16() {\n-    for i in ::std::u16::MIN..::std::u16::MAX {\n+    for i in u16::MIN..u16::MAX {\n         check_round_trip(vec![1, 2, 3, i, i, i]);\n     }\n }\n \n #[test]\n fn test_u32() {\n-    check_round_trip(vec![1, 2, 3, ::std::u32::MIN, 0, 1, ::std::u32::MAX, 2, 1]);\n+    check_round_trip(vec![1, 2, 3, u32::MIN, 0, 1, u32::MAX, 2, 1]);\n }\n \n #[test]\n fn test_u64() {\n-    check_round_trip(vec![1, 2, 3, ::std::u64::MIN, 0, 1, ::std::u64::MAX, 2, 1]);\n+    check_round_trip(vec![1, 2, 3, u64::MIN, 0, 1, u64::MAX, 2, 1]);\n }\n \n #[test]\n fn test_usize() {\n-    check_round_trip(vec![1, 2, 3, ::std::usize::MIN, 0, 1, ::std::usize::MAX, 2, 1]);\n+    check_round_trip(vec![1, 2, 3, usize::MIN, 0, 1, usize::MAX, 2, 1]);\n }\n \n #[test]\n fn test_i8() {\n     let mut vec = vec![];\n-    for i in ::std::i8::MIN..::std::i8::MAX {\n+    for i in i8::MIN..i8::MAX {\n         vec.push(i);\n     }\n     check_round_trip(vec);\n }\n \n #[test]\n fn test_i16() {\n-    for i in ::std::i16::MIN..::std::i16::MAX {\n+    for i in i16::MIN..i16::MAX {\n         check_round_trip(vec![-1, 2, -3, i, i, i, 2]);\n     }\n }\n \n #[test]\n fn test_i32() {\n-    check_round_trip(vec![-1, 2, -3, ::std::i32::MIN, 0, 1, ::std::i32::MAX, 2, 1]);\n+    check_round_trip(vec![-1, 2, -3, i32::MIN, 0, 1, i32::MAX, 2, 1]);\n }\n \n #[test]\n fn test_i64() {\n-    check_round_trip(vec![-1, 2, -3, ::std::i64::MIN, 0, 1, ::std::i64::MAX, 2, 1]);\n+    check_round_trip(vec![-1, 2, -3, i64::MIN, 0, 1, i64::MAX, 2, 1]);\n }\n \n #[test]\n fn test_isize() {\n-    check_round_trip(vec![-1, 2, -3, ::std::isize::MIN, 0, 1, ::std::isize::MAX, 2, 1]);\n+    check_round_trip(vec![-1, 2, -3, isize::MIN, 0, 1, isize::MAX, 2, 1]);\n }\n \n #[test]"}, {"sha": "d1cb8e92d5688a9af19c95dba6aa14775a675355", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -2617,7 +2617,6 @@ mod test_map {\n     use crate::cell::RefCell;\n     use rand::{thread_rng, Rng};\n     use realstd::collections::TryReserveError::*;\n-    use realstd::usize;\n \n     // https://github.com/rust-lang/rust/issues/62301\n     fn _assert_hashmap_is_unwind_safe() {"}, {"sha": "3a6e8401bf1abe17641255857394246634f57554", "filename": "src/libtest/stats/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibtest%2Fstats%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Flibtest%2Fstats%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats%2Ftests.rs?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -2,7 +2,6 @@ use super::*;\n \n extern crate test;\n use self::test::test::Bencher;\n-use std::f64;\n use std::io;\n use std::io::prelude::*;\n "}, {"sha": "b9b877aa0566c8c8404da64323d95d645c9377c1", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89d661f15d8249f8e808b75b1129ce28e0889ba0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=89d661f15d8249f8e808b75b1129ce28e0889ba0", "patch": "@@ -12,7 +12,7 @@ error: ordinal value in `link_ordinal` is too large: `18446744073709551616`\n LL |     #[link_ordinal(18446744073709551616)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the value may not exceed `std::usize::MAX`\n+   = note: the value may not exceed `usize::MAX`\n \n error: aborting due to previous error\n "}]}