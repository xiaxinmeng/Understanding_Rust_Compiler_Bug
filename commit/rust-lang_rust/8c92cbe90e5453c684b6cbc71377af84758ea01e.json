{"sha": "8c92cbe90e5453c684b6cbc71377af84758ea01e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTJjYmU5MGU1NDUzYzY4NGI2Y2JjNzEzNzdhZjg0NzU4ZWEwMWU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-31T18:35:03Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-02T08:54:28Z"}, "message": "Moved let-chain warning/error to ast_validation and changed to unconditional error.", "tree": {"sha": "57525ff272b970b5b7308f0f8f5ed0f2b7cd1c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57525ff272b970b5b7308f0f8f5ed0f2b7cd1c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c92cbe90e5453c684b6cbc71377af84758ea01e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluLpUQACgkQAXYLT59T\n8VQXWg/9E/R6TMgyvrs1t/8+445gvEqKAZIvxUSX8Z4GH9/IeYLAcOgRxCFJlx6F\noOxUPdaKmH1Z8fLxokla0lQYj6BpGIKGhZw5BhH7SEijTTpv3yUHxKca9/g0cw2P\njehXG4ScJYq8ut+aUk+gteQjJFq6sW73UqUoqW9l3QrPtV7FCDgPYz9nmURlFiii\nWRRu0l+Zuhs9Oc38CpyXMjIFQjPmEPgE6X3iJ41E0RF4eGrpow1ROY8bU3Pg/J5D\nMsV87j3a1NHLHvkc17zAu4iPFujdmOCm8+EID5zYXnyO4gBVOpj8lUB5UfqFa48a\nULOOjioLFXo4LqT117a+I9SjOeM8AnetPHs+YMEZFfQjbc75aiHeP6xmgvGLBU/r\nlEtKofDVDiHn8wRhR6rtkYZD3gu4PxQUxv1RWiR3Ry1Ifk8DjGhFETJACftJa/Pk\nkAqBGRrJciGZ+Yn6a7H9BB1mwdSFwXVdrvyf3qd/si3h21vNvMaSj1jmVxNK6gUb\n6jXibrTPv7Rg1pFQAlTpU4ezhjc2kutHlQdr+KT4v6Hsgjzt+rCO19jEESkZ8J9j\nn7JU+edh+G6GPWnu03i5MKma/oNfv6im7C0pgATzjQIkm0/SESgdrEC482RrTkea\nEF92Kpv7B+aQHkJmbHMPs7BbdGL0YrpSJfMCCyyKn+UH2ohIXv8=\n=+/Jz\n-----END PGP SIGNATURE-----", "payload": "tree 57525ff272b970b5b7308f0f8f5ed0f2b7cd1c74\nparent 2ce56c5ebf4b63c274da678c367a4d85a13994a8\nauthor David Wood <david@davidtw.co> 1535740503 +0200\ncommitter David Wood <david@davidtw.co> 1535878468 +0200\n\nMoved let-chain warning/error to ast_validation and changed to unconditional error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c92cbe90e5453c684b6cbc71377af84758ea01e", "html_url": "https://github.com/rust-lang/rust/commit/8c92cbe90e5453c684b6cbc71377af84758ea01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c92cbe90e5453c684b6cbc71377af84758ea01e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce56c5ebf4b63c274da678c367a4d85a13994a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce56c5ebf4b63c274da678c367a4d85a13994a8", "html_url": "https://github.com/rust-lang/rust/commit/2ce56c5ebf4b63c274da678c367a4d85a13994a8"}], "stats": {"total": 188, "additions": 92, "deletions": 96}, "files": [{"sha": "3981d9f0c6453af87050dbce9659234b64de70de", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=8c92cbe90e5453c684b6cbc71377af84758ea01e", "patch": "@@ -22,6 +22,7 @@ use syntax::ast::*;\n use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::keywords;\n+use syntax::ptr::P;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n use errors;\n@@ -167,11 +168,58 @@ impl<'a> AstValidator<'a> {\n                 \"only lifetime parameters can be used in this context\");\n         }\n     }\n+\n+    /// With eRFC 2497, we need to check whether an expression is ambigious and warn or error\n+    /// depending on the edition, this function handles that.\n+    fn while_if_let_ambiguity(&self, expr: &P<Expr>) {\n+        if let Some((span, op_kind)) = self.while_if_let_expr_ambiguity(&expr) {\n+            let mut err = self.err_handler().struct_span_err(\n+                span, &format!(\"ambigious use of `{}`\", op_kind.to_string())\n+            );\n+\n+            err.note(\n+                \"this will be a error until the `let_chains` feature is stabilized\"\n+            );\n+\n+            if let Ok(snippet) = self.session.source_map().span_to_snippet(span) {\n+                err.span_suggestion(\n+                    span, \"consider adding parentheses\", format!(\"({})\", snippet),\n+                );\n+            }\n+\n+            err.emit();\n+        }\n+    }\n+\n+    /// With eRFC 2497 adding if-let chains, there is a requirement that the parsing of\n+    /// `&&` and `||` in a if-let statement be unambigious. This function returns a span and\n+    /// a `BinOpKind` (either `&&` or `||` depending on what was ambigious) if it is determined\n+    /// that the current expression parsed is ambigious and will break in future.\n+    fn while_if_let_expr_ambiguity(&self, expr: &P<Expr>) -> Option<(Span, BinOpKind)> {\n+        debug!(\"while_if_let_expr_ambiguity: expr.node: {:?}\", expr.node);\n+        match &expr.node {\n+            ExprKind::Binary(op, _, _) if op.node == BinOpKind::And || op.node == BinOpKind::Or => {\n+                Some((expr.span, op.node))\n+            },\n+            ExprKind::Range(ref lhs, ref rhs, _) => {\n+                let lhs_ambigious = lhs.as_ref()\n+                    .and_then(|lhs| self.while_if_let_expr_ambiguity(lhs));\n+                let rhs_ambigious = rhs.as_ref()\n+                    .and_then(|rhs| self.while_if_let_expr_ambiguity(rhs));\n+\n+                lhs_ambigious.or(rhs_ambigious)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match expr.node {\n+            ExprKind::IfLet(_, ref expr, _, _) | ExprKind::WhileLet(_, ref expr, _, _) =>\n+                self.while_if_let_ambiguity(&expr),\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 span_err!(self.session, expr.span, E0472, \"asm! is unsupported on this target\");\n             }"}, {"sha": "1695d3a8f96b033cb41cbc8ecb70230766356131", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8c92cbe90e5453c684b6cbc71377af84758ea01e", "patch": "@@ -3327,8 +3327,6 @@ impl<'a> Parser<'a> {\n         let pats = self.parse_pats()?;\n         self.expect(&token::Eq)?;\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-        self.while_if_let_ambiguity(&expr);\n-\n         let thn = self.parse_block()?;\n         let (hi, els) = if self.eat_keyword(keywords::Else) {\n             let expr = self.parse_else_expr()?;\n@@ -3339,56 +3337,6 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(hi), ExprKind::IfLet(pats, expr, thn, els), attrs))\n     }\n \n-    /// With eRFC 2497, we need to check whether an expression is ambigious and warn or error\n-    /// depending on the edition, this function handles that.\n-    fn while_if_let_ambiguity(&self, expr: &P<Expr>) {\n-        if let Some((span, op_kind)) = self.while_if_let_expr_ambiguity(&expr) {\n-            let message = format!(\"ambigious use of `{}`\", op_kind.to_string());\n-            let mut err = if self.span.edition() >= Edition::Edition2018 {\n-                self.diagnostic().struct_span_err(span, &message)\n-            } else {\n-                self.diagnostic().struct_span_warn(span, &message)\n-            };\n-\n-            let note = if self.span.edition() >= Edition::Edition2018 {\n-                \"This will be a error until the `let_chains` feature is stabilized.\"\n-            } else {\n-                \"This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\"\n-            };\n-            err.note(note);\n-\n-            if let Ok(snippet) = self.sess.source_map().span_to_snippet(span) {\n-                err.span_suggestion(\n-                    span, \"consider adding parenthesis\", format!(\"({})\", snippet),\n-                );\n-            }\n-\n-            err.emit();\n-        }\n-    }\n-\n-    /// With eRFC 2497 adding if-let chains, there is a requirement that the parsing of\n-    /// `&&` and `||` in a if-let statement be unambigious. This function returns a span and\n-    /// a `BinOpKind` (either `&&` or `||` depending on what was ambigious) if it is determined\n-    /// that the current expression parsed is ambigious and will break in future.\n-    fn while_if_let_expr_ambiguity(&self, expr: &P<Expr>) -> Option<(Span, BinOpKind)> {\n-        debug!(\"while_if_let_expr_ambiguity: expr.node: {:?}\", expr.node);\n-        match &expr.node {\n-            ExprKind::Binary(op, _, _) if op.node == BinOpKind::And || op.node == BinOpKind::Or => {\n-                Some((expr.span, op.node))\n-            },\n-            ExprKind::Range(ref lhs, ref rhs, _) => {\n-                let lhs_ambigious = lhs.as_ref()\n-                    .and_then(|lhs| self.while_if_let_expr_ambiguity(lhs));\n-                let rhs_ambigious = rhs.as_ref()\n-                    .and_then(|rhs| self.while_if_let_expr_ambiguity(rhs));\n-\n-                lhs_ambigious.or(rhs_ambigious)\n-            }\n-            _ => None,\n-        }\n-    }\n-\n     // `move |args| expr`\n     fn parse_lambda_expr(&mut self,\n                              attrs: ThinVec<Attribute>)\n@@ -3489,7 +3437,6 @@ impl<'a> Parser<'a> {\n         let pats = self.parse_pats()?;\n         self.expect(&token::Eq)?;\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-        self.while_if_let_ambiguity(&expr);\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let span = span_lo.to(body.span);"}, {"sha": "339d49104b021f266c3cebce5e4b4d4b4b35d42d", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.rs?ref=8c92cbe90e5453c684b6cbc71377af84758ea01e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // edition:2015\n-// compile-pass\n \n // Enabling `ireffutable_let_patterns` isn't necessary for what this tests, but it makes coming up\n // with examples easier.\n@@ -20,22 +19,22 @@ fn main() {\n     use std::ops::Range;\n \n     if let Range { start: _, end: _ } = true..true && false { }\n-    //~^ WARN error in 2018\n+    //~^ ERROR ambigious use of `&&`\n \n     if let Range { start: _, end: _ } = true..true || false { }\n-    //~^ WARN error in 2018\n+    //~^ ERROR ambigious use of `||`\n \n     while let Range { start: _, end: _ } = true..true && false { }\n-    //~^ WARN error in 2018\n+    //~^ ERROR ambigious use of `&&`\n \n     while let Range { start: _, end: _ } = true..true || false { }\n-    //~^ WARN error in 2018\n+    //~^ ERROR ambigious use of `||`\n \n     if let true = false && false { }\n-    //~^ WARN error in 2018\n+    //~^ ERROR ambigious use of `&&`\n \n     while let true = (1 == 2) && false { }\n-    //~^ WARN error in 2018\n+    //~^ ERROR ambigious use of `&&`\n \n     // The following cases are not an error as parenthesis are used to\n     // clarify intent:"}, {"sha": "0e6ccb5d9d8a7d92f27a8db5a3170d17937a7417", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2015.stderr", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2015.stderr?ref=8c92cbe90e5453c684b6cbc71377af84758ea01e", "patch": "@@ -1,48 +1,50 @@\n-warning: ambigious use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:22:47\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:21:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n-   |                                               ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true && false)`\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n    |\n-   = note: This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n-warning: ambigious use of `||`\n-  --> $DIR/syntax-ambiguity-2015.rs:25:47\n+error: ambigious use of `||`\n+  --> $DIR/syntax-ambiguity-2015.rs:24:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n-   |                                               ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true || false)`\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n    |\n-   = note: This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n-warning: ambigious use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:28:50\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:27:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n-   |                                                  ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true && false)`\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n    |\n-   = note: This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n-warning: ambigious use of `||`\n-  --> $DIR/syntax-ambiguity-2015.rs:31:50\n+error: ambigious use of `||`\n+  --> $DIR/syntax-ambiguity-2015.rs:30:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n-   |                                                  ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true || false)`\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n    |\n-   = note: This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n-warning: ambigious use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:34:19\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:33:19\n    |\n LL |     if let true = false && false { }\n-   |                   ^^^^^^^^^^^^^^ help: consider adding parenthesis: `(false && false)`\n+   |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n    |\n-   = note: This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n-warning: ambigious use of `&&`\n-  --> $DIR/syntax-ambiguity-2015.rs:37:22\n+error: ambigious use of `&&`\n+  --> $DIR/syntax-ambiguity-2015.rs:36:22\n    |\n LL |     while let true = (1 == 2) && false { }\n-   |                      ^^^^^^^^^^^^^^^^^ help: consider adding parenthesis: `((1 == 2) && false)`\n+   |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`\n    |\n-   = note: This will be a error in Rust 2018 until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "2bbeda360d7553d1eb754f800f40672aad79c41e", "filename": "src/test/ui/rfc-2497-if-let-chains/syntax-ambiguity-2018.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c92cbe90e5453c684b6cbc71377af84758ea01e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fsyntax-ambiguity-2018.stderr?ref=8c92cbe90e5453c684b6cbc71377af84758ea01e", "patch": "@@ -2,49 +2,49 @@ error: ambigious use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:21:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false { }\n-   |                                               ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true && false)`\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n    |\n-   = note: This will be a error until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n error: ambigious use of `||`\n   --> $DIR/syntax-ambiguity-2018.rs:24:47\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false { }\n-   |                                               ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true || false)`\n+   |                                               ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n    |\n-   = note: This will be a error until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n error: ambigious use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:27:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false { }\n-   |                                                  ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true && false)`\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true && false)`\n    |\n-   = note: This will be a error until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n error: ambigious use of `||`\n   --> $DIR/syntax-ambiguity-2018.rs:30:50\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false { }\n-   |                                                  ^^^^^^^^^^^^^ help: consider adding parenthesis: `(true || false)`\n+   |                                                  ^^^^^^^^^^^^^ help: consider adding parentheses: `(true || false)`\n    |\n-   = note: This will be a error until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n error: ambigious use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:33:19\n    |\n LL |     if let true = false && false { }\n-   |                   ^^^^^^^^^^^^^^ help: consider adding parenthesis: `(false && false)`\n+   |                   ^^^^^^^^^^^^^^ help: consider adding parentheses: `(false && false)`\n    |\n-   = note: This will be a error until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n error: ambigious use of `&&`\n   --> $DIR/syntax-ambiguity-2018.rs:36:22\n    |\n LL |     while let true = (1 == 2) && false { }\n-   |                      ^^^^^^^^^^^^^^^^^ help: consider adding parenthesis: `((1 == 2) && false)`\n+   |                      ^^^^^^^^^^^^^^^^^ help: consider adding parentheses: `((1 == 2) && false)`\n    |\n-   = note: This will be a error until the `let_chains` feature is stabilized.\n+   = note: this will be a error until the `let_chains` feature is stabilized\n \n error: aborting due to 6 previous errors\n "}]}