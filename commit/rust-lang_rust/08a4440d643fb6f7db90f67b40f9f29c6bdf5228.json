{"sha": "08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTQ0NDBkNjQzZmI2ZjdkYjkwZjY3YjQwZjlmMjljNmJkZjUyMjg=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T17:05:49Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T17:05:49Z"}, "message": "Fix a bunch of deprecated str/vec errors in code for non 64-bit linux platforms...", "tree": {"sha": "e7cb3825a405d5a89f22b6473a006331021900bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7cb3825a405d5a89f22b6473a006331021900bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "html_url": "https://github.com/rust-lang/rust/commit/08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7d139a3849f7f40df793ddab3186ec741edf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7d139a3849f7f40df793ddab3186ec741edf7f", "html_url": "https://github.com/rust-lang/rust/commit/5a7d139a3849f7f40df793ddab3186ec741edf7f"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "9232782924785c7e6cf96b41a316fbb50980637c", "filename": "src/libcore/os.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "patch": "@@ -84,7 +84,7 @@ mod win32 {\n     import dword = libc::types::os::arch::extra::DWORD;\n \n     fn fill_utf16_buf_and_decode(f: fn(*mut u16, dword) -> dword)\n-        -> option<str> {\n+        -> option<~str> {\n \n         // FIXME: remove these when export globs work properly. #1238\n         import libc::funcs::extra::kernel32::*;\n@@ -105,15 +105,15 @@ mod win32 {\n                     n *= (2 as dword);\n                 } else {\n                     let sub = vec::slice(buf, 0u, k as uint);\n-                    res = option::some::<str>(str::from_utf16(sub));\n+                    res = option::some(str::from_utf16(sub));\n                     done = true;\n                 }\n             }\n         }\n         ret res;\n     }\n \n-    fn as_utf16_p<T>(s: str, f: fn(*u16) -> T) -> T {\n+    fn as_utf16_p<T>(s: ~str, f: fn(*u16) -> T) -> T {\n         let mut t = str::to_utf16(s);\n         // Null terminate before passing on.\n         t += ~[0u16];\n@@ -212,7 +212,7 @@ mod global_env {\n         }\n \n         #[cfg(windows)]\n-        fn getenv(n: str) -> option<str> {\n+        fn getenv(n: ~str) -> option<~str> {\n             import libc::types::os::arch::extra::*;\n             import libc::funcs::extra::kernel32::*;\n             import win32::*;\n@@ -238,7 +238,7 @@ mod global_env {\n \n \n         #[cfg(windows)]\n-        fn setenv(n: str, v: str) {\n+        fn setenv(n: ~str, v: ~str) {\n             // FIXME: remove imports when export globs work properly. #1238\n             import libc::funcs::extra::kernel32::*;\n             import win32::*;\n@@ -355,7 +355,7 @@ fn dll_filename(base: ~str) -> ~str {\n     fn pre() -> ~str { ~\"lib\" }\n \n     #[cfg(windows)]\n-    fn pre() -> str { \"\" }\n+    fn pre() -> ~str { ~\"\" }\n }\n \n \n@@ -448,7 +448,7 @@ fn homedir() -> option<path> {\n \n     #[cfg(windows)]\n     fn secondary() -> option<path> {\n-        do option::chain(getenv(\"USERPROFILE\")) |p| {\n+        do option::chain(getenv(~\"USERPROFILE\")) |p| {\n             if !str::is_empty(p) {\n                 some(p)\n             } else {\n@@ -554,13 +554,13 @@ fn list_dir(p: path) -> ~[~str] {\n     fn star(p: ~str) -> ~str { p }\n \n     #[cfg(windows)]\n-    fn star(p: str) -> str {\n+    fn star(p: str) -> ~str {\n         let pl = str::len(p);\n         if pl == 0u || (p[pl - 1u] as char != path::consts::path_sep\n                         || p[pl - 1u] as char != path::consts::alt_path_sep) {\n-            p + path::path_sep() + \"*\"\n+            p + path::path_sep() + ~\"*\"\n         } else {\n-            p + \"*\"\n+            p + ~\"*\"\n         }\n     }\n \n@@ -737,20 +737,20 @@ fn set_exit_status(code: int) {\n fn family() -> ~str { ~\"unix\" }\n \n #[cfg(windows)]\n-fn family() -> str { \"windows\" }\n+fn family() -> ~str { ~\"windows\" }\n \n #[cfg(target_os = \"macos\")]\n mod consts {\n-    fn sysname() -> str { \"macos\" }\n-    fn exe_suffix() -> str { \"\" }\n-    fn dll_suffix() -> str { \".dylib\" }\n+    fn sysname() -> ~str { ~\"macos\" }\n+    fn exe_suffix() -> ~str { ~\"\" }\n+    fn dll_suffix() -> ~str { ~\".dylib\" }\n }\n \n #[cfg(target_os = \"freebsd\")]\n mod consts {\n-    fn sysname() -> str { \"freebsd\" }\n-    fn exe_suffix() -> str { \"\" }\n-    fn dll_suffix() -> str { \".so\" }\n+    fn sysname() -> ~str { ~\"freebsd\" }\n+    fn exe_suffix() -> ~str { ~\"\" }\n+    fn dll_suffix() -> ~str { ~\".so\" }\n }\n \n #[cfg(target_os = \"linux\")]\n@@ -762,19 +762,19 @@ mod consts {\n \n #[cfg(target_os = \"win32\")]\n mod consts {\n-    fn sysname() -> str { \"win32\" }\n-    fn exe_suffix() -> str { \".exe\" }\n-    fn dll_suffix() -> str { \".dll\" }\n+    fn sysname() -> ~str { ~\"win32\" }\n+    fn exe_suffix() -> ~str { ~\".exe\" }\n+    fn dll_suffix() -> ~str { ~\".dll\" }\n }\n \n #[cfg(target_arch = \"x86\")]\n-fn arch() -> str { \"x86\" }\n+fn arch() -> ~str { ~\"x86\" }\n \n #[cfg(target_arch = \"x86_64\")]\n fn arch() -> ~str { ~\"x86_64\" }\n \n #[cfg(target_arch = \"arm\")]\n-fn arch() -> str { \"arm\" }\n+fn arch() -> str { ~\"arm\" }\n \n #[cfg(test)]\n mod tests {"}, {"sha": "07549acd5bc05a0488b280ee43c51850022357d0", "filename": "src/libcore/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "patch": "@@ -50,7 +50,7 @@ fn path_is_absolute(p: path) -> bool {\n }\n \n #[cfg(windows)]\n-fn path_is_absolute(p: str) -> bool {\n+fn path_is_absolute(p: ~str) -> bool {\n     ret str::char_at(p, 0u) == '/' ||\n         str::char_at(p, 1u) == ':'\n         && (str::char_at(p, 2u) == consts::path_sep"}, {"sha": "a466971b9bdf200ac5c5aa9f2563b0feb92c83a8", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "patch": "@@ -118,7 +118,7 @@ fn with_envp<T>(env: option<~[(~str,~str)]>,\n }\n \n #[cfg(windows)]\n-fn with_envp<T>(env: option<~[(str,str)]>,\n+fn with_envp<T>(env: option<~[(~str,~str)]>,\n                 cb: fn(*c_void) -> T) -> T {\n     // On win32 we pass an \"environment block\" which is not a char**, but\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final"}, {"sha": "066b4cc57e65fc32d244e41b919ae23437eb062d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a4440d643fb6f7db90f67b40f9f29c6bdf5228/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=08a4440d643fb6f7db90f67b40f9f29c6bdf5228", "patch": "@@ -5027,7 +5027,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n \n     fn create_entry_fn(ccx: @crate_ctxt, rust_main: ValueRef) {\n         #[cfg(windows)]\n-        fn main_name() -> str { ret \"WinMain@16\"; }\n+        fn main_name() -> ~str { ret ~\"WinMain@16\"; }\n         #[cfg(unix)]\n         fn main_name() -> ~str { ret ~\"main\"; }\n         let llfty = T_fn(~[ccx.int_type, ccx.int_type], ccx.int_type);"}]}