{"sha": "3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjNiZDg3Mjk0OWNlNGJhNDVlMTNkYmNkMzBkNmI5ODk2M2QwZWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-26T01:27:45Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-26T01:27:55Z"}, "message": "Demode dvec", "tree": {"sha": "ce41435fb14227e5baadb6cb8d0a9f738077ea12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce41435fb14227e5baadb6cb8d0a9f738077ea12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "html_url": "https://github.com/rust-lang/rust/commit/3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab6318803e1764e6e894441c2829f9b47acbf298", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6318803e1764e6e894441c2829f9b47acbf298", "html_url": "https://github.com/rust-lang/rust/commit/ab6318803e1764e6e894441c2829f9b47acbf298"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "08ce967e0258549b1505ab9c43dcc158612f0435", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -118,7 +118,7 @@ fn concat<T>(lists: DList<DList<T>>) -> DList<T> {\n }\n \n priv impl<T> DList<T> {\n-    pure fn new_link(-data: T) -> DListLink<T> {\n+    pure fn new_link(+data: T) -> DListLink<T> {\n         Some(DListNode(@{data: move data, mut linked: true,\n                           mut prev: None, mut next: None}))\n     }"}, {"sha": "008d7841bec2fe326b66589626377c262ddbe92c", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -93,7 +93,7 @@ priv impl<A> DVec<A> {\n     }\n \n     #[inline(always)]\n-    fn check_out<B>(f: fn(-v: ~[A]) -> B) -> B {\n+    fn check_out<B>(f: &fn(+v: ~[A]) -> B) -> B {\n         unsafe {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n@@ -126,7 +126,7 @@ impl<A> DVec<A> {\n      * and return a new vector to replace it with.\n      */\n     #[inline(always)]\n-    fn swap(f: fn(-v: ~[A]) -> ~[A]) {\n+    fn swap(f: &fn(+v: ~[A]) -> ~[A]) {\n         self.check_out(|v| self.give_back(f(move v)))\n     }\n \n@@ -136,7 +136,7 @@ impl<A> DVec<A> {\n      * and return a new vector to replace it with.\n      */\n     #[inline(always)]\n-    fn swap_mut(f: fn(-v: ~[mut A]) -> ~[mut A]) {\n+    fn swap_mut(f: &fn(-v: ~[mut A]) -> ~[mut A]) {\n         do self.swap |v| {\n             vec::from_mut(f(vec::to_mut(move v)))\n         }\n@@ -170,7 +170,7 @@ impl<A> DVec<A> {\n     }\n \n     /// Insert a single item at the front of the list\n-    fn unshift(-t: A) {\n+    fn unshift(+t: A) {\n         unsafe {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n@@ -301,7 +301,7 @@ impl<A: Copy> DVec<A> {\n     }\n \n     /// Overwrites the contents of the element at `idx` with `a`\n-    fn set_elt(idx: uint, a: A) {\n+    fn set_elt(idx: uint, +a: A) {\n         self.check_not_borrowed();\n         self.data[idx] = a;\n     }\n@@ -311,7 +311,7 @@ impl<A: Copy> DVec<A> {\n      * growing the vector if necessary.  New elements will be initialized\n      * with `initval`\n      */\n-    fn grow_set_elt(idx: uint, initval: A, val: A) {\n+    fn grow_set_elt(idx: uint, initval: A, +val: A) {\n         do self.swap |v| {\n             let mut v = move v;\n             vec::grow_set(v, idx, initval, val);\n@@ -325,11 +325,11 @@ impl<A: Copy> DVec<A> {\n         self.check_not_borrowed();\n \n         let length = self.len();\n-        if length == 0u {\n+        if length == 0 {\n             fail ~\"attempt to retrieve the last element of an empty vector\";\n         }\n \n-        return self.data[length - 1u];\n+        return self.data[length - 1];\n     }\n \n     /// Iterates over the elements in reverse order\n@@ -360,7 +360,7 @@ impl<A: Copy> DVec<A> {\n }\n \n impl<A:Copy> DVec<A>: Index<uint,A> {\n-    pure fn index(&&idx: uint) -> A {\n+    pure fn index(+idx: uint) -> A {\n         self.get_elt(idx)\n     }\n }"}, {"sha": "700050207629bc145744bfecb5f680cbc59dafeb", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -77,6 +77,6 @@ trait Shr<RHS,Result> {\n \n #[lang=\"index\"]\n trait Index<Index,Result> {\n-    pure fn index(index: Index) -> Result;\n+    pure fn index(+index: Index) -> Result;\n }\n "}, {"sha": "0ff0c0b645734d2541c20230ce0f567f211f772c", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -556,7 +556,7 @@ pure fn land(w0: uint, w1: uint) -> uint { return w0 & w1; }\n pure fn right(_w0: uint, w1: uint) -> uint { return w1; }\n \n impl Bitv: ops::Index<uint,bool> {\n-    pure fn index(&&i: uint) -> bool {\n+    pure fn index(+i: uint) -> bool {\n         self.get(i)\n     }\n }"}, {"sha": "9b7f7a79f2280b029174a9b7206b0c12671cc96d", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -42,7 +42,7 @@ type Doc = {data: @~[u8], start: uint, end: uint};\n type TaggedDoc = {tag: uint, doc: Doc};\n \n impl Doc: ops::Index<uint,Doc> {\n-    pure fn index(&&tag: uint) -> Doc {\n+    pure fn index(+tag: uint) -> Doc {\n         unsafe {\n             get_doc(self, tag)\n         }"}, {"sha": "06df5a9e8aefa673dbbac834fd5f4fdcde6b450b", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -356,7 +356,7 @@ mod chained {\n     }\n \n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n-        pure fn index(&&k: K) -> V {\n+        pure fn index(+k: K) -> V {\n             unsafe {\n                 self.get(k)\n             }"}, {"sha": "5fc8ead59fda44ed25dd5ee2fe366c0940fe4d00", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -132,7 +132,7 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n }\n \n impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n-    pure fn index(&&key: uint) -> V {\n+    pure fn index(+key: uint) -> V {\n         unsafe {\n             get(self, key)\n         }"}, {"sha": "2215b49937fdadad0555a9d5cb58d613041c910f", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3023bd872949ce4ba45e13dbcd30d6b98963d0ed/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=3023bd872949ce4ba45e13dbcd30d6b98963d0ed", "patch": "@@ -25,7 +25,7 @@ impl Point : ops::Neg<Point> {\n }\n \n impl Point : ops::Index<bool,int> {\n-    pure fn index(&&x: bool) -> int {\n+    pure fn index(+x: bool) -> int {\n         if x { self.x } else { self.y }\n     }\n }"}]}