{"sha": "eada4101a0544fc97dca688810e32856ea9020e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZGE0MTAxYTA1NDRmYzk3ZGNhNjg4ODEwZTMyODU2ZWE5MDIwZTE=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T12:41:52Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T22:55:32Z"}, "message": "Accept `LocalDefId` as key for `mir_validated` query", "tree": {"sha": "dc6091539eeabe110acf6f203f873dcb5ba9abb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6091539eeabe110acf6f203f873dcb5ba9abb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eada4101a0544fc97dca688810e32856ea9020e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eada4101a0544fc97dca688810e32856ea9020e1", "html_url": "https://github.com/rust-lang/rust/commit/eada4101a0544fc97dca688810e32856ea9020e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eada4101a0544fc97dca688810e32856ea9020e1/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e930f72d0a735a6c1dfdde438a458a8624d37be", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e930f72d0a735a6c1dfdde438a458a8624d37be", "html_url": "https://github.com/rust-lang/rust/commit/6e930f72d0a735a6c1dfdde438a458a8624d37be"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "fbacda50b9707d53eb14ad01aad96495ae3b9590", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eada4101a0544fc97dca688810e32856ea9020e1/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada4101a0544fc97dca688810e32856ea9020e1/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=eada4101a0544fc97dca688810e32856ea9020e1", "patch": "@@ -182,12 +182,13 @@ rustc_queries! {\n             no_hash\n         }\n \n-        query mir_validated(_: DefId) ->\n+        query mir_validated(key: LocalDefId) ->\n             (\n                 &'tcx Steal<mir::Body<'tcx>>,\n                 &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n             ) {\n             no_hash\n+            desc { |tcx| \"processing `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n         /// MIR after our optimization passes have run. This is MIR that is ready"}, {"sha": "af5c392aa986e7872c887cce16fb9d60dd87d0b7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eada4101a0544fc97dca688810e32856ea9020e1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada4101a0544fc97dca688810e32856ea9020e1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=eada4101a0544fc97dca688810e32856ea9020e1", "patch": "@@ -93,7 +93,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &BorrowCheckResult<'_> {\n-    let (input_body, promoted) = tcx.mir_validated(def_id.to_def_id());\n+    let (input_body, promoted) = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id.to_def_id()));\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "9f63340065fbff598572d1eb7183be70d4e9ce67", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eada4101a0544fc97dca688810e32856ea9020e1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eada4101a0544fc97dca688810e32856ea9020e1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=eada4101a0544fc97dca688810e32856ea9020e1", "patch": "@@ -240,13 +240,13 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n \n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n ) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n-    let _ = tcx.mir_const_qualif(def_id);\n+    let _ = tcx.mir_const_qualif(def_id.to_def_id());\n \n-    let mut body = tcx.mir_const(def_id).steal();\n+    let mut body = tcx.mir_const(def_id.to_def_id()).steal();\n \n     let mut required_consts = Vec::new();\n     let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n@@ -259,7 +259,7 @@ fn mir_validated(\n     run_passes(\n         tcx,\n         &mut body,\n-        InstanceDef::Item(def_id),\n+        InstanceDef::Item(def_id.to_def_id()),\n         None,\n         MirPhase::Validated,\n         &[&[\n@@ -276,7 +276,7 @@ fn mir_validated(\n fn run_optimization_passes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     promoted: Option<Promoted>,\n ) {\n     let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n@@ -349,7 +349,7 @@ fn run_optimization_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(def_id),\n+        InstanceDef::Item(def_id.to_def_id()),\n         promoted,\n         MirPhase::Optimized,\n         &[\n@@ -369,9 +369,11 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n         return shim::build_adt_ctor(tcx, def_id);\n     }\n \n+    let def_id = def_id.expect_local();\n+\n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id.expect_local());\n+    tcx.ensure().mir_borrowck(def_id);\n \n     let (body, _) = tcx.mir_validated(def_id);\n     let mut body = body.steal();\n@@ -387,7 +389,9 @@ fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, Body<'_>>\n         return tcx.intern_promoted(IndexVec::new());\n     }\n \n-    tcx.ensure().mir_borrowck(def_id.expect_local());\n+    let def_id = def_id.expect_local();\n+\n+    tcx.ensure().mir_borrowck(def_id);\n     let (_, promoted) = tcx.mir_validated(def_id);\n     let mut promoted = promoted.steal();\n "}]}