{"sha": "e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "node_id": "C_kwDOAAsO6NoAKGU5YjBkOTkyNTk4ZDlhNTFmZDdiMWE0YWU4ZjljYmFmYWM1ZTU5M2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-01T14:00:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-01T14:00:08Z"}, "message": "Auto merge of #90463 - matthiaskrgr:rollup-eljk9vo, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89826 (Feature gate + make must_not_suspend allow-by-default)\n - #89929 (Handling submodule update failures more gracefully from x.py)\n - #90333 (rustdoc: remove flicker during page load)\n - #90349 (Fix rare ICE during typeck in rustdoc scrape_examples)\n - #90398 (Document `doc(keyword)` unstable attribute)\n - #90441 (Test that promotion follows references when looking for drop)\n - #90450 (Remove `rustc_hir::hir_id::HirIdVec`)\n - #90452 (Remove unnecessary `Option` from `promote_candidate` return type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8fde3fa57b81a2b5721227fec414ebc6a697df99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fde3fa57b81a2b5721227fec414ebc6a697df99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "html_url": "https://github.com/rust-lang/rust/commit/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db14a17e69af2a2e241ce149a501a5281811fe06", "url": "https://api.github.com/repos/rust-lang/rust/commits/db14a17e69af2a2e241ce149a501a5281811fe06", "html_url": "https://github.com/rust-lang/rust/commit/db14a17e69af2a2e241ce149a501a5281811fe06"}, {"sha": "6ce0ef5e89074cb6c452f9cd19f1211048663a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce0ef5e89074cb6c452f9cd19f1211048663a13", "html_url": "https://github.com/rust-lang/rust/commit/6ce0ef5e89074cb6c452f9cd19f1211048663a13"}], "stats": {"total": 417, "additions": 294, "deletions": 123}, "files": [{"sha": "7bf378601e053317963dcdc036129b94c05be7e3", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -835,11 +835,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         new_temp\n     }\n \n-    fn promote_candidate(\n-        mut self,\n-        candidate: Candidate,\n-        next_promoted_id: usize,\n-    ) -> Option<Body<'tcx>> {\n+    fn promote_candidate(mut self, candidate: Candidate, next_promoted_id: usize) -> Body<'tcx> {\n         let def = self.source.source.with_opt_param();\n         let mut rvalue = {\n             let promoted = &mut self.promoted;\n@@ -938,7 +934,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n         let span = self.promoted.span;\n         self.assign(RETURN_PLACE, rvalue, span);\n-        Some(self.promoted)\n+        self.promoted\n     }\n }\n \n@@ -1011,11 +1007,9 @@ pub fn promote_candidates<'tcx>(\n             keep_original: false,\n         };\n \n-        //FIXME(oli-obk): having a `maybe_push()` method on `IndexVec` might be nice\n-        if let Some(mut promoted) = promoter.promote_candidate(candidate, promotions.len()) {\n-            promoted.source.promoted = Some(promotions.next_index());\n-            promotions.push(promoted);\n-        }\n+        let mut promoted = promoter.promote_candidate(candidate, promotions.len());\n+        promoted.source.promoted = Some(promotions.next_index());\n+        promotions.push(promoted);\n     }\n \n     // Insert each of `extra_statements` before its indicated location, which"}, {"sha": "39552eb9f3102afa193135fcad0722cfd7a5dfe9", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,5 +1,4 @@\n use crate::def_id::{LocalDefId, CRATE_DEF_INDEX};\n-use rustc_index::vec::IndexVec;\n use std::fmt;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n@@ -66,70 +65,3 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n     local_id: ItemLocalId::from_u32(0),\n };\n-\n-/// N.B. This collection is currently unused, but will be used by #72015 and future PRs.\n-#[derive(Clone, Default, Debug, Encodable, Decodable)]\n-pub struct HirIdVec<T> {\n-    map: IndexVec<LocalDefId, IndexVec<ItemLocalId, T>>,\n-}\n-\n-impl<T> HirIdVec<T> {\n-    pub fn push_owner(&mut self, id: LocalDefId) {\n-        self.map.ensure_contains_elem(id, IndexVec::new);\n-    }\n-\n-    pub fn push(&mut self, id: HirId, value: T) {\n-        if id.local_id == ItemLocalId::from_u32(0) {\n-            self.push_owner(id.owner);\n-        }\n-        let submap = &mut self.map[id.owner];\n-        let _ret_id = submap.push(value);\n-        debug_assert_eq!(_ret_id, id.local_id);\n-    }\n-\n-    pub fn push_sparse(&mut self, id: HirId, value: T)\n-    where\n-        T: Default,\n-    {\n-        self.map.ensure_contains_elem(id.owner, IndexVec::new);\n-        let submap = &mut self.map[id.owner];\n-        let i = id.local_id.index();\n-        let len = submap.len();\n-        if i >= len {\n-            submap.extend(std::iter::repeat_with(T::default).take(i - len + 1));\n-        }\n-        submap[id.local_id] = value;\n-    }\n-\n-    pub fn get(&self, id: HirId) -> Option<&T> {\n-        self.map.get(id.owner)?.get(id.local_id)\n-    }\n-\n-    pub fn get_owner(&self, id: LocalDefId) -> &IndexVec<ItemLocalId, T> {\n-        &self.map[id]\n-    }\n-\n-    pub fn iter(&self) -> impl Iterator<Item = &T> {\n-        self.map.iter().flat_map(|la| la.iter())\n-    }\n-\n-    pub fn iter_enumerated(&self) -> impl Iterator<Item = (HirId, &T)> {\n-        self.map.iter_enumerated().flat_map(|(owner, la)| {\n-            la.iter_enumerated().map(move |(local_id, attr)| (HirId { owner, local_id }, attr))\n-        })\n-    }\n-}\n-\n-impl<T> std::ops::Index<HirId> for HirIdVec<T> {\n-    type Output = T;\n-\n-    fn index(&self, id: HirId) -> &T {\n-        &self.map[id.owner][id.local_id]\n-    }\n-}\n-\n-impl<T> std::ops::IndexMut<HirId> for HirIdVec<T> {\n-    fn index_mut(&mut self, id: HirId) -> &mut T {\n-        &mut self.map[id.owner][id.local_id]\n-    }\n-}"}, {"sha": "f6514ddca9f57c26bf54647f7e1485520c5c237c", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -303,7 +303,6 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_LABELS,\n         UNUSED_PARENS,\n         UNUSED_BRACES,\n-        MUST_NOT_SUSPEND,\n         REDUNDANT_SEMICOLONS\n     );\n "}, {"sha": "b83d04f3dc2e7eb371e87a9842232da9626185ac", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -323,6 +323,7 @@ declare_lint! {\n     ///\n     /// ```rust\n     /// #![feature(must_not_suspend)]\n+    /// #![warn(must_not_suspend)]\n     ///\n     /// #[must_not_suspend]\n     /// struct SyncThing {}\n@@ -349,8 +350,9 @@ declare_lint! {\n     /// `MutexGuard`'s)\n     ///\n     pub MUST_NOT_SUSPEND,\n-    Warn,\n+    Allow,\n     \"use of a `#[must_not_suspend]` value across a yield point\",\n+    @feature_gate = rustc_span::symbol::sym::must_not_suspend;\n }\n \n declare_lint! {"}, {"sha": "38d3c7aec4941f5bfe12c1c7957a9eb93f9d5044", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1026,7 +1026,15 @@ def update_submodule(self, module, checked_out, recorded_submodules):\n         if self.git_version >= distutils.version.LooseVersion(\"2.11.0\"):\n             update_args.append(\"--progress\")\n         update_args.append(module)\n-        run(update_args, cwd=self.rust_root, verbose=self.verbose, exception=True)\n+        try:\n+            run(update_args, cwd=self.rust_root, verbose=self.verbose, exception=True)\n+        except RuntimeError:\n+            print(\"Failed updating submodule. This is probably due to uncommitted local changes.\")\n+            print('Either stash the changes by running \"git stash\" within the submodule\\'s')\n+            print('directory, reset them by running \"git reset --hard\", or commit them.')\n+            print(\"To reset all submodules' changes run\", end=\" \")\n+            print('\"git submodule foreach --recursive git reset --hard\".')\n+            raise SystemExit(1)\n \n         run([\"git\", \"reset\", \"-q\", \"--hard\"],\n             cwd=module_path, verbose=self.verbose)"}, {"sha": "b3b6422afab427cc26f749ca5d8b142c711518c7", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -134,9 +134,27 @@ Book][unstable-masked] and [its tracking issue][issue-masked].\n \n ## Document primitives\n \n+This is for Rust compiler internal use only.\n+\n Since primitive types are defined in the compiler, there's no place to attach documentation\n-attributes. The `#[doc(primitive)]` attribute is used by the standard library to provide a way to generate\n-documentation for primitive types, and requires `#![feature(doc_primitive)]` to enable.\n+attributes. The `#[doc(primitive)]` attribute is used by the standard library to provide a way\n+to generate documentation for primitive types, and requires `#![feature(doc_primitive)]` to enable.\n+\n+## Document keywords\n+\n+This is for Rust compiler internal use only.\n+\n+Rust keywords are documented in the standard library (look for `match` for example).\n+\n+To do so, the `#[doc(keyword = \"...\")]` attribute is used. Example:\n+\n+```rust\n+#![feature(doc_keyword)]\n+\n+/// Some documentation about the keyword.\n+#[doc(keyword = \"keyword\")]\n+mod empty_mod {}\n+```\n \n ## Unstable command-line arguments\n "}, {"sha": "37ea7b000339f0de6d57ed9b62afc5298eaa6f5d", "filename": "src/librustdoc/html/static/css/noscript.css", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -13,3 +13,12 @@ rules.\n \t/* It requires JS to work so no need to display it in this case. */\n \tdisplay: none;\n }\n+\n+.sub {\n+\t/* The search bar and related controls don't work without JS */\n+\tdisplay: none;\n+}\n+\n+#theme-picker {\n+\tdisplay: none;\n+}"}, {"sha": "ba7fb3b5456a55425d76939bab0e56775f9da13e", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -255,10 +255,6 @@ details.undocumented > summary::before {\n \tbox-shadow: 0 0 0 1px #148099,0 0 0 2px transparent;\n }\n \n-.search-input:disabled {\n-\tbackground-color: #3e3e3e;\n-}\n-\n .module-item .stab,\n .import-item .stab {\n \tcolor: #000;"}, {"sha": "77ac217e6f41dd9f76efc9b9c298ab4bc38d2889", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -219,10 +219,6 @@ details.undocumented > summary::before {\n \tborder-color: #008dfd;\n }\n \n-.search-input:disabled {\n-\tbackground-color: #c5c4c4;\n-}\n-\n #crate-search + .search-input:focus {\n \tbox-shadow: 0 0 8px 4px #078dd8;\n }"}, {"sha": "6df137e39141508a88674a94a53c516efc79d9f1", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -209,10 +209,6 @@ details.undocumented > summary::before {\n \tborder-color: #66afe9;\n }\n \n-.search-input:disabled {\n-\tbackground-color: #e6e6e6;\n-}\n-\n #crate-search + .search-input:focus {\n \tbox-shadow: 0 0 8px #078dd8;\n }"}, {"sha": "c421c6e9dc16ea733be039e9ac71832635790830", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -263,7 +263,9 @@ function hideThemeButtonState() {\n                 search_input.placeholder = searchState.input.origPlaceholder;\n             });\n \n-            search_input.removeAttribute('disabled');\n+            if (search_input.value != '') {\n+                loadSearch();\n+            }\n \n             // `crates{version}.js` should always be loaded before this script, so we can use it\n             // safely."}, {"sha": "cead54412bbbd2f43ae1ced3649a27cf7b570f80", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -85,7 +85,6 @@\n                     <input {# -#}\n                         class=\"search-input\" {# -#}\n                         name=\"search\" {# -#}\n-                        disabled {# -#}\n                         autocomplete=\"off\" {# -#}\n                         spellcheck=\"false\" {# -#}\n                         placeholder=\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\" {# -#}"}, {"sha": "05e746573f47989f19da6f5a963214726f1b8ff9", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -132,12 +132,28 @@ where\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n         intravisit::walk_expr(self, ex);\n \n-        // Get type of function if expression is a function call\n         let tcx = self.tcx;\n+\n+        // If we visit an item that contains an expression outside a function body,\n+        // then we need to exit before calling typeck (which will panic). See\n+        // test/run-make/rustdoc-scrape-examples-invalid-expr for an example.\n+        let hir = tcx.hir();\n+        let owner = hir.local_def_id_to_hir_id(ex.hir_id.owner);\n+        if hir.maybe_body_owned_by(owner).is_none() {\n+            return;\n+        }\n+\n+        // Get type of function if expression is a function call\n         let (ty, span) = match ex.kind {\n             hir::ExprKind::Call(f, _) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n-                (types.node_type(f.hir_id), ex.span)\n+\n+                match types.node_type_opt(f.hir_id) {\n+                    Some(ty) => (ty, ex.span),\n+                    None => {\n+                        return;\n+                    }\n+                }\n             }\n             hir::ExprKind::MethodCall(_, _, _, span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);"}, {"sha": "dce8b83eefe4efd68139f03ed800a171f42f9303", "filename": "src/test/run-make/rustdoc-scrape-examples-invalid-expr/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2FMakefile?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1,5 @@\n+deps := ex\n+\n+-include ../rustdoc-scrape-examples-multiple/scrape.mk\n+\n+all: scrape"}, {"sha": "b342b5b0aaece9fb228d72dbe53570c417348408", "filename": "src/test/run-make/rustdoc-scrape-examples-invalid-expr/examples/ex.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2Fexamples%2Fex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2Fexamples%2Fex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2Fexamples%2Fex.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1,2 @@\n+pub struct Foo([usize; foobar::f()]);\n+fn main() {}"}, {"sha": "c30c99dec6038208b769ddb69b13073e7b7b164c", "filename": "src/test/run-make/rustdoc-scrape-examples-invalid-expr/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-invalid-expr%2Fsrc%2Flib.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1 @@\n+pub const fn f() -> usize { 5 }"}, {"sha": "bdfeda92d79a0684e6adf2a5e46a27f518b61575", "filename": "src/test/run-make/rustdoc-scrape-examples-multiple/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-multiple%2Fsrc%2Flib.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,4 +1,6 @@\n // @has foobar/fn.ok.html '//*[@class=\"docblock scraped-example-list\"]//*[@class=\"prev\"]' ''\n // @has foobar/fn.ok.html '//*[@class=\"more-scraped-examples\"]' ''\n+// @has src/ex/ex.rs.html\n+// @has foobar/fn.ok.html '//a[@href=\"../src/ex/ex.rs.html#2\"]' ''\n \n pub fn ok() {}"}, {"sha": "1693f7b645f1baec352f0f809f55bf278f907a88", "filename": "src/test/rustdoc-gui/javascript-disabled.goml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frustdoc-gui%2Fjavascript-disabled.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Frustdoc-gui%2Fjavascript-disabled.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fjavascript-disabled.goml?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1,6 @@\n+// When JavaScript is disabled, we hide the search bar, because it\n+// can't be used without JS.\n+javascript: false\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+assert-css: (\".sub\", {\"display\": \"none\"})"}, {"sha": "b652d239153302fc7fddd99b23cdc4d2be9b559b", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+#![feature(must_not_suspend)]\n+#![allow(must_not_suspend)]\n \n // This tests the basic example case for the async-await-specific error.\n "}, {"sha": "a373ba6aa71361ea74b4bb90880874cd70cdfe4e", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-non-send-future-diags.rs:21:13\n+  --> $DIR/issue-64130-non-send-future-diags.rs:23:13\n    |\n LL |     is_send(foo());\n    |             ^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-non-send-future-diags.rs:15:5\n+  --> $DIR/issue-64130-non-send-future-diags.rs:17:5\n    |\n LL |     let g = x.lock().unwrap();\n    |         - has type `MutexGuard<'_, u32>` which is not `Send`\n@@ -15,7 +15,7 @@ LL |     baz().await;\n LL | }\n    | - `g` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/issue-64130-non-send-future-diags.rs:7:15\n+  --> $DIR/issue-64130-non-send-future-diags.rs:9:15\n    |\n LL | fn is_send<T: Send>(t: T) { }\n    |               ^^^^ required by this bound in `is_send`"}, {"sha": "7695e0325ff31feb45ee5dc1dc990d44d08ec2af", "filename": "src/test/ui/async-await/issue-71137.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+#![feature(must_not_suspend)]\n+#![allow(must_not_suspend)]\n \n use std::future::Future;\n use std::sync::Mutex;"}, {"sha": "3cc800f96c20d0ed983779fc88362c13f5bf7aa2", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-71137.rs:20:14\n+  --> $DIR/issue-71137.rs:22:14\n    |\n LL |   fake_spawn(wrong_mutex());\n    |              ^^^^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-71137.rs:12:5\n+  --> $DIR/issue-71137.rs:14:5\n    |\n LL |     let mut guard = m.lock().unwrap();\n    |         --------- has type `MutexGuard<'_, i32>` which is not `Send`\n@@ -16,7 +16,7 @@ LL |     *guard += 1;\n LL |   }\n    |   - `mut guard` is later dropped here\n note: required by a bound in `fake_spawn`\n-  --> $DIR/issue-71137.rs:6:27\n+  --> $DIR/issue-71137.rs:8:27\n    |\n LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n    |                           ^^^^ required by this bound in `fake_spawn`"}, {"sha": "6830b23cfa345eeb6ea83e49e8a156f107aaee53", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -39,6 +39,8 @@ const TEST_INTERIOR_MUT: () = {\n     let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n };\n \n+const TEST_DROP: String = String::new();\n+\n fn main() {\n     // We must not promote things with interior mutability. Not even if we \"project it away\".\n     let _val: &'static _ = &(Cell::new(1), 2).0; //~ ERROR temporary value dropped while borrowed\n@@ -50,4 +52,17 @@ fn main() {\n     let _val: &'static _ = &(1%0); //~ ERROR temporary value dropped while borrowed\n     let _val: &'static _ = &(1%(1-1)); //~ ERROR temporary value dropped while borrowed\n     let _val: &'static _ = &([1,2,3][4]+1); //~ ERROR temporary value dropped while borrowed\n+\n+    // No promotion of temporaries that need to be dropped.\n+    let _val: &'static _ = &TEST_DROP;\n+    //~^ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &&TEST_DROP;\n+    //~^ ERROR temporary value dropped while borrowed\n+    //~| ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(&TEST_DROP,);\n+    //~^ ERROR temporary value dropped while borrowed\n+    //~| ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &[&TEST_DROP; 1];\n+    //~^ ERROR temporary value dropped while borrowed\n+    //~| ERROR temporary value dropped while borrowed\n }"}, {"sha": "0d0b0f9c689b5b6593d007015efb60d00f71fba3", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -59,7 +59,7 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:44:29\n+  --> $DIR/promote-not.rs:46:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -70,7 +70,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:45:29\n+  --> $DIR/promote-not.rs:47:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -81,7 +81,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:48:29\n+  --> $DIR/promote-not.rs:50:29\n    |\n LL |     let _val: &'static _ = &(1/0);\n    |               ----------    ^^^^^ creates a temporary which is freed while still in use\n@@ -92,7 +92,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:49:29\n+  --> $DIR/promote-not.rs:51:29\n    |\n LL |     let _val: &'static _ = &(1/(1-1));\n    |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -103,7 +103,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:50:29\n+  --> $DIR/promote-not.rs:52:29\n    |\n LL |     let _val: &'static _ = &(1%0);\n    |               ----------    ^^^^^ creates a temporary which is freed while still in use\n@@ -114,26 +114,102 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:51:29\n+  --> $DIR/promote-not.rs:53:29\n    |\n LL |     let _val: &'static _ = &(1%(1-1));\n    |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n-LL |     let _val: &'static _ = &([1,2,3][4]+1);\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:52:29\n+  --> $DIR/promote-not.rs:54:29\n    |\n LL |     let _val: &'static _ = &([1,2,3][4]+1);\n    |               ----------    ^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:57:29\n+   |\n+LL |     let _val: &'static _ = &TEST_DROP;\n+   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:59:29\n+   |\n+LL |     let _val: &'static _ = &&TEST_DROP;\n+   |               ----------    ^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:59:30\n+   |\n+LL |     let _val: &'static _ = &&TEST_DROP;\n+   |               ----------     ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:62:29\n+   |\n+LL |     let _val: &'static _ = &(&TEST_DROP,);\n+   |               ----------    ^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 13 previous errors\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:62:31\n+   |\n+LL |     let _val: &'static _ = &(&TEST_DROP,);\n+   |               ----------      ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:65:29\n+   |\n+LL |     let _val: &'static _ = &[&TEST_DROP; 1];\n+   |               ----------    ^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:65:31\n+   |\n+LL |     let _val: &'static _ = &[&TEST_DROP; 1];\n+   |               ----------      ^^^^^^^^^    - temporary value is freed at the end of this statement\n+   |               |               |\n+   |               |               creates a temporary which is freed while still in use\n+   |               type annotation requires that borrow lasts for `'static`\n+\n+error: aborting due to 20 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "acb81b0bf9def5ef9b8a65a085e4a29fe6a9bd69", "filename": "src/test/ui/lint/must_not_suspend/gated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+#![deny(must_not_suspend)]  //~ ERROR the `must_not_suspend`\n+//~| ERROR the `must_not_suspend`\n+//~| ERROR the `must_not_suspend`\n+\n+async fn other() {}\n+\n+pub async fn uhoh(m: std::sync::Mutex<()>) {\n+    let _guard = m.lock().unwrap(); //~ ERROR `MutexGuard` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "be077deb3f19750d73d9e86b9302ee0603d6043d", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1,54 @@\n+error[E0658]: the `must_not_suspend` lint is unstable\n+  --> $DIR/gated.rs:2:1\n+   |\n+LL | #![deny(must_not_suspend)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error[E0658]: the `must_not_suspend` lint is unstable\n+  --> $DIR/gated.rs:2:1\n+   |\n+LL | #![deny(must_not_suspend)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error[E0658]: the `must_not_suspend` lint is unstable\n+  --> $DIR/gated.rs:2:1\n+   |\n+LL | #![deny(must_not_suspend)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error: `MutexGuard` held across a suspend point, but should not be\n+  --> $DIR/gated.rs:9:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/gated.rs:2:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n+  --> $DIR/gated.rs:9:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/gated.rs:9:9\n+   |\n+LL |     let _guard = m.lock().unwrap();\n+   |         ^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "acdb36fcdabf9d97b4ff9cd521e8d47cf7fa7c59", "filename": "src/test/ui/lint/must_not_suspend/issue-89562.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fissue-89562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fissue-89562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fissue-89562.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+// run-pass\n+\n+use std::sync::Mutex;\n+\n+// Copied from the issue. Allow-by-default for now, so run-pass\n+pub async fn foo() {\n+    let foo = Mutex::new(1);\n+    let lock = foo.lock().unwrap();\n+\n+    // Prevent mutex lock being held across `.await` point.\n+    drop(lock);\n+\n+    bar().await;\n+}\n+\n+async fn bar() {}\n+\n+fn main() {}"}, {"sha": "7bb895e7d36438f143181273f304f4d2c017f374", "filename": "src/test/ui/lint/must_not_suspend/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+#![feature(must_not_suspend)]\n #![deny(must_not_suspend)]\n \n async fn other() {}"}, {"sha": "dde506c19e72501b9bb7fdce98902506890c2e08", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,23 +1,23 @@\n error: `MutexGuard` held across a suspend point, but should not be\n-  --> $DIR/mutex.rs:7:9\n+  --> $DIR/mutex.rs:8:9\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n    |     ------------- the value is held across this suspend point\n    |\n note: the lint level is defined here\n-  --> $DIR/mutex.rs:2:9\n+  --> $DIR/mutex.rs:3:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n note: holding a MutexGuard across suspend points can cause deadlocks, delays, and cause Futures to not implement `Send`\n-  --> $DIR/mutex.rs:7:9\n+  --> $DIR/mutex.rs:8:9\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/mutex.rs:7:9\n+  --> $DIR/mutex.rs:8:9\n    |\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^"}, {"sha": "7fdea66a23517d5967e4241685820d499471f4e9", "filename": "src/test/ui/lint/must_not_suspend/warn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n // run-pass\n #![feature(must_not_suspend)]\n+#![warn(must_not_suspend)]\n \n #[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n struct Umm {"}, {"sha": "42374d4acac275f304fab03cccada0f7f85734e9", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=e9b0d992598d9a51fd7b1a4ae8f9cbafac5e593b", "patch": "@@ -1,19 +1,23 @@\n warning: `Umm` held across a suspend point, but should not be\n-  --> $DIR/warn.rs:20:9\n+  --> $DIR/warn.rs:21:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n    |     ------------- the value is held across this suspend point\n    |\n-   = note: `#[warn(must_not_suspend)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/warn.rs:4:9\n+   |\n+LL | #![warn(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n note: You gotta use Umm's, ya know?\n-  --> $DIR/warn.rs:20:9\n+  --> $DIR/warn.rs:21:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/warn.rs:20:9\n+  --> $DIR/warn.rs:21:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^"}]}