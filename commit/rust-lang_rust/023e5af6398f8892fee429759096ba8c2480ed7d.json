{"sha": "023e5af6398f8892fee429759096ba8c2480ed7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyM2U1YWY2Mzk4Zjg4OTJmZWU0Mjk3NTkwOTZiYThjMjQ4MGVkN2Q=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-06-29T06:18:51Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-06-29T06:18:51Z"}, "message": "The few and proud isolated bits from stdlib-work so far that don't break everything.  Note util.rs hasn't yet been declared mod in the std crate.  Don't do that yet, as it breaks make check.", "tree": {"sha": "732480750073263707d6ce2cc43e562a7546dcf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/732480750073263707d6ce2cc43e562a7546dcf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/023e5af6398f8892fee429759096ba8c2480ed7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/023e5af6398f8892fee429759096ba8c2480ed7d", "html_url": "https://github.com/rust-lang/rust/commit/023e5af6398f8892fee429759096ba8c2480ed7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/023e5af6398f8892fee429759096ba8c2480ed7d/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d94f0e2498ea3b7e842fd7ff52ddb720c828411a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d94f0e2498ea3b7e842fd7ff52ddb720c828411a", "html_url": "https://github.com/rust-lang/rust/commit/d94f0e2498ea3b7e842fd7ff52ddb720c828411a"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "2afb3c4f6d9dc7317a76595ef5e15a10a961fc60", "filename": "src/lib/_int.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/023e5af6398f8892fee429759096ba8c2480ed7d/src%2Flib%2F_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023e5af6398f8892fee429759096ba8c2480ed7d/src%2Flib%2F_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_int.rs?ref=023e5af6398f8892fee429759096ba8c2480ed7d", "patch": "@@ -18,3 +18,9 @@ iter range(mutable int lo, int hi) -> int {\n   }\n }\n \n+iter urange(mutable uint lo, uint hi) -> uint {\n+  while (lo < hi) {\n+    put lo;\n+    lo += uint(1);\n+  }\n+}"}, {"sha": "86733fb5595af5ada44209c8137077f43f1b4ec9", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/023e5af6398f8892fee429759096ba8c2480ed7d/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023e5af6398f8892fee429759096ba8c2480ed7d/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=023e5af6398f8892fee429759096ba8c2480ed7d", "patch": "@@ -28,3 +28,14 @@ fn len[T](vec[T] v) -> uint {\n fn buf[T](vec[T] v) -> vbuf {\n   ret rustrt.vec_buf[T](v);\n }\n+\n+// Ought to take mutable &vec[T] v and just mutate it instead of copy\n+// and return.  Blocking on issue #89 for this.\n+fn grow[T](mutable vec[T] v, int n, T initval) -> vec[T] {\n+  let int i = n;\n+  while (i > 0) {\n+    i -= 1;\n+    v += vec(initval);\n+  }\n+  ret v;\n+}"}, {"sha": "bf57bb5231924dc199657441ef0ba74b038aed16", "filename": "src/lib/util.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/023e5af6398f8892fee429759096ba8c2480ed7d/src%2Flib%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023e5af6398f8892fee429759096ba8c2480ed7d/src%2Flib%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Futil.rs?ref=023e5af6398f8892fee429759096ba8c2480ed7d", "patch": "@@ -0,0 +1,46 @@\n+type option[T] = tag(none(), some(T));\n+type box[T] = tup(@T);\n+type boxo[T] = option[box[T]];\n+type boxm[T] = tup(mutable @T);\n+type boxmo[T] = option[boxm[T]];\n+\n+type map[T, U] = fn(&T) -> U;\n+\n+fn option_map[T, U](map[T, U] f, &option[T] opt) -> option[U] {\n+  alt (opt) {\n+    case (some[T](x)) {\n+      ret some[U](f[T, U](x));\n+    }\n+    case (none[T]()) {\n+      ret none[U]();\n+    }\n+  }\n+}\n+\n+fn unbox[T](&box[T] b) -> T {\n+  ret b._0;\n+}\n+\n+\n+fn unboxm[T](&boxm[T] b) -> T {\n+  ret b._0;\n+}\n+\n+fn unboxo[T](boxo[T] b) -> option[T] {\n+  // Pending issue #90, no need to alias the function item in order to pass\n+  // it as an arg.\n+  let map[box[T], T] f = unbox[T];\n+  be option_map[box[T], T](f, b);\n+}\n+\n+fn unboxmo[T](boxmo[T] b) -> option[T] {\n+  // Issue #90, as above\n+  let map[boxm[T], T] f = unboxm[T];\n+  be option_map[boxm[T], T](f, b);\n+}\n+\n+fn id[T](T x) -> T {\n+  ret x;\n+}\n+\n+type rational = rec(int num, int den);"}]}