{"sha": "b7683fc02b35cafc849b7097556f4f67c3adcfe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjgzZmMwMmIzNWNhZmM4NDliNzA5NzU1NmY0ZjY3YzNhZGNmZTk=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-12T06:33:07Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-12T20:44:31Z"}, "message": "Warn when linking a plugin into a non-plugin crate\n\nFixes #22202.", "tree": {"sha": "60abc58eaaa004f2e5954e7e4f3858403b6abec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60abc58eaaa004f2e5954e7e4f3858403b6abec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7683fc02b35cafc849b7097556f4f67c3adcfe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7683fc02b35cafc849b7097556f4f67c3adcfe9", "html_url": "https://github.com/rust-lang/rust/commit/b7683fc02b35cafc849b7097556f4f67c3adcfe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7683fc02b35cafc849b7097556f4f67c3adcfe9/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6864792df002a4430634ea6ae096dd7e524560c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6864792df002a4430634ea6ae096dd7e524560c2", "html_url": "https://github.com/rust-lang/rust/commit/6864792df002a4430634ea6ae096dd7e524560c2"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "79502f3cd17f755768cabac2c00c36c2f594f03a", "filename": "src/doc/trpl/plugins.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Fdoc%2Ftrpl%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Fdoc%2Ftrpl%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fplugins.md?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -39,6 +39,16 @@ If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n interpreted by rustc itself.  They are provided to the plugin through the\n `Registry`'s [`args` method](../rustc/plugin/registry/struct.Registry.html#method.args).\n \n+In the vast majority of cases, a plugin should *only* be used through\n+`#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n+pull in all of libsyntax and librustc as dependencies of your crate.  This is\n+generally unwanted unless you are building another plugin.  The\n+`plugin_as_library` lint checks these guidelines.\n+\n+The usual practice is to put compiler plugins in their own crate, separate from\n+any `macro_rules!` macros or ordinary Rust code meant to be used by consumers\n+of a library.\n+\n # Syntax extensions\n \n Plugins can extend Rust's syntax in various ways. One kind of syntax extension"}, {"sha": "74e921acdb404c011bc9c23960e731a361bbbdac", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -26,7 +26,7 @@\n //! a `pub fn new()`.\n use self::MethodContext::*;\n \n-use metadata::csearch;\n+use metadata::{csearch, decoder};\n use middle::def::*;\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n@@ -1963,6 +1963,48 @@ impl LintPass for UnconditionalRecursion {\n     }\n }\n \n+declare_lint! {\n+    PLUGIN_AS_LIBRARY,\n+    Warn,\n+    \"compiler plugin used as ordinary library in non-plugin crate\"\n+}\n+\n+#[derive(Copy)]\n+pub struct PluginAsLibrary;\n+\n+impl LintPass for PluginAsLibrary {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![PLUGIN_AS_LIBRARY]\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        if cx.sess().plugin_registrar_fn.get().is_some() {\n+            // We're compiling a plugin; it's fine to link other plugins.\n+            return;\n+        }\n+\n+        match it.node {\n+            ast::ItemExternCrate(..) => (),\n+            _ => return,\n+        };\n+\n+        let md = match cx.sess().cstore.find_extern_mod_stmt_cnum(it.id) {\n+            Some(cnum) => cx.sess().cstore.get_crate_data(cnum),\n+            None => {\n+                // Probably means we aren't linking the crate for some reason.\n+                //\n+                // Not sure if / when this could happen.\n+                return;\n+            }\n+        };\n+\n+        if decoder::get_plugin_registrar_fn(md.data()).is_some() {\n+            cx.span_lint(PLUGIN_AS_LIBRARY, it.span,\n+                \"compiler plugin used as an ordinary library\");\n+        }\n+    }\n+}\n+\n declare_lint! {\n     pub UNUSED_IMPORTS,\n     Warn,"}, {"sha": "42a6861f452a66f95d6f0f0c301979165a92264a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -214,6 +214,7 @@ impl LintStore {\n                      Stability,\n                      UnconditionalRecursion,\n                      InvalidNoMangleItems,\n+                     PluginAsLibrary,\n         );\n \n         add_builtin_with_new!(sess,"}, {"sha": "cfc8c015324d9384edfcbb88cb5f8b47717b39df", "filename": "src/test/auxiliary/plugin_with_plugin_lib.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_with_plugin_lib.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![deny(plugin_as_library)] // should have no effect in a plugin crate\n+\n+extern crate macro_crate_test;\n+extern crate rustc;\n+\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(_: &mut Registry) { }"}, {"sha": "c5169b61a2bf9df2dbe58a3d3f041aec3734c9d9", "filename": "src/test/compile-fail-fulldeps/plugin-as-extern-crate.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-as-extern-crate.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_test.rs\n+// ignore-stage1\n+// ignore-cross-compile\n+//\n+// macro_crate_test will not compile on a cross-compiled target because\n+// libsyntax is not compiled for it.\n+\n+#![deny(plugin_as_library)]\n+\n+extern crate macro_crate_test; //~ ERROR compiler plugin used as an ordinary library\n+\n+fn main() { }"}, {"sha": "3dfd8838ebec40ca172830f79e3106a4a77690ae", "filename": "src/test/compile-fail-fulldeps/plugin-plus-extern-crate.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-plus-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-plus-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fplugin-plus-extern-crate.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_test.rs\n+// ignore-stage1\n+// ignore-cross-compile\n+//\n+// macro_crate_test will not compile on a cross-compiled target because\n+// libsyntax is not compiled for it.\n+\n+#![deny(plugin_as_library)]\n+#![feature(plugin)]\n+#![plugin(macro_crate_test)]\n+\n+extern crate macro_crate_test; //~ ERROR compiler plugin used as an ordinary library\n+\n+fn main() {\n+    assert_eq!(1, make_a_1!());\n+    macro_crate_test::foo();\n+}"}, {"sha": "c612ee75651bab413affb5a0cb4cb1a3ee869347", "filename": "src/test/run-pass-fulldeps/plugin-lib-ok-in-plugin.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-lib-ok-in-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-lib-ok-in-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-lib-ok-in-plugin.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_test.rs\n+// aux-build:plugin_with_plugin_lib.rs\n+// ignore-stage1\n+// ignore-cross-compile\n+//\n+// macro_crate_test will not compile on a cross-compiled target because\n+// libsyntax is not compiled for it.\n+\n+#![deny(plugin_as_library)]\n+#![feature(plugin)]\n+#![plugin(macro_crate_test)]\n+#![plugin(plugin_with_plugin_lib)]\n+\n+fn main() {\n+    assert_eq!(1, make_a_1!());\n+}"}, {"sha": "d1ce83f26778847cbb484ea8abc392d9cf9425c4", "filename": "src/test/run-pass-fulldeps/plugin-plus-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-plus-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7683fc02b35cafc849b7097556f4f67c3adcfe9/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-plus-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fplugin-plus-extern-crate.rs?ref=b7683fc02b35cafc849b7097556f4f67c3adcfe9", "patch": "@@ -15,6 +15,7 @@\n // macro_crate_test will not compile on a cross-compiled target because\n // libsyntax is not compiled for it.\n \n+#![allow(plugin_as_library)]\n #![feature(plugin)]\n #![plugin(macro_crate_test)]\n "}]}