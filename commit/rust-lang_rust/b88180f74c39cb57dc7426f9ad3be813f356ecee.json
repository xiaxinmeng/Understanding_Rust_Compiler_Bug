{"sha": "b88180f74c39cb57dc7426f9ad3be813f356ecee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODE4MGY3NGMzOWNiNTdkYzc0MjZmOWFkM2JlODEzZjM1NmVjZWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-02-07T13:27:00Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-02-20T00:50:26Z"}, "message": "rustc_mir: handle all aggregate kinds in the deaggregator.", "tree": {"sha": "cb323fa2117e5b1bdb30dd3a223ea26d5a8b8bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb323fa2117e5b1bdb30dd3a223ea26d5a8b8bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88180f74c39cb57dc7426f9ad3be813f356ecee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88180f74c39cb57dc7426f9ad3be813f356ecee", "html_url": "https://github.com/rust-lang/rust/commit/b88180f74c39cb57dc7426f9ad3be813f356ecee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88180f74c39cb57dc7426f9ad3be813f356ecee/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3922dd72fe98ecc8866d448fe1e637971a46341a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3922dd72fe98ecc8866d448fe1e637971a46341a", "html_url": "https://github.com/rust-lang/rust/commit/3922dd72fe98ecc8866d448fe1e637971a46341a"}], "stats": {"total": 154, "additions": 70, "deletions": 84}, "files": [{"sha": "179c196f26f561b4bed3a5a3dfde8ce7b66bfdf2", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 68, "deletions": 81, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/b88180f74c39cb57dc7426f9ad3be813f356ecee/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88180f74c39cb57dc7426f9ad3be813f356ecee/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=b88180f74c39cb57dc7426f9ad3be813f356ecee", "patch": "@@ -44,98 +44,85 @@ impl MirPass for Deaggregator {\n             return;\n         }\n \n-        for bb in mir.basic_blocks_mut() {\n-            let mut curr: usize = 0;\n-            while let Some(idx) = get_aggregate_statement_index(curr, &bb.statements) {\n-                // do the replacement\n-                debug!(\"removing statement {:?}\", idx);\n-                let src_info = bb.statements[idx].source_info;\n-                let suffix_stmts = bb.statements.split_off(idx+1);\n+        let can_deaggregate = |statement: &Statement| {\n+            if let StatementKind::Assign(_, ref rhs) = statement.kind {\n+                if let Rvalue::Aggregate(..) = *rhs {\n+                    return true;\n+                }\n+            }\n+\n+            false\n+        };\n+\n+        let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n+        for bb in basic_blocks {\n+            let mut start = 0;\n+            while let Some(i) = bb.statements[start..].iter().position(&can_deaggregate) {\n+                let i = start + i;\n+\n+                // FIXME(eddyb) this is probably more expensive than it should be.\n+                // Ideally we'd move the block's statements all at once.\n+                let suffix_stmts = bb.statements.split_off(i + 1);\n                 let orig_stmt = bb.statements.pop().unwrap();\n-                let (lhs, rhs) = match orig_stmt.kind {\n-                    StatementKind::Assign(ref lhs, ref rhs) => (lhs, rhs),\n-                    _ => span_bug!(src_info.span, \"expected assign, not {:?}\", orig_stmt),\n-                };\n-                let (agg_kind, operands) = match rhs {\n-                    &Rvalue::Aggregate(ref agg_kind, ref operands) => (agg_kind, operands),\n-                    _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n+                let source_info = orig_stmt.source_info;\n+                let (mut lhs, kind, operands) = match orig_stmt.kind {\n+                    StatementKind::Assign(lhs, Rvalue::Aggregate(kind, operands))\n+                        => (lhs, kind, operands),\n+                    _ => bug!()\n                 };\n-                let (adt_def, variant, substs) = match **agg_kind {\n-                    AggregateKind::Adt(adt_def, variant, substs, None)\n-                        => (adt_def, variant, substs),\n-                    _ => span_bug!(src_info.span, \"expected struct, not {:?}\", rhs),\n+\n+                let mut set_discriminant = None;\n+                let active_field_index = match *kind {\n+                    AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {\n+                        if adt_def.is_enum() {\n+                            set_discriminant = Some(Statement {\n+                                kind: StatementKind::SetDiscriminant {\n+                                    place: lhs.clone(),\n+                                    variant_index,\n+                                },\n+                                source_info,\n+                            });\n+                            lhs = lhs.downcast(adt_def, variant_index);\n+                        }\n+                        active_field_index\n+                    }\n+                    _ => None\n                 };\n-                let n = bb.statements.len();\n-                bb.statements.reserve(n + operands.len() + suffix_stmts.len());\n-                for (i, op) in operands.iter().enumerate() {\n-                    let ref variant_def = adt_def.variants[variant];\n-                    let ty = variant_def.fields[i].ty(tcx, substs);\n-                    let rhs = Rvalue::Use(op.clone());\n \n-                    let lhs_cast = if adt_def.is_enum() {\n-                        Place::Projection(Box::new(PlaceProjection {\n-                            base: lhs.clone(),\n-                            elem: ProjectionElem::Downcast(adt_def, variant),\n-                        }))\n-                    } else {\n-                        lhs.clone()\n-                    };\n+                let new_total_count = bb.statements.len() +\n+                    operands.len() +\n+                    (set_discriminant.is_some() as usize) +\n+                    suffix_stmts.len();\n+                bb.statements.reserve(new_total_count);\n \n-                    let lhs_proj = Place::Projection(Box::new(PlaceProjection {\n-                        base: lhs_cast,\n-                        elem: ProjectionElem::Field(Field::new(i), ty),\n-                    }));\n-                    let new_statement = Statement {\n-                        source_info: src_info,\n-                        kind: StatementKind::Assign(lhs_proj, rhs),\n+                for (j, op) in operands.into_iter().enumerate() {\n+                    let lhs_field = if let AggregateKind::Array(_) = *kind {\n+                        // FIXME(eddyb) `offset` should be u64.\n+                        let offset = j as u32;\n+                        assert_eq!(offset as usize, j);\n+                        lhs.clone().elem(ProjectionElem::ConstantIndex {\n+                            offset,\n+                            // FIXME(eddyb) `min_length` doesn't appear to be used.\n+                            min_length: offset + 1,\n+                            from_end: false\n+                        })\n+                    } else {\n+                        let ty = op.ty(local_decls, tcx);\n+                        let field = Field::new(active_field_index.unwrap_or(j));\n+                        lhs.clone().field(field, ty)\n                     };\n-                    debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n-                    bb.statements.push(new_statement);\n+                    bb.statements.push(Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(lhs_field, Rvalue::Use(op)),\n+                    });\n                 }\n \n-                // if the aggregate was an enum, we need to set the discriminant\n-                if adt_def.is_enum() {\n-                    let set_discriminant = Statement {\n-                        kind: StatementKind::SetDiscriminant {\n-                            place: lhs.clone(),\n-                            variant_index: variant,\n-                        },\n-                        source_info: src_info,\n-                    };\n-                    bb.statements.push(set_discriminant);\n-                };\n+                // If the aggregate was an enum, we need to set the discriminant.\n+                bb.statements.extend(set_discriminant);\n \n-                curr = bb.statements.len();\n+                start = bb.statements.len();\n                 bb.statements.extend(suffix_stmts);\n             }\n         }\n     }\n }\n-\n-fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,\n-                                         statements: &Vec<Statement<'tcx>>)\n-                                         -> Option<usize> {\n-    for i in start..statements.len() {\n-        let ref statement = statements[i];\n-        let rhs = match statement.kind {\n-            StatementKind::Assign(_, ref rhs) => rhs,\n-            _ => continue,\n-        };\n-        let (kind, operands) = match rhs {\n-            &Rvalue::Aggregate(ref kind, ref operands) => (kind, operands),\n-            _ => continue,\n-        };\n-        let (adt_def, variant) = match **kind {\n-            AggregateKind::Adt(adt_def, variant, _, None) => (adt_def, variant),\n-            _ => continue,\n-        };\n-        if operands.len() == 0 {\n-            // don't deaggregate ()\n-            continue;\n-        }\n-        debug!(\"getting variant {:?}\", variant);\n-        debug!(\"for adt_def {:?}\", adt_def);\n-        return Some(i);\n-    };\n-    None\n-}"}, {"sha": "9e4c06b7d7b23aa4269c958efbbdf8810ef5ae40", "filename": "src/test/mir-opt/copy_propagation_arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88180f74c39cb57dc7426f9ad3be813f356ecee/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88180f74c39cb57dc7426f9ad3be813f356ecee/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.rs?ref=b88180f74c39cb57dc7426f9ad3be813f356ecee", "patch": "@@ -78,7 +78,6 @@ fn main() {\n // bb1: {\n //     StorageDead(_3);\n //     _1 = const 5u8;\n-//     _0 = ();\n //     return;\n // }\n // END rustc.bar.CopyPropagation.before.mir\n@@ -100,7 +99,6 @@ fn main() {\n //     _2 = _1;\n //     _1 = move _2;\n //     StorageDead(_2);\n-//     _0 = ();\n //     return;\n // }\n // END rustc.baz.CopyPropagation.before.mir"}, {"sha": "5127ed5885371ef00b42a48871a6c40824df8b70", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88180f74c39cb57dc7426f9ad3be813f356ecee/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88180f74c39cb57dc7426f9ad3be813f356ecee/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=b88180f74c39cb57dc7426f9ad3be813f356ecee", "patch": "@@ -52,7 +52,8 @@ fn main() {\n //     ((_4 as A).0: i32) = move _5;\n //     discriminant(_4) = 0;\n //     ...\n-//     _0 = [move _2, move _4];\n+//     _0[0 of 1] = move _2;\n+//     _0[1 of 2] = move _4;\n //     ...\n //     return;\n // }"}]}