{"sha": "c6a91df838b17a2366346db664072d7914ab241a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTkxZGY4MzhiMTdhMjM2NjM0NmRiNjY0MDcyZDc5MTRhYjI0MWE=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-10-23T06:39:25Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-08T11:38:10Z"}, "message": "Enable empty_loop lint for no_std crates\n\nWe skip the lint if the `loop {}` is in the `#[panic_handler]` as the\nmain recommendation we give is to panic, which obviously isn't\npossible in a panic handler.\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "c2991b7feb243aec765f780cf0f644b4199b2be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2991b7feb243aec765f780cf0f644b4199b2be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a91df838b17a2366346db664072d7914ab241a", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAl+n2KIACgkQHKDfKvWd\naKWOfhAAx1lo9Cd2MPO+5HA1+1u2VrLMjl/FIqZCnQ7ZNyY5zTaAEetP3sxg0vE4\nx5dUl8Dle+HUpnioPU4CjQES932EWqFwoSsZ+Bc9SrHLyH9hu2EEPFwNniyq/8kV\nqNXnpiR9OgBypMjPaGt6BE+wdRyo1t10fp0Ttq8rJ3tJtGUpk6FGat6ruYNuE8O9\n9THcU06ITfef9g5GCkGFG2nyi8yqcUwec/dDiE6DsIE9WtzogfpOfJGRmUs3dkfM\nN212kT4mizvzIoF1llHK6CUx5olEpVDrXsFix5s5Y3lxPoMDnKGHZqHtC5lYHWDG\nB76YsFUMN4i1dmiU1T1Xyv/u3nQwYfscKZ00v0VmwN7E2a0l6uaw29Ua7NcK9mdl\nituXagYGvVj46AhnruawBhRjV8x71VZEhW9gX+n5ABD5sZzho6cYuDncK177x8S5\nl4fcWb6v0CQRiyKih0deSeRg+AbjXNdFhXj6GuvQh0mcY76t+T8cjqRcUvns2Fj+\nIHIOEjLFXzkxN6Z2kOHM2X8DM9U3TA6HtByIwb0Lu2tS5pxL9k6qx0kePijZFOnr\nCQ1207W5pX61kpfdTwP4Sl2WCHHH1sQiz8v1HAKJt+egRwgbMBWAUsT+nhGQ1oZN\nN7VDnM6GzxfBmfonuIMyn7uLIixXb81gODhBZlLSi/D5xgikO/Y=\n=QGwg\n-----END PGP SIGNATURE-----", "payload": "tree c2991b7feb243aec765f780cf0f644b4199b2be0\nparent 96d5f45adee883c565062fbb44de7ea29918539d\nauthor Joe Richey <joerichey@google.com> 1603435165 -0700\ncommitter flip1995 <philipp.krones@embecosm.com> 1604835490 +0100\n\nEnable empty_loop lint for no_std crates\n\nWe skip the lint if the `loop {}` is in the `#[panic_handler]` as the\nmain recommendation we give is to panic, which obviously isn't\npossible in a panic handler.\n\nSigned-off-by: Joe Richey <joerichey@google.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a91df838b17a2366346db664072d7914ab241a", "html_url": "https://github.com/rust-lang/rust/commit/c6a91df838b17a2366346db664072d7914ab241a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a91df838b17a2366346db664072d7914ab241a/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d5f45adee883c565062fbb44de7ea29918539d", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d5f45adee883c565062fbb44de7ea29918539d", "html_url": "https://github.com/rust-lang/rust/commit/96d5f45adee883c565062fbb44de7ea29918539d"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "2a53210efe3d916c575d6499b8cf3a2c7023d147", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6a91df838b17a2366346db664072d7914ab241a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a91df838b17a2366346db664072d7914ab241a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c6a91df838b17a2366346db664072d7914ab241a", "patch": "@@ -4,10 +4,10 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    indent_of, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment,\n-    match_trait_method, match_type, match_var, multispan_sugg, qpath_res, single_segment_path, snippet,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then, sugg, SpanlessEq,\n+    indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n+    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, qpath_res, single_segment_path,\n+    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n+    span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -543,17 +543,15 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n         if let ExprKind::Loop(ref block, _, LoopSource::Loop) = expr.kind {\n-            // also check for empty `loop {}` statements\n-            // TODO(issue #6161): Enable for no_std crates (outside of #[panic_handler])\n-            if block.stmts.is_empty() && block.expr.is_none() && !is_no_std_crate(cx.tcx.hir().krate()) {\n-                span_lint_and_help(\n-                    cx,\n-                    EMPTY_LOOP,\n-                    expr.span,\n-                    \"empty `loop {}` wastes CPU cycles\",\n-                    None,\n-                    \"You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\",\n-                );\n+            // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n+            if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n+                let msg = \"empty `loop {}` wastes CPU cycles\";\n+                let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n+                    \"You should either use `panic!()` or add a call pausing or sleeping the thread to the loop body.\"\n+                } else {\n+                    \"You should either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\"\n+                };\n+                span_lint_and_help(cx, EMPTY_LOOP, expr.span, msg, None, help);\n             }\n \n             // extract the expression from the first statement (if any) in a block"}, {"sha": "cba3a0502499531c99da4bc2b89b32e105ca1fd6", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6a91df838b17a2366346db664072d7914ab241a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a91df838b17a2366346db664072d7914ab241a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c6a91df838b17a2366346db664072d7914ab241a", "patch": "@@ -468,6 +468,13 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n         .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id.to_def_id())\n }\n \n+/// Returns `true` if the expression is in the program's `#[panic_handler]`.\n+pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n+    let def_id = cx.tcx.hir().local_def_id(parent).to_def_id();\n+    Some(def_id) == cx.tcx.lang_items().panic_impl()\n+}\n+\n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);"}, {"sha": "4553d3ec505a33846cce213690a5a6905ef3330c", "filename": "tests/ui/empty_loop_no_std.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6a91df838b17a2366346db664072d7914ab241a/tests%2Fui%2Fempty_loop_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a91df838b17a2366346db664072d7914ab241a/tests%2Fui%2Fempty_loop_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.rs?ref=c6a91df838b17a2366346db664072d7914ab241a", "patch": "@@ -10,13 +10,18 @@ use core::panic::PanicInfo;\n \n #[start]\n fn main(argc: isize, argv: *const *const u8) -> isize {\n+    // This should trigger the lint\n     loop {}\n }\n \n #[panic_handler]\n fn panic(_info: &PanicInfo) -> ! {\n+    // This should NOT trigger the lint\n     loop {}\n }\n \n #[lang = \"eh_personality\"]\n-extern \"C\" fn eh_personality() {}\n+extern \"C\" fn eh_personality() {\n+    // This should also trigger the lint\n+    loop {}\n+}"}, {"sha": "1cb454c3bbe3bfdf6f6b062531cf59b4061cac2e", "filename": "tests/ui/empty_loop_no_std.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6a91df838b17a2366346db664072d7914ab241a/tests%2Fui%2Fempty_loop_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a91df838b17a2366346db664072d7914ab241a/tests%2Fui%2Fempty_loop_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.stderr?ref=c6a91df838b17a2366346db664072d7914ab241a", "patch": "@@ -0,0 +1,19 @@\n+error: empty `loop {}` wastes CPU cycles\n+  --> $DIR/empty_loop_no_std.rs:14:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+   |\n+   = note: `-D clippy::empty-loop` implied by `-D warnings`\n+   = help: You should either use `panic!()` or add a call pausing or sleeping the thread to the loop body.\n+\n+error: empty `loop {}` wastes CPU cycles\n+  --> $DIR/empty_loop_no_std.rs:26:5\n+   |\n+LL |     loop {}\n+   |     ^^^^^^^\n+   |\n+   = help: You should either use `panic!()` or add a call pausing or sleeping the thread to the loop body.\n+\n+error: aborting due to 2 previous errors\n+"}]}