{"sha": "357311476465fb0dbe3db4746e1d42ad9a0c485c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NzMxMTQ3NjQ2NWZiMGRiZTNkYjQ3NDZlMWQ0MmFkOWEwYzQ4NWM=", "commit": {"author": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T21:15:24Z"}, "committer": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T21:15:24Z"}, "message": "replaced pat_to_string with snippet", "tree": {"sha": "69959713897ebf0826ce6270122dc55e47915063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69959713897ebf0826ce6270122dc55e47915063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/357311476465fb0dbe3db4746e1d42ad9a0c485c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/357311476465fb0dbe3db4746e1d42ad9a0c485c", "html_url": "https://github.com/rust-lang/rust/commit/357311476465fb0dbe3db4746e1d42ad9a0c485c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/357311476465fb0dbe3db4746e1d42ad9a0c485c/comments", "author": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1188f59102464ef229a72ce21f31535f1ba815d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1188f59102464ef229a72ce21f31535f1ba815d6", "html_url": "https://github.com/rust-lang/rust/commit/1188f59102464ef229a72ce21f31535f1ba815d6"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c2069d98e770bcfb361d38d2245fcc62f3212360", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/357311476465fb0dbe3db4746e1d42ad9a0c485c/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357311476465fb0dbe3db4746e1d42ad9a0c485c/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=357311476465fb0dbe3db4746e1d42ad9a0c485c", "patch": "@@ -1,10 +1,10 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{paths, method_chain_args, span_help_and_lint, match_type};\n+use utils::{paths, method_chain_args, span_help_and_lint, match_type, snippet_opt};\n \n /// **What it does:*** Checks for unnecessary `ok()` in if let.\n ///\n-/// **Why is this bad?** Calling `ok()` in if let is unnecessary, instead match on `Ok(x`\n+/// **Why is this bad?** Calling `ok()` in if let is unnecessary, instead match on `Ok(pat)`\n ///\n /// **Known problems:** None.\n ///\n@@ -19,7 +19,7 @@ use utils::{paths, method_chain_args, span_help_and_lint, match_type};\n declare_lint! {\n     pub IF_LET_SOME_RESULT,\n     Warn,\n-    \"usage of `ok()` in `if let Some(x)` statements is unnecessary, match on `Ok(expr)` instead\"\n+    \"usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\"\n }\n \n #[derive(Copy, Clone)]\n@@ -38,11 +38,11 @@ impl LateLintPass for OkIfLetPass {\n             let MatchSource::IfLetDesugar { .. } = *source, //test if it is an If Let\n             let ExprMethodCall(_, _, ref result_types) = op.node, //check is expr.ok() has type Result<T,E>.ok()\n             let PatKind::TupleStruct(ref x, ref y, _)  = body[0].pats[0].node, //get operation\n+            let Some(some_expr_string) = snippet_opt(cx, y[0].span),\n             let Some(_) = method_chain_args(op, &[\"ok\"]) //test to see if using ok() methoduse std::marker::Sized;\n \n         ], {\n             let is_result_type = match_type(cx, cx.tcx.expr_ty(&result_types[0]), &paths::RESULT);\n-            let some_expr_string = print::pat_to_string(&y[0]);\n             if print::path_to_string(x) == \"Some\" && is_result_type {\n                 span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n                 \"Matching on `Some` with `ok()` is redundant\","}]}