{"sha": "e6f007d9a8e676c4af5731001b211ca7a52bce16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjAwN2Q5YThlNjc2YzRhZjU3MzEwMDFiMjExY2E3YTUyYmNlMTY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T18:27:57Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Move Ty::fn_ptr to TyBuilder", "tree": {"sha": "1c4d7aa82dfc58a6a7c2b3af1228d538e57d0dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c4d7aa82dfc58a6a7c2b3af1228d538e57d0dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f007d9a8e676c4af5731001b211ca7a52bce16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f007d9a8e676c4af5731001b211ca7a52bce16", "html_url": "https://github.com/rust-lang/rust/commit/e6f007d9a8e676c4af5731001b211ca7a52bce16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f007d9a8e676c4af5731001b211ca7a52bce16/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd", "html_url": "https://github.com/rust-lang/rust/commit/b0fe3d929f6f8764f371970b9f9ca9e7c415dafd"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "744f30a93c2a2d1d4da3b29f77fca1207988b732", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6f007d9a8e676c4af5731001b211ca7a52bce16/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f007d9a8e676c4af5731001b211ca7a52bce16/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=e6f007d9a8e676c4af5731001b211ca7a52bce16", "patch": "@@ -8,7 +8,8 @@ use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::lang_item::LangItemTarget;\n \n use crate::{\n-    autoderef, to_chalk_trait_id, traits::Solution, Interner, Substitution, TraitRef, Ty, TyKind,\n+    autoderef, to_chalk_trait_id, traits::Solution, Interner, Substitution, TraitRef, Ty,\n+    TyBuilder, TyKind,\n };\n \n use super::{InEnvironment, InferenceContext};\n@@ -44,8 +45,8 @@ impl<'a> InferenceContext<'a> {\n                 // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n                 let sig1 = ty1.callable_sig(self.db).expect(\"FnDef without callable sig\");\n                 let sig2 = ty2.callable_sig(self.db).expect(\"FnDef without callable sig\");\n-                let ptr_ty1 = Ty::fn_ptr(sig1);\n-                let ptr_ty2 = Ty::fn_ptr(sig2);\n+                let ptr_ty1 = TyBuilder::fn_ptr(sig1);\n+                let ptr_ty2 = TyBuilder::fn_ptr(sig2);\n                 self.coerce_merge_branch(&ptr_ty1, &ptr_ty2)\n             } else {\n                 cov_mark::hit!(coerce_merge_fail_fallback);\n@@ -95,7 +96,7 @@ impl<'a> InferenceContext<'a> {\n             (TyKind::FnDef(..), TyKind::Function { .. }) => match from_ty.callable_sig(self.db) {\n                 None => return false,\n                 Some(sig) => {\n-                    from_ty = Ty::fn_ptr(sig);\n+                    from_ty = TyBuilder::fn_ptr(sig);\n                 }\n             },\n "}, {"sha": "fd44efa07e2063b1da4d4d52884113a11f053166", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e6f007d9a8e676c4af5731001b211ca7a52bce16/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f007d9a8e676c4af5731001b211ca7a52bce16/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=e6f007d9a8e676c4af5731001b211ca7a52bce16", "patch": "@@ -818,21 +818,21 @@ impl TyBuilder {\n     pub fn unit() -> Ty {\n         TyKind::Tuple(0, Substitution::empty(&Interner)).intern(&Interner)\n     }\n-}\n-\n-impl Ty {\n-    pub fn adt_ty(adt: hir_def::AdtId, substs: Substitution) -> Ty {\n-        TyKind::Adt(AdtId(adt), substs).intern(&Interner)\n-    }\n \n-    pub fn fn_ptr(sig: CallableSig) -> Self {\n+    pub fn fn_ptr(sig: CallableSig) -> Ty {\n         TyKind::Function(FnPointer {\n             num_args: sig.params().len(),\n             sig: FnSig { abi: (), safety: Safety::Safe, variadic: sig.is_varargs },\n             substs: Substitution::from_iter(&Interner, sig.params_and_return.iter().cloned()),\n         })\n         .intern(&Interner)\n     }\n+}\n+\n+impl Ty {\n+    pub fn adt_ty(adt: hir_def::AdtId, substs: Substitution) -> Ty {\n+        TyKind::Adt(AdtId(adt), substs).intern(&Interner)\n+    }\n \n     pub fn builtin(builtin: BuiltinType) -> Self {\n         match builtin {"}]}