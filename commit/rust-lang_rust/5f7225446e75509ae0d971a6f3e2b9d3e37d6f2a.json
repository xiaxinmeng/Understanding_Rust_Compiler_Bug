{"sha": "5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzIyNTQ0NmU3NTUwOWFlMGQ5NzFhNmYzZTJiOWQzZTM3ZDZmMmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-30T22:00:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T22:00:07Z"}, "message": "Merge #4662\n\n4662: minor r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d1039f5fcac5cf5f4b9b48965852c343941fd42f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1039f5fcac5cf5f4b9b48965852c343941fd42f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0tdnCRBK7hj4Ov3rIwAAdHIIAJu0/1OJ14rDpamZ3VHY/6f9\ngm7w04gElfZU8WdL8i1B3YyzKS7ATZeTFs4QilaJtne2nz5RRJttNtNnWl1gGru0\nnt68z/rp1UjEf76++W4nR7UwhZYKm/5JlY5rg04el4helJiFc5OwYuwtByOLJ5aD\nQdgl5QdHja62FtGSJRzIu1sz99AmW48h5yRrnyvtkSkL1MfF7rJvj7SLkNZnOVP3\n0c56AAZZqyoy93ambxmpNpm7G2TDX3HCiBJOobVKj2hCNaDYSETSu8X0GhVZc/Ym\nrrsm84xPcPsuLXS+59+UtvMpNVuARFUP8dx+EVtt8MQIrqhbhykuwAzTMT/zyDM=\n=+iCK\n-----END PGP SIGNATURE-----\n", "payload": "tree d1039f5fcac5cf5f4b9b48965852c343941fd42f\nparent 07060b3daa9592090da45245ea13c28304449d9d\nparent e1829d8959d9f48302fec42d64216c158db13744\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590876007 +0000\ncommitter GitHub <noreply@github.com> 1590876007 +0000\n\nMerge #4662\n\n4662: minor r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "html_url": "https://github.com/rust-lang/rust/commit/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07060b3daa9592090da45245ea13c28304449d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/07060b3daa9592090da45245ea13c28304449d9d", "html_url": "https://github.com/rust-lang/rust/commit/07060b3daa9592090da45245ea13c28304449d9d"}, {"sha": "e1829d8959d9f48302fec42d64216c158db13744", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1829d8959d9f48302fec42d64216c158db13744", "html_url": "https://github.com/rust-lang/rust/commit/e1829d8959d9f48302fec42d64216c158db13744"}], "stats": {"total": 144, "additions": 73, "deletions": 71}, "files": [{"sha": "20dcde82068554952bb8f513d6b9c28b4f1b5507", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 73, "deletions": 71, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=5f7225446e75509ae0d971a6f3e2b9d3e37d6f2a", "patch": "@@ -8,7 +8,7 @@ use crate::{\n };\n \n pub fn generate_assists_docs(mode: Mode) -> Result<()> {\n-    let assists = collect_assists()?;\n+    let assists = Assist::collect()?;\n     generate_tests(&assists, mode)?;\n     generate_docs(&assists, mode)?;\n     Ok(())\n@@ -22,81 +22,61 @@ struct Assist {\n     after: String,\n }\n \n-fn hide_hash_comments(text: &str) -> String {\n-    text.split('\\n') // want final newline\n-        .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n-        .map(|it| format!(\"{}\\n\", it))\n-        .collect()\n-}\n-\n-fn reveal_hash_comments(text: &str) -> String {\n-    text.split('\\n') // want final newline\n-        .map(|it| {\n-            if it.starts_with(\"# \") {\n-                &it[2..]\n-            } else if it == \"#\" {\n-                \"\"\n-            } else {\n-                it\n-            }\n-        })\n-        .map(|it| format!(\"{}\\n\", it))\n-        .collect()\n-}\n-\n-fn collect_assists() -> Result<Vec<Assist>> {\n-    let mut res = Vec::new();\n-    for path in rust_files(&project_root().join(codegen::ASSISTS_DIR)) {\n-        collect_file(&mut res, path.as_path())?;\n-    }\n-    res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n-    return Ok(res);\n-\n-    fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n-        let text = fs::read_to_string(path)?;\n-        let comment_blocks = extract_comment_blocks_with_empty_lines(&text);\n-\n-        for block in comment_blocks {\n-            // FIXME: doesn't support blank lines yet, need to tweak\n-            // `extract_comment_blocks` for that.\n-            let mut lines = block.iter();\n-            let first_line = lines.next().unwrap();\n-            if !first_line.starts_with(\"Assist: \") {\n-                continue;\n-            }\n-            let id = first_line[\"Assist: \".len()..].to_string();\n-            assert!(\n-                id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n-                \"invalid assist id: {:?}\",\n-                id\n-            );\n-\n-            let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n-            assert!(\n-                doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'),\n-                \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n-                id, doc,\n-            );\n-\n-            let before = take_until(lines.by_ref(), \"```\");\n-\n-            assert_eq!(lines.next().unwrap().as_str(), \"->\");\n-            assert_eq!(lines.next().unwrap().as_str(), \"```\");\n-            let after = take_until(lines.by_ref(), \"```\");\n-            acc.push(Assist { id, doc, before, after })\n+impl Assist {\n+    fn collect() -> Result<Vec<Assist>> {\n+        let mut res = Vec::new();\n+        for path in rust_files(&project_root().join(codegen::ASSISTS_DIR)) {\n+            collect_file(&mut res, path.as_path())?;\n         }\n+        res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n+        return Ok(res);\n+\n+        fn collect_file(acc: &mut Vec<Assist>, path: &Path) -> Result<()> {\n+            let text = fs::read_to_string(path)?;\n+            let comment_blocks = extract_comment_blocks_with_empty_lines(&text);\n+\n+            for block in comment_blocks {\n+                // FIXME: doesn't support blank lines yet, need to tweak\n+                // `extract_comment_blocks` for that.\n+                let mut lines = block.iter();\n+                let first_line = lines.next().unwrap();\n+                if !first_line.starts_with(\"Assist: \") {\n+                    continue;\n+                }\n+                let id = first_line[\"Assist: \".len()..].to_string();\n+                assert!(\n+                    id.chars().all(|it| it.is_ascii_lowercase() || it == '_'),\n+                    \"invalid assist id: {:?}\",\n+                    id\n+                );\n+\n+                let doc = take_until(lines.by_ref(), \"```\").trim().to_string();\n+                assert!(\n+                    doc.chars().next().unwrap().is_ascii_uppercase() && doc.ends_with('.'),\n+                    \"\\n\\n{}: assist docs should be proper sentences, with capitalization and a full stop at the end.\\n\\n{}\\n\\n\",\n+                    id, doc,\n+                );\n+\n+                let before = take_until(lines.by_ref(), \"```\");\n+\n+                assert_eq!(lines.next().unwrap().as_str(), \"->\");\n+                assert_eq!(lines.next().unwrap().as_str(), \"```\");\n+                let after = take_until(lines.by_ref(), \"```\");\n+                acc.push(Assist { id, doc, before, after })\n+            }\n \n-        fn take_until<'a>(lines: impl Iterator<Item = &'a String>, marker: &str) -> String {\n-            let mut buf = Vec::new();\n-            for line in lines {\n-                if line == marker {\n-                    break;\n+            fn take_until<'a>(lines: impl Iterator<Item = &'a String>, marker: &str) -> String {\n+                let mut buf = Vec::new();\n+                for line in lines {\n+                    if line == marker {\n+                        break;\n+                    }\n+                    buf.push(line.clone());\n                 }\n-                buf.push(line.clone());\n+                buf.join(\"\\n\")\n             }\n-            buf.join(\"\\n\")\n+            Ok(())\n         }\n-        Ok(())\n     }\n }\n \n@@ -157,3 +137,25 @@ fn generate_docs(assists: &[Assist], mode: Mode) -> Result<()> {\n \n     codegen::update(&project_root().join(codegen::ASSISTS_DOCS), &buf, mode)\n }\n+\n+fn hide_hash_comments(text: &str) -> String {\n+    text.split('\\n') // want final newline\n+        .filter(|&it| !(it.starts_with(\"# \") || it == \"#\"))\n+        .map(|it| format!(\"{}\\n\", it))\n+        .collect()\n+}\n+\n+fn reveal_hash_comments(text: &str) -> String {\n+    text.split('\\n') // want final newline\n+        .map(|it| {\n+            if it.starts_with(\"# \") {\n+                &it[2..]\n+            } else if it == \"#\" {\n+                \"\"\n+            } else {\n+                it\n+            }\n+        })\n+        .map(|it| format!(\"{}\\n\", it))\n+        .collect()\n+}"}]}