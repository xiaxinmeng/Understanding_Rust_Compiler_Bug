{"sha": "5ccaed212e111e0850a764c1c090261c0c431413", "node_id": "C_kwDOAAsO6NoAKDVjY2FlZDIxMmUxMTFlMDg1MGE3NjRjMWMwOTAyNjFjMGM0MzE0MTM", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-11-02T14:56:28Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-11-04T19:10:53Z"}, "message": "rustdoc: create helper `GenericParamDef::lifetime`", "tree": {"sha": "e3d5730afef98ce11b54399c9f1757671ebf5048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d5730afef98ce11b54399c9f1757671ebf5048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccaed212e111e0850a764c1c090261c0c431413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccaed212e111e0850a764c1c090261c0c431413", "html_url": "https://github.com/rust-lang/rust/commit/5ccaed212e111e0850a764c1c090261c0c431413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccaed212e111e0850a764c1c090261c0c431413/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec50b629c6ef418a819b39fc332f209e8fa4908", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec50b629c6ef418a819b39fc332f209e8fa4908", "html_url": "https://github.com/rust-lang/rust/commit/7ec50b629c6ef418a819b39fc332f209e8fa4908"}], "stats": {"total": 41, "additions": 13, "deletions": 28}, "files": [{"sha": "85bd8446640dd70a8e7428b94de2e1993af163ea", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=5ccaed212e111e0850a764c1c090261c0c431413", "patch": "@@ -336,10 +336,7 @@ where\n                 match br {\n                     // We only care about named late bound regions, as we need to add them\n                     // to the 'for<>' section\n-                    ty::BrNamed(_, name) => Some(GenericParamDef {\n-                        name,\n-                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-                    }),\n+                    ty::BrNamed(_, name) => Some(GenericParamDef::lifetime(name)),\n                     _ => None,\n                 }\n             })"}, {"sha": "8a5463c10f210a62f1292e36a37208552f10c8cc", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5ccaed212e111e0850a764c1c090261c0c431413", "patch": "@@ -245,10 +245,7 @@ fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> Box<c\n \n     let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n         ty::BoundVariableKind::Region(ty::BrNamed(_, name)) if name != kw::UnderscoreLifetime => {\n-            Some(clean::GenericParamDef {\n-                name,\n-                kind: clean::GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-            })\n+            Some(clean::GenericParamDef::lifetime(name))\n         }\n         _ => None,\n     });"}, {"sha": "a83a57bfec3ae1aa2801117cb0e67a6c641a6e57", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5ccaed212e111e0850a764c1c090261c0c431413", "patch": "@@ -182,10 +182,9 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(GenericParamDef {\n-                name,\n-                kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-            }),\n+            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => {\n+                Some(GenericParamDef::lifetime(name))\n+            }\n             _ => None,\n         })\n         .collect();\n@@ -741,10 +740,7 @@ fn clean_ty_generics<'tcx>(\n                             p.get_bound_params()\n                                 .into_iter()\n                                 .flatten()\n-                                .map(|param| GenericParamDef {\n-                                    name: param.0,\n-                                    kind: GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-                                })\n+                                .map(|param| GenericParamDef::lifetime(param.0))\n                                 .collect(),\n                         ));\n                     }\n@@ -1156,10 +1152,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                 ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n                     if name != kw::UnderscoreLifetime =>\n                 {\n-                    Some(GenericParamDef {\n-                        name,\n-                        kind: GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-                    })\n+                    Some(GenericParamDef::lifetime(name))\n                 }\n                 _ => None,\n             });\n@@ -1720,10 +1713,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                     ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n                         if name != kw::UnderscoreLifetime =>\n                     {\n-                        Some(GenericParamDef {\n-                            name,\n-                            kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-                        })\n+                        Some(GenericParamDef::lifetime(name))\n                     }\n                     _ => None,\n                 })"}, {"sha": "7d97d2994e460ee3d46ba6d1169032109ea9d245", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=5ccaed212e111e0850a764c1c090261c0c431413", "patch": "@@ -51,10 +51,7 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> ThinVec<WP\n         let Some((bounds, _)) = tybounds.get_mut(ty) else { return true };\n         let bound_params = bound_params\n             .into_iter()\n-            .map(|param| clean::GenericParamDef {\n-                name: param.0,\n-                kind: clean::GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-            })\n+            .map(|param| clean::GenericParamDef::lifetime(param.0))\n             .collect();\n         merge_bounds(cx, bounds, bound_params, trait_did, name, rhs)\n     });"}, {"sha": "bbedfdd0eafe09031e5db1a379b62bc8011a0650", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccaed212e111e0850a764c1c090261c0c431413/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5ccaed212e111e0850a764c1c090261c0c431413", "patch": "@@ -1437,6 +1437,10 @@ pub(crate) struct GenericParamDef {\n }\n \n impl GenericParamDef {\n+    pub(crate) fn lifetime(name: Symbol) -> Self {\n+        Self { name, kind: GenericParamDefKind::Lifetime { outlives: Vec::new() } }\n+    }\n+\n     pub(crate) fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n             GenericParamDefKind::Lifetime { .. } | GenericParamDefKind::Const { .. } => false,"}]}