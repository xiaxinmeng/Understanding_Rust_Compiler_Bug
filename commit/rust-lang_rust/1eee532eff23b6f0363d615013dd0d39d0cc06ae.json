{"sha": "1eee532eff23b6f0363d615013dd0d39d0cc06ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZWU1MzJlZmYyM2I2ZjAzNjNkNjE1MDEzZGQwZDM5ZDBjYzA2YWU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-09-22T07:56:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-22T07:56:37Z"}, "message": "Rollup merge of #54409 - estebank:remove-in, r=pnkfelix\n\nDetect `for _ in in bar {}` typo\n\nFix #36611, #52964, without modifying the parsing of emplacement `in` to avoid further problems like #50832.", "tree": {"sha": "53f98613056ec3a2e3fdfa66bb0b01fffcb737bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53f98613056ec3a2e3fdfa66bb0b01fffcb737bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eee532eff23b6f0363d615013dd0d39d0cc06ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbpfW1CRBK7hj4Ov3rIwAAdHIIAE3uQ7Lmll9BfXFyMj0lA/lb\nFR5gOmqUX2IZY7V24XcsFI7cbsCyNd+1oT5gHGd3JHZmjiUgk1LduZzp119c36A1\n9Soh2BX9vQ/PNu4E1Hyc64cxBOP1ZPnjNeRZpvG4te+iQ1lB8+FQ5aBi3R3Fk5vs\n6io848JqexjSY/wEcX2eM8a2WcFQKw97UuZY4TZSYSobPnVVd30L5GQzvPku8S0D\nGwJbqQDltRIEmPRdVLCNA8hZtHuf+WJdVmV88U6ERivl79scK9sEImugBhcl5bmz\nYIaIe0RMmySXrk4WDBjylFZ5eqAdEtPQCM5Mc/jUNWw6gWuEAgEp5Gd173nSL08=\n=iHbi\n-----END PGP SIGNATURE-----\n", "payload": "tree 53f98613056ec3a2e3fdfa66bb0b01fffcb737bb\nparent 8455a7fcbe2a0ff5005ec5643a3300e6d4833543\nparent 06d577d8b25b5f2e131005a6bcc2e142748016e5\nauthor Pietro Albini <pietro@pietroalbini.org> 1537602997 +0200\ncommitter GitHub <noreply@github.com> 1537602997 +0200\n\nRollup merge of #54409 - estebank:remove-in, r=pnkfelix\n\nDetect `for _ in in bar {}` typo\n\nFix #36611, #52964, without modifying the parsing of emplacement `in` to avoid further problems like #50832.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eee532eff23b6f0363d615013dd0d39d0cc06ae", "html_url": "https://github.com/rust-lang/rust/commit/1eee532eff23b6f0363d615013dd0d39d0cc06ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eee532eff23b6f0363d615013dd0d39d0cc06ae/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8455a7fcbe2a0ff5005ec5643a3300e6d4833543", "url": "https://api.github.com/repos/rust-lang/rust/commits/8455a7fcbe2a0ff5005ec5643a3300e6d4833543", "html_url": "https://github.com/rust-lang/rust/commit/8455a7fcbe2a0ff5005ec5643a3300e6d4833543"}, {"sha": "06d577d8b25b5f2e131005a6bcc2e142748016e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d577d8b25b5f2e131005a6bcc2e142748016e5", "html_url": "https://github.com/rust-lang/rust/commit/06d577d8b25b5f2e131005a6bcc2e142748016e5"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "4411e008a4d4381ebe9e3e3292f225e44adff4c9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1eee532eff23b6f0363d615013dd0d39d0cc06ae", "patch": "@@ -2703,8 +2703,8 @@ impl<'a> Parser<'a> {\n                   token::Literal(token::Float(n), _suf) => {\n                     self.bump();\n                     let fstr = n.as_str();\n-                    let mut err = self.diagnostic().struct_span_err(self.prev_span,\n-                        &format!(\"unexpected token: `{}`\", n));\n+                    let mut err = self.diagnostic()\n+                        .struct_span_err(self.prev_span, &format!(\"unexpected token: `{}`\", n));\n                     err.span_label(self.prev_span, \"unexpected token\");\n                     if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n                         let float = match fstr.parse::<f64>().ok() {\n@@ -2864,8 +2864,8 @@ impl<'a> Parser<'a> {\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 let span_of_tilde = lo;\n-                let mut err = self.diagnostic().struct_span_err(span_of_tilde,\n-                        \"`~` cannot be used as a unary operator\");\n+                let mut err = self.diagnostic()\n+                    .struct_span_err(span_of_tilde, \"`~` cannot be used as a unary operator\");\n                 err.span_suggestion_short_with_applicability(\n                     span_of_tilde,\n                     \"use `!` to perform bitwise negation\",\n@@ -3423,6 +3423,24 @@ impl<'a> Parser<'a> {\n             );\n             err.emit();\n         }\n+        let in_span = self.prev_span;\n+        if self.eat_keyword(keywords::In) {\n+            // a common typo: `for _ in in bar {}`\n+            let mut err = self.sess.span_diagnostic.struct_span_err(\n+                self.prev_span,\n+                \"expected iterable, found keyword `in`\",\n+            );\n+            err.span_suggestion_short_with_applicability(\n+                in_span.until(self.prev_span),\n+                \"remove the duplicated `in`\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+            err.note(\"if you meant to use emplacement syntax, it is obsolete (for now, anyway)\");\n+            err.note(\"for more information on the status of emplacement syntax, see <\\\n+                      https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\");\n+            err.emit();\n+        }\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n         let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n@@ -4766,12 +4784,9 @@ impl<'a> Parser<'a> {\n         if !self.eat(&token::OpenDelim(token::Brace)) {\n             let sp = self.span;\n             let tok = self.this_token_to_string();\n-            let mut do_not_suggest_help = false;\n             let mut e = self.span_fatal(sp, &format!(\"expected `{{`, found `{}`\", tok));\n-            if self.token.is_keyword(keywords::In) || self.token == token::Colon {\n-                do_not_suggest_help = true;\n-                e.span_label(sp, \"expected `{`\");\n-            }\n+            let do_not_suggest_help =\n+                self.token.is_keyword(keywords::In) || self.token == token::Colon;\n \n             if self.token.is_ident_named(\"and\") {\n                 e.span_suggestion_short_with_applicability(\n@@ -4802,6 +4817,7 @@ impl<'a> Parser<'a> {\n                         || do_not_suggest_help {\n                         // if the next token is an open brace (e.g., `if a b {`), the place-\n                         // inside-a-block suggestion would be more likely wrong than right\n+                        e.span_label(sp, \"expected `{`\");\n                         return Err(e);\n                     }\n                     let mut stmt_span = stmt.span;"}, {"sha": "aa54425efa342dd43c839164f0bce56e46e7e03d", "filename": "src/test/ui/did_you_mean/issue-54109-and_instead_of_ampersands.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-and_instead_of_ampersands.stderr?ref=1eee532eff23b6f0363d615013dd0d39d0cc06ae", "patch": "@@ -2,16 +2,20 @@ error: expected `{`, found `and`\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:14:10\n    |\n LL |     if a and b {\n-   |     --   ^^^ help: use `&&` instead of `and` for the boolean operator\n-   |     |\n+   |     --   ^^^\n+   |     |    |\n+   |     |    expected `{`\n+   |     |    help: use `&&` instead of `and` for the boolean operator\n    |     this `if` statement has a condition, but no block\n \n error: expected `{`, found `or`\n   --> $DIR/issue-54109-and_instead_of_ampersands.rs:23:10\n    |\n LL |     if a or b {\n-   |     --   ^^ help: use `||` instead of `or` for the boolean operator\n-   |     |\n+   |     --   ^^\n+   |     |    |\n+   |     |    expected `{`\n+   |     |    help: use `||` instead of `or` for the boolean operator\n    |     this `if` statement has a condition, but no block\n \n error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `and`"}, {"sha": "9bc9aaff298db1c81542ef4e4a587356149cfa8c", "filename": "src/test/ui/parser/if-in-in.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs?ref=1eee532eff23b6f0363d615013dd0d39d0cc06ae", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    for i in in 1..2 {\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "9926fcc0858e546b13e349f0dbe19cf262ae2f11", "filename": "src/test/ui/parser/if-in-in.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eee532eff23b6f0363d615013dd0d39d0cc06ae/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr?ref=1eee532eff23b6f0363d615013dd0d39d0cc06ae", "patch": "@@ -0,0 +1,13 @@\n+error: expected iterable, found keyword `in`\n+  --> $DIR/if-in-in.rs:2:14\n+   |\n+LL |     for i in in 1..2 {\n+   |           ---^^\n+   |           |\n+   |           help: remove the duplicated `in`\n+   |\n+   = note: if you meant to use emplacement syntax, it is obsolete (for now, anyway)\n+   = note: for more information on the status of emplacement syntax, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n+\n+error: aborting due to previous error\n+"}]}