{"sha": "ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNjczNTQzOTIwZDljMWVjMGY0M2FkMWE2ZDlmZTQxNWJiYmY5NTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-09T21:36:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-09T21:36:03Z"}, "message": "Auto merge of #26150 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #26111, #26125, #26129, #26131, #26132, #26133, #26134, #26136, #26140, #26144\n- Failed merges:", "tree": {"sha": "c97d8526447a9a7b36957cd900be8b49cd12be70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c97d8526447a9a7b36957cd900be8b49cd12be70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "html_url": "https://github.com/rust-lang/rust/commit/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f06e02657865d944a3b99a628077dc2214ea2e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/f06e02657865d944a3b99a628077dc2214ea2e83", "html_url": "https://github.com/rust-lang/rust/commit/f06e02657865d944a3b99a628077dc2214ea2e83"}, {"sha": "6b6b380fd1fecd3877a67a540c20c80f46b0ecc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6b380fd1fecd3877a67a540c20c80f46b0ecc6", "html_url": "https://github.com/rust-lang/rust/commit/6b6b380fd1fecd3877a67a540c20c80f46b0ecc6"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "8d57238dc175d4c99d63449e2c00e93d9df5e83d", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -1367,7 +1367,6 @@ Traits can include default implementations of methods, as in:\n ```\n trait Foo {\n     fn bar(&self);\n-\n     fn baz(&self) { println!(\"We called baz.\"); }\n }\n ```"}, {"sha": "7d555b52a986df0329f7f1d42877ddc85aa15089", "filename": "src/doc/trpl/const-and-static.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fconst-and-static.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fconst-and-static.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconst-and-static.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -64,7 +64,10 @@ unsafe {\n \n [unsafe]: unsafe.html\n \n-Furthermore, any type stored in a `static` must be `Sync`.\n+Furthermore, any type stored in a `static` must be `Sync`, and may not have\n+a [`Drop`][drop] implementation.\n+\n+[drop]: drop.html\n \n # Initializing\n \n@@ -78,7 +81,3 @@ Almost always, if you can choose between the two, choose `const`. It\u2019s pretty\n rare that you actually want a memory location associated with your constant,\n and using a const allows for optimizations like constant propagation not only\n in your crate but downstream crates.\n-\n-A const can be thought of as a `#define` in C: it has metadata overhead but it\n-has no runtime overhead. \u201cShould I use a #define or a static in C,\u201d is largely\n-the same question as whether you should use a const or a static in Rust."}, {"sha": "b24d50c890da4a259c95d12adf9f80724601892e", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -674,9 +674,13 @@ let handles: Vec<_> = philosophers.into_iter().map(|p| {\n \n Finally, inside of our `map()`/`collect()` loop, we call `table.clone()`. The\n `clone()` method on `Arc<T>` is what bumps up the reference count, and when it\n-goes out of scope, it decrements the count. You\u2019ll notice we can introduce a\n-new binding to `table` here, and it will shadow the old one. This is often used\n-so that you don\u2019t need to come up with two unique names.\n+goes out of scope, it decrements the count. This is needed so that we know how\n+many references to `table` exist across our threads. If we didn\u2019t have a count,\n+we wouldn\u2019t know how to deallocate it.\n+\n+You\u2019ll notice we can introduce a new binding to `table` here, and it will\n+shadow the old one. This is often used so that you don\u2019t need to come up with\n+two unique names.\n \n With this, our program works! Only two philosophers can eat at any one time,\n and so you\u2019ll get some output like this:"}, {"sha": "8077f04ed60842b49aba8b7080b7eb5539a1201c", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -342,8 +342,10 @@ Note that frameworks are only available on OSX targets.\n The different `kind` values are meant to differentiate how the native library\n participates in linkage. From a linkage perspective, the rust compiler creates\n two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary).\n-Native dynamic libraries and frameworks are propagated to the final artifact\n-boundary, while static libraries are not propagated at all.\n+Native dynamic library and framework dependencies are propagated to the final\n+artifact boundary, while static library dependencies are not propagated at\n+all, because the static libraries are integrated directly into the subsequent\n+artifact.\n \n A few examples of how this model can be used are:\n "}, {"sha": "1afa622db7dd39a75d9c93957acca2b4d4da6180", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -86,8 +86,8 @@ impl Circle {\n # Chaining method calls\n \n So, now we know how to call a method, such as `foo.bar()`. But what about our\n-original example, `foo.bar().baz()`? This is called \u2018method chaining\u2019, and we\n-can do it by returning `self`.\n+original example, `foo.bar().baz()`? This is called \u2018method chaining\u2019. Let\u2019s\n+look at an example:\n \n ```rust\n struct Circle {"}, {"sha": "0f356d75abc86d45fa7f67db1966c5c4a3499bba", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -154,6 +154,31 @@ match x {\n \n This prints `Got an int!`.\n \n+If you\u2019re using `if` with multiple patterns, the `if` applies to both sides:\n+\n+```rust\n+let x = 4;\n+let y = false;\n+\n+match x {\n+    4 | 5 if y => println!(\"yes\"),\n+    _ => println!(\"no\"),\n+}\n+```\n+\n+This prints `no`, because the `if` applies to the whole of `4 | 5`, and not to\n+just the `5`, In other words, the the precedence of `if` behaves like this:\n+\n+```text\n+(4 | 5) if y => ...\n+```\n+\n+not this:\n+\n+```text\n+4 | (5 if y) => ...\n+```\n+\n # ref and ref mut\n \n If you want to get a [reference][ref], use the `ref` keyword:"}, {"sha": "b27db2ab7bea8c0ac120f59b9d3540ee05269159", "filename": "src/doc/trpl/references-and-borrowing.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Freferences-and-borrowing.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -151,9 +151,9 @@ As it turns out, there are rules.\n \n Here\u2019s the rules about borrowing in Rust:\n \n-First, any borrow must last for a smaller scope than the owner. Second, you may\n-have one or the other of these two kinds of borrows, but not both at the same\n-time:\n+First, any borrow must last for a scope no greater than that of the owner.\n+Second, you may have one or the other of these two kinds of borrows, but not\n+both at the same time:\n \n * one or more references (`&T`) to a resource.\n * exactly one mutable reference (`&mut T`)"}, {"sha": "853d12172af5ef67010e6db28f4f987958d099c0", "filename": "src/librustc/middle/traits/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Flibrustc%2Fmiddle%2Ftraits%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Flibrustc%2Fmiddle%2Ftraits%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2FREADME.md?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -120,7 +120,7 @@ implement `Convert` like so:\n \n ```rust\n impl Convert<uint> for int { ... } // int -> uint\n-impl Convert<int> for uint { ... } // uint -> uint\n+impl Convert<int> for uint { ... } // uint -> int\n ```\n \n Now imagine there is some code like the following:"}, {"sha": "00932712a07a436c2526c75ced2ea6931944054c", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac673543920d9c1ec0f43ad1a6d9fe415bbbf957/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=ac673543920d9c1ec0f43ad1a6d9fe415bbbf957", "patch": "@@ -27,7 +27,7 @@ pub const HEX_WIDTH: usize = 10;\n // 2. For each element of the path, emit the length plus the element\n // 3. End the path with \"E\"\n //\n-// For example, \"_ZN4testE\" => \"test\" and \"_ZN3foo3bar\" => \"foo::bar\".\n+// For example, \"_ZN4testE\" => \"test\" and \"_ZN3foo3barE\" => \"foo::bar\".\n //\n // We're the ones printing our backtraces, so we can't rely on anything else to\n // demangle our symbols. It's *much* nicer to look at demangled symbols, so"}]}