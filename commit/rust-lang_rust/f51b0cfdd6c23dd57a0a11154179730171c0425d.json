{"sha": "f51b0cfdd6c23dd57a0a11154179730171c0425d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MWIwY2ZkZDZjMjNkZDU3YTBhMTExNTQxNzk3MzAxNzFjMDQyNWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-03T12:44:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T12:44:09Z"}, "message": "Merge #5116\n\n5116: Categorize assists r=matklad a=kjeremy\n\nCategorize assists so that editors can use them. Follows the LSP spec pretty close (and some things may need adjustments) but this populates the Refactor menu in vscode and pushes quickfixes through again.\r\n\r\nThis is a prerequisite to filtering out assists that the client doesn't care about.\r\n\r\nFixes #4147\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "f856e6b751b23a20d68e9df5350ec39d5e8ee85b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f856e6b751b23a20d68e9df5350ec39d5e8ee85b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f51b0cfdd6c23dd57a0a11154179730171c0425d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/ygZCRBK7hj4Ov3rIwAAdHIIAKTIexHdvDqzfN5mDuT7I4K/\nHSwl8K79ZxAH5KhkKR0eg9XN8ICTIMymhwvK36i44SljgWFcWGIqUt4FpuLR3hBZ\n7drhw/f3tOXd8wFIBgIR/P8SlHbYd5IvG/X2EXFCr+717Gx0RbCbUPPjB/S104M3\n58z3uKL9mOCKMfM1okpjxWd+PVcM2MW7Nho2g7z3AveMIrkELJ+WNsgP4xBdEogC\n4nFkAFNrR+vnOgyPWS7NTVV3oSuDhNj80p2vSpnOfe/o/oLyoZTu72Gwqlk6e1kc\nG/3aff2F6mXLEWZ1TWIp6Ba9NH9GOzTWSWP80iF6cVWweNfC2RVBt/QrBqDRcqo=\n=NrqN\n-----END PGP SIGNATURE-----\n", "payload": "tree f856e6b751b23a20d68e9df5350ec39d5e8ee85b\nparent ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1\nparent 4c9347ecc3356748c52847a29d5e53a65778dc13\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593780249 +0000\ncommitter GitHub <noreply@github.com> 1593780249 +0000\n\nMerge #5116\n\n5116: Categorize assists r=matklad a=kjeremy\n\nCategorize assists so that editors can use them. Follows the LSP spec pretty close (and some things may need adjustments) but this populates the Refactor menu in vscode and pushes quickfixes through again.\r\n\r\nThis is a prerequisite to filtering out assists that the client doesn't care about.\r\n\r\nFixes #4147\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f51b0cfdd6c23dd57a0a11154179730171c0425d", "html_url": "https://github.com/rust-lang/rust/commit/f51b0cfdd6c23dd57a0a11154179730171c0425d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f51b0cfdd6c23dd57a0a11154179730171c0425d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1", "html_url": "https://github.com/rust-lang/rust/commit/ef6a6d75d5dba2825e6b90e67e0b147a5f7158e1"}, {"sha": "4c9347ecc3356748c52847a29d5e53a65778dc13", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9347ecc3356748c52847a29d5e53a65778dc13", "html_url": "https://github.com/rust-lang/rust/commit/4c9347ecc3356748c52847a29d5e53a65778dc13"}], "stats": {"total": 1035, "additions": 593, "deletions": 442}, "files": [{"sha": "acb07e36a25065462f9d1c9bd7d4575b9dc26a10", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -8,7 +8,7 @@ use stdx::SepBy;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: add_custom_impl\n@@ -52,7 +52,7 @@ pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         format!(\"Add custom impl `{}` for `{}`\", trait_token.text().as_str(), annotated_name);\n \n     let target = attr.syntax().text_range();\n-    acc.add(AssistId(\"add_custom_impl\"), label, target, |builder| {\n+    acc.add(AssistId(\"add_custom_impl\", AssistKind::Refactor), label, target, |builder| {\n         let new_attr_input = input\n             .syntax()\n             .descendants_with_tokens()"}, {"sha": "e2b94e7f89499aeaad8ffb1c8277d5da4126caac", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     TextSize,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_derive\n //\n@@ -29,7 +29,7 @@ pub(crate) fn add_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |builder| {\n+    acc.add(AssistId(\"add_derive\", AssistKind::None), \"Add `#[derive]`\", target, |builder| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())"}, {"sha": "39a5321d171ef44ddc407b7355d65f6751932d31", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_explicit_type\n //\n@@ -59,7 +59,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n \n     let inferred_type = ty.display_source_code(ctx.db(), module.into()).ok()?;\n     acc.add(\n-        AssistId(\"add_explicit_type\"),\n+        AssistId(\"add_explicit_type\", AssistKind::RefactorRewrite),\n         format!(\"Insert explicit type `{}`\", inferred_type),\n         pat_range,\n         |builder| match ascribed_ty {"}, {"sha": "a324670ed1f8be4764e6d00fa010cf0e66c41c85", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -2,7 +2,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n-use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n+use crate::{utils::FamousDefs, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_from_impl_for_enum\n //\n@@ -45,7 +45,7 @@ pub(crate) fn add_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) ->\n \n     let target = variant.syntax().text_range();\n     acc.add(\n-        AssistId(\"add_from_impl_for_enum\"),\n+        AssistId(\"add_from_impl_for_enum\", AssistKind::Refactor),\n         \"Add From impl for this enum variant\",\n         target,\n         |edit| {"}, {"sha": "7150eb53a5fa4da5025cc0e750f967fe95fbd06b", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     assist_config::SnippetCap,\n     utils::{render_snippet, Cursor},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: add_function\n@@ -62,7 +62,7 @@ pub(crate) fn add_function(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let function_builder = FunctionBuilder::from_call(&ctx, &call, &path, target_module)?;\n \n     let target = call.syntax().text_range();\n-    acc.add(AssistId(\"add_function\"), \"Add function\", target, |builder| {\n+    acc.add(AssistId(\"add_function\", AssistKind::None), \"Add function\", target, |builder| {\n         let function_template = function_builder.render();\n         builder.edit_file(function_template.file);\n         let new_fn = function_template.to_string(ctx.config.snippet_cap);"}, {"sha": "2f603ef9cfaf3f1d9cb2b7bbffd13692901d1094", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::ast::{self, AstNode, NameOwner, TypeParamsOwner};\n use stdx::{format_to, SepBy};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_impl\n //\n@@ -26,38 +26,45 @@ pub(crate) fn add_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n-    acc.add(AssistId(\"add_impl\"), format!(\"Implement {}\", name.text().as_str()), target, |edit| {\n-        let type_params = nominal.type_param_list();\n-        let start_offset = nominal.syntax().text_range().end();\n-        let mut buf = String::new();\n-        buf.push_str(\"\\n\\nimpl\");\n-        if let Some(type_params) = &type_params {\n-            format_to!(buf, \"{}\", type_params.syntax());\n-        }\n-        buf.push_str(\" \");\n-        buf.push_str(name.text().as_str());\n-        if let Some(type_params) = type_params {\n-            let lifetime_params = type_params\n-                .lifetime_params()\n-                .filter_map(|it| it.lifetime_token())\n-                .map(|it| it.text().clone());\n-            let type_params =\n-                type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n+    acc.add(\n+        AssistId(\"add_impl\", AssistKind::Refactor),\n+        format!(\"Implement {}\", name.text().as_str()),\n+        target,\n+        |edit| {\n+            let type_params = nominal.type_param_list();\n+            let start_offset = nominal.syntax().text_range().end();\n+            let mut buf = String::new();\n+            buf.push_str(\"\\n\\nimpl\");\n+            if let Some(type_params) = &type_params {\n+                format_to!(buf, \"{}\", type_params.syntax());\n+            }\n+            buf.push_str(\" \");\n+            buf.push_str(name.text().as_str());\n+            if let Some(type_params) = type_params {\n+                let lifetime_params = type_params\n+                    .lifetime_params()\n+                    .filter_map(|it| it.lifetime_token())\n+                    .map(|it| it.text().clone());\n+                let type_params = type_params\n+                    .type_params()\n+                    .filter_map(|it| it.name())\n+                    .map(|it| it.text().clone());\n \n-            let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n-            format_to!(buf, \"<{}>\", generic_params)\n-        }\n-        match ctx.config.snippet_cap {\n-            Some(cap) => {\n-                buf.push_str(\" {\\n    $0\\n}\");\n-                edit.insert_snippet(cap, start_offset, buf);\n+                let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n+                format_to!(buf, \"<{}>\", generic_params)\n             }\n-            None => {\n-                buf.push_str(\" {\\n}\");\n-                edit.insert(start_offset, buf);\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    buf.push_str(\" {\\n    $0\\n}\");\n+                    edit.insert_snippet(cap, start_offset, buf);\n+                }\n+                None => {\n+                    buf.push_str(\" {\\n}\");\n+                    edit.insert(start_offset, buf);\n+                }\n             }\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "d6aaf53f10246a3b1cd80d85ef5d6170f730f04f", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     assist_context::{AssistContext, Assists},\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n     utils::{get_missing_assoc_items, render_snippet, resolve_target_trait, Cursor},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n #[derive(PartialEq)]\n@@ -147,7 +147,7 @@ fn add_missing_impl_members_inner(\n     }\n \n     let target = impl_def.syntax().text_range();\n-    acc.add(AssistId(assist_id), label, target, |builder| {\n+    acc.add(AssistId(assist_id, AssistKind::QuickFix), label, target, |builder| {\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = ctx.sema.scope_for_def(trait_);\n         let target_scope = ctx.sema.scope(impl_item_list.syntax());"}, {"sha": "0b3d29c7c55dbf9436bbf7d1ac840e9c77af18ca", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n };\n use stdx::{format_to, SepBy};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: add_new\n //\n@@ -42,7 +42,7 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     let target = strukt.syntax().text_range();\n-    acc.add(AssistId(\"add_new\"), \"Add default constructor\", target, |builder| {\n+    acc.add(AssistId(\"add_new\", AssistKind::None), \"Add default constructor\", target, |builder| {\n         let mut buf = String::with_capacity(512);\n \n         if impl_def.is_some() {"}, {"sha": "f7e1a7b05df118106758f9d44313d178f0769202", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -4,7 +4,7 @@ use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: add_turbo_fish\n@@ -45,12 +45,15 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         mark::hit!(add_turbo_fish_non_generic);\n         return None;\n     }\n-    acc.add(AssistId(\"add_turbo_fish\"), \"Add `::<>`\", ident.text_range(), |builder| {\n-        match ctx.config.snippet_cap {\n+    acc.add(\n+        AssistId(\"add_turbo_fish\", AssistKind::RefactorRewrite),\n+        \"Add `::<>`\",\n+        ident.text_range(),\n+        |builder| match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, ident.text_range().end(), \"::<${0:_}>\"),\n             None => builder.insert(ident.text_range().end(), \"::<_>\"),\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "de701f8b8313cdc9e8c5ea9229bff1cf90b76fec", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::ast::{self, AstNode};\n \n-use crate::{utils::invert_boolean_expression, AssistContext, AssistId, Assists};\n+use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: apply_demorgan\n //\n@@ -39,11 +39,16 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let rhs_range = rhs.syntax().text_range();\n     let not_rhs = invert_boolean_expression(rhs);\n \n-    acc.add(AssistId(\"apply_demorgan\"), \"Apply De Morgan's law\", op_range, |edit| {\n-        edit.replace(op_range, opposite_op);\n-        edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n-        edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n-    })\n+    acc.add(\n+        AssistId(\"apply_demorgan\", AssistKind::RefactorRewrite),\n+        \"Apply De Morgan's law\",\n+        op_range,\n+        |edit| {\n+            edit.replace(op_range, opposite_op);\n+            edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n+            edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n+        },\n+    )\n }\n \n // Return the opposite text for a given logical operator, if it makes sense"}, {"sha": "947be3b9b4a8f10340d9041d3b89b7b856435b5a", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -13,7 +13,9 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{utils::insert_use_statement, AssistContext, AssistId, Assists, GroupLabel};\n+use crate::{\n+    utils::insert_use_statement, AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n+};\n \n // Assist: auto_import\n //\n@@ -46,7 +48,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     for import in proposed_imports {\n         acc.add_group(\n             &group,\n-            AssistId(\"auto_import\"),\n+            AssistId(\"auto_import\", AssistKind::QuickFix),\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {"}, {"sha": "24e5f6963220f00472c2b7758d787c8f7f076232", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     AstNode, SyntaxNode,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n use test_utils::mark;\n \n // Assist: change_return_type_to_result\n@@ -35,7 +35,7 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n     let block_expr = &fn_def.body()?;\n \n     acc.add(\n-        AssistId(\"change_return_type_to_result\"),\n+        AssistId(\"change_return_type_to_result\", AssistKind::RefactorRewrite),\n         \"Change return type to Result\",\n         type_ref.syntax().text_range(),\n         |builder| {"}, {"sha": "703ee2143f2f2463099978827a89461b00ddd0dc", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n };\n use test_utils::mark;\n \n-use crate::{utils::vis_offset, AssistContext, AssistId, Assists};\n+use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: change_visibility\n //\n@@ -62,16 +62,21 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     };\n \n-    acc.add(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", target, |edit| {\n-        edit.insert(offset, \"pub(crate) \");\n-    })\n+    acc.add(\n+        AssistId(\"change_visibility\", AssistKind::RefactorRewrite),\n+        \"Change visibility to pub(crate)\",\n+        target,\n+        |edit| {\n+            edit.insert(offset, \"pub(crate) \");\n+        },\n+    )\n }\n \n fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n     if vis.syntax().text() == \"pub\" {\n         let target = vis.syntax().text_range();\n         return acc.add(\n-            AssistId(\"change_visibility\"),\n+            AssistId(\"change_visibility\", AssistKind::RefactorRewrite),\n             \"Change Visibility to pub(crate)\",\n             target,\n             |edit| {\n@@ -82,7 +87,7 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n     if vis.syntax().text() == \"pub(crate)\" {\n         let target = vis.syntax().text_range();\n         return acc.add(\n-            AssistId(\"change_visibility\"),\n+            AssistId(\"change_visibility\", AssistKind::RefactorRewrite),\n             \"Change visibility to pub\",\n             target,\n             |edit| {"}, {"sha": "330459f3c85322fac7fa42ffad6f4ea56a555290", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 81, "deletions": 75, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::invert_boolean_expression,\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: convert_to_guarded_return\n@@ -99,86 +99,92 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n \n     let target = if_expr.syntax().text_range();\n-    acc.add(AssistId(\"convert_to_guarded_return\"), \"Convert to guarded return\", target, |edit| {\n-        let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n-        let new_block = match if_let_pat {\n-            None => {\n-                // If.\n-                let new_expr = {\n-                    let then_branch =\n-                        make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n-                    let cond = invert_boolean_expression(cond_expr);\n-                    make::expr_if(make::condition(cond, None), then_branch).indent(if_indent_level)\n-                };\n-                replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n-            }\n-            Some((path, bound_ident)) => {\n-                // If-let.\n-                let match_expr = {\n-                    let happy_arm = {\n-                        let pat = make::tuple_struct_pat(\n-                            path,\n-                            once(make::bind_pat(make::name(\"it\")).into()),\n-                        );\n-                        let expr = {\n-                            let name_ref = make::name_ref(\"it\");\n-                            let segment = make::path_segment(name_ref);\n-                            let path = make::path_unqualified(segment);\n-                            make::expr_path(path)\n-                        };\n-                        make::match_arm(once(pat.into()), expr)\n+    acc.add(\n+        AssistId(\"convert_to_guarded_return\", AssistKind::RefactorRewrite),\n+        \"Convert to guarded return\",\n+        target,\n+        |edit| {\n+            let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n+            let new_block = match if_let_pat {\n+                None => {\n+                    // If.\n+                    let new_expr = {\n+                        let then_branch =\n+                            make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n+                        let cond = invert_boolean_expression(cond_expr);\n+                        make::expr_if(make::condition(cond, None), then_branch)\n+                            .indent(if_indent_level)\n                     };\n+                    replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n+                }\n+                Some((path, bound_ident)) => {\n+                    // If-let.\n+                    let match_expr = {\n+                        let happy_arm = {\n+                            let pat = make::tuple_struct_pat(\n+                                path,\n+                                once(make::bind_pat(make::name(\"it\")).into()),\n+                            );\n+                            let expr = {\n+                                let name_ref = make::name_ref(\"it\");\n+                                let segment = make::path_segment(name_ref);\n+                                let path = make::path_unqualified(segment);\n+                                make::expr_path(path)\n+                            };\n+                            make::match_arm(once(pat.into()), expr)\n+                        };\n \n-                    let sad_arm = make::match_arm(\n-                        // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n-                        once(make::placeholder_pat().into()),\n-                        early_expression,\n-                    );\n+                        let sad_arm = make::match_arm(\n+                            // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n+                            once(make::placeholder_pat().into()),\n+                            early_expression,\n+                        );\n \n-                    make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n-                };\n+                        make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n+                    };\n \n-                let let_stmt = make::let_stmt(\n-                    make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n-                    Some(match_expr),\n+                    let let_stmt = make::let_stmt(\n+                        make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n+                        Some(match_expr),\n+                    );\n+                    let let_stmt = let_stmt.indent(if_indent_level);\n+                    replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n+                }\n+            };\n+            edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n+\n+            fn replace(\n+                new_expr: &SyntaxNode,\n+                then_block: &ast::BlockExpr,\n+                parent_block: &ast::BlockExpr,\n+                if_expr: &ast::IfExpr,\n+            ) -> SyntaxNode {\n+                let then_block_items = then_block.dedent(IndentLevel(1));\n+                let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n+                let end_of_then =\n+                    if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n+                        end_of_then.prev_sibling_or_token().unwrap()\n+                    } else {\n+                        end_of_then\n+                    };\n+                let mut then_statements = new_expr.children_with_tokens().chain(\n+                    then_block_items\n+                        .syntax()\n+                        .children_with_tokens()\n+                        .skip(1)\n+                        .take_while(|i| *i != end_of_then),\n                 );\n-                let let_stmt = let_stmt.indent(if_indent_level);\n-                replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n+                replace_children(\n+                    &parent_block.syntax(),\n+                    RangeInclusive::new(\n+                        if_expr.clone().syntax().clone().into(),\n+                        if_expr.syntax().clone().into(),\n+                    ),\n+                    &mut then_statements,\n+                )\n             }\n-        };\n-        edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n-\n-        fn replace(\n-            new_expr: &SyntaxNode,\n-            then_block: &ast::BlockExpr,\n-            parent_block: &ast::BlockExpr,\n-            if_expr: &ast::IfExpr,\n-        ) -> SyntaxNode {\n-            let then_block_items = then_block.dedent(IndentLevel(1));\n-            let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n-            let end_of_then =\n-                if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n-                    end_of_then.prev_sibling_or_token().unwrap()\n-                } else {\n-                    end_of_then\n-                };\n-            let mut then_statements = new_expr.children_with_tokens().chain(\n-                then_block_items\n-                    .syntax()\n-                    .children_with_tokens()\n-                    .skip(1)\n-                    .take_while(|i| *i != end_of_then),\n-            );\n-            replace_children(\n-                &parent_block.syntax(),\n-                RangeInclusive::new(\n-                    if_expr.clone().syntax().clone().into(),\n-                    if_expr.syntax().clone().into(),\n-                ),\n-                &mut then_statements,\n-            )\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "2b8e273b3e2eb3c9225e0f3aa101c3d166e16033", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -10,7 +10,8 @@ use ra_syntax::{\n use rustc_hash::FxHashSet;\n \n use crate::{\n-    assist_context::AssistBuilder, utils::insert_use_statement, AssistContext, AssistId, Assists,\n+    assist_context::AssistBuilder, utils::insert_use_statement, AssistContext, AssistId,\n+    AssistKind, Assists,\n };\n \n // Assist: extract_struct_from_enum_variant\n@@ -48,7 +49,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     let current_module = enum_hir.module(ctx.db());\n     let target = variant.syntax().text_range();\n     acc.add(\n-        AssistId(\"extract_struct_from_enum_variant\"),\n+        AssistId(\"extract_struct_from_enum_variant\", AssistKind::RefactorRewrite),\n         \"Extract struct from enum variant\",\n         target,\n         |builder| {"}, {"sha": "481baf1a40ab39ce97f750332c878503e340ae9d", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 71, "deletions": 66, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n use stdx::format_to;\n use test_utils::mark;\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: extract_variable\n //\n@@ -43,80 +43,85 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n     let target = expr.syntax().text_range();\n-    acc.add(AssistId(\"extract_variable\"), \"Extract into variable\", target, move |edit| {\n-        let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n-            Some(field) => field.name_ref(),\n-            None => None,\n-        };\n-\n-        let mut buf = String::new();\n-\n-        let var_name = match &field_shorthand {\n-            Some(it) => it.to_string(),\n-            None => \"var_name\".to_string(),\n-        };\n-        let expr_range = match &field_shorthand {\n-            Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n-            None => expr.syntax().text_range(),\n-        };\n-\n-        if wrap_in_block {\n-            format_to!(buf, \"{{ let {} = \", var_name);\n-        } else {\n-            format_to!(buf, \"let {} = \", var_name);\n-        };\n-        format_to!(buf, \"{}\", expr.syntax());\n-\n-        let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n-        let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n-            Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())\n-        } else {\n-            false\n-        };\n-        if is_full_stmt {\n-            mark::hit!(test_extract_var_expr_stmt);\n-            if full_stmt.unwrap().semicolon_token().is_none() {\n-                buf.push_str(\";\");\n+    acc.add(\n+        AssistId(\"extract_variable\", AssistKind::RefactorExtract),\n+        \"Extract into variable\",\n+        target,\n+        move |edit| {\n+            let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n+                Some(field) => field.name_ref(),\n+                None => None,\n+            };\n+\n+            let mut buf = String::new();\n+\n+            let var_name = match &field_shorthand {\n+                Some(it) => it.to_string(),\n+                None => \"var_name\".to_string(),\n+            };\n+            let expr_range = match &field_shorthand {\n+                Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n+                None => expr.syntax().text_range(),\n+            };\n+\n+            if wrap_in_block {\n+                format_to!(buf, \"{{ let {} = \", var_name);\n+            } else {\n+                format_to!(buf, \"let {} = \", var_name);\n+            };\n+            format_to!(buf, \"{}\", expr.syntax());\n+\n+            let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n+            let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n+                Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())\n+            } else {\n+                false\n+            };\n+            if is_full_stmt {\n+                mark::hit!(test_extract_var_expr_stmt);\n+                if full_stmt.unwrap().semicolon_token().is_none() {\n+                    buf.push_str(\";\");\n+                }\n+                match ctx.config.snippet_cap {\n+                    Some(cap) => {\n+                        let snip = buf\n+                            .replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n+                        edit.replace_snippet(cap, expr_range, snip)\n+                    }\n+                    None => edit.replace(expr_range, buf),\n+                }\n+                return;\n+            }\n+\n+            buf.push_str(\";\");\n+\n+            // We want to maintain the indent level,\n+            // but we do not want to duplicate possible\n+            // extra newlines in the indent block\n+            let text = indent.text();\n+            if text.starts_with('\\n') {\n+                buf.push_str(\"\\n\");\n+                buf.push_str(text.trim_start_matches('\\n'));\n+            } else {\n+                buf.push_str(text);\n             }\n+\n+            edit.replace(expr_range, var_name.clone());\n+            let offset = anchor_stmt.text_range().start();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n                     let snip =\n                         buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n-                    edit.replace_snippet(cap, expr_range, snip)\n+                    edit.insert_snippet(cap, offset, snip)\n                 }\n-                None => edit.replace(expr_range, buf),\n+                None => edit.insert(offset, buf),\n             }\n-            return;\n-        }\n \n-        buf.push_str(\";\");\n-\n-        // We want to maintain the indent level,\n-        // but we do not want to duplicate possible\n-        // extra newlines in the indent block\n-        let text = indent.text();\n-        if text.starts_with('\\n') {\n-            buf.push_str(\"\\n\");\n-            buf.push_str(text.trim_start_matches('\\n'));\n-        } else {\n-            buf.push_str(text);\n-        }\n-\n-        edit.replace(expr_range, var_name.clone());\n-        let offset = anchor_stmt.text_range().start();\n-        match ctx.config.snippet_cap {\n-            Some(cap) => {\n-                let snip =\n-                    buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n-                edit.insert_snippet(cap, offset, snip)\n+            if wrap_in_block {\n+                edit.insert(anchor_stmt.text_range().end(), \" }\");\n             }\n-            None => edit.insert(offset, buf),\n-        }\n-\n-        if wrap_in_block {\n-            edit.insert(anchor_stmt.text_range().end(), \" }\");\n-        }\n-    })\n+        },\n+    )\n }\n \n /// Check whether the node is a valid expression which can be extracted to a variable."}, {"sha": "511355e079d4bda8018b58aa1ce0977bff265d1f", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -8,7 +8,7 @@ use test_utils::mark;\n \n use crate::{\n     utils::{render_snippet, Cursor, FamousDefs},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: fill_match_arms\n@@ -103,24 +103,29 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     }\n \n     let target = match_expr.syntax().text_range();\n-    acc.add(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |builder| {\n-        let new_arm_list = match_arm_list.remove_placeholder();\n-        let n_old_arms = new_arm_list.arms().count();\n-        let new_arm_list = new_arm_list.append_arms(missing_arms);\n-        let first_new_arm = new_arm_list.arms().nth(n_old_arms);\n-        let old_range = match_arm_list.syntax().text_range();\n-        match (first_new_arm, ctx.config.snippet_cap) {\n-            (Some(first_new_arm), Some(cap)) => {\n-                let snippet = render_snippet(\n-                    cap,\n-                    new_arm_list.syntax(),\n-                    Cursor::Before(first_new_arm.syntax()),\n-                );\n-                builder.replace_snippet(cap, old_range, snippet);\n-            }\n-            _ => builder.replace(old_range, new_arm_list.to_string()),\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"fill_match_arms\", AssistKind::QuickFix),\n+        \"Fill match arms\",\n+        target,\n+        |builder| {\n+            let new_arm_list = match_arm_list.remove_placeholder();\n+            let n_old_arms = new_arm_list.arms().count();\n+            let new_arm_list = new_arm_list.append_arms(missing_arms);\n+            let first_new_arm = new_arm_list.arms().nth(n_old_arms);\n+            let old_range = match_arm_list.syntax().text_range();\n+            match (first_new_arm, ctx.config.snippet_cap) {\n+                (Some(first_new_arm), Some(cap)) => {\n+                    let snippet = render_snippet(\n+                        cap,\n+                        new_arm_list.syntax(),\n+                        Cursor::Before(first_new_arm.syntax()),\n+                    );\n+                    builder.replace_snippet(cap, old_range, snippet);\n+                }\n+                _ => builder.replace(old_range, new_arm_list.to_string()),\n+            }\n+        },\n+    )\n }\n \n fn is_variant_missing(existing_arms: &mut Vec<MatchArm>, var: &Pat) -> bool {"}, {"sha": "e212557c821565f083458b41ca213adcd80f58ee", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -2,7 +2,7 @@ use hir::{db::HirDatabase, HasSource, HasVisibility, PathResolution};\n use ra_db::FileId;\n use ra_syntax::{ast, AstNode, TextRange, TextSize};\n \n-use crate::{utils::vis_offset, AssistContext, AssistId, Assists};\n+use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n \n // FIXME: this really should be a fix for diagnostic, rather than an assist.\n \n@@ -58,7 +58,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         Some(name) => format!(\"Change visibility of {} to {}\", name, missing_visibility),\n     };\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+    acc.add(AssistId(\"fix_visibility\", AssistKind::QuickFix), assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n@@ -101,7 +101,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let assist_label =\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+    acc.add(AssistId(\"fix_visibility\", AssistKind::QuickFix), assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n             Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),"}, {"sha": "3cd5326505e2ed5a9457fc98fbbaa376bf687dd8", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: flip_binexpr\n //\n@@ -33,13 +33,18 @@ pub(crate) fn flip_binexpr(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    acc.add(AssistId(\"flip_binexpr\"), \"Flip binary expression\", op_range, |edit| {\n-        if let FlipAction::FlipAndReplaceOp(new_op) = action {\n-            edit.replace(op_range, new_op);\n-        }\n-        edit.replace(lhs.text_range(), rhs.text());\n-        edit.replace(rhs.text_range(), lhs.text());\n-    })\n+    acc.add(\n+        AssistId(\"flip_binexpr\", AssistKind::RefactorRewrite),\n+        \"Flip binary expression\",\n+        op_range,\n+        |edit| {\n+            if let FlipAction::FlipAndReplaceOp(new_op) = action {\n+                edit.replace(op_range, new_op);\n+            }\n+            edit.replace(lhs.text_range(), rhs.text());\n+            edit.replace(rhs.text_range(), lhs.text());\n+        },\n+    )\n }\n \n enum FlipAction {"}, {"sha": "55a971dc77e0fa06491a4f465d8a3d0899f76195", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{algo::non_trivia_sibling, Direction, T};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: flip_comma\n //\n@@ -28,10 +28,15 @@ pub(crate) fn flip_comma(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n-    acc.add(AssistId(\"flip_comma\"), \"Flip comma\", comma.text_range(), |edit| {\n-        edit.replace(prev.text_range(), next.to_string());\n-        edit.replace(next.text_range(), prev.to_string());\n-    })\n+    acc.add(\n+        AssistId(\"flip_comma\", AssistKind::RefactorRewrite),\n+        \"Flip comma\",\n+        comma.text_range(),\n+        |edit| {\n+            edit.replace(prev.text_range(), next.to_string());\n+            edit.replace(next.text_range(), prev.to_string());\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "1234f4d2966e65416d2d0839c6b8080ce4747ecc", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     Direction, T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: flip_trait_bound\n //\n@@ -33,10 +33,15 @@ pub(crate) fn flip_trait_bound(acc: &mut Assists, ctx: &AssistContext) -> Option\n     );\n \n     let target = plus.text_range();\n-    acc.add(AssistId(\"flip_trait_bound\"), \"Flip trait bounds\", target, |edit| {\n-        edit.replace(before.text_range(), after.to_string());\n-        edit.replace(after.text_range(), before.to_string());\n-    })\n+    acc.add(\n+        AssistId(\"flip_trait_bound\", AssistKind::RefactorRewrite),\n+        \"Flip trait bounds\",\n+        target,\n+        |edit| {\n+            edit.replace(before.text_range(), after.to_string());\n+            edit.replace(after.text_range(), before.to_string());\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "2fdfabaf53fe674edb76a9c5bc2906fa02e7cc98", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -7,7 +7,7 @@ use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: inline_local_variable\n@@ -110,13 +110,19 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n     let init_in_paren = format!(\"({})\", &init_str);\n \n     let target = bind_pat.syntax().text_range();\n-    acc.add(AssistId(\"inline_local_variable\"), \"Inline variable\", target, move |builder| {\n-        builder.delete(delete_range);\n-        for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n-            let replacement = if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n-            builder.replace(desc.file_range.range, replacement)\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"inline_local_variable\", AssistKind::RefactorInline),\n+        \"Inline variable\",\n+        target,\n+        move |builder| {\n+            builder.delete(delete_range);\n+            for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {\n+                let replacement =\n+                    if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n+                builder.replace(desc.file_range.range, replacement)\n+            }\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "967593031cfdbe90f3683cb06760fe1518bd6733", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n };\n use rustc_hash::FxHashSet;\n \n-use crate::{assist_context::AssistBuilder, AssistContext, AssistId, Assists};\n+use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n \n static ASSIST_NAME: &str = \"introduce_named_lifetime\";\n static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n@@ -83,7 +83,7 @@ fn generate_fn_def_assist(\n             _ => return None,\n         }\n     };\n-    acc.add(AssistId(ASSIST_NAME), ASSIST_LABEL, lifetime_loc, |builder| {\n+    acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(fn_def, builder, end_of_fn_ident, new_lifetime_param);\n         builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n         loc_needing_lifetime.map(|loc| builder.insert(loc, format!(\"'{} \", new_lifetime_param)));\n@@ -98,7 +98,7 @@ fn generate_impl_def_assist(\n ) -> Option<()> {\n     let new_lifetime_param = generate_unique_lifetime_param_name(&impl_def.type_param_list())?;\n     let end_of_impl_kw = impl_def.impl_token()?.text_range().end();\n-    acc.add(AssistId(ASSIST_NAME), ASSIST_LABEL, lifetime_loc, |builder| {\n+    acc.add(AssistId(ASSIST_NAME, AssistKind::Refactor), ASSIST_LABEL, lifetime_loc, |builder| {\n         add_lifetime_param(impl_def, builder, end_of_impl_kw, new_lifetime_param);\n         builder.replace(lifetime_loc, format!(\"'{}\", new_lifetime_param));\n     })"}, {"sha": "bbe3f364360515b31cd601192950cdb356a3358b", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n use crate::{\n     assist_context::{AssistContext, Assists},\n     utils::invert_boolean_expression,\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: invert_if\n@@ -54,7 +54,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let else_node = else_block.syntax();\n     let else_range = else_node.text_range();\n     let then_range = then_node.text_range();\n-    acc.add(AssistId(\"invert_if\"), \"Invert if\", if_range, |edit| {\n+    acc.add(AssistId(\"invert_if\", AssistKind::RefactorRewrite), \"Invert if\", if_range, |edit| {\n         edit.replace(cond_range, flip_cond.syntax().text());\n         edit.replace(else_range, then_node.text());\n         edit.replace(then_range, else_node.text());"}, {"sha": "1beccb61c09c436040b72f1d849e4703ce3ffc0d", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n-    AssistId,\n+    AssistId, AssistKind,\n };\n \n // Assist: merge_imports\n@@ -56,9 +56,14 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     };\n \n     let target = tree.syntax().text_range();\n-    acc.add(AssistId(\"merge_imports\"), \"Merge imports\", target, |builder| {\n-        builder.rewrite(rewriter);\n-    })\n+    acc.add(\n+        AssistId(\"merge_imports\", AssistKind::RefactorRewrite),\n+        \"Merge imports\",\n+        target,\n+        |builder| {\n+            builder.rewrite(rewriter);\n+        },\n+    )\n }\n \n fn next_prev() -> impl Iterator<Item = Direction> {"}, {"sha": "186a1f61839b8d9bbf95167ea26a7c411c621edb", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n     Direction,\n };\n \n-use crate::{AssistContext, AssistId, Assists, TextRange};\n+use crate::{AssistContext, AssistId, AssistKind, Assists, TextRange};\n \n // Assist: merge_match_arms\n //\n@@ -59,25 +59,30 @@ pub(crate) fn merge_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n \n-    acc.add(AssistId(\"merge_match_arms\"), \"Merge match arms\", current_text_range, |edit| {\n-        let pats = if arms_to_merge.iter().any(contains_placeholder) {\n-            \"_\".into()\n-        } else {\n-            arms_to_merge\n-                .iter()\n-                .filter_map(ast::MatchArm::pat)\n-                .map(|x| x.syntax().to_string())\n-                .collect::<Vec<String>>()\n-                .join(\" | \")\n-        };\n-\n-        let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n-\n-        let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n-        let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n-\n-        edit.replace(TextRange::new(start, end), arm);\n-    })\n+    acc.add(\n+        AssistId(\"merge_match_arms\", AssistKind::RefactorRewrite),\n+        \"Merge match arms\",\n+        current_text_range,\n+        |edit| {\n+            let pats = if arms_to_merge.iter().any(contains_placeholder) {\n+                \"_\".into()\n+            } else {\n+                arms_to_merge\n+                    .iter()\n+                    .filter_map(ast::MatchArm::pat)\n+                    .map(|x| x.syntax().to_string())\n+                    .collect::<Vec<String>>()\n+                    .join(\" | \")\n+            };\n+\n+            let arm = format!(\"{} => {}\", pats, current_expr.syntax().text());\n+\n+            let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n+            let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n+\n+            edit.replace(TextRange::new(start, end), arm);\n+        },\n+    )\n }\n \n fn contains_placeholder(a: &ast::MatchArm) -> bool {"}, {"sha": "ba3dafb9955e86d3b2d88533e4572007804805c5", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: move_bounds_to_where_clause\n //\n@@ -50,29 +50,36 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n     };\n \n     let target = type_param_list.syntax().text_range();\n-    acc.add(AssistId(\"move_bounds_to_where_clause\"), \"Move to where clause\", target, |edit| {\n-        let new_params = type_param_list\n-            .type_params()\n-            .filter(|it| it.type_bound_list().is_some())\n-            .map(|type_param| {\n-                let without_bounds = type_param.remove_bounds();\n-                (type_param, without_bounds)\n-            });\n-\n-        let new_type_param_list = type_param_list.replace_descendants(new_params);\n-        edit.replace_ast(type_param_list.clone(), new_type_param_list);\n-\n-        let where_clause = {\n-            let predicates = type_param_list.type_params().filter_map(build_predicate);\n-            make::where_clause(predicates)\n-        };\n-\n-        let to_insert = match anchor.prev_sibling_or_token() {\n-            Some(ref elem) if elem.kind() == WHITESPACE => format!(\"{} \", where_clause.syntax()),\n-            _ => format!(\" {}\", where_clause.syntax()),\n-        };\n-        edit.insert(anchor.text_range().start(), to_insert);\n-    })\n+    acc.add(\n+        AssistId(\"move_bounds_to_where_clause\", AssistKind::RefactorRewrite),\n+        \"Move to where clause\",\n+        target,\n+        |edit| {\n+            let new_params = type_param_list\n+                .type_params()\n+                .filter(|it| it.type_bound_list().is_some())\n+                .map(|type_param| {\n+                    let without_bounds = type_param.remove_bounds();\n+                    (type_param, without_bounds)\n+                });\n+\n+            let new_type_param_list = type_param_list.replace_descendants(new_params);\n+            edit.replace_ast(type_param_list.clone(), new_type_param_list);\n+\n+            let where_clause = {\n+                let predicates = type_param_list.type_params().filter_map(build_predicate);\n+                make::where_clause(predicates)\n+            };\n+\n+            let to_insert = match anchor.prev_sibling_or_token() {\n+                Some(ref elem) if elem.kind() == WHITESPACE => {\n+                    format!(\"{} \", where_clause.syntax())\n+                }\n+                _ => format!(\" {}\", where_clause.syntax()),\n+            };\n+            edit.insert(anchor.text_range().start(), to_insert);\n+        },\n+    )\n }\n \n fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {"}, {"sha": "4060d34c641455993534c84d2a6cde8d169e33cd", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     SyntaxKind::WHITESPACE,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: move_guard_to_arm_body\n //\n@@ -40,17 +40,22 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n     let target = guard.syntax().text_range();\n-    acc.add(AssistId(\"move_guard_to_arm_body\"), \"Move guard to arm body\", target, |edit| {\n-        match space_before_guard {\n-            Some(element) if element.kind() == WHITESPACE => {\n-                edit.delete(element.text_range());\n-            }\n-            _ => (),\n-        };\n+    acc.add(\n+        AssistId(\"move_guard_to_arm_body\", AssistKind::RefactorRewrite),\n+        \"Move guard to arm body\",\n+        target,\n+        |edit| {\n+            match space_before_guard {\n+                Some(element) if element.kind() == WHITESPACE => {\n+                    edit.delete(element.text_range());\n+                }\n+                _ => (),\n+            };\n \n-        edit.delete(guard.syntax().text_range());\n-        edit.replace_node_and_indent(arm_expr.syntax(), buf);\n-    })\n+            edit.delete(guard.syntax().text_range());\n+            edit.replace_node_and_indent(arm_expr.syntax(), buf);\n+        },\n+    )\n }\n \n // Assist: move_arm_cond_to_match_guard\n@@ -100,7 +105,7 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n \n     let target = if_expr.syntax().text_range();\n     acc.add(\n-        AssistId(\"move_arm_cond_to_match_guard\"),\n+        AssistId(\"move_arm_cond_to_match_guard\", AssistKind::RefactorRewrite),\n         \"Move condition to match guard\",\n         target,\n         |edit| {"}, {"sha": "96679e1609dbd59849afbe135be4fff4d65caabe", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     TextSize,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: make_raw_string\n //\n@@ -26,14 +26,22 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n-    acc.add(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", target, |edit| {\n-        let max_hash_streak = count_hashes(&value);\n-        let mut hashes = String::with_capacity(max_hash_streak + 1);\n-        for _ in 0..hashes.capacity() {\n-            hashes.push('#');\n-        }\n-        edit.replace(token.syntax().text_range(), format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes));\n-    })\n+    acc.add(\n+        AssistId(\"make_raw_string\", AssistKind::RefactorRewrite),\n+        \"Rewrite as raw string\",\n+        target,\n+        |edit| {\n+            let max_hash_streak = count_hashes(&value);\n+            let mut hashes = String::with_capacity(max_hash_streak + 1);\n+            for _ in 0..hashes.capacity() {\n+                hashes.push('#');\n+            }\n+            edit.replace(\n+                token.syntax().text_range(),\n+                format!(\"r{}\\\"{}\\\"{}\", hashes, value, hashes),\n+            );\n+        },\n+    )\n }\n \n // Assist: make_usual_string\n@@ -55,11 +63,16 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n     let target = token.syntax().text_range();\n-    acc.add(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", target, |edit| {\n-        // parse inside string to escape `\"`\n-        let escaped = value.escape_default().to_string();\n-        edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n-    })\n+    acc.add(\n+        AssistId(\"make_usual_string\", AssistKind::RefactorRewrite),\n+        \"Rewrite as regular string\",\n+        target,\n+        |edit| {\n+            // parse inside string to escape `\"`\n+            let escaped = value.escape_default().to_string();\n+            edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n+        },\n+    )\n }\n \n // Assist: add_hash\n@@ -80,7 +93,7 @@ pub(crate) fn make_usual_string(acc: &mut Assists, ctx: &AssistContext) -> Optio\n pub(crate) fn add_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let target = token.text_range();\n-    acc.add(AssistId(\"add_hash\"), \"Add # to raw string\", target, |edit| {\n+    acc.add(AssistId(\"add_hash\", AssistKind::Refactor), \"Add # to raw string\", target, |edit| {\n         edit.insert(token.text_range().start() + TextSize::of('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n     })\n@@ -109,18 +122,23 @@ pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n     let target = token.text_range();\n-    acc.add(AssistId(\"remove_hash\"), \"Remove hash from raw string\", target, |edit| {\n-        let result = &text[2..text.len() - 1];\n-        let result = if result.starts_with('\\\"') {\n-            // FIXME: this logic is wrong, not only the last has has to handled specially\n-            // no more hash, escape\n-            let internal_str = &result[1..result.len() - 1];\n-            format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\n-        } else {\n-            result.to_owned()\n-        };\n-        edit.replace(token.text_range(), format!(\"r{}\", result));\n-    })\n+    acc.add(\n+        AssistId(\"remove_hash\", AssistKind::RefactorRewrite),\n+        \"Remove hash from raw string\",\n+        target,\n+        |edit| {\n+            let result = &text[2..text.len() - 1];\n+            let result = if result.starts_with('\\\"') {\n+                // FIXME: this logic is wrong, not only the last has has to handled specially\n+                // no more hash, escape\n+                let internal_str = &result[1..result.len() - 1];\n+                format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\n+            } else {\n+                result.to_owned()\n+            };\n+            edit.replace(token.text_range(), format!(\"r{}\", result));\n+        },\n+    )\n }\n \n fn count_hashes(s: &str) -> usize {"}, {"sha": "a616cca5794742e4eff0707ca5efc50ce7fdce88", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     TextSize, T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: remove_dbg\n //\n@@ -38,7 +38,7 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = macro_call.syntax().text_range();\n-    acc.add(AssistId(\"remove_dbg\"), \"Remove dbg!()\", target, |builder| {\n+    acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", target, |builder| {\n         builder.replace(macro_range, macro_content);\n     })\n }"}, {"sha": "ef55c354ee5c9aaea805fc7c016a0028db12f23f", "filename": "crates/ra_assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{SyntaxKind, TextRange, T};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: remove_mut\n //\n@@ -26,7 +26,12 @@ pub(crate) fn remove_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     let target = mut_token.text_range();\n-    acc.add(AssistId(\"remove_mut\"), \"Remove `mut` keyword\", target, |builder| {\n-        builder.delete(TextRange::new(delete_from, delete_to));\n-    })\n+    acc.add(\n+        AssistId(\"remove_mut\", AssistKind::Refactor),\n+        \"Remove `mut` keyword\",\n+        target,\n+        |builder| {\n+            builder.delete(TextRange::new(delete_from, delete_to));\n+        },\n+    )\n }"}, {"sha": "2ac1c56cf539f90eb5de11b0f22035152a5e902e", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -5,7 +5,7 @@ use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{algo, ast, match_ast, AstNode, SyntaxKind, SyntaxKind::*, SyntaxNode};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: reorder_fields\n //\n@@ -42,11 +42,16 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     }\n \n     let target = record.syntax().text_range();\n-    acc.add(AssistId(\"reorder_fields\"), \"Reorder record fields\", target, |edit| {\n-        for (old, new) in fields.iter().zip(&sorted_fields) {\n-            algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n-        }\n-    })\n+    acc.add(\n+        AssistId(\"reorder_fields\", AssistKind::RefactorRewrite),\n+        \"Reorder record fields\",\n+        target,\n+        |edit| {\n+            for (old, new) in fields.iter().zip(&sorted_fields) {\n+                algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n+            }\n+        },\n+    )\n }\n \n fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {"}, {"sha": "b7e30a7f27e204df43e3821665463c246e5d1241", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n+use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_if_let_with_match\n //\n@@ -48,29 +48,35 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     };\n \n     let target = if_expr.syntax().text_range();\n-    acc.add(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", target, move |edit| {\n-        let match_expr = {\n-            let then_arm = {\n-                let then_block = then_block.reset_indent().indent(IndentLevel(1));\n-                let then_expr = unwrap_trivial_block(then_block);\n-                make::match_arm(vec![pat.clone()], then_expr)\n+    acc.add(\n+        AssistId(\"replace_if_let_with_match\", AssistKind::RefactorRewrite),\n+        \"Replace with match\",\n+        target,\n+        move |edit| {\n+            let match_expr = {\n+                let then_arm = {\n+                    let then_block = then_block.reset_indent().indent(IndentLevel(1));\n+                    let then_expr = unwrap_trivial_block(then_block);\n+                    make::match_arm(vec![pat.clone()], then_expr)\n+                };\n+                let else_arm = {\n+                    let pattern = ctx\n+                        .sema\n+                        .type_of_pat(&pat)\n+                        .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n+                        .map(|it| it.sad_pattern())\n+                        .unwrap_or_else(|| make::placeholder_pat().into());\n+                    let else_expr = unwrap_trivial_block(else_block);\n+                    make::match_arm(vec![pattern], else_expr)\n+                };\n+                let match_expr =\n+                    make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]));\n+                match_expr.indent(IndentLevel::from_node(if_expr.syntax()))\n             };\n-            let else_arm = {\n-                let pattern = ctx\n-                    .sema\n-                    .type_of_pat(&pat)\n-                    .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty))\n-                    .map(|it| it.sad_pattern())\n-                    .unwrap_or_else(|| make::placeholder_pat().into());\n-                let else_expr = unwrap_trivial_block(else_block);\n-                make::match_arm(vec![pattern], else_expr)\n-            };\n-            let match_expr = make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]));\n-            match_expr.indent(IndentLevel::from_node(if_expr.syntax()))\n-        };\n \n-        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n-    })\n+            edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "a49292c970a5a44d6bca1b1dbeb2dee28f676a81", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n     AstNode, T,\n };\n \n-use crate::{utils::TryEnum, AssistContext, AssistId, Assists};\n+use crate::{utils::TryEnum, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: replace_let_with_if_let\n //\n@@ -44,24 +44,31 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty).map(|it| it.happy_case());\n \n     let target = let_kw.text_range();\n-    acc.add(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", target, |edit| {\n-        let with_placeholder: ast::Pat = match happy_variant {\n-            None => make::placeholder_pat().into(),\n-            Some(var_name) => make::tuple_struct_pat(\n-                make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n-                once(make::placeholder_pat().into()),\n-            )\n-            .into(),\n-        };\n-        let block = make::block_expr(None, None).indent(IndentLevel::from_node(let_stmt.syntax()));\n-        let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n-        let stmt = make::expr_stmt(if_);\n+    acc.add(\n+        AssistId(\"replace_let_with_if_let\", AssistKind::RefactorRewrite),\n+        \"Replace with if-let\",\n+        target,\n+        |edit| {\n+            let with_placeholder: ast::Pat = match happy_variant {\n+                None => make::placeholder_pat().into(),\n+                Some(var_name) => make::tuple_struct_pat(\n+                    make::path_unqualified(make::path_segment(make::name_ref(var_name))),\n+                    once(make::placeholder_pat().into()),\n+                )\n+                .into(),\n+            };\n+            let block =\n+                make::block_expr(None, None).indent(IndentLevel::from_node(let_stmt.syntax()));\n+            let if_ = make::expr_if(make::condition(init, Some(with_placeholder)), block);\n+            let stmt = make::expr_stmt(if_);\n \n-        let placeholder = stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n-        let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n+            let placeholder =\n+                stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n+            let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n \n-        edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n-    })\n+            edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "dfd314abf4ba8b66deb4f5d0cd96ebf6620590d8", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SmolStr, SyntaxNo\n \n use crate::{\n     utils::{find_insert_use_container, insert_use_statement},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: replace_qualified_name_with_use\n@@ -37,7 +37,7 @@ pub(crate) fn replace_qualified_name_with_use(\n \n     let target = path.syntax().text_range();\n     acc.add(\n-        AssistId(\"replace_qualified_name_with_use\"),\n+        AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n         target,\n         |builder| {"}, {"sha": "e5a4bb23c3d3a222078fa06f34f2dcc83ec0019b", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     utils::{render_snippet, Cursor, TryEnum},\n-    AssistContext, AssistId, Assists,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: replace_unwrap_with_match\n@@ -46,37 +46,43 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n     let ty = ctx.sema.type_of_expr(&caller)?;\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n     let target = method_call.syntax().text_range();\n-    acc.add(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", target, |builder| {\n-        let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n-        let it = make::bind_pat(make::name(\"a\")).into();\n-        let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n+    acc.add(\n+        AssistId(\"replace_unwrap_with_match\", AssistKind::RefactorRewrite),\n+        \"Replace unwrap with match\",\n+        target,\n+        |builder| {\n+            let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n+            let it = make::bind_pat(make::name(\"a\")).into();\n+            let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n-        let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n-        let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+            let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n+            let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n-        let unreachable_call = make::expr_unreachable();\n-        let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n+            let unreachable_call = make::expr_unreachable();\n+            let err_arm =\n+                make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n-        let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-        let match_expr = make::expr_match(caller.clone(), match_arm_list)\n-            .indent(IndentLevel::from_node(method_call.syntax()));\n+            let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n+            let match_expr = make::expr_match(caller.clone(), match_arm_list)\n+                .indent(IndentLevel::from_node(method_call.syntax()));\n \n-        let range = method_call.syntax().text_range();\n-        match ctx.config.snippet_cap {\n-            Some(cap) => {\n-                let err_arm = match_expr\n-                    .syntax()\n-                    .descendants()\n-                    .filter_map(ast::MatchArm::cast)\n-                    .last()\n-                    .unwrap();\n-                let snippet =\n-                    render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n-                builder.replace_snippet(cap, range, snippet)\n+            let range = method_call.syntax().text_range();\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let err_arm = match_expr\n+                        .syntax()\n+                        .descendants()\n+                        .filter_map(ast::MatchArm::cast)\n+                        .last()\n+                        .unwrap();\n+                    let snippet =\n+                        render_snippet(cap, match_expr.syntax(), Cursor::Before(err_arm.syntax()));\n+                    builder.replace_snippet(cap, range, snippet)\n+                }\n+                None => builder.replace(range, match_expr.to_string()),\n             }\n-            None => builder.replace(range, match_expr.to_string()),\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "4ca5c3ca14cd6b276a3dea9b640cf088706cd6f4", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -2,7 +2,7 @@ use std::iter::successors;\n \n use ra_syntax::{ast, AstNode, T};\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: split_import\n //\n@@ -28,7 +28,7 @@ pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     }\n \n     let target = colon_colon.text_range();\n-    acc.add(AssistId(\"split_import\"), \"Split import\", target, |edit| {\n+    acc.add(AssistId(\"split_import\", AssistKind::RefactorRewrite), \"Split import\", target, |edit| {\n         edit.replace_ast(use_tree, new_tree);\n     })\n }"}, {"sha": "8b38695a94852cdb48cc58121d88e6d5ba4fcaf0", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n     AstNode, TextRange, T,\n };\n \n-use crate::{AssistContext, AssistId, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: unwrap_block\n //\n@@ -27,7 +27,7 @@ use crate::{AssistContext, AssistId, Assists};\n // }\n // ```\n pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let assist_id = AssistId(\"unwrap_block\");\n+    let assist_id = AssistId(\"unwrap_block\", AssistKind::RefactorRewrite);\n     let assist_label = \"Unwrap block\";\n \n     let l_curly_token = ctx.find_token_at_offset(T!['{'])?;"}, {"sha": "65cda95ee250afb943591c30008e731e3e607ff0", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -26,10 +26,20 @@ pub(crate) use crate::assist_context::{AssistContext, Assists};\n \n pub use assist_config::AssistConfig;\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum AssistKind {\n+    None,\n+    QuickFix,\n+    Refactor,\n+    RefactorExtract,\n+    RefactorInline,\n+    RefactorRewrite,\n+}\n+\n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub struct AssistId(pub &'static str);\n+pub struct AssistId(pub &'static str, pub AssistKind);\n \n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);"}, {"sha": "dcfa186dc2d52a832254bd77e096d981bd5cc4d9", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -76,7 +76,7 @@ pub use crate::{\n };\n \n pub use hir::{Documentation, Semantics};\n-pub use ra_assists::{Assist, AssistConfig, AssistId, ResolvedAssist};\n+pub use ra_assists::{Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist};\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n     SourceRootId,"}, {"sha": "070ad5e684b97ab24aa704b853ed8d5dd8596739", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -112,8 +112,6 @@ fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProvi\n                     lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n                     lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n                     lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n-                    lsp_types::code_action_kind::SOURCE.to_string(),\n-                    lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n                 ]),\n                 work_done_progress_options: Default::default(),\n             })"}, {"sha": "2312a6e4d5558ba46569b428df867f5f01fe2632", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -4,9 +4,9 @@ use std::path::{self, Path};\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n use ra_ide::{\n-    Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n-    FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, Indel,\n-    InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n+    Assist, AssistKind, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold,\n+    FoldKind, FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange,\n+    Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n     ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n@@ -627,6 +627,18 @@ pub(crate) fn call_hierarchy_item(\n     Ok(lsp_types::CallHierarchyItem { name, kind, tags: None, detail, uri, range, selection_range })\n }\n \n+pub(crate) fn code_action_kind(kind: AssistKind) -> String {\n+    match kind {\n+        AssistKind::None => lsp_types::code_action_kind::EMPTY,\n+        AssistKind::QuickFix => lsp_types::code_action_kind::QUICKFIX,\n+        AssistKind::Refactor => lsp_types::code_action_kind::REFACTOR,\n+        AssistKind::RefactorExtract => lsp_types::code_action_kind::REFACTOR_EXTRACT,\n+        AssistKind::RefactorInline => lsp_types::code_action_kind::REFACTOR_INLINE,\n+        AssistKind::RefactorRewrite => lsp_types::code_action_kind::REFACTOR_REWRITE,\n+    }\n+    .to_string()\n+}\n+\n pub(crate) fn unresolved_code_action(\n     snap: &GlobalStateSnapshot,\n     assist: Assist,\n@@ -636,7 +648,7 @@ pub(crate) fn unresolved_code_action(\n         title: assist.label,\n         id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n         group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(String::new()),\n+        kind: Some(code_action_kind(assist.id.1)),\n         edit: None,\n         command: None,\n     };"}, {"sha": "41ffac7b347de8a90d648ae8ec917c16aaebb569", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f51b0cfdd6c23dd57a0a11154179730171c0425d/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f51b0cfdd6c23dd57a0a11154179730171c0425d/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=f51b0cfdd6c23dd57a0a11154179730171c0425d", "patch": "@@ -66,7 +66,7 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                         return Promise.resolve(null);\n                     });\n             },\n-            // Using custom handling of CodeActions where each code action is resloved lazily\n+            // Using custom handling of CodeActions where each code action is resolved lazily\n             // That's why we are not waiting for any command or edits\n             async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n                 const params: lc.CodeActionParams = {\n@@ -87,7 +87,8 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                             continue;\n                         }\n                         assert(isCodeActionWithoutEditsAndCommands(item), \"We don't expect edits or commands here\");\n-                        const action = new vscode.CodeAction(item.title);\n+                        const kind = client.protocol2CodeConverter.asCodeActionKind((item as any).kind);\n+                        const action = new vscode.CodeAction(item.title, kind);\n                         const group = (item as any).group;\n                         const id = (item as any).id;\n                         const resolveParams: ra.ResolveCodeActionParams = {\n@@ -116,6 +117,7 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                             result[index] = items[0];\n                         } else {\n                             const action = new vscode.CodeAction(group);\n+                            action.kind = items[0].kind;\n                             action.command = {\n                                 command: \"rust-analyzer.applyActionGroup\",\n                                 title: \"\","}]}