{"sha": "b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzdlNDk4ZmU0MTIyZmFkZDYwOTFiMTUyOWE1Y2RiMGIwY2IwZDY=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-05T12:07:00Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-08-09T16:36:24Z"}, "message": "refactor: use single fn_args", "tree": {"sha": "8455ce251d55da9a80f0abe66741d6b03fd47049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8455ce251d55da9a80f0abe66741d6b03fd47049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "html_url": "https://github.com/rust-lang/rust/commit/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ca73528ee3aef96cc7b1784ecb44e29fdc0c194", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ca73528ee3aef96cc7b1784ecb44e29fdc0c194", "html_url": "https://github.com/rust-lang/rust/commit/9ca73528ee3aef96cc7b1784ecb44e29fdc0c194"}], "stats": {"total": 66, "additions": 28, "deletions": 38}, "files": [{"sha": "6791392c50d89ac782f082bcbe67333c2fe26b70", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b777e498fe4122fadd6091b1529a5cdb0b0cb0d6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=b777e498fe4122fadd6091b1529a5cdb0b0cb0d6", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make, ArgListOwner, AstNode, ModuleItemOwner,\n+        make, ArgList, ArgListOwner, AstNode, ModuleItemOwner,\n     },\n     SyntaxKind, SyntaxNode, TextSize,\n };\n@@ -17,6 +17,20 @@ use crate::{\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n+enum FuncExpr<'a> {\n+    Func(&'a ast::CallExpr),\n+    Method(&'a ast::MethodCallExpr),\n+}\n+\n+impl<'a> FuncExpr<'a> {\n+    fn arg_list(&self) -> Option<ArgList> {\n+        match *self {\n+            FuncExpr::Func(fn_call) => fn_call.arg_list(),\n+            FuncExpr::Method(m_call) => m_call.arg_list(),\n+        }\n+    }\n+}\n+\n // Assist: generate_function\n //\n // Adds a stub function with a signature matching the function under the cursor.\n@@ -164,7 +178,7 @@ impl FunctionBuilder {\n         let needs_pub = target_module.is_some();\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n         let fn_name = fn_name(path)?;\n-        let (type_params, params) = fn_args(ctx, target_module, call)?;\n+        let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Func(call))?;\n \n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n         let is_async = await_expr.is_some();\n@@ -229,7 +243,7 @@ impl FunctionBuilder {\n         let needs_pub = false;\n         let target_module = target_module.or_else(|| ctx.sema.scope(target.syntax()).module())?;\n         let fn_name = make::name(&name.text());\n-        let (type_params, params) = method_args(ctx, target_module, call)?;\n+        let (type_params, params) = fn_args(ctx, target_module, FuncExpr::Method(call))?;\n \n         let await_expr = call.syntax().parent().and_then(ast::AwaitExpr::cast);\n         let is_async = await_expr.is_some();\n@@ -342,7 +356,7 @@ fn fn_name(call: &ast::Path) -> Option<ast::Name> {\n fn fn_args(\n     ctx: &AssistContext,\n     target_module: hir::Module,\n-    call: &ast::CallExpr,\n+    call: FuncExpr,\n ) -> Option<(Option<ast::GenericParamList>, ast::ParamList)> {\n     let mut arg_names = Vec::new();\n     let mut arg_types = Vec::new();\n@@ -370,41 +384,17 @@ fn fn_args(\n     let params = arg_names.into_iter().zip(arg_types).map(|(name, ty)| {\n         make::param(make::ext::simple_ident_pat(make::name(&name)).into(), make::ty(&ty))\n     });\n-    Some((None, make::param_list(None, params)))\n-}\n \n-fn method_args(\n-    ctx: &AssistContext,\n-    target_module: hir::Module,\n-    call: &ast::MethodCallExpr,\n-) -> Option<(Option<ast::GenericParamList>, ast::ParamList)> {\n-    let mut arg_names = Vec::new();\n-    let mut arg_types = Vec::new();\n-    for arg in call.arg_list()?.args() {\n-        arg_names.push(match fn_arg_name(&arg) {\n-            Some(name) => name,\n-            None => String::from(\"arg\"),\n-        });\n-        arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n-            Some(ty) => {\n-                if ty.len() > 0 && ty.starts_with('&') {\n-                    if let Some((new_ty, _)) = useless_type_special_case(\"\", &ty[1..].to_owned()) {\n-                        new_ty\n-                    } else {\n-                        ty\n-                    }\n-                } else {\n-                    ty\n-                }\n-            }\n-            None => String::from(\"()\"),\n-        });\n-    }\n-    deduplicate_arg_names(&mut arg_names);\n-    let params = arg_names.into_iter().zip(arg_types).map(|(name, ty)| {\n-        make::param(make::ext::simple_ident_pat(make::name(&name)).into(), make::ty(&ty))\n-    });\n-    Some((None, make::param_list(Some(make::self_param()), params)))\n+    Some((\n+        None,\n+        make::param_list(\n+            match call {\n+                FuncExpr::Func(_) => None,\n+                FuncExpr::Method(_) => Some(make::self_param()),\n+            },\n+            params,\n+        ),\n+    ))\n }\n \n /// Makes duplicate argument names unique by appending incrementing numbers."}]}