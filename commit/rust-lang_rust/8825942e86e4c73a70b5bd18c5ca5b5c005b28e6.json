{"sha": "8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjU5NDJlODZlNGM3M2E3MGI1YmQxOGM1Y2E1YjVjMDA1YjI4ZTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-15T12:39:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T12:39:43Z"}, "message": "Rollup merge of #77802 - jyn514:bootstrap-specific, r=nikomatsakis\n\nAllow making `RUSTC_BOOTSTRAP` conditional on the crate name\n\nMotivation: This came up in the [Zulip stream](https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208403962) for https://github.com/rust-lang/compiler-team/issues/350.\nSee also https://github.com/rust-lang/cargo/pull/6608#issuecomment-458546258; this implements https://github.com/rust-lang/cargo/issues/6627.\nThe goal is for this to eventually allow prohibiting setting `RUSTC_BOOTSTRAP` in build.rs (https://github.com/rust-lang/cargo/issues/7088).\n\n## User-facing changes\n\n- `RUSTC_BOOTSTRAP=1` still works; there is no current plan to remove this.\n- Things like `RUSTC_BOOTSTRAP=0` no longer activate nightly features. In practice this shouldn't be a big deal, since `RUSTC_BOOTSTRAP` is the opposite of stable and everyone uses `RUSTC_BOOTSTRAP=1` anyway.\n- `RUSTC_BOOTSTRAP=x` will enable nightly features only for crate `x`.\n- `RUSTC_BOOTSTRAP=x,y` will enable nightly features only for crates `x` and `y`.\n\n## Implementation changes\n\nThe main change is that `UnstableOptions::from_environment` now requires\nan (optional) crate name. If the crate name is unknown (`None`), then the new feature is not available and you still have to use `RUSTC_BOOTSTRAP=1`. In practice this means the feature is only available for `--crate-name`, not for `#![crate_name]`; I'm interested in supporting the second but I'm not sure how.\n\nOther major changes:\n\n- Added `Session::is_nightly_build()`, which uses the `crate_name` of\nthe session\n- Added `nightly_options::match_is_nightly_build`, a convenience method\nfor looking up `--crate-name` from CLI arguments.\n`Session::is_nightly_build()`should be preferred where possible, since\nit will take into account `#![crate_name]` (I think).\n- Added `unstable_features` to `rustdoc::RenderOptions`\n\nI'm not sure whether this counts as T-compiler or T-lang; _technically_ RUSTC_BOOTSTRAP is an implementation detail, but it's been used so much it seems like this counts as a language change too.\n\nr? `@joshtriplett`\ncc `@Mark-Simulacrum` `@hsivonen`", "tree": {"sha": "61e80c4fd7a5caacfc86f44431b95e5147fb3a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e80c4fd7a5caacfc86f44431b95e5147fb3a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsSGPCRBK7hj4Ov3rIwAAdHIIAAegp2ATC1zPoCFPrQtK0xKH\n84Ivdvdf7Ig1PzCJBtJIOGWxTOPGJ7O2YH637KSABgXPMBaWL4oJwoggmzUtQSFF\n2p8YA78x4rOcnyM16L128GX3uh4YNf3sOcmaFHfKZrPvR4qlDl+EB46YhMkM50DS\nIY3AQHJgG5m4qtSHMXdWGdFFycp61YL5H0DWPsc9DYdpPygDxOTd/LNTUMfrzKiY\nbqGiB8APmta6gebUnu0vBVpFYo9z8icG7CK0Xv44fPQUElBofKc3XcAMaYiNhsTg\njz7h0gKW7U1eWzjT2IeK0IexkqLJvKqyvL1qmT2MvxVWF2IqFcqnjsteegu0Jsc=\n=NcO7\n-----END PGP SIGNATURE-----\n", "payload": "tree 61e80c4fd7a5caacfc86f44431b95e5147fb3a17\nparent 75042566d1c90d912f22e4db43b6d3af98447986\nparent 622c48e4f1a5bc3727f8ead89767c8a9e367a77e\nauthor Jonas Schievink <jonasschievink@gmail.com> 1605443983 +0100\ncommitter GitHub <noreply@github.com> 1605443983 +0100\n\nRollup merge of #77802 - jyn514:bootstrap-specific, r=nikomatsakis\n\nAllow making `RUSTC_BOOTSTRAP` conditional on the crate name\n\nMotivation: This came up in the [Zulip stream](https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208403962) for https://github.com/rust-lang/compiler-team/issues/350.\nSee also https://github.com/rust-lang/cargo/pull/6608#issuecomment-458546258; this implements https://github.com/rust-lang/cargo/issues/6627.\nThe goal is for this to eventually allow prohibiting setting `RUSTC_BOOTSTRAP` in build.rs (https://github.com/rust-lang/cargo/issues/7088).\n\n## User-facing changes\n\n- `RUSTC_BOOTSTRAP=1` still works; there is no current plan to remove this.\n- Things like `RUSTC_BOOTSTRAP=0` no longer activate nightly features. In practice this shouldn't be a big deal, since `RUSTC_BOOTSTRAP` is the opposite of stable and everyone uses `RUSTC_BOOTSTRAP=1` anyway.\n- `RUSTC_BOOTSTRAP=x` will enable nightly features only for crate `x`.\n- `RUSTC_BOOTSTRAP=x,y` will enable nightly features only for crates `x` and `y`.\n\n## Implementation changes\n\nThe main change is that `UnstableOptions::from_environment` now requires\nan (optional) crate name. If the crate name is unknown (`None`), then the new feature is not available and you still have to use `RUSTC_BOOTSTRAP=1`. In practice this means the feature is only available for `--crate-name`, not for `#![crate_name]`; I'm interested in supporting the second but I'm not sure how.\n\nOther major changes:\n\n- Added `Session::is_nightly_build()`, which uses the `crate_name` of\nthe session\n- Added `nightly_options::match_is_nightly_build`, a convenience method\nfor looking up `--crate-name` from CLI arguments.\n`Session::is_nightly_build()`should be preferred where possible, since\nit will take into account `#![crate_name]` (I think).\n- Added `unstable_features` to `rustdoc::RenderOptions`\n\nI'm not sure whether this counts as T-compiler or T-lang; _technically_ RUSTC_BOOTSTRAP is an implementation detail, but it's been used so much it seems like this counts as a language change too.\n\nr? `@joshtriplett`\ncc `@Mark-Simulacrum` `@hsivonen`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "html_url": "https://github.com/rust-lang/rust/commit/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75042566d1c90d912f22e4db43b6d3af98447986", "url": "https://api.github.com/repos/rust-lang/rust/commits/75042566d1c90d912f22e4db43b6d3af98447986", "html_url": "https://github.com/rust-lang/rust/commit/75042566d1c90d912f22e4db43b6d3af98447986"}, {"sha": "622c48e4f1a5bc3727f8ead89767c8a9e367a77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/622c48e4f1a5bc3727f8ead89767c8a9e367a77e", "html_url": "https://github.com/rust-lang/rust/commit/622c48e4f1a5bc3727f8ead89767c8a9e367a77e"}], "stats": {"total": 208, "additions": 128, "deletions": 80}, "files": [{"sha": "d93655e59050da240db12108043535b8edb7789e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -53,7 +53,6 @@ use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::config::nightly_options;\n use rustc_session::lint::{builtin::BARE_TRAIT_OBJECTS, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n@@ -1398,8 +1397,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             \"`impl Trait` not allowed outside of {}\",\n                             allowed_in,\n                         );\n-                        if pos == ImplTraitPosition::Binding && nightly_options::is_nightly_build()\n-                        {\n+                        if pos == ImplTraitPosition::Binding && self.sess.is_nightly_build() {\n                             err.help(\n                                 \"add `#![feature(impl_trait_in_bindings)]` to the crate \\\n                                    attributes to enable\","}, {"sha": "a8a1646183c868de8bf0865af07fa6a7650aa826", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -3,7 +3,6 @@ use crate::llvm;\n use libc::c_int;\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_feature::UnstableFeatures;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n@@ -147,13 +146,11 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     supported_target_features(sess)\n         .iter()\n-        .filter_map(|&(feature, gate)| {\n-            if UnstableFeatures::from_environment().is_nightly_build() || gate.is_none() {\n-                Some(feature)\n-            } else {\n-                None\n-            }\n-        })\n+        .filter_map(\n+            |&(feature, gate)| {\n+                if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n+            },\n+        )\n         .filter(|feature| {\n             let llvm_feature = to_llvm_feature(sess, feature);\n             let cstr = CString::new(llvm_feature).unwrap();"}, {"sha": "c5447612555346fdc617bc30c56c9eb687874631", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorReported, PResult};\n-use rustc_feature::{find_gated_cfg, UnstableFeatures};\n+use rustc_feature::find_gated_cfg;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{self, collect_crate_types, get_builtin_codegen_backend};\n use rustc_interface::{interface, Queries};\n@@ -746,9 +746,6 @@ impl RustcDefaultCalls {\n                     }\n                 }\n                 Cfg => {\n-                    let allow_unstable_cfg =\n-                        UnstableFeatures::from_environment().is_nightly_build();\n-\n                     let mut cfgs = sess\n                         .parse_sess\n                         .config\n@@ -763,7 +760,7 @@ impl RustcDefaultCalls {\n                             // it, this is intended to get into Cargo and then go\n                             // through to build scripts.\n                             if (name != sym::target_feature || value != Some(sym::crt_dash_static))\n-                                && !allow_unstable_cfg\n+                                && !sess.is_nightly_build()\n                                 && find_gated_cfg(|cfg_sym| cfg_sym == name).is_some()\n                             {\n                                 return None;\n@@ -814,14 +811,14 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n     }\n }\n \n-fn usage(verbose: bool, include_unstable_options: bool) {\n+fn usage(verbose: bool, include_unstable_options: bool, nightly_build: bool) {\n     let groups = if verbose { config::rustc_optgroups() } else { config::rustc_short_optgroups() };\n     let mut options = getopts::Options::new();\n     for option in groups.iter().filter(|x| include_unstable_options || x.is_stable()) {\n         (option.apply)(&mut options);\n     }\n     let message = \"Usage: rustc [OPTIONS] INPUT\";\n-    let nightly_help = if nightly_options::is_nightly_build() {\n+    let nightly_help = if nightly_build {\n         \"\\n    -Z help             Print unstable compiler options\"\n     } else {\n         \"\"\n@@ -831,7 +828,7 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     } else {\n         \"\\n    --help -v           Print the full set of options rustc accepts\"\n     };\n-    let at_path = if verbose && nightly_options::is_nightly_build() {\n+    let at_path = if verbose && nightly_build {\n         \"    @path               Read newline separated options from `path`\\n\"\n     } else {\n         \"\"\n@@ -1034,7 +1031,9 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     if args.is_empty() {\n         // user did not write `-v` nor `-Z unstable-options`, so do not\n         // include that extra information.\n-        usage(false, false);\n+        let nightly_build =\n+            rustc_feature::UnstableFeatures::from_environment(None).is_nightly_build();\n+        usage(false, false, nightly_build);\n         return None;\n     }\n \n@@ -1063,7 +1062,9 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         // Only show unstable options in --help if we accept unstable options.\n-        usage(matches.opt_present(\"verbose\"), nightly_options::is_unstable_enabled(&matches));\n+        let unstable_enabled = nightly_options::is_unstable_enabled(&matches);\n+        let nightly_build = nightly_options::match_is_nightly_build(&matches);\n+        usage(matches.opt_present(\"verbose\"), unstable_enabled, nightly_build);\n         return None;\n     }\n "}, {"sha": "f965f7fdefe4ac26fcef591d8b0bf3b22ecab414", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -59,7 +59,7 @@ pub enum Stability {\n     Deprecated(&'static str, Option<&'static str>),\n }\n \n-#[derive(Clone, Copy, Hash)]\n+#[derive(Clone, Copy, Debug, Hash)]\n pub enum UnstableFeatures {\n     /// Hard errors for unstable features are active, as on beta/stable channels.\n     Disallow,\n@@ -73,11 +73,20 @@ pub enum UnstableFeatures {\n }\n \n impl UnstableFeatures {\n-    pub fn from_environment() -> UnstableFeatures {\n+    /// This takes into account `RUSTC_BOOTSTRAP`.\n+    ///\n+    /// If `krate` is [`Some`], then setting `RUSTC_BOOTSTRAP=krate` will enable the nightly features.\n+    /// Otherwise, only `RUSTC_BOOTSTRAP=1` will work.\n+    pub fn from_environment(krate: Option<&str>) -> Self {\n         // `true` if this is a feature-staged build, i.e., on the beta or stable channel.\n         let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+        // Returns whether `krate` should be counted as unstable\n+        let is_unstable_crate = |var: &str| {\n+            krate.map_or(false, |name| var.split(',').any(|new_krate| new_krate == name))\n+        };\n         // `true` if we should enable unstable features for bootstrapping.\n-        let bootstrap = std::env::var(\"RUSTC_BOOTSTRAP\").is_ok();\n+        let bootstrap = std::env::var(\"RUSTC_BOOTSTRAP\")\n+            .map_or(false, |var| var == \"1\" || is_unstable_crate(&var));\n         match (disable_unstable_features, bootstrap) {\n             (_, true) => UnstableFeatures::Cheat,\n             (true, _) => UnstableFeatures::Disallow,\n@@ -140,3 +149,30 @@ pub use builtin_attrs::{\n     AttributeType, BuiltinAttribute, GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n };\n pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+\n+#[cfg(test)]\n+mod test {\n+    use super::UnstableFeatures;\n+\n+    #[test]\n+    fn rustc_bootstrap_parsing() {\n+        let is_bootstrap = |env, krate| {\n+            std::env::set_var(\"RUSTC_BOOTSTRAP\", env);\n+            matches!(UnstableFeatures::from_environment(krate), UnstableFeatures::Cheat)\n+        };\n+        assert!(is_bootstrap(\"1\", None));\n+        assert!(is_bootstrap(\"1\", Some(\"x\")));\n+        // RUSTC_BOOTSTRAP allows specifying a specific crate\n+        assert!(is_bootstrap(\"x\", Some(\"x\")));\n+        // RUSTC_BOOTSTRAP allows multiple comma-delimited crates\n+        assert!(is_bootstrap(\"x,y,z\", Some(\"x\")));\n+        assert!(is_bootstrap(\"x,y,z\", Some(\"y\")));\n+        // Crate that aren't specified do not get unstable features\n+        assert!(!is_bootstrap(\"x\", Some(\"a\")));\n+        assert!(!is_bootstrap(\"x,y,z\", Some(\"a\")));\n+        assert!(!is_bootstrap(\"x,y,z\", None));\n+\n+        // this is technically a breaking change, but there are no stability guarantees for RUSTC_BOOTSTRAP\n+        assert!(!is_bootstrap(\"0\", None));\n+    }\n+}"}, {"sha": "e185ee24d171bdcd8a4085505d83b5ddc0c15c4e", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -15,7 +15,6 @@ use std::io::{self, Read};\n use std::path::Path;\n \n use rustc_serialize::opaque::Encoder;\n-use rustc_session::config::nightly_options;\n \n /// The first few bytes of files generated by incremental compilation.\n const FILE_MAGIC: &[u8] = b\"RSIC\";\n@@ -28,12 +27,12 @@ const HEADER_FORMAT_VERSION: u16 = 0;\n /// the Git commit hash.\n const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n-pub fn write_file_header(stream: &mut Encoder) {\n+pub fn write_file_header(stream: &mut Encoder, nightly_build: bool) {\n     stream.emit_raw_bytes(FILE_MAGIC);\n     stream\n         .emit_raw_bytes(&[(HEADER_FORMAT_VERSION >> 0) as u8, (HEADER_FORMAT_VERSION >> 8) as u8]);\n \n-    let rustc_version = rustc_version();\n+    let rustc_version = rustc_version(nightly_build);\n     assert_eq!(rustc_version.len(), (rustc_version.len() as u8) as usize);\n     stream.emit_raw_bytes(&[rustc_version.len() as u8]);\n     stream.emit_raw_bytes(rustc_version.as_bytes());\n@@ -51,6 +50,7 @@ pub fn write_file_header(stream: &mut Encoder) {\n pub fn read_file(\n     report_incremental_info: bool,\n     path: &Path,\n+    nightly_build: bool,\n ) -> io::Result<Option<(Vec<u8>, usize)>> {\n     if !path.exists() {\n         return Ok(None);\n@@ -93,7 +93,7 @@ pub fn read_file(\n         let mut buffer = vec![0; rustc_version_str_len];\n         file.read_exact(&mut buffer)?;\n \n-        if buffer != rustc_version().as_bytes() {\n+        if buffer != rustc_version(nightly_build).as_bytes() {\n             report_format_mismatch(report_incremental_info, path, \"Different compiler version\");\n             return Ok(None);\n         }\n@@ -115,8 +115,8 @@ fn report_format_mismatch(report_incremental_info: bool, file: &Path, message: &\n     }\n }\n \n-fn rustc_version() -> String {\n-    if nightly_options::is_nightly_build() {\n+fn rustc_version(nightly_build: bool) -> String {\n+    if nightly_build {\n         if let Some(val) = env::var_os(\"RUSTC_FORCE_INCR_COMP_ARTIFACT_HEADER\") {\n             return val.to_string_lossy().into_owned();\n         }"}, {"sha": "578c045a2b4e5d92aeaa7a9498a2a6220b88033e", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -53,8 +53,12 @@ impl LoadResult<(PreviousDepGraph, WorkProductMap)> {\n     }\n }\n \n-fn load_data(report_incremental_info: bool, path: &Path) -> LoadResult<(Vec<u8>, usize)> {\n-    match file_format::read_file(report_incremental_info, path) {\n+fn load_data(\n+    report_incremental_info: bool,\n+    path: &Path,\n+    nightly_build: bool,\n+) -> LoadResult<(Vec<u8>, usize)> {\n+    match file_format::read_file(report_incremental_info, path, nightly_build) {\n         Ok(Some(data_and_pos)) => LoadResult::Ok { data: data_and_pos },\n         Ok(None) => {\n             // The file either didn't exist or was produced by an incompatible\n@@ -111,13 +115,14 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     let expected_hash = sess.opts.dep_tracking_hash();\n \n     let mut prev_work_products = FxHashMap::default();\n+    let nightly_build = sess.is_nightly_build();\n \n     // If we are only building with -Zquery-dep-graph but without an actual\n     // incr. comp. session directory, we skip this. Otherwise we'd fail\n     // when trying to load work products.\n     if sess.incr_comp_session_dir_opt().is_some() {\n         let work_products_path = work_products_path(sess);\n-        let load_result = load_data(report_incremental_info, &work_products_path);\n+        let load_result = load_data(report_incremental_info, &work_products_path, nightly_build);\n \n         if let LoadResult::Ok { data: (work_products_data, start_pos) } = load_result {\n             // Decode the list of work_products\n@@ -163,7 +168,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     MaybeAsync::Async(std::thread::spawn(move || {\n         let _prof_timer = prof.generic_activity(\"incr_comp_load_dep_graph\");\n \n-        match load_data(report_incremental_info, &path) {\n+        match load_data(report_incremental_info, &path, nightly_build) {\n             LoadResult::DataOutOfDate => LoadResult::DataOutOfDate,\n             LoadResult::Error { message } => LoadResult::Error { message },\n             LoadResult::Ok { data: (bytes, start_pos) } => {\n@@ -201,7 +206,11 @@ pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n \n     let _prof_timer = sess.prof.generic_activity(\"incr_comp_load_query_result_cache\");\n \n-    match load_data(sess.opts.debugging_opts.incremental_info, &query_cache_path(sess)) {\n+    match load_data(\n+        sess.opts.debugging_opts.incremental_info,\n+        &query_cache_path(sess),\n+        sess.is_nightly_build(),\n+    ) {\n         LoadResult::Ok { data: (bytes, start_pos) } => OnDiskCache::new(sess, bytes, start_pos),\n         _ => OnDiskCache::new_empty(sess.source_map()),\n     }"}, {"sha": "102a77e8e79a7260f611486d6e0db5a5c9488905", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -119,7 +119,7 @@ where\n \n     // generate the data in a memory buffer\n     let mut encoder = Encoder::new(Vec::new());\n-    file_format::write_file_header(&mut encoder);\n+    file_format::write_file_header(&mut encoder, sess.is_nightly_build());\n     encode(&mut encoder);\n \n     // write the data out"}, {"sha": "d2e65abfbc7ee74da9adb15da394a9c3c926fab7", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -4,7 +4,6 @@ use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir;\n-use rustc_session::config::nightly_options;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n@@ -104,7 +103,7 @@ impl NonConstOp for FnCallUnstable {\n \n         if ccx.is_const_stable_const_fn() {\n             err.help(\"Const-stable functions can only call other const-stable functions\");\n-        } else if nightly_options::is_nightly_build() {\n+        } else if ccx.tcx.sess.is_nightly_build() {\n             if let Some(feature) = feature {\n                 err.help(&format!(\n                     \"add `#![feature({})]` to the crate attributes to enable\","}, {"sha": "d395ae4ca2aa7637be5a18a0f6faf4cb639a5c09", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -12,7 +12,6 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{HirId, Pat};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_session::config::nightly_options;\n use rustc_session::lint::builtin::BINDINGS_WITH_VARIANT_NAME;\n use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS};\n use rustc_session::parse::feature_err;\n@@ -502,7 +501,7 @@ fn check_exhaustive<'p, 'tcx>(\n                 so a wildcard `_` is necessary to match exhaustively\",\n             scrut_ty,\n         ));\n-        if nightly_options::is_nightly_build() {\n+        if cx.tcx.sess.is_nightly_build() {\n             err.help(&format!(\n                 \"add `#![feature(precise_pointer_size_matching)]` \\\n                     to the crate attributes to enable precise `{}` matching\","}, {"sha": "e37c6418eb81caace69acc2f6fe2216715c50d12", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::nightly_options;\n use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};\n \n@@ -145,7 +144,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n                 //\n                 // FIXME(ecstaticmorse): Maybe this could be incorporated into `feature_err`? This\n                 // is a pretty narrow case, however.\n-                if nightly_options::is_nightly_build() {\n+                if tcx.sess.is_nightly_build() {\n                     for gate in missing_secondary {\n                         let note = format!(\n                             \"add `#![feature({})]` to the crate attributes to enable\","}, {"sha": "2473436a91675b14cbd9c3afe1193deb1ff4b4b0", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -16,7 +16,6 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n-use rustc_session::config::nightly_options;\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -890,7 +889,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             }\n             (Res::Def(DefKind::TyAlias, def_id), PathSource::Trait(_)) => {\n                 err.span_label(span, \"type aliases cannot be used as traits\");\n-                if nightly_options::is_nightly_build() {\n+                if self.r.session.is_nightly_build() {\n                     let msg = \"you might have meant to use `#![feature(trait_alias)]` instead of a \\\n                                `type` alias\";\n                     if let Some(span) = self.def_span(def_id) {\n@@ -1675,7 +1674,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 _ => {}\n             }\n         }\n-        if nightly_options::is_nightly_build()\n+        if self.tcx.sess.is_nightly_build()\n             && !self.tcx.features().in_band_lifetimes\n             && suggests_in_band\n         {"}, {"sha": "db16a90cc60fa38262e20ae334087650c9f9b16b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -1250,7 +1250,7 @@ fn parse_crate_edition(matches: &getopts::Matches) -> Edition {\n         None => DEFAULT_EDITION,\n     };\n \n-    if !edition.is_stable() && !nightly_options::is_nightly_build() {\n+    if !edition.is_stable() && !nightly_options::match_is_nightly_build(matches) {\n         early_error(\n             ErrorOutputType::default(),\n             &format!(\n@@ -1547,7 +1547,9 @@ fn parse_libs(\n                     );\n                 }\n             };\n-            if kind == NativeLibKind::StaticNoBundle && !nightly_options::is_nightly_build() {\n+            if kind == NativeLibKind::StaticNoBundle\n+                && !nightly_options::match_is_nightly_build(matches)\n+            {\n                 early_error(\n                     error_format,\n                     \"the library kind 'static-nobundle' is only \\\n@@ -1836,10 +1838,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         cg,\n         error_format,\n         externs,\n+        unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n         crate_name,\n         alt_std_name: None,\n         libs,\n-        unstable_features: UnstableFeatures::from_environment(),\n         debug_assertions,\n         actually_rustdoc: false,\n         trimmed_def_paths: TrimmedDefPaths::default(),\n@@ -1960,17 +1962,21 @@ pub mod nightly_options {\n     use rustc_feature::UnstableFeatures;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n-        is_nightly_build() && matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\")\n+        match_is_nightly_build(matches)\n+            && matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\")\n     }\n \n-    pub fn is_nightly_build() -> bool {\n-        UnstableFeatures::from_environment().is_nightly_build()\n+    pub fn match_is_nightly_build(matches: &getopts::Matches) -> bool {\n+        is_nightly_build(matches.opt_str(\"crate-name\").as_deref())\n+    }\n+\n+    pub fn is_nightly_build(krate: Option<&str>) -> bool {\n+        UnstableFeatures::from_environment(krate).is_nightly_build()\n     }\n \n     pub fn check_nightly_options(matches: &getopts::Matches, flags: &[RustcOptGroup]) {\n         let has_z_unstable_option = matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\");\n-        let really_allows_unstable_options =\n-            UnstableFeatures::from_environment().is_nightly_build();\n+        let really_allows_unstable_options = match_is_nightly_build(matches);\n \n         for opt in flags.iter() {\n             if opt.stability == OptionStability::Stable {"}, {"sha": "e3d24ccb85fa0995a9f71d02d03c55a3c0b0640c", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -150,7 +150,7 @@ impl ParseSess {\n     pub fn with_span_handler(handler: Handler, source_map: Lrc<SourceMap>) -> Self {\n         Self {\n             span_diagnostic: handler,\n-            unstable_features: UnstableFeatures::from_environment(),\n+            unstable_features: UnstableFeatures::from_environment(None),\n             config: FxHashSet::default(),\n             edition: ExpnId::root().expn_data().edition,\n             raw_identifier_spans: Lock::new(Vec::new()),"}, {"sha": "419d1447764ec833e0182adef3ee8580ebfc44d9", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -745,6 +745,9 @@ impl Session {\n     pub fn unstable_options(&self) -> bool {\n         self.opts.debugging_opts.unstable_options\n     }\n+    pub fn is_nightly_build(&self) -> bool {\n+        self.opts.unstable_features.is_nightly_build()\n+    }\n     pub fn overflow_checks(&self) -> bool {\n         self.opts\n             .cg"}, {"sha": "37538e7aac4957cf6fac3521dd9d9704596ea40b", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -12,7 +12,6 @@ use rustc_infer::infer::{self, InferCtxt, InferOk};\n use rustc_middle::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_session::config::nightly_options;\n use rustc_span::Span;\n \n use std::ops::ControlFlow;\n@@ -602,7 +601,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         err.span_label(span, label);\n \n-        if nightly_options::is_nightly_build() {\n+        if self.tcx.sess.is_nightly_build() {\n             err.help(\"add #![feature(member_constraints)] to the crate attributes to enable\");\n         }\n "}, {"sha": "84efae694db6f1595f468e67042903fc297232c6", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -25,7 +25,6 @@ use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{\n     self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n-use rustc_session::config::nightly_options;\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n@@ -1272,7 +1271,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     self.tcx.def_path_str(stable_pick.item.def_id),\n                 ));\n \n-                if nightly_options::is_nightly_build() {\n+                if self.tcx.sess.is_nightly_build() {\n                     for (candidate, feature) in unstable_candidates {\n                         diag.help(&format!(\n                             \"add `#![feature({})]` to the crate attributes to enable `{}`\","}, {"sha": "5f5deebca651669cffc7e59d151c6753528ec035", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -681,7 +681,9 @@ impl Attributes {\n                                 }\n                                 Some(&(_, _, ExternalLocation::Remote(ref s))) => s.to_string(),\n                                 Some(&(_, _, ExternalLocation::Unknown)) | None => String::from(\n-                                    if UnstableFeatures::from_environment().is_nightly_build() {\n+                                    // NOTE: intentionally doesn't pass crate name to avoid having\n+                                    // different primitive links between crates\n+                                    if UnstableFeatures::from_environment(None).is_nightly_build() {\n                                         \"https://doc.rust-lang.org/nightly\"\n                                     } else {\n                                         \"https://doc.rust-lang.org\""}, {"sha": "f0fc0dc6514c00df74f04402a354417540e10fce", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -257,6 +257,7 @@ pub struct RenderOptions {\n     pub document_private: bool,\n     /// Document items that have `doc(hidden)`.\n     pub document_hidden: bool,\n+    pub unstable_features: rustc_feature::UnstableFeatures,\n }\n \n /// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n@@ -299,7 +300,7 @@ impl Options {\n                 println_condition(p.condition);\n             }\n \n-            if nightly_options::is_nightly_build() {\n+            if nightly_options::match_is_nightly_build(matches) {\n                 println!(\"\\nPasses run with `--show-coverage`:\");\n                 for p in passes::COVERAGE_PASSES {\n                     print!(\"{:>20}\", p.pass.name);\n@@ -483,6 +484,7 @@ impl Options {\n             &matches.opt_strs(\"html-after-content\"),\n             &matches.opt_strs(\"markdown-before-content\"),\n             &matches.opt_strs(\"markdown-after-content\"),\n+            nightly_options::match_is_nightly_build(&matches),\n             &diag,\n             &mut id_map,\n             edition,\n@@ -539,7 +541,9 @@ impl Options {\n         let output_format = match matches.opt_str(\"output-format\") {\n             Some(s) => match OutputFormat::try_from(s.as_str()) {\n                 Ok(o) => {\n-                    if o.is_json() && !(show_coverage || nightly_options::is_nightly_build()) {\n+                    if o.is_json()\n+                        && !(show_coverage || nightly_options::match_is_nightly_build(matches))\n+                    {\n                         diag.struct_err(\"json output format isn't supported for doc generation\")\n                             .emit();\n                         return Err(1);\n@@ -591,7 +595,6 @@ impl Options {\n \n         Ok(Options {\n             input,\n-            crate_name,\n             proc_macro_crate,\n             error_format,\n             libs,\n@@ -643,7 +646,11 @@ impl Options {\n                 generate_search_filter,\n                 document_private,\n                 document_hidden,\n+                unstable_features: rustc_feature::UnstableFeatures::from_environment(\n+                    crate_name.as_deref(),\n+                ),\n             },\n+            crate_name,\n             output_format,\n         })\n     }\n@@ -661,7 +668,8 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &rustc_errors::Han\n     for flag in deprecated_flags.iter() {\n         if matches.opt_present(flag) {\n             if *flag == \"output-format\"\n-                && (matches.opt_present(\"show-coverage\") || nightly_options::is_nightly_build())\n+                && (matches.opt_present(\"show-coverage\")\n+                    || nightly_options::match_is_nightly_build(matches))\n             {\n                 continue;\n             }"}, {"sha": "14a2def138310af0d4c1043c377af28a68b21feb", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -371,7 +371,7 @@ pub fn run_core(\n         cg: codegen_options,\n         externs,\n         target_triple: target,\n-        unstable_features: UnstableFeatures::from_environment(),\n+        unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n         actually_rustdoc: true,\n         debugging_opts,\n         error_format,"}, {"sha": "5e40e6b151d30bb2bc1bb8caab8dc537c1592c92", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -1,7 +1,6 @@\n use rustc_ast as ast;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n-use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, CRATE_HIR_ID};\n@@ -70,7 +69,7 @@ pub fn run(options: Options) -> Result<(), ErrorReported> {\n         lint_cap: Some(options.lint_cap.clone().unwrap_or_else(|| lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n-        unstable_features: UnstableFeatures::from_environment(),\n+        unstable_features: options.render_options.unstable_features,\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions { ..config::basic_debugging_options() },\n         edition: options.edition,"}, {"sha": "900821dbf4a6bb7d33de32a06b105aa29109897a", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -1,6 +1,5 @@\n use crate::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n use crate::rustc_span::edition::Edition;\n-use rustc_feature::UnstableFeatures;\n use std::fs;\n use std::path::Path;\n use std::str;\n@@ -25,12 +24,13 @@ impl ExternalHtml {\n         after_content: &[String],\n         md_before_content: &[String],\n         md_after_content: &[String],\n+        nightly_build: bool,\n         diag: &rustc_errors::Handler,\n         id_map: &mut IdMap,\n         edition: Edition,\n         playground: &Option<Playground>,\n     ) -> Option<ExternalHtml> {\n-        let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n+        let codes = ErrorCodes::from(nightly_build);\n         let ih = load_external_files(in_header, diag)?;\n         let bc = load_external_files(before_content, diag)?;\n         let m_bc = load_external_files(md_before_content, diag)?;"}, {"sha": "b3bfa7138a0281b3730b0ecda9620775a486d5dc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -52,7 +52,6 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n@@ -397,6 +396,7 @@ impl FormatRenderer for Context {\n             resource_suffix,\n             static_root_path,\n             generate_search_filter,\n+            unstable_features,\n             ..\n         } = options;\n \n@@ -466,7 +466,7 @@ impl FormatRenderer for Context {\n             static_root_path,\n             fs: DocFS::new(sender),\n             edition,\n-            codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n+            codes: ErrorCodes::from(unstable_features.is_nightly_build()),\n             playground,\n         };\n "}, {"sha": "33bd57223b8e944a311c0da27757ddce7f6d061c", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -2,7 +2,6 @@ use std::fs::{create_dir_all, read_to_string, File};\n use std::io::prelude::*;\n use std::path::Path;\n \n-use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -66,7 +65,7 @@ pub fn render<P: AsRef<Path>>(\n     let title = metadata[0];\n \n     let mut ids = IdMap::new();\n-    let error_codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n+    let error_codes = ErrorCodes::from(options.unstable_features.is_nightly_build());\n     let text = if !options.markdown_no_toc {\n         MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n     } else {\n@@ -131,7 +130,7 @@ pub fn test(mut options: Options) -> Result<(), String> {\n         options.enable_per_target_ignores,\n     );\n     collector.set_position(DUMMY_SP);\n-    let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n+    let codes = ErrorCodes::from(options.render_options.unstable_features.is_nightly_build());\n \n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n "}, {"sha": "5fd7f5f81f7e0632b278b1f45506b4f3f1466f78", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -92,9 +92,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n \n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n \n-    if tests.found_tests == 0\n-        && rustc_feature::UnstableFeatures::from_environment().is_nightly_build()\n-    {\n+    if tests.found_tests == 0 && cx.tcx.sess.is_nightly_build() {\n         if should_have_doc_example(cx, &item) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());"}, {"sha": "26b64b4905ea77ef320765843bc108979671b12e", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -5,7 +5,6 @@ use crate::fold::DocFolder;\n use crate::html::markdown::opts;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser};\n-use rustc_feature::UnstableFeatures;\n use rustc_session::lint;\n use std::iter::Peekable;\n use std::str::CharIndices;\n@@ -27,7 +26,7 @@ impl<'a, 'tcx> InvalidHtmlTagsLinter<'a, 'tcx> {\n }\n \n pub fn check_invalid_html_tags(krate: Crate, cx: &DocContext<'_>) -> Crate {\n-    if !UnstableFeatures::from_environment().is_nightly_build() {\n+    if !cx.tcx.sess.is_nightly_build() {\n         krate\n     } else {\n         let mut coll = InvalidHtmlTagsLinter::new(cx);"}, {"sha": "964773dc0554bb198fe1c2469ef604d3f7b530e5", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8825942e86e4c73a70b5bd18c5ca5b5c005b28e6/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=8825942e86e4c73a70b5bd18c5ca5b5c005b28e6", "patch": "@@ -7,7 +7,6 @@ use core::ops::Range;\n use pulldown_cmark::{Event, LinkType, Parser, Tag};\n use regex::Regex;\n use rustc_errors::Applicability;\n-use rustc_feature::UnstableFeatures;\n use rustc_session::lint;\n \n pub const CHECK_NON_AUTOLINKS: Pass = Pass {\n@@ -54,7 +53,7 @@ impl<'a, 'tcx> NonAutolinksLinter<'a, 'tcx> {\n }\n \n pub fn check_non_autolinks(krate: Crate, cx: &DocContext<'_>) -> Crate {\n-    if !UnstableFeatures::from_environment().is_nightly_build() {\n+    if !cx.tcx.sess.is_nightly_build() {\n         krate\n     } else {\n         let mut coll = NonAutolinksLinter::new(cx);"}]}