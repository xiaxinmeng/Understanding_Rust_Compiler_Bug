{"sha": "aa4bee228f23b3e1a1d91ed3a4606af3c6b60895", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNGJlZTIyOGYyM2IzZTFhMWQ5MWVkM2E0NjA2YWYzYzZiNjA4OTU=", "commit": {"author": {"name": "Robert Sedlacek", "email": "rs@474.at", "date": "2020-07-03T16:20:19Z"}, "committer": {"name": "Robert Sedlacek", "email": "rs@474.at", "date": "2020-07-03T16:20:19Z"}, "message": "LateContext has only one lifetime parameter now", "tree": {"sha": "c90a6935f05a78d38fa4585a7e68a7f5df521ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90a6935f05a78d38fa4585a7e68a7f5df521ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa4bee228f23b3e1a1d91ed3a4606af3c6b60895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4bee228f23b3e1a1d91ed3a4606af3c6b60895", "html_url": "https://github.com/rust-lang/rust/commit/aa4bee228f23b3e1a1d91ed3a4606af3c6b60895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa4bee228f23b3e1a1d91ed3a4606af3c6b60895/comments", "author": {"login": "phaylon", "id": 41822, "node_id": "MDQ6VXNlcjQxODIy", "avatar_url": "https://avatars.githubusercontent.com/u/41822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaylon", "html_url": "https://github.com/phaylon", "followers_url": "https://api.github.com/users/phaylon/followers", "following_url": "https://api.github.com/users/phaylon/following{/other_user}", "gists_url": "https://api.github.com/users/phaylon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaylon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaylon/subscriptions", "organizations_url": "https://api.github.com/users/phaylon/orgs", "repos_url": "https://api.github.com/users/phaylon/repos", "events_url": "https://api.github.com/users/phaylon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaylon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phaylon", "id": 41822, "node_id": "MDQ6VXNlcjQxODIy", "avatar_url": "https://avatars.githubusercontent.com/u/41822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phaylon", "html_url": "https://github.com/phaylon", "followers_url": "https://api.github.com/users/phaylon/followers", "following_url": "https://api.github.com/users/phaylon/following{/other_user}", "gists_url": "https://api.github.com/users/phaylon/gists{/gist_id}", "starred_url": "https://api.github.com/users/phaylon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phaylon/subscriptions", "organizations_url": "https://api.github.com/users/phaylon/orgs", "repos_url": "https://api.github.com/users/phaylon/repos", "events_url": "https://api.github.com/users/phaylon/events{/privacy}", "received_events_url": "https://api.github.com/users/phaylon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d617551a6a3830a5324898f2046b97aad8c6067a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d617551a6a3830a5324898f2046b97aad8c6067a", "html_url": "https://github.com/rust-lang/rust/commit/d617551a6a3830a5324898f2046b97aad8c6067a"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "8587a79e8217e8863a57315057b55940bd6c7582", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aa4bee228f23b3e1a1d91ed3a4606af3c6b60895/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa4bee228f23b3e1a1d91ed3a4606af3c6b60895/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=aa4bee228f23b3e1a1d91ed3a4606af3c6b60895", "patch": "@@ -83,8 +83,8 @@ declare_clippy_lint! {\n \n declare_lint_pass!(PatternTypeMismatch => [PATTERN_TYPE_MISMATCH]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PatternTypeMismatch {\n-    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt<'_>) {\n+impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n+    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if let StmtKind::Local(ref local) = stmt.kind {\n             if let Some(init) = &local.init {\n                 if let Some(init_ty) = cx.tables().node_type_opt(init.hir_id) {\n@@ -102,7 +102,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PatternTypeMismatch {\n         }\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Match(ref expr, arms, source) = expr.kind {\n             match source {\n                 MatchSource::Normal | MatchSource::IfLetDesugar { .. } | MatchSource::WhileLetDesugar => {\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PatternTypeMismatch {\n \n     fn check_fn(\n         &mut self,\n-        cx: &LateContext<'a, 'tcx>,\n+        cx: &LateContext<'tcx>,\n         _: intravisit::FnKind<'tcx>,\n         _: &'tcx FnDecl<'_>,\n         body: &'tcx Body<'_>,\n@@ -146,8 +146,8 @@ enum DerefPossible {\n     Impossible,\n }\n \n-fn apply_lint<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n+fn apply_lint<'tcx>(\n+    cx: &LateContext<'tcx>,\n     pat: &Pat<'_>,\n     expr_ty: Ty<'tcx>,\n     deref_possible: DerefPossible,\n@@ -185,8 +185,8 @@ enum Level {\n }\n \n #[allow(rustc::usage_of_ty_tykind)]\n-fn find_first_mismatch<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n+fn find_first_mismatch<'tcx>(\n+    cx: &LateContext<'tcx>,\n     pat: &Pat<'_>,\n     ty: Ty<'tcx>,\n     level: Level,\n@@ -259,8 +259,8 @@ fn get_variant<'a>(adt_def: &'a AdtDef, qpath: &QPath<'_>) -> Option<&'a Variant\n     None\n }\n \n-fn find_first_mismatch_in_tuple<'a, 'tcx, I>(\n-    cx: &LateContext<'a, 'tcx>,\n+fn find_first_mismatch_in_tuple<'tcx, I>(\n+    cx: &LateContext<'tcx>,\n     pats: &[&Pat<'_>],\n     ty_iter_src: I,\n ) -> Option<(Span, Mutability, Level)>\n@@ -284,8 +284,8 @@ where\n     None\n }\n \n-fn find_first_mismatch_in_struct<'a, 'tcx>(\n-    cx: &LateContext<'a, 'tcx>,\n+fn find_first_mismatch_in_struct<'tcx>(\n+    cx: &LateContext<'tcx>,\n     field_pats: &[FieldPat<'_>],\n     field_defs: &[FieldDef],\n     substs_ref: SubstsRef<'tcx>,"}]}