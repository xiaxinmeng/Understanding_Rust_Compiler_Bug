{"sha": "ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMjFiMDA5YmJiZTFmNDk5ODFlZDFlZDgzODRjMDJkN2VjZGQxOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T12:16:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T12:16:21Z"}, "message": "auto merge of #15991 : pcwalton/rust/resolve-regions-in-trait-matching, r=alexcrichton\n\nmatching.\r\n\r\nThis breaks code like:\r\n\r\n    struct Foo<'a,'b> {\r\n        x: &'a int,\r\n        y: &'b int,\r\n    }\r\n\r\n    trait Tr {\r\n        fn foo(x: Self) {}\r\n    }\r\n\r\n    impl<'a,'b> Tr for Foo<'a,'b> {\r\n        fn foo(x: Foo<'b,'a>) {} // <-- bad\r\n    }\r\n\r\nChange this code to not contain a lifetime mismatch error. For example:\r\n\r\n    struct Foo<'a,'b> {\r\n        x: &'a int,\r\n        y: &'b int,\r\n    }\r\n\r\n    trait Tr {\r\n        fn foo(x: Self) {}\r\n    }\r\n\r\n    impl<'a,'b> Tr for Foo<'a,'b> {\r\n        fn foo(x: Foo<'a,'b>) {} // OK\r\n    }\r\n\r\nCloses #15517.\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton", "tree": {"sha": "eac9ac4fa5b17d35ffee0b8f1702135d9c572e46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac9ac4fa5b17d35ffee0b8f1702135d9c572e46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d", "html_url": "https://github.com/rust-lang/rust/commit/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d53597ce29e6c4a93fc3edada7489aab51c89ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d53597ce29e6c4a93fc3edada7489aab51c89ea", "html_url": "https://github.com/rust-lang/rust/commit/0d53597ce29e6c4a93fc3edada7489aab51c89ea"}, {"sha": "5de8ed541a93310f8fae5384ccbf422a8f2fcdcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de8ed541a93310f8fae5384ccbf422a8f2fcdcb", "html_url": "https://github.com/rust-lang/rust/commit/5de8ed541a93310f8fae5384ccbf422a8f2fcdcb"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "08a26eefa227364987d9c79acb747ce7e0e10bb0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d", "patch": "@@ -1076,6 +1076,10 @@ fn compare_impl_method(tcx: &ty::ctxt,\n             ty::note_and_explain_type_err(tcx, terr);\n         }\n     }\n+\n+    // Finally, resolve all regions. This catches wily misuses of lifetime\n+    // parameters.\n+    infcx.resolve_regions_and_report_errors();\n }\n \n fn check_cast(fcx: &FnCtxt,"}, {"sha": "f1b30166b5e31231b0a9ee2da8b5bb9ccb6d89c2", "filename": "src/test/compile-fail/trait-matching-lifetimes.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d/src%2Ftest%2Fcompile-fail%2Ftrait-matching-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d/src%2Ftest%2Fcompile-fail%2Ftrait-matching-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-matching-lifetimes.rs?ref=ee21b009bbbe1f49981ed1ed8384c02d7ecdd19d", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that the trait matching code takes lifetime parameters into account.\n+// (Issue #15517.)\n+\n+struct Foo<'a,'b> {\n+    x: &'a int,\n+    y: &'b int,\n+}\n+\n+trait Tr {\n+    fn foo(x: Self) {}\n+}\n+\n+impl<'a,'b> Tr for Foo<'a,'b> {\n+    fn foo(x: Foo<'b,'a>) {\n+        //~^ ERROR method not compatible with trait\n+        //~^^ ERROR method not compatible with trait\n+    }\n+}\n+\n+fn main(){}"}]}