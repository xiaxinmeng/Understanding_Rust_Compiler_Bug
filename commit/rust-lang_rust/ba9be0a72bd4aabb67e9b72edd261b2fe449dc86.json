{"sha": "ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOWJlMGE3MmJkNGFhYmI2N2U5YjcyZWRkMjYxYjJmZTQ0OWRjODY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-29T06:14:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-01T04:59:50Z"}, "message": "rustdoc: Fill in external type parameters correctly\n\nType parameters were filled in for some areas, but not all. This commit unifies\nthe two code paths to fill in type parameters everywhere.\n\nCloses #14508", "tree": {"sha": "52a7f428bda4f35119182e272cd9d150bbccc83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a7f428bda4f35119182e272cd9d150bbccc83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "html_url": "https://github.com/rust-lang/rust/commit/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19fe4aad684bc04a9be0c4fc12aeca12353dae1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19fe4aad684bc04a9be0c4fc12aeca12353dae1d", "html_url": "https://github.com/rust-lang/rust/commit/19fe4aad684bc04a9be0c4fc12aeca12353dae1d"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "b2ed1036c55825f7d5b5a2ac3fec742b8edd1a24", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9be0a72bd4aabb67e9b72edd261b2fe449dc86/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ba9be0a72bd4aabb67e9b72edd261b2fe449dc86", "patch": "@@ -400,14 +400,19 @@ impl Clean<TyParamBound> for ast::TyParamBound {\n     }\n }\n \n-fn external_path(name: &str) -> Path {\n+fn external_path(name: &str, substs: &ty::substs) -> Path {\n     Path {\n         global: false,\n         segments: vec![PathSegment {\n             name: name.to_string(),\n-            lifetimes: Vec::new(),\n-            types: Vec::new(),\n-        }]\n+            lifetimes: match substs.regions {\n+                ty::ErasedRegions => Vec::new(),\n+                ty::NonerasedRegions(ref v) => {\n+                    v.iter().filter_map(|v| v.clean()).collect()\n+                }\n+            },\n+            types: substs.tps.clean(),\n+        }],\n     }\n }\n \n@@ -418,16 +423,21 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n             core::Typed(ref tcx) => tcx,\n             core::NotTyped(_) => return RegionBound,\n         };\n+        let empty = ty::substs::empty();\n         let (did, path) = match *self {\n             ty::BoundStatic => return RegionBound,\n             ty::BoundSend =>\n-                (tcx.lang_items.send_trait().unwrap(), external_path(\"Send\")),\n+                (tcx.lang_items.send_trait().unwrap(),\n+                 external_path(\"Send\", &empty)),\n             ty::BoundSized =>\n-                (tcx.lang_items.sized_trait().unwrap(), external_path(\"Sized\")),\n+                (tcx.lang_items.sized_trait().unwrap(),\n+                 external_path(\"Sized\", &empty)),\n             ty::BoundCopy =>\n-                (tcx.lang_items.copy_trait().unwrap(), external_path(\"Copy\")),\n+                (tcx.lang_items.copy_trait().unwrap(),\n+                 external_path(\"Copy\", &empty)),\n             ty::BoundShare =>\n-                (tcx.lang_items.share_trait().unwrap(), external_path(\"Share\")),\n+                (tcx.lang_items.share_trait().unwrap(),\n+                 external_path(\"Share\", &empty)),\n         };\n         let fqn = csearch::get_item_path(tcx, did);\n         let fqn = fqn.move_iter().map(|i| i.to_str().to_string()).collect();\n@@ -451,7 +461,8 @@ impl Clean<TyParamBound> for ty::TraitRef {\n         let fqn = csearch::get_item_path(tcx, self.def_id);\n         let fqn = fqn.move_iter().map(|i| i.to_str().to_string())\n                      .collect::<Vec<String>>();\n-        let path = external_path(fqn.last().unwrap().as_slice());\n+        let path = external_path(fqn.last().unwrap().as_slice(),\n+                                 &self.substs);\n         cx.external_paths.borrow_mut().get_mut_ref().insert(self.def_id,\n                                                             (fqn, TypeTrait));\n         TraitBound(ResolvedPath {\n@@ -1040,26 +1051,16 @@ impl Clean<Type> for ty::t {\n                 let fqn: Vec<String> = fqn.move_iter().map(|i| {\n                     i.to_str().to_string()\n                 }).collect();\n-                let mut path = external_path(fqn.last()\n-                                                .unwrap()\n-                                                .to_str()\n-                                                .as_slice());\n                 let kind = match ty::get(*self).sty {\n                     ty::ty_struct(..) => TypeStruct,\n                     ty::ty_trait(..) => TypeTrait,\n                     _ => TypeEnum,\n                 };\n-                path.segments.get_mut(0).lifetimes = match substs.regions {\n-                    ty::ErasedRegions => Vec::new(),\n-                    ty::NonerasedRegions(ref v) => {\n-                        v.iter().filter_map(|v| v.clean()).collect()\n-                    }\n-                };\n-                path.segments.get_mut(0).types = substs.tps.clean();\n                 cx.external_paths.borrow_mut().get_mut_ref().insert(did,\n                                                                     (fqn, kind));\n                 ResolvedPath {\n-                    path: path,\n+                    path: external_path(fqn.last().unwrap().to_str().as_slice(),\n+                                        substs),\n                     typarams: None,\n                     did: did,\n                 }"}]}