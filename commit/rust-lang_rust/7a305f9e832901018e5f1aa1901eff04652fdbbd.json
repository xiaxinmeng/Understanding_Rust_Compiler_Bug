{"sha": "7a305f9e832901018e5f1aa1901eff04652fdbbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzA1ZjllODMyOTAxMDE4ZTVmMWFhMTkwMWVmZjA0NjUyZmRiYmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-01T12:45:31Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-11T14:40:23Z"}, "message": "Removed free_glue from tydesc (the code is still generated, but inlined in drop_glue).", "tree": {"sha": "3ccab1847d0885f6e661a57b58b9a1c64e695148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ccab1847d0885f6e661a57b58b9a1c64e695148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a305f9e832901018e5f1aa1901eff04652fdbbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a305f9e832901018e5f1aa1901eff04652fdbbd", "html_url": "https://github.com/rust-lang/rust/commit/7a305f9e832901018e5f1aa1901eff04652fdbbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a305f9e832901018e5f1aa1901eff04652fdbbd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ad2a7825bd9821b8ef554046c8d81eb94ab7dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad2a7825bd9821b8ef554046c8d81eb94ab7dfe", "html_url": "https://github.com/rust-lang/rust/commit/5ad2a7825bd9821b8ef554046c8d81eb94ab7dfe"}], "stats": {"total": 252, "additions": 80, "deletions": 172}, "files": [{"sha": "945ee645414b7e8ae6bd26f119feb3b69c674115", "filename": "src/librustc/back/abi.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fabi.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -44,11 +44,10 @@ pub static tydesc_field_size: uint = 0u;\n pub static tydesc_field_align: uint = 1u;\n pub static tydesc_field_take_glue: uint = 2u;\n pub static tydesc_field_drop_glue: uint = 3u;\n-pub static tydesc_field_free_glue: uint = 4u;\n-pub static tydesc_field_visit_glue: uint = 5u;\n-pub static tydesc_field_borrow_offset: uint = 6u;\n-pub static tydesc_field_name_offset: uint = 7u;\n-pub static n_tydesc_fields: uint = 8u;\n+pub static tydesc_field_visit_glue: uint = 4u;\n+pub static tydesc_field_borrow_offset: uint = 5u;\n+pub static tydesc_field_name_offset: uint = 6u;\n+pub static n_tydesc_fields: uint = 7u;\n \n // The two halves of a closure: code and environment.\n pub static fn_field_code: uint = 0u;"}, {"sha": "2cb3f8bcfac6f97e9884399c0bcedf57f4d86315", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -474,7 +474,7 @@ pub fn make_opaque_cbox_drop_glue<'a>(\n             bcx.tcx().sess.bug(\"trying to trans drop glue of @fn\")\n         }\n         ast::OwnedSigil => {\n-            glue::free_ty(\n+            glue::make_free_glue(\n                 bcx, cboxptr,\n                 ty::mk_opaque_closure_ptr(bcx.tcx(), sigil))\n         }"}, {"sha": "b31c03eb1849769b631e7d9f3b5d15abfd96275a", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -94,7 +94,6 @@ pub struct tydesc_info {\n     name: ValueRef,\n     take_glue: Cell<Option<ValueRef>>,\n     drop_glue: Cell<Option<ValueRef>>,\n-    free_glue: Cell<Option<ValueRef>>,\n     visit_glue: Cell<Option<ValueRef>>,\n }\n "}, {"sha": "3063fbcecaf553aaadf131240d4d8d15932cae7f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 44, "deletions": 122, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -23,13 +23,13 @@ use middle::trans::base::*;\n use middle::trans::callee;\n use middle::trans::closure;\n use middle::trans::common::*;\n+use middle::trans::datum::immediate_rvalue;\n use middle::trans::build::*;\n use middle::trans::expr;\n use middle::trans::machine::*;\n use middle::trans::reflect;\n use middle::trans::tvec;\n use middle::trans::type_of::type_of;\n-use middle::trans::uniq;\n use middle::ty;\n use util::ppaux;\n use util::ppaux::ty_to_short_str;\n@@ -86,47 +86,16 @@ pub fn drop_ty_immediate<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n     drop_ty(bcx, vp, t)\n }\n \n-pub fn free_ty<'a>(cx: &'a Block<'a>, v: ValueRef, t: ty::t)\n-               -> &'a Block<'a> {\n-    // NB: v is an *alias* of type t here, not a direct value.\n-    let _icx = push_ctxt(\"free_ty\");\n-    if ty::type_needs_drop(cx.tcx(), t) {\n-        return call_tydesc_glue(cx, v, t, abi::tydesc_field_free_glue);\n-    }\n-    return cx;\n-}\n-\n-pub fn free_ty_immediate<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n-                         -> &'a Block<'a> {\n-    let _icx = push_ctxt(\"free_ty_immediate\");\n-    match ty::get(t).sty {\n-      ty::ty_uniq(_) |\n-      ty::ty_vec(_, ty::vstore_uniq) |\n-      ty::ty_str(ty::vstore_uniq) |\n-      ty::ty_box(_) | ty::ty_opaque_box |\n-      ty::ty_vec(_, ty::vstore_box) |\n-      ty::ty_str(ty::vstore_box) |\n-      ty::ty_opaque_closure_ptr(_) => {\n-        let vp = alloca(bcx, type_of(bcx.ccx(), t), \"\");\n-        Store(bcx, v, vp);\n-        free_ty(bcx, vp, t)\n-      }\n-      _ => bcx.tcx().sess.bug(\"free_ty_immediate: non-box ty\")\n-    }\n-}\n-\n pub fn lazily_emit_all_tydesc_glue(ccx: @CrateContext,\n                                    static_ti: @tydesc_info) {\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_take_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_drop_glue, static_ti);\n-    lazily_emit_tydesc_glue(ccx, abi::tydesc_field_free_glue, static_ti);\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_visit_glue, static_ti);\n }\n \n pub fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n     if (field == abi::tydesc_field_take_glue ||\n-        field == abi::tydesc_field_drop_glue ||\n-        field == abi::tydesc_field_free_glue) &&\n+        field == abi::tydesc_field_drop_glue) &&\n         ! ty::type_needs_drop(tcx, t) {\n           return ty::mk_u32();\n     }\n@@ -146,22 +115,7 @@ pub fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n           return ty::mk_imm_box(tcx, ty::mk_u32());\n     }\n \n-    if field == abi::tydesc_field_free_glue {\n-        match ty::get(t).sty {\n-          ty::ty_bare_fn(..) |\n-          ty::ty_closure(..) |\n-          ty::ty_box(..) |\n-          ty::ty_opaque_box |\n-          ty::ty_uniq(..) |\n-          ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) |\n-          ty::ty_vec(_, ty::vstore_box) | ty::ty_str(ty::vstore_box) |\n-          ty::ty_opaque_closure_ptr(..) => (),\n-          _ => { return ty::mk_u32(); }\n-        }\n-    }\n-\n-    if (field == abi::tydesc_field_free_glue ||\n-        field == abi::tydesc_field_drop_glue) {\n+    if field == abi::tydesc_field_drop_glue {\n         match ty::get(t).sty {\n           ty::ty_box(typ)\n           if ! ty::type_needs_drop(tcx, typ) =>\n@@ -197,8 +151,6 @@ pub fn lazily_emit_simplified_tydesc_glue(ccx: @CrateContext,\n                 ti.take_glue.set(simpl_ti.take_glue.get());\n             } else if field == abi::tydesc_field_drop_glue {\n                 ti.drop_glue.set(simpl_ti.drop_glue.get());\n-            } else if field == abi::tydesc_field_free_glue {\n-                ti.free_glue.set(simpl_ti.free_glue.get());\n             } else if field == abi::tydesc_field_visit_glue {\n                 ti.visit_glue.set(simpl_ti.visit_glue.get());\n             }\n@@ -245,19 +197,6 @@ pub fn lazily_emit_tydesc_glue(ccx: @CrateContext,\n                    ppaux::ty_to_str(ccx.tcx, ti.ty));\n           }\n         }\n-    } else if field == abi::tydesc_field_free_glue {\n-        match ti.free_glue.get() {\n-          Some(_) => (),\n-          None => {\n-            debug!(\"+++ lazily_emit_tydesc_glue FREE {}\",\n-                   ppaux::ty_to_str(ccx.tcx, ti.ty));\n-            let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"free\");\n-            ti.free_glue.set(Some(glue_fn));\n-            make_generic_glue(ccx, ti.ty, glue_fn, make_free_glue, \"free\");\n-            debug!(\"--- lazily_emit_tydesc_glue FREE {}\",\n-                   ppaux::ty_to_str(ccx.tcx, ti.ty));\n-          }\n-        }\n     } else if field == abi::tydesc_field_visit_glue {\n         match ti.visit_glue.get() {\n           Some(_) => (),\n@@ -294,8 +233,6 @@ pub fn call_tydesc_glue_full(bcx: &Block,\n             sti.take_glue.get()\n         } else if field == abi::tydesc_field_drop_glue {\n             sti.drop_glue.get()\n-        } else if field == abi::tydesc_field_free_glue {\n-            sti.free_glue.get()\n         } else if field == abi::tydesc_field_visit_glue {\n             sti.visit_glue.get()\n         } else {\n@@ -346,8 +283,8 @@ pub fn call_tydesc_glue<'a>(\n     return cx;\n }\n \n-pub fn make_visit_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n-                       -> &'a Block<'a> {\n+fn make_visit_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n+                   -> &'a Block<'a> {\n     let _icx = push_ctxt(\"make_visit_glue\");\n     with_scope(bcx, None, \"visitor cleanup\", |bcx| {\n         let mut bcx = bcx;\n@@ -371,31 +308,32 @@ pub fn make_free_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"make_free_glue\");\n     match ty::get(t).sty {\n+      ty::ty_opaque_box => bcx.tcx().sess.fatal(\"found ty_opaque_box in make_free_glue\"),\n       ty::ty_box(body_ty) => {\n         let v = Load(bcx, v);\n         let body = GEPi(bcx, v, [0u, abi::box_field_body]);\n         let bcx = drop_ty(bcx, body, body_ty);\n         trans_free(bcx, v)\n       }\n-      ty::ty_opaque_box => {\n-        let v = Load(bcx, v);\n-        let td = Load(bcx, GEPi(bcx, v, [0u, abi::box_field_tydesc]));\n-        let valptr = GEPi(bcx, v, [0u, abi::box_field_body]);\n-        // Generate code that, dynamically, indexes into the\n-        // tydesc and calls the drop glue that got set dynamically\n-        call_tydesc_glue_full(bcx, valptr, td, abi::tydesc_field_drop_glue,\n-                              None);\n-        trans_free(bcx, v)\n-      }\n       ty::ty_uniq(..) => {\n-        uniq::make_free_glue(bcx, v, t)\n+        let box_datum = immediate_rvalue(Load(bcx, v), t);\n+        let not_null = IsNotNull(bcx, box_datum.val);\n+        with_cond(bcx, not_null, |bcx| {\n+            let body_datum = box_datum.box_body(bcx);\n+            let bcx = drop_ty(bcx, body_datum.to_ref_llval(bcx), body_datum.ty);\n+            if ty::type_contents(bcx.tcx(), t).owns_managed() {\n+                trans_free(bcx, box_datum.val)\n+            } else {\n+                trans_exchange_free(bcx, box_datum.val)\n+            }\n+        })\n       }\n       ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) |\n       ty::ty_vec(_, ty::vstore_box) | ty::ty_str(ty::vstore_box) => {\n         make_free_glue(bcx, v, tvec::expand_boxed_vec_ty(bcx.tcx(), t))\n       }\n       ty::ty_closure(_) => {\n-        closure::make_closure_glue(bcx, v, t, free_ty)\n+        closure::make_closure_glue(bcx, v, t, make_free_glue)\n       }\n       ty::ty_opaque_closure_ptr(ck) => {\n         closure::make_opaque_cbox_free_glue(bcx, ck, v)\n@@ -469,13 +407,14 @@ pub fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t)\n     let _icx = push_ctxt(\"make_drop_glue\");\n     let ccx = bcx.ccx();\n     match ty::get(t).sty {\n-      ty::ty_box(_) | ty::ty_opaque_box |\n+      ty::ty_opaque_box => bcx.tcx().sess.fatal(\"found ty_opaque_box in make_drop_glue\"),\n+      ty::ty_box(_) |\n       ty::ty_str(ty::vstore_box) | ty::ty_vec(_, ty::vstore_box) => {\n-        decr_refcnt_maybe_free(bcx, Load(bcx, v0), Some(v0), t)\n+        decr_refcnt_maybe_free(bcx, v0, Some(t))\n       }\n       ty::ty_uniq(_) |\n       ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) => {\n-        free_ty(bcx, v0, t)\n+        make_free_glue(bcx, v0, t)\n       }\n       ty::ty_unboxed_vec(_) => {\n         tvec::make_drop_glue_unboxed(bcx, v0, t)\n@@ -500,9 +439,7 @@ pub fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t)\n       }\n       ty::ty_trait(_, _, ty::BoxTraitStore, _, _) => {\n           let llbox_ptr = GEPi(bcx, v0, [0u, abi::trt_field_box]);\n-          let llbox = Load(bcx, llbox_ptr);\n-          decr_refcnt_maybe_free(bcx, llbox, Some(llbox_ptr),\n-                                 ty::mk_opaque_box(ccx.tcx))\n+          decr_refcnt_maybe_free(bcx, llbox_ptr, None)\n       }\n       ty::ty_trait(_, _, ty::UniqTraitStore, _, _) => {\n           let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n@@ -517,7 +454,7 @@ pub fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t)\n               call_tydesc_glue_full(bcx,\n                                     lluniquevalue,\n                                     lltydesc,\n-                                    abi::tydesc_field_free_glue,\n+                                    abi::tydesc_field_drop_glue,\n                                     None);\n               bcx\n           })\n@@ -534,44 +471,46 @@ pub fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t)\n     }\n }\n \n-// box_ptr_ptr is optional, it is constructed if not supplied.\n-pub fn decr_refcnt_maybe_free<'a>(\n-                              bcx: &'a Block<'a>,\n-                              box_ptr: ValueRef,\n-                              box_ptr_ptr: Option<ValueRef>,\n-                              t: ty::t)\n-                              -> &'a Block<'a> {\n+fn decr_refcnt_maybe_free<'a>(bcx: &'a Block<'a>, box_ptr_ptr: ValueRef,\n+                              t: Option<ty::t>) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"decr_refcnt_maybe_free\");\n     let ccx = bcx.ccx();\n \n     let decr_bcx = sub_block(bcx, \"decr\");\n     let free_bcx = sub_block(decr_bcx, \"free\");\n     let next_bcx = sub_block(bcx, \"next\");\n+    let box_ptr = Load(bcx, box_ptr_ptr);\n     let llnotnull = IsNotNull(bcx, box_ptr);\n     CondBr(bcx, llnotnull, decr_bcx.llbb, next_bcx.llbb);\n \n     let rc_ptr = GEPi(decr_bcx, box_ptr, [0u, abi::box_field_refcnt]);\n     let rc = Sub(decr_bcx, Load(decr_bcx, rc_ptr), C_int(ccx, 1));\n     Store(decr_bcx, rc, rc_ptr);\n-    let llisnull = IsNull(decr_bcx, rc);\n-    CondBr(decr_bcx, llisnull, free_bcx.llbb, next_bcx.llbb);\n-\n-    let free_bcx = match box_ptr_ptr {\n-        Some(p) => free_ty(free_bcx, p, t),\n-        None => free_ty_immediate(free_bcx, box_ptr, t)\n+    CondBr(decr_bcx, IsNull(decr_bcx, rc), free_bcx.llbb, next_bcx.llbb);\n+\n+    let free_bcx = match t {\n+        Some(t) => make_free_glue(free_bcx, box_ptr_ptr, t),\n+        None => {\n+            let v = Load(free_bcx, box_ptr_ptr);\n+            let td = Load(free_bcx, GEPi(free_bcx, v, [0u, abi::box_field_tydesc]));\n+            let valptr = GEPi(free_bcx, v, [0u, abi::box_field_body]);\n+            // Generate code that, dynamically, indexes into the\n+            // tydesc and calls the drop glue that got set dynamically\n+            call_tydesc_glue_full(free_bcx, valptr, td, abi::tydesc_field_drop_glue, None);\n+            trans_free(free_bcx, v)\n+        }\n     };\n     Br(free_bcx, next_bcx.llbb);\n \n     next_bcx\n }\n \n-\n-pub fn make_take_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n-                      -> &'a Block<'a> {\n+fn make_take_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"make_take_glue\");\n     // NB: v is a *pointer* to type t here, not a direct value.\n     match ty::get(t).sty {\n-      ty::ty_box(_) | ty::ty_opaque_box |\n+      ty::ty_opaque_box => bcx.tcx().sess.fatal(\"found ty_opaque_box in make_take_glue\"),\n+      ty::ty_box(_) |\n       ty::ty_vec(_, ty::vstore_box) | ty::ty_str(ty::vstore_box) => {\n         incr_refcnt_of_boxed(bcx, Load(bcx, v)); bcx\n       }\n@@ -608,7 +547,7 @@ pub fn make_take_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n     }\n }\n \n-pub fn incr_refcnt_of_boxed(cx: &Block, box_ptr: ValueRef) {\n+fn incr_refcnt_of_boxed(cx: &Block, box_ptr: ValueRef) {\n     let _icx = push_ctxt(\"incr_refcnt_of_boxed\");\n     let ccx = cx.ccx();\n     let rc_ptr = GEPi(cx, box_ptr, [0u, abi::box_field_refcnt]);\n@@ -665,7 +604,6 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info {\n         name: ty_name,\n         take_glue: Cell::new(None),\n         drop_glue: Cell::new(None),\n-        free_glue: Cell::new(None),\n         visit_glue: Cell::new(None),\n     };\n     debug!(\"--- declare_tydesc {}\", ppaux::ty_to_str(ccx.tcx, t));\n@@ -770,21 +708,6 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n                 }\n               }\n             };\n-        let free_glue =\n-            match ti.free_glue.get() {\n-              None => {\n-                  ccx.stats.n_null_glues.set(ccx.stats.n_null_glues.get() +\n-                                             1u);\n-                  C_null(glue_fn_ty)\n-              }\n-              Some(v) => {\n-                unsafe {\n-                    ccx.stats.n_real_glues.set(ccx.stats.n_real_glues.get() +\n-                                               1);\n-                    llvm::LLVMConstPointerCast(v, glue_fn_ty.to_ref())\n-                }\n-              }\n-            };\n         let visit_glue =\n             match ti.visit_glue.get() {\n               None => {\n@@ -808,7 +731,6 @@ pub fn emit_tydescs(ccx: &CrateContext) {\n                                      ti.align, // align\n                                      take_glue, // take_glue\n                                      drop_glue, // drop_glue\n-                                     free_glue, // free_glue\n                                      visit_glue, // visit_glue\n                                      ti.borrow_offset, // borrow_offset\n                                      ti.name]); // name"}, {"sha": "e534e087cb835f590ca2618e72c5ead5290971ce", "filename": "src/librustc/middle/trans/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -25,7 +25,6 @@ pub mod build;\n pub mod builder;\n pub mod base;\n pub mod _match;\n-pub mod uniq;\n pub mod closure;\n pub mod tvec;\n pub mod meth;"}, {"sha": "d4ba4a76f81290bf78392a70f6c3083e06f23e4c", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -219,7 +219,6 @@ impl Type {\n                      int_ty,     // align\n                      glue_fn_ty, // take\n                      glue_fn_ty, // drop\n-                     glue_fn_ty, // free\n                      glue_fn_ty, // visit\n                      int_ty, // borrow_offset\n                      Type::struct_([Type::i8p(), Type::int(arch)], false)]; // name"}, {"sha": "91ac5f9f3b4d32d50106c0f15e0c642d05bc0c7b", "filename": "src/librustc/middle/trans/uniq.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5ad2a7825bd9821b8ef554046c8d81eb94ab7dfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad2a7825bd9821b8ef554046c8d81eb94ab7dfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=5ad2a7825bd9821b8ef554046c8d81eb94ab7dfe", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-use lib::llvm::ValueRef;\n-use middle::trans::base::*;\n-use middle::trans::build::*;\n-use middle::trans::common::*;\n-use middle::trans::datum::immediate_rvalue;\n-use middle::trans::glue;\n-use middle::ty;\n-\n-pub fn make_free_glue<'a>(\n-                      bcx: &'a Block<'a>,\n-                      vptrptr: ValueRef,\n-                      box_ty: ty::t)\n-                      -> &'a Block<'a> {\n-    let _icx = push_ctxt(\"uniq::make_free_glue\");\n-    let box_datum = immediate_rvalue(Load(bcx, vptrptr), box_ty);\n-\n-    let not_null = IsNotNull(bcx, box_datum.val);\n-    with_cond(bcx, not_null, |bcx| {\n-        let body_datum = box_datum.box_body(bcx);\n-        let bcx = glue::drop_ty(bcx, body_datum.to_ref_llval(bcx),\n-                                body_datum.ty);\n-        if ty::type_contents(bcx.tcx(), box_ty).owns_managed() {\n-            glue::trans_free(bcx, box_datum.val)\n-        } else {\n-            glue::trans_exchange_free(bcx, box_datum.val)\n-        }\n-    })\n-}"}, {"sha": "acd1cfcf9013a9261afadba520be33f2d83e53af", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a305f9e832901018e5f1aa1901eff04652fdbbd/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7a305f9e832901018e5f1aa1901eff04652fdbbd", "patch": "@@ -47,9 +47,9 @@ pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor, TypeId};\n \n pub type GlueFn = extern \"Rust\" fn(*i8);\n \n-// NB: this has to be kept in sync with `type_desc` in `rt`\n+// NOTE remove after next snapshot\n #[lang=\"ty_desc\"]\n-#[cfg(not(test))]\n+#[cfg(not(test), stage0)]\n pub struct TyDesc {\n     // sizeof(T)\n     size: uint,\n@@ -80,6 +80,35 @@ pub struct TyDesc {\n     name: &'static str\n }\n \n+#[lang=\"ty_desc\"]\n+#[cfg(not(test), not(stage0))]\n+pub struct TyDesc {\n+    // sizeof(T)\n+    size: uint,\n+\n+    // alignof(T)\n+    align: uint,\n+\n+    // Called on a copy of a value of type `T` *after* memcpy\n+    take_glue: GlueFn,\n+\n+    // Called when a value of type `T` is no longer needed\n+    drop_glue: GlueFn,\n+\n+    // Called by reflection visitor to visit a value of type `T`\n+    visit_glue: GlueFn,\n+\n+    // If T represents a box pointer (`@U` or `~U`), then\n+    // `borrow_offset` is the amount that the pointer must be adjusted\n+    // to find the payload.  This is always derivable from the type\n+    // `U`, but in the case of `@Trait` or `~Trait` objects, the type\n+    // `U` is unknown.\n+    borrow_offset: uint,\n+\n+    // Name corresponding to the type\n+    name: &'static str\n+}\n+\n #[lang=\"opaque\"]\n #[cfg(not(test))]\n pub enum Opaque { }"}]}