{"sha": "4a2e08f9b817568f3f7b204fa9baead196d0e32d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMmUwOGY5YjgxNzU2OGYzZjdiMjA0ZmE5YmFlYWQxOTZkMGUzMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-11T08:13:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-11T08:58:27Z"}, "message": "fix warnings for non-Unix builds", "tree": {"sha": "02bee893cf38be76f46d0af0da19b78a86953e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bee893cf38be76f46d0af0da19b78a86953e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2e08f9b817568f3f7b204fa9baead196d0e32d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2e08f9b817568f3f7b204fa9baead196d0e32d", "html_url": "https://github.com/rust-lang/rust/commit/4a2e08f9b817568f3f7b204fa9baead196d0e32d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2e08f9b817568f3f7b204fa9baead196d0e32d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880e6847cfb895459a183346f62767f4a9f31660", "url": "https://api.github.com/repos/rust-lang/rust/commits/880e6847cfb895459a183346f62767f4a9f31660", "html_url": "https://github.com/rust-lang/rust/commit/880e6847cfb895459a183346f62767f4a9f31660"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "8613f6bb0994e730c1fc0b2bc3465840f43d430f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a2e08f9b817568f3f7b204fa9baead196d0e32d/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2e08f9b817568f3f7b204fa9baead196d0e32d/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4a2e08f9b817568f3f7b204fa9baead196d0e32d", "patch": "@@ -549,12 +549,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         target_op: OpTy<'tcx, Tag>,\n         linkpath_op: OpTy<'tcx, Tag>\n     ) -> InterpResult<'tcx, i32> {\n-        #[cfg(target_family = \"unix\")]\n+        #[cfg(unix)]\n         fn create_link(src: &Path, dst: &Path) -> std::io::Result<()> {\n             std::os::unix::fs::symlink(src, dst)\n         }\n \n-        #[cfg(target_family = \"windows\")]\n+        #[cfg(windows)]\n         fn create_link(src: &Path, dst: &Path) -> std::io::Result<()> {\n             use std::os::windows::fs;\n             if src.is_dir() {\n@@ -816,22 +816,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"mkdir\")?;\n \n-        let _mode = if this.tcx.sess.target.target.target_os == \"macos\" {\n+        #[cfg_attr(not(unix), allow(unused_variables))]\n+        let mode = if this.tcx.sess.target.target.target_os == \"macos\" {\n             u32::from(this.read_scalar(mode_op)?.not_undef()?.to_u16()?)\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?\n         };\n \n         let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n+        #[cfg_attr(not(unix), allow(unused_mut))]\n         let mut builder = DirBuilder::new();\n \n         // If the host supports it, forward on the mode of the directory\n         // (i.e. permission bits and the sticky bit)\n-        #[cfg(target_family = \"unix\")]\n+        #[cfg(unix)]\n         {\n             use std::os::unix::fs::DirBuilderExt;\n-            builder.mode(_mode.into());\n+            builder.mode(mode.into());\n         }\n \n         let result = builder.create(path).map(|_| 0i32);"}]}