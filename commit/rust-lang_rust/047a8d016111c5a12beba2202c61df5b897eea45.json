{"sha": "047a8d016111c5a12beba2202c61df5b897eea45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0N2E4ZDAxNjExMWM1YTEyYmViYTIyMDJjNjFkZjViODk3ZWVhNDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-15T22:24:51Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-01T15:04:26Z"}, "message": "kill custom type inference defaults (these don't really work anyway)", "tree": {"sha": "8b0bec410eea9e3053ba9bf01d6de08511761183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0bec410eea9e3053ba9bf01d6de08511761183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047a8d016111c5a12beba2202c61df5b897eea45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047a8d016111c5a12beba2202c61df5b897eea45", "html_url": "https://github.com/rust-lang/rust/commit/047a8d016111c5a12beba2202c61df5b897eea45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047a8d016111c5a12beba2202c61df5b897eea45/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7112d6584c355fa13df5cb672befb0f7c383cafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7112d6584c355fa13df5cb672befb0f7c383cafb", "html_url": "https://github.com/rust-lang/rust/commit/7112d6584c355fa13df5cb672befb0f7c383cafb"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "349a2af5aa9ab79eb010d26a0756a410a03c9842", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=047a8d016111c5a12beba2202c61df5b897eea45", "patch": "@@ -22,7 +22,7 @@ use middle::free_region::RegionRelations;\n use middle::region;\n use middle::lang_items;\n use mir::tcx::PlaceTy;\n-use ty::subst::{Kind, Subst, Substs};\n+use ty::subst::Substs;\n use ty::{TyVid, IntVid, FloatVid};\n use ty::{self, Ty, TyCtxt};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n@@ -1093,26 +1093,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// as the substitutions for the default, `(T, U)`.\n     pub fn type_var_for_def(&self,\n                             span: Span,\n-                            def: &ty::TypeParameterDef,\n-                            substs: &[Kind<'tcx>])\n+                            def: &ty::TypeParameterDef)\n                             -> Ty<'tcx> {\n-        let default = if def.has_default {\n-            let default = self.tcx.type_of(def.def_id);\n-            Some(type_variable::Default {\n-                ty: default.subst_spanned(self.tcx, substs, Some(span)),\n-                origin_span: span,\n-                def_id: def.def_id\n-            })\n-        } else {\n-            None\n-        };\n-\n-\n         let ty_var_id = self.type_variables\n                             .borrow_mut()\n                             .new_var(false,\n                                      TypeVariableOrigin::TypeParameterDefinition(span, def.name),\n-                                     default);\n+                                     None);\n \n         self.tcx.mk_var(ty_var_id)\n     }\n@@ -1125,8 +1112,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                  -> &'tcx Substs<'tcx> {\n         Substs::for_item(self.tcx, def_id, |def, _| {\n             self.region_var_for_def(span, def)\n-        }, |def, substs| {\n-            self.type_var_for_def(span, def, substs)\n+        }, |def, _| {\n+            self.type_var_for_def(span, def)\n         })\n     }\n "}, {"sha": "bc1b70ffc8e1c8b8fe1e3aac6515762be489c1dc", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=047a8d016111c5a12beba2202c61df5b897eea45", "patch": "@@ -51,7 +51,6 @@ pub trait AstConv<'gcx, 'tcx> {\n     /// Same as ty_infer, but with a known type parameter definition.\n     fn ty_infer_for_def(&self,\n                         _def: &ty::TypeParameterDef,\n-                        _substs: &[Kind<'tcx>],\n                         span: Span) -> Ty<'tcx> {\n         self.ty_infer(span)\n     }\n@@ -261,7 +260,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             } else if infer_types {\n                 // No type parameters were provided, we can infer all.\n                 let ty_var = if !default_needs_object_self(def) {\n-                    self.ty_infer_for_def(def, substs, span)\n+                    self.ty_infer_for_def(def, span)\n                 } else {\n                     self.ty_infer(span)\n                 };"}, {"sha": "a3233c8d8659958b86161627cb164d88d9ea1906", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=047a8d016111c5a12beba2202c61df5b897eea45", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             } else {\n                 self.region_var_for_def(self.span, def)\n             }\n-        }, |def, cur_substs| {\n+        }, |def, _cur_substs| {\n             let i = def.index as usize;\n             if i < parent_substs.len() {\n                 parent_substs.type_at(i)\n@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             {\n                 self.to_ty(ast_ty)\n             } else {\n-                self.type_var_for_def(self.span, def, cur_substs)\n+                self.type_var_for_def(self.span, def)\n             }\n         })\n     }"}, {"sha": "4a122fbc4c19573ae6bb845de1e46c0d3afaac10", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=047a8d016111c5a12beba2202c61df5b897eea45", "patch": "@@ -249,13 +249,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let substs = Substs::for_item(self.tcx,\n                                       trait_def_id,\n                                       |def, _| self.region_var_for_def(span, def),\n-                                      |def, substs| {\n+                                      |def, _substs| {\n             if def.index == 0 {\n                 self_ty\n             } else if let Some(ref input_types) = opt_input_types {\n                 input_types[def.index as usize - 1]\n             } else {\n-                self.type_var_for_def(span, def, substs)\n+                self.type_var_for_def(span, def)\n             }\n         });\n "}, {"sha": "0a20af23e2e9d4f75ef3b99cc41dc8fb0763bc7f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=047a8d016111c5a12beba2202c61df5b897eea45", "patch": "@@ -1304,12 +1304,12 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                     // `impl_self_ty()` for an explanation.\n                     self.tcx.types.re_erased\n                 }\n-            }, |def, cur_substs| {\n+            }, |def, _cur_substs| {\n                 let i = def.index as usize;\n                 if i < substs.len() {\n                     substs.type_at(i)\n                 } else {\n-                    self.type_var_for_def(self.span, def, cur_substs)\n+                    self.type_var_for_def(self.span, def)\n                 }\n             });\n             xform_fn_sig.subst(self.tcx, substs)"}, {"sha": "4fa48d96d36c41e099766a69b46783e12bc17d65", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047a8d016111c5a12beba2202c61df5b897eea45/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=047a8d016111c5a12beba2202c61df5b897eea45", "patch": "@@ -93,7 +93,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n-use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n@@ -1692,9 +1692,8 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn ty_infer_for_def(&self,\n                         ty_param_def: &ty::TypeParameterDef,\n-                        substs: &[Kind<'tcx>],\n                         span: Span) -> Ty<'tcx> {\n-        self.type_var_for_def(span, ty_param_def, substs)\n+        self.type_var_for_def(span, ty_param_def)\n     }\n \n     fn projected_ty_from_poly_trait_ref(&self,\n@@ -4793,7 +4792,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // Handle Self first, so we can adjust the index to match the AST.\n                 if has_self && i == 0 {\n                     return opt_self_ty.unwrap_or_else(|| {\n-                        self.type_var_for_def(span, def, substs)\n+                        self.type_var_for_def(span, def)\n                     });\n                 }\n                 i -= has_self as usize;\n@@ -4826,7 +4825,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // This can also be reached in some error cases:\n                 // We prefer to use inference variables instead of\n                 // TyError to let type inference recover somewhat.\n-                self.type_var_for_def(span, def, substs)\n+                self.type_var_for_def(span, def)\n             }\n         });\n "}]}