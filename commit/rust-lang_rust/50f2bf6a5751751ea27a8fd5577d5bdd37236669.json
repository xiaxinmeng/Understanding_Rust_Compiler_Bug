{"sha": "50f2bf6a5751751ea27a8fd5577d5bdd37236669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjJiZjZhNTc1MTc1MWVhMjdhOGZkNTU3N2Q1YmRkMzcyMzY2Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-15T17:37:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-15T17:37:18Z"}, "message": "Auto merge of #85335 - GuillaumeGomez:rollup-0tvc14g, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #84751 (str::is_char_boundary - slight optimization)\n - #85185 (Generate not more docs than necessary)\n - #85324 (Warn about unused `pub` fields in non-`pub` structs)\n - #85329 (fix version_str comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b9e3ee4bc29f401da340848433af5f4d0765385b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e3ee4bc29f401da340848433af5f4d0765385b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f2bf6a5751751ea27a8fd5577d5bdd37236669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f2bf6a5751751ea27a8fd5577d5bdd37236669", "html_url": "https://github.com/rust-lang/rust/commit/50f2bf6a5751751ea27a8fd5577d5bdd37236669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f2bf6a5751751ea27a8fd5577d5bdd37236669/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac3c7c5bd38ec38062ebde475bd2ea6317d0c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac3c7c5bd38ec38062ebde475bd2ea6317d0c09", "html_url": "https://github.com/rust-lang/rust/commit/eac3c7c5bd38ec38062ebde475bd2ea6317d0c09"}, {"sha": "8ea8252ca5e64626e11afed535d6c4bfd83fe218", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea8252ca5e64626e11afed535d6c4bfd83fe218", "html_url": "https://github.com/rust-lang/rust/commit/8ea8252ca5e64626e11afed535d6c4bfd83fe218"}], "stats": {"total": 162, "additions": 126, "deletions": 36}, "files": [{"sha": "7b1660b501bf85cec7027b9cd1984c0b79b34e4a", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -922,7 +922,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n     }\n }\n \n-/// Returns a version string such as \"rustc 1.46.0 (04488afe3 2020-08-24)\"\n+/// Returns a version string such as \"1.46.0 (04488afe3 2020-08-24)\"\n pub fn version_str() -> Option<&'static str> {\n     option_env!(\"CFG_VERSION\")\n }"}, {"sha": "bd142677cf9ed9596a0feee0b56f23eab71d5c60", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -44,6 +44,7 @@ struct MarkSymbolVisitor<'tcx> {\n     repr_has_repr_c: bool,\n     in_pat: bool,\n     inherited_pub_visibility: bool,\n+    pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<hir::HirId, hir::HirId>,\n@@ -188,27 +189,33 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     fn visit_node(&mut self, node: Node<'tcx>) {\n         let had_repr_c = self.repr_has_repr_c;\n-        self.repr_has_repr_c = false;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n+        let had_pub_visibility = self.pub_visibility;\n+        self.repr_has_repr_c = false;\n         self.inherited_pub_visibility = false;\n+        self.pub_visibility = false;\n         match node {\n-            Node::Item(item) => match item.kind {\n-                hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n-                    let def = self.tcx.adt_def(item.def_id);\n-                    self.repr_has_repr_c = def.repr.c();\n+            Node::Item(item) => {\n+                self.pub_visibility = item.vis.node.is_pub();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::Enum(..) => {\n-                    self.inherited_pub_visibility = item.vis.node.is_pub();\n+                match item.kind {\n+                    hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n+                        let def = self.tcx.adt_def(item.def_id);\n+                        self.repr_has_repr_c = def.repr.c();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::ForeignMod { .. } => {}\n-                _ => {\n-                    intravisit::walk_item(self, &item);\n+                        intravisit::walk_item(self, &item);\n+                    }\n+                    hir::ItemKind::Enum(..) => {\n+                        self.inherited_pub_visibility = self.pub_visibility;\n+\n+                        intravisit::walk_item(self, &item);\n+                    }\n+                    hir::ItemKind::ForeignMod { .. } => {}\n+                    _ => {\n+                        intravisit::walk_item(self, &item);\n+                    }\n                 }\n-            },\n+            }\n             Node::TraitItem(trait_item) => {\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n@@ -220,8 +227,9 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n             _ => {}\n         }\n-        self.repr_has_repr_c = had_repr_c;\n+        self.pub_visibility = had_pub_visibility;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n+        self.repr_has_repr_c = had_repr_c;\n     }\n \n     fn mark_as_used_if_union(&mut self, adt: &ty::AdtDef, fields: &[hir::ExprField<'_>]) {\n@@ -259,10 +267,10 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     ) {\n         let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n-        let live_fields = def\n-            .fields()\n-            .iter()\n-            .filter(|f| has_repr_c || inherited_pub_visibility || f.vis.node.is_pub());\n+        let pub_visibility = self.pub_visibility;\n+        let live_fields = def.fields().iter().filter(|f| {\n+            has_repr_c || (pub_visibility && (inherited_pub_visibility || f.vis.node.is_pub()))\n+        });\n         self.live_symbols.extend(live_fields.map(|f| f.hir_id));\n \n         intravisit::walk_struct_def(self, def);\n@@ -500,6 +508,7 @@ fn find_live<'tcx>(\n         repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,\n+        pub_visibility: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n     };"}, {"sha": "065acd3f38bb21ad37c3fd337a8536ae160708f5", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -192,14 +192,26 @@ impl str {\n     #[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]\n     #[inline]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n-        // 0 and len are always ok.\n+        // 0 is always ok.\n         // Test for 0 explicitly so that it can optimize out the check\n         // easily and skip reading string data for that case.\n-        if index == 0 || index == self.len() {\n+        // Note that optimizing `self.get(..index)` relies on this.\n+        if index == 0 {\n             return true;\n         }\n+\n         match self.as_bytes().get(index) {\n-            None => false,\n+            // For `None` we have two options:\n+            //\n+            // - index == self.len()\n+            //   Empty strings are valid, so return true\n+            // - index > self.len()\n+            //   In this case return false\n+            //\n+            // The check is placed exactly here, because it improves generated\n+            // code on higher opt-levels. See PR #84751 for more details.\n+            None => index == self.len(),\n+\n             // This is bit magic equivalent to: b < 128 || b >= 192\n             Some(&b) => (b as i8) >= -0x40,\n         }"}, {"sha": "f9972ac7b9d93a3fb1157619f5b40544cf750bc4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -451,6 +451,22 @@ impl Step for Std {\n \n             builder.run(&mut cargo.into());\n         };\n+\n+        let paths = builder\n+            .paths\n+            .iter()\n+            .map(components_simplified)\n+            .filter_map(|path| {\n+                if path.get(0) == Some(&\"library\") {\n+                    Some(path[1].to_owned())\n+                } else if !path.is_empty() {\n+                    Some(path[0].to_owned())\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n         // Only build the following crates. While we could just iterate over the\n         // folder structure, that would also build internal crates that we do\n         // not want to show in documentation. These crates will later be visited\n@@ -464,20 +480,17 @@ impl Step for Std {\n         let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n         for krate in &krates {\n             run_cargo_rustdoc_for(krate);\n+            if paths.iter().any(|p| p == krate) {\n+                // No need to document more of the libraries if we have the one we want.\n+                break;\n+            }\n         }\n         builder.cp_r(&out_dir, &out);\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n-        for path in builder.paths.iter().map(components_simplified) {\n-            let requested_crate = if path.get(0) == Some(&\"library\") {\n-                &path[1]\n-            } else if !path.is_empty() {\n-                &path[0]\n-            } else {\n-                continue;\n-            };\n-            if krates.contains(&requested_crate) {\n+        for requested_crate in paths {\n+            if krates.iter().any(|k| *k == requested_crate.as_str()) {\n                 let index = out.join(requested_crate).join(\"index.html\");\n                 open(builder, &index);\n             }"}, {"sha": "fd6dc563a0ec8dc3bed943979718b1db8a719e87", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -34,7 +34,7 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            python3 ../x.py build --stage 0 src/tools/build-manifest && \\\n            python3 ../x.py test --stage 0 src/tools/compiletest && \\\n            python3 ../x.py test --stage 2 src/tools/tidy && \\\n-           python3 ../x.py doc --stage 0 library/std && \\\n+           python3 ../x.py doc --stage 0 library/test && \\\n            /scripts/validate-toolstate.sh && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es5 ../src/librustdoc/html/static/*.js"}, {"sha": "b5c4a775296648a051fc29c20e782ed698958452", "filename": "src/test/ui/cast/issue-84213.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -6,6 +6,7 @@ struct Something {\n \n fn main() {\n     let mut something = Something { field: 1337 };\n+    let _ = something.field;\n \n     let _pointer_to_something = &something as *const Something;\n     //~^ ERROR: non-primitive cast"}, {"sha": "6eb81291abc7fb3292336934776bc59d9ae24b8a", "filename": "src/test/ui/cast/issue-84213.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -6,6 +6,7 @@ struct Something {\n \n fn main() {\n     let mut something = Something { field: 1337 };\n+    let _ = something.field;\n \n     let _pointer_to_something = something as *const Something;\n     //~^ ERROR: non-primitive cast"}, {"sha": "1b71d4db511b5a3c3d46ead8834ecc6d5875859d", "filename": "src/test/ui/cast/issue-84213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `Something` as `*const Something`\n-  --> $DIR/issue-84213.rs:10:33\n+  --> $DIR/issue-84213.rs:11:33\n    |\n LL |     let _pointer_to_something = something as *const Something;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,7 +10,7 @@ LL |     let _pointer_to_something = &something as *const Something;\n    |                                 ^\n \n error[E0605]: non-primitive cast: `Something` as `*mut Something`\n-  --> $DIR/issue-84213.rs:13:37\n+  --> $DIR/issue-84213.rs:14:37\n    |\n LL |     let _mut_pointer_to_something = something as *mut Something;\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast"}, {"sha": "9a4d9fbad35ba603d3a0067f021dbae1ed78b30a", "filename": "src/test/ui/lint/dead-code/issue-85255.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -0,0 +1,22 @@\n+// Unused `pub` fields in non-`pub` structs should also trigger dead code warnings.\n+// check-pass\n+\n+#![warn(dead_code)]\n+\n+struct Foo {\n+    a: i32, //~ WARNING: field is never read\n+    pub b: i32, //~ WARNING: field is never read\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+}\n+\n+\n+fn main() {\n+    let _ = Foo { a: 1, b: 2 };\n+    let _ = Bar;\n+}"}, {"sha": "73646439295338f1220860cbf2d4cc63bbae6507", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50f2bf6a5751751ea27a8fd5577d5bdd37236669/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=50f2bf6a5751751ea27a8fd5577d5bdd37236669", "patch": "@@ -0,0 +1,32 @@\n+warning: field is never read: `a`\n+  --> $DIR/issue-85255.rs:7:5\n+   |\n+LL |     a: i32,\n+   |     ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-85255.rs:4:9\n+   |\n+LL | #![warn(dead_code)]\n+   |         ^^^^^^^^^\n+\n+warning: field is never read: `b`\n+  --> $DIR/issue-85255.rs:8:5\n+   |\n+LL |     pub b: i32,\n+   |     ^^^^^^^^^^\n+\n+warning: associated function is never used: `a`\n+  --> $DIR/issue-85255.rs:14:8\n+   |\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+\n+warning: associated function is never used: `b`\n+  --> $DIR/issue-85255.rs:15:12\n+   |\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n+warning: 4 warnings emitted\n+"}]}