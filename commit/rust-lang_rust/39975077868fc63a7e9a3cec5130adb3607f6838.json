{"sha": "39975077868fc63a7e9a3cec5130adb3607f6838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OTc1MDc3ODY4ZmM2M2E3ZTlhM2NlYzUxMzBhZGIzNjA3ZjY4Mzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-05T00:09:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-09T19:17:44Z"}, "message": "Resolve `$crate` in all hygienic contexts for pretty-pringing\n\nStop visiting AST to discover those contexts, just iterate through hygiene data instead", "tree": {"sha": "09df0356e85dced0d14aa4dc5de9db1ab9b9b596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09df0356e85dced0d14aa4dc5de9db1ab9b9b596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39975077868fc63a7e9a3cec5130adb3607f6838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39975077868fc63a7e9a3cec5130adb3607f6838", "html_url": "https://github.com/rust-lang/rust/commit/39975077868fc63a7e9a3cec5130adb3607f6838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39975077868fc63a7e9a3cec5130adb3607f6838/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4344a90308b810447adb011f3fd45fde41f7ce48", "url": "https://api.github.com/repos/rust-lang/rust/commits/4344a90308b810447adb011f3fd45fde41f7ce48", "html_url": "https://github.com/rust-lang/rust/commit/4344a90308b810447adb011f3fd45fde41f7ce48"}], "stats": {"total": 106, "additions": 47, "deletions": 59}, "files": [{"sha": "49116f3f171e2620bba3f7a85de35bea886f49dd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -758,7 +758,10 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn macro_def_scope(&mut self, expansion: Mark) -> Module<'a> {\n-        let def_id = self.macro_defs[&expansion];\n+        let def_id = match self.macro_defs.get(&expansion) {\n+            Some(def_id) => *def_id,\n+            None => return self.graph_root,\n+        };\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n         } else if def_id.krate == CrateNum::BuiltinMacros {"}, {"sha": "8f23c9813f7d9e43560fa6f9ecc0b4443eed3933", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -17,12 +17,11 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n-use syntax::ext::hygiene::Mark;\n+use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{feature_err, emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::{AttributeGate, GateIssue, Stability, BUILTIN_ATTRIBUTES};\n use syntax::symbol::{Symbol, kw, sym};\n-use syntax::visit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::Applicability;\n@@ -146,24 +145,14 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n-    fn resolve_dollar_crates(&mut self, fragment: &AstFragment) {\n-        struct ResolveDollarCrates<'a, 'b> {\n-            resolver: &'a mut Resolver<'b>\n-        }\n-        impl<'a> Visitor<'a> for ResolveDollarCrates<'a, '_> {\n-            fn visit_ident(&mut self, ident: Ident) {\n-                if ident.name == kw::DollarCrate {\n-                    let name = match self.resolver.resolve_crate_root(ident).kind {\n-                        ModuleKind::Def(.., name) if name != kw::Invalid => name,\n-                        _ => kw::Crate,\n-                    };\n-                    ident.span.ctxt().set_dollar_crate_name(name);\n-                }\n+    fn resolve_dollar_crates(&mut self) {\n+        hygiene::update_dollar_crate_names(|ctxt| {\n+            let ident = Ident::new(kw::DollarCrate, DUMMY_SP.with_ctxt(ctxt));\n+            match self.resolve_crate_root(ident).kind {\n+                ModuleKind::Def(.., name) if name != kw::Invalid => name,\n+                _ => kw::Crate,\n             }\n-            fn visit_mac(&mut self, _: &ast::Mac) {}\n-        }\n-\n-        fragment.visit_with(&mut ResolveDollarCrates { resolver: self });\n+        });\n     }\n \n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,"}, {"sha": "c0ba41b8af40562a83b94d6ee8478930657694bf", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -701,7 +701,7 @@ pub trait Resolver {\n \n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n \n-    fn resolve_dollar_crates(&mut self, fragment: &AstFragment);\n+    fn resolve_dollar_crates(&mut self);\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);"}, {"sha": "053686b8b1f275c1e02e0670f16493a182b8e18d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -429,7 +429,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     fn collect_invocations(&mut self, mut fragment: AstFragment, derives: &[Mark])\n                            -> (AstFragment, Vec<Invocation>) {\n         // Resolve `$crate`s in the fragment for pretty-printing.\n-        self.cx.resolver.resolve_dollar_crates(&fragment);\n+        self.cx.resolver.resolve_dollar_crates();\n \n         let invocations = {\n             let mut collector = InvocationCollector {"}, {"sha": "f52952ca40274017ecfbca8fd1bbd5bb54f827fd", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -33,7 +33,7 @@ use crate::symbol::{kw, Symbol};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use std::{fmt, mem};\n+use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n #[derive(Clone, Copy, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]\n@@ -387,6 +387,23 @@ pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {\n     HygieneData::with(|data| data.walk_chain(span, to))\n }\n \n+pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {\n+    // The new contexts that need updating are at the end of the list and have `$crate` as a name.\n+    let (len, to_update) = HygieneData::with(|data| (\n+        data.syntax_contexts.len(),\n+        data.syntax_contexts.iter().rev()\n+            .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate).count()\n+    ));\n+    // The callback must be called from outside of the `HygieneData` lock,\n+    // since it will try to acquire it too.\n+    let range_to_update = len - to_update .. len;\n+    let names: Vec<_> =\n+        range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();\n+    HygieneData::with(|data| range_to_update.zip(names.into_iter()).for_each(|(idx, name)| {\n+        data.syntax_contexts[idx].dollar_crate_name = name;\n+    }))\n+}\n+\n impl SyntaxContext {\n     #[inline]\n     pub const fn empty() -> Self {\n@@ -614,17 +631,6 @@ impl SyntaxContext {\n     pub fn dollar_crate_name(self) -> Symbol {\n         HygieneData::with(|data| data.syntax_contexts[self.0 as usize].dollar_crate_name)\n     }\n-\n-    pub fn set_dollar_crate_name(self, dollar_crate_name: Symbol) {\n-        HygieneData::with(|data| {\n-            let prev_dollar_crate_name = mem::replace(\n-                &mut data.syntax_contexts[self.0 as usize].dollar_crate_name, dollar_crate_name\n-            );\n-            assert!(dollar_crate_name == prev_dollar_crate_name ||\n-                    prev_dollar_crate_name == kw::DollarCrate,\n-                    \"$crate name is reset for a syntax context\");\n-        })\n-    }\n }\n \n impl fmt::Debug for SyntaxContext {"}, {"sha": "35c61b2bc69e05d2e1a6cbb3cf25f345f81112de", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -1,5 +1,4 @@\n-//~ ERROR expected type, found `$`\n-\n+// check-pass\n // edition:2018\n // aux-build:test-macros.rs\n "}, {"sha": "ecc0d3853e52b43a765c899b2e3f724c0b688d3f", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stderr", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4344a90308b810447adb011f3fd45fde41f7ce48/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4344a90308b810447adb011f3fd45fde41f7ce48/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stderr?ref=4344a90308b810447adb011f3fd45fde41f7ce48", "patch": "@@ -1,4 +0,0 @@\n-error: expected type, found `$`\n-\n-error: aborting due to previous error\n-"}, {"sha": "033699d8d86ae749b59b303533a960e17a87fe98", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/39975077868fc63a7e9a3cec5130adb3607f6838/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=39975077868fc63a7e9a3cec5130adb3607f6838", "patch": "@@ -1,61 +1,56 @@\n-PRINT-ATTR INPUT (DISPLAY): struct A(identity!($crate :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( identity ! ( $ crate :: S ) ) ;\n+PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( identity ! ( crate :: S ) ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0),\n+        span: #2 bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #0 bytes(0..0),\n+        span: #2 bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #0 bytes(0..0),\n+                span: #2 bytes(LO..HI),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #0 bytes(0..0),\n+                span: #2 bytes(LO..HI),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n-                    Punct {\n-                        ch: '$',\n-                        spacing: Alone,\n-                        span: #0 bytes(0..0),\n-                    },\n                     Ident {\n-                        ident: \"crate\",\n-                        span: #0 bytes(0..0),\n+                        ident: \"$crate\",\n+                        span: #2 bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #0 bytes(0..0),\n+                        span: #2 bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #0 bytes(0..0),\n+                        span: #2 bytes(LO..HI),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #0 bytes(0..0),\n+                        span: #2 bytes(LO..HI),\n                     },\n                 ],\n-                span: #0 bytes(0..0),\n+                span: #2 bytes(LO..HI),\n             },\n         ],\n-        span: #0 bytes(0..0),\n+        span: #2 bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #2 bytes(LO..HI),\n     },\n ]"}]}