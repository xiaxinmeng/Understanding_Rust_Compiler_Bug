{"sha": "3287f72d39df22a4672527f8f97a771d11071a6c", "node_id": "C_kwDOAAsO6NoAKDMyODdmNzJkMzlkZjIyYTQ2NzI1MjdmOGY5N2E3NzFkMTEwNzFhNmM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-23T03:03:33Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-23T11:55:48Z"}, "message": "Avoid code duplication by extracting checks into fns", "tree": {"sha": "39f96f8a4ddb500544ee88236fa4620bbc725a1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f96f8a4ddb500544ee88236fa4620bbc725a1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3287f72d39df22a4672527f8f97a771d11071a6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFz+EYACgkQgTGiTgx5\n76+zIg//Y/0ves/vIkm3JELqlyOB9wSmHQGlS2bDbx5taPChiNffs7b4yEx04Qfl\nuT0gHmFBU+i04YmW3tMSTnNMGIuzcXWTLkmU40uSrPtKA3a0nhMpWQh1/oQ0OTjQ\n1KLjqJPOFFpXSACj7/VLHpU8PiGCIOFxlTLf2EfFDyd5m8GnjsNGirYra0y5ddMo\nqEgW/40JpDOQed+Qd/mvcJhA0mAep1TsyrKHTpoIl3ct02ar/RwpLs/OFD3OYZHX\nJY0z6HsN7WWas2rmUNIEYIFT/Dyka/FjUz4euLutiMsl6cEkftINFi2F7KzCEQ6c\ngFooHik9X/JWTJTcrGYatPH4kH8T0i4pcI6y/nbQJSu7EXNcuQnZDBPtXTbbz4vp\njGnAr7Xvot32qzz8p94pjhSHSD6cM+XMT7+x0y6o1PEqE/dklJdof5zNqNcVTZ3e\n1c4qh/1hRpo5kmrNc6DFmAqPPQjB2B+Zq9PD3yJPaqESKQoBjnkGpxLwyj83Y54H\nbW2a8nNBBEm2TUVILQoqP2DUssDix6vo+Jx90RF1giY4ca3F9JWJ8w1BqtxSlJi8\nEIJbYpnq19XtcJhvaiDiDYZ8ebZ57FUOVQtuxRoobw2q40cdn6s/wFqAvXf3sP6P\nrDb7drK1zPARPwR0FDl1Tp+K2zoirA1QFFwEMe3conx2ld5T/bs=\n=amP5\n-----END PGP SIGNATURE-----", "payload": "tree 39f96f8a4ddb500544ee88236fa4620bbc725a1d\nparent 953418685769424388fb9ea1f4b2beaceedb6857\nauthor Santiago Pastorino <spastorino@gmail.com> 1634958213 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634990148 -0300\n\nAvoid code duplication by extracting checks into fns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3287f72d39df22a4672527f8f97a771d11071a6c", "html_url": "https://github.com/rust-lang/rust/commit/3287f72d39df22a4672527f8f97a771d11071a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3287f72d39df22a4672527f8f97a771d11071a6c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953418685769424388fb9ea1f4b2beaceedb6857", "url": "https://api.github.com/repos/rust-lang/rust/commits/953418685769424388fb9ea1f4b2beaceedb6857", "html_url": "https://github.com/rust-lang/rust/commit/953418685769424388fb9ea1f4b2beaceedb6857"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "42d3194aed48af5883490d2d7be5d738024b209e", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3287f72d39df22a4672527f8f97a771d11071a6c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287f72d39df22a4672527f8f97a771d11071a6c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=3287f72d39df22a4672527f8f97a771d11071a6c", "patch": "@@ -8,7 +8,9 @@ use crate::infer::{CombinedSnapshot, InferOk, TyCtxtInferExt};\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::SkipLeakCheck;\n-use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionContext};\n+use crate::traits::{\n+    self, Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext,\n+};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::Subst;\n@@ -159,6 +161,19 @@ fn overlap_within_probe(\n     b_def_id: DefId,\n     snapshot: &CombinedSnapshot<'_, 'tcx>,\n ) -> Option<OverlapResult<'tcx>> {\n+    fn loose_check(selcx: &mut SelectionContext<'cx, 'tcx>, o: &PredicateObligation<'tcx>) -> bool {\n+        !selcx.predicate_may_hold_fatal(o)\n+    }\n+\n+    fn strict_check(selcx: &SelectionContext<'cx, 'tcx>, o: &PredicateObligation<'tcx>) -> bool {\n+        let infcx = selcx.infcx();\n+        let tcx = infcx.tcx;\n+        o.flip_polarity(tcx)\n+            .as_ref()\n+            .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n+            .unwrap_or(false)\n+    }\n+\n     // For the purposes of this check, we don't bring any placeholder\n     // types into scope; instead, we replace the generic types with\n     // fresh type variables, and hence we do our evaluations in an\n@@ -227,17 +242,9 @@ fn overlap_within_probe(\n             if tcx.has_attr(a_def_id, sym::rustc_strict_coherence)\n                 && tcx.has_attr(b_def_id, sym::rustc_strict_coherence)\n             {\n-                o.flip_polarity(tcx)\n-                    .as_ref()\n-                    .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n-                    .unwrap_or(false)\n+                strict_check(selcx, o)\n             } else {\n-                !selcx.predicate_may_hold_fatal(o)\n-                    || tcx.features().negative_impls\n-                        && o.flip_polarity(tcx)\n-                            .as_ref()\n-                            .map(|o| selcx.infcx().predicate_must_hold_modulo_regions(o))\n-                            .unwrap_or(false)\n+                loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o)\n             }\n         });\n     // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported"}]}