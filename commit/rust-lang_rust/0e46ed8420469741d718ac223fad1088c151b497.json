{"sha": "0e46ed8420469741d718ac223fad1088c151b497", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDZlZDg0MjA0Njk3NDFkNzE4YWMyMjNmYWQxMDg4YzE1MWI0OTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-03T13:44:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-03T13:44:06Z"}, "message": "Cleanups", "tree": {"sha": "7beabaeaf13b8185b618b3ce0012607571ee83a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7beabaeaf13b8185b618b3ce0012607571ee83a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e46ed8420469741d718ac223fad1088c151b497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e46ed8420469741d718ac223fad1088c151b497", "html_url": "https://github.com/rust-lang/rust/commit/0e46ed8420469741d718ac223fad1088c151b497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e46ed8420469741d718ac223fad1088c151b497/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "795b8cf9c5a6f3be4117823c896f41d1a4455079", "url": "https://api.github.com/repos/rust-lang/rust/commits/795b8cf9c5a6f3be4117823c896f41d1a4455079", "html_url": "https://github.com/rust-lang/rust/commit/795b8cf9c5a6f3be4117823c896f41d1a4455079"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "c486c02113ec8e4a4b4fb5047cf0225f56157480", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e46ed8420469741d718ac223fad1088c151b497/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e46ed8420469741d718ac223fad1088c151b497/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=0e46ed8420469741d718ac223fad1088c151b497", "patch": "@@ -79,8 +79,6 @@ fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n }\n \n pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n-    // test block_items\n-    // fn a() { fn b() {} }\n     let m = p.start();\n     // test attr_on_expr_stmt\n     // fn foo() {\n@@ -97,6 +95,8 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n         return;\n     }\n \n+    // test block_items\n+    // fn a() { fn b() {} }\n     let m = match items::maybe_item(p, m, items::ItemFlavor::Mod) {\n         Ok(()) => return,\n         Err(m) => m,"}, {"sha": "9bfdcfd41adf97cb736a59951ba1f44a67adb58f", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0e46ed8420469741d718ac223fad1088c151b497/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e46ed8420469741d718ac223fad1088c151b497/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=0e46ed8420469741d718ac223fad1088c151b497", "patch": "@@ -70,15 +70,6 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n                 return;\n             }\n         }\n-        // test marco_pat\n-        // fn main() {\n-        //     let m!(x) = 0;\n-        // }\n-        if lhs.kind() == PATH_PAT && p.at(T![!]) {\n-            let m = lhs.undo_completion(p);\n-            items::macro_call_after_excl(p);\n-            m.complete(p, MACRO_CALL);\n-        }\n     }\n }\n \n@@ -92,12 +83,12 @@ fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n         IDENT => match p.nth(1) {\n             // Checks the token after an IDENT to see if a pattern is a path (Struct { .. }) or macro\n             // (T![x]).\n-            T!['('] | T!['{'] | T![!] => path_pat(p),\n+            T!['('] | T!['{'] | T![!] => path_or_macro_pat(p),\n             T![:] if p.nth_at(1, T![::]) => path_pat(p),\n             _ => bind_pat(p, true),\n         },\n \n-        _ if paths::is_use_path_start(p) => path_pat(p),\n+        _ if paths::is_use_path_start(p) => path_or_macro_pat(p),\n         _ if is_literal_pat_start(p) => literal_pat(p),\n \n         T![.] if p.at(T![..]) => dot_dot_pat(p),\n@@ -146,7 +137,7 @@ fn literal_pat(p: &mut Parser) -> CompletedMarker {\n //     let Bar { .. } = ();\n //     let Bar(..) = ();\n // }\n-fn path_pat(p: &mut Parser) -> CompletedMarker {\n+fn path_or_macro_pat(p: &mut Parser) -> CompletedMarker {\n     assert!(paths::is_use_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n@@ -159,6 +150,14 @@ fn path_pat(p: &mut Parser) -> CompletedMarker {\n             record_field_pat_list(p);\n             RECORD_PAT\n         }\n+        // test marco_pat\n+        // fn main() {\n+        //     let m!(x) = 0;\n+        // }\n+        T![!] => {\n+            items::macro_call_after_excl(p);\n+            MACRO_CALL\n+        }\n         _ => PATH_PAT,\n     };\n     m.complete(p, kind)"}]}