{"sha": "7779a11448927e208ed6eb9bb609dd23595f77ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NzlhMTE0NDg5MjdlMjA4ZWQ2ZWI5YmI2MDlkZDIzNTk1Zjc3Y2U=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-06-19T01:40:40Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-06-19T01:56:36Z"}, "message": "Use step_unchecked more liberally", "tree": {"sha": "256e862de8f013413c03cc77ebfdf252afdae4e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256e862de8f013413c03cc77ebfdf252afdae4e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7779a11448927e208ed6eb9bb609dd23595f77ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7779a11448927e208ed6eb9bb609dd23595f77ce", "html_url": "https://github.com/rust-lang/rust/commit/7779a11448927e208ed6eb9bb609dd23595f77ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7779a11448927e208ed6eb9bb609dd23595f77ce/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036b5fec49aa5d5143b83360442400d1e83ccefa", "url": "https://api.github.com/repos/rust-lang/rust/commits/036b5fec49aa5d5143b83360442400d1e83ccefa", "html_url": "https://github.com/rust-lang/rust/commit/036b5fec49aa5d5143b83360442400d1e83ccefa"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "d882a8fa8499409820a2c87af5e5417f73524208", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7779a11448927e208ed6eb9bb609dd23595f77ce/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7779a11448927e208ed6eb9bb609dd23595f77ce/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=7779a11448927e208ed6eb9bb609dd23595f77ce", "patch": "@@ -490,9 +490,6 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn next(&mut self) -> Option<A> {\n         if self.start < self.end {\n             // SAFETY: just checked precondition\n-            // We use the unchecked version here, because\n-            // this helps LLVM vectorize loops for some ranges\n-            // that don't get vectorized otherwise.\n             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             Some(mem::replace(&mut self.start, n))\n         } else {\n@@ -514,7 +511,8 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn nth(&mut self, n: usize) -> Option<A> {\n         if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {\n             if plus_n < self.end {\n-                self.start = Step::forward(plus_n.clone(), 1);\n+                // SAFETY: just checked precondition\n+                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };\n                 return Some(plus_n);\n             }\n         }\n@@ -575,7 +573,8 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            self.end = Step::backward(self.end.clone(), 1);\n+            // SAFETY: just checked precondition\n+            self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n             Some(self.end.clone())\n         } else {\n             None\n@@ -586,7 +585,8 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     fn nth_back(&mut self, n: usize) -> Option<A> {\n         if let Some(minus_n) = Step::backward_checked(self.end.clone(), n) {\n             if minus_n > self.start {\n-                self.end = Step::backward(minus_n, 1);\n+                // SAFETY: just checked precondition\n+                self.end = unsafe { Step::backward_unchecked(minus_n, 1) };\n                 return Some(self.end.clone());\n             }\n         }\n@@ -643,9 +643,6 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n             // SAFETY: just checked precondition\n-            // We use the unchecked version here, because\n-            // otherwise `for _ in '\\0'..=char::MAX`\n-            // does not successfully remove panicking code.\n             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             mem::replace(&mut self.start, n)\n         } else {\n@@ -708,7 +705,8 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         let mut accum = init;\n \n         while self.start < self.end {\n-            let n = Step::forward(self.start.clone(), 1);\n+            // SAFETY: just checked precondition\n+            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             let n = mem::replace(&mut self.start, n);\n             accum = f(accum, n)?;\n         }\n@@ -761,7 +759,8 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         }\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n-            let n = Step::backward(self.end.clone(), 1);\n+            // SAFETY: just checked precondition\n+            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n             mem::replace(&mut self.end, n)\n         } else {\n             self.exhausted = true;\n@@ -811,7 +810,8 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         let mut accum = init;\n \n         while self.start < self.end {\n-            let n = Step::backward(self.end.clone(), 1);\n+            // SAFETY: just checked precondition\n+            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n             let n = mem::replace(&mut self.end, n);\n             accum = f(accum, n)?;\n         }"}]}