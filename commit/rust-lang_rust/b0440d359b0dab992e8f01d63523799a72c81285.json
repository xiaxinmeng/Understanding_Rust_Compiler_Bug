{"sha": "b0440d359b0dab992e8f01d63523799a72c81285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDQwZDM1OWIwZGFiOTkyZThmMDFkNjM1MjM3OTlhNzJjODEyODU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-04-19T05:13:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-07T23:00:17Z"}, "message": "Avoid useless Vec clones in pending_obligations().\n\nThe only instance of `ObligationForest` in use has an obligation type of\n`PendingPredicateObligation`, which contains a `PredicateObligation` and a\n`Vec<Ty>`.\n\n`FulfillmentContext::pending_obligations()` calls\n`ObligationForest::pending_obligations()`, which clones all the\n`PendingPredicateObligation`s. But the `Vec<Ty>` field of those cloned\nobligations is never touched.\n\nThis patch changes `ObligationForest::pending_obligations()` to\n`map_pending_obligations` -- which gives callers control about which part\nof the obligation to clone -- and takes advantage of the change to avoid\ncloning the `Vec<Ty>`. The change speeds up runs of a few rustc-perf\nbenchmarks, the best by 1%.", "tree": {"sha": "d0012b134f27abb24bef1f2ab1323e189012fd9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0012b134f27abb24bef1f2ab1323e189012fd9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0440d359b0dab992e8f01d63523799a72c81285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0440d359b0dab992e8f01d63523799a72c81285", "html_url": "https://github.com/rust-lang/rust/commit/b0440d359b0dab992e8f01d63523799a72c81285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0440d359b0dab992e8f01d63523799a72c81285/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be5f17ccff09569c2dd22df9330364a92fec2295", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5f17ccff09569c2dd22df9330364a92fec2295", "html_url": "https://github.com/rust-lang/rust/commit/be5f17ccff09569c2dd22df9330364a92fec2295"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "40d54885619fabe07477589a645eac60ec8aacf3", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=b0440d359b0dab992e8f01d63523799a72c81285", "patch": "@@ -13,7 +13,7 @@ use ty::{self, Ty, TyCtxt};\n use hir::def_id::DefId;\n \n use super::{FulfillmentContext, FulfillmentError};\n-use super::{ObligationCause, PendingPredicateObligation, PredicateObligation};\n+use super::{ObligationCause, PredicateObligation};\n \n pub trait TraitEngine<'tcx>: 'tcx {\n     fn normalize_projection_type<'a, 'gcx>(\n@@ -49,7 +49,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n-    fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>>;\n+    fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n }\n \n impl<'a, 'gcx, 'tcx> dyn TraitEngine<'tcx> {"}, {"sha": "7c31d8cc060526c591e2d1bf547ed1e164478bda", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=b0440d359b0dab992e8f01d63523799a72c81285", "patch": "@@ -241,8 +241,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(&mut selcx)\n     }\n \n-    fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>> {\n-        self.predicates.pending_obligations()\n+    fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n+        self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n }\n "}, {"sha": "c3934c4e1b850aa495df207f8d924bb338f6ab15", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=b0440d359b0dab992e8f01d63523799a72c81285", "patch": "@@ -229,13 +229,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n     }\n \n     /// Returns the set of obligations that are in a pending state.\n-    pub fn pending_obligations(&self) -> Vec<O>\n-        where O: Clone\n+    pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>\n+        where F: Fn(&O) -> P\n     {\n         self.nodes\n             .iter()\n             .filter(|n| n.state.get() == NodeState::Pending)\n-            .map(|n| n.obligation.clone())\n+            .map(|n| f(&n.obligation))\n             .collect()\n     }\n "}, {"sha": "439c1b34227940fdf6f8cde064734ea4dd9dcb6a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0440d359b0dab992e8f01d63523799a72c81285/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=b0440d359b0dab992e8f01d63523799a72c81285", "patch": "@@ -225,7 +225,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expected_sig = fulfillment_cx\n             .pending_obligations()\n             .iter()\n-            .map(|obligation| &obligation.obligation)\n             .filter_map(|obligation| {\n                 debug!(\n                     \"deduce_expectations_from_obligations: obligation.predicate={:?}\",\n@@ -257,7 +256,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expected_kind = fulfillment_cx\n             .pending_obligations()\n             .iter()\n-            .map(|obligation| &obligation.obligation)\n             .filter_map(|obligation| {\n                 let opt_trait_ref = match obligation.predicate {\n                     ty::Predicate::Projection(ref data) => Some(data.to_poly_trait_ref(self.tcx)),"}]}