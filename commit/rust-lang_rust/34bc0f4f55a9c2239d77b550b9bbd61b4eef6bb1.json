{"sha": "34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmMwZjRmNTVhOWMyMjM5ZDc3YjU1MGI5YmJkNjFiNGVlZjZiYjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T16:45:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-10T16:45:57Z"}, "message": "Merge pull request #3506 from slyngbaek/3183\n\nNext steps in assoc item completion #3183", "tree": {"sha": "f41a3a48d09f53a0f3bb6408152aead448fe010e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41a3a48d09f53a0f3bb6408152aead448fe010e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZ8RFCRBK7hj4Ov3rIwAAdHIIALCXDqVg/bz1o15uVyHIEm0l\n25twa9fHzY6ExMgAi55aQS455/z8xEUVamUWQsn1nf6Kg3pvM6cJQ+WoCSw3VbF+\nVzaZ6r3hC5i+5MMioKDNelTSwAlOBaRP1Indza5eJ4v/KwIkyh/SkzhMrL1e0Rxx\nuvTR+JhnbmhONWRrUVGq1QBM4UIh/l3N8KK1pd49crePmIPERh4keWSaHd2uwdJB\nofJ9IzCa5gWS4fBJwj9Fx65mCbjU+5X7LJ1tJ/NDUugfbyE+9Je4cZ5hxYbCRqfv\n6/Bd2mhwBFq/vpfwG6FuevwyavJJpcXbC4+kpkPD58b/2Ld4i6AC28O8eR972EI=\n=lIWC\n-----END PGP SIGNATURE-----\n", "payload": "tree f41a3a48d09f53a0f3bb6408152aead448fe010e\nparent d53627beba8fddb02496dc69979c557bdb9c34cf\nparent f67e6a850ec4c2cbfd183e45802ea4c2805af911\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1583858757 +0100\ncommitter GitHub <noreply@github.com> 1583858757 +0100\n\nMerge pull request #3506 from slyngbaek/3183\n\nNext steps in assoc item completion #3183"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1", "html_url": "https://github.com/rust-lang/rust/commit/34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53627beba8fddb02496dc69979c557bdb9c34cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53627beba8fddb02496dc69979c557bdb9c34cf", "html_url": "https://github.com/rust-lang/rust/commit/d53627beba8fddb02496dc69979c557bdb9c34cf"}, {"sha": "f67e6a850ec4c2cbfd183e45802ea4c2805af911", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67e6a850ec4c2cbfd183e45802ea4c2805af911", "html_url": "https://github.com/rust-lang/rust/commit/f67e6a850ec4c2cbfd183e45802ea4c2805af911"}], "stats": {"total": 144, "additions": 128, "deletions": 16}, "files": [{"sha": "2bf654a57c1e7d226d46fd20dc2bca96f74fcf8f", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 128, "deletions": 16, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=34bc0f4f55a9c2239d77b550b9bbd61b4eef6bb1", "patch": "@@ -34,7 +34,7 @@\n use hir::{self, Docs, HasSource};\n use ra_assists::utils::get_missing_impl_items;\n use ra_syntax::{\n-    ast::{self, edit},\n+    ast::{self, edit, ImplDef},\n     AstNode, SyntaxKind, SyntaxNode, TextRange,\n };\n use ra_text_edit::TextEdit;\n@@ -47,22 +47,22 @@ use crate::{\n };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    let trigger = ctx.token.ancestors().find(|p| match p.kind() {\n-        SyntaxKind::FN_DEF\n-        | SyntaxKind::TYPE_ALIAS_DEF\n-        | SyntaxKind::CONST_DEF\n-        | SyntaxKind::BLOCK_EXPR => true,\n-        _ => false,\n-    });\n-\n-    let impl_def = trigger\n-        .as_ref()\n-        .and_then(|node| node.parent())\n-        .and_then(|node| node.parent())\n-        .and_then(ast::ImplDef::cast);\n-\n-    if let (Some(trigger), Some(impl_def)) = (trigger, impl_def) {\n+    if let Some((trigger, impl_def)) = completion_match(ctx) {\n         match trigger.kind() {\n+            SyntaxKind::NAME_REF => {\n+                get_missing_impl_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n+                    hir::AssocItem::Function(fn_item) => {\n+                        add_function_impl(&trigger, acc, ctx, &fn_item)\n+                    }\n+                    hir::AssocItem::TypeAlias(type_item) => {\n+                        add_type_alias_impl(&trigger, acc, ctx, &type_item)\n+                    }\n+                    hir::AssocItem::Const(const_item) => {\n+                        add_const_impl(&trigger, acc, ctx, &const_item)\n+                    }\n+                })\n+            }\n+\n             SyntaxKind::FN_DEF => {\n                 for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n                     |item| match item {\n@@ -101,6 +101,21 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     }\n }\n \n+fn completion_match(ctx: &CompletionContext) -> Option<(SyntaxNode, ImplDef)> {\n+    let (trigger, impl_def_offset) = ctx.token.ancestors().find_map(|p| match p.kind() {\n+        SyntaxKind::FN_DEF\n+        | SyntaxKind::TYPE_ALIAS_DEF\n+        | SyntaxKind::CONST_DEF\n+        | SyntaxKind::BLOCK_EXPR => Some((p, 2)),\n+        SyntaxKind::NAME_REF => Some((p, 5)),\n+        _ => None,\n+    })?;\n+    let impl_def = (0..impl_def_offset - 1)\n+        .try_fold(trigger.parent()?, |t, _| t.parent())\n+        .and_then(ast::ImplDef::cast)?;\n+    Some((trigger, impl_def))\n+}\n+\n fn add_function_impl(\n     fn_def_node: &SyntaxNode,\n     acc: &mut Completions,\n@@ -209,6 +224,103 @@ mod tests {\n         do_completion(code, CompletionKind::Magic)\n     }\n \n+    #[test]\n+    fn name_ref_function_type_const() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                type TestType;\n+                const TEST_CONST: u16;\n+                fn test();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                t<|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"const TEST_CONST: u16 = \",\n+                source_range: [209; 210),\n+                delete: [209; 210),\n+                insert: \"const TEST_CONST: u16 = \",\n+                kind: Const,\n+                lookup: \"TEST_CONST\",\n+            },\n+            CompletionItem {\n+                label: \"fn test()\",\n+                source_range: [209; 210),\n+                delete: [209; 210),\n+                insert: \"fn test() {}\",\n+                kind: Function,\n+                lookup: \"test\",\n+            },\n+            CompletionItem {\n+                label: \"type TestType = \",\n+                source_range: [209; 210),\n+                delete: [209; 210),\n+                insert: \"type TestType = \",\n+                kind: TypeAlias,\n+                lookup: \"TestType\",\n+            },\n+        ]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn no_nested_fn_completions() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn test();\n+                fn test2();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                fn test() {\n+                    t<|>\n+                }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"[]\"###);\n+    }\n+\n+    #[test]\n+    fn name_ref_single_function() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn test();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                t<|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn test()\",\n+                source_range: [139; 140),\n+                delete: [139; 140),\n+                insert: \"fn test() {}\",\n+                kind: Function,\n+                lookup: \"test\",\n+            },\n+        ]\n+        \"###);\n+    }\n+\n     #[test]\n     fn single_function() {\n         let completions = complete("}]}