{"sha": "8ae3b509768774a9d351b939d18d5cb421b6ed3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZTNiNTA5NzY4Nzc0YTlkMzUxYjkzOWQxOGQ1Y2I0MjFiNmVkM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T09:56:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-07T09:56:51Z"}, "message": "Auto merge of #77119 - GuillaumeGomez:unclosed-html-tag-lint, r=jyn514\n\nUnclosed html tag lint\n\nPart of #67799.\n\nI think `@ollie27` will be interested (`@Manishearth` too since they opened the issue ;) ).\n\nr? `@jyn514`", "tree": {"sha": "be49c6574c0ff6dffe4acbe44bf0d364a3ea3aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be49c6574c0ff6dffe4acbe44bf0d364a3ea3aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae3b509768774a9d351b939d18d5cb421b6ed3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae3b509768774a9d351b939d18d5cb421b6ed3b", "html_url": "https://github.com/rust-lang/rust/commit/8ae3b509768774a9d351b939d18d5cb421b6ed3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae3b509768774a9d351b939d18d5cb421b6ed3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5296ac656504883ef3432694ac3c5f3033255641", "url": "https://api.github.com/repos/rust-lang/rust/commits/5296ac656504883ef3432694ac3c5f3033255641", "html_url": "https://github.com/rust-lang/rust/commit/5296ac656504883ef3432694ac3c5f3033255641"}, {"sha": "d3b7b7e23a58e772194677b54672ff118ecc9093", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b7b7e23a58e772194677b54672ff118ecc9093", "html_url": "https://github.com/rust-lang/rust/commit/d3b7b7e23a58e772194677b54672ff118ecc9093"}], "stats": {"total": 433, "additions": 428, "deletions": 5}, "files": [{"sha": "1db59bfc39dcef4579fa95f3c17b3332977f3c83", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -64,8 +64,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, BROKEN_INTRA_DOC_LINKS, ELIDED_LIFETIMES_IN_PATHS,\n-    EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, MISSING_DOC_CODE_EXAMPLES,\n-    PRIVATE_DOC_TESTS,\n+    EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, INVALID_HTML_TAGS,\n+    MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -311,7 +311,8 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         PRIVATE_INTRA_DOC_LINKS,\n         INVALID_CODEBLOCK_ATTRIBUTES,\n         MISSING_DOC_CODE_EXAMPLES,\n-        PRIVATE_DOC_TESTS\n+        PRIVATE_DOC_TESTS,\n+        INVALID_HTML_TAGS\n     );\n \n     // Register renamed and removed lints."}, {"sha": "fef3164de59be52b46adf78b2869b131b8f3f6c5", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -1881,6 +1881,16 @@ declare_lint! {\n     \"detects code samples in docs of private items not documented by rustdoc\"\n }\n \n+declare_lint! {\n+    /// The `invalid_html_tags` lint detects invalid HTML tags. This is a\n+    /// `rustdoc` only lint, see the documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_html_tags\n+    pub INVALID_HTML_TAGS,\n+    Allow,\n+    \"detects invalid HTML tags in doc comments\"\n+}\n+\n declare_lint! {\n     /// The `where_clauses_object_safety` lint detects for [object safety] of\n     /// [where clauses].\n@@ -2699,6 +2709,7 @@ declare_lint_pass! {\n         INVALID_CODEBLOCK_ATTRIBUTES,\n         MISSING_CRATE_LEVEL_DOCS,\n         MISSING_DOC_CODE_EXAMPLES,\n+        INVALID_HTML_TAGS,\n         PRIVATE_DOC_TESTS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,"}, {"sha": "d8c0bab22594305c3ce49ec480396c7b64ce9e28", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -250,3 +250,38 @@ warning: unknown attribute `should-panic`. Did you mean `should_panic`?\n \n In the example above, the correct form is `should_panic`. This helps detect\n typo mistakes for some common attributes.\n+\n+## invalid_html_tags\n+\n+This lint is **allowed by default** and is **nightly-only**. It detects unclosed\n+or invalid HTML tags. For example:\n+\n+```rust\n+#![warn(invalid_html_tags)]\n+\n+/// <h1>\n+/// </script>\n+pub fn foo() {}\n+```\n+\n+Which will give:\n+\n+```text\n+warning: unopened HTML tag `script`\n+ --> foo.rs:1:1\n+  |\n+1 | / /// <h1>\n+2 | | /// </script>\n+  | |_____________^\n+  |\n+  = note: `#[warn(invalid_html_tags)]` on by default\n+\n+warning: unclosed HTML tag `h1`\n+ --> foo.rs:1:1\n+  |\n+1 | / /// <h1>\n+2 | | /// </script>\n+  | |_____________^\n+\n+warning: 2 warnings emitted\n+```"}, {"sha": "45a84c4fb30d3e89f43dc9d9f3a520aed5654d22", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -328,6 +328,7 @@ pub fn run_core(\n     let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n     let no_crate_level_docs = rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS.name;\n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let invalid_html_tags = rustc_lint::builtin::INVALID_HTML_TAGS.name;\n     let renamed_and_removed_lints = rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name;\n     let unknown_lints = rustc_lint::builtin::UNKNOWN_LINTS.name;\n \n@@ -340,6 +341,7 @@ pub fn run_core(\n         private_doc_tests.to_owned(),\n         no_crate_level_docs.to_owned(),\n         invalid_codeblock_attributes_name.to_owned(),\n+        invalid_html_tags.to_owned(),\n         renamed_and_removed_lints.to_owned(),\n         unknown_lints.to_owned(),\n     ];"}, {"sha": "2fd06d7e5730fded3a810e3b40e4c9b35d43cce1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -43,7 +43,7 @@ use pulldown_cmark::{html, BrokenLink, CodeBlockKind, CowStr, Event, Options, Pa\n #[cfg(test)]\n mod tests;\n \n-fn opts() -> Options {\n+pub(crate) fn opts() -> Options {\n     Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES | Options::ENABLE_STRIKETHROUGH\n }\n "}, {"sha": "ae4eac89b457af3e82a489a2c9a374d40cbf5bd0", "filename": "src/librustdoc/passes/html_tags.rs", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -0,0 +1,190 @@\n+use super::{span_of_attrs, Pass};\n+use crate::clean::*;\n+use crate::core::DocContext;\n+use crate::fold::DocFolder;\n+use crate::html::markdown::opts;\n+use core::ops::Range;\n+use pulldown_cmark::{Event, Parser};\n+use rustc_feature::UnstableFeatures;\n+use rustc_session::lint;\n+\n+pub const CHECK_INVALID_HTML_TAGS: Pass = Pass {\n+    name: \"check-invalid-html-tags\",\n+    run: check_invalid_html_tags,\n+    description: \"detects invalid HTML tags in doc comments\",\n+};\n+\n+struct InvalidHtmlTagsLinter<'a, 'tcx> {\n+    cx: &'a DocContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> InvalidHtmlTagsLinter<'a, 'tcx> {\n+    fn new(cx: &'a DocContext<'tcx>) -> Self {\n+        InvalidHtmlTagsLinter { cx }\n+    }\n+}\n+\n+pub fn check_invalid_html_tags(krate: Crate, cx: &DocContext<'_>) -> Crate {\n+    if !UnstableFeatures::from_environment().is_nightly_build() {\n+        krate\n+    } else {\n+        let mut coll = InvalidHtmlTagsLinter::new(cx);\n+\n+        coll.fold_crate(krate)\n+    }\n+}\n+\n+const ALLOWED_UNCLOSED: &[&str] = &[\n+    \"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n+    \"source\", \"track\", \"wbr\",\n+];\n+\n+fn drop_tag(\n+    tags: &mut Vec<(String, Range<usize>)>,\n+    tag_name: String,\n+    range: Range<usize>,\n+    f: &impl Fn(&str, &Range<usize>),\n+) {\n+    let tag_name_low = tag_name.to_lowercase();\n+    if let Some(pos) = tags.iter().rposition(|(t, _)| t.to_lowercase() == tag_name_low) {\n+        // If the tag is nested inside a \"<script>\" or a \"<style>\" tag, no warning should\n+        // be emitted.\n+        let should_not_warn = tags.iter().take(pos + 1).any(|(at, _)| {\n+            let at = at.to_lowercase();\n+            at == \"script\" || at == \"style\"\n+        });\n+        for (last_tag_name, last_tag_span) in tags.drain(pos + 1..) {\n+            if should_not_warn {\n+                continue;\n+            }\n+            let last_tag_name_low = last_tag_name.to_lowercase();\n+            if ALLOWED_UNCLOSED.iter().any(|&at| at == &last_tag_name_low) {\n+                continue;\n+            }\n+            // `tags` is used as a queue, meaning that everything after `pos` is included inside it.\n+            // So `<h2><h3></h2>` will look like `[\"h2\", \"h3\"]`. So when closing `h2`, we will still\n+            // have `h3`, meaning the tag wasn't closed as it should have.\n+            f(&format!(\"unclosed HTML tag `{}`\", last_tag_name), &last_tag_span);\n+        }\n+        // Remove the `tag_name` that was originally closed\n+        tags.pop();\n+    } else {\n+        // It can happen for example in this case: `<h2></script></h2>` (the `h2` tag isn't required\n+        // but it helps for the visualization).\n+        f(&format!(\"unopened HTML tag `{}`\", tag_name), &range);\n+    }\n+}\n+\n+fn extract_tag(\n+    tags: &mut Vec<(String, Range<usize>)>,\n+    text: &str,\n+    range: Range<usize>,\n+    f: &impl Fn(&str, &Range<usize>),\n+) {\n+    let mut iter = text.char_indices().peekable();\n+\n+    while let Some((start_pos, c)) = iter.next() {\n+        if c == '<' {\n+            let mut tag_name = String::new();\n+            let mut is_closing = false;\n+            let mut prev_pos = start_pos;\n+            loop {\n+                let (pos, c) = match iter.peek() {\n+                    Some((pos, c)) => (*pos, *c),\n+                    // In case we reached the of the doc comment, we want to check that it's an\n+                    // unclosed HTML tag. For example \"/// <h3\".\n+                    None => (prev_pos, '\\0'),\n+                };\n+                prev_pos = pos;\n+                // Checking if this is a closing tag (like `</a>` for `<a>`).\n+                if c == '/' && tag_name.is_empty() {\n+                    is_closing = true;\n+                } else if c.is_ascii_alphanumeric() {\n+                    tag_name.push(c);\n+                } else {\n+                    if !tag_name.is_empty() {\n+                        let mut r =\n+                            Range { start: range.start + start_pos, end: range.start + pos };\n+                        if c == '>' {\n+                            // In case we have a tag without attribute, we can consider the span to\n+                            // refer to it fully.\n+                            r.end += 1;\n+                        }\n+                        if is_closing {\n+                            // In case we have \"</div >\" or even \"</div         >\".\n+                            if c != '>' {\n+                                if !c.is_whitespace() {\n+                                    // It seems like it's not a valid HTML tag.\n+                                    break;\n+                                }\n+                                let mut found = false;\n+                                for (new_pos, c) in text[pos..].char_indices() {\n+                                    if !c.is_whitespace() {\n+                                        if c == '>' {\n+                                            r.end = range.start + new_pos + 1;\n+                                            found = true;\n+                                        }\n+                                        break;\n+                                    }\n+                                }\n+                                if !found {\n+                                    break;\n+                                }\n+                            }\n+                            drop_tag(tags, tag_name, r, f);\n+                        } else {\n+                            tags.push((tag_name, r));\n+                        }\n+                    }\n+                    break;\n+                }\n+                iter.next();\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let hir_id = match self.cx.as_local_hir_id(item.def_id) {\n+            Some(hir_id) => hir_id,\n+            None => {\n+                // If non-local, no need to check anything.\n+                return self.fold_item_recur(item);\n+            }\n+        };\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+        if !dox.is_empty() {\n+            let cx = &self.cx;\n+            let report_diag = |msg: &str, range: &Range<usize>| {\n+                let sp = match super::source_span_for_markdown_range(cx, &dox, range, &item.attrs) {\n+                    Some(sp) => sp,\n+                    None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                };\n+                cx.tcx.struct_span_lint_hir(lint::builtin::INVALID_HTML_TAGS, hir_id, sp, |lint| {\n+                    lint.build(msg).emit()\n+                });\n+            };\n+\n+            let mut tags = Vec::new();\n+\n+            let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+\n+            for (event, range) in p {\n+                match event {\n+                    Event::Html(text) => extract_tag(&mut tags, &text, range, &report_diag),\n+                    _ => {}\n+                }\n+            }\n+\n+            for (tag, range) in tags.iter().filter(|(t, _)| {\n+                let t = t.to_lowercase();\n+                ALLOWED_UNCLOSED.iter().find(|&&at| at == t).is_none()\n+            }) {\n+                report_diag(&format!(\"unclosed HTML tag `{}`\", tag), range);\n+            }\n+        }\n+\n+        self.fold_item_recur(item)\n+    }\n+}"}, {"sha": "39c61f7edbe947128d604fb4b794404620b24034", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -45,6 +45,9 @@ pub use self::check_code_block_syntax::CHECK_CODE_BLOCK_SYNTAX;\n mod calculate_doc_coverage;\n pub use self::calculate_doc_coverage::CALCULATE_DOC_COVERAGE;\n \n+mod html_tags;\n+pub use self::html_tags::CHECK_INVALID_HTML_TAGS;\n+\n /// A single pass over the cleaned documentation.\n ///\n /// Runs in the compiler context, so it has access to types and traits and the like.\n@@ -87,6 +90,7 @@ pub const PASSES: &[Pass] = &[\n     CHECK_CODE_BLOCK_SYNTAX,\n     COLLECT_TRAIT_IMPLS,\n     CALCULATE_DOC_COVERAGE,\n+    CHECK_INVALID_HTML_TAGS,\n ];\n \n /// The list of passes run by default.\n@@ -100,6 +104,7 @@ pub const DEFAULT_PASSES: &[ConditionalPass] = &[\n     ConditionalPass::new(STRIP_PRIV_IMPORTS, WhenDocumentPrivate),\n     ConditionalPass::always(COLLECT_INTRA_DOC_LINKS),\n     ConditionalPass::always(CHECK_CODE_BLOCK_SYNTAX),\n+    ConditionalPass::always(CHECK_INVALID_HTML_TAGS),\n     ConditionalPass::always(PROPAGATE_DOC_CFG),\n ];\n "}, {"sha": "d878e390ca33934c7a76b7fb20a20957a75d621d", "filename": "src/test/rustdoc-ui/invalid-html-tags.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -0,0 +1,75 @@\n+#![deny(invalid_html_tags)]\n+\n+//! <p>\ud83d\udca9<p>\n+//~^ ERROR unclosed HTML tag `p`\n+//~^^ ERROR unclosed HTML tag `p`\n+\n+/// <img><input>\n+/// <script>\n+/// <img><input>\n+/// </script>\n+/// <unknown>\n+//~^ ERROR unclosed HTML tag `unknown`\n+/// < ok\n+/// <script>\n+//~^ ERROR unclosed HTML tag `script`\n+pub fn foo() {}\n+\n+/// <h1>\n+///   <h2>\n+//~^ ERROR unclosed HTML tag `h2`\n+///     <h3>\n+//~^ ERROR unclosed HTML tag `h3`\n+/// </h1>\n+/// </hello>\n+//~^ ERROR unopened HTML tag `hello`\n+pub fn bar() {}\n+\n+/// <div>\n+///    <br/> <p>\n+//~^ ERROR unclosed HTML tag `p`\n+/// </div>\n+pub fn a() {}\n+\n+/// <div>\n+///   <p>\n+///      <div></div>\n+///   </p>\n+/// </div>\n+pub fn b() {}\n+\n+/// <div style=\"hello\">\n+//~^ ERROR unclosed HTML tag `div`\n+///   <h3>\n+//~^ ERROR unclosed HTML tag `h3`\n+/// <script\n+//~^ ERROR unclosed HTML tag `script`\n+pub fn c() {}\n+\n+// Unclosed tags shouldn't warn if they are nested inside a <script> elem.\n+/// <script>\n+///   <h3><div>\n+/// </script>\n+/// <script>\n+///   <div>\n+///     <p>\n+///   </div>\n+/// </script>\n+pub fn d() {}\n+\n+// Unclosed tags shouldn't warn if they are nested inside a <style> elem.\n+/// <style>\n+///   <h3><div>\n+/// </style>\n+/// <stYle>\n+///   <div>\n+///     <p>\n+///   </div>\n+/// </style>\n+pub fn e() {}\n+\n+// Closing tags need to have \">\" at the end, otherwise it's not a closing tag!\n+/// <div></div >\n+/// <div></div\n+//~^ ERROR unclosed HTML tag `div`\n+pub fn f() {}"}, {"sha": "11f176ff05cc6f0fb580b5d32588927fb1bab237", "filename": "src/test/rustdoc-ui/invalid-html-tags.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-html-tags.stderr?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -0,0 +1,80 @@\n+error: unclosed HTML tag `p`\n+  --> $DIR/invalid-html-tags.rs:3:5\n+   |\n+LL | //! <p>\ud83d\udca9<p>\n+   |     ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid-html-tags.rs:1:9\n+   |\n+LL | #![deny(invalid_html_tags)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: unclosed HTML tag `p`\n+  --> $DIR/invalid-html-tags.rs:3:9\n+   |\n+LL | //! <p>\ud83d\udca9<p>\n+   |          ^^^\n+\n+error: unclosed HTML tag `unknown`\n+  --> $DIR/invalid-html-tags.rs:11:5\n+   |\n+LL | /// <unknown>\n+   |     ^^^^^^^^^\n+\n+error: unclosed HTML tag `script`\n+  --> $DIR/invalid-html-tags.rs:14:5\n+   |\n+LL | /// <script>\n+   |     ^^^^^^^^\n+\n+error: unclosed HTML tag `h2`\n+  --> $DIR/invalid-html-tags.rs:19:7\n+   |\n+LL | ///   <h2>\n+   |       ^^^^\n+\n+error: unclosed HTML tag `h3`\n+  --> $DIR/invalid-html-tags.rs:21:9\n+   |\n+LL | ///     <h3>\n+   |         ^^^^\n+\n+error: unopened HTML tag `hello`\n+  --> $DIR/invalid-html-tags.rs:24:5\n+   |\n+LL | /// </hello>\n+   |     ^^^^^^^^\n+\n+error: unclosed HTML tag `p`\n+  --> $DIR/invalid-html-tags.rs:29:14\n+   |\n+LL | ///    <br/> <p>\n+   |              ^^^\n+\n+error: unclosed HTML tag `div`\n+  --> $DIR/invalid-html-tags.rs:41:5\n+   |\n+LL | /// <div style=\"hello\">\n+   |     ^^^^\n+\n+error: unclosed HTML tag `h3`\n+  --> $DIR/invalid-html-tags.rs:43:7\n+   |\n+LL | ///   <h3>\n+   |       ^^^^\n+\n+error: unclosed HTML tag `script`\n+  --> $DIR/invalid-html-tags.rs:45:5\n+   |\n+LL | /// <script\n+   |     ^^^^^^\n+\n+error: unclosed HTML tag `div`\n+  --> $DIR/invalid-html-tags.rs:73:5\n+   |\n+LL | /// <div></div\n+   |     ^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "1446f7f1c1f310af55985b93003c1b9faf3dec5a", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -22,3 +22,8 @@ pub fn no_doctest() {} //~^ ERROR missing code example in this documentation\n /// println!(\"sup\");\n /// ```\n fn private_doctest() {} //~^^^^^ ERROR documentation test in private item\n+\n+/// <unknown>\n+//~^ ERROR unclosed HTML tag `unknown`\n+//~^^ ERROR missing code example\n+pub fn c() {}"}, {"sha": "0c111a33b656404cf555c0bfea6cf042d5c35fad", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae3b509768774a9d351b939d18d5cb421b6ed3b/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=8ae3b509768774a9d351b939d18d5cb421b6ed3b", "patch": "@@ -28,6 +28,12 @@ LL | #![deny(rustdoc)]\n    |         ^^^^^^^\n    = note: `#[deny(private_doc_tests)]` implied by `#[deny(rustdoc)]`\n \n+error: missing code example in this documentation\n+  --> $DIR/lint-group.rs:26:1\n+   |\n+LL | /// <unknown>\n+   | ^^^^^^^^^^^^^\n+\n error: unresolved link to `error`\n   --> $DIR/lint-group.rs:9:29\n    |\n@@ -42,5 +48,18 @@ LL | #![deny(rustdoc)]\n    = note: `#[deny(broken_intra_doc_links)]` implied by `#[deny(rustdoc)]`\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n-error: aborting due to 3 previous errors\n+error: unclosed HTML tag `unknown`\n+  --> $DIR/lint-group.rs:26:5\n+   |\n+LL | /// <unknown>\n+   |     ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-group.rs:7:9\n+   |\n+LL | #![deny(rustdoc)]\n+   |         ^^^^^^^\n+   = note: `#[deny(invalid_html_tags)]` implied by `#[deny(rustdoc)]`\n+\n+error: aborting due to 5 previous errors\n "}]}