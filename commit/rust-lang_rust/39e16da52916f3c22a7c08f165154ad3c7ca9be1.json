{"sha": "39e16da52916f3c22a7c08f165154ad3c7ca9be1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTE2ZGE1MjkxNmYzYzIyYTdjMDhmMTY1MTU0YWQzYzdjYTliZTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-25T15:05:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-29T21:44:09Z"}, "message": "rustc_target: `TyAndLayout::field` should never error.", "tree": {"sha": "af4b5f6c5a53ce60815e61d211664ee0cbf4e4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4b5f6c5a53ce60815e61d211664ee0cbf4e4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e16da52916f3c22a7c08f165154ad3c7ca9be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e16da52916f3c22a7c08f165154ad3c7ca9be1", "html_url": "https://github.com/rust-lang/rust/commit/39e16da52916f3c22a7c08f165154ad3c7ca9be1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e16da52916f3c22a7c08f165154ad3c7ca9be1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f0448815fa189cbe418026cf0ca1f1241715a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f0448815fa189cbe418026cf0ca1f1241715a4", "html_url": "https://github.com/rust-lang/rust/commit/d9f0448815fa189cbe418026cf0ca1f1241715a4"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "95216f1c3d7872fe2237fbc9cd77fe6d39309d09", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39e16da52916f3c22a7c08f165154ad3c7ca9be1/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e16da52916f3c22a7c08f165154ad3c7ca9be1/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=39e16da52916f3c22a7c08f165154ad3c7ca9be1", "patch": "@@ -160,12 +160,10 @@ impl<'tcx> DebugContext<'tcx> {\n \n                 for (field_idx, field_def) in variant.fields.iter().enumerate() {\n                     let field_offset = layout.fields.offset(field_idx);\n-                    let field_layout = layout\n-                        .field(\n-                            &layout::LayoutCx { tcx: self.tcx, param_env: ParamEnv::reveal_all() },\n-                            field_idx,\n-                        )\n-                        .unwrap();\n+                    let field_layout = layout.field(\n+                        &layout::LayoutCx { tcx: self.tcx, param_env: ParamEnv::reveal_all() },\n+                        field_idx,\n+                    );\n \n                     let field_type = self.dwarf_ty(field_layout.ty);\n "}, {"sha": "12f61e0c564aab39944b735e7d4f34057a8df842", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39e16da52916f3c22a7c08f165154ad3c7ca9be1/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e16da52916f3c22a7c08f165154ad3c7ca9be1/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=39e16da52916f3c22a7c08f165154ad3c7ca9be1", "patch": "@@ -789,7 +789,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n+            if intrinsic == sym::assert_zero_valid && !layout.might_permit_raw_init(fx, /*zero:*/ true) {\n                 with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n@@ -798,7 +798,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n+            if intrinsic == sym::assert_uninit_valid && !layout.might_permit_raw_init(fx, /*zero:*/ false) {\n                 with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),"}]}