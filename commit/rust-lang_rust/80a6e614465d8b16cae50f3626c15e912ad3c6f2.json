{"sha": "80a6e614465d8b16cae50f3626c15e912ad3c6f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYTZlNjE0NDY1ZDhiMTZjYWU1MGYzNjI2YzE1ZTkxMmFkM2M2ZjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T15:33:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T16:53:05Z"}, "message": "make CTX type param instead of assoc type\n\nthat way, we can implement ConvWith<&'_ CTX> for different lifetimes", "tree": {"sha": "0ecd7a1a7b79444fcc3847dcefb53ba0ece7c9be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecd7a1a7b79444fcc3847dcefb53ba0ece7c9be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80a6e614465d8b16cae50f3626c15e912ad3c6f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80a6e614465d8b16cae50f3626c15e912ad3c6f2", "html_url": "https://github.com/rust-lang/rust/commit/80a6e614465d8b16cae50f3626c15e912ad3c6f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80a6e614465d8b16cae50f3626c15e912ad3c6f2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3f2948ea2416d65640c07d2c69df75a4273d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3f2948ea2416d65640c07d2c69df75a4273d50", "html_url": "https://github.com/rust-lang/rust/commit/de3f2948ea2416d65640c07d2c69df75a4273d50"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "bbe140b7aba8216d2ce1aedc9f449760ed69eaf4", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/80a6e614465d8b16cae50f3626c15e912ad3c6f2/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80a6e614465d8b16cae50f3626c15e912ad3c6f2/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=80a6e614465d8b16cae50f3626c15e912ad3c6f2", "patch": "@@ -19,10 +19,9 @@ pub trait Conv {\n     fn conv(self) -> Self::Output;\n }\n \n-pub trait ConvWith {\n-    type Ctx;\n+pub trait ConvWith<CTX> {\n     type Output;\n-    fn conv_with(self, ctx: &Self::Ctx) -> Self::Output;\n+    fn conv_with(self, ctx: CTX) -> Self::Output;\n }\n \n pub trait TryConvWith {\n@@ -89,8 +88,7 @@ impl Conv for Severity {\n     }\n }\n \n-impl ConvWith for CompletionItem {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for CompletionItem {\n     type Output = ::lsp_types::CompletionItem;\n \n     fn conv_with(self, ctx: &LineIndex) -> ::lsp_types::CompletionItem {\n@@ -138,8 +136,7 @@ impl ConvWith for CompletionItem {\n     }\n }\n \n-impl ConvWith for Position {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for Position {\n     type Output = TextUnit;\n \n     fn conv_with(self, line_index: &LineIndex) -> TextUnit {\n@@ -148,8 +145,7 @@ impl ConvWith for Position {\n     }\n }\n \n-impl ConvWith for TextUnit {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for TextUnit {\n     type Output = Position;\n \n     fn conv_with(self, line_index: &LineIndex) -> Position {\n@@ -158,17 +154,15 @@ impl ConvWith for TextUnit {\n     }\n }\n \n-impl ConvWith for TextRange {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for TextRange {\n     type Output = Range;\n \n     fn conv_with(self, line_index: &LineIndex) -> Range {\n         Range::new(self.start().conv_with(line_index), self.end().conv_with(line_index))\n     }\n }\n \n-impl ConvWith for Range {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for Range {\n     type Output = TextRange;\n \n     fn conv_with(self, line_index: &LineIndex) -> TextRange {\n@@ -208,17 +202,15 @@ impl Conv for ra_ide_api::FunctionSignature {\n     }\n }\n \n-impl ConvWith for TextEdit {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for TextEdit {\n     type Output = Vec<lsp_types::TextEdit>;\n \n     fn conv_with(self, line_index: &LineIndex) -> Vec<lsp_types::TextEdit> {\n         self.as_atoms().iter().map_conv_with(line_index).collect()\n     }\n }\n \n-impl ConvWith for &'_ AtomTextEdit {\n-    type Ctx = LineIndex;\n+impl ConvWith<&'_ LineIndex> for &'_ AtomTextEdit {\n     type Output = lsp_types::TextEdit;\n \n     fn conv_with(self, line_index: &LineIndex) -> lsp_types::TextEdit {\n@@ -229,10 +221,10 @@ impl ConvWith for &'_ AtomTextEdit {\n     }\n }\n \n-impl<T: ConvWith> ConvWith for Option<T> {\n-    type Ctx = <T as ConvWith>::Ctx;\n-    type Output = Option<<T as ConvWith>::Output>;\n-    fn conv_with(self, ctx: &Self::Ctx) -> Self::Output {\n+impl<T: ConvWith<CTX>, CTX> ConvWith<CTX> for Option<T> {\n+    type Output = Option<T::Output>;\n+\n+    fn conv_with(self, ctx: CTX) -> Self::Output {\n         self.map(|x| ConvWith::conv_with(x, ctx))\n     }\n }\n@@ -454,35 +446,34 @@ pub fn to_location(\n     Ok(loc)\n }\n \n-pub trait MapConvWith<'a>: Sized + 'a {\n-    type Ctx;\n+pub trait MapConvWith<CTX>: Sized {\n     type Output;\n \n-    fn map_conv_with(self, ctx: &'a Self::Ctx) -> ConvWithIter<'a, Self, Self::Ctx> {\n+    fn map_conv_with(self, ctx: CTX) -> ConvWithIter<Self, CTX> {\n         ConvWithIter { iter: self, ctx }\n     }\n }\n \n-impl<'a, I> MapConvWith<'a> for I\n+impl<CTX, I> MapConvWith<CTX> for I\n where\n-    I: Iterator + 'a,\n-    I::Item: ConvWith,\n+    I: Iterator,\n+    I::Item: ConvWith<CTX>,\n {\n-    type Ctx = <I::Item as ConvWith>::Ctx;\n-    type Output = <I::Item as ConvWith>::Output;\n+    type Output = <I::Item as ConvWith<CTX>>::Output;\n }\n \n-pub struct ConvWithIter<'a, I, Ctx: 'a> {\n+pub struct ConvWithIter<I, CTX> {\n     iter: I,\n-    ctx: &'a Ctx,\n+    ctx: CTX,\n }\n \n-impl<'a, I, Ctx> Iterator for ConvWithIter<'a, I, Ctx>\n+impl<I, CTX> Iterator for ConvWithIter<I, CTX>\n where\n     I: Iterator,\n-    I::Item: ConvWith<Ctx = Ctx>,\n+    I::Item: ConvWith<CTX>,\n+    CTX: Copy,\n {\n-    type Item = <I::Item as ConvWith>::Output;\n+    type Item = <I::Item as ConvWith<CTX>>::Output;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         self.iter.next().map(|item| item.conv_with(self.ctx))"}]}