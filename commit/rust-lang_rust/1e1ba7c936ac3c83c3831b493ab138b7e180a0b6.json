{"sha": "1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWJhN2M5MzZhYzNjODNjMzgzMWI0OTNhYjEzOGI3ZTE4MGEwYjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-17T02:43:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T02:43:55Z"}, "message": "Rollup merge of #79051 - LeSeulArtichaut:if-let-guard, r=matthewjasper\n\nImplement if-let match guards\n\nImplements rust-lang/rfcs#2294 (tracking issue: #51114).\n\nI probably should do a few more things before this can be merged:\n- [x] Add tests (added basic tests, more advanced tests could be done in the future?)\n- [x] Add lint for exhaustive if-let guard (comparable to normal if-let statements)\n- [x] Fix clippy\n\nHowever since this is a nightly feature maybe it's fine to land this and do those steps in follow-up PRs.\n\nThanks a lot `@matthewjasper` :heart: for helping me with lowering to MIR! Would you be interested in reviewing this?\nr? `@ghost` for now", "tree": {"sha": "dc63ed799378996f603eba917358f3cbdc27b42b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc63ed799378996f603eba917358f3cbdc27b42b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2sXsCRBK7hj4Ov3rIwAAdHIIAKKycajeH8Jj6hvG7+XNC0js\n+DRCLfcwxoQgC5EvL7tdELCwV7HTZBfpie61SeVqHfQyLSwNKLnUERD5+f2fRNYZ\n4KIEY4kk8PEk/ZK7zZP4j9lQ1gl95nZ8pZ9YgNwgdSSReYUxUksjOA6/ceq8xYO9\nzHRoNKsPuIIrRvRfOHHY76tfhEOmpYqYNCDS0nLV3IRZi0CWPxkm/4fihEGztoG4\n2TXRy29M6ZmvMUsrXzWqZb5qV9uwdk6EAqwESCYD3Q8eSrKYKVQc1ZfgqxtDhcix\nFMJyX54pJKQ/sWJA/XoDqSXCUx+YhJ5nnSEORPgUyOGbKVY79S4fLYW2jg7N1ao=\n=jv/O\n-----END PGP SIGNATURE-----\n", "payload": "tree dc63ed799378996f603eba917358f3cbdc27b42b\nparent b32e6e6ac8921035177256ab6806e6ab0d4b9b94\nparent 09172603685ba72f1cae4f69b6fff63f2dfcd27f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1608173035 +0900\ncommitter GitHub <noreply@github.com> 1608173035 +0900\n\nRollup merge of #79051 - LeSeulArtichaut:if-let-guard, r=matthewjasper\n\nImplement if-let match guards\n\nImplements rust-lang/rfcs#2294 (tracking issue: #51114).\n\nI probably should do a few more things before this can be merged:\n- [x] Add tests (added basic tests, more advanced tests could be done in the future?)\n- [x] Add lint for exhaustive if-let guard (comparable to normal if-let statements)\n- [x] Fix clippy\n\nHowever since this is a nightly feature maybe it's fine to land this and do those steps in follow-up PRs.\n\nThanks a lot `@matthewjasper` :heart: for helping me with lowering to MIR! Would you be interested in reviewing this?\nr? `@ghost` for now\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "html_url": "https://github.com/rust-lang/rust/commit/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b32e6e6ac8921035177256ab6806e6ab0d4b9b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/b32e6e6ac8921035177256ab6806e6ab0d4b9b94", "html_url": "https://github.com/rust-lang/rust/commit/b32e6e6ac8921035177256ab6806e6ab0d4b9b94"}, {"sha": "09172603685ba72f1cae4f69b6fff63f2dfcd27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/09172603685ba72f1cae4f69b6fff63f2dfcd27f", "html_url": "https://github.com/rust-lang/rust/commit/09172603685ba72f1cae4f69b6fff63f2dfcd27f"}], "stats": {"total": 441, "additions": 360, "deletions": 81}, "files": [{"sha": "9b1642df1140142efa17274342c3e05de8e05734", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -505,14 +505,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {\n+        let pat = self.lower_pat(&arm.pat);\n+        let guard = arm.guard.as_ref().map(|cond| {\n+            if let ExprKind::Let(ref pat, ref scrutinee) = cond.kind {\n+                hir::Guard::IfLet(self.lower_pat(pat), self.lower_expr(scrutinee))\n+            } else {\n+                hir::Guard::If(self.lower_expr(cond))\n+            }\n+        });\n         hir::Arm {\n             hir_id: self.next_id(),\n             attrs: self.lower_attrs(&arm.attrs),\n-            pat: self.lower_pat(&arm.pat),\n-            guard: match arm.guard {\n-                Some(ref x) => Some(hir::Guard::If(self.lower_expr(x))),\n-                _ => None,\n-            },\n+            pat,\n+            guard,\n             body: self.lower_expr(&arm.body),\n             span: arm.span,\n         }"}, {"sha": "2abebbd030387d477d55b460c9d0e2fb7d7eed6d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -1160,6 +1160,7 @@ pub struct Arm<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum Guard<'hir> {\n     If(&'hir Expr<'hir>),\n+    IfLet(&'hir Pat<'hir>, &'hir Expr<'hir>),\n }\n \n #[derive(Debug, HashStable_Generic)]\n@@ -1721,6 +1722,8 @@ pub enum MatchSource {\n     IfDesugar { contains_else_clause: bool },\n     /// An `if let _ = _ { .. }` (optionally with `else { .. }`).\n     IfLetDesugar { contains_else_clause: bool },\n+    /// An `if let _ = _ => { .. }` match guard.\n+    IfLetGuardDesugar,\n     /// A `while _ { .. }` (which was desugared to a `loop { match _ { .. } }`).\n     WhileDesugar,\n     /// A `while let _ = _ { .. }` (which was desugared to a\n@@ -1739,7 +1742,7 @@ impl MatchSource {\n         use MatchSource::*;\n         match self {\n             Normal => \"match\",\n-            IfDesugar { .. } | IfLetDesugar { .. } => \"if\",\n+            IfDesugar { .. } | IfLetDesugar { .. } | IfLetGuardDesugar => \"if\",\n             WhileDesugar | WhileLetDesugar => \"while\",\n             ForLoopDesugar => \"for\",\n             TryDesugar => \"?\","}, {"sha": "03c8b1738853dc02fff2da2b0e555221c29ff124", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -1228,6 +1228,10 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n     if let Some(ref g) = arm.guard {\n         match g {\n             Guard::If(ref e) => visitor.visit_expr(e),\n+            Guard::IfLet(ref pat, ref e) => {\n+                visitor.visit_pat(pat);\n+                visitor.visit_expr(e);\n+            }\n         }\n     }\n     visitor.visit_expr(&arm.body);"}, {"sha": "0b5eb1d82667df5161dfbd462d5948b5ff524dc0", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -2002,6 +2002,15 @@ impl<'a> State<'a> {\n                     self.print_expr(&e);\n                     self.s.space();\n                 }\n+                hir::Guard::IfLet(pat, e) => {\n+                    self.word_nbsp(\"if\");\n+                    self.word_nbsp(\"let\");\n+                    self.print_pat(&pat);\n+                    self.s.space();\n+                    self.word_space(\"=\");\n+                    self.print_expr(&e);\n+                    self.s.space();\n+                }\n             }\n         }\n         self.word_space(\"=>\");"}, {"sha": "2e108d480932a1cce9e4352e7d6b0db65b1a0597", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -228,6 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<&Guard<'tcx>>,\n         fake_borrow_temps: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n+        arm_span: Option<Span>,\n         arm_scope: Option<region::Scope>,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n@@ -239,6 +240,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 guard,\n                 fake_borrow_temps,\n                 scrutinee_span,\n+                arm_span,\n                 true,\n             )\n         } else {\n@@ -274,6 +276,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         guard,\n                         &fake_borrow_temps,\n                         scrutinee_span,\n+                        arm_span,\n                         schedule_drops,\n                     );\n                     if arm_scope.is_none() {\n@@ -436,6 +439,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             &fake_borrow_temps,\n             irrefutable_pat.span,\n             None,\n+            None,\n         )\n         .unit()\n     }\n@@ -817,11 +821,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// For an example of a case where we set `otherwise_block`, even for an\n     /// exhaustive match consider:\n     ///\n+    /// ```rust\n     /// match x {\n     ///     (true, true) => (),\n     ///     (_, false) => (),\n     ///     (false, true) => (),\n     /// }\n+    /// ```\n     ///\n     /// For this match, we check if `x.0` matches `true` (for the first\n     /// arm). If that's false, we check `x.1`. If it's `true` we check if\n@@ -935,11 +941,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Link up matched candidates. For example, if we have something like\n     /// this:\n     ///\n+    /// ```rust\n     /// ...\n     /// Some(x) if cond => ...\n     /// Some(x) => ...\n     /// Some(x) if cond => ...\n     /// ...\n+    /// ```\n     ///\n     /// We generate real edges from:\n     /// * `start_block` to the `prebinding_block` of the first pattern,\n@@ -1517,7 +1525,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Initializes each of the bindings from the candidate by\n     /// moving/copying/ref'ing the source as appropriate. Tests the guard, if\n     /// any, and then branches to the arm. Returns the block for the case where\n-    /// the guard fails.\n+    /// the guard succeeds.\n     ///\n     /// Note: we do not check earlier that if there is a guard,\n     /// there cannot be move bindings. We avoid a use-after-move by only\n@@ -1529,6 +1537,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<&Guard<'tcx>>,\n         fake_borrows: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n+        arm_span: Option<Span>,\n         schedule_drops: bool,\n     ) -> BasicBlock {\n         debug!(\"bind_and_guard_matched_candidate(candidate={:?})\", candidate);\n@@ -1659,15 +1668,42 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n-            // the block to branch to if the guard fails; if there is no\n-            // guard, this block is simply unreachable\n-            let guard = match guard {\n-                Guard::If(e) => self.hir.mirror(e.clone()),\n+            let (guard_span, (post_guard_block, otherwise_post_guard_block)) = match guard {\n+                Guard::If(e) => {\n+                    let e = self.hir.mirror(e.clone());\n+                    let source_info = self.source_info(e.span);\n+                    (e.span, self.test_bool(block, e, source_info))\n+                },\n+                Guard::IfLet(pat, scrutinee) => {\n+                    let scrutinee_span = scrutinee.span();\n+                    let scrutinee_place = unpack!(block = self.lower_scrutinee(block, scrutinee.clone(), scrutinee_span));\n+                    let mut guard_candidate = Candidate::new(scrutinee_place, &pat, false);\n+                    let wildcard = Pat::wildcard_from_ty(pat.ty);\n+                    let mut otherwise_candidate = Candidate::new(scrutinee_place, &wildcard, false);\n+                    let fake_borrow_temps =\n+                        self.lower_match_tree(block, pat.span, false, &mut [&mut guard_candidate, &mut otherwise_candidate]);\n+                    self.declare_bindings(\n+                        None,\n+                        pat.span.to(arm_span.unwrap()),\n+                        pat,\n+                        ArmHasGuard(false),\n+                        Some((Some(&scrutinee_place), scrutinee.span())),\n+                    );\n+                    let post_guard_block = self.bind_pattern(\n+                        self.source_info(pat.span),\n+                        guard_candidate,\n+                        None,\n+                        &fake_borrow_temps,\n+                        scrutinee.span(),\n+                        None,\n+                        None,\n+                    );\n+                    let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n+                    (scrutinee_span, (post_guard_block, otherwise_post_guard_block))\n+                }\n             };\n-            let source_info = self.source_info(guard.span);\n-            let guard_end = self.source_info(tcx.sess.source_map().end_point(guard.span));\n-            let (post_guard_block, otherwise_post_guard_block) =\n-                self.test_bool(block, guard, source_info);\n+            let source_info = self.source_info(guard_span);\n+            let guard_end = self.source_info(tcx.sess.source_map().end_point(guard_span));\n             let guard_frame = self.guard_context.pop().unwrap();\n             debug!(\"Exiting guard building context with locals: {:?}\", guard_frame);\n "}, {"sha": "62d2212d10962e815c09940665d442cef1d2b15f", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -1197,6 +1197,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         arm.guard.as_ref(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n+                        Some(arm.span),\n                         Some(arm.scope),\n                     );\n "}, {"sha": "417f9bded09884901516a4942c34214de12e4db0", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -776,10 +776,10 @@ impl ToBorrowKind for hir::Mutability {\n fn convert_arm<'tcx>(cx: &mut Cx<'_, 'tcx>, arm: &'tcx hir::Arm<'tcx>) -> Arm<'tcx> {\n     Arm {\n         pattern: cx.pattern_from_hir(&arm.pat),\n-        guard: match arm.guard {\n-            Some(hir::Guard::If(ref e)) => Some(Guard::If(e.to_ref())),\n-            _ => None,\n-        },\n+        guard: arm.guard.as_ref().map(|g| match g {\n+            hir::Guard::If(ref e) => Guard::If(e.to_ref()),\n+            hir::Guard::IfLet(ref pat, ref e) => Guard::IfLet(cx.pattern_from_hir(pat), e.to_ref()),\n+        }),\n         body: arm.body.to_ref(),\n         lint_level: LintLevel::Explicit(arm.hir_id),\n         scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },"}, {"sha": "ace9cad4d299673a9672a77a212c92381087fd06", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -344,6 +344,7 @@ crate struct Arm<'tcx> {\n #[derive(Clone, Debug)]\n crate enum Guard<'tcx> {\n     If(ExprRef<'tcx>),\n+    IfLet(Pat<'tcx>, ExprRef<'tcx>),\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "29b7e176b0e1ad076bf76570d8500a52e2576abc", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -164,10 +164,20 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             self.check_patterns(&arm.pat);\n+            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+                self.check_patterns(pat);\n+            }\n         }\n \n         let mut cx = self.new_cx(scrut.hir_id);\n \n+        for arm in arms {\n+            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+                let tpat = self.lower_pattern(&mut cx, pat, &mut false).0;\n+                check_if_let_guard(&mut cx, &tpat, pat.hir_id);\n+            }\n+        }\n+\n         let mut have_errors = false;\n \n         let arms: Vec<_> = arms\n@@ -360,12 +370,28 @@ fn irrefutable_let_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, source: hir::\n         let msg = match source {\n             hir::MatchSource::IfLetDesugar { .. } => \"irrefutable if-let pattern\",\n             hir::MatchSource::WhileLetDesugar => \"irrefutable while-let pattern\",\n+            hir::MatchSource::IfLetGuardDesugar => \"irrefutable if-let guard\",\n             _ => bug!(),\n         };\n         lint.build(msg).emit()\n     });\n }\n \n+fn check_if_let_guard<'p, 'tcx>(\n+    cx: &mut MatchCheckCtxt<'p, 'tcx>,\n+    pat: &'p super::Pat<'tcx>,\n+    pat_id: HirId,\n+) {\n+    let arms = [MatchArm { pat, hir_id: pat_id, has_guard: false }];\n+    let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty);\n+    report_arm_reachability(&cx, &report, hir::MatchSource::IfLetGuardDesugar);\n+\n+    if report.non_exhaustiveness_witnesses.is_empty() {\n+        // The match is exhaustive, i.e. the if let pattern is irrefutable.\n+        irrefutable_let_pattern(cx.tcx, pat.span, pat_id, hir::MatchSource::IfLetGuardDesugar)\n+    }\n+}\n+\n /// Report unreachable arms, if any.\n fn report_arm_reachability<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n@@ -390,6 +416,11 @@ fn report_arm_reachability<'p, 'tcx>(\n                         }\n                     }\n \n+                    hir::MatchSource::IfLetGuardDesugar => {\n+                        assert_eq!(arm_index, 0);\n+                        unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, None);\n+                    }\n+\n                     hir::MatchSource::ForLoopDesugar | hir::MatchSource::Normal => {\n                         unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, catchall);\n                     }"}, {"sha": "2d6bbff460d7fb6ea61eb613b91f2dfc44996957", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -45,6 +45,8 @@ impl NonConstExpr {\n                 return None;\n             }\n \n+            Self::Match(IfLetGuardDesugar) => bug!(\"if-let guard outside a `match` expression\"),\n+\n             // All other expressions are allowed.\n             Self::Loop(Loop | While | WhileLet)\n             | Self::Match("}, {"sha": "86ce35c6d9909df219c04dd705e187d41c02704f", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -360,6 +360,9 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n         self.add_from_pat(&arm.pat);\n+        if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+            self.add_from_pat(pat);\n+        }\n         intravisit::walk_arm(self, arm);\n     }\n \n@@ -866,10 +869,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 for arm in arms {\n                     let body_succ = self.propagate_through_expr(&arm.body, succ);\n \n-                    let guard_succ = self.propagate_through_opt_expr(\n-                        arm.guard.as_ref().map(|hir::Guard::If(e)| *e),\n-                        body_succ,\n-                    );\n+                    let guard_succ = arm.guard.as_ref().map_or(body_succ, |g| match g {\n+                        hir::Guard::If(e) => self.propagate_through_expr(e, body_succ),\n+                        hir::Guard::IfLet(pat, e) => {\n+                            let let_bind = self.define_bindings_in_pat(pat, body_succ);\n+                            self.propagate_through_expr(e, let_bind)\n+                        }\n+                    });\n                     let arm_succ = self.define_bindings_in_pat(&arm.pat, guard_succ);\n                     self.merge_from_succ(ln, arm_succ);\n                 }"}, {"sha": "3106f19cf86f33352145f3e0967f6c5af36009b5", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME(60707): Consider removing hack with principled solution.\n             self.check_expr_has_type_or_error(scrut, self.tcx.types.bool, |_| {})\n         } else {\n-            self.demand_scrutinee_type(arms, scrut)\n+            self.demand_scrutinee_type(scrut, arms_contain_ref_bindings(arms), arms.is_empty())\n         };\n \n         // If there are no arms, that is a diverging match; a special case.\n@@ -98,7 +98,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.diverges.set(Diverges::Maybe);\n                 match g {\n                     hir::Guard::If(e) => {\n-                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n+                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {});\n+                    }\n+                    hir::Guard::IfLet(pat, e) => {\n+                        let scrutinee_ty = self.demand_scrutinee_type(\n+                            e,\n+                            pat.contains_explicit_ref_binding(),\n+                            false,\n+                        );\n+                        self.check_pat_top(&pat, scrutinee_ty, None, true);\n                     }\n                 };\n             }\n@@ -450,8 +458,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn demand_scrutinee_type(\n         &self,\n-        arms: &'tcx [hir::Arm<'tcx>],\n         scrut: &'tcx hir::Expr<'tcx>,\n+        contains_ref_bindings: Option<hir::Mutability>,\n+        no_arms: bool,\n     ) -> Ty<'tcx> {\n         // Not entirely obvious: if matches may create ref bindings, we want to\n         // use the *precise* type of the scrutinee, *not* some supertype, as\n@@ -505,17 +514,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // (once introduced) is populated by the time we get here.\n         //\n         // See #44848.\n-        let contains_ref_bindings = arms\n-            .iter()\n-            .filter_map(|a| a.pat.contains_explicit_ref_binding())\n-            .max_by_key(|m| match *m {\n-                hir::Mutability::Mut => 1,\n-                hir::Mutability::Not => 0,\n-            });\n-\n         if let Some(m) = contains_ref_bindings {\n             self.check_expr_with_needs(scrut, Needs::maybe_mut_place(m))\n-        } else if arms.is_empty() {\n+        } else if no_arms {\n             self.check_expr(scrut)\n         } else {\n             // ...but otherwise we want to use any supertype of the\n@@ -546,3 +547,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn arms_contain_ref_bindings(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n+    arms.iter().filter_map(|a| a.pat.contains_explicit_ref_binding()).max_by_key(|m| match *m {\n+        hir::Mutability::Mut => 1,\n+        hir::Mutability::Not => 0,\n+    })\n+}"}, {"sha": "5bc40d617d044f5991a6235673a96680d80dc84b", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -246,6 +246,10 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 Guard::If(ref e) => {\n                     self.visit_expr(e);\n                 }\n+                Guard::IfLet(ref pat, ref e) => {\n+                    self.visit_pat(pat);\n+                    self.visit_expr(e);\n+                }\n             }\n \n             let mut scope_var_ids ="}, {"sha": "5c10a7c781183e3ad7600e1499b1bebd8bbe016a", "filename": "src/test/ui/generator/yielding-in-match-guards.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -10,6 +10,9 @@\n // Thus, `&'_ u8` should be included in type signature\n // of the underlying generator.\n \n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n async fn f() -> u8 { 1 }\n async fn foo() -> [bool; 10] { [false; 10] }\n \n@@ -36,8 +39,16 @@ async fn i(x: u8) {\n     }\n }\n \n+async fn j(x: u8) {\n+    match x {\n+        y if let (1, 42) = (f().await, y) => (),\n+        _ => (),\n+    }\n+}\n+\n fn main() {\n     let _ = g(10);\n     let _ = h(9);\n     let _ = i(8);\n+    let _ = j(7);\n }"}, {"sha": "4e2d70e3290ec44f0c5c53ff3a52400975b82ce4", "filename": "src/test/ui/rfc-2294-if-let-guard/bindings.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,10 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    match Some(None) {\n+        Some(x) if let Some(y) = x => (x, y),\n+        _ => y, //~ ERROR cannot find value `y`\n+    }\n+    y //~ ERROR cannot find value `y`\n+}"}, {"sha": "9c5d92a33ada725771dd41ba5c11405e0ec44926", "filename": "src/test/ui/rfc-2294-if-let-guard/bindings.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/bindings.rs:7:14\n+   |\n+LL |         _ => y,\n+   |              ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/bindings.rs:9:5\n+   |\n+LL |     y\n+   |     ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "311d1afcfc0eefe90eee7e903470de6ee47b492c", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -6,7 +6,6 @@ fn _if_let_guard() {\n     match () {\n         () if let 0 = 1 => {}\n         //~^ ERROR `if let` guard is not implemented\n-        //~| ERROR `let` expressions are not supported here\n \n         () if (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are experimental"}, {"sha": "1670078e0d38b6f9ce64f03ba003c7c6096893a4", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:81:15\n+  --> $DIR/feature-gate.rs:80:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -17,7 +17,7 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n error[E0658]: `if let` guard is not implemented\n-  --> $DIR/feature-gate.rs:77:12\n+  --> $DIR/feature-gate.rs:76:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:11:16\n+  --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |         () if (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:15:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:19:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:23:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:27:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:31:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:35:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:35:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -116,7 +116,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -125,7 +125,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -152,7 +152,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:72:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n@@ -170,16 +170,7 @@ LL |     use_expr!((let 0 = 1));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:7:15\n-   |\n-LL |         () if let 0 = 1 => {}\n-   |               ^^^^^^^^^\n-   |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n-\n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:11:16\n+  --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -188,7 +179,7 @@ LL |         () if (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:15:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -197,7 +188,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:19:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -206,7 +197,7 @@ LL |         () if true && let 0 = 1 => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:23:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -215,7 +206,7 @@ LL |         () if let 0 = 1 && true => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:27:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -224,7 +215,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:31:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -233,7 +224,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:35:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -242,7 +233,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:35:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -251,7 +242,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -260,7 +251,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -269,7 +260,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -278,7 +269,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -287,7 +278,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -296,7 +287,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -305,7 +296,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -314,14 +305,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:72:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a3663003790f7eeda51368eaddfe0076edf44dc0", "filename": "src/test/ui/rfc-2294-if-let-guard/run-pass.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Qux(u8),\n+}\n+\n+fn bar(x: bool) -> Foo {\n+    if x { Foo::Baz } else { Foo::Bar }\n+}\n+\n+fn baz(x: u8) -> Foo {\n+    if x % 2 == 0 { Foo::Bar } else { Foo::Baz }\n+}\n+\n+fn qux(x: u8) -> Foo {\n+    Foo::Qux(x.rotate_left(1))\n+}\n+\n+fn main() {\n+    match Some((true, 3)) {\n+        Some((x, _)) if let Foo::Bar = bar(x) => panic!(),\n+        Some((_, x)) if let Foo::Baz = baz(x) => {},\n+        _ => panic!(),\n+    }\n+    match Some(42) {\n+        Some(x) if let Foo::Qux(y) = qux(x) => assert_eq!(y, 84),\n+        _ => panic!(),\n+    }\n+}"}, {"sha": "a4fc7f8cf2b263a4fff22f6824af6eab4402b2b6", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,16 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+fn ok() -> Result<Option<bool>, ()> {\n+    Ok(Some(true))\n+}\n+\n+fn main() {\n+    match ok() {\n+        Ok(x) if let Err(_) = x => {},\n+        //~^ ERROR mismatched types\n+        Ok(x) if let 0 = x => {},\n+        //~^ ERROR mismatched types\n+        _ => {}\n+    }\n+}"}, {"sha": "7ce93fe7348fd8d84805d052df99622897775028", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/typeck.rs:10:22\n+   |\n+LL |         Ok(x) if let Err(_) = x => {},\n+   |                      ^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |\n+   = note: expected enum `Option<bool>`\n+              found enum `std::result::Result<_, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/typeck.rs:12:22\n+   |\n+LL |         Ok(x) if let 0 = x => {},\n+   |                      ^ expected enum `Option`, found integer\n+   |\n+   = note: expected enum `Option<bool>`\n+              found type `{integer}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9691a12f45b05f584228a4c56a775d30736b583a", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,22 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+#[deny(irrefutable_let_patterns)]\n+fn irrefutable_let_guard() {\n+    match Some(()) {\n+        Some(x) if let () = x => {}\n+        //~^ ERROR irrefutable if-let guard\n+        _ => {}\n+    }\n+}\n+\n+#[deny(unreachable_patterns)]\n+fn unreachable_pattern() {\n+    match Some(()) {\n+        x if let None | None = x => {}\n+        //~^ ERROR unreachable pattern\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "45720f9fbc5515ae9441b62e001f540be1af48c1", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -0,0 +1,26 @@\n+error: irrefutable if-let guard\n+  --> $DIR/warns.rs:7:24\n+   |\n+LL |         Some(x) if let () = x => {}\n+   |                        ^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warns.rs:4:8\n+   |\n+LL | #[deny(irrefutable_let_patterns)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/warns.rs:16:25\n+   |\n+LL |         x if let None | None = x => {}\n+   |                         ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warns.rs:13:8\n+   |\n+LL | #[deny(unreachable_patterns)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f839659267825b8c1f686f4f0621a3ce9a3d7e2c", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -342,6 +342,10 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n                 if let Some(ref guard) = arm.guard {\n                     match guard {\n                         Guard::If(if_expr) => check_expr(cx, if_expr, bindings),\n+                        Guard::IfLet(guard_pat, guard_expr) => {\n+                            check_pat(cx, guard_pat, Some(*guard_expr), guard_pat.span, bindings);\n+                            check_expr(cx, guard_expr, bindings);\n+                        },\n                     }\n                 }\n                 check_expr(cx, &arm.body, bindings);"}, {"sha": "4249dbb4e65190d65b8674e3f59bf1d8829c9a36", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -372,6 +372,18 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                                 self.current = if_expr_pat;\n                                 self.visit_expr(if_expr);\n                             },\n+                            hir::Guard::IfLet(ref if_let_pat, ref if_let_expr) => {\n+                                let if_let_pat_pat = self.next(\"pat\");\n+                                let if_let_expr_pat = self.next(\"expr\");\n+                                println!(\n+                                    \"    if let Guard::IfLet(ref {}, ref {}) = {};\",\n+                                    if_let_pat_pat, if_let_expr_pat, guard_pat\n+                                );\n+                                self.current = if_let_expr_pat;\n+                                self.visit_expr(if_let_expr);\n+                                self.current = if_let_pat_pat;\n+                                self.visit_pat(if_let_pat);\n+                            },\n                         }\n                     }\n                     self.current = format!(\"{}[{}].pat\", arms_pat, i);\n@@ -730,6 +742,7 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n             \"MatchSource::IfLetDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause\n         ),\n+        hir::MatchSource::IfLetGuardDesugar => \"MatchSource::IfLetGuardDesugar\".to_string(),\n         hir::MatchSource::IfDesugar { contains_else_clause } => format!(\n             \"MatchSource::IfDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause"}, {"sha": "a8fbb2ffaf0b40558babcbe096c291ff78966b11", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -169,6 +169,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     fn eq_guard(&mut self, left: &Guard<'_>, right: &Guard<'_>) -> bool {\n         match (left, right) {\n             (Guard::If(l), Guard::If(r)) => self.eq_expr(l, r),\n+            (Guard::IfLet(lp, le), Guard::IfLet(rp, re)) => self.eq_pat(lp, rp) && self.eq_expr(le, re),\n+            _ => false,\n         }\n     }\n \n@@ -669,7 +671,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_guard(&mut self, g: &Guard<'_>) {\n         match g {\n-            Guard::If(ref expr) => {\n+            Guard::If(ref expr) | Guard::IfLet(_, ref expr) => {\n                 self.hash_expr(expr);\n             },\n         }"}, {"sha": "5d946e4bd495d9abbb6e1fcdf439c3b4187dba07", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1ba7c936ac3c83c3831b493ab138b7e180a0b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=1e1ba7c936ac3c83c3831b493ab138b7e180a0b6", "patch": "@@ -560,5 +560,10 @@ fn print_guard(cx: &LateContext<'_>, guard: &hir::Guard<'_>, indent: usize) {\n             println!(\"{}If\", ind);\n             print_expr(cx, expr, indent + 1);\n         },\n+        hir::Guard::IfLet(pat, expr) => {\n+            println!(\"{}IfLet\", ind);\n+            print_pat(cx, pat, indent + 1);\n+            print_expr(cx, expr, indent + 1);\n+        },\n     }\n }"}]}