{"sha": "41943f2328b6f1551e46effdd7bc5c9510b6b429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTQzZjIzMjhiNmYxNTUxZTQ2ZWZmZGQ3YmM1Yzk1MTBiNmI0Mjk=", "commit": {"author": {"name": "Alexander Gonzalez", "email": "alexfertel97@gmail.com", "date": "2021-07-27T21:50:26Z"}, "committer": {"name": "Alexander Gonzalez", "email": "alexfertel97@gmail.com", "date": "2021-07-27T22:31:21Z"}, "message": "refactor: Apply PR suggestions", "tree": {"sha": "f9462dfcedb4389d9c9d6e1ff373d7947115392c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9462dfcedb4389d9c9d6e1ff373d7947115392c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41943f2328b6f1551e46effdd7bc5c9510b6b429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41943f2328b6f1551e46effdd7bc5c9510b6b429", "html_url": "https://github.com/rust-lang/rust/commit/41943f2328b6f1551e46effdd7bc5c9510b6b429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41943f2328b6f1551e46effdd7bc5c9510b6b429/comments", "author": {"login": "alexfertel", "id": 22298999, "node_id": "MDQ6VXNlcjIyMjk4OTk5", "avatar_url": "https://avatars.githubusercontent.com/u/22298999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexfertel", "html_url": "https://github.com/alexfertel", "followers_url": "https://api.github.com/users/alexfertel/followers", "following_url": "https://api.github.com/users/alexfertel/following{/other_user}", "gists_url": "https://api.github.com/users/alexfertel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexfertel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexfertel/subscriptions", "organizations_url": "https://api.github.com/users/alexfertel/orgs", "repos_url": "https://api.github.com/users/alexfertel/repos", "events_url": "https://api.github.com/users/alexfertel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexfertel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexfertel", "id": 22298999, "node_id": "MDQ6VXNlcjIyMjk4OTk5", "avatar_url": "https://avatars.githubusercontent.com/u/22298999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexfertel", "html_url": "https://github.com/alexfertel", "followers_url": "https://api.github.com/users/alexfertel/followers", "following_url": "https://api.github.com/users/alexfertel/following{/other_user}", "gists_url": "https://api.github.com/users/alexfertel/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexfertel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexfertel/subscriptions", "organizations_url": "https://api.github.com/users/alexfertel/orgs", "repos_url": "https://api.github.com/users/alexfertel/repos", "events_url": "https://api.github.com/users/alexfertel/events{/privacy}", "received_events_url": "https://api.github.com/users/alexfertel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "743c037a3441bb642d88b7e728a4e4d719dd30d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/743c037a3441bb642d88b7e728a4e4d719dd30d3", "html_url": "https://github.com/rust-lang/rust/commit/743c037a3441bb642d88b7e728a4e4d719dd30d3"}], "stats": {"total": 119, "additions": 49, "deletions": 70}, "files": [{"sha": "56ea1951c0d6533d18a958d4dba0ebaee8efe7db", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/41943f2328b6f1551e46effdd7bc5c9510b6b429/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41943f2328b6f1551e46effdd7bc5c9510b6b429/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=41943f2328b6f1551e46effdd7bc5c9510b6b429", "patch": "@@ -71,19 +71,41 @@ pub struct HoverResult {\n     pub actions: Vec<HoverAction>,\n }\n \n-/// Feature: Hover\n-///\n-/// Shows additional information, like the type of an expression or the documentation for a definition when \"focusing\" code.\n-/// Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n-///\n-/// image::https://user-images.githubusercontent.com/48062697/113020658-b5f98b80-917a-11eb-9f88-3dbc27320c95.gif\n+// Feature: Hover\n+//\n+// Shows additional information, like the type of an expression or the documentation for a definition when \"focusing\" code.\n+// Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n+//\n+// image::https://user-images.githubusercontent.com/48062697/113020658-b5f98b80-917a-11eb-9f88-3dbc27320c95.gif\n pub(crate) fn hover(\n     db: &RootDatabase,\n-    position: FilePosition,\n+    range: FileRange,\n     config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n     let sema = hir::Semantics::new(db);\n-    let file = sema.parse(position.file_id).syntax().clone();\n+    let file = sema.parse(range.file_id).syntax().clone();\n+\n+    // This means we're hovering over a range.\n+    if !range.range.is_empty() {\n+        let expr = find_node_at_range::<ast::Expr>(&file, range.range)?;\n+        let ty = sema.type_of_expr(&expr)?;\n+\n+        if ty.is_unknown() {\n+            return None;\n+        }\n+\n+        let mut res = HoverResult::default();\n+\n+        res.markup = if config.markdown() {\n+            Markup::fenced_block(&ty.display(db))\n+        } else {\n+            ty.display(db).to_string().into()\n+        };\n+\n+        return Some(RangeInfo::new(range.range, res));\n+    }\n+\n+    let position = FilePosition { file_id: range.file_id, offset: range.range.start() };\n     let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n         IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n         T!['('] | T![')'] => 2,\n@@ -197,6 +219,7 @@ pub(crate) fn hover(\n     } else {\n         ty.display(db).to_string().into()\n     };\n+\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n@@ -245,37 +268,6 @@ fn try_hover_for_lint(attr: &ast::Attr, token: &SyntaxToken) -> Option<RangeInfo\n     ))\n }\n \n-/// LSP Extension: Hover over a range\n-///\n-/// Gets the type of the expression closest to the selection if the user is hovering inside\n-/// the selection. If not, it is handled by `handle_hover`.\n-///\n-/// https://user-images.githubusercontent.com/22298999/126914293-0ce49a92-545d-4005-a59e-9294fa2330d6.gif\n-pub(crate) fn hover_range(\n-    db: &RootDatabase,\n-    range: FileRange,\n-    config: &HoverConfig,\n-) -> Option<RangeInfo<HoverResult>> {\n-    let sema = hir::Semantics::new(db);\n-    let file = sema.parse(range.file_id).syntax().clone();\n-    let expr = find_node_at_range::<ast::Expr>(&file, range.range)?;\n-    let ty = sema.type_of_expr(&expr)?;\n-\n-    if ty.is_unknown() {\n-        return None;\n-    }\n-\n-    let mut res = HoverResult::default();\n-\n-    res.markup = if config.markdown() {\n-        Markup::fenced_block(&ty.display(db))\n-    } else {\n-        ty.display(db).to_string().into()\n-    };\n-\n-    Some(RangeInfo::new(range.range, res))\n-}\n-\n fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     fn to_action(nav_target: NavigationTarget) -> HoverAction {\n         HoverAction::Implementation(FilePosition {\n@@ -565,7 +557,8 @@ fn find_std_module(famous_defs: &FamousDefs, name: &str) -> Option<hir::Module>\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n-    use ide_db::base_db::FileLoader;\n+    use ide_db::base_db::{FileLoader, FileRange};\n+    use syntax::TextRange;\n \n     use crate::{fixture, hover::HoverDocFormat, HoverConfig};\n \n@@ -577,7 +570,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap();\n         assert!(hover.is_none());\n@@ -591,7 +584,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -611,7 +604,7 @@ mod tests {\n                     links_in_hover: false,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -631,7 +624,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::PlainText),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -651,7 +644,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -661,7 +654,7 @@ mod tests {\n     fn check_hover_range(ra_fixture: &str, expect: Expect) {\n         let (analysis, range) = fixture::range(ra_fixture);\n         let hover = analysis\n-            .hover_range(\n+            .hover(\n                 &HoverConfig {\n                     links_in_hover: false,\n                     documentation: Some(HoverDocFormat::Markdown),\n@@ -676,7 +669,7 @@ mod tests {\n     fn check_hover_range_no_results(ra_fixture: &str) {\n         let (analysis, range) = fixture::range(ra_fixture);\n         let hover = analysis\n-            .hover_range(\n+            .hover(\n                 &HoverConfig {\n                     links_in_hover: false,\n                     documentation: Some(HoverDocFormat::Markdown),"}, {"sha": "d717c46057f1480334effae5d370fead06b8e853", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41943f2328b6f1551e46effdd7bc5c9510b6b429/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41943f2328b6f1551e46effdd7bc5c9510b6b429/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=41943f2328b6f1551e46effdd7bc5c9510b6b429", "patch": "@@ -416,20 +416,11 @@ impl Analysis {\n \n     /// Returns a short text describing element at position.\n     pub fn hover(\n-        &self,\n-        config: &HoverConfig,\n-        position: FilePosition,\n-    ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position, config))\n-    }\n-\n-    /// Returns a short text displaying the type of the expression.\n-    pub fn hover_range(\n         &self,\n         config: &HoverConfig,\n         range: FileRange,\n     ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover_range(db, range, config))\n+        self.with_db(|db| hover::hover(db, range, config))\n     }\n \n     /// Return URL(s) for the documentation of the symbol under the cursor."}, {"sha": "4844b16c1a75b30299eb59eed3bf5f6e83e06020", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/41943f2328b6f1551e46effdd7bc5c9510b6b429/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41943f2328b6f1551e46effdd7bc5c9510b6b429/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=41943f2328b6f1551e46effdd7bc5c9510b6b429", "patch": "@@ -874,21 +874,14 @@ pub(crate) fn handle_hover(\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let hover_result = match params.position {\n-        PositionOrRange::Position(position) => {\n-            let position = from_proto::file_position(\n-                &snap,\n-                lsp_types::TextDocumentPositionParams::new(params.text_document, position),\n-            )?;\n-            snap.analysis.hover(&snap.config.hover(), position)?\n-        }\n-        PositionOrRange::Range(range) => {\n-            let range = from_proto::file_range(&snap, params.text_document, range)?;\n-            snap.analysis.hover_range(&snap.config.hover(), range)?\n-        }\n+\n+    let range = match params.position {\n+        PositionOrRange::Position(position) => Range::new(position, position),\n+        PositionOrRange::Range(range) => range,\n     };\n \n-    let info = match hover_result {\n+    let file_range = from_proto::file_range(&snap, params.text_document, range)?;\n+    let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n         None => return Ok(None),\n         Some(info) => info,\n     };"}, {"sha": "e617153a6c7821c982388ac68ff7ae4f3da7da40", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41943f2328b6f1551e46effdd7bc5c9510b6b429/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/41943f2328b6f1551e46effdd7bc5c9510b6b429/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=41943f2328b6f1551e46effdd7bc5c9510b6b429", "patch": "@@ -662,6 +662,8 @@ interface TestInfo {\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/377\n \n+**Experimental Server Capability:** { \"hoverRange\": boolean }\n+\n This request build upon the current `textDocument/hover` to show the type of the expression currently selected.\n \n ```typescript"}]}