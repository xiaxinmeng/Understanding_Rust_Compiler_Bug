{"sha": "ea4708c444509449b86c50b7b1b23f9ff5af4e97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDcwOGM0NDQ1MDk0NDliODZjNTBiN2IxYjIzZjlmZjVhZjRlOTc=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T02:50:50Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:51Z"}, "message": "Mark HasSource::source_old as deprecated but allow at all call sites", "tree": {"sha": "2c5c5c17589f0457ba9e63b4370eb9c6951b1d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c5c5c17589f0457ba9e63b4370eb9c6951b1d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea4708c444509449b86c50b7b1b23f9ff5af4e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4708c444509449b86c50b7b1b23f9ff5af4e97", "html_url": "https://github.com/rust-lang/rust/commit/ea4708c444509449b86c50b7b1b23f9ff5af4e97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea4708c444509449b86c50b7b1b23f9ff5af4e97/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9", "html_url": "https://github.com/rust-lang/rust/commit/2de2b1eca3c3a3a74c0374f4de0b0c3ff25e66a9"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "d17c82e18a5316d3fa6039ed602403fbfe3bb134", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -196,6 +196,7 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::Variant) -> Optio\n     let path = mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n+    #[allow(deprecated)]\n     let pat: ast::Pat = match var.source_old(db).value.kind() {\n         ast::StructKind::Tuple(field_list) => {\n             let pats = iter::repeat(make::wildcard_pat().into()).take(field_list.fields().count());"}, {"sha": "7d440d4206bdd5fbab0f4422e8c043aea453369c", "filename": "crates/assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -97,6 +97,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let parent_name = parent.name(ctx.db());\n     let target_module = parent.module(ctx.db());\n \n+    #[allow(deprecated)]\n     let in_file_source = record_field_def.source_old(ctx.db());\n     let (offset, current_visibility, target) = match in_file_source.value {\n         hir::FieldSource::Named(it) => {\n@@ -150,6 +151,7 @@ fn target_data_for_def(\n         S: HasSource<Ast = Ast>,\n         Ast: AstNode + ast::VisibilityOwner,\n     {\n+        #[allow(deprecated)]\n         let source = x.source_old(db);\n         let in_file_syntax = source.syntax();\n         let file_id = in_file_syntax.file_id;"}, {"sha": "d15e5a24bec7cc20789b9c37e1b0396818941929", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -98,10 +98,13 @@ pub fn filter_assoc_items(\n \n     items\n         .iter()\n-        .map(|i| match i {\n-            hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source_old(db).value),\n-            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source_old(db).value),\n-            hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source_old(db).value),\n+        .map(|i| {\n+            #[allow(deprecated)]\n+            match i {\n+                hir::AssocItem::Function(i) => ast::AssocItem::Fn(i.source_old(db).value),\n+                hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAlias(i.source_old(db).value),\n+                hir::AssocItem::Const(i) => ast::AssocItem::Const(i.source_old(db).value),\n+            }\n         })\n         .filter(has_def_name)\n         .filter(|it| match it {"}, {"sha": "43b3d939f39869cf52adcc6a8322181b06c1067e", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -156,6 +156,7 @@ fn add_function_impl(\n     };\n     let range = TextRange::new(fn_def_node.text_range().start(), ctx.source_range().end());\n \n+    #[allow(deprecated)]\n     let function_decl = function_declaration(&func.source_old(ctx.db).value);\n     match ctx.config.snippet_cap {\n         Some(cap) => {\n@@ -200,6 +201,7 @@ fn add_const_impl(\n     let const_name = const_.name(ctx.db).map(|n| n.to_string());\n \n     if let Some(const_name) = const_name {\n+        #[allow(deprecated)]\n         let snippet = make_const_compl_syntax(&const_.source_old(ctx.db).value);\n \n         let range = TextRange::new(const_def_node.text_range().start(), ctx.source_range().end());"}, {"sha": "648a1afc51c20ae9afd09088ea344f3524c6e82e", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -27,6 +27,7 @@ struct ConstRender<'a> {\n \n impl<'a> ConstRender<'a> {\n     fn new(ctx: RenderContext<'a>, const_: hir::Const) -> ConstRender<'a> {\n+        #[allow(deprecated)]\n         let ast_node = const_.source_old(ctx.db()).value;\n         ConstRender { ctx, const_, ast_node }\n     }"}, {"sha": "4c8996204017f58096dc7c37658ab00d6c062a4b", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -34,6 +34,7 @@ impl<'a> FunctionRender<'a> {\n         fn_: hir::Function,\n     ) -> FunctionRender<'a> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()).to_string());\n+        #[allow(deprecated)]\n         let ast_node = fn_.source_old(ctx.db()).value;\n \n         FunctionRender { ctx, name, func: fn_, ast_node }"}, {"sha": "95408ff9af206aefc13d2aa1c7148b452d2d26e7", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -96,6 +96,7 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn detail(&self) -> String {\n+        #[allow(deprecated)]\n         let ast_node = self.macro_.source_old(self.ctx.db()).value;\n         macro_label(&ast_node)\n     }"}, {"sha": "276090015e3337df18e0ecb79157b0789e7ba320", "filename": "crates/completion/src/render/type_alias.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -27,6 +27,7 @@ struct TypeAliasRender<'a> {\n \n impl<'a> TypeAliasRender<'a> {\n     fn new(ctx: RenderContext<'a>, type_alias: hir::TypeAlias) -> TypeAliasRender<'a> {\n+        #[allow(deprecated)]\n         let ast_node = type_alias.source_old(ctx.db()).value;\n         TypeAliasRender { ctx, type_alias, ast_node }\n     }"}, {"sha": "285905e96c38a9636644d644d7f6a02d9f201135", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -989,6 +989,7 @@ impl MacroDef {\n         if self.is_proc_macro() {\n             return None;\n         }\n+        #[allow(deprecated)]\n         self.source_old(db).value.name().map(|it| it.as_name())\n     }\n \n@@ -1378,6 +1379,7 @@ impl Impl {\n     }\n \n     pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n         let item = src.file_id.is_builtin_derive(db.upcast())?;\n         let hygenic = hir_expand::hygiene::Hygiene::new(db.upcast(), item.file_id);"}, {"sha": "8a7306def8826f634f53003514246f4fd5baa8af", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -16,6 +16,7 @@ use crate::{\n \n pub trait HasSource {\n     type Ast;\n+    #[deprecated = \"migrating to source() method that returns an Option\"]\n     fn source_old(self, db: &dyn HirDatabase) -> InFile<Self::Ast>;\n     fn source(self, db: &dyn HirDatabase) -> Option<InFile<Self::Ast>>;\n }"}, {"sha": "0b5e0a4c174de24878f436efb16d17089c55418a", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -156,19 +156,22 @@ fn missing_record_expr_field_fix(\n     let record_fields = match VariantDef::from(def_id) {\n         VariantDef::Struct(s) => {\n             module = s.module(sema.db);\n+            #[allow(deprecated)]\n             let source = s.source_old(sema.db);\n             def_file_id = source.file_id;\n             let fields = source.value.field_list()?;\n             record_field_list(fields)?\n         }\n         VariantDef::Union(u) => {\n             module = u.module(sema.db);\n+            #[allow(deprecated)]\n             let source = u.source_old(sema.db);\n             def_file_id = source.file_id;\n             source.value.record_field_list()?\n         }\n         VariantDef::Variant(e) => {\n             module = e.module(sema.db);\n+            #[allow(deprecated)]\n             let source = e.source_old(sema.db);\n             def_file_id = source.file_id;\n             let fields = source.value.field_list()?;"}, {"sha": "efa0418adaae148d17db12c4d120086855d89880", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -285,6 +285,7 @@ where\n     D::Ast: ast::NameOwner + ShortLabel,\n {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n         let mut res = NavigationTarget::from_named(\n             db,\n@@ -314,6 +315,7 @@ impl ToNav for hir::Module {\n \n impl ToNav for hir::Impl {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n         let derive_attr = self.is_builtin_derive(db);\n         let frange = if let Some(item) = &derive_attr {\n@@ -339,6 +341,7 @@ impl ToNav for hir::Impl {\n \n impl ToNav for hir::Field {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n \n         match &src.value {\n@@ -365,6 +368,7 @@ impl ToNav for hir::Field {\n \n impl ToNav for hir::MacroDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n         log::debug!(\"nav target {:#?}\", src.value.syntax());\n         let mut res = NavigationTarget::from_named(\n@@ -448,6 +452,7 @@ impl ToNav for hir::Label {\n \n impl ToNav for hir::TypeParam {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n         let full_range = match &src.value {\n             Either::Left(it) => it.syntax().text_range(),\n@@ -472,6 +477,7 @@ impl ToNav for hir::TypeParam {\n \n impl ToNav for hir::LifetimeParam {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        #[allow(deprecated)]\n         let src = self.source_old(db);\n         let full_range = src.value.syntax().text_range();\n         NavigationTarget {"}, {"sha": "c192e3ed7f688e88a3f9c113458a0280f9578c46", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -206,6 +206,7 @@ fn runnable_action(\n                 _ => None,\n             },\n             ModuleDef::Function(it) => {\n+                #[allow(deprecated)]\n                 let src = it.source_old(sema.db);\n                 if src.file_id != file_id.into() {\n                     mark::hit!(hover_macro_generated_struct_fn_doc_comment);\n@@ -332,10 +333,12 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             if it.is_proc_macro() {\n                 return None;\n             }\n+            #[allow(deprecated)]\n             let label = macro_label(&it.source_old(db).value);\n             from_def_source_labeled(db, it, Some(label), mod_path)\n         }\n         Definition::Field(def) => {\n+            #[allow(deprecated)]\n             let src = def.source_old(db).value;\n             if let FieldSource::Named(it) = src {\n                 from_def_source_labeled(db, def, it.short_label(), mod_path)\n@@ -385,6 +388,7 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n         D: HasSource<Ast = A> + HasAttrs + Copy,\n         A: ShortLabel,\n     {\n+        #[allow(deprecated)]\n         let short_label = def.source_old(db).value.short_label();\n         from_def_source_labeled(db, def, short_label, mod_path)\n     }"}, {"sha": "e69f9d1410f79a5948dbbb1fdde4fea3c74ddccc", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -120,6 +120,7 @@ impl Definition {\n         let file_id = module_src.file_id.original_file(db);\n \n         if let Definition::Local(var) = self {\n+            #[allow(deprecated)]\n             let range = match var.parent(db) {\n                 DefWithBody::Function(f) => f.source_old(db).value.syntax().text_range(),\n                 DefWithBody::Const(c) => c.source_old(db).value.syntax().text_range(),\n@@ -131,6 +132,7 @@ impl Definition {\n         }\n \n         if let Definition::LifetimeParam(param) = self {\n+            #[allow(deprecated)]\n             let range = match param.parent(db) {\n                 hir::GenericDef::Function(it) => it.source_old(db).value.syntax().text_range(),\n                 hir::GenericDef::Adt(it) => match it {"}, {"sha": "bfc7d7b5a67d526963b8c82579aa9e18b4822aca", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea4708c444509449b86c50b7b1b23f9ff5af4e97/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=ea4708c444509449b86c50b7b1b23f9ff5af4e97", "patch": "@@ -161,6 +161,7 @@ impl AnalysisStatsCmd {\n             }\n             let mut msg = format!(\"processing: {}\", full_name);\n             if verbosity.is_verbose() {\n+                #[allow(deprecated)]\n                 let src = f.source_old(db);\n                 let original_file = src.file_id.original_file(db);\n                 let path = vfs.file_path(original_file);"}]}