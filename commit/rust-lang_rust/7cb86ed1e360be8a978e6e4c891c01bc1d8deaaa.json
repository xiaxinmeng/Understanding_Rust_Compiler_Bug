{"sha": "7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYjg2ZWQxZTM2MGJlOGE5NzhlNmU0Yzg5MWMwMWJjMWQ4ZGVhYWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T00:56:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:49:24Z"}, "message": "change to `crate` privacy instead of `pub(super)`", "tree": {"sha": "91d3b5770c8e7b30f80a4b7cd175aaee4daa9f89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d3b5770c8e7b30f80a4b7cd175aaee4daa9f89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa", "html_url": "https://github.com/rust-lang/rust/commit/7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21592cdecd527b329cf4e135609433fc23e6ef84", "url": "https://api.github.com/repos/rust-lang/rust/commits/21592cdecd527b329cf4e135609433fc23e6ef84", "html_url": "https://github.com/rust-lang/rust/commit/21592cdecd527b329cf4e135609433fc23e6ef84"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "da8d17767af61ca60a2581705d13f48181a77778", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs?ref=7cb86ed1e360be8a978e6e4c891c01bc1d8deaaa", "patch": "@@ -22,7 +22,7 @@ use std::fmt;\n use std::rc::Rc;\n use syntax::codemap::DUMMY_SP;\n \n-pub(super) trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n+crate trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     type Output;\n \n     /// Micro-optimization: returns `Ok(x)` if we can trivially\n@@ -91,7 +91,7 @@ pub(super) trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     }\n }\n \n-pub(super) struct CustomTypeOp<F, G> {\n+crate struct CustomTypeOp<F, G> {\n     closure: F,\n     description: G,\n }\n@@ -135,14 +135,14 @@ where\n }\n \n #[derive(Debug)]\n-pub(super) struct Subtype<'tcx> {\n+crate struct Subtype<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     sub: Ty<'tcx>,\n     sup: Ty<'tcx>,\n }\n \n impl<'tcx> Subtype<'tcx> {\n-    pub(super) fn new(param_env: ParamEnv<'tcx>, sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n+    crate fn new(param_env: ParamEnv<'tcx>, sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n         Self {\n             param_env,\n             sub,\n@@ -170,14 +170,14 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n }\n \n #[derive(Debug)]\n-pub(super) struct Eq<'tcx> {\n+crate struct Eq<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n }\n \n impl<'tcx> Eq<'tcx> {\n-    pub(super) fn new(param_env: ParamEnv<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n+    crate fn new(param_env: ParamEnv<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n         Self { param_env, a, b }\n     }\n }\n@@ -201,12 +201,12 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n }\n \n #[derive(Debug)]\n-pub(super) struct ProvePredicates<'tcx> {\n+crate struct ProvePredicates<'tcx> {\n     obligations: Vec<PredicateObligation<'tcx>>,\n }\n \n impl<'tcx> ProvePredicates<'tcx> {\n-    pub(super) fn new(\n+    crate fn new(\n         param_env: ParamEnv<'tcx>,\n         predicates: impl IntoIterator<Item = Predicate<'tcx>>,\n     ) -> Self {\n@@ -239,7 +239,7 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n }\n \n #[derive(Debug)]\n-pub(super) struct Normalize<'tcx, T> {\n+crate struct Normalize<'tcx, T> {\n     param_env: ParamEnv<'tcx>,\n     value: T,\n }\n@@ -248,7 +248,7 @@ impl<'tcx, T> Normalize<'tcx, T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx>,\n {\n-    pub(super) fn new(param_env: ParamEnv<'tcx>, value: T) -> Self {\n+    crate fn new(param_env: ParamEnv<'tcx>, value: T) -> Self {\n         Self { param_env, value }\n     }\n }\n@@ -279,13 +279,13 @@ where\n }\n \n #[derive(Debug)]\n-pub(super) struct DropckOutlives<'tcx> {\n+crate struct DropckOutlives<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     dropped_ty: Ty<'tcx>,\n }\n \n impl<'tcx> DropckOutlives<'tcx> {\n-    pub(super) fn new(param_env: ParamEnv<'tcx>, dropped_ty: Ty<'tcx>) -> Self {\n+    crate fn new(param_env: ParamEnv<'tcx>, dropped_ty: Ty<'tcx>) -> Self {\n         DropckOutlives {\n             param_env,\n             dropped_ty,"}]}