{"sha": "a9d84ab28a3e234d69c5bb7068d60d3f16c126fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDg0YWIyOGEzZTIzNGQ2OWM1YmI3MDY4ZDYwZDNmMTZjMTI2ZmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-05T21:34:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-05T21:40:33Z"}, "message": "Make type unification failures non-fatal\n\nAdd a failure checkpoint after the typechecking pass. There are still many\nfatal errors in typeck, but loosening up this one makes it easier to lean on\nthe compiler when making changes to types.\n\nIssue #440.", "tree": {"sha": "6c52c240cb3a4d7fe50d085e9d538f7e61c61b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c52c240cb3a4d7fe50d085e9d538f7e61c61b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d84ab28a3e234d69c5bb7068d60d3f16c126fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d84ab28a3e234d69c5bb7068d60d3f16c126fd", "html_url": "https://github.com/rust-lang/rust/commit/a9d84ab28a3e234d69c5bb7068d60d3f16c126fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d84ab28a3e234d69c5bb7068d60d3f16c126fd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291df4d73287b80764a5d42e71ab7fec31e3f3c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/291df4d73287b80764a5d42e71ab7fec31e3f3c3", "html_url": "https://github.com/rust-lang/rust/commit/291df4d73287b80764a5d42e71ab7fec31e3f3c3"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "330c1fd3884e959f4403aa85f7b98db66c6c681b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a9d84ab28a3e234d69c5bb7068d60d3f16c126fd/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d84ab28a3e234d69c5bb7068d60d3f16c126fd/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=a9d84ab28a3e234d69c5bb7068d60d3f16c126fd", "patch": "@@ -942,29 +942,36 @@ mod demand {\n             ty_param_subst_var_ids += [ty::ty_var_id(fcx.ccx.tcx, t_0)];\n             simple(fcx, sp, ty_param_subst, t_0);\n         }\n+\n+        fn mk_result(&@fn_ctxt fcx, &ty::t result_ty,\n+                     &vec[int] ty_param_subst_var_ids,\n+                     uint implicit_boxes) -> ty_param_substs_and_ty {\n+            let vec[ty::t] result_ty_param_substs = [];\n+            for (int var_id in ty_param_subst_var_ids) {\n+                auto tp_subst = ty::mk_var(fcx.ccx.tcx, var_id);\n+                result_ty_param_substs += [tp_subst];\n+            }\n+            ret tup(result_ty_param_substs,\n+                    add_boxes(fcx.ccx, implicit_boxes, result_ty));\n+        }\n+\n         alt (unify::simple(fcx, expected_1, actual_1)) {\n             case (ures_ok(?t)) {\n-                let vec[ty::t] result_ty_param_substs = [];\n-                for (int var_id in ty_param_subst_var_ids) {\n-                    auto tp_subst = ty::mk_var(fcx.ccx.tcx, var_id);\n-                    result_ty_param_substs += [tp_subst];\n-                }\n-                ret tup(result_ty_param_substs,\n-                        add_boxes(fcx.ccx, implicit_boxes, t));\n+                ret mk_result(fcx, t, ty_param_subst_var_ids,\n+                              implicit_boxes);\n             }\n             case (ures_err(?err)) {\n                 auto e_err = resolve_type_vars_if_possible(fcx, expected_1);\n                 auto a_err = resolve_type_vars_if_possible(fcx, actual_1);\n-                fcx.ccx.tcx.sess.span_fatal(sp,\n+                fcx.ccx.tcx.sess.span_err(sp,\n                                           \"mismatched types: expected \" +\n-                                              ty_to_str(fcx.ccx.tcx, e_err) +\n-                                              \" but found \" +\n-                                              ty_to_str(fcx.ccx.tcx, a_err) +\n-                                              \" (\" + ty::type_err_to_str(err)\n-                                              + \")\");\n-                // TODO: In the future, try returning \"expected\", reporting\n-                // the error, and continue.\n-\n+                                          ty_to_str(fcx.ccx.tcx, e_err) +\n+                                          \" but found \" +\n+                                          ty_to_str(fcx.ccx.tcx, a_err) +\n+                                          \" (\" + ty::type_err_to_str(err)\n+                                          + \")\");\n+                ret mk_result(fcx, expected_1,\n+                              ty_param_subst_var_ids, implicit_boxes);\n             }\n         }\n     }\n@@ -2502,6 +2509,7 @@ fn check_crate(&ty::ctxt tcx, &@ast::crate crate) {\n         rec(visit_item_pre=bind check_item(ccx, _)\n             with walk::default_visitor());\n     walk::walk_crate(visit, *crate);\n+    tcx.sess.abort_if_errors();\n }\n //\n // Local Variables:"}]}