{"sha": "42aed6bde2fb05a262e21334656cdf91f51744dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYWVkNmJkZTJmYjA1YTI2MmUyMTMzNDY1NmNkZjkxZjUxNzQ0ZGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-28T03:44:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-28T15:35:41Z"}, "message": "std: Remove format_strbuf!()\n\nThis was only ever a transitionary macro.", "tree": {"sha": "0b7c43f70001fe714a13f95df7e2807a8fdfb85b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b7c43f70001fe714a13f95df7e2807a8fdfb85b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42aed6bde2fb05a262e21334656cdf91f51744dd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42aed6bde2fb05a262e21334656cdf91f51744dd", "html_url": "https://github.com/rust-lang/rust/commit/42aed6bde2fb05a262e21334656cdf91f51744dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42aed6bde2fb05a262e21334656cdf91f51744dd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24b1ce1daf9dbf66d04116d0549a48a7610bc614", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b1ce1daf9dbf66d04116d0549a48a7610bc614", "html_url": "https://github.com/rust-lang/rust/commit/24b1ce1daf9dbf66d04116d0549a48a7610bc614"}], "stats": {"total": 1685, "additions": 754, "deletions": 931}, "files": [{"sha": "8fcad94ee1cfc7cff997f61b143426c9c50b7105", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -188,41 +188,41 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n \n pub fn log_config(config: &Config) {\n     let c = config;\n-    logv(c, format_strbuf!(\"configuration:\"));\n-    logv(c, format_strbuf!(\"compile_lib_path: {}\", config.compile_lib_path));\n-    logv(c, format_strbuf!(\"run_lib_path: {}\", config.run_lib_path));\n-    logv(c, format_strbuf!(\"rustc_path: {}\", config.rustc_path.display()));\n-    logv(c, format_strbuf!(\"src_base: {}\", config.src_base.display()));\n-    logv(c, format_strbuf!(\"build_base: {}\", config.build_base.display()));\n-    logv(c, format_strbuf!(\"stage_id: {}\", config.stage_id));\n-    logv(c, format_strbuf!(\"mode: {}\", config.mode));\n-    logv(c, format_strbuf!(\"run_ignored: {}\", config.run_ignored));\n-    logv(c, format_strbuf!(\"filter: {}\",\n-                           opt_str(&config.filter\n-                                          .as_ref()\n-                                          .map(|re| {\n-                                              re.to_str().into_string()\n-                                          }))));\n-    logv(c, format_strbuf!(\"runtool: {}\", opt_str(&config.runtool)));\n-    logv(c, format_strbuf!(\"host-rustcflags: {}\",\n-                           opt_str(&config.host_rustcflags)));\n-    logv(c, format_strbuf!(\"target-rustcflags: {}\",\n-                           opt_str(&config.target_rustcflags)));\n-    logv(c, format_strbuf!(\"jit: {}\", config.jit));\n-    logv(c, format_strbuf!(\"target: {}\", config.target));\n-    logv(c, format_strbuf!(\"host: {}\", config.host));\n-    logv(c, format_strbuf!(\"android-cross-path: {}\",\n-                           config.android_cross_path.display()));\n-    logv(c, format_strbuf!(\"adb_path: {}\", config.adb_path));\n-    logv(c, format_strbuf!(\"adb_test_dir: {}\", config.adb_test_dir));\n-    logv(c, format_strbuf!(\"adb_device_status: {}\",\n-                           config.adb_device_status));\n+    logv(c, format!(\"configuration:\"));\n+    logv(c, format!(\"compile_lib_path: {}\", config.compile_lib_path));\n+    logv(c, format!(\"run_lib_path: {}\", config.run_lib_path));\n+    logv(c, format!(\"rustc_path: {}\", config.rustc_path.display()));\n+    logv(c, format!(\"src_base: {}\", config.src_base.display()));\n+    logv(c, format!(\"build_base: {}\", config.build_base.display()));\n+    logv(c, format!(\"stage_id: {}\", config.stage_id));\n+    logv(c, format!(\"mode: {}\", config.mode));\n+    logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n+    logv(c, format!(\"filter: {}\",\n+                    opt_str(&config.filter\n+                                   .as_ref()\n+                                   .map(|re| {\n+                                       re.to_str().into_string()\n+                                   }))));\n+    logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n+    logv(c, format!(\"host-rustcflags: {}\",\n+                    opt_str(&config.host_rustcflags)));\n+    logv(c, format!(\"target-rustcflags: {}\",\n+                    opt_str(&config.target_rustcflags)));\n+    logv(c, format!(\"jit: {}\", config.jit));\n+    logv(c, format!(\"target: {}\", config.target));\n+    logv(c, format!(\"host: {}\", config.host));\n+    logv(c, format!(\"android-cross-path: {}\",\n+                    config.android_cross_path.display()));\n+    logv(c, format!(\"adb_path: {}\", config.adb_path));\n+    logv(c, format!(\"adb_test_dir: {}\", config.adb_test_dir));\n+    logv(c, format!(\"adb_device_status: {}\",\n+                    config.adb_device_status));\n     match config.test_shard {\n         None => logv(c, \"test_shard: (all)\".to_string()),\n-        Some((a,b)) => logv(c, format_strbuf!(\"test_shard: {}.{}\", a, b))\n+        Some((a,b)) => logv(c, format!(\"test_shard: {}.{}\", a, b))\n     }\n-    logv(c, format_strbuf!(\"verbose: {}\", config.verbose));\n-    logv(c, format_strbuf!(\"\\n\"));\n+    logv(c, format!(\"verbose: {}\", config.verbose));\n+    logv(c, format!(\"\\n\"));\n }\n \n pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'a str {\n@@ -356,12 +356,10 @@ pub fn make_test_name(config: &Config, testfile: &Path) -> test::TestName {\n         let filename = path.filename_str();\n         let p = path.dir_path();\n         let dir = p.filename_str();\n-        format_strbuf!(\"{}/{}\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n+        format!(\"{}/{}\", dir.unwrap_or(\"\"), filename.unwrap_or(\"\"))\n     }\n \n-    test::DynTestName(format_strbuf!(\"[{}] {}\",\n-                                     config.mode,\n-                                     shorten(testfile)))\n+    test::DynTestName(format!(\"[{}] {}\", config.mode, shorten(testfile)))\n }\n \n pub fn make_test_closure(config: &Config, testfile: &Path) -> test::TestFn {"}, {"sha": "4b0b68bca997ccd6a9da9bc04036816b91ac1674", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -120,11 +120,11 @@ pub fn load_props(testfile: &Path) -> TestProps {\n \n pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n     fn ignore_target(config: &Config) -> String {\n-        format_strbuf!(\"ignore-{}\", util::get_os(config.target.as_slice()))\n+        format!(\"ignore-{}\", util::get_os(config.target.as_slice()))\n     }\n     fn ignore_stage(config: &Config) -> String {\n-        format_strbuf!(\"ignore-{}\",\n-                       config.stage_id.as_slice().split('-').next().unwrap())\n+        format!(\"ignore-{}\",\n+                config.stage_id.as_slice().split('-').next().unwrap())\n     }\n \n     let val = iter_header(testfile, |ln| {\n@@ -243,7 +243,7 @@ fn parse_name_directive(line: &str, directive: &str) -> bool {\n \n pub fn parse_name_value_directive(line: &str, directive: String)\n                                   -> Option<String> {\n-    let keycolon = format_strbuf!(\"{}:\", directive);\n+    let keycolon = format!(\"{}:\", directive);\n     match line.find_str(keycolon.as_slice()) {\n         Some(colon) => {\n             let value = line.slice(colon + keycolon.len(),"}, {"sha": "8429e83a7aa4390cb6a0fd2b745a72efbd8af94c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 66, "deletions": 97, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -121,8 +121,7 @@ fn check_correct_failure_status(proc_res: &ProcRes) {\n     static RUST_ERR: int = 101;\n     if !proc_res.status.matches_exit_status(RUST_ERR) {\n         fatal_ProcRes(\n-            format_strbuf!(\"failure produced the wrong error: {}\",\n-                           proc_res.status),\n+            format!(\"failure produced the wrong error: {}\", proc_res.status),\n             proc_res);\n     }\n }\n@@ -165,16 +164,15 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     let mut round = 0;\n     while round < rounds {\n-        logv(config, format_strbuf!(\"pretty-printing round {}\", round));\n+        logv(config, format!(\"pretty-printing round {}\", round));\n         let proc_res = print_source(config,\n                                     props,\n                                     testfile,\n                                     (*srcs.get(round)).to_string(),\n                                     \"normal\");\n \n         if !proc_res.status.success() {\n-            fatal_ProcRes(format_strbuf!(\"pretty-printing failed in round {}\",\n-                                         round),\n+            fatal_ProcRes(format!(\"pretty-printing failed in round {}\", round),\n                           &proc_res);\n         }\n \n@@ -214,15 +212,14 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n     // additionally, run `--pretty expanded` and try to build it.\n     let proc_res = print_source(config, props, testfile, (*srcs.get(round)).clone(), \"expanded\");\n     if !proc_res.status.success() {\n-        fatal_ProcRes(format_strbuf!(\"pretty-printing (expanded) failed\"),\n-                                     &proc_res);\n+        fatal_ProcRes(format!(\"pretty-printing (expanded) failed\"), &proc_res);\n     }\n \n     let ProcRes{ stdout: expanded_src, .. } = proc_res;\n     let proc_res = typecheck_source(config, props, testfile, expanded_src);\n     if !proc_res.status.success() {\n-        fatal_ProcRes(format_strbuf!(\"pretty-printed source (expanded) does \\\n-                                      not typecheck\"),\n+        fatal_ProcRes(format!(\"pretty-printed source (expanded) does \\\n+                               not typecheck\"),\n                       &proc_res);\n     }\n \n@@ -253,7 +250,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n         let mut args = vec!(\"-\".to_string(),\n                             \"--pretty\".to_string(),\n                             pretty_type,\n-                            format_strbuf!(\"--target={}\", config.target),\n+                            format!(\"--target={}\", config.target),\n                             \"-L\".to_string(),\n                             aux_dir.as_str().unwrap().to_string());\n         args.push_all_move(split_maybe_args(&config.target_rustcflags));\n@@ -300,7 +297,7 @@ actual:\\n\\\n         let mut args = vec!(\"-\".to_string(),\n                             \"--no-trans\".to_string(),\n                             \"--crate-type=lib\".to_string(),\n-                            format_strbuf!(\"--target={}\", target),\n+                            format!(\"--target={}\", target),\n                             \"-L\".to_string(),\n                             config.build_base.as_str().unwrap().to_string(),\n                             \"-L\".to_string(),\n@@ -343,10 +340,8 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n             // write debugger script\n             let script_str = [\"set charset UTF-8\".to_string(),\n-                              format_strbuf!(\"file {}\",\n-                                             exe_file.as_str()\n-                                                     .unwrap()\n-                                                     .to_string()),\n+                              format!(\"file {}\", exe_file.as_str().unwrap()\n+                                                         .to_string()),\n                               \"target remote :5039\".to_string(),\n                               cmds,\n                               \"quit\".to_string()].connect(\"\\n\");\n@@ -366,8 +361,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                          ],\n                          vec!((\"\".to_string(), \"\".to_string())),\n                          Some(\"\".to_string()))\n-                .expect(format_strbuf!(\"failed to exec `{}`\",\n-                                       config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n             procsrv::run(\"\",\n                          config.adb_path.as_slice(),\n@@ -378,15 +372,15 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                          ],\n                          vec!((\"\".to_string(), \"\".to_string())),\n                          Some(\"\".to_string()))\n-                .expect(format_strbuf!(\"failed to exec `{}`\", config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n-            let adb_arg = format_strbuf!(\"export LD_LIBRARY_PATH={}; \\\n-                                          gdbserver :5039 {}/{}\",\n-                                         config.adb_test_dir.clone(),\n-                                         config.adb_test_dir.clone(),\n-                                         str::from_utf8(\n-                                             exe_file.filename()\n-                                             .unwrap()).unwrap());\n+            let adb_arg = format!(\"export LD_LIBRARY_PATH={}; \\\n+                                   gdbserver :5039 {}/{}\",\n+                                  config.adb_test_dir.clone(),\n+                                  config.adb_test_dir.clone(),\n+                                  str::from_utf8(\n+                                      exe_file.filename()\n+                                      .unwrap()).unwrap());\n \n             let mut process = procsrv::run_background(\"\",\n                                                       config.adb_path\n@@ -398,8 +392,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                                       vec!((\"\".to_string(),\n                                                             \"\".to_string())),\n                                                       Some(\"\".to_string()))\n-                .expect(format_strbuf!(\"failed to exec `{}`\",\n-                                       config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n             loop {\n                 //waiting 1 second for gdbserver start\n                 timer::sleep(1000);\n@@ -423,8 +416,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 vec!(\"-quiet\".to_string(),\n                      \"-batch\".to_string(),\n                      \"-nx\".to_string(),\n-                     format_strbuf!(\"-command={}\",\n-                                    debugger_script.as_str().unwrap()));\n+                     format!(\"-command={}\", debugger_script.as_str().unwrap()));\n \n             let gdb_path = tool_path.append(\"/bin/arm-linux-androideabi-gdb\");\n             let procsrv::Result {\n@@ -436,12 +428,12 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                              debugger_opts.as_slice(),\n                              vec!((\"\".to_string(), \"\".to_string())),\n                              None)\n-                .expect(format_strbuf!(\"failed to exec `{}`\", gdb_path));\n+                .expect(format!(\"failed to exec `{}`\", gdb_path));\n             let cmdline = {\n                 let cmdline = make_cmdline(\"\",\n                                            \"arm-linux-androideabi-gdb\",\n                                            debugger_opts.as_slice());\n-                logv(config, format_strbuf!(\"executing {}\", cmdline));\n+                logv(config, format!(\"executing {}\", cmdline));\n                 cmdline\n             };\n \n@@ -484,8 +476,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 vec!(\"-quiet\".to_string(),\n                      \"-batch\".to_string(),\n                      \"-nx\".to_string(),\n-                     format_strbuf!(\"-command={}\",\n-                                    debugger_script.as_str().unwrap()),\n+                     format!(\"-command={}\", debugger_script.as_str().unwrap()),\n                      exe_file.as_str().unwrap().to_string());\n             proc_args = ProcArgs {\n                 prog: debugger(),\n@@ -593,9 +584,8 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n                  str::from_utf8(error.as_slice()).unwrap().to_string())\n             },\n             Err(e) => {\n-                fatal(format_strbuf!(\"Failed to setup Python process for \\\n-                                      LLDB script: {}\",\n-                                     e))\n+                fatal(format!(\"Failed to setup Python process for \\\n+                               LLDB script: {}\", e))\n             }\n         };\n \n@@ -604,7 +594,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n             status: status,\n             stdout: out,\n             stderr: err,\n-            cmdline: format_strbuf!(\"{}\", cmd)\n+            cmdline: format!(\"{}\", cmd)\n         };\n     }\n }\n@@ -647,9 +637,7 @@ fn parse_debugger_commands(file_path: &Path, debugger_prefix: &str)\n                 });\n             }\n             Err(e) => {\n-                fatal(format_strbuf!(\"Error while parsing debugger commands: \\\n-                                      {}\",\n-                                     e))\n+                fatal(format!(\"Error while parsing debugger commands: {}\", e))\n             }\n         }\n         counter += 1;\n@@ -732,9 +720,8 @@ fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String])\n             }\n         }\n         if i != num_check_lines {\n-            fatal_ProcRes(format_strbuf!(\"line not found in debugger output: \\\n-                                          {}\",\n-                                         check_lines.get(i).unwrap()),\n+            fatal_ProcRes(format!(\"line not found in debugger output: {}\",\n+                                  check_lines.get(i).unwrap()),\n                           debugger_run_result);\n         }\n     }\n@@ -744,8 +731,8 @@ fn check_error_patterns(props: &TestProps,\n                         testfile: &Path,\n                         proc_res: &ProcRes) {\n     if props.error_patterns.is_empty() {\n-        fatal(format_strbuf!(\"no error pattern specified in {}\",\n-                             testfile.display().as_maybe_owned().as_slice()));\n+        fatal(format!(\"no error pattern specified in {}\",\n+                      testfile.display().as_maybe_owned().as_slice()));\n     }\n \n     if proc_res.status.success() {\n@@ -756,7 +743,7 @@ fn check_error_patterns(props: &TestProps,\n     let mut next_err_pat = props.error_patterns.get(next_err_idx);\n     let mut done = false;\n     let output_to_check = if props.check_stdout {\n-        format_strbuf!(\"{}{}\", proc_res.stdout, proc_res.stderr)\n+        format!(\"{}{}\", proc_res.stdout, proc_res.stderr)\n     } else {\n         proc_res.stderr.clone()\n     };\n@@ -777,12 +764,12 @@ fn check_error_patterns(props: &TestProps,\n     let missing_patterns =\n         props.error_patterns.slice(next_err_idx, props.error_patterns.len());\n     if missing_patterns.len() == 1u {\n-        fatal_ProcRes(format_strbuf!(\"error pattern '{}' not found!\",\n-                                     missing_patterns[0]),\n+        fatal_ProcRes(format!(\"error pattern '{}' not found!\",\n+                              missing_patterns[0]),\n                       proc_res);\n     } else {\n         for pattern in missing_patterns.iter() {\n-            error(format_strbuf!(\"error pattern '{}' not found!\", *pattern));\n+            error(format!(\"error pattern '{}' not found!\", *pattern));\n         }\n         fatal_ProcRes(\"multiple error patterns not found\".to_string(),\n                       proc_res);\n@@ -811,7 +798,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n     }\n \n     let prefixes = expected_errors.iter().map(|ee| {\n-        format_strbuf!(\"{}:{}:\", testfile.display(), ee.line)\n+        format!(\"{}:{}:\", testfile.display(), ee.line)\n     }).collect::<Vec<String> >();\n \n     #[cfg(target_os = \"win32\")]\n@@ -870,21 +857,17 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         }\n \n         if !was_expected && is_compiler_error_or_warning(line) {\n-            fatal_ProcRes(format_strbuf!(\"unexpected compiler error or \\\n-                                          warning: '{}'\",\n-                                         line),\n+            fatal_ProcRes(format!(\"unexpected compiler error or warning: '{}'\",\n+                                  line),\n                           proc_res);\n         }\n     }\n \n     for (i, &flag) in found_flags.iter().enumerate() {\n         if !flag {\n             let ee = expected_errors.get(i);\n-            fatal_ProcRes(format_strbuf!(\"expected {} on line {} not found: \\\n-                                          {}\",\n-                                         ee.kind,\n-                                         ee.line,\n-                                         ee.msg),\n+            fatal_ProcRes(format!(\"expected {} on line {} not found: {}\",\n+                                  ee.kind, ee.line, ee.msg),\n                           proc_res);\n         }\n     }\n@@ -1065,8 +1048,8 @@ fn compose_and_run_compiler(\n                                      None);\n         if !auxres.status.success() {\n             fatal_ProcRes(\n-                format_strbuf!(\"auxiliary build of {} failed to compile: \",\n-                               abs_ab.display()),\n+                format!(\"auxiliary build of {} failed to compile: \",\n+                        abs_ab.display()),\n                 &auxres);\n         }\n \n@@ -1121,7 +1104,7 @@ fn make_compile_args(config: &Config,\n     let mut args = vec!(testfile.as_str().unwrap().to_string(),\n                         \"-L\".to_string(),\n                         config.build_base.as_str().unwrap().to_string(),\n-                        format_strbuf!(\"--target={}\", target));\n+                        format!(\"--target={}\", target));\n     args.push_all(extras.as_slice());\n     if !props.no_prefer_dynamic {\n         args.push(\"-C\".to_string());\n@@ -1213,7 +1196,7 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n             let cmdline = make_cmdline(lib_path,\n                                        prog.as_slice(),\n                                        args.as_slice());\n-            logv(config, format_strbuf!(\"executing {}\", cmdline));\n+            logv(config, format!(\"executing {}\", cmdline));\n             cmdline\n         };\n     let procsrv::Result {\n@@ -1224,8 +1207,7 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n                      prog.as_slice(),\n                      args.as_slice(),\n                      env,\n-                     input).expect(format_strbuf!(\"failed to exec `{}`\",\n-                                                  prog));\n+                     input).expect(format!(\"failed to exec `{}`\", prog));\n     dump_output(config, testfile, out.as_slice(), err.as_slice());\n     return ProcRes {\n         status: status,\n@@ -1240,24 +1222,19 @@ fn program_output(config: &Config, testfile: &Path, lib_path: &str, prog: String\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n fn make_cmdline(_libpath: &str, prog: &str, args: &[String]) -> String {\n-    format_strbuf!(\"{} {}\", prog, args.connect(\" \"))\n+    format!(\"{} {}\", prog, args.connect(\" \"))\n }\n \n #[cfg(target_os = \"win32\")]\n fn make_cmdline(libpath: &str, prog: &str, args: &[String]) -> String {\n-    format_strbuf!(\"{} {} {}\",\n-                   lib_path_cmd_prefix(libpath),\n-                   prog,\n-                   args.connect(\" \"))\n+    format!(\"{} {} {}\", lib_path_cmd_prefix(libpath), prog, args.connect(\" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n // for diagnostic purposes\n #[cfg(target_os = \"win32\")]\n fn lib_path_cmd_prefix(path: &str) -> String {\n-    format_strbuf!(\"{}=\\\"{}\\\"\",\n-                   util::lib_path_env_var(),\n-                   util::make_new_path(path))\n+    format!(\"{}=\\\"{}\\\"\", util::lib_path_env_var(), util::make_new_path(path))\n }\n \n fn dump_output(config: &Config, testfile: &Path, out: &str, err: &str) {\n@@ -1356,7 +1333,7 @@ fn _arm_exec_compiled_test(config: &Config,\n                                    ],\n                                    vec!((\"\".to_string(), \"\".to_string())),\n                                    Some(\"\".to_string()))\n-        .expect(format_strbuf!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n     if config.verbose {\n         println!(\"push ({}) {} {} {}\",\n@@ -1366,19 +1343,18 @@ fn _arm_exec_compiled_test(config: &Config,\n                  copy_result.err);\n     }\n \n-    logv(config, format_strbuf!(\"executing ({}) {}\", config.target, cmdline));\n+    logv(config, format!(\"executing ({}) {}\", config.target, cmdline));\n \n     let mut runargs = Vec::new();\n \n     // run test via adb_run_wrapper\n     runargs.push(\"shell\".to_string());\n     for (key, val) in env.move_iter() {\n-        runargs.push(format_strbuf!(\"{}={}\", key, val));\n+        runargs.push(format!(\"{}={}\", key, val));\n     }\n-    runargs.push(format_strbuf!(\"{}/adb_run_wrapper.sh\",\n-                                config.adb_test_dir));\n-    runargs.push(format_strbuf!(\"{}\", config.adb_test_dir));\n-    runargs.push(format_strbuf!(\"{}\", prog_short));\n+    runargs.push(format!(\"{}/adb_run_wrapper.sh\", config.adb_test_dir));\n+    runargs.push(format!(\"{}\", config.adb_test_dir));\n+    runargs.push(format!(\"{}\", prog_short));\n \n     for tv in args.args.iter() {\n         runargs.push(tv.to_string());\n@@ -1387,23 +1363,21 @@ fn _arm_exec_compiled_test(config: &Config,\n                  config.adb_path.as_slice(),\n                  runargs.as_slice(),\n                  vec!((\"\".to_string(), \"\".to_string())), Some(\"\".to_string()))\n-        .expect(format_strbuf!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n     // get exitcode of result\n     runargs = Vec::new();\n     runargs.push(\"shell\".to_string());\n     runargs.push(\"cat\".to_string());\n-    runargs.push(format_strbuf!(\"{}/{}.exitcode\",\n-                                config.adb_test_dir,\n-                                prog_short));\n+    runargs.push(format!(\"{}/{}.exitcode\", config.adb_test_dir, prog_short));\n \n     let procsrv::Result{ out: exitcode_out, err: _, status: _ } =\n         procsrv::run(\"\",\n                      config.adb_path.as_slice(),\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n-        .expect(format_strbuf!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n     let mut exitcode: int = 0;\n     for c in exitcode_out.as_slice().chars() {\n@@ -1418,33 +1392,29 @@ fn _arm_exec_compiled_test(config: &Config,\n     runargs = Vec::new();\n     runargs.push(\"shell\".to_string());\n     runargs.push(\"cat\".to_string());\n-    runargs.push(format_strbuf!(\"{}/{}.stdout\",\n-                                config.adb_test_dir,\n-                                prog_short));\n+    runargs.push(format!(\"{}/{}.stdout\", config.adb_test_dir, prog_short));\n \n     let procsrv::Result{ out: stdout_out, err: _, status: _ } =\n         procsrv::run(\"\",\n                      config.adb_path.as_slice(),\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n-        .expect(format_strbuf!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n     // get stderr of result\n     runargs = Vec::new();\n     runargs.push(\"shell\".to_string());\n     runargs.push(\"cat\".to_string());\n-    runargs.push(format_strbuf!(\"{}/{}.stderr\",\n-                                config.adb_test_dir,\n-                                prog_short));\n+    runargs.push(format!(\"{}/{}.stderr\", config.adb_test_dir, prog_short));\n \n     let procsrv::Result{ out: stderr_out, err: _, status: _ } =\n         procsrv::run(\"\",\n                      config.adb_path.as_slice(),\n                      runargs.as_slice(),\n                      vec!((\"\".to_string(), \"\".to_string())),\n                      Some(\"\".to_string()))\n-        .expect(format_strbuf!(\"failed to exec `{}`\", config.adb_path));\n+        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n     dump_output(config,\n                 testfile,\n@@ -1478,8 +1448,7 @@ fn _arm_push_aux_shared_library(config: &Config, testfile: &Path) {\n                                            vec!((\"\".to_string(),\n                                                  \"\".to_string())),\n                                            Some(\"\".to_string()))\n-                .expect(format_strbuf!(\"failed to exec `{}`\",\n-                                       config.adb_path));\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n \n             if config.verbose {\n                 println!(\"push ({}) {} {} {}\",\n@@ -1549,8 +1518,8 @@ fn extract_function_from_bitcode(config: &Config, _props: &TestProps,\n     let proc_args = ProcArgs {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         prog: prog.as_str().unwrap().to_string(),\n-        args: vec!(format_strbuf!(\"-func={}\", fname),\n-                   format_strbuf!(\"-o={}\", extracted_bc.as_str().unwrap()),\n+        args: vec!(format!(\"-func={}\", fname),\n+                   format!(\"-o={}\", extracted_bc.as_str().unwrap()),\n                    bitcodefile.as_str().unwrap().to_string())\n     };\n     compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)\n@@ -1566,7 +1535,7 @@ fn disassemble_extract(config: &Config, _props: &TestProps,\n     let proc_args = ProcArgs {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         prog: prog.as_str().unwrap().to_string(),\n-        args: vec!(format_strbuf!(\"-o={}\", extracted_ll.as_str().unwrap()),\n+        args: vec!(format!(\"-o={}\", extracted_ll.as_str().unwrap()),\n                    extracted_bc.as_str().unwrap().to_string())\n     };\n     compose_and_run(config, testfile, proc_args, Vec::new(), \"\", None)"}, {"sha": "00f0689b96b660b01295edafec35d65af743d929", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -39,7 +39,7 @@ pub fn make_new_path(path: &str) -> String {\n     // maintain the current value while adding our own\n     match getenv(lib_path_env_var().as_slice()) {\n       Some(curr) => {\n-        format_strbuf!(\"{}{}{}\", path, path_div(), curr)\n+        format!(\"{}{}{}\", path, path_div(), curr)\n       }\n       None => path.to_str().to_string()\n     }"}, {"sha": "f14b70afc7a174d60d8c4a0ffddbd75bc0f1a4c6", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -23,14 +23,14 @@ let y: int = x.unwrap();\n \n **Int to string, in non-base-10**\n \n-Use the `format_strbuf!` syntax extension.\n+Use the `format!` syntax extension.\n \n ~~~\n let x: int = 42;\n-let y: String = format_strbuf!(\"{:t}\", x);   // binary\n-let y: String = format_strbuf!(\"{:o}\", x);   // octal\n-let y: String = format_strbuf!(\"{:x}\", x);   // lowercase hexadecimal\n-let y: String = format_strbuf!(\"{:X}\", x);   // uppercase hexadecimal\n+let y: String = format!(\"{:t}\", x);   // binary\n+let y: String = format!(\"{:o}\", x);   // octal\n+let y: String = format!(\"{:x}\", x);   // lowercase hexadecimal\n+let y: String = format!(\"{:X}\", x);   // uppercase hexadecimal\n ~~~\n \n **String to int, in non-base-10**"}, {"sha": "37c3fe0d2ef8e63eaf1721f141b19f8a28b9d8d2", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -500,19 +500,19 @@ impl Fail_ {\n     pub fn to_err_msg(self) -> String {\n         match self {\n             ArgumentMissing(ref nm) => {\n-                format_strbuf!(\"Argument to option '{}' missing.\", *nm)\n+                format!(\"Argument to option '{}' missing.\", *nm)\n             }\n             UnrecognizedOption(ref nm) => {\n-                format_strbuf!(\"Unrecognized option: '{}'.\", *nm)\n+                format!(\"Unrecognized option: '{}'.\", *nm)\n             }\n             OptionMissing(ref nm) => {\n-                format_strbuf!(\"Required option '{}' missing.\", *nm)\n+                format!(\"Required option '{}' missing.\", *nm)\n             }\n             OptionDuplicated(ref nm) => {\n-                format_strbuf!(\"Option '{}' given more than once.\", *nm)\n+                format!(\"Option '{}' given more than once.\", *nm)\n             }\n             UnexpectedArgument(ref nm) => {\n-                format_strbuf!(\"Option '{}' does not take an argument.\", *nm)\n+                format!(\"Option '{}' does not take an argument.\", *nm)\n             }\n         }\n     }\n@@ -740,9 +740,8 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n         row\n     });\n \n-    format_strbuf!(\"{}\\n\\nOptions:\\n{}\\n\",\n-                   brief,\n-                   rows.collect::<Vec<String>>().connect(\"\\n\"))\n+    format!(\"{}\\n\\nOptions:\\n{}\\n\", brief,\n+            rows.collect::<Vec<String>>().connect(\"\\n\"))\n }\n \n fn format_option(opt: &OptGroup) -> String {\n@@ -784,7 +783,7 @@ fn format_option(opt: &OptGroup) -> String {\n \n /// Derive a short one-line usage summary from a set of long options.\n pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n-    let mut line = format_strbuf!(\"Usage: {} \", program_name);\n+    let mut line = format!(\"Usage: {} \", program_name);\n     line.push_str(opts.iter()\n                       .map(format_option)\n                       .collect::<Vec<String>>()"}, {"sha": "cc35cd749d6638a5dd5ba7783d019f7a63ec90bf", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1215,7 +1215,7 @@ impl ToStrRadix for BigInt {\n         match self.sign {\n             Plus  => self.data.to_str_radix(radix),\n             Zero  => \"0\".to_string(),\n-            Minus => format_strbuf!(\"-{}\", self.data.to_str_radix(radix)),\n+            Minus => format!(\"-{}\", self.data.to_str_radix(radix)),\n         }\n     }\n }\n@@ -2055,34 +2055,34 @@ mod biguint_tests {\n             (16, \"fff\".to_string())\n         )), ( BigUint::from_slice([ 1, 2 ]), vec!(\n             (2,\n-             format_strbuf!(\"10{}1\", \"0\".repeat(bits - 1))),\n+             format!(\"10{}1\", \"0\".repeat(bits - 1))),\n             (4,\n-             format_strbuf!(\"2{}1\", \"0\".repeat(bits / 2 - 1))),\n+             format!(\"2{}1\", \"0\".repeat(bits / 2 - 1))),\n             (10, match bits {\n                 32 => \"8589934593\".to_string(),\n                 16 => \"131073\".to_string(),\n                 _ => fail!()\n             }),\n             (16,\n-             format_strbuf!(\"2{}1\", \"0\".repeat(bits / 4 - 1)))\n+             format!(\"2{}1\", \"0\".repeat(bits / 4 - 1)))\n         )), ( BigUint::from_slice([ 1, 2, 3 ]), vec!(\n             (2,\n-             format_strbuf!(\"11{}10{}1\",\n-                            \"0\".repeat(bits - 2),\n-                            \"0\".repeat(bits - 1))),\n+             format!(\"11{}10{}1\",\n+                     \"0\".repeat(bits - 2),\n+                     \"0\".repeat(bits - 1))),\n             (4,\n-             format_strbuf!(\"3{}2{}1\",\n-                            \"0\".repeat(bits / 2 - 1),\n-                            \"0\".repeat(bits / 2 - 1))),\n+             format!(\"3{}2{}1\",\n+                     \"0\".repeat(bits / 2 - 1),\n+                     \"0\".repeat(bits / 2 - 1))),\n             (10, match bits {\n                 32 => \"55340232229718589441\".to_string(),\n                 16 => \"12885032961\".to_string(),\n                 _ => fail!()\n             }),\n             (16,\n-             format_strbuf!(\"3{}2{}1\",\n-                            \"0\".repeat(bits / 4 - 1),\n-                            \"0\".repeat(bits / 4 - 1)))\n+             format!(\"3{}2{}1\",\n+                     \"0\".repeat(bits / 4 - 1),\n+                     \"0\".repeat(bits / 4 - 1)))\n         )) )\n     }\n "}, {"sha": "6c5547b28e8cf6aedfa2be3927228afda451dfc1", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -177,13 +177,13 @@ impl<T: fmt::Show + Num + Ord> fmt::Show for Complex<T> {\n impl<T: ToStrRadix + Num + Ord> ToStrRadix for Complex<T> {\n     fn to_str_radix(&self, radix: uint) -> String {\n         if self.im < Zero::zero() {\n-            format_strbuf!(\"{}-{}i\",\n-                           self.re.to_str_radix(radix),\n-                           (-self.im).to_str_radix(radix))\n+            format!(\"{}-{}i\",\n+                    self.re.to_str_radix(radix),\n+                    (-self.im).to_str_radix(radix))\n         } else {\n-            format_strbuf!(\"{}+{}i\",\n-                           self.re.to_str_radix(radix),\n-                           self.im.to_str_radix(radix))\n+            format!(\"{}+{}i\",\n+                    self.re.to_str_radix(radix),\n+                    self.im.to_str_radix(radix))\n         }\n     }\n }"}, {"sha": "ba0a571268f44e64e56fb834b3286654d77def10", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -282,9 +282,9 @@ impl<T: fmt::Show> fmt::Show for Ratio<T> {\n impl<T: ToStrRadix> ToStrRadix for Ratio<T> {\n     /// Renders as `numer/denom` where the numbers are in base `radix`.\n     fn to_str_radix(&self, radix: uint) -> String {\n-        format_strbuf!(\"{}/{}\",\n-                       self.numer.to_str_radix(radix),\n-                       self.denom.to_str_radix(radix))\n+        format!(\"{}/{}\",\n+                self.numer.to_str_radix(radix),\n+                self.denom.to_str_radix(radix))\n     }\n }\n "}, {"sha": "83c1cb37158a910fc46b6628b909271890dcac76", "filename": "src/libregex/re.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -425,7 +425,7 @@ impl Regex {\n     /// # use regex::Captures; fn main() {\n     /// let re = regex!(r\"([^,\\s]+),\\s+(\\S+)\");\n     /// let result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {\n-    ///     format_strbuf!(\"{} {}\", caps.at(2), caps.at(1))\n+    ///     format!(\"{} {}\", caps.at(2), caps.at(1))\n     /// });\n     /// assert_eq!(result.as_slice(), \"Bruce Springsteen\");\n     /// # }\n@@ -761,9 +761,8 @@ impl<'t> Captures<'t> {\n         let re = Regex::new(r\"(^|[^$]|\\b)\\$(\\w+)\").unwrap();\n         let text = re.replace_all(text, |refs: &Captures| -> String {\n             let (pre, name) = (refs.at(1), refs.at(2));\n-            format_strbuf!(\"{}{}\",\n-                           pre,\n-                           match from_str::<uint>(name.as_slice()) {\n+            format!(\"{}{}\", pre,\n+                    match from_str::<uint>(name.as_slice()) {\n                 None => self.name(name).to_string(),\n                 Some(i) => self.at(i).to_string(),\n             })"}, {"sha": "1c60e4fbe92c912196cbad11326d628e34081675", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -165,7 +165,7 @@ impl<'a> Archive<'a> {\n             if skip.iter().any(|s| *s == filename) { continue }\n             if filename.contains(\".SYMDEF\") { continue }\n \n-            let filename = format_strbuf!(\"r-{}-{}\", name, filename);\n+            let filename = format!(\"r-{}-{}\", name, filename);\n             let new_filename = file.with_filename(filename);\n             try!(fs::rename(file, &new_filename));\n             inputs.push(new_filename);\n@@ -185,8 +185,8 @@ impl<'a> Archive<'a> {\n         };\n         // On Windows, static libraries sometimes show up as libfoo.a and other\n         // times show up as foo.lib\n-        let oslibname = format_strbuf!(\"{}{}.{}\", osprefix, name, osext);\n-        let unixlibname = format_strbuf!(\"lib{}.a\", name);\n+        let oslibname = format!(\"{}{}.{}\", osprefix, name, osext);\n+        let unixlibname = format!(\"lib{}.a\", name);\n \n         let mut rustpath = filesearch::rust_path();\n         rustpath.push(self.sess.target_filesearch().get_lib_path());"}, {"sha": "05a366c1d32d55e3cf062af750439db84ba9c3be", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -751,10 +751,7 @@ pub fn mangle_internal_name_by_path_and_seq(path: PathElems, flav: &str) -> Stri\n }\n \n pub fn output_lib_filename(id: &CrateId) -> String {\n-    format_strbuf!(\"{}-{}-{}\",\n-                   id.name,\n-                   crate_id_hash(id),\n-                   id.version_or_default())\n+    format!(\"{}-{}-{}\", id.name, crate_id_hash(id), id.version_or_default())\n }\n \n pub fn get_cc_prog(sess: &Session) -> String {\n@@ -827,7 +824,7 @@ pub fn filename_for_input(sess: &Session, crate_type: config::CrateType,\n     let libname = output_lib_filename(id);\n     match crate_type {\n         config::CrateTypeRlib => {\n-            out_filename.with_filename(format_strbuf!(\"lib{}.rlib\", libname))\n+            out_filename.with_filename(format!(\"lib{}.rlib\", libname))\n         }\n         config::CrateTypeDylib => {\n             let (prefix, suffix) = match sess.targ_cfg.os {\n@@ -837,13 +834,11 @@ pub fn filename_for_input(sess: &Session, crate_type: config::CrateType,\n                 abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n                 abi::OsFreebsd => (loader::FREEBSD_DLL_PREFIX, loader::FREEBSD_DLL_SUFFIX),\n             };\n-            out_filename.with_filename(format_strbuf!(\"{}{}{}\",\n-                                                      prefix,\n-                                                      libname,\n-                                                      suffix))\n+            out_filename.with_filename(format!(\"{}{}{}\", prefix, libname,\n+                                               suffix))\n         }\n         config::CrateTypeStaticlib => {\n-            out_filename.with_filename(format_strbuf!(\"lib{}.a\", libname))\n+            out_filename.with_filename(format!(\"lib{}.a\", libname))\n         }\n         config::CrateTypeExecutable => out_filename.clone(),\n     }\n@@ -1350,7 +1345,7 @@ fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n                         cmd.arg(\"-Wl,-Bdynamic\");\n                     }\n                 }\n-                cmd.arg(format_strbuf!(\"-l{}\", *l));\n+                cmd.arg(format!(\"-l{}\", *l));\n             }\n             cstore::NativeFramework => {\n                 cmd.arg(\"-framework\");\n@@ -1514,7 +1509,7 @@ fn add_upstream_native_libraries(cmd: &mut Command, sess: &Session) {\n         for &(kind, ref lib) in libs.iter() {\n             match kind {\n                 cstore::NativeUnknown => {\n-                    cmd.arg(format_strbuf!(\"-l{}\", *lib));\n+                    cmd.arg(format!(\"-l{}\", *lib));\n                 }\n                 cstore::NativeFramework => {\n                     cmd.arg(\"-framework\");"}, {"sha": "09dfc918967956913af0a122d7b118fd3fae41a8", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -85,8 +85,8 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n                                                     ptr as *libc::c_char,\n                                                     bc.len() as libc::size_t) {\n                 link::llvm_err(sess,\n-                               format_strbuf!(\"failed to load bc of `{}`\",\n-                                               name.as_slice()));\n+                               format!(\"failed to load bc of `{}`\",\n+                                       name.as_slice()));\n             }\n         });\n     }"}, {"sha": "d04df996186dde7c68086c6c60d352648755626e", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -653,14 +653,14 @@ pub fn pretty_print_input(sess: Session,\n         PpmFlowGraph(nodeid) => {\n             let ast_map = ast_map.expect(\"--pretty flowgraph missing ast_map\");\n             let node = ast_map.find(nodeid).unwrap_or_else(|| {\n-                sess.fatal(format_strbuf!(\"--pretty flowgraph couldn't find id: {}\",\n-                                          nodeid).as_slice())\n+                sess.fatal(format!(\"--pretty flowgraph couldn't find id: {}\",\n+                                   nodeid).as_slice())\n             });\n             let block = match node {\n                 syntax::ast_map::NodeBlock(block) => block,\n                 _ => {\n-                    let message = format_strbuf!(\"--pretty=flowgraph needs block, got {:?}\",\n-                                                 node);\n+                    let message = format!(\"--pretty=flowgraph needs block, got {:?}\",\n+                                          node);\n \n                     // point to what was found, if there's an\n                     // accessible span.\n@@ -706,7 +706,7 @@ fn print_flowgraph<W:io::Writer>(analysis: CrateAnalysis,\n             io::IoError {\n                 detail: Some(match orig_detail {\n                     None => m.into_string(),\n-                    Some(d) => format_strbuf!(\"{}: {}\", m, d)\n+                    Some(d) => format!(\"{}: {}\", m, d)\n                 }),\n                 ..ioerr\n             }"}, {"sha": "95a2c5588365ed2889070e6c5f54be1f84a4fcfa", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1892,7 +1892,7 @@ impl TypeNames {\n \n     pub fn types_to_str(&self, tys: &[Type]) -> String {\n         let strs: Vec<String> = tys.iter().map(|t| self.type_to_str(*t)).collect();\n-        format_strbuf!(\"[{}]\", strs.connect(\",\").to_string())\n+        format!(\"[{}]\", strs.connect(\",\").to_string())\n     }\n \n     pub fn val_to_str(&self, val: ValueRef) -> String {"}, {"sha": "4012bbfef75b0bf7a0b3ee0543a6fdf781cb5a90", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -140,7 +140,7 @@ fn encode_family(ebml_w: &mut Encoder, c: char) {\n }\n \n pub fn def_to_str(did: DefId) -> String {\n-    format_strbuf!(\"{}:{}\", did.krate, did.node)\n+    format!(\"{}:{}\", did.krate, did.node)\n }\n \n fn encode_ty_type_param_defs(ebml_w: &mut Encoder,"}, {"sha": "471240f10af3099a9c4c37265fe1ca6166615ee6", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -506,7 +506,7 @@ fn get_metadata_section(os: Os, filename: &Path) -> Result<MetadataBlob, String>\n \n fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, String> {\n     if !filename.exists() {\n-        return Err(format_strbuf!(\"no such file: '{}'\", filename.display()));\n+        return Err(format!(\"no such file: '{}'\", filename.display()));\n     }\n     if filename.filename_str().unwrap().ends_with(\".rlib\") {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n@@ -516,16 +516,14 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n             Some(ar) => ar,\n             None => {\n                 debug!(\"llvm didn't like `{}`\", filename.display());\n-                return Err(format_strbuf!(\"failed to read rlib metadata: \\\n-                                           '{}'\",\n-                                          filename.display()));\n+                return Err(format!(\"failed to read rlib metadata: '{}'\",\n+                                   filename.display()));\n             }\n         };\n         return match ArchiveMetadata::new(archive).map(|ar| MetadataArchive(ar)) {\n             None => {\n-                return Err((format_strbuf!(\"failed to read rlib metadata: \\\n-                                            '{}'\",\n-                                           filename.display())))\n+                return Err((format!(\"failed to read rlib metadata: '{}'\",\n+                                    filename.display())))\n             }\n             Some(blob) => return Ok(blob)\n         }\n@@ -535,15 +533,14 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n             llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n         });\n         if mb as int == 0 {\n-            return Err(format_strbuf!(\"error reading library: '{}'\",\n-                                      filename.display()))\n+            return Err(format!(\"error reading library: '{}'\",\n+                               filename.display()))\n         }\n         let of = match ObjectFile::new(mb) {\n             Some(of) => of,\n             _ => {\n-                return Err((format_strbuf!(\"provided path not an object \\\n-                                            file: '{}'\",\n-                                           filename.display())))\n+                return Err((format!(\"provided path not an object file: '{}'\",\n+                                    filename.display())))\n             }\n         };\n         let si = mk_section_iter(of.llof);\n@@ -556,8 +553,7 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;\n                 let mut found =\n-                    Err(format_strbuf!(\"metadata not found: '{}'\",\n-                                       filename.display()));\n+                    Err(format!(\"metadata not found: '{}'\", filename.display()));\n                 let cvbuf: *u8 = mem::transmute(cbuf);\n                 let vlen = encoder::metadata_encoding_version.len();\n                 debug!(\"checking {} bytes of metadata-version stamp\",\n@@ -566,8 +562,7 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n                 let version_ok = slice::raw::buf_as_slice(cvbuf, minsz,\n                     |buf0| buf0 == encoder::metadata_encoding_version);\n                 if !version_ok {\n-                    return Err((format_strbuf!(\"incompatible metadata \\\n-                                                version found: '{}'\",\n+                    return Err((format!(\"incompatible metadata version found: '{}'\",\n                                         filename.display())));\n                 }\n \n@@ -579,9 +574,9 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n                         Some(inflated) => found = Ok(MetadataVec(inflated)),\n                         None => {\n                             found =\n-                                Err(format_strbuf!(\"failed to decompress \\\n-                                                    metadata for: '{}'\",\n-                                                   filename.display()))\n+                                Err(format!(\"failed to decompress \\\n+                                             metadata for: '{}'\",\n+                                            filename.display()))\n                         }\n                     }\n                 });\n@@ -591,8 +586,7 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, Str\n             }\n             llvm::LLVMMoveToNextSection(si.llsi);\n         }\n-        return Err(format_strbuf!(\"metadata not found: '{}'\",\n-                                  filename.display()));\n+        return Err(format!(\"metadata not found: '{}'\", filename.display()));\n     }\n }\n "}, {"sha": "aa8a8998e2bd52225bc9a3cf1d2f38964eb1d899", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -69,7 +69,7 @@ pub fn enc_ty(w: &mut MemWriter, cx: &ctxt, t: ty::t) {\n         cx.abbrevs.borrow_mut().insert(t, ty_abbrev {\n             pos: pos as uint,\n             len: len as uint,\n-            s: format_strbuf!(\"\\\\#{:x}:{:x}\\\\#\", pos, len)\n+            s: format!(\"\\\\#{:x}:{:x}\\\\#\", pos, len)\n         });\n     }\n }"}, {"sha": "e52d8ba3975a0580bf2c8478fe4032069440136e", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -94,7 +94,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n     fn make_stat(bccx: &BorrowckCtxt, stat: uint) -> String {\n         let stat_f = stat as f64;\n         let total = bccx.stats.guaranteed_paths.get() as f64;\n-        format_strbuf!(\"{} ({:.0f}%)\", stat  , stat_f * 100.0 / total)\n+        format!(\"{} ({:.0f}%)\", stat  , stat_f * 100.0 / total)\n     }\n }\n \n@@ -297,7 +297,7 @@ impl BitAnd<RestrictionSet,RestrictionSet> for RestrictionSet {\n \n impl Repr for RestrictionSet {\n     fn repr(&self, _tcx: &ty::ctxt) -> String {\n-        format_strbuf!(\"RestrictionSet(0x{:x})\", self.bits as uint)\n+        format!(\"RestrictionSet(0x{:x})\", self.bits as uint)\n     }\n }\n \n@@ -579,27 +579,27 @@ impl<'a> BorrowckCtxt<'a> {\n             err_mutbl => {\n                 let descr = match opt_loan_path(&err.cmt) {\n                     None => {\n-                        format_strbuf!(\"{} {}\",\n-                                       err.cmt.mutbl.to_user_str(),\n-                                       self.cmt_to_str(&*err.cmt))\n+                        format!(\"{} {}\",\n+                                err.cmt.mutbl.to_user_str(),\n+                                self.cmt_to_str(&*err.cmt))\n                     }\n                     Some(lp) => {\n-                        format_strbuf!(\"{} {} `{}`\",\n-                                       err.cmt.mutbl.to_user_str(),\n-                                       self.cmt_to_str(&*err.cmt),\n-                                       self.loan_path_to_str(&*lp))\n+                        format!(\"{} {} `{}`\",\n+                                err.cmt.mutbl.to_user_str(),\n+                                self.cmt_to_str(&*err.cmt),\n+                                self.loan_path_to_str(&*lp))\n                     }\n                 };\n \n                 match err.cause {\n                     euv::ClosureCapture(_) => {\n-                        format_strbuf!(\"closure cannot assign to {}\", descr)\n+                        format!(\"closure cannot assign to {}\", descr)\n                     }\n                     euv::OverloadedOperator |\n                     euv::AddrOf |\n                     euv::RefBinding |\n                     euv::AutoRef => {\n-                        format_strbuf!(\"cannot borrow {} as mutable\", descr)\n+                        format!(\"cannot borrow {} as mutable\", descr)\n                     }\n                     euv::ClosureInvocation => {\n                         self.tcx.sess.span_bug(err.span,\n@@ -611,20 +611,20 @@ impl<'a> BorrowckCtxt<'a> {\n                 let msg = match opt_loan_path(&err.cmt) {\n                     None => \"borrowed value\".to_string(),\n                     Some(lp) => {\n-                        format_strbuf!(\"`{}`\", self.loan_path_to_str(&*lp))\n+                        format!(\"`{}`\", self.loan_path_to_str(&*lp))\n                     }\n                 };\n-                format_strbuf!(\"{} does not live long enough\", msg)\n+                format!(\"{} does not live long enough\", msg)\n             }\n             err_borrowed_pointer_too_short(..) => {\n                 let descr = match opt_loan_path(&err.cmt) {\n                     Some(lp) => {\n-                        format_strbuf!(\"`{}`\", self.loan_path_to_str(&*lp))\n+                        format!(\"`{}`\", self.loan_path_to_str(&*lp))\n                     }\n                     None => self.cmt_to_str(&*err.cmt),\n                 };\n \n-                format_strbuf!(\"lifetime of {} is too short to guarantee \\\n+                format!(\"lifetime of {} is too short to guarantee \\\n                                 its contents can be safely reborrowed\",\n                                descr)\n             }\n@@ -713,7 +713,7 @@ impl<'a> BorrowckCtxt<'a> {\n             err_borrowed_pointer_too_short(loan_scope, ptr_scope, _) => {\n                 let descr = match opt_loan_path(&err.cmt) {\n                     Some(lp) => {\n-                        format_strbuf!(\"`{}`\", self.loan_path_to_str(&*lp))\n+                        format!(\"`{}`\", self.loan_path_to_str(&*lp))\n                     }\n                     None => self.cmt_to_str(&*err.cmt),\n                 };"}, {"sha": "a6108cbe62ed210305df4c439116ce6e17c59626", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -190,7 +190,7 @@ fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: Vec<@Pat> ) {\n                 ty::ty_vec(..) | ty::ty_rptr(..) => {\n                     match *ctor {\n                         vec(n) => {\n-                            Some(format_strbuf!(\"vectors of length {}\", n))\n+                            Some(format!(\"vectors of length {}\", n))\n                         }\n                         _ => None\n                     }\n@@ -199,8 +199,8 @@ fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: Vec<@Pat> ) {\n             }\n         }\n     };\n-    let msg = format_strbuf!(\"non-exhaustive patterns{}\", match ext {\n-        Some(ref s) => format_strbuf!(\": {} not covered\", *s),\n+    let msg = format!(\"non-exhaustive patterns{}\", match ext {\n+        Some(ref s) => format!(\": {} not covered\", *s),\n         None => \"\".to_string()\n     });\n     cx.tcx.sess.span_err(sp, msg.as_slice());"}, {"sha": "42510f58a144f1056c7d6cf94bc5c3f45fbfcd70", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -49,8 +49,7 @@ fn safe_type_for_static_mut(cx: &ty::ctxt, e: &ast::Expr) -> Option<String> {\n         return None;\n     };\n \n-    Some(format_strbuf!(\"mutable static items are not allowed to have {}\",\n-                        suffix))\n+    Some(format!(\"mutable static items are not allowed to have {}\", suffix))\n }\n \n struct CheckStaticVisitor<'a> {"}, {"sha": "30792da84e05308919180b5dd321a4babcd7e609", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -112,11 +112,8 @@ impl<'a, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, O> {\n                 \"\".to_string()\n             };\n \n-            try!(ps.synth_comment(format_strbuf!(\"id {}: {}{}{}\",\n-                                                 id,\n-                                                 entry_str,\n-                                                 gens_str,\n-                                                 kills_str)));\n+            try!(ps.synth_comment(format!(\"id {}: {}{}{}\", id, entry_str,\n+                                          gens_str, kills_str)));\n             try!(pp::space(&mut ps.s));\n         }\n         Ok(())\n@@ -895,5 +892,5 @@ fn set_bit(words: &mut [uint], bit: uint) -> bool {\n fn bit_str(bit: uint) -> String {\n     let byte = bit >> 8;\n     let lobits = 1 << (bit & 0xFF);\n-    format_strbuf!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n+    format!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n }"}, {"sha": "7bdcb679a59a7c92c3735b08707fb034ae09340e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -361,8 +361,8 @@ impl<'a> DeadVisitor<'a> {\n             .add_lint(DeadCode,\n                       id,\n                       span,\n-                      format_strbuf!(\"code is never used: `{}`\",\n-                                     token::get_ident(ident)));\n+                      format!(\"code is never used: `{}`\",\n+                              token::get_ident(ident)));\n     }\n }\n "}, {"sha": "f80c325496dd43f7b0ffa0303f6b44430cdacade", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -78,8 +78,8 @@ impl LanguageItems {\n         match self.items.get(it as uint) {\n             &Some(id) => Ok(id),\n             &None => {\n-                Err(format_strbuf!(\"requires `{}` lang_item\",\n-                                   LanguageItems::item_name(it as uint)))\n+                Err(format!(\"requires `{}` lang_item\",\n+                            LanguageItems::item_name(it as uint)))\n             }\n         }\n     }"}, {"sha": "beb522802fe1337195c9c4406ba51cc93fe7cefb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -154,13 +154,13 @@ fn live_node_kind_to_str(lnk: LiveNodeKind, cx: &ty::ctxt) -> String {\n     let cm = cx.sess.codemap();\n     match lnk {\n         FreeVarNode(s) => {\n-            format_strbuf!(\"Free var node [{}]\", cm.span_to_str(s))\n+            format!(\"Free var node [{}]\", cm.span_to_str(s))\n         }\n         ExprNode(s) => {\n-            format_strbuf!(\"Expr node [{}]\", cm.span_to_str(s))\n+            format!(\"Expr node [{}]\", cm.span_to_str(s))\n         }\n         VarDefNode(s) => {\n-            format_strbuf!(\"Var def node [{}]\", cm.span_to_str(s))\n+            format!(\"Var def node [{}]\", cm.span_to_str(s))\n         }\n         ExitNode => \"Exit node\".to_string(),\n     }\n@@ -1594,12 +1594,11 @@ impl<'a> Liveness<'a> {\n \n                 if is_assigned {\n                     self.ir.tcx.sess.add_lint(UnusedVariable, id, sp,\n-                        format_strbuf!(\"variable `{}` is assigned to, \\\n-                                        but never used\",\n-                                       *name));\n+                        format!(\"variable `{}` is assigned to, but never used\",\n+                                *name));\n                 } else {\n                     self.ir.tcx.sess.add_lint(UnusedVariable, id, sp,\n-                        format_strbuf!(\"unused variable: `{}`\", *name));\n+                        format!(\"unused variable: `{}`\", *name));\n                 }\n             }\n             true\n@@ -1617,8 +1616,7 @@ impl<'a> Liveness<'a> {\n             let r = self.should_warn(var);\n             for name in r.iter() {\n                 self.ir.tcx.sess.add_lint(DeadAssignment, id, sp,\n-                    format_strbuf!(\"value assigned to `{}` is never read\",\n-                                   *name));\n+                    format!(\"value assigned to `{}` is never read\", *name));\n             }\n         }\n     }"}, {"sha": "3aea6e4b552e19a3f86b7b7a08681f7c90310b35", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1116,8 +1116,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                       \"captured outer variable\".to_string()\n                   }\n                   _ => {\n-                      format_strbuf!(\"dereference of `{}`-pointer\",\n-                                     ptr_sigil(pk))\n+                      format!(\"dereference of `{}`-pointer\", ptr_sigil(pk))\n                   }\n               }\n           }\n@@ -1250,11 +1249,11 @@ impl cmt_ {\n \n impl Repr for cmt_ {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n-        format_strbuf!(\"\\\\{{} id:{} m:{:?} ty:{}\\\\}\",\n-                       self.cat.repr(tcx),\n-                       self.id,\n-                       self.mutbl,\n-                       self.ty.repr(tcx))\n+        format!(\"\\\\{{} id:{} m:{:?} ty:{}\\\\}\",\n+                self.cat.repr(tcx),\n+                self.id,\n+                self.mutbl,\n+                self.ty.repr(tcx))\n     }\n }\n \n@@ -1267,19 +1266,16 @@ impl Repr for categorization {\n             cat_local(..) |\n             cat_upvar(..) |\n             cat_arg(..) => {\n-                format_strbuf!(\"{:?}\", *self)\n+                format!(\"{:?}\", *self)\n             }\n             cat_deref(ref cmt, derefs, ptr) => {\n-                format_strbuf!(\"{}-{}{}->\",\n-                               cmt.cat.repr(tcx),\n-                               ptr_sigil(ptr),\n-                               derefs)\n+                format!(\"{}-{}{}->\", cmt.cat.repr(tcx), ptr_sigil(ptr), derefs)\n             }\n             cat_interior(ref cmt, interior) => {\n-                format_strbuf!(\"{}.{}\", cmt.cat.repr(tcx), interior.repr(tcx))\n+                format!(\"{}.{}\", cmt.cat.repr(tcx), interior.repr(tcx))\n             }\n             cat_downcast(ref cmt) => {\n-                format_strbuf!(\"{}->(enum)\", cmt.cat.repr(tcx))\n+                format!(\"{}->(enum)\", cmt.cat.repr(tcx))\n             }\n             cat_discr(ref cmt, _) => {\n                 cmt.cat.repr(tcx)\n@@ -1305,7 +1301,7 @@ impl Repr for InteriorKind {\n             InteriorField(NamedField(fld)) => {\n                 token::get_name(fld).get().to_str().to_string()\n             }\n-            InteriorField(PositionalField(i)) => format_strbuf!(\"\\\\#{:?}\", i),\n+            InteriorField(PositionalField(i)) => format!(\"\\\\#{:?}\", i),\n             InteriorElement(_) => \"[]\".to_string(),\n         }\n     }"}, {"sha": "5b47336efe5e8ef2181e8f844a5af457444f7858", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -547,9 +547,7 @@ impl<'a> PrivacyVisitor<'a> {\n                      source_did: Option<ast::DefId>, msg: &str) -> CheckResult {\n         let id = match self.def_privacy(to_check) {\n             ExternallyDenied => {\n-                return Some((span,\n-                             format_strbuf!(\"{} is private\", msg),\n-                             None))\n+                return Some((span, format!(\"{} is private\", msg), None))\n             }\n             Allowable => return None,\n             DisallowedBy(id) => id,\n@@ -560,11 +558,9 @@ impl<'a> PrivacyVisitor<'a> {\n         // because the item itself is private or because its parent is private\n         // and its parent isn't in our ancestry.\n         let (err_span, err_msg) = if id == source_did.unwrap_or(to_check).node {\n-            return Some((span,\n-                         format_strbuf!(\"{} is private\", msg),\n-                         None));\n+            return Some((span, format!(\"{} is private\", msg), None));\n         } else {\n-            (span, format_strbuf!(\"{} is inaccessible\", msg))\n+            (span, format!(\"{} is inaccessible\", msg))\n         };\n         let item = match self.tcx.map.find(id) {\n             Some(ast_map::NodeItem(item)) => {\n@@ -600,9 +596,8 @@ impl<'a> PrivacyVisitor<'a> {\n             ast::ItemEnum(..) => \"enum\",\n             _ => return Some((err_span, err_msg, None))\n         };\n-        let msg = format_strbuf!(\"{} `{}` is private\",\n-                                 desc,\n-                                 token::get_ident(item.ident));\n+        let msg = format!(\"{} `{}` is private\", desc,\n+                          token::get_ident(item.ident));\n         Some((err_span, err_msg, Some((span, msg))))\n     }\n "}, {"sha": "bb4c8e5aedda71a860fa67397502411b01dc30e5", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -405,7 +405,7 @@ impl<'a, 'b> Repr for Match<'a, 'b> {\n             // for many programs, this just take too long to serialize\n             self.pats.repr(tcx)\n         } else {\n-            format_strbuf!(\"{} pats\", self.pats.len())\n+            format!(\"{} pats\", self.pats.len())\n         }\n     }\n }"}, {"sha": "db19fa521ce31cb4bb54a864b81af776b714ce52", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -72,7 +72,7 @@ pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)\n \n     let mut clobbers = getClobbers();\n     if !ia.clobbers.get().is_empty() && !clobbers.is_empty() {\n-        clobbers = format_strbuf!(\"{},{}\", ia.clobbers.get(), clobbers);\n+        clobbers = format!(\"{},{}\", ia.clobbers.get(), clobbers);\n     } else {\n         clobbers.push_str(ia.clobbers.get());\n     }"}, {"sha": "386ad66ebd6c4640555e760f1e4125da8e6d613c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -698,10 +698,9 @@ pub fn iter_structural_ty<'r,\n                   for variant in (*variants).iter() {\n                       let variant_cx =\n                           fcx.new_temp_block(\n-                              format_strbuf!(\"enum-iter-variant-{}\",\n-                                             variant.disr_val\n-                                                    .to_str()\n-                                                    .as_slice()).as_slice());\n+                              format!(\"enum-iter-variant-{}\",\n+                                      variant.disr_val.to_str().as_slice())\n+                                     .as_slice());\n                       match adt::trans_case(cx, &*repr, variant.disr_val) {\n                           _match::single_result(r) => {\n                               AddCase(llswitch, r.val, variant_cx.llbb)"}, {"sha": "47d8ecec021309ac024d77a8e47bc1ee14383e51", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -763,9 +763,9 @@ impl<'a> CleanupScope<'a> {\n          */\n \n         match self.kind {\n-            CustomScopeKind => format_strbuf!(\"{}_custom_\", prefix),\n-            AstScopeKind(id) => format_strbuf!(\"{}_ast_{}_\", prefix, id),\n-            LoopScopeKind(id, _) => format_strbuf!(\"{}_loop_{}_\", prefix, id),\n+            CustomScopeKind => format!(\"{}_custom_\", prefix),\n+            AstScopeKind(id) => format!(\"{}_ast_{}_\", prefix, id),\n+            LoopScopeKind(id, _) => format!(\"{}_loop_{}_\", prefix, id),\n         }\n     }\n }"}, {"sha": "9e8d6926f12e1e1f12eb3d920b714b31bd5aa87d", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -105,7 +105,7 @@ pub struct EnvValue {\n \n impl EnvValue {\n     pub fn to_str(&self, ccx: &CrateContext) -> String {\n-        format_strbuf!(\"{}({})\", self.action, self.datum.to_str(ccx))\n+        format!(\"{}({})\", self.action, self.datum.to_str(ccx))\n     }\n }\n "}, {"sha": "adee9d06d1d77a7fc34c5b2766cc3ffcb9ecdb69", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -195,7 +195,7 @@ impl param_substs {\n }\n \n fn param_substs_to_str(this: &param_substs, tcx: &ty::ctxt) -> String {\n-    format_strbuf!(\"param_substs({})\", this.substs.repr(tcx))\n+    format!(\"param_substs({})\", this.substs.repr(tcx))\n }\n \n impl Repr for param_substs {\n@@ -478,7 +478,7 @@ impl<'a> Block<'a> {\n \n     pub fn to_str(&self) -> String {\n         let blk: *Block = self;\n-        format_strbuf!(\"[block {}]\", blk)\n+        format!(\"[block {}]\", blk)\n     }\n }\n "}, {"sha": "1e0d3e16ab12d2ceee223e825b39a6e2c8454759", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -625,10 +625,10 @@ impl<K:KindOps> Datum<K> {\n \n     #[allow(dead_code)] // useful for debugging\n     pub fn to_str(&self, ccx: &CrateContext) -> String {\n-        format_strbuf!(\"Datum({}, {}, {:?})\",\n-                       ccx.tn.val_to_str(self.val),\n-                       ty_to_str(ccx.tcx(), self.ty),\n-                       self.kind)\n+        format!(\"Datum({}, {}, {:?})\",\n+                ccx.tn.val_to_str(self.val),\n+                ty_to_str(ccx.tcx(), self.ty),\n+                self.kind)\n     }\n \n     pub fn appropriate_rvalue_mode(&self, ccx: &CrateContext) -> RvalueMode {"}, {"sha": "c1d63286b214b99039c945f2fbec0c5fd69486da", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -2342,9 +2342,8 @@ fn cache_id_for_type(t: ty::t) -> uint {\n fn generate_unique_type_id(prefix: &'static str) -> String {\n     unsafe {\n         static mut unique_id_counter: atomics::AtomicUint = atomics::INIT_ATOMIC_UINT;\n-        format_strbuf!(\"{}{}\",\n-                       prefix,\n-                       unique_id_counter.fetch_add(1, atomics::SeqCst))\n+        format!(\"{}{}\", prefix,\n+                unique_id_counter.fetch_add(1, atomics::SeqCst))\n     }\n }\n "}, {"sha": "b551b9b1fd7cc70c53c8caaaa829274a0fc014e1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -88,7 +88,7 @@ pub enum Dest {\n impl Dest {\n     pub fn to_str(&self, ccx: &CrateContext) -> String {\n         match *self {\n-            SaveIn(v) => format_strbuf!(\"SaveIn({})\", ccx.tn.val_to_str(v)),\n+            SaveIn(v) => format!(\"SaveIn({})\", ccx.tn.val_to_str(v)),\n             Ignore => \"Ignore\".to_string()\n         }\n     }"}, {"sha": "80ccf810e5a93b7d3981cf0b5fb2102e66b8161e", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -474,9 +474,7 @@ fn make_generic_glue(ccx: &CrateContext,\n                      name: &str)\n                      -> ValueRef {\n     let _icx = push_ctxt(\"make_generic_glue\");\n-    let glue_name = format_strbuf!(\"glue {} {}\",\n-                                   name,\n-                                   ty_to_short_str(ccx.tcx(), t));\n+    let glue_name = format!(\"glue {} {}\", name, ty_to_short_str(ccx.tcx(), t));\n     let _s = StatRecorder::new(ccx, glue_name);\n \n     let arena = TypedArena::new();"}, {"sha": "3cd1a59abef38c1a56b5b06f34f9cf71afc23151", "filename": "src/librustc/middle/trans/llrepr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fllrepr.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -19,7 +19,7 @@ pub trait LlvmRepr {\n impl<'a, T:LlvmRepr> LlvmRepr for &'a [T] {\n     fn llrepr(&self, ccx: &CrateContext) -> String {\n         let reprs: Vec<String> = self.iter().map(|t| t.llrepr(ccx)).collect();\n-        format_strbuf!(\"[{}]\", reprs.connect(\",\"))\n+        format!(\"[{}]\", reprs.connect(\",\"))\n     }\n }\n "}, {"sha": "f77cd0ee44d9ac1cd2b617eeae9b27b926a9a555", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -109,10 +109,10 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ccx.sess(),\n         ccx.tcx.map.find(fn_id.node),\n         || {\n-            format_strbuf!(\"while monomorphizing {:?}, couldn't find it in \\\n-                            the item map (may have attempted to monomorphize \\\n-                            an item defined in a different crate?)\",\n-                           fn_id)\n+            format!(\"while monomorphizing {:?}, couldn't find it in \\\n+                     the item map (may have attempted to monomorphize \\\n+                     an item defined in a different crate?)\",\n+                    fn_id)\n         });\n \n     match map_node {"}, {"sha": "446d2967139c1326d1b76df96c435ac3fd82e430", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -74,12 +74,12 @@ pub struct VecTypes {\n \n impl VecTypes {\n     pub fn to_str(&self, ccx: &CrateContext) -> String {\n-        format_strbuf!(\"VecTypes \\\\{unit_ty={}, llunit_ty={}, \\\n-                        llunit_size={}, llunit_alloc_size={}\\\\}\",\n-                       ty_to_str(ccx.tcx(), self.unit_ty),\n-                       ccx.tn.type_to_str(self.llunit_ty),\n-                       ccx.tn.val_to_str(self.llunit_size),\n-                       self.llunit_alloc_size)\n+        format!(\"VecTypes \\\\{unit_ty={}, llunit_ty={}, \\\n+                 llunit_size={}, llunit_alloc_size={}\\\\}\",\n+                ty_to_str(ccx.tcx(), self.unit_ty),\n+                ccx.tn.type_to_str(self.llunit_ty),\n+                ccx.tn.val_to_str(self.llunit_size),\n+                self.llunit_alloc_size)\n     }\n }\n "}, {"sha": "0f28ce4d972be4d4d9ea37375645e0538e926147", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -316,9 +316,9 @@ pub fn llvm_type_name(cx: &CrateContext,\n                                     did,\n                                     false);\n     if did.krate == 0 {\n-        format_strbuf!(\"{}.{}\", name, tstr)\n+        format!(\"{}.{}\", name, tstr)\n     } else {\n-        format_strbuf!(\"{}.{}[\\\\#{}]\", name, tstr, did.krate)\n+        format!(\"{}.{}[\\\\#{}]\", name, tstr, did.krate)\n     }\n }\n "}, {"sha": "07033d2bd4a665d0bc959ab2cf335cd7457a18c0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 62, "deletions": 71, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -3236,7 +3236,7 @@ pub fn ty_sort_str(cx: &ctxt, t: t) -> String {\n             ::util::ppaux::ty_to_str(cx, t)\n         }\n \n-        ty_enum(id, _) => format_strbuf!(\"enum {}\", item_path_str(cx, id)),\n+        ty_enum(id, _) => format!(\"enum {}\", item_path_str(cx, id)),\n         ty_box(_) => \"@-ptr\".to_string(),\n         ty_uniq(_) => \"box\".to_string(),\n         ty_vec(_, _) => \"vector\".to_string(),\n@@ -3245,10 +3245,10 @@ pub fn ty_sort_str(cx: &ctxt, t: t) -> String {\n         ty_bare_fn(_) => \"extern fn\".to_string(),\n         ty_closure(_) => \"fn\".to_string(),\n         ty_trait(ref inner) => {\n-            format_strbuf!(\"trait {}\", item_path_str(cx, inner.def_id))\n+            format!(\"trait {}\", item_path_str(cx, inner.def_id))\n         }\n         ty_struct(id, _) => {\n-            format_strbuf!(\"struct {}\", item_path_str(cx, id))\n+            format!(\"struct {}\", item_path_str(cx, id))\n         }\n         ty_tup(_) => \"tuple\".to_string(),\n         ty_infer(TyVar(_)) => \"inferred type\".to_string(),\n@@ -3280,24 +3280,24 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n     match *err {\n         terr_mismatch => \"types differ\".to_string(),\n         terr_fn_style_mismatch(values) => {\n-            format_strbuf!(\"expected {} fn but found {} fn\",\n-                           values.expected.to_str(),\n-                           values.found.to_str())\n+            format!(\"expected {} fn but found {} fn\",\n+                    values.expected.to_str(),\n+                    values.found.to_str())\n         }\n         terr_abi_mismatch(values) => {\n-            format_strbuf!(\"expected {} fn but found {} fn\",\n-                           values.expected.to_str(),\n-                           values.found.to_str())\n+            format!(\"expected {} fn but found {} fn\",\n+                    values.expected.to_str(),\n+                    values.found.to_str())\n         }\n         terr_onceness_mismatch(values) => {\n-            format_strbuf!(\"expected {} fn but found {} fn\",\n-                           values.expected.to_str(),\n-                           values.found.to_str())\n+            format!(\"expected {} fn but found {} fn\",\n+                    values.expected.to_str(),\n+                    values.found.to_str())\n         }\n         terr_sigil_mismatch(values) => {\n-            format_strbuf!(\"expected {}, found {}\",\n-                           tstore_to_closure(&values.expected),\n-                           tstore_to_closure(&values.found))\n+            format!(\"expected {}, found {}\",\n+                    tstore_to_closure(&values.expected),\n+                    tstore_to_closure(&values.found))\n         }\n         terr_mutability => \"values differ in mutability\".to_string(),\n         terr_box_mutability => {\n@@ -3307,31 +3307,31 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n         terr_ptr_mutability => \"pointers differ in mutability\".to_string(),\n         terr_ref_mutability => \"references differ in mutability\".to_string(),\n         terr_ty_param_size(values) => {\n-            format_strbuf!(\"expected a type with {} type params \\\n-                            but found one with {} type params\",\n-                           values.expected,\n-                           values.found)\n+            format!(\"expected a type with {} type params \\\n+                     but found one with {} type params\",\n+                    values.expected,\n+                    values.found)\n         }\n         terr_tuple_size(values) => {\n-            format_strbuf!(\"expected a tuple with {} elements \\\n-                            but found one with {} elements\",\n-                           values.expected,\n-                           values.found)\n+            format!(\"expected a tuple with {} elements \\\n+                     but found one with {} elements\",\n+                    values.expected,\n+                    values.found)\n         }\n         terr_record_size(values) => {\n-            format_strbuf!(\"expected a record with {} fields \\\n-                            but found one with {} fields\",\n-                           values.expected,\n-                           values.found)\n+            format!(\"expected a record with {} fields \\\n+                     but found one with {} fields\",\n+                    values.expected,\n+                    values.found)\n         }\n         terr_record_mutability => {\n             \"record elements differ in mutability\".to_string()\n         }\n         terr_record_fields(values) => {\n-            format_strbuf!(\"expected a record with field `{}` but found one \\\n-                            with field `{}`\",\n-                           token::get_ident(values.expected),\n-                           token::get_ident(values.found))\n+            format!(\"expected a record with field `{}` but found one \\\n+                     with field `{}`\",\n+                    token::get_ident(values.expected),\n+                    token::get_ident(values.found))\n         }\n         terr_arg_count => {\n             \"incorrect number of function parameters\".to_string()\n@@ -3346,69 +3346,60 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n             \"lifetimes do not intersect\".to_string()\n         }\n         terr_regions_insufficiently_polymorphic(br, _) => {\n-            format_strbuf!(\"expected bound lifetime parameter {}, \\\n-                            but found concrete lifetime\",\n-                           bound_region_ptr_to_str(cx, br))\n+            format!(\"expected bound lifetime parameter {}, \\\n+                     but found concrete lifetime\",\n+                    bound_region_ptr_to_str(cx, br))\n         }\n         terr_regions_overly_polymorphic(br, _) => {\n-            format_strbuf!(\"expected concrete lifetime, \\\n-                            but found bound lifetime parameter {}\",\n-                           bound_region_ptr_to_str(cx, br))\n+            format!(\"expected concrete lifetime, \\\n+                     but found bound lifetime parameter {}\",\n+                    bound_region_ptr_to_str(cx, br))\n         }\n         terr_trait_stores_differ(_, ref values) => {\n-            format_strbuf!(\"trait storage differs: expected `{}` but found \\\n-                            `{}`\",\n-                           trait_store_to_str(cx, (*values).expected),\n-                           trait_store_to_str(cx, (*values).found))\n+            format!(\"trait storage differs: expected `{}` but found `{}`\",\n+                    trait_store_to_str(cx, (*values).expected),\n+                    trait_store_to_str(cx, (*values).found))\n         }\n         terr_sorts(values) => {\n-            format_strbuf!(\"expected {} but found {}\",\n-                           ty_sort_str(cx, values.expected),\n-                           ty_sort_str(cx, values.found))\n+            format!(\"expected {} but found {}\",\n+                    ty_sort_str(cx, values.expected),\n+                    ty_sort_str(cx, values.found))\n         }\n         terr_traits(values) => {\n-            format_strbuf!(\"expected trait `{}` but found trait `{}`\",\n-                           item_path_str(cx, values.expected),\n-                           item_path_str(cx, values.found))\n+            format!(\"expected trait `{}` but found trait `{}`\",\n+                    item_path_str(cx, values.expected),\n+                    item_path_str(cx, values.found))\n         }\n         terr_builtin_bounds(values) => {\n             if values.expected.is_empty() {\n-                format_strbuf!(\"expected no bounds but found `{}`\",\n-                               values.found.user_string(cx))\n+                format!(\"expected no bounds but found `{}`\",\n+                        values.found.user_string(cx))\n             } else if values.found.is_empty() {\n-                format_strbuf!(\"expected bounds `{}` but found no bounds\",\n-                               values.expected.user_string(cx))\n+                format!(\"expected bounds `{}` but found no bounds\",\n+                        values.expected.user_string(cx))\n             } else {\n-                format_strbuf!(\"expected bounds `{}` but found bounds `{}`\",\n-                               values.expected.user_string(cx),\n-                               values.found.user_string(cx))\n+                format!(\"expected bounds `{}` but found bounds `{}`\",\n+                        values.expected.user_string(cx),\n+                        values.found.user_string(cx))\n             }\n         }\n         terr_integer_as_char => {\n             \"expected an integral type but found `char`\".to_string()\n         }\n         terr_int_mismatch(ref values) => {\n-            format_strbuf!(\"expected `{}` but found `{}`\",\n-                           values.expected.to_str(),\n-                           values.found.to_str())\n+            format!(\"expected `{}` but found `{}`\",\n+                    values.expected.to_str(),\n+                    values.found.to_str())\n         }\n         terr_float_mismatch(ref values) => {\n-            format_strbuf!(\"expected `{}` but found `{}`\",\n-                           values.expected.to_str(),\n-                           values.found.to_str())\n+            format!(\"expected `{}` but found `{}`\",\n+                    values.expected.to_str(),\n+                    values.found.to_str())\n         }\n         terr_variadic_mismatch(ref values) => {\n-            format_strbuf!(\"expected {} fn but found {} function\",\n-                           if values.expected {\n-                                \"variadic\"\n-                           } else {\n-                                \"non-variadic\"\n-                           },\n-                           if values.found {\n-                               \"variadic\"\n-                           } else {\n-                               \"non-variadic\"\n-                           })\n+            format!(\"expected {} fn but found {} function\",\n+                    if values.expected { \"variadic\" } else { \"non-variadic\" },\n+                    if values.found { \"variadic\" } else { \"non-variadic\" })\n         }\n     }\n }"}, {"sha": "3d3d15baf8455cadd8ec6a7b0a3c07133305e871", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -167,10 +167,8 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                     fcx.infcx().type_error_message_str_with_expected(pat.span,\n                                                        |expected, actual| {\n                        expected.map_or(\"\".to_string(), |e| {\n-                        format_strbuf!(\"mismatched types: expected `{}` but \\\n-                                        found {}\",\n-                                       e,\n-                                       actual)\n+                        format!(\"mismatched types: expected `{}` but found {}\",\n+                                e, actual)\n                         })},\n                         Some(expected),\n                         \"a structure pattern\".to_string(),\n@@ -223,10 +221,8 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                                                |expected, actual| {\n                                                expected.map_or(\"\".to_string(),\n                                                               |e| {\n-                        format_strbuf!(\"mismatched types: expected `{}` but \\\n-                                        found {}\",\n-                                       e,\n-                                       actual)\n+                        format!(\"mismatched types: expected `{}` but found {}\",\n+                                e, actual)\n                     })\n                 },\n                 Some(expected),\n@@ -555,10 +551,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                                                 |expected, actual| {\n                             expected.map_or(\"\".to_string(),\n                                             |e| {\n-                                format_strbuf!(\"mismatched types: expected \\\n-                                                `{}` but found {}\",\n-                                               e,\n-                                               actual)\n+                                format!(\"mismatched types: expected \\\n+                                        `{}` but found {}\", e, actual)\n                             })},\n                             Some(expected),\n                             \"a structure pattern\".to_string(),\n@@ -621,10 +615,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                                                  |expected,\n                                                                   actual| {\n                         expected.map_or(\"\".to_string(), |e| {\n-                            format_strbuf!(\"mismatched types: expected `{}` \\\n-                                            but found {}\",\n-                                           e,\n-                                           actual)\n+                            format!(\"mismatched types: expected `{}` \\\n+                                     but found {}\", e, actual)\n                         }\n                     )},\n                     Some(expected),\n@@ -661,10 +653,8 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                 |expected, actual| {\n                     expected.map_or(\"\".to_string(),\n                                     |e| {\n-                        format_strbuf!(\"mismatched types: expected `{}` but \\\n-                                        found {}\",\n-                                       e,\n-                                       actual)\n+                        format!(\"mismatched types: expected `{}` but found {}\",\n+                                e, actual)\n                     })\n                 },\n                 Some(expected),\n@@ -751,14 +741,12 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n                 span,\n                 |expected, actual| {\n                     expected.map_or(\"\".to_string(), |e| {\n-                        format_strbuf!(\"mismatched types: expected `{}` but \\\n-                                        found {}\",\n-                                       e,\n-                                       actual)\n+                        format!(\"mismatched types: expected `{}` but found {}\",\n+                                e, actual)\n                     })\n                 },\n                 Some(expected),\n-                format_strbuf!(\"{} pattern\", match pointer_kind {\n+                format!(\"{} pattern\", match pointer_kind {\n                     Send => \"a box\",\n                     Borrowed => \"an `&`-pointer\",\n                 }),"}, {"sha": "ec2fa0dab5512865918595aa6a9b630a73cbae3b", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1510,23 +1510,23 @@ impl<'a> LookupContext<'a> {\n \n impl Repr for Candidate {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n-        format_strbuf!(\"Candidate(rcvr_ty={}, rcvr_substs={}, method_ty={}, \\\n-                        origin={:?})\",\n-                       self.rcvr_match_condition.repr(tcx),\n-                       self.rcvr_substs.repr(tcx),\n-                       self.method_ty.repr(tcx),\n-                       self.origin)\n+        format!(\"Candidate(rcvr_ty={}, rcvr_substs={}, method_ty={}, \\\n+                 origin={:?})\",\n+                self.rcvr_match_condition.repr(tcx),\n+                self.rcvr_substs.repr(tcx),\n+                self.method_ty.repr(tcx),\n+                self.origin)\n     }\n }\n \n impl Repr for RcvrMatchCondition {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match *self {\n             RcvrMatchesIfObject(d) => {\n-                format_strbuf!(\"RcvrMatchesIfObject({})\", d.repr(tcx))\n+                format!(\"RcvrMatchesIfObject({})\", d.repr(tcx))\n             }\n             RcvrMatchesIfSubtype(t) => {\n-                format_strbuf!(\"RcvrMatchesIfSubtype({})\", t.repr(tcx))\n+                format!(\"RcvrMatchesIfSubtype({})\", t.repr(tcx))\n             }\n         }\n     }"}, {"sha": "f3881abead2489a49629ba54a9bcf80a7ce90ce0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 60, "deletions": 74, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1101,7 +1101,7 @@ impl<'a> RegionScope for infer::InferCtxt<'a> {\n \n impl<'a> FnCtxt<'a> {\n     pub fn tag(&self) -> String {\n-        format_strbuf!(\"{}\", self as *FnCtxt)\n+        format!(\"{}\", self as *FnCtxt)\n     }\n \n     pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> ty::t {\n@@ -1877,21 +1877,21 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     ty::ty_float(ast::TyF32) => {\n                         fcx.type_error_message(arg.span,\n                                                |t| {\n-                            format_strbuf!(\"can't pass an {} to variadic \\\n-                                            function, cast to c_double\", t)\n+                            format!(\"can't pass an {} to variadic \\\n+                                     function, cast to c_double\", t)\n                         }, arg_ty, None);\n                     }\n                     ty::ty_int(ast::TyI8) | ty::ty_int(ast::TyI16) | ty::ty_bool => {\n                         fcx.type_error_message(arg.span, |t| {\n-                            format_strbuf!(\"can't pass {} to variadic \\\n-                                            function, cast to c_int\",\n+                            format!(\"can't pass {} to variadic \\\n+                                     function, cast to c_int\",\n                                            t)\n                         }, arg_ty, None);\n                     }\n                     ty::ty_uint(ast::TyU8) | ty::ty_uint(ast::TyU16) => {\n                         fcx.type_error_message(arg.span, |t| {\n-                            format_strbuf!(\"can't pass {} to variadic \\\n-                                            function, cast to c_uint\",\n+                            format!(\"can't pass {} to variadic \\\n+                                     function, cast to c_uint\",\n                                            t)\n                         }, arg_ty, None);\n                     }\n@@ -1939,7 +1939,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             ty::ty_closure(box ty::ClosureTy {sig: ref sig, ..}) => sig,\n             _ => {\n                 fcx.type_error_message(call_expr.span, |actual| {\n-                    format_strbuf!(\"expected function but found `{}`\", actual)\n+                    format!(\"expected function but found `{}`\", actual)\n                 }, fn_ty, None);\n                 &error_fn_sig\n             }\n@@ -1993,10 +1993,10 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n                 fcx.type_error_message(method_name.span,\n                   |actual| {\n-                      format_strbuf!(\"type `{}` does not implement any \\\n-                                      method in scope named `{}`\",\n-                                     actual,\n-                                     token::get_ident(method_name.node))\n+                      format!(\"type `{}` does not implement any \\\n+                               method in scope named `{}`\",\n+                              actual,\n+                              token::get_ident(method_name.node))\n                   },\n                   expr_t,\n                   None);\n@@ -2148,12 +2148,12 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         if ty::type_is_fp(ty::simd_type(tcx, lhs_t)) {\n                             fcx.type_error_message(expr.span,\n                                 |actual| {\n-                                    format_strbuf!(\"binary comparison \\\n-                                                    operation `{}` not \\\n-                                                    supported for floating \\\n-                                                    point SIMD vector `{}`\",\n-                                                   ast_util::binop_to_str(op),\n-                                                   actual)\n+                                    format!(\"binary comparison \\\n+                                             operation `{}` not \\\n+                                             supported for floating \\\n+                                             point SIMD vector `{}`\",\n+                                            ast_util::binop_to_str(op),\n+                                            actual)\n                                 },\n                                 lhs_t,\n                                 None\n@@ -2180,10 +2180,10 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_error(rhs.id);\n             fcx.type_error_message(expr.span,\n                                    |actual| {\n-                    format_strbuf!(\"binary operation `{}` cannot be applied \\\n-                                   to type `{}`\",\n-                                   ast_util::binop_to_str(op),\n-                                   actual)\n+                    format!(\"binary operation `{}` cannot be applied \\\n+                             to type `{}`\",\n+                            ast_util::binop_to_str(op),\n+                            actual)\n                 },\n                 lhs_t,\n                 None)\n@@ -2195,12 +2195,12 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         } else {\n             fcx.type_error_message(expr.span,\n                                    |actual| {\n-                                        format_strbuf!(\"binary assignment \\\n-                                                        operation `{}=` \\\n-                                                        cannot be applied to \\\n-                                                        type `{}`\",\n-                                                 ast_util::binop_to_str(op),\n-                                                 actual)\n+                                        format!(\"binary assignment \\\n+                                                 operation `{}=` \\\n+                                                 cannot be applied to \\\n+                                                 type `{}`\",\n+                                                ast_util::binop_to_str(op),\n+                                                actual)\n                                    },\n                                    lhs_t,\n                                    None);\n@@ -2247,10 +2247,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         lookup_op_method(fcx, ex, lhs_resolved_t, token::intern(name),\n                          trait_did, [lhs_expr, rhs], DontAutoderefReceiver, || {\n             fcx.type_error_message(ex.span, |actual| {\n-                format_strbuf!(\"binary operation `{}` cannot be applied to \\\n-                                type `{}`\",\n-                               ast_util::binop_to_str(op),\n-                               actual)\n+                format!(\"binary operation `{}` cannot be applied to type `{}`\",\n+                        ast_util::binop_to_str(op),\n+                        actual)\n             }, lhs_resolved_t, None)\n         })\n     }\n@@ -2265,10 +2264,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n        lookup_op_method(fcx, ex, rhs_t, token::intern(mname),\n                         trait_did, [rhs_expr], DontAutoderefReceiver, || {\n             fcx.type_error_message(ex.span, |actual| {\n-                format_strbuf!(\"cannot apply unary operator `{}` to type \\\n-                                `{}`\",\n-                               op_str,\n-                               actual)\n+                format!(\"cannot apply unary operator `{}` to type `{}`\",\n+                        op_str, actual)\n             }, rhs_t, None);\n         })\n     }\n@@ -2427,10 +2424,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 fcx.type_error_message(\n                     expr.span,\n                     |actual| {\n-                        format_strbuf!(\"attempted to take value of method \\\n-                                        `{}` on type `{}`\",\n-                                       token::get_name(field),\n-                                       actual)\n+                        format!(\"attempted to take value of method `{}` on type \\\n+                                 `{}`\", token::get_name(field), actual)\n                     },\n                     expr_t, None);\n \n@@ -2442,7 +2437,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 fcx.type_error_message(\n                     expr.span,\n                     |actual| {\n-                        format_strbuf!(\"attempted access of field `{}` on \\\n+                        format!(\"attempted access of field `{}` on \\\n                                         type `{}`, but no field with that \\\n                                         name was found\",\n                                        token::get_name(field),\n@@ -2484,10 +2479,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     fcx.type_error_message(\n                       field.ident.span,\n                       |actual| {\n-                          format_strbuf!(\"structure `{}` has no field named \\\n-                                          `{}`\",\n-                                         actual,\n-                                         token::get_ident(field.ident.node))\n+                          format!(\"structure `{}` has no field named `{}`\",\n+                                  actual, token::get_ident(field.ident.node))\n                       },\n                       struct_ty,\n                       None);\n@@ -2876,9 +2869,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                          no longer be dereferenced\");\n                                 } else {\n                                     fcx.type_error_message(expr.span, |actual| {\n-                                        format_strbuf!(\"type `{}` cannot be \\\n-                                                        dereferenced\",\n-                                                       actual)\n+                                        format!(\"type `{}` cannot be \\\n+                                                dereferenced\", actual)\n                                     }, oprnd_t, None);\n                                 }\n                                 ty::mk_err()\n@@ -3119,15 +3111,15 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 _ => {\n                     if ty::type_is_nil(t_e) {\n                         fcx.type_error_message(expr.span, |actual| {\n-                            format_strbuf!(\"cast from nil: `{}` as `{}`\",\n-                                           actual,\n-                                           fcx.infcx().ty_to_str(t_1))\n+                            format!(\"cast from nil: `{}` as `{}`\",\n+                                    actual,\n+                                    fcx.infcx().ty_to_str(t_1))\n                         }, t_e, None);\n                     } else if ty::type_is_nil(t_1) {\n                         fcx.type_error_message(expr.span, |actual| {\n-                            format_strbuf!(\"cast to nil: `{}` as `{}`\",\n-                                           actual,\n-                                           fcx.infcx().ty_to_str(t_1))\n+                            format!(\"cast to nil: `{}` as `{}`\",\n+                                    actual,\n+                                    fcx.infcx().ty_to_str(t_1))\n                         }, t_e, None);\n                     }\n \n@@ -3147,9 +3139,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         let te = fcx.infcx().resolve_type_vars_if_possible(te);\n                         if ty::get(te).sty != ty::ty_uint(ast::TyU8) {\n                             fcx.type_error_message(expr.span, |actual| {\n-                                format_strbuf!(\"only `u8` can be cast as \\\n-                                                `char`, not `{}`\",\n-                                               actual)\n+                                format!(\"only `u8` can be cast as \\\n+                                         `char`, not `{}`\", actual)\n                             }, t_e, None);\n                         }\n                     } else if ty::get(t1).sty == ty::ty_bool {\n@@ -3211,9 +3202,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         record the issue number in this comment.\n                         */\n                         fcx.type_error_message(expr.span, |actual| {\n-                            format_strbuf!(\"non-scalar cast: `{}` as `{}`\",\n-                                           actual,\n-                                           fcx.infcx().ty_to_str(t_1))\n+                            format!(\"non-scalar cast: `{}` as `{}`\",\n+                                    actual,\n+                                    fcx.infcx().ty_to_str(t_1))\n                         }, t_e, None);\n                     }\n                 }\n@@ -3332,12 +3323,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                                     || {\n                         fcx.type_error_message(expr.span,\n                                                |actual| {\n-                                                    format_strbuf!(\"cannot \\\n-                                                                    index a \\\n-                                                                    value of \\\n-                                                                    type \\\n-                                                                    `{}`\",\n-                                                                    actual)\n+                                                    format!(\"cannot index a \\\n+                                                             value of type \\\n+                                                             `{}`\", actual)\n                                                },\n                                                base_t,\n                                                None);\n@@ -3364,19 +3352,17 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n pub fn require_uint(fcx: &FnCtxt, sp: Span, t: ty::t) {\n     if !type_is_uint(fcx, sp, t) {\n         fcx.type_error_message(sp, |actual| {\n-            format_strbuf!(\"mismatched types: expected `uint` type but found \\\n-                           `{}`\",\n-                           actual)\n+            format!(\"mismatched types: expected `uint` type but found `{}`\",\n+                    actual)\n         }, t, None);\n     }\n }\n \n pub fn require_integral(fcx: &FnCtxt, sp: Span, t: ty::t) {\n     if !type_is_integral(fcx, sp, t) {\n         fcx.type_error_message(sp, |actual| {\n-            format_strbuf!(\"mismatched types: expected integral type but \\\n-                            found `{}`\",\n-                           actual)\n+            format!(\"mismatched types: expected integral type but found `{}`\",\n+                    actual)\n         }, t, None);\n     }\n }\n@@ -4513,8 +4499,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                            i_ty.ty,\n                            fty,\n                            || {\n-                format_strbuf!(\"intrinsic has wrong type: expected `{}`\",\n-                               ppaux::ty_to_str(ccx.tcx, fty))\n+                format!(\"intrinsic has wrong type: expected `{}`\",\n+                        ppaux::ty_to_str(ccx.tcx, fty))\n             });\n     }\n }"}, {"sha": "ec7f42313bb8dcb354906d9f736467dbc1cf7a41", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -395,9 +395,9 @@ impl<'a> ErrorReporting for InferCtxt<'a> {\n             return None;\n         }\n \n-        Some(format_strbuf!(\"expected `{}` but found `{}`\",\n-                            expected.user_string(self.tcx),\n-                            found.user_string(self.tcx)))\n+        Some(format!(\"expected `{}` but found `{}`\",\n+                     expected.user_string(self.tcx),\n+                     found.user_string(self.tcx)))\n     }\n \n     fn report_concrete_failure(&self,"}, {"sha": "e073d4fcbd77838270e05c53e98ad4c5893a384e", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 42, "deletions": 52, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -252,10 +252,8 @@ pub fn fixup_err_to_str(f: fixup_err) -> String {\n       cyclic_ty(_) => \"cyclic type of infinite size\".to_string(),\n       unresolved_region(_) => \"unconstrained region\".to_string(),\n       region_var_bound_by_region_var(r1, r2) => {\n-        format_strbuf!(\"region var {:?} bound by another region var {:?}; \\\n-                        this is a bug in rustc\",\n-                       r1,\n-                       r2)\n+        format!(\"region var {:?} bound by another region var {:?}; \\\n+                 this is a bug in rustc\", r1, r2)\n       }\n     }\n }\n@@ -657,7 +655,7 @@ impl<'a> InferCtxt<'a> {\n \n     pub fn tys_to_str(&self, ts: &[ty::t]) -> String {\n         let tstrs: Vec<String> = ts.iter().map(|t| self.ty_to_str(*t)).collect();\n-        format_strbuf!(\"({})\", tstrs.connect(\", \"))\n+        format!(\"({})\", tstrs.connect(\", \"))\n     }\n \n     pub fn trait_ref_to_str(&self, t: &ty::TraitRef) -> String {\n@@ -786,10 +784,9 @@ impl<'a> InferCtxt<'a> {\n             _ => {\n                 // if I leave out : String, it infers &str and complains\n                 |actual: String| {\n-                    format_strbuf!(\"mismatched types: expected `{}` but \\\n-                                    found `{}`\",\n-                                   self.ty_to_str(resolved_expected),\n-                                   actual)\n+                    format!(\"mismatched types: expected `{}` but found `{}`\",\n+                            self.ty_to_str(resolved_expected),\n+                            actual)\n                 }\n             }\n         };\n@@ -830,7 +827,7 @@ impl TypeTrace {\n \n impl Repr for TypeTrace {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n-        format_strbuf!(\"TypeTrace({})\", self.origin.repr(tcx))\n+        format!(\"TypeTrace({})\", self.origin.repr(tcx))\n     }\n }\n \n@@ -852,23 +849,23 @@ impl Repr for TypeOrigin {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match *self {\n             MethodCompatCheck(a) => {\n-                format_strbuf!(\"MethodCompatCheck({})\", a.repr(tcx))\n+                format!(\"MethodCompatCheck({})\", a.repr(tcx))\n             }\n             ExprAssignable(a) => {\n-                format_strbuf!(\"ExprAssignable({})\", a.repr(tcx))\n+                format!(\"ExprAssignable({})\", a.repr(tcx))\n             }\n-            Misc(a) => format_strbuf!(\"Misc({})\", a.repr(tcx)),\n+            Misc(a) => format!(\"Misc({})\", a.repr(tcx)),\n             RelateTraitRefs(a) => {\n-                format_strbuf!(\"RelateTraitRefs({})\", a.repr(tcx))\n+                format!(\"RelateTraitRefs({})\", a.repr(tcx))\n             }\n             RelateSelfType(a) => {\n-                format_strbuf!(\"RelateSelfType({})\", a.repr(tcx))\n+                format!(\"RelateSelfType({})\", a.repr(tcx))\n             }\n             MatchExpression(a) => {\n-                format_strbuf!(\"MatchExpression({})\", a.repr(tcx))\n+                format!(\"MatchExpression({})\", a.repr(tcx))\n             }\n             IfExpression(a) => {\n-                format_strbuf!(\"IfExpression({})\", a.repr(tcx))\n+                format!(\"IfExpression({})\", a.repr(tcx))\n             }\n         }\n     }\n@@ -901,41 +898,41 @@ impl Repr for SubregionOrigin {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match *self {\n             Subtype(ref a) => {\n-                format_strbuf!(\"Subtype({})\", a.repr(tcx))\n+                format!(\"Subtype({})\", a.repr(tcx))\n             }\n             InfStackClosure(a) => {\n-                format_strbuf!(\"InfStackClosure({})\", a.repr(tcx))\n+                format!(\"InfStackClosure({})\", a.repr(tcx))\n             }\n             InvokeClosure(a) => {\n-                format_strbuf!(\"InvokeClosure({})\", a.repr(tcx))\n+                format!(\"InvokeClosure({})\", a.repr(tcx))\n             }\n             DerefPointer(a) => {\n-                format_strbuf!(\"DerefPointer({})\", a.repr(tcx))\n+                format!(\"DerefPointer({})\", a.repr(tcx))\n             }\n             FreeVariable(a, b) => {\n-                format_strbuf!(\"FreeVariable({}, {})\", a.repr(tcx), b)\n+                format!(\"FreeVariable({}, {})\", a.repr(tcx), b)\n             }\n             IndexSlice(a) => {\n-                format_strbuf!(\"IndexSlice({})\", a.repr(tcx))\n+                format!(\"IndexSlice({})\", a.repr(tcx))\n             }\n             RelateObjectBound(a) => {\n-                format_strbuf!(\"RelateObjectBound({})\", a.repr(tcx))\n+                format!(\"RelateObjectBound({})\", a.repr(tcx))\n             }\n-            Reborrow(a) => format_strbuf!(\"Reborrow({})\", a.repr(tcx)),\n+            Reborrow(a) => format!(\"Reborrow({})\", a.repr(tcx)),\n             ReborrowUpvar(a, b) => {\n-                format_strbuf!(\"ReborrowUpvar({},{:?})\", a.repr(tcx), b)\n+                format!(\"ReborrowUpvar({},{:?})\", a.repr(tcx), b)\n             }\n             ReferenceOutlivesReferent(_, a) => {\n-                format_strbuf!(\"ReferenceOutlivesReferent({})\", a.repr(tcx))\n+                format!(\"ReferenceOutlivesReferent({})\", a.repr(tcx))\n             }\n             BindingTypeIsNotValidAtDecl(a) => {\n-                format_strbuf!(\"BindingTypeIsNotValidAtDecl({})\", a.repr(tcx))\n+                format!(\"BindingTypeIsNotValidAtDecl({})\", a.repr(tcx))\n             }\n-            CallRcvr(a) => format_strbuf!(\"CallRcvr({})\", a.repr(tcx)),\n-            CallArg(a) => format_strbuf!(\"CallArg({})\", a.repr(tcx)),\n-            CallReturn(a) => format_strbuf!(\"CallReturn({})\", a.repr(tcx)),\n-            AddrOf(a) => format_strbuf!(\"AddrOf({})\", a.repr(tcx)),\n-            AutoBorrow(a) => format_strbuf!(\"AutoBorrow({})\", a.repr(tcx)),\n+            CallRcvr(a) => format!(\"CallRcvr({})\", a.repr(tcx)),\n+            CallArg(a) => format!(\"CallArg({})\", a.repr(tcx)),\n+            CallReturn(a) => format!(\"CallReturn({})\", a.repr(tcx)),\n+            AddrOf(a) => format!(\"AddrOf({})\", a.repr(tcx)),\n+            AutoBorrow(a) => format!(\"AutoBorrow({})\", a.repr(tcx)),\n         }\n     }\n }\n@@ -962,39 +959,32 @@ impl Repr for RegionVariableOrigin {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match *self {\n             MiscVariable(a) => {\n-                format_strbuf!(\"MiscVariable({})\", a.repr(tcx))\n+                format!(\"MiscVariable({})\", a.repr(tcx))\n             }\n             PatternRegion(a) => {\n-                format_strbuf!(\"PatternRegion({})\", a.repr(tcx))\n+                format!(\"PatternRegion({})\", a.repr(tcx))\n             }\n             AddrOfRegion(a) => {\n-                format_strbuf!(\"AddrOfRegion({})\", a.repr(tcx))\n+                format!(\"AddrOfRegion({})\", a.repr(tcx))\n             }\n-            AddrOfSlice(a) => format_strbuf!(\"AddrOfSlice({})\", a.repr(tcx)),\n-            Autoref(a) => format_strbuf!(\"Autoref({})\", a.repr(tcx)),\n-            Coercion(ref a) => format_strbuf!(\"Coercion({})\", a.repr(tcx)),\n+            AddrOfSlice(a) => format!(\"AddrOfSlice({})\", a.repr(tcx)),\n+            Autoref(a) => format!(\"Autoref({})\", a.repr(tcx)),\n+            Coercion(ref a) => format!(\"Coercion({})\", a.repr(tcx)),\n             EarlyBoundRegion(a, b) => {\n-                format_strbuf!(\"EarlyBoundRegion({},{})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"EarlyBoundRegion({},{})\", a.repr(tcx), b.repr(tcx))\n             }\n             LateBoundRegion(a, b) => {\n-                format_strbuf!(\"LateBoundRegion({},{})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"LateBoundRegion({},{})\", a.repr(tcx), b.repr(tcx))\n             }\n             BoundRegionInFnType(a, b) => {\n-                format_strbuf!(\"bound_regionInFnType({},{})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"bound_regionInFnType({},{})\", a.repr(tcx),\n+                b.repr(tcx))\n             }\n             BoundRegionInCoherence(a) => {\n-                format_strbuf!(\"bound_regionInCoherence({})\", a.repr(tcx))\n+                format!(\"bound_regionInCoherence({})\", a.repr(tcx))\n             }\n             UpvarRegion(a, b) => {\n-                format_strbuf!(\"UpvarRegion({}, {})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"UpvarRegion({}, {})\", a.repr(tcx), b.repr(tcx))\n             }\n         }\n     }"}, {"sha": "0efbe7333672cc6c08f5c08253fd4849d2138b86", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1342,24 +1342,16 @@ impl Repr for Constraint {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match *self {\n             ConstrainVarSubVar(a, b) => {\n-                format_strbuf!(\"ConstrainVarSubVar({}, {})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"ConstrainVarSubVar({}, {})\", a.repr(tcx), b.repr(tcx))\n             }\n             ConstrainRegSubVar(a, b) => {\n-                format_strbuf!(\"ConstrainRegSubVar({}, {})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"ConstrainRegSubVar({}, {})\", a.repr(tcx), b.repr(tcx))\n             }\n             ConstrainVarSubReg(a, b) => {\n-                format_strbuf!(\"ConstrainVarSubReg({}, {})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"ConstrainVarSubReg({}, {})\", a.repr(tcx), b.repr(tcx))\n             }\n             ConstrainRegSubReg(a, b) => {\n-                format_strbuf!(\"ConstrainRegSubReg({}, {})\",\n-                               a.repr(tcx),\n-                               b.repr(tcx))\n+                format!(\"ConstrainRegSubReg({}, {})\", a.repr(tcx), b.repr(tcx))\n             }\n         }\n     }"}, {"sha": "f03ecd9aee158322f0c81d1332a8383851fd4f1f", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -31,12 +31,11 @@ impl InferStr for ty::t {\n \n impl InferStr for FnSig {\n     fn inf_str(&self, cx: &InferCtxt) -> String {\n-        format_strbuf!(\"({}) -> {}\",\n-                       self.inputs\n-                           .iter()\n-                           .map(|a| a.inf_str(cx))\n-                           .collect::<Vec<String>>().connect(\", \"),\n-                       self.output.inf_str(cx))\n+        format!(\"({}) -> {}\",\n+                self.inputs.iter()\n+                    .map(|a| a.inf_str(cx))\n+                    .collect::<Vec<String>>().connect(\", \"),\n+                self.output.inf_str(cx))\n     }\n }\n \n@@ -48,7 +47,7 @@ impl InferStr for ty::mt {\n \n impl InferStr for ty::Region {\n     fn inf_str(&self, _cx: &InferCtxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n@@ -63,18 +62,16 @@ impl<V:InferStr> InferStr for Bound<V> {\n \n impl<T:InferStr> InferStr for Bounds<T> {\n     fn inf_str(&self, cx: &InferCtxt) -> String {\n-        format_strbuf!(\"\\\\{{} <: {}\\\\}\",\n-                       self.lb.inf_str(cx),\n-                       self.ub.inf_str(cx))\n+        format!(\"\\\\{{} <: {}\\\\}\", self.lb.inf_str(cx), self.ub.inf_str(cx))\n     }\n }\n \n impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n     fn inf_str(&self, cx: &InferCtxt) -> String {\n         match *self {\n-          Redirect(ref vid) => format_strbuf!(\"Redirect({})\", vid.to_str()),\n+          Redirect(ref vid) => format!(\"Redirect({})\", vid.to_str()),\n           Root(ref pt, rk) => {\n-              format_strbuf!(\"Root({}, {})\", pt.inf_str(cx), rk)\n+              format!(\"Root({}, {})\", pt.inf_str(cx), rk)\n           }\n         }\n     }"}, {"sha": "bfe09fdd2b2877dbb7ab7bf6a5dd9cfa58e21bf7", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -201,15 +201,15 @@ impl Repr for vtable_origin {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match *self {\n             vtable_static(def_id, ref tys, ref vtable_res) => {\n-                format_strbuf!(\"vtable_static({:?}:{}, {}, {})\",\n-                               def_id,\n-                               ty::item_path_str(tcx, def_id),\n-                               tys.repr(tcx),\n-                               vtable_res.repr(tcx))\n+                format!(\"vtable_static({:?}:{}, {}, {})\",\n+                        def_id,\n+                        ty::item_path_str(tcx, def_id),\n+                        tys.repr(tcx),\n+                        vtable_res.repr(tcx))\n             }\n \n             vtable_param(x, y) => {\n-                format_strbuf!(\"vtable_param({:?}, {:?})\", x, y)\n+                format!(\"vtable_param({:?}, {:?})\", x, y)\n             }\n         }\n     }\n@@ -231,9 +231,9 @@ pub struct impl_res {\n \n impl Repr for impl_res {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n-        format_strbuf!(\"impl_res \\\\{trait_vtables={}, self_vtables={}\\\\}\",\n-                       self.trait_vtables.repr(tcx),\n-                       self.self_vtables.repr(tcx))\n+        format!(\"impl_res \\\\{trait_vtables={}, self_vtables={}\\\\}\",\n+                self.trait_vtables.repr(tcx),\n+                self.self_vtables.repr(tcx))\n     }\n }\n \n@@ -354,8 +354,8 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n \n             require_same_types(tcx, None, false, main_span, main_t, se_ty,\n                 || {\n-                    format_strbuf!(\"main function expects type: `{}`\",\n-                                   ppaux::ty_to_str(ccx.tcx, se_ty))\n+                    format!(\"main function expects type: `{}`\",\n+                            ppaux::ty_to_str(ccx.tcx, se_ty))\n                 });\n         }\n         _ => {\n@@ -407,8 +407,8 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n \n             require_same_types(tcx, None, false, start_span, start_t, se_ty,\n                 || {\n-                    format_strbuf!(\"start function expects type: `{}`\",\n-                                   ppaux::ty_to_str(ccx.tcx, se_ty))\n+                    format!(\"start function expects type: `{}`\",\n+                            ppaux::ty_to_str(ccx.tcx, se_ty))\n                 });\n \n         }"}, {"sha": "f73666bebf6d7c3ec58cc4c025f608b29f3c8e34", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 119, "deletions": 137, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -86,39 +86,36 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n           }\n           Some(_) | None => {\n             // this really should not happen\n-            (format_strbuf!(\"unknown scope: {}.  Please report a bug.\",\n-                            node_id),\n-             None)\n+            (format!(\"unknown scope: {}.  Please report a bug.\", node_id), None)\n           }\n         }\n       }\n \n       ReFree(ref fr) => {\n         let prefix = match fr.bound_region {\n           BrAnon(idx) => {\n-              format_strbuf!(\"the anonymous lifetime \\\\#{} defined on\",\n-                             idx + 1)\n+              format!(\"the anonymous lifetime \\\\#{} defined on\", idx + 1)\n           }\n           BrFresh(_) => \"an anonymous lifetime defined on\".to_string(),\n           _ => {\n-              format_strbuf!(\"the lifetime {} as defined on\",\n-                             bound_region_ptr_to_str(cx, fr.bound_region))\n+              format!(\"the lifetime {} as defined on\",\n+                      bound_region_ptr_to_str(cx, fr.bound_region))\n           }\n         };\n \n         match cx.map.find(fr.scope_id) {\n           Some(ast_map::NodeBlock(ref blk)) => {\n             let (msg, opt_span) = explain_span(cx, \"block\", blk.span);\n-            (format_strbuf!(\"{} {}\", prefix, msg), opt_span)\n+            (format!(\"{} {}\", prefix, msg), opt_span)\n           }\n           Some(ast_map::NodeItem(it)) if match it.node {\n                 ast::ItemImpl(..) => true, _ => false} => {\n             let (msg, opt_span) = explain_span(cx, \"impl\", it.span);\n-            (format_strbuf!(\"{} {}\", prefix, msg), opt_span)\n+            (format!(\"{} {}\", prefix, msg), opt_span)\n           }\n           Some(_) | None => {\n             // this really should not happen\n-            (format_strbuf!(\"{} node {}\", prefix, fr.scope_id), None)\n+            (format!(\"{} node {}\", prefix, fr.scope_id), None)\n           }\n         }\n       }\n@@ -130,17 +127,15 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n       // I believe these cases should not occur (except when debugging,\n       // perhaps)\n       ty::ReInfer(_) | ty::ReEarlyBound(..) | ty::ReLateBound(..) => {\n-        (format_strbuf!(\"lifetime {:?}\", region), None)\n+        (format!(\"lifetime {:?}\", region), None)\n       }\n     };\n \n     fn explain_span(cx: &ctxt, heading: &str, span: Span)\n         -> (String, Option<Span>) {\n         let lo = cx.sess.codemap().lookup_char_pos_adj(span.lo);\n-        (format_strbuf!(\"the {} at {}:{}\",\n-                        heading,\n-                        lo.line,\n-                        lo.col.to_uint()), Some(span))\n+        (format!(\"the {} at {}:{}\", heading, lo.line, lo.col.to_uint()),\n+         Some(span))\n     }\n }\n \n@@ -154,15 +149,12 @@ pub fn bound_region_to_str(cx: &ctxt,\n     let space_str = if space { \" \" } else { \"\" };\n \n     if cx.sess.verbose() {\n-        return format_strbuf!(\"{}{}{}\", prefix, br.repr(cx), space_str)\n+        return format!(\"{}{}{}\", prefix, br.repr(cx), space_str)\n     }\n \n     match br {\n         BrNamed(_, name) => {\n-            format_strbuf!(\"{}'{}{}\",\n-                           prefix,\n-                           token::get_name(name),\n-                           space_str)\n+            format!(\"{}'{}{}\", prefix, token::get_name(name), space_str)\n         }\n         BrAnon(_) => prefix.to_string(),\n         BrFresh(_) => prefix.to_string(),\n@@ -180,7 +172,7 @@ pub fn region_to_str(cx: &ctxt, prefix: &str, space: bool, region: Region) -> St\n     let space_str = if space { \" \" } else { \"\" };\n \n     if cx.sess.verbose() {\n-        return format_strbuf!(\"{}{}{}\", prefix, region.repr(cx), space_str)\n+        return format!(\"{}{}{}\", prefix, region.repr(cx), space_str)\n     }\n \n     // These printouts are concise.  They do not contain all the information\n@@ -198,8 +190,8 @@ pub fn region_to_str(cx: &ctxt, prefix: &str, space: bool, region: Region) -> St\n             bound_region_to_str(cx, prefix, space, br)\n         }\n         ty::ReInfer(ReVar(_)) => prefix.to_string(),\n-        ty::ReStatic => format_strbuf!(\"{}'static{}\", prefix, space_str),\n-        ty::ReEmpty => format_strbuf!(\"{}'<empty>{}\", prefix, space_str),\n+        ty::ReStatic => format!(\"{}'static{}\", prefix, space_str),\n+        ty::ReEmpty => format!(\"{}'<empty>{}\", prefix, space_str),\n     }\n }\n \n@@ -211,30 +203,26 @@ pub fn mutability_to_str(m: ast::Mutability) -> String {\n }\n \n pub fn mt_to_str(cx: &ctxt, m: &mt) -> String {\n-    format_strbuf!(\"{}{}\", mutability_to_str(m.mutbl), ty_to_str(cx, m.ty))\n+    format!(\"{}{}\", mutability_to_str(m.mutbl), ty_to_str(cx, m.ty))\n }\n \n pub fn trait_store_to_str(cx: &ctxt, s: ty::TraitStore) -> String {\n     match s {\n         ty::UniqTraitStore => \"Box \".to_string(),\n         ty::RegionTraitStore(r, m) => {\n-            format_strbuf!(\"{}{}\",\n-                           region_ptr_to_str(cx, r),\n-                           mutability_to_str(m))\n+            format!(\"{}{}\", region_ptr_to_str(cx, r), mutability_to_str(m))\n         }\n     }\n }\n \n pub fn vec_map_to_str<T>(ts: &[T], f: |t: &T| -> String) -> String {\n     let tstrs = ts.iter().map(f).collect::<Vec<String>>();\n-    format_strbuf!(\"[{}]\", tstrs.connect(\", \"))\n+    format!(\"[{}]\", tstrs.connect(\", \"))\n }\n \n pub fn fn_sig_to_str(cx: &ctxt, typ: &ty::FnSig) -> String {\n-    format_strbuf!(\"fn{}{} -> {}\",\n-                   typ.binder_id,\n-                   typ.inputs.repr(cx),\n-                   typ.output.repr(cx))\n+    format!(\"fn{}{} -> {}\", typ.binder_id, typ.inputs.repr(cx),\n+            typ.output.repr(cx))\n }\n \n pub fn trait_ref_to_str(cx: &ctxt, trait_ref: &ty::TraitRef) -> String {\n@@ -360,17 +348,17 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n       ty_uint(t) => ast_util::uint_ty_to_str(t, None,\n                                              ast_util::AutoSuffix).to_string(),\n       ty_float(t) => ast_util::float_ty_to_str(t).to_string(),\n-      ty_box(typ) => format_strbuf!(\"@{}\", ty_to_str(cx, typ)),\n-      ty_uniq(typ) => format_strbuf!(\"~{}\", ty_to_str(cx, typ)),\n-      ty_ptr(ref tm) => format_strbuf!(\"*{}\", mt_to_str(cx, tm)),\n+      ty_box(typ) => format!(\"@{}\", ty_to_str(cx, typ)),\n+      ty_uniq(typ) => format!(\"~{}\", ty_to_str(cx, typ)),\n+      ty_ptr(ref tm) => format!(\"*{}\", mt_to_str(cx, tm)),\n       ty_rptr(r, ref tm) => {\n           let mut buf = region_ptr_to_str(cx, r);\n           buf.push_str(mt_to_str(cx, tm).as_slice());\n           buf\n       }\n       ty_tup(ref elems) => {\n         let strs: Vec<String> = elems.iter().map(|elem| ty_to_str(cx, *elem)).collect();\n-        format_strbuf!(\"({})\", strs.connect(\",\"))\n+        format!(\"({})\", strs.connect(\",\"))\n       }\n       ty_closure(ref f) => {\n           closure_to_str(cx, *f)\n@@ -385,12 +373,12 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n               Some(def) => token::get_ident(def.ident).get().to_string(),\n               // This can only happen when a type mismatch error happens and\n               // the actual type has more type parameters than the expected one.\n-              None => format_strbuf!(\"<generic \\\\#{}>\", id)\n+              None => format!(\"<generic \\\\#{}>\", id)\n           };\n           if !cx.sess.verbose() {\n               ident\n           } else {\n-              format_strbuf!(\"{}:{:?}\", ident, did)\n+              format!(\"{}:{:?}\", ident, did)\n           }\n       }\n       ty_self(..) => \"Self\".to_string(),\n@@ -411,19 +399,19 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n                                substs.tps.as_slice(), did, true);\n         let bound_sep = if bounds.is_empty() { \"\" } else { \":\" };\n         let bound_str = bounds.repr(cx);\n-        format_strbuf!(\"{}{}{}{}\",\n-                       trait_store_to_str(cx, store),\n-                       ty,\n-                       bound_sep,\n-                       bound_str)\n+        format!(\"{}{}{}{}\",\n+                trait_store_to_str(cx, store),\n+                ty,\n+                bound_sep,\n+                bound_str)\n       }\n       ty_str => \"str\".to_string(),\n       ty_vec(ref mt, sz) => {\n           match sz {\n               Some(n) => {\n-                  format_strbuf!(\"[{}, .. {}]\", mt_to_str(cx, mt), n)\n+                  format!(\"[{}, .. {}]\", mt_to_str(cx, mt), n)\n               }\n-              None => format_strbuf!(\"[{}]\", ty_to_str(cx, mt.ty)),\n+              None => format!(\"[{}]\", ty_to_str(cx, mt.ty)),\n           }\n       }\n     }\n@@ -476,9 +464,9 @@ pub fn parameterized(cx: &ctxt,\n     }\n \n     if strs.len() > 0u {\n-        format_strbuf!(\"{}<{}>\", base, strs.connect(\",\"))\n+        format!(\"{}<{}>\", base, strs.connect(\",\"))\n     } else {\n-        format_strbuf!(\"{}\", base)\n+        format!(\"{}\", base)\n     }\n }\n \n@@ -503,7 +491,7 @@ impl<T:Repr,U:Repr> Repr for Result<T,U> {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match self {\n             &Ok(ref t) => t.repr(tcx),\n-            &Err(ref u) => format_strbuf!(\"Err({})\", u.repr(tcx))\n+            &Err(ref u) => format!(\"Err({})\", u.repr(tcx))\n         }\n     }\n }\n@@ -558,17 +546,16 @@ impl<T:Repr> Repr for Vec<T> {\n \n impl Repr for ty::TypeParameterDef {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"TypeParameterDef({:?}, {})\",\n-                       self.def_id,\n-                       self.bounds.repr(tcx))\n+        format!(\"TypeParameterDef({:?}, {})\", self.def_id,\n+                self.bounds.repr(tcx))\n     }\n }\n \n impl Repr for ty::RegionParameterDef {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"RegionParameterDef({}, {:?})\",\n-                       token::get_name(self.name),\n-                       self.def_id)\n+        format!(\"RegionParameterDef({}, {:?})\",\n+                token::get_name(self.name),\n+                self.def_id)\n     }\n }\n \n@@ -580,16 +567,16 @@ impl Repr for ty::t {\n \n impl Repr for ty::substs {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"substs(regions={}, self_ty={}, tps={})\",\n-                       self.regions.repr(tcx),\n-                       self.self_ty.repr(tcx),\n-                       self.tps.repr(tcx))\n+        format!(\"substs(regions={}, self_ty={}, tps={})\",\n+                self.regions.repr(tcx),\n+                self.self_ty.repr(tcx),\n+                self.tps.repr(tcx))\n     }\n }\n \n impl Repr for ty::ItemSubsts {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"ItemSubsts({})\", self.substs.repr(tcx))\n+        format!(\"ItemSubsts({})\", self.substs.repr(tcx))\n     }\n }\n \n@@ -629,40 +616,38 @@ impl Repr for ty::TraitRef {\n \n impl Repr for ast::Expr {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"expr({}: {})\", self.id, pprust::expr_to_str(self))\n+        format!(\"expr({}: {})\", self.id, pprust::expr_to_str(self))\n     }\n }\n \n impl Repr for ast::Item {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"item({})\", tcx.map.node_to_str(self.id))\n+        format!(\"item({})\", tcx.map.node_to_str(self.id))\n     }\n }\n \n impl Repr for ast::Stmt {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"stmt({}: {})\",\n-                       ast_util::stmt_id(self),\n-                       pprust::stmt_to_str(self))\n+        format!(\"stmt({}: {})\",\n+                ast_util::stmt_id(self),\n+                pprust::stmt_to_str(self))\n     }\n }\n \n impl Repr for ast::Pat {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"pat({}: {})\", self.id, pprust::pat_to_str(self))\n+        format!(\"pat({}: {})\", self.id, pprust::pat_to_str(self))\n     }\n }\n \n impl Repr for ty::BoundRegion {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match *self {\n-            ty::BrAnon(id) => format_strbuf!(\"BrAnon({})\", id),\n+            ty::BrAnon(id) => format!(\"BrAnon({})\", id),\n             ty::BrNamed(id, name) => {\n-                format_strbuf!(\"BrNamed({}, {})\",\n-                               id.repr(tcx),\n-                               token::get_name(name))\n+                format!(\"BrNamed({}, {})\", id.repr(tcx), token::get_name(name))\n             }\n-            ty::BrFresh(id) => format_strbuf!(\"BrFresh({})\", id),\n+            ty::BrFresh(id) => format!(\"BrFresh({})\", id),\n         }\n     }\n }\n@@ -671,38 +656,38 @@ impl Repr for ty::Region {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match *self {\n             ty::ReEarlyBound(id, index, name) => {\n-                format_strbuf!(\"ReEarlyBound({}, {}, {})\",\n-                               id,\n-                               index,\n-                               token::get_name(name))\n+                format!(\"ReEarlyBound({}, {}, {})\",\n+                        id,\n+                        index,\n+                        token::get_name(name))\n             }\n \n             ty::ReLateBound(binder_id, ref bound_region) => {\n-                format_strbuf!(\"ReLateBound({}, {})\",\n-                               binder_id,\n-                               bound_region.repr(tcx))\n+                format!(\"ReLateBound({}, {})\",\n+                        binder_id,\n+                        bound_region.repr(tcx))\n             }\n \n             ty::ReFree(ref fr) => {\n-                format_strbuf!(\"ReFree({}, {})\",\n-                               fr.scope_id,\n-                               fr.bound_region.repr(tcx))\n+                format!(\"ReFree({}, {})\",\n+                        fr.scope_id,\n+                        fr.bound_region.repr(tcx))\n             }\n \n             ty::ReScope(id) => {\n-                format_strbuf!(\"ReScope({})\", id)\n+                format!(\"ReScope({})\", id)\n             }\n \n             ty::ReStatic => {\n                 \"ReStatic\".to_string()\n             }\n \n             ty::ReInfer(ReVar(ref vid)) => {\n-                format_strbuf!(\"ReInfer({})\", vid.id)\n+                format!(\"ReInfer({})\", vid.id)\n             }\n \n             ty::ReInfer(ReSkolemized(id, ref bound_region)) => {\n-                format_strbuf!(\"re_skolemized({}, {})\",\n+                format!(\"re_skolemized({}, {})\",\n                                id,\n                                bound_region.repr(tcx))\n             }\n@@ -728,7 +713,7 @@ impl Repr for ast::DefId {\n                     Some(ast_map::NodeTraitMethod(..)) |\n                     Some(ast_map::NodeVariant(..)) |\n                     Some(ast_map::NodeStructCtor(..)) => {\n-                        return format_strbuf!(\n+                        return format!(\n                                 \"{:?}:{}\",\n                                 *self,\n                                 ty::item_path_str(tcx, *self))\n@@ -737,35 +722,32 @@ impl Repr for ast::DefId {\n                 }\n             }\n         }\n-        return format_strbuf!(\"{:?}\", *self)\n+        return format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ty::ty_param_bounds_and_ty {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"ty_param_bounds_and_ty \\\\{generics: {}, ty: {}\\\\}\",\n-                       self.generics.repr(tcx),\n-                       self.ty.repr(tcx))\n+        format!(\"ty_param_bounds_and_ty \\\\{generics: {}, ty: {}\\\\}\",\n+                self.generics.repr(tcx),\n+                self.ty.repr(tcx))\n     }\n }\n \n impl Repr for ty::Generics {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"Generics(type_param_defs: {}, \\\n-                           region_param_defs: {})\",\n-                 self.type_param_defs().repr(tcx),\n-                 self.region_param_defs().repr(tcx))\n+        format!(\"Generics(type_param_defs: {}, region_param_defs: {})\",\n+                self.type_param_defs().repr(tcx),\n+                self.region_param_defs().repr(tcx))\n     }\n }\n \n impl Repr for ty::ItemVariances {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"IterVariances(self_param={}, \\\n-                                type_params={}, \\\n-                                region_params={})\",\n-                 self.self_param.repr(tcx),\n-                 self.type_params.repr(tcx),\n-                 self.region_params.repr(tcx))\n+        format!(\"IterVariances(self_param={}, type_params={}, region_params={})\",\n+                self.self_param.repr(tcx),\n+                self.type_params.repr(tcx),\n+                self.region_params.repr(tcx))\n     }\n }\n \n@@ -777,14 +759,14 @@ impl Repr for ty::Variance {\n \n impl Repr for ty::Method {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"method(ident: {}, generics: {}, fty: {}, \\\n-                        explicit_self: {}, vis: {}, def_id: {})\",\n-                       self.ident.repr(tcx),\n-                       self.generics.repr(tcx),\n-                       self.fty.repr(tcx),\n-                       self.explicit_self.repr(tcx),\n-                       self.vis.repr(tcx),\n-                       self.def_id.repr(tcx))\n+        format!(\"method(ident: {}, generics: {}, fty: {}, \\\n+                 explicit_self: {}, vis: {}, def_id: {})\",\n+                self.ident.repr(tcx),\n+                self.generics.repr(tcx),\n+                self.fty.repr(tcx),\n+                self.explicit_self.repr(tcx),\n+                self.vis.repr(tcx),\n+                self.def_id.repr(tcx))\n     }\n }\n \n@@ -802,22 +784,22 @@ impl Repr for ast::Ident {\n \n impl Repr for ast::ExplicitSelf_ {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ast::Visibility {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ty::BareFnTy {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"BareFnTy \\\\{fn_style: {:?}, abi: {}, sig: {}\\\\}\",\n-                       self.fn_style,\n-                       self.abi.to_str(),\n-                       self.sig.repr(tcx))\n+        format!(\"BareFnTy \\\\{fn_style: {:?}, abi: {}, sig: {}\\\\}\",\n+                self.fn_style,\n+                self.abi.to_str(),\n+                self.sig.repr(tcx))\n     }\n }\n \n@@ -829,18 +811,18 @@ impl Repr for ty::FnSig {\n \n impl Repr for typeck::MethodCallee {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"MethodCallee \\\\{origin: {}, ty: {}, {}\\\\}\",\n-                       self.origin.repr(tcx),\n-                       self.ty.repr(tcx),\n-                       self.substs.repr(tcx))\n+        format!(\"MethodCallee \\\\{origin: {}, ty: {}, {}\\\\}\",\n+                self.origin.repr(tcx),\n+                self.ty.repr(tcx),\n+                self.substs.repr(tcx))\n     }\n }\n \n impl Repr for typeck::MethodOrigin {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match self {\n             &typeck::MethodStatic(def_id) => {\n-                format_strbuf!(\"MethodStatic({})\", def_id.repr(tcx))\n+                format!(\"MethodStatic({})\", def_id.repr(tcx))\n             }\n             &typeck::MethodParam(ref p) => {\n                 p.repr(tcx)\n@@ -854,27 +836,27 @@ impl Repr for typeck::MethodOrigin {\n \n impl Repr for typeck::MethodParam {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"MethodParam({},{:?},{:?},{:?})\",\n-                       self.trait_id.repr(tcx),\n-                       self.method_num,\n-                       self.param_num,\n-                       self.bound_num)\n+        format!(\"MethodParam({},{:?},{:?},{:?})\",\n+                self.trait_id.repr(tcx),\n+                self.method_num,\n+                self.param_num,\n+                self.bound_num)\n     }\n }\n \n impl Repr for typeck::MethodObject {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"MethodObject({},{:?},{:?})\",\n-                       self.trait_id.repr(tcx),\n-                       self.method_num,\n-                       self.real_index)\n+        format!(\"MethodObject({},{:?},{:?})\",\n+                self.trait_id.repr(tcx),\n+                self.method_num,\n+                self.real_index)\n     }\n }\n \n \n impl Repr for ty::RegionVid {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n@@ -886,7 +868,7 @@ impl Repr for ty::TraitStore {\n \n impl Repr for ty::BuiltinBound {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n@@ -980,29 +962,29 @@ impl UserString for abi::Abi {\n \n impl Repr for ty::UpvarId {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"UpvarId({};`{}`;{})\",\n-                       self.var_id,\n-                       ty::local_var_name_str(tcx, self.var_id),\n-                       self.closure_expr_id)\n+        format!(\"UpvarId({};`{}`;{})\",\n+                self.var_id,\n+                ty::local_var_name_str(tcx, self.var_id),\n+                self.closure_expr_id)\n     }\n }\n \n impl Repr for ast::Mutability {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ty::BorrowKind {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        format_strbuf!(\"{:?}\", *self)\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ty::UpvarBorrow {\n     fn repr(&self, tcx: &ctxt) -> String {\n-        format_strbuf!(\"UpvarBorrow({}, {})\",\n-                       self.kind.repr(tcx),\n-                       self.region.repr(tcx))\n+        format!(\"UpvarBorrow({}, {})\",\n+                self.kind.repr(tcx),\n+                self.region.repr(tcx))\n     }\n }"}, {"sha": "aab236417a58aef560f9947285d3e37e5819bd4b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1000,7 +1000,7 @@ impl Clean<Type> for ty::t {\n             ty::ty_str => String,\n             ty::ty_vec(mt, None) => Vector(box mt.ty.clean()),\n             ty::ty_vec(mt, Some(i)) => FixedVector(box mt.ty.clean(),\n-                                                   format_strbuf!(\"{}\", i)),\n+                                                   format!(\"{}\", i)),\n             ty::ty_ptr(mt) => RawPointer(mt.mutbl.clean(), box mt.ty.clean()),\n             ty::ty_rptr(r, mt) => BorrowedRef {\n                 lifetime: r.clean(),\n@@ -1697,8 +1697,8 @@ impl ToSource for syntax::codemap::Span {\n fn lit_to_str(lit: &ast::Lit) -> String {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_string(),\n-        ast::LitBinary(ref data) => format_strbuf!(\"{:?}\", data.as_slice()),\n-        ast::LitChar(c) => format_strbuf!(\"'{}'\", c),\n+        ast::LitBinary(ref data) => format!(\"{:?}\", data.as_slice()),\n+        ast::LitChar(c) => format!(\"'{}'\", c),\n         ast::LitInt(i, _t) => i.to_str().to_string(),\n         ast::LitUint(u, _t) => u.to_str().to_string(),\n         ast::LitIntUnsuffixed(i) => i.to_str().to_string(),\n@@ -1817,7 +1817,7 @@ pub struct Macro {\n impl Clean<Item> for doctree::Macro {\n     fn clean(&self) -> Item {\n         Item {\n-            name: Some(format_strbuf!(\"{}!\", self.name.clean())),\n+            name: Some(format!(\"{}!\", self.name.clean())),\n             attrs: self.attrs.clean(),\n             source: self.where.clean(),\n             visibility: ast::Public.clean(),"}, {"sha": "7af1eb21aead0afd80c636da552d73b1b755ccae", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -366,7 +366,7 @@ impl fmt::Show for clean::Type {\n                        lifetimes = if decl.lifetimes.len() == 0 {\n                            \"\".to_string()\n                        } else {\n-                           format_strbuf!(\"&lt;{:#}&gt;\", decl.lifetimes)\n+                           format!(\"&lt;{:#}&gt;\", decl.lifetimes)\n                        },\n                        args = decl.decl.inputs,\n                        bounds = if decl.bounds.len() == 0 {\n@@ -375,7 +375,7 @@ impl fmt::Show for clean::Type {\n                            let mut m = decl.bounds\n                                            .iter()\n                                            .map(|s| s.to_str().to_string());\n-                           format_strbuf!(\n+                           format!(\n                                \": {}\",\n                                m.collect::<Vec<String>>().connect(\" + \"))\n                        },\n@@ -388,7 +388,7 @@ impl fmt::Show for clean::Type {\n                        match decl.abi.as_slice() {\n                            \"\" => \" extern \".to_string(),\n                            \"\\\"Rust\\\"\" => \"\".to_string(),\n-                           s => format_strbuf!(\" extern {} \", s)\n+                           s => format!(\" extern {} \", s)\n                        },\n                        decl.generics,\n                        decl.decl)"}, {"sha": "cafbbaa828bc718e2952943bc8a710f8eb26c7ee", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -223,7 +223,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         let map = used_header_map.get().unwrap();\n         let id = match map.borrow_mut().find_mut(&id) {\n             None => id,\n-            Some(a) => { *a += 1; format_strbuf!(\"{}-{}\", id, *a - 1) }\n+            Some(a) => { *a += 1; format!(\"{}-{}\", id, *a - 1) }\n         };\n         map.borrow_mut().insert(id.clone(), 1);\n "}, {"sha": "22619bdbf851766666fa6f7333521fa3c987d2f3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -578,7 +578,7 @@ fn extern_location(e: &clean::ExternalCrate, dst: &Path) -> ExternalLocation {\n                             if s.as_slice().ends_with(\"/\") {\n                                 return Remote(s.to_string());\n                             }\n-                            return Remote(format_strbuf!(\"{}/\", s));\n+                            return Remote(format!(\"{}/\", s));\n                         }\n                         _ => {}\n                     }\n@@ -1187,12 +1187,12 @@ impl<'a> fmt::Show for Item<'a> {\n fn item_path(item: &clean::Item) -> String {\n     match item.inner {\n         clean::ModuleItem(..) => {\n-            format_strbuf!(\"{}/index.html\", item.name.get_ref())\n+            format!(\"{}/index.html\", item.name.get_ref())\n         }\n         _ => {\n-            format_strbuf!(\"{}.{}.html\",\n-                           shortty(item).to_static_str(),\n-                           *item.name.get_ref())\n+            format!(\"{}.{}.html\",\n+                    shortty(item).to_static_str(),\n+                    *item.name.get_ref())\n         }\n     }\n }"}, {"sha": "aa01247c1b682b0d813e0952cc6e5621f228152a", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -154,7 +154,7 @@ impl TocBuilder {\n                 sec_number.push_str(\"0.\");\n             }\n             let number = toc.count_entries_with_level(level);\n-            sec_number.push_str(format_strbuf!(\"{}\", number + 1).as_slice())\n+            sec_number.push_str(format!(\"{}\", number + 1).as_slice())\n         }\n \n         self.chain.push(TocEntry {"}, {"sha": "fe53439703adb39116a8c1bc876197ad621707a3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -248,7 +248,7 @@ fn acquire_input(input: &str,\n     match matches.opt_str(\"r\").as_ref().map(|s| s.as_slice()) {\n         Some(\"rust\") => Ok(rust_input(input, matches)),\n         Some(\"json\") => json_input(input),\n-        Some(s) => Err(format_strbuf!(\"unknown input format: {}\", s)),\n+        Some(s) => Err(format!(\"unknown input format: {}\", s)),\n         None => {\n             if input.ends_with(\".json\") {\n                 json_input(input)\n@@ -356,7 +356,7 @@ fn json_input(input: &str) -> Result<Output, String> {\n     let mut input = match File::open(&Path::new(input)) {\n         Ok(f) => f,\n         Err(e) => {\n-            return Err(format_strbuf!(\"couldn't open {}: {}\", input, e))\n+            return Err(format!(\"couldn't open {}: {}\", input, e))\n         }\n     };\n     match json::from_reader(&mut input) {\n@@ -367,7 +367,7 @@ fn json_input(input: &str) -> Result<Output, String> {\n             match obj.pop(&\"schema\".to_string()) {\n                 Some(json::String(version)) => {\n                     if version.as_slice() != SCHEMA_VERSION {\n-                        return Err(format_strbuf!(\n+                        return Err(format!(\n                                 \"sorry, but I only understand version {}\",\n                                 SCHEMA_VERSION))\n                     }"}, {"sha": "e5fc8f1f1a178fffa5ad2aa9f1abef06bd0f862b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -260,9 +260,9 @@ impl Collector {\n     pub fn add_test(&mut self, test: String, should_fail: bool, no_run: bool, should_ignore: bool) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| s.as_slice()).unwrap_or(\"\");\n-            format_strbuf!(\"{}_{}\", s, self.cnt)\n+            format!(\"{}_{}\", s, self.cnt)\n         } else {\n-            format_strbuf!(\"{}_{}\", self.names.connect(\"::\"), self.cnt)\n+            format!(\"{}_{}\", self.names.connect(\"::\"), self.cnt)\n         };\n         self.cnt += 1;\n         let libs = self.libs.clone();"}, {"sha": "51dcc6d3faf55a812f371389648221f7954a610e", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -377,13 +377,13 @@ fn test_ne() {\n \n #[test]\n fn test_show() {\n-    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3\").unwrap()),\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3\").unwrap()),\n                \"1.2.3\".to_string());\n-    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3-alpha1\").unwrap()),\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3-alpha1\").unwrap()),\n                \"1.2.3-alpha1\".to_string());\n-    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3+build.42\").unwrap()),\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3+build.42\").unwrap()),\n                \"1.2.3+build.42\".to_string());\n-    assert_eq!(format_strbuf!(\"{}\", parse(\"1.2.3-alpha1+42\").unwrap()),\n+    assert_eq!(format!(\"{}\", parse(\"1.2.3-alpha1+42\").unwrap()),\n                \"1.2.3-alpha1+42\".to_string());\n }\n "}, {"sha": "67045476f6d8756617a8370da9a173954609875f", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -313,10 +313,8 @@ pub mod reader {\n                     self.pos = r_doc.end;\n                     let str = r_doc.as_str_slice();\n                     if lbl != str {\n-                        return Err(Expected(format_strbuf!(\"Expected label \\\n-                                                            {} but found {}\",\n-                                                           lbl,\n-                                                           str)));\n+                        return Err(Expected(format!(\"Expected label {} but \\\n+                                                     found {}\", lbl, str)));\n                     }\n                 }\n             }\n@@ -326,8 +324,8 @@ pub mod reader {\n         fn next_doc(&mut self, exp_tag: EbmlEncoderTag) -> DecodeResult<Doc<'doc>> {\n             debug!(\". next_doc(exp_tag={})\", exp_tag);\n             if self.pos >= self.parent.end {\n-                return Err(Expected(format_strbuf!(\"no more documents in \\\n-                                                    current node!\")));\n+                return Err(Expected(format!(\"no more documents in \\\n+                                             current node!\")));\n             }\n             let TaggedDoc { tag: r_tag, doc: r_doc } =\n                 try!(doc_at(self.parent.data, self.pos));\n@@ -339,18 +337,13 @@ pub mod reader {\n                    r_doc.start,\n                    r_doc.end);\n             if r_tag != (exp_tag as uint) {\n-                return Err(Expected(format_strbuf!(\"expected EBML doc with \\\n-                                                    tag {} but found tag \\\n-                                                    {}\",\n-                                                   exp_tag,\n-                                                   r_tag)));\n+                return Err(Expected(format!(\"expected EBML doc with tag {} but \\\n+                                             found tag {}\", exp_tag, r_tag)));\n             }\n             if r_doc.end > self.parent.end {\n-                return Err(Expected(format_strbuf!(\"invalid EBML, child \\\n-                                                    extends to {:#x}, parent \\\n-                                                    to {:#x}\",\n-                                                   r_doc.end,\n-                                                   self.parent.end)));\n+                return Err(Expected(format!(\"invalid EBML, child extends to \\\n+                                             {:#x}, parent to {:#x}\",\n+                                            r_doc.end, self.parent.end)));\n             }\n             self.pos = r_doc.end;\n             Ok(r_doc)\n@@ -582,8 +575,7 @@ pub mod reader {\n                         0 => f(this, false),\n                         1 => f(this, true),\n                         _ => {\n-                            Err(Expected(format_strbuf!(\"Expected None or \\\n-                                                         Some\")))\n+                            Err(Expected(format!(\"Expected None or Some\")))\n                         }\n                     }\n                 })\n@@ -664,7 +656,7 @@ pub mod writer {\n             _ => Err(io::IoError {\n                 kind: io::OtherIoError,\n                 desc: \"int too big\",\n-                detail: Some(format_strbuf!(\"{}\", n))\n+                detail: Some(format!(\"{}\", n))\n             })\n         }\n     }\n@@ -677,7 +669,7 @@ pub mod writer {\n         Err(io::IoError {\n             kind: io::OtherIoError,\n             desc: \"int too big\",\n-            detail: Some(format_strbuf!(\"{}\", n))\n+            detail: Some(format!(\"{}\", n))\n         })\n     }\n "}, {"sha": "8ae3336c342b4aed27428b04efcf1a5355b45f9d", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -174,8 +174,7 @@ mod tests {\n     #[test]\n     pub fn test_to_hex_all_bytes() {\n         for i in range(0, 256) {\n-            assert_eq!([i as u8].to_hex(),\n-                       format_strbuf!(\"{:02x}\", i as uint));\n+            assert_eq!([i as u8].to_hex(), format!(\"{:02x}\", i as uint));\n         }\n     }\n "}, {"sha": "09ba46bf0c746b90cf12517d2342bb9edc7198cd", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -1819,15 +1819,15 @@ macro_rules! expect(\n         match $e {\n             Null => Ok(()),\n             other => Err(ExpectedError(\"Null\".to_string(),\n-                                       format_strbuf!(\"{}\", other)))\n+                                       format!(\"{}\", other)))\n         }\n     });\n     ($e:expr, $t:ident) => ({\n         match $e {\n             $t(v) => Ok(v),\n             other => {\n                 Err(ExpectedError(stringify!($t).to_string(),\n-                                  format_strbuf!(\"{}\", other)))\n+                                  format!(\"{}\", other)))\n             }\n         }\n     })\n@@ -1869,7 +1869,7 @@ impl ::Decoder<DecoderError> for Decoder {\n             },\n             value => {\n                 Err(ExpectedError(\"Number\".to_string(),\n-                                  format_strbuf!(\"{}\", value)))\n+                                  format!(\"{}\", value)))\n             }\n         }\n     }\n@@ -1887,7 +1887,7 @@ impl ::Decoder<DecoderError> for Decoder {\n             }\n         }\n         Err(ExpectedError(\"single character string\".to_string(),\n-                          format_strbuf!(\"{}\", s)))\n+                          format!(\"{}\", s)))\n     }\n \n     fn read_str(&mut self) -> DecodeResult<String> {\n@@ -1914,7 +1914,7 @@ impl ::Decoder<DecoderError> for Decoder {\n                     Some(String(s)) => s,\n                     Some(val) => {\n                         return Err(ExpectedError(\"String\".to_string(),\n-                                                 format_strbuf!(\"{}\", val)))\n+                                                 format!(\"{}\", val)))\n                     }\n                     None => {\n                         return Err(MissingFieldError(\"variant\".to_string()))\n@@ -1928,7 +1928,7 @@ impl ::Decoder<DecoderError> for Decoder {\n                     },\n                     Some(val) => {\n                         return Err(ExpectedError(\"List\".to_string(),\n-                                                 format_strbuf!(\"{}\", val)))\n+                                                 format!(\"{}\", val)))\n                     }\n                     None => {\n                         return Err(MissingFieldError(\"fields\".to_string()))\n@@ -1938,7 +1938,7 @@ impl ::Decoder<DecoderError> for Decoder {\n             }\n             json => {\n                 return Err(ExpectedError(\"String or Object\".to_string(),\n-                                         format_strbuf!(\"{}\", json)))\n+                                         format!(\"{}\", json)))\n             }\n         };\n         let idx = match names.iter()"}, {"sha": "75b31f9c354307751523a798178fd9ef20225350", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -783,6 +783,6 @@ mod tests {\n     #[test]\n     fn test_show() {\n         let c = Ascii { chr: 't' as u8 };\n-        assert_eq!(format_strbuf!(\"{}\", c), \"t\".to_string());\n+        assert_eq!(format!(\"{}\", c), \"t\".to_string());\n     }\n }"}, {"sha": "9bca2f4248c7589270c8c61244f5beab7d6c08b9", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -562,13 +562,6 @@ pub fn format(args: &Arguments) -> string::String{\n     str::from_utf8(output.unwrap().as_slice()).unwrap().into_string()\n }\n \n-/// Temporary transition utility\n-pub fn format_strbuf(args: &Arguments) -> string::String {\n-    let mut output = io::MemWriter::new();\n-    let _ = write!(&mut output, \"{}\", args);\n-    str::from_utf8(output.unwrap().as_slice()).unwrap().into_string()\n-}\n-\n #[cfg(stage0)]\n impl<T> Poly for T {\n     fn fmt(&self, f: &mut Formatter) -> Result {"}, {"sha": "a77c7107f282f39785dbf5b795f58eed6f669eaf", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -745,8 +745,7 @@ mod test {\n     pub fn tmpdir() -> TempDir {\n         use os;\n         use rand;\n-        let ret = os::tmpdir().join(\n-            format_strbuf!(\"rust-{}\", rand::random::<u32>()));\n+        let ret = os::tmpdir().join(format!(\"rust-{}\", rand::random::<u32>()));\n         check!(io::fs::mkdir(&ret, io::UserRWX));\n         TempDir(ret)\n     }\n@@ -953,7 +952,7 @@ mod test {\n         check!(mkdir(dir, io::UserRWX));\n         let prefix = \"foo\";\n         for n in range(0,3) {\n-            let f = dir.join(format_strbuf!(\"{}.txt\", n));\n+            let f = dir.join(format!(\"{}.txt\", n));\n             let mut w = check!(File::create(&f));\n             let msg_str = format!(\"{}{}\", prefix, n.to_str());\n             let msg = msg_str.as_slice().as_bytes();\n@@ -1040,7 +1039,7 @@ mod test {\n         let tmpdir = tmpdir();\n \n         let mut dirpath = tmpdir.path().clone();\n-        dirpath.push(format_strbuf!(\"test-\uac00\u4e00\u30fc\u4f60\u597d\"));\n+        dirpath.push(format!(\"test-\uac00\u4e00\u30fc\u4f60\u597d\"));\n         check!(mkdir(&dirpath, io::UserRWX));\n         assert!(dirpath.is_dir());\n \n@@ -1057,7 +1056,7 @@ mod test {\n \n         let tmpdir = tmpdir();\n         let unicode = tmpdir.path();\n-        let unicode = unicode.join(format_strbuf!(\"test-\uac01\u4e01\u30fc\u518d\u89c1\"));\n+        let unicode = unicode.join(format!(\"test-\uac01\u4e01\u30fc\u518d\u89c1\"));\n         check!(mkdir(&unicode, io::UserRWX));\n         assert!(unicode.exists());\n         assert!(!Path::new(\"test/unicode-bogus-path-\uac01\u4e01\u30fc\u518d\u89c1\").exists());"}, {"sha": "5ca7e417af695cf21331ec6509e770f863fe621f", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -43,10 +43,10 @@ impl TempDir {\n \n         for _ in range(0u, 1000) {\n             let filename =\n-                format_strbuf!(\"rs-{}-{}-{}\",\n-                               unsafe { libc::getpid() },\n-                               unsafe { CNT.fetch_add(1, atomics::SeqCst) },\n-                               suffix);\n+                format!(\"rs-{}-{}-{}\",\n+                        unsafe { libc::getpid() },\n+                        unsafe { CNT.fetch_add(1, atomics::SeqCst) },\n+                        suffix);\n             let p = tmpdir.join(filename);\n             match fs::mkdir(&p, io::UserRWX) {\n                 Err(..) => {}"}, {"sha": "4d3dde46b57b57516f71fbc62fe37c8d0e291f76", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -67,14 +67,14 @@ pub fn next_test_unix() -> Path {\n     // base port and pid are an attempt to be unique between multiple\n     // test-runners of different configurations running on one\n     // buildbot, the count is to be unique within this executable.\n-    let string = format_strbuf!(\"rust-test-unix-path-{}-{}-{}\",\n-                                base_port(),\n-                                unsafe {libc::getpid()},\n-                                unsafe {COUNT.fetch_add(1, Relaxed)});\n+    let string = format!(\"rust-test-unix-path-{}-{}-{}\",\n+                         base_port(),\n+                         unsafe {libc::getpid()},\n+                         unsafe {COUNT.fetch_add(1, Relaxed)});\n     if cfg!(unix) {\n         os::tmpdir().join(string)\n     } else {\n-        Path::new(format_strbuf!(\"{}{}\", r\"\\\\.\\pipe\\\", string))\n+        Path::new(format!(\"{}{}\", r\"\\\\.\\pipe\\\", string))\n     }\n }\n "}, {"sha": "0b9fc250636f43b49f1ed16273f761cc769ea539", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -229,14 +229,6 @@ macro_rules! format(\n     )\n )\n \n-/// Temporary transitionary thing.\n-#[macro_export]\n-macro_rules! format_strbuf(\n-    ($($arg:tt)*) => (\n-        format_args!(::std::fmt::format_strbuf, $($arg)*)\n-    )\n-)\n-\n /// Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\n /// See `std::fmt` for more information.\n ///"}, {"sha": "889a42ec00eaa457e2ab64bb394e043ece938fe8", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -78,7 +78,7 @@ impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> String {\n-        format_strbuf!(\"{}\", ::fmt::radix(*self, radix as u8))\n+        format!(\"{}\", ::fmt::radix(*self, radix as u8))\n     }\n }\n "}, {"sha": "769588d0bcb06aa9cb32f5bf2a962c6b202fff97", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -79,7 +79,7 @@ impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> String {\n-        format_strbuf!(\"{}\", ::fmt::radix(*self, radix as u8))\n+        format!(\"{}\", ::fmt::radix(*self, radix as u8))\n     }\n }\n "}, {"sha": "f960228c63c684978a291e3c121a81b3598283b1", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -437,7 +437,7 @@ pub fn pipe() -> Pipe {\n \n /// Returns the proper dll filename for the given basename of a file.\n pub fn dll_filename(base: &str) -> String {\n-    format_strbuf!(\"{}{}{}\", consts::DLL_PREFIX, base, consts::DLL_SUFFIX)\n+    format!(\"{}{}{}\", consts::DLL_PREFIX, base, consts::DLL_SUFFIX)\n }\n \n /// Optionally returns the filesystem path of the current executable which is\n@@ -1513,7 +1513,7 @@ mod tests {\n \n     fn make_rand_name() -> String {\n         let mut rng = rand::task_rng();\n-        let n = format_strbuf!(\"TEST{}\", rng.gen_ascii_str(10u).as_slice());\n+        let n = format!(\"TEST{}\", rng.gen_ascii_str(10u).as_slice());\n         assert!(getenv(n.as_slice()).is_none());\n         n\n     }"}, {"sha": "88c3e9def8cf41d8e661ea9f3367869f54fbc1f6", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -900,7 +900,7 @@ pub fn make_non_verbatim(path: &Path) -> Option<Path> {\n         }\n         Some(VerbatimUNCPrefix(_,_)) => {\n             // \\\\?\\UNC\\server\\share\n-            Path::new(format_strbuf!(r\"\\\\{}\", repr.slice_from(7)))\n+            Path::new(format!(r\"\\\\{}\", repr.slice_from(7)))\n         }\n     };\n     if new_path.prefix.is_none() {"}, {"sha": "f34dcaaa427ed0ecea61e84f2a03c44bc0bb5982", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -354,7 +354,7 @@ pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str,\n     // required with the current scheme, and (b) we don't handle\n     // failure + OOM properly anyway (see comment in begin_unwind\n     // below).\n-    begin_unwind_inner(box fmt::format_strbuf(msg), file, line)\n+    begin_unwind_inner(box fmt::format(msg), file, line)\n }\n \n /// This is the entry point of unwinding for fail!() and assert!()."}, {"sha": "b80b2581e08e60635d979c8a0a8e1bc4ac621754", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -2123,15 +2123,15 @@ mod tests {\n         assert_eq!(s.len(), 5);\n         assert_eq!(s.as_slice(), \"abcde\");\n         assert_eq!(s.to_str(), \"abcde\".to_string());\n-        assert_eq!(format_strbuf!(\"{}\", s), \"abcde\".to_string());\n+        assert_eq!(format!(\"{}\", s), \"abcde\".to_string());\n         assert!(s.lt(&Owned(\"bcdef\".to_string())));\n         assert_eq!(Slice(\"\"), Default::default());\n \n         let o = Owned(\"abcde\".to_string());\n         assert_eq!(o.len(), 5);\n         assert_eq!(o.as_slice(), \"abcde\");\n         assert_eq!(o.to_str(), \"abcde\".to_string());\n-        assert_eq!(format_strbuf!(\"{}\", o), \"abcde\".to_string());\n+        assert_eq!(format!(\"{}\", o), \"abcde\".to_string());\n         assert!(o.lt(&Slice(\"bcdef\")));\n         assert_eq!(Owned(\"\".to_string()), Default::default());\n "}, {"sha": "3b223b68ee666204d7d7412ef6c85317e3f9fa02", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -31,7 +31,7 @@ pub trait IntoStr {\n \n impl<T: fmt::Show> ToStr for T {\n     fn to_str(&self) -> String {\n-        format_strbuf!(\"{}\", *self)\n+        format!(\"{}\", *self)\n     }\n }\n "}, {"sha": "c05fc8ce6d9e679dc42d1a5efd860d90f5fefab7", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -895,8 +895,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n     match parser.errors.shift() {\n         Some(error) => {\n             cx.ecx.span_err(efmt.span,\n-                            format_strbuf!(\"invalid format string: {}\",\n-                                           error).as_slice());\n+                            format!(\"invalid format string: {}\",\n+                                    error).as_slice());\n             return DummyResult::raw_expr(sp);\n         }\n         None => {}"}, {"sha": "3da8d7672f5639895e6158ccaae7fc83da083ada", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -281,9 +281,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                     ';' => (),\n \n                     _ => {\n-                        return Err(format_strbuf!(\"unrecognized format \\\n-                                                   option {}\",\n-                                                  cur))\n+                        return Err(format!(\"unrecognized format option {}\", cur))\n                     }\n                 }\n             },\n@@ -549,8 +547,8 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                     s\n                 }\n                 _ => {\n-                    return Err(format_strbuf!(\"non-string on stack with %{}\",\n-                                              op.to_char()))\n+                    return Err(format!(\"non-string on stack with %{}\",\n+                                       op.to_char()))\n                 }\n             }\n         }"}, {"sha": "b155753191c824f67d718311be72a84003137ed4", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -164,7 +164,7 @@ pub fn parse(file: &mut io::Reader, longnames: bool)\n     macro_rules! try( ($e:expr) => (\n         match $e {\n             Ok(e) => e,\n-            Err(e) => return Err(format_strbuf!(\"{}\", e))\n+            Err(e) => return Err(format!(\"{}\", e))\n         }\n     ) )\n \n@@ -185,10 +185,8 @@ pub fn parse(file: &mut io::Reader, longnames: bool)\n     // Check magic number\n     let magic = try!(file.read_le_u16());\n     if magic != 0x011A {\n-        return Err(format_strbuf!(\"invalid magic number: expected {:x} but \\\n-                                   found {:x}\",\n-                                  0x011A,\n-                                  magic as uint));\n+        return Err(format!(\"invalid magic number: expected {:x} but found {:x}\",\n+                           0x011A, magic as uint));\n     }\n \n     let names_bytes          = try!(file.read_le_i16()) as int;"}, {"sha": "6b8ebb670e7b37963f1d3caf37546b124c99db08", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -81,11 +81,11 @@ pub fn open(term: &str) -> Result<File, String> {\n         Some(x) => {\n             match File::open(x) {\n                 Ok(file) => Ok(file),\n-                Err(e) => Err(format_strbuf!(\"error opening file: {}\", e)),\n+                Err(e) => Err(format!(\"error opening file: {}\", e)),\n             }\n         }\n         None => {\n-            Err(format_strbuf!(\"could not find terminfo entry for {}\", term))\n+            Err(format!(\"could not find terminfo entry for {}\", term))\n         }\n     }\n }"}, {"sha": "1de7f90c8069dce183f99ce7f401eb61570b7bef", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -374,7 +374,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         let s = matches.free.get(0).as_slice();\n         match Regex::new(s) {\n             Ok(re) => Some(re),\n-            Err(e) => return Some(Err(format_strbuf!(\"could not parse /{}/: {}\", s, e)))\n+            Err(e) => return Some(Err(format!(\"could not parse /{}/: {}\", s, e)))\n         }\n     } else {\n         None\n@@ -739,22 +739,20 @@ impl<T: Writer> ConsoleTestState<T> {\n pub fn fmt_metrics(mm: &MetricMap) -> String {\n     let MetricMap(ref mm) = *mm;\n     let v : Vec<String> = mm.iter()\n-        .map(|(k,v)| format_strbuf!(\"{}: {} (+/- {})\",\n-                          *k,\n-                          v.value as f64,\n-                          v.noise as f64))\n+        .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n+                             v.value as f64, v.noise as f64))\n         .collect();\n     v.connect(\", \").to_string()\n }\n \n pub fn fmt_bench_samples(bs: &BenchSamples) -> String {\n     if bs.mb_s != 0 {\n-        format_strbuf!(\"{:>9} ns/iter (+/- {}) = {} MB/s\",\n+        format!(\"{:>9} ns/iter (+/- {}) = {} MB/s\",\n              bs.ns_iter_summ.median as uint,\n              (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as uint,\n              bs.mb_s)\n     } else {\n-        format_strbuf!(\"{:>9} ns/iter (+/- {})\",\n+        format!(\"{:>9} ns/iter (+/- {})\",\n              bs.ns_iter_summ.median as uint,\n              (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as uint)\n     }"}, {"sha": "e9b20c0117d98d3e7afe5834c45a40299e761f44", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -363,7 +363,7 @@ impl Tm {\n             let mut m = num::abs(self.tm_gmtoff) / 60_i32;\n             let h = m / 60_i32;\n             m -= h * 60_i32;\n-            format_strbuf!(\"{}{}{:02d}:{:02d}\", s, sign, h as int, m as int)\n+            format!(\"{}{}{:02d}:{:02d}\", s, sign, h as int, m as int)\n         }\n     }\n }\n@@ -469,7 +469,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n         if c == range.ch {\n             Ok(range.next)\n         } else {\n-            Err(format_strbuf!(\"Expected {}, found {}\",\n+            Err(format!(\"Expected {}, found {}\",\n                 str::from_char(c),\n                 str::from_char(range.ch)))\n         }\n@@ -772,8 +772,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n           }\n           '%' => parse_char(s, pos, '%'),\n           ch => {\n-            Err(format_strbuf!(\"unknown formatting type: {}\",\n-                               str::from_char(ch)))\n+            Err(format!(\"unknown formatting type: {}\", str::from_char(ch)))\n           }\n         }\n     }\n@@ -889,16 +888,16 @@ pub fn strftime(format: &str, tm: &Tm) -> String {\n         }\n \n         match ch {\n-            'G' => format_strbuf!(\"{}\", year),\n-            'g' => format_strbuf!(\"{:02d}\", (year % 100 + 100) % 100),\n-            'V' => format_strbuf!(\"{:02d}\", days / 7 + 1),\n+            'G' => format!(\"{}\", year),\n+            'g' => format!(\"{:02d}\", (year % 100 + 100) % 100),\n+            'V' => format!(\"{:02d}\", days / 7 + 1),\n             _ => \"\".to_string()\n         }\n     }\n \n     fn parse_type(ch: char, tm: &Tm) -> String {\n       let die = || {\n-          format_strbuf!(\"strftime: can't understand this format {} \", ch)\n+          format!(\"strftime: can't understand this format {} \", ch)\n       };\n         match ch {\n           'A' => match tm.tm_wday as int {\n@@ -951,99 +950,99 @@ pub fn strftime(format: &str, tm: &Tm) -> String {\n             11 => \"Dec\".to_string(),\n             _  => die()\n           },\n-          'C' => format_strbuf!(\"{:02d}\", (tm.tm_year as int + 1900) / 100),\n+          'C' => format!(\"{:02d}\", (tm.tm_year as int + 1900) / 100),\n           'c' => {\n-            format_strbuf!(\"{} {} {} {} {}\",\n+            format!(\"{} {} {} {} {}\",\n                 parse_type('a', tm),\n                 parse_type('b', tm),\n                 parse_type('e', tm),\n                 parse_type('T', tm),\n                 parse_type('Y', tm))\n           }\n           'D' | 'x' => {\n-            format_strbuf!(\"{}/{}/{}\",\n+            format!(\"{}/{}/{}\",\n                 parse_type('m', tm),\n                 parse_type('d', tm),\n                 parse_type('y', tm))\n           }\n-          'd' => format_strbuf!(\"{:02d}\", tm.tm_mday),\n-          'e' => format_strbuf!(\"{:2d}\", tm.tm_mday),\n-          'f' => format_strbuf!(\"{:09d}\", tm.tm_nsec),\n+          'd' => format!(\"{:02d}\", tm.tm_mday),\n+          'e' => format!(\"{:2d}\", tm.tm_mday),\n+          'f' => format!(\"{:09d}\", tm.tm_nsec),\n           'F' => {\n-            format_strbuf!(\"{}-{}-{}\",\n+            format!(\"{}-{}-{}\",\n                 parse_type('Y', tm),\n                 parse_type('m', tm),\n                 parse_type('d', tm))\n           }\n           'G' => iso_week('G', tm),\n           'g' => iso_week('g', tm),\n-          'H' => format_strbuf!(\"{:02d}\", tm.tm_hour),\n+          'H' => format!(\"{:02d}\", tm.tm_hour),\n           'I' => {\n             let mut h = tm.tm_hour;\n             if h == 0 { h = 12 }\n             if h > 12 { h -= 12 }\n-            format_strbuf!(\"{:02d}\", h)\n+            format!(\"{:02d}\", h)\n           }\n-          'j' => format_strbuf!(\"{:03d}\", tm.tm_yday + 1),\n-          'k' => format_strbuf!(\"{:2d}\", tm.tm_hour),\n+          'j' => format!(\"{:03d}\", tm.tm_yday + 1),\n+          'k' => format!(\"{:2d}\", tm.tm_hour),\n           'l' => {\n             let mut h = tm.tm_hour;\n             if h == 0 { h = 12 }\n             if h > 12 { h -= 12 }\n-            format_strbuf!(\"{:2d}\", h)\n+            format!(\"{:2d}\", h)\n           }\n-          'M' => format_strbuf!(\"{:02d}\", tm.tm_min),\n-          'm' => format_strbuf!(\"{:02d}\", tm.tm_mon + 1),\n+          'M' => format!(\"{:02d}\", tm.tm_min),\n+          'm' => format!(\"{:02d}\", tm.tm_mon + 1),\n           'n' => \"\\n\".to_string(),\n           'P' => if (tm.tm_hour as int) < 12 { \"am\".to_string() } else { \"pm\".to_string() },\n           'p' => if (tm.tm_hour as int) < 12 { \"AM\".to_string() } else { \"PM\".to_string() },\n           'R' => {\n-            format_strbuf!(\"{}:{}\",\n+            format!(\"{}:{}\",\n                 parse_type('H', tm),\n                 parse_type('M', tm))\n           }\n           'r' => {\n-            format_strbuf!(\"{}:{}:{} {}\",\n+            format!(\"{}:{}:{} {}\",\n                 parse_type('I', tm),\n                 parse_type('M', tm),\n                 parse_type('S', tm),\n                 parse_type('p', tm))\n           }\n-          'S' => format_strbuf!(\"{:02d}\", tm.tm_sec),\n-          's' => format_strbuf!(\"{}\", tm.to_timespec().sec),\n+          'S' => format!(\"{:02d}\", tm.tm_sec),\n+          's' => format!(\"{}\", tm.to_timespec().sec),\n           'T' | 'X' => {\n-            format_strbuf!(\"{}:{}:{}\",\n+            format!(\"{}:{}:{}\",\n                 parse_type('H', tm),\n                 parse_type('M', tm),\n                 parse_type('S', tm))\n           }\n           't' => \"\\t\".to_string(),\n-          'U' => format_strbuf!(\"{:02d}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n+          'U' => format!(\"{:02d}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n           'u' => {\n             let i = tm.tm_wday as int;\n             (if i == 0 { 7 } else { i }).to_str().to_string()\n           }\n           'V' => iso_week('V', tm),\n           'v' => {\n-            format_strbuf!(\"{}-{}-{}\",\n+            format!(\"{}-{}-{}\",\n                 parse_type('e', tm),\n                 parse_type('b', tm),\n                 parse_type('Y', tm))\n           }\n           'W' => {\n-              format_strbuf!(\"{:02d}\",\n+              format!(\"{:02d}\",\n                              (tm.tm_yday - (tm.tm_wday - 1 + 7) % 7 + 7) / 7)\n           }\n           'w' => (tm.tm_wday as int).to_str().to_string(),\n           'Y' => (tm.tm_year as int + 1900).to_str().to_string(),\n-          'y' => format_strbuf!(\"{:02d}\", (tm.tm_year as int + 1900) % 100),\n+          'y' => format!(\"{:02d}\", (tm.tm_year as int + 1900) % 100),\n           'Z' => \"\".to_string(),    // FIXME(pcwalton): Implement this.\n           'z' => {\n             let sign = if tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n             let mut m = num::abs(tm.tm_gmtoff) / 60_i32;\n             let h = m / 60_i32;\n             m -= h * 60_i32;\n-            format_strbuf!(\"{}{:02d}{:02d}\", sign, h, m)\n+            format!(\"{}{:02d}{:02d}\", sign, h, m)\n           }\n           '+' => tm.rfc3339(),\n           '%' => \"%\".to_string(),"}, {"sha": "99dd7d8503c82079753442b0c55cb7760722dc9f", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -346,8 +346,8 @@ impl Uuid {\n         uf.data1 = to_be32(uf.data1);\n         uf.data2 = to_be16(uf.data2);\n         uf.data3 = to_be16(uf.data3);\n-        let s = format_strbuf!(\"{:08x}-{:04x}-{:04x}-{:02x}{:02x}-\\\n-                                {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}\",\n+        let s = format!(\"{:08x}-{:04x}-{:04x}-{:02x}{:02x}-\\\n+                         {:02x}{:02x}{:02x}{:02x}{:02x}{:02x}\",\n             uf.data1,\n             uf.data2, uf.data3,\n             uf.data4[0], uf.data4[1],\n@@ -362,7 +362,7 @@ impl Uuid {\n     ///\n     /// Example: `urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4`\n     pub fn to_urn_str(&self) -> String {\n-        format_strbuf!(\"urn:uuid:{}\", self.to_hyphenated_str())\n+        format!(\"urn:uuid:{}\", self.to_hyphenated_str())\n     }\n \n     /// Parses a UUID from a string of hexadecimal digits with optional hyphens"}, {"sha": "1dc52166965778bb7ce37043f86423e32b75df7d", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -74,8 +74,8 @@ fn main() {\n                     let b = bottom_up_tree(&arena, -i, depth);\n                     chk += item_check(a) + item_check(b);\n                 }\n-                format_strbuf!(\"{}\\t trees of depth {}\\t check: {}\",\n-                               iterations * 2, depth, chk)\n+                format!(\"{}\\t trees of depth {}\\t check: {}\",\n+                        iterations * 2, depth, chk)\n             })\n         }).collect::<Vec<Future<String>>>();\n "}, {"sha": "baf02feb5b80a827510c6c16725a40976662a25d", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -134,9 +134,7 @@ fn creature(\n         }\n     }\n     // log creatures met and evil clones of self\n-    let report = format_strbuf!(\"{}{}\",\n-                                creatures_met,\n-                                Number(evil_clones_met));\n+    let report = format!(\"{}{}\", creatures_met, Number(evil_clones_met));\n     to_rendezvous_log.send(report);\n }\n "}, {"sha": "e39c51dd73a9f3d17f1e2ccaddda593a6239f97c", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -129,11 +129,11 @@ fn make_sequence_processor(sz: uint,\n    let buffer = match sz {\n        1u => { sort_and_fmt(&freqs, total) }\n        2u => { sort_and_fmt(&freqs, total) }\n-       3u => { format_strbuf!(\"{}\\t{}\", find(&freqs, \"GGT\".to_string()), \"GGT\") }\n-       4u => { format_strbuf!(\"{}\\t{}\", find(&freqs, \"GGTA\".to_string()), \"GGTA\") }\n-       6u => { format_strbuf!(\"{}\\t{}\", find(&freqs, \"GGTATT\".to_string()), \"GGTATT\") }\n-      12u => { format_strbuf!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATT\".to_string()), \"GGTATTTTAATT\") }\n-      18u => { format_strbuf!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATTTATAGT\".to_string()),\n+       3u => { format!(\"{}\\t{}\", find(&freqs, \"GGT\".to_string()), \"GGT\") }\n+       4u => { format!(\"{}\\t{}\", find(&freqs, \"GGTA\".to_string()), \"GGTA\") }\n+       6u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATT\".to_string()), \"GGTATT\") }\n+      12u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATT\".to_string()), \"GGTATTTTAATT\") }\n+      18u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATTTATAGT\".to_string()),\n                        \"GGTATTTTAATTTATAGT\") }\n         _ => { \"\".to_string() }\n    };"}, {"sha": "de558401aa6f07c69cecf3ead5ce4e11985fb4a4", "filename": "src/test/compile-fail/issue-13428.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13428.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -11,8 +11,8 @@\n // Regression test for #13428\n \n fn foo() -> String {  //~ ERROR not all control paths return a value\n-    format_strbuf!(\"Hello {}\",\n-                   \"world\")\n+    format!(\"Hello {}\",\n+            \"world\")\n     // Put the trailing semicolon on its own line to test that the\n     // note message gets the offending semicolon exactly\n     ;   //~ NOTE consider removing this semicolon"}, {"sha": "f860fdffba1a329da93e3be96b830279f5f659ac", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -15,5 +15,5 @@\n fn main() {\n     let mut a = 1;\n     if 1 == 1 { a = 2; }\n-    fail!(format_strbuf!(\"woooo{}\", \"o\"));\n+    fail!(format!(\"woooo{}\", \"o\"));\n }"}, {"sha": "336df3ff965264ce9ace2c3740bdb6a99a7a2126", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -20,10 +20,10 @@ fn main() {\n         macerate((*tasties).clone());\n     });\n     result(carrots, |food| {\n-        let mush = format_strbuf!(\"{}{}\", food, cheese);\n+        let mush = format!(\"{}{}\", food, cheese);\n         let cheese = cheese.clone();\n         let f: || = || {\n-            let _chew = format_strbuf!(\"{}{}\", mush, cheese);\n+            let _chew = format!(\"{}{}\", mush, cheese);\n             fail!(\"so yummy\")\n         };\n         f();"}, {"sha": "270f85114ea4934034734c46d8ee463f4f66e314", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -16,13 +16,13 @@ trait Foo {\n \n impl<T:Foo> Foo for @T {\n     fn foo(&self) -> String {\n-        format_strbuf!(\"@{}\", (**self).foo())\n+        format!(\"@{}\", (**self).foo())\n     }\n }\n \n impl Foo for uint {\n     fn foo(&self) -> String {\n-        format_strbuf!(\"{}\", *self)\n+        format!(\"{}\", *self)\n     }\n }\n "}, {"sha": "239247cdd18a67eca9f823ec347b376a9cc39f01", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -19,15 +19,15 @@ fn hello<S:Speak>(s:&S) -> String{\n \n impl Speak for int {\n     fn say(&self, s:&str) -> String {\n-        format_strbuf!(\"{}: {}\", s, *self)\n+        format!(\"{}: {}\", s, *self)\n     }\n }\n \n impl<T: Speak> Speak for Option<T> {\n     fn say(&self, s:&str) -> String {\n         match *self {\n-            None => format_strbuf!(\"{} - none\", s),\n-            Some(ref x) => { format_strbuf!(\"something!{}\", x.say(s)) }\n+            None => format!(\"{} - none\", s),\n+            Some(ref x) => { format!(\"something!{}\", x.say(s)) }\n         }\n     }\n }"}, {"sha": "c05f2502a893ae44514ee9c483aa742d69ce521c", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -50,15 +50,15 @@ pub fn main() {\n \n     let greeting = \"Hello \".to_string();\n     call_it(proc(s) {\n-        format_strbuf!(\"{}{}\", greeting, s)\n+        format!(\"{}{}\", greeting, s)\n     });\n \n     let greeting = \"Goodbye \".to_string();\n-    call_it(proc(s) format_strbuf!(\"{}{}\", greeting, s));\n+    call_it(proc(s) format!(\"{}{}\", greeting, s));\n \n     let greeting = \"How's life, \".to_string();\n     call_it(proc(s: String) -> String {\n-        format_strbuf!(\"{}{}\", greeting, s)\n+        format!(\"{}{}\", greeting, s)\n     });\n \n     // Closures"}, {"sha": "4e5dea82cf44f9e6ca8ba352b5dedbc5ab893e70", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -45,7 +45,7 @@ fn add_interface(_store: int, managed_ip: String, data: json::Json) -> (String,\n             let name = lookup((*interface).clone(),\n                               \"ifDescr\".to_string(),\n                               \"\".to_string());\n-            let label = format_strbuf!(\"{}-{}\", managed_ip, name);\n+            let label = format!(\"{}-{}\", managed_ip, name);\n \n             (label, bool_value(false))\n         }"}, {"sha": "323fff76efbb7723a5506e3a480432f28f232f4e", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -13,7 +13,7 @@\n extern crate debug;\n \n fn assert_repr_eq<T>(obj : T, expected : String) {\n-    assert_eq!(expected, format_strbuf!(\"{:?}\", obj));\n+    assert_eq!(expected, format!(\"{:?}\", obj));\n }\n \n pub fn main() {"}, {"sha": "cb7a5989430a0874085b79034ffeca9d596cf32e", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -17,19 +17,19 @@ enum foo {\n }\n \n fn check_log<T>(exp: String, v: T) {\n-    assert_eq!(exp, format_strbuf!(\"{:?}\", v));\n+    assert_eq!(exp, format!(\"{:?}\", v));\n }\n \n pub fn main() {\n     let mut x = Some(a(22u));\n     let exp = \"Some(a(22u))\".to_string();\n-    let act = format_strbuf!(\"{:?}\", x);\n+    let act = format!(\"{:?}\", x);\n     assert_eq!(act, exp);\n     check_log(exp, x);\n \n     x = None;\n     let exp = \"None\".to_string();\n-    let act = format_strbuf!(\"{:?}\", x);\n+    let act = format!(\"{:?}\", x);\n     assert_eq!(act, exp);\n     check_log(exp, x);\n }"}, {"sha": "e6a23d9929059c19b0d46565949b10a57b54cf39", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -21,7 +21,7 @@ enum bar {\n }\n \n pub fn main() {\n-    assert_eq!(\"a(22u)\".to_string(), format_strbuf!(\"{:?}\", a(22u)));\n-    assert_eq!(\"c\".to_string(), format_strbuf!(\"{:?}\", c));\n-    assert_eq!(\"d\".to_string(), format_strbuf!(\"{:?}\", d));\n+    assert_eq!(\"a(22u)\".to_string(), format!(\"{:?}\", a(22u)));\n+    assert_eq!(\"c\".to_string(), format!(\"{:?}\", c));\n+    assert_eq!(\"d\".to_string(), format!(\"{:?}\", d));\n }"}, {"sha": "b359614fa9adb2c365ec34174d72d8a2c858ae00", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -22,7 +22,7 @@ fn f2(ref_string: &str) -> String {\n     match ref_string {\n         \"a\" => \"found a\".to_string(),\n         \"b\" => \"found b\".to_string(),\n-        s => format_strbuf!(\"not found ({})\", s)\n+        s => format!(\"not found ({})\", s)\n     }\n }\n \n@@ -38,7 +38,7 @@ fn g2(ref_1: &str, ref_2: &str) -> String {\n     match (ref_1, ref_2) {\n         (\"a\", \"b\") => \"found a,b\".to_string(),\n         (\"b\", \"c\") => \"found b,c\".to_string(),\n-        (s1, s2) => format_strbuf!(\"not found ({}, {})\", s1, s2)\n+        (s1, s2) => format!(\"not found ({}, {})\", s1, s2)\n     }\n }\n "}, {"sha": "3ad5da317013fd05f7422798338c6d5bfd8da4a3", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -45,8 +45,8 @@ pub fn main() {\n     assert_eq!(transform(Some(10)), Some(\"11\".to_string()));\n     assert_eq!(transform(None), None);\n     assert!((vec!(\"hi\".to_string()))\n-        .bind(|x| vec!(x.clone(), format_strbuf!(\"{}!\", x)) )\n-        .bind(|x| vec!(x.clone(), format_strbuf!(\"{}?\", x)) ) ==\n+        .bind(|x| vec!(x.clone(), format!(\"{}!\", x)) )\n+        .bind(|x| vec!(x.clone(), format!(\"{}?\", x)) ) ==\n         vec!(\"hi\".to_string(),\n              \"hi?\".to_string(),\n              \"hi!\".to_string(),"}, {"sha": "70839c1884791f5b987fa2f56127694fd954414a", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -36,8 +36,7 @@ fn main() {\n     let blah       = \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\";\n \n     let child_name = \"child\";\n-    let child_dir  = format_strbuf!(\"process-spawn-with-unicode-params-{}\",\n-                                    blah);\n+    let child_dir  = format!(\"process-spawn-with-unicode-params-{}\", blah);\n \n     // parameters sent to child / expected to be received from parent\n     let arg = blah;"}, {"sha": "5604093ea9c8add7e0e0c4930b17a76c36bb2b49", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -61,7 +61,7 @@ pub fn main() {\n     assert_eq!(map.find(&Owned(\"def\".to_string())), Some(&d));\n \n     assert!(map.pop(&Slice(\"foo\")).is_some());\n-    assert_eq!(map.move_iter().map(|(k, v)| format_strbuf!(\"{}{}\", k, v))\n+    assert_eq!(map.move_iter().map(|(k, v)| format!(\"{}{}\", k, v))\n                               .collect::<Vec<String>>()\n                               .concat(),\n                \"abc50bcd51cde52def53\".to_string());"}, {"sha": "7141d0b9df5250e85decc2cbe02924024289ec37", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -14,7 +14,7 @@\n pub fn main() {\n     let a: String = \"hello\".to_string();\n     let b: String = \"world\".to_string();\n-    let s: String = format_strbuf!(\"{}{}\", a, b);\n+    let s: String = format!(\"{}{}\", a, b);\n     println!(\"{}\", s.clone());\n     assert_eq!(s.as_slice()[9], 'd' as u8);\n }"}, {"sha": "612483f69094d832bb86cc28bb69dba2d05b817c", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     while i > 0 {\n         println!(\"{}\", a.len());\n         assert_eq!(a.len(), expected_len);\n-        a = format_strbuf!(\"{}{}\", a, a);\n+        a = format!(\"{}{}\", a, a);\n         i -= 1;\n         expected_len *= 2u;\n     }"}, {"sha": "454cf4c8eda21294b382ddd8089c181e6391ba3a", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -29,7 +29,7 @@ impl<T:to_str> to_str for Option<T> {\n     fn to_str_(&self) -> String {\n         match *self {\n           None => { \"none\".to_string() }\n-          Some(ref t) => format_strbuf!(\"some({})\", t.to_str_()),\n+          Some(ref t) => format!(\"some({})\", t.to_str_()),\n         }\n     }\n }\n@@ -46,10 +46,7 @@ impl to_str for Tree {\n         let this = t.borrow();\n         let (l, r) = (this.left, this.right);\n         let val = &this.val;\n-        format_strbuf!(\"[{}, {}, {}]\",\n-                       val.to_str_(),\n-                       l.to_str_(),\n-                       r.to_str_())\n+        format!(\"[{}, {}, {}]\", val.to_str_(), l.to_str_(), r.to_str_())\n     }\n }\n "}, {"sha": "ea5e0a9ee910b7698e6c80ffbca72356d362aab6", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -20,11 +20,11 @@ impl to_str for int {\n \n impl<T:to_str> to_str for Vec<T> {\n     fn to_string(&self) -> String {\n-        format_strbuf!(\"[{}]\",\n-                       self.iter()\n-                           .map(|e| e.to_string())\n-                           .collect::<Vec<String>>()\n-                           .connect(\", \"))\n+        format!(\"[{}]\",\n+                self.iter()\n+                    .map(|e| e.to_string())\n+                    .collect::<Vec<String>>()\n+                    .connect(\", \"))\n     }\n }\n \n@@ -33,7 +33,7 @@ pub fn main() {\n     assert!((vec!(2, 3, 4)).to_string() == \"[2, 3, 4]\".to_string());\n \n     fn indirect<T:to_str>(x: T) -> String {\n-        format_strbuf!(\"{}!\", x.to_string())\n+        format!(\"{}!\", x.to_string())\n     }\n     assert!(indirect(vec!(10, 20)) == \"[10, 20]!\".to_string());\n "}, {"sha": "29fc2fd5a7a021d2ec1baeb627005f6e54ccb6e0", "filename": "src/test/run-pass/traits-default-method-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42aed6bde2fb05a262e21334656cdf91f51744dd/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-macro.rs?ref=42aed6bde2fb05a262e21334656cdf91f51744dd", "patch": "@@ -11,7 +11,7 @@\n \n trait Foo {\n     fn bar(&self) -> String {\n-        format_strbuf!(\"test\")\n+        format!(\"test\")\n     }\n }\n "}]}