{"sha": "ecd26739d45837ee21fe0e2941f957086fbf6a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDI2NzM5ZDQ1ODM3ZWUyMWZlMGUyOTQxZjk1NzA4NmZiZjZhNDc=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-11-03T09:56:49Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-11-04T03:27:18Z"}, "message": "librustc_lexer: Simplify \"lifetime_or_char\" method", "tree": {"sha": "126ff9ae841a7bf15f3d32f1e835ed86a6093e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/126ff9ae841a7bf15f3d32f1e835ed86a6093e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd26739d45837ee21fe0e2941f957086fbf6a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd26739d45837ee21fe0e2941f957086fbf6a47", "html_url": "https://github.com/rust-lang/rust/commit/ecd26739d45837ee21fe0e2941f957086fbf6a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd26739d45837ee21fe0e2941f957086fbf6a47/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e350bd9990c600ed68ebac13ff8a89cade98fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e350bd9990c600ed68ebac13ff8a89cade98fb2", "html_url": "https://github.com/rust-lang/rust/commit/6e350bd9990c600ed68ebac13ff8a89cade98fb2"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "655619bc72212ddb8983dbf6ac4f3e2843c26c39", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ecd26739d45837ee21fe0e2941f957086fbf6a47/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd26739d45837ee21fe0e2941f957086fbf6a47/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=ecd26739d45837ee21fe0e2941f957086fbf6a47", "patch": "@@ -498,41 +498,48 @@ impl Cursor<'_> {\n \n     fn lifetime_or_char(&mut self) -> TokenKind {\n         debug_assert!(self.prev() == '\\'');\n-        let mut starts_with_number = false;\n-\n-        // Check if the first symbol after '\\'' is a valid identifier\n-        // character or a number (not a digit followed by '\\'').\n-        if (is_id_start(self.nth_char(0))\n-            || self.nth_char(0).is_digit(10) && {\n-                starts_with_number = true;\n-                true\n-            })\n-            && self.nth_char(1) != '\\''\n-        {\n-            self.bump();\n \n-            // Skip the identifier.\n-            while is_id_continue(self.nth_char(0)) {\n-                self.bump();\n-            }\n+        let can_be_a_lifetime = if self.second() == '\\'' {\n+            // It's surely not a lifetime.\n+            false\n+        } else {\n+            // If the first symbol is valid for identifier, it can be a lifetime.\n+            // Also check if it's a number for a better error reporting (so '0 will\n+            // be reported as invalid lifetime and not as unterminated char literal).\n+            is_id_start(self.first()) || self.first().is_digit(10)\n+        };\n \n-            return if self.nth_char(0) == '\\'' {\n-                self.bump();\n-                let kind = Char { terminated: true };\n-                Literal { kind, suffix_start: self.len_consumed() }\n-            } else {\n-                Lifetime { starts_with_number }\n-            };\n+        if !can_be_a_lifetime {\n+            let terminated = self.single_quoted_string();\n+            let suffix_start = self.len_consumed();\n+            if terminated {\n+                self.eat_literal_suffix();\n+            }\n+            let kind = Char { terminated };\n+            return Literal { kind, suffix_start };\n         }\n \n-        // This is not a lifetime (checked above), parse a char literal.\n-        let terminated = self.single_quoted_string();\n-        let suffix_start = self.len_consumed();\n-        if terminated {\n-            self.eat_literal_suffix();\n+        // Either a lifetime or a character literal with\n+        // length greater than 1.\n+\n+        let starts_with_number = self.first().is_digit(10);\n+\n+        // Skip the literal contents.\n+        // First symbol can be a number (which isn't a valid identifier start),\n+        // so skip it without any checks.\n+        self.bump();\n+        self.eat_while(is_id_continue);\n+\n+        // Check if after skipping literal contents we've met a closing\n+        // single quote (which means that user attempted to create a\n+        // string with single quotes).\n+        if self.first() == '\\'' {\n+            self.bump();\n+            let kind = Char { terminated: true };\n+            return Literal { kind, suffix_start: self.len_consumed() };\n         }\n-        let kind = Char { terminated };\n-        return Literal { kind, suffix_start };\n+\n+        return Lifetime { starts_with_number };\n     }\n \n     fn single_quoted_string(&mut self) -> bool {"}]}