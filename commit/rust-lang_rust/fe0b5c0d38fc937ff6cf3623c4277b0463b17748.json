{"sha": "fe0b5c0d38fc937ff6cf3623c4277b0463b17748", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMGI1YzBkMzhmYzkzN2ZmNmNmMzYyM2M0Mjc3YjA0NjNiMTc3NDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-10T16:26:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-10T16:26:19Z"}, "message": "Auto merge of #26896 - tbu-:pr_getcwd, r=alexcrichton\n\n(On Windows, it works already.)", "tree": {"sha": "993442ceb596be68d8c7afd7103de54e17c12aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/993442ceb596be68d8c7afd7103de54e17c12aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0b5c0d38fc937ff6cf3623c4277b0463b17748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0b5c0d38fc937ff6cf3623c4277b0463b17748", "html_url": "https://github.com/rust-lang/rust/commit/fe0b5c0d38fc937ff6cf3623c4277b0463b17748", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0b5c0d38fc937ff6cf3623c4277b0463b17748/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fddfd089b75379f1d25f81541572d69a93f95c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fddfd089b75379f1d25f81541572d69a93f95c4f", "html_url": "https://github.com/rust-lang/rust/commit/fddfd089b75379f1d25f81541572d69a93f95c4f"}, {"sha": "b83ec47808c219cb8e85eeebb370be6466b2d690", "url": "https://api.github.com/repos/rust-lang/rust/commits/b83ec47808c219cb8e85eeebb370be6466b2d690", "html_url": "https://github.com/rust-lang/rust/commit/b83ec47808c219cb8e85eeebb370be6466b2d690"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "b65e065fe9148e0d307f3027e40322d83ed2b2ba", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe0b5c0d38fc937ff6cf3623c4277b0463b17748/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0b5c0d38fc937ff6cf3623c4277b0463b17748/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=fe0b5c0d38fc937ff6cf3623c4277b0463b17748", "patch": "@@ -36,7 +36,6 @@ use sys::os as os_imp;\n ///\n /// * Current directory does not exist.\n /// * There are insufficient permissions to access the current directory.\n-/// * The internal buffer is not large enough to hold the path.\n ///\n /// # Examples\n ///"}, {"sha": "2b6b50a1a56d77c108c60d7f5f7bfb47c8e66a5d", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fe0b5c0d38fc937ff6cf3623c4277b0463b17748/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0b5c0d38fc937ff6cf3623c4277b0463b17748/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=fe0b5c0d38fc937ff6cf3623c4277b0463b17748", "patch": "@@ -22,25 +22,17 @@ use io;\n use iter;\n use libc::{self, c_int, c_char, c_void};\n use mem;\n-use ptr;\n use path::{self, PathBuf};\n+use ptr;\n use slice;\n use str;\n use sys::c;\n use sys::fd;\n use vec;\n \n-const BUF_BYTES: usize = 2048;\n+const GETCWD_BUF_BYTES: usize = 2048;\n const TMPBUF_SZ: usize = 128;\n \n-fn bytes2path(b: &[u8]) -> PathBuf {\n-    PathBuf::from(<OsStr as OsStrExt>::from_bytes(b))\n-}\n-\n-fn os2path(os: OsString) -> PathBuf {\n-    bytes2path(os.as_bytes())\n-}\n-\n /// Returns the platform-specific value of errno\n pub fn errno() -> i32 {\n     #[cfg(any(target_os = \"macos\",\n@@ -102,12 +94,24 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {\n-    let mut buf = [0 as c_char; BUF_BYTES];\n-    unsafe {\n-        if libc::getcwd(buf.as_mut_ptr(), buf.len() as libc::size_t).is_null() {\n-            Err(io::Error::last_os_error())\n-        } else {\n-            Ok(bytes2path(CStr::from_ptr(buf.as_ptr()).to_bytes()))\n+    let mut buf = Vec::new();\n+    let mut n = GETCWD_BUF_BYTES;\n+    loop {\n+        unsafe {\n+            buf.reserve(n);\n+            let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n+            if !libc::getcwd(ptr, buf.capacity() as libc::size_t).is_null() {\n+                let len = CStr::from_ptr(buf.as_ptr() as *const libc::c_char).to_bytes().len();\n+                buf.set_len(len);\n+                buf.shrink_to_fit();\n+                return Ok(PathBuf::from(OsString::from_vec(buf)));\n+            } else {\n+                let error = io::Error::last_os_error();\n+                if error.raw_os_error() != Some(libc::ERANGE) {\n+                    return Err(error);\n+                }\n+            }\n+            n *= 2;\n         }\n     }\n }\n@@ -129,11 +133,14 @@ pub struct SplitPaths<'a> {\n }\n \n pub fn split_paths<'a>(unparsed: &'a OsStr) -> SplitPaths<'a> {\n+    fn bytes_to_path(b: &[u8]) -> PathBuf {\n+        PathBuf::from(<OsStr as OsStrExt>::from_bytes(b))\n+    }\n     fn is_colon(b: &u8) -> bool { *b == b':' }\n     let unparsed = unparsed.as_bytes();\n     SplitPaths {\n         iter: unparsed.split(is_colon as fn(&u8) -> bool)\n-                      .map(bytes2path as fn(&'a [u8]) -> PathBuf)\n+                      .map(bytes_to_path as fn(&'a [u8]) -> PathBuf)\n     }\n }\n \n@@ -444,7 +451,7 @@ pub fn page_size() -> usize {\n }\n \n pub fn temp_dir() -> PathBuf {\n-    getenv(\"TMPDIR\".as_ref()).map(os2path).unwrap_or_else(|| {\n+    getenv(\"TMPDIR\".as_ref()).map(PathBuf::from).unwrap_or_else(|| {\n         if cfg!(target_os = \"android\") {\n             PathBuf::from(\"/data/local/tmp\")\n         } else {\n@@ -456,7 +463,7 @@ pub fn temp_dir() -> PathBuf {\n pub fn home_dir() -> Option<PathBuf> {\n     return getenv(\"HOME\".as_ref()).or_else(|| unsafe {\n         fallback()\n-    }).map(os2path);\n+    }).map(PathBuf::from);\n \n     #[cfg(any(target_os = \"android\",\n               target_os = \"ios\"))]"}]}