{"sha": "ea017d7f84e218c4a8048d2ecd9d63bbda014209", "node_id": "C_kwDOAAsO6NoAKGVhMDE3ZDdmODRlMjE4YzRhODA0OGQyZWNkOWQ2M2JiZGEwMTQyMDk", "commit": {"author": {"name": "David Bar-On", "email": "61089727+davidBar-On@users.noreply.github.com", "date": "2022-08-09T13:30:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T13:30:49Z"}, "message": "Backport PR #4730 (#5390)\n\n* Backport PR #4730 that fix issue #4689\r\n\r\n* Test files for each Verion One and Two\r\n\r\n* Simplify per review comment - use defer and matches!\r\n\r\n* Changes per reviewer comments for reducing indentations", "tree": {"sha": "5c3a626cb18bc6949ddfb488517252689968fa35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3a626cb18bc6949ddfb488517252689968fa35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea017d7f84e218c4a8048d2ecd9d63bbda014209", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8mGJCRBK7hj4Ov3rIwAAau8IADXZQSPdseueDJ4r1rXHM9ha\nPoZK03NMJMo1nZ3gRm8f18zMBCNhRzBtlbFWNW3qYVTyhrlI1uxc/e83UdYHnc+9\nupVOViRSKFs5kUjperfotgfclD74IZZIxCCyTwUPHd3Ho6UPMn7ELDp4cvKCvipm\nefHhbwT2bN3v5V6l1z6a98Av0eChaeYfxRPBeo++Cu065dQBv37mQtgqfLDTMVCU\nZx+RSLhzp7TD1EJAv0cp+/b0cu96TALQs2s+wOWLJOdEFHcLAk0tU1+xquFAlthE\nos77GB9mF4e/kp/mK2pIhQyxfe2KIGDVnfwCXywY1VSltPXb416y7NBGSMxCgvk=\n=W3rY\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c3a626cb18bc6949ddfb488517252689968fa35\nparent a67d909627b7ec93e315bfe1c66895904055c75c\nauthor David Bar-On <61089727+davidBar-On@users.noreply.github.com> 1660051849 +0300\ncommitter GitHub <noreply@github.com> 1660051849 -0400\n\nBackport PR #4730 (#5390)\n\n* Backport PR #4730 that fix issue #4689\r\n\r\n* Test files for each Verion One and Two\r\n\r\n* Simplify per review comment - use defer and matches!\r\n\r\n* Changes per reviewer comments for reducing indentations"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea017d7f84e218c4a8048d2ecd9d63bbda014209", "html_url": "https://github.com/rust-lang/rust/commit/ea017d7f84e218c4a8048d2ecd9d63bbda014209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea017d7f84e218c4a8048d2ecd9d63bbda014209/comments", "author": {"login": "davidBar-On", "id": 61089727, "node_id": "MDQ6VXNlcjYxMDg5NzI3", "avatar_url": "https://avatars.githubusercontent.com/u/61089727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidBar-On", "html_url": "https://github.com/davidBar-On", "followers_url": "https://api.github.com/users/davidBar-On/followers", "following_url": "https://api.github.com/users/davidBar-On/following{/other_user}", "gists_url": "https://api.github.com/users/davidBar-On/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidBar-On/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidBar-On/subscriptions", "organizations_url": "https://api.github.com/users/davidBar-On/orgs", "repos_url": "https://api.github.com/users/davidBar-On/repos", "events_url": "https://api.github.com/users/davidBar-On/events{/privacy}", "received_events_url": "https://api.github.com/users/davidBar-On/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a67d909627b7ec93e315bfe1c66895904055c75c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67d909627b7ec93e315bfe1c66895904055c75c", "html_url": "https://github.com/rust-lang/rust/commit/a67d909627b7ec93e315bfe1c66895904055c75c"}], "stats": {"total": 643, "additions": 639, "deletions": 4}, "files": [{"sha": "25ad587ba856b824145950994faab7370ee32f5b", "filename": "src/types.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ea017d7f84e218c4a8048d2ecd9d63bbda014209/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea017d7f84e218c4a8048d2ecd9d63bbda014209/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ea017d7f84e218c4a8048d2ecd9d63bbda014209", "patch": "@@ -941,6 +941,28 @@ fn join_bounds_inner(\n         ast::GenericBound::Trait(..) => last_line_extendable(s),\n     };\n \n+    // Whether a GenericBound item is a PathSegment segment that includes internal array\n+    // that contains more than one item\n+    let is_item_with_multi_items_array = |item: &ast::GenericBound| match item {\n+        ast::GenericBound::Trait(ref poly_trait_ref, ..) => {\n+            let segments = &poly_trait_ref.trait_ref.path.segments;\n+            if segments.len() > 1 {\n+                true\n+            } else {\n+                if let Some(args_in) = &segments[0].args {\n+                    matches!(\n+                        args_in.deref(),\n+                        ast::GenericArgs::AngleBracketed(bracket_args)\n+                            if bracket_args.args.len() > 1\n+                    )\n+                } else {\n+                    false\n+                }\n+            }\n+        }\n+        _ => false,\n+    };\n+\n     let result = items.iter().enumerate().try_fold(\n         (String::new(), None, false),\n         |(strs, prev_trailing_span, prev_extendable), (i, item)| {\n@@ -1035,10 +1057,23 @@ fn join_bounds_inner(\n         },\n     )?;\n \n-    if !force_newline\n-        && items.len() > 1\n-        && (result.0.contains('\\n') || result.0.len() > shape.width)\n-    {\n+    // Whether retry the function with forced newline is needed:\n+    //   Only if result is not already multiline and did not exceed line width,\n+    //   and either there is more than one item;\n+    //       or the single item is of type `Trait`,\n+    //          and any of the internal arrays contains more than one item;\n+    let retry_with_force_newline =\n+        if force_newline || (!result.0.contains('\\n') && result.0.len() <= shape.width) {\n+            false\n+        } else {\n+            if items.len() > 1 {\n+                true\n+            } else {\n+                is_item_with_multi_items_array(&items[0])\n+            }\n+        };\n+\n+    if retry_with_force_newline {\n         join_bounds_inner(context, shape, items, need_indent, true)\n     } else {\n         Some(result.0)"}, {"sha": "d048eb10fb15cb72c52147fb70330a3081151360", "filename": "tests/source/issue-4689/one.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Fsource%2Fissue-4689%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Fsource%2Fissue-4689%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4689%2Fone.rs?ref=ea017d7f84e218c4a8048d2ecd9d63bbda014209", "patch": "@@ -0,0 +1,149 @@\n+// rustfmt-version: One\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write1 + fmt::Write2\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer1<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + Printer2<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+>,\n+> {\n+}\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+> + fmt::Write1\n++ fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+)\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+) + fmt::Write\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+mut entries: entryyyyyyyy,\n+) -> (\n+impl Fn(\n+AlphabeticalTraversal,\n+Seconddddddddddddddddddddddddddddddddddd\n+) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n++ Sendddddddddddddddddddddddddddddddddddddddddddd\n+) {\n+}\n+    \n+pub trait SomeTrait:\n+Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+for<'b> &'b Self: Send\n++ Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "ea7feda825d461361638d2fda677977b733abfd8", "filename": "tests/source/issue-4689/two.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Fsource%2Fissue-4689%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Fsource%2Fissue-4689%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4689%2Ftwo.rs?ref=ea017d7f84e218c4a8048d2ecd9d63bbda014209", "patch": "@@ -0,0 +1,149 @@\n+// rustfmt-version: Two\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + fmt::Write1 + fmt::Write2\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+pub trait PrettyPrinter<'tcx>:\n+fmt::Write + Printer1<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+> + Printer2<\n+'tcx,\n+Error = fmt::Error,\n+Path = Self,\n+Region = Self,\n+Type = Self,\n+DynExistential = Self,\n+Const = Self,\n+>\n+{\n+//\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+>,\n+> {\n+}\n+fn f() -> Box<\n+FnMut() -> Thing<\n+WithType = LongItemName,\n+Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+> + fmt::Write1\n++ fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+)\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+F: Fn(\n+// this comment is deleted\n+) + fmt::Write\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+F: for<> FnMut(\n+&mut ProbeContext<>,\n+ty::PolyTraitRefffffffffffffffffffffffffffffffff<>,\n+tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+mut entries: entryyyyyyyy,\n+) -> (\n+impl Fn(\n+AlphabeticalTraversal,\n+Seconddddddddddddddddddddddddddddddddddd\n+) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n++ Sendddddddddddddddddddddddddddddddddddddddddddd\n+) {\n+}\n+    \n+pub trait SomeTrait:\n+Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+for<'b> &'b Self: Send\n++ Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n++ Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "df1a507bc1da9c597a6c2782cc3e8e1149bcf96d", "filename": "tests/target/issue-4689/one.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Ftarget%2Fissue-4689%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Ftarget%2Fissue-4689%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4689%2Fone.rs?ref=ea017d7f84e218c4a8048d2ecd9d63bbda014209", "patch": "@@ -0,0 +1,150 @@\n+// rustfmt-version: One\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write1\n+    + fmt::Write2\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer1<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + Printer2<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+        WithType = LongItemName,\n+        Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+    >,\n+> {\n+}\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+            WithType = LongItemName,\n+            Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+        > + fmt::Write1\n+        + fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+        // this comment is deleted\n+    ),\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+            // this comment is deleted\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+        &mut ProbeContext,\n+        ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+        tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+    ),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+            &mut ProbeContext,\n+            ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+            tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: entryyyyyyyy,\n+) -> (impl Fn(\n+    AlphabeticalTraversal,\n+    Seconddddddddddddddddddddddddddddddddddd,\n+) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n+        + Sendddddddddddddddddddddddddddddddddddddddddddd) {\n+}\n+\n+pub trait SomeTrait:\n+    Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+    + Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+    for<'b> &'b Self: Send\n+        + Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+        + Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}, {"sha": "e3b5cd22810ba37c15d3e1165b74e8188efc5d80", "filename": "tests/target/issue-4689/two.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Ftarget%2Fissue-4689%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea017d7f84e218c4a8048d2ecd9d63bbda014209/tests%2Ftarget%2Fissue-4689%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4689%2Ftwo.rs?ref=ea017d7f84e218c4a8048d2ecd9d63bbda014209", "patch": "@@ -0,0 +1,152 @@\n+// rustfmt-version: Two\n+\n+// Based on the issue description\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + fmt::Write1\n+    + fmt::Write2\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+pub trait PrettyPrinter<'tcx>:\n+    fmt::Write\n+    + Printer1<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    > + Printer2<\n+        'tcx,\n+        Error = fmt::Error,\n+        Path = Self,\n+        Region = Self,\n+        Type = Self,\n+        DynExistential = Self,\n+        Const = Self,\n+    >\n+{\n+    //\n+}\n+\n+// Some test cases to ensure other cases formatting were not changed\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+        WithType = LongItemName,\n+        Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+    >,\n+> {\n+}\n+fn f() -> Box<\n+    FnMut() -> Thing<\n+            WithType = LongItemName,\n+            Error = LONGLONGLONGLONGLONGONGEvenLongerErrorNameLongerLonger,\n+        > + fmt::Write1\n+        + fmt::Write2,\n+> {\n+}\n+\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+        // this comment is deleted\n+    ),\n+{\n+}\n+fn foo<F>(foo2: F)\n+where\n+    F: Fn(\n+            // this comment is deleted\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+        &mut ProbeContext,\n+        ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+        tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+    ),\n+{\n+}\n+fn elaborate_bounds<F>(mut mk_cand: F)\n+where\n+    F: FnMut(\n+            &mut ProbeContext,\n+            ty::PolyTraitRefffffffffffffffffffffffffffffffff,\n+            tyyyyyyyyyyyyyyyyyyyyy::AssociatedItem,\n+        ) + fmt::Write,\n+{\n+}\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: entryyyyyyyy,\n+) -> (\n+    impl Fn(\n+        AlphabeticalTraversal,\n+        Seconddddddddddddddddddddddddddddddddddd,\n+    ) -> Parammmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n+    + Sendddddddddddddddddddddddddddddddddddddddddddd\n+) {\n+}\n+\n+pub trait SomeTrait:\n+    Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+    + Eqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n+{\n+}\n+\n+trait B = where\n+    for<'b> &'b Self: Send\n+        + Cloneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n+        + Copyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy;"}]}