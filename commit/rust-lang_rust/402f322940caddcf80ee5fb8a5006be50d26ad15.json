{"sha": "402f322940caddcf80ee5fb8a5006be50d26ad15", "node_id": "C_kwDOAAsO6NoAKDQwMmYzMjI5NDBjYWRkY2Y4MGVlNWZiOGE1MDA2YmU1MGQyNmFkMTU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-21T09:34:06Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-31T03:50:51Z"}, "message": "Bless all pretty printer tests and ui tests", "tree": {"sha": "373bd02aad43517e9dda0377a7db5e74857b9fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/373bd02aad43517e9dda0377a7db5e74857b9fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/402f322940caddcf80ee5fb8a5006be50d26ad15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmH3XJsACgkQ+boUO5X/\nbYLlARAAld0riKnpaXILMzWc1654Zs6LJo4vF/ZCJHYbxbcCf2KH1kZkEh1Zs706\nMhUzc+Yjdi8nXYimiBl4bc2BJp28CrsTkiUe2K8pYQX1jStVG+MOysHKs7+obPEy\nV/Oj/8Qhb4eGk6jtQS/zmxRg9Xjl9Dv9297U//MaZMc/rzePYe+/YCczvMMDRPom\njQUT+zymbQYCI/2Sq+v7Gog7ZN5/Bzm3cc4sUCR6jN4KaqB23HwoBdYeE0Ktd/6K\n8E0I44oFt+2hrEZ5XEHUiGSQhR6EL+fugZNPTorSkzidVoVLOTt4W/z3IwjtKHe+\npIGCEFS4XDbQjcMOIH/ygoKQv/IY4MeNahtt/5yDGl2PhkuM8zvbLgBIjslG3Iqe\nUOBqLxQW/CLhit6rNnBvltDKuL/FaiN/f/7OMoE9UOUdx8bRMbYNTSEVLI6x+1/w\nL+qcwdSmRIg6IuMdgrRPcm7m1A51eLdmK4dVlPHL56+sQjdD9Qvf9nnkJT6DIcWs\n4Mx/ZZU9g6UgV24v9tyHNz/b+LgqP4aXyLzdDWtBbLWqNH+TTvqWYXx0LpiA25pG\nd71Fn4RbcJfBx5Yujrdohsj64cr2vl0ZCBV0J3rQ117SAnWBP6Zk1ypQJHPFkDVU\nFXO7ofAszpWny/XcTeT1kSwjpyIIPPjAWP8vEt/WPXPqWBcaFok=\n=TrtV\n-----END PGP SIGNATURE-----", "payload": "tree 373bd02aad43517e9dda0377a7db5e74857b9fd0\nparent 8ac05b97660ec3bd5e8f0d3b7edb246b6cea9c32\nauthor David Tolnay <dtolnay@gmail.com> 1642757646 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1643601051 -0800\n\nBless all pretty printer tests and ui tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/402f322940caddcf80ee5fb8a5006be50d26ad15", "html_url": "https://github.com/rust-lang/rust/commit/402f322940caddcf80ee5fb8a5006be50d26ad15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/402f322940caddcf80ee5fb8a5006be50d26ad15/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac05b97660ec3bd5e8f0d3b7edb246b6cea9c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac05b97660ec3bd5e8f0d3b7edb246b6cea9c32", "html_url": "https://github.com/rust-lang/rust/commit/8ac05b97660ec3bd5e8f0d3b7edb246b6cea9c32"}], "stats": {"total": 444, "additions": 210, "deletions": 234}, "files": [{"sha": "2404b321942890ed841d897e8df1913493b646bb", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -28,67 +28,67 @@ fn syntax() {\n     let _ = #[attr] (x as Y);\n     let _ =\n         #[attr] while true {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] while let Some(false) = true {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] for x in y {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] loop {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] match true {\n-                    #![attr]\n-                            #[attr]\n-                            _ => false,\n-                };\n+            #![attr]\n+                #[attr]\n+                _ => false,\n+        };\n     let _ = #[attr] || #[attr] foo;\n     let _ = #[attr] move || #[attr] foo;\n     let _ =\n         #[attr] ||\n-                    #[attr] {\n-                                #![attr]\n-                                foo\n-                            };\n+            #[attr] {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] move ||\n-                    #[attr] {\n-                                #![attr]\n-                                foo\n-                            };\n+            #[attr] {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] ||\n-                    {\n-                        #![attr]\n-                        foo\n-                    };\n+            {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] move ||\n-                    {\n-                        #![attr]\n-                        foo\n-                    };\n+            {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                };\n+            #![attr]\n+            let _ = ();\n+        };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                    foo\n-                };\n+            #![attr]\n+            let _ = ();\n+            foo\n+        };\n     let _ = #[attr] x = y;\n     let _ = #[attr] (x = y);\n     let _ = #[attr] x += y;"}, {"sha": "9e949726751e73a11db29e1a1ef5322810348bbc", "filename": "src/test/pretty/block-comment-trailing-whitespace2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fblock-comment-trailing-whitespace2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fblock-comment-trailing-whitespace2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-trailing-whitespace2.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -2,7 +2,7 @@\n \n // pp-exact\n fn f() {} /*\n-          The next line should not be indented.\n+The next line should not be indented.\n \n-          That one. It shouldn't have been indented.\n-          */\n+That one. It shouldn't have been indented.\n+*/"}, {"sha": "8c8580b07c218873f5bb8672289ed5853e1c8cca", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -93,9 +93,9 @@\n     // Taken from https://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n         ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n-         '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n-         '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n-         '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n-         '\\u{205F}', '\\u{3000}'];\n+                '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n+                '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n+                '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n+                '\\u{205F}', '\\u{3000}'];\n     for c in &chars { let ws = c.is_whitespace(); println!(\"{} {}\", c, ws); }\n }"}, {"sha": "c7c9277faf69ebc18e01474ece4237c20f6cfb93", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -17,32 +17,32 @@ mac! {\n \n mac! {\n     a(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-      aaaaaaaa aaaaaaaa) a\n+    aaaaaaaa aaaaaaaa) a\n     [aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa] a\n+    aaaaaaaa aaaaaaaa] a\n     {\n         aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n         aaaaaaaa aaaaaaaa aaaaaaaa\n     } a\n }\n \n mac!(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa);\n+aaaaaaaa aaaaaaaa);\n mac![aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa];\n+aaaaaaaa aaaaaaaa];\n mac! {\n     aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n     aaaaaaaa aaaaaaaa\n }\n \n #[rustc_dummy(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-              aaaaaaaa aaaaaaaa aaaaaaaa)]\n+aaaaaaaa aaaaaaaa aaaaaaaa)]\n #[rustc_dummy[aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-              aaaaaaaa aaaaaaaa aaaaaaaa]]\n+aaaaaaaa aaaaaaaa aaaaaaaa]]\n #[rustc_dummy {\n-      aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-      aaaaaaaa aaaaaaaa\n-  }]\n+    aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n+    aaaaaaaa aaaaaaaa\n+}]\n #[rustc_dummy =\n-  \"aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\"]\n+\"aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\"]\n fn main() {}"}, {"sha": "3830c3aa6c9f191beb7a50ba2499d18b3a31a03c", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -11,15 +11,15 @@\n pub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n \n pub fn bar() ({\n-                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n-                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n+        const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n+        let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n-                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n+        let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n \n-                  let _ =\n-                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n-                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-                          *const [i32; (3 as usize)] as *const [i32; 3]);\n+        let _ =\n+            (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3]) as\n+                        &[i32; 3]) as *const _ as *const [i32; 3]) as\n+                *const [i32; (3 as usize)] as *const [i32; 3]);\n \n \n \n@@ -29,29 +29,19 @@\n \n \n \n-                  ({\n-                       let res =\n-                           ((::alloc::fmt::format as\n-                                for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n-                                                                                   as\n-                                                                                   fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                                                as\n-                                                                                                                                                                &str)]\n-                                                                                                                                                              as\n-                                                                                                                                                              [&str; 1])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[&str; 1]),\n-                                                                                                                                                        (&([]\n-                                                                                                                                                              as\n-                                                                                                                                                              [ArgumentV1; 0])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[ArgumentV1; 0]))\n-                                                                                  as\n-                                                                                  Arguments))\n-                               as String);\n-                       (res as String)\n-                   } as String);\n-              } as ())\n+        ({\n+                let res =\n+                    ((::alloc::fmt::format as\n+                            for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                                as\n+                                fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                                            as &str)] as [&str; 1]) as\n+                                &[&str; 1]),\n+                            (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n+                            Arguments)) as String);\n+                (res as String)\n+            } as String);\n+    } as ())\n pub type Foo = [i32; (3 as usize)];\n pub struct Bar {\n     pub x: [i32; (3 as usize)],\n@@ -60,19 +50,9 @@\n pub enum Baz { BazVariant([i32; (5 as usize)]), }\n pub fn id<T>(x: T) -> T ({ (x as T) } as T)\n pub fn use_id() ({\n-                     let _ =\n-                         ((id::<[i32; (3 as usize)]> as\n-                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n-                                                                               as\n-                                                                               i32),\n-                                                                           (2\n-                                                                               as\n-                                                                               i32),\n-                                                                           (3\n-                                                                               as\n-                                                                               i32)]\n-                                                                             as\n-                                                                             [i32; 3]))\n-                             as [i32; 3]);\n-                 } as ())\n+        let _ =\n+            ((id::<[i32; (3 as usize)]> as\n+                    fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1 as i32),\n+                        (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3]);\n+    } as ())\n fn main() ({ } as ())"}, {"sha": "87f525a6178e63ac6eb4c805a4d4cb5ef5440252", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -9,8 +9,8 @@ struct C {\n #[allow()]\n const C: C =\n     C{\n-      #[cfg(debug_assertions)]\n-      field: 0,\n+        #[cfg(debug_assertions)]\n+        field: 0,\n \n-      #[cfg(not(debug_assertions))]\n-      field: 1,};\n+        #[cfg(not(debug_assertions))]\n+        field: 1,};"}, {"sha": "01adb14133b3536f5cdf42715c8fec0217398de2", "filename": "src/test/pretty/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro_rules.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -12,8 +12,8 @@ macro_rules! matcher_brackets {\n \n macro_rules! all_fragments {\n     ($b : block, $e : expr, $i : ident, $it : item, $l : lifetime, $lit :\n-     literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n-     $vis : vis) => {} ;\n+    literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n+    $vis : vis) => {} ;\n }\n \n fn main() {}"}, {"sha": "836af99002d65cd0282c00c8f1b52944e6b8530d", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -5,10 +5,10 @@ fn main() {\n     let _y =\n         match x {\n             Some(_) =>\n-            [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n-             \"long\".to_string(), \"string\".to_string()],\n+                [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n+                        \"long\".to_string(), \"string\".to_string()],\n             None =>\n-            [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n-             \"a\".to_string(), \"a\".to_string()],\n+                [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n+                        \"a\".to_string(), \"a\".to_string()],\n         };\n }"}, {"sha": "96bde96200af9a3312a1067a290b8330eec8108a", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -48,9 +48,9 @@ fn _4() {\n \n     let _ =\n         #[rustc_dummy] match () {\n-                           #![rustc_dummy]\n-                           () => (),\n-                       };\n+            #![rustc_dummy]\n+            () => (),\n+        };\n }\n \n fn _5() {\n@@ -156,56 +156,56 @@ fn _11() {\n     let _ = #[rustc_dummy] 0 as usize;\n     let _ =\n         #[rustc_dummy] while false {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] while let None = Some(()) {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] for _ in 0..0 {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] loop {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] match false {\n-                           #![rustc_dummy]\n-                           _ => (),\n-                       };\n+            #![rustc_dummy]\n+            _ => (),\n+        };\n     let _ = #[rustc_dummy] || #[rustc_dummy] ();\n     let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ =\n         #[rustc_dummy] ||\n-                           {\n-                               #![rustc_dummy]\n-                               #[rustc_dummy]\n-                               ()\n-                           };\n+            {\n+                #![rustc_dummy]\n+                #[rustc_dummy]\n+                ()\n+            };\n     let _ =\n         #[rustc_dummy] move ||\n-                           {\n-                               #![rustc_dummy]\n-                               #[rustc_dummy]\n-                               ()\n-                           };\n+            {\n+                #![rustc_dummy]\n+                #[rustc_dummy]\n+                ()\n+            };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                           let _ = ();\n-                       };\n+            #![rustc_dummy]\n+            let _ = ();\n+        };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                           let _ = ();\n-                           ()\n-                       };\n+            #![rustc_dummy]\n+            let _ = ();\n+            ()\n+        };\n     let mut x = 0;\n     let _ = #[rustc_dummy] x = 15;\n     let _ = #[rustc_dummy] x += 15;"}, {"sha": "f2f807c59de99cf9b184476aa7940041a2c3e5a7", "filename": "src/test/pretty/vec-comments.pp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fvec-comments.pp", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fpretty%2Fvec-comments.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.pp?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -4,26 +4,26 @@\n fn main() {\n     let _v1 =\n         [\n-         // Comment\n-         0,\n-         // Comment\n-         1,\n-         // Comment\n-         2];\n+                // Comment\n+                0,\n+                // Comment\n+                1,\n+                // Comment\n+                2];\n     let _v2 =\n         [0, // Comment\n-         1, // Comment\n-         2]; // Comment\n+                1, // Comment\n+                2]; // Comment\n     let _v3 =\n         [\n-         /* Comment */\n-         0,\n-         /* Comment */\n-         1,\n-         /* Comment */\n-         2];\n+                /* Comment */\n+                0,\n+                /* Comment */\n+                1,\n+                /* Comment */\n+                2];\n     let _v4 =\n         [0, /* Comment */\n-         1, /* Comment */\n-         2]; /* Comment */\n+                1, /* Comment */\n+                2]; /* Comment */\n }"}, {"sha": "1b7cb76b55366d194c452fec72f66a0c4de67686", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -16,11 +16,11 @@ LL | bug!();\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `{\n-           let res =\n-               ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                                   &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n-           res\n-       }.as_str()`\n+               let res =\n+                   ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n+                           &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n+               res\n+           }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23\n    |\n LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}"}, {"sha": "121138605f1a2f1a50ce63da1c4da4f34a486587", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -15,4 +15,4 @@ trait Foo<const KIND : bool = true> {}\n fn foo<const SIZE : usize = 5>() {}\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n-             FROM>;\n+    FROM>;"}, {"sha": "2054d43c40957d9f4075aa9fcb9c844bcc615a71", "filename": "src/test/ui/match/issue-82392.stdout", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -7,13 +7,11 @@ extern crate std;\n // check-pass\n \n pub fn main() ({\n-                   (if (true as bool)\n-                       ({ } as\n-                           ()) else if (let Some(a) =\n-                                           ((Some as\n-                                                fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n-                                                                                                  as\n-                                                                                                  i32))\n-                                               as Option<i32>) as bool)\n-                              ({ } as ()) as ())\n-                             } as ())\n+        (if (true as bool)\n+                ({ } as\n+                    ()) else if (let Some(a) =\n+                       ((Some as\n+                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n+                               as i32)) as Option<i32>) as bool) ({ } as ())\n+                   as ())\n+               } as ())"}, {"sha": "9d25def587cd60bcd0bff622382540472bf56b33", "filename": "src/test/ui/proc-macro/cfg-eval-inner.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -1,9 +1,9 @@\n PRINT-ATTR INPUT (DISPLAY): impl Foo <\n [u8 ;\n- {\n-     #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n-     { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n- }] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n+{\n+    #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n+    { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n+}] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "c81fa201cbcf5e41f67b297bd12b64d9b8d652c7", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -4,23 +4,23 @@ struct Foo < #[cfg(FALSE)] A, B >\n     #[cfg(FALSE)] first : String, #[cfg_attr(FALSE, deny(warnings))] second :\n     bool, third :\n     [u8 ;\n-     {\n-         #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n-         #[cfg(FALSE)] let a = 25 ; match true\n-         {\n-             #[cfg(FALSE)] true => {},\n-             #[cfg_attr(not(FALSE), allow(warnings))] false => {}, _ => {}\n-         } ; #[print_helper(should_be_removed)] fn removed_fn()\n-         { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n-         kept_fn() { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n-         {\n-             Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n-                 #[cfg(FALSE)] String, u8)\n-         } struct\n-         TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n-                     #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n-         { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n-     }], #[print_helper(d)] fourth : B\n+    {\n+        #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n+        #[cfg(FALSE)] let a = 25 ; match true\n+        {\n+            #[cfg(FALSE)] true => {}, #[cfg_attr(not(FALSE), allow(warnings))]\n+            false => {}, _ => {}\n+        } ; #[print_helper(should_be_removed)] fn removed_fn()\n+        { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn kept_fn()\n+        { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+        {\n+            Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n+            #[cfg(FALSE)] String, u8)\n+        } struct\n+        TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n+        #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n+        { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n+    }], #[print_helper(d)] fourth : B\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n@@ -1276,14 +1276,14 @@ PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_hel\n {\n     second : bool, third :\n     [u8 ;\n-     {\n-         #[cfg(not(FALSE))] struct Inner ; match true\n-         { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n-         #[cfg(not(FALSE))] fn kept_fn()\n-         { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n-         { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n-         TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n-     }], #[print_helper(d)] fourth : B\n+    {\n+        #[cfg(not(FALSE))] struct Inner ; match true\n+        { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n+        #[cfg(not(FALSE))] fn kept_fn()\n+        { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+        { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n+        TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n+    }], #[print_helper(d)] fourth : B\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Punct {"}, {"sha": "74641058ef3d23a87751020f1d283411dece4439", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -2,10 +2,10 @@ PRINT-DERIVE INPUT (DISPLAY): struct Foo\n {\n     val :\n     [bool ;\n-     {\n-         let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n-         { #! [allow(unused)] 30 } ; 0\n-     }]\n+    {\n+        let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n+        { #! [allow(unused)] 30 } ; 0\n+    }]\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {"}, {"sha": "79651f01b9534cebade236661bff41b135cda97b", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -19,29 +19,27 @@ extern crate proc_macro;\n \n fn main() {\n     [crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"let\",\n-                                                                        crate::Span::recover_proc_macro_span(0)))),\n-     crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n-                                                                        crate::Span::recover_proc_macro_span(1)))),\n-     crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n-                                                                        crate::Spacing::Alone))),\n-     crate::TokenStream::from(crate::TokenTree::Literal({\n-                                                            let mut iter =\n-                                                                \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n-                                                            if let (Some(crate::TokenTree::Literal(mut lit)),\n-                                                                    None) =\n-                                                                   (iter.next(),\n-                                                                    iter.next())\n-                                                               {\n-                                                                lit.set_span(crate::Span::recover_proc_macro_span(2));\n-                                                                lit\n-                                                            } else {\n-                                                                {\n-                                                                    ::core::panicking::panic(\"internal error: entered unreachable code\")\n-                                                                }\n-                                                            }\n-                                                        })),\n-     crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n-                                                                        crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n+                                    crate::Span::recover_proc_macro_span(0)))),\n+                        crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n+                                    crate::Span::recover_proc_macro_span(1)))),\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n+                                    crate::Spacing::Alone))),\n+                        crate::TokenStream::from(crate::TokenTree::Literal({\n+                                    let mut iter =\n+                                        \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n+                                    if let (Some(crate::TokenTree::Literal(mut lit)),\n+                                                None) =\n+                                                (iter.next(), iter.next()) {\n+                                            lit.set_span(crate::Span::recover_proc_macro_span(2));\n+                                            lit\n+                                        } else {\n+                                           {\n+                                               ::core::panicking::panic(\"internal error: entered unreachable code\")\n+                                           }\n+                                       }\n+                                })),\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n+                                    crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n }\n const _: () =\n     {"}, {"sha": "82c4120b4c789c70d38cbe9173c9787102fe1d2c", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -37,7 +37,7 @@ checker!(rename_params, r#\"impl Foo\n     fn hello(#[angery(true)] a : i32, #[a2] b : i32, #[what = \"how\"] c : u32)\n     {} fn\n     hello2(#[a1] #[a2] a : i32, #[what = \"how\"] b : i32, #[angery(true)] c :\n-           u32) {} fn\n+    u32) {} fn\n     hello_self(#[a1] #[a2] & self, #[a1] #[a2] a : i32, #[what = \"how\"] b :\n-               i32, #[angery(true)] c : u32) {}\n+    i32, #[angery(true)] c : u32) {}\n }\"#);"}, {"sha": "a46047d91743d899d83ca79db0bc1e75553de94d", "filename": "src/test/ui/type-alias-impl-trait/issue-60662.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/402f322940caddcf80ee5fb8a5006be50d26ad15/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout?ref=402f322940caddcf80ee5fb8a5006be50d26ad15", "patch": "@@ -10,5 +10,5 @@ extern crate std;\n trait Animal { }\n \n fn main() {\n-              pub type ServeFut = /*impl Trait*/;\n-          }\n+        pub type ServeFut = /*impl Trait*/;\n+    }"}]}