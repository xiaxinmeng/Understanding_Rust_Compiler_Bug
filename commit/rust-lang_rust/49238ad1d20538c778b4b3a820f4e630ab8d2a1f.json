{"sha": "49238ad1d20538c778b4b3a820f4e630ab8d2a1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjM4YWQxZDIwNTM4Yzc3OGI0YjNhODIwZjRlNjMwYWI4ZDJhMWY=", "commit": {"author": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2017-02-05T04:52:44Z"}, "committer": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2017-02-05T04:52:44Z"}, "message": "Implement empty_enum lint and add a test", "tree": {"sha": "2b24135eb24a47864e87c405415c5565e70eee24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b24135eb24a47864e87c405415c5565e70eee24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49238ad1d20538c778b4b3a820f4e630ab8d2a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49238ad1d20538c778b4b3a820f4e630ab8d2a1f", "html_url": "https://github.com/rust-lang/rust/commit/49238ad1d20538c778b4b3a820f4e630ab8d2a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49238ad1d20538c778b4b3a820f4e630ab8d2a1f/comments", "author": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88e637b67a8cdc4134153fcd4424829fc43c9ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88e637b67a8cdc4134153fcd4424829fc43c9ed", "html_url": "https://github.com/rust-lang/rust/commit/e88e637b67a8cdc4134153fcd4424829fc43c9ed"}], "stats": {"total": 60, "additions": 17, "deletions": 43}, "files": [{"sha": "f930a8599e27d8495be9d5139af212d4932b892c", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49238ad1d20538c778b4b3a820f4e630ab8d2a1f/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49238ad1d20538c778b4b3a820f4e630ab8d2a1f/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=49238ad1d20538c778b4b3a820f4e630ab8d2a1f", "patch": "@@ -2,10 +2,7 @@\n \n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{span_lint_and_then, snippet_opt};\n-use rustc::ty::layout::TargetDataLayout;\n-use rustc::ty::TypeFoldable;\n-use rustc::traits::Reveal;\n+use utils::span_lint_and_then;\n \n /// **What it does:** Checks for `enum`s with no variants.\n ///\n@@ -19,7 +16,7 @@ use rustc::traits::Reveal;\n /// ```\n declare_lint! {\n     pub EMPTY_ENUM,\n-    Warn,\n+    Allow,\n     \"enum with no variants\"\n }\n \n@@ -35,46 +32,13 @@ impl LintPass for EmptyEnum {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         let did = cx.tcx.hir.local_def_id(item.id);\n-        if let ItemEnum(ref def, _) = item.node {\n+        if let ItemEnum(..) = item.node {\n             let ty = cx.tcx.item_type(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n-            for (i, variant) in adt.variants.iter().enumerate() {\n-                let data_layout = TargetDataLayout::parse(cx.sess());\n-                cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n-                    let size: u64 = variant.fields\n-                        .iter()\n-                        .map(|f| {\n-                            let ty = cx.tcx.item_type(f.did);\n-                            if ty.needs_subst() {\n-                                0 // we can't reason about generics, so we treat them as zero sized\n-                            } else {\n-                                ty.layout(&infcx)\n-                                    .expect(\"layout should be computable for concrete type\")\n-                                    .size(&data_layout)\n-                                    .bytes()\n-                            }\n-                        })\n-                        .sum();\n-                    if size > 0 {\n-                        span_lint_and_then(cx, EMPTY_ENUM, def.variants[i].span, \"large enum variant found\", |db| {\n-                            if variant.fields.len() == 1 {\n-                                let span = match def.variants[i].node.data {\n-                                    VariantData::Struct(ref fields, _) |\n-                                    VariantData::Tuple(ref fields, _) => fields[0].ty.span,\n-                                    VariantData::Unit(_) => unreachable!(),\n-                                };\n-                                if let Some(snip) = snippet_opt(cx, span) {\n-                                    db.span_suggestion(span,\n-                                                       \"consider boxing the large fields to reduce the total size of \\\n-                                                        the enum\",\n-                                                       format!(\"Box<{}>\", snip));\n-                                    return;\n-                                }\n-                            }\n-                            db.span_help(def.variants[i].span,\n-                                         \"consider boxing the large fields to reduce the total size of the enum\");\n-                        });\n-                    }\n+            if adt.variants.is_empty() {\n+                span_lint_and_then(cx, EMPTY_ENUM, item.span, \"enum with no variants\", |db| {\n+                    db.span_help(item.span,\n+                                 \"consider using the uninhabited type `!` or a wrapper around it\");\n                 });\n             }\n         }"}, {"sha": "f6a9de3c7f0c8da2b8b8f320bdac57bafb1765b0", "filename": "tests/compile-fail/empty_enum.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49238ad1d20538c778b4b3a820f4e630ab8d2a1f/tests%2Fcompile-fail%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49238ad1d20538c778b4b3a820f4e630ab8d2a1f/tests%2Fcompile-fail%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fempty_enum.rs?ref=49238ad1d20538c778b4b3a820f4e630ab8d2a1f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(empty_enum)]\n+\n+enum Empty {} //~ ERROR enum with no variants\n+    //~^ HELP consider using the uninhabited type `!` or a wrapper around it\n+\n+fn main() {\n+}"}]}