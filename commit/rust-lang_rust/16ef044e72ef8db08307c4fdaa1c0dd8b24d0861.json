{"sha": "16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "node_id": "C_kwDOAAsO6NoAKDE2ZWYwNDRlNzJlZjhkYjA4MzA3YzRmZGFhMWMwZGQ4YjI0ZDA4NjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-28T22:01:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-28T22:01:57Z"}, "message": "Auto merge of #8183 - alex-ozdemir:limit-ident, r=camsteffen\n\nLimit the ``[`identity_op`]`` lint to integral operands.\n\nchangelog: limit ``[`identity_op`]`` to integral operands\n\nIn the ``[`identity_op`]`` lint, if the operands are non-integers, then the lint is likely\nwrong.", "tree": {"sha": "2c52aa6c38a3aacef70e5a55f4cb70ee8e4d9b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c52aa6c38a3aacef70e5a55f4cb70ee8e4d9b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "html_url": "https://github.com/rust-lang/rust/commit/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a139949eadb99bb34ca1ac30965b498147dec773", "url": "https://api.github.com/repos/rust-lang/rust/commits/a139949eadb99bb34ca1ac30965b498147dec773", "html_url": "https://github.com/rust-lang/rust/commit/a139949eadb99bb34ca1ac30965b498147dec773"}, {"sha": "ee6d5c5cdae8b7cb3198800a615855169fc0b3de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6d5c5cdae8b7cb3198800a615855169fc0b3de", "html_url": "https://github.com/rust-lang/rust/commit/ee6d5c5cdae8b7cb3198800a615855169fc0b3de"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "f824f20ca40a017b28d725fcc452fc50f3209e55", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "patch": "@@ -61,15 +61,18 @@ impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n }\n \n fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-    // `1 << 0` is a common pattern in bit manipulation code\n-    cmp.node == BinOpKind::Shl\n-        && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n-        && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1))\n+    // This lint applies to integers\n+    !cx.typeck_results().expr_ty(left).peel_refs().is_integral()\n+        || !cx.typeck_results().expr_ty(right).peel_refs().is_integral()\n+        // `1 << 0` is a common pattern in bit manipulation code\n+        || (cmp.node == BinOpKind::Shl\n+            && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n+            && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1)))\n }\n \n fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span) {\n-    if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e) {\n-        let check = match *cx.typeck_results().expr_ty(e).kind() {\n+    if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e).map(Constant::peel_refs) {\n+        let check = match *cx.typeck_results().expr_ty(e).peel_refs().kind() {\n             ty::Int(ity) => unsext(cx.tcx, -1_i128, ity),\n             ty::Uint(uty) => clip(cx.tcx, !0, uty),\n             _ => return,"}, {"sha": "1cf8f9721b58f0b4099a851abbd29304cde15588", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "patch": "@@ -168,6 +168,14 @@ impl Constant {\n             None\n         }\n     }\n+\n+    #[must_use]\n+    pub fn peel_refs(mut self) -> Self {\n+        while let Constant::Ref(r) = self {\n+            self = *r;\n+        }\n+        self\n+    }\n }\n \n /// Parses a `LitKind` to a `Constant`."}, {"sha": "2ed4b5db574d42aabae78102fc94d00e24c9b4ce", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "patch": "@@ -2,10 +2,20 @@ const ONE: i64 = 1;\n const NEG_ONE: i64 = -1;\n const ZERO: i64 = 0;\n \n+struct A(String);\n+\n+impl std::ops::Shl<i32> for A {\n+    type Output = A;\n+    fn shl(mut self, other: i32) -> Self {\n+        self.0.push_str(&format!(\"{}\", other));\n+        self\n+    }\n+}\n #[allow(\n     clippy::eq_op,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n+    clippy::op_ref,\n     clippy::double_parens\n )]\n #[warn(clippy::identity_op)]\n@@ -38,4 +48,9 @@ fn main() {\n     42 << 0;\n     1 >> 0;\n     42 >> 0;\n+    &x >> 0;\n+    x >> &0;\n+\n+    let mut a = A(\"\".into());\n+    let b = a << 0; // no error: non-integer\n }"}, {"sha": "ff34b38db015bbf49077a823bf35b03b5a45d050", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16ef044e72ef8db08307c4fdaa1c0dd8b24d0861/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=16ef044e72ef8db08307c4fdaa1c0dd8b24d0861", "patch": "@@ -1,70 +1,82 @@\n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:16:5\n+  --> $DIR/identity_op.rs:26:5\n    |\n LL |     x + 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:17:5\n+  --> $DIR/identity_op.rs:27:5\n    |\n LL |     x + (1 - 1);\n    |     ^^^^^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:19:5\n+  --> $DIR/identity_op.rs:29:5\n    |\n LL |     0 + x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:22:5\n+  --> $DIR/identity_op.rs:32:5\n    |\n LL |     x | (0);\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:25:5\n+  --> $DIR/identity_op.rs:35:5\n    |\n LL |     x * 1;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:26:5\n+  --> $DIR/identity_op.rs:36:5\n    |\n LL |     1 * x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:32:5\n+  --> $DIR/identity_op.rs:42:5\n    |\n LL |     -1 & x;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `u`\n-  --> $DIR/identity_op.rs:35:5\n+  --> $DIR/identity_op.rs:45:5\n    |\n LL |     u & 255;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:38:5\n+  --> $DIR/identity_op.rs:48:5\n    |\n LL |     42 << 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:39:5\n+  --> $DIR/identity_op.rs:49:5\n    |\n LL |     1 >> 0;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:40:5\n+  --> $DIR/identity_op.rs:50:5\n    |\n LL |     42 >> 0;\n    |     ^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: the operation is ineffective. Consider reducing it to `&x`\n+  --> $DIR/identity_op.rs:51:5\n+   |\n+LL |     &x >> 0;\n+   |     ^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:52:5\n+   |\n+LL |     x >> &0;\n+   |     ^^^^^^^\n+\n+error: aborting due to 13 previous errors\n "}]}