{"sha": "7eed184dbb07c18b27dab8d444e62a96e85313cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZWQxODRkYmIwN2MxOGIyN2RhYjhkNDQ0ZTYyYTk2ZTg1MzEzY2M=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-23T23:56:25Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-23T23:56:25Z"}, "message": "visit::Visitor refactor: replace (&mut BorrowckVisitor, @BorrowckCtxt) with &mut BorrowckCtxt.", "tree": {"sha": "1e931b7d3c3dea4a6f37a359c0cdd5d2f753cee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e931b7d3c3dea4a6f37a359c0cdd5d2f753cee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eed184dbb07c18b27dab8d444e62a96e85313cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eed184dbb07c18b27dab8d444e62a96e85313cc", "html_url": "https://github.com/rust-lang/rust/commit/7eed184dbb07c18b27dab8d444e62a96e85313cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eed184dbb07c18b27dab8d444e62a96e85313cc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb55348a7cb1d99563c9135b8c83bcc20f6346bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb55348a7cb1d99563c9135b8c83bcc20f6346bf", "html_url": "https://github.com/rust-lang/rust/commit/eb55348a7cb1d99563c9135b8c83bcc20f6346bf"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "e8e658abc3745404e6112472a249c9fc89f5d0e8", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7eed184dbb07c18b27dab8d444e62a96e85313cc", "patch": "@@ -33,7 +33,7 @@ use util::ppaux::Repr;\n \n #[deriving(Clone)]\n struct CheckLoanCtxt<'self> {\n-    bccx: @BorrowckCtxt,\n+    bccx: &'self BorrowckCtxt,\n     dfcx_loans: &'self LoanDataFlow,\n     move_data: @move_data::FlowedMoveData,\n     all_loans: &'self [Loan],\n@@ -60,7 +60,7 @@ impl<'self> Visitor<()> for CheckLoanCtxt<'self> {\n     }\n }\n \n-pub fn check_loans(bccx: @BorrowckCtxt,\n+pub fn check_loans(bccx: &BorrowckCtxt,\n                    dfcx_loans: &LoanDataFlow,\n                    move_data: move_data::FlowedMoveData,\n                    all_loans: &[Loan],"}, {"sha": "549a7fe195c8861c5a5bfdf6a8d9cdb9d7423b2a", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=7eed184dbb07c18b27dab8d444e62a96e85313cc", "patch": "@@ -22,7 +22,7 @@ use syntax::ast_util;\n use syntax::codemap::Span;\n use util::ppaux::{UserString};\n \n-pub fn gather_decl(bccx: @BorrowckCtxt,\n+pub fn gather_decl(bccx: &BorrowckCtxt,\n                    move_data: &mut MoveData,\n                    decl_id: ast::NodeId,\n                    _decl_span: Span,\n@@ -31,23 +31,23 @@ pub fn gather_decl(bccx: @BorrowckCtxt,\n     move_data.add_move(bccx.tcx, loan_path, decl_id, Declared);\n }\n \n-pub fn gather_move_from_expr(bccx: @BorrowckCtxt,\n+pub fn gather_move_from_expr(bccx: &BorrowckCtxt,\n                              move_data: &mut MoveData,\n                              move_expr: @ast::Expr,\n                              cmt: mc::cmt) {\n     gather_move_from_expr_or_pat(bccx, move_data, move_expr.id,\n                                  MoveExpr(move_expr), cmt);\n }\n \n-pub fn gather_move_from_pat(bccx: @BorrowckCtxt,\n+pub fn gather_move_from_pat(bccx: &BorrowckCtxt,\n                             move_data: &mut MoveData,\n                             move_pat: @ast::Pat,\n                             cmt: mc::cmt) {\n     gather_move_from_expr_or_pat(bccx, move_data, move_pat.id,\n                                  MovePat(move_pat), cmt);\n }\n \n-fn gather_move_from_expr_or_pat(bccx: @BorrowckCtxt,\n+fn gather_move_from_expr_or_pat(bccx: &BorrowckCtxt,\n                                 move_data: &mut MoveData,\n                                 move_id: ast::NodeId,\n                                 move_kind: MoveKind,\n@@ -66,7 +66,7 @@ fn gather_move_from_expr_or_pat(bccx: @BorrowckCtxt,\n     }\n }\n \n-pub fn gather_captures(bccx: @BorrowckCtxt,\n+pub fn gather_captures(bccx: &BorrowckCtxt,\n                        move_data: &mut MoveData,\n                        closure_expr: @ast::Expr) {\n     let captured_vars = bccx.capture_map.get(&closure_expr.id);\n@@ -83,7 +83,7 @@ pub fn gather_captures(bccx: @BorrowckCtxt,\n     }\n }\n \n-pub fn gather_assignment(bccx: @BorrowckCtxt,\n+pub fn gather_assignment(bccx: &BorrowckCtxt,\n                          move_data: &mut MoveData,\n                          assignment_id: ast::NodeId,\n                          assignment_span: Span,\n@@ -96,7 +96,7 @@ pub fn gather_assignment(bccx: @BorrowckCtxt,\n                              assignee_id);\n }\n \n-fn check_is_legal_to_move_from(bccx: @BorrowckCtxt,\n+fn check_is_legal_to_move_from(bccx: &BorrowckCtxt,\n                                cmt0: mc::cmt,\n                                cmt: mc::cmt) -> bool {\n     match cmt.cat {"}, {"sha": "2d71eef4de9c11f6b8ff490cbdc88220d879604d", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=7eed184dbb07c18b27dab8d444e62a96e85313cc", "patch": "@@ -20,7 +20,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n use util::ppaux::{note_and_explain_region};\n \n-pub fn guarantee_lifetime(bccx: @BorrowckCtxt,\n+pub fn guarantee_lifetime(bccx: &BorrowckCtxt,\n                           item_scope_id: ast::NodeId,\n                           root_scope_id: ast::NodeId,\n                           span: Span,\n@@ -42,8 +42,8 @@ pub fn guarantee_lifetime(bccx: @BorrowckCtxt,\n ///////////////////////////////////////////////////////////////////////////\n // Private\n \n-struct GuaranteeLifetimeContext {\n-    bccx: @BorrowckCtxt,\n+struct GuaranteeLifetimeContext<'self> {\n+    bccx: &'self BorrowckCtxt,\n \n     // the node id of the function body for the enclosing item\n     item_scope_id: ast::NodeId,\n@@ -58,7 +58,7 @@ struct GuaranteeLifetimeContext {\n     cmt_original: mc::cmt\n }\n \n-impl GuaranteeLifetimeContext {\n+impl<'self> GuaranteeLifetimeContext<'self> {\n     fn tcx(&self) -> ty::ctxt {\n         self.bccx.tcx\n     }"}, {"sha": "4c52634144688cd3ae431470e8f20e9e8a3279ad", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=7eed184dbb07c18b27dab8d444e62a96e85313cc", "patch": "@@ -64,16 +64,16 @@ mod gather_moves;\n /// No good.  Instead what will happen is that `root_ub` will be set to the\n /// body of the while loop and we will refuse to root the pointer `&*x`\n /// because it would have to be rooted for a region greater than `root_ub`.\n-struct GatherLoanCtxt {\n-    bccx: @BorrowckCtxt,\n+struct GatherLoanCtxt<'self> {\n+    bccx: &'self BorrowckCtxt,\n     id_range: id_range,\n     move_data: @mut move_data::MoveData,\n     all_loans: @mut ~[Loan],\n     item_ub: ast::NodeId,\n     repeating_ids: ~[ast::NodeId]\n }\n \n-impl visit::Visitor<()> for GatherLoanCtxt {\n+impl<'self> visit::Visitor<()> for GatherLoanCtxt<'self> {\n     fn visit_expr(&mut self, ex:@Expr, _:()) {\n         gather_loans_in_expr(self, ex);\n     }\n@@ -100,7 +100,7 @@ impl visit::Visitor<()> for GatherLoanCtxt {\n     fn visit_item(&mut self, _:@ast::item, _:()) { }\n }\n \n-pub fn gather_loans(bccx: @BorrowckCtxt,\n+pub fn gather_loans(bccx: &BorrowckCtxt,\n                     decl: &ast::fn_decl,\n                     body: &ast::Block)\n                     -> (id_range, @mut ~[Loan], @mut move_data::MoveData) {\n@@ -315,7 +315,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n     }\n }\n \n-impl GatherLoanCtxt {\n+impl<'self> GatherLoanCtxt<'self> {\n     pub fn tcx(&self) -> ty::ctxt { self.bccx.tcx }\n \n     pub fn push_repeating_id(&mut self, id: ast::NodeId) {\n@@ -532,7 +532,7 @@ impl GatherLoanCtxt {\n             //    }\n         // }\n \n-        fn check_mutability(bccx: @BorrowckCtxt,\n+        fn check_mutability(bccx: &BorrowckCtxt,\n                             borrow_span: Span,\n                             cmt: mc::cmt,\n                             req_mutbl: LoanMutability) {"}, {"sha": "7dbcb90327fca881703c963fdee3e672b5e64862", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=7eed184dbb07c18b27dab8d444e62a96e85313cc", "patch": "@@ -23,7 +23,7 @@ pub enum RestrictionResult {\n     SafeIf(@LoanPath, ~[Restriction])\n }\n \n-pub fn compute_restrictions(bccx: @BorrowckCtxt,\n+pub fn compute_restrictions(bccx: &BorrowckCtxt,\n                             span: Span,\n                             cmt: mc::cmt,\n                             restr: RestrictionSet) -> RestrictionResult {\n@@ -39,13 +39,13 @@ pub fn compute_restrictions(bccx: @BorrowckCtxt,\n ///////////////////////////////////////////////////////////////////////////\n // Private\n \n-struct RestrictionsContext {\n-    bccx: @BorrowckCtxt,\n+struct RestrictionsContext<'self> {\n+    bccx: &'self BorrowckCtxt,\n     span: Span,\n     cmt_original: mc::cmt\n }\n \n-impl RestrictionsContext {\n+impl<'self> RestrictionsContext<'self> {\n     fn tcx(&self) -> ty::ctxt {\n         self.bccx.tcx\n     }"}, {"sha": "852f1a53303f860634d7a8f7a61db3899ca60a8e", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eed184dbb07c18b27dab8d444e62a96e85313cc/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=7eed184dbb07c18b27dab8d444e62a96e85313cc", "patch": "@@ -61,12 +61,10 @@ impl Clone for LoanDataFlowOperator {\n \n pub type LoanDataFlow = DataFlowContext<LoanDataFlowOperator>;\n \n-struct BorrowckVisitor;\n-\n-impl Visitor<@BorrowckCtxt> for BorrowckVisitor {\n+impl Visitor<()> for BorrowckCtxt {\n     fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl,\n-                b:&Block, s:Span, n:NodeId, e:@BorrowckCtxt) {\n-        borrowck_fn(self, fk, fd, b, s, n, e);\n+                b:&Block, s:Span, n:NodeId, _:()) {\n+        borrowck_fn(self, fk, fd, b, s, n);\n     }\n }\n \n@@ -78,7 +76,7 @@ pub fn check_crate(\n     capture_map: moves::CaptureMap,\n     crate: &ast::Crate) -> (root_map, write_guard_map)\n {\n-    let bccx = @BorrowckCtxt {\n+    let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n         method_map: method_map,\n         moves_map: moves_map,\n@@ -96,9 +94,9 @@ pub fn check_crate(\n             guaranteed_paths: 0,\n         }\n     };\n+    let bccx = &mut bccx;\n \n-    let mut v = BorrowckVisitor;\n-    visit::walk_crate(&mut v, crate, bccx);\n+    visit::walk_crate(bccx, crate, ());\n \n     if tcx.sess.borrowck_stats() {\n         io::println(\"--- borrowck stats ---\");\n@@ -116,20 +114,19 @@ pub fn check_crate(\n \n     return (bccx.root_map, bccx.write_guard_map);\n \n-    fn make_stat(bccx: &BorrowckCtxt, stat: uint) -> ~str {\n+    fn make_stat(bccx: &mut BorrowckCtxt, stat: uint) -> ~str {\n         let stat_f = stat as float;\n         let total = bccx.stats.guaranteed_paths as float;\n         fmt!(\"%u (%.0f%%)\", stat  , stat_f * 100f / total)\n     }\n }\n \n-fn borrowck_fn(v: &mut BorrowckVisitor,\n+fn borrowck_fn(this: &mut BorrowckCtxt,\n                fk: &visit::fn_kind,\n                decl: &ast::fn_decl,\n                body: &ast::Block,\n                sp: Span,\n-               id: ast::NodeId,\n-               this: @BorrowckCtxt) {\n+               id: ast::NodeId) {\n     match fk {\n         &visit::fk_anon(*) |\n         &visit::fk_fn_block(*) => {\n@@ -166,7 +163,7 @@ fn borrowck_fn(v: &mut BorrowckVisitor,\n         }\n     }\n \n-    visit::walk_fn(v, fk, decl, body, sp, id, this);\n+    visit::walk_fn(this, fk, decl, body, sp, id, ());\n }\n \n // ----------------------------------------------------------------------"}]}