{"sha": "1529ed43d8b029c0406d636a6d2ae84bf5346aca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MjllZDQzZDhiMDI5YzA0MDZkNjM2YTZkMmFlODRiZjUzNDZhY2E=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-23T19:13:10Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-23T19:13:10Z"}, "message": "Document and test doubled writes in scatter", "tree": {"sha": "ee1cca2e7a76f454f573922f969a28d29fadbea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee1cca2e7a76f454f573922f969a28d29fadbea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1529ed43d8b029c0406d636a6d2ae84bf5346aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1529ed43d8b029c0406d636a6d2ae84bf5346aca", "html_url": "https://github.com/rust-lang/rust/commit/1529ed43d8b029c0406d636a6d2ae84bf5346aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1529ed43d8b029c0406d636a6d2ae84bf5346aca/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38659a46c039e0561cb86886b173869fbc45528", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38659a46c039e0561cb86886b173869fbc45528", "html_url": "https://github.com/rust-lang/rust/commit/f38659a46c039e0561cb86886b173869fbc45528"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "0a52876e55b5290a841802e84cb39d6deb665d64", "filename": "crates/core_simd/src/array.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1529ed43d8b029c0406d636a6d2ae84bf5346aca/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1529ed43d8b029c0406d636a6d2ae84bf5346aca/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=1529ed43d8b029c0406d636a6d2ae84bf5346aca", "patch": "@@ -88,14 +88,15 @@ where\n \n     /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n     /// Out-of-bounds indices are not written.\n+    /// `scatter` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n     /// ```\n     /// # use core_simd::*;\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n-    /// let vals = SimdI32::from_array([-5, -4, -3, -2]);\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n+    /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n     ///\n-    /// vals.scatter(&mut vec, idxs);\n-    /// assert_eq!(vec, vec![-3, 11, 12, -4, 14, -2, 16, 17, 18]);\n+    /// vals.scatter(&mut vec, idxs); // index 0 receives two writes.\n+    /// assert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n     /// ```\n     #[inline]\n     fn scatter(self, slice: &mut [Self::Scalar], idxs: SimdUsize<LANES>) {\n@@ -104,15 +105,16 @@ where\n \n     /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n     /// Out-of-bounds or masked indices are not written.\n+    /// `scatter_select` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n     /// ```\n     /// # use core_simd::*;\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n-    /// let vals = SimdI32::from_array([-5, -4, -3, -2]);\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n+    /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n     /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n     ///\n-    /// vals.scatter_select(&mut vec, mask, idxs);\n-    /// assert_eq!(vec, vec![-3, 11, 12, -4, 14, 15, 16, 17, 18]);\n+    /// vals.scatter_select(&mut vec, mask, idxs); // index 0's second write is masked, thus omitted.\n+    /// assert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n     /// ```\n     #[inline]\n     fn scatter_select("}]}