{"sha": "365457bd2590029e0cdba5b401273169c0fa6a79", "node_id": "C_kwDOAAsO6NoAKDM2NTQ1N2JkMjU5MDAyOWUwY2RiYTViNDAxMjczMTY5YzBmYTZhNzk", "commit": {"author": {"name": "stoozy", "email": "stoozy@proton.me", "date": "2022-09-27T02:17:47Z"}, "committer": {"name": "stoozy", "email": "stoozy@proton.me", "date": "2022-09-27T02:17:47Z"}, "message": "Using multipart suggestion", "tree": {"sha": "16b71c8377baa2f59926c3826b4c9c235832cc91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b71c8377baa2f59926c3826b4c9c235832cc91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365457bd2590029e0cdba5b401273169c0fa6a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365457bd2590029e0cdba5b401273169c0fa6a79", "html_url": "https://github.com/rust-lang/rust/commit/365457bd2590029e0cdba5b401273169c0fa6a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365457bd2590029e0cdba5b401273169c0fa6a79/comments", "author": {"login": "Stoozy", "id": 16365016, "node_id": "MDQ6VXNlcjE2MzY1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/16365016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stoozy", "html_url": "https://github.com/Stoozy", "followers_url": "https://api.github.com/users/Stoozy/followers", "following_url": "https://api.github.com/users/Stoozy/following{/other_user}", "gists_url": "https://api.github.com/users/Stoozy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stoozy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stoozy/subscriptions", "organizations_url": "https://api.github.com/users/Stoozy/orgs", "repos_url": "https://api.github.com/users/Stoozy/repos", "events_url": "https://api.github.com/users/Stoozy/events{/privacy}", "received_events_url": "https://api.github.com/users/Stoozy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stoozy", "id": 16365016, "node_id": "MDQ6VXNlcjE2MzY1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/16365016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stoozy", "html_url": "https://github.com/Stoozy", "followers_url": "https://api.github.com/users/Stoozy/followers", "following_url": "https://api.github.com/users/Stoozy/following{/other_user}", "gists_url": "https://api.github.com/users/Stoozy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stoozy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stoozy/subscriptions", "organizations_url": "https://api.github.com/users/Stoozy/orgs", "repos_url": "https://api.github.com/users/Stoozy/repos", "events_url": "https://api.github.com/users/Stoozy/events{/privacy}", "received_events_url": "https://api.github.com/users/Stoozy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887515af33f80d85b76b41ef175ea1ec0e208776", "url": "https://api.github.com/repos/rust-lang/rust/commits/887515af33f80d85b76b41ef175ea1ec0e208776", "html_url": "https://github.com/rust-lang/rust/commit/887515af33f80d85b76b41ef175ea1ec0e208776"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "991d8f883074108f8de0355753011156dd05692d", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/365457bd2590029e0cdba5b401273169c0fa6a79/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365457bd2590029e0cdba5b401273169c0fa6a79/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=365457bd2590029e0cdba5b401273169c0fa6a79", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_ast::walk_list;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap, FxIndexSet};\n-use rustc_errors::{struct_span_err};\n+use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LocalDefId;\n@@ -24,7 +24,6 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use std::fmt;\n \n-\n trait RegionExt {\n     fn early(hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n@@ -1320,21 +1319,29 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         && !self.tcx.features().anonymous_lifetime_in_impl_trait\n                     {\n \n-                        match self.tcx.hir().get_generics(lifetime_ref.hir_id.owner.to_def_id().as_local().unwrap()) {\n+                        match self.tcx.hir().get_generics(lifetime_ref.hir_id.owner.def_id) {\n                             Some(generics) => {\n                                 for i in 0..generics.params.len()  {\n \n                                     if !generics.span.contains(generics.params[i].span)  {\n-                                        struct_span_err!(\n-                                            self.tcx.sess,\n+\n+                                        let mut diag =  rustc_session::parse::feature_err(\n+                                            &self.tcx.sess.parse_sess,\n+                                            sym::anonymous_lifetime_in_impl_trait,\n                                             lifetime_ref.span,\n-                                            E0106,\n-                                            \"missing lifetime specifier\"\n-                                            )\n-                                            .span_label(lifetime_ref.span, \"expected named lifetime parameter\")\n-                                            .span_help(generics.span, \"consider introducing a named lifetime parameter\")\n-                                            .emit();\n-                                            return;\n+                                            \"anonymous lifetimes in `impl Trait` are unstable\",\n+                                        );\n+\n+                                        diag.span_label(lifetime_ref.span, \"expected named lifetime parameter\");\n+\n+                                        diag.multipart_suggestion(\"consider introducing a named lifetime parameter\",\n+                                                                  vec![\n+                                                                    (lifetime_ref.span, \"&'a \".to_owned()),\n+                                                                    (generics.span, \"<'a>\".to_owned())\n+                                                                  ], rustc_errors::Applicability::MaybeIncorrect);\n+                                        diag.emit();\n+\n+                                        return;\n                                     }\n                                 }\n                             },"}]}