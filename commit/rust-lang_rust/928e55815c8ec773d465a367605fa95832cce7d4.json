{"sha": "928e55815c8ec773d465a367605fa95832cce7d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyOGU1NTgxNWM4ZWM3NzNkNDY1YTM2NzYwNWZhOTU4MzJjY2U3ZDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T22:36:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-20T01:54:21Z"}, "message": "libcore: Do less blocking in the test runner", "tree": {"sha": "4deed1b98a4cd736c918e8c277c2164fe5da0aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4deed1b98a4cd736c918e8c277c2164fe5da0aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928e55815c8ec773d465a367605fa95832cce7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928e55815c8ec773d465a367605fa95832cce7d4", "html_url": "https://github.com/rust-lang/rust/commit/928e55815c8ec773d465a367605fa95832cce7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928e55815c8ec773d465a367605fa95832cce7d4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a663032fbe1eb0d06d4d7fc8bd6b6e46cf66fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a663032fbe1eb0d06d4d7fc8bd6b6e46cf66fc5", "html_url": "https://github.com/rust-lang/rust/commit/7a663032fbe1eb0d06d4d7fc8bd6b6e46cf66fc5"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "88601ebb19e0b9d73748b1a2c9d254c823012be0", "filename": "src/libstd/test.rs", "status": "modified", "additions": 56, "deletions": 41, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/928e55815c8ec773d465a367605fa95832cce7d4/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928e55815c8ec773d465a367605fa95832cce7d4/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=928e55815c8ec773d465a367605fa95832cce7d4", "patch": "@@ -17,7 +17,6 @@ export tr_ok;\n export tr_failed;\n export tr_ignored;\n export run_tests_console;\n-export configure_test_task;\n \n #[abi = \"cdecl\"]\n native mod rustrt {\n@@ -192,6 +191,8 @@ enum testevent {\n     te_result(test_desc, test_result);\n }\n \n+type monitor_msg = (test_desc, test_result);\n+\n fn run_tests(opts: test_opts, tests: [test_desc],\n              callback: fn@(testevent)) {\n \n@@ -202,23 +203,27 @@ fn run_tests(opts: test_opts, tests: [test_desc],\n     // many tests that run in other processes we would be making a big mess.\n     let concurrency = get_concurrency();\n     #debug(\"using %u test tasks\", concurrency);\n+\n     let total = vec::len(filtered_tests);\n     let run_idx = 0u;\n     let wait_idx = 0u;\n-    let futures = [];\n+    let done_idx = 0u;\n \n-    while wait_idx < total {\n-        while vec::len(futures) < concurrency && run_idx < total {\n-            futures += [run_test(filtered_tests[run_idx])];\n+    let p = comm::port();\n+    let ch = comm::chan(p);\n+\n+    while done_idx < total {\n+        while wait_idx < concurrency && run_idx < total {\n+            run_test(vec::shift(filtered_tests), ch);\n+            wait_idx += 1u;\n             run_idx += 1u;\n         }\n \n-        let future = futures[0];\n-        callback(te_wait(future.test));\n-        let result = future.wait();\n-        callback(te_result(future.test, result));\n-        futures = vec::slice(futures, 1u, vec::len(futures));\n-        wait_idx += 1u;\n+        let (test, result) = comm::recv(p);\n+        callback(te_wait(test));\n+        callback(te_result(test, result));\n+        wait_idx -= 1u;\n+        done_idx += 1u;\n     }\n }\n \n@@ -280,35 +285,34 @@ fn filter_tests(opts: test_opts,\n \n type test_future = {test: test_desc, wait: fn@() -> test_result};\n \n-fn run_test(test: test_desc) -> test_future {\n+fn run_test(+test: test_desc, monitor_ch: comm::chan<monitor_msg>) {\n     if test.ignore {\n-        ret {test: test, wait: fn@() -> test_result { tr_ignored }};\n+        comm::send(monitor_ch, (test, tr_ignored));\n+        ret;\n     }\n \n-    let test_task = test_to_task(test.fn);\n-    ret {test: test,\n-         wait: fn@() -> test_result {\n-             alt task::join(test_task) {\n-               task::tr_success {\n-                 if test.should_fail { tr_failed }\n-                 else { tr_ok }\n-               }\n-               task::tr_failure {\n-                 if test.should_fail { tr_ok }\n-                 else { tr_failed }\n-               }\n-             }\n-         }\n+    task::spawn {||\n+\n+        let testfn = test.fn;\n+        let test_task = task::spawn_joinable {||\n+            configure_test_task();\n+            testfn();\n         };\n+\n+        let task_result = task::join(test_task);\n+        let test_result = calc_result(test, task_result == task::tr_success);\n+        comm::send(monitor_ch, (test, test_result));\n+    };\n }\n \n-// We need to run our tests in another task in order to trap test failures.\n-// This function only works with functions that don't contain closures.\n-fn test_to_task(&&f: test_fn) -> task::joinable_task {\n-    ret task::spawn_joinable(fn~[copy f]() {\n-        configure_test_task();\n-        f();\n-    });\n+fn calc_result(test: test_desc, task_succeeded: bool) -> test_result {\n+    if task_succeeded {\n+        if test.should_fail { tr_failed }\n+        else { tr_ok }\n+    } else {\n+        if test.should_fail { tr_ok }\n+        else { tr_failed }\n+    }\n }\n \n // Call from within a test task to make sure it's set up correctly\n@@ -330,9 +334,11 @@ mod tests {\n             ignore: true,\n             should_fail: false\n         };\n-        let future = run_test(desc);\n-        let result = future.wait();\n-        assert result != tr_ok;\n+        let p = comm::port();\n+        let ch = comm::chan(p);\n+        run_test(desc, ch);\n+        let (_, res) = comm::recv(p);\n+        assert res != tr_ok;\n     }\n \n     #[test]\n@@ -344,8 +350,11 @@ mod tests {\n             ignore: true,\n             should_fail: false\n         };\n-        let res = run_test(desc).wait();\n-        assert (res == tr_ignored);\n+        let p = comm::port();\n+        let ch = comm::chan(p);\n+        run_test(desc, ch);\n+        let (_, res) = comm::recv(p);\n+        assert res == tr_ignored;\n     }\n \n     #[test]\n@@ -358,7 +367,10 @@ mod tests {\n             ignore: false,\n             should_fail: true\n         };\n-        let res = run_test(desc).wait();\n+        let p = comm::port();\n+        let ch = comm::chan(p);\n+        run_test(desc, ch);\n+        let (_, res) = comm::recv(p);\n         assert res == tr_ok;\n     }\n \n@@ -371,7 +383,10 @@ mod tests {\n             ignore: false,\n             should_fail: true\n         };\n-        let res = run_test(desc).wait();\n+        let p = comm::port();\n+        let ch = comm::chan(p);\n+        run_test(desc, ch);\n+        let (_, res) = comm::recv(p);\n         assert res == tr_failed;\n     }\n "}]}