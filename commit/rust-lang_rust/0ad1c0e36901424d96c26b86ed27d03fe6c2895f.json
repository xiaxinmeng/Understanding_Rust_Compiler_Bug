{"sha": "0ad1c0e36901424d96c26b86ed27d03fe6c2895f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDFjMGUzNjkwMTQyNGQ5NmMyNmI4NmVkMjdkMDNmZTZjMjg5NWY=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-16T23:50:00Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-16T23:50:00Z"}, "message": "Change diagnostic_builder's forward! macro to enforce trailing argument comma", "tree": {"sha": "f86d62a93c66fbce68617ad31e126241df0bb685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86d62a93c66fbce68617ad31e126241df0bb685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad1c0e36901424d96c26b86ed27d03fe6c2895f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCW57sKAAKCRDAlyIdbgPf\naHZ8AQCyn29bzBYPk55TQmGDQEk62lQMcF2mp93+aF0gBewVlgEAgRWadTrFZHhp\nY5kV9v6vS3g2To7EGfL5cH+V1dMn98c=\n=qOHS\n-----END PGP SIGNATURE-----", "payload": "tree f86d62a93c66fbce68617ad31e126241df0bb685\nparent 6ebb9161ea3d0e865786ef14878be8e4c07ab790\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537141800 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1537141800 +0300\n\nChange diagnostic_builder's forward! macro to enforce trailing argument comma\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad1c0e36901424d96c26b86ed27d03fe6c2895f", "html_url": "https://github.com/rust-lang/rust/commit/0ad1c0e36901424d96c26b86ed27d03fe6c2895f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad1c0e36901424d96c26b86ed27d03fe6c2895f/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ebb9161ea3d0e865786ef14878be8e4c07ab790", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebb9161ea3d0e865786ef14878be8e4c07ab790", "html_url": "https://github.com/rust-lang/rust/commit/6ebb9161ea3d0e865786ef14878be8e4c07ab790"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "ce5845dc03859c78799b4d297009fd519c62ac68", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0ad1c0e36901424d96c26b86ed27d03fe6c2895f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad1c0e36901424d96c26b86ed27d03fe6c2895f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=0ad1c0e36901424d96c26b86ed27d03fe6c2895f", "patch": "@@ -39,7 +39,7 @@ pub struct DiagnosticBuilder<'a> {\n /// it easy to declare such methods on the builder.\n macro_rules! forward {\n     // Forward pattern for &self -> &Self\n-    (pub fn $n:ident(&self, $($name:ident: $ty:ty),*) -> &Self) => {\n+    (pub fn $n:ident(&self, $($name:ident: $ty:ty,)*) -> &Self) => {\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -48,7 +48,7 @@ macro_rules! forward {\n     };\n \n     // Forward pattern for &mut self -> &mut Self\n-    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty),*) -> &mut Self) => {\n+    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty,)*) -> &mut Self) => {\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -58,8 +58,8 @@ macro_rules! forward {\n \n     // Forward pattern for &mut self -> &mut Self, with S: Into<MultiSpan>\n     // type parameter. No obvious way to make this more generic.\n-    (pub fn $n:ident<S: Into<MultiSpan>>(&mut self, $($name:ident: $ty:ty),*) -> &mut Self) => {\n-        pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n+    (pub fn $n:ident<S: Into<MultiSpan>>(&mut self, $($name:ident: $ty:ty,)*) -> &mut Self) => {\n+        pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty,)*) -> &mut Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n             self\n@@ -147,64 +147,64 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn note_expected_found(&mut self,\n                                         label: &dyn fmt::Display,\n                                         expected: DiagnosticStyledString,\n-                                        found: DiagnosticStyledString)\n-                                        -> &mut Self);\n+                                        found: DiagnosticStyledString,\n+                                        ) -> &mut Self);\n \n     forward!(pub fn note_expected_found_extra(&mut self,\n                                               label: &dyn fmt::Display,\n                                               expected: DiagnosticStyledString,\n                                               found: DiagnosticStyledString,\n                                               expected_extra: &dyn fmt::Display,\n-                                              found_extra: &dyn fmt::Display)\n-                                              -> &mut Self);\n+                                              found_extra: &dyn fmt::Display,\n+                                              ) -> &mut Self);\n \n-    forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n+    forward!(pub fn note(&mut self, msg: &str,) -> &mut Self);\n     forward!(pub fn span_note<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n-                                                  msg: &str)\n-                                                  -> &mut Self);\n-    forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n-    forward!(pub fn help(&mut self , msg: &str) -> &mut Self);\n+                                                  msg: &str,\n+                                                  ) -> &mut Self);\n+    forward!(pub fn warn(&mut self, msg: &str,) -> &mut Self);\n+    forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str,) -> &mut Self);\n+    forward!(pub fn help(&mut self , msg: &str,) -> &mut Self);\n     forward!(pub fn span_help<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n-                                                  msg: &str)\n-                                                  -> &mut Self);\n+                                                  msg: &str,\n+                                                  ) -> &mut Self);\n \n     #[deprecated(note = \"Use `span_suggestion_short_with_applicability`\")]\n     forward!(pub fn span_suggestion_short(\n                                       &mut self,\n                                       sp: Span,\n                                       msg: &str,\n-                                          suggestion: String)\n-                                          -> &mut Self);\n+                                      suggestion: String,\n+                                      ) -> &mut Self);\n \n     #[deprecated(note = \"Use `multipart_suggestion_with_applicability`\")]\n     forward!(pub fn multipart_suggestion(\n         &mut self,\n         msg: &str,\n-        suggestion: Vec<(Span, String)>\n+        suggestion: Vec<(Span, String)>,\n     ) -> &mut Self);\n \n     #[deprecated(note = \"Use `span_suggestion_with_applicability`\")]\n     forward!(pub fn span_suggestion(&mut self,\n                                     sp: Span,\n                                     msg: &str,\n-                                    suggestion: String)\n-                                    -> &mut Self);\n+                                    suggestion: String,\n+                                    ) -> &mut Self);\n \n     #[deprecated(note = \"Use `span_suggestions_with_applicability`\")]\n     forward!(pub fn span_suggestions(&mut self,\n                                      sp: Span,\n                                      msg: &str,\n-                                     suggestions: Vec<String>)\n-                                     -> &mut Self);\n+                                     suggestions: Vec<String>,\n+                                     ) -> &mut Self);\n \n     pub fn multipart_suggestion_with_applicability(&mut self,\n                                               msg: &str,\n                                               suggestion: Vec<(Span, String)>,\n-                                              applicability: Applicability)\n-                                              -> &mut Self {\n+                                              applicability: Applicability,\n+                                              ) -> &mut Self {\n         if !self.allow_suggestions {\n             return self\n         }\n@@ -269,8 +269,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         );\n         self\n     }\n-    forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n-    forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n+    forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S,) -> &mut Self);\n+    forward!(pub fn code(&mut self, s: DiagnosticId,) -> &mut Self);\n \n     pub fn allow_suggestions(&mut self, allow: bool) -> &mut Self {\n         self.allow_suggestions = allow;"}]}