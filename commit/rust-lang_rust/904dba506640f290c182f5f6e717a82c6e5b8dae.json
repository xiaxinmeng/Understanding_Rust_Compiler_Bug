{"sha": "904dba506640f290c182f5f6e717a82c6e5b8dae", "node_id": "C_kwDOAAsO6NoAKDkwNGRiYTUwNjY0MGYyOTBjMTgyZjVmNmU3MTdhODJjNmU1YjhkYWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-17T14:58:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-17T14:58:01Z"}, "message": "Rollup merge of #90772 - GuillaumeGomez:vec-retain-mut, r=joshtriplett\n\nAdd Vec::retain_mut\n\nThis is to continue the discussion started in #83218.\n\nOriginal comment was:\n\n> Take 2 of #34265, since I needed this today.\n\nThe reason I think why we should add `retain_mut` is for coherency and for discoverability. For example we have `chunks` and `chunks_mut` or `get` and `get_mut` or `iter` and `iter_mut`, etc. When looking for mutable `retain`, I would expect `retain_mut` to exist. It took me a while to find out about `drain_filter`. So even if it provides an API close to `drain_filter`, just for the discoverability, I think it's worth it.\n\ncc ``````@m-ou-se`````` ``````@jonas-schievink`````` ``````@Mark-Simulacrum``````", "tree": {"sha": "1a7dd7bd7b853cb4d629a64237b49d5f202d5f73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7dd7bd7b853cb4d629a64237b49d5f202d5f73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904dba506640f290c182f5f6e717a82c6e5b8dae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlRh5CRBK7hj4Ov3rIwAALmYIAI8FVTzod7MRu+xKd2TrjSg4\nb4iHe2kJ54/L/KBhvxo1p0IGVrYHY0kGffuykvEoARTSLPQUfN+E5wyTe44/dAoj\nsh2J/wATo6oX+vxuuEO12PYAW2AMpV4Sh0zMPyoujRAqnLo7Qn5zBDweOoBJRWt1\ndxsNyr9knfwdBdq1zdK8ZZd3vL5SpBzn+UGtQGI7qQoHq1ITTc+TNJgFZuGN6dGV\nXTbYqu0MJmvkrikBNNyIp6RpDgG0B31hkwFBVjwswkOe6J66r9xlMvFGjxdKpF+K\nTFA1wKnvDomSVPPEURZx6F8/na7HSt5X6T66XzXVdFyoieeFfT2AqSEObz6iRa4=\n=xtTf\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a7dd7bd7b853cb4d629a64237b49d5f202d5f73\nparent ec84633b542a7c14e380c8fb77f20a84b12cb2fe\nparent c15b55ace6ae247fa1ca0001d8840c974644a817\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637161081 +0100\ncommitter GitHub <noreply@github.com> 1637161081 +0100\n\nRollup merge of #90772 - GuillaumeGomez:vec-retain-mut, r=joshtriplett\n\nAdd Vec::retain_mut\n\nThis is to continue the discussion started in #83218.\n\nOriginal comment was:\n\n> Take 2 of #34265, since I needed this today.\n\nThe reason I think why we should add `retain_mut` is for coherency and for discoverability. For example we have `chunks` and `chunks_mut` or `get` and `get_mut` or `iter` and `iter_mut`, etc. When looking for mutable `retain`, I would expect `retain_mut` to exist. It took me a while to find out about `drain_filter`. So even if it provides an API close to `drain_filter`, just for the discoverability, I think it's worth it.\n\ncc ``````@m-ou-se`````` ``````@jonas-schievink`````` ``````@Mark-Simulacrum``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904dba506640f290c182f5f6e717a82c6e5b8dae", "html_url": "https://github.com/rust-lang/rust/commit/904dba506640f290c182f5f6e717a82c6e5b8dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904dba506640f290c182f5f6e717a82c6e5b8dae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec84633b542a7c14e380c8fb77f20a84b12cb2fe", "html_url": "https://github.com/rust-lang/rust/commit/ec84633b542a7c14e380c8fb77f20a84b12cb2fe"}, {"sha": "c15b55ace6ae247fa1ca0001d8840c974644a817", "url": "https://api.github.com/repos/rust-lang/rust/commits/c15b55ace6ae247fa1ca0001d8840c974644a817", "html_url": "https://github.com/rust-lang/rust/commit/c15b55ace6ae247fa1ca0001d8840c974644a817"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "4989244b50e27e4638631fa36d2d80092023f95f", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/904dba506640f290c182f5f6e717a82c6e5b8dae/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904dba506640f290c182f5f6e717a82c6e5b8dae/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=904dba506640f290c182f5f6e717a82c6e5b8dae", "patch": "@@ -1444,6 +1444,34 @@ impl<T, A: Allocator> Vec<T, A> {\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&T) -> bool,\n+    {\n+        self.retain_mut(|elem| f(elem));\n+    }\n+\n+    /// Retains only the elements specified by the predicate, passing a mutable reference to it.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.\n+    /// This method operates in place, visiting each element exactly once in the\n+    /// original order, and preserves the order of the retained elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_retain_mut)]\n+    ///\n+    /// let mut vec = vec![1, 2, 3, 4];\n+    /// vec.retain_mut(|x| if *x > 3 {\n+    ///     false\n+    /// } else {\n+    ///     *x += 1;\n+    ///     true\n+    /// });\n+    /// assert_eq!(vec, [2, 3, 4]);\n+    /// ```\n+    #[unstable(feature = \"vec_retain_mut\", issue = \"90829\")]\n+    pub fn retain_mut<F>(&mut self, mut f: F)\n+    where\n+        F: FnMut(&mut T) -> bool,\n     {\n         let original_len = self.len();\n         // Avoid double drop if the drop guard is not executed,\n@@ -1496,7 +1524,7 @@ impl<T, A: Allocator> Vec<T, A> {\n             g: &mut BackshiftOnDrop<'_, T, A>,\n         ) -> bool\n         where\n-            F: FnMut(&T) -> bool,\n+            F: FnMut(&mut T) -> bool,\n         {\n             // SAFETY: Unchecked element must be valid.\n             let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };"}]}