{"sha": "a9570a34cde550cecf052d92f077bce1165cb3aa", "node_id": "C_kwDOAAsO6NoAKGE5NTcwYTM0Y2RlNTUwY2VjZjA1MmQ5MmYwNzdiY2UxMTY1Y2IzYWE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-13T04:59:26Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-13T04:59:26Z"}, "message": "Stop checking for the absense of something that doesn't exist\n\nA couple of codegen tests are doing\n```\n// CHECK-NOT: slice_index_len_fail\n```\n\nHowever, that function no longer exists: [the only places](https://github.com/search?q=repo%3Arust-lang%2Frust+slice_index_len_fail&type=code) it occurs in the repo are in those tests.\n\nSo this PR updates the tests to check for the absense of the functions that are actually used today to panic for out-of-bounds indexing.", "tree": {"sha": "53a030c346681a24b3350b4fb1fd422816fa595d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53a030c346681a24b3350b4fb1fd422816fa595d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9570a34cde550cecf052d92f077bce1165cb3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9570a34cde550cecf052d92f077bce1165cb3aa", "html_url": "https://github.com/rust-lang/rust/commit/a9570a34cde550cecf052d92f077bce1165cb3aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9570a34cde550cecf052d92f077bce1165cb3aa/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04", "html_url": "https://github.com/rust-lang/rust/commit/4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "595969a89793babab4793c52779cb660f9b16ff7", "filename": "tests/codegen/binary-search-index-no-bound-check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9570a34cde550cecf052d92f077bce1165cb3aa/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9570a34cde550cecf052d92f077bce1165cb3aa/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fbinary-search-index-no-bound-check.rs?ref=a9570a34cde550cecf052d92f077bce1165cb3aa", "patch": "@@ -9,7 +9,9 @@\n #[no_mangle]\n pub fn binary_search_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n     if let Ok(idx) = s.binary_search(&b'\\\\') {\n         s[idx]\n     } else {"}, {"sha": "2d7797887912e004a1aad16cd64f74fe6b40786b", "filename": "tests/codegen/issues/issue-73396-bounds-check-after-position.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a9570a34cde550cecf052d92f077bce1165cb3aa/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9570a34cde550cecf052d92f077bce1165cb3aa/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-73396-bounds-check-after-position.rs?ref=a9570a34cde550cecf052d92f077bce1165cb3aa", "patch": "@@ -9,7 +9,10 @@\n #[no_mangle]\n pub fn position_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         &s[..idx]\n     } else {\n@@ -21,7 +24,10 @@ pub fn position_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn position_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         &s[idx..]\n     } else {\n@@ -33,7 +39,10 @@ pub fn position_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn position_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().position(|b| *b == b'\\\\') {\n         s[idx]\n     } else {\n@@ -44,7 +53,10 @@ pub fn position_index_no_bounds_check(s: &[u8]) -> u8 {\n #[no_mangle]\n pub fn rposition_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         &s[..idx]\n     } else {\n@@ -56,7 +68,10 @@ pub fn rposition_slice_to_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn rposition_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         &s[idx..]\n     } else {\n@@ -68,7 +83,10 @@ pub fn rposition_slice_from_no_bounds_check(s: &[u8]) -> &[u8] {\n #[no_mangle]\n pub fn rposition_index_no_bounds_check(s: &[u8]) -> u8 {\n     // CHECK-NOT: panic\n-    // CHECK-NOT: slice_index_len_fail\n+    // CHECK-NOT: slice_start_index_len_fail\n+    // CHECK-NOT: slice_end_index_len_fail\n+    // CHECK-NOT: panic_bounds_check\n+    // CHECK-NOT: unreachable\n     if let Some(idx) = s.iter().rposition(|b| *b == b'\\\\') {\n         s[idx]\n     } else {"}]}