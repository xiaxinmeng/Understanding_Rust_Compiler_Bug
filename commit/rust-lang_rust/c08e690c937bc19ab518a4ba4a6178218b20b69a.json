{"sha": "c08e690c937bc19ab518a4ba4a6178218b20b69a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOGU2OTBjOTM3YmMxOWFiNTE4YTRiYTRhNjE3ODIxOGIyMGI2OWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-09T13:30:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-09T13:30:12Z"}, "message": "Merge #8447\n\n8447: Resolve prelude and crate root names in the root DefMap r=jonas-schievink a=jonas-schievink\n\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/8418\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "ae2bce74a600ff461317f61e2882a7fe50cf8349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae2bce74a600ff461317f61e2882a7fe50cf8349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08e690c937bc19ab518a4ba4a6178218b20b69a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcFbkCRBK7hj4Ov3rIwAAdHIIAEQ7SUxPiyZVrdwdeBfTT17Y\nIeJzhbOsxYKrgl5AGzYgCu0joJjGEOGZdXI7l+yCy0pO1j/yjzXJQktveO8GjKJ6\npo1NASF43d8f3+JVrso1mN2LXrp148IauKpd2yxDxZK96ny4V3z7Nhnj9A2Xy++P\n0PVbOQzeNU33vqbvV/Zysq0AgbFrAOpswhLN1RjyFAvqYfOlB9+0oeBXiU5cgJGJ\n1t6J+IF7LWizjD6JVI+7UYLAp5vJOFJUcDV0hpfu6iae8qWZye3/3P4S/eThe3I6\nm+TSZhmikbDwczrIvZjco2dlh4DaqcJgSX/GXGev69rO27zX/aCUZLhsr9PnIfE=\n=dzr4\n-----END PGP SIGNATURE-----\n", "payload": "tree ae2bce74a600ff461317f61e2882a7fe50cf8349\nparent 3b1692c3e8b58e0f54e2f0e179c27de8ffb409dc\nparent 75614b126b0fb7c0f1f7da4b4f37c32c56712fc7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617975012 +0000\ncommitter GitHub <noreply@github.com> 1617975012 +0000\n\nMerge #8447\n\n8447: Resolve prelude and crate root names in the root DefMap r=jonas-schievink a=jonas-schievink\n\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/8418\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08e690c937bc19ab518a4ba4a6178218b20b69a", "html_url": "https://github.com/rust-lang/rust/commit/c08e690c937bc19ab518a4ba4a6178218b20b69a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08e690c937bc19ab518a4ba4a6178218b20b69a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1692c3e8b58e0f54e2f0e179c27de8ffb409dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1692c3e8b58e0f54e2f0e179c27de8ffb409dc", "html_url": "https://github.com/rust-lang/rust/commit/3b1692c3e8b58e0f54e2f0e179c27de8ffb409dc"}, {"sha": "75614b126b0fb7c0f1f7da4b4f37c32c56712fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75614b126b0fb7c0f1f7da4b4f37c32c56712fc7", "html_url": "https://github.com/rust-lang/rust/commit/75614b126b0fb7c0f1f7da4b4f37c32c56712fc7"}], "stats": {"total": 71, "additions": 64, "deletions": 7}, "files": [{"sha": "fb4ddff5ee541added88f876b0c72b5948d69175", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c08e690c937bc19ab518a4ba4a6178218b20b69a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08e690c937bc19ab518a4ba4a6178218b20b69a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c08e690c937bc19ab518a4ba4a6178218b20b69a", "patch": "@@ -478,7 +478,7 @@ impl DefCollector<'_> {\n             self.def_map.edition,\n         );\n \n-        let res = self.def_map.resolve_name_in_extern_prelude(&extern_crate.name);\n+        let res = self.def_map.resolve_name_in_extern_prelude(self.db, &extern_crate.name);\n \n         if let Some(ModuleDefId::ModuleId(m)) = res.take_types() {\n             cov_mark::hit!(macro_rules_from_other_crates_are_visible_with_macro_use);\n@@ -534,6 +534,7 @@ impl DefCollector<'_> {\n         log::debug!(\"resolving import: {:?} ({:?})\", import, self.def_map.edition);\n         if import.is_extern_crate {\n             let res = self.def_map.resolve_name_in_extern_prelude(\n+                self.db,\n                 &import\n                     .path\n                     .as_ident()"}, {"sha": "ccc9f22eb5b8accb532360143262b0a6addf0142", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c08e690c937bc19ab518a4ba4a6178218b20b69a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08e690c937bc19ab518a4ba4a6178218b20b69a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=c08e690c937bc19ab518a4ba4a6178218b20b69a", "patch": "@@ -60,12 +60,26 @@ impl ResolvePathResult {\n }\n \n impl DefMap {\n-    pub(super) fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs {\n+    pub(super) fn resolve_name_in_extern_prelude(\n+        &self,\n+        db: &dyn DefDatabase,\n+        name: &Name,\n+    ) -> PerNs {\n         if name == &name!(self) {\n             cov_mark::hit!(extern_crate_self_as);\n             return PerNs::types(self.module_id(self.root).into(), Visibility::Public);\n         }\n-        self.extern_prelude\n+\n+        let arc;\n+        let root = match self.block {\n+            Some(_) => {\n+                arc = self.crate_root(db).def_map(db);\n+                &*arc\n+            }\n+            None => self,\n+        };\n+\n+        root.extern_prelude\n             .get(name)\n             .map_or(PerNs::none(), |&it| PerNs::types(it, Visibility::Public))\n     }\n@@ -191,7 +205,7 @@ impl DefMap {\n                     None => return ResolvePathResult::empty(ReachedFixedPoint::Yes),\n                 };\n                 log::debug!(\"resolving {:?} in crate root (+ extern prelude)\", segment);\n-                self.resolve_name_in_crate_root_or_extern_prelude(&segment)\n+                self.resolve_name_in_crate_root_or_extern_prelude(db, &segment)\n             }\n             PathKind::Plain => {\n                 let (_, segment) = match segments.next() {\n@@ -394,9 +408,21 @@ impl DefMap {\n         from_legacy_macro.or(from_scope_or_builtin).or(from_extern_prelude).or(from_prelude)\n     }\n \n-    fn resolve_name_in_crate_root_or_extern_prelude(&self, name: &Name) -> PerNs {\n-        let from_crate_root = self[self.root].scope.get(name);\n-        let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n+    fn resolve_name_in_crate_root_or_extern_prelude(\n+        &self,\n+        db: &dyn DefDatabase,\n+        name: &Name,\n+    ) -> PerNs {\n+        let arc;\n+        let crate_def_map = match self.block {\n+            Some(_) => {\n+                arc = self.crate_root(db).def_map(db);\n+                &arc\n+            }\n+            None => self,\n+        };\n+        let from_crate_root = crate_def_map[crate_def_map.root].scope.get(name);\n+        let from_extern_prelude = self.resolve_name_in_extern_prelude(db, name);\n \n         from_crate_root.or(from_extern_prelude)\n     }"}, {"sha": "1c1aa491d66a62abc6b0c5452cca20dd1696ee11", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c08e690c937bc19ab518a4ba4a6178218b20b69a/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08e690c937bc19ab518a4ba4a6178218b20b69a/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=c08e690c937bc19ab518a4ba4a6178218b20b69a", "patch": "@@ -3413,3 +3413,33 @@ fn foo() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn renamed_extern_crate_in_block() {\n+    check_types(\n+        r#\"\n+//- /lib.rs crate:lib deps:serde\n+use serde::Deserialize;\n+\n+struct Foo {}\n+\n+const _ : () = {\n+    extern crate serde as _serde;\n+    impl _serde::Deserialize for Foo {\n+        fn deserialize() -> u8 { 0 }\n+    }\n+};\n+\n+fn foo() {\n+    Foo::deserialize();\n+  //^^^^^^^^^^^^^^^^^^ u8\n+}\n+\n+//- /serde.rs crate:serde\n+\n+pub trait Deserialize {\n+    fn deserialize() -> u8;\n+}\n+    \"#,\n+    );\n+}"}]}