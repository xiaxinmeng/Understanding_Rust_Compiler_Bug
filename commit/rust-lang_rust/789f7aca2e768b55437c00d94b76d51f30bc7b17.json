{"sha": "789f7aca2e768b55437c00d94b76d51f30bc7b17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OWY3YWNhMmU3NjhiNTU0MzdjMDBkOTRiNzZkNTFmMzBiYzdiMTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T16:54:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T16:54:35Z"}, "message": "Merge #8173\n\n8173: simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ce6741e22f6684334d1f63ec37076d23a092fdfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6741e22f6684334d1f63ec37076d23a092fdfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/789f7aca2e768b55437c00d94b76d51f30bc7b17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWh1LCRBK7hj4Ov3rIwAAdHIIAKPNssILX9tMJrZ7rLj2/lFv\nh//QTS9IPyINa62kCdG2BOCg/fvmoUbNE7uxnYYffpNURnIX2hAnjSOGJ42a4VuC\ncXD2vm4YtZwDnYMUjBcpzusI2Itx2HxouJfIDKssDxL8cR8T+/m6moQqmP60uZdu\n5xKoMrWQLYfBmoqQQQdNR7EJfPLK1jMQNsehK3ACr/gl1R+qHUAx4tJGEjJk/rsy\nRGcINusWe0IyvpKhroFHG4DN4o2qSHAWAIZ3SFTh78CmdVcCrt9X1gQd6WSW3b2A\npV7qqarMXXGtQsBAonBzVFI01HngADyfe2RYe0Kf12uj+/X4b9kc/niT1lkT5fw=\n=4TVe\n-----END PGP SIGNATURE-----\n", "payload": "tree ce6741e22f6684334d1f63ec37076d23a092fdfc\nparent c220b340958c447b72330148e44f24c9204f84c2\nparent 6bdf505d7cb5c248093c2ba174d3ac9609515804\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616518475 +0000\ncommitter GitHub <noreply@github.com> 1616518475 +0000\n\nMerge #8173\n\n8173: simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/789f7aca2e768b55437c00d94b76d51f30bc7b17", "html_url": "https://github.com/rust-lang/rust/commit/789f7aca2e768b55437c00d94b76d51f30bc7b17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/789f7aca2e768b55437c00d94b76d51f30bc7b17/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c220b340958c447b72330148e44f24c9204f84c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c220b340958c447b72330148e44f24c9204f84c2", "html_url": "https://github.com/rust-lang/rust/commit/c220b340958c447b72330148e44f24c9204f84c2"}, {"sha": "6bdf505d7cb5c248093c2ba174d3ac9609515804", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdf505d7cb5c248093c2ba174d3ac9609515804", "html_url": "https://github.com/rust-lang/rust/commit/6bdf505d7cb5c248093c2ba174d3ac9609515804"}], "stats": {"total": 96, "additions": 56, "deletions": 40}, "files": [{"sha": "eb7865c8421135aedc671fe5642fa25b518b87ae", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/789f7aca2e768b55437c00d94b76d51f30bc7b17/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789f7aca2e768b55437c00d94b76d51f30bc7b17/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=789f7aca2e768b55437c00d94b76d51f30bc7b17", "patch": "@@ -973,6 +973,14 @@ impl SelfParam {\n             Access::Owned => \"self\",\n         }\n     }\n+\n+    pub fn source(&self, db: &dyn HirDatabase) -> Option<InFile<ast::SelfParam>> {\n+        let InFile { file_id, value } = Function::from(self.func).source(db)?;\n+        value\n+            .param_list()\n+            .and_then(|params| params.self_param())\n+            .map(|value| InFile { file_id, value })\n+    }\n }\n \n impl HasVisibility for Function {\n@@ -1348,6 +1356,13 @@ impl Local {\n         }\n     }\n \n+    pub fn as_self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n+        match self.parent {\n+            DefWithBodyId::FunctionId(func) if self.is_self(db) => Some(SelfParam { func }),\n+            _ => None,\n+        }\n+    }\n+\n     // FIXME: why is this an option? It shouldn't be?\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         let body = db.body(self.parent);"}, {"sha": "26d6dc9c9f99c4cc43d246e1a7336762abb8d5c1", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/789f7aca2e768b55437c00d94b76d51f30bc7b17/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/789f7aca2e768b55437c00d94b76d51f30bc7b17/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=789f7aca2e768b55437c00d94b76d51f30bc7b17", "patch": "@@ -219,40 +219,44 @@ fn rename_reference(\n ) -> RenameResult<SourceChange> {\n     let ident_kind = check_identifier(new_name)?;\n \n-    let def_is_lbl_or_lt = matches!(\n-        def,\n+    if matches!(\n+        def, // is target a lifetime?\n         Definition::GenericParam(hir::GenericParam::LifetimeParam(_)) | Definition::Label(_)\n-    );\n-    match (ident_kind, def) {\n-        (IdentifierKind::ToSelf, _)\n-        | (IdentifierKind::Underscore, _)\n-        | (IdentifierKind::Ident, _)\n-            if def_is_lbl_or_lt =>\n-        {\n-            cov_mark::hit!(rename_not_a_lifetime_ident_ref);\n-            bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name)\n-        }\n-        (IdentifierKind::Lifetime, _) if def_is_lbl_or_lt => cov_mark::hit!(rename_lifetime),\n-        (IdentifierKind::Lifetime, _) => {\n-            cov_mark::hit!(rename_not_an_ident_ref);\n-            bail!(\"Invalid name `{}`: not an identifier\", new_name)\n-        }\n-        (IdentifierKind::ToSelf, Definition::Local(local)) if local.is_self(sema.db) => {\n-            // no-op\n-            cov_mark::hit!(rename_self_to_self);\n-            return Ok(SourceChange::default());\n-        }\n-        (ident_kind, Definition::Local(local)) if local.is_self(sema.db) => {\n-            cov_mark::hit!(rename_self_to_param);\n-            return rename_self_to_param(sema, local, new_name, ident_kind);\n-        }\n-        (IdentifierKind::ToSelf, Definition::Local(local)) => {\n-            cov_mark::hit!(rename_to_self);\n-            return rename_to_self(sema, local);\n+    ) {\n+        match ident_kind {\n+            IdentifierKind::Ident | IdentifierKind::ToSelf | IdentifierKind::Underscore => {\n+                cov_mark::hit!(rename_not_a_lifetime_ident_ref);\n+                bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name);\n+            }\n+            IdentifierKind::Lifetime => cov_mark::hit!(rename_lifetime),\n         }\n-        (IdentifierKind::ToSelf, _) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n-        (IdentifierKind::Ident, _) | (IdentifierKind::Underscore, _) => {\n-            cov_mark::hit!(rename_ident)\n+    } else {\n+        match (ident_kind, def) {\n+            (IdentifierKind::Lifetime, _) => {\n+                cov_mark::hit!(rename_not_an_ident_ref);\n+                bail!(\"Invalid name `{}`: not an identifier\", new_name);\n+            }\n+            (IdentifierKind::ToSelf, Definition::Local(local)) => {\n+                if local.is_self(sema.db) {\n+                    // no-op\n+                    cov_mark::hit!(rename_self_to_self);\n+                    return Ok(SourceChange::default());\n+                } else {\n+                    cov_mark::hit!(rename_to_self);\n+                    return rename_to_self(sema, local);\n+                }\n+            }\n+            (ident_kind, Definition::Local(local)) => {\n+                if let Some(self_param) = local.as_self_param(sema.db) {\n+                    cov_mark::hit!(rename_self_to_param);\n+                    return rename_self_to_param(sema, local, self_param, new_name, ident_kind);\n+                } else {\n+                    cov_mark::hit!(rename_local);\n+                }\n+            }\n+            (IdentifierKind::ToSelf, _) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n+            (IdentifierKind::Ident, _) => cov_mark::hit!(rename_non_local),\n+            (IdentifierKind::Underscore, _) => (),\n         }\n     }\n \n@@ -336,16 +340,12 @@ fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameRe\n fn rename_self_to_param(\n     sema: &Semantics<RootDatabase>,\n     local: hir::Local,\n+    self_param: hir::SelfParam,\n     new_name: &str,\n     identifier_kind: IdentifierKind,\n ) -> RenameResult<SourceChange> {\n-    let (file_id, self_param) = match local.source(sema.db) {\n-        InFile { file_id, value: Either::Right(self_param) } => (file_id, self_param),\n-        _ => {\n-            never!(true, \"rename_self_to_param invoked on a non-self local\");\n-            bail!(\"rename_self_to_param invoked on a non-self local\");\n-        }\n-    };\n+    let InFile { file_id, value: self_param } =\n+        self_param.source(sema.db).ok_or_else(|| format_err!(\"cannot find function source\"))?;\n \n     let def = Definition::Local(local);\n     let usages = def.usages(sema).all();\n@@ -701,7 +701,7 @@ foo!(Foo$0);\",\n \n     #[test]\n     fn test_rename_for_local() {\n-        cov_mark::check!(rename_ident);\n+        cov_mark::check!(rename_local);\n         check(\n             \"k\",\n             r#\"\n@@ -1242,6 +1242,7 @@ pub mod foo$0;\n \n     #[test]\n     fn test_enum_variant_from_module_1() {\n+        cov_mark::check!(rename_non_local);\n         check(\n             \"Baz\",\n             r#\""}]}