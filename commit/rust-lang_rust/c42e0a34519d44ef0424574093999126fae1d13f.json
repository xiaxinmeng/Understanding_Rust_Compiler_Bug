{"sha": "c42e0a34519d44ef0424574093999126fae1d13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MmUwYTM0NTE5ZDQ0ZWYwNDI0NTc0MDkzOTk5MTI2ZmFlMWQxM2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-23T14:42:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-23T14:42:46Z"}, "message": "make svh independent of item ordering", "tree": {"sha": "57bd8d8a5b8041965e4e6547e3679bb48da2428c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57bd8d8a5b8041965e4e6547e3679bb48da2428c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42e0a34519d44ef0424574093999126fae1d13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42e0a34519d44ef0424574093999126fae1d13f", "html_url": "https://github.com/rust-lang/rust/commit/c42e0a34519d44ef0424574093999126fae1d13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42e0a34519d44ef0424574093999126fae1d13f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9230833084118e31b6dd40cccdd7a8b42c8f236", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9230833084118e31b6dd40cccdd7a8b42c8f236", "html_url": "https://github.com/rust-lang/rust/commit/f9230833084118e31b6dd40cccdd7a8b42c8f236"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "8aa134ba3bfd03ef8f0e5fc9d5a87b8b33966496", "filename": "src/librustc_incremental/calculate_svh/def_path_hash.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c42e0a34519d44ef0424574093999126fae1d13f/src%2Flibrustc_incremental%2Fcalculate_svh%2Fdef_path_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42e0a34519d44ef0424574093999126fae1d13f/src%2Flibrustc_incremental%2Fcalculate_svh%2Fdef_path_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fdef_path_hash.rs?ref=c42e0a34519d44ef0424574093999126fae1d13f", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::TyCtxt;\n+use rustc::util::nodemap::DefIdMap;\n+\n+pub struct DefPathHashes<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    data: DefIdMap<u64>,\n+}\n+\n+impl<'a, 'tcx> DefPathHashes<'a, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n+        DefPathHashes {\n+            tcx: tcx,\n+            data: DefIdMap()\n+        }\n+    }\n+\n+    pub fn hash(&mut self, def_id: DefId) -> u64 {\n+        let tcx = self.tcx;\n+        *self.data.entry(def_id)\n+                  .or_insert_with(|| {\n+                      let def_path = tcx.def_path(def_id);\n+                      def_path.deterministic_hash(tcx)\n+                  })\n+    }\n+}"}, {"sha": "42bb1a5246738e55c5031a8100ee0689cc2bc60b", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c42e0a34519d44ef0424574093999126fae1d13f/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42e0a34519d44ef0424574093999126fae1d13f/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=c42e0a34519d44ef0424574093999126fae1d13f", "patch": "@@ -35,11 +35,12 @@ use rustc::hir;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit as visit;\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::fnv::FnvHashMap;\n \n+use self::def_path_hash::DefPathHashes;\n use self::svh_visitor::StrictVersionHashVisitor;\n \n+mod def_path_hash;\n mod svh_visitor;\n \n pub type IncrementalHashesMap = FnvHashMap<DepNode<DefId>, u64>;\n@@ -50,7 +51,7 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     let krate = tcx.map.krate();\n     let mut visitor = HashItemsVisitor { tcx: tcx,\n                                          hashes: FnvHashMap(),\n-                                         def_path_hashes: DefIdMap() };\n+                                         def_path_hashes: DefPathHashes::new(tcx) };\n     visitor.calculate_def_id(DefId::local(CRATE_DEF_INDEX), |v| visit::walk_crate(v, krate));\n     krate.visit_all_items(&mut visitor);\n     visitor.compute_crate_hash();\n@@ -59,20 +60,20 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n struct HashItemsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_path_hashes: DefIdMap<u64>,\n+    def_path_hashes: DefPathHashes<'a, 'tcx>,\n     hashes: IncrementalHashesMap,\n }\n \n impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n     fn calculate_node_id<W>(&mut self, id: ast::NodeId, walk_op: W)\n-        where W: for<'v> FnMut(&mut StrictVersionHashVisitor<'v, 'tcx>)\n+        where W: for<'v> FnMut(&mut StrictVersionHashVisitor<'v, 'a, 'tcx>)\n     {\n         let def_id = self.tcx.map.local_def_id(id);\n         self.calculate_def_id(def_id, walk_op)\n     }\n \n     fn calculate_def_id<W>(&mut self, def_id: DefId, mut walk_op: W)\n-        where W: for<'v> FnMut(&mut StrictVersionHashVisitor<'v, 'tcx>)\n+        where W: for<'v> FnMut(&mut StrictVersionHashVisitor<'v, 'a, 'tcx>)\n     {\n         assert!(def_id.is_local());\n         debug!(\"HashItemsVisitor::calculate(def_id={:?})\", def_id);\n@@ -99,15 +100,22 @@ impl<'a, 'tcx> HashItemsVisitor<'a, 'tcx> {\n \n         // add each item (in some deterministic order) to the overall\n         // crate hash.\n-        //\n-        // FIXME -- it'd be better to sort by the hash of the def-path,\n-        // so that reordering items would not affect the crate hash.\n         {\n-            let mut keys: Vec<_> = self.hashes.keys().collect();\n-            keys.sort();\n-            for key in keys {\n-                self.hashes[key].hash(&mut crate_state);\n-            }\n+            let def_path_hashes = &mut self.def_path_hashes;\n+            let mut item_hashes: Vec<_> =\n+                self.hashes.iter()\n+                           .map(|(item_dep_node, &item_hash)| {\n+                               // convert from a DepNode<DefId> tp a\n+                               // DepNode<u64> where the u64 is the\n+                               // hash of the def-id's def-path:\n+                               let item_dep_node =\n+                                   item_dep_node.map_def(|&did| Some(def_path_hashes.hash(did)))\n+                                                .unwrap();\n+                               (item_dep_node, item_hash)\n+                           })\n+                           .collect();\n+            item_hashes.sort(); // avoid artificial dependencies on item ordering\n+            item_hashes.hash(&mut crate_state);\n         }\n \n         for attr in &krate.attrs {"}, {"sha": "c1158dc2d5fe990dfbabf3fa7c3c4047f12fb4e4", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c42e0a34519d44ef0424574093999126fae1d13f/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42e0a34519d44ef0424574093999126fae1d13f/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=c42e0a34519d44ef0424574093999126fae1d13f", "patch": "@@ -26,33 +26,29 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit as visit;\n use rustc::hir::intravisit::{Visitor, FnKind};\n use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::DefIdMap;\n \n use std::hash::{Hash, SipHasher};\n \n-pub struct StrictVersionHashVisitor<'a, 'tcx: 'a> {\n-    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+use super::def_path_hash::DefPathHashes;\n+\n+pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n+    pub tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n     pub st: &'a mut SipHasher,\n \n     // collect a deterministic hash of def-ids that we have seen\n-    def_path_hashes: &'a mut DefIdMap<u64>,\n+    def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>,\n }\n \n-impl<'a, 'tcx> StrictVersionHashVisitor<'a, 'tcx> {\n+impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     pub fn new(st: &'a mut SipHasher,\n-               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               def_path_hashes: &'a mut DefIdMap<u64>)\n+               tcx: TyCtxt<'hash, 'tcx, 'tcx>,\n+               def_path_hashes: &'a mut DefPathHashes<'hash, 'tcx>)\n                -> Self {\n         StrictVersionHashVisitor { st: st, tcx: tcx, def_path_hashes: def_path_hashes }\n     }\n \n     fn compute_def_id_hash(&mut self, def_id: DefId) -> u64 {\n-        let tcx = self.tcx;\n-        *self.def_path_hashes.entry(def_id)\n-                             .or_insert_with(|| {\n-                                 let def_path = tcx.def_path(def_id);\n-                                 def_path.deterministic_hash(tcx)\n-                             })\n+        self.def_path_hashes.hash(def_id)\n     }\n }\n \n@@ -196,7 +192,7 @@ pub enum SawStmtComponent {\n     SawStmtSemi,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for StrictVersionHashVisitor<'a, 'tcx> {\n+impl<'a, 'hash, 'tcx> Visitor<'tcx> for StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     fn visit_nested_item(&mut self, _: ItemId) {\n         // Each item is hashed independently; ignore nested items.\n     }\n@@ -370,7 +366,7 @@ pub enum DefHash {\n     SawErr,\n }\n \n-impl<'a, 'tcx> StrictVersionHashVisitor<'a, 'tcx> {\n+impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     fn hash_resolve(&mut self, id: ast::NodeId) {\n         // Because whether or not a given id has an entry is dependent\n         // solely on expr variant etc, we don't need to hash whether"}]}