{"sha": "3001ab10b96dd495f4c579936a592dc993388568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMDFhYjEwYjk2ZGQ0OTVmNGM1Nzk5MzZhNTkyZGM5OTMzODg1Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-21T12:05:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-21T12:05:49Z"}, "message": "Auto merge of #47001 - arielb1:private-match, r=nikomatsakis\n\ncheck_match: fix handling of privately uninhabited types\n\nthe match-checking code used to use TyErr for signaling \"unknown,\ninhabited\" types for a long time. It had been switched to using the\nexact type in #38069, to handle uninhabited types.\n\nHowever, in #39980, we discovered that we still needed the \"unknown\ninhabited\" logic, but I used `()` instead of `TyErr` to handle that.\nRevert to using `TyErr` to fix that problem.\n\nFixes #46964.\n\nr? @nikomatsakis", "tree": {"sha": "554732e36fddc7b5f7f04503565dc569d2a48698", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554732e36fddc7b5f7f04503565dc569d2a48698"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3001ab10b96dd495f4c579936a592dc993388568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3001ab10b96dd495f4c579936a592dc993388568", "html_url": "https://github.com/rust-lang/rust/commit/3001ab10b96dd495f4c579936a592dc993388568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3001ab10b96dd495f4c579936a592dc993388568/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9368a1e3e2b5f27438754c149948a877edbcd767", "url": "https://api.github.com/repos/rust-lang/rust/commits/9368a1e3e2b5f27438754c149948a877edbcd767", "html_url": "https://github.com/rust-lang/rust/commit/9368a1e3e2b5f27438754c149948a877edbcd767"}, {"sha": "98fbccee0c7bd740ff5173d4e3ab7666433f470b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98fbccee0c7bd740ff5173d4e3ab7666433f470b", "html_url": "https://github.com/rust-lang/rust/commit/98fbccee0c7bd740ff5173d4e3ab7666433f470b"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "a7c382eba5091608fb375738858cab77b230a001", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3001ab10b96dd495f4c579936a592dc993388568/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3001ab10b96dd495f4c579936a592dc993388568/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=3001ab10b96dd495f4c579936a592dc993388568", "patch": "@@ -561,19 +561,25 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n ///   (1) all_constructors will only return constructors that are statically\n ///       possible. eg. it will only return Ok for Result<T, !>\n ///\n-/// Whether a vector `v` of patterns is 'useful' in relation to a set of such\n-/// vectors `m` is defined as there being a set of inputs that will match `v`\n-/// but not any of the sets in `m`.\n+/// This finds whether a (row) vector `v` of patterns is 'useful' in relation\n+/// to a set of such vectors `m` - this is defined as there being a set of\n+/// inputs that will match `v` but not any of the sets in `m`.\n+///\n+/// All the patterns at each column of the `matrix ++ v` matrix must\n+/// have the same type, except that wildcard (PatternKind::Wild) patterns\n+/// with type TyErr are also allowed, even if the \"type of the column\"\n+/// is not TyErr. That is used to represent private fields, as using their\n+/// real type would assert that they are inhabited.\n ///\n /// This is used both for reachability checking (if a pattern isn't useful in\n /// relation to preceding patterns, it is not reachable) and exhaustiveness\n /// checking (if a wildcard pattern is useful in relation to a matrix, the\n /// matrix isn't exhaustive).\n pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-                           matrix: &Matrix<'p, 'tcx>,\n-                           v: &[&'p Pattern<'tcx>],\n-                           witness: WitnessPreference)\n-                           -> Usefulness<'tcx> {\n+                                       matrix: &Matrix<'p, 'tcx>,\n+                                       v: &[&'p Pattern<'tcx>],\n+                                       witness: WitnessPreference)\n+                                       -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:?}, {:?})\", matrix, v);\n \n@@ -596,6 +602,25 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n     let pcx = PatternContext {\n+        // TyErr is used to represent the type of wildcard patterns matching\n+        // against inaccessible (private) fields of structs, so that we won't\n+        // be able to observe whether the types of the struct's fields are\n+        // inhabited.\n+        //\n+        // If the field is truely inaccessible, then all the patterns\n+        // matching against it must be wildcard patterns, so its type\n+        // does not matter.\n+        //\n+        // However, if we are matching against non-wildcard patterns, we\n+        // need to know the real type of the field so we can specialize\n+        // against it. This primarily occurs through constants - they\n+        // can include contents for fields that are inaccessible at the\n+        // location of the match. In that case, the field's type is\n+        // inhabited - by the constant - so we can just use it.\n+        //\n+        // FIXME: this might lead to \"unstable\" behavior with macro hygiene\n+        // introducing uninhabited patterns for inaccessible fields. We\n+        // need to figure out how to model that.\n         ty: rows.iter().map(|r| r[0].ty).find(|ty| !ty.references_error())\n             .unwrap_or(v[0].ty),\n         max_slice_length: max_slice_length(cx, rows.iter().map(|r| r[0]).chain(Some(v[0])))\n@@ -861,13 +886,13 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                     if is_visible {\n                         field.ty(cx.tcx, substs)\n                     } else {\n-                        // Treat all non-visible fields as nil. They\n+                        // Treat all non-visible fields as TyErr. They\n                         // can't appear in any other pattern from\n                         // this match (because they are private),\n                         // so their type does not matter - but\n                         // we don't want to know they are\n                         // uninhabited.\n-                        cx.tcx.mk_nil()\n+                        cx.tcx.types.err\n                     }\n                 }).collect()\n             }"}, {"sha": "2a82c6dd4381976ed92b74d549eacdb3b0f4436c", "filename": "src/test/run-pass/issue-46964.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3001ab10b96dd495f4c579936a592dc993388568/src%2Ftest%2Frun-pass%2Fissue-46964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3001ab10b96dd495f4c579936a592dc993388568/src%2Ftest%2Frun-pass%2Fissue-46964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46964.rs?ref=3001ab10b96dd495f4c579936a592dc993388568", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod my_mod {\n+    #[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord, Hash)]\n+    pub struct Name<'a> {\n+        source: &'a str,\n+    }\n+\n+    pub const JSON: Name = Name { source: \"JSON\" };\n+}\n+\n+pub fn crash() -> bool {\n+  match (my_mod::JSON, None) {\n+    (_, Some(my_mod::JSON)) => true,\n+    (my_mod::JSON, None) => true,\n+    _ => false,\n+  }\n+}\n+\n+fn main() {}"}]}