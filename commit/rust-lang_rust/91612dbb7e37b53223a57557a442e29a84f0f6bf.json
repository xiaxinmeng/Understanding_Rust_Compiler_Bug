{"sha": "91612dbb7e37b53223a57557a442e29a84f0f6bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNjEyZGJiN2UzN2I1MzIyM2E1NzU1N2E0NDJlMjlhODRmMGY2YmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-14T00:11:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-14T00:11:33Z"}, "message": "De-mode-ify a few minor libcore modules.", "tree": {"sha": "2e60b8b85100333d99b2d7643a7742e036c93e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e60b8b85100333d99b2d7643a7742e036c93e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91612dbb7e37b53223a57557a442e29a84f0f6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91612dbb7e37b53223a57557a442e29a84f0f6bf", "html_url": "https://github.com/rust-lang/rust/commit/91612dbb7e37b53223a57557a442e29a84f0f6bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91612dbb7e37b53223a57557a442e29a84f0f6bf/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52255f898c1af5a59ebb4b127d5946a005c7eae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/52255f898c1af5a59ebb4b127d5946a005c7eae8", "html_url": "https://github.com/rust-lang/rust/commit/52255f898c1af5a59ebb4b127d5946a005c7eae8"}], "stats": {"total": 105, "additions": 69, "deletions": 36}, "files": [{"sha": "b25f713aacdf082eb40390fdf8afb6f112b76b78", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,5 +1,9 @@\n // -*- rust -*-\n \n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n //! Boolean logic\n \n export not, and, or, xor, implies;\n@@ -38,11 +42,13 @@ pure fn is_true(v: bool) -> bool { v }\n pure fn is_false(v: bool) -> bool { !v }\n \n /// Parse logic value from `s`\n-pure fn from_str(s: ~str) -> option<bool> {\n-    match check s {\n-      ~\"true\" => some(true),\n-      ~\"false\" => some(false),\n-      _ => none\n+pure fn from_str(s: &str) -> option<bool> {\n+    if s == \"true\" {\n+        some(true)\n+    } else if s == \"false\" {\n+        some(false)\n+    } else {\n+        none\n     }\n }\n "}, {"sha": "be4f7b4e8a63f745bfddc355a402c5491671788c", "filename": "src/libcore/box.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,5 +1,9 @@\n //! Operations on shared box types\n \n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n export ptr_eq;\n \n pure fn ptr_eq<T>(a: @T, b: @T) -> bool {"}, {"sha": "85e87c9172bb7e703bc88093d89bedb8843c5e2d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,5 +1,9 @@\n //! Utilities for manipulating the char type\n \n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /*\n     Lu  Uppercase_Letter    an uppercase letter\n     Ll  Lowercase_Letter    a lowercase letter"}, {"sha": "29dff86b237b5e68ba7f86adc994c4b923d9b06c", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n export c_float;\n export c_double;\n "}, {"sha": "aa39ab2ada49c735dca447c8be313362b3a27602", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /// Interfaces used for comparison.\n \n trait ord {"}, {"sha": "b3f56109ee4d1e22f236dd3ffcf755d7d6ffba78", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /**\n  * A doubly-linked list. Supports O(1) head, tail, count, push, pop, etc.\n  *"}, {"sha": "e4ff406a9b702faa82f6554b62d0e6e041696d29", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n // Dynamic Vector\n //\n // A growable vector that makes use of unique pointers so that the\n@@ -69,7 +73,7 @@ fn from_vec<A>(+v: ~[mut A]) -> dvec<A> {\n }\n \n /// Consumes the vector and returns its contents\n-fn unwrap<A>(-d: dvec<A>) -> ~[mut A] {\n+fn unwrap<A>(+d: dvec<A>) -> ~[mut A] {\n     let dvec_({data: v}) <- d;\n     return v;\n }"}, {"sha": "6b9c1846c37ca3b46ea3471beb878cb597f348f0", "filename": "src/libcore/either.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n //! A type that represents one of two alternatives\n \n import result::result;\n@@ -8,8 +12,8 @@ enum either<T, U> {\n     right(U)\n }\n \n-fn either<T, U, V>(f_left: fn(T) -> V,\n-                   f_right: fn(U) -> V, value: either<T, U>) -> V {\n+fn either<T, U, V>(f_left: fn((&T)) -> V,\n+                   f_right: fn((&U)) -> V, value: &either<T, U>) -> V {\n     /*!\n      * Applies a function based on the given either value\n      *\n@@ -18,13 +22,13 @@ fn either<T, U, V>(f_left: fn(T) -> V,\n      * result is returned.\n      */\n \n-    match value {\n-      left(l) => f_left(l),\n-      right(r) => f_right(r)\n+    match *value {\n+      left(ref l) => f_left(l),\n+      right(ref r) => f_right(r)\n     }\n }\n \n-fn lefts<T: copy, U>(eithers: ~[either<T, U>]) -> ~[T] {\n+fn lefts<T: copy, U>(eithers: &[either<T, U>]) -> ~[T] {\n     //! Extracts from a vector of either all the left values\n \n     let mut result: ~[T] = ~[];\n@@ -37,7 +41,7 @@ fn lefts<T: copy, U>(eithers: ~[either<T, U>]) -> ~[T] {\n     return result;\n }\n \n-fn rights<T, U: copy>(eithers: ~[either<T, U>]) -> ~[U] {\n+fn rights<T, U: copy>(eithers: &[either<T, U>]) -> ~[U] {\n     //! Extracts from a vector of either all the right values\n \n     let mut result: ~[U] = ~[];\n@@ -50,7 +54,7 @@ fn rights<T, U: copy>(eithers: ~[either<T, U>]) -> ~[U] {\n     return result;\n }\n \n-fn partition<T: copy, U: copy>(eithers: ~[either<T, U>])\n+fn partition<T: copy, U: copy>(eithers: &[either<T, U>])\n     -> {lefts: ~[T], rights: ~[U]} {\n     /*!\n      * Extracts from a vector of either all the left values and right values\n@@ -70,56 +74,55 @@ fn partition<T: copy, U: copy>(eithers: ~[either<T, U>])\n     return {lefts: lefts, rights: rights};\n }\n \n-pure fn flip<T: copy, U: copy>(eith: either<T, U>) -> either<U, T> {\n+pure fn flip<T: copy, U: copy>(eith: &either<T, U>) -> either<U, T> {\n     //! Flips between left and right of a given either\n \n-    match eith {\n+    match *eith {\n       right(r) => left(r),\n       left(l) => right(l)\n     }\n }\n \n-pure fn to_result<T: copy, U: copy>(\n-    eith: either<T, U>) -> result<U, T> {\n+pure fn to_result<T: copy, U: copy>(eith: &either<T, U>) -> result<U, T> {\n     /*!\n      * Converts either::t to a result::t\n      *\n      * Converts an `either` type to a `result` type, making the \"right\" choice\n      * an ok result, and the \"left\" choice a fail\n      */\n \n-    match eith {\n+    match *eith {\n       right(r) => result::ok(r),\n       left(l) => result::err(l)\n     }\n }\n \n-pure fn is_left<T, U>(eith: either<T, U>) -> bool {\n+pure fn is_left<T, U>(eith: &either<T, U>) -> bool {\n     //! Checks whether the given value is a left\n \n-    match eith { left(_) => true, _ => false }\n+    match *eith { left(_) => true, _ => false }\n }\n \n-pure fn is_right<T, U>(eith: either<T, U>) -> bool {\n+pure fn is_right<T, U>(eith: &either<T, U>) -> bool {\n     //! Checks whether the given value is a right\n \n-    match eith { right(_) => true, _ => false }\n+    match *eith { right(_) => true, _ => false }\n }\n \n #[test]\n fn test_either_left() {\n     let val = left(10);\n-    fn f_left(&&x: int) -> bool { x == 10 }\n-    fn f_right(&&_x: uint) -> bool { false }\n-    assert (either(f_left, f_right, val));\n+    fn f_left(x: &int) -> bool { *x == 10 }\n+    fn f_right(_x: &uint) -> bool { false }\n+    assert (either(f_left, f_right, &val));\n }\n \n #[test]\n fn test_either_right() {\n     let val = right(10u);\n-    fn f_left(&&_x: int) -> bool { false }\n-    fn f_right(&&x: uint) -> bool { x == 10u }\n-    assert (either(f_left, f_right, val));\n+    fn f_left(_x: &int) -> bool { false }\n+    fn f_right(x: &uint) -> bool { *x == 10u }\n+    assert (either(f_left, f_right, &val));\n }\n \n #[test]"}, {"sha": "336b53daa96675d9014cf4deeb82781acecdf3c7", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -110,8 +110,8 @@ fn recv_timeout<T: copy send>(iotask: iotask,\n                            left_val});\n             none\n         }, |right_val| {\n-            some(right_val)\n-        }, comm::select2(timeout_po, wait_po)\n+            some(*right_val)\n+        }, &comm::select2(timeout_po, wait_po)\n     )\n }\n "}, {"sha": "3b63e6437c949084e334d905fbc15377a6b5dfa3", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -297,7 +297,7 @@ fn get_options(ccx: @crate_ctxt, m: match_, col: uint) -> ~[opt] {\n             }\n         }\n     }\n-    return vec::from_mut(dvec::unwrap(found));\n+    return vec::from_mut(dvec::unwrap(move found));\n }\n \n fn extract_variant_args(bcx: block, pat_id: ast::node_id,"}, {"sha": "6456f5db39b5beece84d64b1045daf2830e35251", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -17,7 +17,7 @@ fn collect_dvec(num: uint) -> ~[mut uint] {\n     for uint::range(0u, num) |i| {\n         result.push(i);\n     }\n-    return dvec::unwrap(result);\n+    return dvec::unwrap(move result);\n }\n \n fn main(args: ~[~str]) {"}, {"sha": "e376085772b42bbf379a7b7d69273bb9d9e5db8c", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -1,11 +1,11 @@\n // error-pattern:quux\n-fn test00_start(ch: chan_t<int>, message: int) { send(ch, copy message); }\n+fn test00_start(ch: chan_t<int>, message: int) { send(ch, message); }\n \n type task_id = int;\n type port_id = int;\n \n enum chan_t<T: send> = {task: task_id, port: port_id};\n \n-fn send<T: send>(ch: chan_t<T>, -data: T) { fail; }\n+fn send<T: send>(ch: chan_t<T>, data: T) { fail; }\n \n fn main() { fail ~\"quux\"; }"}, {"sha": "55a8331b8b1fec4945fde36b0dd1052683aa25b3", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91612dbb7e37b53223a57557a442e29a84f0f6bf/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=91612dbb7e37b53223a57557a442e29a84f0f6bf", "patch": "@@ -23,5 +23,5 @@ fn main() {\n         assert e == exp[i];\n     }\n \n-    assert dvec::unwrap(d) == exp;\n+    assert dvec::unwrap(move d) == exp;\n }\n\\ No newline at end of file"}]}