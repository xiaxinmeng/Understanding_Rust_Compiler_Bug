{"sha": "f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTk3NjM1NDNlNTgyOGZlOWVlZTdmNWU3OGM4ODE5M2Y1YjhiYTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-14T13:21:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "ast: make `= <expr>;` optional in free statics/consts.", "tree": {"sha": "4d61cb1d454b4951c452ce9008832147992e57d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d61cb1d454b4951c452ce9008832147992e57d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "html_url": "https://github.com/rust-lang/rust/commit/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95dc9b9a73353a786e3c934c5074fb793ff7a735", "url": "https://api.github.com/repos/rust-lang/rust/commits/95dc9b9a73353a786e3c934c5074fb793ff7a735", "html_url": "https://github.com/rust-lang/rust/commit/95dc9b9a73353a786e3c934c5074fb793ff7a735"}], "stats": {"total": 382, "additions": 250, "deletions": 132}, "files": [{"sha": "f19481d890d52042d2baf64eaa5145c5e3c1c9fa", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -269,26 +269,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_use_tree(use_tree, &prefix, id, vis, ident, attrs)\n             }\n             ItemKind::Static(ref t, m, ref e) => {\n-                let ty = self.lower_ty(\n-                    t,\n-                    if self.sess.features_untracked().impl_trait_in_bindings {\n-                        ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc)\n-                    } else {\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-                    },\n-                );\n-                hir::ItemKind::Static(ty, m, self.lower_const_body(span, Some(e)))\n+                let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n+                hir::ItemKind::Static(ty, m, body_id)\n             }\n             ItemKind::Const(ref t, ref e) => {\n-                let ty = self.lower_ty(\n-                    t,\n-                    if self.sess.features_untracked().impl_trait_in_bindings {\n-                        ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc)\n-                    } else {\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n-                    },\n-                );\n-                hir::ItemKind::Const(ty, self.lower_const_body(span, Some(e)))\n+                let (ty, body_id) = self.lower_const_item(t, span, e.as_deref());\n+                hir::ItemKind::Const(ty, body_id)\n             }\n             ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n@@ -457,6 +443,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         //     not cause an assertion failure inside the `lower_defaultness` function.\n     }\n \n+    fn lower_const_item(\n+        &mut self,\n+        ty: &Ty,\n+        span: Span,\n+        body: Option<&Expr>,\n+    ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n+        let itctx = if self.sess.features_untracked().impl_trait_in_bindings {\n+            ImplTraitContext::OpaqueTy(None, hir::OpaqueTyOrigin::Misc)\n+        } else {\n+            ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n+        };\n+        let ty = self.lower_ty(ty, itctx);\n+        (ty, self.lower_const_body(span, body))\n+    }\n+\n     fn lower_use_tree(\n         &mut self,\n         tree: &UseTree,"}, {"sha": "fdbf866cd9a95269f2f17480c56e65f4d5e1f8dd", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -948,6 +948,14 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().span_err(item.span, \"unions cannot have zero fields\");\n                 }\n             }\n+            ItemKind::Const(.., None) => {\n+                let msg = \"free constant item without body\";\n+                self.error_item_without_body(item.span, \"constant\", msg, \" = <expr>;\");\n+            }\n+            ItemKind::Static(.., None) => {\n+                let msg = \"free static item without body\";\n+                self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n+            }\n             _ => {}\n         }\n "}, {"sha": "356fdd1e71c66d7cdf861b3d0d451eda556d8fe1", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -1124,9 +1124,10 @@ impl<'a> State<'a> {\n                 self.print_type(ty);\n                 self.s.space();\n                 self.end(); // end the head-ibox\n-\n-                self.word_space(\"=\");\n-                self.print_expr(expr);\n+                if let Some(expr) = expr {\n+                    self.word_space(\"=\");\n+                    self.print_expr(expr);\n+                }\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n@@ -1137,9 +1138,10 @@ impl<'a> State<'a> {\n                 self.print_type(ty);\n                 self.s.space();\n                 self.end(); // end the head-ibox\n-\n-                self.word_space(\"=\");\n-                self.print_expr(expr);\n+                if let Some(expr) = expr {\n+                    self.word_space(\"=\");\n+                    self.print_expr(expr);\n+                }\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }"}, {"sha": "b6837c0703aed63e6697307e9b58aedfd2621221", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 76, "deletions": 72, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -186,81 +186,85 @@ pub fn expand_test_or_bench(\n         ast::ItemKind::Const(\n             cx.ty(sp, ast::TyKind::Path(None, test_path(\"TestDescAndFn\"))),\n             // test::TestDescAndFn {\n-            cx.expr_struct(\n-                sp,\n-                test_path(\"TestDescAndFn\"),\n-                vec![\n-                    // desc: test::TestDesc {\n-                    field(\n-                        \"desc\",\n-                        cx.expr_struct(\n-                            sp,\n-                            test_path(\"TestDesc\"),\n-                            vec![\n-                                // name: \"path::to::test\"\n-                                field(\n-                                    \"name\",\n-                                    cx.expr_call(\n-                                        sp,\n-                                        cx.expr_path(test_path(\"StaticTestName\")),\n-                                        vec![cx.expr_str(\n-                                            sp,\n-                                            Symbol::intern(&item_path(\n-                                                // skip the name of the root module\n-                                                &cx.current_expansion.module.mod_path[1..],\n-                                                &item.ident,\n-                                            )),\n-                                        )],\n-                                    ),\n-                                ),\n-                                // ignore: true | false\n-                                field(\"ignore\", cx.expr_bool(sp, should_ignore(&item))),\n-                                // allow_fail: true | false\n-                                field(\"allow_fail\", cx.expr_bool(sp, should_fail(&item))),\n-                                // should_panic: ...\n-                                field(\n-                                    \"should_panic\",\n-                                    match should_panic(cx, &item) {\n-                                        // test::ShouldPanic::No\n-                                        ShouldPanic::No => cx.expr_path(should_panic_path(\"No\")),\n-                                        // test::ShouldPanic::Yes\n-                                        ShouldPanic::Yes(None) => {\n-                                            cx.expr_path(should_panic_path(\"Yes\"))\n-                                        }\n-                                        // test::ShouldPanic::YesWithMessage(\"...\")\n-                                        ShouldPanic::Yes(Some(sym)) => cx.expr_call(\n+            Some(\n+                cx.expr_struct(\n+                    sp,\n+                    test_path(\"TestDescAndFn\"),\n+                    vec![\n+                        // desc: test::TestDesc {\n+                        field(\n+                            \"desc\",\n+                            cx.expr_struct(\n+                                sp,\n+                                test_path(\"TestDesc\"),\n+                                vec![\n+                                    // name: \"path::to::test\"\n+                                    field(\n+                                        \"name\",\n+                                        cx.expr_call(\n                                             sp,\n-                                            cx.expr_path(should_panic_path(\"YesWithMessage\")),\n-                                            vec![cx.expr_str(sp, sym)],\n+                                            cx.expr_path(test_path(\"StaticTestName\")),\n+                                            vec![cx.expr_str(\n+                                                sp,\n+                                                Symbol::intern(&item_path(\n+                                                    // skip the name of the root module\n+                                                    &cx.current_expansion.module.mod_path[1..],\n+                                                    &item.ident,\n+                                                )),\n+                                            )],\n                                         ),\n-                                    },\n-                                ),\n-                                // test_type: ...\n-                                field(\n-                                    \"test_type\",\n-                                    match test_type(cx) {\n-                                        // test::TestType::UnitTest\n-                                        TestType::UnitTest => {\n-                                            cx.expr_path(test_type_path(\"UnitTest\"))\n-                                        }\n-                                        // test::TestType::IntegrationTest\n-                                        TestType::IntegrationTest => {\n-                                            cx.expr_path(test_type_path(\"IntegrationTest\"))\n-                                        }\n-                                        // test::TestPath::Unknown\n-                                        TestType::Unknown => {\n-                                            cx.expr_path(test_type_path(\"Unknown\"))\n-                                        }\n-                                    },\n-                                ),\n-                                // },\n-                            ],\n+                                    ),\n+                                    // ignore: true | false\n+                                    field(\"ignore\", cx.expr_bool(sp, should_ignore(&item))),\n+                                    // allow_fail: true | false\n+                                    field(\"allow_fail\", cx.expr_bool(sp, should_fail(&item))),\n+                                    // should_panic: ...\n+                                    field(\n+                                        \"should_panic\",\n+                                        match should_panic(cx, &item) {\n+                                            // test::ShouldPanic::No\n+                                            ShouldPanic::No => {\n+                                                cx.expr_path(should_panic_path(\"No\"))\n+                                            }\n+                                            // test::ShouldPanic::Yes\n+                                            ShouldPanic::Yes(None) => {\n+                                                cx.expr_path(should_panic_path(\"Yes\"))\n+                                            }\n+                                            // test::ShouldPanic::YesWithMessage(\"...\")\n+                                            ShouldPanic::Yes(Some(sym)) => cx.expr_call(\n+                                                sp,\n+                                                cx.expr_path(should_panic_path(\"YesWithMessage\")),\n+                                                vec![cx.expr_str(sp, sym)],\n+                                            ),\n+                                        },\n+                                    ),\n+                                    // test_type: ...\n+                                    field(\n+                                        \"test_type\",\n+                                        match test_type(cx) {\n+                                            // test::TestType::UnitTest\n+                                            TestType::UnitTest => {\n+                                                cx.expr_path(test_type_path(\"UnitTest\"))\n+                                            }\n+                                            // test::TestType::IntegrationTest\n+                                            TestType::IntegrationTest => {\n+                                                cx.expr_path(test_type_path(\"IntegrationTest\"))\n+                                            }\n+                                            // test::TestPath::Unknown\n+                                            TestType::Unknown => {\n+                                                cx.expr_path(test_type_path(\"Unknown\"))\n+                                            }\n+                                        },\n+                                    ),\n+                                    // },\n+                                ],\n+                            ),\n                         ),\n-                    ),\n-                    // testfn: test::StaticTestFn(...) | test::StaticBenchFn(...)\n-                    field(\"testfn\", test_fn), // }\n-                ],\n-            ), // }\n+                        // testfn: test::StaticTestFn(...) | test::StaticBenchFn(...)\n+                        field(\"testfn\", test_fn), // }\n+                    ],\n+                ), // }\n+            ),\n         ),\n     );\n     test_const = test_const.map(|mut tc| {"}, {"sha": "0882151063098da5afaaf14fd03470bad8ff7ad6", "filename": "src/librustc_expand/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_expand%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_expand%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbuild.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -634,7 +634,7 @@ impl<'a> ExtCtxt<'a> {\n         mutbl: ast::Mutability,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Static(ty, mutbl, expr))\n+        self.item(span, name, Vec::new(), ast::ItemKind::Static(ty, mutbl, Some(expr)))\n     }\n \n     pub fn item_const(\n@@ -644,7 +644,7 @@ impl<'a> ExtCtxt<'a> {\n         ty: P<ast::Ty>,\n         expr: P<ast::Expr>,\n     ) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Const(ty, expr))\n+        self.item(span, name, Vec::new(), ast::ItemKind::Const(ty, Some(expr)))\n     }\n \n     pub fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute {"}, {"sha": "7870b9da4cb701a5da01f93c20dda500c0fa84ce", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -603,7 +603,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         use ast::ItemKind::*;\n \n-        if let Const(.., ref expr) | Static(.., ref expr) = item.kind {\n+        if let Const(.., Some(expr)) | Static(.., Some(expr)) = &item.kind {\n             self.check_unused_parens_expr(cx, expr, \"assigned value\", false, None, None);\n         }\n     }"}, {"sha": "893cbf5adfa62a69a42bfcefd54f42e693ac5719", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -966,7 +966,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty = $expr` with\n+    /// Parse `[\"const\" | (\"static\" \"mut\"?)] $ident \":\" $ty (= $expr)?` with\n     /// `[\"const\" | (\"static\" \"mut\"?)]` already parsed and stored in `m`.\n     ///\n     /// When `m` is `\"const\"`, `$ident` may also be `\"_\"`.\n@@ -975,25 +975,22 @@ impl<'a> Parser<'a> {\n \n         // Parse the type of a `const` or `static mut?` item.\n         // That is, the `\":\" $ty` fragment.\n-        let ty = if self.token == token::Eq {\n-            self.recover_missing_const_type(id, m)\n-        } else {\n-            // Not `=` so expect `\":\"\" $ty` as usual.\n-            self.expect(&token::Colon)?;\n+        let ty = if self.eat(&token::Colon) {\n             self.parse_ty()?\n+        } else {\n+            self.recover_missing_const_type(id, m)\n         };\n \n-        self.expect(&token::Eq)?;\n-        let e = self.parse_expr()?;\n+        let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n         self.expect_semi()?;\n         let item = match m {\n-            Some(m) => ItemKind::Static(ty, m, e),\n-            None => ItemKind::Const(ty, e),\n+            Some(m) => ItemKind::Static(ty, m, expr),\n+            None => ItemKind::Const(ty, expr),\n         };\n         Ok((id, item))\n     }\n \n-    /// We were supposed to parse `:` but instead, we're already at `=`.\n+    /// We were supposed to parse `:` but the `:` was missing.\n     /// This means that the type is missing.\n     fn recover_missing_const_type(&mut self, id: Ident, m: Option<Mutability>) -> P<Ty> {\n         // Construct the error and stash it away with the hope"}, {"sha": "36667e1d6ff3b61640fff84f542cbde8903f9465", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -881,9 +881,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 debug!(\"resolve_item ItemKind::Const\");\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n-                    this.with_constant_rib(|this| {\n-                        this.visit_expr(expr);\n-                    });\n+                    if let Some(expr) = expr {\n+                        this.with_constant_rib(|this| this.visit_expr(expr));\n+                    }\n                 });\n             }\n "}, {"sha": "fc5496eb1822f143164b472bd91aec61b5d52b26", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -400,7 +400,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         &mut self,\n         item: &'l ast::Item,\n         typ: &'l ast::Ty,\n-        expr: &'l ast::Expr,\n+        expr: Option<&'l ast::Expr>,\n     ) {\n         let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n         self.nest_tables(item.id, |v| {\n@@ -409,7 +409,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 v.dumper.dump_def(&access_from!(v.save_ctxt, item, hir_id), var_data);\n             }\n             v.visit_ty(&typ);\n-            v.visit_expr(expr);\n+            walk_list!(v, visit_expr, expr);\n         });\n     }\n \n@@ -1293,8 +1293,8 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n             Fn(ref sig, ref ty_params, ref body) => {\n                 self.process_fn(item, &sig.decl, &sig.header, ty_params, body.as_deref())\n             }\n-            Static(ref typ, _, ref expr) => self.process_static_or_const_item(item, typ, expr),\n-            Const(ref typ, ref expr) => self.process_static_or_const_item(item, &typ, &expr),\n+            Static(ref typ, _, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n+            Const(ref typ, ref e) => self.process_static_or_const_item(item, typ, e.as_deref()),\n             Struct(ref def, ref ty_params) | Union(ref def, ref ty_params) => {\n                 self.process_struct(item, def, ty_params)\n             }"}, {"sha": "d678a8b067e397fbff5f02b724dde748f26be09a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -334,10 +334,13 @@ impl Sig for ast::Item {\n \n                 let ty = ty.make(offset + text.len(), id, scx)?;\n                 text.push_str(&ty.text);\n-                text.push_str(\" = \");\n \n-                let expr = pprust::expr_to_string(expr).replace('\\n', \" \");\n-                text.push_str(&expr);\n+                if let Some(expr) = expr {\n+                    text.push_str(\" = \");\n+                    let expr = pprust::expr_to_string(expr).replace('\\n', \" \");\n+                    text.push_str(&expr);\n+                }\n+\n                 text.push(';');\n \n                 Ok(extend_sig(ty, text, defs, vec![]))\n@@ -355,10 +358,13 @@ impl Sig for ast::Item {\n \n                 let ty = ty.make(offset + text.len(), id, scx)?;\n                 text.push_str(&ty.text);\n-                text.push_str(\" = \");\n \n-                let expr = pprust::expr_to_string(expr).replace('\\n', \" \");\n-                text.push_str(&expr);\n+                if let Some(expr) = expr {\n+                    text.push_str(\" = \");\n+                    let expr = pprust::expr_to_string(expr).replace('\\n', \" \");\n+                    text.push_str(&expr);\n+                }\n+\n                 text.push(';');\n \n                 Ok(extend_sig(ty, text, defs, vec![]))"}, {"sha": "61ae14cae028fc78c9483d5611b5d6fbf73dc0a4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -2496,11 +2496,11 @@ pub enum ItemKind {\n     /// A static item (`static`).\n     ///\n     /// E.g., `static FOO: i32 = 42;` or `static FOO: &'static str = \"bar\";`.\n-    Static(P<Ty>, Mutability, P<Expr>),\n+    Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// A constant item (`const`).\n     ///\n     /// E.g., `const FOO: i32 = 42;`.\n-    Const(P<Ty>, P<Expr>),\n+    Const(P<Ty>, Option<P<Expr>>),\n     /// A function declaration (`fn`).\n     ///\n     /// E.g., `fn foo(bar: usize) -> usize { .. }`."}, {"sha": "cd7a3becca765ea738d3553d353e5b3b59e57bb2", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -890,13 +890,9 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     match kind {\n         ItemKind::ExternCrate(_orig_name) => {}\n         ItemKind::Use(use_tree) => vis.visit_use_tree(use_tree),\n-        ItemKind::Static(ty, _mut, expr) => {\n+        ItemKind::Static(ty, _, expr) | ItemKind::Const(ty, expr) => {\n             vis.visit_ty(ty);\n-            vis.visit_expr(expr);\n-        }\n-        ItemKind::Const(ty, expr) => {\n-            vis.visit_ty(ty);\n-            vis.visit_expr(expr);\n+            visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n         ItemKind::Fn(sig, generics, body) => {\n             visit_fn_sig(sig, vis);"}, {"sha": "4beb94e9f0c19bfb1644ab025fc9153279eb1d8e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -300,7 +300,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::Use(ref use_tree) => visitor.visit_use_tree(use_tree, item.id, false),\n         ItemKind::Static(ref typ, _, ref expr) | ItemKind::Const(ref typ, ref expr) => {\n             visitor.visit_ty(typ);\n-            visitor.visit_expr(expr);\n+            walk_list!(visitor, visit_expr, expr);\n         }\n         ItemKind::Fn(ref sig, ref generics, ref body) => {\n             visitor.visit_generics(generics);"}, {"sha": "613b3c9856171a28f10cfdd856d7aaf8f15ba693", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -0,0 +1,7 @@\n+// Semantically, a free `const` item cannot omit its body.\n+\n+fn main() {}\n+\n+const A: u8; //~ ERROR free constant item without body\n+const B; //~ ERROR free constant item without body\n+//~^ ERROR missing type for `const` item"}, {"sha": "4e97229fa1a411b331643243a20c699297729de0", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -0,0 +1,24 @@\n+error: free constant item without body\n+  --> $DIR/item-free-const-no-body-semantic-fail.rs:5:1\n+   |\n+LL | const A: u8;\n+   | ^^^^^^^^^^^-\n+   |            |\n+   |            help: provide a definition for the constant: `= <expr>;`\n+\n+error: free constant item without body\n+  --> $DIR/item-free-const-no-body-semantic-fail.rs:6:1\n+   |\n+LL | const B;\n+   | ^^^^^^^-\n+   |        |\n+   |        help: provide a definition for the constant: `= <expr>;`\n+\n+error: missing type for `const` item\n+  --> $DIR/item-free-const-no-body-semantic-fail.rs:6:7\n+   |\n+LL | const B;\n+   |       ^ help: provide a type for the item: `B: [type error]`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "acfdd3c363f2542eeb81cd4bdeef36db8ecda516", "filename": "src/test/ui/parser/item-free-const-no-body-syntactic-pass.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-syntactic-pass.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -0,0 +1,8 @@\n+// Syntactically, a free `const` item can omit its body.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+const X: u8;"}, {"sha": "780479e3d26ac6eb4a76cb6e45155ce05fadf066", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -0,0 +1,11 @@\n+// Semantically, a free `static` item cannot omit its body.\n+\n+fn main() {}\n+\n+static A: u8; //~ ERROR free static item without body\n+static B; //~ ERROR free static item without body\n+//~^ ERROR missing type for `static` item\n+\n+static mut C: u8; //~ ERROR free static item without body\n+static mut D; //~ ERROR free static item without body\n+//~^ ERROR missing type for `static mut` item"}, {"sha": "60b7bb34c698b3a33ac5bfe1b12319a98219e63e", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -0,0 +1,46 @@\n+error: free static item without body\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:5:1\n+   |\n+LL | static A: u8;\n+   | ^^^^^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the static: `= <expr>;`\n+\n+error: free static item without body\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:6:1\n+   |\n+LL | static B;\n+   | ^^^^^^^^-\n+   |         |\n+   |         help: provide a definition for the static: `= <expr>;`\n+\n+error: free static item without body\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:9:1\n+   |\n+LL | static mut C: u8;\n+   | ^^^^^^^^^^^^^^^^-\n+   |                 |\n+   |                 help: provide a definition for the static: `= <expr>;`\n+\n+error: free static item without body\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:1\n+   |\n+LL | static mut D;\n+   | ^^^^^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the static: `= <expr>;`\n+\n+error: missing type for `static` item\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:6:8\n+   |\n+LL | static B;\n+   |        ^ help: provide a type for the item: `B: [type error]`\n+\n+error: missing type for `static mut` item\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:12\n+   |\n+LL | static mut D;\n+   |            ^ help: provide a type for the item: `D: [type error]`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "db0039204d870f82089ea989c9be93abe775469e", "filename": "src/test/ui/parser/item-free-static-no-body-syntactic-pass.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e9763543e5828fe9eee7f5e78c88193f5b8ba5/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-syntactic-pass.rs?ref=f3e9763543e5828fe9eee7f5e78c88193f5b8ba5", "patch": "@@ -0,0 +1,8 @@\n+// Syntactically, a free `const` item can omit its body.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+static X: u8;"}]}