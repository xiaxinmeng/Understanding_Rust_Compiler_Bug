{"sha": "ad971bbed773cad7cb446b49b07c64504e9a79fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTcxYmJlZDc3M2NhZDdjYjQ0NmI0OWIwN2M2NDUwNGU5YTc5ZmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-18T11:27:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-19T11:58:32Z"}, "message": "Rewrite build_sysroot.sh in rust", "tree": {"sha": "8b400d2a0f493ef358613a14457f16553a21d96c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b400d2a0f493ef358613a14457f16553a21d96c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad971bbed773cad7cb446b49b07c64504e9a79fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad971bbed773cad7cb446b49b07c64504e9a79fb", "html_url": "https://github.com/rust-lang/rust/commit/ad971bbed773cad7cb446b49b07c64504e9a79fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad971bbed773cad7cb446b49b07c64504e9a79fb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71b12535e84a7c242cf217af49a0366b06c8691", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71b12535e84a7c242cf217af49a0366b06c8691", "html_url": "https://github.com/rust-lang/rust/commit/d71b12535e84a7c242cf217af49a0366b06c8691"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "0354304e55bf77477039d6737749d845128ac80c", "filename": "build_sysroot/build_sysroot.sh", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d71b12535e84a7c242cf217af49a0366b06c8691/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/d71b12535e84a7c242cf217af49a0366b06c8691/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=d71b12535e84a7c242cf217af49a0366b06c8691", "patch": "@@ -1,39 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Requires the CHANNEL env var to be set to `debug` or `release.`\n-\n-set -e\n-\n-source ./config.sh\n-\n-dir=$(pwd)\n-\n-# Use rustc with cg_clif as hotpluggable backend instead of the custom cg_clif driver so that\n-# build scripts are still compiled using cg_llvm.\n-export RUSTC=$dir\"/bin/cg_clif_build_sysroot\"\n-export RUSTFLAGS=$RUSTFLAGS\" --clif\"\n-\n-cd \"$(dirname \"$0\")\"\n-\n-# Cleanup for previous run\n-#     v Clean target dir except for build scripts and incremental cache\n-rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} 2>/dev/null || true\n-\n-# We expect the target dir in the default location. Guard against the user changing it.\n-export CARGO_TARGET_DIR=target\n-\n-# Build libs\n-export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n-export __CARGO_DEFAULT_LIB_METADATA=\"cg_clif\"\n-if [[ \"$1\" != \"--debug\" ]]; then\n-    sysroot_channel='release'\n-    # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS -Zmir-opt-level=3\" cargo build --target \"$TARGET_TRIPLE\" --release\n-else\n-    sysroot_channel='debug'\n-    cargo build --target \"$TARGET_TRIPLE\"\n-fi\n-\n-# Copy files to sysroot\n-ln \"target/$TARGET_TRIPLE/$sysroot_channel/deps/\"* \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n-rm \"$dir/lib/rustlib/$TARGET_TRIPLE/lib/\"*.{rmeta,d}"}, {"sha": "9988b35b36350f382bf04c486754399cc41ac056", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ad971bbed773cad7cb446b49b07c64504e9a79fb/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad971bbed773cad7cb446b49b07c64504e9a79fb/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=ad971bbed773cad7cb446b49b07c64504e9a79fb", "patch": "@@ -1,6 +1,6 @@\n+use crate::utils::spawn_and_wait;\n use crate::utils::try_hard_link;\n use crate::SysrootKind;\n-use std::env;\n use std::fs;\n use std::path::Path;\n use std::process::{self, Command};\n@@ -100,24 +100,14 @@ pub(crate) fn build_sysroot(\n             }\n         }\n         SysrootKind::Clif => {\n-            let cwd = env::current_dir().unwrap();\n-\n-            let mut cmd = Command::new(cwd.join(\"build_sysroot\").join(\"build_sysroot.sh\"));\n-            cmd.current_dir(target_dir).env(\"TARGET_TRIPLE\", target_triple);\n-            eprintln!(\"[BUILD] sysroot\");\n-            if !cmd.spawn().unwrap().wait().unwrap().success() {\n-                process::exit(1);\n-            }\n+            build_clif_sysroot_for_triple(channel, target_dir, target_triple);\n \n             if host_triple != target_triple {\n-                let mut cmd = Command::new(cwd.join(\"build_sysroot\").join(\"build_sysroot.sh\"));\n-                cmd.current_dir(target_dir).env(\"TARGET_TRIPLE\", host_triple);\n-                eprintln!(\"[BUILD] sysroot\");\n-                if !cmd.spawn().unwrap().wait().unwrap().success() {\n-                    process::exit(1);\n-                }\n+                build_clif_sysroot_for_triple(channel, target_dir, host_triple);\n             }\n \n+            // Copy std for the host to the lib dir. This is necessary for the jit mode to find\n+            // libstd.\n             for file in fs::read_dir(host_rustlib_lib).unwrap() {\n                 let file = file.unwrap().path();\n                 if file.file_name().unwrap().to_str().unwrap().contains(\"std-\") {\n@@ -127,3 +117,49 @@ pub(crate) fn build_sysroot(\n         }\n     }\n }\n+\n+fn build_clif_sysroot_for_triple(channel: &str, target_dir: &Path, triple: &str) {\n+    let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n+\n+    // FIXME add option to skip this\n+    // Cleanup the target dir with the exception of build scripts and the incremental cache\n+    for dir in [\"build\", \"deps\", \"examples\", \"native\"] {\n+        if build_dir.join(dir).exists() {\n+            fs::remove_dir_all(build_dir.join(dir)).unwrap();\n+        }\n+    }\n+\n+    // Build sysroot\n+    let mut build_cmd = Command::new(\"cargo\");\n+    build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n+    let mut rustflags = \"--clif -Zforce-unstable-if-unmarked\".to_string();\n+    if channel == \"release\" {\n+        build_cmd.arg(\"--release\");\n+        rustflags.push_str(\" -Zmir-opt-level=3\");\n+    }\n+    build_cmd.env(\"RUSTFLAGS\", rustflags);\n+    build_cmd\n+        .env(\"RUSTC\", target_dir.join(\"bin\").join(\"cg_clif_build_sysroot\").canonicalize().unwrap());\n+    // FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n+    build_cmd.env(\"CARGO_INCREMENTAL\", \"0\").env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n+    spawn_and_wait(build_cmd);\n+\n+    // Copy all relevant files to the sysroot\n+    for entry in\n+        fs::read_dir(Path::new(\"build_sysroot/target\").join(triple).join(channel).join(\"deps\"))\n+            .unwrap()\n+    {\n+        let entry = entry.unwrap();\n+        if let Some(ext) = entry.path().extension() {\n+            if ext == \"rmeta\" || ext == \"d\" || ext == \"dSYM\" {\n+                continue;\n+            }\n+        } else {\n+            continue;\n+        };\n+        try_hard_link(\n+            entry.path(),\n+            target_dir.join(\"lib\").join(\"rustlib\").join(triple).join(\"lib\").join(entry.file_name()),\n+        );\n+    }\n+}"}, {"sha": "27ab44f587066670ceaf59b50aab6664b4a2c389", "filename": "y.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad971bbed773cad7cb446b49b07c64504e9a79fb/y.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad971bbed773cad7cb446b49b07c64504e9a79fb/y.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/y.rs?ref=ad971bbed773cad7cb446b49b07c64504e9a79fb", "patch": "@@ -66,6 +66,8 @@ enum SysrootKind {\n fn main() {\n     env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n     env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n+    // The target dir is expected in the default location. Guard against the user changing it.\n+    env::set_var(\"CARGO_TARGET_DIR\", \"target\");\n \n     let mut args = env::args().skip(1);\n     let command = match args.next().as_deref() {"}]}