{"sha": "dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "node_id": "C_kwDOAAsO6NoAKGRkNzJiMWEwZGYxMjc3ZWI3YWJiYTliOWFhYjQxNDU2ZWViODg5NGE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-09T01:14:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T18:06:14Z"}, "message": "Suggest `ref` for some patterns as a fallback", "tree": {"sha": "67e40480b3dcb4a2c0bb632d0f9a8c6d15698fa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e40480b3dcb4a2c0bb632d0f9a8c6d15698fa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "html_url": "https://github.com/rust-lang/rust/commit/dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7c257fd8421392cbe4b1502985d9829cbed37e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7c257fd8421392cbe4b1502985d9829cbed37e", "html_url": "https://github.com/rust-lang/rust/commit/4f7c257fd8421392cbe4b1502985d9829cbed37e"}], "stats": {"total": 539, "additions": 476, "deletions": 63}, "files": [{"sha": "862ae0916046607895b01f4a5cd5f52be55094b0", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn add_move_error_suggestions(&self, err: &mut Diagnostic, binds_to: &[Local]) {\n-        let mut suggestions: Vec<(Span, &str, String)> = Vec::new();\n+        let mut suggestions: Vec<(Span, String, String)> = Vec::new();\n         for local in binds_to {\n             let bind_to = &self.body.local_decls[*local];\n             if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n@@ -469,7 +469,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             {\n                 let Ok(pat_snippet) =\n                     self.infcx.tcx.sess.source_map().span_to_snippet(pat_span) else { continue; };\n-                let Some(stripped) = pat_snippet.strip_prefix('&') else { continue; };\n+                let Some(stripped) = pat_snippet.strip_prefix('&') else {\n+                    suggestions.push((\n+                        bind_to.source_info.span.shrink_to_lo(),\n+                        \"consider borrowing the pattern binding\".to_string(),\n+                        \"ref \".to_string(),\n+                    ));\n+                    continue;\n+                };\n                 let inner_pat_snippet = stripped.trim_start();\n                 let (pat_span, suggestion, to_remove) = if inner_pat_snippet.starts_with(\"mut\")\n                     && inner_pat_snippet[\"mut\".len()..].starts_with(rustc_lexer::is_whitespace)\n@@ -488,18 +495,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     );\n                     (pat_span, String::new(), \"borrow\")\n                 };\n-                suggestions.push((pat_span, to_remove, suggestion.to_owned()));\n+                suggestions.push((\n+                    pat_span,\n+                    format!(\"consider removing the {to_remove}\"),\n+                    suggestion.to_string(),\n+                ));\n             }\n         }\n         suggestions.sort_unstable_by_key(|&(span, _, _)| span);\n         suggestions.dedup_by_key(|&mut (span, _, _)| span);\n-        for (span, to_remove, suggestion) in suggestions {\n-            err.span_suggestion_verbose(\n-                span,\n-                &format!(\"consider removing the {to_remove}\"),\n-                suggestion,\n-                Applicability::MachineApplicable,\n-            );\n+        for (span, msg, suggestion) in suggestions {\n+            err.span_suggestion_verbose(span, &msg, suggestion, Applicability::MachineApplicable);\n         }\n     }\n "}, {"sha": "74b3ee2ebdf42f0a955ffa9021e523bbaed24b8c", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![allow(unused)]\n+enum Foo {\n+    Foo1(Box<u32>, Box<u32>),\n+    Foo2(Box<u32>),\n+    Foo3,\n+}\n+\n+\n+\n+fn blah() {\n+    let f = &Foo::Foo1(Box::new(1), Box::new(2));\n+    match &*f { //~ ERROR cannot move out of\n+        Foo::Foo1(num1,\n+                  num2) => (),\n+        Foo::Foo2(num) => (),\n+        Foo::Foo3 => ()\n+    }\n+}\n+\n+struct S {\n+    f: String,\n+    g: String\n+}\n+impl Drop for S {\n+    fn drop(&mut self) { println!(\"{}\", self.f); }\n+}\n+\n+fn move_in_match() {\n+    match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+        S {\n+            f: ref _s,\n+            g: ref _t\n+        } => {}\n+    }\n+}\n+\n+// from issue-8064\n+struct A {\n+    a: Box<isize>,\n+}\n+\n+fn free<T>(_: T) {}\n+\n+fn blah2() {\n+    let a = &A { a: Box::new(1) };\n+    match &a.a { //~ ERROR cannot move out of\n+        n => {\n+            free(n)\n+        }\n+    }\n+    free(a)\n+}\n+\n+fn main() {}"}, {"sha": "f336ac4f994fa6990d648c9a9fa5a8303a020102", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused)]\n enum Foo {\n     Foo1(Box<u32>, Box<u32>),\n     Foo2(Box<u32>),"}, {"sha": "9b5cf712b6901ee14dea3f69a631f4fefeecb2a0", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `f` as enum variant `Foo1` which is behind a shared reference\n-  --> $DIR/borrowck-move-error-with-note.rs:11:11\n+  --> $DIR/borrowck-move-error-with-note.rs:13:11\n    |\n LL |     match *f {\n    |           ^^\n@@ -17,7 +17,7 @@ LL |     match &*f {\n    |           +\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:28:11\n+  --> $DIR/borrowck-move-error-with-note.rs:30:11\n    |\n LL |     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -28,9 +28,17 @@ LL |             g: _t\n    |                -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |             f: ref _s,\n+   |                +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |             g: ref _t\n+   |                +++\n \n error[E0507]: cannot move out of `a.a` which is behind a shared reference\n-  --> $DIR/borrowck-move-error-with-note.rs:46:11\n+  --> $DIR/borrowck-move-error-with-note.rs:48:11\n    |\n LL |     match a.a {\n    |           ^^^"}, {"sha": "c463c6559386c45265021279337c4bc644e7104f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![allow(unused)]\n+struct S {f:String}\n+impl Drop for S {\n+    fn drop(&mut self) { println!(\"{}\", self.f); }\n+}\n+\n+fn move_in_match() {\n+    match (S {f:\"foo\".to_string()}) {\n+        //~^ ERROR [E0509]\n+        S {f:ref _s} => {}\n+    }\n+}\n+\n+fn move_in_let() {\n+    let S {f:ref _s} = S {f:\"foo\".to_string()};\n+    //~^ ERROR [E0509]\n+}\n+\n+fn move_in_fn_arg(S {f:ref _s}: S) {\n+    //~^ ERROR [E0509]\n+}\n+\n+fn main() {}"}, {"sha": "93183062d61b319ac075ee4249d6c8d291f47899", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused)]\n struct S {f:String}\n impl Drop for S {\n     fn drop(&mut self) { println!(\"{}\", self.f); }"}, {"sha": "58f706c65ff281fc78101fac28e4812d7a084877", "filename": "src/test/ui/borrowck/borrowck-move-out-of-struct-with-dtor.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,5 +1,5 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:7:11\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:9:11\n    |\n LL |     match (S {f:\"foo\".to_string()}) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -9,25 +9,40 @@ LL |         S {f:_s} => {}\n    |              |\n    |              data moved here\n    |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         S {f:ref _s} => {}\n+   |              +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:14:20\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:16:20\n    |\n LL |     let S {f:_s} = S {f:\"foo\".to_string()};\n    |              --    ^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |              |\n    |              data moved here\n    |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let S {f:ref _s} = S {f:\"foo\".to_string()};\n+   |              +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:18:19\n+  --> $DIR/borrowck-move-out-of-struct-with-dtor.rs:20:19\n    |\n LL | fn move_in_fn_arg(S {f:_s}: S) {\n    |                   ^^^^^--^\n    |                   |    |\n    |                   |    data moved here\n    |                   |    move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL | fn move_in_fn_arg(S {f:ref _s}: S) {\n+   |                        +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bc2ddf85fb4a856d32352fc585c0ab54c45c88ff", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![allow(unused)]\n+struct S(String);\n+impl Drop for S {\n+    fn drop(&mut self) { }\n+}\n+\n+fn move_in_match() {\n+    match S(\"foo\".to_string()) {\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+        S(ref _s) => {}\n+    }\n+}\n+\n+fn move_in_let() {\n+    let S(ref _s) = S(\"foo\".to_string());\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+}\n+\n+fn move_in_fn_arg(S(ref _s): S) {\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n+}\n+\n+fn main() {}"}, {"sha": "f050bce87406799608f4e1db27e3c26f845ecc30", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused)]\n struct S(String);\n impl Drop for S {\n     fn drop(&mut self) { }"}, {"sha": "160a1f99f63f657c536ed8d63481af37d3246a42", "filename": "src/test/ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,5 +1,5 @@\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:7:11\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:9:11\n    |\n LL |     match S(\"foo\".to_string()) {\n    |           ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n@@ -9,25 +9,40 @@ LL |         S(_s) => {}\n    |           |\n    |           data moved here\n    |           move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         S(ref _s) => {}\n+   |           +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:14:17\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:16:17\n    |\n LL |     let S(_s) = S(\"foo\".to_string());\n    |           --    ^^^^^^^^^^^^^^^^^^^^ cannot move out of here\n    |           |\n    |           data moved here\n    |           move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let S(ref _s) = S(\"foo\".to_string());\n+   |           +++\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n-  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:18:19\n+  --> $DIR/borrowck-move-out-of-tuple-struct-with-dtor.rs:20:19\n    |\n LL | fn move_in_fn_arg(S(_s): S) {\n    |                   ^^--^\n    |                   | |\n    |                   | data moved here\n    |                   | move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n    |                   cannot move out of here\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL | fn move_in_fn_arg(S(ref _s): S) {\n+   |                     +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6ec920cb81f3904120aefc21178b4bc5bfe79a52", "filename": "src/test/ui/borrowck/issue-51301.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51301.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -6,6 +6,11 @@ LL |             .find(|(&event_type, _)| event == event_type)\n    |                      |\n    |                      data moved here\n    |                      move occurs because `event_type` has type `EventType`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |             .find(|(&ref event_type, _)| event == event_type)\n+   |                      +++\n \n error: aborting due to previous error\n "}, {"sha": "92943f6c9ecb2b1e9e69b0c38a2392a85048d9d5", "filename": "src/test/ui/borrowck/issue-51415.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+// Regression test for #51415: match default bindings were failing to\n+// see the \"move out\" implied by `&s` below.\n+\n+fn main() {\n+    let a = vec![String::from(\"a\")];\n+    let opt = a.iter().enumerate().find(|(_, &ref s)| {\n+        //~^ ERROR cannot move out\n+        *s == String::from(\"d\")\n+    }).map(|(i, _)| i);\n+    println!(\"{:?}\", opt);\n+}"}, {"sha": "56ed57a61a0feeb252c3acc6d6bc38491fc78c18", "filename": "src/test/ui/borrowck/issue-51415.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Regression test for #51415: match default bindings were failing to\n // see the \"move out\" implied by `&s` below.\n "}, {"sha": "0d486b45592b5d7f792dd3f9779c1afb78cc7c03", "filename": "src/test/ui/borrowck/issue-51415.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,11 +1,16 @@\n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/issue-51415.rs:6:42\n+  --> $DIR/issue-51415.rs:7:42\n    |\n LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                          ^^^^^-^\n    |                                               |\n    |                                               data moved here\n    |                                               move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let opt = a.iter().enumerate().find(|(_, &ref s)| {\n+   |                                               +++\n \n error: aborting due to previous error\n "}, {"sha": "ae0a84eea4d9a56c62667fa55cc44798c59eed6e", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+struct X {\n+    x: String,\n+}\n+\n+impl Drop for X {\n+    fn drop(&mut self) {\n+        println!(\"value: {}\", self.x);\n+    }\n+}\n+\n+fn unwrap(x: X) -> String {\n+    let X { x: ref y } = x; //~ ERROR cannot move out of type\n+    y.to_string()\n+}\n+\n+fn main() {\n+    let x = X { x: \"hello\".to_string() };\n+    let y = unwrap(x);\n+    println!(\"contents: {}\", y);\n+}"}, {"sha": "c8db78610681336c8f03c060a6f6f3a353d69027", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct X {\n     x: String,\n }\n@@ -10,7 +11,7 @@ impl Drop for X {\n \n fn unwrap(x: X) -> String {\n     let X { x: y } = x; //~ ERROR cannot move out of type\n-    y\n+    y.to_string()\n }\n \n fn main() {"}, {"sha": "596ad4bf784bb531187d7b9c159925926fd2ef97", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-let.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,11 +1,16 @@\n error[E0509]: cannot move out of type `X`, which implements the `Drop` trait\n-  --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:12:22\n+  --> $DIR/disallowed-deconstructing-destructing-struct-let.rs:13:22\n    |\n LL |     let X { x: y } = x;\n    |                -     ^ cannot move out of here\n    |                |\n    |                data moved here\n    |                move occurs because `y` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let X { x: ref y } = x;\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "c8a451efeb28ecdc7775cdc640e8924e209eabf0", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+struct X {\n+    x: String,\n+}\n+\n+impl Drop for X {\n+    fn drop(&mut self) {\n+        println!(\"value: {}\", self.x);\n+    }\n+}\n+\n+fn main() {\n+    let x = X { x: \"hello\".to_string() };\n+\n+    match x {\n+    //~^ ERROR cannot move out of type `X`, which implements the `Drop` trait\n+        X { x: ref y } => println!(\"contents: {}\", y)\n+    }\n+}"}, {"sha": "815567ffec358cd95fa0a405ce5a224db73a4000", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct X {\n     x: String,\n }"}, {"sha": "e32a4dd44114963a94d804bc19bb6f20937675d7", "filename": "src/test/ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-match.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdisallowed-deconstructing%2Fdisallowed-deconstructing-destructing-struct-match.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,5 +1,5 @@\n error[E0509]: cannot move out of type `X`, which implements the `Drop` trait\n-  --> $DIR/disallowed-deconstructing-destructing-struct-match.rs:14:11\n+  --> $DIR/disallowed-deconstructing-destructing-struct-match.rs:15:11\n    |\n LL |     match x {\n    |           ^ cannot move out of here\n@@ -9,6 +9,11 @@ LL |         X { x: y } => println!(\"contents: {}\", y)\n    |                |\n    |                data moved here\n    |                move occurs because `y` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         X { x: ref y } => println!(\"contents: {}\", y)\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "7fa06825f0f00c38bccf22c140a3752649cf5368", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -11,6 +11,14 @@ LL |         (&[hd1, ..], &[hd2, ..])\n    |            --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n+   |                 +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[ref hd1, ..], &[hd2, ..])\n+   |            +++\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n   --> $DIR/issue-12567.rs:2:11\n@@ -25,6 +33,14 @@ LL |         (&[hd1, ..], &[hd2, ..])\n    |                        --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[], &[ref hd, ..]) | (&[hd, ..], &[])\n+   |                 +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&[hd1, ..], &[ref hd2, ..])\n+   |                        +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a0357cf567da1e86140d5638d5ab64fb410b658", "filename": "src/test/ui/moves/move-out-of-slice-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-1.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -8,6 +8,11 @@ LL |         box [a] => {},\n    |              |\n    |              data moved here\n    |              move occurs because `a` has type `A`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         box [ref a] => {},\n+   |              +++\n \n error: aborting due to previous error\n "}, {"sha": "2f7394fbfd36ceba4c381151f17ab6e3460744a4", "filename": "src/test/ui/moves/move-out-of-slice-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -1,5 +1,6 @@\n #![feature(unsized_locals)]\n //~^ WARN the feature `unsized_locals` is incomplete\n+#![allow(unused)]\n \n struct A;\n #[derive(Clone, Copy)]"}, {"sha": "b46854cd6b4584390f90b0be37a6e752a602e575", "filename": "src/test/ui/moves/move-out-of-slice-2.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(unsized_locals)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:10:11\n+  --> $DIR/move-out-of-slice-2.rs:11:11\n    |\n LL |     match *a {\n    |           ^^ cannot move out of here\n@@ -18,9 +18,14 @@ LL |         [a @ ..] => {}\n    |          |\n    |          data moved here\n    |          move occurs because `a` has type `[A]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [ref a @ ..] => {}\n+   |          +++\n \n error[E0508]: cannot move out of type `[A]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:16:11\n+  --> $DIR/move-out-of-slice-2.rs:17:11\n    |\n LL |     match *b {\n    |           ^^ cannot move out of here\n@@ -30,9 +35,14 @@ LL |         [_, _, b @ .., _] => {}\n    |                |\n    |                data moved here\n    |                move occurs because `b` has type `[A]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [_, _, ref b @ .., _] => {}\n+   |                +++\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:24:11\n+  --> $DIR/move-out-of-slice-2.rs:25:11\n    |\n LL |     match *c {\n    |           ^^ cannot move out of here\n@@ -42,9 +52,14 @@ LL |         [c @ ..] => {}\n    |          |\n    |          data moved here\n    |          move occurs because `c` has type `[C]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [ref c @ ..] => {}\n+   |          +++\n \n error[E0508]: cannot move out of type `[C]`, a non-copy slice\n-  --> $DIR/move-out-of-slice-2.rs:30:11\n+  --> $DIR/move-out-of-slice-2.rs:31:11\n    |\n LL |     match *d {\n    |           ^^ cannot move out of here\n@@ -54,6 +69,11 @@ LL |         [_, _, d @ .., _] => {}\n    |                |\n    |                data moved here\n    |                move occurs because `d` has type `[C]`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         [_, _, ref d @ .., _] => {}\n+   |                +++\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "1ec19b303e8f690f1781da48671debcfe3c2f000", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -81,6 +81,11 @@ LL |     let C(D(s)) = c;\n    |             |\n    |             data moved here\n    |             move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let C(D(ref s)) = c;\n+   |             +++\n \n error[E0507]: cannot move out of `*a` which is behind a shared reference\n   --> $DIR/move-errors.rs:51:9\n@@ -116,6 +121,11 @@ LL |         B::U(D(s)) => (),\n    |                |\n    |                data moved here\n    |                move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         B::U(D(ref s)) => (),\n+   |                +++\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:92:11\n@@ -128,6 +138,11 @@ LL |         (D(s), &t) => (),\n    |            |\n    |            data moved here\n    |            move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (D(ref s), &t) => (),\n+   |            +++\n \n error[E0507]: cannot move out of `*x.1` which is behind a shared reference\n   --> $DIR/move-errors.rs:92:11\n@@ -140,6 +155,11 @@ LL |         (D(s), &t) => (),\n    |                 |\n    |                 data moved here\n    |                 move occurs because `t` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (D(s), &ref t) => (),\n+   |                 +++\n \n error[E0509]: cannot move out of type `F`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:102:11\n@@ -153,6 +173,14 @@ LL |         F(s, mut t) => (),\n    |           data moved here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         F(ref s, mut t) => (),\n+   |           +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         F(s, ref mut t) => (),\n+   |              +++\n \n error[E0507]: cannot move out of `x` as enum variant `Err` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11"}, {"sha": "5f04fc83d37abdebc9ba6a846b9f625a288b1d16", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes-fixable.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.fixed?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+fn main() {\n+    struct U;\n+\n+    // A tuple is a \"non-reference pattern\".\n+    // A `mut` binding pattern resets the binding mode to by-value.\n+\n+    let mut p = (U, U);\n+    let (a, ref mut b) = &mut p;\n+    //~^ ERROR cannot move out of a mutable reference\n+}"}, {"sha": "5dc1ae2feb5f06d714778f7a2f591ae1836da11b", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes-fixable.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+fn main() {\n+    struct U;\n+\n+    // A tuple is a \"non-reference pattern\".\n+    // A `mut` binding pattern resets the binding mode to by-value.\n+\n+    let mut p = (U, U);\n+    let (a, mut b) = &mut p;\n+    //~^ ERROR cannot move out of a mutable reference\n+}"}, {"sha": "d3ab533e35e4ab55f746e6a048f689c7b00c98c3", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes-fixable.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes-fixable.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -0,0 +1,17 @@\n+error[E0507]: cannot move out of a mutable reference\n+  --> $DIR/move-ref-patterns-default-binding-modes-fixable.rs:10:22\n+   |\n+LL |     let (a, mut b) = &mut p;\n+   |             -----    ^^^^^^\n+   |             |\n+   |             data moved here\n+   |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (a, ref mut b) = &mut p;\n+   |             +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "6c913c245130d7307b7c8361731568bbc76385b1", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -7,8 +7,4 @@ fn main() {\n     let p = (U, U);\n     let (a, mut b) = &p;\n     //~^ ERROR cannot move out of a shared reference\n-\n-    let mut p = (U, U);\n-    let (a, mut b) = &mut p;\n-    //~^ ERROR cannot move out of a mutable reference\n }"}, {"sha": "65030b62250012729961a9f6938d6d012a4b1dd0", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -6,16 +6,12 @@ LL |     let (a, mut b) = &p;\n    |             |\n    |             data moved here\n    |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n-\n-error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/move-ref-patterns-default-binding-modes.rs:12:22\n    |\n-LL |     let (a, mut b) = &mut p;\n-   |             -----    ^^^^^^\n-   |             |\n-   |             data moved here\n-   |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (a, ref mut b) = &p;\n+   |             +++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "07991af6ef97c60bd5314f186fdcee1175de73c6", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -6,6 +6,11 @@ LL |     for (n, mut m) in &tups {\n    |             |\n    |             data moved here\n    |             move occurs because `m` has type `Foo`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     for (n, ref mut m) in &tups {\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "e0c49699740fb29a5dffdb82d8ca2d9e81978da7", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -219,31 +219,42 @@ pub fn main() {\n \n     let (&X(_t),) = (&x.clone(),);\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     if let (&Either::One(_t),) = (&e.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     while let (&Either::One(_t),) = (&e.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     match (&e.clone(),) {\n         //~^ ERROR cannot move\n         (&Either::One(_t),)\n+        //~^ HELP consider borrowing the pattern binding\n         | (&Either::Two(_t),) => (),\n     }\n     fn f3((&X(_t),): (&X,)) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n \n     let (&mut X(_t),) = (&mut xm.clone(),);\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n     match (&mut em.clone(),) {\n         //~^ ERROR cannot move\n         (&mut Either::One(_t),) => (),\n+        //~^ HELP consider borrowing the pattern binding\n         (&mut Either::Two(_t),) => (),\n+        //~^ HELP consider borrowing the pattern binding\n     }\n     fn f4((&mut X(_t),): (&mut X,)) { }\n     //~^ ERROR cannot move\n+    //~| HELP consider borrowing the pattern binding\n \n     // move from &Either/&X value\n \n@@ -319,6 +330,7 @@ struct Testing {\n fn testing(a: &Testing) {\n     let Some(_s) = a.a else {\n         //~^ ERROR cannot move\n+        //~| HELP consider borrowing the pattern binding\n         return;\n     };\n }"}, {"sha": "39fd1c47697d49a812b4ae496656c7ffa6c44425", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 82, "deletions": 23, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -566,27 +566,42 @@ LL |     let (&X(_t),) = (&x.clone(),);\n    |             |\n    |             data moved here\n    |             move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (&X(ref _t),) = (&x.clone(),);\n+   |             +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:222:34\n+  --> $DIR/simple.rs:223:34\n    |\n LL |     if let (&Either::One(_t),) = (&e.clone(),) { }\n    |                          --      ^^^^^^^^^^^^^\n    |                          |\n    |                          data moved here\n    |                          move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     if let (&Either::One(ref _t),) = (&e.clone(),) { }\n+   |                          +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:224:37\n+  --> $DIR/simple.rs:226:37\n    |\n LL |     while let (&Either::One(_t),) = (&e.clone(),) { }\n    |                             --      ^^^^^^^^^^^^^\n    |                             |\n    |                             data moved here\n    |                             move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     while let (&Either::One(ref _t),) = (&e.clone(),) { }\n+   |                             +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:226:11\n+  --> $DIR/simple.rs:229:11\n    |\n LL |     match (&e.clone(),) {\n    |           ^^^^^^^^^^^^^\n@@ -596,49 +611,78 @@ LL |         (&Either::One(_t),)\n    |                       |\n    |                       data moved here\n    |                       move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&Either::One(ref _t),)\n+   |                       +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:234:25\n+  --> $DIR/simple.rs:239:25\n    |\n LL |     let (&mut X(_t),) = (&mut xm.clone(),);\n    |                 --      ^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 data moved here\n    |                 move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let (&mut X(ref _t),) = (&mut xm.clone(),);\n+   |                 +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:236:38\n+  --> $DIR/simple.rs:242:38\n    |\n LL |     if let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                              --      ^^^^^^^^^^^^^^^^^^\n    |                              |\n    |                              data moved here\n    |                              move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     if let (&mut Either::One(ref _t),) = (&mut em.clone(),) { }\n+   |                              +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:238:41\n+  --> $DIR/simple.rs:245:41\n    |\n LL |     while let (&mut Either::One(_t),) = (&mut em.clone(),) { }\n    |                                 --      ^^^^^^^^^^^^^^^^^^\n    |                                 |\n    |                                 data moved here\n    |                                 move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     while let (&mut Either::One(ref _t),) = (&mut em.clone(),) { }\n+   |                                 +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:240:11\n+  --> $DIR/simple.rs:248:11\n    |\n LL |     match (&mut em.clone(),) {\n    |           ^^^^^^^^^^^^^^^^^^\n LL |\n LL |         (&mut Either::One(_t),) => (),\n    |                           -- data moved here\n+LL |\n LL |         (&mut Either::Two(_t),) => (),\n    |                           -- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&mut Either::One(ref _t),) => (),\n+   |                           +++\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (&mut Either::Two(ref _t),) => (),\n+   |                           +++\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:250:18\n+  --> $DIR/simple.rs:261:18\n    |\n LL |     let &X(_t) = &x;\n    |            --    ^^\n@@ -653,7 +697,7 @@ LL +     let X(_t) = &x;\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:253:31\n+  --> $DIR/simple.rs:264:31\n    |\n LL |     if let &Either::One(_t) = &e { }\n    |                         --    ^^\n@@ -668,7 +712,7 @@ LL +     if let Either::One(_t) = &e { }\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:256:34\n+  --> $DIR/simple.rs:267:34\n    |\n LL |     while let &Either::One(_t) = &e { }\n    |                            --    ^^\n@@ -683,7 +727,7 @@ LL +     while let Either::One(_t) = &e { }\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:259:11\n+  --> $DIR/simple.rs:270:11\n    |\n LL |     match &e {\n    |           ^^\n@@ -701,7 +745,7 @@ LL +         Either::One(_t)\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:266:11\n+  --> $DIR/simple.rs:277:11\n    |\n LL |     match &e {\n    |           ^^\n@@ -719,7 +763,7 @@ LL +         Either::One(_t) => (),\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:272:11\n+  --> $DIR/simple.rs:283:11\n    |\n LL |     match &e {\n    |           ^^\n@@ -737,7 +781,7 @@ LL +         Either::One(_t) => (),\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:279:22\n+  --> $DIR/simple.rs:290:22\n    |\n LL |     let &mut X(_t) = &mut xm;\n    |                --    ^^^^^^^\n@@ -752,7 +796,7 @@ LL +     let mut X(_t) = &mut xm;\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:282:35\n+  --> $DIR/simple.rs:293:35\n    |\n LL |     if let &mut Either::One(_t) = &mut em { }\n    |                             --    ^^^^^^^\n@@ -767,7 +811,7 @@ LL +     if let mut Either::One(_t) = &mut em { }\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:285:38\n+  --> $DIR/simple.rs:296:38\n    |\n LL |     while let &mut Either::One(_t) = &mut em { }\n    |                                --    ^^^^^^^\n@@ -782,7 +826,7 @@ LL +     while let mut Either::One(_t) = &mut em { }\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:288:11\n+  --> $DIR/simple.rs:299:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n@@ -800,7 +844,7 @@ LL +         mut Either::One(_t)\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:295:11\n+  --> $DIR/simple.rs:306:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n@@ -818,7 +862,7 @@ LL +         mut Either::One(_t) => (),\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:301:11\n+  --> $DIR/simple.rs:312:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n@@ -836,7 +880,7 @@ LL +         mut Either::One(_t) => (),\n    |\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:307:11\n+  --> $DIR/simple.rs:318:11\n    |\n LL |     match &mut em {\n    |           ^^^^^^^\n@@ -884,31 +928,46 @@ LL +     fn f2(mut X(_t): &mut X) { }\n    |\n \n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/simple.rs:231:11\n+  --> $DIR/simple.rs:235:11\n    |\n LL |     fn f3((&X(_t),): (&X,)) { }\n    |           ^^^^--^^^\n    |               |\n    |               data moved here\n    |               move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     fn f3((&X(ref _t),): (&X,)) { }\n+   |               +++\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/simple.rs:245:11\n+  --> $DIR/simple.rs:255:11\n    |\n LL |     fn f4((&mut X(_t),): (&mut X,)) { }\n    |           ^^^^^^^^--^^^\n    |                   |\n    |                   data moved here\n    |                   move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     fn f4((&mut X(ref _t),): (&mut X,)) { }\n+   |                   +++\n \n error[E0507]: cannot move out of `a.a` as enum variant `Some` which is behind a shared reference\n-  --> $DIR/simple.rs:320:20\n+  --> $DIR/simple.rs:331:20\n    |\n LL |     let Some(_s) = a.a else {\n    |              --    ^^^\n    |              |\n    |              data moved here\n    |              move occurs because `_s` has type `String`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |     let Some(ref _s) = a.a else {\n+   |              +++\n \n error: aborting due to 61 previous errors\n "}, {"sha": "97d05d9dcffaf840cef3f3640cac2fe823c63a83", "filename": "src/test/ui/suggestions/option-content-move-from-tuple-match.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move-from-tuple-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd72b1a0df1277eb7abba9b9aab41456eeb8894a/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move-from-tuple-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move-from-tuple-match.stderr?ref=dd72b1a0df1277eb7abba9b9aab41456eeb8894a", "patch": "@@ -9,6 +9,11 @@ LL |         (None, &c) => &c.unwrap(),\n    |                 |\n    |                 data moved here\n    |                 move occurs because `c` has type `Option<String>`, which does not implement the `Copy` trait\n+   |\n+help: consider borrowing the pattern binding\n+   |\n+LL |         (None, &ref c) => &c.unwrap(),\n+   |                 +++\n \n error: aborting due to previous error\n "}]}