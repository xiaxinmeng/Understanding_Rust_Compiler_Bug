{"sha": "ad9234fef2a90105448214255669fb46a382c3a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTIzNGZlZjJhOTAxMDU0NDgyMTQyNTU2NjlmYjQ2YTM4MmMzYTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-05T17:23:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-05T17:23:40Z"}, "message": "Merge #9140\n\n9140: feat: Render documentation for derive completion r=Veykril a=Veykril\n\n![eEzGiq2wNa](https://user-images.githubusercontent.com/3757771/120847308-9c5a3300-c573-11eb-958d-e0f22f4757ed.gif)\r\n\r\nNothing fancy as all the std derives aren't really documented though maybe some 3rd party crates document them equally to their trait counterparts.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e09f9b33d359c9871f03a413b44630509fb97406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e09f9b33d359c9871f03a413b44630509fb97406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad9234fef2a90105448214255669fb46a382c3a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgu7McCRBK7hj4Ov3rIwAAMNsIACfUB+Ahgh4bE38dsuPM479F\n5RnfEf4NmxcANZ7Wf7j61xOklTcJbCv1XMYqK77w7z8AqWnOJU2kpzZT+vkytZ6l\nWAhBUm4lR7XVb4gKq7YWqRrRCe4uZZuagFXayAk1PmQybU3KaAd8htil+T/hsQDs\n59A4Tcd0CWGwyWriXVQPb0e4VWXJ2QKvB7JlUfhvKA0DDF+6Zr6ib6yAOZ3uIVJk\nLRGKi8SOdH8AUGszw7J3nMkNXQfFFMtcE493cCdxl4ZmVSE0jChZirladmhdIUQr\nD1W6lzW26c4sHY6nbTYis9DgB4IUJPZnAJ8dARx3ZSph9UMuu/vamEuhJLBZsBw=\n=EUJi\n-----END PGP SIGNATURE-----\n", "payload": "tree e09f9b33d359c9871f03a413b44630509fb97406\nparent 5092d8c1ae50010d35f6860b6420a69ddcd9ca45\nparent 544eca10d6313eee45eee1bae7fcf7e3dd3f2d3a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622913820 +0000\ncommitter GitHub <noreply@github.com> 1622913820 +0000\n\nMerge #9140\n\n9140: feat: Render documentation for derive completion r=Veykril a=Veykril\n\n![eEzGiq2wNa](https://user-images.githubusercontent.com/3757771/120847308-9c5a3300-c573-11eb-958d-e0f22f4757ed.gif)\r\n\r\nNothing fancy as all the std derives aren't really documented though maybe some 3rd party crates document them equally to their trait counterparts.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9234fef2a90105448214255669fb46a382c3a5", "html_url": "https://github.com/rust-lang/rust/commit/ad9234fef2a90105448214255669fb46a382c3a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad9234fef2a90105448214255669fb46a382c3a5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5092d8c1ae50010d35f6860b6420a69ddcd9ca45", "url": "https://api.github.com/repos/rust-lang/rust/commits/5092d8c1ae50010d35f6860b6420a69ddcd9ca45", "html_url": "https://github.com/rust-lang/rust/commit/5092d8c1ae50010d35f6860b6420a69ddcd9ca45"}, {"sha": "544eca10d6313eee45eee1bae7fcf7e3dd3f2d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/544eca10d6313eee45eee1bae7fcf7e3dd3f2d3a", "html_url": "https://github.com/rust-lang/rust/commit/544eca10d6313eee45eee1bae7fcf7e3dd3f2d3a"}], "stats": {"total": 115, "additions": 75, "deletions": 40}, "files": [{"sha": "b7e72b7900227e7b15e225e4d616f129ee7116e9", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=ad9234fef2a90105448214255669fb46a382c3a5", "patch": "@@ -36,6 +36,10 @@ use crate::{\n pub struct Documentation(String);\n \n impl Documentation {\n+    pub fn new(s: impl Into<String>) -> Self {\n+        Documentation(s.into())\n+    }\n+\n     pub fn as_str(&self) -> &str {\n         &self.0\n     }"}, {"sha": "d3392100d90e0d25707649c6b6687e47166c2e00", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=ad9234fef2a90105448214255669fb46a382c3a5", "patch": "@@ -3,6 +3,7 @@\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n \n+use hir::HasAttrs;\n use ide_db::helpers::generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES};\n use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -81,6 +82,24 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n         None if is_inner => ATTRIBUTES.iter().for_each(add_completion),\n         None => ATTRIBUTES.iter().filter(|compl| !compl.prefer_inner).for_each(add_completion),\n     }\n+\n+    // FIXME: write a test for this when we can\n+    ctx.scope.process_all_names(&mut |name, scope_def| {\n+        if let hir::ScopeDef::MacroDef(mac) = scope_def {\n+            if mac.kind() == hir::MacroKind::Attr {\n+                let mut item = CompletionItem::new(\n+                    CompletionKind::Attribute,\n+                    ctx.source_range(),\n+                    name.to_string(),\n+                );\n+                item.kind(CompletionItemKind::Attribute);\n+                if let Some(docs) = mac.docs(ctx.sema.db) {\n+                    item.documentation(docs);\n+                }\n+                acc.add(item.build());\n+            }\n+        }\n+    });\n }\n \n struct AttrCompletion {"}, {"sha": "d526824fbdb3cd9779b3a7409142b9f48e41e995", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=ad9234fef2a90105448214255669fb46a382c3a5", "patch": "@@ -1,6 +1,7 @@\n //! Completion for derives\n+use hir::HasAttrs;\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n+use rustc_hash::FxHashMap;\n use syntax::ast;\n \n use crate::{\n@@ -15,66 +16,64 @@ pub(super) fn complete_derive(\n     derive_input: ast::TokenTree,\n ) {\n     if let Some(existing_derives) = super::parse_comma_sep_input(derive_input) {\n-        for derive_completion in DEFAULT_DERIVE_COMPLETIONS\n-            .iter()\n-            .filter(|completion| !existing_derives.contains(completion.label))\n-        {\n-            let mut components = vec![derive_completion.label];\n-            components.extend(\n-                derive_completion\n-                    .dependencies\n-                    .iter()\n-                    .filter(|&&dependency| !existing_derives.contains(dependency)),\n-            );\n-            let lookup = components.join(\", \");\n-            let label = components.iter().rev().join(\", \");\n+        for (derive, docs) in get_derive_names_in_scope(ctx) {\n+            let (label, lookup) = if let Some(derive_completion) = DEFAULT_DERIVE_COMPLETIONS\n+                .iter()\n+                .find(|derive_completion| derive_completion.label == derive)\n+            {\n+                let mut components = vec![derive_completion.label];\n+                components.extend(\n+                    derive_completion\n+                        .dependencies\n+                        .iter()\n+                        .filter(|&&dependency| !existing_derives.contains(dependency)),\n+                );\n+                let lookup = components.join(\", \");\n+                let label = components.iter().rev().join(\", \");\n+                (label, Some(lookup))\n+            } else {\n+                (derive, None)\n+            };\n             let mut item =\n                 CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n-            item.add_to(acc);\n-        }\n-\n-        for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            let mut item = CompletionItem::new(\n-                CompletionKind::Attribute,\n-                ctx.source_range(),\n-                custom_derive_name,\n-            );\n             item.kind(CompletionItemKind::Attribute);\n+            if let Some(docs) = docs {\n+                item.documentation(docs);\n+            }\n+            if let Some(lookup) = lookup {\n+                item.lookup_by(lookup);\n+            }\n             item.add_to(acc);\n         }\n     }\n }\n \n-fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n-    let mut result = FxHashSet::default();\n+fn get_derive_names_in_scope(\n+    ctx: &CompletionContext,\n+) -> FxHashMap<String, Option<hir::Documentation>> {\n+    let mut result = FxHashMap::default();\n     ctx.scope.process_all_names(&mut |name, scope_def| {\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.kind() == hir::MacroKind::Derive {\n-                result.insert(name.to_string());\n+                result.insert(name.to_string(), mac.docs(ctx.db));\n             }\n         }\n     });\n     result\n }\n \n-struct DeriveCompletion {\n+struct DeriveDependencies {\n     label: &'static str,\n     dependencies: &'static [&'static str],\n }\n \n-/// Standard Rust derives and the information about their dependencies\n+/// Standard Rust derives that have dependencies\n /// (the dependencies are needed so that the main derive don't break the compilation when added)\n-const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n-    DeriveCompletion { label: \"Clone\", dependencies: &[] },\n-    DeriveCompletion { label: \"Copy\", dependencies: &[\"Clone\"] },\n-    DeriveCompletion { label: \"Debug\", dependencies: &[] },\n-    DeriveCompletion { label: \"Default\", dependencies: &[] },\n-    DeriveCompletion { label: \"Hash\", dependencies: &[] },\n-    DeriveCompletion { label: \"PartialEq\", dependencies: &[] },\n-    DeriveCompletion { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n-    DeriveCompletion { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n-    DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n+const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n+    DeriveDependencies { label: \"Copy\", dependencies: &[\"Clone\"] },\n+    DeriveDependencies { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n+    DeriveDependencies { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n+    DeriveDependencies { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n ];\n \n #[cfg(test)]\n@@ -94,6 +93,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn empty_derive() {\n         check(\n             r#\"#[derive($0)] struct Test;\"#,\n@@ -112,6 +112,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input() {\n         check(\n             r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n@@ -129,6 +130,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input2() {\n         check(\n             r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,"}, {"sha": "ca99e975926893aef79bbe75cee352f3da4c650d", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9234fef2a90105448214255669fb46a382c3a5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=ad9234fef2a90105448214255669fb46a382c3a5", "patch": "@@ -24,7 +24,8 @@ pub(super) fn complete_lint(\n                 ctx.source_range(),\n                 lint_completion.label,\n             );\n-            item.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n+            item.kind(CompletionItemKind::Attribute)\n+                .documentation(hir::Documentation::new(lint_completion.description.to_owned()));\n             item.add_to(acc)\n         }\n     }\n@@ -61,4 +62,13 @@ mod tests {\n             r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n         )\n     }\n+\n+    #[test]\n+    fn check_feature() {\n+        check_edit(\n+            \"box_syntax\",\n+            r#\"#[feature(box_$0)] struct Test;\"#,\n+            r#\"#[feature(box_syntax)] struct Test;\"#,\n+        )\n+    }\n }"}]}