{"sha": "5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NTNjNDU4ZDFhOGZlNzM5NmFiYmRiY2YxZDZmNjBiOWFlYTZjZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-02T11:19:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-02T11:19:11Z"}, "message": "Merge pull request #424 from RalfJung/fewer-deps\n\nremove dependency on lazy_static and regex by getting rid of some dead validation hack", "tree": {"sha": "bff244a313fed258bfd9cc4aab82daa6d0ff8b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff244a313fed258bfd9cc4aab82daa6d0ff8b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYuivCRBK7hj4Ov3rIwAAdHIIADAVJOc3XN+cNvzNEJD/SfdW\nURyDDDllSNqJ35Ug267CLy/eZEeFDKW1e70xbni/h8eqZ6DUMYUuGn6Ru0xtoWBI\nvjVEtyNJKG90zOJzEpT/Cf8BOOky+1+lruqV+QJr3n5Pb7Fn3CJhSvbi5Jme5DW8\n3ZAWfgJC152LRQnp4qbAeD9/KukZUZbkZwtYZcbXBJ0JYXZRu2rZ8jS10VkABsrj\nygmldFT+bxnSzf7/qns/KCl2LJOcvY48Ng4hwO+6w39K10cerFEayqJ8PAHn8eoh\n6QA7zFDQwlAMb3P+l27C9I7ZeLNPVm4TPmCuUfep/EZDq/253UJfkGdJK3rF1C8=\n=A2xv\n-----END PGP SIGNATURE-----\n", "payload": "tree bff244a313fed258bfd9cc4aab82daa6d0ff8b98\nparent e0486769b33f88c545aa702f40b19cb11549b39e\nparent 3783cebe80b3ac0b6acb28452962e6131bb03a2c\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1533208751 +0200\ncommitter GitHub <noreply@github.com> 1533208751 +0200\n\nMerge pull request #424 from RalfJung/fewer-deps\n\nremove dependency on lazy_static and regex by getting rid of some dead validation hack"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "html_url": "https://github.com/rust-lang/rust/commit/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0486769b33f88c545aa702f40b19cb11549b39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0486769b33f88c545aa702f40b19cb11549b39e", "html_url": "https://github.com/rust-lang/rust/commit/e0486769b33f88c545aa702f40b19cb11549b39e"}, {"sha": "3783cebe80b3ac0b6acb28452962e6131bb03a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3783cebe80b3ac0b6acb28452962e6131bb03a2c", "html_url": "https://github.com/rust-lang/rust/commit/3783cebe80b3ac0b6acb28452962e6131bb03a2c"}], "stats": {"total": 35, "additions": 1, "deletions": 34}, "files": [{"sha": "fd62625be131a571de049bae640824faa34f85d2", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "patch": "@@ -21,9 +21,7 @@ required-features = [\"cargo_miri\"]\n [dependencies]\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n cargo_metadata = { version = \"0.6\", optional = true }\n-regex = \"1.0\"\n-lazy_static = \"1.0\"\n-env_logger = \"0.5.0-rc.1\"\n+env_logger = \"0.5\"\n log = \"0.4\"\n \n [features]"}, {"sha": "f16471352c8fad7976e2dac305f0fb0c1b813f6a", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "patch": "@@ -17,9 +17,6 @@ extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_target;\n extern crate syntax;\n-extern crate regex;\n-#[macro_use]\n-extern crate lazy_static;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::{TyLayout, LayoutOf, Size};"}, {"sha": "8d55f8ab0afe9c015f2dc9b4d51bd16f3724776a", "filename": "src/validation.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/src%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9/src%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalidation.rs?ref=5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "patch": "@@ -159,34 +159,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n         }\n         debug_assert!(self.memory.cur_frame == self.cur_frame());\n \n-        // HACK: Determine if this method is whitelisted and hence we do not perform any validation.\n-        // We currently insta-UB on anything passing around uninitialized memory, so we have to whitelist\n-        // the places that are allowed to do that.\n-        // The second group is stuff libstd does that is forbidden even under relaxed validation.\n-        {\n-            // The regexp we use for filtering\n-            use regex::Regex;\n-            lazy_static! {\n-                static ref RE: Regex = Regex::new(\"^(\\\n-                    (std|alloc::heap::__core)::mem::(uninitialized|forget)::|\\\n-                    <(std|alloc)::heap::Heap as (std::heap|alloc::allocator)::Alloc>::|\\\n-                    <(std|alloc::heap::__core)::mem::ManuallyDrop<T>><.*>::new$|\\\n-                    <(std|alloc::heap::__core)::mem::ManuallyDrop<T> as std::ops::DerefMut><.*>::deref_mut$|\\\n-                    (std|alloc::heap::__core)::ptr::read::|\\\n-                    \\\n-                    <std::sync::Arc<T>><.*>::inner$|\\\n-                    <std::sync::Arc<T>><.*>::drop_slow$|\\\n-                    (std::heap|alloc::allocator)::Layout::for_value::|\\\n-                    (std|alloc::heap::__core)::mem::(size|align)_of_val::\\\n-                )\").unwrap();\n-            }\n-            // Now test\n-            let name = self.frame().instance.to_string();\n-            if RE.is_match(&name) {\n-                return Ok(());\n-            }\n-        }\n-\n         // We need to monomorphize ty *without* erasing lifetimes\n         trace!(\"validation_op1: {:?}\", operand.ty.sty);\n         let ty = operand.ty.subst(self.tcx.tcx, self.substs());"}]}