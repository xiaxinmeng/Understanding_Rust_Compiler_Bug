{"sha": "63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYmM2YWViN2Q1N2ZjNTg1YzY3ZWE4Yjk2YTAzODAyZDM1NzBiNDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T15:09:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-16T15:09:35Z"}, "message": "Rollup merge of #64119 - pietroalbini:validate-toolstate-maintainers, r=kennytm\n\nci: ensure all tool maintainers are assignable on issues\n\nGitHub only allows people explicitly listed as collaborators on the repository or who commented on the issue/PR to be assignees, failing to create the issue if non-assignable people are assigned.\n\nThis adds an extra check on CI to make sure all the people listed as tool maintainers can be assigned to toolstate issues. The check won't be executed on PR builds due to the lack of a valid token.\n\nr? @kennytm", "tree": {"sha": "7a3b264ef95b374db491684a235acdc3b4e6e38e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3b264ef95b374db491684a235acdc3b4e6e38e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdf6WvCRBK7hj4Ov3rIwAAdHIIAFqsLt5DjT2kiKEfUSJvUHXH\nD2iMFqcsbGdeTWoQNq0Qv+51zjwsj0nFVptHMh3UZKdSzttBiP8aHFRQKT57upaF\nmtuZFUkr2S2yixsJVrgUQddZJ9yO5DPQ6B5FEEEue58DPzLf8A5qxFBCBFDHTYkF\nJN9DJsEUuW7xZuRTthUjy63vRzlJjlljpdysw4m8uI5qGjwL+piRhHPYBoDcmGwl\n2yRPZz5pVNjcq1+a10rkvVO+OKsq+VxT7QuheioiMvz8ADyVdlIMYajslOioB7E8\nFGETZrrTIkqxnF5loSl4xyHRAS14PtkgqbEKUUwaQ+D43MuwZP6ErjnbpeoYLJ0=\n=Nncb\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a3b264ef95b374db491684a235acdc3b4e6e38e\nparent be327a8f692919fd26742e6b88918878f67d60dd\nparent ce451b9b269207feb565f566cdbd34d7ec369b4b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568646575 +0200\ncommitter GitHub <noreply@github.com> 1568646575 +0200\n\nRollup merge of #64119 - pietroalbini:validate-toolstate-maintainers, r=kennytm\n\nci: ensure all tool maintainers are assignable on issues\n\nGitHub only allows people explicitly listed as collaborators on the repository or who commented on the issue/PR to be assignees, failing to create the issue if non-assignable people are assigned.\n\nThis adds an extra check on CI to make sure all the people listed as tool maintainers can be assigned to toolstate issues. The check won't be executed on PR builds due to the lack of a valid token.\n\nr? @kennytm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "html_url": "https://github.com/rust-lang/rust/commit/63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63bc6aeb7d57fc585c67ea8b96a03802d3570b42/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be327a8f692919fd26742e6b88918878f67d60dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/be327a8f692919fd26742e6b88918878f67d60dd", "html_url": "https://github.com/rust-lang/rust/commit/be327a8f692919fd26742e6b88918878f67d60dd"}, {"sha": "ce451b9b269207feb565f566cdbd34d7ec369b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce451b9b269207feb565f566cdbd34d7ec369b4b", "html_url": "https://github.com/rust-lang/rust/commit/ce451b9b269207feb565f566cdbd34d7ec369b4b"}], "stats": {"total": 106, "additions": 87, "deletions": 19}, "files": [{"sha": "da0a899ac85ebde298be443157621ef53187244c", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63bc6aeb7d57fc585c67ea8b96a03802d3570b42/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/63bc6aeb7d57fc585c67ea8b96a03802d3570b42/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "patch": "@@ -147,8 +147,15 @@ steps:\n     git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n     cd rust-toolstate\n     python2.7 \"$BUILD_SOURCESDIRECTORY/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n+    # Only check maintainers if this build is supposed to publish toolstate.\n+    # Builds that are not supposed to publish don't have the access token.\n+    if [ -n \"${TOOLSTATE_PUBLISH+is_set}\" ]; then\n+      TOOLSTATE_VALIDATE_MAINTAINERS_REPO=rust-lang/rust python2.7 \"${BUILD_SOURCESDIRECTORY}/src/tools/publish_toolstate.py\"\n+    fi\n     cd ..\n     rm -rf rust-toolstate\n+  env:\n+    TOOLSTATE_REPO_ACCESS_TOKEN: $(TOOLSTATE_REPO_ACCESS_TOKEN)\n   condition: and(succeeded(), not(variables.SKIP_JOB), eq(variables['IMAGE'], 'mingw-check'))\n   displayName: Verify the publish_toolstate script works\n "}, {"sha": "4060b90d952bde04f67628e1a06ef1f406e151e9", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 80, "deletions": 19, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/63bc6aeb7d57fc585c67ea8b96a03802d3570b42/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/63bc6aeb7d57fc585c67ea8b96a03802d3570b42/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=63bc6aeb7d57fc585c67ea8b96a03802d3570b42", "patch": "@@ -7,6 +7,8 @@\n ## It is set as callback for `src/ci/docker/x86_64-gnu-tools/repo.sh` by the CI scripts\n ## when a new commit lands on `master` (i.e., after it passed all checks on `auto`).\n \n+from __future__ import print_function\n+\n import sys\n import re\n import os\n@@ -20,21 +22,26 @@\n     import urllib.request as urllib2\n \n # List of people to ping when the status of a tool or a book changed.\n+# These should be collaborators of the rust-lang/rust repository (with at least\n+# read privileges on it). CI will fail otherwise.\n MAINTAINERS = {\n-    'miri': '@oli-obk @RalfJung @eddyb',\n-    'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk @phansch @flip1995 @yaahc',\n-    'rls': '@Xanewok',\n-    'rustfmt': '@topecongiro',\n-    'book': '@carols10cents @steveklabnik',\n-    'nomicon': '@frewsxcv @Gankro',\n-    'reference': '@steveklabnik @Havvy @matthewjasper @ehuss',\n-    'rust-by-example': '@steveklabnik @marioidival @projektir',\n-    'embedded-book': (\n-        '@adamgreig @andre-richter @jamesmunns @korken89 '\n-        '@ryankurte @thejpster @therealprof'\n-    ),\n-    'edition-guide': '@ehuss @Centril @steveklabnik',\n-    'rustc-guide': '@mark-i-m @spastorino @amanjeev'\n+    'miri': {'oli-obk', 'RalfJung', 'eddyb'},\n+    'clippy-driver': {\n+        'Manishearth', 'llogiq', 'mcarton', 'oli-obk', 'phansch', 'flip1995',\n+        'yaahc',\n+    },\n+    'rls': {'Xanewok'},\n+    'rustfmt': {'topecongiro'},\n+    'book': {'carols10cents', 'steveklabnik'},\n+    'nomicon': {'frewsxcv', 'Gankra'},\n+    'reference': {'steveklabnik', 'Havvy', 'matthewjasper', 'ehuss'},\n+    'rust-by-example': {'steveklabnik', 'marioidival'},\n+    'embedded-book': {\n+        'adamgreig', 'andre-richter', 'jamesmunns', 'korken89',\n+        'ryankurte', 'thejpster', 'therealprof',\n+    },\n+    'edition-guide': {'ehuss', 'Centril', 'steveklabnik'},\n+    'rustc-guide': {'mark-i-m', 'spastorino', 'amanjeev'},\n }\n \n REPOS = {\n@@ -52,6 +59,50 @@\n }\n \n \n+def validate_maintainers(repo, github_token):\n+    '''Ensure all maintainers are assignable on a GitHub repo'''\n+    next_link_re = re.compile(r'<([^>]+)>; rel=\"next\"')\n+\n+    # Load the list of assignable people in the GitHub repo\n+    assignable = []\n+    url = 'https://api.github.com/repos/%s/collaborators?per_page=100' % repo\n+    while url is not None:\n+        response = urllib2.urlopen(urllib2.Request(url, headers={\n+            'Authorization': 'token ' + github_token,\n+            # Properly load nested teams.\n+            'Accept': 'application/vnd.github.hellcat-preview+json',\n+        }))\n+        assignable.extend(user['login'] for user in json.load(response))\n+        # Load the next page if available\n+        url = None\n+        link_header = response.headers.get('Link')\n+        if link_header:\n+            matches = next_link_re.match(link_header)\n+            if matches is not None:\n+                url = matches.group(1)\n+\n+    errors = False\n+    for tool, maintainers in MAINTAINERS.items():\n+        for maintainer in maintainers:\n+            if maintainer not in assignable:\n+                errors = True\n+                print(\n+                    \"error: %s maintainer @%s is not assignable in the %s repo\"\n+                    % (tool, maintainer, repo),\n+                )\n+\n+    if errors:\n+        print()\n+        print(\"  To be assignable, a person needs to be explicitly listed as a\")\n+        print(\"  collaborator in the repository settings. The simple way to\")\n+        print(\"  fix this is to ask someone with 'admin' privileges on the repo\")\n+        print(\"  to add the person or whole team as a collaborator with 'read'\")\n+        print(\"  privileges. Those privileges don't grant any extra permissions\")\n+        print(\"  so it's safe to apply them.\")\n+        print()\n+        print(\"The build will fail due to this.\")\n+        exit(1)\n+\n def read_current_status(current_commit, path):\n     '''Reads build status of `current_commit` from content of `history/*.tsv`\n     '''\n@@ -73,13 +124,12 @@ def maybe_delink(message):\n def issue(\n     tool,\n     status,\n-    maintainers,\n+    assignees,\n     relevant_pr_number,\n     relevant_pr_user,\n     pr_reviewer,\n ):\n     # Open an issue about the toolstate failure.\n-    assignees = [x.strip() for x in maintainers.split('@') if x != '']\n     if status == 'test-fail':\n         status_description = 'has failing tests'\n     else:\n@@ -100,7 +150,7 @@ def issue(\n             REPOS.get(tool), relevant_pr_user, pr_reviewer\n         )),\n         'title': '`{}` no longer builds after {}'.format(tool, relevant_pr_number),\n-        'assignees': assignees,\n+        'assignees': list(assignees),\n         'labels': ['T-compiler', 'I-nominated'],\n     })\n     print(\"Creating issue:\\n{}\".format(request))\n@@ -150,18 +200,19 @@ def update_latest(\n                 old = status[os]\n                 new = s.get(tool, old)\n                 status[os] = new\n+                maintainers = ' '.join('@'+name for name in MAINTAINERS[tool])\n                 if new > old: # comparing the strings, but they are ordered appropriately!\n                     # things got fixed or at least the status quo improved\n                     changed = True\n                     message += '\ud83c\udf89 {} on {}: {} \u2192 {} (cc {}, @rust-lang/infra).\\n' \\\n-                        .format(tool, os, old, new, MAINTAINERS.get(tool))\n+                        .format(tool, os, old, new, maintainers)\n                 elif new < old:\n                     # tests or builds are failing and were not failing before\n                     changed = True\n                     title = '\ud83d\udc94 {} on {}: {} \u2192 {}' \\\n                         .format(tool, os, old, new)\n                     message += '{} (cc {}, @rust-lang/infra).\\n' \\\n-                        .format(title, MAINTAINERS.get(tool))\n+                        .format(title, maintainers)\n                     # Most tools only create issues for build failures.\n                     # Other failures can be spurious.\n                     if new == 'build-fail' or (tool == 'miri' and new == 'test-fail'):\n@@ -200,6 +251,16 @@ def update_latest(\n \n \n if __name__ == '__main__':\n+    repo = os.environ.get('TOOLSTATE_VALIDATE_MAINTAINERS_REPO')\n+    if repo:\n+        github_token = os.environ.get('TOOLSTATE_REPO_ACCESS_TOKEN')\n+        if github_token:\n+            validate_maintainers(repo, github_token)\n+        else:\n+            print('skipping toolstate maintainers validation since no GitHub token is present')\n+        # When validating maintainers don't run the full script.\n+        exit(0)\n+\n     cur_commit = sys.argv[1]\n     cur_datetime = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\n     cur_commit_msg = sys.argv[2]"}]}