{"sha": "3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMmRlYTdmNTU4MzBiYTIzOTFlNWViODUyNWNkYmI0M2FjNjY2YzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T16:33:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T17:15:51Z"}, "message": "always wrap block into an expression", "tree": {"sha": "4856efbfaf1b52e441bd7bd8a5f6a26e454edb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4856efbfaf1b52e441bd7bd8a5f6a26e454edb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "html_url": "https://github.com/rust-lang/rust/commit/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8397deab914240aca8f015fb3736689919c0a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8397deab914240aca8f015fb3736689919c0a5b", "html_url": "https://github.com/rust-lang/rust/commit/a8397deab914240aca8f015fb3736689919c0a5b"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "be9419e0c851c34a31473d5f3c1a3bf80241afff", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn reparser(\n     parent: Option<SyntaxKind>,\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n-        BLOCK => expressions::block,\n+        BLOCK => expressions::naked_block,\n         RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n         RECORD_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,"}, {"sha": "ba8386d11fd424a23deb37ece1dbfbe8913fc262", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "patch": "@@ -40,6 +40,11 @@ pub(crate) fn block(p: &mut Parser) {\n         p.error(\"expected a block\");\n         return;\n     }\n+    atom::block_expr(p, None);\n+}\n+\n+pub(crate) fn naked_block(p: &mut Parser) {\n+    assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump();\n     expr_block_contents(p);"}, {"sha": "ec7f2441dfb3310991c87b8f1fd908c27ec77efc", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "patch": "@@ -463,10 +463,10 @@ fn match_guard(p: &mut Parser) -> CompletedMarker {\n //     unsafe {};\n //     'label: {};\n // }\n-fn block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n+pub(super) fn block_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T!['{']));\n     let m = m.unwrap_or_else(|| p.start());\n-    block(p);\n+    naked_block(p);\n     m.complete(p, BLOCK_EXPR)\n }\n "}, {"sha": "16824f3c402d634f03f6800530f3209f1140a0c3", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "patch": "@@ -97,7 +97,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n     for node in root.descendants() {\n         let _ = visitor_ctx(&mut errors)\n             .visit::<ast::Literal, _>(validate_literal)\n-            .visit::<ast::Block, _>(block::validate_block_node)\n+            .visit::<ast::BlockExpr, _>(block::validate_block_expr)\n             .visit::<ast::FieldExpr, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n             .visit::<ast::RecordField, _>(|it, errors| validate_numeric_name(it.name_ref(), errors))\n             .accept(&node);"}, {"sha": "3c9e96eb30b9640021b471aa4cdb394f9d38842b", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c2dea7f55830ba2391e5eb8525cdbb43ac666c2/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=3c2dea7f55830ba2391e5eb8525cdbb43ac666c2", "patch": "@@ -5,18 +5,18 @@ use crate::{\n     SyntaxKind::*,\n };\n \n-pub(crate) fn validate_block_node(node: ast::Block, errors: &mut Vec<SyntaxError>) {\n-    if let Some(parent) = node.syntax().parent() {\n+pub(crate) fn validate_block_expr(expr: ast::BlockExpr, errors: &mut Vec<SyntaxError>) {\n+    if let Some(parent) = expr.syntax().parent() {\n         match parent.kind() {\n-            FN_DEF => return,\n-            BLOCK_EXPR => match parent.parent().map(|v| v.kind()) {\n-                Some(EXPR_STMT) | Some(BLOCK) => return,\n-                _ => {}\n-            },\n+            FN_DEF | EXPR_STMT | BLOCK => return,\n             _ => {}\n         }\n     }\n-    errors.extend(\n-        node.attrs().map(|attr| SyntaxError::new(InvalidBlockAttr, attr.syntax().text_range())),\n-    )\n+    if let Some(block) = expr.block() {\n+        errors.extend(\n+            block\n+                .attrs()\n+                .map(|attr| SyntaxError::new(InvalidBlockAttr, attr.syntax().text_range())),\n+        )\n+    }\n }"}]}