{"sha": "61d9b1656dba91122d308637d9611e0bd7ea68b4", "node_id": "C_kwDOAAsO6NoAKDYxZDliMTY1NmRiYTkxMTIyZDMwODYzN2Q5NjExZTBiZDdlYTY4YjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T04:01:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-04T13:42:13Z"}, "message": "Remove unnecessary FulfillmentContext from need_migrate_deref_output_trait_object", "tree": {"sha": "38ec24e28b39c9e320fba0f805e9c03c96a95dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ec24e28b39c9e320fba0f805e9c03c96a95dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61d9b1656dba91122d308637d9611e0bd7ea68b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61d9b1656dba91122d308637d9611e0bd7ea68b4", "html_url": "https://github.com/rust-lang/rust/commit/61d9b1656dba91122d308637d9611e0bd7ea68b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61d9b1656dba91122d308637d9611e0bd7ea68b4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d412cff7ae0585ad48292fca2fa331ff679b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d412cff7ae0585ad48292fca2fa331ff679b3f", "html_url": "https://github.com/rust-lang/rust/commit/37d412cff7ae0585ad48292fca2fa331ff679b3f"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "b296dadec9d9a9beac0bacedb86e3c3aec32ddfa", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/61d9b1656dba91122d308637d9611e0bd7ea68b4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61d9b1656dba91122d308637d9611e0bd7ea68b4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=61d9b1656dba91122d308637d9611e0bd7ea68b4", "patch": "@@ -8,7 +8,7 @@\n use hir::LangItem;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_infer::traits::TraitEngine;\n+use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -706,7 +706,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn need_migrate_deref_output_trait_object(\n         &mut self,\n         ty: Ty<'tcx>,\n-        cause: &traits::ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Option<(Ty<'tcx>, DefId)> {\n         let tcx = self.tcx();\n@@ -721,32 +720,35 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         let obligation = traits::Obligation::new(\n-            cause.clone(),\n+            ObligationCause::dummy(),\n             param_env,\n             ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             return None;\n         }\n \n-        let mut fulfillcx = traits::FulfillmentContext::new_in_snapshot();\n-        let normalized_ty = fulfillcx.normalize_projection_type(\n-            &self.infcx,\n+        let ty = traits::normalize_projection_type(\n+            self,\n             param_env,\n             ty::ProjectionTy {\n                 item_def_id: tcx.lang_items().deref_target()?,\n                 substs: trait_ref.substs,\n             },\n-            cause.clone(),\n-        );\n-\n-        let ty::Dynamic(data, ..) = normalized_ty.kind() else {\n-            return None;\n-        };\n-\n-        let def_id = data.principal_def_id()?;\n-\n-        return Some((normalized_ty, def_id));\n+            ObligationCause::dummy(),\n+            0,\n+            // We're *intentionally* throwing these away,\n+            // since we don't actually use them.\n+            &mut vec![],\n+        )\n+        .ty()\n+        .unwrap();\n+\n+        if let ty::Dynamic(data, ..) = ty.kind() {\n+            Some((ty, data.principal_def_id()?))\n+        } else {\n+            None\n+        }\n     }\n \n     /// Searches for unsizing that might apply to `obligation`.\n@@ -807,11 +809,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let target_trait_did = principal_def_id_b.unwrap();\n                         let source_trait_ref = principal_a.with_self_ty(self.tcx(), source);\n                         if let Some((deref_output_ty, deref_output_trait_did)) = self\n-                            .need_migrate_deref_output_trait_object(\n-                                source,\n-                                &obligation.cause,\n-                                obligation.param_env,\n-                            )\n+                            .need_migrate_deref_output_trait_object(source, obligation.param_env)\n                         {\n                             if deref_output_trait_did == target_trait_did {\n                                 self.tcx().struct_span_lint_hir("}]}