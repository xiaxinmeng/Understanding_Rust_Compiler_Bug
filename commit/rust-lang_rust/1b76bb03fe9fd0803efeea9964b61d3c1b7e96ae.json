{"sha": "1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNzZiYjAzZmU5ZmQwODAzZWZlZWE5OTY0YjYxZDNjMWI3ZTk2YWU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-02-21T20:38:29Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-04-08T06:09:47Z"}, "message": "Stabilize some of alloc_layout_extras", "tree": {"sha": "423f0de5cccdaaa04fb5bec66e33d6a89769822f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423f0de5cccdaaa04fb5bec66e33d6a89769822f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae", "html_url": "https://github.com/rust-lang/rust/commit/1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42abbd8878d3b67238f3611b0587c704ba94f39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42abbd8878d3b67238f3611b0587c704ba94f39c", "html_url": "https://github.com/rust-lang/rust/commit/42abbd8878d3b67238f3611b0587c704ba94f39c"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "98f9054588a8778d9f4bc62fd2530b860ae21164", "filename": "src/libcore/alloc/layout.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae/src%2Flibcore%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae/src%2Flibcore%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Flayout.rs?ref=1b76bb03fe9fd0803efeea9964b61d3c1b7e96ae", "patch": "@@ -162,7 +162,7 @@ impl Layout {\n     /// Returns an error if the combination of `self.size()` and the given\n     /// `align` violates the conditions listed in\n     /// [`Layout::from_size_align`](#method.from_size_align).\n-    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn align_to(&self, align: usize) -> Result<Self, LayoutErr> {\n         Layout::from_size_align(self.size(), cmp::max(self.align(), align))\n@@ -218,7 +218,7 @@ impl Layout {\n     ///\n     /// This is equivalent to adding the result of `padding_needed_for`\n     /// to the layout's current size.\n-    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn pad_to_align(&self) -> Layout {\n         let pad = self.padding_needed_for(self.align());\n@@ -258,19 +258,17 @@ impl Layout {\n \n     /// Creates a layout describing the record for `self` followed by\n     /// `next`, including any necessary padding to ensure that `next`\n-    /// will be properly aligned. Note that the resulting layout will\n-    /// satisfy the alignment properties of both `self` and `next`.\n-    ///\n-    /// The resulting layout will be the same as that of a C struct containing\n-    /// two fields with the layouts of `self` and `next`, in that order.\n+    /// will be properly aligned, but no trailing padding. Note that\n+    /// the resulting layout will satisfy the alignment properties of\n+    /// both `self` and `next`, in order to ensure field alignment.\n     ///\n-    /// Returns `Some((k, offset))`, where `k` is layout of the concatenated\n+    /// Returns `Ok((k, offset))`, where `k` is layout of the concatenated\n     /// record and `offset` is the relative location, in bytes, of the\n     /// start of the `next` embedded within the concatenated record\n     /// (assuming that the record itself starts at offset 0).\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutErr> {\n         let new_align = cmp::max(self.align(), next.align());\n@@ -318,13 +316,12 @@ impl Layout {\n     /// Creates a layout describing the record for a `[T; n]`.\n     ///\n     /// On arithmetic overflow, returns `LayoutErr`.\n-    #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn array<T>(n: usize) -> Result<Self, LayoutErr> {\n-        Layout::new::<T>().repeat(n).map(|(k, offs)| {\n-            debug_assert!(offs == mem::size_of::<T>());\n-            k\n-        })\n+        let (layout, offset) = Layout::new::<T>().repeat(n)?;\n+        debug_assert_eq!(offset, mem::size_of::<T>());\n+        Ok(layout.pad_to_align())\n     }\n }\n "}]}