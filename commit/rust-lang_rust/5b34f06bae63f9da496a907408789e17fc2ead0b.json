{"sha": "5b34f06bae63f9da496a907408789e17fc2ead0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzRmMDZiYWU2M2Y5ZGE0OTZhOTA3NDA4Nzg5ZTE3ZmMyZWFkMGI=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-25T00:56:23Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-23T21:02:49Z"}, "message": "Add shims for mkdir and rmdir", "tree": {"sha": "8a3debdc8c44f227db290c79357412ed1aa34909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3debdc8c44f227db290c79357412ed1aa34909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b34f06bae63f9da496a907408789e17fc2ead0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b34f06bae63f9da496a907408789e17fc2ead0b", "html_url": "https://github.com/rust-lang/rust/commit/5b34f06bae63f9da496a907408789e17fc2ead0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b34f06bae63f9da496a907408789e17fc2ead0b/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b0bbf85989cdcc88e49d544f027833f1e7782f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b0bbf85989cdcc88e49d544f027833f1e7782f", "html_url": "https://github.com/rust-lang/rust/commit/29b0bbf85989cdcc88e49d544f027833f1e7782f"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "e520e23199e3cead5ed6e8a8c432f03886b74a9c", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b34f06bae63f9da496a907408789e17fc2ead0b/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34f06bae63f9da496a907408789e17fc2ead0b/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=5b34f06bae63f9da496a907408789e17fc2ead0b", "patch": "@@ -109,6 +109,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"mkdir\" => {\n+                let result = this.mkdir(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"rmdir\" => {\n+                let result = this.rmdir(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"lseek\" | \"lseek64\" => {\n                 let result = this.lseek64(args[0], args[1], args[2])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "45471a638a18eaf8292246ff82ea6d41faa9fc0f", "filename": "src/shims/fs.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5b34f06bae63f9da496a907408789e17fc2ead0b/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34f06bae63f9da496a907408789e17fc2ead0b/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=5b34f06bae63f9da496a907408789e17fc2ead0b", "patch": "@@ -1,6 +1,6 @@\n use std::collections::BTreeMap;\n use std::convert::{TryFrom, TryInto};\n-use std::fs::{remove_file, rename, File, OpenOptions};\n+use std::fs::{remove_dir, remove_file, rename, DirBuilder, File, OpenOptions};\n use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::PathBuf;\n use std::time::SystemTime;\n@@ -722,6 +722,45 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.try_unwrap_io_result(result)\n     }\n+\n+    fn mkdir(\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>,\n+        mode_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"mkdir\")?;\n+\n+        let mode = this.read_scalar(mode_op)?.to_u32()?;\n+\n+        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+\n+        let mut builder = DirBuilder::new();\n+        #[cfg(target_family = \"unix\")]\n+        {\n+            use std::os::unix::fs::DirBuilderExt;\n+            builder.mode(mode);\n+        }\n+        let result = builder.create(path).map(|_| 0i32);\n+\n+        this.try_unwrap_io_result(result)\n+    }\n+\n+    fn rmdir(\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"rmdir\")?;\n+\n+        let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+\n+        let result = remove_dir(path).map(|_| 0i32);\n+\n+        this.try_unwrap_io_result(result)\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "7f920d8c19d8ef9eb50d6723aafad7ac5d9ea1bf", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b34f06bae63f9da496a907408789e17fc2ead0b/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b34f06bae63f9da496a907408789e17fc2ead0b/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=5b34f06bae63f9da496a907408789e17fc2ead0b", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n-use std::fs::{File, remove_file, rename};\n+use std::fs::{File, create_dir, remove_dir, remove_dir_all, remove_file, rename};\n use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n@@ -13,6 +13,7 @@ fn main() {\n     test_symlink();\n     test_errors();\n     test_rename();\n+    test_directory();\n }\n \n /// Prepare: compute filename and make sure the file does not exist.\n@@ -24,6 +25,15 @@ fn prepare(filename: &str) -> PathBuf {\n     path\n }\n \n+/// Prepare directory: compute directory name and make sure it does not exist.\n+fn prepare_dir(dirname: &str) -> PathBuf {\n+    let tmp = std::env::temp_dir();\n+    let path = tmp.join(&dirname);\n+    // Clean the directory for robustness.\n+    remove_dir_all(&path).ok();\n+    path\n+}\n+\n /// Prepare like above, and also write some initial content to the file.\n fn prepare_with_content(filename: &str, content: &[u8]) -> PathBuf {\n     let path = prepare(filename);\n@@ -182,3 +192,15 @@ fn test_rename() {\n \n     remove_file(&path2).unwrap();\n }\n+\n+fn test_directory() {\n+    let dir_path = prepare_dir(\"miri_test_fs_dir\");\n+    // Creating a directory should succeed.\n+    create_dir(&dir_path).unwrap();\n+    // Test that the metadata of a directory is correct.\n+    assert!(dir_path.metadata().unwrap().is_dir());\n+    // Deleting the directory should succeed.\n+    remove_dir(&dir_path).unwrap();\n+    // Reading the metadata of a non-existent file should fail with a \"not found\" error.\n+    assert_eq!(ErrorKind::NotFound, check_metadata(&[], &dir_path).unwrap_err().kind());\n+}"}]}