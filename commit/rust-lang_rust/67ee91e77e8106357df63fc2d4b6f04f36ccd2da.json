{"sha": "67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZWU5MWU3N2U4MTA2MzU3ZGY2M2ZjMmQ0YjZmMDRmMzZjY2QyZGE=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-11T17:50:09Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-11T17:50:09Z"}, "message": "remove attempt at fn call", "tree": {"sha": "da97bafcfe902d4de1908105d72925bfc5044ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da97bafcfe902d4de1908105d72925bfc5044ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "html_url": "https://github.com/rust-lang/rust/commit/67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ee91e77e8106357df63fc2d4b6f04f36ccd2da/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "html_url": "https://github.com/rust-lang/rust/commit/2271376fb224661fd8b7e5e5788217e8fe9e5ecc"}], "stats": {"total": 70, "additions": 1, "deletions": 69}, "files": [{"sha": "118c6e9a27363da4243c6f3ad2c22d7dc02c49e5", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/67ee91e77e8106357df63fc2d4b6f04f36ccd2da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ee91e77e8106357df63fc2d4b6f04f36ccd2da/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=67ee91e77e8106357df63fc2d4b6f04f36ccd2da", "patch": "@@ -472,7 +472,7 @@ pub fn check_must_not_suspend_ty<'tcx>(\n \n     let plural_suffix = pluralize!(plural_len);\n \n-    let emitted = match *ty.kind() {\n+    match *ty.kind() {\n         ty::Adt(..) if ty.is_box() => {\n             let boxed_ty = ty.boxed_ty();\n             let descr_pre = &format!(\"{}boxed \", descr_pre);\n@@ -589,58 +589,6 @@ pub fn check_must_not_suspend_ty<'tcx>(\n             }\n         },\n         _ => false,\n-    };\n-\n-    // Don't move onto the \"return value\" path if we already sent a diagnostic\n-    if emitted {\n-        return true;\n-    }\n-\n-    match expr {\n-        Some(expr) => match expr.kind {\n-            hir::ExprKind::Call(ref callee, _) => {\n-                match callee.kind {\n-                    hir::ExprKind::Path(ref qpath) => {\n-                        match fcx.typeck_results.borrow().qpath_res(qpath, callee.hir_id) {\n-                            Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) => {\n-                                check_must_not_suspend_def(\n-                                    fcx.tcx,\n-                                    def_id,\n-                                    hir_id,\n-                                    source_span,\n-                                    yield_span,\n-                                    \"return value of \",\n-                                    \"\",\n-                                )\n-                            }\n-\n-                            // `Res::Local` if it was a closure, for which we\n-                            // do not currently support must-not-suspend linting\n-                            _ => false,\n-                        }\n-                    }\n-                    _ => false,\n-                }\n-            }\n-            hir::ExprKind::MethodCall(..) => {\n-                if let Some(def_id) = fcx.typeck_results.borrow().type_dependent_def_id(expr.hir_id)\n-                {\n-                    check_must_not_suspend_def(\n-                        fcx.tcx,\n-                        def_id,\n-                        hir_id,\n-                        source_span,\n-                        yield_span,\n-                        \"return value of \",\n-                        \"\",\n-                    )\n-                } else {\n-                    false\n-                }\n-            }\n-            _ => false,\n-        },\n-        None => false,\n     }\n }\n \n@@ -687,22 +635,6 @@ fn check_must_not_suspend_def(\n                 },\n             );\n \n-            /*\n-            cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n-                let msg = format!(\n-                    \"unused {}`{}`{} that must be used\",\n-                    descr_pre_path,\n-                    cx.tcx.def_path_str(def_id),\n-                    descr_post_path\n-                );\n-                let mut err = lint.build(&msg);\n-                // check for #[must_use = \"...\"]\n-                if let Some(note) = attr.value_str() {\n-                    err.note(&note.as_str());\n-                }\n-                err.emit();\n-            });\n-            */\n             return true;\n         }\n     }"}]}