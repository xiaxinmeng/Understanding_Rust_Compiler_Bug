{"sha": "788036df286f2598f259bf6725376d3a40e2a12d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODAzNmRmMjg2ZjI1OThmMjU5YmY2NzI1Mzc2ZDNhNDBlMmExMmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-29T00:17:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-29T00:17:34Z"}, "message": "Rollup merge of #81287 - CraftSpider:json-crate, r=jyn514,GuillaumeGomez\n\nSplit rustdoc JSON types into separately versioned crate\n\nFor now just an in-tree change.\n\nIn the future, this may be exposed as a standalone crate with standard semver.", "tree": {"sha": "d5bf1928e2ba361057100b57074ec5e7bea90708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5bf1928e2ba361057100b57074ec5e7bea90708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/788036df286f2598f259bf6725376d3a40e2a12d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgE1QfCRBK7hj4Ov3rIwAAdHIIAH3bgSo1NNnHclYT4SFkfWbY\nLeE4dWnY9f8JjKPpv3WWBgB7KTuxynJIeRzoAtxaiwl67KTqMF3oQnHNcdfWes+Y\nKfpRNYwFLE0Ta++VXzrqhkotFkIev9lrcqMSZ2vVuYr+TXFhvZEHukb4wM9JrGll\noCPWMnvEtFIW1XBlQn/kc5wUsyUfbheh4+V6DcxtHohfyvZcU9OV/xkXjLh/6UH7\naDuq1qjYKTUJLK4vBOcgLRC0nOiSQ5kFqS1cniFO+1UuTu5Mk0c79q5ZYfBDzGqW\nGDPI3qNzLGlyHXfyDplSHn7+Z4ifl6rkqLL9z5E2nBKvrQOqXKnwqqjrt47U854=\n=NzHM\n-----END PGP SIGNATURE-----\n", "payload": "tree d5bf1928e2ba361057100b57074ec5e7bea90708\nparent 0c5fccea22f5ead38b4c9521c77af93ddcb55bff\nparent 3aa8456c884a4c230ee34e79bf3d2fcc6c379658\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611879454 +0900\ncommitter GitHub <noreply@github.com> 1611879454 +0900\n\nRollup merge of #81287 - CraftSpider:json-crate, r=jyn514,GuillaumeGomez\n\nSplit rustdoc JSON types into separately versioned crate\n\nFor now just an in-tree change.\n\nIn the future, this may be exposed as a standalone crate with standard semver.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/788036df286f2598f259bf6725376d3a40e2a12d", "html_url": "https://github.com/rust-lang/rust/commit/788036df286f2598f259bf6725376d3a40e2a12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/788036df286f2598f259bf6725376d3a40e2a12d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5fccea22f5ead38b4c9521c77af93ddcb55bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5fccea22f5ead38b4c9521c77af93ddcb55bff", "html_url": "https://github.com/rust-lang/rust/commit/0c5fccea22f5ead38b4c9521c77af93ddcb55bff"}, {"sha": "3aa8456c884a4c230ee34e79bf3d2fcc6c379658", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa8456c884a4c230ee34e79bf3d2fcc6c379658", "html_url": "https://github.com/rust-lang/rust/commit/3aa8456c884a4c230ee34e79bf3d2fcc6c379658"}], "stats": {"total": 147, "additions": 88, "deletions": 59}, "files": [{"sha": "a4ba7704426e86cd0bf94e127dc4d593f6f76af1", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -4392,12 +4392,20 @@ dependencies = [\n  \"pulldown-cmark 0.8.0\",\n  \"regex\",\n  \"rustc-rayon\",\n+ \"rustdoc-json-types\",\n  \"serde\",\n  \"serde_json\",\n  \"smallvec 1.4.2\",\n  \"tempfile\",\n ]\n \n+[[package]]\n+name = \"rustdoc-json-types\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"rustdoc-themes\"\n version = \"0.1.0\""}, {"sha": "f3b2e0f740d61e5ad94dcea4018ed375d00cd562", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -4,6 +4,7 @@ members = [\n   \"compiler/rustc\",\n   \"library/std\",\n   \"library/test\",\n+  \"src/rustdoc-json-types\",\n   \"src/tools/cargotest\",\n   \"src/tools/clippy\",\n   \"src/tools/compiletest\","}, {"sha": "db64b31f31cfcf81dc51224d130870e5f8b8ba84", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -17,6 +17,7 @@ smallvec = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.9\"\n regex = \"1\"\n+rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "b2e5c8834b8ffa65236119bd00d47cd2afd801b3", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 37, "deletions": 46, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -9,9 +9,10 @@ use rustc_hir::def::CtorKind;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::Pos;\n \n+use rustdoc_json_types::*;\n+\n use crate::clean;\n use crate::formats::item_type::ItemType;\n-use crate::json::types::*;\n use crate::json::JsonRenderer;\n \n impl JsonRenderer<'_> {\n@@ -22,7 +23,7 @@ impl JsonRenderer<'_> {\n         match *kind {\n             clean::StrippedItem(_) => None,\n             kind => Some(Item {\n-                id: def_id.into(),\n+                id: from_def_id(def_id),\n                 crate_id: def_id.krate.as_u32(),\n                 name: name.map(|sym| sym.to_string()),\n                 source: self.convert_span(source),\n@@ -32,15 +33,15 @@ impl JsonRenderer<'_> {\n                     .links\n                     .into_iter()\n                     .filter_map(|clean::ItemLink { link, did, .. }| {\n-                        did.map(|did| (link, did.into()))\n+                        did.map(|did| (link, from_def_id(did)))\n                     })\n                     .collect(),\n                 attrs: attrs\n                     .other_attrs\n                     .iter()\n                     .map(rustc_ast_pretty::pprust::attribute_to_string)\n                     .collect(),\n-                deprecation: deprecation.map(Into::into),\n+                deprecation: deprecation.map(from_deprecation),\n                 kind: item_type.into(),\n                 inner: kind.into(),\n             }),\n@@ -74,19 +75,17 @@ impl JsonRenderer<'_> {\n             Inherited => Visibility::Default,\n             Restricted(did) if did.index == CRATE_DEF_INDEX => Visibility::Crate,\n             Restricted(did) => Visibility::Restricted {\n-                parent: did.into(),\n+                parent: from_def_id(did),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n     }\n }\n \n-impl From<rustc_attr::Deprecation> for Deprecation {\n-    fn from(deprecation: rustc_attr::Deprecation) -> Self {\n-        #[rustfmt::skip]\n-        let rustc_attr::Deprecation { since, note, is_since_rustc_version: _, suggestion: _ } = deprecation;\n-        Deprecation { since: since.map(|s| s.to_string()), note: note.map(|s| s.to_string()) }\n-    }\n+crate fn from_deprecation(deprecation: rustc_attr::Deprecation) -> Deprecation {\n+    #[rustfmt::skip]\n+    let rustc_attr::Deprecation { since, note, is_since_rustc_version: _, suggestion: _ } = deprecation;\n+    Deprecation { since: since.map(|s| s.to_string()), note: note.map(|s| s.to_string()) }\n }\n \n impl From<clean::GenericArgs> for GenericArgs {\n@@ -141,10 +140,8 @@ impl From<clean::TypeBindingKind> for TypeBindingKind {\n     }\n }\n \n-impl From<DefId> for Id {\n-    fn from(did: DefId) -> Self {\n-        Id(format!(\"{}:{}\", did.krate.as_u32(), u32::from(did.index)))\n-    }\n+crate fn from_def_id(did: DefId) -> Id {\n+    Id(format!(\"{}:{}\", did.krate.as_u32(), u32::from(did.index)))\n }\n \n impl From<clean::ItemKind> for ItemEnum {\n@@ -199,7 +196,7 @@ impl From<clean::Struct> for Struct {\n     fn from(struct_: clean::Struct) -> Self {\n         let clean::Struct { struct_type, generics, fields, fields_stripped } = struct_;\n         Struct {\n-            struct_type: struct_type.into(),\n+            struct_type: from_ctor_kind(struct_type),\n             generics: generics.into(),\n             fields_stripped,\n             fields: ids(fields),\n@@ -221,13 +218,11 @@ impl From<clean::Union> for Struct {\n     }\n }\n \n-impl From<CtorKind> for StructType {\n-    fn from(struct_type: CtorKind) -> Self {\n-        match struct_type {\n-            CtorKind::Fictive => StructType::Plain,\n-            CtorKind::Fn => StructType::Tuple,\n-            CtorKind::Const => StructType::Unit,\n-        }\n+crate fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n+    match struct_type {\n+        CtorKind::Fictive => StructType::Plain,\n+        CtorKind::Fn => StructType::Tuple,\n+        CtorKind::Const => StructType::Unit,\n     }\n }\n \n@@ -310,22 +305,20 @@ impl From<clean::GenericBound> for GenericBound {\n                 GenericBound::TraitBound {\n                     trait_: trait_.into(),\n                     generic_params: generic_params.into_iter().map(Into::into).collect(),\n-                    modifier: modifier.into(),\n+                    modifier: from_trait_bound_modifier(modifier),\n                 }\n             }\n             Outlives(lifetime) => GenericBound::Outlives(lifetime.0.to_string()),\n         }\n     }\n }\n \n-impl From<rustc_hir::TraitBoundModifier> for TraitBoundModifier {\n-    fn from(modifier: rustc_hir::TraitBoundModifier) -> Self {\n-        use rustc_hir::TraitBoundModifier::*;\n-        match modifier {\n-            None => TraitBoundModifier::None,\n-            Maybe => TraitBoundModifier::Maybe,\n-            MaybeConst => TraitBoundModifier::MaybeConst,\n-        }\n+crate fn from_trait_bound_modifier(modifier: rustc_hir::TraitBoundModifier) -> TraitBoundModifier {\n+    use rustc_hir::TraitBoundModifier::*;\n+    match modifier {\n+        None => TraitBoundModifier::None,\n+        Maybe => TraitBoundModifier::Maybe,\n+        MaybeConst => TraitBoundModifier::MaybeConst,\n     }\n }\n \n@@ -335,7 +328,7 @@ impl From<clean::Type> for Type {\n         match ty {\n             ResolvedPath { path, param_names, did, is_generic: _ } => Type::ResolvedPath {\n                 name: path.whole_name(),\n-                id: did.into(),\n+                id: from_def_id(did),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into())),\n                 param_names: param_names\n                     .map(|v| v.into_iter().map(Into::into).collect())\n@@ -470,7 +463,7 @@ impl From<clean::VariantStruct> for Struct {\n     fn from(struct_: clean::VariantStruct) -> Self {\n         let clean::VariantStruct { struct_type, fields, fields_stripped } = struct_;\n         Struct {\n-            struct_type: struct_type.into(),\n+            struct_type: from_ctor_kind(struct_type),\n             generics: Default::default(),\n             fields_stripped,\n             fields: ids(fields),\n@@ -497,13 +490,13 @@ impl From<clean::Import> for Import {\n             Simple(s) => Import {\n                 span: import.source.path.whole_name(),\n                 name: s.to_string(),\n-                id: import.source.did.map(Into::into),\n+                id: import.source.did.map(from_def_id),\n                 glob: false,\n             },\n             Glob => Import {\n                 span: import.source.path.whole_name(),\n                 name: import.source.path.last_name().to_string(),\n-                id: import.source.did.map(Into::into),\n+                id: import.source.did.map(from_def_id),\n                 glob: true,\n             },\n         }\n@@ -513,20 +506,18 @@ impl From<clean::Import> for Import {\n impl From<clean::ProcMacro> for ProcMacro {\n     fn from(mac: clean::ProcMacro) -> Self {\n         ProcMacro {\n-            kind: mac.kind.into(),\n+            kind: from_macro_kind(mac.kind),\n             helpers: mac.helpers.iter().map(|x| x.to_string()).collect(),\n         }\n     }\n }\n \n-impl From<rustc_span::hygiene::MacroKind> for MacroKind {\n-    fn from(kind: rustc_span::hygiene::MacroKind) -> Self {\n-        use rustc_span::hygiene::MacroKind::*;\n-        match kind {\n-            Bang => MacroKind::Bang,\n-            Attr => MacroKind::Attr,\n-            Derive => MacroKind::Derive,\n-        }\n+crate fn from_macro_kind(kind: rustc_span::hygiene::MacroKind) -> MacroKind {\n+    use rustc_span::hygiene::MacroKind::*;\n+    match kind {\n+        Bang => MacroKind::Bang,\n+        Attr => MacroKind::Attr,\n+        Derive => MacroKind::Derive,\n     }\n }\n \n@@ -599,5 +590,5 @@ impl From<ItemType> for ItemKind {\n }\n \n fn ids(items: impl IntoIterator<Item = clean::Item>) -> Vec<Id> {\n-    items.into_iter().filter(|x| !x.is_stripped()).map(|i| i.def_id.into()).collect()\n+    items.into_iter().filter(|x| !x.is_stripped()).map(|i| from_def_id(i.def_id)).collect()\n }"}, {"sha": "a7c875fb7480bacb4bf7a38108e967d72cbbf73c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -5,7 +5,6 @@\n //! docs for usage and details.\n \n mod conversions;\n-pub mod types;\n \n use std::cell::RefCell;\n use std::fs::File;\n@@ -17,12 +16,15 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n \n+use rustdoc_json_types as types;\n+\n use crate::clean;\n use crate::config::{RenderInfo, RenderOptions};\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n use crate::html::render::cache::ExternalLocation;\n+use crate::json::conversions::from_def_id;\n \n #[derive(Clone)]\n crate struct JsonRenderer<'tcx> {\n@@ -50,7 +52,7 @@ impl JsonRenderer<'_> {\n                     .map(|i| {\n                         let item = &i.impl_item;\n                         self.item(item.clone()).unwrap();\n-                        item.def_id.into()\n+                        from_def_id(item.def_id)\n                     })\n                     .collect()\n             })\n@@ -68,7 +70,7 @@ impl JsonRenderer<'_> {\n                         let item = &i.impl_item;\n                         if item.def_id.is_local() {\n                             self.item(item.clone()).unwrap();\n-                            Some(item.def_id.into())\n+                            Some(from_def_id(item.def_id))\n                         } else {\n                             None\n                         }\n@@ -87,9 +89,9 @@ impl JsonRenderer<'_> {\n                 if !id.is_local() {\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n                     Some((\n-                        id.into(),\n+                        from_def_id(id),\n                         types::Item {\n-                            id: id.into(),\n+                            id: from_def_id(id),\n                             crate_id: id.krate.as_u32(),\n                             name: self\n                                 .cache\n@@ -163,7 +165,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             } else if let types::ItemEnum::EnumItem(ref mut e) = new_item.inner {\n                 e.impls = self.get_impls(id)\n             }\n-            let removed = self.index.borrow_mut().insert(id.into(), new_item.clone());\n+            let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());\n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n             // to make sure the items are unique.\n             if let Some(old_item) = removed {\n@@ -203,11 +205,14 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         debug!(\"Done with crate\");\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());\n+        // This needs to be the default HashMap for compatibility with the public interface for\n+        // rustdoc-json\n+        #[allow(rustc::default_hash_types)]\n         let output = types::Crate {\n             root: types::Id(String::from(\"0:0\")),\n             crate_version: krate.version.clone(),\n             includes_private: self.cache.document_private,\n-            index,\n+            index: index.into_iter().collect(),\n             paths: self\n                 .cache\n                 .paths\n@@ -216,7 +221,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(self.cache.external_paths.clone().into_iter())\n                 .map(|(k, (path, kind))| {\n                     (\n-                        k.into(),\n+                        from_def_id(k),\n                         types::ItemSummary { crate_id: k.krate.as_u32(), path, kind: kind.into() },\n                     )\n                 })"}, {"sha": "7bba16a68b96c175fa8b30df87bf1ed1285f5a8d", "filename": "src/rustdoc-json-types/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/src%2Frustdoc-json-types%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/src%2Frustdoc-json-types%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2FCargo.toml?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"rustdoc-json-types\"\n+version = \"0.1.0\"\n+authors = [\"The Rust Project Developers\"]\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\"\n+\n+[dependencies]\n+serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "1e67d37655c6eaae31a0bd95ec190a8abcf4d53e", "filename": "src/rustdoc-json-types/README.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/src%2Frustdoc-json-types%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/src%2Frustdoc-json-types%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2FREADME.md?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -0,0 +1,12 @@\n+# Rustdoc JSON Types\n+\n+This crate exposes the Rustdoc JSON API as a set of types with serde implementations.\n+These types are part of the public interface of the rustdoc JSON output, and making them\n+their own crate allows them to be versioned and distributed without having to depend on\n+any rustc/rustdoc internals. This way, consumers can rely on this crate for both documentation\n+of the output, and as a way to read the output easily, and its versioning is intended to\n+follow semver guarantees about the version of the format. JSON format X will always be\n+compatible with rustdoc-json-types version N.\n+\n+Currently, this crate is only used by rustdoc itself. Upon the stabilization of\n+rustdoc-json, it may be distributed separately for consumers of the API."}, {"sha": "3fb2a32d5a0a33fc82d7badd7656d9a7b08eaca6", "filename": "src/rustdoc-json-types/lib.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/788036df286f2598f259bf6725376d3a40e2a12d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/788036df286f2598f259bf6725376d3a40e2a12d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=788036df286f2598f259bf6725376d3a40e2a12d", "patch": "@@ -3,9 +3,9 @@\n //! These types are the public API exposed through the `--output-format json` flag. The [`Crate`]\n //! struct is the root of the JSON blob and all other items are contained within.\n \n+use std::collections::HashMap;\n use std::path::PathBuf;\n \n-use rustc_data_structures::fx::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n@@ -21,11 +21,11 @@ pub struct Crate {\n     pub includes_private: bool,\n     /// A collection of all items in the local crate as well as some external traits and their\n     /// items that are referenced locally.\n-    pub index: FxHashMap<Id, Item>,\n+    pub index: HashMap<Id, Item>,\n     /// Maps IDs to fully qualified paths and other info helpful for generating links.\n-    pub paths: FxHashMap<Id, ItemSummary>,\n+    pub paths: HashMap<Id, ItemSummary>,\n     /// Maps `crate_id` of items to a crate name and html_root_url if it exists.\n-    pub external_crates: FxHashMap<u32, ExternalCrate>,\n+    pub external_crates: HashMap<u32, ExternalCrate>,\n     /// A single version number to be used in the future when making backwards incompatible changes\n     /// to the JSON output.\n     pub format_version: u32,\n@@ -72,7 +72,7 @@ pub struct Item {\n     /// Some(\"\") if there is some documentation but it is empty (EG `#[doc = \"\"]`).\n     pub docs: Option<String>,\n     /// This mapping resolves [intra-doc links](https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md) from the docstring to their IDs\n-    pub links: FxHashMap<String, Id>,\n+    pub links: HashMap<String, Id>,\n     /// Stringified versions of the attributes on this item (e.g. `\"#[inline]\"`)\n     pub attrs: Vec<String>,\n     pub deprecation: Option<Deprecation>,", "previous_filename": "src/librustdoc/json/types.rs"}]}