{"sha": "3cb625e4683c43991de6fc27d6b4e0db5a34011f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjYyNWU0NjgzYzQzOTkxZGU2ZmMyN2Q2YjRlMGRiNWEzNDAxMWY=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-31T15:08:56Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-08-02T17:09:38Z"}, "message": "Various adjustments to historic tests and documents.", "tree": {"sha": "24fe8c252757e305e94b55febe728ff29b9089d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24fe8c252757e305e94b55febe728ff29b9089d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb625e4683c43991de6fc27d6b4e0db5a34011f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb625e4683c43991de6fc27d6b4e0db5a34011f", "html_url": "https://github.com/rust-lang/rust/commit/3cb625e4683c43991de6fc27d6b4e0db5a34011f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb625e4683c43991de6fc27d6b4e0db5a34011f/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14433347945af2c514074c1d66066ee9f5e8a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14433347945af2c514074c1d66066ee9f5e8a72", "html_url": "https://github.com/rust-lang/rust/commit/a14433347945af2c514074c1d66066ee9f5e8a72"}], "stats": {"total": 532, "additions": 334, "deletions": 198}, "files": [{"sha": "3697ae38f9d818f38512c4b49f4dd4f9e45c9e50", "filename": "src/doc/unstable-book/src/language-features/trait-upcasting.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrait-upcasting.md", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrait-upcasting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftrait-upcasting.md?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,17 +1,18 @@\n # `trait_upcasting`\n \n-The tracking issue for this feature is: [#31436]\n+The tracking issue for this feature is: [#65991]\n \n [#65991]: https://github.com/rust-lang/rust/issues/65991\n \n ------------------------\n \n-The `trait_upcasting` feature adds support for trait upcasting. This allows a\n-trait object of type `dyn Foo` to be cast to a trait object of type `dyn Bar`\n-so long as `Foo: Bar`.\n+The `trait_upcasting` feature adds support for trait upcasting coercion. This allows a\n+trait object of type `dyn Bar` to be cast to a trait object of type `dyn Foo`\n+so long as `Bar: Foo`.\n \n ```rust,edition2018\n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n trait Foo {}\n \n@@ -21,6 +22,6 @@ impl Foo for i32 {}\n \n impl<T: Foo + ?Sized> Bar for T {}\n \n-let foo: &dyn Foo = &123;\n-let bar: &dyn Bar = foo;\n+let bar: &dyn Bar = &123;\n+let foo: &dyn Foo = bar;\n ```"}, {"sha": "484a222bc012d4381b170c1ac235c3c3d47034eb", "filename": "src/test/ui/traits/trait-upcasting/basic.rs", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,43 +1,59 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n-    fn a(&self) -> i32 { 10 }\n+    fn a(&self) -> i32 {\n+        10\n+    }\n \n-    fn z(&self) -> i32 { 11 }\n+    fn z(&self) -> i32 {\n+        11\n+    }\n \n-    fn y(&self) -> i32 { 12 }\n+    fn y(&self) -> i32 {\n+        12\n+    }\n }\n \n trait Bar: Foo {\n-    fn b(&self) -> i32 { 20 }\n+    fn b(&self) -> i32 {\n+        20\n+    }\n \n-    fn w(&self) -> i32 { 21 }\n+    fn w(&self) -> i32 {\n+        21\n+    }\n }\n \n trait Baz: Bar {\n-    fn c(&self) -> i32 { 30 }\n+    fn c(&self) -> i32 {\n+        30\n+    }\n }\n \n impl Foo for i32 {\n-    fn a(&self) -> i32 { 100 }\n+    fn a(&self) -> i32 {\n+        100\n+    }\n }\n \n impl Bar for i32 {\n-    fn b(&self) -> i32 { 200 }\n+    fn b(&self) -> i32 {\n+        200\n+    }\n }\n \n impl Baz for i32 {\n-    fn c(&self) -> i32 { 300 }\n+    fn c(&self) -> i32 {\n+        300\n+    }\n }\n \n fn main() {\n     let baz: &dyn Baz = &1;\n     let _: &dyn std::fmt::Debug = baz;\n-    let _: &(dyn Send + Sync) = baz;\n-    let _: &dyn Send = baz;\n-    let _: &dyn Sync = baz;\n     assert_eq!(*baz, 1);\n     assert_eq!(baz.a(), 100);\n     assert_eq!(baz.b(), 200);\n@@ -48,9 +64,6 @@ fn main() {\n \n     let bar: &dyn Bar = baz;\n     let _: &dyn std::fmt::Debug = bar;\n-    let _: &(dyn Send + Sync) = bar;\n-    let _: &dyn Send = bar;\n-    let _: &dyn Sync = bar;\n     assert_eq!(*bar, 1);\n     assert_eq!(bar.a(), 100);\n     assert_eq!(bar.b(), 200);\n@@ -60,19 +73,13 @@ fn main() {\n \n     let foo: &dyn Foo = baz;\n     let _: &dyn std::fmt::Debug = foo;\n-    let _: &(dyn Send + Sync) = foo;\n-    let _: &dyn Send = foo;\n-    let _: &dyn Sync = foo;\n     assert_eq!(*foo, 1);\n     assert_eq!(foo.a(), 100);\n     assert_eq!(foo.z(), 11);\n     assert_eq!(foo.y(), 12);\n \n     let foo: &dyn Foo = bar;\n     let _: &dyn std::fmt::Debug = foo;\n-    let _: &(dyn Send + Sync) = foo;\n-    let _: &dyn Send = foo;\n-    let _: &dyn Sync = foo;\n     assert_eq!(*foo, 1);\n     assert_eq!(foo.a(), 100);\n     assert_eq!(foo.z(), 11);"}, {"sha": "511e41562b2203e49cfd395e487bee2da9673fa1", "filename": "src/test/ui/traits/trait-upcasting/cyclic-trait-resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,5 +1,5 @@\n trait A: B + A {}\n-//~^ ERROR cycle detected when computing the supertraits of `A` [E0391]\n+//~^ ERROR cycle detected when computing the super predicates of `A` [E0391]\n \n trait B {}\n "}, {"sha": "ac005725ab48527f594766d47df862f6473c1786", "filename": "src/test/ui/traits/trait-upcasting/cyclic-trait-resolution.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcyclic-trait-resolution.stderr?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,10 +1,15 @@\n-error[E0391]: cycle detected when computing the supertraits of `A`\n+error[E0391]: cycle detected when computing the super predicates of `A`\n+  --> $DIR/cyclic-trait-resolution.rs:1:1\n+   |\n+LL | trait A: B + A {}\n+   | ^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing the super traits of `A`...\n   --> $DIR/cyclic-trait-resolution.rs:1:14\n    |\n LL | trait A: B + A {}\n    |              ^\n-   |\n-   = note: ...which again requires computing the supertraits of `A`, completing the cycle\n+   = note: ...which again requires computing the super predicates of `A`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cyclic-trait-resolution.rs:1:1\n    |"}, {"sha": "e4e23c1a26e78d8072b12df911b0c7eada1d2b6a", "filename": "src/test/ui/traits/trait-upcasting/diamond.rs", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,53 +1,75 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n-    fn a(&self) -> i32 { 10 }\n+    fn a(&self) -> i32 {\n+        10\n+    }\n \n-    fn z(&self) -> i32 { 11 }\n+    fn z(&self) -> i32 {\n+        11\n+    }\n \n-    fn y(&self) -> i32 { 12 }\n+    fn y(&self) -> i32 {\n+        12\n+    }\n }\n \n trait Bar1: Foo {\n-    fn b(&self) -> i32 { 20 }\n+    fn b(&self) -> i32 {\n+        20\n+    }\n \n-    fn w(&self) -> i32 { 21 }\n+    fn w(&self) -> i32 {\n+        21\n+    }\n }\n \n trait Bar2: Foo {\n-    fn c(&self) -> i32 { 30 }\n+    fn c(&self) -> i32 {\n+        30\n+    }\n \n-    fn v(&self) -> i32 { 31 }\n+    fn v(&self) -> i32 {\n+        31\n+    }\n }\n \n trait Baz: Bar1 + Bar2 {\n-    fn d(&self) -> i32 { 40 }\n+    fn d(&self) -> i32 {\n+        40\n+    }\n }\n \n impl Foo for i32 {\n-    fn a(&self) -> i32 { 100 }\n+    fn a(&self) -> i32 {\n+        100\n+    }\n }\n \n impl Bar1 for i32 {\n-    fn b(&self) -> i32 { 200 }\n+    fn b(&self) -> i32 {\n+        200\n+    }\n }\n \n impl Bar2 for i32 {\n-    fn c(&self) -> i32 { 300 }\n+    fn c(&self) -> i32 {\n+        300\n+    }\n }\n \n impl Baz for i32 {\n-    fn d(&self) -> i32 { 400 }\n+    fn d(&self) -> i32 {\n+        400\n+    }\n }\n \n fn main() {\n     let baz: &dyn Baz = &1;\n     let _: &dyn std::fmt::Debug = baz;\n-    let _: &(dyn Send + Sync) = baz;\n-    let _: &dyn Send = baz;\n-    let _: &dyn Sync = baz;\n     assert_eq!(*baz, 1);\n     assert_eq!(baz.a(), 100);\n     assert_eq!(baz.b(), 200);\n@@ -60,9 +82,6 @@ fn main() {\n \n     let bar1: &dyn Bar1 = baz;\n     let _: &dyn std::fmt::Debug = bar1;\n-    let _: &(dyn Send + Sync) = bar1;\n-    let _: &dyn Send = bar1;\n-    let _: &dyn Sync = bar1;\n     assert_eq!(*bar1, 1);\n     assert_eq!(bar1.a(), 100);\n     assert_eq!(bar1.b(), 200);\n@@ -72,9 +91,6 @@ fn main() {\n \n     let bar2: &dyn Bar2 = baz;\n     let _: &dyn std::fmt::Debug = bar2;\n-    let _: &(dyn Send + Sync) = bar2;\n-    let _: &dyn Send = bar2;\n-    let _: &dyn Sync = bar2;\n     assert_eq!(*bar2, 1);\n     assert_eq!(bar2.a(), 100);\n     assert_eq!(bar2.c(), 300);\n@@ -84,25 +100,16 @@ fn main() {\n \n     let foo: &dyn Foo = baz;\n     let _: &dyn std::fmt::Debug = foo;\n-    let _: &(dyn Send + Sync) = foo;\n-    let _: &dyn Send = foo;\n-    let _: &dyn Sync = foo;\n     assert_eq!(*foo, 1);\n     assert_eq!(foo.a(), 100);\n \n     let foo: &dyn Foo = bar1;\n     let _: &dyn std::fmt::Debug = foo;\n-    let _: &(dyn Send + Sync) = foo;\n-    let _: &dyn Send = foo;\n-    let _: &dyn Sync = foo;\n     assert_eq!(*foo, 1);\n     assert_eq!(foo.a(), 100);\n \n     let foo: &dyn Foo = bar2;\n     let _: &dyn std::fmt::Debug = foo;\n-    let _: &(dyn Send + Sync) = foo;\n-    let _: &dyn Send = foo;\n-    let _: &dyn Sync = foo;\n     assert_eq!(*foo, 1);\n     assert_eq!(foo.a(), 100);\n }"}, {"sha": "24022450406a7a32e9da535ce7f275aee6d1c3d2", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,68 +1,87 @@\n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n trait Foo {\n-    fn a(&self) -> i32 { 10 }\n+    fn a(&self) -> i32 {\n+        10\n+    }\n \n-    fn z(&self) -> i32 { 11 }\n+    fn z(&self) -> i32 {\n+        11\n+    }\n \n-    fn y(&self) -> i32 { 12 }\n+    fn y(&self) -> i32 {\n+        12\n+    }\n }\n \n trait Bar {\n-    fn b(&self) -> i32 { 20 }\n+    fn b(&self) -> i32 {\n+        20\n+    }\n \n-    fn w(&self) -> i32 { 21 }\n+    fn w(&self) -> i32 {\n+        21\n+    }\n }\n \n trait Baz {\n-    fn c(&self) -> i32 { 30 }\n+    fn c(&self) -> i32 {\n+        30\n+    }\n }\n \n impl Foo for i32 {\n-    fn a(&self) -> i32 { 100 }\n+    fn a(&self) -> i32 {\n+        100\n+    }\n }\n \n impl Bar for i32 {\n-    fn b(&self) -> i32 { 200 }\n+    fn b(&self) -> i32 {\n+        200\n+    }\n }\n \n impl Baz for i32 {\n-    fn c(&self) -> i32 { 300 }\n+    fn c(&self) -> i32 {\n+        300\n+    }\n }\n \n fn main() {\n     let baz: &dyn Baz = &1;\n     let _: &dyn std::fmt::Debug = baz;\n-    //~^ ERROR `dyn Baz` doesn't implement `std::fmt::Debug` [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Send = baz;\n-    //~^ ERROR `dyn Baz` cannot be sent between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Sync = baz;\n-    //~^ ERROR `dyn Baz` cannot be shared between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n \n     let bar: &dyn Bar = baz;\n-    //~^ ERROR the trait bound `dyn Baz: Bar` is not satisfied [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn std::fmt::Debug = bar;\n-    //~^ ERROR `dyn Bar` doesn't implement `std::fmt::Debug` [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Send = bar;\n-    //~^ ERROR `dyn Bar` cannot be sent between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Sync = bar;\n-    //~^ ERROR `dyn Bar` cannot be shared between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n \n     let foo: &dyn Foo = baz;\n-    //~^ ERROR the trait bound `dyn Baz: Foo` is not satisfied [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn std::fmt::Debug = foo;\n-    //~^ ERROR `dyn Foo` doesn't implement `std::fmt::Debug` [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Send = foo;\n-    //~^ ERROR `dyn Foo` cannot be sent between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Sync = foo;\n-    //~^ ERROR `dyn Foo` cannot be shared between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n \n     let foo: &dyn Foo = bar;\n-    //~^ ERROR the trait bound `dyn Bar: Foo` is not satisfied [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn std::fmt::Debug = foo;\n-    //~^ ERROR `dyn Foo` doesn't implement `std::fmt::Debug` [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Send = foo;\n-    //~^ ERROR `dyn Foo` cannot be sent between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n     let _: &dyn Sync = foo;\n-    //~^ ERROR `dyn Foo` cannot be shared between threads safely [E0277]\n+    //~^ ERROR mismatched types [E0308]\n }"}, {"sha": "b4530ed0c3a94fcbff4f622dd4c48689fc874d6f", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.stderr", "status": "modified", "additions": 106, "deletions": 73, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,135 +1,168 @@\n-error[E0277]: `dyn Baz` doesn't implement `std::fmt::Debug`\n-  --> $DIR/invalid-upcast.rs:35:35\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:54:35\n    |\n LL |     let _: &dyn std::fmt::Debug = baz;\n-   |                                   ^^^ `dyn Baz` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |            --------------------   ^^^ expected trait `Debug`, found trait `Baz`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `dyn Baz`\n-   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: expected reference `&dyn Debug`\n+              found reference `&dyn Baz`\n \n-error[E0277]: `dyn Baz` cannot be sent between threads safely\n-  --> $DIR/invalid-upcast.rs:37:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:56:24\n    |\n LL |     let _: &dyn Send = baz;\n-   |                        ^^^ `dyn Baz` cannot be sent between threads safely\n+   |            ---------   ^^^ expected trait `Send`, found trait `Baz`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dyn Baz`\n-   = note: required for the cast to the object type `dyn std::marker::Send`\n+   = note: expected reference `&dyn Send`\n+              found reference `&dyn Baz`\n \n-error[E0277]: `dyn Baz` cannot be shared between threads safely\n-  --> $DIR/invalid-upcast.rs:39:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:58:24\n    |\n LL |     let _: &dyn Sync = baz;\n-   |                        ^^^ `dyn Baz` cannot be shared between threads safely\n+   |            ---------   ^^^ expected trait `Sync`, found trait `Baz`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `dyn Baz`\n-   = note: required for the cast to the object type `dyn std::marker::Sync`\n+   = note: expected reference `&dyn Sync`\n+              found reference `&dyn Baz`\n \n-error[E0277]: the trait bound `dyn Baz: Bar` is not satisfied\n-  --> $DIR/invalid-upcast.rs:42:25\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:61:25\n    |\n LL |     let bar: &dyn Bar = baz;\n-   |                         ^^^ the trait `Bar` is not implemented for `dyn Baz`\n+   |              --------   ^^^ expected trait `Bar`, found trait `Baz`\n+   |              |\n+   |              expected due to this\n    |\n-   = note: required for the cast to the object type `dyn Bar`\n+   = note: expected reference `&dyn Bar`\n+              found reference `&dyn Baz`\n \n-error[E0277]: `dyn Bar` doesn't implement `std::fmt::Debug`\n-  --> $DIR/invalid-upcast.rs:44:35\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:63:35\n    |\n LL |     let _: &dyn std::fmt::Debug = bar;\n-   |                                   ^^^ `dyn Bar` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |            --------------------   ^^^ expected trait `Debug`, found trait `Bar`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `dyn Bar`\n-   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: expected reference `&dyn Debug`\n+              found reference `&dyn Bar`\n \n-error[E0277]: `dyn Bar` cannot be sent between threads safely\n-  --> $DIR/invalid-upcast.rs:46:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:65:24\n    |\n LL |     let _: &dyn Send = bar;\n-   |                        ^^^ `dyn Bar` cannot be sent between threads safely\n+   |            ---------   ^^^ expected trait `Send`, found trait `Bar`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dyn Bar`\n-   = note: required for the cast to the object type `dyn std::marker::Send`\n+   = note: expected reference `&dyn Send`\n+              found reference `&dyn Bar`\n \n-error[E0277]: `dyn Bar` cannot be shared between threads safely\n-  --> $DIR/invalid-upcast.rs:48:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:67:24\n    |\n LL |     let _: &dyn Sync = bar;\n-   |                        ^^^ `dyn Bar` cannot be shared between threads safely\n+   |            ---------   ^^^ expected trait `Sync`, found trait `Bar`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `dyn Bar`\n-   = note: required for the cast to the object type `dyn std::marker::Sync`\n+   = note: expected reference `&dyn Sync`\n+              found reference `&dyn Bar`\n \n-error[E0277]: the trait bound `dyn Baz: Foo` is not satisfied\n-  --> $DIR/invalid-upcast.rs:51:25\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:70:25\n    |\n LL |     let foo: &dyn Foo = baz;\n-   |                         ^^^ the trait `Foo` is not implemented for `dyn Baz`\n+   |              --------   ^^^ expected trait `Foo`, found trait `Baz`\n+   |              |\n+   |              expected due to this\n    |\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: expected reference `&dyn Foo`\n+              found reference `&dyn Baz`\n \n-error[E0277]: `dyn Foo` doesn't implement `std::fmt::Debug`\n-  --> $DIR/invalid-upcast.rs:53:35\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:72:35\n    |\n LL |     let _: &dyn std::fmt::Debug = foo;\n-   |                                   ^^^ `dyn Foo` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |            --------------------   ^^^ expected trait `Debug`, found trait `Foo`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `dyn Foo`\n-   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: expected reference `&dyn Debug`\n+              found reference `&dyn Foo`\n \n-error[E0277]: `dyn Foo` cannot be sent between threads safely\n-  --> $DIR/invalid-upcast.rs:55:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:74:24\n    |\n LL |     let _: &dyn Send = foo;\n-   |                        ^^^ `dyn Foo` cannot be sent between threads safely\n+   |            ---------   ^^^ expected trait `Send`, found trait `Foo`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dyn Foo`\n-   = note: required for the cast to the object type `dyn std::marker::Send`\n+   = note: expected reference `&dyn Send`\n+              found reference `&dyn Foo`\n \n-error[E0277]: `dyn Foo` cannot be shared between threads safely\n-  --> $DIR/invalid-upcast.rs:57:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:76:24\n    |\n LL |     let _: &dyn Sync = foo;\n-   |                        ^^^ `dyn Foo` cannot be shared between threads safely\n+   |            ---------   ^^^ expected trait `Sync`, found trait `Foo`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `dyn Foo`\n-   = note: required for the cast to the object type `dyn std::marker::Sync`\n+   = note: expected reference `&dyn Sync`\n+              found reference `&dyn Foo`\n \n-error[E0277]: the trait bound `dyn Bar: Foo` is not satisfied\n-  --> $DIR/invalid-upcast.rs:60:25\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:79:25\n    |\n LL |     let foo: &dyn Foo = bar;\n-   |                         ^^^ the trait `Foo` is not implemented for `dyn Bar`\n+   |              --------   ^^^ expected trait `Foo`, found trait `Bar`\n+   |              |\n+   |              expected due to this\n    |\n-   = note: required for the cast to the object type `dyn Foo`\n+   = note: expected reference `&dyn Foo`\n+              found reference `&dyn Bar`\n \n-error[E0277]: `dyn Foo` doesn't implement `std::fmt::Debug`\n-  --> $DIR/invalid-upcast.rs:62:35\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:81:35\n    |\n LL |     let _: &dyn std::fmt::Debug = foo;\n-   |                                   ^^^ `dyn Foo` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |            --------------------   ^^^ expected trait `Debug`, found trait `Foo`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `dyn Foo`\n-   = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: expected reference `&dyn Debug`\n+              found reference `&dyn Foo`\n \n-error[E0277]: `dyn Foo` cannot be sent between threads safely\n-  --> $DIR/invalid-upcast.rs:64:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:83:24\n    |\n LL |     let _: &dyn Send = foo;\n-   |                        ^^^ `dyn Foo` cannot be sent between threads safely\n+   |            ---------   ^^^ expected trait `Send`, found trait `Foo`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dyn Foo`\n-   = note: required for the cast to the object type `dyn std::marker::Send`\n+   = note: expected reference `&dyn Send`\n+              found reference `&dyn Foo`\n \n-error[E0277]: `dyn Foo` cannot be shared between threads safely\n-  --> $DIR/invalid-upcast.rs:66:24\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-upcast.rs:85:24\n    |\n LL |     let _: &dyn Sync = foo;\n-   |                        ^^^ `dyn Foo` cannot be shared between threads safely\n+   |            ---------   ^^^ expected trait `Sync`, found trait `Foo`\n+   |            |\n+   |            expected due to this\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `dyn Foo`\n-   = note: required for the cast to the object type `dyn std::marker::Sync`\n+   = note: expected reference `&dyn Sync`\n+              found reference `&dyn Foo`\n \n error: aborting due to 15 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "052f090102e9638755f2320db56befa5308bf990", "filename": "src/test/ui/traits/trait-upcasting/lifetime.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,41 +1,67 @@\n // run-pass\n+// ignore-compare-mode-nll\n \n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n-    fn a(&self) -> i32 { 10 }\n+    fn a(&self) -> i32 {\n+        10\n+    }\n \n-    fn z(&self) -> i32 { 11 }\n+    fn z(&self) -> i32 {\n+        11\n+    }\n \n-    fn y(&self) -> i32 { 12 }\n+    fn y(&self) -> i32 {\n+        12\n+    }\n }\n \n trait Bar: Foo {\n-    fn b(&self) -> i32 { 20 }\n+    fn b(&self) -> i32 {\n+        20\n+    }\n \n-    fn w(&self) -> i32 { 21 }\n+    fn w(&self) -> i32 {\n+        21\n+    }\n }\n \n trait Baz: Bar {\n-    fn c(&self) -> i32 { 30 }\n+    fn c(&self) -> i32 {\n+        30\n+    }\n }\n \n impl Foo for i32 {\n-    fn a(&self) -> i32 { 100 }\n+    fn a(&self) -> i32 {\n+        100\n+    }\n }\n \n impl Bar for i32 {\n-    fn b(&self) -> i32 { 200 }\n+    fn b(&self) -> i32 {\n+        200\n+    }\n }\n \n impl Baz for i32 {\n-    fn c(&self) -> i32 { 300 }\n+    fn c(&self) -> i32 {\n+        300\n+    }\n }\n \n // Note: upcast lifetime means a shorter lifetime.\n-fn upcast_baz<'a: 'b, 'b, T>(v: Box<dyn Baz + 'a>, _l: &'b T) -> Box<dyn Baz + 'b> { v }\n-fn upcast_bar<'a: 'b, 'b, T>(v: Box<dyn Bar + 'a>, _l: &'b T) -> Box<dyn Bar + 'b> { v }\n-fn upcast_foo<'a: 'b, 'b, T>(v: Box<dyn Foo + 'a>, _l: &'b T) -> Box<dyn Foo + 'b> { v }\n+fn upcast_baz<'a: 'b, 'b, T>(v: Box<dyn Baz + 'a>, _l: &'b T) -> Box<dyn Baz + 'b> {\n+    v\n+}\n+fn upcast_bar<'a: 'b, 'b, T>(v: Box<dyn Bar + 'a>, _l: &'b T) -> Box<dyn Bar + 'b> {\n+    v\n+}\n+fn upcast_foo<'a: 'b, 'b, T>(v: Box<dyn Foo + 'a>, _l: &'b T) -> Box<dyn Foo + 'b> {\n+    v\n+}\n \n fn main() {\n     let v = Box::new(1);"}, {"sha": "0f3cb285bf4c3446939eab534d00307518fd591b", "filename": "src/test/ui/traits/trait-upcasting/struct.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,38 +1,57 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n use std::rc::Rc;\n use std::sync::Arc;\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n-    fn a(&self) -> i32 { 10 }\n+    fn a(&self) -> i32 {\n+        10\n+    }\n \n-    fn z(&self) -> i32 { 11 }\n+    fn z(&self) -> i32 {\n+        11\n+    }\n \n-    fn y(&self) -> i32 { 12 }\n+    fn y(&self) -> i32 {\n+        12\n+    }\n }\n \n trait Bar: Foo {\n-    fn b(&self) -> i32 { 20 }\n+    fn b(&self) -> i32 {\n+        20\n+    }\n \n-    fn w(&self) -> i32 { 21 }\n+    fn w(&self) -> i32 {\n+        21\n+    }\n }\n \n trait Baz: Bar {\n-    fn c(&self) -> i32 { 30 }\n+    fn c(&self) -> i32 {\n+        30\n+    }\n }\n \n impl Foo for i32 {\n-    fn a(&self) -> i32 { 100 }\n+    fn a(&self) -> i32 {\n+        100\n+    }\n }\n \n impl Bar for i32 {\n-    fn b(&self) -> i32 { 200 }\n+    fn b(&self) -> i32 {\n+        200\n+    }\n }\n \n impl Baz for i32 {\n-    fn c(&self) -> i32 { 300 }\n+    fn c(&self) -> i32 {\n+        300\n+    }\n }\n \n fn test_box() {"}, {"sha": "3508e15284bf2406da408f26d33ae2b76abcdc7c", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,33 +1,52 @@\n #![feature(trait_upcasting)]\n+#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n-    fn a(&self) -> i32 { 10 }\n+    fn a(&self) -> i32 {\n+        10\n+    }\n \n-    fn z(&self) -> i32 { 11 }\n+    fn z(&self) -> i32 {\n+        11\n+    }\n \n-    fn y(&self) -> i32 { 12 }\n+    fn y(&self) -> i32 {\n+        12\n+    }\n }\n \n trait Bar: Foo {\n-    fn b(&self) -> i32 { 20 }\n+    fn b(&self) -> i32 {\n+        20\n+    }\n \n-    fn w(&self) -> i32 { 21 }\n+    fn w(&self) -> i32 {\n+        21\n+    }\n }\n \n trait Baz: Bar {\n-    fn c(&self) -> i32 { 30 }\n+    fn c(&self) -> i32 {\n+        30\n+    }\n }\n \n impl Foo for i32 {\n-    fn a(&self) -> i32 { 100 }\n+    fn a(&self) -> i32 {\n+        100\n+    }\n }\n \n impl Bar for i32 {\n-    fn b(&self) -> i32 { 200 }\n+    fn b(&self) -> i32 {\n+        200\n+    }\n }\n \n impl Baz for i32 {\n-    fn c(&self) -> i32 { 300 }\n+    fn c(&self) -> i32 {\n+        300\n+    }\n }\n \n fn main() {"}, {"sha": "8c69011800b47bc0edd45a90b494860f57ddb0ba", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb625e4683c43991de6fc27d6b4e0db5a34011f/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr?ref=3cb625e4683c43991de6fc27d6b4e0db5a34011f", "patch": "@@ -1,64 +1,64 @@\n error[E0599]: no method named `c` found for reference `&dyn Bar` in the current scope\n-  --> $DIR/subtrait-method.rs:37:9\n+  --> $DIR/subtrait-method.rs:56:9\n    |\n LL |     bar.c();\n    |         ^ help: there is an associated function with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:17:1\n+  --> $DIR/subtrait-method.rs:28:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:41:9\n+  --> $DIR/subtrait-method.rs:60:9\n    |\n LL |     foo.b();\n    |         ^ help: there is an associated function with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Bar` defines an item `b`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:11:1\n+  --> $DIR/subtrait-method.rs:18:1\n    |\n LL | trait Bar: Foo {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:43:9\n+  --> $DIR/subtrait-method.rs:62:9\n    |\n LL |     foo.c();\n    |         ^ help: there is an associated function with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:17:1\n+  --> $DIR/subtrait-method.rs:28:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:47:9\n+  --> $DIR/subtrait-method.rs:66:9\n    |\n LL |     foo.b();\n    |         ^ help: there is an associated function with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Bar` defines an item `b`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:11:1\n+  --> $DIR/subtrait-method.rs:18:1\n    |\n LL | trait Bar: Foo {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:49:9\n+  --> $DIR/subtrait-method.rs:68:9\n    |\n LL |     foo.c();\n    |         ^ help: there is an associated function with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:17:1\n+  --> $DIR/subtrait-method.rs:28:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^"}]}