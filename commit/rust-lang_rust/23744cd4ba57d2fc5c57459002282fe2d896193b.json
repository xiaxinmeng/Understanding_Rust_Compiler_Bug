{"sha": "23744cd4ba57d2fc5c57459002282fe2d896193b", "node_id": "C_kwDOAAsO6NoAKDIzNzQ0Y2Q0YmE1N2QyZmM1YzU3NDU5MDAyMjgyZmUyZDg5NjE5M2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-15T18:22:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T16:10:10Z"}, "message": "Use multi-span suggestions", "tree": {"sha": "d26eca7d2fb6cfbb523d8cf23466ef23cdd71eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26eca7d2fb6cfbb523d8cf23466ef23cdd71eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23744cd4ba57d2fc5c57459002282fe2d896193b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23744cd4ba57d2fc5c57459002282fe2d896193b", "html_url": "https://github.com/rust-lang/rust/commit/23744cd4ba57d2fc5c57459002282fe2d896193b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23744cd4ba57d2fc5c57459002282fe2d896193b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba951e3ca72283d39757bd39d20bfd75ce901147", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba951e3ca72283d39757bd39d20bfd75ce901147", "html_url": "https://github.com/rust-lang/rust/commit/ba951e3ca72283d39757bd39d20bfd75ce901147"}], "stats": {"total": 208, "additions": 124, "deletions": 84}, "files": [{"sha": "34bf97448273b56874b439ec31c5a4d0b5dbfb18", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 65, "deletions": 62, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/23744cd4ba57d2fc5c57459002282fe2d896193b/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23744cd4ba57d2fc5c57459002282fe2d896193b/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=23744cd4ba57d2fc5c57459002282fe2d896193b", "patch": "@@ -1,10 +1,9 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{get_parent_expr_for_hir, get_parent_node};\n+use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_then};\n use rustc_errors::Applicability;\n-use rustc_hir::{Block, Expr, ExprKind, Node, Stmt, StmtKind};\n+use rustc_hir::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -65,69 +64,73 @@ declare_clippy_lint! {\n declare_lint_pass!(SemicolonBlock => [SEMICOLON_INSIDE_BLOCK, SEMICOLON_OUTSIDE_BLOCK]);\n \n impl LateLintPass<'_> for SemicolonBlock {\n-    fn check_block(&mut self, cx: &LateContext<'_>, block: &Block<'_>) {\n-        semicolon_inside_block(cx, block);\n-        semicolon_outside_block(cx, block);\n-    }\n-}\n-\n-fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n-    if !block.span.from_expansion()\n-        && let Some(tail) = block.expr\n-        && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx, block.hir_id)\n-        && let Some(Node::Stmt(Stmt { kind: StmtKind::Semi(_), span, .. })) = get_parent_node(cx.tcx, block_expr.hir_id)\n-    {\n-        let expr_snip = snippet_with_macro_callsite(cx, tail.span, \"..\");\n-\n-        let mut suggestion: String = snippet_with_macro_callsite(cx, block.span, \"..\").to_string();\n-\n-        if let Some((expr_offset, _)) = suggestion.rmatch_indices(&*expr_snip).next() {\n-            suggestion.insert(expr_offset + expr_snip.len(), ';');\n-        } else {\n-            return;\n+    fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n+        match stmt.kind {\n+            StmtKind::Expr(Expr {\n+                kind:\n+                    ExprKind::Block(\n+                        block @ Block {\n+                            expr: None,\n+                            stmts:\n+                                &[\n+                                    ..,\n+                                    Stmt {\n+                                        kind: StmtKind::Semi(expr),\n+                                        span,\n+                                        ..\n+                                    },\n+                                ],\n+                            ..\n+                        },\n+                        _,\n+                    ),\n+                ..\n+            }) if !block.span.from_expansion() => semicolon_outside_block(cx, block, expr, span),\n+            StmtKind::Semi(Expr {\n+                kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n+                ..\n+            }) if !block.span.from_expansion() => semicolon_inside_block(cx, block, tail, stmt.span),\n+            _ => (),\n         }\n-\n-        span_lint_and_sugg(\n-            cx,\n-            SEMICOLON_INSIDE_BLOCK,\n-            *span,\n-            \"consider moving the `;` inside the block for consistent formatting\",\n-            \"put the `;` here\",\n-            suggestion,\n-            Applicability::MaybeIncorrect,\n-        );\n     }\n }\n \n-fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>) {\n-    if !block.span.from_expansion()\n-        && block.expr.is_none()\n-        && let [.., Stmt { kind: StmtKind::Semi(expr), .. }] = block.stmts\n-        && let Some(block_expr @ Expr { kind: ExprKind::Block(_, _), ..}) = get_parent_expr_for_hir(cx,block.hir_id)\n-        && let Some(Node::Stmt(Stmt { kind: StmtKind::Expr(_), .. })) = get_parent_node(cx.tcx, block_expr.hir_id)\n-    {\n-        let expr_snip = snippet_with_macro_callsite(cx, expr.span, \"..\");\n-\n-        let mut suggestion: String = snippet_with_macro_callsite(cx, block.span, \"..\").to_string();\n+fn semicolon_inside_block(cx: &LateContext<'_>, block: &Block<'_>, tail: &Expr<'_>, semi_span: Span) {\n+    let insert_span = tail.span.with_lo(tail.span.hi());\n+    let remove_span = semi_span.with_lo(block.span.hi());\n \n-        if let Some((expr_offset, _)) = suggestion.rmatch_indices(&*expr_snip).next()\n-            && let Some(semi_offset) = suggestion[expr_offset + expr_snip.len()..].find(';')\n-        {\n-            suggestion.remove(expr_offset +  expr_snip.len() + semi_offset);\n-        } else {\n-            return;\n-        }\n+    span_lint_and_then(\n+        cx,\n+        SEMICOLON_INSIDE_BLOCK,\n+        semi_span,\n+        \"consider moving the `;` inside the block for consistent formatting\",\n+        |diag| {\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"put the `;` here\",\n+                Applicability::MachineApplicable,\n+                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+            );\n+        },\n+    );\n+}\n \n-        suggestion.push(';');\n+fn semicolon_outside_block(cx: &LateContext<'_>, block: &Block<'_>, tail_stmt_expr: &Expr<'_>, semi_span: Span) {\n+    let insert_span = block.span.with_lo(block.span.hi());\n+    let remove_span = semi_span.with_lo(tail_stmt_expr.span.source_callsite().hi());\n \n-        span_lint_and_sugg(\n-            cx,\n-            SEMICOLON_OUTSIDE_BLOCK,\n-            block.span,\n-            \"consider moving the `;` outside the block for consistent formatting\",\n-            \"put the `;` outside the block\",\n-            suggestion,\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n+    span_lint_and_then(\n+        cx,\n+        SEMICOLON_OUTSIDE_BLOCK,\n+        block.span,\n+        \"consider moving the `;` outside the block for consistent formatting\",\n+        |diag| {\n+            multispan_sugg_with_applicability(\n+                diag,\n+                \"put the `;` here\",\n+                Applicability::MachineApplicable,\n+                [(remove_span, String::new()), (insert_span, \";\".to_owned())],\n+            );\n+        },\n+    );\n }"}, {"sha": "d2cd8b21882920d975e67b35df6e6dea10bfac79", "filename": "tests/ui/semicolon_inside_block.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_inside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_inside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.fixed?ref=23744cd4ba57d2fc5c57459002282fe2d896193b", "patch": "@@ -10,7 +10,7 @@\n \n macro_rules! m {\n     (()) => {\n-        ()\n+        ();\n     };\n     (0) => {{\n         0\n@@ -58,7 +58,7 @@ fn main() {\n         unit_fn_block();\n     };\n \n-    { m!(()); }\n+    { m!(()) }\n     { m!(()); }\n     { m!(()); };\n     m!(0);"}, {"sha": "99f3b65be0f83ef02a7c1ef82e2e7ab17dd69753", "filename": "tests/ui/semicolon_inside_block.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_inside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_inside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_inside_block.stderr?ref=23744cd4ba57d2fc5c57459002282fe2d896193b", "patch": "@@ -2,15 +2,26 @@ error: consider moving the `;` inside the block for consistent formatting\n   --> $DIR/semicolon_inside_block.rs:39:5\n    |\n LL |     { unit_fn_block() };\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: put the `;` here: `{ unit_fn_block(); }`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::semicolon-inside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block() };\n+LL +     { unit_fn_block(); }\n+   |\n \n error: consider moving the `;` inside the block for consistent formatting\n   --> $DIR/semicolon_inside_block.rs:40:5\n    |\n LL |     unsafe { unit_fn_block() };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: put the `;` here: `unsafe { unit_fn_block(); }`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block() };\n+LL +     unsafe { unit_fn_block(); }\n+   |\n \n error: consider moving the `;` inside the block for consistent formatting\n   --> $DIR/semicolon_inside_block.rs:48:5\n@@ -23,17 +34,24 @@ LL | |     };\n    |\n help: put the `;` here\n    |\n-LL ~     {\n-LL +         unit_fn_block();\n-LL +         unit_fn_block();\n-LL +     }\n+LL ~         unit_fn_block();\n+LL ~     }\n    |\n \n error: consider moving the `;` inside the block for consistent formatting\n   --> $DIR/semicolon_inside_block.rs:61:5\n    |\n LL |     { m!(()) };\n-   |     ^^^^^^^^^^^ help: put the `;` here: `{ m!(()); }`\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL ~         ();\n+LL |     };\n+ ...\n+LL | \n+LL ~     { m!(()) }\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "35eacfe6d3f194abbe1759baa410d9c68dfe720f", "filename": "tests/ui/semicolon_outside_block.fixed", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_outside_block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_outside_block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.fixed?ref=23744cd4ba57d2fc5c57459002282fe2d896193b", "patch": "@@ -21,6 +21,9 @@ macro_rules! m {\n     (2) => {{\n         2;\n     }};\n+    (stmt) => {\n+        stmt;\n+    };\n }\n \n fn unit_fn_block() {\n@@ -39,8 +42,8 @@ fn main() {\n     { unit_fn_block() };\n     unsafe { unit_fn_block() };\n \n-    { unit_fn_block() };\n-    unsafe { unit_fn_block() };\n+    { unit_fn_block(); }\n+    unsafe { unit_fn_block(); }\n \n     { unit_fn_block(); };\n     unsafe { unit_fn_block(); };\n@@ -51,19 +54,20 @@ fn main() {\n     };\n     {\n         unit_fn_block();\n-        unit_fn_block()\n-    };\n+        unit_fn_block();\n+    }\n     {\n         unit_fn_block();\n         unit_fn_block();\n     };\n \n     { m!(()) };\n-    { m!(()) };\n+    { m!(()); }\n     { m!(()); };\n     m!(0);\n     m!(1);\n     m!(2);\n+    { m!(stmt) };\n \n     for _ in [()] {\n         unit_fn_block();"}, {"sha": "c2151f7af637d3292c40cb5f8f5183f7fc2e58d2", "filename": "tests/ui/semicolon_outside_block.stderr", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_outside_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23744cd4ba57d2fc5c57459002282fe2d896193b/tests%2Fui%2Fsemicolon_outside_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_outside_block.stderr?ref=23744cd4ba57d2fc5c57459002282fe2d896193b", "patch": "@@ -2,15 +2,26 @@ error: consider moving the `;` outside the block for consistent formatting\n   --> $DIR/semicolon_outside_block.rs:42:5\n    |\n LL |     { unit_fn_block(); }\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: put the `;` outside the block: `{ unit_fn_block() };`\n+   |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::semicolon-outside-block` implied by `-D warnings`\n+help: put the `;` here\n+   |\n+LL -     { unit_fn_block(); }\n+LL +     { unit_fn_block() };\n+   |\n \n error: consider moving the `;` outside the block for consistent formatting\n   --> $DIR/semicolon_outside_block.rs:43:5\n    |\n LL |     unsafe { unit_fn_block(); }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: put the `;` outside the block: `unsafe { unit_fn_block() };`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -     unsafe { unit_fn_block(); }\n+LL +     unsafe { unit_fn_block() };\n+   |\n \n error: consider moving the `;` outside the block for consistent formatting\n   --> $DIR/semicolon_outside_block.rs:52:5\n@@ -21,19 +32,23 @@ LL | |         unit_fn_block();\n LL | |     }\n    | |_____^\n    |\n-help: put the `;` outside the block\n+help: put the `;` here\n    |\n-LL ~     {\n-LL +         unit_fn_block();\n-LL +         unit_fn_block()\n-LL +     };\n+LL ~         unit_fn_block()\n+LL ~     };\n    |\n \n error: consider moving the `;` outside the block for consistent formatting\n   --> $DIR/semicolon_outside_block.rs:62:5\n    |\n LL |     { m!(()); }\n-   |     ^^^^^^^^^^^ help: put the `;` outside the block: `{ m!(()) };`\n+   |     ^^^^^^^^^^^\n+   |\n+help: put the `;` here\n+   |\n+LL -         ()\n+LL +         (); };\n+   |\n \n error: aborting due to 4 previous errors\n "}]}