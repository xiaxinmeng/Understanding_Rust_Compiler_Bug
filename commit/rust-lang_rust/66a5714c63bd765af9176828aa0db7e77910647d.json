{"sha": "66a5714c63bd765af9176828aa0db7e77910647d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YTU3MTRjNjNiZDc2NWFmOTE3NjgyOGFhMGRiN2U3NzkxMDY0N2Q=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-16T05:29:47Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-01-19T19:24:39Z"}, "message": "Address review comments", "tree": {"sha": "f9f7dc350df2dabeb4023d04440775a849d03ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f7dc350df2dabeb4023d04440775a849d03ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a5714c63bd765af9176828aa0db7e77910647d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmAHMfcACgkQfsyTL4ss\ncx5tYBAA29dZl+hj7rW39DOQHt22hSrevwRDn6STpJ60ciYO2jqADZaRfzCDvSTs\nw7AqbD92XnRe8akbHwXrN7IHv5lLyZyx9K1MYxoveSviWptbJt096hNVKfiU4IBL\njSgXJyztaIm47kvPrq9I0oeh/2nzs06Em4KstKJGCZ1bcm645hYLfRlEoz7jbSXE\np6tWJuUSOB/wTX9nHjk//JOSGctncv+3a1TNeUSaPTX+h4Cm0vnkTPZOCl1kyEh6\nPd8q0fnylLdpWEeaqBo7OUp+BENMIPte3MK/WSaPTRLkdOXw3M0HzXhS/c93ZeEd\n83xyC8f0jE/60XWsBGflXTeUZ5F2a5vMdts0NbkXhDAI8fW/E5gKz+UcLVwmdzfL\nABvFd6texi7YR1zxG8oj6e9CtEZ27F3eHLaXBftKYLlRYGVHkNs/GkDtf4I3GPt+\nRoLgI51bxpKlSDCbMCQusxcvPd0HDdiFNdLMqkav2iexEKS/pxyq35C6E8qW0W7N\nXawq3V/l3mcjdkJwyb5mcOKibJXckAUyVUOqunuvAtKFejwZNpCpTpGf6RvcKetH\nkTBLk2SJr0mmGScoj8uMwXcyAYkFrQKw0LluMnTZbbmKwO76kcUmo5iGua9LAcm9\ndjS4C1nEnK+sUvprm+bPyBhOqbrHMASp9lUHtT41rRJ/pCSL6SE=\n=fwg0\n-----END PGP SIGNATURE-----", "payload": "tree f9f7dc350df2dabeb4023d04440775a849d03ed7\nparent 7715656edd201b8c6bbddf0040f424c27e4db4df\nauthor Rune Tynan <runetynan@gmail.com> 1610774987 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1611084279 -0500\n\nAddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a5714c63bd765af9176828aa0db7e77910647d", "html_url": "https://github.com/rust-lang/rust/commit/66a5714c63bd765af9176828aa0db7e77910647d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a5714c63bd765af9176828aa0db7e77910647d/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7715656edd201b8c6bbddf0040f424c27e4db4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/7715656edd201b8c6bbddf0040f424c27e4db4df", "html_url": "https://github.com/rust-lang/rust/commit/7715656edd201b8c6bbddf0040f424c27e4db4df"}], "stats": {"total": 92, "additions": 29, "deletions": 63}, "files": [{"sha": "a885d3c6557b8216145fab93a36726f3f6927a01", "filename": "src/tools/jsondocck/src/cache.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66a5714c63bd765af9176828aa0db7e77910647d/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a5714c63bd765af9176828aa0db7e77910647d/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=66a5714c63bd765af9176828aa0db7e77910647d", "patch": "@@ -1,8 +1,8 @@\n use crate::error::CkError;\n use serde_json::Value;\n use std::collections::HashMap;\n-use std::fs;\n use std::path::{Path, PathBuf};\n+use std::{fs, io};\n \n #[derive(Debug)]\n pub struct Cache {\n@@ -15,28 +15,25 @@ pub struct Cache {\n impl Cache {\n     pub fn new(doc_dir: &str) -> Cache {\n         Cache {\n-            root: <str as AsRef<Path>>::as_ref(doc_dir).to_owned(),\n+            root: Path::new(doc_dir).to_owned(),\n             files: HashMap::new(),\n             values: HashMap::new(),\n             last_path: None,\n         }\n     }\n \n-    fn resolve_path(&mut self, path: &String) -> Result<PathBuf, CkError> {\n+    fn resolve_path(&mut self, path: &String) -> PathBuf {\n         if path != \"-\" {\n             let resolve = self.root.join(path);\n             self.last_path = Some(resolve.clone());\n-            Ok(resolve)\n+            resolve\n         } else {\n-            match &self.last_path {\n-                Some(p) => Ok(p.clone()),\n-                None => unreachable!(),\n-            }\n+            self.last_path.as_ref().unwrap().clone()\n         }\n     }\n \n-    pub fn get_file(&mut self, path: &String) -> Result<String, CkError> {\n-        let path = self.resolve_path(path)?;\n+    pub fn get_file(&mut self, path: &String) -> Result<String, io::Error> {\n+        let path = self.resolve_path(path);\n \n         if let Some(f) = self.files.get(&path) {\n             return Ok(f.clone());\n@@ -47,24 +44,21 @@ impl Cache {\n         self.files.insert(path, file.clone());\n \n         Ok(file)\n-        // Err(_) => Err(CkError::FailedCheck(format!(\"File {:?} does not exist / could not be opened\", path)))\n     }\n \n     pub fn get_value(&mut self, path: &String) -> Result<Value, CkError> {\n-        let path = self.resolve_path(path)?;\n+        let path = self.resolve_path(path);\n \n         if let Some(v) = self.values.get(&path) {\n             return Ok(v.clone());\n         }\n \n         let file = fs::File::open(&path)?;\n-        // Err(_) => return Err(CkError::FailedCheck(format!(\"File {:?} does not exist / could not be opened\", path)))\n \n         let val = serde_json::from_reader::<_, Value>(file)?;\n \n         self.values.insert(path, val.clone());\n \n         Ok(val)\n-        // Err(_) => Err(CkError::FailedCheck(format!(\"File {:?} did not contain valid JSON\", path)))\n     }\n }"}, {"sha": "799a465e23dcf668759ac138be119cdd3c28140f", "filename": "src/tools/jsondocck/src/config.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66a5714c63bd765af9176828aa0db7e77910647d/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a5714c63bd765af9176828aa0db7e77910647d/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fconfig.rs?ref=66a5714c63bd765af9176828aa0db7e77910647d", "patch": "@@ -22,16 +22,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         panic!()\n     }\n \n-    let matches = &match opts.parse(args_) {\n-        Ok(m) => m,\n-        Err(f) => panic!(\"{:?}\", f),\n-    };\n+    let matches = opts.parse(args_).unwrap();\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         let message = format!(\"Usage: {} <doc-dir> <template>\", argv0);\n         println!(\"{}\", opts.usage(&message));\n-        println!();\n-        panic!()\n+        std::process::exit(1);\n     }\n \n     Config {"}, {"sha": "7407aaf441c33a0d55d0551f68211a6479060fd7", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 19, "deletions": 43, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/66a5714c63bd765af9176828aa0db7e77910647d/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a5714c63bd765af9176828aa0db7e77910647d/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=66a5714c63bd765af9176828aa0db7e77910647d", "patch": "@@ -62,28 +62,15 @@ impl CommandKind {\n             return false;\n         }\n \n-        match self {\n-            CommandKind::Has => {\n-                if args[0] == \"-\" && command_num == 0 {\n-                    print_err(\n-                        &format!(\"Tried to use the previous path in the first command\"),\n-                        lineno,\n-                    );\n-                    return false;\n-                }\n-            }\n-            CommandKind::Count => {\n-                if args[0] == \"-\" && command_num == 0 {\n-                    print_err(\n-                        &format!(\"Tried to use the previous path in the first command\"),\n-                        lineno,\n-                    );\n-                    return false;\n-                }\n-                if args[2].parse::<usize>().is_err() {\n-                    print_err(&format!(\"Third argument to @count must be a valid usize\"), lineno);\n-                    return false;\n-                }\n+        if args[0] == \"-\" && command_num == 0 {\n+            print_err(&format!(\"Tried to use the previous path in the first command\"), lineno);\n+            return false;\n+        }\n+\n+        if let CommandKind::Count = self {\n+            if args[2].parse::<usize>().is_err() {\n+                print_err(&format!(\"Third argument to @count must be a valid usize\"), lineno);\n+                return false;\n             }\n         }\n \n@@ -132,10 +119,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n             None => continue,\n         };\n \n-        let negated = match cap.name(\"negated\") {\n-            Some(m) => m.as_str() == \"!\",\n-            None => false,\n-        };\n+        let negated = cap.name(\"negated\").unwrap().as_str() == \"!\";\n         let cmd = cap.name(\"cmd\").unwrap().as_str();\n \n         let cmd = match cmd {\n@@ -209,26 +193,18 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                         Err(_) => false,\n                     }\n                 }\n-                _ => {\n-                    unreachable!()\n-                }\n+                _ => unreachable!(),\n             }\n         }\n         CommandKind::Count => {\n-            match command.args.len() {\n-                // @count <path> <jsonpath> <count> = Check that the jsonpath matches exactly [count] times\n-                3 => {\n-                    let expected: usize = command.args[2].parse().unwrap();\n-\n-                    let val = cache.get_value(&command.args[0])?;\n-                    match select(&val, &command.args[1]) {\n-                        Ok(results) => results.len() == expected,\n-                        Err(_) => false,\n-                    }\n-                }\n-                _ => {\n-                    unreachable!()\n-                }\n+            // @count <path> <jsonpath> <count> = Check that the jsonpath matches exactly [count] times\n+            assert_eq!(command.args.len(), 3);\n+            let expected: usize = command.args[2].parse().unwrap();\n+\n+            let val = cache.get_value(&command.args[0])?;\n+            match select(&val, &command.args[1]) {\n+                Ok(results) => results.len() == expected,\n+                Err(_) => false,\n             }\n         }\n     };"}]}