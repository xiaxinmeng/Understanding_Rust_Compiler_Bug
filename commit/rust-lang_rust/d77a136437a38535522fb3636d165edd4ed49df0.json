{"sha": "d77a136437a38535522fb3636d165edd4ed49df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3N2ExMzY0MzdhMzg1MzU1MjJmYjM2MzZkMTY1ZWRkNGVkNDlkZjA=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-04T23:14:33Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-11T18:51:20Z"}, "message": "add SetDiscriminant StatementKind to enable deaggregation of enums", "tree": {"sha": "2c430daa2e891d9eb45209502250b30b7d323e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c430daa2e891d9eb45209502250b30b7d323e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77a136437a38535522fb3636d165edd4ed49df0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77a136437a38535522fb3636d165edd4ed49df0", "html_url": "https://github.com/rust-lang/rust/commit/d77a136437a38535522fb3636d165edd4ed49df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77a136437a38535522fb3636d165edd4ed49df0/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42001edc998f3406ecc04afa48bf07ce91247b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/42001edc998f3406ecc04afa48bf07ce91247b67", "html_url": "https://github.com/rust-lang/rust/commit/42001edc998f3406ecc04afa48bf07ce91247b67"}], "stats": {"total": 174, "additions": 156, "deletions": 18}, "files": [{"sha": "08614ca253be51867b6c55205ce88aa04ba07b00", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -689,13 +689,17 @@ pub struct Statement<'tcx> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum StatementKind<'tcx> {\n     Assign(Lvalue<'tcx>, Rvalue<'tcx>),\n+    SetDiscriminant{ lvalue: Lvalue<'tcx>, variant_index: usize },\n }\n \n impl<'tcx> Debug for Statement<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::StatementKind::*;\n         match self.kind {\n-            Assign(ref lv, ref rv) => write!(fmt, \"{:?} = {:?}\", lv, rv)\n+            Assign(ref lv, ref rv) => write!(fmt, \"{:?} = {:?}\", lv, rv),\n+            SetDiscriminant{lvalue: ref lv, variant_index: index} => {\n+                write!(fmt, \"discriminant({:?}) = {:?}\", lv, index)\n+            }\n         }\n     }\n }"}, {"sha": "d44f00ed2cbe2abb4636a3b631b04fb27f8aa4ab", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -323,6 +323,9 @@ macro_rules! make_mir_visitor {\n                                           ref $($mutability)* rvalue) => {\n                         self.visit_assign(block, lvalue, rvalue);\n                     }\n+                    StatementKind::SetDiscriminant{ ref $($mutability)* lvalue, .. } => {\n+                        self.visit_lvalue(lvalue, LvalueContext::Store);\n+                    }\n                 }\n             }\n "}, {"sha": "57b335bd5eee41f5c1d51f8a5fd216366eda5b14", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fimpls.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -442,6 +442,9 @@ impl<'a, 'tcx> BitDenotation for MovingOutStatements<'a, 'tcx> {\n         }\n         let bits_per_block = self.bits_per_block(ctxt);\n         match stmt.kind {\n+            repr::StatementKind::SetDiscriminant { .. } => {\n+                span_bug!(stmt.source_info.span, \"SetDiscriminant should not exist in borrowck\");\n+            }\n             repr::StatementKind::Assign(ref lvalue, _) => {\n                 // assigning into this `lvalue` kills all\n                 // MoveOuts from it, and *also* all MoveOuts"}, {"sha": "ccde429a17113f8f5e798cb396385a31a141b0d2", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -104,6 +104,9 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             repr::StatementKind::Assign(ref lvalue, ref rvalue) => {\n                 (lvalue, rvalue)\n             }\n+            repr::StatementKind::SetDiscriminant{ .. } =>\n+                span_bug!(stmt.source_info.span,\n+                          \"sanity_check should run before Deaggregator inserts SetDiscriminant\"),\n         };\n \n         if lvalue == peek_arg_lval {"}, {"sha": "e965dcc169c2de9abe6c55eb4ee05020b2c6d3f1", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -616,6 +616,10 @@ fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> MoveD\n                         Rvalue::InlineAsm { .. } => {}\n                     }\n                 }\n+                StatementKind::SetDiscriminant{ .. } => {\n+                    span_bug!(stmt.source_info.span,\n+                              \"SetDiscriminant should not exist during borrowck\");\n+                }\n             }\n         }\n "}, {"sha": "c563fdb8f44e6dd8a18db69f49bcb89914cbbbbe", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -369,6 +369,9 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n     let block = &mir[loc.block];\n     match block.statements.get(loc.index) {\n         Some(stmt) => match stmt.kind {\n+            repr::StatementKind::SetDiscriminant{ .. } => {\n+                span_bug!(stmt.source_info.span, \"SetDiscrimant should not exist during borrowck\");\n+            }\n             repr::StatementKind::Assign(ref lvalue, _) => {\n                 debug!(\"drop_flag_effects: assignment {:?}\", stmt);\n                  on_all_children_bits(tcx, mir, move_data,"}, {"sha": "cd6f0ed9cbac68a81313211464ccc802eb75c1c1", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n \n         let mut curr: usize = 0;\n         for bb in mir.basic_blocks_mut() {\n-            let idx = match get_aggregate_statement(curr, &bb.statements) {\n+            let idx = match get_aggregate_statement_index(curr, &bb.statements) {\n                 Some(idx) => idx,\n                 None => continue,\n             };\n@@ -48,7 +48,11 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n             let src_info = bb.statements[idx].source_info;\n             let suffix_stmts = bb.statements.split_off(idx+1);\n             let orig_stmt = bb.statements.pop().unwrap();\n-            let StatementKind::Assign(ref lhs, ref rhs) = orig_stmt.kind;\n+            let (lhs, rhs) = match orig_stmt.kind {\n+                StatementKind::Assign(ref lhs, ref rhs) => (lhs, rhs),\n+                StatementKind::SetDiscriminant{ .. } =>\n+                    span_bug!(src_info.span, \"expected aggregate, not {:?}\", orig_stmt.kind),\n+            };\n             let (agg_kind, operands) = match rhs {\n                 &Rvalue::Aggregate(ref agg_kind, ref operands) => (agg_kind, operands),\n                 _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n@@ -64,10 +68,14 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n                 let ty = variant_def.fields[i].ty(tcx, substs);\n                 let rhs = Rvalue::Use(op.clone());\n \n-                // since we don't handle enums, we don't need a cast\n-                let lhs_cast = lhs.clone();\n-\n-                // FIXME we cannot deaggregate enums issue: #35186\n+                let lhs_cast = if adt_def.variants.len() > 1 {\n+                    Lvalue::Projection(Box::new(LvalueProjection {\n+                        base: lhs.clone(),\n+                        elem: ProjectionElem::Downcast(adt_def, variant),\n+                    }))\n+                } else {\n+                    lhs.clone()\n+                };\n \n                 let lhs_proj = Lvalue::Projection(Box::new(LvalueProjection {\n                     base: lhs_cast,\n@@ -80,18 +88,34 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n                 debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n                 bb.statements.push(new_statement);\n             }\n+\n+            // if the aggregate was an enum, we need to set the discriminant\n+            if adt_def.variants.len() > 1 {\n+                let set_discriminant = Statement {\n+                    kind: StatementKind::SetDiscriminant {\n+                        lvalue: lhs.clone(),\n+                        variant_index: variant,\n+                    },\n+                    source_info: src_info,\n+                };\n+                bb.statements.push(set_discriminant);\n+            };\n+\n             curr = bb.statements.len();\n             bb.statements.extend(suffix_stmts);\n         }\n     }\n }\n \n-fn get_aggregate_statement<'a, 'tcx, 'b>(curr: usize,\n+fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,\n                                          statements: &Vec<Statement<'tcx>>)\n                                          -> Option<usize> {\n-    for i in curr..statements.len() {\n+    for i in start..statements.len() {\n         let ref statement = statements[i];\n-        let StatementKind::Assign(_, ref rhs) = statement.kind;\n+        let rhs = match statement.kind {\n+            StatementKind::Assign(_, ref rhs) => rhs,\n+            StatementKind::SetDiscriminant{ .. } => continue,\n+        };\n         let (kind, operands) = match rhs {\n             &Rvalue::Aggregate(ref kind, ref operands) => (kind, operands),\n             _ => continue,\n@@ -100,9 +124,8 @@ fn get_aggregate_statement<'a, 'tcx, 'b>(curr: usize,\n             &AggregateKind::Adt(adt_def, variant, _) => (adt_def, variant),\n             _ => continue,\n         };\n-        if operands.len() == 0 || adt_def.variants.len() > 1 {\n+        if operands.len() == 0 {\n             // don't deaggregate ()\n-            // don't deaggregate enums ... for now\n             continue;\n         }\n         debug!(\"getting variant {:?}\", variant);"}, {"sha": "eb0d8697f15d4c88e028a3d5b9cd3a68c71bc9e2", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -219,7 +219,13 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         let (mut rvalue, mut call) = (None, None);\n         let source_info = if stmt_idx < no_stmts {\n             let statement = &mut self.source[bb].statements[stmt_idx];\n-            let StatementKind::Assign(_, ref mut rhs) = statement.kind;\n+            let mut rhs = match statement.kind {\n+                StatementKind::Assign(_, ref mut rhs) => rhs,\n+                StatementKind::SetDiscriminant{ .. } =>\n+                    span_bug!(statement.source_info.span,\n+                              \"cannot promote SetDiscriminant {:?}\",\n+                              statement),\n+            };\n             if self.keep_original {\n                 rvalue = Some(rhs.clone());\n             } else {\n@@ -300,10 +306,16 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         });\n         let mut rvalue = match candidate {\n             Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n-                match self.source[bb].statements[stmt_idx].kind {\n+                let ref mut statement = self.source[bb].statements[stmt_idx];\n+                match statement.kind {\n                     StatementKind::Assign(_, ref mut rvalue) => {\n                         mem::replace(rvalue, Rvalue::Use(new_operand))\n                     }\n+                    StatementKind::SetDiscriminant{ .. } => {\n+                        span_bug!(statement.source_info.span,\n+                                  \"cannot promote SetDiscriminant {:?}\",\n+                                  statement);\n+                    }\n                 }\n             }\n             Candidate::ShuffleIndices(bb) => {\n@@ -340,7 +352,11 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n         let (span, ty) = match candidate {\n             Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n                 let statement = &mir[bb].statements[stmt_idx];\n-                let StatementKind::Assign(ref dest, _) = statement.kind;\n+                let dest = match statement.kind {\n+                    StatementKind::Assign(ref dest, _) => dest,\n+                    StatementKind::SetDiscriminant{ .. } =>\n+                        panic!(\"cannot promote SetDiscriminant\"),\n+                };\n                 if let Lvalue::Temp(index) = *dest {\n                     if temps[index] == TempState::PromotedOut {\n                         // Already promoted."}, {"sha": "026d197cb7f35bec5b26469b852688b6599ce1d0", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -14,7 +14,7 @@\n use rustc::infer::{self, InferCtxt, InferOk};\n use rustc::traits::{self, ProjectionMode};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::mir::repr::*;\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n@@ -360,10 +360,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         span_mirbug!(self, stmt, \"bad assignment ({:?} = {:?}): {:?}\",\n                                      lv_ty, rv_ty, terr);\n                     }\n-                }\n-\n                 // FIXME: rvalue with undeterminable type - e.g. inline\n                 // asm.\n+                }\n+            }\n+            StatementKind::SetDiscriminant{ ref lvalue, variant_index } => {\n+                let lvalue_type = lvalue.ty(mir, tcx).to_ty(tcx);\n+                let adt = match lvalue_type.sty {\n+                    TypeVariants::TyEnum(adt, _) => adt,\n+                    _ => {\n+                        span_bug!(stmt.source_info.span,\n+                                  \"bad set discriminant ({:?} = {:?}): lhs is not an enum\",\n+                                  lvalue,\n+                                  variant_index);\n+                    }\n+                };\n+                if variant_index >= adt.variants.len() {\n+                     span_bug!(stmt.source_info.span,\n+                               \"bad set discriminant ({:?} = {:?}): value of of range\",\n+                               lvalue,\n+                               variant_index);\n+                };\n             }\n         }\n     }"}, {"sha": "7ca94b6356e40185f5ce73b31ec5693b9d6c45b1", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -285,6 +285,9 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                             Err(err) => if failure.is_ok() { failure = Err(err); }\n                         }\n                     }\n+                    mir::StatementKind::SetDiscriminant{ .. } => {\n+                        span_bug!(span, \"SetDiscriminant should not appear in constants?\");\n+                    }\n                 }\n             }\n "}, {"sha": "7e3074f4cedf0740beed7f444454e9561a76a2e0", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -14,6 +14,8 @@ use common::{self, BlockAndBuilder};\n \n use super::MirContext;\n use super::LocalRef;\n+use super::super::adt;\n+use super::super::disr::Disr;\n \n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     pub fn trans_statement(&mut self,\n@@ -57,6 +59,18 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     self.trans_rvalue(bcx, tr_dest, rvalue, debug_loc)\n                 }\n             }\n+            mir::StatementKind::SetDiscriminant{ref lvalue, variant_index} => {\n+                let ty = self.monomorphized_lvalue_ty(lvalue);\n+                let repr = adt::represent_type(bcx.ccx(), ty);\n+                let lvalue_transed = self.trans_lvalue(&bcx, lvalue);\n+                bcx.with_block(|bcx|\n+                    adt::trans_set_discr(bcx,\n+                                         &repr,\n+                                        lvalue_transed.llval,\n+                                        Disr::from(variant_index))\n+                );\n+                bcx\n+            }\n         }\n     }\n }"}, {"sha": "ccfa760a28c76823905845e7524ec023c191a833", "filename": "src/test/mir-opt/deaggregator_test_enum.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d77a136437a38535522fb3636d165edd4ed49df0/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77a136437a38535522fb3636d165edd4ed49df0/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum.rs?ref=d77a136437a38535522fb3636d165edd4ed49df0", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Baz {\n+    Empty,\n+    Foo { x: usize },\n+}\n+\n+fn bar(a: usize) -> Baz {\n+    Baz::Foo { x: a }\n+}\n+\n+fn main() {\n+    let x = bar(10);\n+    match x {\n+        Baz::Empty => println!(\"empty\"),\n+        Baz::Foo { x } => println!(\"{}\", x),\n+    };\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node10.Deaggregator.before.mir\n+// bb0: {\n+//     var0 = arg0;                     // scope 0 at main.rs:7:8: 7:9\n+//     tmp0 = var0;                     // scope 1 at main.rs:8:19: 8:20\n+//     return = Baz::Foo { x: tmp0 };   // scope 1 at main.rs:8:5: 8:21\n+//     goto -> bb1;                     // scope 1 at main.rs:7:1: 9:2\n+// }\n+// END rustc.node10.Deaggregator.before.mir\n+// START rustc.node10.Deaggregator.after.mir\n+// bb0: {\n+//     var0 = arg0;                     // scope 0 at main.rs:7:8: 7:9\n+//     tmp0 = var0;                     // scope 1 at main.rs:8:19: 8:20\n+//     ((return as Foo).0: usize) = tmp0; // scope 1 at main.rs:8:5: 8:21\n+//     discriminant(return) = 1;         // scope 1 at main.rs:8:5: 8:21\n+//     goto -> bb1;                     // scope 1 at main.rs:7:1: 9:2\n+// }\n+// END rustc.node10.Deaggregator.after.mir\n\\ No newline at end of file"}]}