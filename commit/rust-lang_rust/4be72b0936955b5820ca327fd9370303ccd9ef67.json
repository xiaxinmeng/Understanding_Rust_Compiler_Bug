{"sha": "4be72b0936955b5820ca327fd9370303ccd9ef67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTcyYjA5MzY5NTViNTgyMGNhMzI3ZmQ5MzcwMzAzY2NkOWVmNjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T23:23:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T23:23:50Z"}, "message": "Auto merge of #7001 - ebobrow:non-octal-file-permissions, r=Manishearth\n\nAdd non_octal_unix_permissions lint\n\nfixes #6934\n\nchangelog: add new lint that checks for non-octal values used to set unix file permissions", "tree": {"sha": "03e26f318a71ab5ffb1f5929b08304e86d998487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e26f318a71ab5ffb1f5929b08304e86d998487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be72b0936955b5820ca327fd9370303ccd9ef67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be72b0936955b5820ca327fd9370303ccd9ef67", "html_url": "https://github.com/rust-lang/rust/commit/4be72b0936955b5820ca327fd9370303ccd9ef67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be72b0936955b5820ca327fd9370303ccd9ef67/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44bf60f62d0036c12d7e2c8ecddf6fced973663f", "url": "https://api.github.com/repos/rust-lang/rust/commits/44bf60f62d0036c12d7e2c8ecddf6fced973663f", "html_url": "https://github.com/rust-lang/rust/commit/44bf60f62d0036c12d7e2c8ecddf6fced973663f"}, {"sha": "7fcd15571201d55951cf518a564069ff3ed115aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fcd15571201d55951cf518a564069ff3ed115aa", "html_url": "https://github.com/rust-lang/rust/commit/7fcd15571201d55951cf518a564069ff3ed115aa"}], "stats": {"total": 211, "additions": 210, "deletions": 1}, "files": [{"sha": "681ecd6832a408e4b687ef650c742f5b3924f5ab", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -2382,6 +2382,7 @@ Released 2018-09-13\n [`new_without_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n+[`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref"}, {"sha": "8c0c16c443dfcd4153f43318e9a2568214fb99e6", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are over 400 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 450 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n Lints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\n You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category."}, {"sha": "153972671fdf38ca25f4ab74e91440a614ec461c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -297,6 +297,7 @@ mod new_without_default;\n mod no_effect;\n mod non_copy_const;\n mod non_expressive_names;\n+mod non_octal_unix_permissions;\n mod open_options;\n mod option_env_unwrap;\n mod option_if_let_else;\n@@ -873,6 +874,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &non_expressive_names::JUST_UNDERSCORES_AND_DIGITS,\n         &non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         &non_expressive_names::SIMILAR_NAMES,\n+        &non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n         &open_options::NONSENSICAL_OPEN_OPTIONS,\n         &option_env_unwrap::OPTION_ENV_UNWRAP,\n         &option_if_let_else::OPTION_IF_LET_ELSE,\n@@ -1057,6 +1059,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n     store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n     store.register_late_pass(|| box inconsistent_struct_constructor::InconsistentStructConstructor);\n+    store.register_late_pass(|| box non_octal_unix_permissions::NonOctalUnixPermissions);\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n@@ -1647,6 +1650,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n         LintId::of(&non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n+        LintId::of(&non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n@@ -1987,6 +1991,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::FLOAT_CMP),\n         LintId::of(&misc::MODULO_ONE),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n+        LintId::of(&non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),"}, {"sha": "6d45e7bc6cf62801611088408020bfe623bd5e55", "filename": "clippy_lints/src/non_octal_unix_permissions.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -0,0 +1,106 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n+use clippy_utils::ty::match_type;\n+use clippy_utils::{match_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for non-octal values used to set Unix file permissions.\n+    ///\n+    /// **Why is this bad?** They will be converted into octal, creating potentially\n+    /// unintended file permissions.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::unix::fs::OpenOptionsExt;\n+    ///\n+    /// let mut options = OpenOptions::new();\n+    /// options.mode(644);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::unix::fs::OpenOptionsExt;\n+    ///\n+    /// let mut options = OpenOptions::new();\n+    /// options.mode(0o644);\n+    /// ```\n+    pub NON_OCTAL_UNIX_PERMISSIONS,\n+    correctness,\n+    \"use of non-octal value to set unix file permissions, which will be translated into octal\"\n+}\n+\n+declare_lint_pass!(NonOctalUnixPermissions => [NON_OCTAL_UNIX_PERMISSIONS]);\n+\n+impl LateLintPass<'_> for NonOctalUnixPermissions {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        match &expr.kind {\n+            ExprKind::MethodCall(path, _, [func, param], _) => {\n+                let obj_ty = cx.typeck_results().expr_ty(&func).peel_refs();\n+\n+                if_chain! {\n+                    if (path.ident.name == sym!(mode)\n+                        && (match_type(cx, obj_ty, &paths::OPEN_OPTIONS)\n+                            || match_type(cx, obj_ty, &paths::DIR_BUILDER)))\n+                        || (path.ident.name == sym!(set_mode) && match_type(cx, obj_ty, &paths::PERMISSIONS));\n+                    if let ExprKind::Lit(_) = param.kind;\n+\n+                    then {\n+                        let snip = match snippet_opt(cx, param.span) {\n+                            Some(s) => s,\n+                            _ => return,\n+                        };\n+\n+                        if !snip.starts_with(\"0o\") {\n+                            show_error(cx, param);\n+                        }\n+                    }\n+                }\n+            },\n+            ExprKind::Call(ref func, [param]) => {\n+                if_chain! {\n+                    if let ExprKind::Path(ref path) = func.kind;\n+                    if let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n+                    if match_def_path(cx, def_id, &paths::PERMISSIONS_FROM_MODE);\n+                    if let ExprKind::Lit(_) = param.kind;\n+\n+                    then {\n+                        let snip = match snippet_opt(cx, param.span) {\n+                            Some(s) => s,\n+                            _ => return,\n+                        };\n+\n+                        if !snip.starts_with(\"0o\") {\n+                            show_error(cx, param);\n+                        }\n+                    }\n+                }\n+            },\n+            _ => {},\n+        };\n+    }\n+}\n+\n+fn show_error(cx: &LateContext<'_>, param: &Expr<'_>) {\n+    let mut applicability = Applicability::MachineApplicable;\n+    span_lint_and_sugg(\n+        cx,\n+        NON_OCTAL_UNIX_PERMISSIONS,\n+        param.span,\n+        \"using a non-octal value to set unix file permissions\",\n+        \"consider using an octal literal instead\",\n+        format!(\n+            \"0o{}\",\n+            snippet_with_applicability(cx, param.span, \"0o..\", &mut applicability,),\n+        ),\n+        applicability,\n+    );\n+}"}, {"sha": "7c83a9fe4e26f159948e2d9deca7807a0b99bb04", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -26,6 +26,7 @@ pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n+pub const DIR_BUILDER: [&str; 3] = [\"std\", \"fs\", \"DirBuilder\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n@@ -95,6 +96,8 @@ pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWri\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n+pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n+pub const PERMISSIONS_FROM_MODE: [&str; 7] = [\"std\", \"sys\", \"unix\", \"ext\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];"}, {"sha": "a9b2dcfb0856959783cf5c1ab32134eb324990b1", "filename": "tests/ui/non_octal_unix_permissions.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/tests%2Fui%2Fnon_octal_unix_permissions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/tests%2Fui%2Fnon_octal_unix_permissions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_octal_unix_permissions.fixed?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -0,0 +1,33 @@\n+// ignore-windows\n+// run-rustfix\n+#![warn(clippy::non_octal_unix_permissions)]\n+use std::fs::{DirBuilder, File, OpenOptions, Permissions};\n+use std::os::unix::fs::{DirBuilderExt, OpenOptionsExt, PermissionsExt};\n+\n+fn main() {\n+    let permissions = 0o760;\n+\n+    // OpenOptionsExt::mode\n+    let mut options = OpenOptions::new();\n+    options.mode(0o440);\n+    options.mode(0o400);\n+    options.mode(permissions);\n+\n+    // PermissionsExt::from_mode\n+    let _permissions = Permissions::from_mode(0o647);\n+    let _permissions = Permissions::from_mode(0o000);\n+    let _permissions = Permissions::from_mode(permissions);\n+\n+    // PermissionsExt::set_mode\n+    let f = File::create(\"foo.txt\").unwrap();\n+    let metadata = f.metadata().unwrap();\n+    let mut permissions = metadata.permissions();\n+\n+    permissions.set_mode(0o644);\n+    permissions.set_mode(0o704);\n+\n+    // DirBuilderExt::mode\n+    let mut builder = DirBuilder::new();\n+    builder.mode(0o755);\n+    builder.mode(0o406);\n+}"}, {"sha": "7d2922f494e1e2a61f5aa772c2804f4ca547d1ce", "filename": "tests/ui/non_octal_unix_permissions.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/tests%2Fui%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/tests%2Fui%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_octal_unix_permissions.rs?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -0,0 +1,33 @@\n+// ignore-windows\n+// run-rustfix\n+#![warn(clippy::non_octal_unix_permissions)]\n+use std::fs::{DirBuilder, File, OpenOptions, Permissions};\n+use std::os::unix::fs::{DirBuilderExt, OpenOptionsExt, PermissionsExt};\n+\n+fn main() {\n+    let permissions = 0o760;\n+\n+    // OpenOptionsExt::mode\n+    let mut options = OpenOptions::new();\n+    options.mode(440);\n+    options.mode(0o400);\n+    options.mode(permissions);\n+\n+    // PermissionsExt::from_mode\n+    let _permissions = Permissions::from_mode(647);\n+    let _permissions = Permissions::from_mode(0o000);\n+    let _permissions = Permissions::from_mode(permissions);\n+\n+    // PermissionsExt::set_mode\n+    let f = File::create(\"foo.txt\").unwrap();\n+    let metadata = f.metadata().unwrap();\n+    let mut permissions = metadata.permissions();\n+\n+    permissions.set_mode(644);\n+    permissions.set_mode(0o704);\n+\n+    // DirBuilderExt::mode\n+    let mut builder = DirBuilder::new();\n+    builder.mode(755);\n+    builder.mode(0o406);\n+}"}, {"sha": "32845d06594155c56eb4f74db621fc0f6d37ef4a", "filename": "tests/ui/non_octal_unix_permissions.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4be72b0936955b5820ca327fd9370303ccd9ef67/tests%2Fui%2Fnon_octal_unix_permissions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be72b0936955b5820ca327fd9370303ccd9ef67/tests%2Fui%2Fnon_octal_unix_permissions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_octal_unix_permissions.stderr?ref=4be72b0936955b5820ca327fd9370303ccd9ef67", "patch": "@@ -0,0 +1,28 @@\n+error: using a non-octal value to set unix file permissions\n+  --> $DIR/non_octal_unix_permissions.rs:12:18\n+   |\n+LL |     options.mode(440);\n+   |                  ^^^ help: consider using an octal literal instead: `0o440`\n+   |\n+   = note: `-D clippy::non-octal-unix-permissions` implied by `-D warnings`\n+\n+error: using a non-octal value to set unix file permissions\n+  --> $DIR/non_octal_unix_permissions.rs:17:47\n+   |\n+LL |     let _permissions = Permissions::from_mode(647);\n+   |                                               ^^^ help: consider using an octal literal instead: `0o647`\n+\n+error: using a non-octal value to set unix file permissions\n+  --> $DIR/non_octal_unix_permissions.rs:26:26\n+   |\n+LL |     permissions.set_mode(644);\n+   |                          ^^^ help: consider using an octal literal instead: `0o644`\n+\n+error: using a non-octal value to set unix file permissions\n+  --> $DIR/non_octal_unix_permissions.rs:31:18\n+   |\n+LL |     builder.mode(755);\n+   |                  ^^^ help: consider using an octal literal instead: `0o755`\n+\n+error: aborting due to 4 previous errors\n+"}]}