{"sha": "7308c22c6a8d77e82187e290e1f7459870e48d12", "node_id": "C_kwDOAAsO6NoAKDczMDhjMjJjNmE4ZDc3ZTgyMTg3ZTI5MGUxZjc0NTk4NzBlNDhkMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-03T10:26:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-03T10:26:01Z"}, "message": "Auto merge of #100100 - Dylan-DPC:rollup-llcaaq8, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #99371 (Remove synchronization from Windows `hashmap_random_keys`)\n - #99614 (do not claim that transmute is like memcpy)\n - #99738 (rustdoc: avoid inlining modules with duplicate names)\n - #99800 (Fix futex module imports on wasm+atomics)\n - #100079 (Replace `* -> vec` with `-> vec` in docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bea210d58b358a0ed47c2ef39530f415ba7c1ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea210d58b358a0ed47c2ef39530f415ba7c1ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7308c22c6a8d77e82187e290e1f7459870e48d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7308c22c6a8d77e82187e290e1f7459870e48d12", "html_url": "https://github.com/rust-lang/rust/commit/7308c22c6a8d77e82187e290e1f7459870e48d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7308c22c6a8d77e82187e290e1f7459870e48d12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e141246cbbce2a6001f3181d3d0f661bbfd9c7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e141246cbbce2a6001f3181d3d0f661bbfd9c7ea", "html_url": "https://github.com/rust-lang/rust/commit/e141246cbbce2a6001f3181d3d0f661bbfd9c7ea"}, {"sha": "e92b2415aa45ef667acbca5611a5c2ea3bad8a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92b2415aa45ef667acbca5611a5c2ea3bad8a22", "html_url": "https://github.com/rust-lang/rust/commit/e92b2415aa45ef667acbca5611a5c2ea3bad8a22"}], "stats": {"total": 167, "additions": 84, "deletions": 83}, "files": [{"sha": "cabc5017f1de0ef59528e081a61d309fa8db2eb2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -1207,29 +1207,34 @@ extern \"rust-intrinsic\" {\n \n     /// Reinterprets the bits of a value of one type as another type.\n     ///\n-    /// Both types must have the same size. Neither the original, nor the result,\n-    /// may be an [invalid value](../../nomicon/what-unsafe-does.html).\n+    /// Both types must have the same size. Compilation will fail if this is not guaranteed.\n     ///\n     /// `transmute` is semantically equivalent to a bitwise move of one type\n     /// into another. It copies the bits from the source value into the\n-    /// destination value, then forgets the original. It's equivalent to C's\n-    /// `memcpy` under the hood, just like `transmute_copy`.\n+    /// destination value, then forgets the original. Note that source and destination\n+    /// are passed by-value, which means if `T` or `U` contain padding, that padding\n+    /// is *not* guaranteed to be preserved by `transmute`.\n+    ///\n+    /// Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at\n+    /// their given type. Violating this condition leads to [undefined behavior][ub]. The compiler\n+    /// will generate code *assuming that you, the programmer, ensure that there will never be\n+    /// undefined behavior*. It is therefore your responsibility to guarantee that every value\n+    /// passed to `transmute` is valid at both types `T` and `U`. Failing to uphold this condition\n+    /// may lead to unexpected and unstable compilation results. This makes `transmute` **incredibly\n+    /// unsafe**. `transmute` should be the absolute last resort.\n+    ///\n+    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n+    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n+    /// (And even outside `const`, such transmutation is touching on many unspecified aspects of the\n+    /// Rust memory model and should be avoided. See below for alternatives.)\n     ///\n     /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n     /// themselves* is not a concern. As with any other function, the compiler already ensures\n     /// both `T` and `U` are properly aligned. However, when transmuting values that *point\n     /// elsewhere* (such as pointers, references, boxes\u2026), the caller has to ensure proper\n     /// alignment of the pointed-to values.\n     ///\n-    /// `transmute` is **incredibly** unsafe. There are a vast number of ways to\n-    /// cause [undefined behavior][ub] with this function. `transmute` should be\n-    /// the absolute last resort.\n-    ///\n-    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n-    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n-    ///\n-    /// The [nomicon](../../nomicon/transmutes.html) has additional\n-    /// documentation.\n+    /// The [nomicon](../../nomicon/transmutes.html) has additional documentation.\n     ///\n     /// [ub]: ../../reference/behavior-considered-undefined.html\n     ///"}, {"sha": "4159efe2a0523e2b8688a6796e189136261bd94c", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -52,9 +52,11 @@ cfg_if::cfg_if! {\n         #[path = \"../unix/locks\"]\n         pub mod locks {\n             #![allow(unsafe_op_in_unsafe_fn)]\n-            mod futex;\n+            mod futex_condvar;\n+            mod futex_mutex;\n             mod futex_rwlock;\n-            pub(crate) use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+            pub(crate) use futex_condvar::{Condvar, MovableCondvar};\n+            pub(crate) use futex_mutex::{Mutex, MovableMutex};\n             pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n         }\n         #[path = \"atomics/futex.rs\"]"}, {"sha": "f8fd93a7398e1b75c35d255e30e24447461b9cc4", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 8, "deletions": 60, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -1,62 +1,9 @@\n use crate::io;\n use crate::mem;\n-use crate::sync;\n+use crate::ptr;\n use crate::sys::c;\n \n-/// The kinds of HashMap RNG that may be available\n-#[derive(Clone, Copy, Debug, PartialEq)]\n-enum HashMapRng {\n-    Preferred,\n-    Fallback,\n-}\n-\n pub fn hashmap_random_keys() -> (u64, u64) {\n-    match get_hashmap_rng() {\n-        HashMapRng::Preferred => {\n-            preferred_rng().expect(\"couldn't generate random bytes with preferred RNG\")\n-        }\n-        HashMapRng::Fallback => {\n-            fallback_rng().expect(\"couldn't generate random bytes with fallback RNG\")\n-        }\n-    }\n-}\n-\n-/// Returns the HashMap RNG that should be used\n-///\n-/// Panics if they are both broken\n-fn get_hashmap_rng() -> HashMapRng {\n-    // Assume that if the preferred RNG is broken the first time we use it, it likely means\n-    // that: the DLL has failed to load, there is no point to calling it over-and-over again,\n-    // and we should cache the result\n-    static VALUE: sync::OnceLock<HashMapRng> = sync::OnceLock::new();\n-    *VALUE.get_or_init(choose_hashmap_rng)\n-}\n-\n-/// Test whether we should use the preferred or fallback RNG\n-///\n-/// If the preferred RNG is successful, we choose it. Otherwise, if the fallback RNG is successful,\n-/// we choose that\n-///\n-/// Panics if both the preferred and the fallback RNG are both non-functional\n-fn choose_hashmap_rng() -> HashMapRng {\n-    let preferred_error = match preferred_rng() {\n-        Ok(_) => return HashMapRng::Preferred,\n-        Err(e) => e,\n-    };\n-\n-    match fallback_rng() {\n-        Ok(_) => return HashMapRng::Fallback,\n-        Err(fallback_error) => panic!(\n-            \"preferred RNG broken: `{}`, fallback RNG broken: `{}`\",\n-            preferred_error, fallback_error\n-        ),\n-    }\n-}\n-\n-/// Generate random numbers using the preferred RNG function (BCryptGenRandom)\n-fn preferred_rng() -> Result<(u64, u64), io::Error> {\n-    use crate::ptr;\n-\n     let mut v = (0, 0);\n     let ret = unsafe {\n         c::BCryptGenRandom(\n@@ -66,22 +13,23 @@ fn preferred_rng() -> Result<(u64, u64), io::Error> {\n             c::BCRYPT_USE_SYSTEM_PREFERRED_RNG,\n         )\n     };\n-\n-    if ret == 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+    if ret != 0 { fallback_rng() } else { v }\n }\n \n /// Generate random numbers using the fallback RNG function (RtlGenRandom)\n #[cfg(not(target_vendor = \"uwp\"))]\n-fn fallback_rng() -> Result<(u64, u64), io::Error> {\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n     let mut v = (0, 0);\n     let ret =\n         unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n \n-    if ret != 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+    if ret != 0 { v } else { panic!(\"fallback RNG broken: {}\", io::Error::last_os_error()) }\n }\n \n /// We can't use RtlGenRandom with UWP, so there is no fallback\n #[cfg(target_vendor = \"uwp\")]\n-fn fallback_rng() -> Result<(u64, u64), io::Error> {\n-    Err(io::const_io_error!(io::ErrorKind::Unsupported, \"RtlGenRandom() not supported on UWP\"))\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n+    panic!(\"fallback RNG broken: RtlGenRandom() not supported on UWP\");\n }"}, {"sha": "116b1f16f7f4b2c29c099f0f7156553ff07c916d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -51,19 +51,24 @@ pub(crate) trait Clean<'tcx, T> {\n impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n         let mut items: Vec<Item> = vec![];\n-        items.extend(\n-            self.foreigns\n-                .iter()\n-                .map(|(item, renamed)| clean_maybe_renamed_foreign_item(cx, item, *renamed)),\n-        );\n-        items.extend(self.mods.iter().map(|x| x.clean(cx)));\n+        let mut inserted = FxHashSet::default();\n+        items.extend(self.foreigns.iter().map(|(item, renamed)| {\n+            let item = clean_maybe_renamed_foreign_item(cx, item, *renamed);\n+            if let Some(name) = item.name {\n+                inserted.insert((item.type_(), name));\n+            }\n+            item\n+        }));\n+        items.extend(self.mods.iter().map(|x| {\n+            inserted.insert((ItemType::Module, x.name));\n+            x.clean(cx)\n+        }));\n \n         // Split up imports from all other items.\n         //\n         // This covers the case where somebody does an import which should pull in an item,\n         // but there's already an item with the same namespace and same name. Rust gives\n         // priority to the not-imported one, so we should, too.\n-        let mut inserted = FxHashSet::default();\n         items.extend(self.items.iter().flat_map(|(item, renamed)| {\n             // First, lower everything other than imports.\n             if matches!(item.kind, hir::ItemKind::Use(..)) {"}, {"sha": "0702b2b0b7caf612ac30135fc861b9a311de1006", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -816,7 +816,7 @@ function loadCss(cssFileName) {\n              <code>enum</code>, <code>trait</code>, <code>type</code>, <code>macro</code>, \\\n              and <code>const</code>.\",\n             \"Search functions by type signature (e.g., <code>vec -&gt; usize</code> or \\\n-             <code>* -&gt; vec</code>)\",\n+             <code>-&gt; vec</code>)\",\n             \"Search multiple things at once by splitting your query with comma (e.g., \\\n              <code>str,u8</code> or <code>String,struct:Vec,test</code>)\",\n             \"You can look for items with an exact name by putting double quotes around \\"}, {"sha": "234d55efb554d06ad852deda9ac47a8d6a334894", "filename": "src/test/rustdoc/auxiliary/issue-99734-aux.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99734-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99734-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99734-aux.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -0,0 +1,11 @@\n+pub struct Option;\n+impl Option {\n+    pub fn unwrap(self) {}\n+}\n+\n+/// [`Option::unwrap`]\n+pub mod task {}\n+\n+extern \"C\" {\n+    pub fn main() -> std::ffi::c_int;\n+}"}, {"sha": "3208fea05b3762d05f0943e39de8ee50609aa942", "filename": "src/test/rustdoc/issue-99734-multiple-foreigns-w-same-name.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Ftest%2Frustdoc%2Fissue-99734-multiple-foreigns-w-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Ftest%2Frustdoc%2Fissue-99734-multiple-foreigns-w-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99734-multiple-foreigns-w-same-name.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:issue-99734-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99734_aux;\n+\n+pub use issue_99734_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"fn\"][@title=\"foo::main fn\"]' 1\n+\n+extern \"C\" {\n+    pub fn main() -> std::ffi::c_int;\n+}"}, {"sha": "b2f9b8b46578b870bf91eba1eafdd39654e67f5d", "filename": "src/test/rustdoc/issue-99734-multiple-mods-w-same-name.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Ftest%2Frustdoc%2Fissue-99734-multiple-mods-w-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7308c22c6a8d77e82187e290e1f7459870e48d12/src%2Ftest%2Frustdoc%2Fissue-99734-multiple-mods-w-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99734-multiple-mods-w-same-name.rs?ref=7308c22c6a8d77e82187e290e1f7459870e48d12", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:issue-99734-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99734_aux;\n+\n+pub use issue_99734_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"mod\"][@title=\"foo::task mod\"]' 1\n+\n+pub mod task {}"}]}