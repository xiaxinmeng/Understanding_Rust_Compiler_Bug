{"sha": "a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MWYyNDQ1Y2JhMmE0OGJiN2VhNmM4NDc3ZTMxOThiMjk3ZjNjNjc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-07-27T19:30:55Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T12:09:08Z"}, "message": "Less stubs", "tree": {"sha": "cce28de2e55620a94041fb481e914b16da5569d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce28de2e55620a94041fb481e914b16da5569d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "html_url": "https://github.com/rust-lang/rust/commit/a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e5224484b9214648826e1b15aa9150c79a407c", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e5224484b9214648826e1b15aa9150c79a407c", "html_url": "https://github.com/rust-lang/rust/commit/21e5224484b9214648826e1b15aa9150c79a407c"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "a19dbf33f6bc85cfc129fd8f4f5789c2f621f9bf", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "patch": "@@ -121,7 +121,7 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n             Some(cap) => match current_visibility {\n                 Some(current_visibility) => builder.replace_snippet(\n                     cap,\n-                    dbg!(current_visibility.syntax()).text_range(),\n+                    current_visibility.syntax().text_range(),\n                     format!(\"$0{}\", missing_visibility),\n                 ),\n                 None => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),"}, {"sha": "ffeca5e82726f771c9d62ecda0b551a016e87fc0", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "patch": "@@ -16,13 +16,16 @@\n \n use std::{any::Any, fmt};\n \n-use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n+use ra_syntax::SyntaxNodePtr;\n \n use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn message(&self) -> String;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n+    fn highlighting_source(&self) -> InFile<SyntaxNodePtr> {\n+        self.source()\n+    }\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n     fn is_experimental(&self) -> bool {\n         false\n@@ -35,12 +38,6 @@ pub trait AstDiagnostic {\n }\n \n impl dyn Diagnostic {\n-    pub fn syntax_node(&self, db: &impl AstDatabase) -> SyntaxNode {\n-        let source = self.source();\n-        let node = db.parse_or_expand(source.file_id).unwrap();\n-        source.value.to_node(&node)\n-    }\n-\n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n         self.as_any().downcast_ref()\n     }"}, {"sha": "73d2414343d311df349125700e1316ec24908ab3", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "patch": "@@ -9,7 +9,7 @@ use hir_def::DefWithBodyId;\n use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n use ra_prof::profile;\n-use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n use crate::db::HirDatabase;\n@@ -64,16 +64,6 @@ pub struct MissingFields {\n     pub list_parent_path: Option<AstPtr<ast::Path>>,\n }\n \n-impl MissingFields {\n-    fn root(&self, db: &dyn AstDatabase) -> SyntaxNode {\n-        db.parse_or_expand(self.file).unwrap()\n-    }\n-\n-    pub fn list_parent_ast(&self, db: &dyn AstDatabase) -> Option<ast::Path> {\n-        self.list_parent_path.as_ref().map(|path| path.to_node(&self.root(db)))\n-    }\n-}\n-\n impl Diagnostic for MissingFields {\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n@@ -85,16 +75,25 @@ impl Diagnostic for MissingFields {\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n         InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n+\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n+\n+    fn highlighting_source(&self) -> InFile<SyntaxNodePtr> {\n+        self.list_parent_path\n+            .clone()\n+            .map(|path| InFile { file_id: self.file, value: path.into() })\n+            .unwrap_or_else(|| self.source())\n+    }\n }\n \n impl AstDiagnostic for MissingFields {\n     type AST = ast::RecordExprFieldList;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n-        self.field_list.to_node(&self.root(db))\n+        let root = db.parse_or_expand(self.file).unwrap();\n+        self.field_list.to_node(&root)\n     }\n }\n \n@@ -260,7 +259,10 @@ impl AstDiagnostic for MismatchedArgCount {\n #[cfg(test)]\n mod tests {\n     use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId};\n-    use hir_expand::diagnostics::{Diagnostic, DiagnosticSinkBuilder};\n+    use hir_expand::{\n+        db::AstDatabase,\n+        diagnostics::{Diagnostic, DiagnosticSinkBuilder},\n+    };\n     use ra_db::{fixture::WithFixture, FileId, SourceDatabase, SourceDatabaseExt};\n     use ra_syntax::{TextRange, TextSize};\n     use rustc_hash::FxHashMap;\n@@ -307,7 +309,9 @@ mod tests {\n         db.diagnostics(|d| {\n             // FXIME: macros...\n             let file_id = d.source().file_id.original_file(&db);\n-            let range = d.syntax_node(&db).text_range();\n+            let highlighting_source = d.highlighting_source();\n+            let node = db.parse_or_expand(highlighting_source.file_id).unwrap();\n+            let range = highlighting_source.value.to_node(&node).text_range();\n             let message = d.message().to_owned();\n             actual.entry(file_id).or_default().push((range, message));\n         });\n@@ -345,7 +349,7 @@ struct Beefy {\n }\n fn baz() {\n     let zz = Beefy {\n-           //^^^^^... Missing structure fields:\n+           //^^^^^ Missing structure fields:\n            //    |    - seven\n         one: (),\n         two: (),\n@@ -370,8 +374,8 @@ struct S { foo: i32, bar: () }\n impl S {\n     fn new() -> S {\n         S {\n-        //^... Missing structure fields:\n-        //|    - bar\n+      //^ Missing structure fields:\n+      //|    - bar\n             foo: 92,\n             baz: 62,\n           //^^^^^^^ no such field"}, {"sha": "e847df6ea9cb4ac94b250d0979370af91008faa3", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61f2445cba2a48bb7ea6c8477e3198b297f3c67/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=a61f2445cba2a48bb7ea6c8477e3198b297f3c67", "patch": "@@ -69,7 +69,6 @@ pub(crate) fn diagnostics(\n             })\n         })\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n-            let range = sema.diagnostics_range(d).range;\n             // Note that although we could add a diagnostics to\n             // fill the missing tuple field, e.g :\n             // `struct A(usize);`\n@@ -95,15 +94,12 @@ pub(crate) fn diagnostics(\n                 };\n                 Some((\n                     Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()),\n-                    range,\n+                    sema.diagnostics_range(d).range,\n                 ))\n             };\n \n             res.borrow_mut().push(Diagnostic {\n-                range: d\n-                    .list_parent_ast(db)\n-                    .map(|path| path.syntax().text_range())\n-                    .unwrap_or(range),\n+                range: d.highlighting_source().file_syntax(db).text_range(),\n                 message: d.message(),\n                 severity: Severity::Error,\n                 fix,"}]}