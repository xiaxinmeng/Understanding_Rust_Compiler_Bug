{"sha": "be8d728f3cb1cb79a630c6e6aba6df923dd3e999", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOGQ3MjhmM2NiMWNiNzlhNjMwYzZlNmFiYTZkZjkyM2RkM2U5OTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-24T15:58:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-24T15:58:04Z"}, "message": "show how to set with ptr::write", "tree": {"sha": "3d8981a506eefe63d98dfca12d20bd5502e6226a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d8981a506eefe63d98dfca12d20bd5502e6226a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8d728f3cb1cb79a630c6e6aba6df923dd3e999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8d728f3cb1cb79a630c6e6aba6df923dd3e999", "html_url": "https://github.com/rust-lang/rust/commit/be8d728f3cb1cb79a630c6e6aba6df923dd3e999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8d728f3cb1cb79a630c6e6aba6df923dd3e999/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e2d0c4e5f4afe1bd52ed0ebe0be03890d3af62", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e2d0c4e5f4afe1bd52ed0ebe0be03890d3af62", "html_url": "https://github.com/rust-lang/rust/commit/a5e2d0c4e5f4afe1bd52ed0ebe0be03890d3af62"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "967a36f6f1c399820eb8fd9fceebc63ff211f952", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be8d728f3cb1cb79a630c6e6aba6df923dd3e999/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8d728f3cb1cb79a630c6e6aba6df923dd3e999/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=be8d728f3cb1cb79a630c6e6aba6df923dd3e999", "patch": "@@ -1191,7 +1191,8 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// Sets the value of the `MaybeUninit<T>`. This overwrites any previous value\n-    /// without dropping it. For your convenience, this also returns a mutable\n+    /// without dropping it, so be careful not to use this twice unless you want to\n+    /// skip running the destructor. For your convenience, this also returns a mutable\n     /// reference to the (now safely initialized) contents of `self`.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n@@ -1214,7 +1215,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n-    /// x.set(vec![0,1,2]);\n+    /// unsafe { x.as_mut_ptr().write(vec![0,1,2]); }\n     /// // Create a reference into the `MaybeUninit<T>`. This is okay because we initialized it.\n     /// let x_vec = unsafe { &*x.as_ptr() };\n     /// assert_eq!(x_vec.len(), 3);\n@@ -1250,7 +1251,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n-    /// x.set(vec![0,1,2]);\n+    /// unsafe { x.as_mut_ptr().write(vec![0,1,2]); }\n     /// // Create a reference into the `MaybeUninit<Vec<u32>>`.\n     /// // This is okay because we initialized it.\n     /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n@@ -1295,7 +1296,7 @@ impl<T> MaybeUninit<T> {\n     /// use std::mem::MaybeUninit;\n     ///\n     /// let mut x = MaybeUninit::<bool>::uninitialized();\n-    /// x.set(true);\n+    /// unsafe { x.as_mut_ptr().write(true); }\n     /// let x_init = unsafe { x.into_initialized() };\n     /// assert_eq!(x_init, true);\n     /// ```"}]}