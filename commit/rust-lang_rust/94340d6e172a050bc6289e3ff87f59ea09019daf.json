{"sha": "94340d6e172a050bc6289e3ff87f59ea09019daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzQwZDZlMTcyYTA1MGJjNjI4OWUzZmY4N2Y1OWVhMDkwMTlkYWY=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T02:23:29Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T10:24:25Z"}, "message": "add documentation to functions that call `do_check` and add a test against lint ordering changing", "tree": {"sha": "6820457e4e94388a09918d43dcee4c2ae33ae950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6820457e4e94388a09918d43dcee4c2ae33ae950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94340d6e172a050bc6289e3ff87f59ea09019daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94340d6e172a050bc6289e3ff87f59ea09019daf", "html_url": "https://github.com/rust-lang/rust/commit/94340d6e172a050bc6289e3ff87f59ea09019daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94340d6e172a050bc6289e3ff87f59ea09019daf/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f36bc2f3ceede89f20dd1e20301eac50d9f68c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f36bc2f3ceede89f20dd1e20301eac50d9f68c", "html_url": "https://github.com/rust-lang/rust/commit/19f36bc2f3ceede89f20dd1e20301eac50d9f68c"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "231f13b236c18c00cd0185f0efe912ee20a4258c", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94340d6e172a050bc6289e3ff87f59ea09019daf/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94340d6e172a050bc6289e3ff87f59ea09019daf/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=94340d6e172a050bc6289e3ff87f59ea09019daf", "patch": "@@ -694,7 +694,10 @@ fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'\n     }\n }\n \n-/// Check if the the type conversion can be expressed as a pointer cast, instead of a transmute.\n+/// Check if the the type conversion can be expressed as a pointer cast, instead of\n+/// a transmute. In certain cases, including some invalid casts from array\n+/// references to pointers, this may cause additional errors to be emitted and/or\n+/// ICE error messages.\n fn can_be_expressed_as_pointer_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n     use CastKind::*;\n     matches!(\n@@ -710,7 +713,10 @@ fn can_be_expressed_as_pointer_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<\n     )\n }\n \n-/// If a cast from from_ty to to_ty is valid, returns an Ok containing the kind of the cast.\n+/// If a cast from from_ty to to_ty is valid, returns an Ok containing the kind of\n+/// the cast. In certain cases, including some invalid casts from array references\n+/// to pointers, this may cause additional errors to be emitted and/or ICE error\n+/// messages.\n fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner;"}, {"sha": "007526da40df8ddc5048d21f1383dfbf60806848", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94340d6e172a050bc6289e3ff87f59ea09019daf/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94340d6e172a050bc6289e3ff87f59ea09019daf/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=94340d6e172a050bc6289e3ff87f59ea09019daf", "patch": "@@ -63,3 +63,14 @@ fn main() {\n     };\n     let usize_from_fn_ptr = foo as *const usize;\n }\n+\n+// If a ref-to-ptr cast of this form where the pointer type points to a type other\n+// than the referenced type, calling `CastCheck::do_check` has been observed to\n+// cause an ICE error message. `do_check` is currently called inside the\n+// `transmutes_expressible_as_ptr_casts` check, but other, more specific lints\n+// currently prevent it from being called in these cases. This test is meant to\n+// fail if the ordering of the checks ever changes enough to cause these cases to\n+// fall through into `do_check`.\n+fn trigger_do_check_to_emit_error(in_param: &[i32; 1]) -> *const u8 {\n+    unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n+}\n\\ No newline at end of file"}]}