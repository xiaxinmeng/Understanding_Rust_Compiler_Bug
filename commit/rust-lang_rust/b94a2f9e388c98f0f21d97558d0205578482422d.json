{"sha": "b94a2f9e388c98f0f21d97558d0205578482422d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NGEyZjllMzg4Yzk4ZjBmMjFkOTc1NThkMDIwNTU3ODQ4MjQyMmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-07T00:20:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T00:20:41Z"}, "message": "Rollup merge of #66111 - RalfJung:from_raw_parts, r=Centril\n\nimprove from_raw_parts docs\n\nTriggered by https://github.com/rust-lang/rfcs/pull/2806. Hopefully this helps clarify that joining slices across allocations is not possible in Rust currently.\n\nr? @Centril", "tree": {"sha": "e9d666b619dfae01c964010f793012377fec86bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d666b619dfae01c964010f793012377fec86bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94a2f9e388c98f0f21d97558d0205578482422d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw2NZCRBK7hj4Ov3rIwAAdHIIAI6xVK61/zwHj8hhgKKyO+Ro\nydsuTNfuz2L+DvZOfwd/WHNyJld7IRD1nxbro1fn5drZXtI8QeKaiZcZgdvAcF+Z\nV63JS0CXQYgx28bJeO7xkJiVXToqnJ3MMDFBY/SbnzvsQ86L/8A7McPPxCAtsU/f\nOIwvK5FUk5+bkDGyzsfdmevkiYi15GcMLnjhJVfk5o8W8rxvUMKhklDtpvwX/fDD\nPOH3IMq6GOqQJe1lfY21A67qIwfH/2Snu7sP2BFA8rBD9kgkNq0EYIISoMCF4PJz\n+QihgNMHc5xpamC6iccEwJe9Ltf6ENdnZWbD+XaaPp6cMF7tmZTDo18SlFloS88=\n=sBiN\n-----END PGP SIGNATURE-----\n", "payload": "tree e9d666b619dfae01c964010f793012377fec86bf\nparent 64b2f5cc9f7aa7f93ade55ecdf40cbac5c3c40db\nparent 11a48a0423410376dbe9a6080b41aa90e43cead2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573086041 +0900\ncommitter GitHub <noreply@github.com> 1573086041 +0900\n\nRollup merge of #66111 - RalfJung:from_raw_parts, r=Centril\n\nimprove from_raw_parts docs\n\nTriggered by https://github.com/rust-lang/rfcs/pull/2806. Hopefully this helps clarify that joining slices across allocations is not possible in Rust currently.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94a2f9e388c98f0f21d97558d0205578482422d", "html_url": "https://github.com/rust-lang/rust/commit/b94a2f9e388c98f0f21d97558d0205578482422d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94a2f9e388c98f0f21d97558d0205578482422d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b2f5cc9f7aa7f93ade55ecdf40cbac5c3c40db", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b2f5cc9f7aa7f93ade55ecdf40cbac5c3c40db", "html_url": "https://github.com/rust-lang/rust/commit/64b2f5cc9f7aa7f93ade55ecdf40cbac5c3c40db"}, {"sha": "11a48a0423410376dbe9a6080b41aa90e43cead2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a48a0423410376dbe9a6080b41aa90e43cead2", "html_url": "https://github.com/rust-lang/rust/commit/11a48a0423410376dbe9a6080b41aa90e43cead2"}], "stats": {"total": 85, "additions": 61, "deletions": 24}, "files": [{"sha": "f7dff4c21f7c4343bdb79759ecf7a4755d38b720", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b94a2f9e388c98f0f21d97558d0205578482422d/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94a2f9e388c98f0f21d97558d0205578482422d/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=b94a2f9e388c98f0f21d97558d0205578482422d", "patch": "@@ -687,7 +687,7 @@ impl String {\n     /// checked:\n     ///\n     /// * The memory at `ptr` needs to have been previously allocated by the\n-    ///   same allocator the standard library uses.\n+    ///   same allocator the standard library uses, with a required alignment of exactly 1.\n     /// * `length` needs to be less than or equal to `capacity`.\n     /// * `capacity` needs to be the correct value.\n     ///"}, {"sha": "1a13ac465f4363761b45f8b480f00c02c7d816ec", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b94a2f9e388c98f0f21d97558d0205578482422d/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94a2f9e388c98f0f21d97558d0205578482422d/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=b94a2f9e388c98f0f21d97558d0205578482422d", "patch": "@@ -18,6 +18,10 @@\n //! * A [null] pointer is *never* valid, not even for accesses of [size zero][zst].\n //! * All pointers (except for the null pointer) are valid for all operations of\n //!   [size zero][zst].\n+//! * For a pointer to be valid, it is necessary, but not always sufficient, that the pointer\n+//!   be *dereferencable*: the memory range of the given size starting at the pointer must all be\n+//!   within the bounds of a single allocated object. Note that in Rust,\n+//!   every (stack-allocated) variable is considered a separate allocated object.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different\n@@ -221,10 +225,15 @@ pub(crate) struct FatPtr<T> {\n     pub(crate) len: usize,\n }\n \n-/// Forms a slice from a pointer and a length.\n+/// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes.\n ///\n+/// This function is safe, but actually using the return value is unsafe.\n+/// See the documentation of [`from_raw_parts`] for slice safety requirements.\n+///\n+/// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+///\n /// # Examples\n ///\n /// ```rust\n@@ -243,12 +252,16 @@ pub fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n     unsafe { Repr { raw: FatPtr { data, len } }.rust }\n }\n \n-/// Performs the same functionality as [`from_raw_parts`], except that a\n-/// mutable slice is returned.\n+/// Performs the same functionality as [`slice_from_raw_parts`], except that a\n+/// raw mutable slice is returned, as opposed to a raw immutable slice.\n ///\n-/// See the documentation of [`from_raw_parts`] for more details.\n+/// See the documentation of [`slice_from_raw_parts`] for more details.\n ///\n-/// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+/// This function is safe, but actually using the return value is unsafe.\n+/// See the documentation of [`from_raw_parts_mut`] for slice safety requirements.\n+///\n+/// [`slice_from_raw_parts`]: fn.slice_from_raw_parts.html\n+/// [`from_raw_parts_mut`]: ../../std/slice/fn.from_raw_parts_mut.html\n #[inline]\n #[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n pub fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {"}, {"sha": "7655b2f8065324ecce6d63f67bcd0a2802a6f017", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b94a2f9e388c98f0f21d97558d0205578482422d/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94a2f9e388c98f0f21d97558d0205578482422d/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b94a2f9e388c98f0f21d97558d0205578482422d", "patch": "@@ -5272,18 +5272,24 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n ///\n /// # Safety\n ///\n-/// This function is unsafe as there is no guarantee that the given pointer is\n-/// valid for `len` elements, nor whether the lifetime inferred is a suitable\n-/// lifetime for the returned slice.\n+/// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// `data` must be non-null and aligned, even for zero-length slices. One\n-/// reason for this is that enum layout optimizations may rely on references\n-/// (including slices of any length) being aligned and non-null to distinguish\n-/// them from other data. You can obtain a pointer that is usable as `data`\n-/// for zero-length slices using [`NonNull::dangling()`].\n+/// * `data` must be [valid] for reads for `len * mem::size_of::<T>()` many bytes,\n+///   and it must be properly aligned. This means in particular:\n ///\n-/// The total size of the slice must be no larger than `isize::MAX` **bytes**\n-/// in memory. See the safety documentation of [`pointer::offset`].\n+///     * The entire memory range of this slice must be contained within a single allocated object!\n+///       Slices can never span across multiple allocated objects.\n+///     * `data` must be non-null and aligned even for zero-length slices. One\n+///       reason for this is that enum layout optimizations may rely on references\n+///       (including slices of any length) being aligned and non-null to distinguish\n+///       them from other data. You can obtain a pointer that is usable as `data`\n+///       for zero-length slices using [`NonNull::dangling()`].\n+///\n+/// * The memory referenced by the returned slice must not be mutated for the duration\n+///   of lifetime `'a`, except inside an `UnsafeCell`.\n+///\n+/// * The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`.\n+///   See the safety documentation of [`pointer::offset`].\n ///\n /// # Caveat\n ///\n@@ -5305,35 +5311,53 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n /// assert_eq!(slice[0], 42);\n /// ```\n ///\n+/// [valid]: ../../std/ptr/index.html#safety\n /// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-                  \"attempt to create slice covering half the address space\");\n+                  \"attempt to create slice covering at least half the address space\");\n     &*ptr::slice_from_raw_parts(data, len)\n }\n \n /// Performs the same functionality as [`from_raw_parts`], except that a\n /// mutable slice is returned.\n ///\n-/// This function is unsafe for the same reasons as [`from_raw_parts`], as well\n-/// as not being able to provide a non-aliasing guarantee of the returned\n-/// mutable slice. `data` must be non-null and aligned even for zero-length\n-/// slices as with [`from_raw_parts`]. The total size of the slice must be no\n-/// larger than `isize::MAX` **bytes** in memory.\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `data` must be [valid] for writes for `len * mem::size_of::<T>()` many bytes,\n+///   and it must be properly aligned. This means in particular:\n ///\n-/// See the documentation of [`from_raw_parts`] for more details.\n+///     * The entire memory range of this slice must be contained within a single allocated object!\n+///       Slices can never span across multiple allocated objects.\n+///     * `data` must be non-null and aligned even for zero-length slices. One\n+///       reason for this is that enum layout optimizations may rely on references\n+///       (including slices of any length) being aligned and non-null to distinguish\n+///       them from other data. You can obtain a pointer that is usable as `data`\n+///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * The memory referenced by the returned slice must not be accessed through any other pointer\n+///   (not derived from the return value) for the duration of lifetime `'a`.\n+///   Both read and write accesses are forbidden.\n+///\n+/// * The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`.\n+///   See the safety documentation of [`pointer::offset`].\n+///\n+/// [valid]: ../../std/ptr/index.html#safety\n+/// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n+/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n /// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n     debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-                  \"attempt to create slice covering half the address space\");\n+                  \"attempt to create slice covering at least half the address space\");\n     &mut *ptr::slice_from_raw_parts_mut(data, len)\n }\n "}]}