{"sha": "34685044f9d6c01a87a05fde9778586079965958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Njg1MDQ0ZjlkNmMwMWE4N2EwNWZkZTk3Nzg1ODYwNzk5NjU5NTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-10T01:01:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-10T01:01:10Z"}, "message": "add a bunch of compile-fail tests for validation", "tree": {"sha": "54a80eec5b6cdeb8f3a52bdc943d14dc521c09db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a80eec5b6cdeb8f3a52bdc943d14dc521c09db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34685044f9d6c01a87a05fde9778586079965958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34685044f9d6c01a87a05fde9778586079965958", "html_url": "https://github.com/rust-lang/rust/commit/34685044f9d6c01a87a05fde9778586079965958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34685044f9d6c01a87a05fde9778586079965958/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e018b1deb9aa9b485aa6372ee7254c70c119670", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e018b1deb9aa9b485aa6372ee7254c70c119670", "html_url": "https://github.com/rust-lang/rust/commit/5e018b1deb9aa9b485aa6372ee7254c70c119670"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "3dac55aeaac952071a9c9f707bcbddc66ead875b", "filename": "tests/compile-fail/validation_aliasing_mut4.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_aliasing_mut4.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,13 @@\n+#![allow(unused_variables)]\n+\n+mod safe {\n+    use std::cell::Cell;\n+\n+    // Make sure &mut UnsafeCell also has a lock to it\n+    pub fn safe(x: &mut Cell<i32>, y: &i32) {} //~ ERROR: in conflict with lock WriteLock\n+}\n+\n+fn main() {\n+    let x = &mut 0 as *mut _;\n+    unsafe { safe::safe(&mut *(x as *mut _), &*x) };\n+}"}, {"sha": "9e67b2a4ab18c9d48d84ad5f0b34090be915b88f", "filename": "tests/compile-fail/validation_buggy_split_at_mut.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_buggy_split_at_mut.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,22 @@\n+#![allow(unused_variables)]\n+\n+mod safe {\n+    use std::slice::from_raw_parts_mut;\n+\n+    pub fn split_at_mut<T>(self_: &mut [T], mid: usize) -> (&mut [T], &mut [T]) {\n+        let len = self_.len();\n+        let ptr = self_.as_mut_ptr();\n+\n+        unsafe {\n+            assert!(mid <= len);\n+\n+            (from_raw_parts_mut(ptr, len - mid), // BUG: should be \"mid\" instead of \"len - mid\"\n+            from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let mut array = [1,2,3,4];\n+    let _x = safe::split_at_mut(&mut array, 0); //~ ERROR: in conflict with lock WriteLock\n+}"}, {"sha": "1432f4cc9f1720f5565c784d0b5b7a537013ed8b", "filename": "tests/compile-fail/validation_illegal_write.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_illegal_write.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,15 @@\n+#![allow(unused_variables)]\n+\n+mod safe {\n+    pub(crate) fn safe(x: &u32) {\n+        let x : &mut u32 = unsafe { &mut *(x as *const _ as *mut _) };\n+        *x = 42; //~ ERROR: in conflict with lock ReadLock\n+    }\n+}\n+\n+fn main() {\n+    let target = &mut 42;\n+    let target_ref = &target;\n+    // do a reborrow, but we keep the lock\n+    safe::safe(&*target);\n+}"}, {"sha": "3320d2a89d3551699c18bc540f4ad1ba2ca408fc", "filename": "tests/compile-fail/validation_pointer_smuggling.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_pointer_smuggling.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,20 @@\n+#![allow(unused_variables)]\n+\n+static mut PTR: *mut u8 = 0 as *mut _;\n+\n+fn fun1(x: &mut u8) {\n+    unsafe {\n+        PTR = x;\n+    }\n+}\n+\n+fn fun2() {\n+    // Now we use a pointer we are not allowed to use\n+    let _x = unsafe { *PTR }; //~ ERROR: in conflict with lock WriteLock\n+}\n+\n+fn main() {\n+    let mut val = 0;\n+    fun1(&mut val);\n+    fun2();\n+}"}, {"sha": "55c38a694c55e04f61489081b0ee8af353124628", "filename": "tests/compile-fail/validation_recover1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_recover1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover1.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,16 @@\n+#![allow(unused_variables)]\n+\n+#[repr(u32)]\n+enum Bool { True }\n+\n+mod safe {\n+    pub(crate) fn safe(x: &mut super::Bool) {\n+        let x = x as *mut _ as *mut u32;\n+        unsafe { *x = 44; } // out-of-bounds enum discriminant\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Bool::True;\n+    safe::safe(&mut x); //~ ERROR: invalid enum discriminant\n+}"}, {"sha": "756be9fde6fc58d85dd44044d58d26e0d6f06d4f", "filename": "tests/compile-fail/validation_recover2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_recover2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover2.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,14 @@\n+#![allow(unused_variables)]\n+\n+mod safe {\n+    // This makes a ref that was passed to us via &mut alias with things it should not alias with\n+    pub(crate) fn safe(x: &mut &u32, target: &mut u32) {\n+        unsafe { *x = &mut *(target as *mut _); }\n+    }\n+}\n+\n+fn main() {\n+    let target = &mut 42;\n+    let mut target_alias = &42; // initial dummy value\n+    safe::safe(&mut target_alias, target); //~ ERROR: in conflict with lock ReadLock\n+}"}, {"sha": "afe6fe7c0bb9f69fe2a209072c775c6b2f073731", "filename": "tests/compile-fail/validation_recover3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34685044f9d6c01a87a05fde9778586079965958/tests%2Fcompile-fail%2Fvalidation_recover3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_recover3.rs?ref=34685044f9d6c01a87a05fde9778586079965958", "patch": "@@ -0,0 +1,15 @@\n+#![allow(unused_variables)]\n+\n+mod safe {\n+    pub(crate) fn safe(x: *mut u32) {\n+        unsafe { *x = 42; } //~ ERROR: in conflict with lock WriteLock\n+    }\n+}\n+\n+fn main() {\n+    let target = &mut 42u32;\n+    let target2 = target as *mut _;\n+    drop(&mut *target); // reborrow\n+    // Now make sure we still got the lock\n+    safe::safe(target2);\n+}"}]}