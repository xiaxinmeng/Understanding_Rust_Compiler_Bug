{"sha": "be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNzY0NzY0MjFiZmEyZDM4Y2Q5ZGUzZDNkN2IxODhhYzRhZGVlMGE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-14T02:11:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-14T02:11:31Z"}, "message": "Merge pull request #2137 from clippered/add-color-cli-option\n\nadd cli option for color", "tree": {"sha": "2f9453a874293bbea2d9576079b1759d987f94a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9453a874293bbea2d9576079b1759d987f94a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaClDTCRBK7hj4Ov3rIwAAdHIIAEYbXl2kr+fymkk3IaDK2xQl\nur5umWOayBdjF1GIZwwShb7l1AqHAOVHRepYvV2lbI5aVPQT0KuDECiLcIx/bQS5\nGRJRFYIBwmBEmYviBcQiFRKpqrI2ie5NfRHqLhSoly3Sx/DRMB2tlbYSCn2N4uKo\nY7qGon7dmPAs6xxpfJLFjyN+6PI8ruupGj21x76DUBlgfM3PDmfbhQgQtBoV5S7Q\nkVIhx+o081/WL5WZwumhV+xH1qSU4xmJdq1lqPYigePGtdFlxRcrT4PL9efN4yhH\nAUpdFLj9t5twhCI28eNsvsNBFlzrULRcEa9LgpKTSSR7o0R5nBPWGYDm3wmRvSc=\n=cIkl\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f9453a874293bbea2d9576079b1759d987f94a2\nparent bf15438ab49e6f6846b62bf64513c74ff1ac3d88\nparent 794a215b27688426b926529fc499f535e63eb40c\nauthor Nick Cameron <nrc@ncameron.org> 1510625491 +1300\ncommitter GitHub <noreply@github.com> 1510625491 +1300\n\nMerge pull request #2137 from clippered/add-color-cli-option\n\nadd cli option for color"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "html_url": "https://github.com/rust-lang/rust/commit/be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf15438ab49e6f6846b62bf64513c74ff1ac3d88", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf15438ab49e6f6846b62bf64513c74ff1ac3d88", "html_url": "https://github.com/rust-lang/rust/commit/bf15438ab49e6f6846b62bf64513c74ff1ac3d88"}, {"sha": "794a215b27688426b926529fc499f535e63eb40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/794a215b27688426b926529fc499f535e63eb40c", "html_url": "https://github.com/rust-lang/rust/commit/794a215b27688426b926529fc499f535e63eb40c"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "4a0411447899151bdf80c3ba311a138a006d4ca4", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -25,7 +25,7 @@ use getopts::{HasArg, Matches, Occur, Options};\n \n use rustfmt::{run, Input, Summary};\n use rustfmt::file_lines::FileLines;\n-use rustfmt::config::{get_toml_path, Config, WriteMode};\n+use rustfmt::config::{get_toml_path, Color, Config, WriteMode};\n \n type FmtError = Box<error::Error + Send + Sync>;\n type FmtResult<T> = std::result::Result<T, FmtError>;\n@@ -59,6 +59,7 @@ struct CliOptions {\n     skip_children: bool,\n     verbose: bool,\n     write_mode: Option<WriteMode>,\n+    color: Option<Color>,\n     file_lines: FileLines, // Default is all lines in all files.\n     unstable_features: bool,\n }\n@@ -90,6 +91,13 @@ impl CliOptions {\n             }\n         }\n \n+        if let Some(ref color) = matches.opt_str(\"color\") {\n+            match Color::from_str(color) {\n+                Ok(color) => options.color = Some(color),\n+                _ => return Err(FmtError::from(format!(\"Invalid color: {}\", color))),\n+            }\n+        }\n+\n         if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n             options.file_lines = file_lines.parse()?;\n         }\n@@ -105,6 +113,9 @@ impl CliOptions {\n         if let Some(write_mode) = self.write_mode {\n             config.set().write_mode(write_mode);\n         }\n+        if let Some(color) = self.color {\n+            config.set().color(color);\n+        }\n     }\n }\n \n@@ -131,6 +142,12 @@ fn make_opts() -> Options {\n         \"how to write output (not usable when piping from stdin)\",\n         \"[replace|overwrite|display|plain|diff|coverage|checkstyle]\",\n     );\n+    opts.optopt(\n+        \"\",\n+        \"color\",\n+        \"use colored output (if supported)\",\n+        \"[always|never|auto]\",\n+    );\n     opts.optflag(\"\", \"skip-children\", \"don't reformat child modules\");\n \n     opts.optflag("}, {"sha": "9fef7662a183746b21773022ce35908d8134be5a", "filename": "src/config.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -147,6 +147,15 @@ configuration_option_enum! { WriteMode:\n     Checkstyle,\n }\n \n+configuration_option_enum! { Color:\n+    // Always use color, whether it is a piped or terminal output\n+    Always,\n+    // Never use color\n+    Never,\n+    // Automatically use color, if supported by terminal\n+    Auto,\n+}\n+\n /// Trait for types that can be used in `Config`.\n pub trait ConfigType: Sized {\n     /// Returns hint text for use in `Config::print_docs()`. For enum types, this is a\n@@ -628,6 +637,8 @@ create_config! {\n     write_mode: WriteMode, WriteMode::Overwrite, false,\n         \"What Write Mode to use when none is supplied: \\\n          Replace, Overwrite, Display, Plain, Diff, Coverage\";\n+    color: Color, Color::Auto, false,\n+        \"What Color option to use when none is supplied: Always, Never, Auto\";\n     condense_wildcard_suffixes: bool, false, false, \"Replace strings of _ wildcards by a single .. \\\n                                               in tuple patterns\";\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls.\";"}, {"sha": "5942934d877f1e33e1c7415e763ddb394bf2bbf0", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -152,9 +152,11 @@ where\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 let mismatch = make_diff(&ori, &fmt, 3);\n                 let has_diff = !mismatch.is_empty();\n-                print_diff(mismatch, |line_num| {\n-                    format!(\"Diff in {} at line {}:\", filename, line_num)\n-                });\n+                print_diff(\n+                    mismatch,\n+                    |line_num| format!(\"Diff in {} at line {}:\", filename, line_num),\n+                    config.color(),\n+                );\n                 return Ok(has_diff);\n             }\n         }"}, {"sha": "1eec30833b9cc3b0fae6785863e0c870a81c0f1e", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -44,7 +44,7 @@ use checkstyle::{output_footer, output_header};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n-use utils::isatty;\n+use utils::use_colored_tty;\n use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n@@ -581,7 +581,8 @@ pub fn run(input: Input, config: &Config) -> Summary {\n             if report.has_warnings() {\n                 match term::stderr() {\n                     Some(ref t)\n-                        if isatty() && t.supports_color() && t.supports_attr(term::Attr::Bold) =>\n+                        if use_colored_tty(config.color()) && t.supports_color()\n+                            && t.supports_attr(term::Attr::Bold) =>\n                     {\n                         match report.print_warnings_fancy(term::stderr().unwrap()) {\n                             Ok(..) => (),"}, {"sha": "daad73dc6ab524613115eb9084b64aee9ab46556", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use config::Color;\n use diff;\n use std::collections::VecDeque;\n use std::io;\n use term;\n-use utils::isatty;\n+use utils::use_colored_tty;\n \n #[derive(Debug, PartialEq)]\n pub enum DiffLine {\n@@ -96,12 +97,12 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n     results\n }\n \n-pub fn print_diff<F>(diff: Vec<Mismatch>, get_section_title: F)\n+pub fn print_diff<F>(diff: Vec<Mismatch>, get_section_title: F, color: Color)\n where\n     F: Fn(u32) -> String,\n {\n     match term::stdout() {\n-        Some(ref t) if isatty() && t.supports_color() => {\n+        Some(ref t) if use_colored_tty(color) && t.supports_color() => {\n             print_diff_fancy(diff, get_section_title, term::stdout().unwrap())\n         }\n         _ => print_diff_basic(diff, get_section_title),"}, {"sha": "b87e2eaf493b6e48ccc06811ee215619b4591024", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -15,6 +15,7 @@ use syntax::ast::{self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMet\n                   NestedMetaItemKind, Path, Visibility};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n \n+use config::Color;\n use rewrite::RewriteContext;\n use shape::Shape;\n \n@@ -484,6 +485,14 @@ pub fn isatty() -> bool {\n     }\n }\n \n+pub fn use_colored_tty(color: Color) -> bool {\n+    match color {\n+        Color::Always => true,\n+        Color::Never => false,\n+        Color::Auto => isatty(),\n+    }\n+}\n+\n pub fn starts_with_newline(s: &str) -> bool {\n     s.starts_with('\\n') || s.starts_with(\"\\r\\n\")\n }"}, {"sha": "aaf287ea7aae4f8bebc9ce4890b6de87e8e4b568", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be76476421bfa2d38cd9de3d3d7b188ac4adee0a/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=be76476421bfa2d38cd9de3d3d7b188ac4adee0a", "patch": "@@ -23,7 +23,7 @@ use std::str::Chars;\n \n use rustfmt::*;\n use rustfmt::filemap::{write_system_newlines, FileMap};\n-use rustfmt::config::{Config, ReportTactic};\n+use rustfmt::config::{Color, Config, ReportTactic};\n use rustfmt::rustfmt_diff::*;\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n@@ -229,9 +229,11 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     let mut t = term::stdout().unwrap();\n \n     for (file_name, diff) in result {\n-        print_diff(diff, |line_num| {\n-            format!(\"\\nMismatch at {}:{}:\", file_name, line_num)\n-        });\n+        print_diff(\n+            diff,\n+            |line_num| format!(\"\\nMismatch at {}:{}:\", file_name, line_num),\n+            Color::Auto,\n+        );\n     }\n \n     t.reset().unwrap();"}]}