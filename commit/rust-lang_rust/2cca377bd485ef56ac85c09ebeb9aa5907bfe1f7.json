{"sha": "2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjY2EzNzdiZDQ4NWVmNTZhYzg1YzA5ZWJlYjlhYTU5MDdiZmUxZjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-24T14:33:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-01-28T10:57:53Z"}, "message": "add `cargo miri test` sub sub command", "tree": {"sha": "324c465d9ed2cfac3637093853d2f2ff043aff4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324c465d9ed2cfac3637093853d2f2ff043aff4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzBQJYjHkxLBxnaXQtbm8tcmVwbHktOTg3OTE2NTcxNjQ3OTQxMzEz\nMUBvbGktb2JrLmRlAAoJEB1ctPxZfDAEwcsP/1cX/eLkMNYxayiW37iGjEhYE7LJ\ncKE/p+nIhoEm7dZ/IvJgz9ktJAmGeBcDAaiEDXDC4u4NX5Mbys9dKPilyRdMQ0Lg\n0Ql9fIRUkko1XDJDpkZL7RDFdWn1P34orLG8z5Crnrke3H3Ooec5rnATHOkecmlh\n+gffCXA5xZLCmUS0EWKyoUUXrCeOVRqDh2OkqCBeUmWll6ZxbO3WyE+Plp6yKHwd\nXHiKQWYUGqFPrczMkIQu8TzXOK6mFM+MgrC5avgSBt1jz/hqKZmxRvwXAGLNR6V+\nNxP1HvKY4ngh+qAFai8A3gxlrO4egMp7WEO0s6AVY4Q6O5+JVLVO/E2RiZar+eDL\n9f6/mCdD+hKE8C+8CqqxWuegEOgtAF4uqhekzru9kUzgW4PWXtMn2nU6sKaFpiZl\ns3276zQtrtDV7BCBbOaJAQKUSDmAnjhjxb+BV1C0SNbgazc4anRpsQCHIWcU3WVV\n1gcVEAYsR5156jEwTciGYa44K1veXWX9Q2beRFhihUowKFQ8os6aoe6qeyOYCoVe\npIHn5LJGtN7IZ1FYdcxhFkqnZIeWRFtDdc6cV2mlEv7XxF1HqH3OkPS7wHTHHQLu\nKnpHiLGX5JBXYj8MYf6qroIEp638ynCsB2V1zGRK2zET6PP26SvAYLDXdB5Ru9w4\nJdQ31gXxvW9UsGZr\n=j1II\n-----END PGP SIGNATURE-----", "payload": "tree 324c465d9ed2cfac3637093853d2f2ff043aff4f\nparent 5adb84645fe1f734acadb9a26422a791a56edef0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1485268431 +0100\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1485601073 +0100\n\nadd `cargo miri test` sub sub command"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7", "html_url": "https://github.com/rust-lang/rust/commit/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5adb84645fe1f734acadb9a26422a791a56edef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adb84645fe1f734acadb9a26422a791a56edef0", "html_url": "https://github.com/rust-lang/rust/commit/5adb84645fe1f734acadb9a26422a791a56edef0"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "5e059d6f2b0d5575fceadf01879d258e2006f0ad", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7", "patch": "@@ -51,7 +51,10 @@ fn main() {\n     if let Some(\"miri\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is when `cargo miri` is called\n \n-        let manifest_path_arg = std::env::args().skip(2).find(|val| val.starts_with(\"--manifest-path=\"));\n+        let test = std::env::args().nth(2).map_or(false, |text| text == \"test\");\n+        let skip = if test { 3 } else { 2 };\n+\n+        let manifest_path_arg = std::env::args().skip(skip).find(|val| val.starts_with(\"--manifest-path=\"));\n \n         let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)) {\n             metadata\n@@ -80,14 +83,21 @@ fn main() {\n             .expect(\"could not find matching package\");\n         let package = metadata.packages.remove(package_index);\n         for target in package.targets {\n-            let args = std::env::args().skip(2);\n-            if let Some(\"bin\") = target.kind.get(0).map(AsRef::as_ref) {\n-                if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args),\n+            let args = std::env::args().skip(skip);\n+            if test && target.kind.get(0).map_or(false, |kind| kind == \"test\") {\n+                if let Err(code) = process(vec![\"--test\".to_string(), target.name].into_iter().chain(args),\n                                            &dep_path) {\n                     std::process::exit(code);\n                 }\n-            } else {\n-                panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n+            } else if !test {\n+                if target.kind.get(0).map_or(false, |kind| kind == \"bin\") {\n+                    if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args),\n+                                               &dep_path) {\n+                        std::process::exit(code);\n+                    }\n+                } else {\n+                    panic!(\"badly formatted cargo metadata: target::kind is an empty array\");\n+                }\n             }\n         }\n     } else {"}, {"sha": "0f8bb68549b56cc20fb7249742aea859f8a62ff4", "filename": "src/bin/miri.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=2cca377bd485ef56ac85c09ebeb9aa5907bfe1f7", "patch": "@@ -14,6 +14,8 @@ use rustc::session::Session;\n use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n use rustc::session::config::{self, Input, ErrorOutputType};\n+use rustc::hir::{self, itemlikevisit};\n+use rustc::ty::TyCtxt;\n use syntax::ast::{MetaItemKind, NestedMetaItemKind, self};\n use std::path::PathBuf;\n \n@@ -68,19 +70,39 @@ fn after_hir_lowering(state: &mut CompileState) {\n     state.session.plugin_attributes.borrow_mut().push(attr);\n }\n \n-fn after_analysis(state: &mut CompileState) {\n+fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n     state.session.abort_if_errors();\n \n     let tcx = state.tcx.unwrap();\n-    if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n-        let entry_def_id = tcx.map.local_def_id(entry_node_id);\n-        let limits = resource_limits_from_attributes(state);\n-        miri::run_mir_passes(tcx);\n-        miri::eval_main(tcx, entry_def_id, limits);\n-\n-        state.session.abort_if_errors();\n+    miri::run_mir_passes(tcx);\n+    let limits = resource_limits_from_attributes(state);\n+\n+    if std::env::args().any(|arg| arg == \"--test\") {\n+        struct Visitor<'a, 'tcx: 'a>(miri::ResourceLimits, TyCtxt<'a, 'tcx, 'tcx>, &'a CompileState<'a, 'tcx>);\n+        impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n+            fn visit_item(&mut self, i: &'hir hir::Item) {\n+                if let hir::Item_::ItemFn(_, _, _, _, _, body_id) = i.node {\n+                    if i.attrs.iter().any(|attr| attr.value.name == \"test\") {\n+                        let did = self.1.map.body_owner_def_id(body_id);\n+                        println!(\"running test: {}\", self.1.map.def_path(did).to_string(self.1));\n+                        miri::eval_main(self.1, did, self.0);\n+                        self.2.session.abort_if_errors();\n+                    }\n+                }\n+            }\n+            fn visit_trait_item(&mut self, _trait_item: &'hir hir::TraitItem) {}\n+            fn visit_impl_item(&mut self, _impl_item: &'hir hir::ImplItem) {}\n+        }\n+        state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(limits, tcx, state));\n     } else {\n-        println!(\"no main function found, assuming auxiliary build\");\n+        if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n+            let entry_def_id = tcx.map.local_def_id(entry_node_id);\n+            miri::eval_main(tcx, entry_def_id, limits);\n+\n+            state.session.abort_if_errors();\n+        } else {\n+            println!(\"no main function found, assuming auxiliary build\");\n+        }\n     }\n }\n "}]}