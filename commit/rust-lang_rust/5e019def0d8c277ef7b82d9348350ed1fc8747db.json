{"sha": "5e019def0d8c277ef7b82d9348350ed1fc8747db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMDE5ZGVmMGQ4YzI3N2VmN2I4MmQ5MzQ4MzUwZWQxZmM4NzQ3ZGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T21:59:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T21:59:22Z"}, "message": "typeck: extract ban_take_value_of_method", "tree": {"sha": "847eb38c4b2c532987f48209e214fe9dba26a692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847eb38c4b2c532987f48209e214fe9dba26a692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e019def0d8c277ef7b82d9348350ed1fc8747db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e019def0d8c277ef7b82d9348350ed1fc8747db", "html_url": "https://github.com/rust-lang/rust/commit/5e019def0d8c277ef7b82d9348350ed1fc8747db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e019def0d8c277ef7b82d9348350ed1fc8747db/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a", "html_url": "https://github.com/rust-lang/rust/commit/0b713ae919705bfbc2ec5bf5eea74570f7ecc19a"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "c25a60d065d6b2773b7ff5382b30c02728554cff", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5e019def0d8c277ef7b82d9348350ed1fc8747db/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e019def0d8c277ef7b82d9348350ed1fc8747db/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5e019def0d8c277ef7b82d9348350ed1fc8747db", "patch": "@@ -1342,23 +1342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if field.name == kw::Invalid {\n             self.tcx().types.err\n         } else if self.method_exists(field, expr_t, expr.hir_id, true) {\n-            let mut err = type_error_struct!(self.tcx().sess, field.span, expr_t, E0615,\n-                               \"attempted to take value of method `{}` on type `{}`\",\n-                               field, expr_t);\n-\n-            if !self.expr_in_place(expr.hir_id) {\n-                self.suggest_method_call(\n-                    &mut err,\n-                    \"use parentheses to call the method\",\n-                    field,\n-                    expr_t,\n-                    expr.hir_id\n-                );\n-            } else {\n-                err.help(\"methods are immutable and cannot be assigned to\");\n-            }\n-\n-            err.emit();\n+            self.ban_take_value_of_method(expr, expr_t, field);\n             self.tcx().types.err\n         } else {\n             if !expr_t.is_primitive_ty() {\n@@ -1436,9 +1420,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr,\n         expr_t: Ty<'tcx>,\n         field: ast::Ident,\n-        def_id: DefId,\n+        base_did: DefId,\n     ) {\n-        let struct_path = self.tcx().def_path_str(def_id);\n+        let struct_path = self.tcx().def_path_str(base_did);\n         let mut err = struct_span_err!(\n             self.tcx().sess,\n             expr.span,\n@@ -1462,6 +1446,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn ban_take_value_of_method(&self, expr: &'tcx hir::Expr, expr_t: Ty<'tcx>, field: ast::Ident) {\n+        let mut err = type_error_struct!(\n+            self.tcx().sess,\n+            field.span,\n+            expr_t,\n+            E0615,\n+            \"attempted to take value of method `{}` on type `{}`\",\n+            field,\n+            expr_t\n+        );\n+\n+        if !self.expr_in_place(expr.hir_id) {\n+            self.suggest_method_call(\n+                &mut err,\n+                \"use parentheses to call the method\",\n+                field,\n+                expr_t,\n+                expr.hir_id\n+            );\n+        } else {\n+            err.help(\"methods are immutable and cannot be assigned to\");\n+        }\n+\n+        err.emit();\n+    }\n+\n     fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS<'_>)\n         -> DiagnosticBuilder<'_> {\n         type_error_struct!(self.tcx().sess, span, expr_t, E0609,"}]}