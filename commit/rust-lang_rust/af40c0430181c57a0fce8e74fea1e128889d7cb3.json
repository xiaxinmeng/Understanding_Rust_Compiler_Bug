{"sha": "af40c0430181c57a0fce8e74fea1e128889d7cb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDBjMDQzMDE4MWM1N2EwZmNlOGU3NGZlYTFlMTI4ODg5ZDdjYjM=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-10-13T06:59:45Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:18:56Z"}, "message": "ptr links", "tree": {"sha": "322baceec7ed42e289a6c50313763cad1e3c8639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322baceec7ed42e289a6c50313763cad1e3c8639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af40c0430181c57a0fce8e74fea1e128889d7cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af40c0430181c57a0fce8e74fea1e128889d7cb3", "html_url": "https://github.com/rust-lang/rust/commit/af40c0430181c57a0fce8e74fea1e128889d7cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af40c0430181c57a0fce8e74fea1e128889d7cb3/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "html_url": "https://github.com/rust-lang/rust/commit/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "8fd9ff768c4f4a4a23f027ad54445391d30a4e41", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af40c0430181c57a0fce8e74fea1e128889d7cb3/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af40c0430181c57a0fce8e74fea1e128889d7cb3/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=af40c0430181c57a0fce8e74fea1e128889d7cb3", "patch": "@@ -723,7 +723,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read`]: read()\n+    /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n@@ -743,7 +743,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_volatile`]: read_volatile()\n+    /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n@@ -761,7 +761,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::read_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_unaligned`]: read_unaligned()\n+    /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n@@ -779,7 +779,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: copy()\n+    /// [`ptr::copy`]: crate::ptr::copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -797,7 +797,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: copy_nonoverlapping()\n+    /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)"}, {"sha": "5f94c2393aef33b90c0fe3b8666bc7ea1d77f4a3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af40c0430181c57a0fce8e74fea1e128889d7cb3/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af40c0430181c57a0fce8e74fea1e128889d7cb3/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=af40c0430181c57a0fce8e74fea1e128889d7cb3", "patch": "@@ -830,7 +830,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read`]: read()\n+    /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n@@ -850,7 +850,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_volatile`]: read_volatile()\n+    /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n@@ -868,7 +868,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::read_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::read_unaligned`]: read_unaligned()\n+    /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n@@ -886,7 +886,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: copy()\n+    /// [`ptr::copy`]: crate::ptr::copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n@@ -904,7 +904,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: copy_nonoverlapping()\n+    /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n@@ -922,7 +922,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy`]: copy()\n+    /// [`ptr::copy`]: crate::ptr::copy()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from(self, src: *const T, count: usize)\n@@ -940,7 +940,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n-    /// [`ptr::copy_nonoverlapping`]: copy_nonoverlapping()\n+    /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n@@ -955,7 +955,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::drop_in_place`] for safety concerns and examples.\n     ///\n-    /// [`ptr::drop_in_place`]: drop_in_place()\n+    /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn drop_in_place(self) {\n@@ -968,7 +968,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write`]: write()\n+    /// [`ptr::write`]: crate::ptr::write()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write(self, val: T)\n@@ -984,7 +984,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_bytes`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_bytes`]: write_bytes()\n+    /// [`ptr::write_bytes`]: crate::ptr::write_bytes()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_bytes(self, val: u8, count: usize)\n@@ -1004,7 +1004,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_volatile`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_volatile`]: write_volatile()\n+    /// [`ptr::write_volatile`]: crate::ptr::write_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_volatile(self, val: T)\n@@ -1022,7 +1022,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::write_unaligned`] for safety concerns and examples.\n     ///\n-    /// [`ptr::write_unaligned`]: write_unaligned()\n+    /// [`ptr::write_unaligned`]: crate::ptr::write_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_unaligned(self, val: T)\n@@ -1038,7 +1038,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::replace`] for safety concerns and examples.\n     ///\n-    /// [`ptr::replace`]: replace()\n+    /// [`ptr::replace`]: crate::ptr::replace()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn replace(self, src: T) -> T\n@@ -1055,7 +1055,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// See [`ptr::swap`] for safety concerns and examples.\n     ///\n-    /// [`ptr::swap`]: swap()\n+    /// [`ptr::swap`]: crate::ptr::swap()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn swap(self, with: *mut T)"}]}