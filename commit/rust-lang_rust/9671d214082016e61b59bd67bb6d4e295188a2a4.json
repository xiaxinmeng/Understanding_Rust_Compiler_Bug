{"sha": "9671d214082016e61b59bd67bb6d4e295188a2a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzFkMjE0MDgyMDE2ZTYxYjU5YmQ2N2JiNmQ0ZTI5NTE4OGEyYTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-10T22:54:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-10T22:54:41Z"}, "message": "Implement meta tag matching in creader. Start using it in rustc.rc. Close #459. Close #457.", "tree": {"sha": "50e22a6fac9b3bb3e60fe30909117375f5edd10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e22a6fac9b3bb3e60fe30909117375f5edd10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9671d214082016e61b59bd67bb6d4e295188a2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9671d214082016e61b59bd67bb6d4e295188a2a4", "html_url": "https://github.com/rust-lang/rust/commit/9671d214082016e61b59bd67bb6d4e295188a2a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9671d214082016e61b59bd67bb6d4e295188a2a4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774c6d01984b608047afedb5d8c579c00d69823f", "url": "https://api.github.com/repos/rust-lang/rust/commits/774c6d01984b608047afedb5d8c579c00d69823f", "html_url": "https://github.com/rust-lang/rust/commit/774c6d01984b608047afedb5d8c579c00d69823f"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "7b92a6d66416fb5eaa74da0a35e907ad80afdd9c", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=9671d214082016e61b59bd67bb6d4e295188a2a4", "patch": "@@ -505,9 +505,54 @@ fn get_metadata_section(str filename) -> option::t[vec[u8]] {\n     ret option::none[vec[u8]];\n }\n \n+fn get_exported_metadata(&session::session sess,\n+                         &str path,\n+                         &vec[u8] data) -> hashmap[str,str] {\n+    auto meta_items = ebml::get_doc(ebml::new_doc(data),\n+                                    metadata::tag_meta_export);\n+    auto mm = common::new_str_hash[str]();\n \n-fn metadata_matches(&vec[u8] data,\n+    for each (ebml::doc m in ebml::tagged_docs(meta_items,\n+                                               metadata::tag_meta_item)) {\n+\n+        auto kd = ebml::get_doc(m, metadata::tag_meta_item_key);\n+        auto vd = ebml::get_doc(m, metadata::tag_meta_item_value);\n+\n+        auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n+        auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n+\n+        log #fmt(\"metadata in %s: %s = %s\", path, k, v);\n+\n+        if (!mm.insert(k,v)) {\n+            sess.warn(#fmt(\"Duplicate metadata item in %s: %s\", path, k));\n+        }\n+    }\n+    ret mm;\n+}\n+\n+fn metadata_matches(hashmap[str,str] mm,\n                     &vec[@ast::meta_item] metas) -> bool {\n+    log #fmt(\"matching %u metadata requirements against %u metadata items\",\n+             vec::len(metas), mm.size());\n+    for (@ast::meta_item mi in metas) {\n+        alt (mm.find(mi.node.key)) {\n+            case (some(?v)) {\n+                if (v == mi.node.value) {\n+                    log #fmt(\"matched '%s': '%s'\",\n+                             mi.node.key, mi.node.value);\n+                } else {\n+                    log #fmt(\"missing '%s': '%s' (got '%s')\",\n+                             mi.node.key, mi.node.value, v);\n+                    ret false;\n+                }\n+            }\n+            case (none) {\n+                    log #fmt(\"missing '%s': '%s'\",\n+                             mi.node.key, mi.node.value);\n+                    ret false;\n+            }\n+        }\n+    }\n     ret true;\n }\n \n@@ -547,7 +592,8 @@ fn find_library_crate(&session::session sess,\n \n             alt (get_metadata_section(path)) {\n                 case (option::some(?cvec)) {\n-                    if (!metadata_matches(cvec, metas)) {\n+                    auto mm = get_exported_metadata(sess, path, cvec);\n+                    if (!metadata_matches(mm, metas)) {\n                         log #fmt(\"skipping %s, metadata doesn't match\", path);\n                         cont;\n                     }"}, {"sha": "b311c56b8841aca4c442d618c32c9c8ee9fe9ff2", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=9671d214082016e61b59bd67bb6d4e295188a2a4", "patch": "@@ -419,9 +419,6 @@ fn eval_crate_directive(ctx cx,\n         }\n \n         case (ast::cdir_meta(?vi, ?mi)) {\n-            // FIXME: we should actually record, for documentation-sake,\n-            // the metadata that's not exported. It would be nice to have\n-            // compiled-in to the target crate, not just in theh AST.\n             if (vi == ast::export_meta) {\n                 cx.sess.add_metadata(mi);\n             }"}, {"sha": "39879894753872495aa466a6f23374b138dfc92c", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=9671d214082016e61b59bd67bb6d4e295188a2a4", "patch": "@@ -10,7 +10,9 @@ meta (desc = \"The Rust compiler\",\n       license = \"BSD\");\n \n \n-use std;\n+use std (name = \"std\",\n+         vers = \"0.1\",\n+         url = \"http://rust-lang.org/src/std\");\n \n mod middle {\n     mod trans;"}, {"sha": "8b15a620db256750cfe789709746d1099d0daa3d", "filename": "src/test/run-pass/use-import-export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Ftest%2Frun-pass%2Fuse-import-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Ftest%2Frun-pass%2Fuse-import-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-import-export.rs?ref=9671d214082016e61b59bd67bb6d4e295188a2a4", "patch": "@@ -1,11 +1,11 @@\n mod foo {\n   export x;\n-  use std (ver=\"0.0.1\");\n+  use std (vers=\"0.1\");\n   fn x() -> int { ret 1; }\n }\n \n mod bar {\n-  use std (ver=\"0.0.1\");\n+  use std (vers=\"0.1\");\n   export y;\n   fn y() -> int { ret 1; }\n }"}, {"sha": "cb78a23acc3be756808c39257e941c2b60e5959d", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9671d214082016e61b59bd67bb6d4e295188a2a4/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=9671d214082016e61b59bd67bb6d4e295188a2a4", "patch": "@@ -4,7 +4,7 @@\n use std;\n use libc();\n use zed(name = \"std\");\n-use bar(name = \"std\", ver = \"0.0.1\");\n+use bar(name = \"std\", vers = \"0.1\");\n \n // FIXME: commented out since resolve doesn't know how to handle crates yet.\n // import std::str;\n@@ -14,7 +14,7 @@ mod baz {\n   use std;\n   use libc();\n   use zed(name = \"std\");\n-  use bar(name = \"std\", ver = \"0.0.1\");\n+  use bar(name = \"std\", vers = \"0.0.1\");\n \n   // import std::str;\n   // import x = std::str;"}]}