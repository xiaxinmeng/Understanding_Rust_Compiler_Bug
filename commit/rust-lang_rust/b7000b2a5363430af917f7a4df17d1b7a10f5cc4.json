{"sha": "b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "node_id": "C_kwDOAAsO6NoAKGI3MDAwYjJhNTM2MzQzMGFmOTE3ZjdhNGRmMTdkMWI3YTEwZjVjYzQ", "commit": {"author": {"name": "Georgy Komarov", "email": "jubnzv@gmail.com", "date": "2022-01-15T09:27:24Z"}, "committer": {"name": "Georgiy Komarov", "email": "jubnzv@gmail.com", "date": "2022-01-29T04:02:28Z"}, "message": "Add `default_union_representation` lint\n\nCloses #8235", "tree": {"sha": "27ccf5ae50b1054efabfefb32676755a6e5161cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27ccf5ae50b1054efabfefb32676755a6e5161cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "html_url": "https://github.com/rust-lang/rust/commit/b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/comments", "author": {"login": "jubnzv", "id": 12023585, "node_id": "MDQ6VXNlcjEyMDIzNTg1", "avatar_url": "https://avatars.githubusercontent.com/u/12023585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jubnzv", "html_url": "https://github.com/jubnzv", "followers_url": "https://api.github.com/users/jubnzv/followers", "following_url": "https://api.github.com/users/jubnzv/following{/other_user}", "gists_url": "https://api.github.com/users/jubnzv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jubnzv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jubnzv/subscriptions", "organizations_url": "https://api.github.com/users/jubnzv/orgs", "repos_url": "https://api.github.com/users/jubnzv/repos", "events_url": "https://api.github.com/users/jubnzv/events{/privacy}", "received_events_url": "https://api.github.com/users/jubnzv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jubnzv", "id": 12023585, "node_id": "MDQ6VXNlcjEyMDIzNTg1", "avatar_url": "https://avatars.githubusercontent.com/u/12023585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jubnzv", "html_url": "https://github.com/jubnzv", "followers_url": "https://api.github.com/users/jubnzv/followers", "following_url": "https://api.github.com/users/jubnzv/following{/other_user}", "gists_url": "https://api.github.com/users/jubnzv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jubnzv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jubnzv/subscriptions", "organizations_url": "https://api.github.com/users/jubnzv/orgs", "repos_url": "https://api.github.com/users/jubnzv/repos", "events_url": "https://api.github.com/users/jubnzv/events{/privacy}", "received_events_url": "https://api.github.com/users/jubnzv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496f26c2297c0117a24c3d26172fd72b5f9ad927", "url": "https://api.github.com/repos/rust-lang/rust/commits/496f26c2297c0117a24c3d26172fd72b5f9ad927", "html_url": "https://github.com/rust-lang/rust/commit/496f26c2297c0117a24c3d26172fd72b5f9ad927"}], "stats": {"total": 236, "additions": 236, "deletions": 0}, "files": [{"sha": "60f84c769b73fa34ad91390db2188309c0e39624", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -2930,6 +2930,7 @@ Released 2018-09-13\n [`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n [`default_numeric_fallback`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\n [`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access\n+[`default_union_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_union_representation\n [`deprecated_cfg_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr\n [`deprecated_semver`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_semver\n [`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof"}, {"sha": "9b5da0bd8a66009405623eb817f6c91c10e31709", "filename": "clippy_lints/src/default_union_representation.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -0,0 +1,105 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::{self as hir, HirId, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::layout::LayoutOf;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+use rustc_typeck::hir_ty_to_ty;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Displays a warning when a union is declared with the default representation (without a `#[repr(C)]` attribute).\n+    ///\n+    /// ### Why is this bad?\n+    /// Unions in Rust have unspecified layout by default, despite many people thinking that they\n+    /// lay out each field at the start of the union (like C does). That is, there are no guarantees\n+    /// about the offset of the fields for unions with multiple non-ZST fields without an explicitly\n+    /// specified layout. These cases may lead to undefined behavior in unsafe blocks.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// union Foo {\n+    ///     a: i32,\n+    ///     b: u32,\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let _x: u32 = unsafe {\n+    ///         Foo { a: 0_i32 }.b // Undefined behaviour: `b` is allowed to be padding\n+    ///     };\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[repr(C)]\n+    /// union Foo {\n+    ///     a: i32,\n+    ///     b: u32,\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let _x: u32 = unsafe {\n+    ///         Foo { a: 0_i32 }.b // Now defined behaviour, this is just an i32 -> u32 transmute\n+    ///     };\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub DEFAULT_UNION_REPRESENTATION,\n+    restriction,\n+    \"unions without a `#[repr(C)]` attribute\"\n+}\n+declare_lint_pass!(DefaultUnionRepresentation => [DEFAULT_UNION_REPRESENTATION]);\n+\n+impl<'tcx> LateLintPass<'tcx> for DefaultUnionRepresentation {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if is_union_with_two_non_zst_fields(cx, item) && !has_c_repr_attr(cx, item.hir_id()) {\n+            span_lint_and_help(\n+                cx,\n+                DEFAULT_UNION_REPRESENTATION,\n+                item.span,\n+                \"this union has the default representation\",\n+                None,\n+                &format!(\n+                    \"consider annotating `{}` with `#[repr(C)]` to explicitly specify memory layout\",\n+                    cx.tcx.def_path_str(item.def_id.to_def_id())\n+                ),\n+            );\n+        }\n+    }\n+}\n+\n+/// Returns true if the given item is a union with at least two non-ZST fields.\n+fn is_union_with_two_non_zst_fields(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n+    if let ItemKind::Union(data, _) = &item.kind {\n+        data.fields().iter().filter(|f| !is_zst(cx, f.ty)).count() >= 2\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_zst(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) -> bool {\n+    if hir_ty.span.from_expansion() {\n+        return false;\n+    }\n+    let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+    if let Ok(layout) = cx.layout_of(ty) {\n+        layout.is_zst()\n+    } else {\n+        false\n+    }\n+}\n+\n+fn has_c_repr_attr(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n+    cx.tcx.hir().attrs(hir_id).iter().any(|attr| {\n+        if attr.has_name(sym::repr) {\n+            if let Some(items) = attr.meta_item_list() {\n+                for item in items {\n+                    if item.is_word() && matches!(item.name_or_empty(), sym::C) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    })\n+}"}, {"sha": "c768df1554c07234d2bb9d5ded97c89f20d2ee87", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -92,6 +92,7 @@ store.register_lints(&[\n     default::DEFAULT_TRAIT_ACCESS,\n     default::FIELD_REASSIGN_WITH_DEFAULT,\n     default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK,\n+    default_union_representation::DEFAULT_UNION_REPRESENTATION,\n     dereference::EXPLICIT_DEREF_METHODS,\n     dereference::NEEDLESS_BORROW,\n     dereference::REF_BINDING_TO_REFERENCE,"}, {"sha": "5a89fdb05a9904ab1442fd73bada9b12c7be9a37", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -12,6 +12,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(create_dir::CREATE_DIR),\n     LintId::of(dbg_macro::DBG_MACRO),\n     LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),\n+    LintId::of(default_union_representation::DEFAULT_UNION_REPRESENTATION),\n     LintId::of(disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS),\n     LintId::of(else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n     LintId::of(exhaustive_items::EXHAUSTIVE_ENUMS),"}, {"sha": "1dfc03dc34bb1f6962a202e2505c4516ab6fa612", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -189,6 +189,7 @@ mod create_dir;\n mod dbg_macro;\n mod default;\n mod default_numeric_fallback;\n+mod default_union_representation;\n mod dereference;\n mod derivable_impls;\n mod derive;\n@@ -860,6 +861,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n     store.register_late_pass(move || Box::new(borrow_as_ptr::BorrowAsPtr::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n+    store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "93b2d33da2cd2163f34cbc6cee5a64149d60ef48", "filename": "tests/ui/default_union_representation.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/tests%2Fui%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/tests%2Fui%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_union_representation.rs?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -0,0 +1,78 @@\n+#![feature(transparent_unions)]\n+#![warn(clippy::default_union_representation)]\n+\n+union NoAttribute {\n+    a: i32,\n+    b: u32,\n+}\n+\n+#[repr(C)]\n+union ReprC {\n+    a: i32,\n+    b: u32,\n+}\n+\n+#[repr(packed)]\n+union ReprPacked {\n+    a: i32,\n+    b: u32,\n+}\n+\n+#[repr(C, packed)]\n+union ReprCPacked {\n+    a: i32,\n+    b: u32,\n+}\n+\n+#[repr(C, align(32))]\n+union ReprCAlign {\n+    a: i32,\n+    b: u32,\n+}\n+\n+#[repr(align(32))]\n+union ReprAlign {\n+    a: i32,\n+    b: u32,\n+}\n+\n+union SingleZST {\n+    f0: (),\n+}\n+union ZSTsAndField1 {\n+    f0: u32,\n+    f1: (),\n+    f2: (),\n+    f3: (),\n+}\n+union ZSTsAndField2 {\n+    f0: (),\n+    f1: (),\n+    f2: u32,\n+    f3: (),\n+}\n+union ZSTAndTwoFields {\n+    f0: u32,\n+    f1: u64,\n+    f2: (),\n+}\n+\n+#[repr(C)]\n+union CZSTAndTwoFields {\n+    f0: u32,\n+    f1: u64,\n+    f2: (),\n+}\n+\n+#[repr(transparent)]\n+union ReprTransparent {\n+    a: i32,\n+}\n+\n+#[repr(transparent)]\n+union ReprTransparentZST {\n+    a: i32,\n+    b: (),\n+}\n+\n+fn main() {}"}, {"sha": "138884af868c70c52673092638caacc9e31e6fee", "filename": "tests/ui/default_union_representation.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/tests%2Fui%2Fdefault_union_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7000b2a5363430af917f7a4df17d1b7a10f5cc4/tests%2Fui%2Fdefault_union_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_union_representation.stderr?ref=b7000b2a5363430af917f7a4df17d1b7a10f5cc4", "patch": "@@ -0,0 +1,48 @@\n+error: this union has the default representation\n+  --> $DIR/default_union_representation.rs:4:1\n+   |\n+LL | / union NoAttribute {\n+LL | |     a: i32,\n+LL | |     b: u32,\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::default-union-representation` implied by `-D warnings`\n+   = help: consider annotating `NoAttribute` with `#[repr(C)]` to explicitly specify memory layout\n+\n+error: this union has the default representation\n+  --> $DIR/default_union_representation.rs:16:1\n+   |\n+LL | / union ReprPacked {\n+LL | |     a: i32,\n+LL | |     b: u32,\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ReprPacked` with `#[repr(C)]` to explicitly specify memory layout\n+\n+error: this union has the default representation\n+  --> $DIR/default_union_representation.rs:34:1\n+   |\n+LL | / union ReprAlign {\n+LL | |     a: i32,\n+LL | |     b: u32,\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ReprAlign` with `#[repr(C)]` to explicitly specify memory layout\n+\n+error: this union has the default representation\n+  --> $DIR/default_union_representation.rs:54:1\n+   |\n+LL | / union ZSTAndTwoFields {\n+LL | |     f0: u32,\n+LL | |     f1: u64,\n+LL | |     f2: (),\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ZSTAndTwoFields` with `#[repr(C)]` to explicitly specify memory layout\n+\n+error: aborting due to 4 previous errors\n+"}]}