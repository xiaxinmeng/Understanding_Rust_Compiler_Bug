{"sha": "db902bca3a2dfeb449fc42149575d476c85d7fed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOTAyYmNhM2EyZGZlYjQ0OWZjNDIxNDk1NzVkNDc2Yzg1ZDdmZWQ=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-09-19T11:09:18Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Add the code of the tracking issue", "tree": {"sha": "904aa9b2e6a52e78af51b4b572387156ddce27bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/904aa9b2e6a52e78af51b4b572387156ddce27bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db902bca3a2dfeb449fc42149575d476c85d7fed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db902bca3a2dfeb449fc42149575d476c85d7fed", "html_url": "https://github.com/rust-lang/rust/commit/db902bca3a2dfeb449fc42149575d476c85d7fed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db902bca3a2dfeb449fc42149575d476c85d7fed/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc085e917078ebd5ff4c7c784d8cb04da85143c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc085e917078ebd5ff4c7c784d8cb04da85143c7", "html_url": "https://github.com/rust-lang/rust/commit/cc085e917078ebd5ff4c7c784d8cb04da85143c7"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "4473c4e5da80399c8137a4a524a5d4f305ebf869", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=db902bca3a2dfeb449fc42149575d476c85d7fed", "patch": "@@ -167,7 +167,7 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n \n /// Unix credential.\n #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n@@ -176,43 +176,43 @@ impl SocketCred {\n     /// Create a Unix credential struct.\n     ///\n     /// PID, UID and GID is set to 0.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn new() -> SocketCred {\n         SocketCred(libc::ucred { pid: 0, uid: 0, gid: 0 })\n     }\n \n     /// Set the PID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_pid(&mut self, pid: pid_t) {\n         self.0.pid = pid;\n     }\n \n     /// Get the current PID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_pid(&self) -> pid_t {\n         self.0.pid\n     }\n \n     /// Set the UID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_uid(&mut self, uid: uid_t) {\n         self.0.uid = uid;\n     }\n \n     /// Get the current UID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_uid(&self) -> uid_t {\n         self.0.uid\n     }\n \n     /// Set the GID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_gid(&mut self, gid: gid_t) {\n         self.0.gid = gid;\n     }\n \n     /// Get the current GID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_gid(&self) -> gid_t {\n         self.0.gid\n     }\n@@ -221,10 +221,10 @@ impl SocketCred {\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmRights<'a>(AncillaryDataIter<'a, RawFd>);\n \n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmRights<'a> {\n     type Item = RawFd;\n \n@@ -237,11 +237,11 @@ impl<'a> Iterator for ScmRights<'a> {\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n \n@@ -253,13 +253,13 @@ impl<'a> Iterator for ScmCredentials<'a> {\n /// The error type which is returned from parsing the type a control message.\n #[non_exhaustive]\n #[derive(Debug)]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryError {\n     Unknown { cmsg_level: i32, cmsg_type: i32 },\n }\n \n /// This enum represent one control message of variable type.\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n     #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n@@ -321,13 +321,13 @@ impl<'a> AncillaryData<'a> {\n }\n \n /// This struct is used to iterate through the control messages.\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct Messages<'a> {\n     buffer: &'a [u8],\n     current: Option<&'a libc::cmsghdr>,\n }\n \n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for Messages<'a> {\n     type Item = Result<AncillaryData<'a>, AncillaryError>;\n \n@@ -386,7 +386,7 @@ impl<'a> Iterator for Messages<'a> {\n ///     Ok(())\n /// }\n /// ```\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Debug)]\n pub struct SocketAncillary<'a> {\n     buffer: &'a mut [u8],\n@@ -406,25 +406,25 @@ impl<'a> SocketAncillary<'a> {\n     /// let mut ancillary_buffer = [0; 128];\n     /// let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     /// ```\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn new(buffer: &'a mut [u8]) -> Self {\n         SocketAncillary { buffer, length: 0, truncated: false }\n     }\n \n     /// Returns the capacity of the buffer.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn capacity(&self) -> usize {\n         self.buffer.len()\n     }\n \n     /// Returns the number of used bytes.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn len(&self) -> usize {\n         self.length\n     }\n \n     /// Returns the iterator of the control messages.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn messages(&self) -> Messages<'_> {\n         Messages { buffer: &self.buffer[..self.length], current: None }\n     }\n@@ -452,7 +452,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn truncated(&self) -> bool {\n         self.truncated\n     }\n@@ -485,7 +485,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_fds(&mut self, fds: &[RawFd]) -> bool {\n         self.truncated = false;\n         add_to_ancillary_data(\n@@ -505,7 +505,7 @@ impl<'a> SocketAncillary<'a> {\n     /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n     #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;\n         add_to_ancillary_data(\n@@ -559,7 +559,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn clear(&mut self) {\n         self.length = 0;\n         self.truncated = false;"}, {"sha": "5b813ac648186715b14582ac0197d62b53a7f3ce", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=db902bca3a2dfeb449fc42149575d476c85d7fed", "patch": "@@ -378,7 +378,7 @@ impl UnixDatagram {\n         target_os = \"solaris\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn recv_vectored_with_ancillary_from(\n         &self,\n         bufs: &mut [IoSliceMut<'_>],\n@@ -442,7 +442,7 @@ impl UnixDatagram {\n         target_os = \"solaris\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn recv_vectored_with_ancillary(\n         &self,\n         bufs: &mut [IoSliceMut<'_>],\n@@ -539,7 +539,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary_to<P: AsRef<Path>>(\n         &self,\n         bufs: &mut [IoSliceMut<'_>],\n@@ -578,7 +578,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,\n         bufs: &mut [IoSliceMut<'_>],\n@@ -765,7 +765,7 @@ impl UnixDatagram {\n         target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n     }\n@@ -790,7 +790,7 @@ impl UnixDatagram {\n         target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()\n     }"}, {"sha": "1c792b251b6ee76353df4bee1e8e3833fa006814", "filename": "library/std/src/sys/unix/ext/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fmod.rs?ref=db902bca3a2dfeb449fc42149575d476c85d7fed", "patch": "@@ -62,7 +62,7 @@ pub use self::addr::*;\n     target_os = \"solaris\",\n     target_env = \"uclibc\",\n ))]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub use self::ancillary::*;\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub use self::datagram::*;"}, {"sha": "49f16861afca218c5785db77b38b51393b51e4a4", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db902bca3a2dfeb449fc42149575d476c85d7fed/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=db902bca3a2dfeb449fc42149575d476c85d7fed", "patch": "@@ -396,7 +396,7 @@ impl UnixStream {\n         target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n     }\n@@ -421,7 +421,7 @@ impl UnixStream {\n         target_os = \"openbsd\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()\n     }\n@@ -550,7 +550,7 @@ impl UnixStream {\n         target_os = \"solaris\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn recv_vectored_with_ancillary(\n         &self,\n         bufs: &mut [IoSliceMut<'_>],\n@@ -606,7 +606,7 @@ impl UnixStream {\n         target_os = \"solaris\",\n         target_env = \"uclibc\",\n     ))]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn send_vectored_with_ancillary(\n         &self,\n         bufs: &mut [IoSliceMut<'_>],"}]}