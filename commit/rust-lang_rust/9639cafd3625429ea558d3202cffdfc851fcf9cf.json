{"sha": "9639cafd3625429ea558d3202cffdfc851fcf9cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzljYWZkMzYyNTQyOWVhNTU4ZDMyMDJjZmZkZmM4NTFmY2Y5Y2Y=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-09-08T23:27:06Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-09-09T19:14:36Z"}, "message": "fixes for Box<[T]>\n\nThe pointer in the slice must not be null, because enum representations\nmake that assumption. The `exchange_malloc` function returns a non-null\nsentinel for the zero size case, and it must not be passed to the\n`exchange_free` lang item.\n\nSince the length is always equal to the true capacity, a branch on the\nlength is enough for most types. Slices of zero size types are\nstatically special cased to never attempt deallocation. This is the same\nimplementation as `Vec<T>`.\n\nCloses #14395", "tree": {"sha": "54b7d3db59b8e6d398ae6d874d4655822536af9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b7d3db59b8e6d398ae6d874d4655822536af9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9639cafd3625429ea558d3202cffdfc851fcf9cf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9639cafd3625429ea558d3202cffdfc851fcf9cf", "html_url": "https://github.com/rust-lang/rust/commit/9639cafd3625429ea558d3202cffdfc851fcf9cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9639cafd3625429ea558d3202cffdfc851fcf9cf/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b625d43f8fd2e9a800ca8a419f7d3f5f52604205", "url": "https://api.github.com/repos/rust-lang/rust/commits/b625d43f8fd2e9a800ca8a419f7d3f5f52604205", "html_url": "https://github.com/rust-lang/rust/commit/b625d43f8fd2e9a800ca8a419f7d3f5f52604205"}], "stats": {"total": 61, "additions": 24, "deletions": 37}, "files": [{"sha": "30377a33bfee4431c883df071451fb762d53b943", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=9639cafd3625429ea558d3202cffdfc851fcf9cf", "patch": "@@ -12,7 +12,6 @@\n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`\n //                and `nonnull`\n \n-use core::ptr::RawPtr;\n #[cfg(not(test))] use core::raw;\n #[cfg(stage0, not(test))] use util;\n \n@@ -70,11 +69,6 @@ pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint,\n /// the value returned by `usable_size` for the requested size.\n #[inline]\n pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n-    // FIXME(14395) This is only required for DST ~[T], it should be removed once\n-    // we fix that representation to not use null pointers.\n-    if ptr.is_null() {\n-        return;\n-    }\n     imp::deallocate(ptr, size, align)\n }\n "}, {"sha": "b6bfb525add24c46ed7ab33e40f9ce34eb19f045", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9639cafd3625429ea558d3202cffdfc851fcf9cf", "patch": "@@ -412,29 +412,11 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let vec_ty = ty::mk_uniq(tcx, ty::mk_vec(tcx, unit_ty, None));\n         let scratch = rvalue_scratch_datum(bcx, vec_ty, \"__unsize_unique\");\n \n-        if len == 0 {\n-            Store(bcx,\n-                  C_null(type_of::type_of(bcx.ccx(), unit_ty).ptr_to()),\n-                  get_dataptr(bcx, scratch.val));\n-        } else {\n-            // Box<[(), ..n]> will not allocate, but ~[()] expects an\n-            // allocation of n bytes, so we must allocate here (yuck).\n-            let llty = type_of::type_of(bcx.ccx(), unit_ty);\n-            if llsize_of_alloc(bcx.ccx(), llty) == 0 {\n-                let ptr_unit_ty = type_of::type_of(bcx.ccx(), unit_ty).ptr_to();\n-                let align = C_uint(bcx.ccx(), 8);\n-                let alloc_result = malloc_raw_dyn(bcx, ptr_unit_ty, vec_ty, ll_len, align);\n-                bcx = alloc_result.bcx;\n-                let base = get_dataptr(bcx, scratch.val);\n-                Store(bcx, alloc_result.val, base);\n-            } else {\n-                let base = get_dataptr(bcx, scratch.val);\n-                let base = PointerCast(bcx,\n-                                       base,\n-                                       type_of::type_of(bcx.ccx(), datum_ty).ptr_to());\n-                bcx = lval.store_to(bcx, base);\n-            }\n-        }\n+        let base = get_dataptr(bcx, scratch.val);\n+        let base = PointerCast(bcx,\n+                               base,\n+                               type_of::type_of(bcx.ccx(), datum_ty).ptr_to());\n+        bcx = lval.store_to(bcx, base);\n \n         Store(bcx, ll_len, get_len(bcx, scratch.val));\n         DatumBlock::new(bcx, scratch.to_expr_datum())"}, {"sha": "c0d19b31cb8ede9d3d1d428f0bfbf04caeef34b2", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=9639cafd3625429ea558d3202cffdfc851fcf9cf", "patch": "@@ -72,14 +72,19 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         };\n \n         if should_deallocate {\n-            let not_null = IsNotNull(bcx, dataptr);\n-            with_cond(bcx, not_null, |bcx| {\n-                let llty = type_of::type_of(ccx, unit_ty);\n-                let llsize = machine::llsize_of(ccx, llty);\n-                let llalign = C_uint(ccx, machine::llalign_of_min(ccx, llty) as uint);\n-                let size = Mul(bcx, llsize, get_len(bcx, vptr));\n-                glue::trans_exchange_free_dyn(bcx, dataptr, size, llalign)\n-            })\n+            let llty = type_of::type_of(ccx, unit_ty);\n+            let unit_size = llsize_of_alloc(ccx, llty);\n+            if unit_size != 0 {\n+                let len = get_len(bcx, vptr);\n+                let not_empty = ICmp(bcx, llvm::IntNE, len, C_uint(ccx, 0));\n+                with_cond(bcx, not_empty, |bcx| {\n+                    let llalign = C_uint(ccx, machine::llalign_of_min(ccx, llty) as uint);\n+                    let size = Mul(bcx, C_uint(ccx, unit_size as uint), len);\n+                    glue::trans_exchange_free_dyn(bcx, dataptr, size, llalign)\n+                })\n+            } else {\n+                bcx\n+            }\n         } else {\n             bcx\n         }"}, {"sha": "56eb340ef59acc922235790df8b2dc2b5ea882bd", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9639cafd3625429ea558d3202cffdfc851fcf9cf/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=9639cafd3625429ea558d3202cffdfc851fcf9cf", "patch": "@@ -11,6 +11,12 @@\n pub fn main() {\n     assert!(Some(box() ()).is_some());\n \n+    let xs: Box<[()]> = box [];\n+    assert!(Some(xs).is_some());\n+\n     struct Foo;\n     assert!(Some(box Foo).is_some());\n+\n+    let ys: Box<[Foo]> = box [];\n+    assert!(Some(ys).is_some());\n }"}]}