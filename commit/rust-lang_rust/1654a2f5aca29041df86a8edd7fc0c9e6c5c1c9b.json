{"sha": "1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NTRhMmY1YWNhMjkwNDFkZjg2YThlZGQ3ZmMwYzllNmM1YzFjOWI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-06-27T21:59:43Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T13:39:47Z"}, "message": "Use build.build instead of build.config.build", "tree": {"sha": "58c0a285b232dc6716c29990784c7f708eb5b023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c0a285b232dc6716c29990784c7f708eb5b023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "html_url": "https://github.com/rust-lang/rust/commit/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5809a7d0b76c7842582a43ea5516b3817b92f9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5809a7d0b76c7842582a43ea5516b3817b92f9d8", "html_url": "https://github.com/rust-lang/rust/commit/5809a7d0b76c7842582a43ea5516b3817b92f9d8"}], "stats": {"total": 190, "additions": 98, "deletions": 92}, "files": [{"sha": "7c7161916ee2ce9c8ea8d96c3a49003a0670f309", "filename": "src/bootstrap/cc.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -42,10 +42,13 @@ use config::Target;\n pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n-    for target in build.config.target.iter() {\n+    //\n+    // This includes targets that aren't necessarily passed on the commandline\n+    // (FIXME: Perhaps it shouldn't?)\n+    for target in &build.config.target {\n         let mut cfg = gcc::Config::new();\n         cfg.cargo_metadata(false).opt_level(0).debug(false)\n-           .target(target).host(&build.config.build);\n+           .target(target).host(&build.build);\n \n         let config = build.config.target_config.get(target);\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n@@ -64,10 +67,13 @@ pub fn find(build: &mut Build) {\n     }\n \n     // For all host triples we need to find a C++ compiler as well\n-    for host in build.config.host.iter() {\n+    //\n+    // This includes hosts that aren't necessarily passed on the commandline\n+    // (FIXME: Perhaps it shouldn't?)\n+    for host in &build.config.host {\n         let mut cfg = gcc::Config::new();\n         cfg.cargo_metadata(false).opt_level(0).debug(false).cpp(true)\n-           .target(host).host(&build.config.build);\n+           .target(host).host(&build.build);\n         let config = build.config.target_config.get(host);\n         if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);"}, {"sha": "b3b5ae8d67d6551f97b6c54dd857831d02b18b3e", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -196,7 +196,7 @@ pub fn compiletest(build: &Build,\n     cmd.arg(\"--mode\").arg(mode);\n     cmd.arg(\"--target\").arg(target);\n     cmd.arg(\"--host\").arg(compiler.host);\n-    cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.config.build));\n+    cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.build));\n \n     if let Some(ref nodejs) = build.config.nodejs {\n         cmd.arg(\"--nodejs\").arg(nodejs);\n@@ -222,7 +222,7 @@ pub fn compiletest(build: &Build,\n \n     cmd.arg(\"--docck-python\").arg(build.python());\n \n-    if build.config.build.ends_with(\"apple-darwin\") {\n+    if build.build.ends_with(\"apple-darwin\") {\n         // Force /usr/bin/python on macOS for LLDB tests because we're loading the\n         // LLDB plugin's compiled module which only works with the system python\n         // (namely not Homebrew-installed python)\n@@ -277,7 +277,7 @@ pub fn compiletest(build: &Build,\n \n     if build.remote_tested(target) {\n         cmd.arg(\"--remote-test-client\")\n-           .arg(build.tool(&Compiler::new(0, &build.config.build),\n+           .arg(build.tool(&Compiler::new(0, &build.build),\n                            \"remote-test-client\"));\n     }\n \n@@ -366,7 +366,7 @@ pub fn error_index(build: &Build, compiler: &Compiler) {\n                              \"error_index_generator\")\n                    .arg(\"markdown\")\n                    .arg(&output)\n-                   .env(\"CFG_BUILD\", &build.config.build));\n+                   .env(\"CFG_BUILD\", &build.build));\n \n     markdown_test(build, compiler, &output);\n }\n@@ -540,7 +540,7 @@ fn krate_remote(build: &Build,\n     let out_dir = build.cargo_out(compiler, mode, target);\n     let tests = find_tests(&out_dir.join(\"deps\"), target);\n \n-    let tool = build.tool(&Compiler::new(0, &build.config.build),\n+    let tool = build.tool(&Compiler::new(0, &build.build),\n                           \"remote-test-client\");\n     for test in tests {\n         let mut cmd = Command::new(&tool);\n@@ -585,7 +585,7 @@ pub fn remote_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n                       .join(exe(\"remote-test-server\", target));\n \n     // Spawn the emulator and wait for it to come online\n-    let tool = build.tool(&Compiler::new(0, &build.config.build),\n+    let tool = build.tool(&Compiler::new(0, &build.build),\n                           \"remote-test-client\");\n     let mut cmd = Command::new(&tool);\n     cmd.arg(\"spawn-emulator\")\n@@ -611,7 +611,7 @@ pub fn remote_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n \n /// Run \"distcheck\", a 'make check' from a tarball\n pub fn distcheck(build: &Build) {\n-    if build.config.build != \"x86_64-unknown-linux-gnu\" {\n+    if build.build != \"x86_64-unknown-linux-gnu\" {\n         return\n     }\n     if !build.config.host.iter().any(|s| s == \"x86_64-unknown-linux-gnu\") {\n@@ -636,7 +636,7 @@ pub fn distcheck(build: &Build) {\n                      .args(&build.config.configure_args)\n                      .arg(\"--enable-vendor\")\n                      .current_dir(&dir));\n-    build.run(Command::new(build_helper::make(&build.config.build))\n+    build.run(Command::new(build_helper::make(&build.build))\n                      .arg(\"check\")\n                      .current_dir(&dir));\n "}, {"sha": "5a3106c7d5e64e59aa8c0cca9a64b61ad78769e4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -158,7 +158,7 @@ pub fn build_startup_objects(build: &Build, for_compiler: &Compiler, target: &st\n         return\n     }\n \n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n     let compiler_path = build.compiler_path(&compiler);\n     let src_dir = &build.src.join(\"src/rtstartup\");\n     let dst_dir = &build.native_dir(target).join(\"rtstartup\");\n@@ -351,7 +351,7 @@ pub fn create_sysroot(build: &Build, compiler: &Compiler) {\n /// Prepare a new compiler from the artifacts in `stage`\n ///\n /// This will assemble a compiler in `build/$host/stage$stage`. The compiler\n-/// must have been previously produced by the `stage - 1` build.config.build\n+/// must have been previously produced by the `stage - 1` build.build\n /// compiler.\n pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     // nothing to do in stage0\n@@ -365,7 +365,7 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n     let target_compiler = Compiler::new(stage, host);\n \n     // The compiler that compiled the compiler we're assembling\n-    let build_compiler = Compiler::new(stage - 1, &build.config.build);\n+    let build_compiler = Compiler::new(stage - 1, &build.build);\n \n     // Link in all dylibs to the libdir\n     let sysroot = build.sysroot(&target_compiler);\n@@ -423,7 +423,7 @@ fn add_to_sysroot(sysroot_dst: &Path, stamp: &Path) {\n /// This will build the specified tool with the specified `host` compiler in\n /// `stage` into the normal cargo output directory.\n pub fn maybe_clean_tools(build: &Build, stage: u32, target: &str, mode: Mode) {\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n \n     let stamp = match mode {\n         Mode::Libstd => libstd_stamp(build, &compiler, target),\n@@ -443,7 +443,7 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n     let _folder = build.fold_output(|| format!(\"stage{}-{}\", stage, tool));\n     println!(\"Building stage{} tool {} ({})\", stage, tool, target);\n \n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n \n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n     let dir = build.src.join(\"src/tools\").join(tool);"}, {"sha": "efc33bcee9b3becf2bca18c0964577df002949b2", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -50,7 +50,7 @@ pub fn tmpdir(build: &Build) -> PathBuf {\n }\n \n fn rust_installer(build: &Build) -> Command {\n-    build.tool_cmd(&Compiler::new(0, &build.config.build), \"rust-installer\")\n+    build.tool_cmd(&Compiler::new(0, &build.build), \"rust-installer\")\n }\n \n /// Builds the `rust-docs` installer component.\n@@ -89,7 +89,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n \n     // As part of this step, *also* copy the docs directory to a directory which\n     // buildbot typically uploads.\n-    if host == build.config.build {\n+    if host == build.build {\n         let dst = distdir(build).join(\"doc\").join(build.rust_package_vers());\n         t!(fs::create_dir_all(&dst));\n         cp_r(&src, &dst);\n@@ -394,7 +394,7 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n \n     // The only true set of target libraries came from the build triple, so\n     // let's reduce redundant work by only producing archives from that host.\n-    if compiler.host != build.config.build {\n+    if compiler.host != build.build {\n         println!(\"\\tskipping, not a build host\");\n         return\n     }\n@@ -440,7 +440,7 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     assert!(build.config.extended);\n     println!(\"Dist analysis\");\n \n-    if compiler.host != build.config.build {\n+    if compiler.host != build.build {\n         println!(\"\\tskipping, not a build host\");\n         return;\n     }\n@@ -705,7 +705,7 @@ fn write_file(path: &Path, data: &[u8]) {\n \n pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n \n     let src = build.src.join(\"src/tools/cargo\");\n     let etc = src.join(\"src/etc\");\n@@ -766,7 +766,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n pub fn rls(build: &Build, stage: u32, target: &str) {\n     assert!(build.config.extended);\n     println!(\"Dist RLS stage{} ({})\", stage, target);\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n \n     let src = build.src.join(\"src/tools/rls\");\n     let release_num = build.release_num(\"rls\");\n@@ -1198,7 +1198,7 @@ fn add_env(build: &Build, cmd: &mut Command, target: &str) {\n }\n \n pub fn hash_and_sign(build: &Build) {\n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n     let mut cmd = build.tool_cmd(&compiler, \"build-manifest\");\n     let sign = build.config.dist_sign_folder.as_ref().unwrap_or_else(|| {\n         panic!(\"\\n\\nfailed to specify `dist.sign-folder` in `config.toml`\\n\\n\")"}, {"sha": "7dbc3e5553957c4feb360b92a33a170cb15fda7f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -45,7 +45,7 @@ pub fn rustbook_src(build: &Build, target: &str, name: &str, src: &Path) {\n     t!(fs::create_dir_all(&out));\n \n     let out = out.join(name);\n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n     let src = src.join(name);\n     let index = out.join(\"index.html\");\n     let rustbook = build.tool(&compiler, \"rustbook\");\n@@ -95,7 +95,7 @@ pub fn book(build: &Build, target: &str, name: &str) {\n fn invoke_rustdoc(build: &Build, target: &str, markdown: &str) {\n     let out = build.doc_out(target);\n \n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n \n     let path = build.src.join(\"src/doc\").join(markdown);\n \n@@ -150,7 +150,7 @@ pub fn standalone(build: &Build, target: &str) {\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n \n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n \n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");\n@@ -217,7 +217,7 @@ pub fn std(build: &Build, stage: u32, target: &str) {\n     println!(\"Documenting stage{} std ({})\", stage, target);\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n     let compiler = if build.force_use_stage1(&compiler, target) {\n         Compiler::new(1, compiler.host)\n     } else {\n@@ -276,7 +276,7 @@ pub fn test(build: &Build, stage: u32, target: &str) {\n     println!(\"Documenting stage{} test ({})\", stage, target);\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n     let compiler = if build.force_use_stage1(&compiler, target) {\n         Compiler::new(1, compiler.host)\n     } else {\n@@ -306,7 +306,7 @@ pub fn rustc(build: &Build, stage: u32, target: &str) {\n     println!(\"Documenting stage{} compiler ({})\", stage, target);\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(stage, &build.build);\n     let compiler = if build.force_use_stage1(&compiler, target) {\n         Compiler::new(1, compiler.host)\n     } else {\n@@ -351,13 +351,13 @@ pub fn error_index(build: &Build, target: &str) {\n     println!(\"Documenting error index ({})\", target);\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n     let mut index = build.tool_cmd(&compiler, \"error_index_generator\");\n     index.arg(\"html\");\n     index.arg(out.join(\"error-index.html\"));\n \n     // FIXME: shouldn't have to pass this env var\n-    index.env(\"CFG_BUILD\", &build.config.build);\n+    index.env(\"CFG_BUILD\", &build.build);\n \n     build.run(&mut index);\n }\n@@ -367,7 +367,7 @@ pub fn unstable_book_gen(build: &Build, target: &str) {\n     let out = build.md_doc_out(target).join(\"unstable-book\");\n     t!(fs::create_dir_all(&out));\n     t!(fs::remove_dir_all(&out));\n-    let compiler = Compiler::new(0, &build.config.build);\n+    let compiler = Compiler::new(0, &build.build);\n     let mut cmd = build.tool_cmd(&compiler, \"unstable-book-gen\");\n     cmd.arg(build.src.join(\"src\"));\n     cmd.arg(out);"}, {"sha": "69b0c4a2756a681a1a22691d87af43010dae7c3b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -1079,7 +1079,7 @@ impl<'a> Compiler<'a> {\n \n     /// Returns whether this is a snapshot compiler for `build`'s configuration\n     fn is_snapshot(&self, build: &Build) -> bool {\n-        self.stage == 0 && self.host == build.config.build\n+        self.stage == 0 && self.host == build.build\n     }\n \n     /// Returns if this compiler should be treated as a final stage one in the"}, {"sha": "20eec97d8e5aaa8e39fb675132e4644d79575331", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -94,7 +94,7 @@ pub fn llvm(build: &Build, target: &str) {\n     let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n \n     cfg.target(target)\n-       .host(&build.config.build)\n+       .host(&build.build)\n        .out_dir(&out_dir)\n        .profile(profile)\n        .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n@@ -129,11 +129,11 @@ pub fn llvm(build: &Build, target: &str) {\n     }\n \n     // http://llvm.org/docs/HowToCrossCompileLLVM.html\n-    if target != build.config.build {\n+    if target != build.build {\n         // FIXME: if the llvm root for the build triple is overridden then we\n         //        should use llvm-tblgen from there, also should verify that it\n         //        actually exists most of the time in normal installs of LLVM.\n-        let host = build.llvm_out(&build.config.build).join(\"bin/llvm-tblgen\");\n+        let host = build.llvm_out(&build.build).join(\"bin/llvm-tblgen\");\n         cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\")\n            .define(\"LLVM_TABLEGEN\", &host);\n     }\n@@ -243,7 +243,7 @@ pub fn test_helpers(build: &Build, target: &str) {\n     cfg.cargo_metadata(false)\n        .out_dir(&dst)\n        .target(target)\n-       .host(&build.config.build)\n+       .host(&build.build)\n        .opt_level(0)\n        .debug(false)\n        .file(build.src.join(\"src/rt/rust_test_helpers.c\"))"}, {"sha": "a9c1b023dd4f543413de521cfd3aa8f711bd6ad0", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -139,15 +139,15 @@ pub fn check(build: &mut Build) {\n     }\n \n     // Externally configured LLVM requires FileCheck to exist\n-    let filecheck = build.llvm_filecheck(&build.config.build);\n+    let filecheck = build.llvm_filecheck(&build.build);\n     if !filecheck.starts_with(&build.out) && !filecheck.exists() && build.config.codegen_tests {\n         panic!(\"FileCheck executable {:?} does not exist\", filecheck);\n     }\n \n     for target in &build.config.target {\n         // Can't compile for iOS unless we're on macOS\n         if target.contains(\"apple-ios\") &&\n-           !build.config.build.contains(\"apple-darwin\") {\n+           !build.build.contains(\"apple-darwin\") {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n "}, {"sha": "c221d7076832fa6aee6b5d7b363d6d29d30a4fbd", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=1654a2f5aca29041df86a8edd7fc0c9e6c5c1c9b", "patch": "@@ -104,10 +104,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"llvm\", \"src/llvm\")\n          .host(true)\n          .dep(move |s| {\n-             if s.target == build.config.build {\n+             if s.target == build.build {\n                  Step::noop()\n              } else {\n-                 s.target(&build.config.build)\n+                 s.target(&build.build)\n              }\n          })\n          .run(move |s| native::llvm(build, s.target));\n@@ -124,7 +124,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  Step::noop()\n              } else {\n                  s.name(\"librustc\")\n-                  .host(&build.config.build)\n+                  .host(&build.build)\n                   .stage(s.stage - 1)\n              }\n          })\n@@ -215,24 +215,24 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         let mut rule = rules.build(&krate, \"path/to/nowhere\");\n         rule.dep(move |s| {\n                 if build.force_use_stage1(&s.compiler(), s.target) {\n-                    s.host(&build.config.build).stage(1)\n-                } else if s.host == build.config.build {\n+                    s.host(&build.build).stage(1)\n+                } else if s.host == build.build {\n                     s.name(dep)\n                 } else {\n-                    s.host(&build.config.build)\n+                    s.host(&build.build)\n                 }\n             })\n             .run(move |s| {\n                 if build.force_use_stage1(&s.compiler(), s.target) {\n                     link(build,\n-                         &s.stage(1).host(&build.config.build).compiler(),\n+                         &s.stage(1).host(&build.build).compiler(),\n                          &s.compiler(),\n                          s.target)\n-                } else if s.host == build.config.build {\n+                } else if s.host == build.build {\n                     link(build, &s.compiler(), &s.compiler(), s.target)\n                 } else {\n                     link(build,\n-                         &s.host(&build.config.build).compiler(),\n+                         &s.host(&build.build).compiler(),\n                          &s.compiler(),\n                          s.target)\n                 }\n@@ -269,7 +269,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std\") {\n         rules.build(&krate.build_step, path)\n              .dep(|s| s.name(\"startup-objects\"))\n-             .dep(move |s| s.name(\"rustc\").host(&build.config.build).target(s.host))\n+             .dep(move |s| s.name(\"rustc\").host(&build.build).target(s.host))\n              .run(move |s| compile::std(build, s.target, &s.compiler()));\n     }\n     for (krate, path, _default) in krates(\"test\") {\n@@ -280,7 +280,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.build(&krate.build_step, path)\n              .dep(|s| s.name(\"libtest-link\"))\n-             .dep(move |s| s.name(\"llvm\").host(&build.config.build).stage(0))\n+             .dep(move |s| s.name(\"llvm\").host(&build.build).stage(0))\n              .dep(|s| s.name(\"may-run-build-script\"))\n              .run(move |s| compile::rustc(build, s.target, &s.compiler()));\n     }\n@@ -291,8 +291,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"may-run-build-script\", \"path/to/nowhere\")\n          .dep(move |s| {\n              s.name(\"libstd-link\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n          });\n     rules.build(\"startup-objects\", \"src/rtstartup\")\n          .dep(|s| s.name(\"create-sysroot\").target(s.host))\n@@ -332,7 +332,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               \"incremental\");\n     }\n \n-    if build.config.build.contains(\"msvc\") {\n+    if build.build.contains(\"msvc\") {\n         // nothing to do for debuginfo tests\n     } else {\n         rules.test(\"check-debuginfo-lldb\", \"src/test/debuginfo-lldb\")\n@@ -352,7 +352,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                                          \"debuginfo-gdb\", \"debuginfo\"));\n         let mut rule = rules.test(\"check-debuginfo\", \"src/test/debuginfo\");\n         rule.default(true);\n-        if build.config.build.contains(\"apple\") {\n+        if build.build.contains(\"apple\") {\n             rule.dep(|s| s.name(\"check-debuginfo-lldb\"));\n         } else {\n             rule.dep(|s| s.name(\"check-debuginfo-gdb\"));\n@@ -594,8 +594,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              // Cargo depends on procedural macros, which requires a full host\n              // compiler to be available, so we need to depend on that.\n              s.name(\"librustc-link\")\n-              .target(&build.config.build)\n-              .host(&build.config.build)\n+              .target(&build.build)\n+              .host(&build.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n     rules.build(\"tool-rls\", \"src/tools/rls\")\n@@ -606,8 +606,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(move |s| {\n              // rls, like cargo, uses procedural macros\n              s.name(\"librustc-link\")\n-              .target(&build.config.build)\n-              .host(&build.config.build)\n+              .target(&build.build)\n+              .host(&build.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n \n@@ -635,35 +635,35 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.doc(\"doc-book\", \"src/doc/book\")\n          .dep(move |s| {\n              s.name(\"tool-rustbook\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n               .stage(0)\n          })\n          .default(build.config.docs)\n          .run(move |s| doc::book(build, s.target, \"book\"));\n     rules.doc(\"doc-nomicon\", \"src/doc/nomicon\")\n          .dep(move |s| {\n              s.name(\"tool-rustbook\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n               .stage(0)\n          })\n          .default(build.config.docs)\n          .run(move |s| doc::rustbook(build, s.target, \"nomicon\"));\n     rules.doc(\"doc-reference\", \"src/doc/reference\")\n          .dep(move |s| {\n              s.name(\"tool-rustbook\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n               .stage(0)\n          })\n          .default(build.config.docs)\n          .run(move |s| doc::rustbook(build, s.target, \"reference\"));\n     rules.doc(\"doc-unstable-book\", \"src/doc/unstable-book\")\n          .dep(move |s| {\n              s.name(\"tool-rustbook\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n               .stage(0)\n          })\n          .dep(move |s| s.name(\"doc-unstable-book-gen\"))\n@@ -675,23 +675,23 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.doc(\"doc-standalone\", \"src/doc\")\n          .dep(move |s| {\n              s.name(\"rustc\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n               .stage(0)\n          })\n          .default(build.config.docs)\n          .run(move |s| doc::standalone(build, s.target));\n     rules.doc(\"doc-error-index\", \"src/tools/error_index_generator\")\n-         .dep(move |s| s.name(\"tool-error-index\").target(&build.config.build).stage(0))\n+         .dep(move |s| s.name(\"tool-error-index\").target(&build.build).stage(0))\n          .dep(move |s| s.name(\"librustc-link\"))\n          .default(build.config.docs)\n          .host(true)\n          .run(move |s| doc::error_index(build, s.target));\n     rules.doc(\"doc-unstable-book-gen\", \"src/tools/unstable-book-gen\")\n          .dep(move |s| {\n              s.name(\"tool-unstable-book-gen\")\n-              .host(&build.config.build)\n-              .target(&build.config.build)\n+              .host(&build.build)\n+              .target(&build.build)\n               .stage(0)\n          })\n          .dep(move |s| s.name(\"libstd-link\"))\n@@ -725,7 +725,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     // ========================================================================\n     // Distribution targets\n     rules.dist(\"dist-rustc\", \"src/librustc\")\n-         .dep(move |s| s.name(\"rustc\").host(&build.config.build))\n+         .dep(move |s| s.name(\"rustc\").host(&build.build))\n          .host(true)\n          .only_host_build(true)\n          .default(true)\n@@ -811,7 +811,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .host(true)\n          .only_build(true)\n          .only_host_build(true)\n-         .dep(move |s| s.name(\"tool-build-manifest\").target(&build.config.build).stage(0))\n+         .dep(move |s| s.name(\"tool-build-manifest\").target(&build.build).stage(0))\n          .run(move |_| dist::hash_and_sign(build));\n \n     rules.install(\"install-docs\", \"src/doc\")\n@@ -861,8 +861,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     /// Helper to depend on a stage0 build-only rust-installer tool.\n     fn tool_rust_installer<'a>(build: &'a Build, step: &Step<'a>) -> Step<'a> {\n         step.name(\"tool-rust-installer\")\n-            .host(&build.config.build)\n-            .target(&build.config.build)\n+            .host(&build.build)\n+            .target(&build.build)\n             .stage(0)\n     }\n }\n@@ -1058,8 +1058,8 @@ impl<'a> Rules<'a> {\n             build: build,\n             sbuild: Step {\n                 stage: build.flags.stage.unwrap_or(2),\n-                target: &build.config.build,\n-                host: &build.config.build,\n+                target: &build.build,\n+                host: &build.build,\n                 name: \"\",\n             },\n             rules: BTreeMap::new(),\n@@ -1486,8 +1486,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         assert!(plan.contains(&step.name(\"dist-docs\")));\n@@ -1509,8 +1509,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         assert!(plan.contains(&step.name(\"dist-docs\")));\n@@ -1537,8 +1537,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         assert!(!plan.iter().any(|s| s.host == \"B\"));\n@@ -1567,8 +1567,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         assert!(!plan.iter().any(|s| s.host == \"B\"));\n@@ -1604,8 +1604,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         assert!(!plan.iter().any(|s| s.target == \"A\"));\n@@ -1631,8 +1631,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         assert!(!plan.iter().any(|s| s.target == \"A\"));\n@@ -1675,8 +1675,8 @@ mod tests {\n         let step = super::Step {\n             name: \"\",\n             stage: 2,\n-            host: &build.config.build,\n-            target: &build.config.build,\n+            host: &build.build,\n+            target: &build.build,\n         };\n \n         // rustc built for all for of (A, B) x (A, B)"}]}