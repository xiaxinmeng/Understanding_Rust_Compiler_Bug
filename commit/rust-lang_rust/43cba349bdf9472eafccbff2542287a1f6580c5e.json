{"sha": "43cba349bdf9472eafccbff2542287a1f6580c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2JhMzQ5YmRmOTQ3MmVhZmNjYmZmMjU0MjI4N2ExZjY1ODBjNWU=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-20T22:00:33Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-20T22:00:33Z"}, "message": "Remove `can_suggest` from Clippy.\n\nRemoves `can_suggest` from as it is no longer used.\nReverts rust-clippy#5724.", "tree": {"sha": "7e94df2baa2837a19acb5422d7bd5de2e586afcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e94df2baa2837a19acb5422d7bd5de2e586afcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cba349bdf9472eafccbff2542287a1f6580c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cba349bdf9472eafccbff2542287a1f6580c5e", "html_url": "https://github.com/rust-lang/rust/commit/43cba349bdf9472eafccbff2542287a1f6580c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cba349bdf9472eafccbff2542287a1f6580c5e/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "html_url": "https://github.com/rust-lang/rust/commit/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29"}], "stats": {"total": 78, "additions": 16, "deletions": 62}, "files": [{"sha": "819846ebc793becfe6d8a999a3a5f419300e1e66", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 62, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/43cba349bdf9472eafccbff2542287a1f6580c5e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cba349bdf9472eafccbff2542287a1f6580c5e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=43cba349bdf9472eafccbff2542287a1f6580c5e", "patch": "@@ -1440,15 +1440,12 @@ where\n \n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n-    use crate::utils::{in_constant, match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+    use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_errors::Applicability;\n-    use rustc_hir::{Arm, Expr, ExprKind, HirId, MatchSource, PatKind, QPath};\n+    use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n     use rustc_lint::LateContext;\n-    use rustc_middle::ty;\n-    use rustc_mir::const_eval::is_const_fn;\n-    use rustc_span::source_map::Symbol;\n \n     pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Match(op, arms, ref match_source) = &expr.kind {\n@@ -1468,37 +1465,24 @@ mod redundant_pattern_match {\n         arms: &[Arm<'_>],\n         keyword: &'static str,\n     ) {\n-        fn find_suggestion(cx: &LateContext<'_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n-            if match_qpath(path, &paths::RESULT_OK) {\n-                return Some(\"is_ok()\");\n-            }\n-            if match_qpath(path, &paths::RESULT_ERR) {\n-                return Some(\"is_err()\");\n-            }\n-            if match_qpath(path, &paths::OPTION_SOME) && can_suggest(cx, hir_id, sym!(option_type), \"is_some\") {\n-                return Some(\"is_some()\");\n-            }\n-            if match_qpath(path, &paths::OPTION_NONE) && can_suggest(cx, hir_id, sym!(option_type), \"is_none\") {\n-                return Some(\"is_none()\");\n-            }\n-            None\n-        }\n-\n-        let hir_id = expr.hir_id;\n         let good_method = match arms[0].pat.kind {\n             PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n                 if let PatKind::Wild = patterns[0].kind {\n-                    find_suggestion(cx, hir_id, path)\n+                    if match_qpath(path, &paths::RESULT_OK) {\n+                        \"is_ok()\"\n+                    } else if match_qpath(path, &paths::RESULT_ERR) {\n+                        \"is_err()\"\n+                    } else if match_qpath(path, &paths::OPTION_SOME) {\n+                        \"is_some()\"\n+                    } else {\n+                        return;\n+                    }\n                 } else {\n-                    None\n+                    return;\n                 }\n             },\n-            PatKind::Path(ref path) => find_suggestion(cx, hir_id, path),\n-            _ => None,\n-        };\n-        let good_method = match good_method {\n-            Some(method) => method,\n-            None => return,\n+            PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n+            _ => return,\n         };\n \n         // check that `while_let_on_iterator` lint does not trigger\n@@ -1547,7 +1531,6 @@ mod redundant_pattern_match {\n         if arms.len() == 2 {\n             let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n-            let hir_id = expr.hir_id;\n             let found_good_method = match node_pair {\n                 (\n                     PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n@@ -1562,8 +1545,6 @@ mod redundant_pattern_match {\n                             &paths::RESULT_ERR,\n                             \"is_ok()\",\n                             \"is_err()\",\n-                            || true,\n-                            || true,\n                         )\n                     } else {\n                         None\n@@ -1582,8 +1563,6 @@ mod redundant_pattern_match {\n                             &paths::OPTION_NONE,\n                             \"is_some()\",\n                             \"is_none()\",\n-                            || can_suggest(cx, hir_id, sym!(option_type), \"is_some\"),\n-                            || can_suggest(cx, hir_id, sym!(option_type), \"is_none\"),\n                         )\n                     } else {\n                         None\n@@ -1616,7 +1595,6 @@ mod redundant_pattern_match {\n         }\n     }\n \n-    #[allow(clippy::too_many_arguments)]\n     fn find_good_method_for_match<'a>(\n         arms: &[Arm<'_>],\n         path_left: &QPath<'_>,\n@@ -1625,8 +1603,6 @@ mod redundant_pattern_match {\n         expected_right: &[&str],\n         should_be_left: &'a str,\n         should_be_right: &'a str,\n-        can_suggest_left: impl Fn() -> bool,\n-        can_suggest_right: impl Fn() -> bool,\n     ) -> Option<&'a str> {\n         let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n             (&(*arms[0].body).kind, &(*arms[1].body).kind)\n@@ -1638,35 +1614,13 @@ mod redundant_pattern_match {\n \n         match body_node_pair {\n             (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n-                (LitKind::Bool(true), LitKind::Bool(false)) if can_suggest_left() => Some(should_be_left),\n-                (LitKind::Bool(false), LitKind::Bool(true)) if can_suggest_right() => Some(should_be_right),\n+                (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+                (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n                 _ => None,\n             },\n             _ => None,\n         }\n     }\n-\n-    fn can_suggest(cx: &LateContext<'_>, hir_id: HirId, diag_item: Symbol, name: &str) -> bool {\n-        if !in_constant(cx, hir_id) {\n-            return true;\n-        }\n-\n-        // Avoid suggesting calls to non-`const fn`s in const contexts, see #5697.\n-        cx.tcx\n-            .get_diagnostic_item(diag_item)\n-            .and_then(|def_id| {\n-                cx.tcx.inherent_impls(def_id).iter().find_map(|imp| {\n-                    cx.tcx\n-                        .associated_items(*imp)\n-                        .in_definition_order()\n-                        .find_map(|item| match item.kind {\n-                            ty::AssocKind::Fn if item.ident.name.as_str() == name => Some(item.def_id),\n-                            _ => None,\n-                        })\n-                })\n-            })\n-            .map_or(false, |def_id| is_const_fn(cx.tcx, def_id))\n-    }\n }\n \n #[test]"}]}