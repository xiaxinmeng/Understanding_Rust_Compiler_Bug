{"sha": "5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTdkOTlkMWIzYjc2ZWM3ODE0Yzk1ZGZjYzAzOTlhYjRkZGFhODM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-07-06T17:30:09Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-07-06T23:41:30Z"}, "message": "Add some unit tests for dangling Weak references", "tree": {"sha": "b5b0fa684b2cd4fca5fc96a50e43700e35419c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b0fa684b2cd4fca5fc96a50e43700e35419c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "html_url": "https://github.com/rust-lang/rust/commit/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21526c5403d7a43144de897d0187c395fb92bacc", "url": "https://api.github.com/repos/rust-lang/rust/commits/21526c5403d7a43144de897d0187c395fb92bacc", "html_url": "https://github.com/rust-lang/rust/commit/21526c5403d7a43144de897d0187c395fb92bacc"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "753873dd294ce19564c075a6bf275706e4ba5553", "filename": "src/liballoc/tests/arc.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::any::Any;\n+use std::sync::{Arc, Weak};\n+\n+#[test]\n+fn uninhabited() {\n+    enum Void {}\n+    let mut a = Weak::<Void>::new();\n+    a = a.clone();\n+    assert!(a.upgrade().is_none());\n+\n+    let mut a: Weak<Any> = a;  // Unsizing\n+    a = a.clone();\n+    assert!(a.upgrade().is_none());\n+}\n+\n+#[test]\n+fn slice() {\n+    let a: Arc<[u32; 3]> = Arc::new([3, 2, 1]);\n+    let a: Arc<[u32]> = a;  // Unsizing\n+    let b: Arc<[u32]> = Arc::from(&[3, 2, 1][..]);  // Conversion\n+    assert_eq!(a, b);\n+\n+    // Exercise is_dangling() with a DST\n+    let mut a = Arc::downgrade(&a);\n+    a = a.clone();\n+    assert!(a.upgrade().is_some());\n+}\n+\n+#[test]\n+fn trait_object() {\n+    let a: Arc<u32> = Arc::new(4);\n+    let a: Arc<Any> = a;  // Unsizing\n+\n+    // Exercise is_dangling() with a DST\n+    let mut a = Arc::downgrade(&a);\n+    a = a.clone();\n+    assert!(a.upgrade().is_some());\n+\n+    let mut b = Weak::<u32>::new();\n+    b = b.clone();\n+    assert!(b.upgrade().is_none());\n+    let mut b: Weak<Any> = b;  // Unsizing\n+    b = b.clone();\n+    assert!(b.upgrade().is_none());\n+}"}, {"sha": "2c361598e8928c8389172f86a4a1a93e478825df", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "patch": "@@ -32,12 +32,14 @@ extern crate rand;\n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;\n \n+mod arc;\n mod binary_heap;\n mod btree;\n mod cow_str;\n mod fmt;\n mod heap;\n mod linked_list;\n+mod rc;\n mod slice;\n mod str;\n mod string;"}, {"sha": "baa0406acfc3dbcc02cdc8d1f2f2d349cd225349", "filename": "src/liballoc/tests/rc.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=5717d99d1b3b76ec7814c95dfcc0399ab4ddaa83", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::any::Any;\n+use std::rc::{Rc, Weak};\n+\n+#[test]\n+fn uninhabited() {\n+    enum Void {}\n+    let mut a = Weak::<Void>::new();\n+    a = a.clone();\n+    assert!(a.upgrade().is_none());\n+\n+    let mut a: Weak<Any> = a;  // Unsizing\n+    a = a.clone();\n+    assert!(a.upgrade().is_none());\n+}\n+\n+#[test]\n+fn slice() {\n+    let a: Rc<[u32; 3]> = Rc::new([3, 2, 1]);\n+    let a: Rc<[u32]> = a;  // Unsizing\n+    let b: Rc<[u32]> = Rc::from(&[3, 2, 1][..]);  // Conversion\n+    assert_eq!(a, b);\n+\n+    // Exercise is_dangling() with a DST\n+    let mut a = Rc::downgrade(&a);\n+    a = a.clone();\n+    assert!(a.upgrade().is_some());\n+}\n+\n+#[test]\n+fn trait_object() {\n+    let a: Rc<u32> = Rc::new(4);\n+    let a: Rc<Any> = a;  // Unsizing\n+\n+    // Exercise is_dangling() with a DST\n+    let mut a = Rc::downgrade(&a);\n+    a = a.clone();\n+    assert!(a.upgrade().is_some());\n+\n+    let mut b = Weak::<u32>::new();\n+    b = b.clone();\n+    assert!(b.upgrade().is_none());\n+    let mut b: Weak<Any> = b;  // Unsizing\n+    b = b.clone();\n+    assert!(b.upgrade().is_none());\n+}"}]}