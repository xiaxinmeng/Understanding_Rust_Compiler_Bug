{"sha": "7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNTAwOGM4MjkzYTRkMWViM2U0NTU3YTM2YTZiZmRlZjM0ZGUyODQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-09-30T15:46:18Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-09-30T15:48:26Z"}, "message": "Backport LLVM apfloat commit to rustc_apfloat\n\nBackports LLVM commit: https://github.com/llvm/llvm-project/commit/e34bd1e0b03d20a506ada156d87e1b3a96d82fa2\n\nFixes #69532", "tree": {"sha": "728d353ca824250abd9606cec36a4f0183b2979c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728d353ca824250abd9606cec36a4f0183b2979c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "html_url": "https://github.com/rust-lang/rust/commit/7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e4db620a7d2f569f11dcab627430921ea8aacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e4db620a7d2f569f11dcab627430921ea8aacf", "html_url": "https://github.com/rust-lang/rust/commit/c6e4db620a7d2f569f11dcab627430921ea8aacf"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "aafd6dfb89a25aeca2d9a8e760910e94d0e84a5e", "filename": "compiler/rustc_apfloat/src/ieee.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Fieee.rs?ref=7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "patch": "@@ -1511,6 +1511,18 @@ impl<S: Semantics, T: Semantics> FloatConvert<IeeeFloat<T>> for IeeeFloat<S> {\n                 sig::set_bit(&mut r.sig, T::PRECISION - 1);\n             }\n \n+            // If we are truncating NaN, it is possible that we shifted out all of the\n+            // set bits in a signalling NaN payload. But NaN must remain NaN, so some\n+            // bit in the significand must be set (otherwise it is Inf).\n+            // This can only happen with sNaN. Set the 1st bit after the quiet bit,\n+            // so that we still have an sNaN.\n+            if r.sig[0] == 0 {\n+                assert!(shift < 0, \"Should not lose NaN payload on extend\");\n+                assert!(T::PRECISION >= 3, \"Unexpectedly narrow significand\");\n+                assert!(*loses_info, \"Missing payload should have set lost info\");\n+                sig::set_bit(&mut r.sig, T::PRECISION - 3);\n+            }\n+\n             // gcc forces the Quiet bit on, which means (float)(double)(float_sNan)\n             // does not give you back the same bits. This is dubious, and we\n             // don't currently do it. You're really supposed to get"}, {"sha": "0f3c99fba9e24d39af75201db7876115d60c9fc0", "filename": "compiler/rustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs?ref=7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "patch": "@@ -566,6 +566,15 @@ fn fma() {\n     }\n }\n \n+#[test]\n+fn issue_69532() {\n+    let f = Double::from_bits(0x7FF0_0000_0000_0001u64 as u128);\n+    let mut loses_info = false;\n+    let r: Single = f.convert(&mut loses_info).value;\n+    assert!(loses_info);\n+    assert!(r.is_nan());\n+}\n+\n #[test]\n fn min_num() {\n     let f1 = Double::from_f64(1.0);"}, {"sha": "81007b15074f7bb82551347652bf04d886b1e432", "filename": "src/test/ui/issues/issue-69532.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/src%2Ftest%2Fui%2Fissues%2Fissue-69532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5008c8293a4d1eb3e4557a36a6bfdef34de284/src%2Ftest%2Fui%2Fissues%2Fissue-69532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69532.rs?ref=7f5008c8293a4d1eb3e4557a36a6bfdef34de284", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+#![feature(const_fn_transmute)]\n+\n+const fn make_nans() -> (f64, f64, f32, f32) {\n+    let nan1: f64 = unsafe { std::mem::transmute(0x7FF0_0001_0000_0001u64) };\n+    let nan2: f64 = unsafe { std::mem::transmute(0x7FF0_0000_0000_0001u64) };\n+\n+    let nan1_32 = nan1 as f32;\n+    let nan2_32 = nan2 as f32;\n+\n+    (nan1, nan2, nan1_32, nan2_32)\n+}\n+\n+static NANS: (f64, f64, f32, f32) = make_nans();\n+\n+fn main() {\n+    let (nan1, nan2, nan1_32, nan2_32) = NANS;\n+\n+    assert!(nan1.is_nan());\n+    assert!(nan2.is_nan());\n+\n+    assert!(nan1_32.is_nan());\n+    assert!(nan2_32.is_nan());\n+}"}]}