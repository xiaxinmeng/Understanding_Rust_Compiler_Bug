{"sha": "c4173bb468500f6490921e8f8627d87b2aeb7af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MTczYmI0Njg1MDBmNjQ5MDkyMWU4Zjg2MjdkODdiMmFlYjdhZjU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-04-17T06:31:52Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-04-17T06:31:52Z"}, "message": "Handle extended key value attr in mbe", "tree": {"sha": "d8f6d2d1c2d2aac12f333a7f9955a708d49bd28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f6d2d1c2d2aac12f333a7f9955a708d49bd28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4173bb468500f6490921e8f8627d87b2aeb7af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4173bb468500f6490921e8f8627d87b2aeb7af5", "html_url": "https://github.com/rust-lang/rust/commit/c4173bb468500f6490921e8f8627d87b2aeb7af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4173bb468500f6490921e8f8627d87b2aeb7af5/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df5b6f7d459a367b191d5d540c7363d9e526eadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/df5b6f7d459a367b191d5d540c7363d9e526eadf", "html_url": "https://github.com/rust-lang/rust/commit/df5b6f7d459a367b191d5d540c7363d9e526eadf"}], "stats": {"total": 83, "additions": 35, "deletions": 48}, "files": [{"sha": "146b236e26fda0d9c4c3676310d8ccd17ad811f4", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4173bb468500f6490921e8f8627d87b2aeb7af5/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4173bb468500f6490921e8f8627d87b2aeb7af5/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=c4173bb468500f6490921e8f8627d87b2aeb7af5", "patch": "@@ -940,6 +940,24 @@ fn test_meta_doc_comments() {\n     );\n }\n \n+#[test]\n+fn test_meta_extended_key_value_attributes() {\n+    parse_macro(\n+        r#\"\n+macro_rules! foo {\n+    (#[$i:meta]) => (\n+        #[$ i]\n+        fn bar() {}\n+    )\n+}\n+\"#,\n+    )\n+    .assert_expand_items(\n+        r#\"foo! { #[doc = concat!(\"The `\", \"bla\", \"` lang item.\")] }\"#,\n+        r#\"# [doc = concat ! (\"The `\" , \"bla\" , \"` lang item.\")] fn bar () {}\"#,\n+    );\n+}\n+\n #[test]\n fn test_meta_doc_comments_non_latin() {\n     parse_macro("}, {"sha": "9bdf0b5fa24bfe4879e10d7157547270f604a968", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c4173bb468500f6490921e8f8627d87b2aeb7af5/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4173bb468500f6490921e8f8627d87b2aeb7af5/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=c4173bb468500f6490921e8f8627d87b2aeb7af5", "patch": "@@ -76,42 +76,7 @@ pub(crate) mod fragments {\n \n     // Parse a meta item , which excluded [], e.g : #[ MetaItem ]\n     pub(crate) fn meta_item(p: &mut Parser) {\n-        fn is_delimiter(p: &mut Parser) -> bool {\n-            matches!(p.current(), T!['{'] | T!['('] | T!['['])\n-        }\n-\n-        if is_delimiter(p) {\n-            items::token_tree(p);\n-            return;\n-        }\n-\n-        let m = p.start();\n-        while !p.at(EOF) {\n-            if is_delimiter(p) {\n-                items::token_tree(p);\n-                break;\n-            } else {\n-                // https://doc.rust-lang.org/reference/attributes.html\n-                // https://doc.rust-lang.org/reference/paths.html#simple-paths\n-                // The start of an meta must be a simple path\n-                match p.current() {\n-                    IDENT | T![super] | T![self] | T![crate] => p.bump_any(),\n-                    T![=] => {\n-                        p.bump_any();\n-                        match p.current() {\n-                            c if c.is_literal() => p.bump_any(),\n-                            T![true] | T![false] => p.bump_any(),\n-                            _ => {}\n-                        }\n-                        break;\n-                    }\n-                    _ if p.at(T![::]) => p.bump(T![::]),\n-                    _ => break,\n-                }\n-            }\n-        }\n-\n-        m.complete(p, TOKEN_TREE);\n+        attributes::meta(p);\n     }\n \n     pub(crate) fn item(p: &mut Parser) {"}, {"sha": "124a10eb264712c31aed9f55cff1f9d46b706f92", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4173bb468500f6490921e8f8627d87b2aeb7af5/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4173bb468500f6490921e8f8627d87b2aeb7af5/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=c4173bb468500f6490921e8f8627d87b2aeb7af5", "patch": "@@ -14,6 +14,21 @@ pub(super) fn outer_attrs(p: &mut Parser) {\n     }\n }\n \n+pub(super) fn meta(p: &mut Parser) {\n+    paths::use_path(p);\n+\n+    match p.current() {\n+        T![=] => {\n+            p.bump(T![=]);\n+            if expressions::expr(p).0.is_none() {\n+                p.error(\"expected expression\");\n+            }\n+        }\n+        T!['('] | T!['['] | T!['{'] => items::token_tree(p),\n+        _ => {}\n+    }\n+}\n+\n fn attr(p: &mut Parser, inner: bool) {\n     let attr = p.start();\n     assert!(p.at(T![#]));\n@@ -25,18 +40,7 @@ fn attr(p: &mut Parser, inner: bool) {\n     }\n \n     if p.eat(T!['[']) {\n-        paths::use_path(p);\n-\n-        match p.current() {\n-            T![=] => {\n-                p.bump(T![=]);\n-                if expressions::expr(p).0.is_none() {\n-                    p.error(\"expected expression\");\n-                }\n-            }\n-            T!['('] | T!['['] | T!['{'] => items::token_tree(p),\n-            _ => {}\n-        }\n+        meta(p);\n \n         if !p.eat(T![']']) {\n             p.error(\"expected `]`\");"}]}