{"sha": "cf0ececb7aa93d5538a7688d825201327335132e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMGVjZWNiN2FhOTNkNTUzOGE3Njg4ZDgyNTIwMTMyNzMzNTEzMmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-03T16:03:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-03T16:03:46Z"}, "message": "Highlight assist tests", "tree": {"sha": "605a9e4e9b3f9bde6f3b8229f7a01c4fb7735748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605a9e4e9b3f9bde6f3b8229f7a01c4fb7735748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0ececb7aa93d5538a7688d825201327335132e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0ececb7aa93d5538a7688d825201327335132e", "html_url": "https://github.com/rust-lang/rust/commit/cf0ececb7aa93d5538a7688d825201327335132e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0ececb7aa93d5538a7688d825201327335132e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cca6b2a3d4e1981577616d854bca498f4891289", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cca6b2a3d4e1981577616d854bca498f4891289", "html_url": "https://github.com/rust-lang/rust/commit/1cca6b2a3d4e1981577616d854bca498f4891289"}], "stats": {"total": 102, "additions": 53, "deletions": 49}, "files": [{"sha": "eb5112343ca92687a65b9804c1cd2aeaa6b1a6d2", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cf0ececb7aa93d5538a7688d825201327335132e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0ececb7aa93d5538a7688d825201327335132e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=cf0ececb7aa93d5538a7688d825201327335132e", "patch": "@@ -126,7 +126,7 @@ mod tests {\n     fn test_inline_let_bind_literal_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     let a<|> = 1;\n@@ -140,7 +140,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     <|>1 + 1;\n@@ -160,7 +160,7 @@ fn foo() {\n     fn test_inline_let_bind_bin_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     let a<|> = 1 + 1;\n@@ -174,7 +174,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     <|>(1 + 1) + 1;\n@@ -194,7 +194,7 @@ fn foo() {\n     fn test_inline_let_bind_function_call_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     let a<|> = bar(1);\n@@ -208,7 +208,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize) {}\n fn foo() {\n     <|>bar(1) + 1;\n@@ -228,7 +228,7 @@ fn foo() {\n     fn test_inline_let_bind_cast_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn bar(a: usize): usize { a }\n fn foo() {\n     let a<|> = bar(1) as u64;\n@@ -242,7 +242,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn bar(a: usize): usize { a }\n fn foo() {\n     <|>(bar(1) as u64) + 1;\n@@ -262,7 +262,7 @@ fn foo() {\n     fn test_inline_let_bind_block_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = { 10 + 1 };\n     a + 1;\n@@ -275,7 +275,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>{ 10 + 1 } + 1;\n     if { 10 + 1 } > 10 {\n@@ -294,7 +294,7 @@ fn foo() {\n     fn test_inline_let_bind_paren_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = ( 10 + 1 );\n     a + 1;\n@@ -307,7 +307,7 @@ fn foo() {\n     let b = a * 10;\n     bar(a);\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>( 10 + 1 ) + 1;\n     if ( 10 + 1 ) > 10 {\n@@ -339,13 +339,13 @@ fn foo() {\n     fn test_call_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = bar(10 + 1);\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = bar(10 + 1) * 10;\n     let c = bar(10 + 1) as usize;\n@@ -357,14 +357,14 @@ fn foo() {\n     fn test_index_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let x = vec![1, 2, 3];\n     let a<|> = x[0];\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let x = vec![1, 2, 3];\n     <|>let b = x[0] * 10;\n@@ -377,14 +377,14 @@ fn foo() {\n     fn test_method_call_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let bar = vec![1];\n     let a<|> = bar.len();\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let bar = vec![1];\n     <|>let b = bar.len() * 10;\n@@ -397,7 +397,7 @@ fn foo() {\n     fn test_field_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n struct Bar {\n     foo: usize\n }\n@@ -408,7 +408,7 @@ fn foo() {\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n struct Bar {\n     foo: usize\n }\n@@ -425,15 +425,15 @@ fn foo() {\n     fn test_try_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n     let a<|> = bar?;\n     let b = a * 10;\n     let c = a as usize;\n     None\n }\",\n-            \"\n+            r\"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n     <|>let b = bar? * 10;\n@@ -447,13 +447,13 @@ fn foo() -> Option<usize> {\n     fn test_ref_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let bar = 10;\n     let a<|> = &bar;\n     let b = a * 10;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let bar = 10;\n     <|>let b = &bar * 10;\n@@ -465,12 +465,12 @@ fn foo() {\n     fn test_tuple_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = (10, 20);\n     let b = a[0];\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = (10, 20)[0];\n }\",\n@@ -481,12 +481,12 @@ fn foo() {\n     fn test_array_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = [1, 2, 3];\n     let b = a.len();\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = [1, 2, 3].len();\n }\",\n@@ -497,13 +497,13 @@ fn foo() {\n     fn test_paren() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = (10 + 20);\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = (10 + 20) * 10;\n     let c = (10 + 20) as usize;\n@@ -515,14 +515,14 @@ fn foo() {\n     fn test_path_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let d = 10;\n     let a<|> = d;\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     let d = 10;\n     <|>let b = d * 10;\n@@ -535,13 +535,13 @@ fn foo() {\n     fn test_block_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = { 10 };\n     let b = a * 10;\n     let c = a as usize;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = { 10 } * 10;\n     let c = { 10 } as usize;\n@@ -553,15 +553,15 @@ fn foo() {\n     fn test_used_in_different_expr1() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 10 + 20;\n     let b = a * 10;\n     let c = (a, 20);\n     let d = [a, 10];\n     let e = (a);\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>let b = (10 + 20) * 10;\n     let c = (10 + 20, 20);\n@@ -575,12 +575,12 @@ fn foo() {\n     fn test_used_in_for_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = vec![10, 20];\n     for i in a {}\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>for i in vec![10, 20] {}\n }\",\n@@ -591,12 +591,12 @@ fn foo() {\n     fn test_used_in_while_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 > 0;\n     while a {}\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>while 1 > 0 {}\n }\",\n@@ -607,14 +607,14 @@ fn foo() {\n     fn test_used_in_break_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 + 1;\n     loop {\n         break a;\n     }\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>loop {\n         break 1 + 1;\n@@ -627,12 +627,12 @@ fn foo() {\n     fn test_used_in_return_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 > 0;\n     return a;\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>return 1 > 0;\n }\",\n@@ -643,12 +643,12 @@ fn foo() {\n     fn test_used_in_match_expr() {\n         check_assist(\n             inline_local_variable,\n-            \"\n+            r\"\n fn foo() {\n     let a<|> = 1 > 0;\n     match a {}\n }\",\n-            \"\n+            r\"\n fn foo() {\n     <|>match 1 > 0 {}\n }\","}, {"sha": "50a15f9786095e894b2a717c3780d74250f97c8c", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf0ececb7aa93d5538a7688d825201327335132e/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0ececb7aa93d5538a7688d825201327335132e/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=cf0ececb7aa93d5538a7688d825201327335132e", "patch": "@@ -178,8 +178,12 @@ mod helpers {\n         (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(assist: AssistHandler, ra_fixture: &str, after: &str) {\n-        check(assist, ra_fixture, ExpectedResult::After(after));\n+    pub(crate) fn check_assist(\n+        assist: AssistHandler,\n+        ra_fixture_before: &str,\n+        ra_fixture_after: &str,\n+    ) {\n+        check(assist, ra_fixture_before, ExpectedResult::After(ra_fixture_after));\n     }\n \n     // FIXME: instead of having a separate function here, maybe use"}, {"sha": "7e41db5301f0f05eb439bb443293cfe7f3e11a91", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf0ececb7aa93d5538a7688d825201327335132e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0ececb7aa93d5538a7688d825201327335132e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=cf0ececb7aa93d5538a7688d825201327335132e", "patch": "@@ -320,7 +320,7 @@ fn highlight_injection(\n     let call_info = call_info_for_token(&sema, expanded)?;\n     let idx = call_info.active_parameter?;\n     let name = call_info.signature.parameter_names.get(idx)?;\n-    if name != \"ra_fixture\" {\n+    if !name.starts_with(\"ra_fixture\") {\n         return None;\n     }\n     let value = literal.value()?;"}]}