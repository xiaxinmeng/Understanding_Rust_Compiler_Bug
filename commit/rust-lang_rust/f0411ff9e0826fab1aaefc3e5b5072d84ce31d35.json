{"sha": "f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNDExZmY5ZTA4MjZmYWIxYWFlZmMzZTViNTA3MmQ4NGNlMzFkMzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-05T16:22:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T16:22:31Z"}, "message": "Merge #4320\n\n4320: add doctest support r=matklad a=bnjjj\n\nclose #4317\r\n\r\npreview:\r\n\r\n<img width=\"253\" alt=\"Capture d\u2019e\u0301cran 2020-05-05 a\u0300 17 39 58\" src=\"https://user-images.githubusercontent.com/5719034/81086040-45110b80-8ef8-11ea-9c05-79c6fe400fc3.png\">\r\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "4808e2a4cd7fc859ddf601a817ea5d9afa5c4d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4808e2a4cd7fc859ddf601a817ea5d9afa5c4d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesZLHCRBK7hj4Ov3rIwAAdHIIAJwtJf3X0CsSOAvh7Vk9R0Kz\nzL9LJZpDTA2aM5M4ikYuY+MiJnm5T2WToEr271i/wC3+d5gJ87vw8b9WlC683MWn\nnBeW2jDS05wWiUGL73PkY6Mou0q8+rrjCwRnb4tHmmTm9+aCzS9aXGgEGUlLFw+d\n/Ktfr7m8DXU4jPg0P7s8juB/4iaXqJjwqwE7ge7HkFQ1HCYPdtF1QQTbRv21UXpm\nl1Glwz9pABGglZQeKjHzkkS+J+aOs6XGf4eet5csGy6DoJYufYJAJgmvc/g1l3Xc\nbCOyH2KLn79wvY1XGR3TfMECec/EuEViGh3hNSTNIU7ITsFM/gxvktine3qleJg=\n=J+dT\n-----END PGP SIGNATURE-----\n", "payload": "tree 4808e2a4cd7fc859ddf601a817ea5d9afa5c4d3c\nparent 58f64313fdbb215b29cceb843e06d2c1541d9f56\nparent fe52f8f0281c0f56955871863a6e0c14732540f9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588695751 +0000\ncommitter GitHub <noreply@github.com> 1588695751 +0000\n\nMerge #4320\n\n4320: add doctest support r=matklad a=bnjjj\n\nclose #4317\r\n\r\npreview:\r\n\r\n<img width=\"253\" alt=\"Capture d\u2019e\u0301cran 2020-05-05 a\u0300 17 39 58\" src=\"https://user-images.githubusercontent.com/5719034/81086040-45110b80-8ef8-11ea-9c05-79c6fe400fc3.png\">\r\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "html_url": "https://github.com/rust-lang/rust/commit/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f64313fdbb215b29cceb843e06d2c1541d9f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f64313fdbb215b29cceb843e06d2c1541d9f56", "html_url": "https://github.com/rust-lang/rust/commit/58f64313fdbb215b29cceb843e06d2c1541d9f56"}, {"sha": "fe52f8f0281c0f56955871863a6e0c14732540f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe52f8f0281c0f56955871863a6e0c14732540f9", "html_url": "https://github.com/rust-lang/rust/commit/fe52f8f0281c0f56955871863a6e0c14732540f9"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "fa8a9d92c9911a30cb31c951d854a7e069962036", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "patch": "@@ -9,6 +9,7 @@ use ra_syntax::{\n };\n \n use crate::FileId;\n+use ast::DocCommentsOwner;\n use std::fmt::Display;\n \n #[derive(Debug)]\n@@ -37,6 +38,7 @@ pub enum RunnableKind {\n     Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n     Bench { test_id: TestId },\n+    DocTest { test_id: TestId },\n     Bin,\n }\n \n@@ -81,6 +83,8 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Run\n             RunnableKind::Test { test_id, attr }\n         } else if fn_def.has_atom_attr(\"bench\") {\n             RunnableKind::Bench { test_id }\n+        } else if has_doc_test(&fn_def) {\n+            RunnableKind::DocTest { test_id }\n         } else {\n             return None;\n         }\n@@ -117,6 +121,10 @@ fn has_test_related_attribute(fn_def: &ast::FnDef) -> bool {\n         .any(|attribute_text| attribute_text.contains(\"test\"))\n }\n \n+fn has_doc_test(fn_def: &ast::FnDef) -> bool {\n+    fn_def.doc_comment_text().map_or(false, |comment| comment.contains(\"```\"))\n+}\n+\n fn runnable_mod(sema: &Semantics<RootDatabase>, module: ast::Module) -> Option<Runnable> {\n     let has_test_function = module\n         .item_list()?\n@@ -194,6 +202,41 @@ mod tests {\n                 );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        fn main() {}\n+\n+        /// ```\n+        /// let x = 5;\n+        /// ```\n+        fn foo() {}\n+        \"#,\n+        );\n+        let runnables = analysis.runnables(pos.file_id).unwrap();\n+        assert_debug_snapshot!(&runnables,\n+        @r###\"\n+        [\n+            Runnable {\n+                range: 1..21,\n+                kind: Bin,\n+            },\n+            Runnable {\n+                range: 22..64,\n+                kind: DocTest {\n+                    test_id: Path(\n+                        \"foo\",\n+                    ),\n+                },\n+            },\n+        ]\n+        \"###\n+                );\n+    }\n+\n     #[test]\n     fn test_runnables_module() {\n         let (analysis, pos) = analysis_and_position("}, {"sha": "5e5a17943d2aee5bc3d2cd5b7cb89132dcaf3629", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "patch": "@@ -27,40 +27,49 @@ impl CargoTargetSpec {\n             RunnableKind::Test { test_id, attr } => {\n                 args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n                     extra_args.push(\"--exact\".to_string());\n                 }\n                 extra_args.push(\"--nocapture\".to_string());\n                 if attr.ignore {\n-                    extra_args.push(\"--ignored\".to_string())\n+                    extra_args.push(\"--ignored\".to_string());\n                 }\n             }\n             RunnableKind::TestMod { path } => {\n                 args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n                 extra_args.push(path.to_string());\n                 extra_args.push(\"--nocapture\".to_string());\n             }\n             RunnableKind::Bench { test_id } => {\n                 args.push(\"bench\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n                 extra_args.push(test_id.to_string());\n                 if let TestId::Path(_) = test_id {\n                     extra_args.push(\"--exact\".to_string());\n                 }\n                 extra_args.push(\"--nocapture\".to_string());\n             }\n+            RunnableKind::DocTest { test_id } => {\n+                args.push(\"test\".to_string());\n+                args.push(\"--doc\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut args, kind);\n+                }\n+                extra_args.push(test_id.to_string());\n+                extra_args.push(\"--nocapture\".to_string());\n+            }\n             RunnableKind::Bin => {\n                 args.push(\"run\".to_string());\n                 if let Some(spec) = spec {\n-                    spec.push_to(&mut args);\n+                    spec.push_to(&mut args, kind);\n                 }\n             }\n         }\n@@ -91,9 +100,14 @@ impl CargoTargetSpec {\n         Ok(res)\n     }\n \n-    pub(crate) fn push_to(self, buf: &mut Vec<String>) {\n+    pub(crate) fn push_to(self, buf: &mut Vec<String>, kind: &RunnableKind) {\n         buf.push(\"--package\".to_string());\n         buf.push(self.package);\n+\n+        // Can't mix --doc with other target flags\n+        if let RunnableKind::DocTest { .. } = kind {\n+            return;\n+        }\n         match self.target_kind {\n             TargetKind::Bin => {\n                 buf.push(\"--bin\".to_string());"}, {"sha": "15e8305f884d52fa492b67859a82d0f808aaa630", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0411ff9e0826fab1aaefc3e5b5072d84ce31d35/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=f0411ff9e0826fab1aaefc3e5b5072d84ce31d35", "patch": "@@ -835,6 +835,7 @@ pub fn handle_code_lens(\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n             RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Test\",\n+            RunnableKind::DocTest { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Doctest\",\n             RunnableKind::Bench { .. } => \"Run Bench\",\n             RunnableKind::Bin => \"Run\",\n         }\n@@ -1018,6 +1019,7 @@ fn to_lsp_runnable(\n         RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n         RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n         RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n+        RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n         RunnableKind::Bin => \"run binary\".to_string(),\n     };\n     Ok(req::Runnable {"}]}