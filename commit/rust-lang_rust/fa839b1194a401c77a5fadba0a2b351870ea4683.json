{"sha": "fa839b1194a401c77a5fadba0a2b351870ea4683", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODM5YjExOTRhNDAxYzc3YTVmYWRiYTBhMmIzNTE4NzBlYTQ2ODM=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-16T20:23:42Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-17T20:09:22Z"}, "message": "Add needs_normalization", "tree": {"sha": "a05c0a570e739c344cec71cb7a7f01282b27861d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05c0a570e739c344cec71cb7a7f01282b27861d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa839b1194a401c77a5fadba0a2b351870ea4683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa839b1194a401c77a5fadba0a2b351870ea4683", "html_url": "https://github.com/rust-lang/rust/commit/fa839b1194a401c77a5fadba0a2b351870ea4683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa839b1194a401c77a5fadba0a2b351870ea4683/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d954a8ee8e76fc69ddc6a3e785a6e986a2e08e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/d954a8ee8e76fc69ddc6a3e785a6e986a2e08e52", "html_url": "https://github.com/rust-lang/rust/commit/d954a8ee8e76fc69ddc6a3e785a6e986a2e08e52"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "d1ab9fa025ed6f5156e4e4fdcef711063971e590", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa839b1194a401c77a5fadba0a2b351870ea4683/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa839b1194a401c77a5fadba0a2b351870ea4683/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fa839b1194a401c77a5fadba0a2b351870ea4683", "patch": "@@ -293,6 +293,18 @@ where\n     result\n }\n \n+pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n+    match reveal {\n+        Reveal::UserFacing => value\n+            .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),\n+        Reveal::All => value.has_type_flags(\n+            ty::TypeFlags::HAS_TY_PROJECTION\n+                | ty::TypeFlags::HAS_TY_OPAQUE\n+                | ty::TypeFlags::HAS_CT_PROJECTION,\n+        ),\n+    }\n+}\n+\n struct AssocTypeNormalizer<'a, 'b, 'tcx> {\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -323,7 +335,11 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n             value\n         );\n \n-        if !value.has_projections() { value } else { value.fold_with(self) }\n+        if !needs_normalization(&value, self.param_env.reveal()) {\n+            value\n+        } else {\n+            value.fold_with(self)\n+        }\n     }\n }\n \n@@ -343,7 +359,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if !ty.has_projections() {\n+        if !needs_normalization(&ty, self.param_env.reveal()) {\n             return ty;\n         }\n         // We don't want to normalize associated types that occur inside of region"}, {"sha": "d65a378b1edec193ecd750f7c23ad6b76ffe6dab", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa839b1194a401c77a5fadba0a2b351870ea4683/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa839b1194a401c77a5fadba0a2b351870ea4683/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=fa839b1194a401c77a5fadba0a2b351870ea4683", "patch": "@@ -6,6 +6,7 @@ use crate::infer::at::At;\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::InferCtxtExt;\n+use crate::traits::project::needs_normalization;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -49,7 +50,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             value,\n             self.param_env,\n         );\n-        if !value.has_projections() {\n+        if !needs_normalization(&value, self.param_env.reveal()) {\n             return Ok(Normalized { value, obligations: vec![] });\n         }\n \n@@ -112,7 +113,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if !ty.has_projections() {\n+        if !needs_normalization(&ty, self.param_env.reveal()) {\n             return ty;\n         }\n "}]}