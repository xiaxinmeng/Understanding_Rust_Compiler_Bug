{"sha": "ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODVhNGQ3MWVhZjczYWQwYjcyOWRiZGJiZjM2MjM2OTVjMmRkNmY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-10T19:20:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T19:20:07Z"}, "message": "Rollup merge of #76559 - lcnr:const-evaluatable, r=oli-obk\n\nadd the `const_evaluatable_checked` feature\n\nImplements a rather small subset of https://github.com/rust-lang/compiler-team/issues/340\n\nUnlike the MCP, this does not try to compare different constant, but instead only adds the constants found in where clauses\nto the predicates of a function. This PR adds the feature gate `const_evaluatable_checked`, without which nothing should change.\n\nr? @oli-obk @eddyb", "tree": {"sha": "7ea5a425cd5b65d9f735a8c670d0d662b8cd3ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea5a425cd5b65d9f735a8c670d0d662b8cd3ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWnxoCRBK7hj4Ov3rIwAAdHIIAI9nYhK/Je5kWp0qSvHdhPz0\njdptbGjJQhqGBKVWSImXYbv3/wszcKODyynYK4XPpFGPXvaXSMIoya8XPd7uygzb\nN8b8juud0zdyd9n8e+JCZ7I5FViAFkW94Vq4zdG7A6QAd0VDM+nvyAsDL4BVfGD6\n2QvKz/qs87J6xPAtwengw/0ybirnFCrhaJdngV9ehQLJj20DLrpeXmRNLP+Na9Fx\nwevrpUvmtDmhIh9NNVQy8SwEdlHkfVL3iIokceZNzqB7RU6tzfZFLrlBuCrR5sz/\nMYWCzsZQttsdyTUsPpK6xjp3xUuhv7PxHdowxzl0j7lx0sFyAkHRt72oM1Sbgo8=\n=pTE5\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ea5a425cd5b65d9f735a8c670d0d662b8cd3ad6\nparent f9df658aad43b3a0328052b5347cd4a8cae8328f\nparent 300b0acb85e41a19b518715147968f177679ebc1\nauthor Tyler Mandry <tmandry@gmail.com> 1599765607 -0700\ncommitter GitHub <noreply@github.com> 1599765607 -0700\n\nRollup merge of #76559 - lcnr:const-evaluatable, r=oli-obk\n\nadd the `const_evaluatable_checked` feature\n\nImplements a rather small subset of https://github.com/rust-lang/compiler-team/issues/340\n\nUnlike the MCP, this does not try to compare different constant, but instead only adds the constants found in where clauses\nto the predicates of a function. This PR adds the feature gate `const_evaluatable_checked`, without which nothing should change.\n\nr? @oli-obk @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "html_url": "https://github.com/rust-lang/rust/commit/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9df658aad43b3a0328052b5347cd4a8cae8328f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9df658aad43b3a0328052b5347cd4a8cae8328f", "html_url": "https://github.com/rust-lang/rust/commit/f9df658aad43b3a0328052b5347cd4a8cae8328f"}, {"sha": "300b0acb85e41a19b518715147968f177679ebc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/300b0acb85e41a19b518715147968f177679ebc1", "html_url": "https://github.com/rust-lang/rust/commit/300b0acb85e41a19b518715147968f177679ebc1"}], "stats": {"total": 154, "additions": 137, "deletions": 17}, "files": [{"sha": "1aeb0bd5ad9aafff2ac80cd9f6f7c6597c355142", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -585,6 +585,9 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n+    /// Allows non trivial generic constants which have to be manually propageted upwards.\n+    (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -600,13 +603,14 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::const_generics,\n     sym::let_chains,\n     sym::raw_dylib,\n+    sym::const_evaluatable_checked,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n     sym::lazy_normalization_consts,\n     sym::specialization,\n ];\n \n /// Some features are not allowed to be used together at the same time, if\n-/// the two are present, produce an error\n+/// the two are present, produce an error.\n pub const INCOMPATIBLE_FEATURES: &[(Symbol, Symbol)] =\n     &[(sym::const_generics, sym::min_const_generics)];"}, {"sha": "407663e57577affefe9243c00389a46861ee339d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -348,6 +348,7 @@ symbols! {\n         const_compare_raw_pointers,\n         const_constructor,\n         const_eval_limit,\n+        const_evaluatable_checked,\n         const_extern_fn,\n         const_fn,\n         const_fn_transmute,"}, {"sha": "fdb87c085b54ef377ba7306c1d4e44a548812087", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -14,6 +14,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n ) -> Result<(), ErrorHandled> {\n+    debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n+    if infcx.tcx.features().const_evaluatable_checked {\n+        // FIXME(const_evaluatable_checked): Actually look into generic constants to\n+        // implement const equality.\n+        for pred in param_env.caller_bounds() {\n+            match pred.skip_binders() {\n+                ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n+                    debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n+                    if b_def == def && b_substs == substs {\n+                        debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n+                        return Ok(());\n+                    }\n+                }\n+                _ => {} // don't care\n+            }\n+        }\n+    }\n+\n     let future_compat_lint = || {\n         if let Some(local_def_id) = def.did.as_local() {\n             infcx.tcx.struct_span_lint_hir(\n@@ -38,24 +56,23 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // See #74595 for more details about this.\n     let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n \n-    let def_kind = infcx.tcx.def_kind(def.did);\n-    match def_kind {\n-        DefKind::AnonConst => {\n-            let mir_body = if let Some(def) = def.as_const_arg() {\n-                infcx.tcx.optimized_mir_of_const_arg(def)\n-            } else {\n-                infcx.tcx.optimized_mir(def.did)\n-            };\n-            if mir_body.is_polymorphic && concrete.is_ok() {\n-                future_compat_lint();\n-            }\n-        }\n-        _ => {\n-            if substs.has_param_types_or_consts() && concrete.is_ok() {\n-                future_compat_lint();\n+    if concrete.is_ok() && substs.has_param_types_or_consts() {\n+        match infcx.tcx.def_kind(def.did) {\n+            DefKind::AnonConst => {\n+                let mir_body = if let Some(def) = def.as_const_arg() {\n+                    infcx.tcx.optimized_mir_of_const_arg(def)\n+                } else {\n+                    infcx.tcx.optimized_mir(def.did)\n+                };\n+\n+                if mir_body.is_polymorphic {\n+                    future_compat_lint();\n+                }\n             }\n+            _ => future_compat_lint(),\n         }\n     }\n \n+    debug!(?concrete, \"is_const_evaluatable\");\n     concrete.map(drop)\n }"}, {"sha": "7d6b3df03b06496fc073bd471935ad3545894f84", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -37,11 +37,12 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, ToPolyTraitRef, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n+use rustc_middle::ty::{TypeFoldable, TypeVisitor};\n use rustc_session::config::SanitizerSet;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -50,6 +51,8 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n \n+use smallvec::SmallVec;\n+\n mod type_of;\n \n struct OnlySelfBounds(bool);\n@@ -1672,10 +1675,46 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\n                 .alloc_from_iter(result.predicates.iter().chain(inferred_outlives).copied());\n         }\n     }\n+\n+    if tcx.features().const_evaluatable_checked {\n+        let const_evaluatable = const_evaluatable_predicates_of(tcx, def_id, &result);\n+        result.predicates =\n+            tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(const_evaluatable));\n+    }\n+\n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n     result\n }\n \n+pub fn const_evaluatable_predicates_of<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    predicates: &ty::GenericPredicates<'tcx>,\n+) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> {\n+    #[derive(Default)]\n+    struct ConstCollector<'tcx> {\n+        ct: SmallVec<[(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>); 4]>,\n+    }\n+\n+    impl<'tcx> TypeVisitor<'tcx> for ConstCollector<'tcx> {\n+        fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> bool {\n+            if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n+                self.ct.push((def, substs));\n+            }\n+            false\n+        }\n+    }\n+\n+    let mut collector = ConstCollector::default();\n+    for (pred, _span) in predicates.predicates.iter() {\n+        pred.visit_with(&mut collector);\n+    }\n+    warn!(\"const_evaluatable_predicates_of({:?}) = {:?}\", def_id, collector.ct);\n+    collector.ct.into_iter().map(move |(def_id, subst)| {\n+        (ty::PredicateAtom::ConstEvaluatable(def_id, subst).to_predicate(tcx), DUMMY_SP)\n+    })\n+}\n+\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits."}, {"sha": "941bd5e9e5d0a984e894258e5b427ba210f1d424", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1];\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+    //~^ ERROR constant expression depends\n+    Default::default()\n+}\n+\n+fn main() {\n+    let x = test::<33>();\n+    assert_eq!(x, [0; 32]);\n+}"}, {"sha": "6e4a22a38b17c63be5f4871e945081fd3bac5e89", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.stderr?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/feature-gate-const_evaluatable_checked.rs:6:30\n+   |\n+LL | fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+   |                              ^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "a7ead78b97bae186d96452d1cc41fd03c665559d", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1];\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+    Default::default()\n+}\n+\n+fn main() {\n+    let x = test::<33>();\n+    assert_eq!(x, [0; 32]);\n+}"}, {"sha": "1edf1885dd28186325c928847f77a4a812067799", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Arr<const N: usize> = [u8; N - 1]; //~ ERROR evaluation of constant\n+\n+fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n+    todo!()\n+}\n+\n+fn main() {\n+    test::<0>();\n+}"}, {"sha": "1ac5e1d95537a42bb55598a669f002e02f691499", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.stderr?ref=ac85a4d71eaf73ad0b729dbdbbf3623695c2dd6f", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/simple_fail.rs:4:33\n+   |\n+LL | type Arr<const N: usize> = [u8; N - 1];\n+   |                                 ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}