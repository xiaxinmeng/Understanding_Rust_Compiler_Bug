{"sha": "294ef15adbf6b4778a8eb638b31a48744914ec0a", "node_id": "C_kwDOAAsO6NoAKDI5NGVmMTVhZGJmNmI0Nzc4YThlYjYzOGIzMWE0ODc0NDkxNGVjMGE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T01:26:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T02:19:56Z"}, "message": "more int2ptr cast tests, and fix casting of addresses inside dead allocations", "tree": {"sha": "07f09a5145e938f635c62970199492b85be4f125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f09a5145e938f635c62970199492b85be4f125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294ef15adbf6b4778a8eb638b31a48744914ec0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294ef15adbf6b4778a8eb638b31a48744914ec0a", "html_url": "https://github.com/rust-lang/rust/commit/294ef15adbf6b4778a8eb638b31a48744914ec0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294ef15adbf6b4778a8eb638b31a48744914ec0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d425daebe539b1a48731faecf1d1ba5287aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d425daebe539b1a48731faecf1d1ba5287aa72", "html_url": "https://github.com/rust-lang/rust/commit/13d425daebe539b1a48731faecf1d1ba5287aa72"}], "stats": {"total": 470, "additions": 123, "deletions": 347}, "files": [{"sha": "cb0d6517b94265d3227d25a73b9d1baca24424f0", "filename": "src/intptrcast.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -90,8 +90,16 @@ impl<'mir, 'tcx> GlobalStateInner {\n             }\n         }?;\n \n-        // We only use this provenance if it has been exposed.\n-        if global_state.exposed.contains(&alloc_id) { Some(alloc_id) } else { None }\n+        // We only use this provenance if it has been exposed, *and* is still live.\n+        if global_state.exposed.contains(&alloc_id) {\n+            // FIXME: this catches `InterpError`, which we should not usually do.\n+            // We might need a proper fallible API from `memory.rs` to avoid this though.\n+            if let Ok(_) = ecx.get_alloc_size_and_align(alloc_id, AllocCheck::Live) {\n+                return Some(alloc_id);\n+            }\n+        }\n+\n+        None\n     }\n \n     pub fn expose_ptr(ecx: &mut MiriEvalContext<'mir, 'tcx>, alloc_id: AllocId, sb: SbTag) {"}, {"sha": "9e24d32a33310c8bfe25ae872af69e8c0505a341", "filename": "tests/fail/backtrace/bad-backtrace-flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -4,6 +4,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_get_backtrace(2, 0 as *mut _); //~ ERROR  unsupported operation: unknown `miri_get_backtrace` flags 2\n+        miri_get_backtrace(2, std::ptr::null_mut()); //~ ERROR  unsupported operation: unknown `miri_get_backtrace` flags 2\n     }\n }"}, {"sha": "6d62ffc00e51c757d25305172d82da3c84199603", "filename": "tests/fail/backtrace/bad-backtrace-flags.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,29 +1,14 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/bad-backtrace-flags.rs:LL:CC\n-   |\n-LL |         miri_get_backtrace(2, 0 as *mut _);\n-   |                               ^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/bad-backtrace-flags.rs:LL:CC\n-\n error: unsupported operation: unknown `miri_get_backtrace` flags 2\n   --> $DIR/bad-backtrace-flags.rs:LL:CC\n    |\n-LL |         miri_get_backtrace(2, 0 as *mut _);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_get_backtrace` flags 2\n+LL |         miri_get_backtrace(2, std::ptr::null_mut());\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_get_backtrace` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n            \n    = note: inside `main` at $DIR/bad-backtrace-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "73d3561445d575efe2641b3f1490a6152453a654", "filename": "tests/fail/backtrace/bad-backtrace-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -4,6 +4,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_resolve_frame(0 as *mut _, 0); //~ ERROR null pointer is not a valid pointer for this operation\n+        miri_resolve_frame(std::ptr::null_mut(), 0); //~ ERROR null pointer is not a valid pointer for this operation\n     }\n }"}, {"sha": "6911db9de02fd941ac71c12d3509620070f0f8d9", "filename": "tests/fail/backtrace/bad-backtrace-ptr.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,23 +1,8 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/bad-backtrace-ptr.rs:LL:CC\n-   |\n-LL |         miri_resolve_frame(0 as *mut _, 0);\n-   |                            ^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/bad-backtrace-ptr.rs:LL:CC\n-\n error: Undefined Behavior: null pointer is not a valid pointer for this operation\n   --> $DIR/bad-backtrace-ptr.rs:LL:CC\n    |\n-LL |         miri_resolve_frame(0 as *mut _, 0);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+LL |         miri_resolve_frame(std::ptr::null_mut(), 0);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n@@ -26,5 +11,5 @@ LL |         miri_resolve_frame(0 as *mut _, 0);\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "2d4d6195029d146c6786ac7b76ad63d8f9449f02", "filename": "tests/fail/backtrace/bad-backtrace-resolve-flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -15,7 +15,7 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        let mut buf = vec![0 as *mut _; miri_backtrace_size(0)];\n+        let mut buf = vec![std::ptr::null_mut(); miri_backtrace_size(0)];\n \n         miri_get_backtrace(1, buf.as_mut_ptr());\n "}, {"sha": "49495651dfec4656ba9f3e264682dae531f6bce9", "filename": "tests/fail/backtrace/bad-backtrace-resolve-flags.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n-   |\n-LL |         let mut buf = vec![0 as *mut _; miri_backtrace_size(0)];\n-   |                            ^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n-\n error: unsupported operation: unknown `miri_resolve_frame` flags 2\n   --> $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n    |\n@@ -25,5 +10,5 @@ LL |         miri_resolve_frame(buf[0], 2);\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "6cea1fec1b241f2ea007528763f5e582ba3d7778", "filename": "tests/fail/backtrace/bad-backtrace-resolve-names-flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -6,11 +6,11 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        let mut buf = vec![0 as *mut _; miri_backtrace_size(0)];\n+        let mut buf = vec![std::ptr::null_mut(); miri_backtrace_size(0)];\n \n         miri_get_backtrace(1, buf.as_mut_ptr());\n \n         // miri_resolve_frame_names will error from an invalid backtrace before it will from invalid flags\n-        miri_resolve_frame_names(buf[0], 2, 0 as *mut _, 0 as *mut _); //~ ERROR  unsupported operation: unknown `miri_resolve_frame_names` flags 2\n+        miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::null_mut()); //~ ERROR  unsupported operation: unknown `miri_resolve_frame_names` flags 2\n     }\n }"}, {"sha": "aa470cb9de054e4b966146bdd7314fa0742b85e1", "filename": "tests/fail/backtrace/bad-backtrace-resolve-names-flags.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,29 +1,14 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n-   |\n-LL |         let mut buf = vec![0 as *mut _; miri_backtrace_size(0)];\n-   |                            ^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n-\n error: unsupported operation: unknown `miri_resolve_frame_names` flags 2\n   --> $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n    |\n-LL | ...   miri_resolve_frame_names(buf[0], 2, 0 as *mut _, 0 as *mut _);\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame_names` flags 2\n+LL | ...   miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::null_mut());\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame_names` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n            \n    = note: inside `main` at $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "e6031b5e4c0c5c7b583065360f7cff35f8aa8cad", "filename": "tests/fail/concurrency/thread_local_static_dealloc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -7,9 +7,12 @@\n #[thread_local]\n static mut TLS: u8 = 0;\n \n+struct SendRaw(*const u8);\n+unsafe impl Send for SendRaw {}\n+\n fn main() {\n     unsafe {\n-        let dangling_ptr = std::thread::spawn(|| &TLS as *const u8 as usize).join().unwrap();\n-        let _val = *(dangling_ptr as *const u8); //~ ERROR dereferenced after this allocation got freed\n+        let dangling_ptr = std::thread::spawn(|| SendRaw(&TLS as *const u8)).join().unwrap();\n+        let _val = *dangling_ptr.0; //~ ERROR dereferenced after this allocation got freed\n     }\n }"}, {"sha": "d54c569de36e6432c5e9f2976cbe40c080c3b817", "filename": "tests/fail/concurrency/thread_local_static_dealloc.stderr", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,23 +1,8 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/thread_local_static_dealloc.rs:LL:CC\n-   |\n-LL |         let _val = *(dangling_ptr as *const u8);\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/thread_local_static_dealloc.rs:LL:CC\n-\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n   --> $DIR/thread_local_static_dealloc.rs:LL:CC\n    |\n-LL |         let _val = *(dangling_ptr as *const u8);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+LL |         let _val = *dangling_ptr.0;\n+   |                    ^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n@@ -26,5 +11,5 @@ LL |         let _val = *(dangling_ptr as *const u8);\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "cb2bbec8bcf01d0f0c3182ff7fda3bea71e4c101", "filename": "tests/fail/dangling_pointers/deref-invalid-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation.\n-// compile-flags: -Zmiri-disable-validation\n+// compile-flags: -Zmiri-disable-validation -Zmiri-permissive-provenance\n \n fn main() {\n     let x = 16usize as *const u32;"}, {"sha": "f4361d9fefa95fef2c17b2ac70627b37200f26d8", "filename": "tests/fail/dangling_pointers/deref-invalid-ptr.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/deref-invalid-ptr.rs:LL:CC\n-   |\n-LL |     let x = 16usize as *const u32;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/deref-invalid-ptr.rs:LL:CC\n-\n error: Undefined Behavior: dereferencing pointer failed: 0x10 is not a valid pointer\n   --> $DIR/deref-invalid-ptr.rs:LL:CC\n    |\n@@ -26,5 +11,5 @@ LL |     let _y = unsafe { &*x as *const u32 };\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "370162142de975fd82b14c374a618534441ca19e", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation, but some MIR opts mask the error\n-// compile-flags: -Zmiri-disable-validation -Zmir-opt-level=0\n+// compile-flags: -Zmiri-disable-validation -Zmir-opt-level=0 -Zmiri-permissive-provenance\n \n static mut LEAK: usize = 0;\n \n@@ -10,7 +10,7 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR dereferenced after this allocation got freed\n+    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR is not a valid pointer\n }\n \n fn main() {\n@@ -21,6 +21,6 @@ fn main() {\n         _y = x;\n     }\n     // Now we use a pointer to `x` which is no longer in scope, and thus dead (even though the\n-    // `main` stack frame still exists).\n+    // `main` stack frame still exists). We even try going through a `usize` for extra sneakiness!\n     evil();\n }"}, {"sha": "d6030643bfaa1f8bd55cf50ee63f3e5af2855dc4", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,28 +1,8 @@\n-warning: pointer-to-integer cast\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n   --> $DIR/storage_dead_dangling.rs:LL:CC\n    |\n LL |     unsafe { &mut *(LEAK as *mut i32) };\n-   |                    ^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `evil` at $DIR/storage_dead_dangling.rs:LL:CC\n-note: inside `main` at $DIR/storage_dead_dangling.rs:LL:CC\n-  --> $DIR/storage_dead_dangling.rs:LL:CC\n-   |\n-LL |     evil();\n-   |     ^^^^^^\n-\n-error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n-  --> $DIR/storage_dead_dangling.rs:LL:CC\n-   |\n-LL |     unsafe { &mut *(LEAK as *mut i32) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^ pointer to ALLOC was dereferenced after this allocation got freed\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n@@ -36,5 +16,5 @@ LL |     evil();\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "7c9f5281fbbbe349fbfe12cdb2f77893fe728270", "filename": "tests/fail/dangling_pointers/wild_pointer_deref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-permissive-provenance\n+\n fn main() {\n     let p = 44 as *const i32;\n     let x = unsafe { *p }; //~ ERROR is not a valid pointer"}, {"sha": "b20f310da083be1fc55877ac0ffff209907d4c9d", "filename": "tests/fail/dangling_pointers/wild_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/wild_pointer_deref.rs:LL:CC\n-   |\n-LL |     let p = 44 as *const i32;\n-   |             ^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/wild_pointer_deref.rs:LL:CC\n-\n error: Undefined Behavior: dereferencing pointer failed: 0x2c is not a valid pointer\n   --> $DIR/wild_pointer_deref.rs:LL:CC\n    |\n@@ -26,5 +11,5 @@ LL |     let x = unsafe { *p };\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "ca38f39d2515777371ab0a40dc7da5c517aa4d42", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: pointer arithmetic failed: null pointer is not a valid pointer\n+// compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let x = 0 as *mut i32;"}, {"sha": "741314ea8a680688d49abd9fb644fdf7d5bcd411", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/ptr_offset_0_plus_0.rs:LL:CC\n-   |\n-LL |     let x = 0 as *mut i32;\n-   |             ^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n-\n error: Undefined Behavior: pointer arithmetic failed: null pointer is not a valid pointer\n   --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n    |\n@@ -31,5 +16,5 @@ LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "809938d999731fa63bc127244ccfdafdec22c263", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: is not a valid pointer\n+// compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "e6b8f102f3946ebad70cd0eb986ff830b9bb6984", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/ptr_offset_int_plus_int.rs:LL:CC\n-   |\n-LL |         let _val = (1 as *mut u8).offset(1);\n-   |                    ^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n-\n error: Undefined Behavior: pointer arithmetic failed: 0x1 is not a valid pointer\n   --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n    |\n@@ -31,5 +16,5 @@ LL |         let _val = (1 as *mut u8).offset(1);\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "903f89ff70ec48301dde5c87972b55dc7819b29e", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: is not a valid pointer\n+// compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "f88ad758d438de635d12ff58cb582068e956873a", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n-   |\n-LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n-   |                    ^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n-\n error: Undefined Behavior: pointer arithmetic failed: 0x1 is not a valid pointer\n   --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n    |\n@@ -31,5 +16,5 @@ LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "12f3562011a81db708631f5defe29c86f9397968", "filename": "tests/fail/provenance/permissive_provenance_transmute.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13d425daebe539b1a48731faecf1d1ba5287aa72/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13d425daebe539b1a48731faecf1d1ba5287aa72/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr?ref=13d425daebe539b1a48731faecf1d1ba5287aa72", "patch": "@@ -1,20 +0,0 @@\n-error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n-  --> $DIR/permissive_provenance_transmute.rs:LL:CC\n-   |\n-LL |         let _val = *left_ptr;\n-   |                    ^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n-   = note: inside `deref` at $DIR/permissive_provenance_transmute.rs:LL:CC\n-note: inside `main` at $DIR/permissive_provenance_transmute.rs:LL:CC\n-  --> $DIR/permissive_provenance_transmute.rs:LL:CC\n-   |\n-LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "28e6ba6230803423ef6b459f9d1e0c8d6aa22418", "filename": "tests/fail/provenance/provenance_transmute.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "previous_filename": "tests/fail/provenance/permissive_provenance_transmute.rs"}, {"sha": "9cbec077e42c06156d8bf3dcda505b5b42887be0", "filename": "tests/fail/provenance/provenance_transmute.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,15 +1,15 @@\n error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n-  --> $DIR/strict_provenance_transmute.rs:LL:CC\n+  --> $DIR/provenance_transmute.rs:LL:CC\n    |\n LL |         let _val = *left_ptr;\n    |                    ^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n-   = note: inside `deref` at $DIR/strict_provenance_transmute.rs:LL:CC\n-note: inside `main` at $DIR/strict_provenance_transmute.rs:LL:CC\n-  --> $DIR/strict_provenance_transmute.rs:LL:CC\n+   = note: inside `deref` at $DIR/provenance_transmute.rs:LL:CC\n+note: inside `main` at $DIR/provenance_transmute.rs:LL:CC\n+  --> $DIR/provenance_transmute.rs:LL:CC\n    |\n LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/fail/provenance/strict_provenance_transmute.stderr"}, {"sha": "8b2b053bdb59140e43ca88f2cf18e3d53945dbcb", "filename": "tests/fail/provenance/strict_provenance_cast.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Zmiri-strict-provenance\n+\n+fn main() {\n+    let addr = &0 as *const i32 as usize;\n+    let _ptr = addr as *const i32; //~ ERROR integer-to-pointer casts and `from_exposed_addr` are not supported\n+}"}, {"sha": "32a39b81d9d7fb054f2e43d6915618106abf6d96", "filename": "tests/fail/provenance/strict_provenance_cast.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: integer-to-pointer casts and `from_exposed_addr` are not supported with `-Zmiri-strict-provenance`; use `with_addr` instead\n+  --> $DIR/strict_provenance_cast.rs:LL:CC\n+   |\n+LL |     let _ptr = addr as *const i32;\n+   |                ^^^^^^^^^^^^^^^^^^ integer-to-pointer casts and `from_exposed_addr` are not supported with `-Zmiri-strict-provenance`; use `with_addr` instead\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/strict_provenance_cast.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "12a141e9ddfee5027093f931927e3da9c0308700", "filename": "tests/fail/provenance/strict_provenance_transmute.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/13d425daebe539b1a48731faecf1d1ba5287aa72/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d425daebe539b1a48731faecf1d1ba5287aa72/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs?ref=13d425daebe539b1a48731faecf1d1ba5287aa72", "patch": "@@ -1,27 +0,0 @@\n-// compile-flags: -Zmiri-strict-provenance\n-#![feature(strict_provenance)]\n-\n-use std::mem;\n-\n-// This is the example from\n-// <https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431>.\n-\n-unsafe fn deref(left: *const u8, right: *const u8) {\n-    let left_int: usize = mem::transmute(left);\n-    let right_int: usize = mem::transmute(right);\n-    if left_int == right_int {\n-        // The compiler is allowed to replace `left_int` by `right_int` here...\n-        let left_ptr: *const u8 = mem::transmute(left_int);\n-        // ...which however means here it could be dereferencing the wrong pointer.\n-        let _val = *left_ptr; //~ERROR dereferencing pointer failed\n-    }\n-}\n-\n-fn main() {\n-    let ptr1 = &0u8 as *const u8;\n-    let ptr2 = &1u8 as *const u8;\n-    unsafe {\n-        // Two pointers with the same address but different provenance.\n-        deref(ptr1, ptr2.with_addr(ptr1.addr()));\n-    }\n-}"}, {"sha": "c994f6c3818a975f75cc2c7c47f345802be2f69b", "filename": "tests/fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-permissive-provenance\n+\n // Make sure we cannot use raw ptrs to access a local that\n // we took the direct address of.\n fn main() {"}, {"sha": "464296651c5e6c17cb06d76a4a18ff5e41befdfd", "filename": "tests/fail/stacked_borrows/unescaped_local.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/unescaped_local.rs:LL:CC\n-   |\n-LL |     let raw = &mut x as *mut i32 as usize as *mut i32;\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/unescaped_local.rs:LL:CC\n-\n error: Undefined Behavior: attempting a write access using <wildcard> at ALLOC[0x0], but no exposed tags have suitable permission in the borrow stack for this location\n   --> $DIR/unescaped_local.rs:LL:CC\n    |\n@@ -29,5 +14,5 @@ LL |         *raw = 13;\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "dea9335ab751ab258b7f15e13c92fa074901d96c", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-symbolic-alignment-check\n+// compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance\n // With the symbolic alignment check, even with intptrcast and without\n // validation, we want to be *sure* to catch bugs that arise from pointers being\n // insufficiently aligned. The only way to achieve that is not not let programs"}, {"sha": "347486187e1b95063b8606ed8fea743c69fa4882", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/intptrcast_alignment_check.rs:LL:CC\n-   |\n-LL |     let u16_ptr = base_addr_aligned as *mut u16;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/intptrcast_alignment_check.rs:LL:CC\n-\n error: Undefined Behavior: accessing memory with alignment ALIGN, but alignment ALIGN is required\n   --> $DIR/intptrcast_alignment_check.rs:LL:CC\n    |\n@@ -26,5 +11,5 @@ LL |     unsafe { *u16_ptr = 2 };\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "eb5774fe7995680ad1d3207935e6d8ca701ea6b7", "filename": "tests/fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-permissive-provenance\n+\n fn main() {\n     // Cast a function pointer such that on a call, the argument gets transmuted\n     // from raw ptr to reference. This is ABI-compatible, so it's not the call that"}, {"sha": "d048377a7793d3db44764cbe8ded4130f402bbdd", "filename": "tests/fail/validity/cast_fn_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,18 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/cast_fn_ptr1.rs:LL:CC\n-   |\n-LL |     g(0usize as *const i32)\n-   |       ^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main` at $DIR/cast_fn_ptr1.rs:LL:CC\n-\n error: Undefined Behavior: type validation failed: encountered a null reference\n   --> $DIR/cast_fn_ptr1.rs:LL:CC\n    |\n@@ -26,5 +11,5 @@ LL |     g(0usize as *const i32)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "1cf4ca7d19d8ec8fa3934c5e41294bc130bba49c", "filename": "tests/fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-permissive-provenance\n+\n fn main() {\n     // Cast a function pointer such that when returning, the return value gets transmuted\n     // from raw ptr to reference. This is ABI-compatible, so it's not the call that"}, {"sha": "10b9b9b8602b63f046b3ce3165ee8f08b1ddc25a", "filename": "tests/fail/validity/cast_fn_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.stderr?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,23 +1,3 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/cast_fn_ptr2.rs:LL:CC\n-   |\n-LL |         0usize as *const i32\n-   |         ^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `main::f` at $DIR/cast_fn_ptr2.rs:LL:CC\n-note: inside `main` at $DIR/cast_fn_ptr2.rs:LL:CC\n-  --> $DIR/cast_fn_ptr2.rs:LL:CC\n-   |\n-LL |     let _x = g();\n-   |              ^^^\n-\n error: Undefined Behavior: type validation failed: encountered a null reference\n   --> $DIR/cast_fn_ptr2.rs:LL:CC\n    |\n@@ -31,5 +11,5 @@ LL |     let _x = g();\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "b3483a5b43800e4bd2b87b587608bcb31ef0a586", "filename": "tests/pass/adjacent-allocs.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Fpass%2Fadjacent-allocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Fpass%2Fadjacent-allocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fadjacent-allocs.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,9 +1,9 @@\n // compile-flags: -Zmiri-permissive-provenance\n \n-fn main() {\n+fn test1() {\n     // The slack between allocations is random.\n     // Loop a few times to hit the zero-slack case.\n-    for _ in 0..1024 {\n+    for _ in 0..512 {\n         let n = 0u64;\n         let ptr: *const u64 = &n;\n \n@@ -22,3 +22,26 @@ fn main() {\n         unsafe { *zst }\n     }\n }\n+\n+fn test2() {\n+    fn foo() -> u64 {\n+        0\n+    }\n+\n+    for _ in 0..512 {\n+        let n = 0u64;\n+        let ptr: *const u64 = &n;\n+        foo();\n+        let iptr = ptr as usize;\n+        unsafe {\n+            let start = &*std::ptr::slice_from_raw_parts(iptr as *const (), 1);\n+            let end = &*std::ptr::slice_from_raw_parts((iptr + 8) as *const (), 1);\n+            assert_eq!(start.len(), end.len());\n+        }\n+    }\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+}"}, {"sha": "f412541bde17add05ca5cfde1d144ece8a87c322", "filename": "tests/pass/align.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Fpass%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Fpass%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Falign.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-permissive-provenance\n+\n /// This manually makes sure that we have a pointer with the proper alignment.\n fn manual_alignment() {\n     let x = &mut [0u8; 3];"}, {"sha": "9a15ec2cda6cd26113f881ba39a277a0761b993e", "filename": "tests/pass/align.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13d425daebe539b1a48731faecf1d1ba5287aa72/tests%2Fpass%2Falign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13d425daebe539b1a48731faecf1d1ba5287aa72/tests%2Fpass%2Falign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Falign.stderr?ref=13d425daebe539b1a48731faecf1d1ba5287aa72", "patch": "@@ -1,20 +0,0 @@\n-warning: pointer-to-integer cast\n-  --> $DIR/align.rs:LL:CC\n-   |\n-LL |     let u16_ptr = base_addr_aligned as *mut u16;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer-to-integer cast\n-   |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n-           \n-   = note: inside `manual_alignment` at $DIR/align.rs:LL:CC\n-note: inside `main` at $DIR/align.rs:LL:CC\n-  --> $DIR/align.rs:LL:CC\n-   |\n-LL |         manual_alignment();\n-   |         ^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "2417a83493bef7ad13e1603b6a0338971d8da949", "filename": "tests/pass/intptrcast.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Fpass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294ef15adbf6b4778a8eb638b31a48744914ec0a/tests%2Fpass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintptrcast.rs?ref=294ef15adbf6b4778a8eb638b31a48744914ec0a", "patch": "@@ -90,6 +90,16 @@ fn ptr_eq_integer() {\n     assert!(x != 64 as *const i32);\n }\n \n+fn zst_deref_of_dangling() {\n+    let b = Box::new(0);\n+    let addr = &*b as *const _ as usize;\n+    drop(b);\n+    // Now if we cast `addr` to a ptr it might pick up the dangling provenance.\n+    // But if we only do a ZST deref there is no UB here!\n+    let zst = addr as *const ();\n+    let _val = unsafe { *zst };\n+}\n+\n fn main() {\n     cast();\n     cast_dangling();\n@@ -101,4 +111,5 @@ fn main() {\n     ptr_eq_out_of_bounds();\n     ptr_eq_out_of_bounds_null();\n     ptr_eq_integer();\n+    zst_deref_of_dangling();\n }"}]}