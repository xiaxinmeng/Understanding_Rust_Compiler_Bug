{"sha": "05275dafaaa602fe4a5d275ef724ced39d30465f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Mjc1ZGFmYWFhNjAyZmU0YTVkMjc1ZWY3MjRjZWQzOWQzMDQ2NWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-15T14:17:18Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-16T21:37:11Z"}, "message": "Remove unwanted auto-linking and update", "tree": {"sha": "22f3b39d398a8a20a005d66ac6875260ab1adec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22f3b39d398a8a20a005d66ac6875260ab1adec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05275dafaaa602fe4a5d275ef724ced39d30465f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05275dafaaa602fe4a5d275ef724ced39d30465f", "html_url": "https://github.com/rust-lang/rust/commit/05275dafaaa602fe4a5d275ef724ced39d30465f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05275dafaaa602fe4a5d275ef724ced39d30465f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ed2abed7bfb432168eb33492af71ebb16724d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ed2abed7bfb432168eb33492af71ebb16724d9", "html_url": "https://github.com/rust-lang/rust/commit/a3ed2abed7bfb432168eb33492af71ebb16724d9"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "6a77de2c9868dd68e160682895dbdf34d73dbe07", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -998,7 +998,7 @@ pub trait Iterator {\n     /// an extra layer of indirection. `flat_map()` will remove this extra layer\n     /// on its own.\n     ///\n-    /// You can think of [`flat_map(f)`][flat_map] as the semantic equivalent\n+    /// You can think of `flat_map(f)` as the semantic equivalent\n     /// of [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n     ///\n     /// Another way of thinking about `flat_map()`: [`map`]'s closure returns"}, {"sha": "464d57a270241e7e639d9ae0a90c324bf5e50ab1", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -258,7 +258,7 @@ pub struct CharSearcher<'a> {\n \n     /// `finger` is the current byte index of the forward search.\n     /// Imagine that it exists before the byte at its index, i.e.\n-    /// haystack[finger] is the first byte of the slice we must inspect during\n+    /// `haystack[finger]` is the first byte of the slice we must inspect during\n     /// forward searching\n     finger: usize,\n     /// `finger_back` is the current byte index of the reverse search."}, {"sha": "310fcbcfcb374ac5cbbbc3c728ad34c5b18bfa71", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -1550,7 +1550,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Returns the type of ty[i]\n+    /// Returns the type of `ty[i]`.\n     pub fn builtin_index(&self) -> Option<Ty<'tcx>> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => Some(ty),"}, {"sha": "4850ed0c5be054fac6cd5bfe4771a7520fab1430", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -61,7 +61,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// # Conversions\n ///\n /// See the [module's toplevel documentation about conversions][conversions] for a discussion on\n-/// the traits which `OsString` implements for conversions from/to native representations.\n+/// the traits which `OsString` implements for [conversions] from/to native representations.\n ///\n /// [`OsStr`]: struct.OsStr.html\n /// [`&OsStr`]: struct.OsStr.html\n@@ -74,6 +74,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// [`new`]: #method.new\n /// [`push`]: #method.push\n /// [`as_os_str`]: #method.as_os_str\n+/// [conversions]: index.html#conversions\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsString {\n@@ -89,7 +90,7 @@ pub struct OsString {\n /// references; the latter are owned strings.\n ///\n /// See the [module's toplevel documentation about conversions][conversions] for a discussion on\n-/// the traits which `OsStr` implements for conversions from/to native representations.\n+/// the traits which `OsStr` implements for [conversions] from/to native representations.\n ///\n /// [`OsString`]: struct.OsString.html\n /// [`&str`]: ../primitive.str.html"}, {"sha": "6902ec82047d73094259a93eccd16f401cebe179", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -787,13 +787,13 @@ pub mod builtin {\n     }\n }\n \n-/// A macro for defining #[cfg] if-else statements.\n+/// A macro for defining `#[cfg]` if-else statements.\n ///\n /// This is similar to the `if/elif` C preprocessor macro by allowing definition\n /// of a cascade of `#[cfg]` cases, emitting the implementation which matches\n /// first.\n ///\n-/// This allows you to conveniently provide a long list #[cfg]'d blocks of code\n+/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n /// without having to rewrite each clause multiple times.\n macro_rules! cfg_if {\n     ($("}, {"sha": "5e96b5ce6733c8d60631458755b37ac4e6ddd32e", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Machinery for hygienic macros, inspired by the MTWT[1] paper.\n+//! Machinery for hygienic macros, inspired by the `MTWT[1]` paper.\n //!\n-//! [1] Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n+//! `[1]` Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n //! *Macros that work together: Compile-time bindings, partial expansion,\n //! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n //! DOI=10.1017/S0956796812000093 <http://dx.doi.org/10.1017/S0956796812000093>"}, {"sha": "a962d5fc4153740e377dd50243969c75543d0562", "filename": "src/libunwind/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibunwind%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Flibunwind%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fmacros.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// A macro for defining #[cfg] if-else statements.\n+/// A macro for defining `#[cfg]` if-else statements.\n ///\n /// This is similar to the `if/elif` C preprocessor macro by allowing definition\n /// of a cascade of `#[cfg]` cases, emitting the implementation which matches\n /// first.\n ///\n-/// This allows you to conveniently provide a long list #[cfg]'d blocks of code\n+/// This allows you to conveniently provide a long list `#[cfg]`'d blocks of code\n /// without having to rewrite each clause multiple times.\n macro_rules! cfg_if {\n     ($("}, {"sha": "ecd8a3390b75316cd47561651694b48acc78f94b", "filename": "src/test/run-pass/issue-16819.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Ftest%2Frun-pass%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16819.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//`#[cfg]` on struct field permits empty unusable struct\n+// `#[cfg]` on struct field permits empty unusable struct\n \n struct S {\n     #[cfg(untrue)]"}, {"sha": "2a00d31e3d71590c735cfacd3f20ccc5e1a311f5", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05275dafaaa602fe4a5d275ef724ced39d30465f/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=05275dafaaa602fe4a5d275ef724ced39d30465f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// must-compile-successfully\n+// compile-pass\n \n //! Test with [Foo::baz], [Bar::foo], [Uniooon::X]\n "}]}