{"sha": "d464169beb132f44be20a8c1c78c8a69aa11fc1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjQxNjliZWIxMzJmNDRiZTIwYThjMWM3OGM4YTY5YWExMWZjMWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-18T19:05:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-18T19:12:19Z"}, "message": "Rustup to rustc 1.44.0-nightly (7ceebd98c 2020-03-17)", "tree": {"sha": "c23a57f269e93f78cd148ec0a3cad94dee0eb752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c23a57f269e93f78cd148ec0a3cad94dee0eb752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d464169beb132f44be20a8c1c78c8a69aa11fc1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d464169beb132f44be20a8c1c78c8a69aa11fc1d", "html_url": "https://github.com/rust-lang/rust/commit/d464169beb132f44be20a8c1c78c8a69aa11fc1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d464169beb132f44be20a8c1c78c8a69aa11fc1d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992fae08c497d4f7af35cfa3b94a2036df3cc868", "url": "https://api.github.com/repos/rust-lang/rust/commits/992fae08c497d4f7af35cfa3b94a2036df3cc868", "html_url": "https://github.com/rust-lang/rust/commit/992fae08c497d4f7af35cfa3b94a2036df3cc868"}], "stats": {"total": 75, "additions": 1, "deletions": 74}, "files": [{"sha": "8abb72dc786966514904f620508dbb48c86997f6", "filename": "example/mini_core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d464169beb132f44be20a8c1c78c8a69aa11fc1d/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464169beb132f44be20a8c1c78c8a69aa11fc1d/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=d464169beb132f44be20a8c1c78c8a69aa11fc1d", "patch": "@@ -477,7 +477,6 @@ pub mod intrinsics {\n         pub fn min_align_of_val<T: ?::Sized>(val: &T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n-        pub fn init<T>() -> T;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn needs_drop<T>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;"}, {"sha": "fb96c33ad2edca916a480138a51006492fd1173b", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d464169beb132f44be20a8c1c78c8a69aa11fc1d/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/d464169beb132f44be20a8c1c78c8a69aa11fc1d/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=d464169beb132f44be20a8c1c78c8a69aa11fc1d", "patch": "@@ -1 +1 @@\n-nightly-2020-03-17\n+nightly-2020-03-18"}, {"sha": "de96c4e6edec81a83b6114f996c082d706ba54f8", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d464169beb132f44be20a8c1c78c8a69aa11fc1d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d464169beb132f44be20a8c1c78c8a69aa11fc1d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=d464169beb132f44be20a8c1c78c8a69aa11fc1d", "patch": "@@ -611,78 +611,6 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let dst_layout = fx.layout_of(dst_ty);\n             ret.write_cvalue(fx, CValue::by_ref(addr, dst_layout))\n         };\n-        init, () {\n-            let layout = ret.layout();\n-            if layout.abi == Abi::Uninhabited {\n-                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::init for uninhabited type.\");\n-                return;\n-            }\n-\n-            match *ret.inner() {\n-                CPlaceInner::NoPlace => {}\n-                CPlaceInner::Var(var) => {\n-                    let clif_ty = fx.clif_type(layout.ty).unwrap();\n-                    let val = match clif_ty {\n-                        types::I8 | types::I16 | types::I32 | types::I64 => fx.bcx.ins().iconst(clif_ty, 0),\n-                        types::I128 => {\n-                            let zero = fx.bcx.ins().iconst(types::I64, 0);\n-                            fx.bcx.ins().iconcat(zero, zero)\n-                        }\n-                        types::F32 => {\n-                            let zero = fx.bcx.ins().iconst(types::I32, 0);\n-                            fx.bcx.ins().bitcast(types::F32, zero)\n-                        }\n-                        types::F64 => {\n-                            let zero = fx.bcx.ins().iconst(types::I64, 0);\n-                            fx.bcx.ins().bitcast(types::F64, zero)\n-                        }\n-                        _ => panic!(\"clif_type returned {}\", clif_ty),\n-                    };\n-                    fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n-                    fx.bcx.def_var(mir_var(var), val);\n-                }\n-                _ => {\n-                    let addr = ret.to_ptr(fx).get_addr(fx);\n-                    let layout = ret.layout();\n-                    fx.bcx.emit_small_memset(fx.module.target_config(), addr, 0, layout.size.bytes(), 1);\n-                }\n-            }\n-        };\n-        uninit, () {\n-            let layout = ret.layout();\n-            if layout.abi == Abi::Uninhabited {\n-                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::uninit for uninhabited type.\");\n-                return;\n-            }\n-            match *ret.inner() {\n-                CPlaceInner::NoPlace => {},\n-                CPlaceInner::Var(var) => {\n-                    let clif_ty = fx.clif_type(layout.ty).unwrap();\n-                    let val = match clif_ty {\n-                        types::I8 | types::I16 | types::I32 | types::I64 => fx.bcx.ins().iconst(clif_ty, 42),\n-                        types::I128 => {\n-                            let zero = fx.bcx.ins().iconst(types::I64, 0);\n-                            let fourty_two = fx.bcx.ins().iconst(types::I64, 42);\n-                            fx.bcx.ins().iconcat(fourty_two, zero)\n-                        }\n-                        types::F32 => {\n-                            let zero = fx.bcx.ins().iconst(types::I32, 0xdeadbeef);\n-                            fx.bcx.ins().bitcast(types::F32, zero)\n-                        }\n-                        types::F64 => {\n-                            let zero = fx.bcx.ins().iconst(types::I64, 0xcafebabedeadbeefu64 as i64);\n-                            fx.bcx.ins().bitcast(types::F64, zero)\n-                        }\n-                        _ => panic!(\"clif_type returned {}\", clif_ty),\n-                    };\n-                    fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n-                    fx.bcx.def_var(mir_var(var), val);\n-                }\n-                CPlaceInner::Addr(_, _) => {\n-                    // Don't write to `ret`, as the destination memory is already uninitialized.\n-                }\n-            }\n-        };\n         write_bytes, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();"}]}