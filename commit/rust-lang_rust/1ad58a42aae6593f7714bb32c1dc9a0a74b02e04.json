{"sha": "1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "node_id": "C_kwDOAAsO6NoAKDFhZDU4YTQyYWFlNjU5M2Y3NzE0YmIzMmMxZGM5YTBhNzRiMDJlMDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T07:22:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T07:22:43Z"}, "message": "Auto merge of #14711 - Veykril:highlight-captures, r=Veykril\n\nfeat: Highlight closure captures when cursor is on pipe or move keyword\n\nThis runs into the same issue on vscode as exit points for `->`, where highlights are only triggered on identifiers, https://github.com/rust-lang/rust-analyzer/issues/9395\n\nThough putting the cursor on `move` should at least work.", "tree": {"sha": "0625ad1dd2916f1b60548b2ad6b582e169e94df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0625ad1dd2916f1b60548b2ad6b582e169e94df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "html_url": "https://github.com/rust-lang/rust/commit/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e76bd90f81a0f0c94854c26ae2d9d36e8f88dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e76bd90f81a0f0c94854c26ae2d9d36e8f88dc", "html_url": "https://github.com/rust-lang/rust/commit/98e76bd90f81a0f0c94854c26ae2d9d36e8f88dc"}, {"sha": "5a97a326a910db4011fb5b060aeb555bfbd840d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a97a326a910db4011fb5b060aeb555bfbd840d6", "html_url": "https://github.com/rust-lang/rust/commit/5a97a326a910db4011fb5b060aeb555bfbd840d6"}], "stats": {"total": 256, "additions": 178, "deletions": 78}, "files": [{"sha": "df2ad7af343d8c5b8dbe388a2cb91f2768606b4a", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -118,6 +118,7 @@ pub(crate) struct HirPlace {\n     pub(crate) local: BindingId,\n     pub(crate) projections: Vec<ProjectionElem<Infallible, Ty>>,\n }\n+\n impl HirPlace {\n     fn ty(&self, ctx: &mut InferenceContext<'_>) -> Ty {\n         let mut ty = ctx.table.resolve_completely(ctx.result[self.local].clone());\n@@ -161,6 +162,10 @@ pub struct CapturedItem {\n }\n \n impl CapturedItem {\n+    pub fn local(&self) -> BindingId {\n+        self.place.local\n+    }\n+\n     pub fn display_kind(&self) -> &'static str {\n         match self.kind {\n             CaptureKind::ByRef(k) => match k {"}, {"sha": "f955b74d0e5d0d3f5fef5518c31f86170fbe6f05", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -3209,11 +3209,11 @@ impl Closure {\n         self.clone().as_ty().display(db).with_closure_style(ClosureStyle::ImplFn).to_string()\n     }\n \n-    pub fn captured_items(&self, db: &dyn HirDatabase) -> Vec<hir_ty::CapturedItem> {\n+    pub fn captured_items(&self, db: &dyn HirDatabase) -> Vec<ClosureCapture> {\n         let owner = db.lookup_intern_closure((self.id).into()).0;\n         let infer = &db.infer(owner);\n         let info = infer.closure_info(&self.id);\n-        info.0.clone()\n+        info.0.iter().cloned().map(|capture| ClosureCapture { owner, capture }).collect()\n     }\n \n     pub fn fn_trait(&self, db: &dyn HirDatabase) -> FnTrait {\n@@ -3224,6 +3224,26 @@ impl Closure {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct ClosureCapture {\n+    owner: DefWithBodyId,\n+    capture: hir_ty::CapturedItem,\n+}\n+\n+impl ClosureCapture {\n+    pub fn local(&self) -> Local {\n+        Local { parent: self.owner, binding_id: self.capture.local() }\n+    }\n+\n+    pub fn display_kind(&self) -> &'static str {\n+        self.capture.display_kind()\n+    }\n+\n+    pub fn display_place(&self, owner: ClosureId, db: &dyn HirDatabase) -> String {\n+        self.capture.display_place(owner, db)\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     env: Arc<TraitEnvironment>,"}, {"sha": "3a519fe65a1775ddfb38f75cbd59002f55008502", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 132, "deletions": 67, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -1,6 +1,6 @@\n use hir::Semantics;\n use ide_db::{\n-    base_db::{FileId, FilePosition},\n+    base_db::{FileId, FilePosition, FileRange},\n     defs::{Definition, IdentClass},\n     helpers::pick_best_token,\n     search::{FileReference, ReferenceCategory, SearchScope},\n@@ -30,6 +30,7 @@ pub struct HighlightRelatedConfig {\n     pub references: bool,\n     pub exit_points: bool,\n     pub break_points: bool,\n+    pub closure_captures: bool,\n     pub yield_points: bool,\n }\n \n@@ -53,11 +54,12 @@ pub(crate) fn highlight_related(\n \n     let token = pick_best_token(syntax.token_at_offset(offset), |kind| match kind {\n         T![?] => 4, // prefer `?` when the cursor is sandwiched like in `await$0?`\n-        T![->] => 3,\n+        T![->] | T![|] => 3,\n         kind if kind.is_keyword() => 2,\n         IDENT | INT_NUMBER => 1,\n         _ => 0,\n     })?;\n+    // most if not all of these should be re-implemented with information seeded from hir\n     match token.kind() {\n         T![?] if config.exit_points && token.parent().and_then(ast::TryExpr::cast).is_some() => {\n             highlight_exit_points(sema, token)\n@@ -70,11 +72,57 @@ pub(crate) fn highlight_related(\n         T![break] | T![loop] | T![while] | T![continue] if config.break_points => {\n             highlight_break_points(token)\n         }\n+        T![|] if config.closure_captures => highlight_closure_captures(sema, token, file_id),\n+        T![move] if config.closure_captures => highlight_closure_captures(sema, token, file_id),\n         _ if config.references => highlight_references(sema, &syntax, token, file_id),\n         _ => None,\n     }\n }\n \n+fn highlight_closure_captures(\n+    sema: &Semantics<'_, RootDatabase>,\n+    token: SyntaxToken,\n+    file_id: FileId,\n+) -> Option<Vec<HighlightedRange>> {\n+    let closure = token.parent_ancestors().take(2).find_map(ast::ClosureExpr::cast)?;\n+    let search_range = closure.body()?.syntax().text_range();\n+    let ty = &sema.type_of_expr(&closure.into())?.original;\n+    let c = ty.as_closure()?;\n+    Some(\n+        c.captured_items(sema.db)\n+            .into_iter()\n+            .map(|capture| capture.local())\n+            .flat_map(|local| {\n+                let usages = Definition::Local(local)\n+                    .usages(sema)\n+                    .set_scope(Some(SearchScope::file_range(FileRange {\n+                        file_id,\n+                        range: search_range,\n+                    })))\n+                    .include_self_refs()\n+                    .all()\n+                    .references\n+                    .remove(&file_id)\n+                    .into_iter()\n+                    .flatten()\n+                    .map(|FileReference { category, range, .. }| HighlightedRange {\n+                        range,\n+                        category,\n+                    });\n+                let category = local.is_mut(sema.db).then_some(ReferenceCategory::Write);\n+                local\n+                    .sources(sema.db)\n+                    .into_iter()\n+                    .map(|x| x.to_nav(sema.db))\n+                    .filter(|decl| decl.file_id == file_id)\n+                    .filter_map(|decl| decl.focus_range)\n+                    .map(move |range| HighlightedRange { range, category })\n+                    .chain(usages)\n+            })\n+            .collect(),\n+    )\n+}\n+\n fn highlight_references(\n     sema: &Semantics<'_, RootDatabase>,\n     node: &SyntaxNode,\n@@ -93,10 +141,7 @@ fn highlight_references(\n                 .remove(&file_id)\n         })\n         .flatten()\n-        .map(|FileReference { category: access, range, .. }| HighlightedRange {\n-            range,\n-            category: access,\n-        });\n+        .map(|FileReference { category, range, .. }| HighlightedRange { range, category });\n     let mut res = FxHashSet::default();\n     for &def in &defs {\n         match def {\n@@ -148,9 +193,16 @@ fn highlight_exit_points(\n ) -> Option<Vec<HighlightedRange>> {\n     fn hl(\n         sema: &Semantics<'_, RootDatabase>,\n+        def_ranges: [Option<TextRange>; 2],\n         body: Option<ast::Expr>,\n     ) -> Option<Vec<HighlightedRange>> {\n         let mut highlights = Vec::new();\n+        highlights.extend(\n+            def_ranges\n+                .into_iter()\n+                .flatten()\n+                .map(|range| HighlightedRange { category: None, range }),\n+        );\n         let body = body?;\n         walk_expr(&body, &mut |expr| match expr {\n             ast::Expr::ReturnExpr(expr) => {\n@@ -194,10 +246,21 @@ fn highlight_exit_points(\n     for anc in token.parent_ancestors() {\n         return match_ast! {\n             match anc {\n-                ast::Fn(fn_) => hl(sema, fn_.body().map(ast::Expr::BlockExpr)),\n-                ast::ClosureExpr(closure) => hl(sema, closure.body()),\n+                ast::Fn(fn_) => hl(sema, [fn_.fn_token().map(|it| it.text_range()), None], fn_.body().map(ast::Expr::BlockExpr)),\n+                ast::ClosureExpr(closure) => hl(\n+                    sema,\n+                    closure.param_list().map_or([None; 2], |p| [p.l_paren_token().map(|it| it.text_range()), p.r_paren_token().map(|it| it.text_range())]),\n+                    closure.body()\n+                ),\n                 ast::BlockExpr(block_expr) => if matches!(block_expr.modifier(), Some(ast::BlockModifier::Async(_) | ast::BlockModifier::Try(_)| ast::BlockModifier::Const(_))) {\n-                    hl(sema, Some(block_expr.into()))\n+                    hl(\n+                        sema,\n+                        [block_expr.modifier().and_then(|modifier| match modifier {\n+                            ast::BlockModifier::Async(t) | ast::BlockModifier::Try(t) | ast::BlockModifier::Const(t) => Some(t.text_range()),\n+                            _ => None,\n+                        }), None],\n+                        Some(block_expr.into())\n+                    )\n                 } else {\n                     continue;\n                 },\n@@ -352,16 +415,17 @@ mod tests {\n \n     use super::*;\n \n+    const ENABLED_CONFIG: HighlightRelatedConfig = HighlightRelatedConfig {\n+        break_points: true,\n+        exit_points: true,\n+        references: true,\n+        closure_captures: true,\n+        yield_points: true,\n+    };\n+\n     #[track_caller]\n     fn check(ra_fixture: &str) {\n-        let config = HighlightRelatedConfig {\n-            break_points: true,\n-            exit_points: true,\n-            references: true,\n-            yield_points: true,\n-        };\n-\n-        check_with_config(ra_fixture, config);\n+        check_with_config(ra_fixture, ENABLED_CONFIG);\n     }\n \n     #[track_caller]\n@@ -610,7 +674,8 @@ async fn foo() {\n     fn test_hl_exit_points() {\n         check(\n             r#\"\n-fn foo() -> u32 {\n+  fn foo() -> u32 {\n+//^^\n     if true {\n         return$0 0;\n      // ^^^^^^\n@@ -629,7 +694,8 @@ fn foo() -> u32 {\n     fn test_hl_exit_points2() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     if true {\n         return 0;\n      // ^^^^^^\n@@ -648,7 +714,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_exit_points3() {\n         check(\n             r#\"\n-fn$0 foo() -> u32 {\n+  fn$0 foo() -> u32 {\n+//^^\n     if true {\n         return 0;\n      // ^^^^^^\n@@ -694,7 +761,8 @@ macro_rules! never {\n     () => { never() }\n }\n fn never() -> ! { loop {} }\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     never();\n  // ^^^^^^^\n     never!();\n@@ -714,7 +782,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_inner_tail_exit_points() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     if true {\n         unsafe {\n             return 5;\n@@ -755,7 +824,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_inner_tail_exit_points_labeled_block() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     'foo: {\n         break 'foo 0;\n      // ^^^^^\n@@ -776,7 +846,8 @@ fn foo() ->$0 u32 {\n     fn test_hl_inner_tail_exit_points_loops() {\n         check(\n             r#\"\n-fn foo() ->$0 u32 {\n+  fn foo() ->$0 u32 {\n+//^^\n     'foo: while { return 0; true } {\n                // ^^^^^^\n         break 'foo 0;\n@@ -1086,12 +1157,7 @@ fn function(field: u32) {\n \n     #[test]\n     fn test_hl_disabled_ref_local() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1106,12 +1172,7 @@ fn foo() {\n \n     #[test]\n     fn test_hl_disabled_ref_local_preserved_break() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1146,12 +1207,7 @@ fn foo() {\n \n     #[test]\n     fn test_hl_disabled_ref_local_preserved_yield() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1182,12 +1238,7 @@ async fn foo() {\n \n     #[test]\n     fn test_hl_disabled_ref_local_preserved_exit() {\n-        let config = HighlightRelatedConfig {\n-            references: false,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { references: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1207,7 +1258,8 @@ fn foo() -> i32 {\n \n         check_with_config(\n             r#\"\n-fn foo() ->$0 i32 {\n+  fn foo() ->$0 i32 {\n+//^^\n     let x = 5;\n     let y = x * 2;\n \n@@ -1225,12 +1277,7 @@ fn foo() ->$0 i32 {\n \n     #[test]\n     fn test_hl_disabled_break() {\n-        let config = HighlightRelatedConfig {\n-            references: true,\n-            break_points: false,\n-            exit_points: true,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { break_points: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1246,12 +1293,7 @@ fn foo() {\n \n     #[test]\n     fn test_hl_disabled_yield() {\n-        let config = HighlightRelatedConfig {\n-            references: true,\n-            break_points: true,\n-            exit_points: true,\n-            yield_points: false,\n-        };\n+        let config = HighlightRelatedConfig { yield_points: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1265,12 +1307,7 @@ async$0 fn foo() {\n \n     #[test]\n     fn test_hl_disabled_exit() {\n-        let config = HighlightRelatedConfig {\n-            references: true,\n-            break_points: true,\n-            exit_points: false,\n-            yield_points: true,\n-        };\n+        let config = HighlightRelatedConfig { exit_points: false, ..ENABLED_CONFIG };\n \n         check_with_config(\n             r#\"\n@@ -1411,6 +1448,34 @@ impl Trait for () {\n     type Output$0 = ();\n       // ^^^^^^\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_closure_capture_pipe() {\n+        check(\n+            r#\"\n+fn f() {\n+    let x = 1;\n+    //  ^\n+    let c = $0|y| x + y;\n+    //          ^ read\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_closure_capture_move() {\n+        check(\n+            r#\"\n+fn f() {\n+    let x = 1;\n+    //  ^\n+    let c = move$0 |y| x + y;\n+    //               ^ read\n+}\n \"#,\n         );\n     }"}, {"sha": "aa6beb6351a5cfff24b0ae85d64d2c950418a522", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -281,6 +281,8 @@ config_data! {\n \n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n+        /// Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.\n+        highlightRelated_closureCaptures_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n         highlightRelated_exitPoints_enable: bool = \"true\",\n         /// Enables highlighting of related references while the cursor is on any identifier.\n@@ -1554,6 +1556,7 @@ impl Config {\n             break_points: self.data.highlightRelated_breakPoints_enable,\n             exit_points: self.data.highlightRelated_exitPoints_enable,\n             yield_points: self.data.highlightRelated_yieldPoints_enable,\n+            closure_captures: self.data.highlightRelated_closureCaptures_enable,\n         }\n     }\n "}, {"sha": "625ffe0763c248a2692e820fa02daca6e87c9c63", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -434,7 +434,7 @@ pub enum HoverRequest {}\n impl Request for HoverRequest {\n     type Params = HoverParams;\n     type Result = Option<Hover>;\n-    const METHOD: &'static str = \"textDocument/hover\";\n+    const METHOD: &'static str = lsp_types::request::HoverRequest::METHOD;\n }\n \n #[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]"}, {"sha": "fd3e68e2d2c63f0298ba33896bb958545a40bbab", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -95,7 +95,7 @@ fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     Some((TextRange::new(start, end), text))\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n pub enum RangeOrOffset {\n     Range(TextRange),\n     Offset(TextSize),"}, {"sha": "42f58fee30e1d30c3ec6c4f3678a30ef9d73872b", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 37ac44a0f507e05a\n+lsp_ext.rs hash: 31ca513a249753ab\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}, {"sha": "aad6969671c8e1e9aedf102365cba878cdda835d", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -352,6 +352,11 @@ Controls file watching implementation.\n --\n Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n --\n+[[rust-analyzer.highlightRelated.closureCaptures.enable]]rust-analyzer.highlightRelated.closureCaptures.enable (default: `true`)::\n++\n+--\n+Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.\n+--\n [[rust-analyzer.highlightRelated.exitPoints.enable]]rust-analyzer.highlightRelated.exitPoints.enable (default: `true`)::\n +\n --"}, {"sha": "f36e34b6a1bed0264c12fb9155f1cc0a1036bc3b", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -886,6 +886,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.highlightRelated.closureCaptures.enable\": {\n+                    \"markdownDescription\": \"Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.highlightRelated.exitPoints.enable\": {\n                     \"markdownDescription\": \"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\",\n                     \"default\": true,"}, {"sha": "82955acf25ed98600653cb844a7cc35cef28ee7e", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58a42aae6593f7714bb32c1dc9a0a74b02e04/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=1ad58a42aae6593f7714bb32c1dc9a0a74b02e04", "patch": "@@ -10,12 +10,9 @@ export const hover = new lc.RequestType<\n     HoverParams,\n     (lc.Hover & { actions: CommandLinkGroup[] }) | null,\n     void\n->(\"textDocument/hover\");\n-export type HoverParams = { position: lc.Position | lc.Range } & Omit<\n-    lc.TextDocumentPositionParams,\n-    \"position\"\n-> &\n-    lc.WorkDoneProgressParams;\n+>(lc.HoverRequest.method);\n+export type HoverParams = { position: lc.Position | lc.Range } & Omit<lc.HoverParams, \"position\">;\n+\n export type CommandLink = {\n     /**\n      * A tooltip for the command, when represented in the UI."}]}