{"sha": "3bab3dc574694b92ca5156ab35d486aeae0bee33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWIzZGM1NzQ2OTRiOTJjYTUxNTZhYjM1ZDQ4NmFlYWUwYmVlMzM=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-15T07:07:48Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-16T15:15:35Z"}, "message": "libstd: Remove all uses of {:?}.", "tree": {"sha": "5f4da3c32c91b0c6c02bfc99559bbacc0541ecba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4da3c32c91b0c6c02bfc99559bbacc0541ecba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bab3dc574694b92ca5156ab35d486aeae0bee33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bab3dc574694b92ca5156ab35d486aeae0bee33", "html_url": "https://github.com/rust-lang/rust/commit/3bab3dc574694b92ca5156ab35d486aeae0bee33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bab3dc574694b92ca5156ab35d486aeae0bee33/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814586be57b87a32414b4e3fecc150686513b80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/814586be57b87a32414b4e3fecc150686513b80f", "html_url": "https://github.com/rust-lang/rust/commit/814586be57b87a32414b4e3fecc150686513b80f"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "ed8ff821f5cad67ffb9fe8cf8d4676de555b1019", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=3bab3dc574694b92ca5156ab35d486aeae0bee33", "patch": "@@ -183,7 +183,7 @@ mod test {\n         let expected_result = 1.0;\n         let result = cosine(argument);\n         if result != expected_result {\n-            fail!(\"cos({:?}) != {:?} but equaled {:?} instead\", argument,\n+            fail!(\"cos({}) != {} but equaled {} instead\", argument,\n                    expected_result, result)\n         }\n     }"}, {"sha": "8632fc63e52f87d79865dfe8c01cee79a51d691c", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=3bab3dc574694b92ca5156ab35d486aeae0bee33", "patch": "@@ -963,7 +963,7 @@ mod test {\n \n     macro_rules! error( ($e:expr, $s:expr) => (\n         match $e {\n-            Ok(val) => fail!(\"Should have been an error, was {:?}\", val),\n+            Ok(val) => fail!(\"Unexpected success. Should've been: {}\", $s),\n             Err(ref err) => assert!(err.to_string().as_slice().contains($s.as_slice()),\n                                     format!(\"`{}` did not contain `{}`\", err, $s))\n         }"}, {"sha": "e0cf761fdbd7e7bde3bd436796b1e77a7b47346c", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=3bab3dc574694b92ca5156ab35d486aeae0bee33", "patch": "@@ -340,7 +340,7 @@ mod tests {\n                         assert!(e.kind == BrokenPipe ||\n                                 e.kind == NotConnected ||\n                                 e.kind == ConnectionReset,\n-                                \"unknown error {:?}\", e);\n+                                \"unknown error {}\", e);\n                         break;\n                     }\n                 }"}, {"sha": "e758dec6bff9485a2aadf63d2b3449247d166619", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=3bab3dc574694b92ca5156ab35d486aeae0bee33", "patch": "@@ -1975,7 +1975,7 @@ mod tests {\n         let path = os::self_exe_name();\n         assert!(path.is_some());\n         let path = path.unwrap();\n-        debug!(\"{:?}\", path.clone());\n+        debug!(\"{}\", path.display());\n \n         // Hard to test this function\n         assert!(path.is_absolute());\n@@ -1986,7 +1986,7 @@ mod tests {\n         let path = os::self_exe_path();\n         assert!(path.is_some());\n         let path = path.unwrap();\n-        debug!(\"{:?}\", path.clone());\n+        debug!(\"{}\", path.display());\n \n         // Hard to test this function\n         assert!(path.is_absolute());\n@@ -1999,7 +1999,7 @@ mod tests {\n         assert!(e.len() > 0u);\n         for p in e.iter() {\n             let (n, v) = (*p).clone();\n-            debug!(\"{:?}\", n.clone());\n+            debug!(\"{}\", n);\n             let v2 = getenv(n.as_slice());\n             // MingW seems to set some funky environment variables like\n             // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n@@ -2037,8 +2037,8 @@ mod tests {\n         let cwd = getcwd();\n         debug!(\"Current working directory: {}\", cwd.display());\n \n-        debug!(\"{:?}\", make_absolute(&Path::new(\"test-path\")));\n-        debug!(\"{:?}\", make_absolute(&Path::new(\"/usr/bin\")));\n+        debug!(\"{}\", make_absolute(&Path::new(\"test-path\")).display());\n+        debug!(\"{}\", make_absolute(&Path::new(\"/usr/bin\")).display());\n     }\n \n     #[test]"}, {"sha": "69b6dd76676168a3bf4a3b1787b1e4b658190fbb", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=3bab3dc574694b92ca5156ab35d486aeae0bee33", "patch": "@@ -986,19 +986,19 @@ mod tests {\n                         let path = $path;\n                         let filename = $filename;\n                         assert!(path.filename_str() == filename,\n-                                \"{}.filename_str(): Expected `{:?}`, found {:?}\",\n+                                \"{}.filename_str(): Expected `{}`, found {}\",\n                                 path.as_str().unwrap(), filename, path.filename_str());\n                         let dirname = $dirname;\n                         assert!(path.dirname_str() == dirname,\n-                                \"`{}`.dirname_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.dirname_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), dirname, path.dirname_str());\n                         let filestem = $filestem;\n                         assert!(path.filestem_str() == filestem,\n-                                \"`{}`.filestem_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.filestem_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), filestem, path.filestem_str());\n                         let ext = $ext;\n                         assert!(path.extension_str() == mem::transmute(ext),\n-                                \"`{}`.extension_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.extension_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), ext, path.extension_str());\n                     }\n                 }\n@@ -1200,11 +1200,11 @@ mod tests {\n                     let comps = path.components().collect::<Vec<&[u8]>>();\n                     let exp: &[&str] = $exp;\n                     let exps = exp.iter().map(|x| x.as_bytes()).collect::<Vec<&[u8]>>();\n-                    assert!(comps == exps, \"components: Expected {:?}, found {:?}\",\n+                    assert!(comps == exps, \"components: Expected {}, found {}\",\n                             comps, exps);\n                     let comps = path.components().rev().collect::<Vec<&[u8]>>();\n                     let exps = exps.into_iter().rev().collect::<Vec<&[u8]>>();\n-                    assert!(comps == exps, \"rev_components: Expected {:?}, found {:?}\",\n+                    assert!(comps == exps, \"rev_components: Expected {}, found {}\",\n                             comps, exps);\n                 }\n             );"}, {"sha": "4456cf96094285dd89297676e0b2638f856e7e23", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bab3dc574694b92ca5156ab35d486aeae0bee33/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=3bab3dc574694b92ca5156ab35d486aeae0bee33", "patch": "@@ -996,7 +996,7 @@ pub fn is_sep_byte_verbatim(u: &u8) -> bool {\n }\n \n /// Prefix types for Path\n-#[deriving(PartialEq, Clone)]\n+#[deriving(PartialEq, Clone, Show)]\n pub enum PathPrefix {\n     /// Prefix `\\\\?\\`, uint is the length of the following component\n     VerbatimPrefix(uint),\n@@ -1172,7 +1172,7 @@ mod tests {\n                     let exp = $exp;\n                     let res = parse_prefix(path);\n                     assert!(res == exp,\n-                            \"parse_prefix(\\\"{}\\\"): expected {:?}, found {:?}\", path, exp, res);\n+                            \"parse_prefix(\\\"{}\\\"): expected {}, found {}\", path, exp, res);\n                 }\n             )\n         )\n@@ -1904,19 +1904,19 @@ mod tests {\n                         let path = $path;\n                         let filename = $filename;\n                         assert!(path.filename_str() == filename,\n-                                \"`{}`.filename_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.filename_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), filename, path.filename_str());\n                         let dirname = $dirname;\n                         assert!(path.dirname_str() == dirname,\n-                                \"`{}`.dirname_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.dirname_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), dirname, path.dirname_str());\n                         let filestem = $filestem;\n                         assert!(path.filestem_str() == filestem,\n-                                \"`{}`.filestem_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.filestem_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), filestem, path.filestem_str());\n                         let ext = $ext;\n                         assert!(path.extension_str() == mem::transmute(ext),\n-                                \"`{}`.extension_str(): Expected `{:?}`, found `{:?}`\",\n+                                \"`{}`.extension_str(): Expected `{}`, found `{}`\",\n                                 path.as_str().unwrap(), ext, path.extension_str());\n                     }\n                 }\n@@ -1974,16 +1974,16 @@ mod tests {\n                     let path = Path::new($path);\n                     let (abs, vol, cwd, rel) = ($abs, $vol, $cwd, $rel);\n                     let b = path.is_absolute();\n-                    assert!(b == abs, \"Path '{}'.is_absolute(): expected {:?}, found {:?}\",\n+                    assert!(b == abs, \"Path '{}'.is_absolute(): expected {}, found {}\",\n                             path.as_str().unwrap(), abs, b);\n                     let b = is_vol_relative(&path);\n-                    assert!(b == vol, \"is_vol_relative('{}'): expected {:?}, found {:?}\",\n+                    assert!(b == vol, \"is_vol_relative('{}'): expected {}, found {}\",\n                             path.as_str().unwrap(), vol, b);\n                     let b = is_cwd_relative(&path);\n-                    assert!(b == cwd, \"is_cwd_relative('{}'): expected {:?}, found {:?}\",\n+                    assert!(b == cwd, \"is_cwd_relative('{}'): expected {}, found {}\",\n                             path.as_str().unwrap(), cwd, b);\n                     let b = path.is_relative();\n-                    assert!(b == rel, \"Path '{}'.is_relativf(): expected {:?}, found {:?}\",\n+                    assert!(b == rel, \"Path '{}'.is_relativf(): expected {}, found {}\",\n                             path.as_str().unwrap(), rel, b);\n                 }\n             )\n@@ -2016,7 +2016,7 @@ mod tests {\n                     let exp = $exp;\n                     let res = path.is_ancestor_of(&dest);\n                     assert!(res == exp,\n-                            \"`{}`.is_ancestor_of(`{}`): Expected {:?}, found {:?}\",\n+                            \"`{}`.is_ancestor_of(`{}`): Expected {}, found {}\",\n                             path.as_str().unwrap(), dest.as_str().unwrap(), exp, res);\n                 }\n             )\n@@ -2151,7 +2151,7 @@ mod tests {\n                     let res = path.path_relative_from(&other);\n                     let exp = $exp;\n                     assert!(res.as_ref().and_then(|x| x.as_str()) == exp,\n-                            \"`{}`.path_relative_from(`{}`): Expected {:?}, got {:?}\",\n+                            \"`{}`.path_relative_from(`{}`): Expected {}, got {}\",\n                             path.as_str().unwrap(), other.as_str().unwrap(), exp,\n                             res.as_ref().and_then(|x| x.as_str()));\n                 }"}]}