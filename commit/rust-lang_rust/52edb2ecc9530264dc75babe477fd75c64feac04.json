{"sha": "52edb2ecc9530264dc75babe477fd75c64feac04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZWRiMmVjYzk1MzAyNjRkYzc1YmFiZTQ3N2ZkNzVjNjRmZWFjMDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T22:08:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-11T19:30:38Z"}, "message": "Register new snapshots", "tree": {"sha": "7110ee1e9e8b123ffdd8be4dd1e9b6213b9cb08c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7110ee1e9e8b123ffdd8be4dd1e9b6213b9cb08c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52edb2ecc9530264dc75babe477fd75c64feac04", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52edb2ecc9530264dc75babe477fd75c64feac04", "html_url": "https://github.com/rust-lang/rust/commit/52edb2ecc9530264dc75babe477fd75c64feac04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52edb2ecc9530264dc75babe477fd75c64feac04/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25e100173effba685d076cee16f8af150078617", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25e100173effba685d076cee16f8af150078617", "html_url": "https://github.com/rust-lang/rust/commit/b25e100173effba685d076cee16f8af150078617"}], "stats": {"total": 15222, "additions": 8002, "deletions": 7220}, "files": [{"sha": "c41c26a1ccbf9f0669721d0aa1e0c7d1ab61899b", "filename": "src/etc/unicode.py", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -283,11 +283,7 @@ def load_east_asian_width(want_widths, except_cats):\n     return widths\n \n def escape_char(c):\n-    if c <= 0x7f:\n-        return \"'\\\\x%2.2x'\" % c\n-    if c <= 0xffff:\n-        return \"'\\\\u%4.4x'\" % c\n-    return \"'\\\\U%8.8x'\" % c\n+    return \"'\\\\u{%x}'\" % c\n \n def emit_bsearch_range_table(f):\n     f.write(\"\"\"\n@@ -377,8 +373,8 @@ def emit_conversions_module(f, lowerupper, upperlower):\n             else if key < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(i) => Some(i),\n-            slice::NotFound(_) => None,\n+            slice::BinarySearchResult::Found(i) => Some(i),\n+            slice::BinarySearchResult::NotFound(_) => None,\n         }\n     }\n \n@@ -392,6 +388,7 @@ def emit_conversions_module(f, lowerupper, upperlower):\n def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n     f.write(\"\"\"pub mod grapheme {\n     use core::slice::SlicePrelude;\n+    use core::kinds::Copy;\n     pub use self::GraphemeCat::*;\n     use core::slice;\n \n@@ -403,18 +400,20 @@ def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n         f.write(\"        GC_\" + cat + \",\\n\")\n     f.write(\"\"\"    }\n \n+    impl Copy for GraphemeCat {}\n+\n     fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n         use core::cmp::Ordering::{Equal, Less, Greater};\n         match r.binary_search(|&(lo, hi, _)| {\n             if lo <= c && c <= hi { Equal }\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(idx) => {\n+            slice::BinarySearchResult::Found(idx) => {\n                 let (_, _, cat) = r[idx];\n                 cat\n             }\n-            slice::NotFound(_) => GC_Any\n+            slice::BinarySearchResult::NotFound(_) => GC_Any\n         }\n     }\n \n@@ -443,11 +442,11 @@ def emit_charwidth_module(f, width_table):\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(idx) => {\n+            slice::BinarySearchResult::Found(idx) => {\n                 let (_, _, r_ncjk, r_cjk) = r[idx];\n                 if is_cjk { r_cjk } else { r_ncjk }\n             }\n-            slice::NotFound(_) => 1\n+            slice::BinarySearchResult::NotFound(_) => 1\n         }\n     }\n \"\"\")\n@@ -540,11 +539,11 @@ def comp_pfun(char):\n             else if hi < c { Less }\n             else { Greater }\n         }) {\n-            slice::Found(idx) => {\n+            slice::BinarySearchResult::Found(idx) => {\n                 let (_, _, result) = r[idx];\n                 result\n             }\n-            slice::NotFound(_) => 0\n+            slice::BinarySearchResult::NotFound(_) => 0\n         }\n     }\\n\n \"\"\")\n@@ -613,7 +612,7 @@ def optimize_width_table(wtable):\n             unicode_version = re.search(pattern, readme.read()).groups()\n         rf.write(\"\"\"\n /// The version of [Unicode](http://www.unicode.org/)\n-/// that the `UnicodeChar` and `UnicodeStrSlice` traits are based on.\n+/// that the `UnicodeChar` and `UnicodeStrPrelude` traits are based on.\n pub const UNICODE_VERSION: (uint, uint, uint) = (%s, %s, %s);\n \"\"\" % unicode_version)\n         (canon_decomp, compat_decomp, gencats, combines,"}, {"sha": "5593dd6bce42734b09b2447003da099dad97fdfd", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 414, "deletions": 291, "changes": 705, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -876,18 +876,18 @@ mod tests {\n         assert_eq!(\"\".len(), 0u);\n         assert_eq!(\"hello world\".len(), 11u);\n         assert_eq!(\"\\x63\".len(), 1u);\n-        assert_eq!(\"\\u00a2\".len(), 2u);\n-        assert_eq!(\"\\u03c0\".len(), 2u);\n-        assert_eq!(\"\\u2620\".len(), 3u);\n-        assert_eq!(\"\\U0001d11e\".len(), 4u);\n+        assert_eq!(\"\\u{a2}\".len(), 2u);\n+        assert_eq!(\"\\u{3c0}\".len(), 2u);\n+        assert_eq!(\"\\u{2620}\".len(), 3u);\n+        assert_eq!(\"\\u{1d11e}\".len(), 4u);\n \n         assert_eq!(\"\".char_len(), 0u);\n         assert_eq!(\"hello world\".char_len(), 11u);\n         assert_eq!(\"\\x63\".char_len(), 1u);\n-        assert_eq!(\"\\u00a2\".char_len(), 1u);\n-        assert_eq!(\"\\u03c0\".char_len(), 1u);\n-        assert_eq!(\"\\u2620\".char_len(), 1u);\n-        assert_eq!(\"\\U0001d11e\".char_len(), 1u);\n+        assert_eq!(\"\\u{a2}\".char_len(), 1u);\n+        assert_eq!(\"\\u{3c0}\".char_len(), 1u);\n+        assert_eq!(\"\\u{2620}\".char_len(), 1u);\n+        assert_eq!(\"\\u{1d11e}\".char_len(), 1u);\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".char_len(), 19u);\n \n         assert_eq!(\"\uff48\uff45\uff4c\uff4c\uff4f\".width(false), 10u);\n@@ -896,8 +896,8 @@ mod tests {\n         assert_eq!(\"\\0\\0\\0\\0\\0\".width(true), 0u);\n         assert_eq!(\"\".width(false), 0u);\n         assert_eq!(\"\".width(true), 0u);\n-        assert_eq!(\"\\u2081\\u2082\\u2083\\u2084\".width(false), 4u);\n-        assert_eq!(\"\\u2081\\u2082\\u2083\\u2084\".width(true), 8u);\n+        assert_eq!(\"\\u{2081}\\u{2082}\\u{2083}\\u{2084}\".width(false), 4u);\n+        assert_eq!(\"\\u{2081}\\u{2082}\\u{2083}\\u{2084}\".width(true), 8u);\n     }\n \n     #[test]\n@@ -1193,7 +1193,7 @@ mod tests {\n         assert_eq!(\"ab\", \"abc\".slice(0, 2));\n         assert_eq!(\"bc\", \"abc\".slice(1, 3));\n         assert_eq!(\"\", \"abc\".slice(1, 1));\n-        assert_eq!(\"\\u65e5\", \"\\u65e5\\u672c\".slice(0, 3));\n+        assert_eq!(\"\\u{65e5}\", \"\\u{65e5}\\u{672c}\".slice(0, 3));\n \n         let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n         assert_eq!(\"\u0e1b\", data.slice(0, 3));\n@@ -1320,7 +1320,7 @@ mod tests {\n         assert_eq!(\"a\".trim_left(), \"a\");\n         assert_eq!(\"    \".trim_left(), \"\");\n         assert_eq!(\"     blah\".trim_left(), \"blah\");\n-        assert_eq!(\"   \\u3000  wut\".trim_left(), \"wut\");\n+        assert_eq!(\"   \\u{3000}  wut\".trim_left(), \"wut\");\n         assert_eq!(\"hey \".trim_left(), \"hey \");\n     }\n \n@@ -1330,7 +1330,7 @@ mod tests {\n         assert_eq!(\"a\".trim_right(), \"a\");\n         assert_eq!(\"    \".trim_right(), \"\");\n         assert_eq!(\"blah     \".trim_right(), \"blah\");\n-        assert_eq!(\"wut   \\u3000  \".trim_right(), \"wut\");\n+        assert_eq!(\"wut   \\u{3000}  \".trim_right(), \"wut\");\n         assert_eq!(\" hey\".trim_right(), \" hey\");\n     }\n \n@@ -1340,15 +1340,15 @@ mod tests {\n         assert_eq!(\"a\".trim(), \"a\");\n         assert_eq!(\"    \".trim(), \"\");\n         assert_eq!(\"    blah     \".trim(), \"blah\");\n-        assert_eq!(\"\\nwut   \\u3000  \".trim(), \"wut\");\n+        assert_eq!(\"\\nwut   \\u{3000}  \".trim(), \"wut\");\n         assert_eq!(\" hey dude \".trim(), \"hey dude\");\n     }\n \n     #[test]\n     fn test_is_whitespace() {\n         assert!(\"\".is_whitespace());\n         assert!(\" \".is_whitespace());\n-        assert!(\"\\u2009\".is_whitespace()); // Thin space\n+        assert!(\"\\u{2009}\".is_whitespace()); // Thin space\n         assert!(\"  \\n\\t   \".is_whitespace());\n         assert!(!\"   _   \".is_whitespace());\n     }\n@@ -1603,13 +1603,13 @@ mod tests {\n         assert_eq!(\"a c\".escape_unicode(), String::from_str(\"\\\\x61\\\\x20\\\\x63\"));\n         assert_eq!(\"\\r\\n\\t\".escape_unicode(), String::from_str(\"\\\\x0d\\\\x0a\\\\x09\"));\n         assert_eq!(\"'\\\"\\\\\".escape_unicode(), String::from_str(\"\\\\x27\\\\x22\\\\x5c\"));\n-        assert_eq!(\"\\x00\\x01\\u00fe\\u00ff\".escape_unicode(),\n+        assert_eq!(\"\\x00\\x01\\u{fe}\\u{ff}\".escape_unicode(),\n                    String::from_str(\"\\\\x00\\\\x01\\\\u00fe\\\\u00ff\"));\n-        assert_eq!(\"\\u0100\\uffff\".escape_unicode(), String::from_str(\"\\\\u0100\\\\uffff\"));\n-        assert_eq!(\"\\U00010000\\U0010ffff\".escape_unicode(),\n+        assert_eq!(\"\\u{100}\\u{ffff}\".escape_unicode(), String::from_str(\"\\\\u0100\\\\uffff\"));\n+        assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_unicode(),\n                    String::from_str(\"\\\\U00010000\\\\U0010ffff\"));\n-        assert_eq!(\"ab\\ufb00\".escape_unicode(), String::from_str(\"\\\\x61\\\\x62\\\\ufb00\"));\n-        assert_eq!(\"\\U0001d4ea\\r\".escape_unicode(), String::from_str(\"\\\\U0001d4ea\\\\x0d\"));\n+        assert_eq!(\"ab\\u{fb00}\".escape_unicode(), String::from_str(\"\\\\x61\\\\x62\\\\ufb00\"));\n+        assert_eq!(\"\\u{1d4ea}\\r\".escape_unicode(), String::from_str(\"\\\\U0001d4ea\\\\x0d\"));\n     }\n \n     #[test]\n@@ -1618,11 +1618,11 @@ mod tests {\n         assert_eq!(\"a c\".escape_default(), String::from_str(\"a c\"));\n         assert_eq!(\"\\r\\n\\t\".escape_default(), String::from_str(\"\\\\r\\\\n\\\\t\"));\n         assert_eq!(\"'\\\"\\\\\".escape_default(), String::from_str(\"\\\\'\\\\\\\"\\\\\\\\\"));\n-        assert_eq!(\"\\u0100\\uffff\".escape_default(), String::from_str(\"\\\\u0100\\\\uffff\"));\n-        assert_eq!(\"\\U00010000\\U0010ffff\".escape_default(),\n+        assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), String::from_str(\"\\\\u0100\\\\uffff\"));\n+        assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(),\n                    String::from_str(\"\\\\U00010000\\\\U0010ffff\"));\n-        assert_eq!(\"ab\\ufb00\".escape_default(), String::from_str(\"ab\\\\ufb00\"));\n-        assert_eq!(\"\\U0001d4ea\\r\".escape_default(), String::from_str(\"\\\\U0001d4ea\\\\r\"));\n+        assert_eq!(\"ab\\u{fb00}\".escape_default(), String::from_str(\"ab\\\\ufb00\"));\n+        assert_eq!(\"\\u{1d4ea}\\r\".escape_default(), String::from_str(\"\\\\U0001d4ea\\\\r\"));\n     }\n \n     #[test]\n@@ -1845,15 +1845,15 @@ mod tests {\n             }\n         }\n         t!(\"abc\", \"abc\");\n-        t!(\"\\u1e0b\\u01c4\", \"d\\u0307\\u01c4\");\n-        t!(\"\\u2026\", \"\\u2026\");\n-        t!(\"\\u2126\", \"\\u03a9\");\n-        t!(\"\\u1e0b\\u0323\", \"d\\u0323\\u0307\");\n-        t!(\"\\u1e0d\\u0307\", \"d\\u0323\\u0307\");\n-        t!(\"a\\u0301\", \"a\\u0301\");\n-        t!(\"\\u0301a\", \"\\u0301a\");\n-        t!(\"\\ud4db\", \"\\u1111\\u1171\\u11b6\");\n-        t!(\"\\uac1c\", \"\\u1100\\u1162\");\n+        t!(\"\\u{1e0b}\\u{1c4}\", \"d\\u{307}\\u{1c4}\");\n+        t!(\"\\u{2026}\", \"\\u{2026}\");\n+        t!(\"\\u{2126}\", \"\\u{3a9}\");\n+        t!(\"\\u{1e0b}\\u{323}\", \"d\\u{323}\\u{307}\");\n+        t!(\"\\u{1e0d}\\u{307}\", \"d\\u{323}\\u{307}\");\n+        t!(\"a\\u{301}\", \"a\\u{301}\");\n+        t!(\"\\u{301}a\", \"\\u{301}a\");\n+        t!(\"\\u{d4db}\", \"\\u{1111}\\u{1171}\\u{11b6}\");\n+        t!(\"\\u{ac1c}\", \"\\u{1100}\\u{1162}\");\n     }\n \n     #[test]\n@@ -1864,15 +1864,15 @@ mod tests {\n             }\n         }\n         t!(\"abc\", \"abc\");\n-        t!(\"\\u1e0b\\u01c4\", \"d\\u0307DZ\\u030c\");\n-        t!(\"\\u2026\", \"...\");\n-        t!(\"\\u2126\", \"\\u03a9\");\n-        t!(\"\\u1e0b\\u0323\", \"d\\u0323\\u0307\");\n-        t!(\"\\u1e0d\\u0307\", \"d\\u0323\\u0307\");\n-        t!(\"a\\u0301\", \"a\\u0301\");\n-        t!(\"\\u0301a\", \"\\u0301a\");\n-        t!(\"\\ud4db\", \"\\u1111\\u1171\\u11b6\");\n-        t!(\"\\uac1c\", \"\\u1100\\u1162\");\n+        t!(\"\\u{1e0b}\\u{1c4}\", \"d\\u{307}DZ\\u{30c}\");\n+        t!(\"\\u{2026}\", \"...\");\n+        t!(\"\\u{2126}\", \"\\u{3a9}\");\n+        t!(\"\\u{1e0b}\\u{323}\", \"d\\u{323}\\u{307}\");\n+        t!(\"\\u{1e0d}\\u{307}\", \"d\\u{323}\\u{307}\");\n+        t!(\"a\\u{301}\", \"a\\u{301}\");\n+        t!(\"\\u{301}a\", \"\\u{301}a\");\n+        t!(\"\\u{d4db}\", \"\\u{1111}\\u{1171}\\u{11b6}\");\n+        t!(\"\\u{ac1c}\", \"\\u{1100}\\u{1162}\");\n     }\n \n     #[test]\n@@ -1883,16 +1883,16 @@ mod tests {\n             }\n         }\n         t!(\"abc\", \"abc\");\n-        t!(\"\\u1e0b\\u01c4\", \"\\u1e0b\\u01c4\");\n-        t!(\"\\u2026\", \"\\u2026\");\n-        t!(\"\\u2126\", \"\\u03a9\");\n-        t!(\"\\u1e0b\\u0323\", \"\\u1e0d\\u0307\");\n-        t!(\"\\u1e0d\\u0307\", \"\\u1e0d\\u0307\");\n-        t!(\"a\\u0301\", \"\\u00e1\");\n-        t!(\"\\u0301a\", \"\\u0301a\");\n-        t!(\"\\ud4db\", \"\\ud4db\");\n-        t!(\"\\uac1c\", \"\\uac1c\");\n-        t!(\"a\\u0300\\u0305\\u0315\\u05aeb\", \"\\u00e0\\u05ae\\u0305\\u0315b\");\n+        t!(\"\\u{1e0b}\\u{1c4}\", \"\\u{1e0b}\\u{1c4}\");\n+        t!(\"\\u{2026}\", \"\\u{2026}\");\n+        t!(\"\\u{2126}\", \"\\u{3a9}\");\n+        t!(\"\\u{1e0b}\\u{323}\", \"\\u{1e0d}\\u{307}\");\n+        t!(\"\\u{1e0d}\\u{307}\", \"\\u{1e0d}\\u{307}\");\n+        t!(\"a\\u{301}\", \"\\u{e1}\");\n+        t!(\"\\u{301}a\", \"\\u{301}a\");\n+        t!(\"\\u{d4db}\", \"\\u{d4db}\");\n+        t!(\"\\u{ac1c}\", \"\\u{ac1c}\");\n+        t!(\"a\\u{300}\\u{305}\\u{315}\\u{5ae}b\", \"\\u{e0}\\u{5ae}\\u{305}\\u{315}b\");\n     }\n \n     #[test]\n@@ -1903,16 +1903,16 @@ mod tests {\n             }\n         }\n         t!(\"abc\", \"abc\");\n-        t!(\"\\u1e0b\\u01c4\", \"\\u1e0bD\\u017d\");\n-        t!(\"\\u2026\", \"...\");\n-        t!(\"\\u2126\", \"\\u03a9\");\n-        t!(\"\\u1e0b\\u0323\", \"\\u1e0d\\u0307\");\n-        t!(\"\\u1e0d\\u0307\", \"\\u1e0d\\u0307\");\n-        t!(\"a\\u0301\", \"\\u00e1\");\n-        t!(\"\\u0301a\", \"\\u0301a\");\n-        t!(\"\\ud4db\", \"\\ud4db\");\n-        t!(\"\\uac1c\", \"\\uac1c\");\n-        t!(\"a\\u0300\\u0305\\u0315\\u05aeb\", \"\\u00e0\\u05ae\\u0305\\u0315b\");\n+        t!(\"\\u{1e0b}\\u{1c4}\", \"\\u{1e0b}D\\u{17d}\");\n+        t!(\"\\u{2026}\", \"...\");\n+        t!(\"\\u{2126}\", \"\\u{3a9}\");\n+        t!(\"\\u{1e0b}\\u{323}\", \"\\u{1e0d}\\u{307}\");\n+        t!(\"\\u{1e0d}\\u{307}\", \"\\u{1e0d}\\u{307}\");\n+        t!(\"a\\u{301}\", \"\\u{e1}\");\n+        t!(\"\\u{301}a\", \"\\u{301}a\");\n+        t!(\"\\u{d4db}\", \"\\u{d4db}\");\n+        t!(\"\\u{ac1c}\", \"\\u{ac1c}\");\n+        t!(\"a\\u{300}\\u{305}\\u{315}\\u{5ae}b\", \"\\u{e0}\\u{5ae}\\u{305}\\u{315}b\");\n     }\n \n     #[test]\n@@ -1932,238 +1932,361 @@ mod tests {\n         // official Unicode test data\n         // from http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n         let test_same: [(_, &[_]), .. 325] = [\n-            (\"\\u0020\\u0020\", &[\"\\u0020\", \"\\u0020\"]), (\"\\u0020\\u0308\\u0020\", &[\"\\u0020\\u0308\",\n-            \"\\u0020\"]), (\"\\u0020\\u000D\", &[\"\\u0020\", \"\\u000D\"]), (\"\\u0020\\u0308\\u000D\",\n-            &[\"\\u0020\\u0308\", \"\\u000D\"]), (\"\\u0020\\u000A\", &[\"\\u0020\", \"\\u000A\"]),\n-            (\"\\u0020\\u0308\\u000A\", &[\"\\u0020\\u0308\", \"\\u000A\"]), (\"\\u0020\\u0001\", &[\"\\u0020\",\n-            \"\\u0001\"]), (\"\\u0020\\u0308\\u0001\", &[\"\\u0020\\u0308\", \"\\u0001\"]), (\"\\u0020\\u0300\",\n-            &[\"\\u0020\\u0300\"]), (\"\\u0020\\u0308\\u0300\", &[\"\\u0020\\u0308\\u0300\"]), (\"\\u0020\\u1100\",\n-            &[\"\\u0020\", \"\\u1100\"]), (\"\\u0020\\u0308\\u1100\", &[\"\\u0020\\u0308\", \"\\u1100\"]),\n-            (\"\\u0020\\u1160\", &[\"\\u0020\", \"\\u1160\"]), (\"\\u0020\\u0308\\u1160\", &[\"\\u0020\\u0308\",\n-            \"\\u1160\"]), (\"\\u0020\\u11A8\", &[\"\\u0020\", \"\\u11A8\"]), (\"\\u0020\\u0308\\u11A8\",\n-            &[\"\\u0020\\u0308\", \"\\u11A8\"]), (\"\\u0020\\uAC00\", &[\"\\u0020\", \"\\uAC00\"]),\n-            (\"\\u0020\\u0308\\uAC00\", &[\"\\u0020\\u0308\", \"\\uAC00\"]), (\"\\u0020\\uAC01\", &[\"\\u0020\",\n-            \"\\uAC01\"]), (\"\\u0020\\u0308\\uAC01\", &[\"\\u0020\\u0308\", \"\\uAC01\"]), (\"\\u0020\\U0001F1E6\",\n-            &[\"\\u0020\", \"\\U0001F1E6\"]), (\"\\u0020\\u0308\\U0001F1E6\", &[\"\\u0020\\u0308\",\n-            \"\\U0001F1E6\"]), (\"\\u0020\\u0378\", &[\"\\u0020\", \"\\u0378\"]), (\"\\u0020\\u0308\\u0378\",\n-            &[\"\\u0020\\u0308\", \"\\u0378\"]), (\"\\u000D\\u0020\", &[\"\\u000D\", \"\\u0020\"]),\n-            (\"\\u000D\\u0308\\u0020\", &[\"\\u000D\", \"\\u0308\", \"\\u0020\"]), (\"\\u000D\\u000D\", &[\"\\u000D\",\n-            \"\\u000D\"]), (\"\\u000D\\u0308\\u000D\", &[\"\\u000D\", \"\\u0308\", \"\\u000D\"]), (\"\\u000D\\u000A\",\n-            &[\"\\u000D\\u000A\"]), (\"\\u000D\\u0308\\u000A\", &[\"\\u000D\", \"\\u0308\", \"\\u000A\"]),\n-            (\"\\u000D\\u0001\", &[\"\\u000D\", \"\\u0001\"]), (\"\\u000D\\u0308\\u0001\", &[\"\\u000D\", \"\\u0308\",\n-            \"\\u0001\"]), (\"\\u000D\\u0300\", &[\"\\u000D\", \"\\u0300\"]), (\"\\u000D\\u0308\\u0300\",\n-            &[\"\\u000D\", \"\\u0308\\u0300\"]), (\"\\u000D\\u0903\", &[\"\\u000D\", \"\\u0903\"]),\n-            (\"\\u000D\\u1100\", &[\"\\u000D\", \"\\u1100\"]), (\"\\u000D\\u0308\\u1100\", &[\"\\u000D\", \"\\u0308\",\n-            \"\\u1100\"]), (\"\\u000D\\u1160\", &[\"\\u000D\", \"\\u1160\"]), (\"\\u000D\\u0308\\u1160\",\n-            &[\"\\u000D\", \"\\u0308\", \"\\u1160\"]), (\"\\u000D\\u11A8\", &[\"\\u000D\", \"\\u11A8\"]),\n-            (\"\\u000D\\u0308\\u11A8\", &[\"\\u000D\", \"\\u0308\", \"\\u11A8\"]), (\"\\u000D\\uAC00\", &[\"\\u000D\",\n-            \"\\uAC00\"]), (\"\\u000D\\u0308\\uAC00\", &[\"\\u000D\", \"\\u0308\", \"\\uAC00\"]), (\"\\u000D\\uAC01\",\n-            &[\"\\u000D\", \"\\uAC01\"]), (\"\\u000D\\u0308\\uAC01\", &[\"\\u000D\", \"\\u0308\", \"\\uAC01\"]),\n-            (\"\\u000D\\U0001F1E6\", &[\"\\u000D\", \"\\U0001F1E6\"]), (\"\\u000D\\u0308\\U0001F1E6\",\n-            &[\"\\u000D\", \"\\u0308\", \"\\U0001F1E6\"]), (\"\\u000D\\u0378\", &[\"\\u000D\", \"\\u0378\"]),\n-            (\"\\u000D\\u0308\\u0378\", &[\"\\u000D\", \"\\u0308\", \"\\u0378\"]), (\"\\u000A\\u0020\", &[\"\\u000A\",\n-            \"\\u0020\"]), (\"\\u000A\\u0308\\u0020\", &[\"\\u000A\", \"\\u0308\", \"\\u0020\"]), (\"\\u000A\\u000D\",\n-            &[\"\\u000A\", \"\\u000D\"]), (\"\\u000A\\u0308\\u000D\", &[\"\\u000A\", \"\\u0308\", \"\\u000D\"]),\n-            (\"\\u000A\\u000A\", &[\"\\u000A\", \"\\u000A\"]), (\"\\u000A\\u0308\\u000A\", &[\"\\u000A\", \"\\u0308\",\n-            \"\\u000A\"]), (\"\\u000A\\u0001\", &[\"\\u000A\", \"\\u0001\"]), (\"\\u000A\\u0308\\u0001\",\n-            &[\"\\u000A\", \"\\u0308\", \"\\u0001\"]), (\"\\u000A\\u0300\", &[\"\\u000A\", \"\\u0300\"]),\n-            (\"\\u000A\\u0308\\u0300\", &[\"\\u000A\", \"\\u0308\\u0300\"]), (\"\\u000A\\u0903\", &[\"\\u000A\",\n-            \"\\u0903\"]), (\"\\u000A\\u1100\", &[\"\\u000A\", \"\\u1100\"]), (\"\\u000A\\u0308\\u1100\",\n-            &[\"\\u000A\", \"\\u0308\", \"\\u1100\"]), (\"\\u000A\\u1160\", &[\"\\u000A\", \"\\u1160\"]),\n-            (\"\\u000A\\u0308\\u1160\", &[\"\\u000A\", \"\\u0308\", \"\\u1160\"]), (\"\\u000A\\u11A8\", &[\"\\u000A\",\n-            \"\\u11A8\"]), (\"\\u000A\\u0308\\u11A8\", &[\"\\u000A\", \"\\u0308\", \"\\u11A8\"]), (\"\\u000A\\uAC00\",\n-            &[\"\\u000A\", \"\\uAC00\"]), (\"\\u000A\\u0308\\uAC00\", &[\"\\u000A\", \"\\u0308\", \"\\uAC00\"]),\n-            (\"\\u000A\\uAC01\", &[\"\\u000A\", \"\\uAC01\"]), (\"\\u000A\\u0308\\uAC01\", &[\"\\u000A\", \"\\u0308\",\n-            \"\\uAC01\"]), (\"\\u000A\\U0001F1E6\", &[\"\\u000A\", \"\\U0001F1E6\"]),\n-            (\"\\u000A\\u0308\\U0001F1E6\", &[\"\\u000A\", \"\\u0308\", \"\\U0001F1E6\"]), (\"\\u000A\\u0378\",\n-            &[\"\\u000A\", \"\\u0378\"]), (\"\\u000A\\u0308\\u0378\", &[\"\\u000A\", \"\\u0308\", \"\\u0378\"]),\n-            (\"\\u0001\\u0020\", &[\"\\u0001\", \"\\u0020\"]), (\"\\u0001\\u0308\\u0020\", &[\"\\u0001\", \"\\u0308\",\n-            \"\\u0020\"]), (\"\\u0001\\u000D\", &[\"\\u0001\", \"\\u000D\"]), (\"\\u0001\\u0308\\u000D\",\n-            &[\"\\u0001\", \"\\u0308\", \"\\u000D\"]), (\"\\u0001\\u000A\", &[\"\\u0001\", \"\\u000A\"]),\n-            (\"\\u0001\\u0308\\u000A\", &[\"\\u0001\", \"\\u0308\", \"\\u000A\"]), (\"\\u0001\\u0001\", &[\"\\u0001\",\n-            \"\\u0001\"]), (\"\\u0001\\u0308\\u0001\", &[\"\\u0001\", \"\\u0308\", \"\\u0001\"]), (\"\\u0001\\u0300\",\n-            &[\"\\u0001\", \"\\u0300\"]), (\"\\u0001\\u0308\\u0300\", &[\"\\u0001\", \"\\u0308\\u0300\"]),\n-            (\"\\u0001\\u0903\", &[\"\\u0001\", \"\\u0903\"]), (\"\\u0001\\u1100\", &[\"\\u0001\", \"\\u1100\"]),\n-            (\"\\u0001\\u0308\\u1100\", &[\"\\u0001\", \"\\u0308\", \"\\u1100\"]), (\"\\u0001\\u1160\", &[\"\\u0001\",\n-            \"\\u1160\"]), (\"\\u0001\\u0308\\u1160\", &[\"\\u0001\", \"\\u0308\", \"\\u1160\"]), (\"\\u0001\\u11A8\",\n-            &[\"\\u0001\", \"\\u11A8\"]), (\"\\u0001\\u0308\\u11A8\", &[\"\\u0001\", \"\\u0308\", \"\\u11A8\"]),\n-            (\"\\u0001\\uAC00\", &[\"\\u0001\", \"\\uAC00\"]), (\"\\u0001\\u0308\\uAC00\", &[\"\\u0001\", \"\\u0308\",\n-            \"\\uAC00\"]), (\"\\u0001\\uAC01\", &[\"\\u0001\", \"\\uAC01\"]), (\"\\u0001\\u0308\\uAC01\",\n-            &[\"\\u0001\", \"\\u0308\", \"\\uAC01\"]), (\"\\u0001\\U0001F1E6\", &[\"\\u0001\", \"\\U0001F1E6\"]),\n-            (\"\\u0001\\u0308\\U0001F1E6\", &[\"\\u0001\", \"\\u0308\", \"\\U0001F1E6\"]), (\"\\u0001\\u0378\",\n-            &[\"\\u0001\", \"\\u0378\"]), (\"\\u0001\\u0308\\u0378\", &[\"\\u0001\", \"\\u0308\", \"\\u0378\"]),\n-            (\"\\u0300\\u0020\", &[\"\\u0300\", \"\\u0020\"]), (\"\\u0300\\u0308\\u0020\", &[\"\\u0300\\u0308\",\n-            \"\\u0020\"]), (\"\\u0300\\u000D\", &[\"\\u0300\", \"\\u000D\"]), (\"\\u0300\\u0308\\u000D\",\n-            &[\"\\u0300\\u0308\", \"\\u000D\"]), (\"\\u0300\\u000A\", &[\"\\u0300\", \"\\u000A\"]),\n-            (\"\\u0300\\u0308\\u000A\", &[\"\\u0300\\u0308\", \"\\u000A\"]), (\"\\u0300\\u0001\", &[\"\\u0300\",\n-            \"\\u0001\"]), (\"\\u0300\\u0308\\u0001\", &[\"\\u0300\\u0308\", \"\\u0001\"]), (\"\\u0300\\u0300\",\n-            &[\"\\u0300\\u0300\"]), (\"\\u0300\\u0308\\u0300\", &[\"\\u0300\\u0308\\u0300\"]), (\"\\u0300\\u1100\",\n-            &[\"\\u0300\", \"\\u1100\"]), (\"\\u0300\\u0308\\u1100\", &[\"\\u0300\\u0308\", \"\\u1100\"]),\n-            (\"\\u0300\\u1160\", &[\"\\u0300\", \"\\u1160\"]), (\"\\u0300\\u0308\\u1160\", &[\"\\u0300\\u0308\",\n-            \"\\u1160\"]), (\"\\u0300\\u11A8\", &[\"\\u0300\", \"\\u11A8\"]), (\"\\u0300\\u0308\\u11A8\",\n-            &[\"\\u0300\\u0308\", \"\\u11A8\"]), (\"\\u0300\\uAC00\", &[\"\\u0300\", \"\\uAC00\"]),\n-            (\"\\u0300\\u0308\\uAC00\", &[\"\\u0300\\u0308\", \"\\uAC00\"]), (\"\\u0300\\uAC01\", &[\"\\u0300\",\n-            \"\\uAC01\"]), (\"\\u0300\\u0308\\uAC01\", &[\"\\u0300\\u0308\", \"\\uAC01\"]), (\"\\u0300\\U0001F1E6\",\n-            &[\"\\u0300\", \"\\U0001F1E6\"]), (\"\\u0300\\u0308\\U0001F1E6\", &[\"\\u0300\\u0308\",\n-            \"\\U0001F1E6\"]), (\"\\u0300\\u0378\", &[\"\\u0300\", \"\\u0378\"]), (\"\\u0300\\u0308\\u0378\",\n-            &[\"\\u0300\\u0308\", \"\\u0378\"]), (\"\\u0903\\u0020\", &[\"\\u0903\", \"\\u0020\"]),\n-            (\"\\u0903\\u0308\\u0020\", &[\"\\u0903\\u0308\", \"\\u0020\"]), (\"\\u0903\\u000D\", &[\"\\u0903\",\n-            \"\\u000D\"]), (\"\\u0903\\u0308\\u000D\", &[\"\\u0903\\u0308\", \"\\u000D\"]), (\"\\u0903\\u000A\",\n-            &[\"\\u0903\", \"\\u000A\"]), (\"\\u0903\\u0308\\u000A\", &[\"\\u0903\\u0308\", \"\\u000A\"]),\n-            (\"\\u0903\\u0001\", &[\"\\u0903\", \"\\u0001\"]), (\"\\u0903\\u0308\\u0001\", &[\"\\u0903\\u0308\",\n-            \"\\u0001\"]), (\"\\u0903\\u0300\", &[\"\\u0903\\u0300\"]), (\"\\u0903\\u0308\\u0300\",\n-            &[\"\\u0903\\u0308\\u0300\"]), (\"\\u0903\\u1100\", &[\"\\u0903\", \"\\u1100\"]),\n-            (\"\\u0903\\u0308\\u1100\", &[\"\\u0903\\u0308\", \"\\u1100\"]), (\"\\u0903\\u1160\", &[\"\\u0903\",\n-            \"\\u1160\"]), (\"\\u0903\\u0308\\u1160\", &[\"\\u0903\\u0308\", \"\\u1160\"]), (\"\\u0903\\u11A8\",\n-            &[\"\\u0903\", \"\\u11A8\"]), (\"\\u0903\\u0308\\u11A8\", &[\"\\u0903\\u0308\", \"\\u11A8\"]),\n-            (\"\\u0903\\uAC00\", &[\"\\u0903\", \"\\uAC00\"]), (\"\\u0903\\u0308\\uAC00\", &[\"\\u0903\\u0308\",\n-            \"\\uAC00\"]), (\"\\u0903\\uAC01\", &[\"\\u0903\", \"\\uAC01\"]), (\"\\u0903\\u0308\\uAC01\",\n-            &[\"\\u0903\\u0308\", \"\\uAC01\"]), (\"\\u0903\\U0001F1E6\", &[\"\\u0903\", \"\\U0001F1E6\"]),\n-            (\"\\u0903\\u0308\\U0001F1E6\", &[\"\\u0903\\u0308\", \"\\U0001F1E6\"]), (\"\\u0903\\u0378\",\n-            &[\"\\u0903\", \"\\u0378\"]), (\"\\u0903\\u0308\\u0378\", &[\"\\u0903\\u0308\", \"\\u0378\"]),\n-            (\"\\u1100\\u0020\", &[\"\\u1100\", \"\\u0020\"]), (\"\\u1100\\u0308\\u0020\", &[\"\\u1100\\u0308\",\n-            \"\\u0020\"]), (\"\\u1100\\u000D\", &[\"\\u1100\", \"\\u000D\"]), (\"\\u1100\\u0308\\u000D\",\n-            &[\"\\u1100\\u0308\", \"\\u000D\"]), (\"\\u1100\\u000A\", &[\"\\u1100\", \"\\u000A\"]),\n-            (\"\\u1100\\u0308\\u000A\", &[\"\\u1100\\u0308\", \"\\u000A\"]), (\"\\u1100\\u0001\", &[\"\\u1100\",\n-            \"\\u0001\"]), (\"\\u1100\\u0308\\u0001\", &[\"\\u1100\\u0308\", \"\\u0001\"]), (\"\\u1100\\u0300\",\n-            &[\"\\u1100\\u0300\"]), (\"\\u1100\\u0308\\u0300\", &[\"\\u1100\\u0308\\u0300\"]), (\"\\u1100\\u1100\",\n-            &[\"\\u1100\\u1100\"]), (\"\\u1100\\u0308\\u1100\", &[\"\\u1100\\u0308\", \"\\u1100\"]),\n-            (\"\\u1100\\u1160\", &[\"\\u1100\\u1160\"]), (\"\\u1100\\u0308\\u1160\", &[\"\\u1100\\u0308\",\n-            \"\\u1160\"]), (\"\\u1100\\u11A8\", &[\"\\u1100\", \"\\u11A8\"]), (\"\\u1100\\u0308\\u11A8\",\n-            &[\"\\u1100\\u0308\", \"\\u11A8\"]), (\"\\u1100\\uAC00\", &[\"\\u1100\\uAC00\"]),\n-            (\"\\u1100\\u0308\\uAC00\", &[\"\\u1100\\u0308\", \"\\uAC00\"]), (\"\\u1100\\uAC01\",\n-            &[\"\\u1100\\uAC01\"]), (\"\\u1100\\u0308\\uAC01\", &[\"\\u1100\\u0308\", \"\\uAC01\"]),\n-            (\"\\u1100\\U0001F1E6\", &[\"\\u1100\", \"\\U0001F1E6\"]), (\"\\u1100\\u0308\\U0001F1E6\",\n-            &[\"\\u1100\\u0308\", \"\\U0001F1E6\"]), (\"\\u1100\\u0378\", &[\"\\u1100\", \"\\u0378\"]),\n-            (\"\\u1100\\u0308\\u0378\", &[\"\\u1100\\u0308\", \"\\u0378\"]), (\"\\u1160\\u0020\", &[\"\\u1160\",\n-            \"\\u0020\"]), (\"\\u1160\\u0308\\u0020\", &[\"\\u1160\\u0308\", \"\\u0020\"]), (\"\\u1160\\u000D\",\n-            &[\"\\u1160\", \"\\u000D\"]), (\"\\u1160\\u0308\\u000D\", &[\"\\u1160\\u0308\", \"\\u000D\"]),\n-            (\"\\u1160\\u000A\", &[\"\\u1160\", \"\\u000A\"]), (\"\\u1160\\u0308\\u000A\", &[\"\\u1160\\u0308\",\n-            \"\\u000A\"]), (\"\\u1160\\u0001\", &[\"\\u1160\", \"\\u0001\"]), (\"\\u1160\\u0308\\u0001\",\n-            &[\"\\u1160\\u0308\", \"\\u0001\"]), (\"\\u1160\\u0300\", &[\"\\u1160\\u0300\"]),\n-            (\"\\u1160\\u0308\\u0300\", &[\"\\u1160\\u0308\\u0300\"]), (\"\\u1160\\u1100\", &[\"\\u1160\",\n-            \"\\u1100\"]), (\"\\u1160\\u0308\\u1100\", &[\"\\u1160\\u0308\", \"\\u1100\"]), (\"\\u1160\\u1160\",\n-            &[\"\\u1160\\u1160\"]), (\"\\u1160\\u0308\\u1160\", &[\"\\u1160\\u0308\", \"\\u1160\"]),\n-            (\"\\u1160\\u11A8\", &[\"\\u1160\\u11A8\"]), (\"\\u1160\\u0308\\u11A8\", &[\"\\u1160\\u0308\",\n-            \"\\u11A8\"]), (\"\\u1160\\uAC00\", &[\"\\u1160\", \"\\uAC00\"]), (\"\\u1160\\u0308\\uAC00\",\n-            &[\"\\u1160\\u0308\", \"\\uAC00\"]), (\"\\u1160\\uAC01\", &[\"\\u1160\", \"\\uAC01\"]),\n-            (\"\\u1160\\u0308\\uAC01\", &[\"\\u1160\\u0308\", \"\\uAC01\"]), (\"\\u1160\\U0001F1E6\", &[\"\\u1160\",\n-            \"\\U0001F1E6\"]), (\"\\u1160\\u0308\\U0001F1E6\", &[\"\\u1160\\u0308\", \"\\U0001F1E6\"]),\n-            (\"\\u1160\\u0378\", &[\"\\u1160\", \"\\u0378\"]), (\"\\u1160\\u0308\\u0378\", &[\"\\u1160\\u0308\",\n-            \"\\u0378\"]), (\"\\u11A8\\u0020\", &[\"\\u11A8\", \"\\u0020\"]), (\"\\u11A8\\u0308\\u0020\",\n-            &[\"\\u11A8\\u0308\", \"\\u0020\"]), (\"\\u11A8\\u000D\", &[\"\\u11A8\", \"\\u000D\"]),\n-            (\"\\u11A8\\u0308\\u000D\", &[\"\\u11A8\\u0308\", \"\\u000D\"]), (\"\\u11A8\\u000A\", &[\"\\u11A8\",\n-            \"\\u000A\"]), (\"\\u11A8\\u0308\\u000A\", &[\"\\u11A8\\u0308\", \"\\u000A\"]), (\"\\u11A8\\u0001\",\n-            &[\"\\u11A8\", \"\\u0001\"]), (\"\\u11A8\\u0308\\u0001\", &[\"\\u11A8\\u0308\", \"\\u0001\"]),\n-            (\"\\u11A8\\u0300\", &[\"\\u11A8\\u0300\"]), (\"\\u11A8\\u0308\\u0300\", &[\"\\u11A8\\u0308\\u0300\"]),\n-            (\"\\u11A8\\u1100\", &[\"\\u11A8\", \"\\u1100\"]), (\"\\u11A8\\u0308\\u1100\", &[\"\\u11A8\\u0308\",\n-            \"\\u1100\"]), (\"\\u11A8\\u1160\", &[\"\\u11A8\", \"\\u1160\"]), (\"\\u11A8\\u0308\\u1160\",\n-            &[\"\\u11A8\\u0308\", \"\\u1160\"]), (\"\\u11A8\\u11A8\", &[\"\\u11A8\\u11A8\"]),\n-            (\"\\u11A8\\u0308\\u11A8\", &[\"\\u11A8\\u0308\", \"\\u11A8\"]), (\"\\u11A8\\uAC00\", &[\"\\u11A8\",\n-            \"\\uAC00\"]), (\"\\u11A8\\u0308\\uAC00\", &[\"\\u11A8\\u0308\", \"\\uAC00\"]), (\"\\u11A8\\uAC01\",\n-            &[\"\\u11A8\", \"\\uAC01\"]), (\"\\u11A8\\u0308\\uAC01\", &[\"\\u11A8\\u0308\", \"\\uAC01\"]),\n-            (\"\\u11A8\\U0001F1E6\", &[\"\\u11A8\", \"\\U0001F1E6\"]), (\"\\u11A8\\u0308\\U0001F1E6\",\n-            &[\"\\u11A8\\u0308\", \"\\U0001F1E6\"]), (\"\\u11A8\\u0378\", &[\"\\u11A8\", \"\\u0378\"]),\n-            (\"\\u11A8\\u0308\\u0378\", &[\"\\u11A8\\u0308\", \"\\u0378\"]), (\"\\uAC00\\u0020\", &[\"\\uAC00\",\n-            \"\\u0020\"]), (\"\\uAC00\\u0308\\u0020\", &[\"\\uAC00\\u0308\", \"\\u0020\"]), (\"\\uAC00\\u000D\",\n-            &[\"\\uAC00\", \"\\u000D\"]), (\"\\uAC00\\u0308\\u000D\", &[\"\\uAC00\\u0308\", \"\\u000D\"]),\n-            (\"\\uAC00\\u000A\", &[\"\\uAC00\", \"\\u000A\"]), (\"\\uAC00\\u0308\\u000A\", &[\"\\uAC00\\u0308\",\n-            \"\\u000A\"]), (\"\\uAC00\\u0001\", &[\"\\uAC00\", \"\\u0001\"]), (\"\\uAC00\\u0308\\u0001\",\n-            &[\"\\uAC00\\u0308\", \"\\u0001\"]), (\"\\uAC00\\u0300\", &[\"\\uAC00\\u0300\"]),\n-            (\"\\uAC00\\u0308\\u0300\", &[\"\\uAC00\\u0308\\u0300\"]), (\"\\uAC00\\u1100\", &[\"\\uAC00\",\n-            \"\\u1100\"]), (\"\\uAC00\\u0308\\u1100\", &[\"\\uAC00\\u0308\", \"\\u1100\"]), (\"\\uAC00\\u1160\",\n-            &[\"\\uAC00\\u1160\"]), (\"\\uAC00\\u0308\\u1160\", &[\"\\uAC00\\u0308\", \"\\u1160\"]),\n-            (\"\\uAC00\\u11A8\", &[\"\\uAC00\\u11A8\"]), (\"\\uAC00\\u0308\\u11A8\", &[\"\\uAC00\\u0308\",\n-            \"\\u11A8\"]), (\"\\uAC00\\uAC00\", &[\"\\uAC00\", \"\\uAC00\"]), (\"\\uAC00\\u0308\\uAC00\",\n-            &[\"\\uAC00\\u0308\", \"\\uAC00\"]), (\"\\uAC00\\uAC01\", &[\"\\uAC00\", \"\\uAC01\"]),\n-            (\"\\uAC00\\u0308\\uAC01\", &[\"\\uAC00\\u0308\", \"\\uAC01\"]), (\"\\uAC00\\U0001F1E6\", &[\"\\uAC00\",\n-            \"\\U0001F1E6\"]), (\"\\uAC00\\u0308\\U0001F1E6\", &[\"\\uAC00\\u0308\", \"\\U0001F1E6\"]),\n-            (\"\\uAC00\\u0378\", &[\"\\uAC00\", \"\\u0378\"]), (\"\\uAC00\\u0308\\u0378\", &[\"\\uAC00\\u0308\",\n-            \"\\u0378\"]), (\"\\uAC01\\u0020\", &[\"\\uAC01\", \"\\u0020\"]), (\"\\uAC01\\u0308\\u0020\",\n-            &[\"\\uAC01\\u0308\", \"\\u0020\"]), (\"\\uAC01\\u000D\", &[\"\\uAC01\", \"\\u000D\"]),\n-            (\"\\uAC01\\u0308\\u000D\", &[\"\\uAC01\\u0308\", \"\\u000D\"]), (\"\\uAC01\\u000A\", &[\"\\uAC01\",\n-            \"\\u000A\"]), (\"\\uAC01\\u0308\\u000A\", &[\"\\uAC01\\u0308\", \"\\u000A\"]), (\"\\uAC01\\u0001\",\n-            &[\"\\uAC01\", \"\\u0001\"]), (\"\\uAC01\\u0308\\u0001\", &[\"\\uAC01\\u0308\", \"\\u0001\"]),\n-            (\"\\uAC01\\u0300\", &[\"\\uAC01\\u0300\"]), (\"\\uAC01\\u0308\\u0300\", &[\"\\uAC01\\u0308\\u0300\"]),\n-            (\"\\uAC01\\u1100\", &[\"\\uAC01\", \"\\u1100\"]), (\"\\uAC01\\u0308\\u1100\", &[\"\\uAC01\\u0308\",\n-            \"\\u1100\"]), (\"\\uAC01\\u1160\", &[\"\\uAC01\", \"\\u1160\"]), (\"\\uAC01\\u0308\\u1160\",\n-            &[\"\\uAC01\\u0308\", \"\\u1160\"]), (\"\\uAC01\\u11A8\", &[\"\\uAC01\\u11A8\"]),\n-            (\"\\uAC01\\u0308\\u11A8\", &[\"\\uAC01\\u0308\", \"\\u11A8\"]), (\"\\uAC01\\uAC00\", &[\"\\uAC01\",\n-            \"\\uAC00\"]), (\"\\uAC01\\u0308\\uAC00\", &[\"\\uAC01\\u0308\", \"\\uAC00\"]), (\"\\uAC01\\uAC01\",\n-            &[\"\\uAC01\", \"\\uAC01\"]), (\"\\uAC01\\u0308\\uAC01\", &[\"\\uAC01\\u0308\", \"\\uAC01\"]),\n-            (\"\\uAC01\\U0001F1E6\", &[\"\\uAC01\", \"\\U0001F1E6\"]), (\"\\uAC01\\u0308\\U0001F1E6\",\n-            &[\"\\uAC01\\u0308\", \"\\U0001F1E6\"]), (\"\\uAC01\\u0378\", &[\"\\uAC01\", \"\\u0378\"]),\n-            (\"\\uAC01\\u0308\\u0378\", &[\"\\uAC01\\u0308\", \"\\u0378\"]), (\"\\U0001F1E6\\u0020\",\n-            &[\"\\U0001F1E6\", \"\\u0020\"]), (\"\\U0001F1E6\\u0308\\u0020\", &[\"\\U0001F1E6\\u0308\",\n-            \"\\u0020\"]), (\"\\U0001F1E6\\u000D\", &[\"\\U0001F1E6\", \"\\u000D\"]),\n-            (\"\\U0001F1E6\\u0308\\u000D\", &[\"\\U0001F1E6\\u0308\", \"\\u000D\"]), (\"\\U0001F1E6\\u000A\",\n-            &[\"\\U0001F1E6\", \"\\u000A\"]), (\"\\U0001F1E6\\u0308\\u000A\", &[\"\\U0001F1E6\\u0308\",\n-            \"\\u000A\"]), (\"\\U0001F1E6\\u0001\", &[\"\\U0001F1E6\", \"\\u0001\"]),\n-            (\"\\U0001F1E6\\u0308\\u0001\", &[\"\\U0001F1E6\\u0308\", \"\\u0001\"]), (\"\\U0001F1E6\\u0300\",\n-            &[\"\\U0001F1E6\\u0300\"]), (\"\\U0001F1E6\\u0308\\u0300\", &[\"\\U0001F1E6\\u0308\\u0300\"]),\n-            (\"\\U0001F1E6\\u1100\", &[\"\\U0001F1E6\", \"\\u1100\"]), (\"\\U0001F1E6\\u0308\\u1100\",\n-            &[\"\\U0001F1E6\\u0308\", \"\\u1100\"]), (\"\\U0001F1E6\\u1160\", &[\"\\U0001F1E6\", \"\\u1160\"]),\n-            (\"\\U0001F1E6\\u0308\\u1160\", &[\"\\U0001F1E6\\u0308\", \"\\u1160\"]), (\"\\U0001F1E6\\u11A8\",\n-            &[\"\\U0001F1E6\", \"\\u11A8\"]), (\"\\U0001F1E6\\u0308\\u11A8\", &[\"\\U0001F1E6\\u0308\",\n-            \"\\u11A8\"]), (\"\\U0001F1E6\\uAC00\", &[\"\\U0001F1E6\", \"\\uAC00\"]),\n-            (\"\\U0001F1E6\\u0308\\uAC00\", &[\"\\U0001F1E6\\u0308\", \"\\uAC00\"]), (\"\\U0001F1E6\\uAC01\",\n-            &[\"\\U0001F1E6\", \"\\uAC01\"]), (\"\\U0001F1E6\\u0308\\uAC01\", &[\"\\U0001F1E6\\u0308\",\n-            \"\\uAC01\"]), (\"\\U0001F1E6\\U0001F1E6\", &[\"\\U0001F1E6\\U0001F1E6\"]),\n-            (\"\\U0001F1E6\\u0308\\U0001F1E6\", &[\"\\U0001F1E6\\u0308\", \"\\U0001F1E6\"]),\n-            (\"\\U0001F1E6\\u0378\", &[\"\\U0001F1E6\", \"\\u0378\"]), (\"\\U0001F1E6\\u0308\\u0378\",\n-            &[\"\\U0001F1E6\\u0308\", \"\\u0378\"]), (\"\\u0378\\u0020\", &[\"\\u0378\", \"\\u0020\"]),\n-            (\"\\u0378\\u0308\\u0020\", &[\"\\u0378\\u0308\", \"\\u0020\"]), (\"\\u0378\\u000D\", &[\"\\u0378\",\n-            \"\\u000D\"]), (\"\\u0378\\u0308\\u000D\", &[\"\\u0378\\u0308\", \"\\u000D\"]), (\"\\u0378\\u000A\",\n-            &[\"\\u0378\", \"\\u000A\"]), (\"\\u0378\\u0308\\u000A\", &[\"\\u0378\\u0308\", \"\\u000A\"]),\n-            (\"\\u0378\\u0001\", &[\"\\u0378\", \"\\u0001\"]), (\"\\u0378\\u0308\\u0001\", &[\"\\u0378\\u0308\",\n-            \"\\u0001\"]), (\"\\u0378\\u0300\", &[\"\\u0378\\u0300\"]), (\"\\u0378\\u0308\\u0300\",\n-            &[\"\\u0378\\u0308\\u0300\"]), (\"\\u0378\\u1100\", &[\"\\u0378\", \"\\u1100\"]),\n-            (\"\\u0378\\u0308\\u1100\", &[\"\\u0378\\u0308\", \"\\u1100\"]), (\"\\u0378\\u1160\", &[\"\\u0378\",\n-            \"\\u1160\"]), (\"\\u0378\\u0308\\u1160\", &[\"\\u0378\\u0308\", \"\\u1160\"]), (\"\\u0378\\u11A8\",\n-            &[\"\\u0378\", \"\\u11A8\"]), (\"\\u0378\\u0308\\u11A8\", &[\"\\u0378\\u0308\", \"\\u11A8\"]),\n-            (\"\\u0378\\uAC00\", &[\"\\u0378\", \"\\uAC00\"]), (\"\\u0378\\u0308\\uAC00\", &[\"\\u0378\\u0308\",\n-            \"\\uAC00\"]), (\"\\u0378\\uAC01\", &[\"\\u0378\", \"\\uAC01\"]), (\"\\u0378\\u0308\\uAC01\",\n-            &[\"\\u0378\\u0308\", \"\\uAC01\"]), (\"\\u0378\\U0001F1E6\", &[\"\\u0378\", \"\\U0001F1E6\"]),\n-            (\"\\u0378\\u0308\\U0001F1E6\", &[\"\\u0378\\u0308\", \"\\U0001F1E6\"]), (\"\\u0378\\u0378\",\n-            &[\"\\u0378\", \"\\u0378\"]), (\"\\u0378\\u0308\\u0378\", &[\"\\u0378\\u0308\", \"\\u0378\"]),\n-            (\"\\u0061\\U0001F1E6\\u0062\", &[\"\\u0061\", \"\\U0001F1E6\", \"\\u0062\"]),\n-            (\"\\U0001F1F7\\U0001F1FA\", &[\"\\U0001F1F7\\U0001F1FA\"]),\n-            (\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\", &[\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\"]),\n-            (\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\\U0001F1EA\",\n-            &[\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\\U0001F1EA\"]),\n-            (\"\\U0001F1F7\\U0001F1FA\\u200B\\U0001F1F8\\U0001F1EA\", &[\"\\U0001F1F7\\U0001F1FA\", \"\\u200B\",\n-            \"\\U0001F1F8\\U0001F1EA\"]), (\"\\U0001F1E6\\U0001F1E7\\U0001F1E8\",\n-            &[\"\\U0001F1E6\\U0001F1E7\\U0001F1E8\"]), (\"\\U0001F1E6\\u200D\\U0001F1E7\\U0001F1E8\",\n-            &[\"\\U0001F1E6\\u200D\", \"\\U0001F1E7\\U0001F1E8\"]),\n-            (\"\\U0001F1E6\\U0001F1E7\\u200D\\U0001F1E8\", &[\"\\U0001F1E6\\U0001F1E7\\u200D\",\n-            \"\\U0001F1E8\"]), (\"\\u0020\\u200D\\u0646\", &[\"\\u0020\\u200D\", \"\\u0646\"]),\n-            (\"\\u0646\\u200D\\u0020\", &[\"\\u0646\\u200D\", \"\\u0020\"]),\n+            (\"\\u{20}\\u{20}\", &[\"\\u{20}\", \"\\u{20}\"]),\n+            (\"\\u{20}\\u{308}\\u{20}\", &[\"\\u{20}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{20}\\u{D}\", &[\"\\u{20}\", \"\\u{D}\"]),\n+            (\"\\u{20}\\u{308}\\u{D}\", &[\"\\u{20}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{20}\\u{A}\", &[\"\\u{20}\", \"\\u{A}\"]),\n+            (\"\\u{20}\\u{308}\\u{A}\", &[\"\\u{20}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{20}\\u{1}\", &[\"\\u{20}\", \"\\u{1}\"]),\n+            (\"\\u{20}\\u{308}\\u{1}\", &[\"\\u{20}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{20}\\u{300}\", &[\"\\u{20}\\u{300}\"]),\n+            (\"\\u{20}\\u{308}\\u{300}\", &[\"\\u{20}\\u{308}\\u{300}\"]),\n+            (\"\\u{20}\\u{1100}\", &[\"\\u{20}\", \"\\u{1100}\"]),\n+            (\"\\u{20}\\u{308}\\u{1100}\", &[\"\\u{20}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{20}\\u{1160}\", &[\"\\u{20}\", \"\\u{1160}\"]),\n+            (\"\\u{20}\\u{308}\\u{1160}\", &[\"\\u{20}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{20}\\u{11A8}\", &[\"\\u{20}\", \"\\u{11A8}\"]),\n+            (\"\\u{20}\\u{308}\\u{11A8}\", &[\"\\u{20}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{20}\\u{AC00}\", &[\"\\u{20}\", \"\\u{AC00}\"]),\n+            (\"\\u{20}\\u{308}\\u{AC00}\", &[\"\\u{20}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{20}\\u{AC01}\", &[\"\\u{20}\", \"\\u{AC01}\"]),\n+            (\"\\u{20}\\u{308}\\u{AC01}\", &[\"\\u{20}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{20}\\u{1F1E6}\", &[\"\\u{20}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{20}\\u{308}\\u{1F1E6}\", &[\"\\u{20}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{20}\\u{378}\", &[\"\\u{20}\", \"\\u{378}\"]),\n+            (\"\\u{20}\\u{308}\\u{378}\", &[\"\\u{20}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{D}\\u{20}\", &[\"\\u{D}\", \"\\u{20}\"]),\n+            (\"\\u{D}\\u{308}\\u{20}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{D}\\u{D}\", &[\"\\u{D}\", \"\\u{D}\"]),\n+            (\"\\u{D}\\u{308}\\u{D}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{D}\\u{A}\", &[\"\\u{D}\\u{A}\"]),\n+            (\"\\u{D}\\u{308}\\u{A}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{D}\\u{1}\", &[\"\\u{D}\", \"\\u{1}\"]),\n+            (\"\\u{D}\\u{308}\\u{1}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{D}\\u{300}\", &[\"\\u{D}\", \"\\u{300}\"]),\n+            (\"\\u{D}\\u{308}\\u{300}\", &[\"\\u{D}\", \"\\u{308}\\u{300}\"]),\n+            (\"\\u{D}\\u{903}\", &[\"\\u{D}\", \"\\u{903}\"]),\n+            (\"\\u{D}\\u{1100}\", &[\"\\u{D}\", \"\\u{1100}\"]),\n+            (\"\\u{D}\\u{308}\\u{1100}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{D}\\u{1160}\", &[\"\\u{D}\", \"\\u{1160}\"]),\n+            (\"\\u{D}\\u{308}\\u{1160}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{D}\\u{11A8}\", &[\"\\u{D}\", \"\\u{11A8}\"]),\n+            (\"\\u{D}\\u{308}\\u{11A8}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{D}\\u{AC00}\", &[\"\\u{D}\", \"\\u{AC00}\"]),\n+            (\"\\u{D}\\u{308}\\u{AC00}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{D}\\u{AC01}\", &[\"\\u{D}\", \"\\u{AC01}\"]),\n+            (\"\\u{D}\\u{308}\\u{AC01}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{D}\\u{1F1E6}\", &[\"\\u{D}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{D}\\u{308}\\u{1F1E6}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{D}\\u{378}\", &[\"\\u{D}\", \"\\u{378}\"]),\n+            (\"\\u{D}\\u{308}\\u{378}\", &[\"\\u{D}\", \"\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{A}\\u{20}\", &[\"\\u{A}\", \"\\u{20}\"]),\n+            (\"\\u{A}\\u{308}\\u{20}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{A}\\u{D}\", &[\"\\u{A}\", \"\\u{D}\"]),\n+            (\"\\u{A}\\u{308}\\u{D}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{A}\\u{A}\", &[\"\\u{A}\", \"\\u{A}\"]),\n+            (\"\\u{A}\\u{308}\\u{A}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{A}\\u{1}\", &[\"\\u{A}\", \"\\u{1}\"]),\n+            (\"\\u{A}\\u{308}\\u{1}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{A}\\u{300}\", &[\"\\u{A}\", \"\\u{300}\"]),\n+            (\"\\u{A}\\u{308}\\u{300}\", &[\"\\u{A}\", \"\\u{308}\\u{300}\"]),\n+            (\"\\u{A}\\u{903}\", &[\"\\u{A}\", \"\\u{903}\"]),\n+            (\"\\u{A}\\u{1100}\", &[\"\\u{A}\", \"\\u{1100}\"]),\n+            (\"\\u{A}\\u{308}\\u{1100}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{A}\\u{1160}\", &[\"\\u{A}\", \"\\u{1160}\"]),\n+            (\"\\u{A}\\u{308}\\u{1160}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{A}\\u{11A8}\", &[\"\\u{A}\", \"\\u{11A8}\"]),\n+            (\"\\u{A}\\u{308}\\u{11A8}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{A}\\u{AC00}\", &[\"\\u{A}\", \"\\u{AC00}\"]),\n+            (\"\\u{A}\\u{308}\\u{AC00}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{A}\\u{AC01}\", &[\"\\u{A}\", \"\\u{AC01}\"]),\n+            (\"\\u{A}\\u{308}\\u{AC01}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{A}\\u{1F1E6}\", &[\"\\u{A}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{A}\\u{308}\\u{1F1E6}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{A}\\u{378}\", &[\"\\u{A}\", \"\\u{378}\"]),\n+            (\"\\u{A}\\u{308}\\u{378}\", &[\"\\u{A}\", \"\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{1}\\u{20}\", &[\"\\u{1}\", \"\\u{20}\"]),\n+            (\"\\u{1}\\u{308}\\u{20}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{1}\\u{D}\", &[\"\\u{1}\", \"\\u{D}\"]),\n+            (\"\\u{1}\\u{308}\\u{D}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{1}\\u{A}\", &[\"\\u{1}\", \"\\u{A}\"]),\n+            (\"\\u{1}\\u{308}\\u{A}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{1}\\u{1}\", &[\"\\u{1}\", \"\\u{1}\"]),\n+            (\"\\u{1}\\u{308}\\u{1}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{1}\\u{300}\", &[\"\\u{1}\", \"\\u{300}\"]),\n+            (\"\\u{1}\\u{308}\\u{300}\", &[\"\\u{1}\", \"\\u{308}\\u{300}\"]),\n+            (\"\\u{1}\\u{903}\", &[\"\\u{1}\", \"\\u{903}\"]),\n+            (\"\\u{1}\\u{1100}\", &[\"\\u{1}\", \"\\u{1100}\"]),\n+            (\"\\u{1}\\u{308}\\u{1100}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{1}\\u{1160}\", &[\"\\u{1}\", \"\\u{1160}\"]),\n+            (\"\\u{1}\\u{308}\\u{1160}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{1}\\u{11A8}\", &[\"\\u{1}\", \"\\u{11A8}\"]),\n+            (\"\\u{1}\\u{308}\\u{11A8}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{1}\\u{AC00}\", &[\"\\u{1}\", \"\\u{AC00}\"]),\n+            (\"\\u{1}\\u{308}\\u{AC00}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{1}\\u{AC01}\", &[\"\\u{1}\", \"\\u{AC01}\"]),\n+            (\"\\u{1}\\u{308}\\u{AC01}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{1}\\u{1F1E6}\", &[\"\\u{1}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1}\\u{308}\\u{1F1E6}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1}\\u{378}\", &[\"\\u{1}\", \"\\u{378}\"]),\n+            (\"\\u{1}\\u{308}\\u{378}\", &[\"\\u{1}\", \"\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{300}\\u{20}\", &[\"\\u{300}\", \"\\u{20}\"]),\n+            (\"\\u{300}\\u{308}\\u{20}\", &[\"\\u{300}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{300}\\u{D}\", &[\"\\u{300}\", \"\\u{D}\"]),\n+            (\"\\u{300}\\u{308}\\u{D}\", &[\"\\u{300}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{300}\\u{A}\", &[\"\\u{300}\", \"\\u{A}\"]),\n+            (\"\\u{300}\\u{308}\\u{A}\", &[\"\\u{300}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{300}\\u{1}\", &[\"\\u{300}\", \"\\u{1}\"]),\n+            (\"\\u{300}\\u{308}\\u{1}\", &[\"\\u{300}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{300}\\u{300}\", &[\"\\u{300}\\u{300}\"]),\n+            (\"\\u{300}\\u{308}\\u{300}\", &[\"\\u{300}\\u{308}\\u{300}\"]),\n+            (\"\\u{300}\\u{1100}\", &[\"\\u{300}\", \"\\u{1100}\"]),\n+            (\"\\u{300}\\u{308}\\u{1100}\", &[\"\\u{300}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{300}\\u{1160}\", &[\"\\u{300}\", \"\\u{1160}\"]),\n+            (\"\\u{300}\\u{308}\\u{1160}\", &[\"\\u{300}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{300}\\u{11A8}\", &[\"\\u{300}\", \"\\u{11A8}\"]),\n+            (\"\\u{300}\\u{308}\\u{11A8}\", &[\"\\u{300}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{300}\\u{AC00}\", &[\"\\u{300}\", \"\\u{AC00}\"]),\n+            (\"\\u{300}\\u{308}\\u{AC00}\", &[\"\\u{300}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{300}\\u{AC01}\", &[\"\\u{300}\", \"\\u{AC01}\"]),\n+            (\"\\u{300}\\u{308}\\u{AC01}\", &[\"\\u{300}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{300}\\u{1F1E6}\", &[\"\\u{300}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{300}\\u{308}\\u{1F1E6}\", &[\"\\u{300}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{300}\\u{378}\", &[\"\\u{300}\", \"\\u{378}\"]),\n+            (\"\\u{300}\\u{308}\\u{378}\", &[\"\\u{300}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{903}\\u{20}\", &[\"\\u{903}\", \"\\u{20}\"]),\n+            (\"\\u{903}\\u{308}\\u{20}\", &[\"\\u{903}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{903}\\u{D}\", &[\"\\u{903}\", \"\\u{D}\"]),\n+            (\"\\u{903}\\u{308}\\u{D}\", &[\"\\u{903}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{903}\\u{A}\", &[\"\\u{903}\", \"\\u{A}\"]),\n+            (\"\\u{903}\\u{308}\\u{A}\", &[\"\\u{903}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{903}\\u{1}\", &[\"\\u{903}\", \"\\u{1}\"]),\n+            (\"\\u{903}\\u{308}\\u{1}\", &[\"\\u{903}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{903}\\u{300}\", &[\"\\u{903}\\u{300}\"]),\n+            (\"\\u{903}\\u{308}\\u{300}\", &[\"\\u{903}\\u{308}\\u{300}\"]),\n+            (\"\\u{903}\\u{1100}\", &[\"\\u{903}\", \"\\u{1100}\"]),\n+            (\"\\u{903}\\u{308}\\u{1100}\", &[\"\\u{903}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{903}\\u{1160}\", &[\"\\u{903}\", \"\\u{1160}\"]),\n+            (\"\\u{903}\\u{308}\\u{1160}\", &[\"\\u{903}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{903}\\u{11A8}\", &[\"\\u{903}\", \"\\u{11A8}\"]),\n+            (\"\\u{903}\\u{308}\\u{11A8}\", &[\"\\u{903}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{903}\\u{AC00}\", &[\"\\u{903}\", \"\\u{AC00}\"]),\n+            (\"\\u{903}\\u{308}\\u{AC00}\", &[\"\\u{903}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{903}\\u{AC01}\", &[\"\\u{903}\", \"\\u{AC01}\"]),\n+            (\"\\u{903}\\u{308}\\u{AC01}\", &[\"\\u{903}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{903}\\u{1F1E6}\", &[\"\\u{903}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{903}\\u{308}\\u{1F1E6}\", &[\"\\u{903}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{903}\\u{378}\", &[\"\\u{903}\", \"\\u{378}\"]),\n+            (\"\\u{903}\\u{308}\\u{378}\", &[\"\\u{903}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{1100}\\u{20}\", &[\"\\u{1100}\", \"\\u{20}\"]),\n+            (\"\\u{1100}\\u{308}\\u{20}\", &[\"\\u{1100}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{1100}\\u{D}\", &[\"\\u{1100}\", \"\\u{D}\"]),\n+            (\"\\u{1100}\\u{308}\\u{D}\", &[\"\\u{1100}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{1100}\\u{A}\", &[\"\\u{1100}\", \"\\u{A}\"]),\n+            (\"\\u{1100}\\u{308}\\u{A}\", &[\"\\u{1100}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{1100}\\u{1}\", &[\"\\u{1100}\", \"\\u{1}\"]),\n+            (\"\\u{1100}\\u{308}\\u{1}\", &[\"\\u{1100}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{1100}\\u{300}\", &[\"\\u{1100}\\u{300}\"]),\n+            (\"\\u{1100}\\u{308}\\u{300}\", &[\"\\u{1100}\\u{308}\\u{300}\"]),\n+            (\"\\u{1100}\\u{1100}\", &[\"\\u{1100}\\u{1100}\"]),\n+            (\"\\u{1100}\\u{308}\\u{1100}\", &[\"\\u{1100}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{1100}\\u{1160}\", &[\"\\u{1100}\\u{1160}\"]),\n+            (\"\\u{1100}\\u{308}\\u{1160}\", &[\"\\u{1100}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{1100}\\u{11A8}\", &[\"\\u{1100}\", \"\\u{11A8}\"]),\n+            (\"\\u{1100}\\u{308}\\u{11A8}\", &[\"\\u{1100}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{1100}\\u{AC00}\", &[\"\\u{1100}\\u{AC00}\"]),\n+            (\"\\u{1100}\\u{308}\\u{AC00}\", &[\"\\u{1100}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{1100}\\u{AC01}\", &[\"\\u{1100}\\u{AC01}\"]),\n+            (\"\\u{1100}\\u{308}\\u{AC01}\", &[\"\\u{1100}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{1100}\\u{1F1E6}\", &[\"\\u{1100}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1100}\\u{308}\\u{1F1E6}\", &[\"\\u{1100}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1100}\\u{378}\", &[\"\\u{1100}\", \"\\u{378}\"]),\n+            (\"\\u{1100}\\u{308}\\u{378}\", &[\"\\u{1100}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{1160}\\u{20}\", &[\"\\u{1160}\", \"\\u{20}\"]),\n+            (\"\\u{1160}\\u{308}\\u{20}\", &[\"\\u{1160}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{1160}\\u{D}\", &[\"\\u{1160}\", \"\\u{D}\"]),\n+            (\"\\u{1160}\\u{308}\\u{D}\", &[\"\\u{1160}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{1160}\\u{A}\", &[\"\\u{1160}\", \"\\u{A}\"]),\n+            (\"\\u{1160}\\u{308}\\u{A}\", &[\"\\u{1160}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{1160}\\u{1}\", &[\"\\u{1160}\", \"\\u{1}\"]),\n+            (\"\\u{1160}\\u{308}\\u{1}\", &[\"\\u{1160}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{1160}\\u{300}\", &[\"\\u{1160}\\u{300}\"]),\n+            (\"\\u{1160}\\u{308}\\u{300}\", &[\"\\u{1160}\\u{308}\\u{300}\"]),\n+            (\"\\u{1160}\\u{1100}\", &[\"\\u{1160}\", \"\\u{1100}\"]),\n+            (\"\\u{1160}\\u{308}\\u{1100}\", &[\"\\u{1160}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{1160}\\u{1160}\", &[\"\\u{1160}\\u{1160}\"]),\n+            (\"\\u{1160}\\u{308}\\u{1160}\", &[\"\\u{1160}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{1160}\\u{11A8}\", &[\"\\u{1160}\\u{11A8}\"]),\n+            (\"\\u{1160}\\u{308}\\u{11A8}\", &[\"\\u{1160}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{1160}\\u{AC00}\", &[\"\\u{1160}\", \"\\u{AC00}\"]),\n+            (\"\\u{1160}\\u{308}\\u{AC00}\", &[\"\\u{1160}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{1160}\\u{AC01}\", &[\"\\u{1160}\", \"\\u{AC01}\"]),\n+            (\"\\u{1160}\\u{308}\\u{AC01}\", &[\"\\u{1160}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{1160}\\u{1F1E6}\", &[\"\\u{1160}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1160}\\u{308}\\u{1F1E6}\", &[\"\\u{1160}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1160}\\u{378}\", &[\"\\u{1160}\", \"\\u{378}\"]),\n+            (\"\\u{1160}\\u{308}\\u{378}\", &[\"\\u{1160}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{11A8}\\u{20}\", &[\"\\u{11A8}\", \"\\u{20}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{20}\", &[\"\\u{11A8}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{11A8}\\u{D}\", &[\"\\u{11A8}\", \"\\u{D}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{D}\", &[\"\\u{11A8}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{11A8}\\u{A}\", &[\"\\u{11A8}\", \"\\u{A}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{A}\", &[\"\\u{11A8}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{11A8}\\u{1}\", &[\"\\u{11A8}\", \"\\u{1}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{1}\", &[\"\\u{11A8}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{11A8}\\u{300}\", &[\"\\u{11A8}\\u{300}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{300}\", &[\"\\u{11A8}\\u{308}\\u{300}\"]),\n+            (\"\\u{11A8}\\u{1100}\", &[\"\\u{11A8}\", \"\\u{1100}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{1100}\", &[\"\\u{11A8}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{11A8}\\u{1160}\", &[\"\\u{11A8}\", \"\\u{1160}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{1160}\", &[\"\\u{11A8}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{11A8}\\u{11A8}\", &[\"\\u{11A8}\\u{11A8}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{11A8}\", &[\"\\u{11A8}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{11A8}\\u{AC00}\", &[\"\\u{11A8}\", \"\\u{AC00}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{AC00}\", &[\"\\u{11A8}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{11A8}\\u{AC01}\", &[\"\\u{11A8}\", \"\\u{AC01}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{AC01}\", &[\"\\u{11A8}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{11A8}\\u{1F1E6}\", &[\"\\u{11A8}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{1F1E6}\", &[\"\\u{11A8}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{11A8}\\u{378}\", &[\"\\u{11A8}\", \"\\u{378}\"]),\n+            (\"\\u{11A8}\\u{308}\\u{378}\", &[\"\\u{11A8}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{AC00}\\u{20}\", &[\"\\u{AC00}\", \"\\u{20}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{20}\", &[\"\\u{AC00}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{AC00}\\u{D}\", &[\"\\u{AC00}\", \"\\u{D}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{D}\", &[\"\\u{AC00}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{AC00}\\u{A}\", &[\"\\u{AC00}\", \"\\u{A}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{A}\", &[\"\\u{AC00}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{AC00}\\u{1}\", &[\"\\u{AC00}\", \"\\u{1}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{1}\", &[\"\\u{AC00}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{AC00}\\u{300}\", &[\"\\u{AC00}\\u{300}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{300}\", &[\"\\u{AC00}\\u{308}\\u{300}\"]),\n+            (\"\\u{AC00}\\u{1100}\", &[\"\\u{AC00}\", \"\\u{1100}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{1100}\", &[\"\\u{AC00}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{AC00}\\u{1160}\", &[\"\\u{AC00}\\u{1160}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{1160}\", &[\"\\u{AC00}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{AC00}\\u{11A8}\", &[\"\\u{AC00}\\u{11A8}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{11A8}\", &[\"\\u{AC00}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{AC00}\\u{AC00}\", &[\"\\u{AC00}\", \"\\u{AC00}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{AC00}\", &[\"\\u{AC00}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{AC00}\\u{AC01}\", &[\"\\u{AC00}\", \"\\u{AC01}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{AC01}\", &[\"\\u{AC00}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{AC00}\\u{1F1E6}\", &[\"\\u{AC00}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{1F1E6}\", &[\"\\u{AC00}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{AC00}\\u{378}\", &[\"\\u{AC00}\", \"\\u{378}\"]),\n+            (\"\\u{AC00}\\u{308}\\u{378}\", &[\"\\u{AC00}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{AC01}\\u{20}\", &[\"\\u{AC01}\", \"\\u{20}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{20}\", &[\"\\u{AC01}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{AC01}\\u{D}\", &[\"\\u{AC01}\", \"\\u{D}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{D}\", &[\"\\u{AC01}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{AC01}\\u{A}\", &[\"\\u{AC01}\", \"\\u{A}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{A}\", &[\"\\u{AC01}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{AC01}\\u{1}\", &[\"\\u{AC01}\", \"\\u{1}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{1}\", &[\"\\u{AC01}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{AC01}\\u{300}\", &[\"\\u{AC01}\\u{300}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{300}\", &[\"\\u{AC01}\\u{308}\\u{300}\"]),\n+            (\"\\u{AC01}\\u{1100}\", &[\"\\u{AC01}\", \"\\u{1100}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{1100}\", &[\"\\u{AC01}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{AC01}\\u{1160}\", &[\"\\u{AC01}\", \"\\u{1160}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{1160}\", &[\"\\u{AC01}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{AC01}\\u{11A8}\", &[\"\\u{AC01}\\u{11A8}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{11A8}\", &[\"\\u{AC01}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{AC01}\\u{AC00}\", &[\"\\u{AC01}\", \"\\u{AC00}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{AC00}\", &[\"\\u{AC01}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{AC01}\\u{AC01}\", &[\"\\u{AC01}\", \"\\u{AC01}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{AC01}\", &[\"\\u{AC01}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{AC01}\\u{1F1E6}\", &[\"\\u{AC01}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{1F1E6}\", &[\"\\u{AC01}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{AC01}\\u{378}\", &[\"\\u{AC01}\", \"\\u{378}\"]),\n+            (\"\\u{AC01}\\u{308}\\u{378}\", &[\"\\u{AC01}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{1F1E6}\\u{20}\", &[\"\\u{1F1E6}\", \"\\u{20}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{20}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{1F1E6}\\u{D}\", &[\"\\u{1F1E6}\", \"\\u{D}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{D}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{1F1E6}\\u{A}\", &[\"\\u{1F1E6}\", \"\\u{A}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{A}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{1F1E6}\\u{1}\", &[\"\\u{1F1E6}\", \"\\u{1}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{1}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{1F1E6}\\u{300}\", &[\"\\u{1F1E6}\\u{300}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{300}\", &[\"\\u{1F1E6}\\u{308}\\u{300}\"]),\n+            (\"\\u{1F1E6}\\u{1100}\", &[\"\\u{1F1E6}\", \"\\u{1100}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{1100}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{1F1E6}\\u{1160}\", &[\"\\u{1F1E6}\", \"\\u{1160}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{1160}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{1F1E6}\\u{11A8}\", &[\"\\u{1F1E6}\", \"\\u{11A8}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{11A8}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{1F1E6}\\u{AC00}\", &[\"\\u{1F1E6}\", \"\\u{AC00}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{AC00}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{1F1E6}\\u{AC01}\", &[\"\\u{1F1E6}\", \"\\u{AC01}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{AC01}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{1F1E6}\\u{1F1E6}\", &[\"\\u{1F1E6}\\u{1F1E6}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{1F1E6}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{1F1E6}\\u{378}\", &[\"\\u{1F1E6}\", \"\\u{378}\"]),\n+            (\"\\u{1F1E6}\\u{308}\\u{378}\", &[\"\\u{1F1E6}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{378}\\u{20}\", &[\"\\u{378}\", \"\\u{20}\"]),\n+            (\"\\u{378}\\u{308}\\u{20}\", &[\"\\u{378}\\u{308}\", \"\\u{20}\"]),\n+            (\"\\u{378}\\u{D}\", &[\"\\u{378}\", \"\\u{D}\"]),\n+            (\"\\u{378}\\u{308}\\u{D}\", &[\"\\u{378}\\u{308}\", \"\\u{D}\"]),\n+            (\"\\u{378}\\u{A}\", &[\"\\u{378}\", \"\\u{A}\"]),\n+            (\"\\u{378}\\u{308}\\u{A}\", &[\"\\u{378}\\u{308}\", \"\\u{A}\"]),\n+            (\"\\u{378}\\u{1}\", &[\"\\u{378}\", \"\\u{1}\"]),\n+            (\"\\u{378}\\u{308}\\u{1}\", &[\"\\u{378}\\u{308}\", \"\\u{1}\"]),\n+            (\"\\u{378}\\u{300}\", &[\"\\u{378}\\u{300}\"]),\n+            (\"\\u{378}\\u{308}\\u{300}\", &[\"\\u{378}\\u{308}\\u{300}\"]),\n+            (\"\\u{378}\\u{1100}\", &[\"\\u{378}\", \"\\u{1100}\"]),\n+            (\"\\u{378}\\u{308}\\u{1100}\", &[\"\\u{378}\\u{308}\", \"\\u{1100}\"]),\n+            (\"\\u{378}\\u{1160}\", &[\"\\u{378}\", \"\\u{1160}\"]),\n+            (\"\\u{378}\\u{308}\\u{1160}\", &[\"\\u{378}\\u{308}\", \"\\u{1160}\"]),\n+            (\"\\u{378}\\u{11A8}\", &[\"\\u{378}\", \"\\u{11A8}\"]),\n+            (\"\\u{378}\\u{308}\\u{11A8}\", &[\"\\u{378}\\u{308}\", \"\\u{11A8}\"]),\n+            (\"\\u{378}\\u{AC00}\", &[\"\\u{378}\", \"\\u{AC00}\"]),\n+            (\"\\u{378}\\u{308}\\u{AC00}\", &[\"\\u{378}\\u{308}\", \"\\u{AC00}\"]),\n+            (\"\\u{378}\\u{AC01}\", &[\"\\u{378}\", \"\\u{AC01}\"]),\n+            (\"\\u{378}\\u{308}\\u{AC01}\", &[\"\\u{378}\\u{308}\", \"\\u{AC01}\"]),\n+            (\"\\u{378}\\u{1F1E6}\", &[\"\\u{378}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{378}\\u{308}\\u{1F1E6}\", &[\"\\u{378}\\u{308}\", \"\\u{1F1E6}\"]),\n+            (\"\\u{378}\\u{378}\", &[\"\\u{378}\", \"\\u{378}\"]),\n+            (\"\\u{378}\\u{308}\\u{378}\", &[\"\\u{378}\\u{308}\", \"\\u{378}\"]),\n+            (\"\\u{61}\\u{1F1E6}\\u{62}\", &[\"\\u{61}\", \"\\u{1F1E6}\", \"\\u{62}\"]),\n+            (\"\\u{1F1F7}\\u{1F1FA}\", &[\"\\u{1F1F7}\\u{1F1FA}\"]),\n+            (\"\\u{1F1F7}\\u{1F1FA}\\u{1F1F8}\", &[\"\\u{1F1F7}\\u{1F1FA}\\u{1F1F8}\"]),\n+            (\"\\u{1F1F7}\\u{1F1FA}\\u{1F1F8}\\u{1F1EA}\",\n+            &[\"\\u{1F1F7}\\u{1F1FA}\\u{1F1F8}\\u{1F1EA}\"]),\n+            (\"\\u{1F1F7}\\u{1F1FA}\\u{200B}\\u{1F1F8}\\u{1F1EA}\",\n+             &[\"\\u{1F1F7}\\u{1F1FA}\", \"\\u{200B}\", \"\\u{1F1F8}\\u{1F1EA}\"]),\n+            (\"\\u{1F1E6}\\u{1F1E7}\\u{1F1E8}\", &[\"\\u{1F1E6}\\u{1F1E7}\\u{1F1E8}\"]),\n+            (\"\\u{1F1E6}\\u{200D}\\u{1F1E7}\\u{1F1E8}\", &[\"\\u{1F1E6}\\u{200D}\",\n+             \"\\u{1F1E7}\\u{1F1E8}\"]),\n+            (\"\\u{1F1E6}\\u{1F1E7}\\u{200D}\\u{1F1E8}\",\n+             &[\"\\u{1F1E6}\\u{1F1E7}\\u{200D}\", \"\\u{1F1E8}\"]),\n+            (\"\\u{20}\\u{200D}\\u{646}\", &[\"\\u{20}\\u{200D}\", \"\\u{646}\"]),\n+            (\"\\u{646}\\u{200D}\\u{20}\", &[\"\\u{646}\\u{200D}\", \"\\u{20}\"]),\n         ];\n \n         let test_diff: [(_, &[_], &[_]), .. 23] = [\n-            (\"\\u0020\\u0903\", &[\"\\u0020\\u0903\"], &[\"\\u0020\", \"\\u0903\"]), (\"\\u0020\\u0308\\u0903\",\n-            &[\"\\u0020\\u0308\\u0903\"], &[\"\\u0020\\u0308\", \"\\u0903\"]), (\"\\u000D\\u0308\\u0903\",\n-            &[\"\\u000D\", \"\\u0308\\u0903\"], &[\"\\u000D\", \"\\u0308\", \"\\u0903\"]), (\"\\u000A\\u0308\\u0903\",\n-            &[\"\\u000A\", \"\\u0308\\u0903\"], &[\"\\u000A\", \"\\u0308\", \"\\u0903\"]), (\"\\u0001\\u0308\\u0903\",\n-            &[\"\\u0001\", \"\\u0308\\u0903\"], &[\"\\u0001\", \"\\u0308\", \"\\u0903\"]), (\"\\u0300\\u0903\",\n-            &[\"\\u0300\\u0903\"], &[\"\\u0300\", \"\\u0903\"]), (\"\\u0300\\u0308\\u0903\",\n-            &[\"\\u0300\\u0308\\u0903\"], &[\"\\u0300\\u0308\", \"\\u0903\"]), (\"\\u0903\\u0903\",\n-            &[\"\\u0903\\u0903\"], &[\"\\u0903\", \"\\u0903\"]), (\"\\u0903\\u0308\\u0903\",\n-            &[\"\\u0903\\u0308\\u0903\"], &[\"\\u0903\\u0308\", \"\\u0903\"]), (\"\\u1100\\u0903\",\n-            &[\"\\u1100\\u0903\"], &[\"\\u1100\", \"\\u0903\"]), (\"\\u1100\\u0308\\u0903\",\n-            &[\"\\u1100\\u0308\\u0903\"], &[\"\\u1100\\u0308\", \"\\u0903\"]), (\"\\u1160\\u0903\",\n-            &[\"\\u1160\\u0903\"], &[\"\\u1160\", \"\\u0903\"]), (\"\\u1160\\u0308\\u0903\",\n-            &[\"\\u1160\\u0308\\u0903\"], &[\"\\u1160\\u0308\", \"\\u0903\"]), (\"\\u11A8\\u0903\",\n-            &[\"\\u11A8\\u0903\"], &[\"\\u11A8\", \"\\u0903\"]), (\"\\u11A8\\u0308\\u0903\",\n-            &[\"\\u11A8\\u0308\\u0903\"], &[\"\\u11A8\\u0308\", \"\\u0903\"]), (\"\\uAC00\\u0903\",\n-            &[\"\\uAC00\\u0903\"], &[\"\\uAC00\", \"\\u0903\"]), (\"\\uAC00\\u0308\\u0903\",\n-            &[\"\\uAC00\\u0308\\u0903\"], &[\"\\uAC00\\u0308\", \"\\u0903\"]), (\"\\uAC01\\u0903\",\n-            &[\"\\uAC01\\u0903\"], &[\"\\uAC01\", \"\\u0903\"]), (\"\\uAC01\\u0308\\u0903\",\n-            &[\"\\uAC01\\u0308\\u0903\"], &[\"\\uAC01\\u0308\", \"\\u0903\"]), (\"\\U0001F1E6\\u0903\",\n-            &[\"\\U0001F1E6\\u0903\"], &[\"\\U0001F1E6\", \"\\u0903\"]), (\"\\U0001F1E6\\u0308\\u0903\",\n-            &[\"\\U0001F1E6\\u0308\\u0903\"], &[\"\\U0001F1E6\\u0308\", \"\\u0903\"]), (\"\\u0378\\u0903\",\n-            &[\"\\u0378\\u0903\"], &[\"\\u0378\", \"\\u0903\"]), (\"\\u0378\\u0308\\u0903\",\n-            &[\"\\u0378\\u0308\\u0903\"], &[\"\\u0378\\u0308\", \"\\u0903\"]),\n+            (\"\\u{20}\\u{903}\", &[\"\\u{20}\\u{903}\"], &[\"\\u{20}\", \"\\u{903}\"]), (\"\\u{20}\\u{308}\\u{903}\",\n+            &[\"\\u{20}\\u{308}\\u{903}\"], &[\"\\u{20}\\u{308}\", \"\\u{903}\"]), (\"\\u{D}\\u{308}\\u{903}\",\n+            &[\"\\u{D}\", \"\\u{308}\\u{903}\"], &[\"\\u{D}\", \"\\u{308}\", \"\\u{903}\"]), (\"\\u{A}\\u{308}\\u{903}\",\n+            &[\"\\u{A}\", \"\\u{308}\\u{903}\"], &[\"\\u{A}\", \"\\u{308}\", \"\\u{903}\"]), (\"\\u{1}\\u{308}\\u{903}\",\n+            &[\"\\u{1}\", \"\\u{308}\\u{903}\"], &[\"\\u{1}\", \"\\u{308}\", \"\\u{903}\"]), (\"\\u{300}\\u{903}\",\n+            &[\"\\u{300}\\u{903}\"], &[\"\\u{300}\", \"\\u{903}\"]), (\"\\u{300}\\u{308}\\u{903}\",\n+            &[\"\\u{300}\\u{308}\\u{903}\"], &[\"\\u{300}\\u{308}\", \"\\u{903}\"]), (\"\\u{903}\\u{903}\",\n+            &[\"\\u{903}\\u{903}\"], &[\"\\u{903}\", \"\\u{903}\"]), (\"\\u{903}\\u{308}\\u{903}\",\n+            &[\"\\u{903}\\u{308}\\u{903}\"], &[\"\\u{903}\\u{308}\", \"\\u{903}\"]), (\"\\u{1100}\\u{903}\",\n+            &[\"\\u{1100}\\u{903}\"], &[\"\\u{1100}\", \"\\u{903}\"]), (\"\\u{1100}\\u{308}\\u{903}\",\n+            &[\"\\u{1100}\\u{308}\\u{903}\"], &[\"\\u{1100}\\u{308}\", \"\\u{903}\"]), (\"\\u{1160}\\u{903}\",\n+            &[\"\\u{1160}\\u{903}\"], &[\"\\u{1160}\", \"\\u{903}\"]), (\"\\u{1160}\\u{308}\\u{903}\",\n+            &[\"\\u{1160}\\u{308}\\u{903}\"], &[\"\\u{1160}\\u{308}\", \"\\u{903}\"]), (\"\\u{11A8}\\u{903}\",\n+            &[\"\\u{11A8}\\u{903}\"], &[\"\\u{11A8}\", \"\\u{903}\"]), (\"\\u{11A8}\\u{308}\\u{903}\",\n+            &[\"\\u{11A8}\\u{308}\\u{903}\"], &[\"\\u{11A8}\\u{308}\", \"\\u{903}\"]), (\"\\u{AC00}\\u{903}\",\n+            &[\"\\u{AC00}\\u{903}\"], &[\"\\u{AC00}\", \"\\u{903}\"]), (\"\\u{AC00}\\u{308}\\u{903}\",\n+            &[\"\\u{AC00}\\u{308}\\u{903}\"], &[\"\\u{AC00}\\u{308}\", \"\\u{903}\"]), (\"\\u{AC01}\\u{903}\",\n+            &[\"\\u{AC01}\\u{903}\"], &[\"\\u{AC01}\", \"\\u{903}\"]), (\"\\u{AC01}\\u{308}\\u{903}\",\n+            &[\"\\u{AC01}\\u{308}\\u{903}\"], &[\"\\u{AC01}\\u{308}\", \"\\u{903}\"]), (\"\\u{1F1E6}\\u{903}\",\n+            &[\"\\u{1F1E6}\\u{903}\"], &[\"\\u{1F1E6}\", \"\\u{903}\"]), (\"\\u{1F1E6}\\u{308}\\u{903}\",\n+            &[\"\\u{1F1E6}\\u{308}\\u{903}\"], &[\"\\u{1F1E6}\\u{308}\", \"\\u{903}\"]), (\"\\u{378}\\u{903}\",\n+            &[\"\\u{378}\\u{903}\"], &[\"\\u{378}\", \"\\u{903}\"]), (\"\\u{378}\\u{308}\\u{903}\",\n+            &[\"\\u{378}\\u{308}\\u{903}\"], &[\"\\u{378}\\u{308}\", \"\\u{903}\"]),\n         ];\n \n         for &(s, g) in test_same.iter() {"}, {"sha": "564189bfc4fc4bc73aaf6ed3ec2fbbbe44f36ed2", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -118,7 +118,7 @@ impl String {\n     /// ```rust\n     /// let input = b\"Hello \\xF0\\x90\\x80World\";\n     /// let output = String::from_utf8_lossy(input);\n-    /// assert_eq!(output.as_slice(), \"Hello \\uFFFDWorld\");\n+    /// assert_eq!(output.as_slice(), \"Hello \\u{FFFD}World\");\n     /// ```\n     #[unstable = \"return type may change\"]\n     pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> CowString<'a> {\n@@ -275,7 +275,7 @@ impl String {\n     ///           0xD834];\n     ///\n     /// assert_eq!(String::from_utf16_lossy(v),\n-    ///            \"\ud834\udd1emus\\uFFFDic\\uFFFD\".to_string());\n+    ///            \"\ud834\udd1emus\\u{FFFD}ic\\u{FFFD}\".to_string());\n     /// ```\n     #[stable]\n     pub fn from_utf16_lossy(v: &[u16]) -> String {\n@@ -1043,32 +1043,32 @@ mod tests {\n \n         let xs = b\"Hello\\xC2 There\\xFF Goodbye\";\n         assert_eq!(String::from_utf8_lossy(xs),\n-                   String::from_str(\"Hello\\uFFFD There\\uFFFD Goodbye\").into_cow());\n+                   String::from_str(\"Hello\\u{FFFD} There\\u{FFFD} Goodbye\").into_cow());\n \n         let xs = b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\";\n         assert_eq!(String::from_utf8_lossy(xs),\n-                   String::from_str(\"Hello\\uFFFD\\uFFFD There\\uFFFD Goodbye\").into_cow());\n+                   String::from_str(\"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\").into_cow());\n \n         let xs = b\"\\xF5foo\\xF5\\x80bar\";\n         assert_eq!(String::from_utf8_lossy(xs),\n-                   String::from_str(\"\\uFFFDfoo\\uFFFD\\uFFFDbar\").into_cow());\n+                   String::from_str(\"\\u{FFFD}foo\\u{FFFD}\\u{FFFD}bar\").into_cow());\n \n         let xs = b\"\\xF1foo\\xF1\\x80bar\\xF1\\x80\\x80baz\";\n         assert_eq!(String::from_utf8_lossy(xs),\n-                   String::from_str(\"\\uFFFDfoo\\uFFFDbar\\uFFFDbaz\").into_cow());\n+                   String::from_str(\"\\u{FFFD}foo\\u{FFFD}bar\\u{FFFD}baz\").into_cow());\n \n         let xs = b\"\\xF4foo\\xF4\\x80bar\\xF4\\xBFbaz\";\n         assert_eq!(String::from_utf8_lossy(xs),\n-                   String::from_str(\"\\uFFFDfoo\\uFFFDbar\\uFFFD\\uFFFDbaz\").into_cow());\n+                   String::from_str(\"\\u{FFFD}foo\\u{FFFD}bar\\u{FFFD}\\u{FFFD}baz\").into_cow());\n \n         let xs = b\"\\xF0\\x80\\x80\\x80foo\\xF0\\x90\\x80\\x80bar\";\n-        assert_eq!(String::from_utf8_lossy(xs), String::from_str(\"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\\n-                                               foo\\U00010000bar\").into_cow());\n+        assert_eq!(String::from_utf8_lossy(xs), String::from_str(\"\\u{FFFD}\\u{FFFD}\\u{FFFD}\\u{FFFD}\\\n+                                               foo\\u{10000}bar\").into_cow());\n \n         // surrogates\n         let xs = b\"\\xED\\xA0\\x80foo\\xED\\xBF\\xBFbar\";\n-        assert_eq!(String::from_utf8_lossy(xs), String::from_str(\"\\uFFFD\\uFFFD\\uFFFDfoo\\\n-                                               \\uFFFD\\uFFFD\\uFFFDbar\").into_cow());\n+        assert_eq!(String::from_utf8_lossy(xs), String::from_str(\"\\u{FFFD}\\u{FFFD}\\u{FFFD}foo\\\n+                                               \\u{FFFD}\\u{FFFD}\\u{FFFD}bar\").into_cow());\n     }\n \n     #[test]\n@@ -1110,7 +1110,7 @@ mod tests {\n                 0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n                 0x000a_u16 ]),\n              // Issue #12318, even-numbered non-BMP planes\n-             (String::from_str(\"\\U00020000\"),\n+             (String::from_str(\"\\u{20000}\"),\n               vec![0xD840, 0xDC00])];\n \n         for p in pairs.iter() {\n@@ -1148,16 +1148,17 @@ mod tests {\n     fn test_from_utf16_lossy() {\n         // completely positive cases tested above.\n         // lead + eof\n-        assert_eq!(String::from_utf16_lossy(&[0xD800]), String::from_str(\"\\uFFFD\"));\n+        assert_eq!(String::from_utf16_lossy(&[0xD800]), String::from_str(\"\\u{FFFD}\"));\n         // lead + lead\n-        assert_eq!(String::from_utf16_lossy(&[0xD800, 0xD800]), String::from_str(\"\\uFFFD\\uFFFD\"));\n+        assert_eq!(String::from_utf16_lossy(&[0xD800, 0xD800]),\n+                   String::from_str(\"\\u{FFFD}\\u{FFFD}\"));\n \n         // isolated trail\n-        assert_eq!(String::from_utf16_lossy(&[0x0061, 0xDC00]), String::from_str(\"a\\uFFFD\"));\n+        assert_eq!(String::from_utf16_lossy(&[0x0061, 0xDC00]), String::from_str(\"a\\u{FFFD}\"));\n \n         // general\n         assert_eq!(String::from_utf16_lossy(&[0xD800, 0xd801, 0xdc8b, 0xD800]),\n-                   String::from_str(\"\\uFFFD\ud801\udc8b\\uFFFD\"));\n+                   String::from_str(\"\\u{FFFD}\ud801\udc8b\\u{FFFD}\"));\n     }\n \n     #[test]\n@@ -1249,7 +1250,7 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_str_truncate_split_codepoint() {\n-        let mut s = String::from_str(\"\\u00FC\"); // \u00fc\n+        let mut s = String::from_str(\"\\u{FC}\"); // \u00fc\n         s.truncate(1);\n     }\n "}, {"sha": "671b4ccb9e4f4f97b08056b32947a77ceed750b3", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -65,7 +65,7 @@ static MAX_THREE_B: u32 =  0x10000u32;\n \n /// The highest valid code point\n #[stable]\n-pub const MAX: char = '\\U0010ffff';\n+pub const MAX: char = '\\u{10ffff}';\n \n /// Converts from `u32` to a `char`\n #[inline]\n@@ -161,8 +161,8 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n /// The rules are as follows:\n ///\n /// - chars in [0,0xff] get 2-digit escapes: `\\\\xNN`\n-/// - chars in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`\n-/// - chars above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`\n+/// - chars in [0x100,0xffff] get 4-digit escapes: `\\\\u{NNNN}`\n+/// - chars above 0x10000 get 8-digit escapes: `\\\\u{{NNN}NNNNN}`\n ///\n #[deprecated = \"use the Char::escape_unicode method\"]\n pub fn escape_unicode(c: char, f: |char|) {\n@@ -269,8 +269,8 @@ pub trait Char {\n     /// The rules are as follows:\n     ///\n     /// * Characters in [0,0xff] get 2-digit escapes: `\\\\xNN`\n-    /// * Characters in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`.\n-    /// * Characters above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`.\n+    /// * Characters in [0x100,0xffff] get 4-digit escapes: `\\\\u{NNNN}`.\n+    /// * Characters above 0x10000 get 8-digit escapes: `\\\\u{{NNN}NNNNN}`.\n     #[unstable = \"pending error conventions, trait organization\"]\n     fn escape_unicode(self) -> UnicodeEscapedChars;\n \n@@ -470,7 +470,7 @@ impl Iterator<char> for UnicodeEscapedChars {\n             }\n             UnicodeEscapedCharsState::Type => {\n                 let (typechar, pad) = if self.c <= '\\x7f' { ('x', 2) }\n-                                      else if self.c <= '\\uffff' { ('u', 4) }\n+                                      else if self.c <= '\\u{ffff}' { ('u', 4) }\n                                       else { ('U', 8) };\n                 self.state = UnicodeEscapedCharsState::Value(range_step(4 * (pad - 1), -1, -4i32));\n                 Some(typechar)"}, {"sha": "e16b24923a808f772d14ea060664944de1f513f0", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -864,53 +864,3 @@ impl<F,A,R> FnOnce<A,R> for F\n         self.call_mut(args)\n     }\n }\n-\n-#[cfg(stage0)]\n-mod fn_impls {\n-    use super::Fn;\n-\n-    impl<Result> Fn<(),Result> for extern \"Rust\" fn() -> Result {\n-        #[allow(non_snake_case)]\n-        extern \"rust-call\" fn call(&self, _args: ()) -> Result {\n-            (*self)()\n-        }\n-    }\n-\n-    impl<Result,A0> Fn<(A0,),Result> for extern \"Rust\" fn(A0) -> Result {\n-        #[allow(non_snake_case)]\n-        extern \"rust-call\" fn call(&self, args: (A0,)) -> Result {\n-            let (a0,) = args;\n-            (*self)(a0)\n-        }\n-    }\n-\n-    macro_rules! def_fn(\n-        ($($args:ident)*) => (\n-            impl<Result$(,$args)*>\n-            Fn<($($args,)*),Result>\n-            for extern \"Rust\" fn($($args: $args,)*) -> Result {\n-                #[allow(non_snake_case)]\n-                extern \"rust-call\" fn call(&self, args: ($($args,)*)) -> Result {\n-                    let ($($args,)*) = args;\n-                    (*self)($($args,)*)\n-                }\n-            }\n-        )\n-    )\n-\n-    def_fn!(A0 A1)\n-    def_fn!(A0 A1 A2)\n-    def_fn!(A0 A1 A2 A3)\n-    def_fn!(A0 A1 A2 A3 A4)\n-    def_fn!(A0 A1 A2 A3 A4 A5)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14)\n-    def_fn!(A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15)\n-}"}, {"sha": "5e2d6266f0ec3182095eb91976bb2bf099bd270e", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -143,9 +143,6 @@\n \n #![stable]\n \n-#[cfg(stage0)]\n-pub use self::Option::*;\n-#[cfg(not(stage0))]\n use self::Option::*;\n \n use cmp::{Eq, Ord};"}, {"sha": "9d1ffa789111681ac3709605697013f7d95e9f70", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -918,6 +918,5 @@ pub fn fold<T,\n     Ok(init)\n }\n \n-#[cfg(not(stage0))]\n impl<T:Copy,U:Copy> Copy for Result<T,U> {}\n "}, {"sha": "d0c8558b55d07f389a00225e9e42bd9fbc137d60", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -914,13 +914,13 @@ fn run_utf8_validation_iterator(iter: &mut slice::Items<u8>) -> bool {\n         if first >= 128 {\n             let w = utf8_char_width(first);\n             let second = next!();\n-            // 2-byte encoding is for codepoints  \\u0080 to  \\u07ff\n+            // 2-byte encoding is for codepoints  \\u{0080} to  \\u{07ff}\n             //        first  C2 80        last DF BF\n-            // 3-byte encoding is for codepoints  \\u0800 to  \\uffff\n+            // 3-byte encoding is for codepoints  \\u{0800} to  \\u{ffff}\n             //        first  E0 A0 80     last EF BF BF\n-            //   excluding surrogates codepoints  \\ud800 to  \\udfff\n+            //   excluding surrogates codepoints  \\u{d800} to  \\u{dfff}\n             //               ED A0 80 to       ED BF BF\n-            // 4-byte encoding is for codepoints \\u10000 to \\u10ffff\n+            // 4-byte encoding is for codepoints \\u{1000}0 to \\u{10ff}ff\n             //        first  F0 90 80 80  last F4 8F BF BF\n             //\n             // Use the UTF-8 syntax from the RFC\n@@ -1007,7 +1007,7 @@ impl Utf16Item {\n     pub fn to_char_lossy(&self) -> char {\n         match *self {\n             ScalarValue(c) => c,\n-            LoneSurrogate(_) => '\\uFFFD'\n+            LoneSurrogate(_) => '\\u{FFFD}'\n         }\n     }\n }\n@@ -1523,7 +1523,7 @@ pub trait StrPrelude for Sized? {\n     /// // composed forms of `\u00f6` and `\u00e9`\n     /// let c = \"L\u00f6we \u8001\u864e L\u00e9opard\"; // German, Simplified Chinese, French\n     /// // decomposed forms of `\u00f6` and `\u00e9`\n-    /// let d = \"Lo\\u0308we \u8001\u864e Le\\u0301opard\";\n+    /// let d = \"Lo\\u{0308}we \u8001\u864e Le\\u{0301}opard\";\n     ///\n     /// assert_eq!(c.char_len(), 15);\n     /// assert_eq!(d.char_len(), 17);"}, {"sha": "b809138c45179b9ac474be720be0fff03e5a84c2", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -1569,10 +1569,10 @@ Options:\n     #[test]\n     fn test_usage_description_multibyte_handling() {\n         let optgroups = vec!(\n-            optflag(\"k\", \"k\\u2013w\\u2013\",\n+            optflag(\"k\", \"k\\u{2013}w\\u{2013}\",\n                 \"The word kiwi is normally spelled with two i's\"),\n             optflag(\"a\", \"apple\",\n-                \"This \\u201Cdescription\\u201D has some characters that could \\\n+                \"This \\u{201C}description\\u{201D} has some characters that could \\\n confuse the line wrapping; an apple costs 0.51\u20ac in some parts of Europe.\"));\n \n         let expected ="}, {"sha": "918f612aaa5d5a7fab1860d86c48c617d53236a6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -22,8 +22,8 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n-#![feature(slicing_syntax, tuple_indexing, unsafe_destructor)]\n+#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n \n extern crate arena;"}, {"sha": "f6b808e8e1b2d0bd949e74833213f75f33cb4bb8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n "}, {"sha": "2421b39b8bb15f94b5d8995a31670bc8cba7eec6", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n+#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n "}, {"sha": "b83bbd6b4c08e71ce9522465f85280b41e89846f", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -71,8 +71,8 @@ This API is completely unstable and subject to change.\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(default_type_params, globs, if_let, import_shadowing, macro_rules, phase, quote)]\n-#![feature(slicing_syntax, tuple_indexing, unsafe_destructor)]\n+#![feature(default_type_params, globs, import_shadowing, macro_rules, phase, quote)]\n+#![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "bd7db560d9e4a92beb1cd160cb28efb97af81ab5", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -246,7 +246,7 @@ impl<'a> fmt::Show for VarianceTerm<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ConstantTerm(c1) => write!(f, \"{}\", c1),\n-            TransformTerm(v1, v2) => write!(f, \"({} \\u00D7 {})\", v1, v2),\n+            TransformTerm(v1, v2) => write!(f, \"({} \\u{00D7} {})\", v1, v2),\n             InferredTerm(id) => write!(f, \"[{}]\", { let InferredIndex(i) = id; i })\n         }\n     }"}, {"sha": "38bc7d1a3c18d0e575d90a5b1e52d484e13e5ea5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -748,7 +748,7 @@ impl<'a> SourceCollector<'a> {\n         let contents = str::from_utf8(contents.as_slice()).unwrap();\n \n         // Remove the utf-8 BOM if any\n-        let contents = if contents.starts_with(\"\\ufeff\") {\n+        let contents = if contents.starts_with(\"\\u{feff}\") {\n             contents.slice_from(3)\n         } else {\n             contents"}, {"sha": "8062916285496cbb1df27b1fcdc58d380735ac95", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -18,7 +18,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![allow(unknown_features)]\n-#![feature(globs, if_let, macro_rules, phase, slicing_syntax, tuple_indexing)]\n+#![feature(globs, macro_rules, phase, slicing_syntax)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "74f918b8ee3b46c8f6e6a2c49df91947d8483f44", "filename": "src/librustrt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustrt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibrustrt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Futil.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -31,7 +31,7 @@ pub struct Stdio(libc::c_int);\n #[allow(non_upper_case_globals)]\n impl Copy for Stdio {}\n \n-#[allow(non_uppercase_statics)]\n+#[allow(non_upper_case_globals)]\n pub const Stdout: Stdio = Stdio(libc::STDOUT_FILENO);\n #[allow(non_upper_case_globals)]\n pub const Stderr: Stdio = Stdio(libc::STDERR_FILENO);"}, {"sha": "7919ac0eff16c011bfb1088a5790abf068b545c8", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -284,8 +284,8 @@ pub fn error_str(error: ErrorCode) -> &'static str {\n         TrailingCharacters => \"trailing characters\",\n         TrailingComma => \"trailing comma\",\n         InvalidEscape => \"invalid escape\",\n-        UnrecognizedHex => \"invalid \\\\u escape (unrecognized hex)\",\n-        NotFourDigit => \"invalid \\\\u escape (not four digits)\",\n+        UnrecognizedHex => \"invalid \\\\u{ esc}ape (unrecognized hex)\",\n+        NotFourDigit => \"invalid \\\\u{ esc}ape (not four digits)\",\n         NotUtf8 => \"contents not utf-8\",\n         InvalidUnicodeCodePoint => \"invalid Unicode code point\",\n         LoneLeadingSurrogateInHexEscape => \"lone leading surrogate in hex escape\",\n@@ -2846,8 +2846,8 @@ mod tests {\n         assert_eq!(from_str(\"\\\"\\\\r\\\"\"), Ok(String(\"\\r\".into_string())));\n         assert_eq!(from_str(\"\\\"\\\\t\\\"\"), Ok(String(\"\\t\".into_string())));\n         assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(\"foo\".into_string())));\n-        assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(\"\\u12ab\".into_string())));\n-        assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(\"\\uAB12\".into_string())));\n+        assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(\"\\u{12ab}\".into_string())));\n+        assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(\"\\u{AB12}\".into_string())));\n     }\n \n     #[test]\n@@ -2859,8 +2859,8 @@ mod tests {\n                  (\"\\\"\\\\n\\\"\", \"\\n\"),\n                  (\"\\\"\\\\r\\\"\", \"\\r\"),\n                  (\"\\\"\\\\t\\\"\", \"\\t\"),\n-                 (\"\\\"\\\\u12ab\\\"\", \"\\u12ab\"),\n-                 (\"\\\"\\\\uAB12\\\"\", \"\\uAB12\")];\n+                 (\"\\\"\\\\u12ab\\\"\", \"\\u{12ab}\"),\n+                 (\"\\\"\\\\uAB12\\\"\", \"\\u{AB12}\")];\n \n         for &(i, o) in s.iter() {\n             let v: string::String = super::decode(i).unwrap();"}, {"sha": "9711d5c7209be7c123c5910bbaea781adf9fdabc", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -23,7 +23,7 @@ Core encoding and decoding interfaces.\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n-#![feature(macro_rules, default_type_params, phase, slicing_syntax, globs, if_let)]\n+#![feature(macro_rules, default_type_params, phase, slicing_syntax, globs)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "b5c8e271492ea9df91135fb6c82c2e10ea1f394d", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -696,7 +696,7 @@ mod tests {\n \n         assert!(\"\".is_ascii());\n         assert!(\"a\".is_ascii());\n-        assert!(!\"\\u2009\".is_ascii());\n+        assert!(!\"\\u{2009}\".is_ascii());\n \n     }\n "}, {"sha": "da0834dc9ef37d5616e6f54942d21009d15b2f1f", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -1215,7 +1215,7 @@ mod test {\n         assert!(dirpath.is_dir());\n \n         let mut filepath = dirpath;\n-        filepath.push(\"unicode-file-\\uac00\\u4e00\\u30fc\\u4f60\\u597d.rs\");\n+        filepath.push(\"unicode-file-\\u{ac00}\\u{4e00}\\u{30fc}\\u{4f60}\\u{597d}.rs\");\n         check!(File::create(&filepath)); // ignore return; touch only\n         assert!(!filepath.is_dir());\n         assert!(filepath.exists());"}, {"sha": "f6b73f037f25b19d2b565e469a7c7cd0861b7fe5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -106,7 +106,7 @@\n #![allow(unknown_features)]\n #![feature(macro_rules, globs, linkage)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n-#![feature(import_shadowing, slicing_syntax, tuple_indexing)]\n+#![feature(import_shadowing, slicing_syntax)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "138296cca70d25a5f2464d9890232c4d8466ab43", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -1182,15 +1182,13 @@ pub fn page_size() -> uint {\n ///\n /// The memory map is released (unmapped) when the destructor is run, so don't\n /// let it leave scope by accident if you want it to stick around.\n+#[allow(missing_copy_implementations)]\n pub struct MemoryMap {\n     data: *mut u8,\n     len: uint,\n     kind: MemoryMapKind,\n }\n \n-#[cfg(not(stage0))]\n-impl Copy for MemoryMap {}\n-\n /// Type of memory map\n pub enum MemoryMapKind {\n     /// Virtual memory map. Usually used to change the permissions of a given"}, {"sha": "470e1b4dbb7af23522b641873246d81c3076126a", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -542,10 +542,10 @@ mod tests {\n             )\n         )\n         t!(\"foo\", display, \"foo\");\n-        t!(b\"foo\\x80\", display, \"foo\\uFFFD\");\n-        t!(b\"foo\\xFFbar\", display, \"foo\\uFFFDbar\");\n+        t!(b\"foo\\x80\", display, \"foo\\u{FFFD}\");\n+        t!(b\"foo\\xFFbar\", display, \"foo\\u{FFFD}bar\");\n         t!(b\"foo\\xFF/bar\", filename_display, \"bar\");\n-        t!(b\"foo/\\xFFbar\", filename_display, \"\\uFFFDbar\");\n+        t!(b\"foo/\\xFFbar\", filename_display, \"\\u{FFFD}bar\");\n         t!(b\"/\", filename_display, \"\");\n \n         macro_rules! t(\n@@ -566,10 +566,10 @@ mod tests {\n         )\n \n         t!(\"foo\", \"foo\");\n-        t!(b\"foo\\x80\", \"foo\\uFFFD\");\n-        t!(b\"foo\\xFFbar\", \"foo\\uFFFDbar\");\n+        t!(b\"foo\\x80\", \"foo\\u{FFFD}\");\n+        t!(b\"foo\\xFFbar\", \"foo\\u{FFFD}bar\");\n         t!(b\"foo\\xFF/bar\", \"bar\", filename);\n-        t!(b\"foo/\\xFFbar\", \"\\uFFFDbar\", filename);\n+        t!(b\"foo/\\xFFbar\", \"\\u{FFFD}bar\", filename);\n         t!(b\"/\", \"\", filename);\n     }\n \n@@ -590,10 +590,10 @@ mod tests {\n         t!(b\"foo\", \"foo\", \"foo\");\n         t!(b\"foo/bar\", \"foo/bar\", \"bar\");\n         t!(b\"/\", \"/\", \"\");\n-        t!(b\"foo\\xFF\", \"foo\\uFFFD\", \"foo\\uFFFD\");\n-        t!(b\"foo\\xFF/bar\", \"foo\\uFFFD/bar\", \"bar\");\n-        t!(b\"foo/\\xFFbar\", \"foo/\\uFFFDbar\", \"\\uFFFDbar\");\n-        t!(b\"\\xFFfoo/bar\\xFF\", \"\\uFFFDfoo/bar\\uFFFD\", \"bar\\uFFFD\");\n+        t!(b\"foo\\xFF\", \"foo\\u{FFFD}\", \"foo\\u{FFFD}\");\n+        t!(b\"foo\\xFF/bar\", \"foo\\u{FFFD}/bar\", \"bar\");\n+        t!(b\"foo/\\xFFbar\", \"foo/\\u{FFFD}bar\", \"\\u{FFFD}bar\");\n+        t!(b\"\\xFFfoo/bar\\xFF\", \"\\u{FFFD}foo/bar\\u{FFFD}\", \"bar\\u{FFFD}\");\n     }\n \n     #[test]"}, {"sha": "adbcff8a53f6e7b7dabde839319d6d3e01aa636b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -500,8 +500,8 @@ mod tests {\n             \"echo \\\"a b c\\\"\"\n         );\n         assert_eq!(\n-            test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", &[]),\n-            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\"\n+            test_wrapper(\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\", &[]),\n+            \"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\"\n         );\n     }\n }"}, {"sha": "11af1a43277de863d41a92ae914eaadee3dd611d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -562,7 +562,6 @@ pub enum BinOp {\n     BiGt,\n }\n \n-#[cfg(not(stage0))]\n impl Copy for BinOp {}\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]"}, {"sha": "7f2becf820147a2b5577cc53bc9fec8a0b0787ad", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -350,7 +350,7 @@ impl CodeMap {\n         // Remove utf-8 BOM if any.\n         // FIXME #12884: no efficient/safe way to remove from the start of a string\n         // and reuse the allocation.\n-        let mut src = if src.starts_with(\"\\ufeff\") {\n+        let mut src = if src.starts_with(\"\\u{feff}\") {\n             String::from_str(src.slice_from(3))\n         } else {\n             String::from_str(src.as_slice())"}, {"sha": "ea305642f6655c95d321d4dbb6314766927b933e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -23,7 +23,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![allow(unknown_features)]\n-#![feature(if_let, macro_rules, globs, default_type_params, phase, slicing_syntax)]\n+#![feature(macro_rules, globs, default_type_params, phase, slicing_syntax)]\n #![feature(quote, unsafe_destructor, import_shadowing)]\n \n extern crate arena;"}, {"sha": "4c15fae9feb873b48cc2e4da2b8c483d4ddaf09c", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -763,8 +763,6 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    // SNAP c9f6d69\n-    #[allow(unused)]\n     fn old_escape_warning(&mut self, sp: Span) {\n         self.span_diagnostic\n             .span_warn(sp, \"\\\\U00ABCD12 and \\\\uABCD escapes are deprecated\");\n@@ -796,17 +794,15 @@ impl<'a> StringReader<'a> {\n                                     self.scan_unicode_escape(delim)\n                                 } else {\n                                     let res = self.scan_hex_digits(4u, delim, false);\n-                                    // SNAP c9f6d69\n-                                    //let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n-                                    //self.old_escape_warning(sp);\n+                                    let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n+                                    self.old_escape_warning(sp);\n                                     res\n                                 }\n                             }\n                             'U' if !ascii_only => {\n                                 let res = self.scan_hex_digits(8u, delim, false);\n-                                // SNAP c9f6d69\n-                                //let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n-                                //self.old_escape_warning(sp);\n+                                let sp = codemap::mk_sp(escaped_pos, self.last_pos);\n+                                self.old_escape_warning(sp);\n                                 res\n                             }\n                             '\\n' if delim == '\"' => {"}, {"sha": "1bdcd73d847fa6cdcebe371e70a7df36d45c8215", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -89,10 +89,8 @@ impl Lit {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl Copy for Lit {}\n \n-#[cfg(not(stage0))]\n impl Copy for IdentStyle {}\n \n #[allow(non_camel_case_types)]"}, {"sha": "1dd205eb21684194bc8d4eb8dd285210c4ca3817", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 7488, "deletions": 6779, "changes": 14267, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04"}, {"sha": "f3aaad549c9aa7feb22fd5b81cf4e227bef1d765", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -46,8 +46,8 @@ pub trait UnicodeStrPrelude for Sized? {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let gr1 = \"a\\u0310e\\u0301o\\u0308\\u0332\".graphemes(true).collect::<Vec<&str>>();\n-    /// let b: &[_] = &[\"a\\u0310\", \"e\\u0301\", \"o\\u0308\\u0332\"];\n+    /// let gr1 = \"a\\u{0310}e\\u{0301}o\\u{0308}\\u{0332}\".graphemes(true).collect::<Vec<&str>>();\n+    /// let b: &[_] = &[\"a\\u{0310}\", \"e\\u{0301}\", \"o\\u{0308}\\u{0332}\"];\n     /// assert_eq!(gr1.as_slice(), b);\n     /// let gr2 = \"a\\r\\nb\ud83c\uddf7\ud83c\uddfa\ud83c\uddf8\ud83c\uddf9\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\", \"\\r\\n\", \"b\", \"\ud83c\uddf7\ud83c\uddfa\ud83c\uddf8\ud83c\uddf9\"];"}, {"sha": "9a40c24a8e8c5903e2d3830f9a94b1fcbaadb568", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -1,3 +1,12 @@\n+S 2014-12-09 cafe296\n+  freebsd-x86_64 f80b943b94747764282d1b54d861b600eadd224f\n+  linux-i386 96b390dc7d0c38b7b60f04fc5a6565ecfa9cb977\n+  linux-x86_64 3c29c67bc752b30e4bf430a20cf573bd0a4c5e11\n+  macos-i386 c5f6b7c4d40d052ccb212e794df7ea0a2941854d\n+  macos-x86_64 b522ac305ad777a51429564bab27ea4af432ab87\n+  winnt-i386 f6db8b1832022b1e028d5fc038eba41b261d44b1\n+  winnt-x86_64 f5b633290669b0ffb70efdc5dd5584814c640181\n+\n S 2014-11-21 c9f6d69\n   freebsd-x86_64 0ef316e7c369177de043e69e964418bd637cbfc0\n   linux-i386 c8342e762a1720be939ed7c6a39bdaa27892f66f"}, {"sha": "fbe03e355eed6e5cba7b267c5e044072aff74b11", "filename": "src/test/compile-fail/lex-bad-char-literals.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Ftest%2Fcompile-fail%2Flex-bad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52edb2ecc9530264dc75babe477fd75c64feac04/src%2Ftest%2Fcompile-fail%2Flex-bad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flex-bad-char-literals.rs?ref=52edb2ecc9530264dc75babe477fd75c64feac04", "patch": "@@ -10,10 +10,12 @@\n \n static c: char =\n     '\\u539_' //~ ERROR: illegal character in numeric character escape\n+    //~^ WARNING: \\uABCD escapes are deprecated\n ;\n \n static c2: char =\n     '\\Uffffffff' //~ ERROR: illegal numeric character escape\n+    //~^ WARNING: \\uABCD escapes are deprecated\n ;\n \n static c3: char =\n@@ -22,8 +24,9 @@ static c3: char =\n \n static c4: char =\n     '\\u23q' //~  ERROR: illegal character in numeric character escape\n+    //~^ WARNING: \\uABCD escapes are deprecated\n ;\n-//~^^ ERROR: numeric character escape is too short\n+//~^^^ ERROR: numeric character escape is too short\n \n static s: &'static str =\n     \"\\x1\" //~ ERROR: numeric character escape is too short\n@@ -32,6 +35,7 @@ static s: &'static str =\n static s2: &'static str =\n     \"\\u23q\" //~ ERROR: illegal character in numeric character escape\n     //~^ ERROR: numeric character escape is too short\n+    //~^^ WARNING: \\uABCD escapes are deprecated\n ;\n \n static c: char ="}]}