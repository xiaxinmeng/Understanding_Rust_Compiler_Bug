{"sha": "04acba7968e13c51b0ce2125e7fc749b4851ed9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWNiYTc5NjhlMTNjNTFiMGNlMjEyNWU3ZmM3NDliNDg1MWVkOWM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-05T08:38:35Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-05T08:42:17Z"}, "message": "Move pretty-printing 'modes' into a callback hook\n\nThis way, the pretty-printer does not have to know about middle::ty.\n\n(This is a preparation for separating the AST functionality into a\nseparate crate.)", "tree": {"sha": "f84ad50ea64024f05d7b7c08cfe54200fcfdba5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f84ad50ea64024f05d7b7c08cfe54200fcfdba5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04acba7968e13c51b0ce2125e7fc749b4851ed9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04acba7968e13c51b0ce2125e7fc749b4851ed9c", "html_url": "https://github.com/rust-lang/rust/commit/04acba7968e13c51b0ce2125e7fc749b4851ed9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04acba7968e13c51b0ce2125e7fc749b4851ed9c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "001397da3ced1065b254a0e87ae071e17d0b16ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/001397da3ced1065b254a0e87ae071e17d0b16ba", "html_url": "https://github.com/rust-lang/rust/commit/001397da3ced1065b254a0e87ae071e17d0b16ba"}], "stats": {"total": 158, "additions": 85, "deletions": 73}, "files": [{"sha": "10f374d2392f250597712a9c72f1b8364c598332", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=04acba7968e13c51b0ce2125e7fc749b4851ed9c", "patch": "@@ -12,6 +12,7 @@ import middle::resolve;\n import middle::ty;\n import middle::typeck;\n import middle::tstate::ck;\n+import pretty::pp;\n import pretty::pprust;\n import pretty::ppaux;\n import back::link;\n@@ -24,6 +25,7 @@ import std::option::some;\n import std::option::none;\n import std::str;\n import std::vec;\n+import std::int;\n import std::io;\n import std::run;\n import std::getopts;\n@@ -127,22 +129,67 @@ fn compile_input(session::session sess, ast::crate_cfg cfg, str input,\n \n fn pretty_print_input(session::session sess, ast::crate_cfg cfg,\n                       str input, pp_mode ppm) {\n+    fn ann_paren_for_expr(&ppaux::ann_node node) {\n+        alt (node) {\n+            case (ppaux::node_expr(?s, ?expr)) {\n+                pprust::popen(s);\n+            }\n+            case (_) {}\n+        }\n+    }\n+    fn ann_typed_post(&ty::ctxt tcx, &ppaux::ann_node node) {\n+        alt (node) {\n+            case (ppaux::node_expr(?s, ?expr)) {\n+                pp::space(s.s);\n+                pp::word(s.s, \"as\");\n+                pp::space(s.s);\n+                pp::word(s.s, ppaux::ty_to_str(tcx, ty::expr_ty(tcx, expr)));\n+                pprust::pclose(s);\n+            }\n+            case (_) {}\n+        }\n+    }\n+    fn ann_identified_post(&ppaux::ann_node node) {\n+        alt (node) {\n+            case (ppaux::node_item(?s, ?item)) {\n+                pp::space(s.s);\n+                pprust::synth_comment(s, int::to_str(item.id, 10u));\n+            }\n+            case (ppaux::node_block(?s, ?blk)) {\n+                pp::space(s.s);\n+                pprust::synth_comment(s, \"block \" +\n+                                      int::to_str(blk.node.id, 10u));\n+            }\n+            case (ppaux::node_expr(?s, ?expr)) {\n+                pp::space(s.s);\n+                pprust::synth_comment(s, int::to_str(expr.id, 10u));\n+                pprust::pclose(s);\n+            }\n+            case (_) {}\n+        }\n+    }\n+\n     auto p = front::parser::new_parser(sess, cfg, input, 0u, 0);\n     auto crate = parse_input(sess, p, input);\n-    auto mode;\n+    auto ann;\n     alt (ppm) {\n         case (ppm_typed) {\n             auto amap = middle::ast_map::map_crate(*crate);\n             auto d = resolve::resolve_crate(sess, amap, crate);\n             auto ty_cx = ty::mk_ctxt(sess, d._0, d._1, amap);\n             typeck::check_crate(ty_cx, crate);\n-            mode = ppaux::mo_typed(ty_cx);\n+            ann = rec(pre=ann_paren_for_expr,\n+                      post=bind ann_typed_post(ty_cx, _));\n+        }\n+        case (ppm_identified) {\n+            ann = rec(pre=ann_paren_for_expr,\n+                      post=ann_identified_post);\n+        }\n+        case (ppm_normal) {\n+            ann = ppaux::no_ann();\n         }\n-        case (ppm_normal) { mode = ppaux::mo_untyped; }\n-        case (ppm_identified) { mode = ppaux::mo_identified; }\n     }\n-    pprust::print_crate(sess, crate, input, std::io::stdout(),\n-                        mode);\n+    pprust::print_crate(sess, crate, input, std::io::stdout(), ann);\n }\n \n fn version(str argv0) {"}, {"sha": "ea4136182ba8438b3fb8a0a46edb08f58a64a1ae", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=04acba7968e13c51b0ce2125e7fc749b4851ed9c", "patch": "@@ -337,6 +337,22 @@ fn next_comment(&ps s) -> option::t[lexer::cmnt] {\n     }\n }\n \n+// The ps is stored here to prevent recursive type.\n+// FIXME use a nominal tag instead\n+tag ann_node {\n+    node_block(ps, ast::block);\n+    node_item(ps, @ast::item);\n+    node_expr(ps, @ast::expr);\n+    node_pat(ps, @ast::pat);\n+}\n+type pp_ann = rec(fn(&ann_node node) pre,\n+                  fn(&ann_node node) post);\n+\n+fn no_ann() -> pp_ann {\n+    fn ignore(&ann_node node) {}\n+    ret rec(pre=ignore, post=ignore);\n+}\n+\n type ps =\n     @rec(pp::printer s,\n          option::t[codemap] cm,\n@@ -345,7 +361,7 @@ type ps =\n          mutable uint cur_cmnt,\n          mutable uint cur_lit,\n          mutable vec[pp::breaks] boxes,\n-         mode mode);\n+         pp_ann ann);\n \n fn ibox(&ps s, uint u) {\n     vec::push(s.boxes, pp::inconsistent);\n@@ -354,8 +370,6 @@ fn ibox(&ps s, uint u) {\n \n fn end(&ps s) { vec::pop(s.boxes); pp::end(s.s); }\n \n-tag mode { mo_untyped; mo_typed(ctxt); mo_identified; }\n-\n fn rust_printer(io::writer writer) -> ps {\n     let vec[pp::breaks] boxes = [];\n     ret @rec(s=pp::mk_printer(writer, default_columns),\n@@ -365,7 +379,7 @@ fn rust_printer(io::writer writer) -> ps {\n              mutable cur_cmnt=0u,\n              mutable cur_lit=0u,\n              mutable boxes=boxes,\n-             mode=mo_untyped);\n+             ann=no_ann());\n }\n \n const uint indent_unit = 4u;"}, {"sha": "104362aa26ea989f16d348081125b7be2fb19bb4", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 14, "deletions": 62, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=04acba7968e13c51b0ce2125e7fc749b4851ed9c", "patch": "@@ -10,7 +10,6 @@ import front::lexer;\n import front::codemap;\n import front::codemap::codemap;\n import front::ast;\n-import middle::ty;\n import util::common;\n import option::some;\n import option::none;\n@@ -29,7 +28,7 @@ import pp::eof;\n import ppaux::*;\n \n fn print_crate(session sess, @ast::crate crate, str filename,\n-               io::writer out, mode mode) {\n+               io::writer out, &pp_ann ann) {\n     let vec[pp::breaks] boxes = [];\n     auto r = lexer::gather_comments_and_literals(sess, filename);\n     auto s =\n@@ -40,7 +39,7 @@ fn print_crate(session sess, @ast::crate crate, str filename,\n              mutable cur_cmnt=0u,\n              mutable cur_lit=0u,\n              mutable boxes=boxes,\n-             mode=mode);\n+             ann=ann);\n     print_mod(s, crate.node.module, crate.node.attrs);\n     eof(s.s);\n }\n@@ -297,6 +296,8 @@ fn print_item(&ps s, &@ast::item item) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, item.span.lo);\n     print_outer_attributes(s, item.attrs);\n+    auto ann_node = node_item(s, item);\n+    s.ann.pre(ann_node);\n     alt (item.node) {\n         case (ast::item_const(?ty, ?expr)) {\n             head(s, \"const\");\n@@ -470,15 +471,7 @@ fn print_item(&ps s, &@ast::item item) {\n             print_block(s, dt.body);\n         }\n     }\n-\n-    // Print the node ID if necessary. TODO: type as well.\n-    alt (s.mode) {\n-        case (mo_identified) {\n-            space(s.s);\n-            synth_comment(s, int::to_str(item.id, 10u));\n-        }\n-        case (_) {/* no-op */ }\n-    }\n+    s.ann.post(ann_node);\n }\n \n fn print_outer_attributes(&ps s, vec[ast::attribute] attrs) {\n@@ -530,6 +523,8 @@ fn print_stmt(&ps s, &ast::stmt st) {\n \n fn print_block(&ps s, ast::block blk) {\n     maybe_print_comment(s, blk.span.lo);\n+    auto ann_node = node_block(s, blk);\n+    s.ann.pre(ann_node);\n     bopen(s);\n     for (@ast::stmt st in blk.node.stmts) { print_stmt(s, *st) }\n     alt (blk.node.expr) {\n@@ -541,15 +536,7 @@ fn print_block(&ps s, ast::block blk) {\n         case (_) { }\n     }\n     bclose(s, blk.span);\n-\n-    // Print the node ID if necessary: TODO: type as well.\n-    alt (s.mode) {\n-        case (mo_identified) {\n-            space(s.s);\n-            synth_comment(s, \"block \" + int::to_str(blk.node.id, 10u));\n-        }\n-        case (_) {/* no-op */ }\n-    }\n+    s.ann.post(ann_node);\n }\n \n fn print_if(&ps s, &@ast::expr test, &ast::block block,\n@@ -597,11 +584,8 @@ fn print_if(&ps s, &@ast::expr test, &ast::block block,\n fn print_expr(&ps s, &@ast::expr expr) {\n     maybe_print_comment(s, expr.span.lo);\n     ibox(s, indent_unit);\n-    alt (s.mode) {\n-        case (mo_untyped) {/* no-op */ }\n-        case (mo_typed(_)) { popen(s); }\n-        case (mo_identified) { popen(s); }\n-    }\n+    auto ann_node = node_expr(s, expr);\n+    s.ann.pre(ann_node);\n     alt (expr.node) {\n         case (ast::expr_vec(?exprs, ?mut, ?kind)) {\n             ibox(s, indent_unit);\n@@ -926,23 +910,7 @@ fn print_expr(&ps s, &@ast::expr expr) {\n \n         }\n     }\n-    // Print the type or node ID if necessary.\n-\n-    alt (s.mode) {\n-        case (mo_untyped) {/* no-op */ }\n-        case (mo_typed(?tcx)) {\n-            space(s.s);\n-            word(s.s, \"as\");\n-            space(s.s);\n-            word(s.s, ppaux::ty_to_str(tcx, ty::expr_ty(tcx, expr)));\n-            pclose(s);\n-        }\n-        case (mo_identified) {\n-            space(s.s);\n-            synth_comment(s, int::to_str(expr.id, 10u));\n-            pclose(s);\n-        }\n-    }\n+    s.ann.post(ann_node);\n     end(s);\n }\n \n@@ -960,16 +928,6 @@ fn print_decl(&ps s, &@ast::decl decl) {\n                 }\n                 case (_) {\n                     word_nbsp(s, \"auto\");\n-\n-                    // Print the type or node ID if necessary.\n-                    alt (s.mode) {\n-                        case (mo_untyped) {/* no-op */ }\n-                        case (mo_typed(?tcx)) {\n-                            auto lty = ty::node_id_to_type(tcx, loc.node.id);\n-                            word_space(s, ppaux::ty_to_str(tcx, lty));\n-                        }\n-                        case (mo_identified) {/* no-op */ }\n-                    }\n                 }\n             }\n             word(s.s, loc.node.ident);\n@@ -1015,6 +973,8 @@ fn print_path(&ps s, &ast::path path) {\n \n fn print_pat(&ps s, &@ast::pat pat) {\n     maybe_print_comment(s, pat.span.lo);\n+    auto ann_node = node_pat(s, pat);\n+    s.ann.pre(ann_node);\n     alt (pat.node) {\n         case (ast::pat_wild) { word(s.s, \"_\"); }\n         case (ast::pat_bind(?id)) { word(s.s, \"?\" + id); }\n@@ -1028,15 +988,7 @@ fn print_pat(&ps s, &@ast::pat pat) {\n             }\n         }\n     }\n-\n-    // Print the node ID if necessary. TODO: type as well.\n-    alt (s.mode) {\n-        case (mo_identified) {\n-            space(s.s);\n-            synth_comment(s, int::to_str(pat.id, 10u));\n-        }\n-        case (_) {/* no-op */ }\n-    }\n+    s.ann.post(ann_node);\n }\n \n fn print_fn(&ps s, ast::fn_decl decl, ast::proto proto, str name,"}, {"sha": "9eca5c1f9b52820a50e5cbf0ef185c880e76509a", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04acba7968e13c51b0ce2125e7fc749b4851ed9c/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=04acba7968e13c51b0ce2125e7fc749b4851ed9c", "patch": "@@ -25,7 +25,6 @@ import pretty::pprust::print_decl;\n import pretty::pprust::print_fn;\n import pretty::pprust::print_type;\n import pretty::ppaux::print_literal;\n-import pretty::ppaux::mo_untyped;\n import pretty::pp::mk_printer;\n \n type filename = str;"}]}