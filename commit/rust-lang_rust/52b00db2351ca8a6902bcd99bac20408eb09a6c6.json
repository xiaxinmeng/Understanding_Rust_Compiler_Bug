{"sha": "52b00db2351ca8a6902bcd99bac20408eb09a6c6", "node_id": "C_kwDOAAsO6NoAKDUyYjAwZGIyMzUxY2E4YTY5MDJiY2Q5OWJhYzIwNDA4ZWIwOWE2YzY", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-03-13T15:56:18Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-02T18:01:17Z"}, "message": "Make GATs object safe under generic_associated_types_extended feature", "tree": {"sha": "0ef3056daf94f093886a5920ec4a8976b0a9b45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef3056daf94f093886a5920ec4a8976b0a9b45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52b00db2351ca8a6902bcd99bac20408eb09a6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52b00db2351ca8a6902bcd99bac20408eb09a6c6", "html_url": "https://github.com/rust-lang/rust/commit/52b00db2351ca8a6902bcd99bac20408eb09a6c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52b00db2351ca8a6902bcd99bac20408eb09a6c6/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0677edc86e342f333d4828b0ee1ef395a4e70fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0677edc86e342f333d4828b0ee1ef395a4e70fe5", "html_url": "https://github.com/rust-lang/rust/commit/0677edc86e342f333d4828b0ee1ef395a4e70fe5"}], "stats": {"total": 284, "additions": 240, "deletions": 44}, "files": [{"sha": "54f7c68060f63f4f9dfb89ad937784d04ab5a230", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -131,16 +131,18 @@ fn object_safety_violations_for_trait(\n             }),\n     );\n \n-    violations.extend(\n-        tcx.associated_items(trait_def_id)\n-            .in_definition_order()\n-            .filter(|item| item.kind == ty::AssocKind::Type)\n-            .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n-            .map(|item| {\n-                let ident = item.ident(tcx);\n-                ObjectSafetyViolation::GAT(ident.name, ident.span)\n-            }),\n-    );\n+    if !tcx.features().generic_associated_types_extended {\n+        violations.extend(\n+            tcx.associated_items(trait_def_id)\n+                .in_definition_order()\n+                .filter(|item| item.kind == ty::AssocKind::Type)\n+                .filter(|item| !tcx.generics_of(item.def_id).params.is_empty())\n+                .map(|item| {\n+                    let ident = item.ident(tcx);\n+                    ObjectSafetyViolation::GAT(ident.name, ident.span)\n+                }),\n+        );\n+    }\n \n     debug!(\n         \"object_safety_violations_for_trait(trait_def_id={:?}) = {:?}\","}, {"sha": "18a37759543174d5c558960e646f3b3c0b6159b9", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -11,8 +11,8 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n-use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use rustc_middle::ty::{self, GenericParamDefKind, Ty};\n use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n use rustc_span::def_id::DefId;\n \n@@ -487,18 +487,80 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .collect();\n \n         for assoc_type in assoc_types {\n-            if !tcx.generics_of(assoc_type).params.is_empty() {\n+            let defs: &ty::Generics = tcx.generics_of(assoc_type);\n+\n+            if !defs.params.is_empty() && !tcx.features().generic_associated_types_extended {\n                 tcx.sess.delay_span_bug(\n                     obligation.cause.span,\n                     \"GATs in trait object shouldn't have been considered\",\n                 );\n                 return Err(SelectionError::Unimplemented);\n             }\n+\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things.\n             // Prevent, e.g., `dyn Iterator<Item = str>`.\n             for bound in self.tcx().item_bounds(assoc_type) {\n-                let subst_bound = bound.subst(tcx, trait_predicate.trait_ref.substs);\n+                let subst_bound =\n+                    if defs.count() == 0 {\n+                        bound.subst(tcx, trait_predicate.trait_ref.substs)\n+                    } else {\n+                        let mut substs = smallvec::SmallVec::with_capacity(defs.count());\n+                        substs.extend(trait_predicate.trait_ref.substs.iter());\n+                        let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n+                            smallvec::SmallVec::with_capacity(\n+                                bound.kind().bound_vars().len() + defs.count(),\n+                            );\n+                        bound_vars.extend(bound.kind().bound_vars().into_iter());\n+                        InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param\n+                            .kind\n+                        {\n+                            GenericParamDefKind::Type { .. } => {\n+                                let kind = ty::BoundTyKind::Param(param.name);\n+                                let bound_var = ty::BoundVariableKind::Ty(kind);\n+                                bound_vars.push(bound_var);\n+                                tcx.mk_ty(ty::Bound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundTy {\n+                                        var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n+                                        kind,\n+                                    },\n+                                ))\n+                                .into()\n+                            }\n+                            GenericParamDefKind::Lifetime => {\n+                                let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n+                                let bound_var = ty::BoundVariableKind::Region(kind);\n+                                bound_vars.push(bound_var);\n+                                tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion {\n+                                        var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n+                                        kind,\n+                                    },\n+                                ))\n+                                .into()\n+                            }\n+                            GenericParamDefKind::Const { .. } => {\n+                                let bound_var = ty::BoundVariableKind::Const;\n+                                bound_vars.push(bound_var);\n+                                tcx.mk_const(ty::ConstS {\n+                                    ty: tcx.type_of(param.def_id),\n+                                    val: ty::ConstKind::Bound(\n+                                        ty::INNERMOST,\n+                                        ty::BoundVar::from_usize(bound_vars.len() - 1),\n+                                    ),\n+                                })\n+                                .into()\n+                            }\n+                        });\n+                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let assoc_ty_substs = tcx.intern_substs(&substs);\n+\n+                        let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n+                        let bound = bound.kind().skip_binder().subst(tcx, assoc_ty_substs);\n+                        tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n+                    };\n                 let normalized_bound = normalize_with_depth_to(\n                     self,\n                     obligation.param_env,"}, {"sha": "c2054f64e2d6b8d97322b2e6062ffc72e8fd0e92", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.base.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/gat-in-trait-path.rs:21:17\n+  --> $DIR/gat-in-trait-path.rs:27:17\n    |\n LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/gat-in-trait-path.rs:5:10\n+  --> $DIR/gat-in-trait-path.rs:11:10\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...", "previous_filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr"}, {"sha": "c82450ccff1499dd5a8236789346b96ee88dc1f9", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,5 +1,11 @@\n+// revisions: base extended\n+//[base] check-fail\n+//[extended] check-pass\n+\n #![feature(generic_associated_types)]\n #![feature(associated_type_defaults)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n \n trait Foo {\n     type A<'a> where Self: 'a;\n@@ -19,7 +25,7 @@ impl<T> Foo for Fooer<T> {\n }\n \n fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n-//~^ the trait `Foo` cannot be made into an object\n+//[base]~^ the trait `Foo` cannot be made into an object\n \n \n fn main() {"}, {"sha": "74a616aaabe3a89f7e8c8bd0765a292ce577a063", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.base.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-67510-pass.rs:7:23\n+  --> $DIR/issue-67510-pass.rs:13:23\n    |\n LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |                       ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-67510-pass.rs:4:10\n+  --> $DIR/issue-67510-pass.rs:10:10\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object...", "previous_filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr"}, {"sha": "c5b02ff9a64009211cb54372e59c60cdf3a8ae2d", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,10 +1,16 @@\n+// revisions: base extended\n+//[base] check-fail\n+//[extended] check-pass\n+\n #![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n \n trait X {\n     type Y<'a>;\n }\n \n fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n-//~^ ERROR the trait `X` cannot be made into an object\n+//[base]~^ ERROR the trait `X` cannot be made into an object\n \n fn main() {}"}, {"sha": "5decd58bbcd0bacdbd65556450c2f57e08dc84e6", "filename": "src/test/ui/generic-associated-types/issue-76535.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `SuperTrait::SubType`\n-  --> $DIR/issue-76535.rs:36:33\n+  --> $DIR/issue-76535.rs:40:33\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                 ^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-76535.rs:6:10\n+  --> $DIR/issue-76535.rs:10:10\n    |\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ --\n@@ -15,13 +15,13 @@ LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperS\n    |                                 ~~~~~~~~~~~\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:36:14\n+  --> $DIR/issue-76535.rs:40:14\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:6:10\n+  --> $DIR/issue-76535.rs:10:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n@@ -30,13 +30,13 @@ LL |     type SubType<'a>: SubTrait where Self: 'a;\n    = help: consider moving `SubType` to another trait\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n-  --> $DIR/issue-76535.rs:36:57\n+  --> $DIR/issue-76535.rs:40:57\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-76535.rs:6:10\n+  --> $DIR/issue-76535.rs:10:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...", "previous_filename": "src/test/ui/generic-associated-types/issue-76535.stderr"}, {"sha": "067d0489b486b3f16bc1f3c7f828978d37b01481", "filename": "src/test/ui/generic-associated-types/issue-76535.extended.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.extended.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `SuperTrait::SubType`\n+  --> $DIR/issue-76535.rs:40:33\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                 ^^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-76535.rs:10:10\n+   |\n+LL |     type SubType<'a>: SubTrait where Self: 'a;\n+   |          ^^^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType<'a> = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                 ~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "46f217ba06bc84ab0f805efb8892c2fd52e36604", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,4 +1,8 @@\n+// revisions: base extended\n+\n #![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n \n pub trait SubTrait {}\n \n@@ -35,6 +39,6 @@ impl SuperTrait for SuperStruct {\n fn main() {\n     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n       //~^ ERROR missing generics for associated type\n-      //~^^ ERROR the trait\n-      //~| ERROR the trait\n+      //[base]~^^ ERROR the trait\n+      //[base]~| ERROR the trait\n }"}, {"sha": "6bcd004b1a92e85fbf82117923fdebdf205b7680", "filename": "src/test/ui/generic-associated-types/issue-78671.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.base.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `CollectionFamily::Member`\n-  --> $DIR/issue-78671.rs:7:47\n+  --> $DIR/issue-78671.rs:11:47\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                                               ^^^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-78671.rs:4:10\n+  --> $DIR/issue-78671.rs:8:10\n    |\n LL |     type Member<T>;\n    |          ^^^^^^ -\n@@ -15,13 +15,13 @@ LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n    |                                               ~~~~~~~~~\n \n error[E0038]: the trait `CollectionFamily` cannot be made into an object\n-  --> $DIR/issue-78671.rs:7:25\n+  --> $DIR/issue-78671.rs:11:25\n    |\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-78671.rs:4:10\n+  --> $DIR/issue-78671.rs:8:10\n    |\n LL | trait CollectionFamily {\n    |       ---------------- this trait cannot be made into an object...", "previous_filename": "src/test/ui/generic-associated-types/issue-78671.stderr"}, {"sha": "f1b48933516f6673e88362b5fd7c6b0809cc17fd", "filename": "src/test/ui/generic-associated-types/issue-78671.extended.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.extended.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `CollectionFamily::Member`\n+  --> $DIR/issue-78671.rs:11:47\n+   |\n+LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n+   |                                               ^^^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-78671.rs:8:10\n+   |\n+LL |     type Member<T>;\n+   |          ^^^^^^ -\n+help: add missing generic argument\n+   |\n+LL |     Box::new(Family) as &dyn CollectionFamily<Member<T>=usize>\n+   |                                               ~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "c09dac28bda6c7a4bb0cd0ebac3e0c51e1c5f4d0", "filename": "src/test/ui/generic-associated-types/issue-78671.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,12 +1,16 @@\n+// revisions: base extended\n+\n #![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n \n trait CollectionFamily {\n     type Member<T>;\n }\n fn floatify() {\n     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n     //~^ ERROR: missing generics for associated type\n-    //~| ERROR: the trait `CollectionFamily` cannot be made into an object\n+    //[base]~^^ ERROR: the trait `CollectionFamily` cannot be made into an object\n }\n \n struct Family;"}, {"sha": "404c975d64a210c2e2393509bb8bf116948fcdde", "filename": "src/test/ui/generic-associated-types/issue-79422.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `MapLike::VRefCont`\n-  --> $DIR/issue-79422.rs:42:36\n+  --> $DIR/issue-79422.rs:48:36\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |                                    ^^^^^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-79422.rs:20:10\n+  --> $DIR/issue-79422.rs:24:10\n    |\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ --\n@@ -15,13 +15,13 @@ LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n    |                                    ~~~~~~~~~~~~\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:42:12\n+  --> $DIR/issue-79422.rs:48:12\n    |\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:20:10\n+  --> $DIR/issue-79422.rs:24:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n@@ -30,13 +30,13 @@ LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    = help: consider moving `VRefCont` to another trait\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n-  --> $DIR/issue-79422.rs:41:13\n+  --> $DIR/issue-79422.rs:45:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-79422.rs:20:10\n+  --> $DIR/issue-79422.rs:24:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...", "previous_filename": "src/test/ui/generic-associated-types/issue-79422.stderr"}, {"sha": "9478fc897921121405f0776b02353e0b811c03ec", "filename": "src/test/ui/generic-associated-types/issue-79422.extended.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -0,0 +1,35 @@\n+error[E0107]: missing generics for associated type `MapLike::VRefCont`\n+  --> $DIR/issue-79422.rs:48:36\n+   |\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+   |                                    ^^^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-79422.rs:24:10\n+   |\n+LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n+   |          ^^^^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n+   |                                    ~~~~~~~~~~~~\n+\n+error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n+  --> $DIR/issue-79422.rs:45:13\n+   |\n+LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n+   |\n+note: expected this to be `(dyn RefCont<'_, u8> + 'static)`\n+  --> $DIR/issue-79422.rs:29:25\n+   |\n+LL |     type VRefCont<'a> = &'a V where Self: 'a;\n+   |                         ^^^^^\n+   = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n+                 found reference `&u8`\n+   = note: required for the cast to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0107, E0271.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "7749975e68727f2f1cbe5446d24c5443dcc06852", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,4 +1,8 @@\n+// revisions: base extended\n+\n #![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n \n trait RefCont<'a, T> {\n     fn t(&'a self) -> &'a T;\n@@ -39,8 +43,9 @@ impl<K, V: Default> MapLike<K, V> for Source {\n \n fn main() {\n     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n+    //[base]~^ ERROR the trait\n+    //[extended]~^^ type mismatch\n         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n       //~^ ERROR missing generics for associated type\n-      //~^^ ERROR the trait\n-      //~^^^^ ERROR the trait\n+      //[base]~^^ ERROR the trait\n }"}, {"sha": "1df76a21bf9b4d68cf297c3711498457e985ee18", "filename": "src/test/ui/generic-associated-types/trait-objects.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `StreamingIterator` cannot be made into an object\n-  --> $DIR/trait-objects.rs:10:21\n+  --> $DIR/trait-objects.rs:14:21\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-objects.rs:4:10\n+  --> $DIR/trait-objects.rs:8:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object...", "previous_filename": "src/test/ui/generic-associated-types/trait-objects.stderr"}, {"sha": "52d48d57859f473749889611528d3c5713c18f60", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -0,0 +1,17 @@\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/trait-objects.rs:16:5\n+   |\n+LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n+   |             -  - let's call the lifetime of this reference `'1`\n+   |             |\n+   |             `x` is a reference that is only valid in the function body\n+LL |\n+LL |     x.size_hint().0\n+   |     ^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "7cc3dad99211011ed8e4fd9135f468d233a1bdf6", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -0,0 +1,12 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/trait-objects.rs:16:7\n+   |\n+LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n+   |                ------------------------------------------------------ help: add explicit lifetime `'a` to the type of `x`: `&'a mut (dyn StreamingIterator<for<'a> Item = &'a i32> + 'a)`\n+LL |\n+LL |     x.size_hint().0\n+   |       ^^^^^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "644e56ce21f10d6491c02a00a1d97d4a3cb2999a", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b00db2351ca8a6902bcd99bac20408eb09a6c6/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=52b00db2351ca8a6902bcd99bac20408eb09a6c6", "patch": "@@ -1,4 +1,8 @@\n+// revisions: base extended\n+\n #![feature(generic_associated_types)]\n+#![cfg_attr(extended, feature(generic_associated_types_extended))]\n+#![cfg_attr(extended, allow(incomplete_features))]\n \n trait StreamingIterator {\n     type Item<'a> where Self: 'a;\n@@ -8,8 +12,9 @@ trait StreamingIterator {\n }\n \n fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n-    //~^ the trait `StreamingIterator` cannot be made into an object\n+    //[base]~^ the trait `StreamingIterator` cannot be made into an object\n     x.size_hint().0\n+    //[extended]~^ explicit lifetime required\n }\n \n fn main() {}"}]}