{"sha": "a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "node_id": "C_kwDOAAsO6NoAKGEwOWQzNmRlYWUyZTI1ZjJlYjRhMGVlNWQ5NTUxOTA0MmViZDY2YTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T22:43:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T22:43:00Z"}, "message": "Auto merge of #97180 - Dylan-DPC:rollup-aa5j2yw, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #96539 (Add release notes for 1.61.0)\n - #97142 (move processing of `source_scope_data` into `MutVisitor`'s impl of `Integrator` when inline)\n - #97155 (Fix doc typo)\n - #97169 (Improve `u32 as char` cast diagnostic)\n - #97170 (Remove unnecessay .report() on ExitCode)\n - #97171 (Add regression test for #88119)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0b8d32d306bf518a31f92226418a1f786343ac6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8d32d306bf518a31f92226418a1f786343ac6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "html_url": "https://github.com/rust-lang/rust/commit/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0672870491e84362f76ddecd50fa229f9b06dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0672870491e84362f76ddecd50fa229f9b06dff", "html_url": "https://github.com/rust-lang/rust/commit/c0672870491e84362f76ddecd50fa229f9b06dff"}, {"sha": "1fb9be0cee828d29cfe38fa61c6b3f1c21424f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb9be0cee828d29cfe38fa61c6b3f1c21424f1c", "html_url": "https://github.com/rust-lang/rust/commit/1fb9be0cee828d29cfe38fa61c6b3f1c21424f1c"}], "stats": {"total": 275, "additions": 216, "deletions": 59}, "files": [{"sha": "0e118fb939ff00f1927ff3c79f60eda944c0ef64", "filename": "RELEASES.md", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -1,3 +1,129 @@\n+Version 1.61.0 (2022-05-19)\n+==========================\n+\n+Language\n+--------\n+\n+- [`const fn` signatures can now include generic trait bounds][93827]\n+- [`const fn` signatures can now use `impl Trait` in argument and return position][93827]\n+- [Function pointers can now be created, cast, and passed around in a `const fn`][93827]\n+- [Recursive calls can now set the value of a function's opaque `impl Trait` return type][94081]\n+\n+Compiler\n+--------\n+\n+- [Linking modifier syntax in `#[link]` attributes and on the command line, as well as the `whole-archive` modifier specifically, are now supported][93901]\n+- [The `char` type is now described as UTF-32 in debuginfo][89887]\n+- The [`#[target_feature]`][target_feature] attribute [can now be used with aarch64 features][90621]\n+- X86 [`#[target_feature = \"adx\"]` is now stable][93745]\n+\n+Libraries\n+---------\n+\n+- [`ManuallyDrop<T>` is now documented to have the same layout as `T`][88375]\n+- [`#[ignore = \"\u2026\"]` messages are printed when running tests][92714]\n+- [Consistently show absent stdio handles on Windows as NULL handles][93263]\n+- [Make `std::io::stdio::lock()` return `'static` handles.][93965] Previously, the creation of locked handles to stdin/stdout/stderr would borrow the handles being locked, which prevented writing `let out = std::io::stdout().lock();` because `out` would outlive the return value of `stdout()`. Such code now works, eliminating a common pitfall that affected many Rust users.\n+- [`Vec::from_raw_parts` is now less restrictive about its inputs][95016]\n+- [`std::thread::available_parallelism` now takes cgroup quotas into account.][92697] Since `available_parallelism` is often used to create a thread pool for parallel computation, which may be CPU-bound for performance, `available_parallelism` will return a value consistent with the ability to use that many threads continuously, if possible. For instance, in a container with 8 virtual CPUs but quotas only allowing for 50% usage, `available_parallelism` will return 4.\n+\n+Stabilized APIs\n+---------------\n+\n+- [`Pin::static_mut`]\n+- [`Pin::static_ref`]\n+- [`Vec::retain_mut`]\n+- [`VecDeque::retain_mut`]\n+- [`Write` for `Cursor<[u8; N]>`][cursor-write-array]\n+- [`std::os::unix::net::SocketAddr::from_pathname`]\n+- [`std::process::ExitCode`] and [`std::process::Termination`]. The stabilization of these two APIs now makes it possible for programs to return errors from `main` with custom exit codes.\n+- [`std::thread::JoinHandle::is_finished`]\n+\n+These APIs are now usable in const contexts:\n+\n+- [`<*const T>::offset` and `<*mut T>::offset`][ptr-offset]\n+- [`<*const T>::wrapping_offset` and `<*mut T>::wrapping_offset`][ptr-wrapping_offset]\n+- [`<*const T>::add` and `<*mut T>::add`][ptr-add]\n+- [`<*const T>::sub` and `<*mut T>::sub`][ptr-sub]\n+- [`<*const T>::wrapping_add` and `<*mut T>::wrapping_add`][ptr-wrapping_add]\n+- [`<*const T>::wrapping_sub` and `<*mut T>::wrapping_sub`][ptr-wrapping_sub]\n+- [`<[T]>::as_mut_ptr`][slice-as_mut_ptr]\n+- [`<[T]>::as_ptr_range`][slice-as_ptr_range]\n+- [`<[T]>::as_mut_ptr_range`][slice-as_mut_ptr_range]\n+\n+Cargo\n+-----\n+\n+No feature changes, but see compatibility notes.\n+\n+Compatibility Notes\n+-------------------\n+\n+- Previously native static libraries were linked as `whole-archive` in some cases, but now rustc tries not to use `whole-archive` unless explicitly requested. This [change][93901] may result in linking errors in some cases. To fix such errors, native libraries linked from the command line, build scripts, or [`#[link]` attributes][link-attr] need to\n+  - (more common) either be reordered to respect dependencies between them (if `a` depends on `b` then `a` should go first and `b` second)\n+  - (less common) or be updated to use the [`+whole-archive`] modifier.\n+- [Catching a second unwind from FFI code while cleaning up from a Rust panic now causes the process to abort][92911]\n+- [Proc macros no longer see `ident` matchers wrapped in groups][92472]\n+- [The number of `#` in `r#` raw string literals is now required to be less than 256][95251]\n+- [When checking that a dyn type satisfies a trait bound, supertrait bounds are now enforced][92285]\n+- [`cargo vendor` now only accepts one value for each `--sync` flag][cargo/10448]\n+- [`cfg` predicates in `all()` and `any()` are always evaluated to detect errors, instead of short-circuiting.][94295] The compatibility considerations here arise in nightly-only code that used the short-circuiting behavior of `all` to write something like `cfg(all(feature = \"nightly\", syntax-requiring-nightly))`, which will now fail to compile. Instead, use either `cfg_attr(feature = \"nightly\", ...)` or nested uses of `cfg`.\n+- [bootstrap: static-libstdcpp is now enabled by default, and can now be disabled when llvm-tools is enabled][94832]\n+\n+Internal Changes\n+----------------\n+\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [debuginfo: Refactor debuginfo generation for types][94261]\n+- [Remove the everybody loops pass][93913]\n+\n+[88375]: https://github.com/rust-lang/rust/pull/88375/\n+[89887]: https://github.com/rust-lang/rust/pull/89887/\n+[90621]: https://github.com/rust-lang/rust/pull/90621/\n+[92285]: https://github.com/rust-lang/rust/pull/92285/\n+[92472]: https://github.com/rust-lang/rust/pull/92472/\n+[92697]: https://github.com/rust-lang/rust/pull/92697/\n+[92714]: https://github.com/rust-lang/rust/pull/92714/\n+[92911]: https://github.com/rust-lang/rust/pull/92911/\n+[93263]: https://github.com/rust-lang/rust/pull/93263/\n+[93745]: https://github.com/rust-lang/rust/pull/93745/\n+[93827]: https://github.com/rust-lang/rust/pull/93827/\n+[93901]: https://github.com/rust-lang/rust/pull/93901/\n+[93913]: https://github.com/rust-lang/rust/pull/93913/\n+[93965]: https://github.com/rust-lang/rust/pull/93965/\n+[94081]: https://github.com/rust-lang/rust/pull/94081/\n+[94261]: https://github.com/rust-lang/rust/pull/94261/\n+[94295]: https://github.com/rust-lang/rust/pull/94295/\n+[94832]: https://github.com/rust-lang/rust/pull/94832/\n+[95016]: https://github.com/rust-lang/rust/pull/95016/\n+[95251]: https://github.com/rust-lang/rust/pull/95251/\n+[`+whole-archive`]: https://doc.rust-lang.org/stable/rustc/command-line-arguments.html#linking-modifiers-whole-archive\n+[`Pin::static_mut`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_mut\n+[`Pin::static_ref`]: https://doc.rust-lang.org/stable/std/pin/struct.Pin.html#method.static_ref\n+[`Vec::retain_mut`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.retain_mut\n+[`VecDeque::retain_mut`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.retain_mut\n+[`std::os::unix::net::SocketAddr::from_pathname`]: https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAddr.html#method.from_pathname\n+[`std::process::ExitCode`]: https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html\n+[`std::process::Termination`]: https://doc.rust-lang.org/stable/std/process/trait.Termination.html\n+[`std::thread::JoinHandle::is_finished`]: https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html#method.is_finished\n+[cargo/10448]: https://github.com/rust-lang/cargo/pull/10448/\n+[cursor-write-array]: https://doc.rust-lang.org/stable/std/io/struct.Cursor.html#impl-Write-4\n+[link-attr]: https://doc.rust-lang.org/stable/reference/items/external-blocks.html#the-link-attribute\n+[ptr-add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.add\n+[ptr-offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\n+[ptr-sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.sub\n+[ptr-wrapping_add]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_add\n+[ptr-wrapping_offset]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_offset\n+[ptr-wrapping_sub]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.wrapping_sub\n+[slice-as_mut_ptr]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr\n+[slice-as_mut_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range\n+[slice-as_ptr_range]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range\n+[target_feature]: https://doc.rust-lang.org/reference/attributes/codegen.html#the-target_feature-attribute\n+\n+\n Version 1.60.0 (2022-04-07)\n ==========================\n "}, {"sha": "85b7fb5eb25fc1a6a58c4796d73255c9eac540b6", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -554,7 +554,8 @@ impl<'tcx> Inliner<'tcx> {\n                     new_scopes: SourceScope::new(caller_body.source_scopes.len())..,\n                     new_blocks: BasicBlock::new(caller_body.basic_blocks().len())..,\n                     destination: dest,\n-                    return_block: callsite.target,\n+                    callsite_scope: caller_body.source_scopes[callsite.source_info.scope].clone(),\n+                    callsite,\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n@@ -566,31 +567,6 @@ impl<'tcx> Inliner<'tcx> {\n                 // (or existing ones, in a few special cases) in the caller.\n                 integrator.visit_body(&mut callee_body);\n \n-                for scope in &mut callee_body.source_scopes {\n-                    // FIXME(eddyb) move this into a `fn visit_scope_data` in `Integrator`.\n-                    if scope.parent_scope.is_none() {\n-                        let callsite_scope = &caller_body.source_scopes[callsite.source_info.scope];\n-\n-                        // Attach the outermost callee scope as a child of the callsite\n-                        // scope, via the `parent_scope` and `inlined_parent_scope` chains.\n-                        scope.parent_scope = Some(callsite.source_info.scope);\n-                        assert_eq!(scope.inlined_parent_scope, None);\n-                        scope.inlined_parent_scope = if callsite_scope.inlined.is_some() {\n-                            Some(callsite.source_info.scope)\n-                        } else {\n-                            callsite_scope.inlined_parent_scope\n-                        };\n-\n-                        // Mark the outermost callee scope as an inlined one.\n-                        assert_eq!(scope.inlined, None);\n-                        scope.inlined = Some((callsite.callee, callsite.source_info.span));\n-                    } else if scope.inlined_parent_scope.is_none() {\n-                        // Make it easy to find the scope with `inlined` set above.\n-                        scope.inlined_parent_scope =\n-                            Some(integrator.map_scope(OUTERMOST_SOURCE_SCOPE));\n-                    }\n-                }\n-\n                 // If there are any locals without storage markers, give them storage only for the\n                 // duration of the call.\n                 for local in callee_body.vars_and_temps_iter() {\n@@ -786,7 +762,8 @@ struct Integrator<'a, 'tcx> {\n     new_scopes: RangeFrom<SourceScope>,\n     new_blocks: RangeFrom<BasicBlock>,\n     destination: Place<'tcx>,\n-    return_block: Option<BasicBlock>,\n+    callsite_scope: SourceScopeData<'tcx>,\n+    callsite: &'a CallSite<'tcx>,\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n@@ -832,6 +809,28 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         *local = self.map_local(*local);\n     }\n \n+    fn visit_source_scope_data(&mut self, scope_data: &mut SourceScopeData<'tcx>) {\n+        self.super_source_scope_data(scope_data);\n+        if scope_data.parent_scope.is_none() {\n+            // Attach the outermost callee scope as a child of the callsite\n+            // scope, via the `parent_scope` and `inlined_parent_scope` chains.\n+            scope_data.parent_scope = Some(self.callsite.source_info.scope);\n+            assert_eq!(scope_data.inlined_parent_scope, None);\n+            scope_data.inlined_parent_scope = if self.callsite_scope.inlined.is_some() {\n+                Some(self.callsite.source_info.scope)\n+            } else {\n+                self.callsite_scope.inlined_parent_scope\n+            };\n+\n+            // Mark the outermost callee scope as an inlined one.\n+            assert_eq!(scope_data.inlined, None);\n+            scope_data.inlined = Some((self.callsite.callee, self.callsite.source_info.span));\n+        } else if scope_data.inlined_parent_scope.is_none() {\n+            // Make it easy to find the scope with `inlined` set above.\n+            scope_data.inlined_parent_scope = Some(self.map_scope(OUTERMOST_SOURCE_SCOPE));\n+        }\n+    }\n+\n     fn visit_source_scope(&mut self, scope: &mut SourceScope) {\n         *scope = self.map_scope(*scope);\n     }\n@@ -938,7 +937,7 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Return => {\n-                terminator.kind = if let Some(tgt) = self.return_block {\n+                terminator.kind = if let Some(tgt) = self.callsite.target {\n                     TerminatorKind::Goto { target: tgt }\n                 } else {\n                     TerminatorKind::Unreachable"}, {"sha": "d9aaf730efcc472e146a18d2aea7f6023fb64128", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -347,16 +347,22 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 );\n                 err.span_label(self.span, \"invalid cast\");\n                 if self.expr_ty.is_numeric() {\n-                    err.span_help(\n-                        self.span,\n-                        if self.expr_ty == fcx.tcx.types.i8 {\n-                            \"try casting from `u8` instead\"\n-                        } else if self.expr_ty == fcx.tcx.types.u32 {\n-                            \"try `char::from_u32` instead\"\n-                        } else {\n-                            \"try `char::from_u32` instead (via a `u32`)\"\n-                        },\n-                    );\n+                    if self.expr_ty == fcx.tcx.types.u32 {\n+                        match fcx.tcx.sess.source_map().span_to_snippet(self.expr.span) {\n+                            Ok(snippet) => err.span_suggestion(\n+                                self.span,\n+                                \"try `char::from_u32` instead\",\n+                                format!(\"char::from_u32({snippet})\"),\n+                                Applicability::MachineApplicable,\n+                            ),\n+\n+                            Err(_) => err.span_help(self.span, \"try `char::from_u32` instead\"),\n+                        };\n+                    } else if self.expr_ty == fcx.tcx.types.i8 {\n+                        err.span_help(self.span, \"try casting from `u8` instead\");\n+                    } else {\n+                        err.span_help(self.span, \"try `char::from_u32` instead (via a `u32`)\");\n+                    };\n                 }\n                 err.emit();\n             }"}, {"sha": "36df5c3beb30af46a83ac936a7731a5c458c2150", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -2830,7 +2830,7 @@ unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n /// A fence 'A' which has (at least) [`Release`] ordering semantics, synchronizes\n /// with a fence 'B' with (at least) [`Acquire`] semantics, if and only if there\n /// exist operations X and Y, both operating on some atomic object 'M' such\n-/// that A is sequenced before X, Y is synchronized before B and Y observes\n+/// that A is sequenced before X, Y is sequenced before B and Y observes\n /// the change to M. This provides a happens-before dependence between A and B.\n ///\n /// ```text"}, {"sha": "28e802d07e1970bc03b211793f3f0cb10a13749f", "filename": "library/std/src/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -2136,7 +2136,7 @@ pub trait Termination {\n impl Termination for () {\n     #[inline]\n     fn report(self) -> ExitCode {\n-        ExitCode::SUCCESS.report()\n+        ExitCode::SUCCESS\n     }\n }\n \n@@ -2162,7 +2162,7 @@ impl<E: fmt::Debug> Termination for Result<!, E> {\n     fn report(self) -> ExitCode {\n         let Err(err) = self;\n         eprintln!(\"Error: {err:?}\");\n-        ExitCode::FAILURE.report()\n+        ExitCode::FAILURE\n     }\n }\n "}, {"sha": "70dfa7f708b4f6f0a46437998ea0e44d6b8c3946", "filename": "src/test/ui/const-generics/issues/issue-88119.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-88119.rs?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(const_trait_impl, generic_const_exprs)]\n+\n+trait ConstName {\n+    const NAME_BYTES: &'static [u8];\n+}\n+\n+impl const ConstName for u8 {\n+    const NAME_BYTES: &'static [u8] = b\"u8\";\n+}\n+\n+const fn name_len<T: ?Sized + ConstName>() -> usize {\n+    T::NAME_BYTES.len()\n+}\n+\n+impl<T: ?Sized + ConstName> const ConstName for &T\n+where\n+    [(); name_len::<T>()]:,\n+{\n+    const NAME_BYTES: &'static [u8] = b\"&T\";\n+}\n+\n+impl<T: ?Sized + ConstName> const ConstName for &mut T\n+where\n+    [(); name_len::<T>()]:,\n+{\n+    const NAME_BYTES: &'static [u8] = b\"&mut T\";\n+}\n+\n+pub const ICE_1: &'static [u8] = <&&mut u8 as ConstName>::NAME_BYTES;\n+pub const ICE_2: &'static [u8] = <&mut &u8 as ConstName>::NAME_BYTES;\n+\n+fn main() {}"}, {"sha": "68da03928b783ebb9013e912ddc29a7fb67bc4ad", "filename": "src/test/ui/error-codes/E0604.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -1,14 +1,11 @@\n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/E0604.rs:2:5\n    |\n-LL |     1u32 as char;\n-   |     ^^^^^^^^^^^^ invalid cast\n-   |\n-help: try `char::from_u32` instead\n-  --> $DIR/E0604.rs:2:5\n-   |\n LL |     1u32 as char;\n    |     ^^^^^^^^^^^^\n+   |     |\n+   |     invalid cast\n+   |     help: try `char::from_u32` instead: `char::from_u32(1u32)`\n \n error: aborting due to previous error\n "}, {"sha": "81aa268cacc5cd62c11f9d082247d321361c3958", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -56,14 +56,11 @@ LL | | }\n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:25:5\n    |\n-LL |     0u32 as char;\n-   |     ^^^^^^^^^^^^ invalid cast\n-   |\n-help: try `char::from_u32` instead\n-  --> $DIR/error-festival.rs:25:5\n-   |\n LL |     0u32 as char;\n    |     ^^^^^^^^^^^^\n+   |     |\n+   |     invalid cast\n+   |     help: try `char::from_u32` instead: `char::from_u32(0u32)`\n \n error[E0605]: non-primitive cast: `u8` as `Vec<u8>`\n   --> $DIR/error-festival.rs:29:5"}, {"sha": "3a508459cc0466316473a5e2e349787b9d26f943", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a09d36deae2e25f2eb4a0ee5d95519042ebd66a2/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=a09d36deae2e25f2eb4a0ee5d95519042ebd66a2", "patch": "@@ -97,14 +97,11 @@ LL |     let _ = E::A as bool;\n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/cast-rfc0401.rs:41:13\n    |\n-LL |     let _ = 0x61u32 as char;\n-   |             ^^^^^^^^^^^^^^^ invalid cast\n-   |\n-help: try `char::from_u32` instead\n-  --> $DIR/cast-rfc0401.rs:41:13\n-   |\n LL |     let _ = 0x61u32 as char;\n    |             ^^^^^^^^^^^^^^^\n+   |             |\n+   |             invalid cast\n+   |             help: try `char::from_u32` instead: `char::from_u32(0x61u32)`\n \n error[E0606]: casting `bool` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:43:13"}]}