{"sha": "029a9c625371e756d93024efd3deb7636a90f8f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOWE5YzYyNTM3MWU3NTZkOTMwMjRlZmQzZGViNzYzNmE5MGY4Zjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T19:32:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T19:32:50Z"}, "message": "review comments", "tree": {"sha": "fb23999c86fbaf213534fc85f0ca5987399e53ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb23999c86fbaf213534fc85f0ca5987399e53ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/029a9c625371e756d93024efd3deb7636a90f8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/029a9c625371e756d93024efd3deb7636a90f8f8", "html_url": "https://github.com/rust-lang/rust/commit/029a9c625371e756d93024efd3deb7636a90f8f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/029a9c625371e756d93024efd3deb7636a90f8f8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00e262689599a6a753bbf7ce8786e07ed100d238", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e262689599a6a753bbf7ce8786e07ed100d238", "html_url": "https://github.com/rust-lang/rust/commit/00e262689599a6a753bbf7ce8786e07ed100d238"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "bf6891214ace1637dbb5539135984f15e3266e19", "filename": "src/librustc/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/029a9c625371e756d93024efd3deb7636a90f8f8/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/029a9c625371e756d93024efd3deb7636a90f8f8/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=029a9c625371e756d93024efd3deb7636a90f8f8", "patch": "@@ -605,34 +605,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let tables = self.in_progress_tables.map(|t| t.borrow()).unwrap();\n \n-        let mut all_returns_conform_to_trait = true;\n-        let mut all_returns_have_same_type = true;\n-        let mut last_ty = None;\n-        if let Some(ty_ret_ty) = tables.node_type_opt(ret_ty.hir_id) {\n-            let cause = ObligationCause::misc(ret_ty.span, ret_ty.hir_id);\n-            let param_env = ty::ParamEnv::empty();\n-            if let ty::Dynamic(predicates, _) = &ty_ret_ty.kind {\n-                for expr in &visitor.0 {\n-                    if let Some(returned_ty) = tables.node_type_opt(expr.hir_id) {\n-                        all_returns_have_same_type &=\n-                            Some(returned_ty) == last_ty || last_ty.is_none();\n-                        last_ty = Some(returned_ty);\n-                        for predicate in predicates.iter() {\n-                            let pred = predicate.with_self_ty(self.tcx, returned_ty);\n-                            let obl = Obligation::new(cause.clone(), param_env, pred);\n-                            all_returns_conform_to_trait &= self.predicate_may_hold(&obl);\n-                        }\n+        let mut ret_types = visitor.0.iter().filter_map(|expr| tables.node_type_opt(expr.hir_id));\n+        let (last_ty, all_returns_have_same_type) =\n+            ret_types.clone().fold((None, true), |(last_ty, mut same), returned_ty| {\n+                same &= last_ty.map_or(true, |ty| ty == returned_ty);\n+                (Some(returned_ty), same)\n+            });\n+        let all_returns_conform_to_trait =\n+            if let Some(ty_ret_ty) = tables.node_type_opt(ret_ty.hir_id) {\n+                match ty_ret_ty.kind {\n+                    ty::Dynamic(predicates, _) => {\n+                        let cause = ObligationCause::misc(ret_ty.span, ret_ty.hir_id);\n+                        let param_env = ty::ParamEnv::empty();\n+                        ret_types.all(|returned_ty| {\n+                            predicates.iter().all(|predicate| {\n+                                let pred = predicate.with_self_ty(self.tcx, returned_ty);\n+                                let obl = Obligation::new(cause.clone(), param_env, pred);\n+                                self.predicate_may_hold(&obl)\n+                            })\n+                        })\n                     }\n+                    _ => true,\n                 }\n-            }\n-        } else {\n-            // We still want to verify whether all the return types conform to each other.\n-            for expr in &visitor.0 {\n-                let returned_ty = tables.node_type_opt(expr.hir_id);\n-                all_returns_have_same_type &= last_ty == returned_ty || last_ty.is_none();\n-                last_ty = returned_ty;\n-            }\n-        }\n+            } else {\n+                true\n+            };\n \n         let (snippet, last_ty) =\n             if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true, Some(last_ty)) = ("}, {"sha": "16b2722f0eac2b47519db7523443dc15c2eb87f0", "filename": "src/librustc_error_codes/error_codes/E0746.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/029a9c625371e756d93024efd3deb7636a90f8f8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "raw_url": "https://github.com/rust-lang/rust/raw/029a9c625371e756d93024efd3deb7636a90f8f8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md?ref=029a9c625371e756d93024efd3deb7636a90f8f8", "patch": "@@ -13,7 +13,7 @@ impl T for S {\n }\n \n // Having the trait `T` as return type is invalid because\n-// bare trait objects do not have a statically known size:\n+// unboxed trait objects do not have a statically known size:\n fn foo() -> dyn T {\n     S(42)\n }"}]}