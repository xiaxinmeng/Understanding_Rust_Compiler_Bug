{"sha": "b6cf0a623fdda2bd42fd88c2909b626492e86737", "node_id": "C_kwDOAAsO6NoAKGI2Y2YwYTYyM2ZkZGEyYmQ0MmZkODhjMjkwOWI2MjY0OTJlODY3Mzc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T15:44:26Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T15:44:26Z"}, "message": "Remove CPlace::inner and make CPlaceInner private\n\nThis makes it easier to add and remove variants as necessary", "tree": {"sha": "0190d9c08ac73d3e428463a64e86b38a434a444a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0190d9c08ac73d3e428463a64e86b38a434a444a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6cf0a623fdda2bd42fd88c2909b626492e86737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cf0a623fdda2bd42fd88c2909b626492e86737", "html_url": "https://github.com/rust-lang/rust/commit/b6cf0a623fdda2bd42fd88c2909b626492e86737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6cf0a623fdda2bd42fd88c2909b626492e86737/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5647908d1c0eb296d1b3bab12afaad12cca64d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5647908d1c0eb296d1b3bab12afaad12cca64d1", "html_url": "https://github.com/rust-lang/rust/commit/e5647908d1c0eb296d1b3bab12afaad12cca64d1"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "364503fd3639a159b5e18d918594fc4b10fda3af", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=b6cf0a623fdda2bd42fd88c2909b626492e86737", "patch": "@@ -6,8 +6,6 @@ use std::borrow::Cow;\n use rustc_middle::mir;\n use rustc_target::abi::call::PassMode;\n \n-use cranelift_codegen::entity::EntityRef;\n-\n use crate::prelude::*;\n \n pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, '_>) {\n@@ -91,34 +89,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n         largest_niche: _,\n     } = layout.0.0;\n \n-    let (kind, extra) = match *place.inner() {\n-        CPlaceInner::Var(place_local, var) => {\n-            assert_eq!(local, place_local);\n-            (\"ssa\", Cow::Owned(format!(\",var={}\", var.index())))\n-        }\n-        CPlaceInner::VarPair(place_local, var1, var2) => {\n-            assert_eq!(local, place_local);\n-            (\"ssa\", Cow::Owned(format!(\"var=({}, {})\", var1.index(), var2.index())))\n-        }\n-        CPlaceInner::Addr(ptr, meta) => {\n-            let meta = if let Some(meta) = meta {\n-                Cow::Owned(format!(\"meta={}\", meta))\n-            } else {\n-                Cow::Borrowed(\"\")\n-            };\n-            match ptr.debug_base_and_offset() {\n-                (crate::pointer::PointerBase::Addr(addr), offset) => {\n-                    (\"reuse\", format!(\"storage={}{}{}\", addr, offset, meta).into())\n-                }\n-                (crate::pointer::PointerBase::Stack(stack_slot), offset) => {\n-                    (\"stack\", format!(\"storage={}{}{}\", stack_slot, offset, meta).into())\n-                }\n-                (crate::pointer::PointerBase::Dangling(align), offset) => {\n-                    (\"zst\", format!(\"align={},offset={}\", align.bytes(), offset).into())\n-                }\n-            }\n-        }\n-    };\n+    let (kind, extra) = place.debug_comment();\n \n     fx.add_global_comment(format!(\n         \"{:<5} {:5} {:30} {:4}b {}, {}{}{}\","}, {"sha": "0d374b410b8677a5a5c9e89a640ae4004557bc1a", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=b6cf0a623fdda2bd42fd88c2909b626492e86737", "patch": "@@ -63,11 +63,11 @@ pub(super) fn codegen_with_call_return_arg<'tcx>(\n     let (ret_temp_place, return_ptr) = match ret_arg_abi.mode {\n         PassMode::Ignore => (None, None),\n         PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {\n-            if matches!(ret_place.inner(), CPlaceInner::Addr(_, None)) {\n+            if let Some(ret_ptr) = ret_place.try_to_ptr() {\n                 // This is an optimization to prevent unnecessary copies of the return value when\n                 // the return place is already a memory place as opposed to a register.\n                 // This match arm can be safely removed.\n-                (None, Some(ret_place.to_ptr().get_addr(fx)))\n+                (None, Some(ret_ptr.get_addr(fx)))\n             } else {\n                 let place = CPlace::new_stack_slot(fx, ret_arg_abi.layout);\n                 (Some(place), Some(place.to_ptr().get_addr(fx)))"}, {"sha": "8ea8a8283d15b191c38072fa8d1fbe9441c12897", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b6cf0a623fdda2bd42fd88c2909b626492e86737", "patch": "@@ -110,7 +110,7 @@ mod prelude {\n     pub(crate) use crate::common::*;\n     pub(crate) use crate::debuginfo::{DebugContext, UnwindContext};\n     pub(crate) use crate::pointer::Pointer;\n-    pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n+    pub(crate) use crate::value_and_place::{CPlace, CValue};\n }\n \n struct PrintOnPanic<F: Fn() -> String>(F);"}, {"sha": "3139e028d33e7257f4b10b27de8564056a78819f", "filename": "src/value_and_place.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cf0a623fdda2bd42fd88c2909b626492e86737/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=b6cf0a623fdda2bd42fd88c2909b626492e86737", "patch": "@@ -2,6 +2,7 @@\n \n use crate::prelude::*;\n \n+use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::immediates::Offset32;\n \n fn codegen_field<'tcx>(\n@@ -325,7 +326,7 @@ pub(crate) struct CPlace<'tcx> {\n }\n \n #[derive(Debug, Copy, Clone)]\n-pub(crate) enum CPlaceInner {\n+enum CPlaceInner {\n     Var(Local, Variable),\n     VarPair(Local, Variable, Variable),\n     Addr(Pointer, Option<Value>),\n@@ -336,10 +337,6 @@ impl<'tcx> CPlace<'tcx> {\n         self.layout\n     }\n \n-    pub(crate) fn inner(&self) -> &CPlaceInner {\n-        &self.inner\n-    }\n-\n     pub(crate) fn new_stack_slot(\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n         layout: TyAndLayout<'tcx>,\n@@ -431,6 +428,30 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn debug_comment(self) -> (&'static str, String) {\n+        match self.inner {\n+            CPlaceInner::Var(_local, var) => (\"ssa\", format!(\"var={}\", var.index())),\n+            CPlaceInner::VarPair(_local, var1, var2) => {\n+                (\"ssa\", format!(\"var=({}, {})\", var1.index(), var2.index()))\n+            }\n+            CPlaceInner::Addr(ptr, meta) => {\n+                let meta =\n+                    if let Some(meta) = meta { format!(\",meta={}\", meta) } else { String::new() };\n+                match ptr.debug_base_and_offset() {\n+                    (crate::pointer::PointerBase::Addr(addr), offset) => {\n+                        (\"reuse\", format!(\"storage={}{}{}\", addr, offset, meta))\n+                    }\n+                    (crate::pointer::PointerBase::Stack(stack_slot), offset) => {\n+                        (\"stack\", format!(\"storage={}{}{}\", stack_slot, offset, meta))\n+                    }\n+                    (crate::pointer::PointerBase::Dangling(align), offset) => {\n+                        (\"zst\", format!(\"align={},offset={}\", align.bytes(), offset))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     #[track_caller]\n     pub(crate) fn to_ptr(self) -> Pointer {\n         match self.to_ptr_maybe_unsized() {\n@@ -449,6 +470,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn try_to_ptr(self) -> Option<Pointer> {\n+        match self.inner {\n+            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => None,\n+            CPlaceInner::Addr(ptr, None) => Some(ptr),\n+            CPlaceInner::Addr(_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n+        }\n+    }\n+\n     pub(crate) fn write_cvalue(self, fx: &mut FunctionCx<'_, '_, 'tcx>, from: CValue<'tcx>) {\n         assert_assignable(fx, from.layout().ty, self.layout().ty, 16);\n \n@@ -527,7 +556,7 @@ impl<'tcx> CPlace<'tcx> {\n                 format!(\n                     \"{}: {:?}: {:?} <- {:?}: {:?}\",\n                     method,\n-                    self.inner(),\n+                    self.inner,\n                     self.layout().ty,\n                     from.0,\n                     from.layout().ty"}]}