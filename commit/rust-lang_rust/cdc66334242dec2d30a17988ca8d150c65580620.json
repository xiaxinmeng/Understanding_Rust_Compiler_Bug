{"sha": "cdc66334242dec2d30a17988ca8d150c65580620", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzY2MzM0MjQyZGVjMmQzMGExNzk4OGNhOGQxNTBjNjU1ODA2MjA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-28T02:38:46Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-10T00:53:51Z"}, "message": "Use a `SmallVec` within `_match::Matrix`.\n\nThis commit also fixes up lifetimes a bit:\n\n- Renames `'a` as `'p` when used with `Matrix` and `Pattern`, for\n  consistency.\n\n- Removes some unnecessary `'p` lifetimes on some function arguments.\n\n- Adds some missing lifetime parameters.", "tree": {"sha": "213fa03a16489368f724058a0912b7cb04c71d30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213fa03a16489368f724058a0912b7cb04c71d30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc66334242dec2d30a17988ca8d150c65580620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc66334242dec2d30a17988ca8d150c65580620", "html_url": "https://github.com/rust-lang/rust/commit/cdc66334242dec2d30a17988ca8d150c65580620", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc66334242dec2d30a17988ca8d150c65580620/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf6cd4b3c8d4e04e47f1e49a6a8fb4cda19700e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf6cd4b3c8d4e04e47f1e49a6a8fb4cda19700e", "html_url": "https://github.com/rust-lang/rust/commit/ecf6cd4b3c8d4e04e47f1e49a6a8fb4cda19700e"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "4c77350f10ecd7182b8d058fade9b5a02978e614", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cdc66334242dec2d30a17988ca8d150c65580620/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc66334242dec2d30a17988ca8d150c65580620/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=cdc66334242dec2d30a17988ca8d150c65580620", "patch": "@@ -190,6 +190,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use arena::TypedArena;\n \n+use smallvec::{SmallVec, smallvec};\n use std::cmp::{self, Ordering, min, max};\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator};\n@@ -237,14 +238,16 @@ impl<'tcx> Pattern<'tcx> {\n     }\n }\n \n-pub struct Matrix<'a, 'tcx: 'a>(Vec<Vec<&'a Pattern<'tcx>>>);\n+/// A 2D matrix. Nx1 matrices are very common, which is why `SmallVec[_; 2]`\n+/// works well for each row.\n+pub struct Matrix<'p, 'tcx: 'p>(Vec<SmallVec<[&'p Pattern<'tcx>; 2]>>);\n \n-impl<'a, 'tcx> Matrix<'a, 'tcx> {\n+impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     pub fn empty() -> Self {\n         Matrix(vec![])\n     }\n \n-    pub fn push(&mut self, row: Vec<&'a Pattern<'tcx>>) {\n+    pub fn push(&mut self, row: SmallVec<[&'p Pattern<'tcx>; 2]>) {\n         self.0.push(row)\n     }\n }\n@@ -261,7 +264,7 @@ impl<'a, 'tcx> Matrix<'a, 'tcx> {\n /// ++++++++++++++++++++++++++\n /// + _     + [_, _, ..tail] +\n /// ++++++++++++++++++++++++++\n-impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> {\n+impl<'p, 'tcx> fmt::Debug for Matrix<'p, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"\\n\")?;\n \n@@ -293,8 +296,9 @@ impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> FromIterator<Vec<&'a Pattern<'tcx>>> for Matrix<'a, 'tcx> {\n-    fn from_iter<T: IntoIterator<Item=Vec<&'a Pattern<'tcx>>>>(iter: T) -> Self\n+impl<'p, 'tcx> FromIterator<SmallVec<[&'p Pattern<'tcx>; 2]>> for Matrix<'p, 'tcx> {\n+    fn from_iter<T>(iter: T) -> Self\n+        where T: IntoIterator<Item=SmallVec<[&'p Pattern<'tcx>; 2]>>\n     {\n         Matrix(iter.into_iter().collect())\n     }\n@@ -998,7 +1002,7 @@ fn compute_missing_ctors<'a, 'tcx: 'a>(\n /// matrix isn't exhaustive).\n pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                        matrix: &Matrix<'p, 'tcx>,\n-                                       v: &[&'p Pattern<'tcx>],\n+                                       v: &[&Pattern<'tcx>],\n                                        witness: WitnessPreference)\n                                        -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n@@ -1108,7 +1112,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         } else {\n             let matrix = rows.iter().filter_map(|r| {\n                 if r[0].is_wildcard() {\n-                    Some(r[1..].to_vec())\n+                    Some(SmallVec::from_slice(&r[1..]))\n                 } else {\n                     None\n                 }\n@@ -1199,10 +1203,10 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n /// A shorthand for the `U(S(c, P), S(c, q))` operation from the paper. I.e., `is_useful` applied\n /// to the specialised version of both the pattern matrix `P` and the new pattern `q`.\n-fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(\n+fn is_useful_specialized<'p, 'a: 'p, 'tcx: 'a>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n-    v: &[&'p Pattern<'tcx>],\n+    v: &[&Pattern<'tcx>],\n     ctor: Constructor<'tcx>,\n     lty: Ty<'tcx>,\n     witness: WitnessPreference,\n@@ -1521,15 +1525,15 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &'p Pattern<'tcx>,\n-) -> Option<Vec<&'p Pattern<'tcx>>> {\n+) -> Option<SmallVec<[&'p Pattern<'tcx>; 2]>> {\n     if should_treat_range_exhaustively(tcx, ctor) {\n         match (IntRange::from_ctor(tcx, ctor), IntRange::from_pat(tcx, pat)) {\n             (Some(ctor), Some(pat)) => {\n                 ctor.intersection(&pat).map(|_| {\n                     let (pat_lo, pat_hi) = pat.range.into_inner();\n                     let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n                     assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n-                    vec![]\n+                    smallvec![]\n                 })\n             }\n             _ => None,\n@@ -1539,7 +1543,7 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n         // conveniently handled by `IntRange`. For these cases, the constructor may not be a range\n         // so intersection actually devolves into being covered by the pattern.\n         match constructor_covered_by_range(tcx, ctor, pat) {\n-            Ok(true) => Some(vec![]),\n+            Ok(true) => Some(smallvec![]),\n             Ok(false) | Err(ErrorReported) => None,\n         }\n     }\n@@ -1610,9 +1614,9 @@ fn constructor_covered_by_range<'a, 'tcx>(\n fn patterns_for_variant<'p, 'a: 'p, 'tcx: 'a>(\n     subpatterns: &'p [FieldPattern<'tcx>],\n     wild_patterns: &[&'p Pattern<'tcx>])\n-    -> Vec<&'p Pattern<'tcx>>\n+    -> SmallVec<[&'p Pattern<'tcx>; 2]>\n {\n-    let mut result = wild_patterns.to_owned();\n+    let mut result = SmallVec::from_slice(wild_patterns);\n \n     for subpat in subpatterns {\n         result[subpat.field.index()] = &subpat.pattern;\n@@ -1635,15 +1639,16 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n     r: &[&'p Pattern<'tcx>],\n     constructor: &Constructor<'tcx>,\n     wild_patterns: &[&'p Pattern<'tcx>],\n-) -> Option<Vec<&'p Pattern<'tcx>>> {\n+) -> Option<SmallVec<[&'p Pattern<'tcx>; 2]>> {\n     let pat = &r[0];\n \n-    let head: Option<Vec<&Pattern>> = match *pat.kind {\n-        PatternKind::AscribeUserType { ref subpattern, .. } =>\n-            specialize(cx, ::std::slice::from_ref(&subpattern), constructor, wild_patterns),\n+    let head = match *pat.kind {\n+        PatternKind::AscribeUserType { ref subpattern, .. } => {\n+            specialize(cx, ::std::slice::from_ref(&subpattern), constructor, wild_patterns)\n+        }\n \n         PatternKind::Binding { .. } | PatternKind::Wild => {\n-            Some(wild_patterns.to_owned())\n+            Some(SmallVec::from_slice(wild_patterns))\n         }\n \n         PatternKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n@@ -1660,7 +1665,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n         }\n \n         PatternKind::Deref { ref subpattern } => {\n-            Some(vec![subpattern])\n+            Some(smallvec![subpattern])\n         }\n \n         PatternKind::Constant { value } => {\n@@ -1696,7 +1701,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     if wild_patterns.len() as u64 == n {\n                         // convert a constant slice/array pattern to a list of patterns.\n                         match (n, opt_ptr) {\n-                            (0, _) => Some(Vec::new()),\n+                            (0, _) => Some(SmallVec::new()),\n                             (_, Some(ptr)) => {\n                                 let alloc = cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n                                 let layout = cx.tcx.layout_of(cx.param_env.and(ty)).ok()?;\n@@ -1765,7 +1770,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     match slice_pat_covered_by_constructor(\n                         cx.tcx, pat.span, constructor, prefix, slice, suffix\n                             ) {\n-                        Ok(true) => Some(vec![]),\n+                        Ok(true) => Some(smallvec![]),\n                         Ok(false) => None,\n                         Err(ErrorReported) => None\n                     }"}, {"sha": "bfa2e53b9e0cfb545d2eb53d7f0740da0db5cd11", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cdc66334242dec2d30a17988ca8d150c65580620/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc66334242dec2d30a17988ca8d150c65580620/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=cdc66334242dec2d30a17988ca8d150c65580620", "patch": "@@ -31,6 +31,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind};\n \n+use smallvec::smallvec;\n use std::slice;\n \n use syntax::ast;\n@@ -250,7 +251,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 .iter()\n                 .filter(|&&(_, guard)| guard.is_none())\n                 .flat_map(|arm| &arm.0)\n-                .map(|pat| vec![pat.0])\n+                .map(|pat| smallvec![pat.0])\n                 .collect();\n             let scrut_ty = self.tables.node_id_to_type(scrut.hir_id);\n             check_exhaustive(cx, scrut_ty, scrut.span, &matrix);\n@@ -274,7 +275,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                 self.tables);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n-            let pats: Matrix = vec![vec![\n+            let pats: Matrix = vec![smallvec![\n                 expand_pattern(cx, pattern)\n             ]].into_iter().collect();\n \n@@ -367,7 +368,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     let mut printed_if_let_err = false;\n     for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n         for &(pat, hir_pat) in pats {\n-            let v = vec![pat];\n+            let v = smallvec![pat];\n \n             match is_useful(cx, &seen, &v, LeaveOutWitness) {\n                 NotUseful => {\n@@ -462,10 +463,10 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn check_exhaustive<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                               scrut_ty: Ty<'tcx>,\n                               sp: Span,\n-                              matrix: &Matrix<'a, 'tcx>) {\n+                              matrix: &Matrix<'p, 'tcx>) {\n     let wild_pattern = Pattern {\n         ty: scrut_ty,\n         span: DUMMY_SP,"}]}