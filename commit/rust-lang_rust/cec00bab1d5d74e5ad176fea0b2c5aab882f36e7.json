{"sha": "cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzAwYmFiMWQ1ZDc0ZTVhZDE3NmZlYTBiMmM1YWFiODgyZjM2ZTc=", "commit": {"author": {"name": "Matt Ickstadt", "email": "mattico8@gmail.com", "date": "2017-04-08T21:04:30Z"}, "committer": {"name": "Matt Ickstadt", "email": "mattico8@gmail.com", "date": "2017-04-24T02:23:50Z"}, "message": "Improve splice docs and tests", "tree": {"sha": "4d328c5372e8fbc1ab6b3145a387098c09d9c451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d328c5372e8fbc1ab6b3145a387098c09d9c451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "html_url": "https://github.com/rust-lang/rust/commit/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/comments", "author": {"login": "mattico", "id": 853158, "node_id": "MDQ6VXNlcjg1MzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/853158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattico", "html_url": "https://github.com/mattico", "followers_url": "https://api.github.com/users/mattico/followers", "following_url": "https://api.github.com/users/mattico/following{/other_user}", "gists_url": "https://api.github.com/users/mattico/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattico/subscriptions", "organizations_url": "https://api.github.com/users/mattico/orgs", "repos_url": "https://api.github.com/users/mattico/repos", "events_url": "https://api.github.com/users/mattico/events{/privacy}", "received_events_url": "https://api.github.com/users/mattico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mattico", "id": 853158, "node_id": "MDQ6VXNlcjg1MzE1OA==", "avatar_url": "https://avatars.githubusercontent.com/u/853158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattico", "html_url": "https://github.com/mattico", "followers_url": "https://api.github.com/users/mattico/followers", "following_url": "https://api.github.com/users/mattico/following{/other_user}", "gists_url": "https://api.github.com/users/mattico/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattico/subscriptions", "organizations_url": "https://api.github.com/users/mattico/orgs", "repos_url": "https://api.github.com/users/mattico/repos", "events_url": "https://api.github.com/users/mattico/events{/privacy}", "received_events_url": "https://api.github.com/users/mattico/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85e2e4735fe78fffeecd2fce96d7ce40d22438c", "html_url": "https://github.com/rust-lang/rust/commit/b85e2e4735fe78fffeecd2fce96d7ce40d22438c"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "e7085e94336ff6ed0bf0be3e1ee118ff08d0dfc0", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "patch": "@@ -1386,8 +1386,8 @@ impl String {\n     /// replaces with the given string, and yields the removed chars.\n     /// The given string doesn\u2019t need to be the same length as the range.\n     ///\n-    /// Note: The element range is removed even if the iterator is not\n-    /// consumed until the end.\n+    /// Note: The element range is removed when the `Splice` is dropped,\n+    /// even if the iterator is not consumed until the end.\n     ///\n     /// # Panics\n     ///"}, {"sha": "a32f5e3357f384846339ad97b07ff93d220c9cd4", "filename": "src/libcollections/tests/string.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fstring.rs?ref=cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "patch": "@@ -427,6 +427,54 @@ fn test_splice() {\n     assert_eq!(t, \"world\");\n }\n \n+#[test]\n+#[should_panic]\n+fn test_splice_char_boundary() {\n+    let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n+    s.splice(..8, \"\");\n+}\n+\n+#[test]\n+fn test_splice_inclusive_range() {\n+    let mut v = String::from(\"12345\");\n+    let t: String = v.splice(2...3, \"789\").collect();\n+    assert_eq!(v, \"127895\");\n+    assert_eq!(t, \"34\");\n+    let t2: String = v.splice(1...2, \"A\").collect();\n+    assert_eq!(v, \"1A895\");\n+    assert_eq!(t2, \"27\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_out_of_bounds() {\n+    let mut s = String::from(\"12345\");\n+    s.splice(5..6, \"789\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_inclusive_out_of_bounds() {\n+    let mut s = String::from(\"12345\");\n+    s.splice(5...5, \"789\");\n+}\n+\n+#[test]\n+fn test_splice_empty() {\n+    let mut s = String::from(\"12345\");\n+    let t: String = s.splice(1..2, \"\").collect();\n+    assert_eq!(s, \"1345\");\n+    assert_eq!(t, \"2\");\n+}\n+\n+#[test]\n+fn test_splice_unbounded() {\n+    let mut s = String::from(\"12345\");\n+    let t: String = s.splice(.., \"\").collect();\n+    assert_eq!(s, \"\");\n+    assert_eq!(t, \"12345\");\n+}\n+\n #[test]\n fn test_extend_ref() {\n     let mut a = \"foo\".to_string();"}, {"sha": "f47940dc33aa197af6f688175bcff23383f9ffd3", "filename": "src/libcollections/tests/vec.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec.rs?ref=cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "patch": "@@ -580,7 +580,7 @@ fn test_drain_inclusive_out_of_bounds() {\n }\n \n #[test]\n-fn splice() {\n+fn test_splice() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n     v.splice(2..4, a.iter().cloned());\n@@ -589,6 +589,51 @@ fn splice() {\n     assert_eq!(v, &[1, 20, 11, 12, 5]);\n }\n \n+#[test]\n+fn test_splice_inclusive_range() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    let t1: Vec<_> = v.splice(2...3, a.iter().cloned()).collect();\n+    assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n+    assert_eq!(t1, &[3, 4]);\n+    let t2: Vec<_> = v.splice(1...2, Some(20)).collect();\n+    assert_eq!(v, &[1, 20, 11, 12, 5]);\n+    assert_eq!(t2, &[2, 10]);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_out_of_bounds() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    v.splice(5..6, a.iter().cloned());\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_splice_inclusive_out_of_bounds() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let a = [10, 11, 12];\n+    v.splice(5...5, a.iter().cloned());\n+}\n+\n+#[test]\n+fn test_splice_items_zero_sized() {\n+    let mut vec = vec![(), (), ()];\n+    let vec2 = vec![];\n+    let t: Vec<_> = vec.splice(1..2, vec2.iter().cloned()).collect();\n+    assert_eq!(vec, &[(), ()]);\n+    assert_eq!(t, &[()]);\n+}\n+\n+#[test]\n+fn test_splice_unbounded() {\n+    let mut vec = vec![1, 2, 3, 4, 5];\n+    let t: Vec<_> = vec.splice(.., None).collect();\n+    assert_eq!(vec, &[]);\n+    assert_eq!(t, &[1, 2, 3, 4, 5]);\n+}\n+\n #[test]\n fn test_into_boxed_slice() {\n     let xs = vec![1, 2, 3];"}, {"sha": "e5964385b1253d68cb51b6e5ba19ac13988576a6", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec00bab1d5d74e5ad176fea0b2c5aab882f36e7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=cec00bab1d5d74e5ad176fea0b2c5aab882f36e7", "patch": "@@ -1063,7 +1063,7 @@ impl<T> Vec<T> {\n     /// Note 1: The element range is removed even if the iterator is only\n     /// partially consumed or not consumed at all.\n     ///\n-    /// Note 2: It is unspecified how many elements are removed from the vector,\n+    /// Note 2: It is unspecified how many elements are removed from the vector\n     /// if the `Drain` value is leaked.\n     ///\n     /// # Panics"}]}