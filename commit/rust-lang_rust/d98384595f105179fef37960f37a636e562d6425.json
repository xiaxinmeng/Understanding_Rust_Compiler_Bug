{"sha": "d98384595f105179fef37960f37a636e562d6425", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODM4NDU5NWYxMDUxNzlmZWYzNzk2MGYzN2E2MzZlNTYyZDY0MjU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-14T20:12:34Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-18T12:30:09Z"}, "message": "Removing unhandled region constraint error that is only for impl_trait_in_bindings", "tree": {"sha": "6a035cb5ef984d2b7fa76bf3148799b5dadf7e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a035cb5ef984d2b7fa76bf3148799b5dadf7e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98384595f105179fef37960f37a636e562d6425", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmD0HtEACgkQgTGiTgx5\n76/hIg/+NBrNDCKlf1ta8wJ8gDSmuI/8zWgzIFUxXtwKp1e2Z/X7vUi2GG/w5LZ5\ngOl6Dl64dqu9OP25x0qcoj3tonD8GZNWWVGuDMIKrGJcKl17EExOKpPc8k1ZcF6p\n76UK4z/TNna9b9jsdkEEJRo7irJNkduZbFRiiSbWam+ByXv0l7VKJ/c0dZVzZ9be\n8lh+JaQ4eBJtD//xz37YAAN9KSv9k5Zlx5kuIab29RhtO+0FdL5enjrZrV69qBwo\nS2yDRtw33t8mH49A/uUnepbTXjb3dorVal2hGg0tZYGVt2csiuthuFmp4ZgEss6c\nNBole5fdy6k6kv5vrizDjaFPwbF21P3fu2DUrKsWPkTWWi4omrI6UF/YDEiW41A8\nHLfrq9zJBupsGbVUbQiw6RCyFdCTNHwjEt62hnPOcJA2+aHCh0CuNIEQmXJD0m8y\nq1rtNsmJ1y6gRdcK97vuONplydIOHQL3YdYY8UT6ER5Zj3ma4PAMZr6xJu0ariTB\nMb3hxsP1EkovHJ/oZKdE7HZfZe+mpt8B+RYRErOUqTGyWLXe+EIIgzCQUnSNcSg8\n/2HfCQbz++LLr4IG/CwN5PcDwYRy59q1N7MXBiSEQJw2AtuOnFTz7p9vorRLGDn+\nA7Tp1ZZkuq3kMAcocr2zxi7VAcXK/7OX2AswGq+zzXDNgaMHs/I=\n=YOQK\n-----END PGP SIGNATURE-----", "payload": "tree 6a035cb5ef984d2b7fa76bf3148799b5dadf7e9d\nparent 962ac8183d174d409db549cd6b502d847aa04f12\nauthor Santiago Pastorino <spastorino@gmail.com> 1626293554 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1626611409 -0300\n\nRemoving unhandled region constraint error that is only for impl_trait_in_bindings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98384595f105179fef37960f37a636e562d6425", "html_url": "https://github.com/rust-lang/rust/commit/d98384595f105179fef37960f37a636e562d6425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98384595f105179fef37960f37a636e562d6425/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962ac8183d174d409db549cd6b502d847aa04f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/962ac8183d174d409db549cd6b502d847aa04f12", "html_url": "https://github.com/rust-lang/rust/commit/962ac8183d174d409db549cd6b502d847aa04f12"}], "stats": {"total": 39, "additions": 5, "deletions": 34}, "files": [{"sha": "2e2578df01146aca4fce8335ac4dc3bd10e58be3", "filename": "compiler/rustc_mir/src/borrow_check/member_constraints.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d98384595f105179fef37960f37a636e562d6425/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98384595f105179fef37960f37a636e562d6425/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmember_constraints.rs?ref=d98384595f105179fef37960f37a636e562d6425", "patch": "@@ -1,5 +1,4 @@\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::MemberConstraint;\n use rustc_middle::ty::{self, Ty};\n@@ -32,9 +31,6 @@ where\n crate struct NllMemberConstraint<'tcx> {\n     next_constraint: Option<NllMemberConstraintIndex>,\n \n-    /// The opaque type whose hidden type is being inferred. (Used in error reporting.)\n-    crate opaque_type_def_id: DefId,\n-\n     /// The span where the hidden type was instantiated.\n     crate definition_span: Span,\n \n@@ -91,7 +87,6 @@ impl<'tcx> MemberConstraintSet<'tcx, ty::RegionVid> {\n         let constraint_index = self.constraints.push(NllMemberConstraint {\n             next_constraint,\n             member_region_vid,\n-            opaque_type_def_id: m_c.opaque_type_def_id,\n             definition_span: m_c.definition_span,\n             hidden_ty: m_c.hidden_ty,\n             start_index,"}, {"sha": "c40e6bf1ec33b8f6b4cae993d9828ce6910a0cc1", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d98384595f105179fef37960f37a636e562d6425/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98384595f105179fef37960f37a636e562d6425/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=d98384595f105179fef37960f37a636e562d6425", "patch": "@@ -551,7 +551,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         polonius_output: Option<Rc<PoloniusOutput>>,\n     ) -> (Option<ClosureRegionRequirements<'tcx>>, RegionErrors<'tcx>) {\n         let mir_def_id = body.source.def_id();\n-        self.propagate_constraints(body, infcx.tcx);\n+        self.propagate_constraints(body);\n \n         let mut errors_buffer = RegionErrors::new();\n \n@@ -599,7 +599,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// for each region variable until all the constraints are\n     /// satisfied. Note that some values may grow **too** large to be\n     /// feasible, but we check this later.\n-    fn propagate_constraints(&mut self, _body: &Body<'tcx>, tcx: TyCtxt<'tcx>) {\n+    fn propagate_constraints(&mut self, _body: &Body<'tcx>) {\n         debug!(\"propagate_constraints()\");\n \n         debug!(\"propagate_constraints: constraints={:#?}\", {\n@@ -617,7 +617,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // own.\n         let constraint_sccs = self.constraint_sccs.clone();\n         for scc in constraint_sccs.all_sccs() {\n-            self.compute_value_for_scc(scc, tcx);\n+            self.compute_value_for_scc(scc);\n         }\n \n         // Sort the applied member constraints so we can binary search\n@@ -629,7 +629,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// computed, by unioning the values of its successors.\n     /// Assumes that all successors have been computed already\n     /// (which is assured by iterating over SCCs in dependency order).\n-    fn compute_value_for_scc(&mut self, scc_a: ConstraintSccIndex, tcx: TyCtxt<'tcx>) {\n+    fn compute_value_for_scc(&mut self, scc_a: ConstraintSccIndex) {\n         let constraint_sccs = self.constraint_sccs.clone();\n \n         // Walk each SCC `B` such that `A: B`...\n@@ -652,12 +652,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Now take member constraints into account.\n         let member_constraints = self.member_constraints.clone();\n         for m_c_i in member_constraints.indices(scc_a) {\n-            self.apply_member_constraint(\n-                tcx,\n-                scc_a,\n-                m_c_i,\n-                member_constraints.choice_regions(m_c_i),\n-            );\n+            self.apply_member_constraint(scc_a, m_c_i, member_constraints.choice_regions(m_c_i));\n         }\n \n         debug!(\n@@ -680,31 +675,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// If we make any changes, returns true, else false.\n     fn apply_member_constraint(\n         &mut self,\n-        tcx: TyCtxt<'tcx>,\n         scc: ConstraintSccIndex,\n         member_constraint_index: NllMemberConstraintIndex,\n         choice_regions: &[ty::RegionVid],\n     ) -> bool {\n         debug!(\"apply_member_constraint(scc={:?}, choice_regions={:#?})\", scc, choice_regions,);\n \n-        if let Some(uh_oh) =\n-            choice_regions.iter().find(|&&r| !self.universal_regions.is_universal_region(r))\n-        {\n-            // FIXME(#61773): This case can only occur with\n-            // `impl_trait_in_bindings`, I believe, and we are just\n-            // opting not to handle it for now. See #61773 for\n-            // details.\n-            tcx.sess.delay_span_bug(\n-                self.member_constraints[member_constraint_index].definition_span,\n-                &format!(\n-                    \"member constraint for `{:?}` has an option region `{:?}` \\\n-                     that is not a universal region\",\n-                    self.member_constraints[member_constraint_index].opaque_type_def_id, uh_oh,\n-                ),\n-            );\n-            return false;\n-        }\n-\n         // Create a mutable vector of the options. We'll try to winnow\n         // them down.\n         let mut choice_regions: Vec<ty::RegionVid> = choice_regions.to_vec();"}]}