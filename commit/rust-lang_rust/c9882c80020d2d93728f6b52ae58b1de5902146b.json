{"sha": "c9882c80020d2d93728f6b52ae58b1de5902146b", "node_id": "C_kwDOAAsO6NoAKGM5ODgyYzgwMDIwZDJkOTM3MjhmNmI1MmFlNThiMWRlNTkwMjE0NmI", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-14T10:34:31Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-14T10:34:31Z"}, "message": "Get a make version working!", "tree": {"sha": "e09aed4ec1df0f13124b3408704d579772df88ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e09aed4ec1df0f13124b3408704d579772df88ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9882c80020d2d93728f6b52ae58b1de5902146b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9882c80020d2d93728f6b52ae58b1de5902146b", "html_url": "https://github.com/rust-lang/rust/commit/c9882c80020d2d93728f6b52ae58b1de5902146b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9882c80020d2d93728f6b52ae58b1de5902146b/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb4d45ebc77a2e28f843fb22507e63339db829c", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb4d45ebc77a2e28f843fb22507e63339db829c", "html_url": "https://github.com/rust-lang/rust/commit/efb4d45ebc77a2e28f843fb22507e63339db829c"}], "stats": {"total": 103, "additions": 89, "deletions": 14}, "files": [{"sha": "b5fdb72d354222f85bc76aa91f480fac8ab62bc0", "filename": "crates/ide_assists/src/handlers/generate_delegate.rs", "status": "modified", "additions": 89, "deletions": 14, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/c9882c80020d2d93728f6b52ae58b1de5902146b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9882c80020d2d93728f6b52ae58b1de5902146b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs?ref=c9882c80020d2d93728f6b52ae58b1de5902146b", "patch": "@@ -1,10 +1,11 @@\n-use hir::{self, HasCrate, HirDisplay};\n+use hir::{self, HasCrate, HasSource, HirDisplay};\n use syntax::ast::{self, make, AstNode, HasName, HasVisibility};\n \n use crate::{\n     utils::{find_struct_impl, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n+use syntax::ast::edit::AstNodeEdit;\n \n // Assist: generate_setter\n //\n@@ -33,6 +34,7 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     let strukt_name = strukt.name()?;\n \n     let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+    let field_name = field.name()?;\n     let field_ty = field.ty()?;\n \n     let sema_field_ty = ctx.sema.resolve_type(&field_ty)?;\n@@ -61,36 +63,62 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n             target,\n             |builder| {\n                 // make function\n-                let vis = strukt.visibility();\n+                let method_source = match method.source(ctx.db()) {\n+                    Some(source) => source.value,\n+                    None => return,\n+                };\n+                let method_name = method.name(ctx.db());\n+                let vis = method_source.visibility();\n                 let name = make::name(&method.name(ctx.db()).to_string());\n                 let type_params = None;\n-                let params = make::param_list(None, []);\n-                let body = make::block_expr([], None);\n+                let self_ty = method\n+                    .self_param(ctx.db())\n+                    .map(|s| s.source(ctx.db()).map(|s| s.value))\n+                    .flatten();\n+                let params = make::param_list(self_ty, []);\n+                let tail_expr = make::expr_method_call(\n+                    field_from_idents([\"self\", &field_name.to_string()]).unwrap(),\n+                    make::name_ref(&method_name.to_string()),\n+                    make::arg_list([]),\n+                );\n+                let body = make::block_expr([], Some(tail_expr));\n                 let ret_type = &method.ret_type(ctx.db()).display(ctx.db()).to_string();\n                 let ret_type = Some(make::ret_type(make::ty(ret_type)));\n                 let is_async = false;\n-                let f = make::fn_(vis, name, type_params, params, body, ret_type, is_async);\n+                let f = make::fn_(vis, name, type_params, params, body, ret_type, is_async)\n+                    .indent(ast::edit::IndentLevel(1))\n+                    .clone_for_update();\n \n                 let cursor = Cursor::Before(f.syntax());\n                 let cap = ctx.config.snippet_cap.unwrap(); // FIXME.\n \n+                // Create or update an impl block, and attach the function to it.\n                 match impl_def {\n                     Some(impl_def) => {\n+                        // Remember where in our source our `impl` block lives.\n                         let impl_def = impl_def.clone_for_update();\n                         let old_range = impl_def.syntax().text_range();\n+\n+                        // Attach the function to the impl block\n                         let assoc_items = impl_def.get_or_create_assoc_item_list();\n                         assoc_items.add_item(f.clone().into());\n+\n+                        // Update the impl block.\n                         let snippet = render_snippet(cap, impl_def.syntax(), cursor);\n                         builder.replace_snippet(cap, old_range, snippet);\n                     }\n                     None => {\n+                        // Attach the function to the impl block\n                         let name = &strukt_name.to_string();\n-                        let impl_def = make::impl_(make::ext::ident_path(name));\n+                        let impl_def = make::impl_(make::ext::ident_path(name)).clone_for_update();\n                         let assoc_items = impl_def.get_or_create_assoc_item_list();\n                         assoc_items.add_item(f.clone().into());\n-                        let start_offset = strukt.syntax().text_range().end();\n+\n+                        // Insert the impl block.\n+                        let offset = strukt.syntax().text_range().end();\n                         let snippet = render_snippet(cap, impl_def.syntax(), cursor);\n-                        builder.insert_snippet(cap, start_offset, snippet);\n+                        let snippet = format!(\"\\n\\n{}\", snippet);\n+                        builder.insert_snippet(cap, offset, snippet);\n                     }\n                 }\n             },\n@@ -99,35 +127,77 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     Some(())\n }\n \n+pub fn field_from_idents<'a>(\n+    parts: impl std::iter::IntoIterator<Item = &'a str>,\n+) -> Option<ast::Expr> {\n+    let mut iter = parts.into_iter();\n+    let base = make::expr_path(make::ext::ident_path(iter.next()?));\n+    let expr = iter.fold(base, |base, s| make::expr_field(base, s));\n+    Some(expr)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::check_assist;\n \n     use super::*;\n \n     #[test]\n-    fn test_generate_setter_from_field() {\n+    fn test_generate_delegate_create_impl_block() {\n+        check_assist(\n+            generate_delegate,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+\n+struct Person {\n+    ag$0e: Age,\n+}\"#,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+\n+struct Person {\n+    age: Age,\n+}\n+\n+impl Person {\n+    $0fn age(&self) -> u8 {\n+        self.age.age()\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_delegate_update_impl_block() {\n         check_assist(\n             generate_delegate,\n             r#\"\n struct Age(u8);\n impl Age {\n     fn age(&self) -> u8 {\n         self.0\n-        \n     }\n }\n \n struct Person {\n     ag$0e: Age,\n }\n \n-impl Person {}\n-\"#,\n+impl Person {}\"#,\n             r#\"\n struct Age(u8);\n impl Age {\n-    $0fn age(&self) -> u8 {\n+    fn age(&self) -> u8 {\n         self.0\n     }\n }\n@@ -137,7 +207,12 @@ struct Person {\n }\n \n impl Person {\n-    fn age(&self) -> u8 {\n+    $0fn age(&self) -> u8 {\n+        self.age.age()\n+    }\n+}\"#,\n+        );\n+    }\n         self.age.age()\n     }\n }\"#,"}]}