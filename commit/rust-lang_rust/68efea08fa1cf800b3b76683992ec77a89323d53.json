{"sha": "68efea08fa1cf800b3b76683992ec77a89323d53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZWZlYTA4ZmExY2Y4MDBiM2I3NjY4Mzk5MmVjNzdhODkzMjNkNTM=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-07-25T23:39:54Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2016-07-26T13:15:00Z"}, "message": "Restore `char::escape_default` and add `char::escape` instead", "tree": {"sha": "f9c7cee686d99efacdf80cbbaf477bd6ff19f12f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9c7cee686d99efacdf80cbbaf477bd6ff19f12f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68efea08fa1cf800b3b76683992ec77a89323d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68efea08fa1cf800b3b76683992ec77a89323d53", "html_url": "https://github.com/rust-lang/rust/commit/68efea08fa1cf800b3b76683992ec77a89323d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68efea08fa1cf800b3b76683992ec77a89323d53/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0685900fbd1ea1f6be5c3454dcde753ac3484c01", "url": "https://api.github.com/repos/rust-lang/rust/commits/0685900fbd1ea1f6be5c3454dcde753ac3484c01", "html_url": "https://github.com/rust-lang/rust/commit/0685900fbd1ea1f6be5c3454dcde753ac3484c01"}], "stats": {"total": 152, "additions": 145, "deletions": 7}, "files": [{"sha": "333219bc5e5b028d458d41586d148ba9bc238d99", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -33,6 +33,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(char_escape)]\n #![feature(core_intrinsics)]\n #![feature(dropck_parametricity)]\n #![feature(fmt_internals)]"}, {"sha": "a63ea9d3ec777003806d475a5ae4eac1c76a31c3", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -1697,6 +1697,14 @@ impl str {\n         return s;\n     }\n \n+    /// Escapes each char in `s` with `char::escape`.\n+    #[unstable(feature = \"str_escape\",\n+               reason = \"return type may change to be an iterator\",\n+               issue = \"27791\")]\n+    pub fn escape(&self) -> String {\n+        self.chars().flat_map(|c| c.escape()).collect()\n+    }\n+\n     /// Escapes each char in `s` with `char::escape_default`.\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\","}, {"sha": "870f8a3a1ec6f4be6fc62ca796c6010dd83eb5ff", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -704,7 +704,7 @@ fn test_escape_unicode() {\n }\n \n #[test]\n-fn test_escape_default() {\n+fn test_escape() {\n     assert_eq!(\"abc\".escape_default(), \"abc\");\n     assert_eq!(\"a c\".escape_default(), \"a c\");\n     assert_eq!(\"\u00e9\u00e8\u00ea\".escape_default(), \"\u00e9\u00e8\u00ea\");\n@@ -717,6 +717,20 @@ fn test_escape_default() {\n     assert_eq!(\"\\u{10d4ea}\\r\".escape_default(), \"\\\\u{10d4ea}\\\\r\");\n }\n \n+#[test]\n+fn test_escape_default() {\n+    assert_eq!(\"abc\".escape_default(), \"abc\");\n+    assert_eq!(\"a c\".escape_default(), \"a c\");\n+    assert_eq!(\"\u00e9\u00e8\u00ea\".escape_default(), \"\\\\u{e9}\\\\u{e8}\\\\u{ea}\");\n+    assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\");\n+    assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\");\n+    assert_eq!(\"\\u{7f}\\u{ff}\".escape_default(), \"\\\\u{7f}\\\\u{ff}\");\n+    assert_eq!(\"\\u{100}\\u{ffff}\".escape_default(), \"\\\\u{100}\\\\u{ffff}\");\n+    assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_default(), \"\\\\u{10000}\\\\u{10ffff}\");\n+    assert_eq!(\"ab\\u{200b}\".escape_default(), \"ab\\\\u{200b}\");\n+    assert_eq!(\"\\u{10d4ea}\\r\".escape_default(), \"\\\\u{10d4ea}\\\\r\");\n+}\n+\n #[test]\n fn test_total_ord() {\n     assert_eq!(\"1234\".cmp(\"123\"), Greater);"}, {"sha": "3e435b47110a027d8184ae9c454d6f7d569aa7e4", "filename": "src/libcore/char.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -264,6 +264,8 @@ pub trait CharExt {\n     fn escape_unicode(self) -> EscapeUnicode;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn escape_default(self) -> EscapeDefault;\n+    #[unstable(feature = \"char_escape\", issue = \"0\")]\n+    fn escape(self) -> Escape;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len_utf8(self) -> usize;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -316,6 +318,19 @@ impl CharExt for char {\n \n     #[inline]\n     fn escape_default(self) -> EscapeDefault {\n+        let init_state = match self {\n+            '\\t' => EscapeDefaultState::Backslash('t'),\n+            '\\r' => EscapeDefaultState::Backslash('r'),\n+            '\\n' => EscapeDefaultState::Backslash('n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n+            '\\x20' ... '\\x7e' => EscapeDefaultState::Char(self),\n+            _ => EscapeDefaultState::Unicode(self.escape_unicode())\n+        };\n+        EscapeDefault { state: init_state }\n+    }\n+\n+    #[inline]\n+    fn escape(self) -> Escape {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n             '\\r' => EscapeDefaultState::Backslash('r'),\n@@ -324,7 +339,7 @@ impl CharExt for char {\n             c if is_printable(c) => EscapeDefaultState::Char(c),\n             c => EscapeDefaultState::Unicode(c.escape_unicode()),\n         };\n-        EscapeDefault { state: init_state }\n+        Escape(EscapeDefault { state: init_state })\n     }\n \n     #[inline]\n@@ -601,6 +616,27 @@ impl ExactSizeIterator for EscapeDefault {\n     }\n }\n \n+/// An iterator that yields the literal escape code of a `char`.\n+///\n+/// This `struct` is created by the [`escape()`] method on [`char`]. See its\n+/// documentation for more.\n+///\n+/// [`escape()`]: ../../std/primitive.char.html#method.escape\n+/// [`char`]: ../../std/primitive.char.html\n+#[unstable(feature = \"char_escape\", issue = \"0\")]\n+#[derive(Clone, Debug)]\n+pub struct Escape(EscapeDefault);\n+\n+#[unstable(feature = \"char_escape\", issue = \"0\")]\n+impl Iterator for Escape {\n+    type Item = char;\n+    fn next(&mut self) -> Option<char> { self.0.next() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.0.size_hint() }\n+}\n+\n+#[unstable(feature = \"char_escape\", issue = \"0\")]\n+impl ExactSizeIterator for Escape { }\n+\n /// An iterator over `u8` entries represending the UTF-8 encoding of a `char`\n /// value.\n ///"}, {"sha": "3bcdce57af0d1e037b281c8b8065e40ecee7b32d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -1383,7 +1383,7 @@ impl Debug for str {\n         f.write_char('\"')?;\n         let mut from = 0;\n         for (i, c) in self.char_indices() {\n-            let esc = c.escape_default();\n+            let esc = c.escape();\n             // If char needs escaping, flush backlog so far and write, else skip\n             if esc.len() != 1 {\n                 f.write_str(&self[from..i])?;\n@@ -1409,7 +1409,7 @@ impl Display for str {\n impl Debug for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.write_char('\\'')?;\n-        for c in self.escape_default() {\n+        for c in self.escape() {\n             f.write_char(c)?\n         }\n         f.write_char('\\'')"}, {"sha": "ec757b0b5d3891ec1c27c18325843b22d04cd7e8", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -124,9 +124,9 @@ fn test_is_digit() {\n }\n \n #[test]\n-fn test_escape_default() {\n+fn test_escape() {\n     fn string(c: char) -> String {\n-        c.escape_default().collect()\n+        c.escape().collect()\n     }\n     let s = string('\\n');\n     assert_eq!(s, \"\\\\n\");\n@@ -166,6 +166,49 @@ fn test_escape_default() {\n     assert_eq!(s, \"\\\\u{100000}\");\n }\n \n+#[test]\n+fn test_escape_default() {\n+    fn string(c: char) -> String {\n+        c.escape_default().collect()\n+    }\n+    let s = string('\\n');\n+    assert_eq!(s, \"\\\\n\");\n+    let s = string('\\r');\n+    assert_eq!(s, \"\\\\r\");\n+    let s = string('\\'');\n+    assert_eq!(s, \"\\\\'\");\n+    let s = string('\"');\n+    assert_eq!(s, \"\\\\\\\"\");\n+    let s = string(' ');\n+    assert_eq!(s, \" \");\n+    let s = string('a');\n+    assert_eq!(s, \"a\");\n+    let s = string('~');\n+    assert_eq!(s, \"~\");\n+    let s = string('\u00e9');\n+    assert_eq!(s, \"\\\\u{e9}\");\n+    let s = string('\\x00');\n+    assert_eq!(s, \"\\\\u{0}\");\n+    let s = string('\\x1f');\n+    assert_eq!(s, \"\\\\u{1f}\");\n+    let s = string('\\x7f');\n+    assert_eq!(s, \"\\\\u{7f}\");\n+    let s = string('\\u{80}');\n+    assert_eq!(s, \"\\\\u{80}\");\n+    let s = string('\\u{ff}');\n+    assert_eq!(s, \"\\\\u{ff}\");\n+    let s = string('\\u{11b}');\n+    assert_eq!(s, \"\\\\u{11b}\");\n+    let s = string('\\u{1d4b6}');\n+    assert_eq!(s, \"\\\\u{1d4b6}\");\n+    let s = string('\\u{200b}'); // zero width space\n+    assert_eq!(s, \"\\\\u{200b}\");\n+    let s = string('\\u{e000}'); // private use 1\n+    assert_eq!(s, \"\\\\u{e000}\");\n+    let s = string('\\u{100000}'); // private use 2\n+    assert_eq!(s, \"\\\\u{100000}\");\n+}\n+\n #[test]\n fn test_escape_unicode() {\n     fn string(c: char) -> String { c.escape_unicode().collect() }"}, {"sha": "683d5289ab53c438456fcfe456898923feb94192", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -36,7 +36,7 @@ use tables::{conversions, derived_property, general_category, property};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::char::{EncodeUtf16, EncodeUtf8, EscapeDefault, EscapeUnicode};\n+pub use core::char::{EncodeUtf16, EncodeUtf8, Escape, EscapeDefault, EscapeUnicode};\n \n // unstable reexports\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n@@ -267,6 +267,41 @@ impl char {\n         C::escape_unicode(self)\n     }\n \n+    /// Returns an iterator that yields the literal escape code of a `char`.\n+    ///\n+    /// This will escape the characters similar to the `Debug` implementations\n+    /// of `str` or `char`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// for i in '\\n'.escape_default() {\n+    ///     println!(\"{}\", i);\n+    /// }\n+    /// ```\n+    ///\n+    /// This prints:\n+    ///\n+    /// ```text\n+    /// \\\n+    /// n\n+    /// ```\n+    ///\n+    /// Collecting into a `String`:\n+    ///\n+    /// ```\n+    /// let quote: String = '\\n'.escape_default().collect();\n+    ///\n+    /// assert_eq!(quote, \"\\\\n\");\n+    /// ```\n+    #[unstable(feature = \"char_escape\", issue = \"0\")]\n+    #[inline]\n+    pub fn escape(self) -> Escape {\n+        C::escape(self)\n+    }\n+\n     /// Returns an iterator that yields the literal escape code of a `char`.\n     ///\n     /// The default is chosen with a bias toward producing literals that are"}, {"sha": "8c91d3b6a929bca3068dc1fb5485293cfef5cac9", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68efea08fa1cf800b3b76683992ec77a89323d53/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=68efea08fa1cf800b3b76683992ec77a89323d53", "patch": "@@ -32,6 +32,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n #![no_std]\n \n+#![feature(char_escape)]\n #![feature(core_char_ext)]\n #![feature(decode_utf8)]\n #![feature(lang_items)]"}]}