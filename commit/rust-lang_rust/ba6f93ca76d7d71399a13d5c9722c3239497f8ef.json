{"sha": "ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNmY5M2NhNzZkN2Q3MTM5OWExM2Q1Yzk3MjJjMzIzOTQ5N2Y4ZWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-14T12:01:40Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T09:28:31Z"}, "message": "incr.comp.: Make the StableHashingContext mostly independent of the tcx.", "tree": {"sha": "f355b38fbc8f0c90ee73eea62493c3c610d05ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f355b38fbc8f0c90ee73eea62493c3c610d05ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "html_url": "https://github.com/rust-lang/rust/commit/ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e567afbc584e32df6492d1ea29a65b583ca24e57", "url": "https://api.github.com/repos/rust-lang/rust/commits/e567afbc584e32df6492d1ea29a65b583ca24e57", "html_url": "https://github.com/rust-lang/rust/commit/e567afbc584e32df6492d1ea29a65b583ca24e57"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "136190f7573c150c37a032e480e944baee16f204", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use hir;\n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, DefIndex};\n use hir::map::DefPathHash;\n use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n use ty::{self, TyCtxt, fast_reject};\n+use session::Session;\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n@@ -42,6 +43,7 @@ thread_local!(static IGNORED_ATTR_NAMES: RefCell<FxHashSet<Symbol>> =\n /// things (e.g. each DefId/DefPath is only hashed once).\n pub struct StableHashingContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    body_resolver: BodyResolver<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n     overflow_checks_enabled: bool,\n@@ -59,6 +61,20 @@ pub enum NodeIdHashingMode {\n     HashDefPath,\n }\n \n+/// The BodyResolver allows to map a BodyId to the corresponding hir::Body.\n+/// We could also just store a plain reference to the hir::Crate but we want\n+/// to avoid that the crate is used to get untracked access to all of the HIR.\n+#[derive(Clone, Copy)]\n+struct BodyResolver<'hir>(&'hir hir::Crate);\n+\n+impl<'hir> BodyResolver<'hir> {\n+    // Return a reference to the hir::Body with the given BodyId.\n+    // DOES NOT DO ANY TRACKING, use carefully.\n+    fn body(self, id: hir::BodyId) -> &'hir hir::Body {\n+        self.0.body(id)\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n \n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n@@ -74,8 +90,11 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n             }\n         });\n \n+        let body_resolver = BodyResolver(tcx.dep_graph.with_ignore(|| tcx.hir.krate()));\n+\n         StableHashingContext {\n             tcx,\n+            body_resolver,\n             caching_codemap: None,\n             raw_codemap: tcx.sess.codemap(),\n             hash_spans: hash_spans_initial,\n@@ -85,6 +104,11 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn sess(&self) -> &'gcx Session {\n+        self.tcx.sess\n+    }\n+\n     pub fn force_span_hashing(mut self) -> Self {\n         self.hash_spans = true;\n         self\n@@ -121,13 +145,13 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n-        self.tcx\n+    pub fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n+        self.tcx.def_path_hash(def_id)\n     }\n \n     #[inline]\n-    pub fn def_path_hash(&mut self, def_id: DefId) -> DefPathHash {\n-        self.tcx.def_path_hash(def_id)\n+    pub fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash {\n+        self.tcx.hir.definitions().def_path_hash(def_index)\n     }\n \n     #[inline]\n@@ -221,6 +245,16 @@ impl<'a, 'gcx, 'lcx> StableHashingContextProvider for ty::TyCtxt<'a, 'gcx, 'lcx>\n     }\n }\n \n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::BodyId {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        if hcx.hash_bodies() {\n+            hcx.body_resolver.body(*self).hash_stable(hcx, hasher);\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::HirId {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -250,7 +284,7 @@ impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for h\n     fn to_stable_hash_key(&self,\n                           hcx: &StableHashingContext<'a, 'gcx, 'tcx>)\n                           -> (DefPathHash, hir::ItemLocalId) {\n-        let def_path_hash = hcx.tcx().hir.definitions().def_path_hash(self.owner);\n+        let def_path_hash = hcx.local_def_path_hash(self.owner);\n         (def_path_hash, self.local_id)\n     }\n }\n@@ -378,10 +412,9 @@ pub fn hash_stable_trait_impls<'a, 'tcx, 'gcx, W, R>(\n     }\n \n     {\n-        let tcx = hcx.tcx();\n         let mut keys: AccumulateVec<[_; 8]> =\n             non_blanket_impls.keys()\n-                             .map(|k| (k, k.map_def(|d| tcx.def_path_hash(d))))\n+                             .map(|k| (k, k.map_def(|d| hcx.def_path_hash(d))))\n                              .collect();\n         keys.sort_unstable_by(|&(_, ref k1), &(_, ref k2)| k1.cmp(k2));\n         keys.len().hash_stable(hcx, hasher);"}, {"sha": "aa4826528ec6dcfee1ef60b21a4e9ef0db243bf4", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "patch": "@@ -34,7 +34,7 @@ impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for D\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a, 'gcx, 'tcx>) -> DefPathHash {\n-        hcx.tcx().def_path_hash(*self)\n+        hcx.def_path_hash(*self)\n     }\n }\n \n@@ -995,16 +995,6 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::B\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::BodyId {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        if hcx.hash_bodies() {\n-            hcx.tcx().hir.body(*self).hash_stable(hcx, hasher);\n-        }\n-    }\n-}\n-\n impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for hir::BodyId {\n     type KeyType = (DefPathHash, hir::ItemLocalId);\n \n@@ -1119,7 +1109,7 @@ for hir::def_id::DefIndex {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        hcx.tcx().hir.definitions().def_path_hash(*self).hash_stable(hcx, hasher);\n+        hcx.local_def_path_hash(*self).hash_stable(hcx, hasher);\n     }\n }\n \n@@ -1129,7 +1119,7 @@ for hir::def_id::DefIndex {\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a, 'gcx, 'tcx>) -> DefPathHash {\n-         hcx.tcx().hir.definitions().def_path_hash(*self)\n+         hcx.local_def_path_hash(*self)\n     }\n }\n "}, {"sha": "6bcbce4b69304114336fa3d778f238cfdf31f8f2", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "patch": "@@ -324,11 +324,11 @@ fn hash_token<'a, 'gcx, 'tcx, W: StableHasherResult>(token: &token::Token,\n             //            in a stable way, in addition to the HIR.\n             //            Since this is hardly used anywhere, just emit a\n             //            warning for now.\n-            if hcx.tcx().sess.opts.debugging_opts.incremental.is_some() {\n+            if hcx.sess().opts.debugging_opts.incremental.is_some() {\n                 let msg = format!(\"Quasi-quoting might make incremental \\\n                                    compilation very inefficient: {:?}\",\n                                   non_terminal);\n-                hcx.tcx().sess.span_warn(error_reporting_span, &msg[..]);\n+                hcx.sess().span_warn(error_reporting_span, &msg[..]);\n             }\n \n             std_hash::Hash::hash(non_terminal, hasher);"}, {"sha": "61cd5db9a19484c36c724d75042806a0a6b0cfeb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "patch": "@@ -736,9 +736,9 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n                     krate: local_id_root.krate,\n                     index: closure_expr_id,\n                 };\n-                (hcx.tcx().def_path_hash(var_owner_def_id),\n+                (hcx.def_path_hash(var_owner_def_id),\n                  var_id.local_id,\n-                 hcx.tcx().def_path_hash(closure_def_id))\n+                 hcx.def_path_hash(closure_def_id))\n             });\n \n             closure_tys.hash_stable(hcx, hasher);"}, {"sha": "60e1f238f44a4dab07951633fdd8a6193375c4bb", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f93ca76d7d71399a13d5c9722c3239497f8ef/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=ba6f93ca76d7d71399a13d5c9722c3239497f8ef", "patch": "@@ -90,6 +90,7 @@ impl<'a> ::std::ops::Index<&'a DepNode> for IncrementalHashesMap {\n }\n \n struct ComputeItemHashesVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     hcx: StableHashingContext<'a, 'tcx, 'tcx>,\n     hashes: IncrementalHashesMap,\n }\n@@ -101,14 +102,14 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n                                               item_like: T)\n         where T: HashStable<StableHashingContext<'a, 'tcx, 'tcx>>\n     {\n-        if !hash_bodies && !self.hcx.tcx().sess.opts.build_dep_graph() {\n+        if !hash_bodies && !self.tcx.sess.opts.build_dep_graph() {\n             // If we just need the hashes in order to compute the SVH, we don't\n             // need have two hashes per item. Just the one containing also the\n             // item's body is sufficient.\n             return\n         }\n \n-        let def_path_hash = self.hcx.tcx().hir.definitions().def_path_hash(def_index);\n+        let def_path_hash = self.hcx.local_def_path_hash(def_index);\n \n         let mut hasher = IchHasher::new();\n         self.hcx.while_hashing_hir_bodies(hash_bodies, |hcx| {\n@@ -125,14 +126,12 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n         debug!(\"calculate_def_hash: dep_node={:?} hash={:?}\", dep_node, item_hash);\n         self.hashes.insert(dep_node, item_hash);\n \n-        let tcx = self.hcx.tcx();\n         let bytes_hashed =\n-            tcx.sess.perf_stats.incr_comp_bytes_hashed.get() +\n-            bytes_hashed;\n-        tcx.sess.perf_stats.incr_comp_bytes_hashed.set(bytes_hashed);\n+            self.tcx.sess.perf_stats.incr_comp_bytes_hashed.get() + bytes_hashed;\n+        self.tcx.sess.perf_stats.incr_comp_bytes_hashed.set(bytes_hashed);\n \n         if hash_bodies {\n-            let in_scope_traits_map = tcx.in_scope_traits_map(def_index);\n+            let in_scope_traits_map = self.tcx.in_scope_traits_map(def_index);\n             let mut hasher = IchHasher::new();\n             in_scope_traits_map.hash_stable(&mut self.hcx, &mut hasher);\n             let dep_node = def_path_hash.to_dep_node(DepKind::InScopeTraits);\n@@ -141,12 +140,11 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n     }\n \n     fn compute_crate_hash(&mut self) {\n-        let tcx = self.hcx.tcx();\n-        let krate = tcx.hir.krate();\n+        let krate = self.tcx.hir.krate();\n \n         let mut crate_state = IchHasher::new();\n \n-        let crate_disambiguator = tcx.sess.local_crate_disambiguator();\n+        let crate_disambiguator = self.tcx.sess.local_crate_disambiguator();\n         \"crate_disambiguator\".hash(&mut crate_state);\n         crate_disambiguator.as_str().len().hash(&mut crate_state);\n         crate_disambiguator.as_str().hash(&mut crate_state);\n@@ -221,7 +219,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n \n     fn compute_and_store_ich_for_trait_impls(&mut self, krate: &'tcx hir::Crate)\n     {\n-        let tcx = self.hcx.tcx();\n+        let tcx = self.tcx;\n \n         let mut impls: Vec<(DefPathHash, Fingerprint)> = krate\n             .trait_impls\n@@ -266,7 +264,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for ComputeItemHashesVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        let def_index = self.hcx.tcx().hir.local_def_id(item.id).index;\n+        let def_index = self.tcx.hir.local_def_id(item.id).index;\n         self.compute_and_store_ich_for_item_like(def_index,\n                                                  false,\n                                                  item);\n@@ -276,7 +274,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for ComputeItemHashesVisitor<'a, 'tcx>\n     }\n \n     fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem) {\n-        let def_index = self.hcx.tcx().hir.local_def_id(item.id).index;\n+        let def_index = self.tcx.hir.local_def_id(item.id).index;\n         self.compute_and_store_ich_for_item_like(def_index,\n                                                  false,\n                                                  item);\n@@ -286,7 +284,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for ComputeItemHashesVisitor<'a, 'tcx>\n     }\n \n     fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem) {\n-        let def_index = self.hcx.tcx().hir.local_def_id(item.id).index;\n+        let def_index = self.tcx.hir.local_def_id(item.id).index;\n         self.compute_and_store_ich_for_item_like(def_index,\n                                                  false,\n                                                  item);\n@@ -304,6 +302,7 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     let krate = tcx.hir.krate();\n \n     let mut visitor = ComputeItemHashesVisitor {\n+        tcx,\n         hcx: StableHashingContext::new(tcx),\n         hashes: IncrementalHashesMap::new(),\n     };"}]}