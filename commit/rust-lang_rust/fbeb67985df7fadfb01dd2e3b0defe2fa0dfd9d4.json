{"sha": "fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZWI2Nzk4NWRmN2ZhZGZiMDFkZDJlM2IwZGVmZTJmYTBkZmQ5ZDQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-09T20:39:09Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-02-12T18:28:42Z"}, "message": "Autoderef in librustc_lint", "tree": {"sha": "855040fce560c7af7a7cb0dd9c9ddde4498052c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855040fce560c7af7a7cb0dd9c9ddde4498052c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "html_url": "https://github.com/rust-lang/rust/commit/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b38f304d63a39d1a03a09381135d399c2f4e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b38f304d63a39d1a03a09381135d399c2f4e78", "html_url": "https://github.com/rust-lang/rust/commit/65b38f304d63a39d1a03a09381135d399c2f4e78"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "203f6626f51d3acc7791dea505b3ecdbf74ee0ed", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "patch": "@@ -125,7 +125,7 @@ impl LateLintPass for TypeLimits {\n                 }\n             },\n             hir::ExprBinary(binop, ref l, ref r) => {\n-                if is_comparison(binop) && !check_limits(cx.tcx, binop, &**l, &**r) {\n+                if is_comparison(binop) && !check_limits(cx.tcx, binop, &l, &r) {\n                     cx.span_lint(UNUSED_COMPARISONS, e.span,\n                                  \"comparison is useless due to type limits\");\n                 }\n@@ -174,7 +174,7 @@ impl LateLintPass for TypeLimits {\n                                 if (negative && v > max as u64 + 1) ||\n                                    (!negative && v > max as u64) {\n                                     cx.span_lint(OVERFLOWING_LITERALS, e.span,\n-                                                 &*format!(\"literal out of range for {:?}\", t));\n+                                                 &format!(\"literal out of range for {:?}\", t));\n                                     return;\n                                 }\n                             }\n@@ -196,7 +196,7 @@ impl LateLintPass for TypeLimits {\n                         };\n                         if lit_val < min || lit_val > max {\n                             cx.span_lint(OVERFLOWING_LITERALS, e.span,\n-                                         &*format!(\"literal out of range for {:?}\", t));\n+                                         &format!(\"literal out of range for {:?}\", t));\n                         }\n                     },\n                     ty::TyFloat(t) => {\n@@ -213,7 +213,7 @@ impl LateLintPass for TypeLimits {\n                         };\n                         if lit_val < min || lit_val > max {\n                             cx.span_lint(OVERFLOWING_LITERALS, e.span,\n-                                         &*format!(\"literal out of range for {:?}\", t));\n+                                         &format!(\"literal out of range for {:?}\", t));\n                         }\n                     },\n                     _ => ()\n@@ -666,7 +666,7 @@ impl LateLintPass for ImproperCTypes {\n \n         fn check_foreign_fn(cx: &LateContext, decl: &hir::FnDecl) {\n             for input in &decl.inputs {\n-                check_ty(cx, &*input.ty);\n+                check_ty(cx, &input.ty);\n             }\n             if let hir::Return(ref ret_ty) = decl.output {\n                 let tty = ast_ty_to_normalized(cx.tcx, ret_ty.id);\n@@ -680,8 +680,8 @@ impl LateLintPass for ImproperCTypes {\n             if nmod.abi != Abi::RustIntrinsic && nmod.abi != Abi::PlatformIntrinsic {\n                 for ni in &nmod.items {\n                     match ni.node {\n-                        hir::ForeignItemFn(ref decl, _) => check_foreign_fn(cx, &**decl),\n-                        hir::ForeignItemStatic(ref t, _) => check_ty(cx, &**t)\n+                        hir::ForeignItemFn(ref decl, _) => check_foreign_fn(cx, &decl),\n+                        hir::ForeignItemStatic(ref t, _) => check_ty(cx, &t)\n                     }\n                 }\n             }"}, {"sha": "36ed06a6c00b47363c6823d731e6f3640bcf9d07", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fbeb67985df7fadfb01dd2e3b0defe2fa0dfd9d4", "patch": "@@ -248,7 +248,7 @@ impl LateLintPass for UnusedAttributes {\n \n         let plugin_attributes = cx.sess().plugin_attributes.borrow_mut();\n         for &(ref name, ty) in plugin_attributes.iter() {\n-            if ty == AttributeType::Whitelisted && attr.check_name(&*name) {\n+            if ty == AttributeType::Whitelisted && attr.check_name(&name) {\n                 break;\n             }\n         }\n@@ -265,7 +265,7 @@ impl LateLintPass for UnusedAttributes {\n             // the crate level?\n             let plugin_crate = plugin_attributes.iter()\n                                                 .find(|&&(ref x, t)| {\n-                                                        &*attr.name() == &*x &&\n+                                                        &*attr.name() == x &&\n                                                         AttributeType::CrateLevel == t\n                                                     }).is_some();\n             if  known_crate || plugin_crate {\n@@ -294,7 +294,7 @@ impl UnusedParens {\n     fn check_unused_parens_core(&self, cx: &EarlyContext, value: &ast::Expr, msg: &str,\n                                 struct_lit_needs_parens: bool) {\n         if let ast::ExprKind::Paren(ref inner) = value.node {\n-            let necessary = struct_lit_needs_parens && contains_exterior_struct_lit(&**inner);\n+            let necessary = struct_lit_needs_parens && contains_exterior_struct_lit(&inner);\n             if !necessary {\n                 cx.span_lint(UNUSED_PARENS, value.span,\n                              &format!(\"unnecessary parentheses around {}\", msg))\n@@ -314,8 +314,8 @@ impl UnusedParens {\n                 ast::ExprKind::AssignOp(_, ref lhs, ref rhs) |\n                 ast::ExprKind::Binary(_, ref lhs, ref rhs) => {\n                     // X { y: 1 } + X { y: 2 }\n-                    contains_exterior_struct_lit(&**lhs) ||\n-                        contains_exterior_struct_lit(&**rhs)\n+                    contains_exterior_struct_lit(&lhs) ||\n+                        contains_exterior_struct_lit(&rhs)\n                 }\n                 ast::ExprKind::Unary(_, ref x) |\n                 ast::ExprKind::Cast(ref x, _) |\n@@ -324,12 +324,12 @@ impl UnusedParens {\n                 ast::ExprKind::TupField(ref x, _) |\n                 ast::ExprKind::Index(ref x, _) => {\n                     // &X { y: 1 }, X { y: 1 }.y\n-                    contains_exterior_struct_lit(&**x)\n+                    contains_exterior_struct_lit(&x)\n                 }\n \n                 ast::ExprKind::MethodCall(_, _, ref exprs) => {\n                     // X { y: 1 }.bar(...)\n-                    contains_exterior_struct_lit(&*exprs[0])\n+                    contains_exterior_struct_lit(&exprs[0])\n                 }\n \n                 _ => false\n@@ -360,7 +360,7 @@ impl EarlyLintPass for UnusedParens {\n             InPlace(_, ref value) => (value, \"emplacement value\", false),\n             _ => return\n         };\n-        self.check_unused_parens_core(cx, &**value, msg, struct_lit_needs_parens);\n+        self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n@@ -374,7 +374,7 @@ impl EarlyLintPass for UnusedParens {\n             },\n             _ => return\n         };\n-        self.check_unused_parens_core(cx, &**value, msg, false);\n+        self.check_unused_parens_core(cx, &value, msg, false);\n     }\n }\n "}]}