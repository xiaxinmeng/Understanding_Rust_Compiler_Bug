{"sha": "2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "node_id": "C_kwDOAAsO6NoAKDJlMmFlNjhkNWEzZWYwYjhjMGM5NjhmZDZlYzRlODU5Yzc3ZWQyZjE", "commit": {"author": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-13T18:38:34Z"}, "committer": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-13T18:48:51Z"}, "message": "Document lint configuration values in Clippy's book\n\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>", "tree": {"sha": "595812af0c6dd1e5581ed5e6e4c3f365a634dc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/595812af0c6dd1e5581ed5e6e4c3f365a634dc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg7SOvb1XvVqyndOg/aB6xzqcLku\ncJTkLKCfEUxpSDkY0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQHjtBCFWceZBtvzkl+R2udQZz5BS+WQF/K80VbVgXyHO1uQkdozz6KI/O6uk6hZx1T\nq1PXMgRGiecQ2hZ4HY/ww=\n-----END SSH SIGNATURE-----", "payload": "tree 595812af0c6dd1e5581ed5e6e4c3f365a634dc17\nparent d43dce14d5eb7af1656d730bfbb5918c84addbca\nauthor Tyler Weaver <maybe@tylerjw.dev> 1673635114 -0700\ncommitter Tyler Weaver <maybe@tylerjw.dev> 1673635731 -0700\n\nDocument lint configuration values in Clippy's book\n\nSigned-off-by: Tyler Weaver <maybe@tylerjw.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "html_url": "https://github.com/rust-lang/rust/commit/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/comments", "author": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d43dce14d5eb7af1656d730bfbb5918c84addbca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d43dce14d5eb7af1656d730bfbb5918c84addbca", "html_url": "https://github.com/rust-lang/rust/commit/d43dce14d5eb7af1656d730bfbb5918c84addbca"}], "stats": {"total": 124, "additions": 118, "deletions": 6}, "files": [{"sha": "22925a753dfe7afd6639fe4db1d3a406eaf55bfe", "filename": ".github/workflows/remark.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/.github%2Fworkflows%2Fremark.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/.github%2Fworkflows%2Fremark.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fremark.yml?ref=2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "patch": "@@ -33,6 +33,9 @@ jobs:\n         echo `pwd`/mdbook >> $GITHUB_PATH\n \n     # Run\n+    - name: cargo collect-metadata\n+      run: cargo collect-metadata\n+      \n     - name: Check *.md files\n       run: git ls-files -z '*.md' | xargs -0 -n 1 -I {} ./node_modules/.bin/remark {} -u lint -f > /dev/null\n "}, {"sha": "2ba095368ebf06f2600be2f329299c2013691414", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "patch": "@@ -199,6 +199,9 @@ disallowed-names = [\"toto\", \"tata\", \"titi\"]\n See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n the lint descriptions contain the names and meanings of these configuration variables.\n \n+See [table of lint configurations](https://doc.rust-lang.org/nightly/clippy/lint_configuration.html)\n+to see what configuration options you can set and the lints they configure.\n+\n For configurations that are a list type with default values such as\n [disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),\n you can use the unique value `\"..\"` to extend the default values instead of replacing them."}, {"sha": "0649f7a631df426da94ae70da38a25879d9506b8", "filename": "book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "patch": "@@ -5,6 +5,7 @@\n - [Installation](installation.md)\n - [Usage](usage.md)\n - [Configuration](configuration.md)\n+    - [Lint Configuration](lint_configuration.md)\n - [Clippy's Lints](lints.md)\n - [Continuous Integration](continuous_integration/README.md)\n     - [GitHub Actions](continuous_integration/github_actions.md)"}, {"sha": "e68f30be43cd05bf12770a31008535f703df5151", "filename": "book/src/configuration.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "patch": "@@ -13,6 +13,9 @@ disallowed-names = [\"toto\", \"tata\", \"titi\"]\n See the [list of configurable lints](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration),\n the lint descriptions contain the names and meanings of these configuration variables.\n \n+See [table of lint configurations](./lint_configuration.md)\n+to see what configuration options you can set and the lints they configure.\n+\n For configurations that are a list type with default values such as\n [disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),\n you can use the unique value `\"..\"` to extend the default values instead of replacing them."}, {"sha": "102ed7ad2ceadfd3c589d1aebf55fb039ff6c773", "filename": "book/src/lint_configuration.md", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "patch": "@@ -0,0 +1,52 @@\n+## Configuration Options\n+\n+| Option | Default | Description | Lints |\n+|--|--|--|--|\n+| arithmetic-side-effects-allowed | `{}` | Suppress checking of the passed type names in all types of operations | [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects) |\n+| arithmetic-side-effects-allowed-binary | `[]` | Suppress checking of the passed type pair names in binary operations like addition or multiplication | [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects) |\n+| arithmetic-side-effects-allowed-unary | `{}` | Suppress checking of the passed type names in unary operations like \"negation\" (`-`) | [arithmetic_side_effects](https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects) |\n+| avoid-breaking-exported-api | `true` | Suppress lints whenever the suggested change would cause breakage for other crates | [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names) [large_types_passed_by_value](https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value) [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref) [unnecessary_wraps](https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps) [unused_self](https://rust-lang.github.io/rust-clippy/master/index.html#unused_self) [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms) [wrong_self_convention](https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention) [box_collection](https://rust-lang.github.io/rust-clippy/master/index.html#box_collection) [redundant_allocation](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation) [rc_buffer](https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer) [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box) [option_option](https://rust-lang.github.io/rust-clippy/master/index.html#option_option) [linkedlist](https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist) [rc_mutex](https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex) |\n+| msrv | `None` | The minimum rust version that the project supports | [manual_split_once](https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once) [manual_str_repeat](https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat) [cloned_instead_of_copied](https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied) [redundant_field_names](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names) [redundant_static_lifetimes](https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes) [filter_map_next](https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next) [checked_conversions](https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions) [manual_range_contains](https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains) [use_self](https://rust-lang.github.io/rust-clippy/master/index.html#use_self) [mem_replace_with_default](https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default) [manual_non_exhaustive](https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive) [option_as_ref_deref](https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref) [map_unwrap_or](https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or) [match_like_matches_macro](https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro) [manual_strip](https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip) [missing_const_for_fn](https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn) [unnested_or_patterns](https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns) [from_over_into](https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into) [ptr_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr) [if_then_some_else_none](https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none) [approx_constant](https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant) [deprecated_cfg_attr](https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr) [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice) [map_clone](https://rust-lang.github.io/rust-clippy/master/index.html#map_clone) [borrow_as_ptr](https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr) [manual_bits](https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits) [err_expect](https://rust-lang.github.io/rust-clippy/master/index.html#err_expect) [cast_abs_to_unsigned](https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned) [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args) [manual_clamp](https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp) [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else) [unchecked_duration_subtraction](https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction) |\n+| cognitive-complexity-threshold | `25` | The maximum cognitive complexity a function can have | [cognitive_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity) |\n+| disallowed-names | `[\"foo\", \"baz\", \"quux\"]` | The list of disallowed names to lint about | [disallowed_names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names) |\n+| doc-valid-idents | `[\"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"DirectX\", \"ECMAScript\", \"GPLv2\", \"GPLv3\", \"GitHub\", \"GitLab\", \"IPv4\", \"IPv6\", \"ClojureScript\", \"CoffeeScript\", \"JavaScript\", \"PureScript\", \"TypeScript\", \"NaN\", \"NaNs\", \"OAuth\", \"GraphQL\", \"OCaml\", \"OpenGL\", \"OpenMP\", \"OpenSSH\", \"OpenSSL\", \"OpenStreetMap\", \"OpenDNS\", \"WebGL\", \"TensorFlow\", \"TrueType\", \"iOS\", \"macOS\", \"FreeBSD\", \"TeX\", \"LaTeX\", \"BibTeX\", \"BibLaTeX\", \"MinGW\", \"CamelCase\"]` | The list of words this lint should not consider as identifiers needing ticks | [doc_markdown](https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown) |\n+| too-many-arguments-threshold | `7` | The maximum number of argument a function or method can have | [too_many_arguments](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments) |\n+| type-complexity-threshold | `250` | The maximum complexity a type can have | [type_complexity](https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity) |\n+| single-char-binding-names-threshold | `4` | The maximum number of single char bindings a scope may have | [many_single_char_names](https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names) |\n+| too-large-for-stack | `200` | The maximum size of objects (in bytes) that will be linted | [boxed_local](https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local) [useless_vec](https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec) |\n+| enum-variant-name-threshold | `3` | The minimum number of enum variants for the lints about variant names to trigger | [enum_variant_names](https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names) |\n+| enum-variant-size-threshold | `200` | The maximum size of an enum's variant to avoid box suggestion | [large_enum_variant](https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant) |\n+| verbose-bit-mask-threshold | `1` | The maximum allowed size of a bit mask before suggesting to use 'trailing_zeros' | [verbose_bit_mask](https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask) |\n+| literal-representation-threshold | `16384` | The lower bound for linting decimal literals | [decimal_literal_representation](https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation) |\n+| trivial-copy-size-limit | `None` | The maximum size (in bytes) to consider a `Copy` type for passing by value instead of by reference | [trivially_copy_pass_by_ref](https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref) |\n+| pass-by-value-size-limit | `256` | The minimum size (in bytes) to consider a type for passing by reference instead of by value | [large_type_pass_by_move](https://rust-lang.github.io/rust-clippy/master/index.html#large_type_pass_by_move) |\n+| too-many-lines-threshold | `100` | The maximum number of lines a function or method can have | [too_many_lines](https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines) |\n+| array-size-threshold | `512000` | The maximum allowed size for arrays on the stack | [large_stack_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays) [large_const_arrays](https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays) |\n+| vec-box-size-threshold | `4096` | The size of the boxed type in bytes, where boxing in a `Vec` is allowed | [vec_box](https://rust-lang.github.io/rust-clippy/master/index.html#vec_box) |\n+| max-trait-bounds | `3` | The maximum number of bounds a trait can have to be linted | [type_repetition_in_bounds](https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds) |\n+| max-struct-bools | `3` | The maximum number of bool fields a struct can have | [struct_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools) |\n+| max-fn-params-bools | `3` | The maximum number of bool parameters a function can have | [fn_params_excessive_bools](https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools) |\n+| warn-on-all-wildcard-imports | `false` | Whether to allow certain wildcard imports (prelude, super in tests) | [wildcard_imports](https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports) |\n+| disallowed-macros | `[]` | The list of disallowed macros, written as fully qualified paths | [disallowed_macros](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros) |\n+| disallowed-methods | `[]` | The list of disallowed methods, written as fully qualified paths | [disallowed_methods](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods) |\n+| disallowed-types | `[]` | The list of disallowed types, written as fully qualified paths | [disallowed_types](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types) |\n+| unreadable-literal-lint-fractions | `true` | Should the fraction of a decimal be linted to include separators | [unreadable_literal](https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal) |\n+| upper-case-acronyms-aggressive | `false` | Enables verbose mode | [upper_case_acronyms](https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms) |\n+| matches-for-let-else | `WellKnownTypes` | Whether the matches should be considered by the lint, and whether there should be filtering for common types | [manual_let_else](https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else) |\n+| cargo-ignore-publish | `false` | For internal testing only, ignores the current `publish` settings in the Cargo manifest | [_cargo_common_metadata](https://rust-lang.github.io/rust-clippy/master/index.html#_cargo_common_metadata) |\n+| standard-macro-braces | `[]` | Enforce the named macros always use the braces specified | [nonstandard_macro_braces](https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces) |\n+| enforced-import-renames | `[]` | The list of imports to always rename, a fully qualified path followed by the rename | [missing_enforced_import_renames](https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames) |\n+| allowed-scripts | `[\"Latin\"]` | The list of unicode scripts allowed to be used in the scope | [disallowed_script_idents](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents) |\n+| enable-raw-pointer-heuristic-for-send | `true` | Whether to apply the raw pointer heuristic to determine if a type is `Send` | [non_send_fields_in_send_ty](https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty) |\n+| max-suggested-slice-pattern-length | `3` | When Clippy suggests using a slice pattern, this is the maximum number of elements allowed in the slice pattern that is suggested | [index_refutable_slice](https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice) |\n+| await-holding-invalid-types | `[]` | [ERROR] MALFORMED DOC COMMENT |  |\n+| max-include-file-size | `1000000` | The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes | [large_include_file](https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file) |\n+| allow-expect-in-tests | `false` | Whether `expect` should be allowed within `#[cfg(test)]` | [expect_used](https://rust-lang.github.io/rust-clippy/master/index.html#expect_used) |\n+| allow-unwrap-in-tests | `false` | Whether `unwrap` should be allowed in test cfg | [unwrap_used](https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used) |\n+| allow-dbg-in-tests | `false` | Whether `dbg!` should be allowed in test functions | [dbg_macro](https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro) |\n+| allow-print-in-tests | `false` | Whether print macros (ex | [print_stdout](https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout) [print_stderr](https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr) |\n+| large-error-threshold | `128` | The maximum size of the `Err`-variant in a `Result` returned from a function | [result_large_err](https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err) |\n+| ignore-interior-mutability | `[\"bytes::Bytes\"]` | A list of paths to types that should be treated like `Arc`, i | [mutable_key](https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key) |\n+| allow-mixed-uninlined-format-args | `true` | Whether to allow mixed uninlined format args, e | [uninlined_format_args](https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args) |\n+| suppress-restriction-lint-in-const | `false` | In same cases the restructured operation might not be unavoidable, as the suggested counterparts are unavailable in constant code | [indexing_slicing](https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing) |\n+"}, {"sha": "c74f3b6e3ad6f7c2e66cf5cb126d802c7dbfa4db", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=2e2ae68d5a3ef0b8c0c968fd6ec4e859c77ed2f1", "patch": "@@ -14,6 +14,7 @@ use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{match_type, walk_ptrs_ty_depth};\n use clippy_utils::{last_path_segment, match_def_path, match_function_call, match_path, paths};\n use if_chain::if_chain;\n+use itertools::Itertools;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n@@ -34,8 +35,10 @@ use std::path::Path;\n use std::path::PathBuf;\n use std::process::Command;\n \n-/// This is the output file of the lint collector.\n-const OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n+/// This is the json output file of the lint collector.\n+const JSON_OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n+/// This is the markdown output file of the lint collector.\n+const MARKDOWN_OUTPUT_FILE: &str = \"../book/src/lint_configuration.md\";\n /// These lints are excluded from the export.\n const BLACK_LISTED_LINTS: &[&str] = &[\"lint_author\", \"dump_hir\", \"internal_metadata_collector\"];\n /// These groups will be ignored by the lint group matcher. This is useful for collections like\n@@ -176,6 +179,14 @@ This lint has the following configuration variables:\n                 )\n             })\n     }\n+\n+    fn get_markdown_table(&self) -> String {\n+        self.config\n+            .iter()\n+            .filter(|config| config.deprecation_reason.is_none())\n+            .map(ClippyConfiguration::to_markdown_table_entry)\n+            .join(\"\\n\")\n+    }\n }\n \n impl Drop for MetadataCollector {\n@@ -199,12 +210,32 @@ impl Drop for MetadataCollector {\n \n         collect_renames(&mut lints);\n \n-        // Outputting\n-        if Path::new(OUTPUT_FILE).exists() {\n-            fs::remove_file(OUTPUT_FILE).unwrap();\n+        // Outputting json\n+        if Path::new(JSON_OUTPUT_FILE).exists() {\n+            fs::remove_file(JSON_OUTPUT_FILE).unwrap();\n         }\n-        let mut file = OpenOptions::new().write(true).create(true).open(OUTPUT_FILE).unwrap();\n+        let mut file = OpenOptions::new()\n+            .write(true)\n+            .create(true)\n+            .open(JSON_OUTPUT_FILE)\n+            .unwrap();\n         writeln!(file, \"{}\", serde_json::to_string_pretty(&lints).unwrap()).unwrap();\n+\n+        // Outputting markdown\n+        if Path::new(MARKDOWN_OUTPUT_FILE).exists() {\n+            fs::remove_file(MARKDOWN_OUTPUT_FILE).unwrap();\n+        }\n+        let mut file = OpenOptions::new()\n+            .write(true)\n+            .create(true)\n+            .open(MARKDOWN_OUTPUT_FILE)\n+            .unwrap();\n+        writeln!(\n+            file,\n+            \"## Lint Configuration\\n\\n| Option | Default | Description | Lints |\\n|--|--|--|--|\\n{}\\n\",\n+            self.get_markdown_table()\n+        )\n+        .unwrap();\n     }\n }\n \n@@ -505,6 +536,25 @@ impl ClippyConfiguration {\n             deprecation_reason,\n         }\n     }\n+\n+    fn to_markdown_table_entry(&self) -> String {\n+        format!(\n+            \"| {} | `{}` | {} | {} |\",\n+            self.name,\n+            self.default,\n+            self.doc\n+                .split('.')\n+                .next()\n+                .unwrap_or(\"\")\n+                .replace('|', \"\\\\|\")\n+                .replace(\"\\n    \", \" \"),\n+            self.lints\n+                .iter()\n+                .map(|name| name.to_string().split_whitespace().next().unwrap().to_string())\n+                .map(|name| format!(\"[{name}](https://rust-lang.github.io/rust-clippy/master/index.html#{name})\"))\n+                .join(\" \")\n+        )\n+    }\n }\n \n fn collect_configs() -> Vec<ClippyConfiguration> {"}]}