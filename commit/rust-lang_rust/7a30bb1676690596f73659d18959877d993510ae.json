{"sha": "7a30bb1676690596f73659d18959877d993510ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzBiYjE2NzY2OTA1OTZmNzM2NTlkMTg5NTk4NzdkOTkzNTEwYWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T09:42:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T10:07:21Z"}, "message": "Address review comments", "tree": {"sha": "5532f195ac6561f5a47a7ae44c18d235f73e06b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5532f195ac6561f5a47a7ae44c18d235f73e06b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a30bb1676690596f73659d18959877d993510ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a30bb1676690596f73659d18959877d993510ae", "html_url": "https://github.com/rust-lang/rust/commit/7a30bb1676690596f73659d18959877d993510ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a30bb1676690596f73659d18959877d993510ae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be233cbfe134f032ed2d50f7cc66e901bbe3f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be233cbfe134f032ed2d50f7cc66e901bbe3f6f", "html_url": "https://github.com/rust-lang/rust/commit/9be233cbfe134f032ed2d50f7cc66e901bbe3f6f"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "b67b7d346f7565009be3a963ca086f60978f6089", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=7a30bb1676690596f73659d18959877d993510ae", "patch": "@@ -225,8 +225,15 @@ pub enum TokenKind {\n     /* Literals */\n     Literal(Lit),\n \n-    /* Name components */\n+    /// Identifier token.\n+    /// Do not forget about `NtIdent` when you want to match on identifiers.\n+    /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to\n+    /// treat regular and interpolated identifiers in the same way.\n     Ident(ast::Name, /* is_raw */ bool),\n+    /// Lifetime identifier token.\n+    /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.\n+    /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to\n+    /// treat regular and interpolated lifetime identifiers in the same way.\n     Lifetime(ast::Name),\n \n     Interpolated(Lrc<Nonterminal>),\n@@ -328,11 +335,12 @@ impl Token {\n         mem::replace(self, Token::dummy())\n     }\n \n-    /// For interpolated tokens returns a span of the fragment to which the interpolated\n-    /// token refers, for all other tokens this is just a regular span.\n+    /// For interpolated tokens, returns a span of the fragment to which the interpolated\n+    /// token refers. For all other tokens this is just a regular span.\n     /// It is particularly important to use this for identifiers and lifetimes\n-    /// for which spans affect name resolution. This also includes edition checks\n-    /// for edition-specific keyword identifiers.\n+    /// for which spans affect name resolution and edition checks.\n+    /// Note that keywords are also identifiers, so they should use this\n+    /// if they keep spans or perform edition checks.\n     pub fn uninterpolated_span(&self) -> Span {\n         match &self.kind {\n             Interpolated(nt) => nt.span(),\n@@ -453,6 +461,7 @@ impl Token {\n         }\n     }\n \n+    // A convenience function for matching on identifiers during parsing.\n     // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token\n     // into the regular identifier or lifetime token it refers to,\n     // otherwise returns the original token."}, {"sha": "6d4d7f5b4f394f0c99efb9eae0c27ed46ff129a4", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=7a30bb1676690596f73659d18959877d993510ae", "patch": "@@ -751,10 +751,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n /// The token is an identifier, but not `_`.\n /// We prohibit passing `_` to macros expecting `ident` for now.\n fn get_macro_ident(token: &Token) -> Option<(Ident, bool)> {\n-    match token.ident() {\n-        Some((ident, is_raw)) if ident.name != kw::Underscore => Some((ident, is_raw)),\n-        _ => None,\n-    }\n+    token.ident().filter(|(ident, _)| ident.name != kw::Underscore)\n }\n \n /// Checks whether a non-terminal may begin with a particular token."}, {"sha": "bfca9f07f05d5d0c164ea971033d243abf5a3b59", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=7a30bb1676690596f73659d18959877d993510ae", "patch": "@@ -97,9 +97,8 @@ impl<'a> Parser<'a> {\n         match self.parse_expr() {\n             Ok(expr) => Ok(expr),\n             Err(mut err) => match self.token.ident() {\n-                Some((ident, false))\n-                    if ident.name == kw::Underscore\n-                        && self.look_ahead(1, |t| t == &token::Comma) =>\n+                Some((Ident { name: kw::Underscore, .. }, false))\n+                    if self.look_ahead(1, |t| t == &token::Comma) =>\n                 {\n                     // Special-case handling of `foo(_, _, _)`\n                     err.emit();\n@@ -333,13 +332,13 @@ impl<'a> Parser<'a> {\n     fn check_assoc_op(&self) -> Option<Spanned<AssocOp>> {\n         let (op, span) = match (AssocOp::from_token(&self.token), self.token.ident()) {\n             (Some(op), _) => (op, self.token.span),\n-            (None, Some((ident, false))) if ident.name == sym::and => {\n+            (None, Some((Ident { name: sym::and, span }, false))) => {\n                 self.error_bad_logical_op(\"and\", \"&&\", \"conjunction\");\n-                (AssocOp::LAnd, ident.span)\n+                (AssocOp::LAnd, span)\n             }\n-            (None, Some((ident, false))) if ident.name == sym::or => {\n+            (None, Some((Ident { name: sym::or, span }, false))) => {\n                 self.error_bad_logical_op(\"or\", \"||\", \"disjunction\");\n-                (AssocOp::LOr, ident.span)\n+                (AssocOp::LOr, span)\n             }\n             _ => return None,\n         };"}, {"sha": "126686c8defbf5ee883538f600b744d30303ce51", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a30bb1676690596f73659d18959877d993510ae/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=7a30bb1676690596f73659d18959877d993510ae", "patch": "@@ -751,7 +751,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_ident_or_underscore(&mut self) -> PResult<'a, ast::Ident> {\n         match self.token.ident() {\n-            Some((ident, false)) if ident.name == kw::Underscore => {\n+            Some((ident @ Ident { name: kw::Underscore, .. }, false)) => {\n                 self.bump();\n                 Ok(ident)\n             }"}]}