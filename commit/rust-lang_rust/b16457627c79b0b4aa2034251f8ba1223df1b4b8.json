{"sha": "b16457627c79b0b4aa2034251f8ba1223df1b4b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNjQ1NzYyN2M3OWIwYjRhYTIwMzQyNTFmOGJhMTIyM2RmMWI0Yjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T23:33:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-03T05:11:46Z"}, "message": "Stop parsing transitional istr forms. Issue #855", "tree": {"sha": "0d581278b09dfd7fad4e107d22a67abe8566f12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d581278b09dfd7fad4e107d22a67abe8566f12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16457627c79b0b4aa2034251f8ba1223df1b4b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16457627c79b0b4aa2034251f8ba1223df1b4b8", "html_url": "https://github.com/rust-lang/rust/commit/b16457627c79b0b4aa2034251f8ba1223df1b4b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16457627c79b0b4aa2034251f8ba1223df1b4b8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8fba11bd368370be47ef610e7492cac3f2dc33c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fba11bd368370be47ef610e7492cac3f2dc33c", "html_url": "https://github.com/rust-lang/rust/commit/c8fba11bd368370be47ef610e7492cac3f2dc33c"}], "stats": {"total": 25, "additions": 1, "deletions": 24}, "files": [{"sha": "1b5d5f38835af8e0ff50996eec0cd030508b1ac8", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b16457627c79b0b4aa2034251f8ba1223df1b4b8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16457627c79b0b4aa2034251f8ba1223df1b4b8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b16457627c79b0b4aa2034251f8ba1223df1b4b8", "patch": "@@ -487,8 +487,6 @@ fn parse_ty(p: &parser, colons_before_params: bool) -> @ast::ty {\n         t = ast::ty_float;\n     } else if eat_word(p, \"str\") {\n         t = ast::ty_istr;\n-    } else if eat_word(p, \"istr\") {\n-        t = ast::ty_istr;\n     } else if eat_word(p, \"char\") {\n         t = ast::ty_char;\n         /*\n@@ -880,15 +878,7 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n         ret mk_mac_expr(p, lo, p.get_hi_pos(), ast::mac_ellipsis)\n     } else if p.peek() == token::TILDE {\n         p.bump();\n-        alt p.peek() {\n-          token::LIT_STR(s) {\n-            let sp = p.get_span();\n-            p.bump();\n-            let lit = @{node: ast::lit_str(p.get_str(s)), span: sp};\n-            ex = ast::expr_lit(lit);\n-          }\n-          _ { ex = ast::expr_uniq(parse_expr(p)); }\n-        }\n+        ex = ast::expr_uniq(parse_expr(p));\n     } else if eat_word(p, \"obj\") {\n         // Anonymous object\n \n@@ -1479,19 +1469,6 @@ fn parse_pat(p: &parser) -> @ast::pat {\n             pat = ast::pat_tup(fields);\n         }\n       }\n-      token::TILDE. {\n-        p.bump();\n-        alt p.peek() {\n-          token::LIT_STR(s) {\n-            let sp = p.get_span();\n-            p.bump();\n-            let lit = @{node: ast::lit_str(p.get_str(s)), span: sp};\n-            hi = lit.span.hi;\n-            pat = ast::pat_lit(lit);\n-          }\n-          _ { p.fatal(\"expected string literal\"); }\n-        }\n-      }\n       tok {\n         if !is_ident(tok) || is_word(p, \"true\") || is_word(p, \"false\") {\n             let lit = parse_lit(p);"}]}