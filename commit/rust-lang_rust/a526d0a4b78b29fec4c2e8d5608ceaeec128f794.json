{"sha": "a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MjZkMGE0Yjc4YjI5ZmVjNGMyZThkNTYwOGNlYWVlYzEyOGY3OTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-12T12:32:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-12T12:32:55Z"}, "message": "Merge #8476\n\n8476: feat: avoid checking the whole project during initial loading r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "05141f6e9aa7d20c4ce2a8b59324a3d82d43f895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05141f6e9aa7d20c4ce2a8b59324a3d82d43f895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdD33CRBK7hj4Ov3rIwAAdHIIAA8KiTxpyHskcFc8g9NAyo+S\ni4DtdTgruaJFkZeQW2uJC/phLYubBFtBXS6JVTecn6wkLypVvbX3uuAxh7buSQc/\nND9hjI2D9p186c/UQeHy0JRB+u0v9tBAlKfkGtzLTkReE/9FuftqpP/GByOFvZlG\ntzJJGWOJxzzzXmHe5JZqPXW9cBUVHdF5L9IJhpgG81SK0Sg+9V9x4DY6Uv/QAPy0\nay6dXO81IJ82t/Gc0WRMLrCehXXzuVJH7N7xjRBhygaKbcqf+PYEqMVpBocGoU3u\nn0ZF5oRxpb7rqCNhegEau3J1Gr3FR2AN155EczxUSydQs/OkWwlKWBpXjo3TUUY=\n=0PlX\n-----END PGP SIGNATURE-----\n", "payload": "tree 05141f6e9aa7d20c4ce2a8b59324a3d82d43f895\nparent 7be06139b632ee615fc18af04dd67947e2c794b2\nparent 186c5c47cbfde4ae9d81dc67450c958cb6aece2c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618230775 +0000\ncommitter GitHub <noreply@github.com> 1618230775 +0000\n\nMerge #8476\n\n8476: feat: avoid checking the whole project during initial loading r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "html_url": "https://github.com/rust-lang/rust/commit/a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be06139b632ee615fc18af04dd67947e2c794b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be06139b632ee615fc18af04dd67947e2c794b2", "html_url": "https://github.com/rust-lang/rust/commit/7be06139b632ee615fc18af04dd67947e2c794b2"}, {"sha": "186c5c47cbfde4ae9d81dc67450c958cb6aece2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/186c5c47cbfde4ae9d81dc67450c958cb6aece2c", "html_url": "https://github.com/rust-lang/rust/commit/186c5c47cbfde4ae9d81dc67450c958cb6aece2c"}], "stats": {"total": 369, "additions": 248, "deletions": 121}, "files": [{"sha": "ab5cc8c491356d932a8bb11077754ff5a35529ad", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 129, "deletions": 107, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -58,28 +58,32 @@ impl PartialEq for BuildDataConfig {\n \n impl Eq for BuildDataConfig {}\n \n-#[derive(Debug, Default)]\n+#[derive(Debug)]\n pub struct BuildDataCollector {\n+    wrap_rustc: bool,\n     configs: FxHashMap<AbsPathBuf, BuildDataConfig>,\n }\n \n impl BuildDataCollector {\n+    pub fn new(wrap_rustc: bool) -> Self {\n+        Self { wrap_rustc, configs: FxHashMap::default() }\n+    }\n+\n     pub(crate) fn add_config(&mut self, workspace_root: &AbsPath, config: BuildDataConfig) {\n         self.configs.insert(workspace_root.to_path_buf(), config);\n     }\n \n     pub fn collect(&mut self, progress: &dyn Fn(String)) -> Result<BuildDataResult> {\n         let mut res = BuildDataResult::default();\n         for (path, config) in self.configs.iter() {\n-            res.per_workspace.insert(\n-                path.clone(),\n-                collect_from_workspace(\n-                    &config.cargo_toml,\n-                    &config.cargo_features,\n-                    &config.packages,\n-                    progress,\n-                )?,\n-            );\n+            let workspace_build_data = WorkspaceBuildData::collect(\n+                &config.cargo_toml,\n+                &config.cargo_features,\n+                &config.packages,\n+                self.wrap_rustc,\n+                progress,\n+            )?;\n+            res.per_workspace.insert(path.clone(), workspace_build_data);\n         }\n         Ok(res)\n     }\n@@ -120,119 +124,137 @@ impl BuildDataConfig {\n     }\n }\n \n-fn collect_from_workspace(\n-    cargo_toml: &AbsPath,\n-    cargo_features: &CargoConfig,\n-    packages: &Vec<cargo_metadata::Package>,\n-    progress: &dyn Fn(String),\n-) -> Result<WorkspaceBuildData> {\n-    let mut cmd = Command::new(toolchain::cargo());\n-    cmd.args(&[\"check\", \"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n-        .arg(cargo_toml.as_ref());\n-\n-    // --all-targets includes tests, benches and examples in addition to the\n-    // default lib and bins. This is an independent concept from the --targets\n-    // flag below.\n-    cmd.arg(\"--all-targets\");\n-\n-    if let Some(target) = &cargo_features.target {\n-        cmd.args(&[\"--target\", target]);\n-    }\n+impl WorkspaceBuildData {\n+    fn collect(\n+        cargo_toml: &AbsPath,\n+        cargo_features: &CargoConfig,\n+        packages: &Vec<cargo_metadata::Package>,\n+        wrap_rustc: bool,\n+        progress: &dyn Fn(String),\n+    ) -> Result<WorkspaceBuildData> {\n+        let mut cmd = Command::new(toolchain::cargo());\n+\n+        if wrap_rustc {\n+            // Setup RUSTC_WRAPPER to point to `rust-analyzer` binary itself. We use\n+            // that to compile only proc macros and build scripts during the initial\n+            // `cargo check`.\n+            let myself = std::env::current_exe()?;\n+            cmd.env(\"RUSTC_WRAPPER\", myself);\n+            cmd.env(\"RA_RUSTC_WRAPPER\", \"1\");\n+        }\n+\n+        cmd.args(&[\"check\", \"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n+            .arg(cargo_toml.as_ref());\n \n-    if cargo_features.all_features {\n-        cmd.arg(\"--all-features\");\n-    } else {\n-        if cargo_features.no_default_features {\n-            // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n-            // https://github.com/oli-obk/cargo_metadata/issues/79\n-            cmd.arg(\"--no-default-features\");\n+        // --all-targets includes tests, benches and examples in addition to the\n+        // default lib and bins. This is an independent concept from the --targets\n+        // flag below.\n+        cmd.arg(\"--all-targets\");\n+\n+        if let Some(target) = &cargo_features.target {\n+            cmd.args(&[\"--target\", target]);\n         }\n-        if !cargo_features.features.is_empty() {\n-            cmd.arg(\"--features\");\n-            cmd.arg(cargo_features.features.join(\" \"));\n+\n+        if cargo_features.all_features {\n+            cmd.arg(\"--all-features\");\n+        } else {\n+            if cargo_features.no_default_features {\n+                // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n+                // https://github.com/oli-obk/cargo_metadata/issues/79\n+                cmd.arg(\"--no-default-features\");\n+            }\n+            if !cargo_features.features.is_empty() {\n+                cmd.arg(\"--features\");\n+                cmd.arg(cargo_features.features.join(\" \"));\n+            }\n         }\n-    }\n \n-    cmd.stdout(Stdio::piped()).stderr(Stdio::piped()).stdin(Stdio::null());\n-\n-    let mut child = cmd.spawn().map(JodChild)?;\n-    let child_stdout = child.stdout.take().unwrap();\n-    let stdout = BufReader::new(child_stdout);\n-\n-    let mut res = WorkspaceBuildData::default();\n-    for message in cargo_metadata::Message::parse_stream(stdout).flatten() {\n-        match message {\n-            Message::BuildScriptExecuted(BuildScript {\n-                package_id, out_dir, cfgs, env, ..\n-            }) => {\n-                let cfgs = {\n-                    let mut acc = Vec::new();\n-                    for cfg in cfgs {\n-                        match cfg.parse::<CfgFlag>() {\n-                            Ok(it) => acc.push(it),\n-                            Err(err) => {\n-                                anyhow::bail!(\"invalid cfg from cargo-metadata: {}\", err)\n-                            }\n-                        };\n+        cmd.stdout(Stdio::piped()).stderr(Stdio::piped()).stdin(Stdio::null());\n+\n+        let mut child = cmd.spawn().map(JodChild)?;\n+        let child_stdout = child.stdout.take().unwrap();\n+        let stdout = BufReader::new(child_stdout);\n+\n+        let mut res = WorkspaceBuildData::default();\n+        for message in cargo_metadata::Message::parse_stream(stdout).flatten() {\n+            match message {\n+                Message::BuildScriptExecuted(BuildScript {\n+                    package_id,\n+                    out_dir,\n+                    cfgs,\n+                    env,\n+                    ..\n+                }) => {\n+                    let cfgs = {\n+                        let mut acc = Vec::new();\n+                        for cfg in cfgs {\n+                            match cfg.parse::<CfgFlag>() {\n+                                Ok(it) => acc.push(it),\n+                                Err(err) => {\n+                                    anyhow::bail!(\"invalid cfg from cargo-metadata: {}\", err)\n+                                }\n+                            };\n+                        }\n+                        acc\n+                    };\n+                    let package_build_data =\n+                        res.per_package.entry(package_id.repr.clone()).or_default();\n+                    // cargo_metadata crate returns default (empty) path for\n+                    // older cargos, which is not absolute, so work around that.\n+                    if !out_dir.as_str().is_empty() {\n+                        let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n+                        package_build_data.out_dir = Some(out_dir);\n+                        package_build_data.cfgs = cfgs;\n                     }\n-                    acc\n-                };\n-                let package_build_data =\n-                    res.per_package.entry(package_id.repr.clone()).or_default();\n-                // cargo_metadata crate returns default (empty) path for\n-                // older cargos, which is not absolute, so work around that.\n-                if !out_dir.as_str().is_empty() {\n-                    let out_dir = AbsPathBuf::assert(PathBuf::from(out_dir.into_os_string()));\n-                    package_build_data.out_dir = Some(out_dir);\n-                    package_build_data.cfgs = cfgs;\n-                }\n \n-                package_build_data.envs = env;\n-            }\n-            Message::CompilerArtifact(message) => {\n-                progress(format!(\"metadata {}\", message.target.name));\n-\n-                if message.target.kind.contains(&\"proc-macro\".to_string()) {\n-                    let package_id = message.package_id;\n-                    // Skip rmeta file\n-                    if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name)) {\n-                        let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n-                        let package_build_data =\n-                            res.per_package.entry(package_id.repr.clone()).or_default();\n-                        package_build_data.proc_macro_dylib_path = Some(filename);\n+                    package_build_data.envs = env;\n+                }\n+                Message::CompilerArtifact(message) => {\n+                    progress(format!(\"metadata {}\", message.target.name));\n+\n+                    if message.target.kind.contains(&\"proc-macro\".to_string()) {\n+                        let package_id = message.package_id;\n+                        // Skip rmeta file\n+                        if let Some(filename) = message.filenames.iter().find(|name| is_dylib(name))\n+                        {\n+                            let filename = AbsPathBuf::assert(PathBuf::from(&filename));\n+                            let package_build_data =\n+                                res.per_package.entry(package_id.repr.clone()).or_default();\n+                            package_build_data.proc_macro_dylib_path = Some(filename);\n+                        }\n                     }\n                 }\n+                Message::CompilerMessage(message) => {\n+                    progress(message.target.name.clone());\n+                }\n+                Message::BuildFinished(_) => {}\n+                Message::TextLine(_) => {}\n+                _ => {}\n             }\n-            Message::CompilerMessage(message) => {\n-                progress(message.target.name.clone());\n-            }\n-            Message::BuildFinished(_) => {}\n-            Message::TextLine(_) => {}\n-            _ => {}\n         }\n-    }\n \n-    for package in packages {\n-        let package_build_data = res.per_package.entry(package.id.repr.clone()).or_default();\n-        inject_cargo_env(package, package_build_data);\n-        if let Some(out_dir) = &package_build_data.out_dir {\n-            // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n-            if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n-                package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n+        for package in packages {\n+            let package_build_data = res.per_package.entry(package.id.repr.clone()).or_default();\n+            inject_cargo_env(package, package_build_data);\n+            if let Some(out_dir) = &package_build_data.out_dir {\n+                // NOTE: cargo and rustc seem to hide non-UTF-8 strings from env! and option_env!()\n+                if let Some(out_dir) = out_dir.to_str().map(|s| s.to_owned()) {\n+                    package_build_data.envs.push((\"OUT_DIR\".to_string(), out_dir));\n+                }\n             }\n         }\n-    }\n \n-    let output = child.into_inner().wait_with_output()?;\n-    if !output.status.success() {\n-        let mut stderr = String::from_utf8(output.stderr).unwrap_or_default();\n-        if stderr.is_empty() {\n-            stderr = \"cargo check failed\".to_string();\n+        let output = child.into_inner().wait_with_output()?;\n+        if !output.status.success() {\n+            let mut stderr = String::from_utf8(output.stderr).unwrap_or_default();\n+            if stderr.is_empty() {\n+                stderr = \"cargo check failed\".to_string();\n+            }\n+            res.error = Some(stderr)\n         }\n-        res.error = Some(stderr)\n-    }\n \n-    Ok(res)\n+        Ok(res)\n+    }\n }\n \n // FIXME: File a better way to know if it is a dylib"}, {"sha": "bdd94b1c4e5e29eb9d5e46d8a548bc6e49fec8cd", "filename": "crates/rust-analyzer/src/benchmarks.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbenchmarks.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -30,8 +30,11 @@ fn benchmark_integrated_highlighting() {\n     let file = \"./crates/ide_db/src/apply_change.rs\";\n \n     let cargo_config = Default::default();\n-    let load_cargo_config =\n-        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: false };\n+    let load_cargo_config = LoadCargoConfig {\n+        load_out_dirs_from_check: true,\n+        wrap_rustc: false,\n+        with_proc_macro: false,\n+    };\n \n     let (mut host, vfs, _proc_macro) = {\n         let _it = stdx::timeit(\"workspace loading\");"}, {"sha": "f0abb5b15f2efbbd82440e74dd720f054daa6f6d", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -3,6 +3,7 @@\n //! Based on cli flags, either spawns an LSP server, or runs a batch analysis\n mod flags;\n mod logger;\n+mod rustc_wrapper;\n \n use std::{convert::TryFrom, env, fs, path::Path, process};\n \n@@ -26,6 +27,20 @@ static ALLOC: mimalloc::MiMalloc = mimalloc::MiMalloc;\n static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n fn main() {\n+    if std::env::var(\"RA_RUSTC_WRAPPER\").is_ok() {\n+        let mut args = std::env::args_os();\n+        let _me = args.next().unwrap();\n+        let rustc = args.next().unwrap();\n+        let code = match rustc_wrapper::run_rustc_skipping_cargo_checking(rustc, args.collect()) {\n+            Ok(rustc_wrapper::ExitCode(code)) => code.unwrap_or(102),\n+            Err(err) => {\n+                eprintln!(\"{}\", err);\n+                101\n+            }\n+        };\n+        process::exit(code);\n+    }\n+\n     if let Err(err) = try_main() {\n         log::error!(\"Unexpected error: {}\", err);\n         eprintln!(\"{}\", err);"}, {"sha": "2f6d4706d879e547e4bd1096cbfd78e52b6a0be5", "filename": "crates/rust-analyzer/src/bin/rustc_wrapper.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fbin%2Frustc_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fbin%2Frustc_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Frustc_wrapper.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -0,0 +1,46 @@\n+//! We setup RUSTC_WRAPPER to point to `rust-analyzer` binary itself during the\n+//! initial `cargo check`. That way, we avoid checking the actual project, and\n+//! only build proc macros and build.rs.\n+//!\n+//! Code taken from IntelliJ :0)\n+//!     https://github.com/intellij-rust/intellij-rust/blob/master/native-helper/src/main.rs\n+use std::{\n+    ffi::OsString,\n+    io,\n+    process::{Command, Stdio},\n+};\n+\n+/// ExitCode/ExitStatus are impossible to create :(.\n+pub(crate) struct ExitCode(pub(crate) Option<i32>);\n+\n+pub(crate) fn run_rustc_skipping_cargo_checking(\n+    rustc_executable: OsString,\n+    args: Vec<OsString>,\n+) -> io::Result<ExitCode> {\n+    let is_cargo_check = args.iter().any(|arg| {\n+        let arg = arg.to_string_lossy();\n+        // `cargo check` invokes `rustc` with `--emit=metadata` argument.\n+        //\n+        // https://doc.rust-lang.org/rustc/command-line-arguments.html#--emit-specifies-the-types-of-output-files-to-generate\n+        // link \u2014     Generates the crates specified by --crate-type. The default\n+        //            output filenames depend on the crate type and platform. This\n+        //            is the default if --emit is not specified.\n+        // metadata \u2014 Generates a file containing metadata about the crate.\n+        //            The default output filename is CRATE_NAME.rmeta.\n+        arg.starts_with(\"--emit=\") && arg.contains(\"metadata\") && !arg.contains(\"link\")\n+    });\n+    if is_cargo_check {\n+        return Ok(ExitCode(Some(0)));\n+    }\n+    run_rustc(rustc_executable, args)\n+}\n+\n+fn run_rustc(rustc_executable: OsString, args: Vec<OsString>) -> io::Result<ExitCode> {\n+    let mut child = Command::new(rustc_executable)\n+        .args(args)\n+        .stdin(Stdio::inherit())\n+        .stdout(Stdio::inherit())\n+        .stderr(Stdio::inherit())\n+        .spawn()?;\n+    Ok(ExitCode(child.wait()?.code()))\n+}"}, {"sha": "3f313456265ddfc89c4b08e963c64490ee65ae93", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -68,6 +68,7 @@ impl AnalysisStatsCmd {\n         cargo_config.no_sysroot = self.no_sysroot;\n         let load_cargo_config = LoadCargoConfig {\n             load_out_dirs_from_check: self.load_output_dirs,\n+            wrap_rustc: false,\n             with_proc_macro: self.with_proc_macro,\n         };\n         let (host, vfs, _proc_macro) ="}, {"sha": "0085d0e4dffcb28e0d9b35dd05ca9eb9d3a38c13", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -34,7 +34,8 @@ pub fn diagnostics(\n     with_proc_macro: bool,\n ) -> Result<()> {\n     let cargo_config = Default::default();\n-    let load_cargo_config = LoadCargoConfig { load_out_dirs_from_check, with_proc_macro };\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check, with_proc_macro, wrap_rustc: false };\n     let (host, _vfs, _proc_macro) =\n         load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();"}, {"sha": "75bad1112bff868df9dbccba25eb6e0f8277111c", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -15,6 +15,7 @@ use crate::reload::{ProjectFolders, SourceRootConfig};\n \n pub struct LoadCargoConfig {\n     pub load_out_dirs_from_check: bool,\n+    pub wrap_rustc: bool,\n     pub with_proc_macro: bool,\n }\n \n@@ -52,7 +53,7 @@ pub fn load_workspace(\n     };\n \n     let build_data = if config.load_out_dirs_from_check {\n-        let mut collector = BuildDataCollector::default();\n+        let mut collector = BuildDataCollector::new(config.wrap_rustc);\n         ws.collect_build_data_configs(&mut collector);\n         Some(collector.collect(progress)?)\n     } else {\n@@ -136,8 +137,11 @@ mod tests {\n     fn test_loading_rust_analyzer() -> Result<()> {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n         let cargo_config = Default::default();\n-        let load_cargo_config =\n-            LoadCargoConfig { load_out_dirs_from_check: false, with_proc_macro: false };\n+        let load_cargo_config = LoadCargoConfig {\n+            load_out_dirs_from_check: false,\n+            wrap_rustc: false,\n+            with_proc_macro: false,\n+        };\n         let (host, _vfs, _proc_macro) =\n             load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n "}, {"sha": "1fd9b5a9b47c6f52de073fb4e1ff96f71e152b64", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -9,8 +9,11 @@ use ide_ssr::{MatchFinder, SsrPattern, SsrRule};\n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n     let cargo_config = Default::default();\n-    let load_cargo_config =\n-        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n+    let load_cargo_config = LoadCargoConfig {\n+        load_out_dirs_from_check: true,\n+        wrap_rustc: false,\n+        with_proc_macro: true,\n+    };\n     let (host, vfs, _proc_macro) =\n         load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n@@ -37,7 +40,7 @@ pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<Stri\n     use ide_db::symbol_index::SymbolsDatabase;\n     let cargo_config = Default::default();\n     let load_cargo_config =\n-        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n+        LoadCargoConfig { load_out_dirs_from_check: true, wrap_rustc: true, with_proc_macro: true };\n     let (host, _vfs, _proc_macro) =\n         load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();"}, {"sha": "1edaa394a802aa3fef6a5e4510199bc34d1bb178", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -48,6 +48,9 @@ config_data! {\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_runBuildScripts |\n         cargo_loadOutDirsFromCheck: bool = \"true\",\n+        /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n+        /// avoid compiling unnecessary things.\n+        cargo_useRustcWrapperForBuildScripts: bool = \"true\",\n         /// Do not activate the `default` feature.\n         cargo_noDefaultFeatures: bool    = \"false\",\n         /// Compilation target (target triple).\n@@ -493,6 +496,9 @@ impl Config {\n     pub fn run_build_scripts(&self) -> bool {\n         self.data.cargo_runBuildScripts || self.data.procMacro_enable\n     }\n+    pub fn wrap_rustc(&self) -> bool {\n+        self.data.cargo_useRustcWrapperForBuildScripts\n+    }\n     pub fn cargo(&self) -> CargoConfig {\n         let rustc_source = self.data.rustcSource.as_ref().map(|rustc_src| {\n             if rustc_src == \"discover\" {"}, {"sha": "b3d4c6ec5e06db6329d669e99fe79e0f5a1a271e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -236,7 +236,8 @@ impl GlobalState {\n                                     let workspaces_updated = !Arc::ptr_eq(&old, &self.workspaces);\n \n                                     if self.config.run_build_scripts() && workspaces_updated {\n-                                        let mut collector = BuildDataCollector::default();\n+                                        let mut collector =\n+                                            BuildDataCollector::new(self.config.wrap_rustc());\n                                         for ws in self.workspaces.iter() {\n                                             ws.collect_build_data_configs(&mut collector);\n                                         }"}, {"sha": "1e4c04bbf6db04d8c51ecd5cf91ab28af72949f8", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -527,7 +527,7 @@ version = \\\"0.0.0\\\"\n #[test]\n fn out_dirs_check() {\n     if skip_slow_tests() {\n-        return;\n+        // return;\n     }\n \n     let server = Project::with_fixture("}, {"sha": "5e388c0f0285f3e34713121908feeb48f67fdb41", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -32,8 +32,12 @@ impl<'a> Project<'a> {\n             tmp_dir: None,\n             roots: vec![],\n             config: serde_json::json!({\n-                // Loading standard library is costly, let's ignore it by default\n-                \"cargo\": { \"noSysroot\": true }\n+                \"cargo\": {\n+                    // Loading standard library is costly, let's ignore it by default\n+                    \"noSysroot\": true,\n+                    // Can't use test binary as rustc wrapper.\n+                    \"useRustcWrapperForBuildScripts\": false,\n+                }\n             }),\n         }\n     }\n@@ -49,7 +53,17 @@ impl<'a> Project<'a> {\n     }\n \n     pub(crate) fn with_config(mut self, config: serde_json::Value) -> Project<'a> {\n-        self.config = config;\n+        fn merge(dst: &mut serde_json::Value, src: serde_json::Value) {\n+            match (dst, src) {\n+                (Value::Object(dst), Value::Object(src)) => {\n+                    for (k, v) in src {\n+                        merge(dst.entry(k).or_insert(v.clone()), v)\n+                    }\n+                }\n+                (dst, src) => *dst = src,\n+            }\n+        }\n+        merge(&mut self.config, config);\n         self\n     }\n "}, {"sha": "e0ee35b4e8cf9c6b1c3d6969d87d038f66a76697", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -39,6 +39,12 @@ List of features to activate.\n --\n Run build scripts (`build.rs`) for more precise code analysis.\n --\n+[[rust-analyzer.cargo.useRustcWrapperForBuildScripts]]rust-analyzer.cargo.useRustcWrapperForBuildScripts (default: `true`)::\n++\n+--\n+Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n+avoid compiling unnecessary things.\n+--\n [[rust-analyzer.cargo.noDefaultFeatures]]rust-analyzer.cargo.noDefaultFeatures (default: `false`)::\n +\n --"}, {"sha": "06ed62d8d7c4c148347818082f28ab83f453a409", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a526d0a4b78b29fec4c2e8d5608ceaeec128f794/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a526d0a4b78b29fec4c2e8d5608ceaeec128f794", "patch": "@@ -434,6 +434,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.useRustcWrapperForBuildScripts\": {\n+                    \"markdownDescription\": \"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\\navoid compiling unnecessary things.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.cargo.noDefaultFeatures\": {\n                     \"markdownDescription\": \"Do not activate the `default` feature.\",\n                     \"default\": false,"}]}