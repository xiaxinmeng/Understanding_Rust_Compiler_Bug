{"sha": "d0940161283216ade541946474c759621b6997c5", "node_id": "C_kwDOAAsO6NoAKGQwOTQwMTYxMjgzMjE2YWRlNTQxOTQ2NDc0Yzc1OTYyMWI2OTk3YzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T23:57:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T23:57:05Z"}, "message": "Auto merge of #106677 - tbu-:pr_less_doc_hidden_pub, r=scottmcm\n\nRemove a couple of `#[doc(hidden)] pub fn` and their `#[feature]` gates", "tree": {"sha": "51e89075474af869d90f751276cf32fd7d63c8ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e89075474af869d90f751276cf32fd7d63c8ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0940161283216ade541946474c759621b6997c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0940161283216ade541946474c759621b6997c5", "html_url": "https://github.com/rust-lang/rust/commit/d0940161283216ade541946474c759621b6997c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0940161283216ade541946474c759621b6997c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "585f3eef26f04440bca726c29193af7b4fa90e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/585f3eef26f04440bca726c29193af7b4fa90e54", "html_url": "https://github.com/rust-lang/rust/commit/585f3eef26f04440bca726c29193af7b4fa90e54"}, {"sha": "77c85e9cba0c3f8b185c63f013cca1350b2e5492", "url": "https://api.github.com/repos/rust-lang/rust/commits/77c85e9cba0c3f8b185c63f013cca1350b2e5492", "html_url": "https://github.com/rust-lang/rust/commit/77c85e9cba0c3f8b185c63f013cca1350b2e5492"}], "stats": {"total": 180, "additions": 48, "deletions": 132}, "files": [{"sha": "f99395c72aa034627e3e130f8d370f6b6e3c95c2", "filename": "library/alloc/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fffi%2Fc_str.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -991,12 +991,6 @@ impl IntoStringError {\n     pub fn utf8_error(&self) -> Utf8Error {\n         self.error\n     }\n-\n-    #[doc(hidden)]\n-    #[unstable(feature = \"cstr_internals\", issue = \"none\")]\n-    pub fn __source(&self) -> &Utf8Error {\n-        &self.error\n-    }\n }\n \n impl IntoStringError {\n@@ -1141,6 +1135,6 @@ impl core::error::Error for IntoStringError {\n     }\n \n     fn source(&self) -> Option<&(dyn core::error::Error + 'static)> {\n-        Some(self.__source())\n+        Some(&self.error)\n     }\n }"}, {"sha": "5decd7d5a65bbb0031432e113f0dbaedbffa7c15", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -131,28 +131,15 @@ pub struct TryFromSliceError(());\n impl fmt::Display for TryFromSliceError {\n     #[inline]\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self.__description(), f)\n+        #[allow(deprecated)]\n+        self.description().fmt(f)\n     }\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for TryFromSliceError {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-impl TryFromSliceError {\n-    #[unstable(\n-        feature = \"array_error_internals\",\n-        reason = \"available through Error trait and this method should not \\\n-                     be exposed publicly\",\n-        issue = \"none\"\n-    )]\n-    #[inline]\n-    #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n         \"could not convert slice to array\"\n     }\n }"}, {"sha": "136bbcb8b21b4c020854157102e3276954325217", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -2,6 +2,7 @@\n \n use crate::char::TryFromCharError;\n use crate::convert::TryFrom;\n+use crate::error::Error;\n use crate::fmt;\n use crate::mem::transmute;\n use crate::str::FromStr;\n@@ -150,31 +151,28 @@ pub struct ParseCharError {\n     kind: CharErrorKind,\n }\n \n-impl ParseCharError {\n-    #[unstable(\n-        feature = \"char_error_internals\",\n-        reason = \"this method should not be available publicly\",\n-        issue = \"none\"\n-    )]\n-    #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum CharErrorKind {\n+    EmptyString,\n+    TooManyChars,\n+}\n+\n+#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n+impl Error for ParseCharError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n         match self.kind {\n             CharErrorKind::EmptyString => \"cannot parse char from empty string\",\n             CharErrorKind::TooManyChars => \"too many characters in string\",\n         }\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-enum CharErrorKind {\n-    EmptyString,\n-    TooManyChars,\n-}\n-\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl fmt::Display for ParseCharError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.__description().fmt(f)\n+        #[allow(deprecated)]\n+        self.description().fmt(f)\n     }\n }\n "}, {"sha": "571bc4bcfd13dc3670bd8e0914978c88f007e38c", "filename": "library/core/src/error.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -486,25 +486,9 @@ impl Error for crate::char::CharTryFromError {\n     }\n }\n \n-#[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n-impl Error for crate::char::ParseCharError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n impl Error for crate::time::TryFromFloatSecsError {}\n \n-#[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n-impl Error for crate::ffi::FromBytesWithNulError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n impl Error for crate::ffi::FromBytesUntilNulError {}\n "}, {"sha": "cd00fd0daf9e18dd14a29d547779dd9cb46e723f", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -1,4 +1,5 @@\n use crate::cmp::Ordering;\n+use crate::error::Error;\n use crate::ffi::c_char;\n use crate::fmt;\n use crate::intrinsics;\n@@ -129,10 +130,12 @@ impl FromBytesWithNulError {\n     const fn not_nul_terminated() -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::NotNulTerminated }\n     }\n+}\n \n-    #[doc(hidden)]\n-    #[unstable(feature = \"cstr_internals\", issue = \"none\")]\n-    pub fn __description(&self) -> &str {\n+#[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n+impl Error for FromBytesWithNulError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n         match self.kind {\n             FromBytesWithNulErrorKind::InteriorNul(..) => {\n                 \"data provided contains an interior nul byte\"\n@@ -180,7 +183,7 @@ impl Default for &CStr {\n impl fmt::Display for FromBytesWithNulError {\n     #[allow(deprecated, deprecated_in_future)]\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(self.__description())?;\n+        f.write_str(self.description())?;\n         if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {\n             write!(f, \" at byte pos {pos}\")?;\n         }"}, {"sha": "f8d493e8b6276210b85c594eb208f5edb8ea0164", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -75,6 +75,7 @@\n     issue = \"none\"\n )]\n \n+use crate::error::Error;\n use crate::fmt;\n use crate::str::FromStr;\n \n@@ -182,15 +183,10 @@ enum FloatErrorKind {\n     Invalid,\n }\n \n-impl ParseFloatError {\n-    #[unstable(\n-        feature = \"int_error_internals\",\n-        reason = \"available through Error trait and this method should \\\n-                  not be exposed publicly\",\n-        issue = \"none\"\n-    )]\n-    #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Error for ParseFloatError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n         match self.kind {\n             FloatErrorKind::Empty => \"cannot parse float from empty string\",\n             FloatErrorKind::Invalid => \"invalid float literal\",\n@@ -201,7 +197,8 @@ impl ParseFloatError {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseFloatError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.__description().fmt(f)\n+        #[allow(deprecated)]\n+        self.description().fmt(f)\n     }\n }\n "}, {"sha": "1bae4efe7d936110605d6f1aae8dfb55995f0f14", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -9,23 +9,19 @@ use crate::fmt;\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub struct TryFromIntError(pub(crate) ());\n \n-impl TryFromIntError {\n-    #[unstable(\n-        feature = \"int_error_internals\",\n-        reason = \"available through Error trait and this method should \\\n-                  not be exposed publicly\",\n-        issue = \"none\"\n-    )]\n-    #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n-        \"out of range integral type conversion attempted\"\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl fmt::Display for TryFromIntError {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        #[allow(deprecated)]\n+        self.description().fmt(fmt)\n     }\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl fmt::Display for TryFromIntError {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.__description().fmt(fmt)\n+impl Error for TryFromIntError {\n+    #[allow(deprecated)]\n+    fn description(&self) -> &str {\n+        \"out of range integral type conversion attempted\"\n     }\n }\n \n@@ -121,43 +117,26 @@ impl ParseIntError {\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind\n     }\n-    #[unstable(\n-        feature = \"int_error_internals\",\n-        reason = \"available through Error trait and this method should \\\n-                  not be exposed publicly\",\n-        issue = \"none\"\n-    )]\n-    #[doc(hidden)]\n-    pub fn __description(&self) -> &str {\n-        match self.kind {\n-            IntErrorKind::Empty => \"cannot parse integer from empty string\",\n-            IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n-            IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n-            IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n-            IntErrorKind::Zero => \"number would be zero for non-zero type\",\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseIntError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.__description().fmt(f)\n+        #[allow(deprecated)]\n+        self.description().fmt(f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Error for ParseIntError {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n-#[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl Error for TryFromIntError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n+        match self.kind {\n+            IntErrorKind::Empty => \"cannot parse integer from empty string\",\n+            IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n+            IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n+            IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n+            IntErrorKind::Zero => \"number would be zero for non-zero type\",\n+        }\n     }\n }"}, {"sha": "0497416745fdf426fc53f87cf5753c381ee2f1af", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -9,9 +9,6 @@ use crate::mem;\n use crate::ops::{Add, Mul, Sub};\n use crate::str::FromStr;\n \n-#[cfg(not(no_fp_fmt_parse))]\n-use crate::error::Error;\n-\n // Used because the `?` operator is not allowed in a const context.\n macro_rules! try_opt {\n     ($e:expr) => {\n@@ -61,15 +58,6 @@ pub use wrapping::Wrapping;\n #[cfg(not(no_fp_fmt_parse))]\n pub use dec2flt::ParseFloatError;\n \n-#[cfg(not(no_fp_fmt_parse))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Error for ParseFloatError {\n-    #[allow(deprecated)]\n-    fn description(&self) -> &str {\n-        self.__description()\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use error::ParseIntError;\n "}, {"sha": "363a26671746759aa815a2be79befe2bb9ce567d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0940161283216ade541946474c759621b6997c5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0940161283216ade541946474c759621b6997c5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d0940161283216ade541946474c759621b6997c5", "patch": "@@ -273,12 +273,9 @@\n #![feature(utf8_chunks)]\n //\n // Library features (core):\n-#![feature(array_error_internals)]\n #![feature(atomic_mut_ptr)]\n-#![feature(char_error_internals)]\n #![feature(char_internals)]\n #![feature(core_intrinsics)]\n-#![feature(cstr_internals)]\n #![feature(duration_constants)]\n #![feature(error_generic_member_access)]\n #![feature(error_in_core)]\n@@ -290,7 +287,6 @@\n #![feature(float_next_up_down)]\n #![feature(hasher_prefixfree_extras)]\n #![feature(hashmap_internals)]\n-#![feature(int_error_internals)]\n #![feature(is_some_and)]\n #![feature(maybe_uninit_slice)]\n #![feature(maybe_uninit_write_slice)]"}, {"sha": "8013b4988e1414ad1ee408dd494b84da85edb034", "filename": "src/doc/unstable-book/src/library-features/char-error-internals.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/585f3eef26f04440bca726c29193af7b4fa90e54/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/585f3eef26f04440bca726c29193af7b4fa90e54/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fchar-error-internals.md?ref=585f3eef26f04440bca726c29193af7b4fa90e54", "patch": "@@ -1,5 +0,0 @@\n-# `char_error_internals`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "402e4fa5ef6d73fcf3f4f2ef0a610add95f9d018", "filename": "src/doc/unstable-book/src/library-features/int-error-internals.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/585f3eef26f04440bca726c29193af7b4fa90e54/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fint-error-internals.md", "raw_url": "https://github.com/rust-lang/rust/raw/585f3eef26f04440bca726c29193af7b4fa90e54/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fint-error-internals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fint-error-internals.md?ref=585f3eef26f04440bca726c29193af7b4fa90e54", "patch": "@@ -1,5 +0,0 @@\n-# `int_error_internals`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}]}