{"sha": "723f0ef51889a3e3ae6903d5dd364808d3d5126c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyM2YwZWY1MTg4OWEzZTNhZTY5MDNkNWRkMzY0ODA4ZDNkNTEyNmM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-01T18:20:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-01T18:20:18Z"}, "message": "Rollup merge of #65960 - lzutao:doc-iter-example, r=Centril\n\ndoc: reword iter module example and mention other methods", "tree": {"sha": "2e44490eb8e59e09c2d634a59e207f9752089a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e44490eb8e59e09c2d634a59e207f9752089a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723f0ef51889a3e3ae6903d5dd364808d3d5126c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdvHdiCRBK7hj4Ov3rIwAAdHIIACmTukbuN/B4e7lCtaaxoZBo\nYxTK+2J2nj4n7IX8fk5uoxlncHdAoD7eoCfCpDHHyAUiZSLPLkMd1hlprn2y04Fq\nkDWG6HMiHHSvJOtcAnFXLZxI46OWVW0pEV7xBy4fBydWvPx0e7Bh6fAhAie3V+sQ\nzdQ8Xgse27DMnKVsqcm/sryOxpbdBc3YKP/UGjBf98JafkebckPCOPEdO3S/dL85\nxzAkg6AcZRkitat6Xi4zz2kQSKIKO9H26zHZ42RESeAYxmSVy8jrbrP2Ti8AOowR\nwKS/pMfHpvd2Wust26pFm9UXFGsP4jAfBp6A4x7a0iq+QaIbH/iN+jRF1DFTO9o=\n=QzxH\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e44490eb8e59e09c2d634a59e207f9752089a54\nparent 4160e5aababbdfbf9743ab37aa8e954b888e9425\nparent bb1f4c47c1086e9290461676e9779fb0901f9da0\nauthor Tyler Mandry <tmandry@gmail.com> 1572632418 -0700\ncommitter GitHub <noreply@github.com> 1572632418 -0700\n\nRollup merge of #65960 - lzutao:doc-iter-example, r=Centril\n\ndoc: reword iter module example and mention other methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723f0ef51889a3e3ae6903d5dd364808d3d5126c", "html_url": "https://github.com/rust-lang/rust/commit/723f0ef51889a3e3ae6903d5dd364808d3d5126c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723f0ef51889a3e3ae6903d5dd364808d3d5126c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4160e5aababbdfbf9743ab37aa8e954b888e9425", "url": "https://api.github.com/repos/rust-lang/rust/commits/4160e5aababbdfbf9743ab37aa8e954b888e9425", "html_url": "https://github.com/rust-lang/rust/commit/4160e5aababbdfbf9743ab37aa8e954b888e9425"}, {"sha": "bb1f4c47c1086e9290461676e9779fb0901f9da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1f4c47c1086e9290461676e9779fb0901f9da0", "html_url": "https://github.com/rust-lang/rust/commit/bb1f4c47c1086e9290461676e9779fb0901f9da0"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "fac6ff0f06b6d86c750d2f680fa83e2fee29476a", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/723f0ef51889a3e3ae6903d5dd364808d3d5126c/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723f0ef51889a3e3ae6903d5dd364808d3d5126c/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=723f0ef51889a3e3ae6903d5dd364808d3d5126c", "patch": "@@ -118,26 +118,16 @@\n //!\n //! let mut counter = Counter::new();\n //!\n-//! let x = counter.next().unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().unwrap();\n-//! println!(\"{}\", x);\n+//! assert_eq!(counter.next(), Some(1));\n+//! assert_eq!(counter.next(), Some(2));\n+//! assert_eq!(counter.next(), Some(3));\n+//! assert_eq!(counter.next(), Some(4));\n+//! assert_eq!(counter.next(), Some(5));\n+//! assert_eq!(counter.next(), None);\n //! ```\n //!\n-//! This will print `1` through `5`, each on their own line.\n-//!\n-//! Calling `next()` this way gets repetitive. Rust has a construct which can\n-//! call `next()` on your iterator, until it reaches `None`. Let's go over that\n+//! Calling [`next`] this way gets repetitive. Rust has a construct which can\n+//! call [`next`] on your iterator, until it reaches `None`. Let's go over that\n //! next.\n //!\n //! Also note that `Iterator` provides a default implementation of methods such as `nth` and `fold`\n@@ -253,20 +243,23 @@\n //! ```\n //!\n //! The idiomatic way to write a [`map`] for its side effects is to use a\n-//! `for` loop instead:\n+//! `for` loop or call the [`for_each`] method:\n //!\n //! ```\n //! let v = vec![1, 2, 3, 4, 5];\n //!\n+//! v.iter().for_each(|x| println!(\"{}\", x));\n+//! // or\n //! for x in &v {\n //!     println!(\"{}\", x);\n //! }\n //! ```\n //!\n //! [`map`]: trait.Iterator.html#method.map\n+//! [`for_each`]: trait.Iterator.html#method.for_each\n //!\n-//! The two most common ways to evaluate an iterator are to use a `for` loop\n-//! like this, or using the [`collect`] method to produce a new collection.\n+//! Another common way to evaluate an iterator is to use the [`collect`]\n+//! method to produce a new collection.\n //!\n //! [`collect`]: trait.Iterator.html#method.collect\n //!"}]}