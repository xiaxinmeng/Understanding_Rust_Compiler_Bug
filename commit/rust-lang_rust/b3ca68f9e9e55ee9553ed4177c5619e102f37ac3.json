{"sha": "b3ca68f9e9e55ee9553ed4177c5619e102f37ac3", "node_id": "C_kwDOAAsO6NoAKGIzY2E2OGY5ZTllNTVlZTk1NTNlZDQxNzdjNTYxOWUxMDJmMzdhYzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-29T06:57:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T06:57:34Z"}, "message": "Rollup merge of #102961 - reitermarkus:const-cstr-from-ptr, r=oli-obk\n\nMake `CStr::from_ptr` `const`.\n\nShould be included in https://github.com/rust-lang/rust/issues/101719.\n\ncc ``@WaffleLapkin``", "tree": {"sha": "0177120277db99da274fc53164b59ca832be0029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0177120277db99da274fc53164b59ca832be0029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ca68f9e9e55ee9553ed4177c5619e102f37ac3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXM7eCRBK7hj4Ov3rIwAAW/UIADsscSIphOS9rhQ73yKXKpmq\nr4UYU27SMuJdVoYejbzEql7D9D6LHy1v8773C/adRf08O2YxGJsBTT+d+yRqTiTl\nLYIno9IKE548A/QwYKH9tGwJjSsVyrXsJ9HD9pDoyaTyQbCac2FpUorbWe9D/mVL\nscTUMBRTDvieAz4oPS/oMy9lj9hujA8Ye/0bTdkmlrK+5mfCjKFfY/x3swYEldRQ\nIwg7o44+8YYESmPfWndxK2bPaWbSVjZemktrCgnZsmuqFzUMk0shNph9lZ190m5k\nY6M5R0/87jxrgg/3+/k3YEzW1OBnVzWSJ4F/WE+tW4v8AHDAECjXy6e8+ayE6+A=\n=aNzx\n-----END PGP SIGNATURE-----\n", "payload": "tree 0177120277db99da274fc53164b59ca832be0029\nparent 33b55ac39fa633d0983fad014469e1036669bf28\nparent b3f9277a17e455d51b1c8c88f56e224e37b4159c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667026654 +0200\ncommitter GitHub <noreply@github.com> 1667026654 +0200\n\nRollup merge of #102961 - reitermarkus:const-cstr-from-ptr, r=oli-obk\n\nMake `CStr::from_ptr` `const`.\n\nShould be included in https://github.com/rust-lang/rust/issues/101719.\n\ncc ``@WaffleLapkin``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ca68f9e9e55ee9553ed4177c5619e102f37ac3", "html_url": "https://github.com/rust-lang/rust/commit/b3ca68f9e9e55ee9553ed4177c5619e102f37ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ca68f9e9e55ee9553ed4177c5619e102f37ac3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b55ac39fa633d0983fad014469e1036669bf28", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b55ac39fa633d0983fad014469e1036669bf28", "html_url": "https://github.com/rust-lang/rust/commit/33b55ac39fa633d0983fad014469e1036669bf28"}, {"sha": "b3f9277a17e455d51b1c8c88f56e224e37b4159c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f9277a17e455d51b1c8c88f56e224e37b4159c", "html_url": "https://github.com/rust-lang/rust/commit/b3f9277a17e455d51b1c8c88f56e224e37b4159c"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "8923f548adf7234ce065ea8f80c0ea3675dee74b", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b3ca68f9e9e55ee9553ed4177c5619e102f37ac3/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ca68f9e9e55ee9553ed4177c5619e102f37ac3/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=b3ca68f9e9e55ee9553ed4177c5619e102f37ac3", "patch": "@@ -221,9 +221,7 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```ignore (extern-declaration)\n-    /// # fn main() {\n-    /// use std::ffi::CStr;\n-    /// use std::os::raw::c_char;\n+    /// use std::ffi::{c_char, CStr};\n     ///\n     /// extern \"C\" {\n     ///     fn my_string() -> *const c_char;\n@@ -233,14 +231,26 @@ impl CStr {\n     ///     let slice = CStr::from_ptr(my_string());\n     ///     println!(\"string returned: {}\", slice.to_str().unwrap());\n     /// }\n-    /// # }\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(const_cstr_methods)]\n+    ///\n+    /// use std::ffi::{c_char, CStr};\n+    ///\n+    /// const HELLO_PTR: *const c_char = {\n+    ///     const BYTES: &[u8] = b\"Hello, world!\\0\";\n+    ///     BYTES.as_ptr().cast()\n+    /// };\n+    /// const HELLO: &CStr = unsafe { CStr::from_ptr(HELLO_PTR) };\n     /// ```\n     ///\n     /// [valid]: core::ptr#safety\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n         // string with a NUL terminator of size less than `isize::MAX`, whose\n         // content remain valid and doesn't change for the lifetime of the\n@@ -252,13 +262,29 @@ impl CStr {\n         //\n         // The cast from c_char to u8 is ok because a c_char is always one byte.\n         unsafe {\n-            extern \"C\" {\n-                /// Provided by libc or compiler_builtins.\n-                fn strlen(s: *const c_char) -> usize;\n+            const fn strlen_ct(s: *const c_char) -> usize {\n+                let mut len = 0;\n+\n+                // SAFETY: Outer caller has provided a pointer to a valid C string.\n+                while unsafe { *s.add(len) } != 0 {\n+                    len += 1;\n+                }\n+\n+                len\n             }\n-            let len = strlen(ptr);\n-            let ptr = ptr as *const u8;\n-            CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+\n+            fn strlen_rt(s: *const c_char) -> usize {\n+                extern \"C\" {\n+                    /// Provided by libc or compiler_builtins.\n+                    fn strlen(s: *const c_char) -> usize;\n+                }\n+\n+                // SAFETY: Outer caller has provided a pointer to a valid C string.\n+                unsafe { strlen(s) }\n+            }\n+\n+            let len = intrinsics::const_eval_select((ptr,), strlen_ct, strlen_rt);\n+            Self::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr.cast(), len + 1))\n         }\n     }\n "}]}