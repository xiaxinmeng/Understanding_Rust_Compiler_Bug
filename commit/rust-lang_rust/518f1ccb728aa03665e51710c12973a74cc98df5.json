{"sha": "518f1ccb728aa03665e51710c12973a74cc98df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOGYxY2NiNzI4YWEwMzY2NWU1MTcxMGMxMjk3M2E3NGNjOThkZjU=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-08-31T00:43:17Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-08-31T00:43:17Z"}, "message": "Stabilize some Result methods as const\n\nStabilize the following methods of `Result` as const:\n - `is_ok`\n - `is_err`\n - `as_ref`\n\nPossible because of stabilization of #49146 (Allow if and match in constants).", "tree": {"sha": "09ddba686c715b43c2ea43f3c00df448da10c42b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ddba686c715b43c2ea43f3c00df448da10c42b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/518f1ccb728aa03665e51710c12973a74cc98df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/518f1ccb728aa03665e51710c12973a74cc98df5", "html_url": "https://github.com/rust-lang/rust/commit/518f1ccb728aa03665e51710c12973a74cc98df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/518f1ccb728aa03665e51710c12973a74cc98df5/comments", "author": null, "committer": null, "parents": [{"sha": "36b0d7e25769e88fec85e1d073196065a7f2d7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b0d7e25769e88fec85e1d073196065a7f2d7c4", "html_url": "https://github.com/rust-lang/rust/commit/36b0d7e25769e88fec85e1d073196065a7f2d7c4"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "290540829e03c7d02659250a5856b5bfdd67749b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/518f1ccb728aa03665e51710c12973a74cc98df5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f1ccb728aa03665e51710c12973a74cc98df5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=518f1ccb728aa03665e51710c12973a74cc98df5", "patch": "@@ -87,7 +87,6 @@\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_raw_ptr_comparison)]\n-#![feature(const_result)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]"}, {"sha": "5cec183c237d706bacca90dcdcb2fa854df5074d", "filename": "library/core/src/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/518f1ccb728aa03665e51710c12973a74cc98df5/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f1ccb728aa03665e51710c12973a74cc98df5/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=518f1ccb728aa03665e51710c12973a74cc98df5", "patch": "@@ -273,7 +273,7 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.is_ok(), false);\n     /// ```\n     #[must_use = \"if you intended to assert that this is ok, consider `.unwrap()` instead\"]\n-    #[rustc_const_unstable(feature = \"const_result\", issue = \"67520\")]\n+    #[rustc_const_stable(feature = \"const_result\", since = \"1.48.0\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_ok(&self) -> bool {\n@@ -294,7 +294,7 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.is_err(), true);\n     /// ```\n     #[must_use = \"if you intended to assert that this is err, consider `.unwrap_err()` instead\"]\n-    #[rustc_const_unstable(feature = \"const_result\", issue = \"67520\")]\n+    #[rustc_const_stable(feature = \"const_result\", since = \"1.48.0\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn is_err(&self) -> bool {\n@@ -438,7 +438,7 @@ impl<T, E> Result<T, E> {\n     /// assert_eq!(x.as_ref(), Err(&\"Error\"));\n     /// ```\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_result\", issue = \"67520\")]\n+    #[rustc_const_stable(feature = \"const_result\", since = \"1.48.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn as_ref(&self) -> Result<&T, &E> {\n         match *self {"}, {"sha": "e548d3e79ff8048f4ddb889abd511819e0107502", "filename": "src/test/ui/consts/const-result.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/518f1ccb728aa03665e51710c12973a74cc98df5/src%2Ftest%2Fui%2Fconsts%2Fconst-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518f1ccb728aa03665e51710c12973a74cc98df5/src%2Ftest%2Fui%2Fconsts%2Fconst-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-result.rs?ref=518f1ccb728aa03665e51710c12973a74cc98df5", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+\n+fn main() {\n+    const X: Result<i32, bool> = Ok(32);\n+    const Y: Result<&i32, &bool> = X.as_ref();\n+\n+    const IS_OK: bool = X.is_ok();\n+    assert!(IS_OK);\n+\n+    const IS_ERR: bool = Y.is_err();\n+    assert!(!IS_ERR)\n+}"}]}