{"sha": "1a0da6d4dad846568042f85ad7225b45b3275e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMGRhNmQ0ZGFkODQ2NTY4MDQyZjg1YWQ3MjI1YjQ1YjMyNzVlNDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T15:58:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T15:58:17Z"}, "message": "Use TypeAliasId in Ty, pt 2", "tree": {"sha": "3fe683f845d7b3b47f44337303dac2ff8312a832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe683f845d7b3b47f44337303dac2ff8312a832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a0da6d4dad846568042f85ad7225b45b3275e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0da6d4dad846568042f85ad7225b45b3275e49", "html_url": "https://github.com/rust-lang/rust/commit/1a0da6d4dad846568042f85ad7225b45b3275e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a0da6d4dad846568042f85ad7225b45b3275e49/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9", "html_url": "https://github.com/rust-lang/rust/commit/6d2ec8765d418b365dfaf472ab9b2b53b8eeafa9"}], "stats": {"total": 86, "additions": 40, "deletions": 46}, "files": [{"sha": "388530f31060015d2392fcec65cdfd7674041c01", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=1a0da6d4dad846568042f85ad7225b45b3275e49", "patch": "@@ -19,13 +19,13 @@ use std::{fmt, iter, mem};\n \n use hir_def::{\n     generics::GenericParams, AdtId, ContainerId, DefWithBodyId, GenericDefId, HasModule, Lookup,\n-    TypeAliasId,\n+    TraitId, TypeAliasId,\n };\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n     db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, FloatTy, IntTy, Mutability,\n-    Name, Trait, TypeAlias, Uncertain,\n+    Name, Trait, Uncertain,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -218,18 +218,19 @@ pub struct ApplicationTy {\n /// trait and all its parameters are fully known.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct ProjectionTy {\n-    pub associated_ty: TypeAlias,\n+    pub associated_ty: TypeAliasId,\n     pub parameters: Substs,\n }\n \n impl ProjectionTy {\n     pub fn trait_ref(&self, db: &impl HirDatabase) -> TraitRef {\n-        TraitRef {\n-            trait_: self\n-                .associated_ty\n-                .parent_trait(db)\n-                .expect(\"projection ty without parent trait\"),\n-            substs: self.parameters.clone(),\n+        TraitRef { trait_: self.trait_(db).into(), substs: self.parameters.clone() }\n+    }\n+\n+    fn trait_(&self, db: &impl HirDatabase) -> TraitId {\n+        match self.associated_ty.lookup(db).container {\n+            ContainerId::TraitId(it) => it,\n+            _ => panic!(\"projection ty without parent trait\"),\n         }\n     }\n }\n@@ -933,18 +934,15 @@ impl HirDisplay for ProjectionTy {\n             return write!(f, \"\u2026\");\n         }\n \n-        let trait_name = self\n-            .associated_ty\n-            .parent_trait(f.db)\n-            .and_then(|t| t.name(f.db))\n-            .unwrap_or_else(Name::missing);\n+        let trait_name =\n+            f.db.trait_data(self.trait_(f.db)).name.clone().unwrap_or_else(Name::missing);\n         write!(f, \"<{} as {}\", self.parameters[0].display(f.db), trait_name,)?;\n         if self.parameters.len() > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.parameters[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n-        write!(f, \">::{}\", self.associated_ty.name(f.db))?;\n+        write!(f, \">::{}\", f.db.type_alias_data(self.associated_ty).name)?;\n         Ok(())\n     }\n }\n@@ -1007,7 +1005,10 @@ impl HirDisplay for Ty {\n                                 write!(f, \"<\")?;\n                                 angle_open = true;\n                             }\n-                            let name = projection_pred.projection_ty.associated_ty.name(f.db);\n+                            let name =\n+                                f.db.type_alias_data(projection_pred.projection_ty.associated_ty)\n+                                    .name\n+                                    .clone();\n                             write!(f, \"{} = \", name)?;\n                             projection_pred.ty.hir_fmt(f)?;\n                         }\n@@ -1083,7 +1084,7 @@ impl HirDisplay for GenericPredicate {\n                 write!(\n                     f,\n                     \">::{} = {}\",\n-                    projection_pred.projection_ty.associated_ty.name(f.db),\n+                    f.db.type_alias_data(projection_pred.projection_ty.associated_ty).name,\n                     projection_pred.ty.display(f.db)\n                 )?;\n             }"}, {"sha": "9e7593b8b08db7e4c700d56213c77d072c6bd599", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=1a0da6d4dad846568042f85ad7225b45b3275e49", "patch": "@@ -69,7 +69,7 @@ fn deref_by_trait(\n \n     let projection = super::traits::ProjectionPredicate {\n         ty: Ty::Bound(0),\n-        projection_ty: super::ProjectionTy { associated_ty: target, parameters },\n+        projection_ty: super::ProjectionTy { associated_ty: target.id, parameters },\n     };\n \n     let obligation = super::Obligation::Projection(projection);"}, {"sha": "316cdc880093a88e0b498208ff3770ddb2191135", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=1a0da6d4dad846568042f85ad7225b45b3275e49", "patch": "@@ -101,7 +101,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         let projection = ProjectionPredicate {\n                             ty: pat_ty.clone(),\n                             projection_ty: ProjectionTy {\n-                                associated_ty: into_iter_item_alias,\n+                                associated_ty: into_iter_item_alias.id,\n                                 parameters: Substs::single(iterable_ty),\n                             },\n                         };\n@@ -283,7 +283,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         let projection = ProjectionPredicate {\n                             ty: ty.clone(),\n                             projection_ty: ProjectionTy {\n-                                associated_ty: future_future_output_alias,\n+                                associated_ty: future_future_output_alias.id,\n                                 parameters: Substs::single(inner_ty),\n                             },\n                         };\n@@ -302,7 +302,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         let projection = ProjectionPredicate {\n                             ty: ty.clone(),\n                             projection_ty: ProjectionTy {\n-                                associated_ty: ops_try_ok_alias,\n+                                associated_ty: ops_try_ok_alias.id,\n                                 parameters: Substs::single(inner_ty),\n                             },\n                         };"}, {"sha": "d7d4bb0d662b05703295a33aca683b3c7bfee3e4", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=1a0da6d4dad846568042f85ad7225b45b3275e49", "patch": "@@ -176,7 +176,7 @@ impl Ty {\n                         Some(associated_ty) => {\n                             // FIXME handle type parameters on the segment\n                             Ty::Projection(ProjectionTy {\n-                                associated_ty,\n+                                associated_ty: associated_ty.id,\n                                 parameters: trait_ref.substs,\n                             })\n                         }\n@@ -268,7 +268,10 @@ impl Ty {\n                     .fill_with_unknown()\n                     .build();\n                 // FIXME handle type parameters on the segment\n-                return Ty::Projection(ProjectionTy { associated_ty, parameters: substs });\n+                return Ty::Projection(ProjectionTy {\n+                    associated_ty: associated_ty.id,\n+                    parameters: substs,\n+                });\n             }\n         }\n         Ty::Unknown\n@@ -508,7 +511,7 @@ fn assoc_type_bindings_from_type_bound<'a>(\n             let associated_ty =\n                 match trait_ref.trait_.associated_type_by_name_including_super_traits(db, &name) {\n                     None => return GenericPredicate::Error,\n-                    Some(t) => t,\n+                    Some(t) => t.id,\n                 };\n             let projection_ty =\n                 ProjectionTy { associated_ty, parameters: trait_ref.substs.clone() };"}, {"sha": "06388a3ce287fe8da5981aca1ae9aa28c312b882", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a0da6d4dad846568042f85ad7225b45b3275e49/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=1a0da6d4dad846568042f85ad7225b45b3275e49", "patch": "@@ -9,7 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{lang_item::LangItemTarget, GenericDefId, TypeAliasId};\n+use hir_def::{lang_item::LangItemTarget, ContainerId, GenericDefId, Lookup, TypeAliasId};\n use hir_expand::name;\n \n use ra_db::salsa::{InternId, InternKey};\n@@ -203,18 +203,6 @@ impl ToChalk for Impl {\n     }\n }\n \n-impl ToChalk for TypeAlias {\n-    type Chalk = chalk_ir::TypeId;\n-\n-    fn to_chalk(self, _db: &impl HirDatabase) -> chalk_ir::TypeId {\n-        chalk_ir::TypeId(id_to_chalk(self.id))\n-    }\n-\n-    fn from_chalk(_db: &impl HirDatabase, type_alias_id: chalk_ir::TypeId) -> TypeAlias {\n-        TypeAlias { id: id_from_chalk(type_alias_id.0) }\n-    }\n-}\n-\n impl ToChalk for TypeAliasId {\n     type Chalk = chalk_ir::TypeId;\n \n@@ -516,21 +504,21 @@ pub(crate) fn associated_ty_data_query(\n     id: TypeId,\n ) -> Arc<AssociatedTyDatum<ChalkIr>> {\n     debug!(\"associated_ty_data {:?}\", id);\n-    let type_alias: TypeAlias = from_chalk(db, id);\n-    let trait_ = match type_alias.container(db) {\n-        Some(crate::Container::Trait(t)) => t,\n+    let type_alias: TypeAliasId = from_chalk(db, id);\n+    let trait_ = match type_alias.lookup(db).container {\n+        ContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n     };\n-    let generic_params = db.generic_params(type_alias.id.into());\n+    let generic_params = db.generic_params(type_alias.into());\n     let bound_data = chalk_rust_ir::AssociatedTyDatumBound {\n         // FIXME add bounds and where clauses\n         bounds: vec![],\n         where_clauses: vec![],\n     };\n     let datum = AssociatedTyDatum {\n-        trait_id: trait_.to_chalk(db),\n+        trait_id: Trait::from(trait_).to_chalk(db),\n         id,\n-        name: lalrpop_intern::intern(&type_alias.name(db).to_string()),\n+        name: lalrpop_intern::intern(&db.type_alias_data(type_alias).name.to_string()),\n         binders: make_binders(bound_data, generic_params.count_params_including_parent()),\n     };\n     Arc::new(datum)\n@@ -578,7 +566,7 @@ pub(crate) fn trait_datum_query(\n         .items(db)\n         .into_iter()\n         .filter_map(|trait_item| match trait_item {\n-            crate::AssocItem::TypeAlias(type_alias) => Some(type_alias),\n+            crate::AssocItem::TypeAlias(type_alias) => Some(type_alias.id),\n             _ => None,\n         })\n         .map(|type_alias| type_alias.to_chalk(db))\n@@ -797,7 +785,8 @@ fn type_alias_associated_ty_value(\n         .trait_;\n     let assoc_ty = trait_\n         .associated_type_by_name(db, &type_alias.name(db))\n-        .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n+        .expect(\"assoc ty value should not exist\") // validated when building the impl data as well\n+        .id;\n     let generic_params = db.generic_params(impl_block.id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let ty = db.type_for_def(type_alias.into(), crate::ty::Namespace::Types).subst(&bound_vars);\n@@ -832,7 +821,8 @@ fn closure_fn_trait_output_assoc_ty_value(\n \n     let output_ty_id = fn_once_trait\n         .associated_type_by_name(db, &name::OUTPUT_TYPE)\n-        .expect(\"assoc ty value should not exist\");\n+        .expect(\"assoc ty value should not exist\")\n+        .id;\n \n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: output_ty.to_chalk(db) };\n "}]}