{"sha": "8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "node_id": "C_kwDOAAsO6NoAKDhhY2ZiYzNiMzMzMmVkN2Y1MzY0YmMzOGM5NDdjNmMwODNlZjk5ZGY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T16:15:37Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-25T18:26:33Z"}, "message": "Update all tests", "tree": {"sha": "7f8682aa90f610a183d0c0cccbdf49d5fef8cd80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f8682aa90f610a183d0c0cccbdf49d5fef8cd80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "html_url": "https://github.com/rust-lang/rust/commit/8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64a1c46c67c58e2da05c67ef1b2d73dd756549c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64a1c46c67c58e2da05c67ef1b2d73dd756549c", "html_url": "https://github.com/rust-lang/rust/commit/b64a1c46c67c58e2da05c67ef1b2d73dd756549c"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "84f4de93461e7aec452e0edb7f07e2be7313b3c4", "filename": "tests/compile-fail/intrinsics/copy_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let mut data = [0u16; 8];\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n-    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment ALIGN, but alignment ALIGN is required\n+    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n }"}, {"sha": "417a03bb0335b55e1eceb9ce3a56ed5b7ded8c52", "filename": "tests/compile-fail/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -3,6 +3,6 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     let _x = unsafe {\n-        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to ALLOC which is read-only\n+        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to alloc1 which is read-only\n     };\n }"}, {"sha": "91d9ec475b1fefca737d72f41752131490f305cb", "filename": "tests/compile-fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -16,6 +16,6 @@ fn main() {\n         // Overwrite the data part of `ptr` so it points to `buf`.\n         unsafe { (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8); }\n         // Re-borrow that. This should be UB.\n-        let _ptr = &*ptr; //~ERROR alignment ALIGN is required\n+        let _ptr = &*ptr; //~ERROR alignment 256 is required\n     }\n }"}, {"sha": "9872a493c02a9b6c68c0f1a19fe63e9de576514f", "filename": "tests/compile-fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     // Manually make sure the pointer is properly aligned.\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe { *u16_ptr = 2; } //~ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+    unsafe { *u16_ptr = 2; } //~ERROR memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "b376859d22c11ec97f918b1085ae378973c8517d", "filename": "tests/compile-fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -16,6 +16,6 @@ fn main() {\n             y: 99,\n         };\n         let p = &foo.x;\n-        let i = *p; //~ERROR alignment ALIGN is required\n+        let i = *p; //~ERROR alignment 4 is required\n     }\n }"}, {"sha": "1d72e5170b7c2d99f770f88f206dfc7af2fbaff9", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-        let _x = unsafe { *x }; //~ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+        let _x = unsafe { *x }; //~ERROR memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "49612e2b8a0964087d7a6f3e1233218fd362fdce", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n     // This must fail because alignment is violated: the offset is not sufficiently aligned.\n     // Also make the offset not a power of 2, that used to ICE.\n-    let _x = unsafe { *x }; //~ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+    let _x = unsafe { *x }; //~ERROR memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "e33f3c8598f332b1f0f3eb046c02dafeb897b34b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -8,6 +8,6 @@ fn main() {\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n         // The deref is UB even if we just put the result into a raw pointer.\n-        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "27403c11abc7466281a4780642f74e9cbcc6fc4d", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         let x = i as u8;\n         let x = &x as *const _ as *const [u32; 0];\n         // This must fail because alignment is violated. Test specifically for loading ZST.\n-        let _x = unsafe { *x }; //~ERROR alignment ALIGN is required\n+        let _x = unsafe { *x }; //~ERROR alignment 4 is required\n     }\n }"}, {"sha": "78425cde4a8aae51fa8b29220193ddc9ae905d4f", "filename": "tests/compile-fail/validity/dangling_ref1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -3,5 +3,5 @@\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }"}, {"sha": "079823f894a86cc9ef7187720a12c4cc133a6dc3", "filename": "tests/compile-fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acfbc3b3332ed7f5364bc38c947c6c083ef99df/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs?ref=8acfbc3b3332ed7f5364bc38c947c6c083ef99df", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered $HEX, but expected a valid unicode scalar value\n+    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 0xffffffff, but expected a valid unicode scalar value\n         'a' => {true},\n         'b' => {false},\n         _ => {true},"}]}