{"sha": "45caff88d1dabd71aec9431c07c0b4a77b20f203", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Y2FmZjg4ZDFkYWJkNzFhZWM5NDMxYzA3YzBiNGE3N2IyMGYyMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-11T20:41:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-11T20:41:36Z"}, "message": "Auto merge of #45152 - Binero:master, r=dtolnay\n\nAddressed issues raised in #44286. (`OccupiedEntry::replace_entry`)\n\nThis commit renames the `replace` function to `replace_entry`, and\ncreates a seperate `replace_key` function for `OccupiedEntry`. The\noriginal `replace` function did not solve the use-case where the\nkey needed to be replaced, but not the value. Documentation and\nnaming has also been updated to better reflect what the original\nreplace function does.", "tree": {"sha": "feef49bf7cd145e2c8fe2971ccefb0fef1837608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feef49bf7cd145e2c8fe2971ccefb0fef1837608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45caff88d1dabd71aec9431c07c0b4a77b20f203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45caff88d1dabd71aec9431c07c0b4a77b20f203", "html_url": "https://github.com/rust-lang/rust/commit/45caff88d1dabd71aec9431c07c0b4a77b20f203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45caff88d1dabd71aec9431c07c0b4a77b20f203/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bb4d1e758423dd10b517628401c1b2c2437715", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bb4d1e758423dd10b517628401c1b2c2437715", "html_url": "https://github.com/rust-lang/rust/commit/24bb4d1e758423dd10b517628401c1b2c2437715"}, {"sha": "0fb37fc67d0d0278022f355bed2aac0c2b772835", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb37fc67d0d0278022f355bed2aac0c2b772835", "html_url": "https://github.com/rust-lang/rust/commit/0fb37fc67d0d0278022f355bed2aac0c2b772835"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "7a79a472d58d9b8701aa8546c075651cebec9896", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/45caff88d1dabd71aec9431c07c0b4a77b20f203/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45caff88d1dabd71aec9431c07c0b4a77b20f203/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=45caff88d1dabd71aec9431c07c0b4a77b20f203", "patch": "@@ -2239,35 +2239,67 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.key.take()\n     }\n \n-    /// Replaces the entry, returning the old key and value.\n+    /// Replaces the entry, returning the old key and value. The new key in the hash map will be\n+    /// the key used to create this entry.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(map_entry_replace)]\n-    /// use std::collections::HashMap;\n-    /// use std::collections::hash_map::Entry;\n+    /// use std::collections::hash_map::{Entry, HashMap};\n+    /// use std::rc::Rc;\n+    ///\n+    /// let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n+    /// map.insert(Rc::new(\"Stringthing\".to_string()), 15);\n     ///\n-    /// let mut map: HashMap<String, u32> = HashMap::new();\n-    /// map.insert(\"poneyland\".to_string(), 15);\n+    /// let my_key = Rc::new(\"Stringthing\".to_string());\n     ///\n-    /// if let Entry::Occupied(entry) = map.entry(\"poneyland\".to_string()) {\n-    ///     let (old_key, old_value): (String, u32) = entry.replace(16);\n-    ///     assert_eq!(old_key, \"poneyland\");\n-    ///     assert_eq!(old_value, 15);\n+    /// if let Entry::Occupied(entry) = map.entry(my_key) {\n+    ///     // Also replace the key with a handle to our other key.\n+    ///     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);\n     /// }\n     ///\n-    /// assert_eq!(map.get(\"poneyland\"), Some(&16));\n     /// ```\n     #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]\n-    pub fn replace(mut self, value: V) -> (K, V) {\n+    pub fn replace_entry(mut self, value: V) -> (K, V) {\n         let (old_key, old_value) = self.elem.read_mut();\n \n         let old_key = mem::replace(old_key, self.key.unwrap());\n         let old_value = mem::replace(old_value, value);\n \n         (old_key, old_value)\n     }\n+\n+    /// Replaces the key in the hash map with the key used to create this entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(map_entry_replace)]\n+    /// use std::collections::hash_map::{Entry, HashMap};\n+    /// use std::rc::Rc;\n+    ///\n+    /// let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n+    /// let mut known_strings: Vec<Rc<String>> = Vec::new();\n+    ///\n+    /// // Initialise known strings, run program, etc.\n+    ///\n+    /// reclaim_memory(&mut map, &known_strings);\n+    ///\n+    /// fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {\n+    ///     for s in known_strings {\n+    ///         if let Entry::Occupied(entry) = map.entry(s.clone()) {\n+    ///             // Replaces the entry's key with our version of it in `known_strings`.\n+    ///             entry.replace_key();\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"map_entry_replace\", issue = \"44286\")]\n+    pub fn replace_key(mut self) -> K {\n+        let (old_key, _) = self.elem.read_mut();\n+        mem::replace(old_key, self.key.unwrap())\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {"}]}