{"sha": "a119352adab65d0cab25c13ae0fd7676bed7100f", "node_id": "C_kwDOAAsO6NoAKGExMTkzNTJhZGFiNjVkMGNhYjI1YzEzYWUwZmQ3Njc2YmVkNzEwMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T12:07:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-13T12:07:28Z"}, "message": "Auto merge of #13937 - danieleades:recursive-display, r=lnicola\n\nremove recursive 'Display' implementations\n\ncloses #13920\n\n`@lnicola` is this the solution you were looking for?\n\nhaving explicitly unimplemented methods seems preferable to apparently implemented methods that can't be called", "tree": {"sha": "51ec72e918728a3c183d8cae21ee897f3efdc004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ec72e918728a3c183d8cae21ee897f3efdc004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a119352adab65d0cab25c13ae0fd7676bed7100f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a119352adab65d0cab25c13ae0fd7676bed7100f", "html_url": "https://github.com/rust-lang/rust/commit/a119352adab65d0cab25c13ae0fd7676bed7100f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a119352adab65d0cab25c13ae0fd7676bed7100f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15fb082cc1d66c2934097b1f5ec1cd9e8b75edcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fb082cc1d66c2934097b1f5ec1cd9e8b75edcb", "html_url": "https://github.com/rust-lang/rust/commit/15fb082cc1d66c2934097b1f5ec1cd9e8b75edcb"}, {"sha": "c4b36b64aae0d5bace5d19e0fbd64d1db9114bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b36b64aae0d5bace5d19e0fbd64d1db9114bf9", "html_url": "https://github.com/rust-lang/rust/commit/c4b36b64aae0d5bace5d19e0fbd64d1db9114bf9"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "a94b909941d962ad164b2ef98540ec9eecff7741", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/proc_macro/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a119352adab65d0cab25c13ae0fd7676bed7100f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a119352adab65d0cab25c13ae0fd7676bed7100f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fmod.rs?ref=a119352adab65d0cab25c13ae0fd7676bed7100f", "patch": "@@ -123,8 +123,8 @@ impl FromStr for TokenStream {\n /// into the same token stream (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters and negative numeric literals.\n impl fmt::Display for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -522,8 +522,8 @@ impl From<Literal> for TokenTree {\n /// into the same token tree (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters and negative numeric literals.\n impl fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -619,8 +619,8 @@ impl Group {\n /// into the same group (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters.\n impl fmt::Display for Group {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -693,8 +693,8 @@ impl Punct {\n /// Prints the punctuation character as a string that should be losslessly convertible\n /// back into the same character.\n impl fmt::Display for Punct {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -771,8 +771,8 @@ impl Ident {\n /// Prints the identifier as a string that should be losslessly convertible\n /// back into the same identifier.\n impl fmt::Display for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -1014,8 +1014,8 @@ impl FromStr for Literal {\n /// Prints the literal as a string that should be losslessly convertible\n /// back into the same literal (except for possible rounding for floating point literals).\n impl fmt::Display for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n "}, {"sha": "89bd10da5e4863392935b1d96517ebd39db5608b", "filename": "crates/proc-macro-srv/src/abis/abi_1_63/proc_macro/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a119352adab65d0cab25c13ae0fd7676bed7100f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fproc_macro%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a119352adab65d0cab25c13ae0fd7676bed7100f/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fproc_macro%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fproc_macro%2Fmod.rs?ref=a119352adab65d0cab25c13ae0fd7676bed7100f", "patch": "@@ -124,8 +124,8 @@ impl FromStr for TokenStream {\n /// into the same token stream (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters and negative numeric literals.\n impl fmt::Display for TokenStream {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -572,8 +572,8 @@ impl From<Literal> for TokenTree {\n /// into the same token tree (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters and negative numeric literals.\n impl fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -669,8 +669,8 @@ impl Group {\n /// into the same group (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters.\n impl fmt::Display for Group {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -743,8 +743,8 @@ impl Punct {\n /// Prints the punctuation character as a string that should be losslessly convertible\n /// back into the same character.\n impl fmt::Display for Punct {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -821,8 +821,8 @@ impl Ident {\n /// Prints the identifier as a string that should be losslessly convertible\n /// back into the same identifier.\n impl fmt::Display for Ident {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n \n@@ -1064,8 +1064,8 @@ impl FromStr for Literal {\n /// Prints the literal as a string that should be losslessly convertible\n /// back into the same literal (except for possible rounding for floating point literals).\n impl fmt::Display for Literal {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&self.to_string())\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unimplemented!()\n     }\n }\n "}]}