{"sha": "6d6c90443182e18fb23c08cd2d97dae701d7b453", "node_id": "C_kwDOAAsO6NoAKDZkNmM5MDQ0MzE4MmUxOGZiMjNjMDhjZDJkOTdkYWU3MDFkN2I0NTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T17:40:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T18:25:07Z"}, "message": "Make async removal span more resilient to macro expansions", "tree": {"sha": "ed836882db2a4dee0b689ffb6e9a9b7928054077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed836882db2a4dee0b689ffb6e9a9b7928054077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d6c90443182e18fb23c08cd2d97dae701d7b453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c90443182e18fb23c08cd2d97dae701d7b453", "html_url": "https://github.com/rust-lang/rust/commit/6d6c90443182e18fb23c08cd2d97dae701d7b453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c90443182e18fb23c08cd2d97dae701d7b453/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4200276f2679e2f1be8286ca2b3d0c91bb81efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4200276f2679e2f1be8286ca2b3d0c91bb81efe", "html_url": "https://github.com/rust-lang/rust/commit/d4200276f2679e2f1be8286ca2b3d0c91bb81efe"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "72dc52a632992dff29d57cbb7cb9c6ad1af0d090", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -108,7 +108,7 @@ pub struct BaseExpressionDoubleDot {\n pub struct AwaitOnlyInAsyncFnAndBlocks {\n     #[primary_span]\n     #[label]\n-    pub dot_await_span: Span,\n+    pub await_kw_span: Span,\n     #[label(ast_lowering_this_not_async)]\n     pub item_span: Option<Span>,\n }"}, {"sha": "5e0ab80c6ac9fcde3050cdfce7214850f6134f1f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -185,15 +185,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::AsyncGeneratorKind::Block,\n                     |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n                 ),\n-                ExprKind::Await(expr, await_kw_span) => {\n-                    let await_kw_span = if expr.span.hi() < await_kw_span.hi() {\n-                        *await_kw_span\n-                    } else {\n-                        // this is a recovered `await expr`\n-                        e.span\n-                    };\n-                    self.lower_expr_await(await_kw_span, expr)\n-                }\n+                ExprKind::Await(expr, await_kw_span) => self.lower_expr_await(*await_kw_span, expr),\n                 ExprKind::Closure(box Closure {\n                     binder,\n                     capture_clause,\n@@ -710,7 +702,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n                 self.tcx.sess.emit_err(AwaitOnlyInAsyncFnAndBlocks {\n-                    dot_await_span: await_kw_span,\n+                    await_kw_span,\n                     item_span: self.current_item,\n                 });\n             }"}, {"sha": "595f6e0b9271bfd5755a8af57721f35b0ad96743", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -1592,23 +1592,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // could also check if it is an fn call (very likely) and suggest changing *that*, if\n             // it is from the local crate.\n \n-            if let hir::Node::Expr(parent_expr) = hir.get_parent(*hir_id)\n-                // Peel off the DesugaringKind from the span\n-                && let Some(desugar_parent_span) = parent_expr.span.parent_callsite()\n+            // use nth(1) to skip one layer of desugaring from `IntoIter::into_iter`\n+            if let Some((_, hir::Node::Expr(await_expr))) = hir.parent_iter(*hir_id).nth(1)\n+                && let Some(expr_span) = expr.span.find_ancestor_inside(await_expr.span)\n             {\n                 let removal_span = self.tcx\n                     .sess\n                     .source_map()\n-                    .span_extend_while(expr.span, char::is_whitespace)\n-                    .unwrap_or(expr.span)\n+                    .span_extend_while(expr_span, char::is_whitespace)\n+                    .unwrap_or(expr_span)\n                     .shrink_to_hi()\n-                    .to(desugar_parent_span);\n+                    .to(await_expr.span.shrink_to_hi());\n                 err.span_suggestion(\n                     removal_span,\n                     \"remove the `.await`\",\n                     \"\",\n                     Applicability::MachineApplicable,\n                 );\n+            } else {\n+                err.span_label(obligation.cause.span, \"remove the `.await`\");\n             }\n             // FIXME: account for associated `async fn`s.\n             if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {"}, {"sha": "a9d1477b9fe5d851f5cb066c50f329062dd5d129", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -12,7 +12,7 @@\n         _1: GeneratorSavedTy {\n             ty: impl std::future::Future<Output = ()>,\n             source_info: SourceInfo {\n-                span: $DIR/async_await.rs:16:8: 16:14 (#10),\n+                span: $DIR/async_await.rs:16:9: 16:14 (#10),\n                 scope: scope[0],\n             },\n             ignore_for_traits: false,"}, {"sha": "7b03e56662a743b5ddcf6cbf63cdf6fb135d0d6c", "filename": "tests/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -143,23 +143,23 @@ error[E0728]: `await` is only allowed inside `async` functions and blocks\n LL | fn foo9() -> Result<(), ()> {\n    |    ---- this is not `async`\n LL |     let _ = await bar();\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |             ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/incorrect-syntax-suggestions.rs:57:13\n    |\n LL | fn foo10() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await? bar();\n-   |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |             ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/incorrect-syntax-suggestions.rs:66:14\n    |\n LL | fn foo12() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = (await bar())?;\n-   |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |              ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/incorrect-syntax-suggestions.rs:71:19\n@@ -215,15 +215,15 @@ error[E0728]: `await` is only allowed inside `async` functions and blocks\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                 ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/incorrect-syntax-suggestions.rs:121:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                 ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to 33 previous errors\n "}, {"sha": "cd1e28714322a57c302f2d8542c0f1648ac9b4b6", "filename": "tests/ui/async-await/unnecessary-await.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fui%2Fasync-await%2Funnecessary-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fui%2Fasync-await%2Funnecessary-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funnecessary-await.rs?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -11,4 +11,24 @@ async fn baz() -> std::io::Result<()> {\n     std::io::Result::Ok(())\n }\n \n+macro_rules! e {\n+    () => {\n+        ()\n+    };\n+}\n+\n+macro_rules! f {\n+    ($expr:expr) => {\n+        $expr.await\n+        //~^ ERROR `()` is not a future\n+    };\n+}\n+\n+async fn with_macros() {\n+    e!().await;\n+    //~^ ERROR `()` is not a future\n+\n+    f!(());\n+}\n+\n fn main() {}"}, {"sha": "9a2a035b2dd0882017e1947a9053e3a2d06ab168", "filename": "tests/ui/async-await/unnecessary-await.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d6c90443182e18fb23c08cd2d97dae701d7b453/tests%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=6d6c90443182e18fb23c08cd2d97dae701d7b453", "patch": "@@ -19,6 +19,36 @@ help: alternatively, consider making `fn boo` asynchronous\n LL | async fn boo() {}\n    | +++++\n \n-error: aborting due to previous error\n+error[E0277]: `()` is not a future\n+  --> $DIR/unnecessary-await.rs:28:10\n+   |\n+LL |     e!().await;\n+   |         -^^^^^\n+   |         ||\n+   |         |`()` is not a future\n+   |         help: remove the `.await`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required for `()` to implement `IntoFuture`\n+\n+error[E0277]: `()` is not a future\n+  --> $DIR/unnecessary-await.rs:22:15\n+   |\n+LL |         $expr.await\n+   |               ^^^^^\n+   |               |\n+   |               `()` is not a future\n+   |               remove the `.await`\n+...\n+LL |     f!(());\n+   |     ------ in this macro invocation\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required for `()` to implement `IntoFuture`\n+   = note: this error originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}