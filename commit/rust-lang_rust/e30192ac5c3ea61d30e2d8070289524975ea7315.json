{"sha": "e30192ac5c3ea61d30e2d8070289524975ea7315", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMDE5MmFjNWMzZWE2MWQzMGUyZDgwNzAyODk1MjQ5NzVlYTczMTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-27T18:08:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T18:08:21Z"}, "message": "Rollup merge of #85730 - Smittyvb:iter-min-max-floats, r=m-ou-se\n\nMention workaround for floats in Iterator::{min, max}\n\n`Iterator::{min, max}` can't be used with iterators of floats due to NaN issues. This suggests a workaround in the documentation of those functions.", "tree": {"sha": "7cc34d9b88f70043634527dd50aa9505dde0ff05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cc34d9b88f70043634527dd50aa9505dde0ff05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e30192ac5c3ea61d30e2d8070289524975ea7315", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgr+AWCRBK7hj4Ov3rIwAAltIIAG1zMINDQilH4dFaTlJeXMOS\nsXYkiMAAuVkljKx+KDph5yeyPo42whkkQdYCeVpg7LU8aPQCAbENpRoU5+vBPo2X\nRDEpUuIjNy0od+Au21OFcxpe3mgfKuXv05Y6U4FdGZjE5KUZrKcbOvOvgYahwlPD\nb+tMvuXlyRBQO9qrsNmzYDaNDhgk4kgh1LAm0BEBPvwCJe7lnx12C7NbHGtgsY0R\nbyHkqAjFMMux4rwWHG8jgCT8A9bDQFYe+KEtBEd/fttI60cQisvwhrBu5VFEAkHk\n9ryUkXfiM6Wtuh5f2qUlHzZ+X1HjymHowygIqbN3jmBihje9PXYDnWrj/nSzGNo=\n=uHul\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cc34d9b88f70043634527dd50aa9505dde0ff05\nparent 6ac83e1808fd860c8c1279cc6547e6b248bc4b47\nparent b00f6fc8a16656391f9014cda73b24712eaf2ccb\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1622138901 +0200\ncommitter GitHub <noreply@github.com> 1622138901 +0200\n\nRollup merge of #85730 - Smittyvb:iter-min-max-floats, r=m-ou-se\n\nMention workaround for floats in Iterator::{min, max}\n\n`Iterator::{min, max}` can't be used with iterators of floats due to NaN issues. This suggests a workaround in the documentation of those functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e30192ac5c3ea61d30e2d8070289524975ea7315", "html_url": "https://github.com/rust-lang/rust/commit/e30192ac5c3ea61d30e2d8070289524975ea7315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e30192ac5c3ea61d30e2d8070289524975ea7315/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac83e1808fd860c8c1279cc6547e6b248bc4b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac83e1808fd860c8c1279cc6547e6b248bc4b47", "html_url": "https://github.com/rust-lang/rust/commit/6ac83e1808fd860c8c1279cc6547e6b248bc4b47"}, {"sha": "b00f6fc8a16656391f9014cda73b24712eaf2ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00f6fc8a16656391f9014cda73b24712eaf2ccb", "html_url": "https://github.com/rust-lang/rust/commit/b00f6fc8a16656391f9014cda73b24712eaf2ccb"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "96b924f6e2ad45b232a3d5ffa3bcec3bcbda29c0", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e30192ac5c3ea61d30e2d8070289524975ea7315/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e30192ac5c3ea61d30e2d8070289524975ea7315/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e30192ac5c3ea61d30e2d8070289524975ea7315", "patch": "@@ -2568,6 +2568,18 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n+    /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\n+    /// incomparable. You can work around this by using [`Iterator::reduce`]:\n+    /// ```\n+    /// assert_eq!(\n+    ///     vec![2.4, f32::NAN, 1.3]\n+    ///         .into_iter()\n+    ///         .reduce(f32::max)\n+    ///         .unwrap(),\n+    ///     2.4\n+    /// );\n+    /// ```\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2591,8 +2603,20 @@ pub trait Iterator {\n \n     /// Returns the minimum element of an iterator.\n     ///\n-    /// If several elements are equally minimum, the first element is\n-    /// returned. If the iterator is empty, [`None`] is returned.\n+    /// If several elements are equally minimum, the first element is returned.\n+    /// If the iterator is empty, [`None`] is returned.\n+    ///\n+    /// Note that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\n+    /// incomparable. You can work around this by using [`Iterator::reduce`]:\n+    /// ```\n+    /// assert_eq!(\n+    ///     vec![2.4, f32::NAN, 1.3]\n+    ///         .into_iter()\n+    ///         .reduce(f32::min)\n+    ///         .unwrap(),\n+    ///     1.3\n+    /// );\n+    /// ```\n     ///\n     /// # Examples\n     ///"}]}