{"sha": "1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODQ0ZWJiOGY4ZjNlYzJmZWQwOWEyMzU5NzIwN2QzNWFlMWEyOGU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-05T16:48:02Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:58Z"}, "message": "Move tool_cmd to tool.rs", "tree": {"sha": "ac468499a893bd53a5efca7ada49216c12679e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac468499a893bd53a5efca7ada49216c12679e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "html_url": "https://github.com/rust-lang/rust/commit/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60388303c770a6e9409f3afa75d31d9125f871e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60388303c770a6e9409f3afa75d31d9125f871e3", "html_url": "https://github.com/rust-lang/rust/commit/60388303c770a6e9409f3afa75d31d9125f871e3"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "c1e42c67128c5af49009da6a02fd23ba48fdc090", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "patch": "@@ -549,45 +549,6 @@ impl Build {\n         rustdoc\n     }\n \n-    /// Get a `Command` which is ready to run `tool` in `stage` built for\n-    /// `host`.\n-    fn tool_cmd(&self, compiler: Compiler, tool: &str) -> Command {\n-        let mut cmd = Command::new(self.tool(compiler, tool));\n-        self.prepare_tool_cmd(compiler, &mut cmd);\n-        cmd\n-    }\n-\n-    /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n-    ///\n-    /// Notably this munges the dynamic library lookup path to point to the\n-    /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, cmd: &mut Command) {\n-        let host = compiler.host;\n-        let mut paths = vec![\n-            self.sysroot_libdir(compiler, compiler.host),\n-            self.cargo_out(compiler, Mode::Tool, host).join(\"deps\"),\n-        ];\n-\n-        // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make\n-        // mode) and that C compiler may need some extra PATH modification. Do\n-        // so here.\n-        if compiler.host.contains(\"msvc\") {\n-            let curpaths = env::var_os(\"PATH\").unwrap_or(OsString::new());\n-            let curpaths = env::split_paths(&curpaths).collect::<Vec<_>>();\n-            for &(ref k, ref v) in self.cc[compiler.host].0.env() {\n-                if k != \"PATH\" {\n-                    continue\n-                }\n-                for path in env::split_paths(v) {\n-                    if !curpaths.contains(&path) {\n-                        paths.push(path);\n-                    }\n-                }\n-            }\n-        }\n-        add_lib_path(paths, cmd);\n-    }\n-\n     /// Get the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self) -> String {"}, {"sha": "f13f9e7d07ceefba879b449fcd22681fd4caca5e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a844ebb8f8f3ec2fed09a23597207d35ae1a28e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1a844ebb8f8f3ec2fed09a23597207d35ae1a28e", "patch": "@@ -369,3 +369,44 @@ impl<'a> Step<'a> for Rls<'a> {\n         })\n     }\n }\n+\n+impl<'a> Builder<'a> {\n+    /// Get a `Command` which is ready to run `tool` in `stage` built for\n+    /// `host`.\n+    fn tool_cmd(&self, compiler: Compiler, tool: &str) -> Command {\n+        let mut cmd = Command::new(self.tool(compiler, tool));\n+        self.prepare_tool_cmd(compiler, &mut cmd);\n+        cmd\n+    }\n+\n+    /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n+    ///\n+    /// Notably this munges the dynamic library lookup path to point to the\n+    /// right location to run `compiler`.\n+    fn prepare_tool_cmd(&self, compiler: Compiler, cmd: &mut Command) {\n+        let host = compiler.host;\n+        let mut paths = vec![\n+            self.sysroot_libdir(compiler, compiler.host),\n+            self.cargo_out(compiler, Mode::Tool, host).join(\"deps\"),\n+        ];\n+\n+        // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make\n+        // mode) and that C compiler may need some extra PATH modification. Do\n+        // so here.\n+        if compiler.host.contains(\"msvc\") {\n+            let curpaths = env::var_os(\"PATH\").unwrap_or(OsString::new());\n+            let curpaths = env::split_paths(&curpaths).collect::<Vec<_>>();\n+            for &(ref k, ref v) in self.cc[compiler.host].0.env() {\n+                if k != \"PATH\" {\n+                    continue\n+                }\n+                for path in env::split_paths(v) {\n+                    if !curpaths.contains(&path) {\n+                        paths.push(path);\n+                    }\n+                }\n+            }\n+        }\n+        add_lib_path(paths, cmd);\n+    }\n+}"}]}