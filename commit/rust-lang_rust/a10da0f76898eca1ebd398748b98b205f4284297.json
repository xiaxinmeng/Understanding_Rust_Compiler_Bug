{"sha": "a10da0f76898eca1ebd398748b98b205f4284297", "node_id": "C_kwDOAAsO6NoAKGExMGRhMGY3Njg5OGVjYTFlYmQzOTg3NDhiOThiMjA1ZjQyODQyOTc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-10T18:29:46Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-10T18:29:46Z"}, "message": "Split non-compile parts of codegen_fn out into a separate function\n\nThe new codegen_and_compile_fn function only calls codegen_fn and then\ncompile_fn. This makes it possible for both parts to be called\nseparately by the driver.", "tree": {"sha": "1e5283f2135f3d3a2ec65af30a34ef5442782ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e5283f2135f3d3a2ec65af30a34ef5442782ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a10da0f76898eca1ebd398748b98b205f4284297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a10da0f76898eca1ebd398748b98b205f4284297", "html_url": "https://github.com/rust-lang/rust/commit/a10da0f76898eca1ebd398748b98b205f4284297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a10da0f76898eca1ebd398748b98b205f4284297/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7443a61ab2581ec9cdd3be08807ce599a5d56b8", "html_url": "https://github.com/rust-lang/rust/commit/a7443a61ab2581ec9cdd3be08807ce599a5d56b8"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "8e3f905166b9387d4a8d13f6a0126722a673627e", "filename": "src/base.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a10da0f76898eca1ebd398748b98b205f4284297/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10da0f76898eca1ebd398748b98b205f4284297/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a10da0f76898eca1ebd398748b98b205f4284297", "patch": "@@ -5,24 +5,47 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::SymbolName;\n \n use indexmap::IndexSet;\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n use crate::pretty_clif::CommentWriter;\n \n-pub(crate) fn codegen_fn<'tcx>(\n+struct CodegenedFunction<'tcx> {\n+    instance: Instance<'tcx>,\n+    symbol_name: SymbolName<'tcx>,\n+    func_id: FuncId,\n+    func: Function,\n+    clif_comments: CommentWriter,\n+    source_info_set: IndexSet<SourceInfo>,\n+    local_map: IndexVec<mir::Local, CPlace<'tcx>>,\n+}\n+\n+pub(crate) fn codegen_and_compile_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx>,\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n     let tcx = cx.tcx;\n-\n     let _inst_guard =\n         crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n+\n+    let codegened_func = codegen_fn(cx, module, instance);\n+\n+    compile_fn(cx, module, codegened_func);\n+}\n+\n+fn codegen_fn<'tcx>(\n+    cx: &mut crate::CodegenCx<'tcx>,\n+    module: &mut dyn Module,\n+    instance: Instance<'tcx>,\n+) -> CodegenedFunction<'tcx> {\n     debug_assert!(!instance.substs.needs_infer());\n \n+    let tcx = cx.tcx;\n+\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n@@ -104,36 +127,30 @@ pub(crate) fn codegen_fn<'tcx>(\n     // Verify function\n     verify_func(tcx, &clif_comments, &func);\n \n-    compile_fn(\n-        cx,\n-        module,\n+    CodegenedFunction {\n         instance,\n-        symbol_name.name,\n+        symbol_name,\n         func_id,\n         func,\n         clif_comments,\n         source_info_set,\n         local_map,\n-    );\n+    }\n }\n \n fn compile_fn<'tcx>(\n     cx: &mut crate::CodegenCx<'tcx>,\n     module: &mut dyn Module,\n-    instance: Instance<'tcx>,\n-    symbol_name: &str,\n-    func_id: FuncId,\n-    func: Function,\n-    mut clif_comments: CommentWriter,\n-    source_info_set: IndexSet<SourceInfo>,\n-    local_map: IndexVec<mir::Local, CPlace<'tcx>>,\n+    codegened_func: CodegenedFunction<'tcx>,\n ) {\n     let tcx = cx.tcx;\n \n+    let mut clif_comments = codegened_func.clif_comments;\n+\n     // Store function in context\n     let context = &mut cx.cached_context;\n     context.clear();\n-    context.func = func;\n+    context.func = codegened_func.func;\n \n     // If the return block is not reachable, then the SSA builder may have inserted an `iconst.i128`\n     // instruction, which doesn't have an encoding.\n@@ -150,7 +167,7 @@ fn compile_fn<'tcx>(\n         crate::optimize::optimize_function(\n             tcx,\n             module.isa(),\n-            instance,\n+            codegened_func.instance,\n             context,\n             &mut clif_comments,\n         );\n@@ -186,23 +203,23 @@ fn compile_fn<'tcx>(\n     // Define function\n     tcx.sess.time(\"define function\", || {\n         context.want_disasm = crate::pretty_clif::should_write_ir(tcx);\n-        module.define_function(func_id, context).unwrap();\n+        module.define_function(codegened_func.func_id, context).unwrap();\n     });\n \n     // Write optimized function to file for debugging\n     crate::pretty_clif::write_clif_file(\n         tcx,\n         \"opt\",\n         module.isa(),\n-        instance,\n+        codegened_func.instance,\n         &context.func,\n         &clif_comments,\n     );\n \n     if let Some(disasm) = &context.mach_compile_result.as_ref().unwrap().disasm {\n         crate::pretty_clif::write_ir_file(\n             tcx,\n-            || format!(\"{}.vcode\", tcx.symbol_name(instance).name),\n+            || format!(\"{}.vcode\", tcx.symbol_name(codegened_func.instance).name),\n             |file| file.write_all(disasm.as_bytes()),\n         )\n     }\n@@ -214,16 +231,16 @@ fn compile_fn<'tcx>(\n     tcx.sess.time(\"generate debug info\", || {\n         if let Some(debug_context) = debug_context {\n             debug_context.define_function(\n-                instance,\n-                func_id,\n-                symbol_name,\n+                codegened_func.instance,\n+                codegened_func.func_id,\n+                codegened_func.symbol_name.name,\n                 isa,\n                 context,\n-                &source_info_set,\n-                local_map,\n+                &codegened_func.source_info_set,\n+                codegened_func.local_map,\n             );\n         }\n-        unwind_context.add_function(func_id, &context, isa);\n+        unwind_context.add_function(codegened_func.func_id, &context, isa);\n     });\n }\n "}, {"sha": "802e8ebd6f604bf3d518ba9552817f6493d0ff4e", "filename": "src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a10da0f76898eca1ebd398748b98b205f4284297/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10da0f76898eca1ebd398748b98b205f4284297/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=a10da0f76898eca1ebd398748b98b205f4284297", "patch": "@@ -131,9 +131,9 @@ fn module_codegen(\n     for (mono_item, _) in mono_items {\n         match mono_item {\n             MonoItem::Fn(inst) => {\n-                cx.tcx\n-                    .sess\n-                    .time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, &mut module, inst));\n+                cx.tcx.sess.time(\"codegen fn\", || {\n+                    crate::base::codegen_and_compile_fn(&mut cx, &mut module, inst)\n+                });\n             }\n             MonoItem::Static(def_id) => crate::constant::codegen_static(tcx, &mut module, def_id),\n             MonoItem::GlobalAsm(item_id) => {"}, {"sha": "a7ea2b182abff8fea59153ed60e5323311c047b5", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a10da0f76898eca1ebd398748b98b205f4284297/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10da0f76898eca1ebd398748b98b205f4284297/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=a10da0f76898eca1ebd398748b98b205f4284297", "patch": "@@ -129,7 +129,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n                         cx.tcx.sess.time(\"codegen fn\", || {\n-                            crate::base::codegen_fn(&mut cx, &mut jit_module, inst)\n+                            crate::base::codegen_and_compile_fn(&mut cx, &mut jit_module, inst)\n                         });\n                     }\n                     CodegenMode::JitLazy => codegen_shim(&mut cx, &mut jit_module, inst),\n@@ -259,7 +259,9 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n                 false,\n                 Symbol::intern(\"dummy_cgu_name\"),\n             );\n-            tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, jit_module, instance));\n+            tcx.sess.time(\"codegen fn\", || {\n+                crate::base::codegen_and_compile_fn(&mut cx, jit_module, instance)\n+            });\n \n             assert!(cx.global_asm.is_empty());\n             jit_module.finalize_definitions();"}]}