{"sha": "9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMGQ0YjE2YjdkMTQ1MzBiNzdjOTZlMmUxOGI4MGIzZjViNTI2Yzg=", "commit": {"author": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-08T16:01:07Z"}, "committer": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-09T00:27:03Z"}, "message": "beautify tests", "tree": {"sha": "302eb3a8ee8b69917fa03ed242b884f848f92445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302eb3a8ee8b69917fa03ed242b884f848f92445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5FNMeJ7UuhhqQiT99mIXvcbzfPoFAl0j31gACgkQ9mIXvcbz\nfPpkTRAAs4Yv4WAYxtikLdekjDv5GLWjDo5W0hAoiDANHAQazXEUdRpQo5WVN5eM\n6zbT65XTqf6SQ/sTx0XItYhYw6iubuzCpgcP7DjK4+FSInQnskDWKubaIxFU7KQ1\nxDJy8bCFVZTERqjvcHdk2HPbPi+UlxW+A/cDXBgB3Num8BKrPQX9bJj73LUAIW73\nLFfQh0TgqeEy66pbiKye3j5Pfse8DR5N86tfUC4U6oyHoBWrkuAqCaKGmYGg1meT\nHCHYXbTlA9KSbBbxnLa9sLrzW6cdNXiC2+0ZnyHL3ObjL6bB+Tni5G3gUFQScRvY\nlp43CkjUep6KPvlCRHH4llHXfMYb1XqcuVV1x3P5Az1kLhJ9KoCniHFXXQv5s5z6\nHN8DihBttOL4lWDPP7ujoVUOZdofN/w1N6XfSrmXL4qN5ORrSbGtYMorbjiKLnUH\n6lh+sXcOd81FPsxVl5U6GO8h0EGT1E2dJctV9NF3DmXno35BnhfbQHNnFfxzjezq\nD9ljZ7fyku62yZELSVqgsU0VuVnPaR8ZX7DoQ2LllIRU/U8Dr53wGHzfdONUnYJ1\nAs+VpAs2gtQGY2/PYhzulWYL/s7UK+ZuBs90AdH+yYnzJAUxsi0KPiaAoLrbBo4a\nz8MygQSr220d3K4T3/udD+1ny02hLPe6DiZlOnJh3o8cJaW8Z00=\n=B8rP\n-----END PGP SIGNATURE-----", "payload": "tree 302eb3a8ee8b69917fa03ed242b884f848f92445\nparent 741fc8fbfc10445ef90c8234e042d688d8bc293b\nauthor Unreal Hoang <unrealhoang@gmail.com> 1562601667 +0900\ncommitter Unreal Hoang <unrealhoang@gmail.com> 1562632023 +0900\n\nbeautify tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8", "html_url": "https://github.com/rust-lang/rust/commit/9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8/comments", "author": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "741fc8fbfc10445ef90c8234e042d688d8bc293b", "url": "https://api.github.com/repos/rust-lang/rust/commits/741fc8fbfc10445ef90c8234e042d688d8bc293b", "html_url": "https://github.com/rust-lang/rust/commit/741fc8fbfc10445ef90c8234e042d688d8bc293b"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "6aea1fb4a1894d7f8e18f8d5d7e9d00c015212c3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=9a0d4b16b7d14530b77c96e2e18b80b3f5b526c8", "patch": "@@ -25,33 +25,41 @@ fn infer_try() {\n     let (mut db, pos) = MockDatabase::with_position(\n         r#\"\n //- /main.rs\n-enum Result<O, E> {\n-    Ok(O),\n-    Err(E)\n-}\n \n-impl<O, E> ::std::ops::Try for Result<O, E> {\n-    type Ok = O;\n-    type Error = E;\n-}\n fn test() {\n     let r: Result<i32, u64> = Result::Ok(1);\n     let v = r?;\n     v<|>;\n }\n \n-//- /lib.rs\n+//- /std.rs\n+\n+#[prelude_import] use ops::*;\n mod ops {\n     trait Try {\n         type Ok;\n         type Error;\n     }\n }\n+\n+#[prelude_import] use result::*;\n+mod result {\n+    enum Result<O, E> {\n+        Ok(O),\n+        Err(E)\n+    }\n+\n+    impl<O, E> crate::ops::Try for Result<O, E> {\n+        type Ok = O;\n+        type Error = E;\n+    }\n+}\n+\n \"#,\n     );\n     db.set_crate_graph_from_fixture(crate_graph! {\n         \"main\": (\"/main.rs\", [\"std\"]),\n-        \"std\": (\"/lib.rs\", []),\n+        \"std\": (\"/std.rs\", []),\n     });\n     assert_eq!(\"i32\", type_at_pos(&db, pos));\n }\n@@ -61,15 +69,9 @@ fn infer_for_loop() {\n     let (mut db, pos) = MockDatabase::with_position(\n         r#\"\n //- /main.rs\n-struct Vec<T> {}\n-impl<T> Vec<T> {\n-    fn new() -> Self { Vec {} }\n-    fn push(&mut self, t: T) { }\n-}\n \n-impl<T> ::std::iter::IntoIterator for Vec<T> {\n-    type Item=T;\n-}\n+use std::collections::Vec;\n+\n fn test() {\n     let v = Vec::new();\n     v.push(\"foo\");\n@@ -78,17 +80,31 @@ fn test() {\n     }\n }\n \n-//- /lib.rs\n+//- /std.rs\n+\n+#[prelude_import] use iter::*;\n mod iter {\n     trait IntoIterator {\n         type Item;\n     }\n }\n+\n+mod collections {\n+    struct Vec<T> {}\n+    impl<T> Vec<T> {\n+        fn new() -> Self { Vec {} }\n+        fn push(&mut self, t: T) { }\n+    }\n+\n+    impl<T> crate::iter::IntoIterator for Vec<T> {\n+        type Item=T;\n+    }\n+}\n \"#,\n     );\n     db.set_crate_graph_from_fixture(crate_graph! {\n         \"main\": (\"/main.rs\", [\"std\"]),\n-        \"std\": (\"/lib.rs\", []),\n+        \"std\": (\"/std.rs\", []),\n     });\n     assert_eq!(\"&str\", type_at_pos(&db, pos));\n }"}]}