{"sha": "fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTdkNDM3MWYxZDNlMGM0MGViY2I2ZGUwYjllN2NiYjg5ZmEwYzk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-05T18:32:25Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-05T18:32:25Z"}, "message": "vec: Add .shift_opt() -> Option<T>\n\nAdd a function to safely retrieve the first element of a ~[T], as\nOption<T>. Implement shift() using shift_opt().\n\nAdd tests for both .shift() and .shift_opt()", "tree": {"sha": "7ad0eee71e331dbb02973ccda9d665eddd893410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad0eee71e331dbb02973ccda9d665eddd893410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "html_url": "https://github.com/rust-lang/rust/commit/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9/comments", "author": null, "committer": null, "parents": [{"sha": "d805b832f5a49acc66e0d2acda9f9f4cf074a374", "url": "https://api.github.com/repos/rust-lang/rust/commits/d805b832f5a49acc66e0d2acda9f9f4cf074a374", "html_url": "https://github.com/rust-lang/rust/commit/d805b832f5a49acc66e0d2acda9f9f4cf074a374"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "199852deed1dbccab17beeaaa8780e728dff3ef6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=fc17d4371f1d3e0c40ebcb6de0b9e7cbb89fa0c9", "patch": "@@ -1093,6 +1093,7 @@ pub trait OwnedVector<T> {\n     fn pop(&mut self) -> T;\n     fn pop_opt(&mut self) -> Option<T>;\n     fn shift(&mut self) -> T;\n+    fn shift_opt(&mut self) -> Option<T>;\n     fn unshift(&mut self, x: T);\n     fn insert(&mut self, i: uint, x:T);\n     fn remove(&mut self, i: uint) -> T;\n@@ -1305,20 +1306,26 @@ impl<T> OwnedVector<T> for ~[T] {\n     }\n \n     /// Removes the first element from a vector and return it\n+    #[inline]\n     fn shift(&mut self) -> T {\n-        unsafe {\n-            assert!(!self.is_empty());\n-\n-            if self.len() == 1 { return self.pop() }\n+        self.shift_opt().expect(\"shift: empty vector\")\n+    }\n \n-            if self.len() == 2 {\n-                let last = self.pop();\n-                let first = self.pop();\n-                self.push(last);\n-                return first;\n-            }\n+    /// Removes the first element from a vector and return it, or `None` if it is empty\n+    fn shift_opt(&mut self) -> Option<T> {\n+        unsafe {\n+            let ln = match self.len() {\n+                0 => return None,\n+                1 => return self.pop_opt(),\n+                2 =>  {\n+                    let last = self.pop();\n+                    let first = self.pop_opt();\n+                    self.push(last);\n+                    return first;\n+                }\n+                x => x\n+            };\n \n-            let ln = self.len();\n             let next_ln = self.len() - 1;\n \n             // Save the last element. We're going to overwrite its position\n@@ -1354,7 +1361,7 @@ impl<T> OwnedVector<T> for ~[T] {\n             let vp = raw::to_mut_ptr(*self);\n             let vp = ptr::mut_offset(vp, next_ln - 1);\n \n-            ptr::replace_ptr(vp, work_elt)\n+            Some(ptr::replace_ptr(vp, work_elt))\n         }\n     }\n \n@@ -2763,6 +2770,27 @@ mod tests {\n         assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }\n \n+    #[test]\n+    fn test_shift() {\n+        let mut x = ~[1, 2, 3];\n+        assert_eq!(x.shift(), 1);\n+        assert_eq!(&x, &~[2, 3]);\n+        assert_eq!(x.shift(), 2);\n+        assert_eq!(x.shift(), 3);\n+        assert_eq!(x.len(), 0);\n+    }\n+\n+    #[test]\n+    fn test_shift_opt() {\n+        let mut x = ~[1, 2, 3];\n+        assert_eq!(x.shift_opt(), Some(1));\n+        assert_eq!(&x, &~[2, 3]);\n+        assert_eq!(x.shift_opt(), Some(2));\n+        assert_eq!(x.shift_opt(), Some(3));\n+        assert_eq!(x.shift_opt(), None);\n+        assert_eq!(x.len(), 0);\n+    }\n+\n     #[test]\n     fn test_unshift() {\n         let mut x = ~[1, 2, 3];"}]}