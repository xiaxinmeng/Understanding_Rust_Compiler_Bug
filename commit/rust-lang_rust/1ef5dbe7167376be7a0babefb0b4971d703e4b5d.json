{"sha": "1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjVkYmU3MTY3Mzc2YmU3YTBiYWJlZmIwYjQ5NzFkNzAzZTRiNWQ=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-02T15:17:37Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-02T15:17:37Z"}, "message": "Resolved some of the comments\n* Undo fn -> const fn for some fns.\n* Split feature gate.\n* Made all three intrinsics const", "tree": {"sha": "bf2dd6a850e4e3e3df4df28417e49a0057137ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2dd6a850e4e3e3df4df28417e49a0057137ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "html_url": "https://github.com/rust-lang/rust/commit/1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91772c35c83f369283838ab049712a5f746e11ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/91772c35c83f369283838ab049712a5f746e11ef", "html_url": "https://github.com/rust-lang/rust/commit/91772c35c83f369283838ab049712a5f746e11ef"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "0c37bec46987516512678f3034c8859c09b30a13", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "patch": "@@ -815,19 +815,21 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n     /// zero-initialization: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n     pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n     pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called."}, {"sha": "fc44a5a55fb594114ac7e9516811e0559a307021", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "patch": "@@ -69,6 +69,7 @@\n #![feature(asm)]\n #![feature(cfg_target_has_atomic)]\n #![feature(const_alloc_layout)]\n+#![feature(const_assert_type)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]\n #![feature(const_checked_int_methods)]\n@@ -101,7 +102,7 @@\n #![feature(const_type_name)]\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]\n-#![feature(const_maybe_assume_init)]\n+#![feature(const_maybe_uninit_assume_init)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "eddfff6f513a03837aa384883460e8f5e9466411", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef5dbe7167376be7a0babefb0b4971d703e4b5d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=1ef5dbe7167376be7a0babefb0b4971d703e4b5d", "patch": "@@ -314,8 +314,7 @@ impl<T> MaybeUninit<T> {\n     /// let data = read(&mut buf);\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n-    #[rustc_allow_const_fn_unstable(const_maybe_assume_init)]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n     #[inline(always)]\n     pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n@@ -505,7 +504,7 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     pub const unsafe fn assume_init(self) -> T {\n@@ -813,7 +812,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_ref`]: MaybeUninit::assume_init_ref\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n         // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that\n@@ -835,7 +834,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_mut`]: MaybeUninit::assume_init_mut\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     pub const unsafe fn slice_assume_init_mut(slice: &mut [Self]) -> &mut [T] {\n         // SAFETY: similar to safety notes for `slice_get_ref`, but we have a\n@@ -845,17 +844,15 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub const fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n+    pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n         this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub const fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n+    pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this.as_mut_ptr() as *mut T\n     }\n }"}]}