{"sha": "da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMzk5NWYwZWMzMDg1ZGU0MmRjY2U5ZTkxZGJiNTY2MmIyYzk5ZDM=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-02-16T14:12:19Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-03T10:23:14Z"}, "message": "Remove lint pass on borrow and deref", "tree": {"sha": "2c7481d1f267b94a86b97872b149cdbee15c71be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7481d1f267b94a86b97872b149cdbee15c71be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "html_url": "https://github.com/rust-lang/rust/commit/da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf6652616ca75dde30cbdd021942433ae519730", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf6652616ca75dde30cbdd021942433ae519730", "html_url": "https://github.com/rust-lang/rust/commit/6bf6652616ca75dde30cbdd021942433ae519730"}], "stats": {"total": 99, "additions": 25, "deletions": 74}, "files": [{"sha": "335c3c575e7665758983a8f26ebbad5430e3ebe1", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "patch": "@@ -50,9 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n                 // Check that we're dealing with a trait method for one of the traits we care about.\n                 Some(trait_id)\n-                    if [sym::Clone, sym::Deref, sym::Borrow]\n-                        .iter()\n-                        .any(|s| cx.tcx.is_diagnostic_item(*s, trait_id)) =>\n+                    if [sym::Clone].iter().any(|s| cx.tcx.is_diagnostic_item(*s, trait_id)) =>\n                 {\n                     (trait_id, did)\n                 }\n@@ -73,13 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             _ => return,\n         };\n         // (Re)check that it implements the noop diagnostic.\n-        for (s, peel_ref) in [\n-            (sym::noop_method_borrow, true),\n-            (sym::noop_method_clone, false),\n-            (sym::noop_method_deref, true),\n-        ]\n-        .iter()\n-        {\n+        for (s, peel_ref) in [(sym::noop_method_clone, false)].iter() {\n             if cx.tcx.is_diagnostic_item(*s, i.def_id()) {\n                 let method = &call.ident.name;\n                 let receiver = &elements[0];"}, {"sha": "f43b180e063210d8e6bb5bc7f7e067251b592149", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "patch": "@@ -142,7 +142,6 @@ symbols! {\n         Decodable,\n         Decoder,\n         Default,\n-        Deref,\n         Encodable,\n         Encoder,\n         Eq,\n@@ -791,9 +790,7 @@ symbols! {\n         none_error,\n         nontemporal_store,\n         nontrapping_dash_fptoint: \"nontrapping-fptoint\",\n-        noop_method_borrow,\n         noop_method_clone,\n-        noop_method_deref,\n         noreturn,\n         nostack,\n         not,"}, {"sha": "c9040cd0a1670af8954f37e7ae3e965b3708aea0", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "patch": "@@ -153,7 +153,6 @@\n /// [`HashMap<K, V>`]: ../../std/collections/struct.HashMap.html\n /// [`String`]: ../../std/string/struct.String.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"Borrow\"]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrows from an owned value.\n     ///\n@@ -220,7 +219,6 @@ impl<T: ?Sized> BorrowMut<T> for T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Borrow<T> for &T {\n-    #[rustc_diagnostic_item = \"noop_method_borrow\"]\n     fn borrow(&self) -> &T {\n         &**self\n     }"}, {"sha": "2419771eae212fa79ef30efdcab1fdf0d951cd6e", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "patch": "@@ -60,7 +60,6 @@\n #[doc(alias = \"*\")]\n #[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"Deref\"]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -79,7 +78,6 @@ pub trait Deref {\n impl<T: ?Sized> Deref for &T {\n     type Target = T;\n \n-    #[rustc_diagnostic_item = \"noop_method_deref\"]\n     fn deref(&self) -> &T {\n         *self\n     }"}, {"sha": "8e4b5bf4d12c74c1d913682d9b8e034016777570", "filename": "src/test/ui/lint/noop-method-call.rs", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs?ref=da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "patch": "@@ -2,51 +2,33 @@\n \n #![allow(unused)]\n \n-use std::borrow::Borrow;\n-use std::ops::Deref;\n-\n-struct Foo<T>(T);\n+struct NonCloneType<T>(T);\n \n #[derive(Clone)]\n-struct Bar<T>(T);\n-\n-struct DerefExample<T>(T);\n-\n-impl<T> Deref for DerefExample<T> {\n-    type Target = T;\n-    fn deref(&self) -> &Self::Target {\n-        &self.0\n-    }\n-}\n+struct CloneType<T>(T);\n \n fn main() {\n-    let foo = &Foo(1u32);\n-    let foo_clone: &Foo<u32> = foo.clone();\n+    let non_clone_type_ref = &NonCloneType(1u32);\n+    let non_clone_type_ref_clone: &NonCloneType<u32> = non_clone_type_ref.clone();\n     //~^ WARNING call to `.clone()` on a reference in this situation does nothing\n \n-    let bar = &Bar(1u32);\n-    let bar_clone: Bar<u32> = bar.clone();\n-\n-    let deref = &&DerefExample(12u32);\n-    let derefed: &DerefExample<u32> = deref.deref();\n-    //~^ WARNING call to `.deref()` on a reference in this situation does nothing\n-\n-    let deref = &DerefExample(12u32);\n-    let derefed: &u32 = deref.deref();\n+    let clone_type_ref = &CloneType(1u32);\n+    let clone_type_ref_clone: CloneType<u32> = clone_type_ref.clone();\n \n-    let a = &&Foo(1u32);\n-    let borrowed: &Foo<u32> = a.borrow();\n-    //~^ WARNING call to `.borrow()` on a reference in this situation does nothing\n+    // Calling clone on a double reference doesn't warn since the method call itself\n+    // peels the outer reference off\n+    let clone_type_ref = &&CloneType(1u32);\n+    let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();\n \n     let xs = [\"a\", \"b\", \"c\"];\n     let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // ok, but could use `*x` instead\n }\n \n-fn generic<T>(foo: &Foo<T>) {\n-    foo.clone();\n+fn generic<T>(non_clone_type: &NonCloneType<T>) {\n+    non_clone_type.clone();\n }\n \n-fn non_generic(foo: &Foo<u32>) {\n-    foo.clone();\n+fn non_generic(non_clone_type: &NonCloneType<u32>) {\n+    non_clone_type.clone();\n     //~^ WARNING call to `.clone()` on a reference in this situation does nothing\n }"}, {"sha": "85a67f538407ccb3ba6964ff023f727394395993", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da3995f0ec3085de42dcce9e91dbb5662b2c99d3/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=da3995f0ec3085de42dcce9e91dbb5662b2c99d3", "patch": "@@ -1,35 +1,19 @@\n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:24:35\n+  --> $DIR/noop-method-call.rs:12:74\n    |\n-LL |     let foo_clone: &Foo<u32> = foo.clone();\n-   |                                   ^^^^^^^^ unnecessary method call\n+LL |     let non_clone_type_ref_clone: &NonCloneType<u32> = non_clone_type_ref.clone();\n+   |                                                                          ^^^^^^^^ unnecessary method call\n    |\n    = note: `#[warn(noop_method_call)]` on by default\n-   = note: the type `&Foo<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n-\n-warning: call to `.deref()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:31:44\n-   |\n-LL |     let derefed: &DerefExample<u32> = deref.deref();\n-   |                                            ^^^^^^^^ unnecessary method call\n-   |\n-   = note: the type `&DerefExample<u32>` which `deref` is being called on is the same as the type returned from `deref`, so the method call does not do anything and can be removed\n-\n-warning: call to `.borrow()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:38:32\n-   |\n-LL |     let borrowed: &Foo<u32> = a.borrow();\n-   |                                ^^^^^^^^^ unnecessary method call\n-   |\n-   = note: the type `&Foo<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed\n+   = note: the type `&NonCloneType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n warning: call to `.clone()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:50:8\n+  --> $DIR/noop-method-call.rs:32:19\n    |\n-LL |     foo.clone();\n-   |        ^^^^^^^^ unnecessary method call\n+LL |     non_clone_type.clone();\n+   |                   ^^^^^^^^ unnecessary method call\n    |\n-   = note: the type `&Foo<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+   = note: the type `&NonCloneType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n-warning: 4 warnings emitted\n+warning: 2 warnings emitted\n "}]}