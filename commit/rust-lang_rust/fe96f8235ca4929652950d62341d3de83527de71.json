{"sha": "fe96f8235ca4929652950d62341d3de83527de71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOTZmODIzNWNhNDkyOTY1Mjk1MGQ2MjM0MWQzZGU4MzUyN2RlNzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-08T12:34:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "validity: check dynamic size, not static\n\nalso less verbose logging", "tree": {"sha": "d74cd8348748956fd65ebcfb95854aac58fcc799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d74cd8348748956fd65ebcfb95854aac58fcc799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe96f8235ca4929652950d62341d3de83527de71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe96f8235ca4929652950d62341d3de83527de71", "html_url": "https://github.com/rust-lang/rust/commit/fe96f8235ca4929652950d62341d3de83527de71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe96f8235ca4929652950d62341d3de83527de71/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "976880aa8493cec9e16b38c24f3113f1bbd91b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/976880aa8493cec9e16b38c24f3113f1bbd91b88", "html_url": "https://github.com/rust-lang/rust/commit/976880aa8493cec9e16b38c24f3113f1bbd91b88"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "f481238bd5ba7406a9aac1ebef313a0186b02e51", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe96f8235ca4929652950d62341d3de83527de71/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe96f8235ca4929652950d62341d3de83527de71/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=fe96f8235ca4929652950d62341d3de83527de71", "patch": "@@ -148,9 +148,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         ref_tracking: Option<&mut RefTracking<'tcx>>,\n         const_mode: bool,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"validate scalar by type: {:#?}, {:#?}, {}\",\n-            *value, value.layout.size, value.layout.ty);\n-\n         // Go over all the primitive types\n         let ty = value.layout.ty;\n         match ty.sty {\n@@ -225,7 +222,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         }\n                     }\n                     // non-ZST also have to be dereferencable\n-                    if !place.layout.is_zst() {\n+                    if size != Size::ZERO {\n                         let ptr = try_validation!(place.ptr.to_ptr(),\n                             \"integer pointer in non-ZST reference\", path);\n                         if const_mode {\n@@ -280,7 +277,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         path: &Vec<PathElem>,\n         layout: &layout::Scalar,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"validate scalar by layout: {:#?}, {:#?}, {:#?}\", value, size, layout);\n         let (lo, hi) = layout.valid_range.clone().into_inner();\n         let max_hi = u128::max_value() >> (128 - size.bits()); // as big as the size fits\n         assert!(hi <= max_hi);\n@@ -372,7 +368,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         mut ref_tracking: Option<&mut RefTracking<'tcx>>,\n         const_mode: bool,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"validate_operand: {:?}, {:#?}\", *dest, dest.layout);\n+        trace!(\"validate_operand: {:?}, {:?}\", *dest, dest.layout.ty);\n \n         // If this is a multi-variant layout, we have find the right one and proceed with that.\n         // (No good reasoning to make this recursion, but it is equivalent to that.)"}]}