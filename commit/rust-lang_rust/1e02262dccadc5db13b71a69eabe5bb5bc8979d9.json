{"sha": "1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMDIyNjJkY2NhZGM1ZGIxM2I3MWE2OWVhYmU1YmI1YmM4OTc5ZDk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-30T15:01:58Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-01T22:17:14Z"}, "message": "ty::layout: implement `layout_of` automatically as a default method.", "tree": {"sha": "f176a78b49ab5445f8c0b907f900b4e785db9a68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f176a78b49ab5445f8c0b907f900b4e785db9a68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "html_url": "https://github.com/rust-lang/rust/commit/1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce933f13fd5af5a344cbc435d94253eae9dc33d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce933f13fd5af5a344cbc435d94253eae9dc33d", "html_url": "https://github.com/rust-lang/rust/commit/4ce933f13fd5af5a344cbc435d94253eae9dc33d"}], "stats": {"total": 159, "additions": 105, "deletions": 54}, "files": [{"sha": "1d7a1f11b6c8028e9d9c8e96eae50d6b4f7dacc0", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -1,4 +1,5 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::layout::LayoutError;\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -259,8 +260,9 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        RevealAllLayoutCx(self.tcx).layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_layout_err(err, span, ty)\n     }\n }\n \n@@ -366,15 +368,13 @@ pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        assert!(!ty.still_further_specializable());\n-        self.0.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap_or_else(|e| {\n-            if let layout::LayoutError::SizeOverflow(_) = e {\n-                self.0.sess.fatal(&e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let layout::LayoutError::SizeOverflow(_) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}, {"sha": "2c420caad755a315252b1077bec9b17ced42cba2", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -15,7 +15,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutError, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n use rustc_target::abi::{self, Align, Size};\n@@ -91,8 +91,9 @@ impl HasTargetSpec for Builder<'_, '_, 'tcx> {\n impl LayoutOf<'tcx> for Builder<'_, '_, 'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.cx.layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        self.cx.handle_layout_err(err, span, ty)\n     }\n }\n "}, {"sha": "6cb85eeb0d92905df721adc5246c2c93b20b1d3a", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -14,13 +14,13 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_middle::bug;\n use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::layout::{HasParamEnv, LayoutError, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CFGuard, CrateType, DebugInfo};\n use rustc_session::Session;\n-use rustc_span::source_map::{Span, DUMMY_SP};\n+use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n@@ -838,18 +838,13 @@ impl ty::layout::HasTyCtxt<'tcx> for CodegenCx<'ll, 'tcx> {\n impl LayoutOf<'tcx> for CodegenCx<'ll, 'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.spanned_layout_of(ty, DUMMY_SP)\n-    }\n-\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {\n-        self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty)).unwrap_or_else(|e| {\n-            if let LayoutError::SizeOverflow(_) = e {\n-                self.sess().span_fatal(span, &e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let LayoutError::SizeOverflow(_) = err {\n+            self.sess().span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}, {"sha": "ee43937e4d64f383fccd2fa3a9aa5b208b156f6c", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -1083,8 +1083,9 @@ impl<'tcx> ty::layout::HasParamEnv<'tcx> for LateContext<'tcx> {\n impl<'tcx> LayoutOf<'tcx> for LateContext<'tcx> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n "}, {"sha": "a9cbe2314140058b61146f90653a36772aafc43a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -2095,35 +2095,74 @@ pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n \n /// Trait for contexts that can compute layouts of types.\n pub trait LayoutOf<'tcx>: HasDataLayout + HasTyCtxt<'tcx> + HasParamEnv<'tcx> {\n+    /// The `TyAndLayout`-wrapping type (or `TyAndLayout` itself), which will be\n+    /// returned from `layout_of` (see also `handle_layout_err`).\n     type LayoutOfResult: MaybeResult<TyAndLayout<'tcx>>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult;\n+    /// `Span` to use for `tcx.at(span)`, from `layout_of`.\n+    // FIXME(eddyb) perhaps make this mandatory to get contexts to track it better?\n+    #[inline]\n+    fn layout_tcx_at_span(&self) -> Span {\n+        DUMMY_SP\n+    }\n+\n+    /// Helper used for `layout_of`, to adapt `tcx.layout_of(...)` into a\n+    /// `Self::LayoutOfResult` (which does not need to be a `Result<...>`).\n+    ///\n+    /// Most `impl`s, which propagate `LayoutError`s, should simply return `err`,\n+    /// but this hook allows e.g. codegen to return only `TyAndLayout` from its\n+    /// `cx.layout_of(...)`, without any `Result<...>` around it to deal with\n+    /// (and any `LayoutError`s are turned into fatal errors or ICEs).\n+    fn handle_layout_err(\n+        &self,\n+        err: LayoutError<'tcx>,\n+        span: Span,\n+        ty: Ty<'tcx>,\n+    ) -> <Self::LayoutOfResult as MaybeResult<TyAndLayout<'tcx>>>::Error;\n+\n+    /// Computes the layout of a type. Note that this implicitly\n+    /// executes in \"reveal all\" mode, and will normalize the input type.\n+    #[inline]\n+    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n+        self.spanned_layout_of(ty, DUMMY_SP)\n+    }\n+\n+    /// Computes the layout of a type, at `span`. Note that this implicitly\n+    /// executes in \"reveal all\" mode, and will normalize the input type.\n     // FIXME(eddyb) avoid passing information like this, and instead add more\n     // `TyCtxt::at`-like APIs to be able to do e.g. `cx.at(span).layout_of(ty)`.\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, _span: Span) -> Self::LayoutOfResult {\n-        self.layout_of(ty)\n+    #[inline]\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {\n+        let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };\n+        MaybeResult::from(\n+            self.tcx()\n+                .at(span)\n+                .layout_of(self.param_env().and(ty))\n+                .map_err(|err| self.handle_layout_err(err, span, ty)),\n+        )\n     }\n }\n \n impl LayoutOf<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n-    /// Computes the layout of a type. Note that this implicitly\n-    /// executes in \"reveal all\" mode, and will normalize the input type.\n     #[inline]\n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n \n impl LayoutOf<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n-    /// Computes the layout of a type. Note that this implicitly\n-    /// executes in \"reveal all\" mode, and will normalize the input type.\n     #[inline]\n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    fn layout_tcx_at_span(&self) -> Span {\n+        self.tcx.span\n+    }\n+\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n "}, {"sha": "527caea19fa3ef1a0b239c1c22549f3d5978f62f", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -8,7 +8,7 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir;\n-use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{self, LayoutError, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n@@ -17,9 +17,9 @@ use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, GlobalId, Immediate, InterpResult, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory,\n-    MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance, Scalar, ScalarMaybeUninit,\n-    StackPopJump,\n+    AllocId, GlobalId, Immediate, InterpErrorInfo, InterpResult, MPlaceTy, Machine, MemPlace,\n+    MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance, Scalar,\n+    ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n use crate::util::storage::AlwaysLiveLocals;\n@@ -316,10 +316,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOf<'tcx> for InterpCx<'mir,\n     type LayoutOfResult = InterpResult<'tcx, TyAndLayout<'tcx>>;\n \n     #[inline]\n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.tcx\n-            .layout_of(self.param_env.and(ty))\n-            .map_err(|layout| err_inval!(Layout(layout)).into())\n+    fn layout_tcx_at_span(&self) -> Span {\n+        self.tcx.span\n+    }\n+\n+    #[inline]\n+    fn handle_layout_err(\n+        &self,\n+        err: LayoutError<'tcx>,\n+        _: Span,\n+        _: Ty<'tcx>,\n+    ) -> InterpErrorInfo<'tcx> {\n+        err_inval!(Layout(err)).into()\n     }\n }\n "}, {"sha": "4be0f28f5d6c4426ef515dd68906b2da7c5d4e16", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -333,8 +333,9 @@ struct ConstPropagator<'mir, 'tcx> {\n impl<'mir, 'tcx> LayoutOf<'tcx> for ConstPropagator<'mir, 'tcx> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n "}, {"sha": "0b7fbb6bb8c0be972606a02ebb6ff9a4b2b6ec05", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02262dccadc5db13b71a69eabe5bb5bc8979d9/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=1e02262dccadc5db13b71a69eabe5bb5bc8979d9", "patch": "@@ -3,9 +3,10 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::ItemKind;\n-use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutError, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n+use rustc_span::Span;\n use rustc_target::abi::{HasDataLayout, TargetDataLayout};\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n@@ -116,8 +117,13 @@ struct UnwrapLayoutCx<'tcx> {\n impl LayoutOf<'tcx> for UnwrapLayoutCx<'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n-        self.tcx.layout_of(self.param_env.and(ty)).unwrap()\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        span_bug!(\n+            span,\n+            \"`#[rustc_layout(..)]` test resulted in `layout_of({}) = Err({})`\",\n+            ty,\n+            err\n+        );\n     }\n }\n "}]}