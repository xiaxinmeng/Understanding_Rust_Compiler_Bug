{"sha": "0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzU2ZGU2YzUxZjM5MTc4OWNkY2FlMGMwN2FlOWQ2M2UxZjYxYTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-27T16:06:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-27T19:53:01Z"}, "message": "rollup merge of #18235 : nikomatsakis/issue-18209", "tree": {"sha": "8b82d47c6ccffb78e0795568631ef86899d50717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b82d47c6ccffb78e0795568631ef86899d50717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "html_url": "https://github.com/rust-lang/rust/commit/0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da57aa57d4980185438de2a46792c0dba1e15e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/da57aa57d4980185438de2a46792c0dba1e15e7a", "html_url": "https://github.com/rust-lang/rust/commit/da57aa57d4980185438de2a46792c0dba1e15e7a"}, {"sha": "4a8d712345f30cba4f33bce9e0ece0eac64e8764", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8d712345f30cba4f33bce9e0ece0eac64e8764", "html_url": "https://github.com/rust-lang/rust/commit/4a8d712345f30cba4f33bce9e0ece0eac64e8764"}], "stats": {"total": 334, "additions": 250, "deletions": 84}, "files": [{"sha": "c014bc0c164f206dce9b7c1180382c215b0d846f", "filename": "src/librustc/middle/traits/doc.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fdoc.rs?ref=0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "patch": "@@ -279,4 +279,132 @@ selection. This is because it must account for the transformed self\n type of the receiver and various other complications. The procedure is\n described in `select.rs` in the \"METHOD MATCHING\" section.\n \n+# Caching and subtle considerations therewith\n+\n+In general we attempt to cache the results of trait selection.  This\n+is a somewhat complex process. Part of the reason for this is that we\n+want to be able to cache results even when all the types in the trait\n+reference are not fully known. In that case, it may happen that the\n+trait selection process is also influencing type variables, so we have\n+to be able to not only cache the *result* of the selection process,\n+but *replay* its effects on the type variables.\n+\n+## An example\n+\n+The high-level idea of how the cache works is that we first replace\n+all unbound inference variables with skolemized versions. Therefore,\n+if we had a trait reference `uint : Foo<$1>`, where `$n` is an unbound\n+inference variable, we might replace it with `uint : Foo<%0>`, where\n+`%n` is a skolemized type. We would then look this up in the cache.\n+If we found a hit, the hit would tell us the immediate next step to\n+take in the selection process: i.e., apply impl #22, or apply where\n+clause `X : Foo<Y>`. Let's say in this case there is no hit.\n+Therefore, we search through impls and where clauses and so forth, and\n+we come to the conclusion that the only possible impl is this one,\n+with def-id 22:\n+\n+    impl Foo<int> for uint { ... } // Impl #22\n+\n+We would then record in the cache `uint : Foo<%0> ==>\n+ImplCandidate(22)`. Next we would confirm `ImplCandidate(22)`, which\n+would (as a side-effect) unify `$1` with `int`.\n+\n+Now, at some later time, we might come along and see a `uint :\n+Foo<$3>`.  When skolemized, this would yield `uint : Foo<%0>`, just as\n+before, and hence the cache lookup would succeed, yielding\n+`ImplCandidate(22)`. We would confirm `ImplCandidate(22)` which would\n+(as a side-effect) unify `$3` with `int`.\n+\n+## Where clauses and the local vs global cache\n+\n+One subtle interaction is that the results of trait lookup will vary\n+depending on what where clauses are in scope. Therefore, we actually\n+have *two* caches, a local and a global cache. The local cache is\n+attached to the `ParameterEnvironment` and the global cache attached\n+to the `tcx`. We use the local cache whenever the result might depend\n+on the where clauses that are in scope. The determination of which\n+cache to use is done by the method `pick_candidate_cache` in\n+`select.rs`.\n+\n+There are two cases where we currently use the local cache. The\n+current rules are probably more conservative than necessary.\n+\n+### Trait references that involve parameter types\n+\n+The most obvious case where you need the local environment is\n+when the trait reference includes parameter types. For example,\n+consider the following function:\n+\n+    impl<T> Vec<T> {\n+        fn foo(x: T)\n+            where T : Foo\n+        { ... }\n+\n+        fn bar(x: T)\n+        { ... }\n+    }\n+\n+If there is an obligation `T : Foo`, or `int : Bar<T>`, or whatever,\n+clearly the results from `foo` and `bar` are potentially different,\n+since the set of where clauses in scope are different.\n+\n+### Trait references with unbound variables when where clauses are in scope\n+\n+There is another less obvious interaction which involves unbound variables\n+where *only* where clauses are in scope (no impls). This manifested as\n+issue #18209 (`run-pass/trait-cache-issue-18209.rs`). Consider\n+this snippet:\n+\n+```\n+pub trait Foo {\n+    fn load_from() -> Box<Self>;\n+    fn load() -> Box<Self> {\n+        Foo::load_from()\n+    }\n+}\n+```\n+\n+The default method will incur an obligation `$0 : Foo` from the call\n+to `load_from`. If there are no impls, this can be eagerly resolved to\n+`VtableParam(Self : Foo)` and cached. Because the trait reference\n+doesn't involve any parameters types (only the resolution does), this\n+result was stored in the global cache, causing later calls to\n+`Foo::load_from()` to get nonsense.\n+\n+To fix this, we always use the local cache if there are unbound\n+variables and where clauses in scope. This is more conservative than\n+necessary as far as I can tell. However, it still seems to be a simple\n+rule and I observe ~99% hit rate on rustc, so it doesn't seem to hurt\n+us in particular.\n+\n+Here is an example of the kind of subtle case that I would be worried\n+about with a more complex rule (although this particular case works\n+out ok). Imagine the trait reference doesn't directly reference a\n+where clause, but the where clause plays a role in the winnowing\n+phase. Something like this:\n+\n+```\n+pub trait Foo<T> { ... }\n+pub trait Bar { ... }\n+impl<U,T:Bar> Foo<U> for T { ... } // Impl A\n+impl Foo<char> for uint { ... }    // Impl B\n+```\n+\n+Now, in some function, we have no where clauses in scope, and we have\n+an obligation `$1 : Foo<$0>`. We might then conclude that `$0=char`\n+and `$1=uint`: this is because for impl A to apply, `uint:Bar` would\n+have to hold, and we know it does not or else the coherence check\n+would have failed.  So we might enter into our global cache: `$1 :\n+Foo<$0> => Impl B`.  Then we come along in a different scope, where a\n+generic type `A` is around with the bound `A:Bar`. Now suddenly the\n+impl is viable.\n+\n+The flaw in this imaginary DOOMSDAY SCENARIO is that we would not\n+currently conclude that `$1 : Foo<$0>` implies that `$0 == uint` and\n+`$1 == char`, even though it is true that (absent type parameters)\n+there is no other type the user could enter. However, it is not\n+*completely* implausible that we *could* draw this conclusion in the\n+future; we wouldn't have to guess types, in particular, we could be\n+led by the impls.\n+\n */"}, {"sha": "cd3555fec9002754bed9a5f6a01d60770d5eb69a", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "patch": "@@ -844,19 +844,36 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             cache_skol_trait_ref: &Rc<ty::TraitRef>)\n                             -> &SelectionCache\n     {\n+        // High-level idea: we have to decide whether to consult the\n+        // cache that is specific to this scope, or to consult the\n+        // global cache. We want the cache that is specific to this\n+        // scope whenever where clauses might affect the result.\n+\n         // If the trait refers to any parameters in scope, then use\n-        // the cache of the param-environment. This is because the\n-        // result will depend on the where clauses that are in\n-        // scope. Otherwise, use the generic tcx cache, since the\n-        // result holds across all environments.\n+        // the cache of the param-environment.\n         if\n             cache_skol_trait_ref.input_types().iter().any(\n                 |&t| ty::type_has_self(t) || ty::type_has_params(t))\n         {\n-            &self.param_env.selection_cache\n-        } else {\n-            &self.tcx().selection_cache\n+            return &self.param_env.selection_cache;\n         }\n+\n+        // If the trait refers to unbound type variables, and there\n+        // are where clauses in scope, then use the local environment.\n+        // If there are no where clauses in scope, which is a very\n+        // common case, then we can use the global environment.\n+        // See the discussion in doc.rs for more details.\n+        if\n+            !self.param_env.caller_obligations.is_empty()\n+            &&\n+            cache_skol_trait_ref.input_types().iter().any(\n+                |&t| ty::type_has_ty_infer(t))\n+        {\n+            return &self.param_env.selection_cache;\n+        }\n+\n+        // Otherwise, we can use the global cache.\n+        &self.tcx().selection_cache\n     }\n \n     fn check_candidate_cache(&mut self,\n@@ -1935,26 +1952,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         util::obligations_for_generics(self.tcx(), cause, recursion_depth,\n                                        &impl_generics, impl_substs)\n     }\n-\n-    fn contains_skolemized_types(&self,\n-                                 ty: ty::t)\n-                                 -> bool\n-    {\n-        /*!\n-         * True if the type contains skolemized variables.\n-         */\n-\n-        let mut found_skol = false;\n-\n-        ty::walk_ty(ty, |t| {\n-            match ty::get(t).sty {\n-                ty::ty_infer(ty::SkolemizedTy(_)) => { found_skol = true; }\n-                _ => { }\n-            }\n-        });\n-\n-        found_skol\n-    }\n }\n \n impl Repr for Candidate {"}, {"sha": "cace86fee4168515b3de5274bc4409296faf2afc", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 71, "deletions": 57, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "patch": "@@ -585,17 +585,22 @@ pub struct ctxt<'tcx> {\n     pub repr_hint_cache: RefCell<DefIdMap<Rc<Vec<attr::ReprAttr>>>>,\n }\n \n-pub enum tbox_flag {\n-    has_params = 1,\n-    has_self = 2,\n-    needs_infer = 4,\n-    has_regions = 8,\n-    has_ty_err = 16,\n-    has_ty_bot = 32,\n-\n-    // a meta-pub flag: subst may be required if the type has parameters, a self\n-    // type, or references bound regions\n-    needs_subst = 1 | 2 | 8\n+// Flags that we track on types. These flags are propagated upwards\n+// through the type during type construction, so that we can quickly\n+// check whether the type has various kinds of types in it without\n+// recursing over the type itself.\n+bitflags! {\n+    flags TypeFlags: u32 {\n+        const NO_TYPE_FLAGS = 0b0,\n+        const HAS_PARAMS    = 0b1,\n+        const HAS_SELF      = 0b10,\n+        const HAS_TY_INFER  = 0b100,\n+        const HAS_RE_INFER  = 0b1000,\n+        const HAS_REGIONS   = 0b10000,\n+        const HAS_TY_ERR    = 0b100000,\n+        const HAS_TY_BOT    = 0b1000000,\n+        const NEEDS_SUBST   = HAS_PARAMS.bits | HAS_SELF.bits | HAS_REGIONS.bits,\n+    }\n }\n \n pub type t_box = &'static t_box_;\n@@ -604,7 +609,13 @@ pub type t_box = &'static t_box_;\n pub struct t_box_ {\n     pub sty: sty,\n     pub id: uint,\n-    pub flags: uint,\n+    pub flags: TypeFlags,\n+}\n+\n+impl fmt::Show for TypeFlags {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.bits)\n+    }\n }\n \n // To reduce refcounting cost, we're representing types as unsafe pointers\n@@ -631,15 +642,16 @@ pub fn get(t: t) -> t_box {\n     }\n }\n \n-pub fn tbox_has_flag(tb: t_box, flag: tbox_flag) -> bool {\n-    (tb.flags & (flag as uint)) != 0u\n+fn tbox_has_flag(tb: t_box, flag: TypeFlags) -> bool {\n+    tb.flags.intersects(flag)\n }\n pub fn type_has_params(t: t) -> bool {\n-    tbox_has_flag(get(t), has_params)\n+    tbox_has_flag(get(t), HAS_PARAMS)\n }\n-pub fn type_has_self(t: t) -> bool { tbox_has_flag(get(t), has_self) }\n+pub fn type_has_self(t: t) -> bool { tbox_has_flag(get(t), HAS_SELF) }\n+pub fn type_has_ty_infer(t: t) -> bool { tbox_has_flag(get(t), HAS_TY_INFER) }\n pub fn type_needs_infer(t: t) -> bool {\n-    tbox_has_flag(get(t), needs_infer)\n+    tbox_has_flag(get(t), HAS_TY_INFER | HAS_RE_INFER)\n }\n pub fn type_id(t: t) -> uint { get(t).id }\n \n@@ -886,7 +898,7 @@ mod primitives {\n             pub static $name: t_box_ = t_box_ {\n                 sty: $sty,\n                 id: $id,\n-                flags: 0,\n+                flags: super::NO_TYPE_FLAGS,\n             };\n         )\n     )\n@@ -910,13 +922,13 @@ mod primitives {\n     pub static TY_BOT: t_box_ = t_box_ {\n         sty: super::ty_bot,\n         id: 16,\n-        flags: super::has_ty_bot as uint,\n+        flags: super::HAS_TY_BOT,\n     };\n \n     pub static TY_ERR: t_box_ = t_box_ {\n         sty: super::ty_err,\n         id: 17,\n-        flags: super::has_ty_err as uint,\n+        flags: super::HAS_TY_ERR,\n     };\n \n     pub const LAST_PRIMITIVE_ID: uint = 18;\n@@ -1577,91 +1589,91 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n         _ => ()\n     }\n \n-    let mut flags = 0u;\n-    fn rflags(r: Region) -> uint {\n-        (has_regions as uint) | {\n+    let mut flags = NO_TYPE_FLAGS;\n+    fn rflags(r: Region) -> TypeFlags {\n+        HAS_REGIONS | {\n             match r {\n-              ty::ReInfer(_) => needs_infer as uint,\n-              _ => 0u\n+              ty::ReInfer(_) => HAS_RE_INFER,\n+              _ => NO_TYPE_FLAGS,\n             }\n         }\n     }\n-    fn sflags(substs: &Substs) -> uint {\n-        let mut f = 0u;\n+    fn sflags(substs: &Substs) -> TypeFlags {\n+        let mut f = NO_TYPE_FLAGS;\n         let mut i = substs.types.iter();\n         for tt in i {\n-            f |= get(*tt).flags;\n+            f = f | get(*tt).flags;\n         }\n         match substs.regions {\n             subst::ErasedRegions => {}\n             subst::NonerasedRegions(ref regions) => {\n                 for r in regions.iter() {\n-                    f |= rflags(*r)\n+                    f = f | rflags(*r)\n                 }\n             }\n         }\n         return f;\n     }\n-    fn flags_for_bounds(bounds: &ExistentialBounds) -> uint {\n+    fn flags_for_bounds(bounds: &ExistentialBounds) -> TypeFlags {\n         rflags(bounds.region_bound)\n     }\n     match &st {\n       &ty_nil | &ty_bool | &ty_char | &ty_int(_) | &ty_float(_) | &ty_uint(_) |\n       &ty_str => {}\n       // You might think that we could just return ty_err for\n       // any type containing ty_err as a component, and get\n-      // rid of the has_ty_err flag -- likewise for ty_bot (with\n+      // rid of the HAS_TY_ERR flag -- likewise for ty_bot (with\n       // the exception of function types that return bot).\n       // But doing so caused sporadic memory corruption, and\n       // neither I (tjc) nor nmatsakis could figure out why,\n       // so we're doing it this way.\n-      &ty_bot => flags |= has_ty_bot as uint,\n-      &ty_err => flags |= has_ty_err as uint,\n+      &ty_bot => flags = flags | HAS_TY_BOT,\n+      &ty_err => flags = flags | HAS_TY_ERR,\n       &ty_param(ref p) => {\n           if p.space == subst::SelfSpace {\n-              flags |= has_self as uint;\n+              flags = flags | HAS_SELF;\n           } else {\n-              flags |= has_params as uint;\n+              flags = flags | HAS_PARAMS;\n           }\n       }\n-      &ty_unboxed_closure(_, ref region) => flags |= rflags(*region),\n-      &ty_infer(_) => flags |= needs_infer as uint,\n+      &ty_unboxed_closure(_, ref region) => flags = flags | rflags(*region),\n+      &ty_infer(_) => flags = flags | HAS_TY_INFER,\n       &ty_enum(_, ref substs) | &ty_struct(_, ref substs) => {\n-          flags |= sflags(substs);\n+          flags = flags | sflags(substs);\n       }\n       &ty_trait(box TyTrait { ref substs, ref bounds, .. }) => {\n-          flags |= sflags(substs);\n-          flags |= flags_for_bounds(bounds);\n+          flags = flags | sflags(substs);\n+          flags = flags | flags_for_bounds(bounds);\n       }\n       &ty_uniq(tt) | &ty_vec(tt, _) | &ty_open(tt) => {\n-        flags |= get(tt).flags\n+        flags = flags | get(tt).flags\n       }\n       &ty_ptr(ref m) => {\n-        flags |= get(m.ty).flags;\n+        flags = flags | get(m.ty).flags;\n       }\n       &ty_rptr(r, ref m) => {\n-        flags |= rflags(r);\n-        flags |= get(m.ty).flags;\n+        flags = flags | rflags(r);\n+        flags = flags | get(m.ty).flags;\n       }\n-      &ty_tup(ref ts) => for tt in ts.iter() { flags |= get(*tt).flags; },\n+      &ty_tup(ref ts) => for tt in ts.iter() { flags = flags | get(*tt).flags; },\n       &ty_bare_fn(ref f) => {\n-        for a in f.sig.inputs.iter() { flags |= get(*a).flags; }\n-        flags |= get(f.sig.output).flags;\n+        for a in f.sig.inputs.iter() { flags = flags | get(*a).flags; }\n+        flags = flags | get(f.sig.output).flags;\n         // T -> _|_ is *not* _|_ !\n-        flags &= !(has_ty_bot as uint);\n+        flags = flags - HAS_TY_BOT;\n       }\n       &ty_closure(ref f) => {\n         match f.store {\n             RegionTraitStore(r, _) => {\n-                flags |= rflags(r);\n+                flags = flags | rflags(r);\n             }\n             _ => {}\n         }\n-        for a in f.sig.inputs.iter() { flags |= get(*a).flags; }\n-        flags |= get(f.sig.output).flags;\n+        for a in f.sig.inputs.iter() { flags = flags | get(*a).flags; }\n+        flags = flags | get(f.sig.output).flags;\n         // T -> _|_ is *not* _|_ !\n-        flags &= !(has_ty_bot as uint);\n-        flags |= flags_for_bounds(&f.bounds);\n+        flags = flags - HAS_TY_BOT;\n+        flags = flags | flags_for_bounds(&f.bounds);\n       }\n     }\n \n@@ -1976,18 +1988,20 @@ impl ItemSubsts {\n \n // Type utilities\n \n-pub fn type_is_nil(ty: t) -> bool { get(ty).sty == ty_nil }\n+pub fn type_is_nil(ty: t) -> bool {\n+    get(ty).sty == ty_nil\n+}\n \n pub fn type_is_bot(ty: t) -> bool {\n-    (get(ty).flags & (has_ty_bot as uint)) != 0\n+    get(ty).flags.intersects(HAS_TY_BOT)\n }\n \n pub fn type_is_error(ty: t) -> bool {\n-    (get(ty).flags & (has_ty_err as uint)) != 0\n+    get(ty).flags.intersects(HAS_TY_ERR)\n }\n \n pub fn type_needs_subst(ty: t) -> bool {\n-    tbox_has_flag(get(ty), needs_subst)\n+    tbox_has_flag(get(ty), NEEDS_SUBST)\n }\n \n pub fn trait_ref_contains_error(tref: &ty::TraitRef) -> bool {"}, {"sha": "a5efb32079de854d3514c79f327c479de99dd1e0", "filename": "src/test/run-pass/trait-cache-issue-18209.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Ftest%2Frun-pass%2Ftrait-cache-issue-18209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c756de6c51f391789cdcae0c07ae9d63e1f61a0/src%2Ftest%2Frun-pass%2Ftrait-cache-issue-18209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cache-issue-18209.rs?ref=0c756de6c51f391789cdcae0c07ae9d63e1f61a0", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the cache results from the default method do not pollute\n+// the cache for the later call in `load()`.\n+//\n+// See issue #18209.\n+\n+pub trait Foo {\n+    fn load_from() -> Box<Self>;\n+    fn load() -> Box<Self> {\n+        Foo::load_from()\n+    }\n+}\n+\n+pub fn load<M: Foo>() -> Box<M> {\n+    Foo::load()\n+}\n+\n+fn main() { }"}]}