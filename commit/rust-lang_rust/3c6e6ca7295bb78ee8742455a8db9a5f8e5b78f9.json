{"sha": "3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNmU2Y2E3Mjk1YmI3OGVlODc0MjQ1NWE4ZGI5YTVmOGU1Yjc4Zjk=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T14:25:53Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T22:55:41Z"}, "message": "Accept `LocalDefId` as key for `check_mod_privacy` query", "tree": {"sha": "2294f9814d4a6c3ea5c400b2c49e9dd32888c0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2294f9814d4a6c3ea5c400b2c49e9dd32888c0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "html_url": "https://github.com/rust-lang/rust/commit/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d0b727ea40973e5d2e8547d766190a16146e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d0b727ea40973e5d2e8547d766190a16146e11", "html_url": "https://github.com/rust-lang/rust/commit/49d0b727ea40973e5d2e8547d766190a16146e11"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "fa7a82bd58b6b566414c0151c2b1d5ba19230d33", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "patch": "@@ -430,8 +430,8 @@ rustc_queries! {\n             desc { |tcx| \"checking item types in {}\", describe_as_module(key, tcx) }\n         }\n \n-        query check_mod_privacy(key: DefId) -> () {\n-            desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n+        query check_mod_privacy(key: LocalDefId) -> () {\n+            desc { |tcx| \"checking privacy in {}\", describe_as_module(key.to_def_id(), tcx) }\n         }\n \n         query check_mod_intrinsics(key: DefId) -> () {"}, {"sha": "82b45cf7cf884156cd81c6029abf1ae322bf288e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_middle::bug;\n@@ -1174,15 +1174,17 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n struct TypePrivacyVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    current_item: DefId,\n+    current_item: LocalDefId,\n     in_body: bool,\n     span: Span,\n     empty_tables: &'a ty::TypeckTables<'tcx>,\n }\n \n impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n     fn item_is_accessible(&self, did: DefId) -> bool {\n-        def_id_visibility(self.tcx, did).0.is_accessible_from(self.current_item, self.tcx)\n+        def_id_visibility(self.tcx, did)\n+            .0\n+            .is_accessible_from(self.current_item.to_def_id(), self.tcx)\n     }\n \n     // Take node-id of an expression or pattern and check its type for privacy.\n@@ -1387,10 +1389,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n \n     // Check types in item interfaces.\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let orig_current_item = mem::replace(\n-            &mut self.current_item,\n-            self.tcx.hir().local_def_id(item.hir_id).to_def_id(),\n-        );\n+        let orig_current_item =\n+            mem::replace(&mut self.current_item, self.tcx.hir().local_def_id(item.hir_id));\n         let orig_in_body = mem::replace(&mut self.in_body, false);\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, item.hir_id, self.empty_tables));\n@@ -2076,7 +2076,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: DefId) {\n+fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n     // Check privacy of names not checked in previous compilation stages.\n@@ -2086,7 +2086,7 @@ fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: DefId) {\n         current_item: None,\n         empty_tables: &empty_tables,\n     };\n-    let (module, span, hir_id) = tcx.hir().get_module(module_def_id.expect_local());\n+    let (module, span, hir_id) = tcx.hir().get_module(module_def_id);\n \n     intravisit::walk_mod(&mut visitor, module, hir_id);\n "}]}