{"sha": "f1ea5cc273d425033ad430c8fbc28bae1013b45a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZWE1Y2MyNzNkNDI1MDMzYWQ0MzBjOGZiYzI4YmFlMTAxM2I0NWE=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-29T03:21:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-29T03:21:52Z"}, "message": "Rollup merge of #36789 - jseyfried:non_inline_mod_in_block, r=nikomatsakis\n\nAllow more non-inline modules in blocks\n\nCurrently, non-inline modules without a `#[path]` attribute are not allowed in blocks.\nThis PR allows non-inline modules that have an ancestor module with a `#[path]` attribute, provided there is not a nearer ancestor block.\n\nFor example,\n```rust\nfn main() {\n    #[path = \"...\"] mod foo {\n        mod bar; //< allowed by this PR\n        fn f() {\n            mod bar; //< still an error\n        }\n    }\n}\n```\n\nFixes #36772.\nr? @nikomatsakis", "tree": {"sha": "8298328989f66af7994b8c5c42ceecc420eea1f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8298328989f66af7994b8c5c42ceecc420eea1f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ea5cc273d425033ad430c8fbc28bae1013b45a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea5cc273d425033ad430c8fbc28bae1013b45a", "html_url": "https://github.com/rust-lang/rust/commit/f1ea5cc273d425033ad430c8fbc28bae1013b45a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea5cc273d425033ad430c8fbc28bae1013b45a/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c8e763d4d69732419fa1d23bdbf310be4b597f", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c8e763d4d69732419fa1d23bdbf310be4b597f", "html_url": "https://github.com/rust-lang/rust/commit/13c8e763d4d69732419fa1d23bdbf310be4b597f"}, {"sha": "174f0936514d7e7224c34a78699733eea498875e", "url": "https://api.github.com/repos/rust-lang/rust/commits/174f0936514d7e7224c34a78699733eea498875e", "html_url": "https://github.com/rust-lang/rust/commit/174f0936514d7e7224c34a78699733eea498875e"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "4f64b3f2e1d676d630cedb34306c1eb0323c4918", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f1ea5cc273d425033ad430c8fbc28bae1013b45a", "patch": "@@ -557,7 +557,9 @@ pub struct ExpansionData {\n     pub depth: usize,\n     pub backtrace: ExpnId,\n     pub module: Rc<ModuleData>,\n-    pub in_block: bool,\n+\n+    // True if non-inline modules without a `#[path]` are forbidden at the root of this expansion.\n+    pub no_noninline_mod: bool,\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n@@ -590,7 +592,7 @@ impl<'a> ExtCtxt<'a> {\n                 depth: 0,\n                 backtrace: NO_EXPANSION,\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n-                in_block: false,\n+                no_noninline_mod: false,\n             },\n         }\n     }"}, {"sha": "b1d828d0e3e4938446beda36e0fe2daacf0bf331", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f1ea5cc273d425033ad430c8fbc28bae1013b45a", "patch": "@@ -667,9 +667,9 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {\n-        let orig_in_block = mem::replace(&mut self.cx.current_expansion.in_block, true);\n+        let no_noninline_mod = mem::replace(&mut self.cx.current_expansion.no_noninline_mod, true);\n         let result = noop_fold_block(block, self);\n-        self.cx.current_expansion.in_block = orig_in_block;\n+        self.cx.current_expansion.no_noninline_mod = no_noninline_mod;\n         result\n     }\n \n@@ -708,6 +708,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     return noop_fold_item(item, self);\n                 }\n \n+                let orig_no_noninline_mod = self.cx.current_expansion.no_noninline_mod;\n                 let mut module = (*self.cx.current_expansion.module).clone();\n                 module.mod_path.push(item.ident);\n \n@@ -717,11 +718,14 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                 let inline_module = item.span.contains(inner) || inner == syntax_pos::DUMMY_SP;\n \n                 if inline_module {\n-                    module.directory.push(&*{\n-                        ::attr::first_attr_value_str_by_name(&item.attrs, \"path\")\n-                            .unwrap_or(item.ident.name.as_str())\n-                    });\n+                    if let Some(path) = attr::first_attr_value_str_by_name(&item.attrs, \"path\") {\n+                        self.cx.current_expansion.no_noninline_mod = false;\n+                        module.directory.push(&*path);\n+                    } else {\n+                        module.directory.push(&*item.ident.name.as_str());\n+                    }\n                 } else {\n+                    self.cx.current_expansion.no_noninline_mod = false;\n                     module.directory =\n                         PathBuf::from(self.cx.parse_sess.codemap().span_to_filename(inner));\n                     module.directory.pop();\n@@ -731,6 +735,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     mem::replace(&mut self.cx.current_expansion.module, Rc::new(module));\n                 let result = noop_fold_item(item, self);\n                 self.cx.current_expansion.module = orig_module;\n+                self.cx.current_expansion.no_noninline_mod = orig_no_noninline_mod;\n                 return result;\n             }\n             // Ensure that test functions are accessible from the test harness."}, {"sha": "2e0c7ddb540f4c50967f87bf810ce367607e529b", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=f1ea5cc273d425033ad430c8fbc28bae1013b45a", "patch": "@@ -122,7 +122,7 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            rhs);\n                 let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n                 p.directory = cx.current_expansion.module.directory.clone();\n-                p.restrictions = match cx.current_expansion.in_block {\n+                p.restrictions = match cx.current_expansion.no_noninline_mod {\n                     true => Restrictions::NO_NONINLINE_MOD,\n                     false => Restrictions::empty(),\n                 };"}, {"sha": "5476166932d32fced7400c13717f82970c9d6b5f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f1ea5cc273d425033ad430c8fbc28bae1013b45a", "patch": "@@ -5274,23 +5274,27 @@ impl<'a> Parser<'a> {\n             }\n         } else {\n             let directory = self.directory.clone();\n-            self.push_directory(id, &outer_attrs);\n+            let restrictions = self.push_directory(id, &outer_attrs);\n             self.expect(&token::OpenDelim(token::Brace))?;\n             let mod_inner_lo = self.span.lo;\n             let attrs = self.parse_inner_attributes()?;\n-            let m = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n+            let m = self.with_res(restrictions, |this| {\n+                this.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)\n+            })?;\n             self.directory = directory;\n             Ok((id, ItemKind::Mod(m), Some(attrs)))\n         }\n     }\n \n-    fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {\n-        let default_path = self.id_to_interned_str(id);\n-        let file_path = match ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n-            Some(d) => d,\n-            None => default_path,\n-        };\n-        self.directory.push(&*file_path)\n+    fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) -> Restrictions {\n+        if let Some(path) = ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n+            self.directory.push(&*path);\n+            self.restrictions - Restrictions::NO_NONINLINE_MOD\n+        } else {\n+            let default_path = self.id_to_interned_str(id);\n+            self.directory.push(&*default_path);\n+            self.restrictions\n+        }\n     }\n \n     pub fn submod_path_from_attr(attrs: &[ast::Attribute], dir_path: &Path) -> Option<PathBuf> {"}, {"sha": "28dee15cfa04399e1ebe61bbe7d33b324c03bff5", "filename": "src/test/run-pass/mod_dir_path.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea5cc273d425033ad430c8fbc28bae1013b45a/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs?ref=f1ea5cc273d425033ad430c8fbc28bae1013b45a", "patch": "@@ -17,4 +17,15 @@ mod mod_dir_simple {\n \n pub fn main() {\n     assert_eq!(mod_dir_simple::syrup::foo(), 10);\n+\n+    #[path = \"auxiliary\"]\n+    mod foo {\n+        mod two_macros;\n+    }\n+\n+    #[path = \"auxiliary\"]\n+    mod bar {\n+        macro_rules! m { () => { mod two_macros; } }\n+        m!();\n+    }\n }"}]}