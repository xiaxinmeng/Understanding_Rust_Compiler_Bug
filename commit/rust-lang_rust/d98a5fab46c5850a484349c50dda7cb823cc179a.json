{"sha": "d98a5fab46c5850a484349c50dda7cb823cc179a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OGE1ZmFiNDZjNTg1MGE0ODQzNDljNTBkZGE3Y2I4MjNjYzE3OWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-12T16:02:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-12T16:02:55Z"}, "message": "Merge #3543\n\n3543: Parameter inlay hint separate from variable type inlay? #2876 r=matklad a=slyngbaek\n\nAdd setting to allow enabling either type inlay hints or parameter\r\ninlay hints or both. Group the the max inlay hint length option\r\ninto the object.\r\n\r\n- Add a new type for the inlayHint options.\r\n- Add tests to ensure the inlays don't happen on the server side\n\nCo-authored-by: Steffen Lyngbaek <steffenlyngbaek@gmail.com>", "tree": {"sha": "754340fc8f170ed6057e6302fef1386ae8fb52d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754340fc8f170ed6057e6302fef1386ae8fb52d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98a5fab46c5850a484349c50dda7cb823cc179a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeal0vCRBK7hj4Ov3rIwAAdHIIAHMXcR+LX8LzK2zT+TpCpBve\nUhBHgXdnHznkn1/Y6GP1MM6KKv/KTuB/OIoNDRmZ4znqdrqiiyU01tmj5WNqoTXP\n9CdtYtQWfieJghiJBUH3QUVUE3ap3A3uUaEO2lhnzfuJPrke74gBnZHSc5sEUw38\nc0odeERaStC4Hc+4L2S2bsP+LxCSuKpnMLf3GuPNdKSa3/f4Rqcd+wIDDZD4wnw7\nSKmJ+rAAwEvOrpjqa1YzeOcDBAPPRaZxsok8VKckHfEc9JpeA4ZFiVAT8SYbuOEm\nNMPC4nlXZ0ghNfn2wraDLYik+5XnzshF4Ztf1Rv8mIHUtYe4/FVBdeJl6X/ovCg=\n=ipNm\n-----END PGP SIGNATURE-----\n", "payload": "tree 754340fc8f170ed6057e6302fef1386ae8fb52d9\nparent 944bd2cbc3af1a11eb6dbaec96fcc0030f42232a\nparent a153b9087520012b5f815b4df6c3657d490b30c8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584028975 +0000\ncommitter GitHub <noreply@github.com> 1584028975 +0000\n\nMerge #3543\n\n3543: Parameter inlay hint separate from variable type inlay? #2876 r=matklad a=slyngbaek\n\nAdd setting to allow enabling either type inlay hints or parameter\r\ninlay hints or both. Group the the max inlay hint length option\r\ninto the object.\r\n\r\n- Add a new type for the inlayHint options.\r\n- Add tests to ensure the inlays don't happen on the server side\n\nCo-authored-by: Steffen Lyngbaek <steffenlyngbaek@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98a5fab46c5850a484349c50dda7cb823cc179a", "html_url": "https://github.com/rust-lang/rust/commit/d98a5fab46c5850a484349c50dda7cb823cc179a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98a5fab46c5850a484349c50dda7cb823cc179a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "url": "https://api.github.com/repos/rust-lang/rust/commits/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "html_url": "https://github.com/rust-lang/rust/commit/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a"}, {"sha": "a153b9087520012b5f815b4df6c3657d490b30c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a153b9087520012b5f815b4df6c3657d490b30c8", "html_url": "https://github.com/rust-lang/rust/commit/a153b9087520012b5f815b4df6c3657d490b30c8"}], "stats": {"total": 193, "additions": 150, "deletions": 43}, "files": [{"sha": "59922e14c4dafe95c7ebf7aaad26b6cfcccc0189", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 95, "deletions": 18, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -10,7 +10,20 @@ use ra_syntax::{\n \n use crate::{FileId, FunctionSignature};\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct InlayConfig {\n+    pub type_hints: bool,\n+    pub parameter_hints: bool,\n+    pub max_length: Option<usize>,\n+}\n+\n+impl Default for InlayConfig {\n+    fn default() -> Self {\n+        Self { type_hints: true, parameter_hints: true, max_length: None }\n+    }\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n@@ -26,7 +39,7 @@ pub struct InlayHint {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n-    max_inlay_hint_length: Option<usize>,\n+    inlay_hint_opts: &InlayConfig,\n ) -> Vec<InlayHint> {\n     let _p = profile(\"inlay_hints\");\n     let sema = Semantics::new(db);\n@@ -36,9 +49,9 @@ pub(crate) fn inlay_hints(\n     for node in file.syntax().descendants() {\n         match_ast! {\n             match node {\n-                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, ast::Expr::from(it)); },\n-                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, ast::Expr::from(it)); },\n-                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, max_inlay_hint_length, it); },\n+                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n+                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n+                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, inlay_hint_opts, it); },\n                 _ => (),\n             }\n         }\n@@ -49,8 +62,13 @@ pub(crate) fn inlay_hints(\n fn get_param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n+    inlay_hint_opts: &InlayConfig,\n     expr: ast::Expr,\n ) -> Option<()> {\n+    if !inlay_hint_opts.parameter_hints {\n+        return None;\n+    }\n+\n     let args = match &expr {\n         ast::Expr::CallExpr(expr) => expr.arg_list()?.args(),\n         ast::Expr::MethodCallExpr(expr) => expr.arg_list()?.args(),\n@@ -84,9 +102,13 @@ fn get_param_name_hints(\n fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    max_inlay_hint_length: Option<usize>,\n+    inlay_hint_opts: &InlayConfig,\n     pat: ast::BindPat,\n ) -> Option<()> {\n+    if !inlay_hint_opts.type_hints {\n+        return None;\n+    }\n+\n     let ty = sema.type_of_pat(&pat.clone().into())?;\n \n     if should_not_display_type_hint(sema.db, &pat, &ty) {\n@@ -96,7 +118,7 @@ fn get_bind_pat_hints(\n     acc.push(InlayHint {\n         range: pat.syntax().text_range(),\n         kind: InlayKind::TypeHint,\n-        label: ty.display_truncated(sema.db, max_inlay_hint_length).to_string().into(),\n+        label: ty.display_truncated(sema.db, inlay_hint_opts.max_length).to_string().into(),\n     });\n     Some(())\n }\n@@ -202,10 +224,65 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n \n #[cfg(test)]\n mod tests {\n+    use crate::inlay_hints::InlayConfig;\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n \n+    #[test]\n+    fn param_hints_only() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            fn foo(a: i32, b: i32) -> i32 { a + b }\n+            fn main() {\n+                let _x = foo(4, 4);\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [106; 107),\n+                kind: ParameterHint,\n+                label: \"a\",\n+            },\n+            InlayHint {\n+                range: [109; 110),\n+                kind: ParameterHint,\n+                label: \"b\",\n+            },\n+        ]\"###);\n+    }\n+\n+    #[test]\n+    fn hints_disabled() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            fn foo(a: i32, b: i32) -> i32 { a + b }\n+            fn main() {\n+                let _x = foo(4, 4);\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n+    }\n+\n+    #[test]\n+    fn type_hints_only() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            fn foo(a: i32, b: i32) -> i32 { a + b }\n+            fn main() {\n+                let _x = foo(4, 4);\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [97; 99),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+        ]\"###);\n+    }\n     #[test]\n     fn default_generic_types_should_not_be_displayed() {\n         let (analysis, file_id) = single_file(\n@@ -221,7 +298,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [69; 71),\n@@ -278,7 +355,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -358,7 +435,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -422,7 +499,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -472,7 +549,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -567,7 +644,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -662,7 +739,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [252; 256),\n@@ -734,7 +811,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),\n@@ -822,7 +899,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [798; 809),\n@@ -944,7 +1021,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -970,7 +1047,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );"}, {"sha": "922e4caa8a46f1fe5668d51e0fd0ee6442b5dec9", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -68,7 +68,7 @@ pub use crate::{\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n-    inlay_hints::{InlayHint, InlayKind},\n+    inlay_hints::{InlayConfig, InlayHint, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n@@ -319,9 +319,9 @@ impl Analysis {\n     pub fn inlay_hints(\n         &self,\n         file_id: FileId,\n-        max_inlay_hint_length: Option<usize>,\n+        inlay_hint_opts: &InlayConfig,\n     ) -> Cancelable<Vec<InlayHint>> {\n-        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, max_inlay_hint_length))\n+        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, inlay_hint_opts))\n     }\n \n     /// Returns the set of folding ranges."}, {"sha": "bd5904db001caed56a4d27ae443b9b6e1509c220", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -7,6 +7,8 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n+use crate::req::InlayConfigDef;\n+use ra_ide::InlayConfig;\n use rustc_hash::FxHashMap;\n \n use ra_project_model::CargoFeatures;\n@@ -30,7 +32,8 @@ pub struct ServerConfig {\n \n     pub lru_capacity: Option<usize>,\n \n-    pub max_inlay_hint_length: Option<usize>,\n+    #[serde(with = \"InlayConfigDef\")]\n+    pub inlay_hints: InlayConfig,\n \n     pub cargo_watch_enable: bool,\n     pub cargo_watch_args: Vec<String>,\n@@ -60,7 +63,7 @@ impl Default for ServerConfig {\n             exclude_globs: Vec::new(),\n             use_client_watching: false,\n             lru_capacity: None,\n-            max_inlay_hint_length: None,\n+            inlay_hints: Default::default(),\n             cargo_watch_enable: true,\n             cargo_watch_args: Vec::new(),\n             cargo_watch_command: \"check\".to_string(),"}, {"sha": "495056da3e143c17d67f29bbc69aeac4e4f2bf3b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -177,7 +177,7 @@ pub fn main_loop(\n                     .and_then(|it| it.folding_range.as_ref())\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n-                max_inlay_hint_length: config.max_inlay_hint_length,\n+                inlay_hints: config.inlay_hints,\n                 cargo_watch: CheckOptions {\n                     enable: config.cargo_watch_enable,\n                     args: config.cargo_watch_args,"}, {"sha": "921990da030dcb05dcb5d0ca86964c6fd26cc8f0", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -37,7 +37,7 @@ use crate::{\n     },\n     diagnostics::DiagnosticTask,\n     from_json,\n-    req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n+    req::{self, Decoration, InlayHint, InlayHintsParams},\n     semantic_tokens::SemanticTokensBuilder,\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -997,15 +997,12 @@ pub fn handle_inlay_hints(\n     let analysis = world.analysis();\n     let line_index = analysis.file_line_index(file_id)?;\n     Ok(analysis\n-        .inlay_hints(file_id, world.options.max_inlay_hint_length)?\n+        .inlay_hints(file_id, &world.options.inlay_hints)?\n         .into_iter()\n         .map(|api_type| InlayHint {\n             label: api_type.label.to_string(),\n             range: api_type.range.conv_with(&line_index),\n-            kind: match api_type.kind {\n-                ra_ide::InlayKind::TypeHint => InlayKind::TypeHint,\n-                ra_ide::InlayKind::ParameterHint => InlayKind::ParameterHint,\n-            },\n+            kind: api_type.kind,\n         })\n         .collect())\n }"}, {"sha": "1dcab2703e7b4ea7d3e2042eb6f8e989e1bc0f90", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -4,6 +4,8 @@ use lsp_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n+use ra_ide::{InlayConfig, InlayKind};\n+\n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,\n     CodeLensParams, CompletionParams, CompletionResponse, DiagnosticTag,\n@@ -196,14 +198,24 @@ pub struct InlayHintsParams {\n }\n \n #[derive(Debug, PartialEq, Eq, Deserialize, Serialize)]\n-pub enum InlayKind {\n+#[serde(remote = \"InlayKind\")]\n+pub enum InlayKindDef {\n     TypeHint,\n     ParameterHint,\n }\n \n+#[derive(Deserialize)]\n+#[serde(remote = \"InlayConfig\", rename_all = \"camelCase\")]\n+pub struct InlayConfigDef {\n+    pub type_hints: bool,\n+    pub parameter_hints: bool,\n+    pub max_length: Option<usize>,\n+}\n+\n #[derive(Debug, Deserialize, Serialize)]\n pub struct InlayHint {\n     pub range: Range,\n+    #[serde(with = \"InlayKindDef\")]\n     pub kind: InlayKind,\n     pub label: String,\n }"}, {"sha": "d358f6b47926153a32684fe113c2ab447ec28675", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -13,7 +13,8 @@ use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayConfig, LibraryData,\n+    SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n@@ -34,7 +35,7 @@ pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n-    pub max_inlay_hint_length: Option<usize>,\n+    pub inlay_hints: InlayConfig,\n     pub rustfmt_args: Vec<String>,\n     pub cargo_watch: CheckOptions,\n }"}, {"sha": "06bc7ded55660cc577d562ed859422c53548ac04", "filename": "docs/user/features.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -191,8 +191,8 @@ Two types of inlay hints are displayed currently:\n \n In VS Code, the following settings can be used to configure the inlay hints:\n \n-* `rust-analyzer.displayInlayHints` \u2014\u00a0toggles inlay hints display on or off\n-* `rust-analyzer.maxInlayHintLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n+* `rust-analyzer.inlayHintOpts.displayType` configure which types of inlay hints are shown.\n+* `rust-analyzer.inlayHintOpts.maxLength` \u2014\u00a0shortens the hints if their length exceeds the value specified. If no value is specified (`null`), no shortening is applied.\n \n **Note:** VS Code does not have native support for inlay hints [yet](https://github.com/microsoft/vscode/issues/16221) and the hints are implemented using decorations.\n This approach has limitations, the caret movement and bracket highlighting near the edges of the hint may be weird:"}, {"sha": "3aaae357a9b51a6ed62d0b5953359b7d157d3414", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -312,12 +312,17 @@\n                     \"exclusiveMinimum\": true,\n                     \"description\": \"Number of syntax trees rust-analyzer keeps in memory\"\n                 },\n-                \"rust-analyzer.displayInlayHints\": {\n+                \"rust-analyzer.inlayHints.typeHints\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n-                    \"description\": \"Display additional type and parameter information in the editor\"\n+                    \"description\": \"Whether to show inlay type hints\"\n                 },\n-                \"rust-analyzer.maxInlayHintLength\": {\n+                \"rust-analyzer.inlayHints.parameterHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to show function parameter name inlay hints at the call site\"\n+                },\n+                \"rust-analyzer.inlayHints.maxLength\": {\n                     \"type\": [\n                         \"null\",\n                         \"integer\""}, {"sha": "e9f261c2419f042575cf0a00c971af7ada3cf057", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -29,7 +29,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n         initializationOptions: {\n             publishDecorations: !config.highlightingSemanticTokens,\n             lruCapacity: config.lruCapacity,\n-            maxInlayHintLength: config.maxInlayHintLength,\n+            inlayHints: config.inlayHints,\n             cargoWatchEnable: cargoWatchOpts.enable,\n             cargoWatchArgs: cargoWatchOpts.arguments,\n             cargoWatchCommand: cargoWatchOpts.command,"}, {"sha": "6db073bec0238772ce388606d004b3dbe729affc", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -5,6 +5,12 @@ import { log } from \"./util\";\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n+export interface InlayHintOptions {\n+    typeHints: boolean;\n+    parameterHints: boolean;\n+    maxLength: number | null;\n+}\n+\n export interface CargoWatchOptions {\n     enable: boolean;\n     arguments: string[];\n@@ -22,7 +28,8 @@ export class Config {\n     private static readonly requiresReloadOpts = [\n         \"cargoFeatures\",\n         \"cargo-watch\",\n-        \"highlighting.semanticTokens\"\n+        \"highlighting.semanticTokens\",\n+        \"inlayHints\",\n     ]\n         .map(opt => `${Config.rootSection}.${opt}`);\n \n@@ -149,8 +156,13 @@ export class Config {\n     get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n     get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n     get lruCapacity() { return this.cfg.get(\"lruCapacity\") as null | number; }\n-    get displayInlayHints() { return this.cfg.get(\"displayInlayHints\") as boolean; }\n-    get maxInlayHintLength() { return this.cfg.get(\"maxInlayHintLength\") as number; }\n+    get inlayHints(): InlayHintOptions {\n+        return {\n+            typeHints: this.cfg.get(\"inlayHints.typeHints\") as boolean,\n+            parameterHints: this.cfg.get(\"inlayHints.parameterHints\") as boolean,\n+            maxLength: this.cfg.get(\"inlayHints.maxLength\") as null | number,\n+        };\n+    }\n     get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }\n     get useClientWatching() { return this.cfg.get(\"useClientWatching\") as boolean; }\n     get featureFlags() { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }"}, {"sha": "b19b09ad5619ac8dd1094de9e7914e56efa0e7a2", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d98a5fab46c5850a484349c50dda7cb823cc179a/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=d98a5fab46c5850a484349c50dda7cb823cc179a", "patch": "@@ -10,7 +10,7 @@ export function activateInlayHints(ctx: Ctx) {\n     const maybeUpdater = {\n         updater: null as null | HintsUpdater,\n         onConfigChange() {\n-            if (!ctx.config.displayInlayHints) {\n+            if (!ctx.config.inlayHints.typeHints && !ctx.config.inlayHints.parameterHints) {\n                 return this.dispose();\n             }\n             if (!this.updater) this.updater = new HintsUpdater(ctx);"}]}