{"sha": "0e3825d38cc459f9fcb24f1e95d4f6e867265300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMzgyNWQzOGNjNDU5ZjlmY2IyNGYxZTk1ZDRmNmU4NjcyNjUzMDA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-17T01:06:05Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-17T01:07:55Z"}, "message": "Add option::get_ref", "tree": {"sha": "503876b8bcd1f96a8829ab63a4842d3b592ca72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503876b8bcd1f96a8829ab63a4842d3b592ca72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3825d38cc459f9fcb24f1e95d4f6e867265300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3825d38cc459f9fcb24f1e95d4f6e867265300", "html_url": "https://github.com/rust-lang/rust/commit/0e3825d38cc459f9fcb24f1e95d4f6e867265300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3825d38cc459f9fcb24f1e95d4f6e867265300/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a076c287de55bd69328fbf542bf769ca20a12ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a076c287de55bd69328fbf542bf769ca20a12ab4", "html_url": "https://github.com/rust-lang/rust/commit/a076c287de55bd69328fbf542bf769ca20a12ab4"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "e677b9bde00da81cc41657ed865085344c3ec539", "filename": "src/libcore/option.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e3825d38cc459f9fcb24f1e95d4f6e867265300/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3825d38cc459f9fcb24f1e95d4f6e867265300/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0e3825d38cc459f9fcb24f1e95d4f6e867265300", "patch": "@@ -29,6 +29,20 @@ pure fn get<T: copy>(opt: option<T>) -> T {\n     }\n }\n \n+pure fn get_ref<T>(opt: &option<T>) -> &T {\n+    /*!\n+     * Gets an immutable reference to the value inside an option.\n+     *\n+     * # Failure\n+     *\n+     * Fails if the value equals `none`\n+     */\n+    match *opt {\n+        some(ref x) => x,\n+        none => fail ~\"option::get_ref none\"\n+    }\n+}\n+\n pure fn expect<T: copy>(opt: option<T>, reason: ~str) -> T {\n     #[doc = \"\n     Gets the value out of an option, printing a specified message on failure\n@@ -201,6 +215,8 @@ impl<T> &option<T> {\n     pure fn iter_ref(f: fn(x: &T)) { iter_ref(self, f) }\n     /// Maps a `some` value from one type to another by reference\n     pure fn map_ref<U>(f: fn(x: &T) -> U) -> option<U> { map_ref(self, f) }\n+    /// Gets an immutable reference to the value inside a `some`.\n+    pure fn get_ref() -> &self/T { get_ref(self) }\n }\n \n impl<T: copy> option<T> {"}]}