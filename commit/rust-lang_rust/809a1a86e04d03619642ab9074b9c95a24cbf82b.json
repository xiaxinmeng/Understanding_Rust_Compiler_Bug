{"sha": "809a1a86e04d03619642ab9074b9c95a24cbf82b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOWExYTg2ZTA0ZDAzNjE5NjQyYWI5MDc0YjljOTVhMjRjYmY4MmI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-24T20:43:51Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-26T19:01:52Z"}, "message": "mark str::string::String.trim.* functions as #[must_use].\n\nThe functions return a reference to a new object and do not modify in-place\nas the following code shows:\n````\nlet s = String::from(\"   hello   \");\ns.trim();\nassert_eq!(s, \"   hello   \");\n````\n\nThe new reference should be bound to a variable as now indicated by #[must_use].", "tree": {"sha": "f6f543e9a79c1e1519b5e88cf0d09fca3d0bcfbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6f543e9a79c1e1519b5e88cf0d09fca3d0bcfbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/809a1a86e04d03619642ab9074b9c95a24cbf82b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/809a1a86e04d03619642ab9074b9c95a24cbf82b", "html_url": "https://github.com/rust-lang/rust/commit/809a1a86e04d03619642ab9074b9c95a24cbf82b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/809a1a86e04d03619642ab9074b9c95a24cbf82b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "html_url": "https://github.com/rust-lang/rust/commit/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "a8b8b44413e134ab0d7bfddb34b6b4af0fb69cf2", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/809a1a86e04d03619642ab9074b9c95a24cbf82b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809a1a86e04d03619642ab9074b9c95a24cbf82b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=809a1a86e04d03619642ab9074b9c95a24cbf82b", "patch": "@@ -3544,6 +3544,8 @@ impl str {\n     ///\n     /// assert_eq!(\"Hello\\tworld\", s.trim());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim(&self) -> &str {\n         self.trim_matches(|c: char| c.is_whitespace())\n@@ -3579,6 +3581,8 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05e2') == s.trim_start().chars().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_start(&self) -> &str {\n         self.trim_start_matches(|c: char| c.is_whitespace())\n@@ -3614,6 +3618,8 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05ea') == s.trim_end().chars().rev().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_end(&self) -> &str {\n         self.trim_end_matches(|c: char| c.is_whitespace())\n@@ -3716,6 +3722,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: DoubleEndedSearcher<'a>\n@@ -3761,6 +3769,8 @@ impl str {\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n         let mut i = self.len();\n@@ -3804,6 +3814,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_end_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: ReverseSearcher<'a>"}]}