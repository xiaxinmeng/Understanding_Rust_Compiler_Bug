{"sha": "ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjM2Q0Y2NjZWEzMjI1NDY4YTNjOGZmOGVhMThiNjAxNjZjODRmYjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-31T05:15:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-08T17:41:51Z"}, "message": "Explain that associated types and consts can't be accessed directly on the trait's path", "tree": {"sha": "5b35898d4c14ad08c286fadbd4212930f9657243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b35898d4c14ad08c286fadbd4212930f9657243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "html_url": "https://github.com/rust-lang/rust/commit/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6468da160bd67a2ce0573427f09a98daff8c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "html_url": "https://github.com/rust-lang/rust/commit/ed6468da160bd67a2ce0573427f09a98daff8c07"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "a856d2fd960c8d683da1961059c4dcbb42281240", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "patch": "@@ -2075,7 +2075,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 let mut err = self.need_type_info_err(body_id, span, self_ty, ErrorCode::E0283);\n                 err.note(&format!(\"cannot resolve `{}`\", predicate));\n-                if let (Ok(ref snippet), ObligationCauseCode::BindingObligation(ref def_id, _)) =\n+                if let ObligationCauseCode::ItemObligation(def_id) = obligation.cause.code {\n+                    if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {\n+                        if let ty::AssocKind::Const | ty::AssocKind::Type = assoc_item.kind {\n+                            err.note(&format!(\n+                                \"{}s cannot be accessed directly on a `trait`, they can only be \\\n+                                 accessed through a specific `impl`\",\n+                                assoc_item.kind.suggestion_descr(),\n+                            ));\n+                            err.span_suggestion(\n+                                span,\n+                                \"use the fully qualified path to an implementation\",\n+                                format!(\n+                                    \"<Type as {}>::{}\",\n+                                    self.tcx.def_path_str(trait_ref.def_id()),\n+                                    assoc_item.ident\n+                                ),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        }\n+                    }\n+                } else if let (\n+                    Ok(ref snippet),\n+                    ObligationCauseCode::BindingObligation(ref def_id, _),\n+                ) =\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);"}, {"sha": "3a70e7d43c25ef96bc7dd859b2e635aef659af06", "filename": "src/test/ui/associated-const/issue-63496.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fissue-63496.stderr?ref=ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "patch": "@@ -5,9 +5,13 @@ LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                     ^^^^ cannot infer type\n+   |                     ^^^^\n+   |                     |\n+   |                     cannot infer type\n+   |                     help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n    = note: cannot resolve `_: A`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-63496.rs:4:33\n@@ -16,9 +20,13 @@ LL |     const C: usize;\n    |     --------------- required by `A::C`\n LL | \n LL |     fn f() -> ([u8; A::C], [u8; A::C]);\n-   |                                 ^^^^ cannot infer type\n+   |                                 ^^^^\n+   |                                 |\n+   |                                 cannot infer type\n+   |                                 help: use the fully qualified path to an implementation: `<Type as A>::C`\n    |\n    = note: cannot resolve `_: A`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ddabd552897a8e79eb25480f014522732e2ead71", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "patch": "@@ -13,9 +13,13 @@ error[E0283]: type annotations needed\n LL |     const X: usize;\n    |     --------------- required by `Bar::X`\n LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^ cannot infer type\n+   |                                ^^^^^^\n+   |                                |\n+   |                                cannot infer type\n+   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n    |\n    = note: cannot resolve `_: Bar`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "70a7c38b8342582b2930ff035e31b474645add44", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac3d4cccea3225468a3c8ff8ea18b60166c84fb8/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=ac3d4cccea3225468a3c8ff8ea18b60166c84fb8", "patch": "@@ -11,9 +11,13 @@ LL |     const SIZE: usize;\n    |     ------------------ required by `Foo::SIZE`\n LL | \n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n-   |                         ^^^^^^^^^ cannot infer type\n+   |                         ^^^^^^^^^\n+   |                         |\n+   |                         cannot infer type\n+   |                         help: use the fully qualified path to an implementation: `<Type as Foo>::SIZE`\n    |\n    = note: cannot resolve `_: Foo`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n \n error: aborting due to 2 previous errors\n "}]}