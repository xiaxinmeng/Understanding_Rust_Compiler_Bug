{"sha": "976bfc032266e1b6f8281c1f08df3d6cb8242776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NmJmYzAzMjI2NmUxYjZmODI4MWMxZjA4ZGYzZDZjYjgyNDI3NzY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-16T19:40:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-16T20:13:44Z"}, "message": "Add examples for Ipv4Addr", "tree": {"sha": "8069a64cdc4e241e97a9733ca99f05639455b1cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8069a64cdc4e241e97a9733ca99f05639455b1cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976bfc032266e1b6f8281c1f08df3d6cb8242776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976bfc032266e1b6f8281c1f08df3d6cb8242776", "html_url": "https://github.com/rust-lang/rust/commit/976bfc032266e1b6f8281c1f08df3d6cb8242776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976bfc032266e1b6f8281c1f08df3d6cb8242776/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27acb5ca11cea8c48030f440772111805dbb9520", "url": "https://api.github.com/repos/rust-lang/rust/commits/27acb5ca11cea8c48030f440772111805dbb9520", "html_url": "https://github.com/rust-lang/rust/commit/27acb5ca11cea8c48030f440772111805dbb9520"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "7b7be6e2eeeb3628c61afe8c5f70da74612c1e2a", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 124, "deletions": 1, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/976bfc032266e1b6f8281c1f08df3d6cb8242776/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976bfc032266e1b6f8281c1f08df3d6cb8242776/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=976bfc032266e1b6f8281c1f08df3d6cb8242776", "patch": "@@ -154,6 +154,14 @@ impl Ipv4Addr {\n     /// Creates a new IPv4 address from four eight-bit octets.\n     ///\n     /// The result will represent the IP address `a`.`b`.`c`.`d`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         Ipv4Addr {\n@@ -167,6 +175,15 @@ impl Ipv4Addr {\n     }\n \n     /// Returns the four eight-bit integers that make up this address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n+    /// assert_eq!(addr.octets(), [127, 0, 0, 1]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n         let bits = ntoh(self.inner.s_addr);\n@@ -178,7 +195,16 @@ impl Ipv4Addr {\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7].\n     ///\n-    /// [ip7]: (http://man7.org/linux/man-pages/man7/ip.7.html)\n+    /// [ip7]: http://man7.org/linux/man-pages/man7/ip.7.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_unspecified(), true);\n+    /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n+    /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n@@ -189,6 +215,15 @@ impl Ipv4Addr {\n     /// This property is defined by [RFC 1122].\n     ///\n     /// [RFC 1122]: https://tools.ietf.org/html/rfc1122\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(127, 0, 0, 1).is_loopback(), true);\n+    /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_loopback(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_loopback(&self) -> bool {\n         self.octets()[0] == 127\n@@ -203,6 +238,20 @@ impl Ipv4Addr {\n     ///  - 192.168.0.0/16\n     ///\n     /// [RFC 1918]: https://tools.ietf.org/html/rfc1918\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(10, 0, 0, 1).is_private(), true);\n+    /// assert_eq!(Ipv4Addr::new(10, 10, 10, 10).is_private(), true);\n+    /// assert_eq!(Ipv4Addr::new(172, 16, 10, 10).is_private(), true);\n+    /// assert_eq!(Ipv4Addr::new(172, 29, 45, 14).is_private(), true);\n+    /// assert_eq!(Ipv4Addr::new(172, 32, 0, 2).is_private(), false);\n+    /// assert_eq!(Ipv4Addr::new(192, 168, 0, 2).is_private(), true);\n+    /// assert_eq!(Ipv4Addr::new(192, 169, 0, 2).is_private(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_private(&self) -> bool {\n         match (self.octets()[0], self.octets()[1]) {\n@@ -218,6 +267,16 @@ impl Ipv4Addr {\n     /// This property is defined by [RFC 3927].\n     ///\n     /// [RFC 3927]: https://tools.ietf.org/html/rfc3927\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(169, 254, 0, 0).is_link_local(), true);\n+    /// assert_eq!(Ipv4Addr::new(169, 254, 10, 65).is_link_local(), true);\n+    /// assert_eq!(Ipv4Addr::new(16, 89, 10, 65).is_link_local(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_link_local(&self) -> bool {\n         self.octets()[0] == 169 && self.octets()[1] == 254\n@@ -236,6 +295,22 @@ impl Ipv4Addr {\n     /// - the unspecified address (0.0.0.0)\n     ///\n     /// [ipv4-sr]: http://goo.gl/RaZ7lg\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(Ipv4Addr::new(10, 254, 0, 0).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(192, 168, 10, 65).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(0, 0, 0, 0).is_global(), false);\n+    ///     assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n+    /// }\n+    /// ```\n     pub fn is_global(&self) -> bool {\n         !self.is_private() && !self.is_loopback() && !self.is_link_local() &&\n         !self.is_broadcast() && !self.is_documentation() && !self.is_unspecified()\n@@ -247,6 +322,16 @@ impl Ipv4Addr {\n     /// and is defined by [RFC 5771].\n     ///\n     /// [RFC 5771]: https://tools.ietf.org/html/rfc5771\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(224, 254, 0, 0).is_multicast(), true);\n+    /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_multicast(), true);\n+    /// assert_eq!(Ipv4Addr::new(172, 16, 10, 65).is_multicast(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_multicast(&self) -> bool {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n@@ -257,6 +342,15 @@ impl Ipv4Addr {\n     /// A broadcast address has all octets set to 255 as defined in [RFC 919].\n     ///\n     /// [RFC 919]: https://tools.ietf.org/html/rfc919\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_broadcast(), true);\n+    /// assert_eq!(Ipv4Addr::new(236, 168, 10, 65).is_broadcast(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_broadcast(&self) -> bool {\n         self.octets()[0] == 255 && self.octets()[1] == 255 &&\n@@ -272,6 +366,17 @@ impl Ipv4Addr {\n     /// - 203.0.113.0/24 (TEST-NET-3)\n     ///\n     /// [RFC 5737]: https://tools.ietf.org/html/rfc5737\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).is_documentation(), true);\n+    /// assert_eq!(Ipv4Addr::new(198, 51, 100, 65).is_documentation(), true);\n+    /// assert_eq!(Ipv4Addr::new(203, 0, 113, 6).is_documentation(), true);\n+    /// assert_eq!(Ipv4Addr::new(193, 34, 17, 19).is_documentation(), false);\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_documentation(&self) -> bool {\n         match(self.octets()[0], self.octets()[1], self.octets()[2], self.octets()[3]) {\n@@ -285,6 +390,15 @@ impl Ipv4Addr {\n     /// Converts this address to an IPv4-compatible IPv6 address.\n     ///\n     /// a.b.c.d becomes ::a.b.c.d\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_compatible(),\n+    ///            Ipv6Addr::new(0, 0, 0, 0, 0, 0, 49152, 767));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n         Ipv6Addr::new(0, 0, 0, 0, 0, 0,\n@@ -295,6 +409,15 @@ impl Ipv4Addr {\n     /// Converts this address to an IPv4-mapped IPv6 address.\n     ///\n     /// a.b.c.d becomes ::ffff:a.b.c.d\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_mapped(),\n+    ///            Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 49152, 767));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n         Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff,"}]}