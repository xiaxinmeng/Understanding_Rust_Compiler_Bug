{"sha": "9e6725dcfe59665384e51ceb04280fee725d09a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjcyNWRjZmU1OTY2NTM4NGU1MWNlYjA0MjgwZmVlNzI1ZDA5YTM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-06T21:03:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-09T19:33:23Z"}, "message": "resolve: Resolve visibilities on fields with non-builtin attributes", "tree": {"sha": "258c63c982959b69433e018bfe16a8a1fe8c987b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/258c63c982959b69433e018bfe16a8a1fe8c987b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6725dcfe59665384e51ceb04280fee725d09a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6725dcfe59665384e51ceb04280fee725d09a3", "html_url": "https://github.com/rust-lang/rust/commit/9e6725dcfe59665384e51ceb04280fee725d09a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6725dcfe59665384e51ceb04280fee725d09a3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de9402b77ded0d8ec9e1c554521b2121449ef2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de9402b77ded0d8ec9e1c554521b2121449ef2b", "html_url": "https://github.com/rust-lang/rust/commit/7de9402b77ded0d8ec9e1c554521b2121449ef2b"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "cfe88f67b949046dc639b7d57cfaffa3661a1c14", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e6725dcfe59665384e51ceb04280fee725d09a3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6725dcfe59665384e51ceb04280fee725d09a3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9e6725dcfe59665384e51ceb04280fee725d09a3", "patch": "@@ -192,6 +192,14 @@ impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {\n \n impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {\n+        self.resolve_visibility_speculative(vis, false)\n+    }\n+\n+    fn resolve_visibility_speculative(\n+        &mut self,\n+        vis: &ast::Visibility,\n+        speculative: bool,\n+    ) -> ty::Visibility {\n         let parent_scope = &self.parent_scope;\n         match vis.node {\n             ast::VisibilityKind::Public => ty::Visibility::Public,\n@@ -239,13 +247,15 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     &segments,\n                     Some(TypeNS),\n                     parent_scope,\n-                    true,\n+                    !speculative,\n                     path.span,\n                     CrateLint::SimplePath(id),\n                 ) {\n                     PathResult::Module(ModuleOrUniformRoot::Module(module)) => {\n                         let res = module.res().expect(\"visibility resolved to unnamed block\");\n-                        self.r.record_partial_res(id, PartialRes::new(res));\n+                        if !speculative {\n+                            self.r.record_partial_res(id, PartialRes::new(res));\n+                        }\n                         if module.is_normal() {\n                             if res == Res::Err {\n                                 ty::Visibility::Public\n@@ -747,7 +757,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     // NOTE: The field may be an expansion placeholder, but expansion sets correct\n                     // visibilities for unnamed field placeholders specifically, so the constructor\n                     // visibility should still be determined correctly.\n-                    let field_vis = self.resolve_visibility(&field.vis);\n+                    let field_vis = self.resolve_visibility_speculative(&field.vis, true);\n                     if ctor_vis.is_at_least(field_vis, &*self.r) {\n                         ctor_vis = field_vis;\n                     }\n@@ -774,7 +784,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n                 // Record field names for error reporting.\n                 let field_names = vdata.fields().iter().map(|field| {\n-                    self.resolve_visibility(&field.vis);\n                     respan(field.span, field.ident.map_or(kw::Invalid, |ident| ident.name))\n                 }).collect();\n                 let item_def_id = self.r.definitions.local_def_id(item.id);\n@@ -1281,6 +1290,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         if sf.is_placeholder {\n             self.visit_invoc(sf.id);\n         } else {\n+            self.resolve_visibility(&sf.vis);\n             visit::walk_struct_field(self, sf);\n         }\n     }"}, {"sha": "36f3feb973d6dc6473b38c21aca95ea1687bd5d5", "filename": "src/test/ui/attributes/field-attributes-vis-unresolved.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e6725dcfe59665384e51ceb04280fee725d09a3/src%2Ftest%2Fui%2Fattributes%2Ffield-attributes-vis-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6725dcfe59665384e51ceb04280fee725d09a3/src%2Ftest%2Fui%2Fattributes%2Ffield-attributes-vis-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Ffield-attributes-vis-unresolved.rs?ref=9e6725dcfe59665384e51ceb04280fee725d09a3", "patch": "@@ -0,0 +1,26 @@\n+// Non-builtin attributes do not mess with field visibility resolution (issue #67006).\n+\n+mod internal {\n+    struct S {\n+        #[rustfmt::skip]\n+        pub(in crate::internal) field: u8 // OK\n+    }\n+\n+    struct Z(\n+        #[rustfmt::skip]\n+        pub(in crate::internal) u8 // OK\n+    );\n+}\n+\n+struct S {\n+    #[rustfmt::skip]\n+    pub(in nonexistent) field: u8 //~ ERROR failed to resolve\n+}\n+\n+struct Z(\n+    #[rustfmt::skip]\n+    pub(in nonexistent) u8 //~ ERROR failed to resolve\n+                           //~| ERROR cannot determine resolution for the visibility\n+);\n+\n+fn main() {}"}, {"sha": "8c283e9bcb991ddc707776d6acb39831295d3a2c", "filename": "src/test/ui/attributes/field-attributes-vis-unresolved.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e6725dcfe59665384e51ceb04280fee725d09a3/src%2Ftest%2Fui%2Fattributes%2Ffield-attributes-vis-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e6725dcfe59665384e51ceb04280fee725d09a3/src%2Ftest%2Fui%2Fattributes%2Ffield-attributes-vis-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Ffield-attributes-vis-unresolved.stderr?ref=9e6725dcfe59665384e51ceb04280fee725d09a3", "patch": "@@ -0,0 +1,22 @@\n+error[E0578]: cannot determine resolution for the visibility\n+  --> $DIR/field-attributes-vis-unresolved.rs:22:12\n+   |\n+LL |     pub(in nonexistent) u8\n+   |            ^^^^^^^^^^^\n+\n+error[E0433]: failed to resolve: maybe a missing crate `nonexistent`?\n+  --> $DIR/field-attributes-vis-unresolved.rs:17:12\n+   |\n+LL |     pub(in nonexistent) field: u8\n+   |            ^^^^^^^^^^^ maybe a missing crate `nonexistent`?\n+\n+error[E0433]: failed to resolve: maybe a missing crate `nonexistent`?\n+  --> $DIR/field-attributes-vis-unresolved.rs:22:12\n+   |\n+LL |     pub(in nonexistent) u8\n+   |            ^^^^^^^^^^^ maybe a missing crate `nonexistent`?\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0433, E0578.\n+For more information about an error, try `rustc --explain E0433`."}]}