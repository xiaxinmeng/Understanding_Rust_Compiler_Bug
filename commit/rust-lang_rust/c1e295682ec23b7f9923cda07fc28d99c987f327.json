{"sha": "c1e295682ec23b7f9923cda07fc28d99c987f327", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZTI5NTY4MmVjMjNiN2Y5OTIzY2RhMDdmYzI4ZDk5Yzk4N2YzMjc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-10T14:34:04Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-10T15:20:01Z"}, "message": "Implement glob imports from enums", "tree": {"sha": "7a100235bbd6b751434433ffd565c18d20707651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a100235bbd6b751434433ffd565c18d20707651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e295682ec23b7f9923cda07fc28d99c987f327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e295682ec23b7f9923cda07fc28d99c987f327", "html_url": "https://github.com/rust-lang/rust/commit/c1e295682ec23b7f9923cda07fc28d99c987f327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e295682ec23b7f9923cda07fc28d99c987f327/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35cfb418baa8c7f37a27152bcb1894275c2abee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/35cfb418baa8c7f37a27152bcb1894275c2abee2", "html_url": "https://github.com/rust-lang/rust/commit/35cfb418baa8c7f37a27152bcb1894275c2abee2"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "94a08aa63c68ca59e416bc0b02735beb09b31b6c", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1e295682ec23b7f9923cda07fc28d99c987f327/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e295682ec23b7f9923cda07fc28d99c987f327/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=c1e295682ec23b7f9923cda07fc28d99c987f327", "patch": "@@ -327,7 +327,7 @@ impl Enum {\n         db.enum_data(*self).name.clone()\n     }\n \n-    pub fn variants(&self, db: &impl HirDatabase) -> Vec<EnumVariant> {\n+    pub fn variants(&self, db: &impl PersistentHirDatabase) -> Vec<EnumVariant> {\n         db.enum_data(*self)\n             .variants\n             .iter()\n@@ -389,7 +389,7 @@ impl EnumVariant {\n         self.parent\n     }\n \n-    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+    pub fn name(&self, db: &impl PersistentHirDatabase) -> Option<Name> {\n         db.enum_data(self.parent).variants[self.id].name.clone()\n     }\n "}, {"sha": "0b6ab12110cfa4edccdc23cb795a9a360b3d3423", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1e295682ec23b7f9923cda07fc28d99c987f327/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e295682ec23b7f9923cda07fc28d99c987f327/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=c1e295682ec23b7f9923cda07fc28d99c987f327", "patch": "@@ -264,14 +264,45 @@ where\n         import: &ImportData,\n     ) -> ReachedFixedPoint {\n         log::debug!(\"resolving import: {:?}\", import);\n-        if import.is_glob {\n-            return ReachedFixedPoint::Yes;\n-        };\n         let original_module = Module { krate: self.krate, module_id };\n         let (def, reached_fixedpoint) =\n             self.result.resolve_path_fp(self.db, original_module, &import.path);\n \n-        if reached_fixedpoint == ReachedFixedPoint::Yes {\n+        if reached_fixedpoint != ReachedFixedPoint::Yes {\n+            return reached_fixedpoint;\n+        }\n+\n+        if import.is_glob {\n+            log::debug!(\"glob import: {:?}\", import);\n+            match def.take_types() {\n+                Some(ModuleDef::Module(m)) => {\n+                    // TODO\n+                }\n+                Some(ModuleDef::Enum(e)) => {\n+                    tested_by!(glob_enum);\n+                    let variants = e.variants(self.db);\n+                    let resolutions = variants.into_iter()\n+                        .filter_map(|variant| {\n+                            let res = Resolution {\n+                                def: PerNs::both(variant.into(), e.into()),\n+                                import: Some(import_id),\n+                            };\n+                            let name = variant.name(self.db)?;\n+                            Some((name, res))\n+                        })\n+                        .collect::<Vec<_>>();\n+                    self.update(module_id, |items| {\n+                        items.items.extend(resolutions);\n+                    });\n+                }\n+                Some(d) => {\n+                    log::debug!(\"glob import {:?} from non-module/enum {:?}\", import, d);\n+                }\n+                None => {\n+                    log::debug!(\"glob import {:?} didn't resolve as type\", import);\n+                }\n+            }\n+        } else {\n             let last_segment = import.path.segments.last().unwrap();\n             let name = import.alias.clone().unwrap_or_else(|| last_segment.name.clone());\n             log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);"}]}