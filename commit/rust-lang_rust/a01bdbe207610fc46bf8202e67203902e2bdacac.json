{"sha": "a01bdbe207610fc46bf8202e67203902e2bdacac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMWJkYmUyMDc2MTBmYzQ2YmY4MjAyZTY3MjAzOTAyZTJiZGFjYWM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-20T17:30:48Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-20T17:30:48Z"}, "message": "Don't reverse all the arguments to span_lint for lint checking passes.", "tree": {"sha": "44bb25509919a7b13f04a4d7c65c2e50fff7f529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44bb25509919a7b13f04a4d7c65c2e50fff7f529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a01bdbe207610fc46bf8202e67203902e2bdacac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a01bdbe207610fc46bf8202e67203902e2bdacac", "html_url": "https://github.com/rust-lang/rust/commit/a01bdbe207610fc46bf8202e67203902e2bdacac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a01bdbe207610fc46bf8202e67203902e2bdacac/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de491ea7078b143c4eee30e912db06a0742488d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de491ea7078b143c4eee30e912db06a0742488d2", "html_url": "https://github.com/rust-lang/rust/commit/de491ea7078b143c4eee30e912db06a0742488d2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "8006b7987952e35a85cfccaedaf534ad58bcb10a", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a01bdbe207610fc46bf8202e67203902e2bdacac/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01bdbe207610fc46bf8202e67203902e2bdacac/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=a01bdbe207610fc46bf8202e67203902e2bdacac", "patch": "@@ -331,7 +331,7 @@ fn check_item_while_true(cx: ty::ctxt, it: @ast::item) {\n                 alt cond.node {\n                     ast::expr_lit(@{node: ast::lit_bool(true),_}) {\n                             cx.sess.span_lint(\n-                                while_true, it.id, e.id,\n+                                while_true, e.id, it.id,\n                                 e.span,\n                                 \"denote infinite loops with loop { ... }\");\n                     }\n@@ -357,14 +357,14 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n                 alt cx.def_map.get(id) {\n                   ast::def_prim_ty(ast::ty_int(ast::ty_i)) {\n                     cx.sess.span_lint(\n-                        ctypes, fn_id, id,\n+                        ctypes, id, fn_id,\n                         ty.span,\n                         \"found rust type `int` in native module, while \\\n                          libc::c_int or libc::c_long should be used\");\n                   }\n                   ast::def_prim_ty(ast::ty_uint(ast::ty_u)) {\n                     cx.sess.span_lint(\n-                        ctypes, fn_id, id,\n+                        ctypes, id, fn_id,\n                         ty.span,\n                         \"found rust type `uint` in native module, while \\\n                          libc::c_uint or libc::c_ulong should be used\");\n@@ -400,7 +400,7 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n                                node: ast::expr_path(@path),\n                                span: _}, _) {\n                 cx.sess.span_lint(\n-                    path_statement, it.id, id,\n+                    path_statement, id, it.id,\n                     s.span,\n                     \"path statement with no effect\");\n               }\n@@ -423,7 +423,7 @@ fn check_item_old_vecs(cx: ty::ctxt, it: @ast::item) {\n               ast::expr_lit(@{node: ast::lit_str(_), span:_})\n               if ! uses_vstore.contains_key(e.id) {\n                 cx.sess.span_lint(\n-                    old_vecs, it.id, e.id,\n+                    old_vecs, e.id, it.id,\n                     e.span, \"deprecated vec/str expr\");\n               }\n               ast::expr_vstore(@inner, _) {\n@@ -438,15 +438,15 @@ fn check_item_old_vecs(cx: ty::ctxt, it: @ast::item) {\n               ast::ty_vec(_)\n               if ! uses_vstore.contains_key(t.id) {\n                 cx.sess.span_lint(\n-                    old_vecs, it.id, t.id,\n+                    old_vecs, t.id, it.id,\n                     t.span, \"deprecated vec type\");\n               }\n \n               ast::ty_path(@{span: _, global: _, idents: ids,\n                              rp: none, types: _}, _)\n               if ids == [@\"str\"] && (! uses_vstore.contains_key(t.id)) {\n                 cx.sess.span_lint(\n-                    old_vecs, it.id, t.id,\n+                    old_vecs, t.id, it.id,\n                     t.span, \"deprecated str type\");\n               }\n "}]}