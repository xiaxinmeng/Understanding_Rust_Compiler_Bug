{"sha": "12ecafb31da2d0fe4654587375b464ea4d1151b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZWNhZmIzMWRhMmQwZmU0NjU0NTg3Mzc1YjQ2NGVhNGQxMTUxYjE=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-07T17:57:35Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-20T09:16:55Z"}, "message": "Replace Freeze bounds with Share bounds", "tree": {"sha": "5e8de06feb4495f1e25a9ac090d75bdfeb2b9edb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8de06feb4495f1e25a9ac090d75bdfeb2b9edb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ecafb31da2d0fe4654587375b464ea4d1151b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ecafb31da2d0fe4654587375b464ea4d1151b1", "html_url": "https://github.com/rust-lang/rust/commit/12ecafb31da2d0fe4654587375b464ea4d1151b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ecafb31da2d0fe4654587375b464ea4d1151b1/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d23ff25b3709bbd72b62613ba6db00d65bf1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d23ff25b3709bbd72b62613ba6db00d65bf1a4", "html_url": "https://github.com/rust-lang/rust/commit/21d23ff25b3709bbd72b62613ba6db00d65bf1a4"}], "stats": {"total": 117, "additions": 63, "deletions": 54}, "files": [{"sha": "71adab71734b99d889ea4b9f7c4b576a610c0ddf", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -54,6 +54,9 @@ use std::kinds::marker;\n use std::sync::arc::UnsafeArc;\n use std::task;\n \n+#[cfg(stage0)]\n+use std::kinds::Share;\n+\n /// As sync::condvar, a mechanism for unlock-and-descheduling and\n /// signaling, for use with the Arc types.\n pub struct ArcCondvar<'a> {\n@@ -122,7 +125,7 @@ pub struct Arc<T> { priv x: UnsafeArc<T> }\n  * Access the underlying data in an atomically reference counted\n  * wrapper.\n  */\n-impl<T:Freeze+Send> Arc<T> {\n+impl<T: Share + Send> Arc<T> {\n     /// Create an atomically reference counted wrapper.\n     #[inline]\n     pub fn new(data: T) -> Arc<T> {\n@@ -135,7 +138,7 @@ impl<T:Freeze+Send> Arc<T> {\n     }\n }\n \n-impl<T:Freeze + Send> Clone for Arc<T> {\n+impl<T: Share + Send> Clone for Arc<T> {\n     /**\n     * Duplicate an atomically reference counted wrapper.\n     *\n@@ -295,19 +298,21 @@ struct RWArcInner<T> { lock: RWLock, failed: bool, data: T }\n pub struct RWArc<T> {\n     priv x: UnsafeArc<RWArcInner<T>>,\n     priv marker: marker::NoFreeze,\n+    priv marker1: marker::NoShare,\n }\n \n-impl<T:Freeze + Send> Clone for RWArc<T> {\n+impl<T: Share + Send> Clone for RWArc<T> {\n     /// Duplicate a rwlock-protected Arc. See arc::clone for more details.\n     #[inline]\n     fn clone(&self) -> RWArc<T> {\n         RWArc { x: self.x.clone(),\n-                marker: marker::NoFreeze, }\n+                marker: marker::NoFreeze,\n+                marker1: marker::NoShare, }\n     }\n \n }\n \n-impl<T:Freeze + Send> RWArc<T> {\n+impl<T: Share + Send> RWArc<T> {\n     /// Create a reader/writer Arc with the supplied data.\n     pub fn new(user_data: T) -> RWArc<T> {\n         RWArc::new_with_condvars(user_data, 1)\n@@ -323,7 +328,8 @@ impl<T:Freeze + Send> RWArc<T> {\n             failed: false, data: user_data\n         };\n         RWArc { x: UnsafeArc::new(data),\n-                marker: marker::NoFreeze, }\n+                marker: marker::NoFreeze,\n+                marker1: marker::NoShare, }\n     }\n \n     /**\n@@ -454,7 +460,7 @@ impl<T:Freeze + Send> RWArc<T> {\n // lock it. This wraps the unsafety, with the justification that the 'lock'\n // field is never overwritten; only 'failed' and 'data'.\n #[doc(hidden)]\n-fn borrow_rwlock<T:Freeze + Send>(state: *mut RWArcInner<T>) -> *RWLock {\n+fn borrow_rwlock<T: Share + Send>(state: *mut RWArcInner<T>) -> *RWLock {\n     unsafe { cast::transmute(&(*state).lock) }\n }\n \n@@ -471,7 +477,7 @@ pub struct RWReadMode<'a, T> {\n     priv token: sync::RWLockReadMode<'a>,\n }\n \n-impl<'a, T:Freeze + Send> RWWriteMode<'a, T> {\n+impl<'a, T: Share + Send> RWWriteMode<'a, T> {\n     /// Access the pre-downgrade RWArc in write mode.\n     pub fn write<U>(&mut self, blk: |x: &mut T| -> U) -> U {\n         match *self {\n@@ -510,7 +516,7 @@ impl<'a, T:Freeze + Send> RWWriteMode<'a, T> {\n     }\n }\n \n-impl<'a, T:Freeze + Send> RWReadMode<'a, T> {\n+impl<'a, T: Share + Send> RWReadMode<'a, T> {\n     /// Access the post-downgrade rwlock in read mode.\n     pub fn read<U>(&self, blk: |x: &T| -> U) -> U {\n         match *self {\n@@ -534,7 +540,7 @@ pub struct CowArc<T> { priv x: UnsafeArc<T> }\n /// mutation of the contents if there is only a single reference to\n /// the data. If there are multiple references the data is automatically\n /// cloned and the task modifies the cloned data in place of the shared data.\n-impl<T:Clone+Send+Freeze> CowArc<T> {\n+impl<T: Clone + Send + Share> CowArc<T> {\n     /// Create a copy-on-write atomically reference counted wrapper\n     #[inline]\n     pub fn new(data: T) -> CowArc<T> {\n@@ -558,7 +564,7 @@ impl<T:Clone+Send+Freeze> CowArc<T> {\n     }\n }\n \n-impl<T:Clone+Send+Freeze> Clone for CowArc<T> {\n+impl<T: Clone + Send + Share> Clone for CowArc<T> {\n     /// Duplicate a Copy-on-write Arc. See arc::clone for more details.\n     fn clone(&self) -> CowArc<T> {\n         CowArc { x: self.x.clone() }"}, {"sha": "0f982741fc16188b3978296ce41d6564f1f4a043", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -1159,12 +1159,12 @@ mod test {\n \n     use std::vec_ng::Vec;\n \n-    fn is_freeze<T: Freeze>() {}\n+    fn is_share<T: Share>() {}\n \n-    // Assert that the AST remains Freeze (#10693).\n+    // Assert that the AST remains sharable.\n     #[test]\n-    fn ast_is_freeze() {\n-        is_freeze::<Item>();\n+    fn ast_is_share() {\n+        is_share::<Item>();\n     }\n \n     // are ASTs encodable?"}, {"sha": "e290932a3033218582aaafcd9a870c9a57f00827", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -23,13 +23,16 @@ use std::hash::Hash;\n use std::rc::Rc;\n use std::vec_ng::Vec;\n \n+#[cfg(stage0)]\n+use std::kinds::Share;\n+\n pub struct Interner<T> {\n     priv map: RefCell<HashMap<T, Name>>,\n     priv vect: RefCell<Vec<T> >,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n-impl<T:Eq + Hash + Freeze + Clone + 'static> Interner<T> {\n+impl<T: Eq + Hash + Share + Clone + 'static> Interner<T> {\n     pub fn new() -> Interner<T> {\n         Interner {\n             map: RefCell::new(HashMap::new()),"}, {"sha": "51bbb59b77eca84f73502c27c84539a2b67efa6d", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -16,17 +16,17 @@ struct arc_destruct<T> {\n }\n \n #[unsafe_destructor]\n-impl<T:Freeze> Drop for arc_destruct<T> {\n+impl<T: Share> Drop for arc_destruct<T> {\n     fn drop(&mut self) {}\n }\n \n-fn arc_destruct<T:Freeze>(data: int) -> arc_destruct<T> {\n+fn arc_destruct<T: Share>(data: int) -> arc_destruct<T> {\n     arc_destruct {\n         _data: data\n     }\n }\n \n-fn arc<T:Freeze>(_data: T) -> arc_destruct<T> {\n+fn arc<T: Share>(_data: T) -> arc_destruct<T> {\n     arc_destruct(0)\n }\n "}, {"sha": "7de38e6173be1ee3628fb07ccd76a092870ef29b", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -11,12 +11,12 @@\n // Test for traits that inherit from multiple builtin kinds at once,\n // testing that all such kinds must be present on implementing types.\n \n-trait Foo : Send+Freeze { }\n+trait Foo : Send+Share { }\n \n-impl <T: Freeze> Foo for (T,) { } //~ ERROR cannot implement this trait\n+impl <T: Share> Foo for (T,) { } //~ ERROR cannot implement this trait\n \n impl <T: Send> Foo for (T,T) { } //~ ERROR cannot implement this trait\n \n-impl <T: Send+Freeze> Foo for (T,T,T) { } // (ok)\n+impl <T: Send+Share> Foo for (T,T,T) { } // (ok)\n \n fn main() { }"}, {"sha": "0d5a71559e8678317d1464fa7f13b3b6ba72e093", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -11,13 +11,13 @@\n // Tests (negatively) the ability for the Self type in default methods\n // to use capabilities granted by builtin kinds as supertraits.\n \n-trait Foo : Freeze {\n+trait Foo : Share {\n     fn foo(self, mut chan: Sender<Self>) {\n         chan.send(self); //~ ERROR does not fulfill `Send`\n     }\n }\n \n-impl <T: Freeze> Foo for T { }\n+impl <T: Share> Foo for T { }\n \n fn main() {\n     let (tx, rx) = channel();"}, {"sha": "bc0ad6dbb2938a2329b03dc953cc0ff6367de290", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Freeze> Foo for T { } //~ ERROR cannot implement this trait\n+impl <T: Share> Foo for T { } //~ ERROR cannot implement this trait\n \n fn main() { }"}, {"sha": "6bedac6d12d6c026b73b7d4189e77df8f215ed19", "filename": "src/test/compile-fail/cant-implement-builtin-kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcant-implement-builtin-kinds.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -14,6 +14,6 @@ struct X<T>(T);\n \n impl <T> Send for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n impl <T> Sized for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n-impl <T> Freeze for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n+impl <T> Share for X<T> { } //~ ERROR cannot provide an explicit implementation for a builtin kind\n \n fn main() { }"}, {"sha": "3550922dc1462e97d5aadd1f37335e003b8bbbf2", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test<T: Freeze>() {}\n+fn test<T: Share>() {}\n \n fn main() {\n-    test::<Sender<int>>();        //~ ERROR: does not fulfill `Freeze`\n-    test::<Receiver<int>>();        //~ ERROR: does not fulfill `Freeze`\n-    test::<Sender<int>>();  //~ ERROR: does not fulfill `Freeze`\n+    test::<Sender<int>>();        //~ ERROR: does not fulfill `Share`\n+    test::<Receiver<int>>();        //~ ERROR: does not fulfill `Share`\n+    test::<Sender<int>>();  //~ ERROR: does not fulfill `Share`\n }"}, {"sha": "b159337765e5f5844447a045e6902f86a1822e58", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -20,7 +20,7 @@ struct E {\n }\n \n impl A for E {\n-  fn b<F:Freeze,G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Freeze`\n+  fn b<F: Share, G>(_x: F) -> F { fail!() } //~ ERROR type parameter 0 requires `Share`\n }\n \n fn main() {}"}, {"sha": "84e856f5ac915dc618d881f971ced398edf4ab10", "filename": "src/test/compile-fail/marker-no-share.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -10,9 +10,9 @@\n \n use std::kinds::marker;\n \n-fn foo<P:Freeze>(p: P) { }\n+fn foo<P: Share>(p: P) { }\n \n fn main()\n {\n-    foo(marker::NoFreeze); //~ ERROR does not fulfill `Freeze`\n+    foo(marker::NoShare); //~ ERROR does not fulfill `Share`\n }", "previous_filename": "src/test/compile-fail/marker-no-freeze.rs"}, {"sha": "f1e7ef216c32c6982b31445c677f2bb2ae4f1ad8", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -10,9 +10,9 @@\n \n use std::cell::RefCell;\n \n-fn f<T: Freeze>(_: T) {}\n+fn f<T: Share>(_: T) {}\n \n fn main() {\n     let x = RefCell::new(0);\n-    f(x); //~ ERROR: which does not fulfill `Freeze`\n+    f(x); //~ ERROR: which does not fulfill `Share`\n }"}, {"sha": "e68274fcb7940579ad82b9caa60985e292628e1d", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -10,13 +10,13 @@\n \n use std::kinds::marker;\n \n-enum Foo { A(marker::NoFreeze) }\n+enum Foo { A(marker::NoShare) }\n \n-fn bar<T: Freeze>(_: T) {}\n+fn bar<T: Share>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoFreeze);\n+    let x = A(marker::NoShare);\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Freeze`\n+    //         which does not fulfill `Share`\n }", "previous_filename": "src/test/compile-fail/no_freeze-enum.rs"}, {"sha": "ad79d03821206ffd76746b932b7dbb0bb00a69e5", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -11,11 +11,11 @@\n use std::rc::Rc;\n use std::cell::RefCell;\n \n-fn bar<T: Freeze>(_: T) {}\n+fn bar<T: Share>(_: T) {}\n \n fn main() {\n     let x = Rc::new(RefCell::new(5));\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type\n-    //         `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Freeze`\n+    //         `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Share`\n }", "previous_filename": "src/test/compile-fail/no_freeze-rc.rs"}, {"sha": "7bb7d86e8d870d309a50a6bafdf6fce54b00fe35", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -10,13 +10,13 @@\n \n use std::kinds::marker;\n \n-struct Foo { a: int, m: marker::NoFreeze }\n+struct Foo { a: int, m: marker::NoShare }\n \n-fn bar<T: Freeze>(_: T) {}\n+fn bar<T: Share>(_: T) {}\n \n fn main() {\n-    let x = Foo { a: 5, m: marker::NoFreeze };\n+    let x = Foo { a: 5, m: marker::NoShare };\n     bar(x);\n     //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Freeze`\n+    //         which does not fulfill `Share`\n }", "previous_filename": "src/test/compile-fail/no_freeze-struct.rs"}, {"sha": "c8c2a11d8d649916bfb153f97df736407f3362c9", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -12,7 +12,7 @@\n // are const.\n \n \n-fn foo<T:Freeze>(x: T) -> T { x }\n+fn foo<T: Share>(x: T) -> T { x }\n \n struct F { field: int }\n "}, {"sha": "f48a49a15eb3d805ffa0dbd6c11d6f526d425426", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -12,7 +12,7 @@\n // than the traits require.\n \n trait A {\n-  fn b<C:Freeze,D>(x: C) -> C;\n+  fn b<C:Share,D>(x: C) -> C;\n }\n \n struct E {"}, {"sha": "0ed4fdb2c054d528fb9bfde5d371710ffbbd35fd", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ecafb31da2d0fe4654587375b464ea4d1151b1/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=12ecafb31da2d0fe4654587375b464ea4d1151b1", "patch": "@@ -65,10 +65,10 @@ pub fn main() {\n     let dogge1 = Dogge { bark_decibels: 100, tricks_known: 42, name: ~\"alan_turing\" };\n     let dogge2 = Dogge { bark_decibels: 55,  tricks_known: 11, name: ~\"albert_einstein\" };\n     let fishe = Goldfyshe { swim_speed: 998, name: ~\"alec_guinness\" };\n-    let arc = Arc::new(~[~catte  as ~Pet:Freeze+Send,\n-                         ~dogge1 as ~Pet:Freeze+Send,\n-                         ~fishe  as ~Pet:Freeze+Send,\n-                         ~dogge2 as ~Pet:Freeze+Send]);\n+    let arc = Arc::new(~[~catte  as ~Pet:Share+Send,\n+                         ~dogge1 as ~Pet:Share+Send,\n+                         ~fishe  as ~Pet:Share+Send,\n+                         ~dogge2 as ~Pet:Share+Send]);\n     let (tx1, rx1) = channel();\n     let arc1 = arc.clone();\n     task::spawn(proc() { check_legs(arc1); tx1.send(()); });\n@@ -83,21 +83,21 @@ pub fn main() {\n     rx3.recv();\n }\n \n-fn check_legs(arc: Arc<~[~Pet:Freeze+Send]>) {\n+fn check_legs(arc: Arc<~[~Pet:Share+Send]>) {\n     let mut legs = 0;\n     for pet in arc.get().iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n-fn check_names(arc: Arc<~[~Pet:Freeze+Send]>) {\n+fn check_names(arc: Arc<~[~Pet:Share+Send]>) {\n     for pet in arc.get().iter() {\n         pet.name(|name| {\n             assert!(name[0] == 'a' as u8 && name[1] == 'l' as u8);\n         })\n     }\n }\n-fn check_pedigree(arc: Arc<~[~Pet:Freeze+Send]>) {\n+fn check_pedigree(arc: Arc<~[~Pet:Share+Send]>) {\n     for pet in arc.get().iter() {\n         assert!(pet.of_good_pedigree());\n     }"}]}