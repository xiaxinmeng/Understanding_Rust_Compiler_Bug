{"sha": "326d38fa09cfdf9e611b8828604a7a05c7f55c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNmQzOGZhMDljZmRmOWU2MTFiODgyODYwNGE3YTA1YzdmNTVjODU=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-23T12:00:06Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Add try_validation_pat.", "tree": {"sha": "3fe9df1e239a0c0a548150d7d1def722a04a7a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe9df1e239a0c0a548150d7d1def722a04a7a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326d38fa09cfdf9e611b8828604a7a05c7f55c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326d38fa09cfdf9e611b8828604a7a05c7f55c85", "html_url": "https://github.com/rust-lang/rust/commit/326d38fa09cfdf9e611b8828604a7a05c7f55c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326d38fa09cfdf9e611b8828604a7a05c7f55c85/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d90deab9cbbc1bfb45af52f9dc9fbce945da91", "html_url": "https://github.com/rust-lang/rust/commit/14d90deab9cbbc1bfb45af52f9dc9fbce945da91"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "1e4c9367f6a6cd54b217a5c3b25ea551bffbae4e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/326d38fa09cfdf9e611b8828604a7a05c7f55c85/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326d38fa09cfdf9e611b8828604a7a05c7f55c85/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=326d38fa09cfdf9e611b8828604a7a05c7f55c85", "patch": "@@ -36,6 +36,7 @@ macro_rules! throw_validation_failure {\n     }};\n }\n \n+/// Returns a validation failure for any Err value of $e.\n macro_rules! try_validation {\n     ($e:expr, $what:expr, $where:expr $(, $details:expr )?) => {{\n         match $e {\n@@ -46,6 +47,24 @@ macro_rules! try_validation {\n         }\n     }};\n }\n+/// Like try_validation, but will throw a validation error if any of the patterns in $p are\n+/// matched. Other errors are passed back to the caller, unchanged. This lets you use the patterns\n+/// as a kind of validation blacklist:\n+///\n+/// ```rust\n+/// let v = try_validation_pat(some_fn(), Foo | Bar | Baz, \"some failure\", \"some place\");\n+/// // Failures that match $p are thrown up as validation errors, but other errors are passed back\n+/// // unchanged.\n+/// ```\n+macro_rules! try_validation_pat {\n+    ($e:expr, $( $p:pat )|*, $what:expr, $where:expr $(, $details:expr )?) => {{\n+        match $e {\n+            Ok(x) => x,\n+            $( Err($p) )|* if true => throw_validation_failure!($what, $where $(, $details)?),\n+            Err(e) =>  Err::<!, _>(e)?,\n+        }\n+    }};\n+}\n \n /// We want to show a nice path to the invalid field for diagnostics,\n /// but avoid string operations in the happy case where no error happens.\n@@ -474,8 +493,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // We are conservative with undef for integers, but try to\n                 // actually enforce the strict rules for raw pointers (mostly because\n                 // that lets us re-use `ref_to_mplace`).\n-                let place = try_validation!(\n+                let place = try_validation_pat!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n+                    _,\n                     \"uninitialized raw pointer\",\n                     self.path\n                 );"}]}