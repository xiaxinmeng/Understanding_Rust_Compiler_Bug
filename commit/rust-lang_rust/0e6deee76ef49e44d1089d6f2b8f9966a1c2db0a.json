{"sha": "0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmRlZWU3NmVmNDllNDRkMTA4OWQ2ZjJiOGY5OTY2YTFjMmRiMGE=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-17T23:17:19Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-17T23:20:21Z"}, "message": "Add `realloc`", "tree": {"sha": "397e42bc127d7ce0af43bfc4a2a72c6bffb3e136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397e42bc127d7ce0af43bfc4a2a72c6bffb3e136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEELQoiL21itfwzY62qWM12+I31Y+AFAly3tLUACgkQWM12+I31\nY+AyZggAwKqpEUIomD9K6UYhyADgoemBXVp3P27i01hNc6s5EUUsRhx5vM+3GUxc\n4ovRbBFrd3SqWeeXUoOZ9qv6YWEc7fFIgjkcsvX+gDCVF5kljLg7KnpegFqUrhEG\nZvQt002Foou04sQfYGMGrTeFZAQ9IYwyfaHEHCL6dbYd26DieWM7MzJ9LNy0GrBn\ngnbGdh5dcDd5jdmmOgqeof5emCL+dwvYjSCzD2R/l3netqTNHi3yGbTc9/mNxzDT\nFnI0xISxQo/5Px7i2YQdmy1lSUhA8rMIjQ9IzFogdJJRQED4kgqDS167Ov2bvgWN\n+b3rS4fIX0otyQaE943ifi63iyhmWA==\n=ImJq\n-----END PGP SIGNATURE-----", "payload": "tree 397e42bc127d7ce0af43bfc4a2a72c6bffb3e136\nparent 3e8bd4560cac9e0d60b60e5ef6cba3d48f279817\nauthor Tim Diekmann <tim.diekmann@3dvision.de> 1555543039 +0200\ncommitter Tim Diekmann <tim.diekmann@3dvision.de> 1555543221 +0200\n\nAdd `realloc`\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a", "html_url": "https://github.com/rust-lang/rust/commit/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8bd4560cac9e0d60b60e5ef6cba3d48f279817", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8bd4560cac9e0d60b60e5ef6cba3d48f279817", "html_url": "https://github.com/rust-lang/rust/commit/3e8bd4560cac9e0d60b60e5ef6cba3d48f279817"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "6706cc1fbc3c8ece360abb26bce8cb9d6eb8b123", "filename": "src/fn_call.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a", "patch": "@@ -148,6 +148,23 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 }\n             }\n \n+            \"realloc\" => {\n+                let ptr = this.read_scalar(args[0])?.to_ptr()?;\n+                let new_size = this.read_scalar(args[1])?.to_usize(this)?;\n+                let align = this.tcx.data_layout.pointer_align.abi;\n+                let memory = this.memory_mut();\n+                let old_size = memory.get(ptr.alloc_id)?.bytes.len();\n+                let new_ptr = memory.reallocate(\n+                    ptr,\n+                    Size::from_bytes(old_size as u64),\n+                    align,\n+                    Size::from_bytes(new_size),\n+                    align,\n+                    MiriMemoryKind::C.into(),\n+                )?;\n+                this.write_scalar(Scalar::Ptr(new_ptr.with_default_tag()), dest)?;\n+            }\n+\n             \"__rust_alloc\" => {\n                 let size = this.read_scalar(args[0])?.to_usize(this)?;\n                 let align = this.read_scalar(args[1])?.to_usize(this)?;"}, {"sha": "594fec717e974ddbb386444e49dbaee2be680e29", "filename": "tests/run-pass/realloc.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a/tests%2Frun-pass%2Frealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a/tests%2Frun-pass%2Frealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frealloc.rs?ref=0e6deee76ef49e44d1089d6f2b8f9966a1c2db0a", "patch": "@@ -0,0 +1,31 @@\n+//ignore-windows: Uses POSIX APIs\n+\n+#![feature(rustc_private)]\n+\n+use core::slice;\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        // Use calloc for initialized memory\n+        let p1 = libc::calloc(20, 1);\n+\n+        // old size < new size\n+        let p2 = libc::realloc(p1, 40);\n+        let slice = slice::from_raw_parts(p2 as *const u8, 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n+\n+        // old size == new size\n+        let p3 = libc::realloc(p2, 40);\n+        let slice = slice::from_raw_parts(p3 as *const u8, 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n+\n+        // old size > new size\n+        let p4 = libc::realloc(p3, 10);\n+        let slice = slice::from_raw_parts(p4 as *const u8, 10);\n+        assert_eq!(&slice, &[0_u8; 10]);\n+\n+        libc::free(p4);\n+    }\n+}"}]}