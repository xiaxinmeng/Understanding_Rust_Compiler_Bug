{"sha": "4562040d6b640fa448fedcb7db9124b6abcaba5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NjIwNDBkNmI2NDBmYTQ0OGZlZGNiN2RiOTEyNGI2YWJjYWJhNWI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T21:09:17Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T21:09:17Z"}, "message": "Fix false positive in `NEEDLESS_RANGE_LOOP`", "tree": {"sha": "ccccd5a9c92506463e88511dc9377cb3837b7d2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccccd5a9c92506463e88511dc9377cb3837b7d2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4562040d6b640fa448fedcb7db9124b6abcaba5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4562040d6b640fa448fedcb7db9124b6abcaba5b", "html_url": "https://github.com/rust-lang/rust/commit/4562040d6b640fa448fedcb7db9124b6abcaba5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4562040d6b640fa448fedcb7db9124b6abcaba5b/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d589a2d516a4b35af22dee60f9e7ae57622cea00", "url": "https://api.github.com/repos/rust-lang/rust/commits/d589a2d516a4b35af22dee60f9e7ae57622cea00", "html_url": "https://github.com/rust-lang/rust/commit/d589a2d516a4b35af22dee60f9e7ae57622cea00"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "bbbff676350da4279826ca17241bfdee9057dacb", "filename": "src/loops.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4562040d6b640fa448fedcb7db9124b6abcaba5b/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4562040d6b640fa448fedcb7db9124b6abcaba5b/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=4562040d6b640fa448fedcb7db9124b6abcaba5b", "patch": "@@ -4,6 +4,7 @@ use rustc::lint::*;\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::middle::const_eval::{ConstVal, eval_const_expr_partial};\n use rustc::middle::def::Def;\n+use rustc::middle::region::CodeExtent;\n use rustc::middle::ty;\n use rustc_front::hir::*;\n use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n@@ -338,20 +339,28 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n     if let ExprRange(Some(ref l), ref r) = arg.node {\n         // the var must be a single name\n         if let PatIdent(_, ref ident, _) = pat.node {\n+\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: ident.node.name,\n-                indexed: HashSet::new(),\n+                indexed: HashMap::new(),\n                 nonindex: false,\n             };\n             walk_expr(&mut visitor, body);\n+\n             // linting condition: we only indexed one variable\n             if visitor.indexed.len() == 1 {\n-                let indexed = visitor.indexed\n+                let (indexed, indexed_extent) = visitor.indexed\n                                      .into_iter()\n                                      .next()\n                                      .expect(\"Len was nonzero, but no contents found\");\n \n+                // ensure that the indexed variable was declared before the loop, see #601\n+                let pat_extent = cx.tcx.region_maps.var_scope(pat.id);\n+                if cx.tcx.region_maps.is_subscope_of(indexed_extent, pat_extent) {\n+                    return;\n+                }\n+\n                 let starts_at_zero = is_integer_literal(l, 0);\n \n                 let skip: Cow<_> = if starts_at_zero {\n@@ -673,7 +682,7 @@ fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n struct VarVisitor<'v, 't: 'v> {\n     cx: &'v LateContext<'v, 't>, // context reference\n     var: Name, // var name to look for as index\n-    indexed: HashSet<Name>, // indexed variables\n+    indexed: HashMap<Name, CodeExtent>, // indexed variables\n     nonindex: bool, // has the var been used otherwise?\n }\n \n@@ -689,8 +698,12 @@ impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n                         let ExprPath(None, ref seqvar) = seqexpr.node,\n                         seqvar.segments.len() == 1\n                     ], {\n-                        self.indexed.insert(seqvar.segments[0].identifier.name);\n-                        return;  // no need to walk further\n+                        let def_map = self.cx.tcx.def_map.borrow();\n+                        if let Some(def) = def_map.get(&seqexpr.id) {\n+                            let extent = self.cx.tcx.region_maps.var_scope(def.base_def.var_id());\n+                            self.indexed.insert(seqvar.segments[0].identifier.name, extent);\n+                            return;  // no need to walk further\n+                        }\n                     }\n                 }\n                 // we are not indexing anything, record that"}, {"sha": "b805963a03a05ef96cfa2c3c8816d71f9b14fe66", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4562040d6b640fa448fedcb7db9124b6abcaba5b/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4562040d6b640fa448fedcb7db9124b6abcaba5b/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=4562040d6b640fa448fedcb7db9124b6abcaba5b", "patch": "@@ -192,6 +192,12 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n+    // See #601\n+    for i in 0..10 { // no error, id_col does not exist outside the loop\n+        let mut id_col = vec![0f64; 10];\n+        id_col[i] = 1f64;\n+    }\n+\n     /*\n     for i in (10..0).map(|x| x * 2) {\n         println!(\"{}\", i);"}]}