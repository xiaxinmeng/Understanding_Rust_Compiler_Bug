{"sha": "331e78d80422ca779c71b19d9273f5d8ee737643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMWU3OGQ4MDQyMmNhNzc5YzcxYjE5ZDkyNzNmNWQ4ZWU3Mzc2NDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-03T10:07:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-03T10:07:50Z"}, "message": "Rollup merge of #87716 - calebzulawski:master, r=workingjubilee\n\nAllow generic SIMD array element type\n\nFixes the following:\n```rust\n#[repr(simd)]\nstruct V<T>([T; 4]);\n```\n\ncc ``@workingjubilee``", "tree": {"sha": "cebf0efa3a5047f95e60466e0aa6568f84fb591f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cebf0efa3a5047f95e60466e0aa6568f84fb591f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/331e78d80422ca779c71b19d9273f5d8ee737643", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCRV2CRBK7hj4Ov3rIwAA2E8IAF9lnX027XNwgCS+yqDV59W7\nnU3POItEPYW9iCBpuJu4Soj3DYJ2or5HRQjVULnfLyad1GDIN2AFjGs9stvHzP9z\nWTe/GOaadl/36c32ttxuw2sHXNX8S1b4yb/zROjcJH4ePrh/c+E6IhhgJ+GgVIuE\nleJQLnQlinOIVIUBCA3oNSrK39olieud9wTV8ufnxpob3yAPNwAIMfS8My6SBde6\nbZhclYiLQ11Y6em8rLhMwriVLHM73LDoHj0nCoYuWsFVB1qU6RjLQybKxJN3I9EF\nwZXbEP0Wl5HFXJyfN8zGrZ3N+zhEpxQgS+WQ2Wg5stvCYbHBSP6rfOz6L3darfA=\n=QvZt\n-----END PGP SIGNATURE-----\n", "payload": "tree cebf0efa3a5047f95e60466e0aa6568f84fb591f\nparent b70c9dd77cc80088ad0316eb82537c2e4d918b90\nparent b23de51dcbd8f50094a716c0d99b44fdfa68e474\nauthor Yuki Okushi <jtitor@2k36.org> 1627985270 +0900\ncommitter GitHub <noreply@github.com> 1627985270 +0900\n\nRollup merge of #87716 - calebzulawski:master, r=workingjubilee\n\nAllow generic SIMD array element type\n\nFixes the following:\n```rust\n#[repr(simd)]\nstruct V<T>([T; 4]);\n```\n\ncc ``@workingjubilee``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/331e78d80422ca779c71b19d9273f5d8ee737643", "html_url": "https://github.com/rust-lang/rust/commit/331e78d80422ca779c71b19d9273f5d8ee737643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/331e78d80422ca779c71b19d9273f5d8ee737643/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70c9dd77cc80088ad0316eb82537c2e4d918b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70c9dd77cc80088ad0316eb82537c2e4d918b90", "html_url": "https://github.com/rust-lang/rust/commit/b70c9dd77cc80088ad0316eb82537c2e4d918b90"}, {"sha": "b23de51dcbd8f50094a716c0d99b44fdfa68e474", "url": "https://api.github.com/repos/rust-lang/rust/commits/b23de51dcbd8f50094a716c0d99b44fdfa68e474", "html_url": "https://github.com/rust-lang/rust/commit/b23de51dcbd8f50094a716c0d99b44fdfa68e474"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "ba99e0c03d8e2d4895b2de7787f94892337cfd8a", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/331e78d80422ca779c71b19d9273f5d8ee737643/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e78d80422ca779c71b19d9273f5d8ee737643/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=331e78d80422ca779c71b19d9273f5d8ee737643", "patch": "@@ -1220,6 +1220,7 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n             match e.kind() {\n                 ty::Param(_) => (), // pass struct<T>(T, T, T, T) through, let monomorphization catch errors\n                 ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::RawPtr(_) => (), // struct(u8, u8, u8, u8) is ok\n+                ty::Array(t, _) if matches!(t.kind(), ty::Param(_)) => (), // pass struct<T>([T; N]) through, let monomorphization catch errors\n                 ty::Array(t, _clen)\n                     if matches!(\n                         t.kind(),"}, {"sha": "fa9d35ee4df854b5c207085c9e4c014faaa25fe2", "filename": "src/test/ui/simd/simd-generics.rs", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/331e78d80422ca779c71b19d9273f5d8ee737643/src%2Ftest%2Fui%2Fsimd%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e78d80422ca779c71b19d9273f5d8ee737643/src%2Ftest%2Fui%2Fsimd%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-generics.rs?ref=331e78d80422ca779c71b19d9273f5d8ee737643", "patch": "@@ -10,7 +10,15 @@ struct f32x4(f32, f32, f32, f32);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct S<const N: usize>([f32; N]);\n+struct A<const N: usize>([f32; N]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct B<T>([T; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct C<T, const N: usize>([T; N]);\n \n \n extern \"platform-intrinsic\" {\n@@ -29,7 +37,23 @@ impl ops::Add for f32x4 {\n     }\n }\n \n-impl ops::Add for S<4> {\n+impl ops::Add for A<4> {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        unsafe { simd_add(self, rhs) }\n+    }\n+}\n+\n+impl ops::Add for B<f32> {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        unsafe { simd_add(self, rhs) }\n+    }\n+}\n+\n+impl ops::Add for C<f32, 4> {\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -39,19 +63,23 @@ impl ops::Add for S<4> {\n \n \n pub fn main() {\n-    let lr = f32x4(1.0f32, 2.0f32, 3.0f32, 4.0f32);\n+    let x = [1.0f32, 2.0f32, 3.0f32, 4.0f32];\n+    let y = [2.0f32, 4.0f32, 6.0f32, 8.0f32];\n \n     // lame-o\n-    let f32x4(x, y, z, w) = add(lr, lr);\n-    assert_eq!(x, 2.0f32);\n-    assert_eq!(y, 4.0f32);\n-    assert_eq!(z, 6.0f32);\n-    assert_eq!(w, 8.0f32);\n-\n-    let lr2 = S::<4>([1.0f32, 2.0f32, 3.0f32, 4.0f32]);\n-    let [x, y, z, w] = add(lr2, lr2).0;\n-    assert_eq!(x, 2.0f32);\n-    assert_eq!(y, 4.0f32);\n-    assert_eq!(z, 6.0f32);\n-    assert_eq!(w, 8.0f32);\n+    let a = f32x4(1.0f32, 2.0f32, 3.0f32, 4.0f32);\n+    let f32x4(a0, a1, a2, a3) = add(a, a);\n+    assert_eq!(a0, 2.0f32);\n+    assert_eq!(a1, 4.0f32);\n+    assert_eq!(a2, 6.0f32);\n+    assert_eq!(a3, 8.0f32);\n+\n+    let a = A(x);\n+    assert_eq!(add(a, a).0, y);\n+\n+    let b = B(x);\n+    assert_eq!(add(b, b).0, y);\n+\n+    let c = C(x);\n+    assert_eq!(add(c, c).0, y);\n }"}, {"sha": "0bc73b155801eb5830b453785b98cbfe4b9eba20", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-non-primitive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/331e78d80422ca779c71b19d9273f5d8ee737643/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/331e78d80422ca779c71b19d9273f5d8ee737643/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.rs?ref=331e78d80422ca779c71b19d9273f5d8ee737643", "patch": "@@ -0,0 +1,14 @@\n+// build-fail\n+\n+#![feature(repr_simd)]\n+\n+struct E;\n+\n+// error-pattern:monomorphising SIMD type `S<E>` with a non-primitive-scalar (integer/float/pointer) element type `E`\n+\n+#[repr(simd)]\n+struct S<T>([T; 4]);\n+\n+fn main() {\n+    let _v: Option<S<E>> = None;\n+}"}, {"sha": "9e8f06b824ccf3bd8caa02c8b006e56d9a5315ba", "filename": "src/test/ui/simd/simd-type-generic-monomorphisation-non-primitive.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/331e78d80422ca779c71b19d9273f5d8ee737643/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/331e78d80422ca779c71b19d9273f5d8ee737643/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-type-generic-monomorphisation-non-primitive.stderr?ref=331e78d80422ca779c71b19d9273f5d8ee737643", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `S<E>` with a non-primitive-scalar (integer/float/pointer) element type `E`\n+\n+error: aborting due to previous error\n+"}]}