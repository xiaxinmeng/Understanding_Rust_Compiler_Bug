{"sha": "ca8154861e0b8412c74bdbf05691af1d9e48a966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhODE1NDg2MWUwYjg0MTJjNzRiZGJmMDU2OTFhZjFkOWU0OGE5NjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-12-11T14:49:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-12-14T14:00:49Z"}, "message": "Revert \"Redefine `core::convert::Infallible` as `!`.\"\n\nThis reverts commit 089229a1935fa9795cfdefa518c8f8c3beb66db8.", "tree": {"sha": "b5f6ac70ba32b5e14ce48ec6f641a3b93b1a530f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f6ac70ba32b5e14ce48ec6f641a3b93b1a530f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8154861e0b8412c74bdbf05691af1d9e48a966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8154861e0b8412c74bdbf05691af1d9e48a966", "html_url": "https://github.com/rust-lang/rust/commit/ca8154861e0b8412c74bdbf05691af1d9e48a966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8154861e0b8412c74bdbf05691af1d9e48a966/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "html_url": "https://github.com/rust-lang/rust/commit/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa"}], "stats": {"total": 113, "additions": 106, "deletions": 7}, "files": [{"sha": "c25102f7e884367700ae56ecc260a21f2bf37fd6", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 88, "deletions": 7, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/ca8154861e0b8412c74bdbf05691af1d9e48a966/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8154861e0b8412c74bdbf05691af1d9e48a966/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=ca8154861e0b8412c74bdbf05691af1d9e48a966", "patch": "@@ -40,6 +40,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::fmt;\n+\n mod num;\n \n #[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\n@@ -429,7 +431,9 @@ pub trait TryInto<T>: Sized {\n /// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n-/// calling `T::try_from()` on a value of type `T` is [`!`].\n+/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n+/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n+/// equivalent.\n ///\n /// `TryFrom<T>` can be implemented as follows:\n ///\n@@ -478,6 +482,7 @@ pub trait TryInto<T>: Sized {\n /// [`TryInto`]: trait.TryInto.html\n /// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n /// [`!`]: ../../std/primitive.never.html\n+/// [`Infallible`]: enum.Infallible.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -633,9 +638,9 @@ impl AsRef<str> for str {\n // THE NO-ERROR ERROR TYPE\n ////////////////////////////////////////////////////////////////////////////////\n \n-/// A type alias for [the `!` \u201cnever\u201d type][never].\n+/// The error type for errors that can never happen.\n ///\n-/// `Infallible` represents types of errors that can never happen since `!` has no valid values.\n+/// Since this enum has no variant, a value of this type can never actually exist.\n /// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n /// to indicate that the result is always [`Ok`].\n ///\n@@ -652,15 +657,91 @@ impl AsRef<str> for str {\n /// }\n /// ```\n ///\n-/// # Eventual deprecation\n+/// # Future compatibility\n+///\n+/// This enum has the same role as [the `!` \u201cnever\u201d type][never],\n+/// which is unstable in this version of Rust.\n+/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n+///\n+/// ```ignore (illustrates future std change)\n+/// pub type Infallible = !;\n+/// ```\n+///\n+/// \u2026 and eventually deprecate `Infallible`.\n+///\n+///\n+/// However there is one case where `!` syntax can be used\n+/// before `!` is stabilized as a full-fleged type: in the position of a function\u2019s return type.\n+/// Specifically, it is possible implementations for two different function pointer types:\n+///\n+/// ```\n+/// trait MyTrait {}\n+/// impl MyTrait for fn() -> ! {}\n+/// impl MyTrait for fn() -> std::convert::Infallible {}\n+/// ```\n ///\n-/// Previously, `Infallible` was defined as `enum Infallible {}`.\n-/// Now that it is merely a type alias to `!`, we will eventually deprecate `Infallible`.\n+/// With `Infallible` being an enum, this code is valid.\n+/// However when `Infallible` becomes an alias for the never type,\n+/// the two `impl`s will start to overlap\n+/// and therefore will be disallowed by the language\u2019s trait coherence rules.\n ///\n /// [`Ok`]: ../result/enum.Result.html#variant.Ok\n /// [`Result`]: ../result/enum.Result.html\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n /// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-pub type Infallible = !;\n+#[derive(Copy)]\n+pub enum Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Clone for Infallible {\n+    fn clone(&self) -> Infallible {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Debug for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl fmt::Display for Infallible {\n+    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialEq for Infallible {\n+    fn eq(&self, _: &Infallible) -> bool {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Eq for Infallible {}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl PartialOrd for Infallible {\n+    fn partial_cmp(&self, _other: &Self) -> Option<crate::cmp::Ordering> {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl Ord for Infallible {\n+    fn cmp(&self, _other: &Self) -> crate::cmp::Ordering {\n+        match *self {}\n+    }\n+}\n+\n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+impl From<!> for Infallible {\n+    fn from(x: !) -> Self {\n+        x\n+    }\n+}"}, {"sha": "c2e6ae64a51fef93661e30736a3ca5949049f5ee", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca8154861e0b8412c74bdbf05691af1d9e48a966/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8154861e0b8412c74bdbf05691af1d9e48a966/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=ca8154861e0b8412c74bdbf05691af1d9e48a966", "patch": "@@ -4,6 +4,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::convert::Infallible;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n@@ -4724,8 +4725,18 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n+impl From<Infallible> for TryFromIntError {\n+    fn from(x: Infallible) -> TryFromIntError {\n+        match x {}\n+    }\n+}\n+\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n+        // Match rather than coerce to make sure that code like\n+        // `From<Infallible> for TryFromIntError` above will keep working\n+        // when `Infallible` becomes an alias to `!`.\n         match never {}\n     }\n }"}, {"sha": "09fc60ec9e55575f3b35f1084296f17c1d04d3d2", "filename": "src/libstd/error.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca8154861e0b8412c74bdbf05691af1d9e48a966/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8154861e0b8412c74bdbf05691af1d9e48a966/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=ca8154861e0b8412c74bdbf05691af1d9e48a966", "patch": "@@ -551,6 +551,13 @@ impl Error for string::FromUtf16Error {\n     }\n }\n \n+#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\n+impl Error for string::ParseError {\n+    fn description(&self) -> &str {\n+        match *self {}\n+    }\n+}\n+\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl Error for char::DecodeUtf16Error {\n     fn description(&self) -> &str {"}]}