{"sha": "743e9e356115721ced5dce2cfc0c398c6d107cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0M2U5ZTM1NjExNTcyMWNlZDVkY2UyY2ZjMGMzOThjNmQxMDdjZGM=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-11T00:41:59Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-12-11T00:42:38Z"}, "message": "Merge branch 'master' into rustfmt_tests", "tree": {"sha": "1758750d57e1b3487197b94d9a62499510df555d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1758750d57e1b3487197b94d9a62499510df555d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743e9e356115721ced5dce2cfc0c398c6d107cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743e9e356115721ced5dce2cfc0c398c6d107cdc", "html_url": "https://github.com/rust-lang/rust/commit/743e9e356115721ced5dce2cfc0c398c6d107cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743e9e356115721ced5dce2cfc0c398c6d107cdc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625ca772b59da2355589d634f402725c495ab5ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/625ca772b59da2355589d634f402725c495ab5ab", "html_url": "https://github.com/rust-lang/rust/commit/625ca772b59da2355589d634f402725c495ab5ab"}, {"sha": "0fd7fe9a773cc68e9240ac9cbe2c5d4e5a6d0e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd7fe9a773cc68e9240ac9cbe2c5d4e5a6d0e8b", "html_url": "https://github.com/rust-lang/rust/commit/0fd7fe9a773cc68e9240ac9cbe2c5d4e5a6d0e8b"}], "stats": {"total": 195, "additions": 151, "deletions": 44}, "files": [{"sha": "ce9512a80dc928a9d879ff91de3ba975f4272515", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -23,6 +23,7 @@ All contributors are expected to follow the [Rust Code of Conduct](http://www.ru\n   * [How Clippy works](#how-clippy-works)\n   * [Fixing nightly build failures](#fixing-build-failures-caused-by-rust)\n * [Issue and PR Triage](#issue-and-pr-triage)\n+* [Bors and Homu](#bors-and-homu)\n * [Contributions](#contributions)\n \n ## Getting started\n@@ -156,7 +157,7 @@ to style guidelines. The code has to be formatted by `rustfmt` before a PR will\n \n It can be installed via `rustup`:\n ```bash\n-rustup component add rustfmt-preview\n+rustup component add rustfmt\n ```\n \n Use `cargo fmt --all` to format the whole codebase.\n@@ -220,7 +221,7 @@ That's why the `else_if_without_else` example uses the `register_early_lint_pass\n \n ### Fixing build failures caused by Rust\n \n-Clippy will sometimes break because it still depends on unstable internal Rust features. Most of the times we have to adapt to the changes and only very rarely there's an actual bug in Rust. Fixing build failures caused by Rust updates, can be a good way to learn about Rust internals.\n+Clippy will sometimes fail to build from source because building it depends on unstable internal Rust features. Most of the times we have to adapt to the changes and only very rarely there's an actual bug in Rust. Fixing build failures caused by Rust updates, can be a good way to learn about Rust internals.\n \n In order to find out why Clippy does not work properly with a new Rust commit, you can use the [rust-toolstate commit history][toolstate_commit_history].\n You will then have to look for the last commit that contains `test-pass -> build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component. [Here][toolstate_commit] is an example.\n@@ -257,6 +258,17 @@ Our highest priority is fixing [crashes][l-crash] and [bugs][l-bug]. We don't\n want Clippy to crash on your code and we want it to be as reliable as the\n suggestions from Rust compiler errors.\n \n+## Bors and Homu\n+\n+We use a bot powered by [Homu][homu] to help automate testing and landing of pull\n+requests in Clippy. The bot's username is @bors.\n+\n+You can find the Clippy bors queue [here][homu_queue].\n+\n+If you have @bors permissions, you can find an overview of the available\n+commands [here][homu_instructions].\n+\n+\n ## Contributions\n \n Contributions to Clippy should be made in the form of GitHub pull requests. Each pull request will\n@@ -288,3 +300,6 @@ or the [MIT](http://opensource.org/licenses/MIT) license.\n [triage]: https://forge.rust-lang.org/triage-procedure.html\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n+[homu]: https://github.com/servo/homu\n+[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n+[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy"}, {"sha": "56db616cf5b87017ce933c8930da510393ddd4e1", "filename": "ci/base-tests.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -20,6 +20,8 @@ fi\n # build clippy in debug mode and run tests\n cargo build --features debugging\n cargo test --features debugging\n+# for faster build, share target dir between subcrates\n+export CARGO_TARGET_DIR=`pwd`/target/\n cd clippy_lints && cargo test && cd ..\n cd rustc_tools_util && cargo test && cd ..\n cd clippy_dev && cargo test && cd .."}, {"sha": "a8b03d214823c14860a12cc7ff34f08937695a57", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -332,7 +332,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n                     &format!(\"unknown clippy lint: clippy::{}\", name),\n                     |db| {\n                         if name.as_str().chars().any(|c| c.is_uppercase()) {\n-                            let name_lower = name.as_str().to_lowercase().to_string();\n+                            let name_lower = name.as_str().to_lowercase();\n                             match lint_store.check_lint_name(\n                                 &name_lower,\n                                 Some(tool_name.as_str())"}, {"sha": "7d72f417b2ad76b21e941bd6dc71c2a470f0f729", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -109,10 +109,9 @@ impl ExcessivePrecision {\n     }\n }\n \n-#[allow(clippy::doc_markdown)]\n /// Should we exclude the float because it has a `.0` or `.` suffix\n-/// Ex 1_000_000_000.0\n-/// Ex 1_000_000_000.\n+/// Ex `1_000_000_000.0`\n+/// Ex `1_000_000_000.`\n fn dot_zero_exclusion(s: &str) -> bool {\n     if let Some(after_dec) = s.split('.').nth(1) {\n         let mut decpart = after_dec.chars().take_while(|c| *c != 'e' || *c != 'E');"}, {"sha": "f30da9c909d9b4f14023387c388c31b1b20dab64", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -57,7 +57,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     }\n     match expr.node {\n         ExprKind::Lit(..) | ExprKind::Closure(.., _) => true,\n-        ExprKind::Path(..) => !has_drop(cx, expr),\n+        ExprKind::Path(..) => !has_drop(cx, cx.tables.expr_ty(expr)),\n         ExprKind::Index(ref a, ref b) | ExprKind::Binary(_, ref a, ref b) => {\n             has_no_effect(cx, a) && has_no_effect(cx, b)\n         },\n@@ -70,7 +70,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         | ExprKind::AddrOf(_, ref inner)\n         | ExprKind::Box(ref inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, ref fields, ref base) => {\n-            !has_drop(cx, expr)\n+            !has_drop(cx, cx.tables.expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, &field.expr))\n                 && match *base {\n                     Some(ref base) => has_no_effect(cx, base),\n@@ -82,7 +82,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n                 let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n                     Def::Struct(..) | Def::Variant(..) | Def::StructCtor(..) | Def::VariantCtor(..) => {\n-                        !has_drop(cx, expr) && args.iter().all(|arg| has_no_effect(cx, arg))\n+                        !has_drop(cx, cx.tables.expr_ty(expr)) && args.iter().all(|arg| has_no_effect(cx, arg))\n                     },\n                     _ => false,\n                 }\n@@ -161,7 +161,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         | ExprKind::AddrOf(_, ref inner)\n         | ExprKind::Box(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, ref fields, ref base) => {\n-            if has_drop(cx, expr) {\n+            if has_drop(cx, cx.tables.expr_ty(expr)) {\n                 None\n             } else {\n                 Some(fields.iter().map(|f| &f.expr).chain(base).map(Deref::deref).collect())\n@@ -172,7 +172,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n                 let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n                     Def::Struct(..) | Def::Variant(..) | Def::StructCtor(..) | Def::VariantCtor(..)\n-                        if !has_drop(cx, expr) =>\n+                        if !has_drop(cx, cx.tables.expr_ty(expr)) =>\n                     {\n                         Some(args.iter().collect())\n                     },"}, {"sha": "0d31129f30a063ea241c4d8dd6402223983614c5", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 84, "deletions": 23, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -12,7 +12,7 @@ use crate::rustc::hir::{def_id, Body, FnDecl};\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::mir::{\n     self, traversal,\n-    visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor},\n+    visit::{MutatingUseContext, PlaceContext, Visitor},\n     TerminatorKind,\n };\n use crate::rustc::ty;\n@@ -23,10 +23,11 @@ use crate::syntax::{\n     source_map::{BytePos, Span},\n };\n use crate::utils::{\n-    in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_node, span_lint_node_and_then,\n-    walk_ptrs_ty_depth,\n+    has_drop, in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_node,\n+    span_lint_node_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n+use matches::matches;\n use std::convert::TryFrom;\n \n macro_rules! unwrap_or_continue {\n@@ -126,7 +127,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n             // _1 in MIR `{ _2 = &_1; clone(move _2); }` or `{ _2 = _1; to_path_buf(_2); } (from_deref)\n             // In case of `from_deref`, `arg` is already a reference since it is `deref`ed in the previous\n             // block.\n-            let cloned = unwrap_or_continue!(find_stmt_assigns_to(arg, from_borrow, bbdata.statements.iter().rev()));\n+            let (cloned, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(\n+                cx,\n+                mir,\n+                arg,\n+                from_borrow,\n+                bbdata.statements.iter()\n+            ));\n+\n+            if from_borrow && cannot_move_out {\n+                continue;\n+            }\n \n             // _1 in MIR `{ _2 = &_1; _3 = deref(move _2); } -> { _4 = _3; to_path_buf(move _4); }`\n             let referent = if from_deref {\n@@ -150,7 +161,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                     }\n                 };\n \n-                unwrap_or_continue!(find_stmt_assigns_to(pred_arg, true, mir[ps[0]].statements.iter().rev()))\n+                let (local, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(\n+                    cx,\n+                    mir,\n+                    pred_arg,\n+                    true,\n+                    mir[ps[0]].statements.iter()\n+                ));\n+                if cannot_move_out {\n+                    continue;\n+                }\n+                local\n             } else {\n                 cloned\n             };\n@@ -227,27 +248,69 @@ fn is_call_with_ref_arg<'tcx>(\n     }\n }\n \n-/// Finds the first `to = (&)from`, and returns `Some(from)`.\n+type CannotMoveOut = bool;\n+\n+/// Finds the first `to = (&)from`, and returns\n+/// ``Some((from, [`true` if `from` cannot be moved out]))``.\n fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n+    cx: &LateContext<'_, 'tcx>,\n+    mir: &mir::Mir<'tcx>,\n     to: mir::Local,\n     by_ref: bool,\n-    mut stmts: impl Iterator<Item = &'a mir::Statement<'tcx>>,\n-) -> Option<mir::Local> {\n-    stmts.find_map(|stmt| {\n-        if let mir::StatementKind::Assign(mir::Place::Local(local), v) = &stmt.kind {\n-            if *local == to {\n-                if by_ref {\n-                    if let mir::Rvalue::Ref(_, _, mir::Place::Local(r)) = **v {\n-                        return Some(r);\n-                    }\n-                } else if let mir::Rvalue::Use(mir::Operand::Copy(mir::Place::Local(r))) = **v {\n-                    return Some(r);\n+    stmts: impl DoubleEndedIterator<Item = &'a mir::Statement<'tcx>>,\n+) -> Option<(mir::Local, CannotMoveOut)> {\n+    stmts\n+        .rev()\n+        .find_map(|stmt| {\n+            if let mir::StatementKind::Assign(mir::Place::Local(local), v) = &stmt.kind {\n+                if *local == to {\n+                    return Some(v);\n                 }\n             }\n-        }\n \n-        None\n-    })\n+            None\n+        })\n+        .and_then(|v| {\n+            if by_ref {\n+                if let mir::Rvalue::Ref(_, _, ref place) = **v {\n+                    return base_local_and_movability(cx, mir, place);\n+                }\n+            } else if let mir::Rvalue::Use(mir::Operand::Copy(ref place)) = **v {\n+                return base_local_and_movability(cx, mir, place);\n+            }\n+            None\n+        })\n+}\n+\n+/// Extracts and returns the undermost base `Local` of given `place`. Returns `place` itself\n+/// if it is already a `Local`.\n+///\n+/// Also reports whether given `place` cannot be moved out.\n+fn base_local_and_movability<'tcx>(\n+    cx: &LateContext<'_, 'tcx>,\n+    mir: &mir::Mir<'tcx>,\n+    mut place: &mir::Place<'tcx>,\n+) -> Option<(mir::Local, CannotMoveOut)> {\n+    use rustc::mir::Place::*;\n+\n+    // Dereference. You cannot move things out from a borrowed value.\n+    let mut deref = false;\n+    // Accessing a field of an ADT that has `Drop`. Moving the field out will cause E0509.\n+    let mut field = false;\n+\n+    loop {\n+        match place {\n+            Local(local) => return Some((*local, deref || field)),\n+            Projection(proj) => {\n+                place = &proj.base;\n+                deref = deref || matches!(proj.elem, mir::ProjectionElem::Deref);\n+                if !field && matches!(proj.elem, mir::ProjectionElem::Field(..)) {\n+                    field = has_drop(cx, place.ty(&mir.local_decls, cx.tcx).to_ty(cx.tcx));\n+                }\n+            },\n+            _ => return None,\n+        }\n+    }\n }\n \n struct LocalUseVisitor {\n@@ -279,9 +342,7 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n \n     fn visit_local(&mut self, local: &mir::Local, ctx: PlaceContext<'tcx>, _: mir::Location) {\n         match ctx {\n-            PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(NonUseContext::StorageDead) => {\n-                return;\n-            },\n+            PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(_) => return,\n             _ => {},\n         }\n "}, {"sha": "cb4a656d1fff131b594e6032a4d94a8e3e9a5746", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -266,9 +266,8 @@ pub fn implements_trait<'a, 'tcx>(\n }\n \n /// Check whether this type implements Drop.\n-pub fn has_drop(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n-    let struct_ty = cx.tables.expr_ty(expr);\n-    match struct_ty.ty_adt_def() {\n+pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.ty_adt_def() {\n         Some(def) => def.has_dtor(cx.tcx),\n         _ => false,\n     }"}, {"sha": "09d4d392725ef6a0697158a17e50a02e545fe041", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -35,14 +35,33 @@ fn main() {\n     // Check that lint level works\n     #[allow(clippy::redundant_clone)]\n     let _ = String::new().to_string();\n+\n+    let tup = (String::from(\"foo\"),);\n+    let _ = tup.0.clone();\n+\n+    let tup_ref = &(String::from(\"foo\"),);\n+    let _s = tup_ref.0.clone(); // this `.clone()` cannot be removed\n }\n \n #[derive(Clone)]\n struct Alpha;\n-fn double(a: Alpha) -> (Alpha, Alpha) {\n-    if true {\n+fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n+    if b {\n         (a.clone(), a.clone())\n     } else {\n         (Alpha, a)\n     }\n }\n+\n+struct TypeWithDrop {\n+    x: String,\n+}\n+\n+impl Drop for TypeWithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn cannot_move_from_type_with_drop() -> String {\n+    let s = TypeWithDrop { x: String::new() };\n+    s.x.clone() // removing this `clone()` summons E0509\n+}"}, {"sha": "07cba0181fd704a815eca6e11c1a5f75466cac77", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/743e9e356115721ced5dce2cfc0c398c6d107cdc/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/743e9e356115721ced5dce2cfc0c398c6d107cdc/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=743e9e356115721ced5dce2cfc0c398c6d107cdc", "patch": "@@ -96,16 +96,28 @@ note: this value is dropped without further use\n    |             ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:44:22\n+  --> $DIR/redundant_clone.rs:40:18\n    |\n-44 |         (a.clone(), a.clone())\n+40 |     let _ = tup.0.clone();\n+   |                  ^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/redundant_clone.rs:40:13\n+   |\n+40 |     let _ = tup.0.clone();\n+   |             ^^^^^\n+\n+error: redundant clone\n+  --> $DIR/redundant_clone.rs:50:22\n+   |\n+50 |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:44:21\n+  --> $DIR/redundant_clone.rs:50:21\n    |\n-44 |         (a.clone(), a.clone())\n+50 |         (a.clone(), a.clone())\n    |                     ^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}]}