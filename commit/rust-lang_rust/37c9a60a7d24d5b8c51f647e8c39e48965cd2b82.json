{"sha": "37c9a60a7d24d5b8c51f647e8c39e48965cd2b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzlhNjBhN2QyNGQ1YjhjNTFmNjQ3ZThjMzllNDg5NjVjZDJiODI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-08-28T20:50:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-05T16:19:36Z"}, "message": "factor out helper method", "tree": {"sha": "635928e4d001ca2b5f88d4f8a497c7cd94db50d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635928e4d001ca2b5f88d4f8a497c7cd94db50d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82", "html_url": "https://github.com/rust-lang/rust/commit/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099bb1ba8a60dff6e51b1325bf746ec6c5eee2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/099bb1ba8a60dff6e51b1325bf746ec6c5eee2a3", "html_url": "https://github.com/rust-lang/rust/commit/099bb1ba8a60dff6e51b1325bf746ec6c5eee2a3"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "f3682f8d35d84d901f32e49132977c1a00075973", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=37c9a60a7d24d5b8c51f647e8c39e48965cd2b82", "patch": "@@ -126,7 +126,7 @@ fn overlap<'cx, 'gcx, 'tcx>(selcx: &mut SelectionContext<'cx, 'gcx, 'tcx>,\n }\n \n pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                             trait_ref: &ty::TraitRef<'tcx>) -> bool\n+                                             trait_ref: ty::TraitRef<'tcx>) -> bool\n {\n     debug!(\"trait_ref_is_knowable(trait_ref={:?})\", trait_ref);\n \n@@ -140,10 +140,7 @@ pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // if the trait is not marked fundamental, then it's always possible that\n     // an ancestor crate will impl this in the future, if they haven't\n     // already\n-    if\n-        trait_ref.def_id.krate != LOCAL_CRATE &&\n-        !tcx.has_attr(trait_ref.def_id, \"fundamental\")\n-    {\n+    if !trait_ref_is_local_or_fundamental(tcx, trait_ref) {\n         debug!(\"trait_ref_is_knowable: trait is neither local nor fundamental\");\n         return false;\n     }\n@@ -157,6 +154,12 @@ pub fn trait_ref_is_knowable<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(true)).is_err()\n }\n \n+pub fn trait_ref_is_local_or_fundamental<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                                         trait_ref: ty::TraitRef<'tcx>)\n+                                                         -> bool {\n+    trait_ref.def_id.krate == LOCAL_CRATE || tcx.has_attr(trait_ref.def_id, \"fundamental\")\n+}\n+\n pub enum OrphanCheckErr<'tcx> {\n     NoLocalInputType,\n     UncoveredTy(Ty<'tcx>),\n@@ -186,11 +189,11 @@ pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         return Ok(());\n     }\n \n-    orphan_check_trait_ref(tcx, &trait_ref, InferIsLocal(false))\n+    orphan_check_trait_ref(tcx, trait_ref, InferIsLocal(false))\n }\n \n fn orphan_check_trait_ref<'tcx>(tcx: TyCtxt,\n-                                trait_ref: &ty::TraitRef<'tcx>,\n+                                trait_ref: ty::TraitRef<'tcx>,\n                                 infer_is_local: InferIsLocal)\n                                 -> Result<(), OrphanCheckErr<'tcx>>\n {"}, {"sha": "cd259fc2528e5d3143574a2d733a50c5875db552", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c9a60a7d24d5b8c51f647e8c39e48965cd2b82/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=37c9a60a7d24d5b8c51f647e8c39e48965cd2b82", "patch": "@@ -31,7 +31,7 @@ use super::{VtableImplData, VtableObjectData, VtableBuiltinData, VtableGenerator\n use super::util;\n \n use dep_graph::{DepNodeIndex, DepKind};\n-use hir::def_id::{DefId, LOCAL_CRATE};\n+use hir::def_id::DefId;\n use infer;\n use infer::{InferCtxt, InferOk, TypeFreshener};\n use ty::subst::{Kind, Subst, Substs};\n@@ -1075,9 +1075,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 } else {\n                     None\n                 };\n-                let cause = if\n-                    trait_ref.def_id.krate != LOCAL_CRATE &&\n-                    !self.tcx().has_attr(trait_ref.def_id, \"fundamental\") {\n+                let cause = if !coherence::trait_ref_is_local_or_fundamental(self.tcx(),\n+                                                                             trait_ref) {\n                     IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }\n                 } else {\n                     IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }\n@@ -1205,7 +1204,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // ok to skip binder because of the nature of the\n         // trait-ref-is-knowable check, which does not care about\n         // bound regions\n-        let trait_ref = &predicate.skip_binder().trait_ref;\n+        let trait_ref = predicate.skip_binder().trait_ref;\n \n         coherence::trait_ref_is_knowable(self.tcx(), trait_ref)\n     }"}]}