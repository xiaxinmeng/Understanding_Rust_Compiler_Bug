{"sha": "15a95866b4dd7a64875a8388aee296d319fc497d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTk1ODY2YjRkZDdhNjQ4NzVhODM4OGFlZTI5NmQzMTlmYzQ5N2Q=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-25T13:50:52Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-10-25T13:50:52Z"}, "message": "Special case .fold() for VecDeque's iterators", "tree": {"sha": "474ad4f07d7d469cf6236f248c227dfc92c50310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474ad4f07d7d469cf6236f248c227dfc92c50310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a95866b4dd7a64875a8388aee296d319fc497d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a95866b4dd7a64875a8388aee296d319fc497d", "html_url": "https://github.com/rust-lang/rust/commit/15a95866b4dd7a64875a8388aee296d319fc497d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a95866b4dd7a64875a8388aee296d319fc497d/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c429872a32c3005cf2b347025163361218634a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c429872a32c3005cf2b347025163361218634a4", "html_url": "https://github.com/rust-lang/rust/commit/0c429872a32c3005cf2b347025163361218634a4"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "5397193cab40f476bf843fd2229f21cbf6eb7bce", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 54, "deletions": 20, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/15a95866b4dd7a64875a8388aee296d319fc497d/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a95866b4dd7a64875a8388aee296d319fc497d/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=15a95866b4dd7a64875a8388aee296d319fc497d", "patch": "@@ -743,16 +743,8 @@ impl<T> VecDeque<T> {\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn as_slices(&self) -> (&[T], &[T]) {\n         unsafe {\n-            let contiguous = self.is_contiguous();\n             let buf = self.buffer_as_slice();\n-            if contiguous {\n-                let (empty, buf) = buf.split_at(0);\n-                (&buf[self.tail..self.head], empty)\n-            } else {\n-                let (mid, right) = buf.split_at(self.tail);\n-                let (left, _) = mid.split_at(self.head);\n-                (right, left)\n-            }\n+            RingSlices::ring_slices(buf, self.head, self.tail)\n         }\n     }\n \n@@ -780,20 +772,10 @@ impl<T> VecDeque<T> {\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {\n         unsafe {\n-            let contiguous = self.is_contiguous();\n             let head = self.head;\n             let tail = self.tail;\n             let buf = self.buffer_as_mut_slice();\n-\n-            if contiguous {\n-                let (empty, buf) = buf.split_at_mut(0);\n-                (&mut buf[tail..head], empty)\n-            } else {\n-                let (mid, right) = buf.split_at_mut(tail);\n-                let (left, _) = mid.split_at_mut(head);\n-\n-                (right, left)\n-            }\n+            RingSlices::ring_slices(buf, head, tail)\n         }\n     }\n \n@@ -1829,6 +1811,42 @@ fn wrap_index(index: usize, size: usize) -> usize {\n     index & (size - 1)\n }\n \n+/// Returns the two slices that cover the VecDeque's valid range\n+trait RingSlices : Sized {\n+    fn slice(self, from: usize, to: usize) -> Self;\n+    fn split_at(self, i: usize) -> (Self, Self);\n+\n+    fn ring_slices(buf: Self, head: usize, tail: usize) -> (Self, Self) {\n+        let contiguous = tail <= head;\n+        if contiguous {\n+            let (empty, buf) = buf.split_at(0);\n+            (buf.slice(tail, head), empty)\n+        } else {\n+            let (mid, right) = buf.split_at(tail);\n+            let (left, _) = mid.split_at(head);\n+            (right, left)\n+        }\n+    }\n+}\n+\n+impl<'a, T> RingSlices for &'a [T] {\n+    fn slice(self, from: usize, to: usize) -> Self {\n+        &self[from..to]\n+    }\n+    fn split_at(self, i: usize) -> (Self, Self) {\n+        (*self).split_at(i)\n+    }\n+}\n+\n+impl<'a, T> RingSlices for &'a mut [T] {\n+    fn slice(self, from: usize, to: usize) -> Self {\n+        &mut self[from..to]\n+    }\n+    fn split_at(self, i: usize) -> (Self, Self) {\n+        (*self).split_at_mut(i)\n+    }\n+}\n+\n /// Calculate the number of elements left to be read in the buffer\n #[inline]\n fn count(tail: usize, head: usize, size: usize) -> usize {\n@@ -1875,6 +1893,14 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         let len = count(self.tail, self.head, self.ring.len());\n         (len, Some(len))\n     }\n+\n+    fn fold<Acc, F>(self, mut accum: Acc, mut f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        accum = front.iter().fold(accum, &mut f);\n+        back.iter().fold(accum, &mut f)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1927,6 +1953,14 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n         let len = count(self.tail, self.head, self.ring.len());\n         (len, Some(len))\n     }\n+\n+    fn fold<Acc, F>(self, mut accum: Acc, mut f: F) -> Acc\n+        where F: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n+        accum = front.iter_mut().fold(accum, &mut f);\n+        back.iter_mut().fold(accum, &mut f)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}