{"sha": "36882b3d54043efc9f78459da39471fb8d5e6239", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ODgyYjNkNTQwNDNlZmM5Zjc4NDU5ZGEzOTQ3MWZiOGQ1ZTYyMzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-11T01:46:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-14T02:16:40Z"}, "message": "Add `f` formats to `ifmt!`\n\nCurrently the work just the same as the old `extfmt` versions", "tree": {"sha": "8e8eaf40badcd14e4b0f456e6216a86cc01b80d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e8eaf40badcd14e4b0f456e6216a86cc01b80d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36882b3d54043efc9f78459da39471fb8d5e6239", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36882b3d54043efc9f78459da39471fb8d5e6239", "html_url": "https://github.com/rust-lang/rust/commit/36882b3d54043efc9f78459da39471fb8d5e6239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36882b3d54043efc9f78459da39471fb8d5e6239/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b4d104c88d33248dbc59fef27ae9866a591dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b4d104c88d33248dbc59fef27ae9866a591dfd", "html_url": "https://github.com/rust-lang/rust/commit/27b4d104c88d33248dbc59fef27ae9866a591dfd"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "41e588934b72e00d1451e9e6b3f9f4300324a460", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36882b3d54043efc9f78459da39471fb8d5e6239/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36882b3d54043efc9f78459da39471fb8d5e6239/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=36882b3d54043efc9f78459da39471fb8d5e6239", "patch": "@@ -122,6 +122,7 @@ The current mapping of types to traits is:\n * `s` => String\n * `p` => Pointer\n * `t` => Binary\n+* `f` => Float\n \n What this means is that any type of argument which implements the\n `std::fmt::Binary` trait can then be formatted with `{:t}`. Implementations are\n@@ -377,6 +378,8 @@ pub trait String { fn fmt(&Self, &mut Formatter); }\n pub trait Poly { fn fmt(&Self, &mut Formatter); }\n #[allow(missing_doc)]\n pub trait Pointer { fn fmt(&Self, &mut Formatter); }\n+#[allow(missing_doc)]\n+pub trait Float { fn fmt(&Self, &mut Formatter); }\n \n /// The sprintf function takes a precompiled format string and a list of\n /// arguments, to return the resulting formatted string.\n@@ -549,7 +552,20 @@ impl<'self> Formatter<'self> {\n     // Helper methods used for padding and processing formatting arguments that\n     // all formatting traits can use.\n \n-    /// TODO: dox\n+    /// Performs the correct padding for an integer which has already been\n+    /// emitted into a byte-array. The byte-array should *not* contain the sign\n+    /// for the integer, that will be added by this method.\n+    ///\n+    /// # Arguments\n+    ///\n+    ///     * s - the byte array that the number has been formatted into\n+    ///     * alternate_prefix - if the '#' character (FlagAlternate) is\n+    ///       provided, this is the prefix to put in front of the number.\n+    ///       Currently this is 0x/0o/0b/etc.\n+    ///     * positive - whether the original integer was positive or not.\n+    ///\n+    /// This function will correctly account for the flags provided as well as\n+    /// the minimum width. It will not take precision into account.\n     pub fn pad_integral(&mut self, s: &[u8], alternate_prefix: &str,\n                         positive: bool) {\n         use fmt::parse::{FlagAlternate, FlagSignPlus, FlagSignAwareZeroPad};\n@@ -791,6 +807,22 @@ integer!(i16, u16)\n integer!(i32, u32)\n integer!(i64, u64)\n \n+macro_rules! floating(($ty:ident) => {\n+    impl Float for $ty {\n+        fn fmt(f: &$ty, fmt: &mut Formatter) {\n+            // XXX: this shouldn't perform an allocation\n+            let s = match fmt.precision {\n+                Some(i) => ::$ty::to_str_exact(f.abs(), i),\n+                None => ::$ty::to_str_digits(f.abs(), 6)\n+            };\n+            fmt.pad_integral(s.as_bytes(), \"\", *f >= 0.0);\n+        }\n+    }\n+})\n+floating!(float)\n+floating!(f32)\n+floating!(f64)\n+\n impl<T> Poly for T {\n     fn fmt(t: &T, f: &mut Formatter) {\n         match (f.width, f.precision) {"}, {"sha": "6999f046b7b7aeeee3f4bd442e7e62f44439d6f8", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36882b3d54043efc9f78459da39471fb8d5e6239/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36882b3d54043efc9f78459da39471fb8d5e6239/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=36882b3d54043efc9f78459da39471fb8d5e6239", "patch": "@@ -637,16 +637,17 @@ impl Context {\n             Known(tyname) => {\n                 let fmt_trait = match tyname.as_slice() {\n                     \"?\" => \"Poly\",\n-                    \"d\" | \"i\" => \"Signed\",\n-                    \"u\" => \"Unsigned\",\n                     \"b\" => \"Bool\",\n                     \"c\" => \"Char\",\n+                    \"d\" | \"i\" => \"Signed\",\n+                    \"f\" => \"Float\",\n                     \"o\" => \"Octal\",\n-                    \"x\" => \"LowerHex\",\n-                    \"X\" => \"UpperHex\",\n-                    \"s\" => \"String\",\n                     \"p\" => \"Pointer\",\n+                    \"s\" => \"String\",\n                     \"t\" => \"Binary\",\n+                    \"u\" => \"Unsigned\",\n+                    \"x\" => \"LowerHex\",\n+                    \"X\" => \"UpperHex\",\n                     _ => {\n                         self.ecx.span_err(sp, fmt!(\"unknown format trait \\\n                                                     `%s`\", tyname));"}, {"sha": "a0d3eb7d803287d3a6dcc1b2d97e6074e0992a4e", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36882b3d54043efc9f78459da39471fb8d5e6239/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36882b3d54043efc9f78459da39471fb8d5e6239/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=36882b3d54043efc9f78459da39471fb8d5e6239", "patch": "@@ -172,11 +172,20 @@ pub fn main() {\n     t!(ifmt!(\"{:#o}\", -1u8), \"0o377\");\n \n     // Signed combinations\n-    t!(ifmt!(\"{:+5d}\", 1),  ~\"   +1\");\n-    t!(ifmt!(\"{:+5d}\", -1), ~\"   -1\");\n-    t!(ifmt!(\"{:05d}\", 1),    ~\"00001\");\n-    t!(ifmt!(\"{:05d}\", -1),   ~\"-0001\");\n-    t!(ifmt!(\"{:+05d}\", 1),   ~\"+0001\");\n-    t!(ifmt!(\"{:+05d}\", -1),  ~\"-0001\");\n+    t!(ifmt!(\"{:+5d}\", 1),  \"   +1\");\n+    t!(ifmt!(\"{:+5d}\", -1), \"   -1\");\n+    t!(ifmt!(\"{:05d}\", 1),   \"00001\");\n+    t!(ifmt!(\"{:05d}\", -1),  \"-0001\");\n+    t!(ifmt!(\"{:+05d}\", 1),  \"+0001\");\n+    t!(ifmt!(\"{:+05d}\", -1), \"-0001\");\n+\n+    // Some float stuff\n+    t!(ifmt!(\"{:f}\", 1.0f), \"1\");\n+    t!(ifmt!(\"{:f}\", 1.0f32), \"1\");\n+    t!(ifmt!(\"{:f}\", 1.0f64), \"1\");\n+    t!(ifmt!(\"{:.3f}\", 1.0f), \"1.000\");\n+    t!(ifmt!(\"{:10.3f}\", 1.0f),   \"     1.000\");\n+    t!(ifmt!(\"{:+10.3f}\", 1.0f),  \"    +1.000\");\n+    t!(ifmt!(\"{:+10.3f}\", -1.0f), \"    -1.000\");\n }\n "}]}