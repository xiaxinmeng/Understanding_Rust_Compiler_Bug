{"sha": "bc1595473bad5ab808b2734260286ba0f847546a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTU5NTQ3M2JhZDVhYjgwOGIyNzM0MjYwMjg2YmEwZjg0NzU0NmE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-04-16T15:13:44Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-04-17T01:44:49Z"}, "message": "record await span inside GeneratorInteriorTypeCause", "tree": {"sha": "b1b32d87ba1ce6df6633fe9979198ce58a273485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b32d87ba1ce6df6633fe9979198ce58a273485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1595473bad5ab808b2734260286ba0f847546a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1595473bad5ab808b2734260286ba0f847546a", "html_url": "https://github.com/rust-lang/rust/commit/bc1595473bad5ab808b2734260286ba0f847546a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1595473bad5ab808b2734260286ba0f847546a/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868b51be6f29d5b43d37c5d65bac1482d3a50ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/868b51be6f29d5b43d37c5d65bac1482d3a50ad8", "html_url": "https://github.com/rust-lang/rust/commit/868b51be6f29d5b43d37c5d65bac1482d3a50ad8"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "e127c222dacd43016c576bf5d745c5978a94f372", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc1595473bad5ab808b2734260286ba0f847546a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1595473bad5ab808b2734260286ba0f847546a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=bc1595473bad5ab808b2734260286ba0f847546a", "patch": "@@ -298,14 +298,14 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// ```ignore (pseudo-Rust)\n /// async move {\n-///     let x: T = ...;\n+///     let x: T = expr;\n ///     foo.await\n ///     ...\n /// }\n /// ```\n ///\n-/// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n-/// the scope that contains `x`.\n+/// Here, we would store the type `T`, the span of the value `x`, the \"scope-span\" for\n+/// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.\n #[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n@@ -314,6 +314,8 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub span: Span,\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n+    /// Span of `.await` statement.\n+    pub await_span: Span,\n     /// Expr which the type evaluated from.\n     pub expr: Option<hir::HirId>,\n }"}, {"sha": "c0e14d044ecb87b068a8ccb199171519eada5240", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc1595473bad5ab808b2734260286ba0f847546a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1595473bad5ab808b2734260286ba0f847546a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=bc1595473bad5ab808b2734260286ba0f847546a", "patch": "@@ -125,6 +125,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        await_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1260,20 +1261,31 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         ty_matches(ty)\n                     })\n                     .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, expr, .. } = cause;\n-                (span, source_map.span_to_snippet(*span), scope_span, expr, from_awaited_ty)\n+                let ty::GeneratorInteriorTypeCause { span, scope_span, await_span, expr, .. } =\n+                    cause;\n+                (\n+                    span,\n+                    source_map.span_to_snippet(*span),\n+                    scope_span,\n+                    await_span,\n+                    expr,\n+                    from_awaited_ty,\n+                )\n             });\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: target_ty={:?} \\\n-                generator_interior_types={:?} target_span={:?}\",\n-            target_ty, tables.generator_interior_types, target_span\n+                generator_interior_types={:?} target_span={:?} await_span={:?}\",\n+            target_ty, tables.generator_interior_types, target_span, await_span\n         );\n-        if let Some((target_span, Ok(snippet), scope_span, expr, from_awaited_ty)) = target_span {\n+        if let Some((target_span, Ok(snippet), scope_span, await_span, expr, from_awaited_ty)) =\n+            target_span\n+        {\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 *target_span,\n                 scope_span,\n+                await_span,\n                 *expr,\n                 snippet,\n                 generator_body,\n@@ -1298,6 +1310,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        await_span: Span,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1373,12 +1386,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let Some(await_span) = from_awaited_ty {\n             // The type causing this obligation is one being awaited at await_span.\n             let mut span = MultiSpan::from_span(await_span);\n-\n-            span.push_span_label(\n-                await_span,\n-                format!(\"await occurs here on type `{}`, which {}\", target_ty, trait_explanation),\n-            );\n-\n             err.span_note(\n                 span,\n                 &format!(\n@@ -1392,7 +1399,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n                 tables.generator_interior_types\n             );\n-            let await_span = tables.generator_interior_types.iter().map(|t| t.span).last().unwrap();\n             let mut span = MultiSpan::from_span(await_span);\n             span.push_span_label(\n                 await_span,"}, {"sha": "99e01a0332f4905abf7941adb068574349a84d3f", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc1595473bad5ab808b2734260286ba0f847546a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1595473bad5ab808b2734260286ba0f847546a/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=bc1595473bad5ab808b2734260286ba0f847546a", "patch": "@@ -96,6 +96,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n+                        await_span: yield_data.span,\n                         expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);"}]}