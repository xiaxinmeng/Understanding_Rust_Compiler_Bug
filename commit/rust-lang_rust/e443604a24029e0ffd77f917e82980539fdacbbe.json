{"sha": "e443604a24029e0ffd77f917e82980539fdacbbe", "node_id": "C_kwDOAAsO6NoAKGU0NDM2MDRhMjQwMjllMGZmZDc3ZjkxN2U4Mjk4MDUzOWZkYWNiYmU", "commit": {"author": {"name": "Robin Schroer", "email": "git@sulami.xyz", "date": "2023-01-06T03:52:51Z"}, "committer": {"name": "Robin Schroer", "email": "git@sulami.xyz", "date": "2023-01-06T03:58:51Z"}, "message": "unused_self: Don't trigger if the method body contains todo!()\n\nIf the author is using todo!(), presumably they intend to use self at\nsome point later, so we don't have a good basis to recommend factoring\nout to an associated function.\n\nFixes #10117.\n\nchangelog: Don't trigger [`unused_self`] if the method body contains a `todo!()` call", "tree": {"sha": "f8a7ded43d25f2ba72cb015ddf783de17bcbee86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8a7ded43d25f2ba72cb015ddf783de17bcbee86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e443604a24029e0ffd77f917e82980539fdacbbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEv1TxOhn3wIfLNaL12sndJk0dKYoFAmO3nHsACgkQ2sndJk0d\nKYrwEw/8D+c4ObL61KfG7YOlivCE1TVqYOtSAz5Oj/ePIQI7c/WEsVlVr/a0AyAA\n2O3xSV4pCgXw5CcBdnUbczCrFhqxXHw6215faO6n+8z+Fzu2YuwYzs7mJv4Q1gcB\nquRI/2y1dpX2WqsLf0K407+YyNMK6ROosyxUTVsVsl9i6keSHOExgnutTlHFmk2H\nPAq8QOy0MnkslJqJGkTJIxEBn8mvWE8EBggv4iQzN6e6s+5y9tbqZJizcLDeDPXM\nQta14hNIUGqjBU/pcdEegZvtXRJFEajzGqNBLV7deJhDI2XBy+s06TCLgoFuVg3R\nhbdAgAp3ug5eEkOtuMyp61fazcti7cq0ZK1ENPfczul532Mmx92PMwAZwLM6YPXf\nPzhl/9UDK9PPhpRW+qrdDTc6lmIS05QLCsN8KqvBqg0fhkxwEhXySdssBIM8TZ6R\nq/UQ/sAc/ElwYf7H+EyK2UokxrazTpGnyMwM6RYgksnHcoTUSQmanmauhK4VxpLW\nybzgz8Gz+65W/tuVFU23SgCVImHU9aIkS5DRxuFeHhpxFFDX6uLxgYJvhBdpyiJg\nEbBopA1zMOj74Jg6onzyuKdaL6BTNMNX4SVsn0oOwVCFA+t5AjbiY6+sIx1Ovz4P\nZDfcGChCmbw4Fc0nA7oPAZmJqJe6gtff2NburwDtce1Ta8JPeEk=\n=XH0j\n-----END PGP SIGNATURE-----", "payload": "tree f8a7ded43d25f2ba72cb015ddf783de17bcbee86\nparent 4f4c96155ae7578dcbdf09dabd7f382a371cc9d5\nauthor Robin Schroer <git@sulami.xyz> 1672977171 +0900\ncommitter Robin Schroer <git@sulami.xyz> 1672977531 +0900\n\nunused_self: Don't trigger if the method body contains todo!()\n\nIf the author is using todo!(), presumably they intend to use self at\nsome point later, so we don't have a good basis to recommend factoring\nout to an associated function.\n\nFixes #10117.\n\nchangelog: Don't trigger [`unused_self`] if the method body contains a `todo!()` call\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e443604a24029e0ffd77f917e82980539fdacbbe", "html_url": "https://github.com/rust-lang/rust/commit/e443604a24029e0ffd77f917e82980539fdacbbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e443604a24029e0ffd77f917e82980539fdacbbe/comments", "author": {"login": "sulami", "id": 1843193, "node_id": "MDQ6VXNlcjE4NDMxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1843193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sulami", "html_url": "https://github.com/sulami", "followers_url": "https://api.github.com/users/sulami/followers", "following_url": "https://api.github.com/users/sulami/following{/other_user}", "gists_url": "https://api.github.com/users/sulami/gists{/gist_id}", "starred_url": "https://api.github.com/users/sulami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sulami/subscriptions", "organizations_url": "https://api.github.com/users/sulami/orgs", "repos_url": "https://api.github.com/users/sulami/repos", "events_url": "https://api.github.com/users/sulami/events{/privacy}", "received_events_url": "https://api.github.com/users/sulami/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sulami", "id": 1843193, "node_id": "MDQ6VXNlcjE4NDMxOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1843193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sulami", "html_url": "https://github.com/sulami", "followers_url": "https://api.github.com/users/sulami/followers", "following_url": "https://api.github.com/users/sulami/following{/other_user}", "gists_url": "https://api.github.com/users/sulami/gists{/gist_id}", "starred_url": "https://api.github.com/users/sulami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sulami/subscriptions", "organizations_url": "https://api.github.com/users/sulami/orgs", "repos_url": "https://api.github.com/users/sulami/repos", "events_url": "https://api.github.com/users/sulami/events{/privacy}", "received_events_url": "https://api.github.com/users/sulami/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5", "html_url": "https://github.com/rust-lang/rust/commit/4f4c96155ae7578dcbdf09dabd7f382a371cc9d5"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "f864c520302e4a56b294e2b8b66b290f005addfb", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e443604a24029e0ffd77f917e82980539fdacbbe/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e443604a24029e0ffd77f917e82980539fdacbbe/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=e443604a24029e0ffd77f917e82980539fdacbbe", "patch": "@@ -1,9 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::visitors::is_local_used;\n use if_chain::if_chain;\n-use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind};\n+use rustc_hir::{Body, Impl, ImplItem, ImplItemKind, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use std::ops::ControlFlow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -57,6 +59,20 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.owner_id);\n+        let contains_todo = |cx, body: &'_ Body<'_>| -> bool {\n+            clippy_utils::visitors::for_each_expr(body.value, |e| {\n+                if let Some(macro_call) = root_macro_call_first_node(cx, e) {\n+                    if cx.tcx.item_name(macro_call.def_id).as_str() == \"todo\" {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(())\n+                    }\n+                } else {\n+                    ControlFlow::Continue(())\n+                }\n+            })\n+            .is_some()\n+        };\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n@@ -65,6 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);\n+            if !contains_todo(cx, body);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "55bd5607185c67ec5f07eb9847f2e4ee4524c8b7", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e443604a24029e0ffd77f917e82980539fdacbbe/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e443604a24029e0ffd77f917e82980539fdacbbe/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=e443604a24029e0ffd77f917e82980539fdacbbe", "patch": "@@ -60,6 +60,16 @@ mod unused_self_allow {\n         // shouldn't trigger for public methods\n         pub fn unused_self_move(self) {}\n     }\n+\n+    pub struct E;\n+\n+    impl E {\n+        // shouldn't trigger if body contains todo!()\n+        pub fn unused_self_todo(self) {\n+            let x = 42;\n+            todo!()\n+        }\n+    }\n }\n \n pub use unused_self_allow::D;"}]}