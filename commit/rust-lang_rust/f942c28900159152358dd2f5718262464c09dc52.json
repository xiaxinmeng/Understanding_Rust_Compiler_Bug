{"sha": "f942c28900159152358dd2f5718262464c09dc52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NDJjMjg5MDAxNTkxNTIzNThkZDJmNTcxODI2MjQ2NGMwOWRjNTI=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-04-10T12:21:00Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-04-19T15:44:36Z"}, "message": "Do not intern NUL terminators\n\nThe C representation needed by LLVM requires strings to be\nNUL-terminated, but on the Rust side they should not contain unwanted\nNULs.", "tree": {"sha": "193ca57060e95d5088b503d8fb79b45f6bda71a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193ca57060e95d5088b503d8fb79b45f6bda71a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f942c28900159152358dd2f5718262464c09dc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f942c28900159152358dd2f5718262464c09dc52", "html_url": "https://github.com/rust-lang/rust/commit/f942c28900159152358dd2f5718262464c09dc52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f942c28900159152358dd2f5718262464c09dc52/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fc5d2746eb9ded7a43186f6e2e0b3bd3e8ffd42", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc5d2746eb9ded7a43186f6e2e0b3bd3e8ffd42", "html_url": "https://github.com/rust-lang/rust/commit/3fc5d2746eb9ded7a43186f6e2e0b3bd3e8ffd42"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "7f4375e993dae5965caeae6871bf3c99d57507fe", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f942c28900159152358dd2f5718262464c09dc52/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f942c28900159152358dd2f5718262464c09dc52/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=f942c28900159152358dd2f5718262464c09dc52", "patch": "@@ -49,7 +49,7 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n     let tf = InternedString::new(\"target_feature\");\n     for feat in whitelist {\n         if unsafe { LLVMRustHasFeature(target_machine, feat.as_ptr() as *const c_char) } {\n-            cfg.push(attr::mk_name_value_item_str(tf.clone(), intern(feat)))\n+            cfg.push(attr::mk_name_value_item_str(tf.clone(), intern(&feat[..feat.len()-1])))\n         }\n     }\n }"}]}