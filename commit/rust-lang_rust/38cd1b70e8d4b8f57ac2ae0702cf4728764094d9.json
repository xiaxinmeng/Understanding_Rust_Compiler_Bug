{"sha": "38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Y2QxYjcwZThkNGI4ZjU3YWMyYWUwNzAyY2Y0NzI4NzY0MDk0ZDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-26T09:46:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T09:46:45Z"}, "message": "Merge #5071\n\n5071: Cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2e41f0f53b488a162c4e86b93de3b2b49eb7fdd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e41f0f53b488a162c4e86b93de3b2b49eb7fdd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9cQFCRBK7hj4Ov3rIwAAdHIIAGrtQgK1y+lT8HWjo+64O+8c\nP1cJ/23FJ3//eMIDEyJgMSUZYvJwJwtcRhN1W1W0G/baUgfsY3S5Qs+++4mtJluF\nmP9qnw+islCrOhI4yC4AgfceKaz1UnO25lyk2ycZffmGh0DabWC3vKR0usE1pZCp\nYyKQeGZDwKAXpc76cBIAyKPa54feP7nRzg8p4eMjwA+z7F61w/VMKo6rmSD0qvmL\npQWinEazNr7W/uGT8Cyl5iW1FdmWd/3hSJ6BIg252Mt7WItgVc52BuNY8KC0ihRk\nnRVd4omz9qw3ds8YbfDnc9ofgUOUEE5DkIYGqJlBlhwhRaFaGYR1X10hdSEDlRM=\n=55kZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e41f0f53b488a162c4e86b93de3b2b49eb7fdd6\nparent 8a96815d009b688819dd7a8af28e989de61305d1\nparent b039f0d1baa34b7d53117085438769cc3402e112\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593164805 +0000\ncommitter GitHub <noreply@github.com> 1593164805 +0000\n\nMerge #5071\n\n5071: Cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "html_url": "https://github.com/rust-lang/rust/commit/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a96815d009b688819dd7a8af28e989de61305d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a96815d009b688819dd7a8af28e989de61305d1", "html_url": "https://github.com/rust-lang/rust/commit/8a96815d009b688819dd7a8af28e989de61305d1"}, {"sha": "b039f0d1baa34b7d53117085438769cc3402e112", "url": "https://api.github.com/repos/rust-lang/rust/commits/b039f0d1baa34b7d53117085438769cc3402e112", "html_url": "https://github.com/rust-lang/rust/commit/b039f0d1baa34b7d53117085438769cc3402e112"}], "stats": {"total": 57, "additions": 20, "deletions": 37}, "files": [{"sha": "d8677c23117ec417ae14ebfb8bd0da6c38a8149c", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "patch": "@@ -54,7 +54,7 @@ pub fn load_cargo(\n     Ok((host, vfs))\n }\n \n-pub(crate) fn load(\n+fn load(\n     crate_graph: CrateGraph,\n     source_root_config: SourceRootConfig,\n     vfs: &mut vfs::Vfs,"}, {"sha": "7533bb319a5545ce2646a9642261d8dfa0abd778", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "patch": "@@ -12,8 +12,6 @@ use parking_lot::RwLock;\n use ra_db::{CrateId, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n-use stdx::format_to;\n-use vfs::loader::Handle as _;\n \n use crate::{\n     config::Config,\n@@ -83,15 +81,15 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n-    workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n \n impl GlobalState {\n     pub(crate) fn new(sender: Sender<lsp_server::Message>, config: Config) -> GlobalState {\n         let loader = {\n             let (sender, receiver) = unbounded::<vfs::loader::Message>();\n-            let handle =\n-                vfs_notify::NotifyHandle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n+            let handle: vfs_notify::NotifyHandle =\n+                vfs::loader::Handle::spawn(Box::new(move |msg| sender.send(msg).unwrap()));\n             let handle = Box::new(handle) as Box<dyn vfs::loader::Handle>;\n             Handle { handle, receiver }\n         };\n@@ -171,14 +169,6 @@ impl GlobalState {\n         }\n     }\n \n-    pub(crate) fn maybe_collect_garbage(&mut self) {\n-        self.analysis_host.maybe_collect_garbage()\n-    }\n-\n-    pub(crate) fn collect_garbage(&mut self) {\n-        self.analysis_host.collect_garbage()\n-    }\n-\n     pub(crate) fn send(&mut self, message: lsp_server::Message) {\n         self.sender.send(message).unwrap()\n     }\n@@ -242,26 +232,6 @@ impl GlobalStateSnapshot {\n             ProjectWorkspace::Json { .. } => None,\n         })\n     }\n-\n-    pub(crate) fn status(&self) -> String {\n-        let mut buf = String::new();\n-        if self.workspaces.is_empty() {\n-            buf.push_str(\"no workspaces\\n\")\n-        } else {\n-            buf.push_str(\"workspaces:\\n\");\n-            for w in self.workspaces.iter() {\n-                format_to!(buf, \"{} packages loaded\\n\", w.n_packages());\n-            }\n-        }\n-        buf.push_str(\"\\nanalysis:\\n\");\n-        buf.push_str(\n-            &self\n-                .analysis\n-                .status()\n-                .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n-        );\n-        buf\n-    }\n }\n \n pub(crate) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {"}, {"sha": "6c21f25fe42bbefc1b388a13764db667a2fc5f64", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "patch": "@@ -39,7 +39,20 @@ use crate::{\n \n pub(crate) fn handle_analyzer_status(snap: GlobalStateSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n-    let mut buf = snap.status();\n+\n+    let mut buf = String::new();\n+    if snap.workspaces.is_empty() {\n+        buf.push_str(\"no workspaces\\n\")\n+    } else {\n+        buf.push_str(\"workspaces:\\n\");\n+        for w in snap.workspaces.iter() {\n+            format_to!(buf, \"{} packages loaded\\n\", w.n_packages());\n+        }\n+    }\n+    buf.push_str(\"\\nanalysis:\\n\");\n+    buf.push_str(\n+        &snap.analysis.status().unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n+    );\n     format_to!(buf, \"\\n\\nrequests:\\n\");\n     let requests = snap.latest_requests.read();\n     for (is_last, r) in requests.iter() {"}, {"sha": "162c0057e982ebcd0ed244b295e119378e0f8a6b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38cd1b70e8d4b8f57ac2ae0702cf4728764094d9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=38cd1b70e8d4b8f57ac2ae0702cf4728764094d9", "patch": "@@ -158,7 +158,7 @@ impl GlobalState {\n                     }\n                     Task::Unit => (),\n                 }\n-                self.maybe_collect_garbage();\n+                self.analysis_host.maybe_collect_garbage();\n             }\n             Event::Vfs(task) => match task {\n                 vfs::loader::Message::Loaded { files } => {\n@@ -274,7 +274,7 @@ impl GlobalState {\n         self.req_queue.incoming.register(req.id.clone(), (req.method.clone(), request_received));\n \n         RequestDispatcher { req: Some(req), global_state: self }\n-            .on_sync::<lsp_ext::CollectGarbage>(|s, ()| Ok(s.collect_garbage()))?\n+            .on_sync::<lsp_ext::CollectGarbage>(|s, ()| Ok(s.analysis_host.collect_garbage()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n             .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n             .on_sync::<lsp_types::request::Shutdown>(|_, ()| Ok(()))?"}]}