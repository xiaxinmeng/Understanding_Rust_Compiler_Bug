{"sha": "9a0b7749665d925d8f533756149deba74f2db88b", "node_id": "C_kwDOAAsO6NoAKDlhMGI3NzQ5NjY1ZDkyNWQ4ZjUzMzc1NjE0OWRlYmE3NGYyZGI4OGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T03:08:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T03:08:52Z"}, "message": "Auto merge of #97931 - xldenis:fix-if-let-source-scopes, r=nagisa\n\nFix `SourceScope` for `if let` bindings.\n\nFixes #97799.\n\nI'm not sure how to test this properly, is there any way to observe the difference in behavior apart from `ui` tests? I'm worried that they would be overlooked in the case of a regression.", "tree": {"sha": "effe31dc7f7f37ef61ecd17ebc5ea0339470ee9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/effe31dc7f7f37ef61ecd17ebc5ea0339470ee9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0b7749665d925d8f533756149deba74f2db88b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0b7749665d925d8f533756149deba74f2db88b", "html_url": "https://github.com/rust-lang/rust/commit/9a0b7749665d925d8f533756149deba74f2db88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0b7749665d925d8f533756149deba74f2db88b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c6bde14eabdd61c35505ed6834ee9196c2fdc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c6bde14eabdd61c35505ed6834ee9196c2fdc9", "html_url": "https://github.com/rust-lang/rust/commit/17c6bde14eabdd61c35505ed6834ee9196c2fdc9"}, {"sha": "a434e4c8f1a97482118f2b0ef833dc3e93bc5103", "url": "https://api.github.com/repos/rust-lang/rust/commits/a434e4c8f1a97482118f2b0ef833dc3e93bc5103", "html_url": "https://github.com/rust-lang/rust/commit/a434e4c8f1a97482118f2b0ef833dc3e93bc5103"}], "stats": {"total": 507, "additions": 330, "deletions": 177}, "files": [{"sha": "cffb67ef013282f5491640f9167cb44b872067d0", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -63,15 +63,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         (if_then_scope, then_source_info),\n                         LintLevel::Inherited,\n                         |this| {\n+                            let source_info = if this.is_let(cond) {\n+                                let variable_scope = this.new_source_scope(\n+                                    then_expr.span,\n+                                    LintLevel::Inherited,\n+                                    None,\n+                                );\n+                                this.source_scope = variable_scope;\n+                                SourceInfo { span: then_expr.span, scope: variable_scope }\n+                            } else {\n+                                this.source_info(then_expr.span)\n+                            };\n                             let (then_block, else_block) =\n                                 this.in_if_then_scope(condition_scope, |this| {\n                                     let then_blk = unpack!(this.then_else_break(\n                                         block,\n                                         &this.thir[cond],\n                                         Some(condition_scope),\n                                         condition_scope,\n-                                        then_expr.span,\n+                                        source_info\n                                     ));\n+\n                                     this.expr_into_dest(destination, then_blk, then_expr)\n                                 });\n                             then_block.and(else_block)\n@@ -97,7 +109,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Let { expr, ref pat } => {\n                 let scope = this.local_scope();\n                 let (true_block, false_block) = this.in_if_then_scope(scope, |this| {\n-                    this.lower_let_expr(block, &this.thir[expr], pat, scope, expr_span)\n+                    this.lower_let_expr(block, &this.thir[expr], pat, scope, None, expr_span)\n                 });\n \n                 this.cfg.push_assign_constant(\n@@ -575,4 +587,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         block_and\n     }\n+\n+    fn is_let(&self, expr: ExprId) -> bool {\n+        match self.thir[expr].kind {\n+            ExprKind::Let { .. } => true,\n+            ExprKind::Scope { value, .. } => self.is_let(value),\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "1628f1a4b850b99be051522d31ea4a818887456d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n         temp_scope_override: Option<region::Scope>,\n         break_scope: region::Scope,\n-        variable_scope_span: Span,\n+        variable_source_info: SourceInfo,\n     ) -> BlockAnd<()> {\n         let this = self;\n         let expr_span = expr.span;\n@@ -52,15 +52,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     &this.thir[lhs],\n                     temp_scope_override,\n                     break_scope,\n-                    variable_scope_span,\n+                    variable_source_info,\n                 ));\n \n                 let rhs_then_block = unpack!(this.then_else_break(\n                     lhs_then_block,\n                     &this.thir[rhs],\n                     temp_scope_override,\n                     break_scope,\n-                    variable_scope_span,\n+                    variable_source_info,\n                 ));\n \n                 rhs_then_block.unit()\n@@ -73,13 +73,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         &this.thir[value],\n                         temp_scope_override,\n                         break_scope,\n-                        variable_scope_span,\n+                        variable_source_info,\n                     )\n                 })\n             }\n-            ExprKind::Let { expr, ref pat } => {\n-                this.lower_let_expr(block, &this.thir[expr], pat, break_scope, variable_scope_span)\n-            }\n+            ExprKind::Let { expr, ref pat } => this.lower_let_expr(\n+                block,\n+                &this.thir[expr],\n+                pat,\n+                break_scope,\n+                Some(variable_source_info.scope),\n+                variable_source_info.span,\n+            ),\n             _ => {\n                 let temp_scope = temp_scope_override.unwrap_or_else(|| this.local_scope());\n                 let mutability = Mutability::Mut;\n@@ -1772,6 +1777,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n         pat: &Pat<'tcx>,\n         else_target: region::Scope,\n+        source_scope: Option<SourceScope>,\n         span: Span,\n     ) -> BlockAnd<()> {\n         let expr_span = expr.span;\n@@ -1797,7 +1803,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n         self.break_for_else(otherwise_post_guard_block, else_target, self.source_info(expr_span));\n \n-        self.declare_bindings(None, pat.span.to(span), pat, ArmHasGuard(false), opt_expr_place);\n+        self.declare_bindings(\n+            source_scope,\n+            pat.span.to(span),\n+            pat,\n+            ArmHasGuard(false),\n+            opt_expr_place,\n+        );\n+\n         let post_guard_block = self.bind_pattern(\n             self.source_info(pat.span),\n             guard_candidate,\n@@ -1969,12 +1982,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Guard::If(e) => {\n                         let e = &this.thir[e];\n                         guard_span = e.span;\n-                        this.then_else_break(block, e, None, match_scope, arm_span)\n+                        this.then_else_break(\n+                            block,\n+                            e,\n+                            None,\n+                            match_scope,\n+                            this.source_info(arm_span),\n+                        )\n                     }\n                     Guard::IfLet(ref pat, scrutinee) => {\n                         let s = &this.thir[scrutinee];\n                         guard_span = s.span;\n-                        this.lower_let_expr(block, s, pat, match_scope, arm_span)\n+                        this.lower_let_expr(block, s, pat, match_scope, None, arm_span)\n                     }\n                 });\n "}, {"sha": "cdc37ce48fbad7b9a53634cc8c43000cf6c1a55d", "filename": "src/test/debuginfo/lexical-scope-in-if-let.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-if-let.rs?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -0,0 +1,100 @@\n+// compile-flags:-g\n+\n+// === GDB TESTS ==================================================================================\n+\n+// gdb-command:run\n+// gdb-command:info locals\n+// gdb-check:a = 123\n+\n+// gdb-command:continue\n+// gdb-command:info locals\n+// gdb-check:x = 42\n+// gdb-check:a = 123\n+\n+// gdb-command:continue\n+// gdb-command:info locals\n+// gdb-check:y = true\n+// gdb-check:b = 456\n+// gdb-check:x = 42\n+// gdb-check:a = 123\n+\n+// gdb-command:continue\n+// gdb-command:info locals\n+// gdb-check:z = 10\n+// gdb-check:c = 789\n+// gdb-check:y = true\n+// gdb-check:b = 456\n+// gdb-check:x = 42\n+// gdb-check:a = 123\n+\n+// === LLDB TESTS =================================================================================\n+\n+// lldb-command:run\n+// lldb-command:frame variable\n+// lldb-check:(int) a = 123\n+\n+// lldb-command:continue\n+// lldb-command:frame variable\n+// lldb-check:(int) a = 123 (int) x = 42\n+\n+// lldb-command:continue\n+// lldb-command:frame variable\n+// lldb-check:(int) a = 123 (int) x = 42 (int) b = 456 (bool) y = true\n+\n+// lldb-command:continue\n+// lldb-command:frame variable\n+// lldb-check:(int) a = 123 (int) x = 42 (int) b = 456 (bool) y = true (int) c = 789 (int) z = 10\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+// cdb-command: dv\n+// cdb-check:[...]a = 0n123\n+\n+// cdb-command: g\n+// cdb-command: dv\n+// cdb-check:[...]a = 0n123\n+// cdb-check:[...]x = 0n42\n+\n+// cdb-command: g\n+// cdb-command: dv\n+// cdb-check:[...]y = true\n+// cdb-check:[...]b = 0n456\n+// cdb-check:[...]a = 0n123\n+// cdb-check:[...]x = 0n42\n+\n+// cdb-command: g\n+// cdb-command: dv\n+// cdb-check:[...]z = 0n10\n+// cdb-check:[...]c = 0n789\n+// cdb-check:[...]y = true\n+// cdb-check:[...]b = 0n456\n+// cdb-check:[...]a = 0n123\n+// cdb-check:[...]x = 0n42\n+\n+fn main() {\n+    let a = id(123);\n+\n+    zzz(); // #break\n+\n+    if let Some(x) = id(Some(42)) {\n+        zzz(); // #break\n+\n+        let b = id(456);\n+\n+        if let Ok(y) = id::<Result<bool, ()>>(Ok(true)) {\n+            zzz(); // #break\n+\n+            let c = id(789);\n+\n+            if let (z, 42) = id((10, 42)) {\n+                zzz(); // #break\n+            }\n+        }\n+    }\n+}\n+\n+#[inline(never)]\n+fn id<T>(value: T) -> T { value }\n+\n+fn zzz() { }"}, {"sha": "047853696f228c93be89cbe81a7aa323ac43ade0", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -10,26 +10,28 @@\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:11:47: 11:49\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   "}, {"sha": "047853696f228c93be89cbe81a7aa323ac43ade0", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -10,26 +10,28 @@\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/discriminant.rs:11:9: 11:10\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n-          StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          Deinit(_3);                      // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-          discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n--         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          StorageLive(_3);                 // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          Deinit(_3);                      // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          ((_3 as Some).0: bool) = const true; // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+          discriminant(_3) = 1;            // scope 2 at $DIR/discriminant.rs:11:34: 11:44\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n++         _4 = const 1_isize;              // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n++         switchInt(const 1_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb2: {\n-          _2 = const 42_i32;               // scope 0 at $DIR/discriminant.rs:11:47: 11:49\n+          _2 = const 42_i32;               // scope 2 at $DIR/discriminant.rs:11:47: 11:49\n           goto -> bb4;                     // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n       }\n   "}, {"sha": "982dd7a27bc6b3ca884db8b5f50fb58817f70bfe", "filename": "src/test/mir-opt/early_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_soundness.no_downcast.EarlyOtherwiseBranch.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -7,22 +7,24 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:20: 13:30\n       let mut _3: isize;                   // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n       let mut _4: &E;                      // in scope 0 at $DIR/early_otherwise_branch_soundness.rs:12:16: 12:17\n+      scope 1 {\n+      }\n   \n       bb0: {\n-          _3 = discriminant((*_1));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _3 = discriminant((*_1));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          switchInt(move _3) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n       }\n   \n       bb1: {\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _4 = move (((*_1) as Some).0: &E); // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          _2 = discriminant((*_4));        // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n-          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          StorageLive(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _4 = move (((*_1) as Some).0: &E); // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          _2 = discriminant((*_4));        // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          StorageDead(_4);                 // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n+          switchInt(move _2) -> [1_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:12: 13:31\n       }\n   \n       bb2: {\n-          _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n+          _0 = const 1_u32;                // scope 1 at $DIR/early_otherwise_branch_soundness.rs:13:38: 13:39\n           goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_soundness.rs:13:5: 13:52\n       }\n   "}, {"sha": "15409fa0dd23c2ae54dfcf4098ba888bbfd27b4b", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -27,9 +27,9 @@\n           let _6: core::num::flt2dec::Sign; // in scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n           scope 2 {\n               debug sign => _6;            // in scope 2 at $DIR/funky_arms.rs:19:9: 19:13\n-              let _10: usize;              // in scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n               scope 3 {\n                   debug precision => _10;  // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+                  let _10: usize;          // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n               }\n           }\n       }\n@@ -63,52 +63,52 @@\n       }\n   \n       bb4: {\n-          StorageLive(_7);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          _7 = Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n+          StorageLive(_7);                 // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          StorageLive(_8);                 // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          _8 = &(*_1);                     // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n+          _7 = Formatter::precision(move _8) -> bb5; // scope 3 at $DIR/funky_arms.rs:24:30: 24:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n                                            // + literal: Const { ty: for<'r> fn(&'r Formatter) -> Option<usize> {Formatter::precision}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          StorageDead(_8);                 // scope 2 at $DIR/funky_arms.rs:24:44: 24:45\n-          _9 = discriminant(_7);           // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n-          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n+          StorageDead(_8);                 // scope 3 at $DIR/funky_arms.rs:24:44: 24:45\n+          _9 = discriminant(_7);           // scope 3 at $DIR/funky_arms.rs:24:12: 24:27\n+          switchInt(move _9) -> [1_isize: bb6, otherwise: bb8]; // scope 3 at $DIR/funky_arms.rs:24:12: 24:27\n       }\n   \n       bb6: {\n-          StorageLive(_10);                // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n-          _10 = ((_7 as Some).0: usize);   // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n-          StorageLive(_11);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n-          _11 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:26:43: 26:46\n-          StorageLive(_12);                // scope 2 at $DIR/funky_arms.rs:26:48: 26:51\n-          _12 = _2;                        // scope 2 at $DIR/funky_arms.rs:26:48: 26:51\n-          StorageLive(_13);                // scope 2 at $DIR/funky_arms.rs:26:53: 26:57\n-          _13 = _6;                        // scope 2 at $DIR/funky_arms.rs:26:53: 26:57\n-          StorageLive(_14);                // scope 2 at $DIR/funky_arms.rs:26:59: 26:79\n-          StorageLive(_15);                // scope 2 at $DIR/funky_arms.rs:26:59: 26:75\n-          StorageLive(_16);                // scope 2 at $DIR/funky_arms.rs:26:59: 26:68\n-          _16 = _10;                       // scope 2 at $DIR/funky_arms.rs:26:59: 26:68\n-          _15 = move _16 as u32 (Misc);    // scope 2 at $DIR/funky_arms.rs:26:59: 26:75\n-          StorageDead(_16);                // scope 2 at $DIR/funky_arms.rs:26:74: 26:75\n-          _14 = Add(move _15, const 1_u32); // scope 2 at $DIR/funky_arms.rs:26:59: 26:79\n-          StorageDead(_15);                // scope 2 at $DIR/funky_arms.rs:26:78: 26:79\n-          StorageLive(_17);                // scope 2 at $DIR/funky_arms.rs:26:81: 26:86\n-          _17 = _3;                        // scope 2 at $DIR/funky_arms.rs:26:81: 26:86\n-          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 2 at $DIR/funky_arms.rs:26:9: 26:87\n+          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+          _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+          StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n+          _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n+          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n+          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n+          StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n+          _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n+          StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n+          StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n+          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n+          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n+          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n+          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:26:74: 26:75\n+          _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n+          StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:26:78: 26:79\n+          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n+          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n+          _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb7; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut Formatter<'s>, &'t0 T, Sign, u32, bool) -> Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n-          StorageDead(_17);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_14);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_13);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_12);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n-          StorageDead(_11);                // scope 2 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n           StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:27:5: 27:6\n           goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n       }"}, {"sha": "ce7ca20358e12f942e7e8606d2291ebd8d4b8f13", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -14,9 +14,9 @@ fn main() -> () {\n     let mut _11: isize;                  // in scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     scope 1 {\n         debug e => _1;                   // in scope 1 at $DIR/issue-41888.rs:7:9: 7:10\n-        let _6: K;                       // in scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         scope 2 {\n             debug _k => _6;              // in scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+            let _6: K;                   // in scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n         }\n     }\n \n@@ -51,15 +51,15 @@ fn main() -> () {\n \n     bb4: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        _5 = discriminant(_1);           // scope 2 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb5, otherwise: bb6]; // scope 2 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n     bb5: {\n-        StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n-        _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:10:29: 13:10\n+        StorageLive(_6);                 // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+        _9 = const false;                // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+        _6 = move ((_1 as F).0: K);      // scope 2 at $DIR/issue-41888.rs:10:21: 10:23\n+        _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n         goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }"}, {"sha": "b8023a6a8e690a3508c10bdd6723dd4d1481386c", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -10,11 +10,11 @@\n       let mut _6: u32;                     // in scope 0 at $DIR/issue-75439.rs:10:33: 10:35\n       scope 1 {\n           debug dwords => _2;              // in scope 1 at $DIR/issue-75439.rs:7:9: 7:15\n-          let _4: u32;                     // in scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n           scope 3 {\n               debug ip => _4;              // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n-          }\n-          scope 4 {\n+              let _4: u32;                 // in scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+              scope 4 {\n+              }\n           }\n       }\n       scope 2 {\n@@ -32,19 +32,19 @@\n   \n       bb1: {\n           StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:7:52: 7:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          switchInt(_2[2 of 4]) -> [0_u32: bb5, 4294901760_u32: bb6, otherwise: bb8]; // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb4: {\n-          StorageLive(_5);                 // scope 1 at $DIR/issue-75439.rs:10:14: 10:38\n+          StorageLive(_5);                 // scope 3 at $DIR/issue-75439.rs:10:14: 10:38\n           StorageLive(_6);                 // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n           _6 = _4;                         // scope 4 at $DIR/issue-75439.rs:10:33: 10:35\n           _5 = transmute::<u32, [u8; 4]>(move _6) -> bb7; // scope 4 at $DIR/issue-75439.rs:10:23: 10:36\n@@ -54,23 +54,23 @@\n       }\n   \n       bb5: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          goto -> bb4;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          StorageLive(_4);                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          goto -> bb4;                     // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb6: {\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          _4 = _2[3 of 4];                 // scope 1 at $DIR/issue-75439.rs:9:27: 9:29\n-          goto -> bb4;                     // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n+          StorageLive(_4);                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          _4 = _2[3 of 4];                 // scope 3 at $DIR/issue-75439.rs:9:27: 9:29\n+          goto -> bb4;                     // scope 3 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb7: {\n           StorageDead(_6);                 // scope 4 at $DIR/issue-75439.rs:10:35: 10:36\n-          Deinit(_0);                      // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n-          ((_0 as Some).0: [u8; 4]) = move _5; // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n-          discriminant(_0) = 1;            // scope 1 at $DIR/issue-75439.rs:10:9: 10:39\n-          StorageDead(_5);                 // scope 1 at $DIR/issue-75439.rs:10:38: 10:39\n+          Deinit(_0);                      // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          ((_0 as Some).0: [u8; 4]) = move _5; // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          discriminant(_0) = 1;            // scope 3 at $DIR/issue-75439.rs:10:9: 10:39\n+          StorageDead(_5);                 // scope 3 at $DIR/issue-75439.rs:10:38: 10:39\n           StorageDead(_4);                 // scope 1 at $DIR/issue-75439.rs:11:5: 11:6\n           goto -> bb9;                     // scope 1 at $DIR/issue-75439.rs:9:5: 13:6\n       }"}, {"sha": "075fe8d090829176796098fa7d3510e9f679c3a2", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -8,44 +8,44 @@\n       let mut _3: std::option::Option<T>;  // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n       let mut _4: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n       let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n-      let _6: u8;                          // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n -     let mut _7: bool;                    // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n -     let mut _8: u8;                      // in scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n       scope 1 {\n           debug a => _6;                   // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          let _6: u8;                      // in scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          Deinit(_2);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          discriminant(_2) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          Deinit(_3);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n-          Deinit(_1);                      // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          (_1.0: std::option::Option<u8>) = move _2; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          (_1.1: std::option::Option<T>) = move _3; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n-          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          Deinit(_2);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:31: 4:49\n+          StorageLive(_3);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_3);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          discriminant(_3) = 0;            // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:51: 4:68\n+          Deinit(_1);                      // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          (_1.0: std::option::Option<u8>) = move _2; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          (_1.1: std::option::Option<T>) = move _3; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n+          StorageDead(_3);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          StorageDead(_2);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n+          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n       }\n   \n       bb1: {\n-          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n-          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n-          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n--         StorageLive(_7);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n--         StorageLive(_8);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n--         _8 = _6;                         // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n--         _7 = Gt(move _8, const 42_u8);   // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n--         StorageDead(_8);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n--         StorageDead(_7);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:7:9: 7:10\n+          StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 1 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+-         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+-         StorageLive(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+-         _8 = _6;                         // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+-         _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+-         StorageDead(_8);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n+-         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-fixedpoint.rs:7:9: 7:10\n           StorageDead(_6);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }"}, {"sha": "70486f546d71bee5f8b19f261d11db08756461a5", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -5,36 +5,36 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/unreachable.rs:8:11: 8:11\n       let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable.rs:9:23: 9:30\n       let mut _2: isize;                   // in scope 0 at $DIR/unreachable.rs:9:12: 9:20\n-      let _3: Empty;                       // in scope 0 at $DIR/unreachable.rs:9:17: 9:19\n-      let mut _4: i32;                     // in scope 0 at $DIR/unreachable.rs:10:13: 10:19\n       let _5: ();                          // in scope 0 at $DIR/unreachable.rs:12:9: 16:10\n       let mut _6: bool;                    // in scope 0 at $DIR/unreachable.rs:12:12: 12:16\n       let mut _7: !;                       // in scope 0 at $DIR/unreachable.rs:18:9: 18:21\n       scope 1 {\n           debug _x => _3;                  // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n-      }\n-      scope 2 {\n-          debug _y => _4;                  // in scope 2 at $DIR/unreachable.rs:10:13: 10:19\n+          let _3: Empty;                   // in scope 1 at $DIR/unreachable.rs:9:17: 9:19\n+          let mut _4: i32;                 // in scope 1 at $DIR/unreachable.rs:10:13: 10:19\n+          scope 2 {\n+              debug _y => _4;              // in scope 2 at $DIR/unreachable.rs:10:13: 10:19\n+          }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n-          _1 = empty() -> bb1;             // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n+          StorageLive(_1);                 // scope 1 at $DIR/unreachable.rs:9:23: 9:30\n+          _1 = empty() -> bb1;             // scope 1 at $DIR/unreachable.rs:9:23: 9:30\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:23: 9:28\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n--         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n-+         goto -> bb2;                     // scope 0 at $DIR/unreachable.rs:9:12: 9:20\n+          _2 = discriminant(_1);           // scope 1 at $DIR/unreachable.rs:9:12: 9:20\n+-         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable.rs:9:12: 9:20\n++         goto -> bb2;                     // scope 1 at $DIR/unreachable.rs:9:12: 9:20\n       }\n   \n       bb2: {\n--         StorageLive(_3);                 // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n--         _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable.rs:9:17: 9:19\n--         StorageLive(_4);                 // scope 0 at $DIR/unreachable.rs:10:13: 10:19\n+-         StorageLive(_3);                 // scope 1 at $DIR/unreachable.rs:9:17: 9:19\n+-         _3 = move ((_1 as Some).0: Empty); // scope 1 at $DIR/unreachable.rs:9:17: 9:19\n+-         StorageLive(_4);                 // scope 1 at $DIR/unreachable.rs:10:13: 10:19\n -         StorageLive(_5);                 // scope 2 at $DIR/unreachable.rs:12:9: 16:10\n -         StorageLive(_6);                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16\n -         _6 = const true;                 // scope 2 at $DIR/unreachable.rs:12:12: 12:16"}, {"sha": "d9f2681d145e6b07c7541580629eef5e97a18835", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -11,56 +11,56 @@\n       let mut _7: !;                       // in scope 0 at $DIR/unreachable_diverging.rs:18:9: 18:22\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/unreachable_diverging.rs:13:9: 13:10\n-          let _4: Empty;                   // in scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           scope 2 {\n               debug bomb => _4;            // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+              let _4: Empty;               // in scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n           }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_diverging.rs:13:9: 13:10\n           _1 = const true;                 // scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n-          StorageLive(_2);                 // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n-          _2 = empty() -> bb1;             // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          StorageLive(_2);                 // scope 2 at $DIR/unreachable_diverging.rs:14:25: 14:32\n+          _2 = empty() -> bb1;             // scope 2 at $DIR/unreachable_diverging.rs:14:25: 14:32\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n                                            // + literal: Const { ty: fn() -> Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          _3 = discriminant(_2);           // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n--         switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n-+         switchInt(move _3) -> [1_isize: bb2, otherwise: bb5]; // scope 1 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+          _3 = discriminant(_2);           // scope 2 at $DIR/unreachable_diverging.rs:14:12: 14:22\n+-         switchInt(move _3) -> [1_isize: bb2, otherwise: bb6]; // scope 2 at $DIR/unreachable_diverging.rs:14:12: 14:22\n++         switchInt(move _3) -> [1_isize: bb2, otherwise: bb5]; // scope 2 at $DIR/unreachable_diverging.rs:14:12: 14:22\n       }\n   \n       bb2: {\n-          StorageLive(_4);                 // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n-          _4 = move ((_2 as Some).0: Empty); // scope 1 at $DIR/unreachable_diverging.rs:14:17: 14:21\n-          StorageLive(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-          StorageLive(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n-          _6 = _1;                         // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n--         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n-+         goto -> bb3;                     // scope 1 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+          StorageLive(_4);                 // scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          _4 = move ((_2 as Some).0: Empty); // scope 2 at $DIR/unreachable_diverging.rs:14:17: 14:21\n+          StorageLive(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+          StorageLive(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+          _6 = _1;                         // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n+-         switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n++         goto -> bb3;                     // scope 2 at $DIR/unreachable_diverging.rs:15:12: 15:13\n       }\n   \n       bb3: {\n--         _5 = loop_forever() -> bb5;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-+         _5 = loop_forever() -> bb4;      // scope 1 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+-         _5 = loop_forever() -> bb5;      // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n++         _5 = loop_forever() -> bb4;      // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n--         _5 = const ();                   // scope 1 at $DIR/unreachable_diverging.rs:17:10: 17:10\n--         goto -> bb5;                     // scope 1 at $DIR/unreachable_diverging.rs:15:9: 17:10\n+-         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:17:10: 17:10\n+-         goto -> bb5;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n -     bb5: {\n-          StorageDead(_6);                 // scope 1 at $DIR/unreachable_diverging.rs:17:9: 17:10\n-          StorageDead(_5);                 // scope 1 at $DIR/unreachable_diverging.rs:17:9: 17:10\n-          StorageLive(_7);                 // scope 1 at $DIR/unreachable_diverging.rs:18:9: 18:22\n-          unreachable;                     // scope 1 at $DIR/unreachable_diverging.rs:18:15: 18:19\n+          StorageDead(_6);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+          StorageDead(_5);                 // scope 2 at $DIR/unreachable_diverging.rs:17:9: 17:10\n+          StorageLive(_7);                 // scope 2 at $DIR/unreachable_diverging.rs:18:9: 18:22\n+          unreachable;                     // scope 2 at $DIR/unreachable_diverging.rs:18:15: 18:19\n       }\n   \n -     bb6: {"}, {"sha": "f8b41d7b4c5dfdecf3c6f17fa4e9635a78fe5b97", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -13,28 +13,30 @@\n       let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:5: 10:6\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+          scope 2 {\n+          }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-          StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-          discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n--         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+          discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n++         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n++         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb2: {\n-          _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n-          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+          _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:8:9: 8:15\n+          nop;                             // scope 2 at $DIR/while_let_loops.rs:9:9: 9:14\n+          goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   \n       bb3: {"}, {"sha": "f8b41d7b4c5dfdecf3c6f17fa4e9635a78fe5b97", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -13,28 +13,30 @@\n       let mut _8: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:5: 10:6\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+          scope 2 {\n+          }\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n           _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-          StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-          Deinit(_3);                      // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-          discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n--         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n--         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n-+         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+          StorageLive(_3);                 // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+          Deinit(_3);                      // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+          discriminant(_3) = 0;            // scope 2 at $DIR/while_let_loops.rs:7:28: 7:32\n+-         _4 = discriminant(_3);           // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n++         _4 = const 0_isize;              // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n++         switchInt(const 0_isize) -> [1_isize: bb1, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb1: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb2, otherwise: bb3]; // scope 2 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb2: {\n-          _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n-          nop;                             // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n-          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+          _1 = const 1_i32;                // scope 2 at $DIR/while_let_loops.rs:8:9: 8:15\n+          nop;                             // scope 2 at $DIR/while_let_loops.rs:9:9: 9:14\n+          goto -> bb4;                     // scope 2 at $DIR/while_let_loops.rs:9:9: 9:14\n       }\n   \n       bb3: {"}, {"sha": "5657f9413a1b4e585bc62f359a2edc4ba3035c4c", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -5,6 +5,8 @@ fn change_loop_body() -> () {\n     let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n     scope 1 {\n         debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+        scope 2 {\n+        }\n     }\n \n     bb0: {"}, {"sha": "5657f9413a1b4e585bc62f359a2edc4ba3035c4c", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9a0b7749665d925d8f533756149deba74f2db88b/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=9a0b7749665d925d8f533756149deba74f2db88b", "patch": "@@ -5,6 +5,8 @@ fn change_loop_body() -> () {\n     let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n     scope 1 {\n         debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+        scope 2 {\n+        }\n     }\n \n     bb0: {"}]}