{"sha": "a55149b84eba79032567d3d107f73e7a71e358f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NTE0OWI4NGViYTc5MDMyNTY3ZDNkMTA3ZjczZTdhNzFlMzU4ZjY=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-08-06T10:20:37Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-08-06T10:20:37Z"}, "message": "core: Refactor iterators\n\nSimplifying the code of methods: nth, fold, rposition\nand iterators: Filter, FilterMap, SkipWhile\nAdding basic benchmarks", "tree": {"sha": "c6c758531f66dc319a8054032c79c52a26f9b08c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6c758531f66dc319a8054032c79c52a26f9b08c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a55149b84eba79032567d3d107f73e7a71e358f6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a55149b84eba79032567d3d107f73e7a71e358f6", "html_url": "https://github.com/rust-lang/rust/commit/a55149b84eba79032567d3d107f73e7a71e358f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a55149b84eba79032567d3d107f73e7a71e358f6/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032d5c1dcd95145d58fe3cce63853855578022a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/032d5c1dcd95145d58fe3cce63853855578022a7", "html_url": "https://github.com/rust-lang/rust/commit/032d5c1dcd95145d58fe3cce63853855578022a7"}], "stats": {"total": 117, "additions": 55, "deletions": 62}, "files": [{"sha": "b8ed8bdf9239402d7e0e97c36c971a66ac12e1c4", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 24, "deletions": 62, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a55149b84eba79032567d3d107f73e7a71e358f6/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a55149b84eba79032567d3d107f73e7a71e358f6/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a55149b84eba79032567d3d107f73e7a71e358f6", "patch": "@@ -481,13 +481,11 @@ pub trait Iterator<A> {\n     /// ```\n     #[inline]\n     fn nth(&mut self, mut n: uint) -> Option<A> {\n-        loop {\n-            match self.next() {\n-                Some(x) => if n == 0 { return Some(x) },\n-                None => return None\n-            }\n+        for x in *self {\n+            if n == 0 { return Some(x) }\n             n -= 1;\n         }\n+        None\n     }\n \n     /// Loops through the entire iterator, returning the last element of the\n@@ -518,11 +516,8 @@ pub trait Iterator<A> {\n     #[inline]\n     fn fold<B>(&mut self, init: B, f: |B, A| -> B) -> B {\n         let mut accum = init;\n-        loop {\n-            match self.next() {\n-                Some(x) => { accum = f(accum, x); }\n-                None    => { break; }\n-            }\n+        for x in *self {\n+            accum = f(accum, x);\n         }\n         accum\n     }\n@@ -720,21 +715,10 @@ pub trait ExactSize<A> : DoubleEndedIterator<A> {\n     /// If no element matches, None is returned.\n     #[inline]\n     fn rposition(&mut self, predicate: |A| -> bool) -> Option<uint> {\n-        let (lower, upper) = self.size_hint();\n-        assert!(upper == Some(lower));\n-        let mut i = lower;\n-        loop {\n-            match self.next_back() {\n-                None => break,\n-                Some(x) => {\n-                    i = match i.checked_sub(&1) {\n-                        Some(x) => x,\n-                        None => fail!(\"rposition: incorrect ExactSize\")\n-                    };\n-                    if predicate(x) {\n-                        return Some(i)\n-                    }\n-                }\n+        let len = self.len();\n+        for i in range(0, len).rev() {\n+            if predicate(self.next_back().expect(\"rposition: incorrect ExactSize\")) {\n+                return Some(i);\n             }\n         }\n         None\n@@ -744,7 +728,7 @@ pub trait ExactSize<A> : DoubleEndedIterator<A> {\n     /// Return the exact length of the iterator.\n     fn len(&self) -> uint {\n         let (lower, upper) = self.size_hint();\n-        assert!(upper == Some(lower));\n+        assert_eq!(upper, Some(lower));\n         lower\n     }\n }\n@@ -1330,18 +1314,12 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'a, A, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n-        loop {\n-            match self.iter.next_back() {\n-                None => return None,\n-                Some(x) => {\n-                    if (self.predicate)(&x) {\n-                        return Some(x);\n-                    } else {\n-                        continue\n-                    }\n-                }\n+        for x in self.iter.by_ref().rev() {\n+            if (self.predicate)(&x) {\n+                return Some(x);\n             }\n         }\n+        None\n     }\n }\n \n@@ -1375,17 +1353,13 @@ impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n for FilterMap<'a, A, B, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        loop {\n-            match self.iter.next_back() {\n-                None => return None,\n-                Some(x) => {\n-                    match (self.f)(x) {\n-                        Some(y) => return Some(y),\n-                        None => ()\n-                    }\n-                }\n+        for x in self.iter.by_ref().rev() {\n+            match (self.f)(x) {\n+                Some(y) => return Some(y),\n+                None => ()\n             }\n         }\n+        None\n     }\n }\n \n@@ -1507,25 +1481,13 @@ pub struct SkipWhile<'a, A, T> {\n impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        let mut next = self.iter.next();\n-        if self.flag {\n-            next\n-        } else {\n-            loop {\n-                match next {\n-                    Some(x) => {\n-                        if (self.predicate)(&x) {\n-                            next = self.iter.next();\n-                            continue\n-                        } else {\n-                            self.flag = true;\n-                            return Some(x)\n-                        }\n-                    }\n-                    None => return None\n-                }\n+        for x in self.iter {\n+            if self.flag || !(self.predicate)(&x) {\n+                self.flag = true;\n+                return Some(x);\n             }\n         }\n+        None\n     }\n \n     #[inline]"}, {"sha": "d25ffb5b84c8a6aa926bc34e540a1bdfc9e0f214", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a55149b84eba79032567d3d107f73e7a71e358f6/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a55149b84eba79032567d3d107f73e7a71e358f6/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=a55149b84eba79032567d3d107f73e7a71e358f6", "patch": "@@ -14,6 +14,8 @@ use core::uint;\n use core::cmp;\n use core::num;\n \n+use test::Bencher;\n+\n #[test]\n fn test_lt() {\n     let empty: [int, ..0] = [];\n@@ -270,6 +272,7 @@ fn test_iterator_nth() {\n     for i in range(0u, v.len()) {\n         assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n     }\n+    assert_eq!(v.iter().nth(v.len()), None);\n }\n \n #[test]\n@@ -842,3 +845,31 @@ fn test_iterate() {\n     assert_eq!(it.next(), Some(4u));\n     assert_eq!(it.next(), Some(8u));\n }\n+\n+#[bench]\n+fn bench_rposition(b: &mut Bencher) {\n+    let it: Vec<uint> = range(0u, 300).collect();\n+    b.iter(|| {\n+        it.iter().rposition(|&x| x <= 150);\n+    });\n+}\n+\n+#[bench]\n+fn bench_skip_while(b: &mut Bencher) {\n+    b.iter(|| {\n+        let it = range(0u, 100);\n+        let mut sum = 0;\n+        it.skip_while(|&x| { sum += x; sum < 4000 }).all(|_| true);\n+    });\n+}\n+\n+#[bench]\n+fn bench_multiple_take(b: &mut Bencher) {\n+    let mut it = range(0u, 42).cycle();\n+    b.iter(|| {\n+        let n = it.next().unwrap();\n+        for m in range(0u, n) {\n+            it.take(it.next().unwrap()).all(|_| true);\n+        }\n+    });\n+}"}]}