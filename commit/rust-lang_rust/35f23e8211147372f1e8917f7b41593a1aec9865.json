{"sha": "35f23e8211147372f1e8917f7b41593a1aec9865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZjIzZTgyMTExNDczNzJmMWU4OTE3ZjdiNDE1OTNhMWFlYzk4NjU=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-23T19:15:56Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:50Z"}, "message": "have RangeArgument return a Bound<&T> from each of its methods", "tree": {"sha": "87c5f9b99a705a6ccd648ea6553d6a75176ab970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c5f9b99a705a6ccd648ea6553d6a75176ab970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35f23e8211147372f1e8917f7b41593a1aec9865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35f23e8211147372f1e8917f7b41593a1aec9865", "html_url": "https://github.com/rust-lang/rust/commit/35f23e8211147372f1e8917f7b41593a1aec9865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35f23e8211147372f1e8917f7b41593a1aec9865/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef04fc82b198487b0ffb1832304714519f9f1a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef04fc82b198487b0ffb1832304714519f9f1a35", "html_url": "https://github.com/rust-lang/rust/commit/ef04fc82b198487b0ffb1832304714519f9f1a35"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "06ddcd13d5594f1c546d8f78118e0c487a3e8346", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=35f23e8211147372f1e8917f7b41593a1aec9865", "patch": "@@ -15,6 +15,7 @@\n //! Range syntax.\n \n use core::ops::{RangeFull, Range, RangeTo, RangeFrom};\n+use Bound::{self, Excluded, Included, Unbounded};\n \n /// **RangeArgument** is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b` or `c..d`.\n@@ -38,8 +39,8 @@ pub trait RangeArgument<T> {\n     /// assert_eq!((3..10).start(), Some(&3));\n     /// # }\n     /// ```\n-    fn start(&self) -> Option<&T> {\n-        None\n+    fn start(&self) -> Bound<&T> {\n+        Unbounded\n     }\n \n     /// End index (exclusive)\n@@ -61,8 +62,8 @@ pub trait RangeArgument<T> {\n     /// assert_eq!((3..10).end(), Some(&10));\n     /// # }\n     /// ```\n-    fn end(&self) -> Option<&T> {\n-        None\n+    fn end(&self) -> Bound<&T> {\n+        Unbounded\n     }\n }\n \n@@ -71,22 +72,22 @@ pub trait RangeArgument<T> {\n impl<T> RangeArgument<T> for RangeFull {}\n \n impl<T> RangeArgument<T> for RangeFrom<T> {\n-    fn start(&self) -> Option<&T> {\n-        Some(&self.start)\n+    fn start(&self) -> Bound<&T> {\n+        Included(&self.start)\n     }\n }\n \n impl<T> RangeArgument<T> for RangeTo<T> {\n-    fn end(&self) -> Option<&T> {\n-        Some(&self.end)\n+    fn end(&self) -> Bound<&T> {\n+        Excluded(&self.end)\n     }\n }\n \n impl<T> RangeArgument<T> for Range<T> {\n-    fn start(&self) -> Option<&T> {\n-        Some(&self.start)\n+    fn start(&self) -> Bound<&T> {\n+        Included(&self.start)\n     }\n-    fn end(&self) -> Option<&T> {\n-        Some(&self.end)\n+    fn end(&self) -> Bound<&T> {\n+        Excluded(&self.end)\n     }\n }"}, {"sha": "5210c25b4e5c8aaca3b5b8a34613c508b3f2d2ae", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=35f23e8211147372f1e8917f7b41593a1aec9865", "patch": "@@ -68,6 +68,7 @@ use std_unicode::str as unicode_str;\n \n use borrow::{Cow, ToOwned};\n use range::RangeArgument;\n+use Bound::{Excluded, Included, Unbounded};\n use str::{self, FromStr, Utf8Error, Chars};\n use vec::Vec;\n use boxed::Box;\n@@ -1350,8 +1351,16 @@ impl String {\n         // Because the range removal happens in Drop, if the Drain iterator is leaked,\n         // the removal will not happen.\n         let len = self.len();\n-        let start = *range.start().unwrap_or(&0);\n-        let end = *range.end().unwrap_or(&len);\n+        let start = match range.start() {\n+            Included(&n) => n,\n+            Excluded(&n) => n + 1,\n+            Unbounded => 0,\n+        };\n+        let end = match range.end() {\n+            Included(&n) => n + 1,\n+            Excluded(&n) => n,\n+            Unbounded => len,\n+        };\n \n         // Take out two simultaneous borrows. The &mut String won't be accessed\n         // until iteration is over, in Drop."}, {"sha": "4b05f8062e8bc22a60930a6472ea01840cbb7034", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=35f23e8211147372f1e8917f7b41593a1aec9865", "patch": "@@ -84,6 +84,7 @@ use core::ptr::Shared;\n use core::slice;\n \n use super::range::RangeArgument;\n+use Bound::{Excluded, Included, Unbounded};\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n@@ -1060,8 +1061,16 @@ impl<T> Vec<T> {\n         // the hole, and the vector length is restored to the new length.\n         //\n         let len = self.len();\n-        let start = *range.start().unwrap_or(&0);\n-        let end = *range.end().unwrap_or(&len);\n+        let start = match range.start() {\n+            Included(&n) => n,\n+            Excluded(&n) => n + 1,\n+            Unbounded    => 0,\n+        };\n+        let end = match range.end() {\n+            Included(&n) => n + 1,\n+            Excluded(&n) => n,\n+            Unbounded    => len,\n+        };\n         assert!(start <= end);\n         assert!(end <= len);\n "}, {"sha": "fea2d111f472eb46d6df2e3622b5edf7d76541eb", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f23e8211147372f1e8917f7b41593a1aec9865/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=35f23e8211147372f1e8917f7b41593a1aec9865", "patch": "@@ -33,6 +33,7 @@ use core::cmp;\n use alloc::raw_vec::RawVec;\n \n use super::range::RangeArgument;\n+use Bound::{Excluded, Included, Unbounded};\n use super::vec::Vec;\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n@@ -852,8 +853,16 @@ impl<T> VecDeque<T> {\n         // and the head/tail values will be restored correctly.\n         //\n         let len = self.len();\n-        let start = *range.start().unwrap_or(&0);\n-        let end = *range.end().unwrap_or(&len);\n+        let start = match range.start() {\n+            Included(&n) => n,\n+            Excluded(&n) => n + 1,\n+            Unbounded    => 0,\n+        };\n+        let end = match range.end() {\n+            Included(&n) => n + 1,\n+            Excluded(&n) => n,\n+            Unbounded    => len,\n+        };\n         assert!(start <= end, \"drain lower bound was too large\");\n         assert!(end <= len, \"drain upper bound was too large\");\n "}]}