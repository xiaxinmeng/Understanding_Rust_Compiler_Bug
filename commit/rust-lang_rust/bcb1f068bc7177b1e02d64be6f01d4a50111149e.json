{"sha": "bcb1f068bc7177b1e02d64be6f01d4a50111149e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjFmMDY4YmM3MTc3YjFlMDJkNjRiZTZmMDFkNGE1MDExMTE0OWU=", "commit": {"author": {"name": "YenForYang", "email": "YenForYang@users.noreply.github.com", "date": "2020-11-30T02:16:31Z"}, "committer": {"name": "Ryan Lopopolo", "email": "rjl@hyperbo.la", "date": "2021-02-23T15:18:45Z"}, "message": "Make char methods const\n\n`escape_unicode`, `escape_default`, `len_utf8`, `len_utf16`, to_ascii_lowercase`, `eq_ignore_ascii_case`\n\n`u8` methods `to_ascii_lowercase`, `to_ascii_uppercase` also must be made const\n\nu8 methods made const\n\nUpdate methods.rs\n\nUpdate mod.rs\n\nUpdate methods.rs\n\nFix `since` in rustc_const_stable to next stable\n\nFix `since` in rustc_const_stable to next stable\n\nUpdate methods.rs\n\nUpdate mod.rs", "tree": {"sha": "517124f120b4571966c6fc879c854ca71ad8f6fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517124f120b4571966c6fc879c854ca71ad8f6fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb1f068bc7177b1e02d64be6f01d4a50111149e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEv9mpkW5ah6mzVQwRcXzdbchOfUUFAmA1HNcACgkQcXzdbchO\nfUWgwRAArhpNs9uQh87Qhs6fNUscqdxuS4k54rnxN/HORn7/KhlF4/AJRZz9Dql6\nP87tiuPmqs7ghdlSqg6Dp7wahIPsNHsExivr0/l4X6L+tfhWmeJBjW+mtlS8W/Ln\nZ0VqrzwDCSN9jrln+KIpd5Yo9AtTLS9MwZrAasO4HUsS8IU3GIrFLqntX/4119UQ\nF5qHkSC6PE23n63a9zn9dj448zOxJXQ0amiNGEviFriar/PpFcc44GQgDKy+WAJd\nSu9DqrMZ5WMvT3oZZ1bKpnV8UZ6ALkKXoIb+nsgjegD4NfM2+1zEblWktM5m9nKU\nRAUWH5cEMl6Wdb+62FPRhhjYjCjPtosYaDJMXkB2z1ANNRpGOl++Zad4VKUibcjF\ntK2PFuMUjJMuDdbefIWmdLvRXXhumxp30zYi4GD9OoVGbHKAsF5CH11CUc3EfXnB\nbuc82rVd7yGAOcFtUiHVVW49nNk/UNU13xM8SR8lau1PahOxKBTVNrGF2mUptY6l\njkurB/fPwEqKAe9CMnjWz4NxFhpEw9LGQNCmiiy/KsBSVD3KfelnkFYnE4S7OnMg\nuIH98QEd9oLD84sKXkbKsAzkAFZfZiT9sEHEm5HVgyORi68YrOMK7fI/ViNyMDgf\n01pmutHtwusfsQfHTgoEhk51X7wTV4OHzPWdjvmVtRcwa4WAzuQ=\n=PP+d\n-----END PGP SIGNATURE-----", "payload": "tree 517124f120b4571966c6fc879c854ca71ad8f6fd\nparent 446d4533e89db04f9568be4199e56b5fce0d176d\nauthor YenForYang <YenForYang@users.noreply.github.com> 1606702591 -0600\ncommitter Ryan Lopopolo <rjl@hyperbo.la> 1614093525 -0800\n\nMake char methods const\n\n`escape_unicode`, `escape_default`, `len_utf8`, `len_utf16`, to_ascii_lowercase`, `eq_ignore_ascii_case`\n\n`u8` methods `to_ascii_lowercase`, `to_ascii_uppercase` also must be made const\n\nu8 methods made const\n\nUpdate methods.rs\n\nUpdate mod.rs\n\nUpdate methods.rs\n\nFix `since` in rustc_const_stable to next stable\n\nFix `since` in rustc_const_stable to next stable\n\nUpdate methods.rs\n\nUpdate mod.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb1f068bc7177b1e02d64be6f01d4a50111149e", "html_url": "https://github.com/rust-lang/rust/commit/bcb1f068bc7177b1e02d64be6f01d4a50111149e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb1f068bc7177b1e02d64be6f01d4a50111149e/comments", "author": {"login": "YenForYang", "id": 16462860, "node_id": "MDQ6VXNlcjE2NDYyODYw", "avatar_url": "https://avatars.githubusercontent.com/u/16462860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YenForYang", "html_url": "https://github.com/YenForYang", "followers_url": "https://api.github.com/users/YenForYang/followers", "following_url": "https://api.github.com/users/YenForYang/following{/other_user}", "gists_url": "https://api.github.com/users/YenForYang/gists{/gist_id}", "starred_url": "https://api.github.com/users/YenForYang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YenForYang/subscriptions", "organizations_url": "https://api.github.com/users/YenForYang/orgs", "repos_url": "https://api.github.com/users/YenForYang/repos", "events_url": "https://api.github.com/users/YenForYang/events{/privacy}", "received_events_url": "https://api.github.com/users/YenForYang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lopopolo", "id": 860434, "node_id": "MDQ6VXNlcjg2MDQzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/860434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopopolo", "html_url": "https://github.com/lopopolo", "followers_url": "https://api.github.com/users/lopopolo/followers", "following_url": "https://api.github.com/users/lopopolo/following{/other_user}", "gists_url": "https://api.github.com/users/lopopolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopopolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopopolo/subscriptions", "organizations_url": "https://api.github.com/users/lopopolo/orgs", "repos_url": "https://api.github.com/users/lopopolo/repos", "events_url": "https://api.github.com/users/lopopolo/events{/privacy}", "received_events_url": "https://api.github.com/users/lopopolo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "446d4533e89db04f9568be4199e56b5fce0d176d", "url": "https://api.github.com/repos/rust-lang/rust/commits/446d4533e89db04f9568be4199e56b5fce0d176d", "html_url": "https://github.com/rust-lang/rust/commit/446d4533e89db04f9568be4199e56b5fce0d176d"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "e292fe2cb9daa74a220b6b7516e369a6456d2134", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1f068bc7177b1e02d64be6f01d4a50111149e/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1f068bc7177b1e02d64be6f01d4a50111149e/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=bcb1f068bc7177b1e02d64be6f01d4a50111149e", "patch": "@@ -384,8 +384,9 @@ impl char {\n     /// assert_eq!('\u2764'.escape_unicode().to_string(), \"\\\\u{2764}\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_char_escape_unicode\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn escape_unicode(self) -> EscapeUnicode {\n+    pub const fn escape_unicode(self) -> EscapeUnicode {\n         let c = self as u32;\n \n         // or-ing 1 ensures that for c==0 the code computes that one\n@@ -510,8 +511,9 @@ impl char {\n     /// assert_eq!('\"'.escape_default().to_string(), \"\\\\\\\"\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_char_escape_default\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn escape_default(self) -> EscapeDefault {\n+    pub const fn escape_default(self) -> EscapeDefault {\n         let init_state = match self {\n             '\\t' => EscapeDefaultState::Backslash('t'),\n             '\\r' => EscapeDefaultState::Backslash('r'),\n@@ -569,8 +571,9 @@ impl char {\n     /// assert_eq!(len, tokyo.len());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_char_len_utf\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn len_utf8(self) -> usize {\n+    pub const fn len_utf8(self) -> usize {\n         len_utf8(self as u32)\n     }\n \n@@ -594,8 +597,9 @@ impl char {\n     /// assert_eq!(len, 2);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"const_char_len_utf\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn len_utf16(self) -> usize {\n+    pub const fn len_utf16(self) -> usize {\n         let ch = self as u32;\n         if (ch & 0xFFFF) == ch { 1 } else { 2 }\n     }\n@@ -1086,8 +1090,9 @@ impl char {\n     /// [`make_ascii_uppercase()`]: #method.make_ascii_uppercase\n     /// [`to_uppercase()`]: #method.to_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn to_ascii_uppercase(&self) -> char {\n+    pub const fn to_ascii_uppercase(&self) -> char {\n         if self.is_ascii_lowercase() {\n             (*self as u8).ascii_change_case_unchecked() as char\n         } else {\n@@ -1118,8 +1123,9 @@ impl char {\n     /// [`make_ascii_lowercase()`]: #method.make_ascii_lowercase\n     /// [`to_lowercase()`]: #method.to_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn to_ascii_lowercase(&self) -> char {\n+    pub const fn to_ascii_lowercase(&self) -> char {\n         if self.is_ascii_uppercase() {\n             (*self as u8).ascii_change_case_unchecked() as char\n         } else {\n@@ -1143,8 +1149,9 @@ impl char {\n     /// assert!(!upper_a.eq_ignore_ascii_case(&lower_z));\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn eq_ignore_ascii_case(&self, other: &char) -> bool {\n+    pub const fn eq_ignore_ascii_case(&self, other: &char) -> bool {\n         self.to_ascii_lowercase() == other.to_ascii_lowercase()\n     }\n \n@@ -1561,7 +1568,7 @@ impl char {\n }\n \n #[inline]\n-fn len_utf8(code: u32) -> usize {\n+const fn len_utf8(code: u32) -> usize {\n     if code < MAX_ONE_B {\n         1\n     } else if code < MAX_TWO_B {"}, {"sha": "8b81d41b8c067ffc49fd95b1136a0e783ed0b07e", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcb1f068bc7177b1e02d64be6f01d4a50111149e/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb1f068bc7177b1e02d64be6f01d4a50111149e/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=bcb1f068bc7177b1e02d64be6f01d4a50111149e", "patch": "@@ -195,8 +195,9 @@ impl u8 {\n     ///\n     /// [`make_ascii_uppercase`]: #method.make_ascii_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn to_ascii_uppercase(&self) -> u8 {\n+    pub const fn to_ascii_uppercase(&self) -> u8 {\n         // Unset the fifth bit if this is a lowercase letter\n         *self & !((self.is_ascii_lowercase() as u8) * ASCII_CASE_MASK)\n     }\n@@ -218,8 +219,9 @@ impl u8 {\n     ///\n     /// [`make_ascii_lowercase`]: #method.make_ascii_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn to_ascii_lowercase(&self) -> u8 {\n+    pub const fn to_ascii_lowercase(&self) -> u8 {\n         // Set the fifth bit if this is an uppercase letter\n         *self | (self.is_ascii_uppercase() as u8 * ASCII_CASE_MASK)\n     }\n@@ -243,8 +245,9 @@ impl u8 {\n     /// assert!(lowercase_a.eq_ignore_ascii_case(&uppercase_a));\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.50.0\")]\n     #[inline]\n-    pub fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n+    pub const fn eq_ignore_ascii_case(&self, other: &u8) -> bool {\n         self.to_ascii_lowercase() == other.to_ascii_lowercase()\n     }\n "}]}