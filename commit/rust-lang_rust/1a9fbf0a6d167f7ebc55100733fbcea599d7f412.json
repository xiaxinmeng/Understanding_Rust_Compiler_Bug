{"sha": "1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "node_id": "C_kwDOAAsO6NoAKDFhOWZiZjBhNmQxNjdmN2ViYzU1MTAwNzMzZmJjZWE1OTlkN2Y0MTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T12:42:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T12:42:08Z"}, "message": "fix: Fix visibility resolution not respecting parent blocks", "tree": {"sha": "46e67202f13f496c94b3426a07dd6a2c25464c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e67202f13f496c94b3426a07dd6a2c25464c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "html_url": "https://github.com/rust-lang/rust/commit/1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f297b9076f1d432fb60904c6f3c54e184ed153b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f297b9076f1d432fb60904c6f3c54e184ed153b", "html_url": "https://github.com/rust-lang/rust/commit/6f297b9076f1d432fb60904c6f3c54e184ed153b"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "59b52c3caa3140023ebf047aab17c0740c8df254", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "patch": "@@ -215,7 +215,7 @@ pub struct ModuleData {\n     pub origin: ModuleOrigin,\n     /// Declared visibility of this module.\n     pub visibility: Visibility,\n-\n+    /// Always [`None`] for block modules\n     pub parent: Option<LocalModuleId>,\n     pub children: FxHashMap<Name, LocalModuleId>,\n     pub scope: ItemScope,\n@@ -429,7 +429,7 @@ impl DefMap {\n         Some(self.block?.parent)\n     }\n \n-    /// Returns the module containing `local_mod`, either the parent `mod`, or the module containing\n+    /// Returns the module containing `local_mod`, either the parent `mod`, or the module (or block) containing\n     /// the block, if `self` corresponds to a block expression.\n     pub fn containing_module(&self, local_mod: LocalModuleId) -> Option<ModuleId> {\n         match self[local_mod].parent {"}, {"sha": "ab76ed43d3a0e558a86e3eea66e4d5f83231ca0a", "filename": "crates/hir-def/src/visibility.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/crates%2Fhir-def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fvisibility.rs?ref=1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "patch": "@@ -131,21 +131,23 @@ impl Visibility {\n         // visibility as the containing module (even though no items are directly nameable from\n         // there, getting this right is important for method resolution).\n         // In that case, we adjust the visibility of `to_module` to point to the containing module.\n+\n         // Additional complication: `to_module` might be in `from_module`'s `DefMap`, which we're\n         // currently computing, so we must not call the `def_map` query for it.\n-        let arc;\n-        let to_module_def_map =\n-            if to_module.krate == def_map.krate() && to_module.block == def_map.block_id() {\n-                cov_mark::hit!(is_visible_from_same_block_def_map);\n-                def_map\n-            } else {\n-                arc = to_module.def_map(db);\n-                &arc\n-            };\n-        let is_block_root =\n-            to_module.block.is_some() && to_module_def_map[to_module.local_id].parent.is_none();\n-        if is_block_root {\n-            to_module = to_module_def_map.containing_module(to_module.local_id).unwrap();\n+        let mut arc;\n+        loop {\n+            let to_module_def_map =\n+                if to_module.krate == def_map.krate() && to_module.block == def_map.block_id() {\n+                    cov_mark::hit!(is_visible_from_same_block_def_map);\n+                    def_map\n+                } else {\n+                    arc = to_module.def_map(db);\n+                    &arc\n+                };\n+            match to_module_def_map.parent() {\n+                Some(parent) => to_module = parent,\n+                None => break,\n+            }\n         }\n \n         // from_module needs to be a descendant of to_module"}, {"sha": "be83ad6aaadaaef139df7b08fb593a8ca8f83167", "filename": "crates/ide-diagnostics/src/handlers/private_field.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a9fbf0a6d167f7ebc55100733fbcea599d7f412/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fprivate_field.rs?ref=1a9fbf0a6d167f7ebc55100733fbcea599d7f412", "patch": "@@ -62,6 +62,26 @@ mod module {\n fn main(s: module::Struct) {\n     s.field;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn block_module_madness() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    let strukt = {\n+        use crate as ForceParentBlockDefMap;\n+        {\n+            pub struct Struct {\n+                field: (),\n+            }\n+            Struct { field: () }\n+        }\n+    };\n+    strukt.field;\n+}\n \"#,\n         );\n     }"}]}