{"sha": "bc63d69c3fde04404693aa685339ed9cac2dd0a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjNkNjljM2ZkZTA0NDA0NjkzYWE2ODUzMzllZDljYWMyZGQwYTQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-09T17:24:59Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-09T17:24:59Z"}, "message": "Format source codes", "tree": {"sha": "06e28e34f96a660c3b31a69746ac7ce574e133c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06e28e34f96a660c3b31a69746ac7ce574e133c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc63d69c3fde04404693aa685339ed9cac2dd0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc63d69c3fde04404693aa685339ed9cac2dd0a4", "html_url": "https://github.com/rust-lang/rust/commit/bc63d69c3fde04404693aa685339ed9cac2dd0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc63d69c3fde04404693aa685339ed9cac2dd0a4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "588700c3dc7557b755b32e5e545845d20b158f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/588700c3dc7557b755b32e5e545845d20b158f4f", "html_url": "https://github.com/rust-lang/rust/commit/588700c3dc7557b755b32e5e545845d20b158f4f"}], "stats": {"total": 150, "additions": 66, "deletions": 84}, "files": [{"sha": "9a7c9680a5c2c54c5e48468d6183755fc15ad871", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -155,8 +155,13 @@ enum TargetKind {\n impl TargetKind {\n     fn should_format(&self) -> bool {\n         match *self {\n-            TargetKind::Lib | TargetKind::Bin | TargetKind::Example | TargetKind::Test |\n-            TargetKind::Bench | TargetKind::CustomBuild | TargetKind::ProcMacro => true,\n+            TargetKind::Lib |\n+            TargetKind::Bin |\n+            TargetKind::Example |\n+            TargetKind::Test |\n+            TargetKind::Bench |\n+            TargetKind::CustomBuild |\n+            TargetKind::ProcMacro => true,\n             _ => false,\n         }\n     }"}, {"sha": "9bce9c792f45038411b0db76088d684d9d174422", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -390,8 +390,9 @@ fn join_rewrites(rewrites: &[String], subexps: &[ast::Expr], connector: &str) ->\n // parens, braces, and brackets in its idiomatic formatting.\n fn is_block_expr(context: &RewriteContext, expr: &ast::Expr, repr: &str) -> bool {\n     match expr.node {\n-        ast::ExprKind::Mac(..) |\n-        ast::ExprKind::Call(..) => context.use_block_indent() && repr.contains('\\n'),\n+        ast::ExprKind::Mac(..) | ast::ExprKind::Call(..) => {\n+            context.use_block_indent() && repr.contains('\\n')\n+        }\n         ast::ExprKind::Struct(..) |\n         ast::ExprKind::While(..) |\n         ast::ExprKind::WhileLet(..) |"}, {"sha": "123df4927f41e14efbad75ac6e230c12df9e2329", "filename": "src/comment.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -71,8 +71,7 @@ impl<'a> CommentStyle<'a> {\n             CommentStyle::Custom(..) |\n             CommentStyle::Doc => \"\",\n             CommentStyle::DoubleBullet => \" **/\",\n-            CommentStyle::SingleBullet |\n-            CommentStyle::Exclamation => \" */\",\n+            CommentStyle::SingleBullet | CommentStyle::Exclamation => \" */\",\n         }\n     }\n \n@@ -81,8 +80,7 @@ impl<'a> CommentStyle<'a> {\n             CommentStyle::DoubleSlash => \"// \",\n             CommentStyle::TripleSlash => \"/// \",\n             CommentStyle::Doc => \"//! \",\n-            CommentStyle::SingleBullet |\n-            CommentStyle::Exclamation => \" * \",\n+            CommentStyle::SingleBullet | CommentStyle::Exclamation => \" * \",\n             CommentStyle::DoubleBullet => \" ** \",\n             CommentStyle::Custom(opener) => opener,\n         }\n@@ -94,15 +92,11 @@ impl<'a> CommentStyle<'a> {\n \n     pub fn line_with_same_comment_style(&self, line: &str, normalize_comments: bool) -> bool {\n         match *self {\n-            CommentStyle::DoubleSlash |\n-            CommentStyle::TripleSlash |\n-            CommentStyle::Doc => {\n+            CommentStyle::DoubleSlash | CommentStyle::TripleSlash | CommentStyle::Doc => {\n                 line.trim_left().starts_with(self.line_start().trim_left()) ||\n                     comment_style(line, normalize_comments) == *self\n             }\n-            CommentStyle::DoubleBullet |\n-            CommentStyle::SingleBullet |\n-            CommentStyle::Exclamation => {\n+            CommentStyle::DoubleBullet | CommentStyle::SingleBullet | CommentStyle::Exclamation => {\n                 line.trim_left().starts_with(self.closer().trim_left()) ||\n                     line.trim_left().starts_with(self.line_start().trim_left()) ||\n                     comment_style(line, normalize_comments) == *self"}, {"sha": "fa72e2b85d56982e5499063cb065a9a1f1b7f418", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -98,8 +98,7 @@ impl Density {\n     pub fn to_list_tactic(self) -> ListTactic {\n         match self {\n             Density::Compressed => ListTactic::Mixed,\n-            Density::Tall |\n-            Density::CompressedIfEmpty => ListTactic::HorizontalVertical,\n+            Density::Tall | Density::CompressedIfEmpty => ListTactic::HorizontalVertical,\n             Density::Vertical => ListTactic::Vertical,\n         }\n     }"}, {"sha": "b214a42a3dbf9906ac6d37ba5b3244e1a07a85a8", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -315,8 +315,7 @@ pub fn format_expr(\n         }\n         // We do not format these expressions yet, but they should still\n         // satisfy our width restrictions.\n-        ast::ExprKind::InPlace(..) |\n-        ast::ExprKind::InlineAsm(..) => {\n+        ast::ExprKind::InPlace(..) | ast::ExprKind::InlineAsm(..) => {\n             wrap_str(\n                 context.snippet(expr.span),\n                 context.config.max_width(),\n@@ -930,8 +929,7 @@ impl Rewrite for ast::Stmt {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let result = match self.node {\n             ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n-            ast::StmtKind::Expr(ref ex) |\n-            ast::StmtKind::Semi(ref ex) => {\n+            ast::StmtKind::Expr(ref ex) | ast::StmtKind::Semi(ref ex) => {\n                 let suffix = if semicolon_for_stmt(self) { \";\" } else { \"\" };\n \n                 format_expr(\n@@ -945,8 +943,7 @@ impl Rewrite for ast::Stmt {\n                     try_opt!(shape.sub_width(suffix.len())),\n                 ).map(|s| s + suffix)\n             }\n-            ast::StmtKind::Mac(..) |\n-            ast::StmtKind::Item(..) => None,\n+            ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n         };\n         result.and_then(|res| {\n             recover_comment_removed(res, self.span, context, shape)\n@@ -1404,8 +1401,9 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             let after_else_comment = extract_comment(after_else, context, shape);\n \n             let between_sep = match context.config.control_brace_style() {\n-                ControlBraceStyle::AlwaysNextLine |\n-                ControlBraceStyle::ClosingNextLine => &*alt_block_sep,\n+                ControlBraceStyle::AlwaysNextLine | ControlBraceStyle::ClosingNextLine => {\n+                    &*alt_block_sep\n+                }\n                 ControlBraceStyle::AlwaysSameLine => \" \",\n             };\n             let after_sep = match context.config.control_brace_style() {\n@@ -1729,9 +1727,10 @@ impl Rewrite for ast::Arm {\n                 }\n             }\n             ast::ExprKind::Call(_, ref args) => (args.len() == 1, &**body),\n-            ast::ExprKind::Closure(..) |\n-            ast::ExprKind::Struct(..) |\n-            ast::ExprKind::Tup(..) => (true, &**body),\n+            ast::ExprKind::Closure(..) | ast::ExprKind::Struct(..) | ast::ExprKind::Tup(..) => (\n+                true,\n+                &**body,\n+            ),\n             _ => (false, &**body),\n         };\n         extend &= context.use_block_indent();\n@@ -2402,8 +2401,7 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n         ast::ExprKind::WhileLet(..) => {\n             context.config.combine_control_expr() && context.use_block_indent() && args_len == 1\n         }\n-        ast::ExprKind::Block(..) |\n-        ast::ExprKind::Closure(..) => {\n+        ast::ExprKind::Block(..) | ast::ExprKind::Closure(..) => {\n             context.use_block_indent() ||\n                 context.config.fn_call_style() == IndentStyle::Visual && args_len > 1\n         }"}, {"sha": "87299f01574719463f934ed41bb01ca78aa551cd", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -517,8 +517,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let variant_body = match field.node.data {\n-            ast::VariantData::Tuple(..) |\n-            ast::VariantData::Struct(..) => {\n+            ast::VariantData::Tuple(..) | ast::VariantData::Struct(..) => {\n                 // FIXME: Should limit the width, as we have a trailing comma\n                 format_struct(\n                     &context,\n@@ -732,16 +731,15 @@ fn format_impl_ref_and_type(\n \n         if let Some(ref trait_ref) = *trait_ref {\n             let result_len = result.len();\n-            if let Some(trait_ref_str) =\n-                rewrite_trait_ref(\n-                    context,\n-                    &trait_ref,\n-                    offset,\n-                    &generics_str,\n-                    true,\n-                    polarity_str,\n-                    result_len,\n-                ) {\n+            if let Some(trait_ref_str) = rewrite_trait_ref(\n+                context,\n+                &trait_ref,\n+                offset,\n+                &generics_str,\n+                true,\n+                polarity_str,\n+                result_len,\n+            ) {\n                 result.push_str(&trait_ref_str);\n             } else {\n                 let generics_str = try_opt!(rewrite_generics_inner(\n@@ -2062,18 +2060,17 @@ fn rewrite_fn_base(\n                 .max_width()\n                 .checked_sub(last_line_width(&result))\n         );\n-        if let Some(where_clause_str) =\n-            rewrite_where_clause(\n-                context,\n-                where_clause,\n-                context.config.fn_brace_style(),\n-                Shape::legacy(budget, indent),\n-                Density::Compressed,\n-                \"{\",\n-                !has_braces,\n-                put_args_in_block && ret_str.is_empty(),\n-                Some(span.hi),\n-            ) {\n+        if let Some(where_clause_str) = rewrite_where_clause(\n+            context,\n+            where_clause,\n+            context.config.fn_brace_style(),\n+            Shape::legacy(budget, indent),\n+            Density::Compressed,\n+            \"{\",\n+            !has_braces,\n+            put_args_in_block && ret_str.is_empty(),\n+            Some(span.hi),\n+        ) {\n             if !where_clause_str.contains('\\n') {\n                 if last_line_width(&result) + where_clause_str.len() > context.config.max_width() {\n                     result.push('\\n');\n@@ -2628,8 +2625,7 @@ fn rewrite_where_clause(\n         // If the brace is on the next line we don't need to count it otherwise it needs two\n         // characters \" {\"\n         match brace_style {\n-            BraceStyle::AlwaysNextLine |\n-            BraceStyle::SameLineWhere => 0,\n+            BraceStyle::AlwaysNextLine | BraceStyle::SameLineWhere => 0,\n             BraceStyle::PreferSameLine => 2,\n         }\n     } else if terminator == \"=\" {"}, {"sha": "a8bade234421027c815084eed72698e1332afc9d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -407,16 +407,14 @@ pub struct FormattingError {\n impl FormattingError {\n     fn msg_prefix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) |\n-            ErrorKind::TrailingWhitespace => \"Rustfmt failed at\",\n+            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"Rustfmt failed at\",\n             ErrorKind::BadIssue(_) => \"WARNING:\",\n         }\n     }\n \n     fn msg_suffix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) |\n-            ErrorKind::TrailingWhitespace => \"(sorry)\",\n+            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"(sorry)\",\n             ErrorKind::BadIssue(_) => \"\",\n         }\n     }"}, {"sha": "2fce2b7ccadcc82ce0f7bb043bc4f6c30f556410", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -252,11 +252,10 @@ pub fn can_be_overflowed_pat(context: &RewriteContext, pat: &TuplePatField, len:\n     match pat {\n         &TuplePatField::Pat(ref pat) => {\n             match pat.node {\n-                ast::PatKind::Path(..) |\n-                ast::PatKind::Tuple(..) |\n-                ast::PatKind::Struct(..) => context.use_block_indent() && len == 1,\n-                ast::PatKind::Ref(ref p, _) |\n-                ast::PatKind::Box(ref p) => {\n+                ast::PatKind::Path(..) | ast::PatKind::Tuple(..) | ast::PatKind::Struct(..) => {\n+                    context.use_block_indent() && len == 1\n+                }\n+                ast::PatKind::Ref(ref p, _) | ast::PatKind::Box(ref p) => {\n                     can_be_overflowed_pat(context, &TuplePatField::Pat(p), len)\n                 }\n                 ast::PatKind::Lit(ref expr) => can_be_overflowed_expr(context, expr, len),"}, {"sha": "b617c433f106699b986ee1b3b2f86591f3630157", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -758,8 +758,7 @@ impl Rewrite for ast::Ty {\n                 it.rewrite(context, shape)\n                     .map(|it_str| format!(\"impl {}\", it_str))\n             }\n-            ast::TyKind::Err |\n-            ast::TyKind::Typeof(..) => unreachable!(),\n+            ast::TyKind::Err | ast::TyKind::Typeof(..) => unreachable!(),\n         }\n     }\n }\n@@ -837,10 +836,10 @@ pub fn join_bounds(context: &RewriteContext, shape: Shape, type_strs: &Vec<Strin\n \n pub fn can_be_overflowed_type(context: &RewriteContext, ty: &ast::Ty, len: usize) -> bool {\n     match ty.node {\n-        ast::TyKind::Path(..) |\n-        ast::TyKind::Tup(..) => context.use_block_indent() && len == 1,\n-        ast::TyKind::Rptr(_, ref mutty) |\n-        ast::TyKind::Ptr(ref mutty) => can_be_overflowed_type(context, &*mutty.ty, len),\n+        ast::TyKind::Path(..) | ast::TyKind::Tup(..) => context.use_block_indent() && len == 1,\n+        ast::TyKind::Rptr(_, ref mutty) | ast::TyKind::Ptr(ref mutty) => {\n+            can_be_overflowed_type(context, &*mutty.ty, len)\n+        }\n         _ => false,\n     }\n }"}, {"sha": "7873cd5d846d1642d4178cdd4315404ea8eab889", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -160,9 +160,7 @@ pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n #[inline]\n pub fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n     match expr.node {\n-        ast::ExprKind::Ret(..) |\n-        ast::ExprKind::Continue(..) |\n-        ast::ExprKind::Break(..) => true,\n+        ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => true,\n         _ => false,\n     }\n }"}, {"sha": "178f7c7691f0e2d521831a6aca4b07d05cce5e45", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc63d69c3fde04404693aa685339ed9cac2dd0a4/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=bc63d69c3fde04404693aa685339ed9cac2dd0a4", "patch": "@@ -307,23 +307,18 @@ impl<'a> FmtVisitor<'a> {\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| (BytePos(x as u32)) + source!(self, item.span).lo);\n-                if let Some(impl_str) = format_impl(\n-                    &self.get_context(),\n-                    item,\n-                    self.block_indent,\n-                    where_span_end,\n-                ) {\n+                if let Some(impl_str) =\n+                    format_impl(&self.get_context(), item, self.block_indent, where_span_end)\n+                {\n                     self.buffer.push_str(&impl_str);\n                     self.last_pos = source!(self, item.span).hi;\n                 }\n             }\n             ast::ItemKind::Trait(..) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                if let Some(trait_str) = format_trait(\n-                    &self.get_context(),\n-                    item,\n-                    self.block_indent,\n-                ) {\n+                if let Some(trait_str) =\n+                    format_trait(&self.get_context(), item, self.block_indent)\n+                {\n                     self.buffer.push_str(&trait_str);\n                     self.last_pos = source!(self, item.span).hi;\n                 }"}]}