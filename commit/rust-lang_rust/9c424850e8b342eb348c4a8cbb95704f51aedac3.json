{"sha": "9c424850e8b342eb348c4a8cbb95704f51aedac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDI0ODUwZThiMzQyZWIzNDhjNGE4Y2JiOTU3MDRmNTFhZWRhYzM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-19T01:25:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: disconnect all the Debug functionality from ty::print.", "tree": {"sha": "572f8671253bd98f18eb666f220aff094642a506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572f8671253bd98f18eb666f220aff094642a506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c424850e8b342eb348c4a8cbb95704f51aedac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c424850e8b342eb348c4a8cbb95704f51aedac3", "html_url": "https://github.com/rust-lang/rust/commit/9c424850e8b342eb348c4a8cbb95704f51aedac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c424850e8b342eb348c4a8cbb95704f51aedac3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9", "html_url": "https://github.com/rust-lang/rust/commit/d0a1bf5c88a31942dc3e3e1fdd991c4fae5fded9"}], "stats": {"total": 351, "additions": 141, "deletions": 210}, "files": [{"sha": "8c590bd7833150bc40eefea9584d062f5ede4e6b", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c424850e8b342eb348c4a8cbb95704f51aedac3/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c424850e8b342eb348c4a8cbb95704f51aedac3/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=9c424850e8b342eb348c4a8cbb95704f51aedac3", "patch": "@@ -31,7 +31,6 @@ impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n \n #[derive(Default)]\n pub(crate) struct PrintConfig {\n-    pub(crate) is_debug: bool,\n     used_region_names: Option<FxHashSet<InternedString>>,\n     region_index: usize,\n     binder_depth: usize,\n@@ -83,31 +82,6 @@ pub trait Print<'tcx, P> {\n     type Error;\n \n     fn print(&self, cx: PrintCx<'_, '_, 'tcx, P>) -> Result<Self::Output, Self::Error>;\n-    fn print_display(\n-        &self,\n-        cx: PrintCx<'_, '_, 'tcx, P>,\n-    ) -> Result<Self::Output, Self::Error> {\n-        let old_debug = cx.config.is_debug;\n-        cx.config.is_debug = false;\n-        let result = self.print(PrintCx {\n-            tcx: cx.tcx,\n-            printer: cx.printer,\n-            config: cx.config,\n-        });\n-        cx.config.is_debug = old_debug;\n-        result\n-    }\n-    fn print_debug(&self, cx: PrintCx<'_, '_, 'tcx, P>) -> Result<Self::Output, Self::Error> {\n-        let old_debug = cx.config.is_debug;\n-        cx.config.is_debug = true;\n-        let result = self.print(PrintCx {\n-            tcx: cx.tcx,\n-            printer: cx.printer,\n-            config: cx.config,\n-        });\n-        cx.config.is_debug = old_debug;\n-        result\n-    }\n }\n \n pub trait Printer: Sized {"}, {"sha": "6a7c48ee879400d0462f6c744b61717740136f4e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c424850e8b342eb348c4a8cbb95704f51aedac3/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c424850e8b342eb348c4a8cbb95704f51aedac3/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=9c424850e8b342eb348c4a8cbb95704f51aedac3", "patch": "@@ -451,7 +451,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                 ty::Adt(..) | ty::Foreign(_) |\n                 ty::Bool | ty::Char | ty::Str |\n                 ty::Int(_) | ty::Uint(_) | ty::Float(_) => {\n-                    return self_ty.print_display(self);\n+                    return self_ty.print(self);\n                 }\n \n                 _ => {}\n@@ -461,9 +461,9 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n         self.generic_delimiters(|mut cx| {\n             define_scoped_cx!(cx);\n \n-            p!(print_display(self_ty));\n+            p!(print(self_ty));\n             if let Some(trait_ref) = trait_ref {\n-                p!(write(\" as \"), print_display(trait_ref));\n+                p!(write(\" as \"), print(trait_ref));\n             }\n             Ok(cx.printer)\n         })\n@@ -484,9 +484,9 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n \n             p!(write(\"impl \"));\n             if let Some(trait_ref) = trait_ref {\n-                p!(print_display(trait_ref), write(\" for \"));\n+                p!(print(trait_ref), write(\" for \"));\n             }\n-            p!(print_display(self_ty));\n+            p!(print(self_ty));\n \n             Ok(cx.printer)\n         })\n@@ -578,14 +578,14 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                     }\n                 }\n \n-                p!(print_display(arg));\n+                p!(print(arg));\n             }\n \n             for projection in projection0.into_iter().chain(projections) {\n                 maybe_comma(&mut cx)?;\n \n                 p!(write(\"{}=\", cx.tcx.associated_item(projection.item_def_id).ident),\n-                   print_display(projection.ty));\n+                   print(projection.ty));\n             }\n \n             Ok(cx.printer)\n@@ -877,7 +877,8 @@ impl<F: fmt::Write> FmtPrinter<F> {\n         }\n \n         if self.tcx.sess.verbose() {\n-            return region.print_debug(self);\n+            p!(write(\"{:?}\", region));\n+            return Ok(self.printer);\n         }\n \n         let identify_regions = self.tcx.sess.opts.debugging_opts.identify_regions;\n@@ -965,7 +966,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n             ty::Ref(r, ty, mutbl) => {\n                 p!(write(\"&\"));\n                 if self.print_region_outputs_anything(r) {\n-                    p!(print_display(r), write(\" \"));\n+                    p!(print(r), write(\" \"));\n                 }\n                 p!(print(ty::TypeAndMut { ty, mutbl }))\n             }\n@@ -1019,7 +1020,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                 }\n                 p!(write(\"dyn \"), print(data));\n                 if print_r {\n-                    p!(write(\" + \"), print_display(r), write(\")\"));\n+                    p!(write(\" + \"), print(r), write(\")\"));\n                 }\n             }\n             ty::Foreign(def_id) => {\n@@ -1033,6 +1034,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                 p!(write(\"Placeholder({:?})\", placeholder))\n             }\n             ty::Opaque(def_id, substs) => {\n+                // FIXME(eddyb) print this with `print_def_path`.\n                 if self.tcx.sess.verbose() {\n                     p!(write(\"Opaque({:?}, {:?})\", def_id, substs));\n                     return Ok(self.printer);\n@@ -1045,9 +1047,9 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n                     // FIXME(eddyb) print this with `print_def_path`.\n                     if let Some(first) = substs.next() {\n                         p!(write(\"::<\"));\n-                        p!(print_display(first));\n+                        p!(print(first));\n                         for subst in substs {\n-                            p!(write(\", \"), print_display(subst));\n+                            p!(write(\", \"), print(subst));\n                         }\n                         p!(write(\">\"));\n                     }\n@@ -1209,17 +1211,17 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n         p!(write(\"(\"));\n         let mut inputs = inputs.iter();\n         if let Some(&ty) = inputs.next() {\n-            p!(print_display(ty));\n+            p!(print(ty));\n             for &ty in inputs {\n-                p!(write(\", \"), print_display(ty));\n+                p!(write(\", \"), print(ty));\n             }\n             if c_variadic {\n                 p!(write(\", ...\"));\n             }\n         }\n         p!(write(\")\"));\n         if !output.is_unit() {\n-            p!(write(\" -> \"), print_display(output));\n+            p!(write(\" -> \"), print(output));\n         }\n \n         Ok(self.printer)\n@@ -1290,7 +1292,7 @@ impl<'gcx, 'tcx, P: PrettyPrinter> PrintCx<'_, 'gcx, 'tcx, P> {\n         // Push current state to gcx, and restore after writing new_value.\n         self.config.binder_depth += 1;\n         self.config.region_index = region_index;\n-        let result = new_value.print_display(PrintCx {\n+        let result = new_value.print(PrintCx {\n             tcx: self.tcx,\n             printer: self.printer,\n             config: self.config,"}, {"sha": "4c9d26c84816cf83aec2e41ca7c0d2245d4691cd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 123, "deletions": 168, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/9c424850e8b342eb348c4a8cbb95704f51aedac3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c424850e8b342eb348c4a8cbb95704f51aedac3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9c424850e8b342eb348c4a8cbb95704f51aedac3", "patch": "@@ -10,108 +10,64 @@ use std::iter;\n \n use rustc_target::spec::abi::Abi;\n \n-macro_rules! gen_display_debug_body {\n-    ( $with:path ) => {\n-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            PrintCx::with_tls_tcx(FmtPrinter::new(f, Namespace::TypeNS), |cx| {\n-                $with(&cx.tcx.lift(self).expect(\"could not lift for printing\"), cx)?;\n-                Ok(())\n-            })\n-        }\n-    };\n-}\n-macro_rules! gen_display_debug {\n-    ( ($($x:tt)+) $target:ty, display yes ) => {\n-        impl<$($x)+> fmt::Display for $target {\n-            gen_display_debug_body! { Print::print_display }\n-        }\n-    };\n-    ( () $target:ty, display yes ) => {\n-        impl fmt::Display for $target {\n-            gen_display_debug_body! { Print::print_display }\n-        }\n-    };\n-    ( ($($x:tt)+) $target:ty, debug yes ) => {\n-        impl<$($x)+> fmt::Debug for $target {\n-            gen_display_debug_body! { Print::print_debug }\n-        }\n-    };\n-    ( () $target:ty, debug yes ) => {\n-        impl fmt::Debug for $target {\n-            gen_display_debug_body! { Print::print_debug }\n-        }\n-    };\n-    ( $generic:tt $target:ty, $t:ident no ) => {};\n-}\n-macro_rules! gen_print_impl {\n-    ( ($($x:tt)+) $target:ty, ($self:ident, $cx:ident) $disp:block $dbg:block ) => {\n-        impl<$($x)+, P: PrettyPrinter> Print<'tcx, P> for $target {\n+macro_rules! define_print {\n+    (@display $target:ty, ($self:ident, $cx:ident) $disp:block) => {\n+        impl<P: PrettyPrinter> Print<'tcx, P> for $target {\n             type Output = P;\n             type Error = fmt::Error;\n             fn print(&$self, $cx: PrintCx<'_, '_, 'tcx, P>) -> Result<Self::Output, Self::Error> {\n                 #[allow(unused_mut)]\n                 let mut $cx = $cx;\n-                let _: () = {\n-                    define_scoped_cx!($cx);\n-\n-                    if $cx.config.is_debug $dbg\n-                    else $disp\n-                };\n+                define_scoped_cx!($cx);\n+                let _: () = $disp;\n+                #[allow(unreachable_code)]\n                 Ok($cx.printer)\n             }\n         }\n-    };\n-    ( () $target:ty, ($self:ident, $cx:ident) $disp:block $dbg:block ) => {\n-        impl<P: PrettyPrinter> Print<'tcx, P> for $target {\n-            type Output = P;\n-            type Error = fmt::Error;\n-            fn print(&$self, $cx: PrintCx<'_, '_, 'tcx, P>) -> Result<Self::Output, Self::Error> {\n-                #[allow(unused_mut)]\n-                let mut $cx = $cx;\n-                let _: () = {\n-                    define_scoped_cx!($cx);\n \n-                    if $cx.config.is_debug $dbg\n-                    else $disp\n-                };\n-                Ok($cx.printer)\n+        impl fmt::Display for $target {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                PrintCx::with_tls_tcx(FmtPrinter::new(f, Namespace::TypeNS), |cx| {\n+                    cx.tcx.lift(self).expect(\"could not lift for printing\").print(cx)?;\n+                    Ok(())\n+                })\n             }\n         }\n     };\n-    ( $generic:tt $target:ty,\n-      $vars:tt $gendisp:ident $disp:block $gendbg:ident $dbg:block ) => {\n-        gen_print_impl! { $generic $target, $vars $disp $dbg }\n-        gen_display_debug! { $generic $target, display $gendisp }\n-        gen_display_debug! { $generic $target, debug $gendbg }\n-    }\n-}\n-macro_rules! define_print {\n-    ( $generic:tt $target:ty,\n-      $vars:tt { display $disp:block debug $dbg:block } ) => {\n-        gen_print_impl! { $generic $target, $vars yes $disp yes $dbg }\n-    };\n-    ( $generic:tt $target:ty,\n-      $vars:tt { debug $dbg:block display $disp:block } ) => {\n-        gen_print_impl! { $generic $target, $vars yes $disp yes $dbg }\n+\n+    (@debug $target:ty, ($self:ident, $cx:ident) $dbg:block) => {\n+        impl fmt::Debug for $target {\n+            fn fmt(&$self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                PrintCx::with_tls_tcx(FmtPrinter::new(f, Namespace::TypeNS), |$cx| {\n+                    #[allow(unused_mut)]\n+                    let mut $cx = $cx;\n+                    define_scoped_cx!($cx);\n+                    let _: () = $dbg;\n+                    let _ = $cx;\n+                    Ok(())\n+                })\n+            }\n+        }\n     };\n-    ( $generic:tt $target:ty,\n-      $vars:tt { debug $dbg:block } ) => {\n-        gen_print_impl! { $generic $target, $vars no {\n-            bug!(concat!(\"display not implemented for \", stringify!($target)));\n-        } yes $dbg }\n+\n+    ([$($target:ty),+] $vars:tt $def:tt) => {\n+        $(define_print!($target, $vars $def);)+\n     };\n-    ( $generic:tt $target:ty,\n-      ($self:ident, $cx:ident) { display $disp:block } ) => {\n-        gen_print_impl! { $generic $target, ($self, $cx) yes $disp no {\n-            write!($cx.printer, \"{:?}\", $self)?\n-        } }\n+\n+    ($target:ty, $vars:tt {\n+        display $disp:block\n+        debug $dbg:block\n+    }) => {\n+        define_print!(@display $target, $vars $disp);\n+        define_print!(@debug $target, $vars $dbg);\n     };\n-}\n-macro_rules! define_print_multi {\n-    ( [ $($generic:tt $target:ty),* ] $vars:tt $def:tt ) => {\n-        $(define_print! { $generic $target, $vars $def })*\n+    ($target:ty, $vars:tt {\n+        display $disp:block\n+    }) => {\n+        define_print!(@display $target, $vars $disp);\n     };\n }\n+\n macro_rules! nest {\n     ($closure:expr) => {\n         scoped_cx!() = scoped_cx!().nest($closure)?\n@@ -142,7 +98,7 @@ macro_rules! define_scoped_cx {\n }\n \n define_print! {\n-    ('tcx) &'tcx ty::List<ty::ExistentialPredicate<'tcx>>, (self, cx) {\n+    &'tcx ty::List<ty::ExistentialPredicate<'tcx>>, (self, cx) {\n         display {\n             // Generate the main trait ref, including associated types.\n             let mut first = true;\n@@ -266,7 +222,7 @@ impl<'tcx> fmt::Debug for ty::UpvarBorrow<'tcx> {\n }\n \n define_print! {\n-    ('tcx) &'tcx ty::List<Ty<'tcx>>, (self, cx) {\n+    &'tcx ty::List<Ty<'tcx>>, (self, cx) {\n         display {\n             p!(write(\"{{\"));\n             let mut tys = self.iter();\n@@ -282,7 +238,7 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) ty::TypeAndMut<'tcx>, (self, cx) {\n+    ty::TypeAndMut<'tcx>, (self, cx) {\n         display {\n             p!(\n                    write(\"{}\", if self.mutbl == hir::MutMutable { \"mut \" } else { \"\" }),\n@@ -292,26 +248,27 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) ty::ExistentialTraitRef<'tcx>, (self, cx) {\n+    ty::ExistentialTraitRef<'tcx>, (self, cx) {\n         display {\n             let dummy_self = cx.tcx.mk_infer(ty::FreshTy(0));\n \n             let trait_ref = *ty::Binder::bind(*self)\n                 .with_self_ty(cx.tcx, dummy_self)\n                 .skip_binder();\n-            p!(print_display(trait_ref))\n-        }\n-        debug {\n-            p!(print_display(self))\n+            p!(print(trait_ref))\n         }\n     }\n }\n \n-define_print! {\n-    ('tcx) ty::adjustment::Adjustment<'tcx>, (self, cx) {\n-        debug {\n-            p!(write(\"{:?} -> \", self.kind), print(self.target))\n-        }\n+impl fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?} -> {}\", self.kind, self.target)\n     }\n }\n \n@@ -330,7 +287,7 @@ impl fmt::Debug for ty::BoundRegion {\n }\n \n define_print! {\n-    () ty::RegionKind, (self, cx) {\n+    ty::RegionKind, (self, cx) {\n         display {\n             return cx.print_region(self);\n         }\n@@ -350,7 +307,7 @@ define_print! {\n                     p!(write(\"ReLateBound({:?}, {:?})\", binder_id, bound_region))\n                 }\n \n-                ty::ReFree(ref fr) => p!(print_debug(fr)),\n+                ty::ReFree(ref fr) => p!(write(\"{:?}\", fr)),\n \n                 ty::ReScope(id) => {\n                     p!(write(\"ReScope({:?})\", id))\n@@ -374,29 +331,25 @@ define_print! {\n     }\n }\n \n-define_print! {\n-    () ty::FreeRegion, (self, cx) {\n-        debug {\n-            p!(write(\"ReFree({:?}, {:?})\", self.scope, self.bound_region))\n-        }\n+impl fmt::Debug for ty::FreeRegion {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"ReFree({:?}, {:?})\", self.scope, self.bound_region)\n     }\n }\n \n-define_print! {\n-    () ty::Variance, (self, cx) {\n-        debug {\n-            cx.printer.write_str(match *self {\n-                ty::Covariant => \"+\",\n-                ty::Contravariant => \"-\",\n-                ty::Invariant => \"o\",\n-                ty::Bivariant => \"*\",\n-            })?\n-        }\n+impl fmt::Debug for ty::Variance {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(match *self {\n+            ty::Covariant => \"+\",\n+            ty::Contravariant => \"-\",\n+            ty::Invariant => \"o\",\n+            ty::Bivariant => \"*\",\n+        })\n     }\n }\n \n define_print! {\n-    ('tcx) ty::FnSig<'tcx>, (self, cx) {\n+    ty::FnSig<'tcx>, (self, cx) {\n         display {\n             if self.unsafety == hir::Unsafety::Unsafe {\n                 p!(write(\"unsafe \"));\n@@ -447,10 +400,11 @@ impl fmt::Debug for ty::RegionVid {\n }\n \n define_print! {\n-    () ty::InferTy, (self, cx) {\n+    ty::InferTy, (self, cx) {\n         display {\n             if cx.tcx.sess.verbose() {\n-                return self.print_debug(cx);\n+                p!(write(\"{:?}\", self));\n+                return Ok(cx.printer);\n             }\n             match *self {\n                 ty::TyVar(_) => p!(write(\"_\")),\n@@ -501,16 +455,16 @@ impl fmt::Debug for ty::FloatVarValue {\n     }\n }*/\n \n-define_print_multi! {\n+define_print! {\n     [\n-    ('tcx) ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n-    ('tcx) ty::Binder<ty::TraitRef<'tcx>>,\n-    ('tcx) ty::Binder<ty::FnSig<'tcx>>,\n-    ('tcx) ty::Binder<ty::TraitPredicate<'tcx>>,\n-    ('tcx) ty::Binder<ty::SubtypePredicate<'tcx>>,\n-    ('tcx) ty::Binder<ty::ProjectionPredicate<'tcx>>,\n-    ('tcx) ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>>,\n-    ('tcx) ty::Binder<ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>>\n+        ty::Binder<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>,\n+        ty::Binder<ty::TraitRef<'tcx>>,\n+        ty::Binder<ty::FnSig<'tcx>>,\n+        ty::Binder<ty::TraitPredicate<'tcx>>,\n+        ty::Binder<ty::SubtypePredicate<'tcx>>,\n+        ty::Binder<ty::ProjectionPredicate<'tcx>>,\n+        ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>>,\n+        ty::Binder<ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>>\n     ]\n     (self, cx) {\n         display {\n@@ -520,29 +474,35 @@ define_print_multi! {\n }\n \n define_print! {\n-    ('tcx) ty::TraitRef<'tcx>, (self, cx) {\n+    ty::TraitRef<'tcx>, (self, cx) {\n         display {\n             nest!(|cx| cx.print_def_path(self.def_id, Some(self.substs), iter::empty()));\n         }\n         debug {\n-            nest!(|cx| cx.path_qualified(self.self_ty(), Some(*self)));\n+            // HACK(eddyb) this is used across the compiler to print\n+            // a `TraitRef` qualified (with the Self type explicit),\n+            // instead of having a different way to make that choice.\n+            p!(write(\"<{} as {}>\", self.self_ty(), self))\n         }\n     }\n }\n \n define_print! {\n-    ('tcx) Ty<'tcx>, (self, cx) {\n+    Ty<'tcx>, (self, cx) {\n         display {\n             return cx.print_type(self);\n         }\n-        debug {\n-            p!(print_display(self))\n-        }\n+    }\n+}\n+\n+impl fmt::Debug for Ty<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n define_print! {\n-    ('tcx) ConstValue<'tcx>, (self, cx) {\n+    ConstValue<'tcx>, (self, cx) {\n         display {\n             match self {\n                 ConstValue::Infer(..) => p!(write(\"_\")),\n@@ -554,15 +514,15 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) ty::Const<'tcx>, (self, cx) {\n+    ty::Const<'tcx>, (self, cx) {\n         display {\n             p!(write(\"{} : {}\", self.val, self.ty))\n         }\n     }\n }\n \n define_print! {\n-    ('tcx) ty::LazyConst<'tcx>, (self, cx) {\n+    ty::LazyConst<'tcx>, (self, cx) {\n         display {\n             match self {\n                 // FIXME(const_generics) this should print at least the type.\n@@ -574,7 +534,7 @@ define_print! {\n }\n \n define_print! {\n-    () ty::ParamTy, (self, cx) {\n+    ty::ParamTy, (self, cx) {\n         display {\n             p!(write(\"{}\", self.name))\n         }\n@@ -585,7 +545,7 @@ define_print! {\n }\n \n define_print! {\n-    () ty::ParamConst, (self, cx) {\n+    ty::ParamConst, (self, cx) {\n         display {\n             p!(write(\"{}\", self.name))\n         }\n@@ -596,10 +556,10 @@ define_print! {\n }\n \n // Similar problem to `Binder<T>`, can't define a generic impl.\n-define_print_multi! {\n+define_print! {\n     [\n-    ('tcx) ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>,\n-    ('tcx) ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n+        ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>,\n+        ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n     ]\n     (self, cx) {\n         display {\n@@ -609,51 +569,46 @@ define_print_multi! {\n }\n \n define_print! {\n-    ('tcx) ty::SubtypePredicate<'tcx>, (self, cx) {\n+    ty::SubtypePredicate<'tcx>, (self, cx) {\n         display {\n             p!(print(self.a), write(\" <: \"), print(self.b))\n         }\n     }\n }\n \n define_print! {\n-    ('tcx) ty::TraitPredicate<'tcx>, (self, cx) {\n+    ty::TraitPredicate<'tcx>, (self, cx) {\n+        display {\n+            p!(print(self.trait_ref.self_ty()), write(\": \"), print(self.trait_ref))\n+        }\n         debug {\n             p!(write(\"TraitPredicate({:?})\",\n                    self.trait_ref))\n         }\n-        display {\n-            p!(print(self.trait_ref.self_ty()), write(\": \"), print(self.trait_ref))\n-        }\n     }\n }\n \n define_print! {\n-    ('tcx) ty::ProjectionPredicate<'tcx>, (self, cx) {\n-        debug {\n-            p!(\n-                   write(\"ProjectionPredicate(\"),\n-                   print(self.projection_ty),\n-                   write(\", \"),\n-                   print(self.ty),\n-                   write(\")\"))\n-        }\n+    ty::ProjectionPredicate<'tcx>, (self, cx) {\n         display {\n             p!(print(self.projection_ty), write(\" == \"), print(self.ty))\n         }\n+        debug {\n+            p!(write(\"ProjectionPredicate({:?}, {:?})\", self.projection_ty, self.ty))\n+        }\n     }\n }\n \n define_print! {\n-    ('tcx) ty::ProjectionTy<'tcx>, (self, cx) {\n+    ty::ProjectionTy<'tcx>, (self, cx) {\n         display {\n             nest!(|cx| cx.print_def_path(self.item_def_id, Some(self.substs), iter::empty()));\n         }\n     }\n }\n \n define_print! {\n-    () ty::ClosureKind, (self, cx) {\n+    ty::ClosureKind, (self, cx) {\n         display {\n             match *self {\n                 ty::ClosureKind::Fn => p!(write(\"Fn\")),\n@@ -665,7 +620,7 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) ty::Predicate<'tcx>, (self, cx) {\n+    ty::Predicate<'tcx>, (self, cx) {\n         display {\n             match *self {\n                 ty::Predicate::Trait(ref data) => p!(print(data)),\n@@ -693,12 +648,12 @@ define_print! {\n         }\n         debug {\n             match *self {\n-                ty::Predicate::Trait(ref a) => p!(print(a)),\n-                ty::Predicate::Subtype(ref pair) => p!(print(pair)),\n-                ty::Predicate::RegionOutlives(ref pair) => p!(print(pair)),\n-                ty::Predicate::TypeOutlives(ref pair) => p!(print(pair)),\n-                ty::Predicate::Projection(ref pair) => p!(print(pair)),\n-                ty::Predicate::WellFormed(ty) => p!(print(ty)),\n+                ty::Predicate::Trait(ref a) => p!(write(\"{:?}\", a)),\n+                ty::Predicate::Subtype(ref pair) => p!(write(\"{:?}\", pair)),\n+                ty::Predicate::RegionOutlives(ref pair) => p!(write(\"{:?}\", pair)),\n+                ty::Predicate::TypeOutlives(ref pair) => p!(write(\"{:?}\", pair)),\n+                ty::Predicate::Projection(ref pair) => p!(write(\"{:?}\", pair)),\n+                ty::Predicate::WellFormed(ty) => p!(write(\"WellFormed({:?})\", ty)),\n                 ty::Predicate::ObjectSafe(trait_def_id) => {\n                     p!(write(\"ObjectSafe({:?})\", trait_def_id))\n                 }\n@@ -715,7 +670,7 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) Kind<'tcx>, (self, cx) {\n+    Kind<'tcx>, (self, cx) {\n         display {\n             match self.unpack() {\n                 UnpackedKind::Lifetime(lt) => p!(print(lt)),\n@@ -725,9 +680,9 @@ define_print! {\n         }\n         debug {\n             match self.unpack() {\n-                UnpackedKind::Lifetime(lt) => p!(print(lt)),\n-                UnpackedKind::Type(ty) => p!(print(ty)),\n-                UnpackedKind::Const(ct) => p!(print(ct)),\n+                UnpackedKind::Lifetime(lt) => p!(write(\"{:?}\", lt)),\n+                UnpackedKind::Type(ty) => p!(write(\"{:?}\", ty)),\n+                UnpackedKind::Const(ct) => p!(write(\"{:?}\", ct)),\n             }\n         }\n     }"}]}