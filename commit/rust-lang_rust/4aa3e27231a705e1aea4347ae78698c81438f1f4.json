{"sha": "4aa3e27231a705e1aea4347ae78698c81438f1f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTNlMjcyMzFhNzA1ZTFhZWE0MzQ3YWU3ODY5OGM4MTQzOGYxZjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-27T21:01:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-27T21:01:09Z"}, "message": "Rollup merge of #62131 - Xanewok:clip-some-nits, r=petrochenkov\n\nlibsyntax: Fix some Clippy warnings\n\nWhen I was working on it before a lot of these popped up in the RLS so I figured I'll send a small patch fixing only the (hopefully) uncontroversial ones.\n\nOthers that could be also fixed included also [`clippy::print_with_newline`](https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline) and [`clippy::cast_lossless`](https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless). Should I add them as well?\n\nsince most of it touches libsyntax...\nr? @petrochenkov", "tree": {"sha": "b545d4f98342098b68903c87e0bfb1795485fc40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b545d4f98342098b68903c87e0bfb1795485fc40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa3e27231a705e1aea4347ae78698c81438f1f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdFS6VCRBK7hj4Ov3rIwAAdHIIAJh23GeT1Nt3Pjqmw5i2znkz\n8kH+VC8AMY10YbvSx62/5YZTtoz2Ezgznyb30fbHtaORkNOBRm0gZn4QGDkyOM2V\nF1PhtrpLFuGrmVl/yxQ0Asl7jdP2IS8T7zC+L/42EaLjaVBoaGrHBEGfKavE2Y7u\nfeXSiBixXeQhyliaa0ikyX8F5lFweMAEVpmLNNYFzHKcmPzI4AAA5Ncc+GiDh+vn\nSKt2YXpy6T/IZNNWIoniKDqTNIssm5ACBnBsUcI4MS0vHmJvsib1SH5eswe5Sm/G\n9dwAl14JEaC6HQpeLOUiPmsauzV1boQxyGLielUtKEChSX4xPJRTYpV/oRKQ2ew=\n=+UOw\n-----END PGP SIGNATURE-----\n", "payload": "tree b545d4f98342098b68903c87e0bfb1795485fc40\nparent bc335d6c16bc7bb9df1e1e2b982aa13963e8ae7c\nparent ad62b4203ce3f0bd4c7c348aeabca4f49d5ce075\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561669269 +0200\ncommitter GitHub <noreply@github.com> 1561669269 +0200\n\nRollup merge of #62131 - Xanewok:clip-some-nits, r=petrochenkov\n\nlibsyntax: Fix some Clippy warnings\n\nWhen I was working on it before a lot of these popped up in the RLS so I figured I'll send a small patch fixing only the (hopefully) uncontroversial ones.\n\nOthers that could be also fixed included also [`clippy::print_with_newline`](https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline) and [`clippy::cast_lossless`](https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless). Should I add them as well?\n\nsince most of it touches libsyntax...\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa3e27231a705e1aea4347ae78698c81438f1f4", "html_url": "https://github.com/rust-lang/rust/commit/4aa3e27231a705e1aea4347ae78698c81438f1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa3e27231a705e1aea4347ae78698c81438f1f4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc335d6c16bc7bb9df1e1e2b982aa13963e8ae7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc335d6c16bc7bb9df1e1e2b982aa13963e8ae7c", "html_url": "https://github.com/rust-lang/rust/commit/bc335d6c16bc7bb9df1e1e2b982aa13963e8ae7c"}, {"sha": "ad62b4203ce3f0bd4c7c348aeabca4f49d5ce075", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad62b4203ce3f0bd4c7c348aeabca4f49d5ce075", "html_url": "https://github.com/rust-lang/rust/commit/ad62b4203ce3f0bd4c7c348aeabca4f49d5ce075"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "7975c62b90fb6fa8c3cd005725a2c2c0938e3f60", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -39,8 +39,8 @@ impl Fingerprint {\n     // you want.\n     #[inline]\n     pub fn combine_commutative(self, other: Fingerprint) -> Fingerprint {\n-        let a = (self.1 as u128) << 64 | self.0 as u128;\n-        let b = (other.1 as u128) << 64 | other.0 as u128;\n+        let a = u128::from(self.1) << 64 | u128::from(self.0);\n+        let b = u128::from(other.1) << 64 | u128::from(other.0);\n \n         let c = a.wrapping_add(b);\n "}, {"sha": "557e5e2186f11f14c38f53242efb009d14ef2f1a", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -263,7 +263,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             done_cache: Default::default(),\n             waiting_cache: Default::default(),\n             scratch: Some(vec![]),\n-            obligation_tree_id_generator: (0..).map(|i| ObligationTreeId(i)),\n+            obligation_tree_id_generator: (0..).map(ObligationTreeId),\n             error_cache: Default::default(),\n         }\n     }"}, {"sha": "e5de359e4759e81839ebad4c66c395170800b72f", "filename": "src/librustc_data_structures/sip128.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fsip128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fsip128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsip128.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -70,15 +70,15 @@ unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n     let mut i = 0; // current byte index (from LSB) in the output u64\n     let mut out = 0;\n     if i + 3 < len {\n-        out = load_int_le!(buf, start + i, u32) as u64;\n+        out = u64::from(load_int_le!(buf, start + i, u32));\n         i += 4;\n     }\n     if i + 1 < len {\n-        out |= (load_int_le!(buf, start + i, u16) as u64) << (i * 8);\n+        out |= u64::from(load_int_le!(buf, start + i, u16)) << (i * 8);\n         i += 2\n     }\n     if i < len {\n-        out |= (*buf.get_unchecked(start + i) as u64) << (i * 8);\n+        out |= u64::from(*buf.get_unchecked(start + i)) << (i * 8);\n         i += 1;\n     }\n     debug_assert_eq!(i, len);\n@@ -237,7 +237,7 @@ impl Hasher for SipHasher128 {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n-            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << 8 * self.ntail;\n+            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n                 return"}, {"sha": "47dfc1d1688d07ab24a1fba2d4e19d002174eae2", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -44,7 +44,7 @@ impl<W: StableHasherResult> StableHasher<W> {\n impl StableHasherResult for u128 {\n     fn finish(hasher: StableHasher<Self>) -> Self {\n         let (_0, _1) = hasher.finalize();\n-        (_0 as u128) | ((_1 as u128) << 64)\n+        u128::from(_0) | (u128::from(_1) << 64)\n     }\n }\n "}, {"sha": "0fb8060031843a156cf2344ec194a07bb6e95c09", "filename": "src/librustc_data_structures/vec_linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fvec_linked_list.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -8,7 +8,7 @@ where\n     Ls: Links,\n {\n     VecLinkedListIterator {\n-        links: links,\n+        links,\n         current: first,\n     }\n }"}, {"sha": "3641d355ef19c9aa08a7758e0771f43267db4e3c", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -94,7 +94,7 @@ impl<'a>  DiagnosticConverter<'a> {\n                     annotation_type: Self::annotation_type_for_level(self.level),\n                 }),\n                 footer: vec![],\n-                slices: slices,\n+                slices,\n             })\n         } else {\n             // FIXME(#59346): Is it ok to return None if there's no source_map?"}, {"sha": "424d7c00383899897bafda051fedc4c61470dae1", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -388,7 +388,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             style: SuggestionStyle::CompletelyHidden,\n-            applicability: applicability,\n+            applicability,\n         });\n         self\n     }"}, {"sha": "a2717ab7ad8a9000f06217a691ef533258fda152", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -1339,7 +1339,7 @@ impl EmitterWriter {\n         }\n \n         let mut dst = self.dst.writable();\n-        match write!(dst, \"\\n\") {\n+        match writeln!(dst) {\n             Err(e) => panic!(\"failed to emit error: {}\", e),\n             _ => {\n                 match dst.flush() {\n@@ -1598,7 +1598,7 @@ fn emit_to_destination(rendered_buffer: &[Vec<StyledString>],\n             dst.reset()?;\n         }\n         if !short_message && (!lvl.is_failure_note() || pos != rendered_buffer.len() - 1) {\n-            write!(dst, \"\\n\")?;\n+            writeln!(dst)?;\n         }\n     }\n     dst.flush()?;"}, {"sha": "48749dff941ac00cfe15e759160af5d2639cae8b", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -19,7 +19,7 @@ pub fn opts() -> TargetOptions {\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n         has_rpath: false,\n-        pre_link_args: pre_link_args,\n+        pre_link_args,\n         pre_link_objects_exe: vec![\n             \"Scrt1.o\".to_string()\n         ],"}, {"sha": "a7e7c09f9ae4411e9546f493278db7bebdfc3d61", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -461,7 +461,7 @@ impl<'a> Encoder<'a> {\n     /// Creates a new JSON encoder whose output will be written to the writer\n     /// specified.\n     pub fn new(writer: &'a mut dyn fmt::Write) -> Encoder<'a> {\n-        Encoder { writer: writer, is_emitting_map_key: false, }\n+        Encoder { writer, is_emitting_map_key: false, }\n     }\n }\n \n@@ -513,7 +513,7 @@ impl<'a> crate::Encoder for Encoder<'a> {\n         emit_enquoted_if_mapkey!(self, fmt_number_or_null(v))\n     }\n     fn emit_f32(&mut self, v: f32) -> EncodeResult {\n-        self.emit_f64(v as f64)\n+        self.emit_f64(f64::from(v))\n     }\n \n     fn emit_char(&mut self, v: char) -> EncodeResult {\n@@ -763,7 +763,7 @@ impl<'a> crate::Encoder for PrettyEncoder<'a> {\n         emit_enquoted_if_mapkey!(self, fmt_number_or_null(v))\n     }\n     fn emit_f32(&mut self, v: f32) -> EncodeResult {\n-        self.emit_f64(v as f64)\n+        self.emit_f64(f64::from(v))\n     }\n \n     fn emit_char(&mut self, v: char) -> EncodeResult {\n@@ -1698,12 +1698,12 @@ impl<T: Iterator<Item=char>> Parser<T> {\n                             if n2 < 0xDC00 || n2 > 0xDFFF {\n                                 return self.error(LoneLeadingSurrogateInHexEscape)\n                             }\n-                            let c = (((n1 - 0xD800) as u32) << 10 |\n-                                     (n2 - 0xDC00) as u32) + 0x1_0000;\n+                            let c = (u32::from(n1 - 0xD800) << 10 |\n+                                     u32::from(n2 - 0xDC00)) + 0x1_0000;\n                             res.push(char::from_u32(c).unwrap());\n                         }\n \n-                        n => match char::from_u32(n as u32) {\n+                        n => match char::from_u32(u32::from(n)) {\n                             Some(c) => res.push(c),\n                             None => return self.error(InvalidUnicodeCodePoint),\n                         },\n@@ -2405,7 +2405,7 @@ impl ToJson for Json {\n }\n \n impl ToJson for f32 {\n-    fn to_json(&self) -> Json { (*self as f64).to_json() }\n+    fn to_json(&self) -> Json { f64::from(*self).to_json() }\n }\n \n impl ToJson for f64 {"}, {"sha": "f9d80842d7558ec5f15aea7fc4c9ca17c955dbf1", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -123,7 +123,7 @@ pub fn read_signed_leb128(data: &[u8], start_position: usize) -> (i128, usize) {\n     loop {\n         byte = data[position];\n         position += 1;\n-        result |= ((byte & 0x7F) as i128) << shift;\n+        result |= i128::from(byte & 0x7F) << shift;\n         shift += 7;\n \n         if (byte & 0x80) == 0 {"}, {"sha": "75988198eb9b5f98174a98913347f58d09f9fae2", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -296,13 +296,13 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     #[inline]\n     fn read_f64(&mut self) -> Result<f64, Self::Error> {\n         let bits = self.read_u64()?;\n-        Ok(unsafe { ::std::mem::transmute(bits) })\n+        Ok(f64::from_bits(bits))\n     }\n \n     #[inline]\n     fn read_f32(&mut self) -> Result<f32, Self::Error> {\n         let bits = self.read_u32()?;\n-        Ok(unsafe { ::std::mem::transmute(bits) })\n+        Ok(f32::from_bits(bits))\n     }\n \n     #[inline]"}, {"sha": "c627596bbdf20ea7720e5175660b07787c8f5a09", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -1832,7 +1832,7 @@ impl Arg {\n                         lt,\n                         MutTy {\n                             ty: infer_ty,\n-                            mutbl: mutbl,\n+                            mutbl,\n                         },\n                     ),\n                     span,\n@@ -2120,7 +2120,7 @@ impl PolyTraitRef {\n         PolyTraitRef {\n             bound_generic_params: generic_params,\n             trait_ref: TraitRef {\n-                path: path,\n+                path,\n                 ref_id: DUMMY_NODE_ID,\n             },\n             span,"}, {"sha": "baf1031de1e7c40ddbe0f5f84be5bfa792f25ed6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -815,7 +815,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n \n     fn pat(&self, span: Span, pat: PatKind) -> P<ast::Pat> {\n-        P(ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span: span })\n+        P(ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span })\n     }\n     fn pat_wild(&self, span: Span) -> P<ast::Pat> {\n         self.pat(span, PatKind::Wild)"}, {"sha": "5473f55aa33704053b03cdf982f7f108fc162a9a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -231,7 +231,7 @@ pub struct MacroExpander<'a, 'b> {\n \n impl<'a, 'b> MacroExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n-        MacroExpander { cx: cx, monotonic: monotonic }\n+        MacroExpander { cx, monotonic }\n     }\n \n     pub fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n@@ -377,7 +377,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             _ => item.clone(),\n                         };\n                         invocations.push(Invocation {\n-                            kind: InvocationKind::Derive { path: path.clone(), item: item },\n+                            kind: InvocationKind::Derive { path: path.clone(), item },\n                             fragment_kind: invoc.fragment_kind,\n                             expansion_data: ExpansionData {\n                                 mark,\n@@ -944,7 +944,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     }\n \n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {\n-        self.collect(kind, InvocationKind::Bang { mac: mac, ident: None, span: span })\n+        self.collect(kind, InvocationKind::Bang { mac, ident: None, span })\n     }\n \n     fn collect_attr(&mut self,"}, {"sha": "ccf9db842ab6e467acbe3446d0938916dfeaa341", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -319,7 +319,7 @@ fn parse_tree(\n         tokenstream::TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(\n             span,\n             Lrc::new(Delimited {\n-                delim: delim,\n+                delim,\n                 tts: parse(\n                     tts.into(),\n                     expect_matchers,"}, {"sha": "ea7f8e356aa63214fbecbf501ec553829d47ec05", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -23,8 +23,8 @@ enum Frame {\n impl Frame {\n     /// Construct a new frame around the delimited set of tokens.\n     fn new(tts: Vec<quoted::TokenTree>) -> Frame {\n-        let forest = Lrc::new(quoted::Delimited { delim: token::NoDelim, tts: tts });\n-        Frame::Delimited { forest: forest, idx: 0, span: DelimSpan::dummy() }\n+        let forest = Lrc::new(quoted::Delimited { delim: token::NoDelim, tts });\n+        Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }\n     }\n }\n \n@@ -248,7 +248,7 @@ pub fn transcribe(\n             // the previous results (from outside the Delimited).\n             quoted::TokenTree::Delimited(mut span, delimited) => {\n                 span = span.apply_mark(cx.current_expansion.mark);\n-                stack.push(Frame::Delimited { forest: delimited, idx: 0, span: span });\n+                stack.push(Frame::Delimited { forest: delimited, idx: 0, span });\n                 result_stack.push(mem::replace(&mut result, Vec::new()));\n             }\n "}, {"sha": "a6e8441a915e0c1464ce6b3acd4952286ff498e8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -1665,7 +1665,7 @@ impl<'a> Context<'a> {\n }\n \n pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n-    let cx = Context { features: features, parse_sess: parse_sess, plugin_attributes: &[] };\n+    let cx = Context { features, parse_sess, plugin_attributes: &[] };\n     cx.check_attribute(\n         attr,\n         attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name).map(|a| *a)),"}, {"sha": "fc206580e3811a79c107d1598c0ef2a775e949eb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -290,10 +290,10 @@ crate enum LastToken {\n }\n \n impl TokenCursorFrame {\n-    fn new(sp: DelimSpan, delim: DelimToken, tts: &TokenStream) -> Self {\n+    fn new(span: DelimSpan, delim: DelimToken, tts: &TokenStream) -> Self {\n         TokenCursorFrame {\n-            delim: delim,\n-            span: sp,\n+            delim,\n+            span,\n             open_delim: delim == token::NoDelim,\n             tree_cursor: tts.clone().into_trees(),\n             close_delim: delim == token::NoDelim,\n@@ -1449,7 +1449,7 @@ impl<'a> Parser<'a> {\n         let opt_lifetime = if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n         let mutbl = self.parse_mutability();\n         let ty = self.parse_ty_no_plus()?;\n-        return Ok(TyKind::Rptr(opt_lifetime, MutTy { ty: ty, mutbl: mutbl }));\n+        return Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }));\n     }\n \n     fn parse_ptr(&mut self) -> PResult<'a, MutTy> {\n@@ -1467,7 +1467,7 @@ impl<'a> Parser<'a> {\n             Mutability::Immutable\n         };\n         let t = self.parse_ty_no_plus()?;\n-        Ok(MutTy { ty: t, mutbl: mutbl })\n+        Ok(MutTy { ty: t, mutbl })\n     }\n \n     fn is_named_argument(&self) -> bool {\n@@ -4366,7 +4366,7 @@ impl<'a> Parser<'a> {\n                     self.report_invalid_macro_expansion_item();\n                 }\n \n-                (ident, ast::MacroDef { tokens: tokens, legacy: true })\n+                (ident, ast::MacroDef { tokens, legacy: true })\n             }\n             _ => return Ok(None),\n         };\n@@ -6789,12 +6789,12 @@ impl<'a> Parser<'a> {\n         let hi = self.token.span;\n         self.expect(&token::Semi)?;\n         Ok(ast::ForeignItem {\n-            ident: ident,\n-            attrs: attrs,\n+            ident,\n+            attrs,\n             node: ForeignItemKind::Ty,\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            vis: vis\n+            vis\n         })\n     }\n "}, {"sha": "f5412f3e216026aa4502b3f1435413acc9447373", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -497,7 +497,7 @@ impl<'a> Printer<'a> {\n \n     pub fn print_newline(&mut self, amount: isize) -> io::Result<()> {\n         debug!(\"NEWLINE {}\", amount);\n-        let ret = write!(self.out, \"\\n\");\n+        let ret = writeln!(self.out);\n         self.pending_indentation = 0;\n         self.indent(amount);\n         ret"}, {"sha": "ac30cbb471aeab3bf53e948dd37960d4b3a1c241", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa3e27231a705e1aea4347ae78698c81438f1f4/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=4aa3e27231a705e1aea4347ae78698c81438f1f4", "patch": "@@ -150,7 +150,7 @@ impl SourceMap {\n                             -> SourceMap {\n         SourceMap {\n             files: Default::default(),\n-            file_loader: file_loader,\n+            file_loader,\n             path_mapping,\n         }\n     }\n@@ -396,7 +396,7 @@ impl SourceMap {\n         let f = (*self.files.borrow().source_files)[idx].clone();\n \n         match f.lookup_line(pos) {\n-            Some(line) => Ok(SourceFileAndLine { sf: f, line: line }),\n+            Some(line) => Ok(SourceFileAndLine { sf: f, line }),\n             None => Err(f)\n         }\n     }\n@@ -511,7 +511,7 @@ impl SourceMap {\n                               start_col,\n                               end_col: hi.col });\n \n-        Ok(FileLines {file: lo.file, lines: lines})\n+        Ok(FileLines {file: lo.file, lines})\n     }\n \n     /// Extracts the source surrounding the given `Span` using the `extract_source` function. The\n@@ -820,7 +820,7 @@ impl SourceMap {\n         let idx = self.lookup_source_file_idx(bpos);\n         let sf = (*self.files.borrow().source_files)[idx].clone();\n         let offset = bpos - sf.start_pos;\n-        SourceFileAndBytePos {sf: sf, pos: offset}\n+        SourceFileAndBytePos {sf, pos: offset}\n     }\n \n     /// Converts an absolute BytePos to a CharPos relative to the source_file."}]}