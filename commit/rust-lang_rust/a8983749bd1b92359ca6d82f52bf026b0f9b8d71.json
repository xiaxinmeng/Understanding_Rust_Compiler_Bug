{"sha": "a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "node_id": "C_kwDOAAsO6NoAKGE4OTgzNzQ5YmQxYjkyMzU5Y2E2ZDgyZjUyYmYwMjZiMGY5YjhkNzE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-15T21:55:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-15T21:55:24Z"}, "message": "Rollup merge of #110366 - matthiaskrgr:compl_123, r=Nilstrieb\n\nfix some clippy::complexity\n\nr? `@Nilstrieb`", "tree": {"sha": "e0b8cdf674899b7232b1f29c67086d617a9658e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b8cdf674899b7232b1f29c67086d617a9658e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOx1MCRBK7hj4Ov3rIwAAAQYIAAD0wPm9L27H7KHM+gpNv7kk\nQqfoHHUiapmK0Iz1KW9eOBU+YiBVUrtOViPO72Cu+IBllXvKh46ZFW/st3uL6Qrk\nTX5ZynwYfNdyT+fIPX1rcdhy57kHURoIQiY2IY/IY3UMRd4jTblbtqR6uDKofFWR\nPRlq82vQXhdrSf/yL8S1TzCGJvVissDiAyZX5zlAGhF15TbJkSq9Kg+MKuySKSz0\nDktbWfNAukXZpJZJ+6+JOSwMHVPjILJcdQMWfI6fSD4QrjFe/H1IihjaTNhcOBeB\nK3ef9NQUQnAOgwRKCJd20qTn9V38ChQ3Yo40HftEs4dNHK2ferP4Yxuyr55i84Q=\n=jD0S\n-----END PGP SIGNATURE-----\n", "payload": "tree e0b8cdf674899b7232b1f29c67086d617a9658e0\nparent 99e59dbef34ba54ec903a4081e32489cb6ffd2b6\nparent bcd79c222ac7a316502e9537e86fae6512bc697d\nauthor Yuki Okushi <jtitor@2k36.org> 1681595724 +0900\ncommitter GitHub <noreply@github.com> 1681595724 +0900\n\nRollup merge of #110366 - matthiaskrgr:compl_123, r=Nilstrieb\n\nfix some clippy::complexity\n\nr? `@Nilstrieb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "html_url": "https://github.com/rust-lang/rust/commit/a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e59dbef34ba54ec903a4081e32489cb6ffd2b6", "html_url": "https://github.com/rust-lang/rust/commit/99e59dbef34ba54ec903a4081e32489cb6ffd2b6"}, {"sha": "bcd79c222ac7a316502e9537e86fae6512bc697d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd79c222ac7a316502e9537e86fae6512bc697d", "html_url": "https://github.com/rust-lang/rust/commit/bcd79c222ac7a316502e9537e86fae6512bc697d"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "70d0a101b4ed908d14dece8ceddb11b8029535a4", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "patch": "@@ -528,7 +528,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n     where\n         F: Fn() -> RegionCtxt,\n     {\n-        let next_region = self.infcx.next_nll_region_var(origin.clone());\n+        let next_region = self.infcx.next_nll_region_var(origin);\n         let vid = next_region.as_var();\n \n         if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {"}, {"sha": "8c414521b7653322205b25b966b89e124acd7bef", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "patch": "@@ -645,9 +645,8 @@ pub(super) fn implied_predicates_with_filter(\n     };\n \n     // Combine the two lists to form the complete set of superbounds:\n-    let implied_bounds = &*tcx\n-        .arena\n-        .alloc_from_iter(superbounds.predicates().into_iter().chain(where_bounds_that_match));\n+    let implied_bounds =\n+        &*tcx.arena.alloc_from_iter(superbounds.predicates().chain(where_bounds_that_match));\n     debug!(?implied_bounds);\n \n     // Now require that immediate supertraits are converted,"}, {"sha": "c3e5f9cb745fcbaba80600d03746e1ed1f972d80", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "patch": "@@ -164,24 +164,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     for param in\n                         [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                            .into_iter()\n+                            .flatten()\n                     {\n-                        if let Some(param) = param {\n-                            let refined_expr = self.point_at_field_if_possible(\n-                                def_id,\n-                                param,\n-                                variant_def_id,\n-                                fields,\n-                            );\n-\n-                            match refined_expr {\n-                                None => {}\n-                                Some((refined_expr, _)) => {\n-                                    error.obligation.cause.span = refined_expr\n-                                        .span\n-                                        .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n-                                        .unwrap_or(refined_expr.span);\n-                                    return true;\n-                                }\n+                        let refined_expr =\n+                            self.point_at_field_if_possible(def_id, param, variant_def_id, fields);\n+\n+                        match refined_expr {\n+                            None => {}\n+                            Some((refined_expr, _)) => {\n+                                error.obligation.cause.span = refined_expr\n+                                    .span\n+                                    .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n+                                    .unwrap_or(refined_expr.span);\n+                                return true;\n                             }\n                         }\n                     }"}, {"sha": "769e12f77bf2daeca3565096eb313da00b993798", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> Partitioner<'tcx> for DefaultPartitioning {\n         }\n \n         PreInliningPartitioning {\n-            codegen_units: codegen_units.into_values().map(|codegen_unit| codegen_unit).collect(),\n+            codegen_units: codegen_units.into_values().collect(),\n             roots,\n             internalization_candidates,\n         }"}, {"sha": "579a789244bd6136c74b409f547e1925276710d1", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "patch": "@@ -231,7 +231,7 @@ pub(crate) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             // locked while doing so. Instead we copy out the\n             // `(query_key, dep_node_index)` pairs and release the lock again.\n             let mut query_keys_and_indices = Vec::new();\n-            query_cache.iter(&mut |k, _, i| query_keys_and_indices.push((k.clone(), i)));\n+            query_cache.iter(&mut |k, _, i| query_keys_and_indices.push((*k, i)));\n \n             // Now actually allocate the strings. If allocating the strings\n             // generates new entries in the query cache, we'll miss them but"}, {"sha": "a835bd2de3b1452be89b72e801555b2f47423d64", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8983749bd1b92359ca6d82f52bf026b0f9b8d71/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a8983749bd1b92359ca6d82f52bf026b0f9b8d71", "patch": "@@ -1349,7 +1349,7 @@ impl LinkCollector<'_, '_> {\n                         if has_derive_trait_collision {\n                             candidates.macro_ns = None;\n                         }\n-                        candidates.into_iter().filter_map(|res| res).flatten().collect::<Vec<_>>()\n+                        candidates.into_iter().flatten().flatten().collect::<Vec<_>>()\n                     }\n                 }\n             }"}]}