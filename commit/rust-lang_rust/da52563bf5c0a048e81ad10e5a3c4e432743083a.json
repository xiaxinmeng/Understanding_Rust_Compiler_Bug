{"sha": "da52563bf5c0a048e81ad10e5a3c4e432743083a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTI1NjNiZjVjMGEwNDhlODFhZDEwZTVhM2M0ZTQzMjc0MzA4M2E=", "commit": {"author": {"name": "Cengiz Can", "email": "123910+cengizIO@users.noreply.github.com", "date": "2017-08-28T23:01:53Z"}, "committer": {"name": "Cengiz Can", "email": "cengizc@gmail.com", "date": "2017-11-12T15:56:45Z"}, "message": "Improve SubSupConflict case with one named, one anonymous lifetime parameter #42701", "tree": {"sha": "21182603436f05efb8b3ce1d54d19980d6499c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21182603436f05efb8b3ce1d54d19980d6499c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da52563bf5c0a048e81ad10e5a3c4e432743083a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da52563bf5c0a048e81ad10e5a3c4e432743083a", "html_url": "https://github.com/rust-lang/rust/commit/da52563bf5c0a048e81ad10e5a3c4e432743083a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da52563bf5c0a048e81ad10e5a3c4e432743083a/comments", "author": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cengiz-io", "id": 123910, "node_id": "MDQ6VXNlcjEyMzkxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/123910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cengiz-io", "html_url": "https://github.com/cengiz-io", "followers_url": "https://api.github.com/users/cengiz-io/followers", "following_url": "https://api.github.com/users/cengiz-io/following{/other_user}", "gists_url": "https://api.github.com/users/cengiz-io/gists{/gist_id}", "starred_url": "https://api.github.com/users/cengiz-io/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cengiz-io/subscriptions", "organizations_url": "https://api.github.com/users/cengiz-io/orgs", "repos_url": "https://api.github.com/users/cengiz-io/repos", "events_url": "https://api.github.com/users/cengiz-io/events{/privacy}", "received_events_url": "https://api.github.com/users/cengiz-io/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6f7252a135a3fd1dba6f5e002b9d3d3af034b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6f7252a135a3fd1dba6f5e002b9d3d3af034b9", "html_url": "https://github.com/rust-lang/rust/commit/4b6f7252a135a3fd1dba6f5e002b9d3d3af034b9"}], "stats": {"total": 191, "additions": 76, "deletions": 115}, "files": [{"sha": "36370e23f216128f6f7e7c9c06eff16e95e464a4", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -60,6 +60,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_report_anon_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n+            SubSupConflict(_, ref origin, sub, _, sup) => (origin.span(), sub, sup),\n             _ => return false, // inapplicable\n         };\n "}, {"sha": "e0b8a193ede0c15e27c2be1a7cadffef572e60c7", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -21,6 +21,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n+            SubSupConflict(_, ref origin, sub, _, sup) => (origin.span(), sub, sup),\n             _ => return false, // inapplicable\n         };\n "}, {"sha": "5451a20d8166ff9838f28014984d01e22412711d", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -30,7 +30,7 @@ fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n {\n     // x and y here have two distinct lifetimes:\n     let z: I::A = if cond { x } else { y };\n-    //~^ ERROR cannot infer\n+    //~^ ERROR lifetime mismatch\n }\n \n pub fn main() {}"}, {"sha": "a5e8f4068e6619711695c6310fdc4a8de6fe96c5", "filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-contravariant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -50,9 +50,10 @@ fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n \n #[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   let a = bar(foo, y); //[krisskross]~ ERROR E0495\n-   let b = bar(foo, x); //[krisskross]~ ERROR E0495\n-   (a, b)\n+   let a = bar(foo, y);\n+   let b = bar(foo, x);\n+   (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n+   //[krisskross]~^ ERROR 55:8: 55:9: lifetime mismatch [E0623]\n }\n \n #[rustc_error]"}, {"sha": "3920024c8e84e8bb53ff412fa1de17cce8ed6d54", "filename": "src/test/compile-fail/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -45,9 +45,9 @@ fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n #[cfg(oneuse)] // one instantiation: BAD\n fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    let f = foo; // <-- No consistent type can be inferred for `f` here.\n-   let a = bar(f, x); //[oneuse]~^ ERROR E0495\n+   let a = bar(f, x);\n    let b = bar(f, y);\n-   (a, b)\n+   (a, b) //[oneuse]~ ERROR E0623\n }\n \n #[cfg(transmute)] // one instantiations: BAD\n@@ -60,9 +60,10 @@ fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n \n #[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   let a = bar(foo, y); //[krisskross]~ ERROR E0495\n-   let b = bar(foo, x); //[krisskross]~ ERROR E0495\n-   (a, b)\n+   let a = bar(foo, y);\n+   let b = bar(foo, x);\n+   (a, b) //[krisskross]~ ERROR E0623\n+   //[krisskross]~^ ERROR E0623\n }\n \n #[rustc_error]"}, {"sha": "af85e68f5debe8b628ec6a58a913179c8676c34d", "filename": "src/test/compile-fail/borrowck/borrowck-reborrow-from-shorter-lived-andmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -17,7 +17,7 @@ struct S<'a> {\n \n fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n     S { pointer: &mut *p.pointer }\n-    //~^ ERROR cannot infer\n+    //~^ ERROR lifetime mismatch\n }\n \n fn main() {"}, {"sha": "8516a8ea52e42ddbefb5860043aad9f85781f488", "filename": "src/test/compile-fail/issue-17728.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -21,9 +21,9 @@ trait TraversesWorld {\n     fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&Room, &str> {\n         let direction = str_to_direction(directionStr);\n         let maybe_room = room.direction_to_room.get(&direction);\n-        //~^ ERROR cannot infer an appropriate lifetime for autoref due to conflicting requirements\n         match maybe_room {\n             Some(entry) => Ok(entry),\n+            //~^ ERROR 25:28: 25:37: lifetime mismatch [E0623]\n             _ => Err(\"Direction does not exist in room.\")\n         }\n     }"}, {"sha": "e16a7ecf6b9087982ec09aa1a31fd79264d0a34c", "filename": "src/test/compile-fail/issue-40288-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fissue-40288-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fissue-40288-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40288-2.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -12,12 +12,12 @@ fn prove_static<T: 'static + ?Sized>(_: &'static T) {}\n \n fn lifetime_transmute_slice<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n     let mut out = [x];\n-    //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n     {\n         let slice: &mut [_] = &mut out;\n         slice[0] = y;\n     }\n     out[0]\n+    //~^ ERROR 19:5: 19:11: explicit lifetime required in the type of `y` [E0621]\n }\n \n struct Struct<T, U: ?Sized> {\n@@ -27,12 +27,12 @@ struct Struct<T, U: ?Sized> {\n \n fn lifetime_transmute_struct<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n     let mut out = Struct { head: x, _tail: [()] };\n-    //~^ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n     {\n         let dst: &mut Struct<_, [()]> = &mut out;\n         dst.head = y;\n     }\n     out.head\n+    //~^ ERROR 34:5: 34:13: explicit lifetime required in the type of `y` [E0621]\n }\n \n fn main() {"}, {"sha": "c50f425b2c01d744cb41256a10fd0f726010c8bf", "filename": "src/test/compile-fail/object-lifetime-default-from-box-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -38,7 +38,7 @@ fn store(ss: &mut SomeStruct, b: Box<SomeTrait>) {\n fn store1<'b>(ss: &mut SomeStruct, b: Box<SomeTrait+'b>) {\n     // Here we override the lifetimes explicitly, and so naturally we get an error.\n \n-    ss.r = b; //~ ERROR cannot infer an appropriate lifetime\n+    ss.r = b; //~ ERROR 41:12: 41:13: explicit lifetime required in the type of `ss` [E0621]\n }\n \n fn main() {"}, {"sha": "e3d96f52e817b857ba091bafaff9c5ecee71198b", "filename": "src/test/compile-fail/region-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregion-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-lifetime-bounds-on-fns-where-clause.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -21,7 +21,7 @@ fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y); //~ ERROR cannot infer\n+    a(x, y); //~ ERROR 24:7: 24:8: lifetime mismatch [E0623]\n }\n \n fn d() {"}, {"sha": "d8d12444dddb34bae2979ee6c7086f0f0fa9ba77", "filename": "src/test/compile-fail/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -23,7 +23,7 @@ fn b<'a, 'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n fn c<'a,'b, 'c>(x: &mut &'a isize, y: &mut &'b isize, z: &mut &'c isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y, z); //~ ERROR cannot infer\n+    a(x, y, z); //~ ERROR 26:7: 26:8: lifetime mismatch [E0623]\n }\n \n fn d() {"}, {"sha": "24e4c5fbd91be47f345f39866404be8991d2f0c2", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -27,7 +27,7 @@ fn call_into_maybe_owned<'x,F:IntoMaybeOwned<'x>>(f: F) {\n \n fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n     // Here the value provided for 'y is 'y, and hence 'y:'x does not hold.\n-    a.bigger_region(b) //~ ERROR cannot infer\n+    a.bigger_region(b) //~ ERROR 30:7: 30:20: lifetime mismatch [E0623]\n }\n \n fn main() { }"}, {"sha": "3e9d2aa6c3bff4b04755d25f6a51985e0c075879", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-trait-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-trait-bound.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -27,7 +27,7 @@ fn caller1<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n \n fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n-    f.method(b); //~ ERROR cannot infer\n+    f.method(b); //~ ERROR 30:7: 30:13: lifetime mismatch [E0623]\n }\n \n fn caller3<'a,'b:'a,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {"}, {"sha": "dcc579d26c18f681f2e02bc1d89edb35233fb5c2", "filename": "src/test/compile-fail/regions-creating-enums3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums3.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -14,7 +14,7 @@ enum ast<'a> {\n }\n \n fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n-    ast::add(x, y) //~ ERROR cannot infer\n+    ast::add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n }\n \n fn main() {"}, {"sha": "073a4f79b05f006d3143acd11b9862c873b62626", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -20,13 +20,13 @@ fn ordering1<'a, 'b>(x: &'a &'b usize) -> &'a usize {\n \n fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n     // However, it is not safe to assume that 'b <= 'a\n-    &*y //~ ERROR cannot infer\n+    &*y //~ ERROR 23:5: 23:8: lifetime mismatch [E0623]\n }\n \n fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n     // Do not infer an ordering from the return value.\n     let z: &'b usize = &*x;\n-    //~^ ERROR cannot infer\n+    //~^ ERROR 28:24: 28:27: lifetime mismatch [E0623]\n     panic!();\n }\n "}, {"sha": "5955619ea92adde671d8e5a8caa7fa8ae30c2d32", "filename": "src/test/compile-fail/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -21,7 +21,7 @@ fn b<'a, 'b>(x: &mut &'a isize, y: &mut &'b isize) {\n fn c<'a,'b>(x: &mut &'a isize, y: &mut &'b isize) {\n     // Here we try to call `foo` but do not know that `'a` and `'b` are\n     // related as required.\n-    a(x, y); //~ ERROR E0495\n+    a(x, y); //~ ERROR 24:7: 24:8: lifetime mismatch [E0623]\n }\n \n fn d() {"}, {"sha": "f6f1a189e5ee14dbd5dc6cc57759ef71bd704284", "filename": "src/test/compile-fail/regions-reborrow-from-shorter-mut-ref-mut-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -11,7 +11,7 @@\n // Issue #8624. Test for reborrowing with 3 levels, not just two.\n \n fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n-    &mut ***p //~ ERROR cannot infer\n+    &mut ***p //~ ERROR 14:5: 14:14: lifetime mismatch [E0623]\n }\n \n fn main() {"}, {"sha": "7270b477d2d88df3badf5762577cc24b78c96d36", "filename": "src/test/compile-fail/regions-reborrow-from-shorter-mut-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-reborrow-from-shorter-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fcompile-fail%2Fregions-reborrow-from-shorter-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-reborrow-from-shorter-mut-ref.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -13,7 +13,7 @@\n // for `'a` (which must be a sublifetime of `'b`).\n \n fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n-    &mut **p //~ ERROR cannot infer\n+    &mut **p //~ ERROR 16:5: 16:13: lifetime mismatch [E0623]\n }\n \n fn main() {"}, {"sha": "04112c303bd935f2cbef5744adc628ac2bbd4207", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.rs?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    field: i32,\n+}\n+\n+fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n+    if true {\n+        let p: &i32 = &a.field;\n+        &*p\n+    } else {\n+        &*x\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "613c903853ae5a1fbc2dc3cb833838435f88e094", "filename": "src/test/ui/lifetime-errors/42701_one_named_and_one_anonymous.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2F42701_one_named_and_one_anonymous.stderr?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/42701_one_named_and_one_anonymous.rs:20:9\n+   |\n+15 | fn foo2<'a>(a: &'a Foo, x: &i32) -> &'a i32 {\n+   |                         - consider changing the type of `x` to `&'a i32`\n+...\n+20 |         &*x\n+   |         ^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+"}, {"sha": "495af8ae208f640acc74d4a986432503449a515f", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -1,35 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/ex2c-push-inference-variable.rs:16:13\n-   |\n-16 |     let z = Ref { data: y.data };\n-   |             ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:1...\n-  --> $DIR/ex2c-push-inference-variable.rs:15:1\n-   |\n-15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-16 | |     let z = Ref { data: y.data };\n-17 | |     x.push(z);\n-18 | | }\n-   | |_^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/ex2c-push-inference-variable.rs:16:25\n-   |\n-16 |     let z = Ref { data: y.data };\n-   |                         ^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:1...\n-  --> $DIR/ex2c-push-inference-variable.rs:15:1\n-   |\n-15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-16 | |     let z = Ref { data: y.data };\n-17 | |     x.push(z);\n-18 | | }\n-   | |_^\n-note: ...so that expression is assignable (expected Ref<'b, _>, found Ref<'_, _>)\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex2c-push-inference-variable.rs:17:12\n    |\n+15 | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |                                   ------------      ------------ these two types are declared with different lifetimes...\n+16 |     let z = Ref { data: y.data };\n 17 |     x.push(z);\n-   |            ^\n+   |            ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error\n "}, {"sha": "1f250a888472c55f43c03fcd82c8e56d8b789728", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.stderr", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -1,37 +1,10 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/ex2d-push-inference-variable-2.rs:17:13\n-   |\n-17 |     let b = Ref { data: y.data };\n-   |             ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:1...\n-  --> $DIR/ex2d-push-inference-variable-2.rs:15:1\n-   |\n-15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-16 | |     let a: &mut Vec<Ref<i32>> = x;\n-17 | |     let b = Ref { data: y.data };\n-18 | |     a.push(b);\n-19 | | }\n-   | |_^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/ex2d-push-inference-variable-2.rs:17:25\n-   |\n-17 |     let b = Ref { data: y.data };\n-   |                         ^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:1...\n-  --> $DIR/ex2d-push-inference-variable-2.rs:15:1\n-   |\n-15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-16 | |     let a: &mut Vec<Ref<i32>> = x;\n-17 | |     let b = Ref { data: y.data };\n-18 | |     a.push(b);\n-19 | | }\n-   | |_^\n-note: ...so that expression is assignable (expected &mut std::vec::Vec<Ref<'_, i32>>, found &mut std::vec::Vec<Ref<'b, i32>>)\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex2d-push-inference-variable-2.rs:16:33\n    |\n+15 | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |                                   ------------      ------------ these two types are declared with different lifetimes...\n 16 |     let a: &mut Vec<Ref<i32>> = x;\n-   |                                 ^\n+   |                                 ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error\n "}, {"sha": "343c35b871edea38764ecdaa671978a50a32935c", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.stderr", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da52563bf5c0a048e81ad10e5a3c4e432743083a/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr?ref=da52563bf5c0a048e81ad10e5a3c4e432743083a", "patch": "@@ -1,37 +1,10 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/ex2e-push-inference-variable-3.rs:17:13\n-   |\n-17 |     let b = Ref { data: y.data };\n-   |             ^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime 'c as defined on the function body at 15:1...\n-  --> $DIR/ex2e-push-inference-variable-3.rs:15:1\n-   |\n-15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-16 | |     let a: &mut Vec<Ref<i32>> = x;\n-17 | |     let b = Ref { data: y.data };\n-18 | |     Vec::push(a, b);\n-19 | | }\n-   | |_^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/ex2e-push-inference-variable-3.rs:17:25\n-   |\n-17 |     let b = Ref { data: y.data };\n-   |                         ^^^^^^\n-note: but, the lifetime must be valid for the lifetime 'b as defined on the function body at 15:1...\n-  --> $DIR/ex2e-push-inference-variable-3.rs:15:1\n-   |\n-15 | / fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-16 | |     let a: &mut Vec<Ref<i32>> = x;\n-17 | |     let b = Ref { data: y.data };\n-18 | |     Vec::push(a, b);\n-19 | | }\n-   | |_^\n-note: ...so that expression is assignable (expected &mut std::vec::Vec<Ref<'_, i32>>, found &mut std::vec::Vec<Ref<'b, i32>>)\n+error[E0623]: lifetime mismatch\n   --> $DIR/ex2e-push-inference-variable-3.rs:16:33\n    |\n+15 | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n+   |                                   ------------      ------------ these two types are declared with different lifetimes...\n 16 |     let a: &mut Vec<Ref<i32>> = x;\n-   |                                 ^\n+   |                                 ^ ...but data from `y` flows into `x` here\n \n error: aborting due to previous error\n "}]}