{"sha": "5451fe7d7cfbeb817543685e8df6a50876a5a242", "node_id": "C_kwDOAAsO6NoAKDU0NTFmZTdkN2NmYmViODE3NTQzNjg1ZThkZjZhNTA4NzZhNWEyNDI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-18T22:36:56Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-20T01:19:24Z"}, "message": "rustdoc: implement bag semantics for function parameter search\n\nThis tweak to the function signature search engine makes things so that,\nif a type is repeated in the search query, it'll only match if the\nfunction actually includes it that many times.", "tree": {"sha": "963fa1b9d0a233d4bd97e355322ffc1569558c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963fa1b9d0a233d4bd97e355322ffc1569558c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5451fe7d7cfbeb817543685e8df6a50876a5a242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5451fe7d7cfbeb817543685e8df6a50876a5a242", "html_url": "https://github.com/rust-lang/rust/commit/5451fe7d7cfbeb817543685e8df6a50876a5a242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5451fe7d7cfbeb817543685e8df6a50876a5a242/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8826b68c623619161d499f8138614a0edd741bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8826b68c623619161d499f8138614a0edd741bc8", "html_url": "https://github.com/rust-lang/rust/commit/8826b68c623619161d499f8138614a0edd741bc8"}], "stats": {"total": 120, "additions": 94, "deletions": 26}, "files": [{"sha": "36ff20e299e1ef5a628ace561b3e3788151695a9", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 70, "deletions": 26, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5451fe7d7cfbeb817543685e8df6a50876a5a242/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/5451fe7d7cfbeb817543685e8df6a50876a5a242/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=5451fe7d7cfbeb817543685e8df6a50876a5a242", "patch": "@@ -1202,28 +1202,42 @@ function initSearch(rawSearchIndex) {\n          * @param {Row} row\n          * @param {QueryElement} elem    - The element from the parsed query.\n          * @param {integer} typeFilter\n+         * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n-         * @return {integer} - Returns an edit distance to the best match. If there is no\n-         *                      match, returns `maxEditDistance + 1`.\n+         * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n+         *                                              If there is no match, returns\n+         *                                              `maxEditDistance + 1` and position: -1.\n          */\n-        function findArg(row, elem, typeFilter, maxEditDistance) {\n+        function findArg(row, elem, typeFilter, maxEditDistance, skipPositions) {\n             let dist = maxEditDistance + 1;\n+            let position = -1;\n \n             if (row && row.type && row.type.inputs && row.type.inputs.length > 0) {\n+                let i = 0;\n                 for (const input of row.type.inputs) {\n-                    if (!typePassesFilter(typeFilter, input.ty)) {\n+                    if (!typePassesFilter(typeFilter, input.ty) ||\n+                        skipPositions.indexOf(i) !== -1) {\n+                        i += 1;\n                         continue;\n                     }\n-                    dist = Math.min(\n-                        dist,\n-                        checkType(input, elem, parsedQuery.literalSearch, maxEditDistance)\n+                    const typeDist = checkType(\n+                        input,\n+                        elem,\n+                        parsedQuery.literalSearch,\n+                        maxEditDistance\n                     );\n-                    if (dist === 0) {\n-                        return 0;\n+                    if (typeDist === 0) {\n+                        return {dist: 0, position: i};\n+                    }\n+                    if (typeDist < dist) {\n+                        dist = typeDist;\n+                        position = i;\n                     }\n+                    i += 1;\n                 }\n             }\n-            return parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n+            dist = parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n+            return {dist, position};\n         }\n \n         /**\n@@ -1232,29 +1246,43 @@ function initSearch(rawSearchIndex) {\n          * @param {Row} row\n          * @param {QueryElement} elem   - The element from the parsed query.\n          * @param {integer} typeFilter\n+         * @param {Array<integer>} skipPositions - Do not return one of these positions.\n          *\n-         * @return {integer} - Returns an edit distance to the best match. If there is no\n-         *                      match, returns `maxEditDistance + 1`.\n+         * @return {dist: integer, position: integer} - Returns an edit distance to the best match.\n+         *                                              If there is no match, returns\n+         *                                              `maxEditDistance + 1` and position: -1.\n          */\n-        function checkReturned(row, elem, typeFilter, maxEditDistance) {\n+        function checkReturned(row, elem, typeFilter, maxEditDistance, skipPositions) {\n             let dist = maxEditDistance + 1;\n+            let position = -1;\n \n             if (row && row.type && row.type.output.length > 0) {\n                 const ret = row.type.output;\n+                let i = 0;\n                 for (const ret_ty of ret) {\n-                    if (!typePassesFilter(typeFilter, ret_ty.ty)) {\n+                    if (!typePassesFilter(typeFilter, ret_ty.ty) ||\n+                        skipPositions.indexOf(i) !== -1) {\n+                        i += 1;\n                         continue;\n                     }\n-                    dist = Math.min(\n-                        dist,\n-                        checkType(ret_ty, elem, parsedQuery.literalSearch, maxEditDistance)\n+                    const typeDist = checkType(\n+                        ret_ty,\n+                        elem,\n+                        parsedQuery.literalSearch,\n+                        maxEditDistance\n                     );\n-                    if (dist === 0) {\n-                        return 0;\n+                    if (typeDist === 0) {\n+                        return {dist: 0, position: i};\n                     }\n+                    if (typeDist < dist) {\n+                        dist = typeDist;\n+                        position = i;\n+                    }\n+                    i += 1;\n                 }\n             }\n-            return parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n+            dist = parsedQuery.literalSearch ? maxEditDistance + 1 : dist;\n+            return {dist, position};\n         }\n \n         function checkPath(contains, ty, maxEditDistance) {\n@@ -1455,13 +1483,13 @@ function initSearch(rawSearchIndex) {\n             const fullId = row.id;\n             const searchWord = searchWords[pos];\n \n-            const in_args = findArg(row, elem, parsedQuery.typeFilter, maxEditDistance);\n-            const returned = checkReturned(row, elem, parsedQuery.typeFilter, maxEditDistance);\n+            const in_args = findArg(row, elem, parsedQuery.typeFilter, maxEditDistance, []);\n+            const returned = checkReturned(row, elem, parsedQuery.typeFilter, maxEditDistance, []);\n \n             // path_dist is 0 because no parent path information is currently stored\n             // in the search index\n-            addIntoResults(results_in_args, fullId, pos, -1, in_args, 0, maxEditDistance);\n-            addIntoResults(results_returned, fullId, pos, -1, returned, 0, maxEditDistance);\n+            addIntoResults(results_in_args, fullId, pos, -1, in_args.dist, 0, maxEditDistance);\n+            addIntoResults(results_returned, fullId, pos, -1, returned.dist, 0, maxEditDistance);\n \n             if (!typePassesFilter(parsedQuery.typeFilter, row.ty)) {\n                 return;\n@@ -1534,12 +1562,20 @@ function initSearch(rawSearchIndex) {\n \n             // If the result is too \"bad\", we return false and it ends this search.\n             function checkArgs(elems, callback) {\n+                const skipPositions = [];\n                 for (const elem of elems) {\n                     // There is more than one parameter to the query so all checks should be \"exact\"\n-                    const dist = callback(row, elem, NO_TYPE_FILTER, maxEditDistance);\n+                    const { dist, position } = callback(\n+                        row,\n+                        elem,\n+                        NO_TYPE_FILTER,\n+                        maxEditDistance,\n+                        skipPositions\n+                    );\n                     if (dist <= 1) {\n                         nbDist += 1;\n                         totalDist += dist;\n+                        skipPositions.push(position);\n                     } else {\n                         return false;\n                     }\n@@ -1597,9 +1633,17 @@ function initSearch(rawSearchIndex) {\n                             row,\n                             elem,\n                             parsedQuery.typeFilter,\n+                            maxEditDistance,\n+                            []\n+                        );\n+                        addIntoResults(\n+                            results_others,\n+                            row.id,\n+                            i,\n+                            -1,\n+                            in_returned.dist,\n                             maxEditDistance\n                         );\n-                        addIntoResults(results_others, row.id, i, -1, in_returned, maxEditDistance);\n                     }\n                 }\n             } else if (parsedQuery.foundElems > 0) {"}, {"sha": "c56a3df5f904c06312aca4393a77304bc08abb0b", "filename": "tests/rustdoc-js/search-bag-semantics.js", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5451fe7d7cfbeb817543685e8df6a50876a5a242/tests%2Frustdoc-js%2Fsearch-bag-semantics.js", "raw_url": "https://github.com/rust-lang/rust/raw/5451fe7d7cfbeb817543685e8df6a50876a5a242/tests%2Frustdoc-js%2Fsearch-bag-semantics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsearch-bag-semantics.js?ref=5451fe7d7cfbeb817543685e8df6a50876a5a242", "patch": "@@ -0,0 +1,20 @@\n+// exact-check\n+\n+const QUERY = [\n+    'P',\n+    'P, P',\n+];\n+\n+const EXPECTED = [\n+    {\n+        'in_args': [\n+            { 'path': 'search_bag_semantics', 'name': 'alacazam' },\n+            { 'path': 'search_bag_semantics', 'name': 'abracadabra' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'search_bag_semantics', 'name': 'abracadabra' },\n+        ],\n+    },\n+];"}, {"sha": "546572dc4ef06660797ea48145cfaf8877fbc574", "filename": "tests/rustdoc-js/search-bag-semantics.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5451fe7d7cfbeb817543685e8df6a50876a5a242/tests%2Frustdoc-js%2Fsearch-bag-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5451fe7d7cfbeb817543685e8df6a50876a5a242/tests%2Frustdoc-js%2Fsearch-bag-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fsearch-bag-semantics.rs?ref=5451fe7d7cfbeb817543685e8df6a50876a5a242", "patch": "@@ -0,0 +1,4 @@\n+pub struct P;\n+\n+pub fn abracadabra(a: P, b: P) {}\n+pub fn alacazam(a: P) {}"}]}