{"sha": "5acb467894053cb0342eb6ded4d162b4a6912483", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhY2I0Njc4OTQwNTNjYjAzNDJlYjZkZWQ0ZDE2MmI0YTY5MTI0ODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-14T18:03:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-14T18:03:45Z"}, "message": "Move rm_rf to not-bash", "tree": {"sha": "ca367a3b7a23f96d2149f3f14b908f099c48dc9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca367a3b7a23f96d2149f3f14b908f099c48dc9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5acb467894053cb0342eb6ded4d162b4a6912483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5acb467894053cb0342eb6ded4d162b4a6912483", "html_url": "https://github.com/rust-lang/rust/commit/5acb467894053cb0342eb6ded4d162b4a6912483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5acb467894053cb0342eb6ded4d162b4a6912483/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd956a191f8cb32573be7a78139ad322051e949e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd956a191f8cb32573be7a78139ad322051e949e", "html_url": "https://github.com/rust-lang/rust/commit/cd956a191f8cb32573be7a78139ad322051e949e"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "25b64301c77d8478a95f3899af5561b6c2dae01a", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5acb467894053cb0342eb6ded4d162b4a6912483/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acb467894053cb0342eb6ded4d162b4a6912483/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=5acb467894053cb0342eb6ded4d162b4a6912483", "patch": "@@ -9,15 +9,15 @@ mod ast_src;\n \n use anyhow::Context;\n use std::{\n-    env, fs,\n+    env,\n     io::Write,\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n \n use crate::{\n     codegen::Mode,\n-    not_bash::{fs2, pushd, run},\n+    not_bash::{fs2, pushd, rm_rf, run},\n };\n \n pub use anyhow::Result;\n@@ -139,7 +139,7 @@ pub fn run_pre_cache() -> Result<()> {\n         }\n     }\n \n-    fs::remove_file(\"./target/.rustc_info.json\")?;\n+    fs2::remove_file(\"./target/.rustc_info.json\")?;\n     let to_delete = [\"ra_\", \"heavy_test\"];\n     for &dir in [\"./target/debug/deps\", \"target/debug/.fingerprint\"].iter() {\n         for entry in Path::new(dir).read_dir()? {\n@@ -153,11 +153,6 @@ pub fn run_pre_cache() -> Result<()> {\n     Ok(())\n }\n \n-fn rm_rf(path: &Path) -> Result<()> {\n-    if path.is_file() { fs::remove_file(path) } else { fs::remove_dir_all(path) }\n-        .with_context(|| format!(\"failed to remove {:?}\", path))\n-}\n-\n pub fn run_release(dry_run: bool) -> Result<()> {\n     if !dry_run {\n         run!(\"git switch release\")?;"}, {"sha": "3e30e7279ff4a75bc79e925c44cf7c646de358bb", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5acb467894053cb0342eb6ded4d162b4a6912483/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5acb467894053cb0342eb6ded4d162b4a6912483/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=5acb467894053cb0342eb6ded4d162b4a6912483", "patch": "@@ -4,7 +4,7 @@ use std::{\n     env,\n     ffi::OsStr,\n     fs,\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n \n@@ -31,6 +31,16 @@ pub mod fs2 {\n         fs::copy(from, to)\n             .with_context(|| format!(\"Failed to copy {} to {}\", from.display(), to.display()))\n     }\n+\n+    pub fn remove_file<P: AsRef<Path>>(path: P) -> Result<()> {\n+        let path = path.as_ref();\n+        fs::remove_file(path).with_context(|| format!(\"Failed to remove file {}\", path.display()))\n+    }\n+\n+    pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> Result<()> {\n+        let path = path.as_ref();\n+        fs::remove_dir_all(path).with_context(|| format!(\"Failed to remove dir {}\", path.display()))\n+    }\n }\n \n macro_rules! _run {\n@@ -64,6 +74,15 @@ pub fn rm(glob: &str) -> Result<()> {\n     Ok(())\n }\n \n+pub fn rm_rf(path: impl AsRef<Path>) -> Result<()> {\n+    let path = path.as_ref();\n+    if path.is_file() {\n+        fs2::remove_file(path)\n+    } else {\n+        fs2::remove_dir_all(path)\n+    }\n+}\n+\n pub fn ls(glob: &str) -> Result<Vec<PathBuf>> {\n     let cwd = Env::with(|env| env.cwd());\n     let mut res = Vec::new();"}]}