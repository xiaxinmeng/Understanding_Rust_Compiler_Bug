{"sha": "e07aecde4896c3752256eb8baded936b07fee4d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwN2FlY2RlNDg5NmMzNzUyMjU2ZWI4YmFkZWQ5MzZiMDdmZWU0ZDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-30T05:08:54Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-30T15:39:18Z"}, "message": "Make make_clone_call take a Place argument", "tree": {"sha": "0657cfb545b2cc5641c2649eabdbae3255fafdd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0657cfb545b2cc5641c2649eabdbae3255fafdd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07aecde4896c3752256eb8baded936b07fee4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07aecde4896c3752256eb8baded936b07fee4d0", "html_url": "https://github.com/rust-lang/rust/commit/e07aecde4896c3752256eb8baded936b07fee4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07aecde4896c3752256eb8baded936b07fee4d0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def3269a71be2e737cad27418a3dad9f5bd6cd32", "url": "https://api.github.com/repos/rust-lang/rust/commits/def3269a71be2e737cad27418a3dad9f5bd6cd32", "html_url": "https://github.com/rust-lang/rust/commit/def3269a71be2e737cad27418a3dad9f5bd6cd32"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "26825eabb3e7deb7c576c817e18c52f97c0dacc9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e07aecde4896c3752256eb8baded936b07fee4d0/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07aecde4896c3752256eb8baded936b07fee4d0/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e07aecde4896c3752256eb8baded936b07fee4d0", "patch": "@@ -407,8 +407,9 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         rcvr_field: Place<'tcx>,\n         next: BasicBlock,\n-        cleanup: BasicBlock\n-    ) -> Place<'tcx> {\n+        cleanup: BasicBlock,\n+        place: Place<'tcx>\n+    ) {\n         let tcx = self.tcx;\n \n         let substs = Substs::for_item(\n@@ -439,8 +440,6 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             })\n         );\n \n-        let loc = self.make_place(Mutability::Not, ty);\n-\n         // `let ref_loc: &ty = &rcvr_field;`\n         let statement = self.make_statement(\n             StatementKind::Assign(\n@@ -453,11 +452,9 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         self.block(vec![statement], TerminatorKind::Call {\n             func,\n             args: vec![Operand::Move(ref_loc)],\n-            destination: Some((loc.clone(), next)),\n+            destination: Some((place, next)),\n             cleanup: Some(cleanup),\n         }, false);\n-\n-        loc\n     }\n \n     fn loop_header(\n@@ -540,7 +537,9 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         // `let cloned = Clone::clone(rcvr[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n         let rcvr_field = rcvr.clone().index(beg);\n-        let cloned = self.make_clone_call(ty, rcvr_field, BasicBlock::new(3), BasicBlock::new(5));\n+        let cloned = self.make_place(Mutability::Not, ty);\n+        self.make_clone_call(ty, rcvr_field, BasicBlock::new(3),\n+                             BasicBlock::new(5), cloned.clone());\n \n         // BB #3\n         // `ret[beg] = cloned;`\n@@ -638,16 +637,18 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         for (i, ity) in tys.iter().enumerate() {\n             let rcvr_field = rcvr.clone().field(Field::new(i), *ity);\n \n+            let place = self.make_place(Mutability::Not, ity);\n+            returns.push(place.clone());\n+\n             // BB #(2i)\n             // `returns[i] = Clone::clone(&rcvr.i);`\n             // Goto #(2i + 2) if ok, #(2i + 1) if unwinding happens.\n-            returns.push(\n-                self.make_clone_call(\n-                    *ity,\n-                    rcvr_field,\n-                    BasicBlock::new(2 * i + 2),\n-                    BasicBlock::new(2 * i + 1),\n-                )\n+            self.make_clone_call(\n+                *ity,\n+                rcvr_field,\n+                BasicBlock::new(2 * i + 2),\n+                BasicBlock::new(2 * i + 1),\n+                place\n             );\n \n             // BB #(2i + 1) (cleanup)"}]}