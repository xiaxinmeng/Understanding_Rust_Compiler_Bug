{"sha": "ffd6ee0730f599de4765464f208d1c0cc3dcdfbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZDZlZTA3MzBmNTk5ZGU0NzY1NDY0ZjIwOGQxYzBjYzNkY2RmYmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-11T05:25:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-11T17:15:07Z"}, "message": "Fill out some of the run-pass/binops tests\n\nUn-XFAIL, and just comment out and add a FIXME to the two cases that fail on\nlinux.\n\nCloses #577. This still doesn't compare <, >, etc for channels, ports and\ntasks, but since they use pointer equality, that's a bit difficult to set up.", "tree": {"sha": "b1b91e4a85f4764aba39e2bd6ddbc5f3abb62630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b91e4a85f4764aba39e2bd6ddbc5f3abb62630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffd6ee0730f599de4765464f208d1c0cc3dcdfbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd6ee0730f599de4765464f208d1c0cc3dcdfbc", "html_url": "https://github.com/rust-lang/rust/commit/ffd6ee0730f599de4765464f208d1c0cc3dcdfbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffd6ee0730f599de4765464f208d1c0cc3dcdfbc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ceb41cc3939b44fa7fc7c2abe4d1bd88dac809", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ceb41cc3939b44fa7fc7c2abe4d1bd88dac809", "html_url": "https://github.com/rust-lang/rust/commit/29ceb41cc3939b44fa7fc7c2abe4d1bd88dac809"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "87f6f8a2f9f29585bad8e8a5d7f6390d844e52b8", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ffd6ee0730f599de4765464f208d1c0cc3dcdfbc/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffd6ee0730f599de4765464f208d1c0cc3dcdfbc/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=ffd6ee0730f599de4765464f208d1c0cc3dcdfbc", "patch": "@@ -1,10 +1,8 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n-\n // Binop corner cases\n \n+use std;\n+import std::unsafe::reinterpret_cast;\n+\n fn test_nil() {\n     assert (() == ());\n     assert (!(() != ()));\n@@ -65,20 +63,17 @@ fn test_port() {\n     let p1: port[int] = port();\n     let p2: port[int] = port();\n \n-    // FIXME (#577) comparison of ports\n-    // assert (p1 != p2);\n-    // assert !(p1 < p2);\n-    // etc\n+    assert p1 == p1;\n+    assert p1 != p2;\n }\n \n fn test_chan() {\n     let p: port[int] = port();\n     let ch1 = chan(p);\n     let ch2 = chan(p);\n \n-    // FIXME (#577) comparison of channels\n-    // assert (ch1 != ch2);\n-    // etc\n+    assert ch1 == ch1;\n+    assert ch1 != ch2;\n }\n \n fn test_ptr() {\n@@ -90,8 +85,9 @@ fn test_task() {\n     fn f() { }\n     let t1 = spawn f();\n     let t2 = spawn f();\n-    // FIXME (#577) comparison of tasks\n-    //assert t1 != t2;\n+\n+    assert t1 == t1;\n+    assert t1 != t2;\n }\n \n fn test_fn() {\n@@ -117,21 +113,26 @@ fn test_fn() {\n \n native \"rust\" mod native_mod = \"\" {\n     fn str_byte_len(s: str) -> vec[u8];\n-    fn str_alloc(n_bytes: uint) -> str;\n+    // This isn't actually the signature of str_alloc, but since\n+    // we're not calling it that shouldn't matter\n+    fn str_alloc(s: str) -> vec[u8];\n }\n \n // FIXME: comparison of native fns\n fn test_native_fn() {\n-    /*assert (native_mod::str_byte_len == native_mod::str_byte_len);\n-      assert (native_mod::str_byte_len != native_mod::str_alloc);*/\n+    assert (native_mod::str_byte_len == native_mod::str_byte_len);\n+    assert (native_mod::str_byte_len != native_mod::str_alloc);\n }\n \n fn test_obj() {\n     let o1 = obj () {  };\n     let o2 = obj () {  };\n \n-    assert (o1 != o2);\n-    assert (!(o1 == o2));\n+    assert (o1 == o1);\n+\n+    // FIXME (#815): This doesn't work on linux only. Wierd.\n+    //assert (o1 != o2);\n+    //assert (!(o1 == o2));\n \n     obj constr1(i: int) { }\n     obj constr2(i: int) { }"}]}