{"sha": "add4434ee37d8ee87df63852cf86f02d4c3992a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDQ0MzRlZTM3ZDhlZTg3ZGY2Mzg1MmNmODZmMDJkNGMzOTkyYTE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-04-02T07:28:08Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-04-02T07:28:08Z"}, "message": "Support non-unicode paths for dogfood test", "tree": {"sha": "fd99d6ed2578a68ca3fd36c75630f99cb351d678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd99d6ed2578a68ca3fd36c75630f99cb351d678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add4434ee37d8ee87df63852cf86f02d4c3992a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add4434ee37d8ee87df63852cf86f02d4c3992a1", "html_url": "https://github.com/rust-lang/rust/commit/add4434ee37d8ee87df63852cf86f02d4c3992a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add4434ee37d8ee87df63852cf86f02d4c3992a1/comments", "author": null, "committer": null, "parents": [{"sha": "e91404bcc3908f7ff4ea82003cd21230e4d34acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91404bcc3908f7ff4ea82003cd21230e4d34acd", "html_url": "https://github.com/rust-lang/rust/commit/e91404bcc3908f7ff4ea82003cd21230e4d34acd"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "aac5e97f3114cd6507258143de4a980afb99501e", "filename": "src/main.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/add4434ee37d8ee87df63852cf86f02d4c3992a1/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add4434ee37d8ee87df63852cf86f02d4c3992a1/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=add4434ee37d8ee87df63852cf86f02d4c3992a1", "patch": "@@ -78,26 +78,29 @@ where\n         path.set_extension(\"exe\");\n     }\n \n-    let mut extra_envs = vec![];\n-    if std::env::var(\"CLIPPY_DOGFOOD\").is_ok() {\n-        let target_dir = std::env::var(\"CARGO_MANIFEST_DIR\")\n-            .map(|m| {\n-                std::path::PathBuf::from(m)\n-                    .join(\"target\")\n-                    .join(\"dogfood\")\n-                    .to_string_lossy()\n-                    .into_owned()\n-            })\n-            .unwrap_or_else(|_| \"clippy_dogfood\".to_string());\n-\n-        extra_envs.push((\"CARGO_TARGET_DIR\", target_dir));\n-    };\n+    let target_dir = std::env::var_os(\"CLIPPY_DOGFOOD\")\n+        .map(|_| {\n+            std::env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n+                || {\n+                    let mut fallback = std::ffi::OsString::new();\n+                    fallback.push(\"clippy_dogfood\");\n+                    fallback\n+                },\n+                |d| {\n+                    std::path::PathBuf::from(d)\n+                        .join(\"target\")\n+                        .join(\"dogfood\")\n+                        .into_os_string()\n+                },\n+            )\n+        })\n+        .map(|p| (\"CARGO_TARGET_DIR\", p));\n \n     let exit_status = std::process::Command::new(\"cargo\")\n         .args(&args)\n         .env(\"RUSTC_WRAPPER\", path)\n         .env(\"CLIPPY_ARGS\", clippy_args)\n-        .envs(extra_envs)\n+        .envs(target_dir)\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()"}]}