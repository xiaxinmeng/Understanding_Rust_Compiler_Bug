{"sha": "92665358cd98913e3fef8294e1889cc0bb919e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjY1MzU4Y2Q5ODkxM2UzZmVmODI5NGUxODg5Y2MwYmI5MTllM2Y=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-05T15:56:10Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-05T15:56:10Z"}, "message": "Rename ImplItem to AssocItem", "tree": {"sha": "0c95a20510f832ec5f208a1ede39f8aad8ffcd86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c95a20510f832ec5f208a1ede39f8aad8ffcd86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92665358cd98913e3fef8294e1889cc0bb919e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92665358cd98913e3fef8294e1889cc0bb919e3f", "html_url": "https://github.com/rust-lang/rust/commit/92665358cd98913e3fef8294e1889cc0bb919e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92665358cd98913e3fef8294e1889cc0bb919e3f/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "url": "https://api.github.com/repos/rust-lang/rust/commits/756e91732b7a92d9156f5c1d8ffcaf5155cf4680", "html_url": "https://github.com/rust-lang/rust/commit/756e91732b7a92d9156f5c1d8ffcaf5155cf4680"}], "stats": {"total": 160, "additions": 83, "deletions": 77}, "files": [{"sha": "e47feda71f2c8f8af36a0c2826dab42c212b09b1", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n \n use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n-    utils::{get_missing_impl_items, resolve_target_trait},\n+    utils::{get_missing_assoc_items, resolve_target_trait},\n     Assist, AssistCtx, AssistId,\n };\n \n@@ -112,25 +112,25 @@ fn add_missing_impl_members_inner(\n \n     let trait_ = resolve_target_trait(&ctx.sema, &impl_node)?;\n \n-    let def_name = |item: &ast::ImplItem| -> Option<SmolStr> {\n+    let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n         match item {\n-            ast::ImplItem::FnDef(def) => def.name(),\n-            ast::ImplItem::TypeAliasDef(def) => def.name(),\n-            ast::ImplItem::ConstDef(def) => def.name(),\n+            ast::AssocItem::FnDef(def) => def.name(),\n+            ast::AssocItem::TypeAliasDef(def) => def.name(),\n+            ast::AssocItem::ConstDef(def) => def.name(),\n         }\n         .map(|it| it.text().clone())\n     };\n \n-    let missing_items = get_missing_impl_items(&ctx.sema, &impl_node)\n+    let missing_items = get_missing_assoc_items(&ctx.sema, &impl_node)\n         .iter()\n         .map(|i| match i {\n-            hir::AssocItem::Function(i) => ast::ImplItem::FnDef(i.source(ctx.db).value),\n-            hir::AssocItem::TypeAlias(i) => ast::ImplItem::TypeAliasDef(i.source(ctx.db).value),\n-            hir::AssocItem::Const(i) => ast::ImplItem::ConstDef(i.source(ctx.db).value),\n+            hir::AssocItem::Function(i) => ast::AssocItem::FnDef(i.source(ctx.db).value),\n+            hir::AssocItem::TypeAlias(i) => ast::AssocItem::TypeAliasDef(i.source(ctx.db).value),\n+            hir::AssocItem::Const(i) => ast::AssocItem::ConstDef(i.source(ctx.db).value),\n         })\n         .filter(|t| def_name(&t).is_some())\n         .filter(|t| match t {\n-            ast::ImplItem::FnDef(def) => match mode {\n+            ast::AssocItem::FnDef(def) => match mode {\n                 AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n                 AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n             },\n@@ -145,7 +145,7 @@ fn add_missing_impl_members_inner(\n     let sema = ctx.sema;\n \n     ctx.add_assist(AssistId(assist_id), label, |edit| {\n-        let n_existing_items = impl_item_list.impl_items().count();\n+        let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = sema.scope_for_def(trait_);\n         let target_scope = sema.scope(impl_item_list.syntax());\n         let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n@@ -154,13 +154,13 @@ fn add_missing_impl_members_inner(\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))\n             .map(|it| match it {\n-                ast::ImplItem::FnDef(def) => ast::ImplItem::FnDef(add_body(def)),\n+                ast::AssocItem::FnDef(def) => ast::AssocItem::FnDef(add_body(def)),\n                 _ => it,\n             })\n             .map(|it| edit::remove_attrs_and_docs(&it));\n         let new_impl_item_list = impl_item_list.append_items(items);\n         let cursor_position = {\n-            let first_new_item = new_impl_item_list.impl_items().nth(n_existing_items).unwrap();\n+            let first_new_item = new_impl_item_list.assoc_items().nth(n_existing_items).unwrap();\n             first_new_item.syntax().text_range().start()\n         };\n "}, {"sha": "e8a36c7de99bee6287f7db88f0f8741c1b76ef4c", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -162,8 +162,8 @@ fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<a\n \n fn has_new_fn(imp: &ast::ImplDef) -> bool {\n     if let Some(il) = imp.item_list() {\n-        for item in il.impl_items() {\n-            if let ast::ImplItem::FnDef(f) = item {\n+        for item in il.assoc_items() {\n+            if let ast::AssocItem::FnDef(f) = item {\n                 if let Some(name) = f.name() {\n                     if name.text().eq_ignore_ascii_case(\"new\") {\n                         return true;"}, {"sha": "2f15a3f1506499591b252521582bca9d796c4b1b", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::FxHashSet;\n \n pub(crate) use insert_use::insert_use_statement;\n \n-pub fn get_missing_impl_items(\n+pub fn get_missing_assoc_items(\n     sema: &Semantics<RootDatabase>,\n     impl_def: &ast::ImplDef,\n ) -> Vec<hir::AssocItem> {\n@@ -23,21 +23,21 @@ pub fn get_missing_impl_items(\n     let mut impl_type = FxHashSet::default();\n \n     if let Some(item_list) = impl_def.item_list() {\n-        for item in item_list.impl_items() {\n+        for item in item_list.assoc_items() {\n             match item {\n-                ast::ImplItem::FnDef(f) => {\n+                ast::AssocItem::FnDef(f) => {\n                     if let Some(n) = f.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n \n-                ast::ImplItem::TypeAliasDef(t) => {\n+                ast::AssocItem::TypeAliasDef(t) => {\n                     if let Some(n) = t.name() {\n                         impl_type.insert(n.syntax().to_string());\n                     }\n                 }\n \n-                ast::ImplItem::ConstDef(c) => {\n+                ast::AssocItem::ConstDef(c) => {\n                     if let Some(n) = c.name() {\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }"}, {"sha": "5f480c3040d79cc8def014f8b9754669a6d26bd3", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -1211,7 +1211,7 @@ impl Type {\n \n     // This would be nicer if it just returned an iterator, but that runs into\n     // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n-    pub fn iterate_impl_items<T>(\n+    pub fn iterate_assoc_items<T>(\n         self,\n         db: &dyn HirDatabase,\n         krate: Crate,"}, {"sha": "e7eb2bb1194b0f3bbf5bfac374f42bf7c387af32", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -9,7 +9,7 @@ use hir_expand::{\n };\n use ra_prof::profile;\n use ra_syntax::ast::{\n-    self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner, TypeBoundsOwner,\n+    self, AssocItem, AstNode, ModuleItemOwner, NameOwner, TypeAscriptionOwner, TypeBoundsOwner,\n     VisibilityOwner,\n };\n \n@@ -164,7 +164,7 @@ impl TraitData {\n             items.extend(collect_items(\n                 db,\n                 &mut expander,\n-                item_list.impl_items(),\n+                item_list.assoc_items(),\n                 src.file_id,\n                 container,\n             ));\n@@ -219,7 +219,7 @@ impl ImplData {\n         if let Some(item_list) = src.value.item_list() {\n             let mut expander = Expander::new(db, impl_loc.ast_id.file_id, module_id);\n             items.extend(\n-                collect_items(db, &mut expander, item_list.impl_items(), src.file_id, container)\n+                collect_items(db, &mut expander, item_list.assoc_items(), src.file_id, container)\n                     .into_iter()\n                     .map(|(_, item)| item),\n             );\n@@ -304,7 +304,7 @@ fn collect_items_in_macro(\n         let mut res = collect_items(\n             db,\n             expander,\n-            items.value.items().filter_map(|it| ImplItem::cast(it.syntax().clone())),\n+            items.value.items().filter_map(|it| AssocItem::cast(it.syntax().clone())),\n             items.file_id,\n             container,\n         );\n@@ -325,15 +325,15 @@ fn collect_items_in_macro(\n fn collect_items(\n     db: &dyn DefDatabase,\n     expander: &mut Expander,\n-    impl_items: impl Iterator<Item = ImplItem>,\n+    assoc_items: impl Iterator<Item = AssocItem>,\n     file_id: crate::HirFileId,\n     container: AssocContainerId,\n ) -> Vec<(Name, AssocItemId)> {\n     let items = db.ast_id_map(file_id);\n \n-    impl_items\n+    assoc_items\n         .filter_map(|item_node| match item_node {\n-            ast::ImplItem::FnDef(it) => {\n+            ast::AssocItem::FnDef(it) => {\n                 let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                 if !expander.is_cfg_enabled(&it) {\n                     return None;\n@@ -342,13 +342,13 @@ fn collect_items(\n                     .intern(db);\n                 Some((name, def.into()))\n             }\n-            ast::ImplItem::ConstDef(it) => {\n+            ast::AssocItem::ConstDef(it) => {\n                 let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                 let def = ConstLoc { container, ast_id: AstId::new(file_id, items.ast_id(&it)) }\n                     .intern(db);\n                 Some((name, def.into()))\n             }\n-            ast::ImplItem::TypeAliasDef(it) => {\n+            ast::AssocItem::TypeAliasDef(it) => {\n                 let name = it.name().map_or_else(Name::missing, |it| it.as_name());\n                 let def =\n                     TypeAliasLoc { container, ast_id: AstId::new(file_id, items.ast_id(&it)) }"}, {"sha": "07398ddcc57ee066fcec7c05973b2535ff588041", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -269,7 +269,7 @@ fn test() { S.foo()<|>; }\n }\n \n #[test]\n-fn infer_impl_items_generated_by_macros() {\n+fn infer_assoc_items_generated_by_macros() {\n     let t = type_at(\n         r#\"\n //- /main.rs\n@@ -288,7 +288,7 @@ fn test() { S.foo()<|>; }\n }\n \n #[test]\n-fn infer_impl_items_generated_by_macros_chain() {\n+fn infer_assoc_items_generated_by_macros_chain() {\n     let t = type_at(\n         r#\"\n //- /main.rs"}, {"sha": "7fcd2252596463380d8d0739791a9cdc9a1578f5", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -84,7 +84,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 });\n \n                 // Iterate assoc types separately\n-                ty.iterate_impl_items(ctx.db, krate, |item| {\n+                ty.iterate_assoc_items(ctx.db, krate, |item| {\n                     if context_module.map_or(false, |m| !item.is_visible_from(ctx.db, m)) {\n                         return None;\n                     }"}, {"sha": "039df03e0547b3816d2a732e69deb788647f5a96", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -32,7 +32,7 @@\n //! ```\n \n use hir::{self, Docs, HasSource};\n-use ra_assists::utils::get_missing_impl_items;\n+use ra_assists::utils::get_missing_assoc_items;\n use ra_syntax::{\n     ast::{self, edit, ImplDef},\n     AstNode, SyntaxKind, SyntaxNode, TextRange, T,\n@@ -50,7 +50,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n     if let Some((trigger, impl_def)) = completion_match(ctx) {\n         match trigger.kind() {\n             SyntaxKind::NAME_REF => {\n-                get_missing_impl_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n+                get_missing_assoc_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n                     hir::AssocItem::Function(fn_item) => {\n                         add_function_impl(&trigger, acc, ctx, &fn_item)\n                     }\n@@ -64,34 +64,40 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n             }\n \n             SyntaxKind::FN_DEF => {\n-                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n-                    |item| match item {\n-                        hir::AssocItem::Function(fn_item) => Some(fn_item),\n-                        _ => None,\n-                    },\n-                ) {\n+                for missing_fn in\n+                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::Function(fn_item) => Some(fn_item),\n+                            _ => None,\n+                        }\n+                    })\n+                {\n                     add_function_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n             SyntaxKind::TYPE_ALIAS_DEF => {\n-                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n-                    |item| match item {\n-                        hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n-                        _ => None,\n-                    },\n-                ) {\n+                for missing_fn in\n+                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n+                            _ => None,\n+                        }\n+                    })\n+                {\n                     add_type_alias_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n             SyntaxKind::CONST_DEF => {\n-                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n-                    |item| match item {\n-                        hir::AssocItem::Const(const_item) => Some(const_item),\n-                        _ => None,\n-                    },\n-                ) {\n+                for missing_fn in\n+                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n+                        match item {\n+                            hir::AssocItem::Const(const_item) => Some(const_item),\n+                            _ => None,\n+                        }\n+                    })\n+                {\n                     add_const_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }"}, {"sha": "fc4133a6753446ea09e959d57e0492498135cc21", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -63,7 +63,7 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n // * Items(SmallVec<[P<ast::Item>; 1]>)     -> token_tree_to_items\n //\n // * TraitItems(SmallVec<[ast::TraitItem; 1]>)\n-// * ImplItems(SmallVec<[ast::ImplItem; 1]>)\n+// * AssocItems(SmallVec<[ast::AssocItem; 1]>)\n // * ForeignItems(SmallVec<[ast::ForeignItem; 1]>\n \n pub fn token_tree_to_syntax_node("}, {"sha": "3e6dd6061cd66331ffa5e60c46ae43d433fe2d7b", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -79,7 +79,7 @@ where\n \n impl ast::ItemList {\n     #[must_use]\n-    pub fn append_items(&self, items: impl IntoIterator<Item = ast::ImplItem>) -> ast::ItemList {\n+    pub fn append_items(&self, items: impl IntoIterator<Item = ast::AssocItem>) -> ast::ItemList {\n         let mut res = self.clone();\n         if !self.syntax().text().contains_char('\\n') {\n             res = make_multiline(res);\n@@ -89,8 +89,8 @@ impl ast::ItemList {\n     }\n \n     #[must_use]\n-    pub fn append_item(&self, item: ast::ImplItem) -> ast::ItemList {\n-        let (indent, position) = match self.impl_items().last() {\n+    pub fn append_item(&self, item: ast::AssocItem) -> ast::ItemList {\n+        let (indent, position) = match self.assoc_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),\n                 InsertPosition::After(it.syntax().clone().into()),"}, {"sha": "b00c156081e4b7aeaf2b2bc09f210cff282a6a22", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -196,7 +196,7 @@ pub struct ItemList {\n impl ast::ModuleItemOwner for ItemList {}\n impl ItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn impl_items(&self) -> AstChildren<ImplItem> { support::children(&self.syntax) }\n+    pub fn assoc_items(&self) -> AstChildren<AssocItem> { support::children(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n \n@@ -1429,13 +1429,13 @@ impl ast::AttrsOwner for ModuleItem {}\n impl ast::VisibilityOwner for ModuleItem {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum ImplItem {\n+pub enum AssocItem {\n     FnDef(FnDef),\n     TypeAliasDef(TypeAliasDef),\n     ConstDef(ConstDef),\n }\n-impl ast::NameOwner for ImplItem {}\n-impl ast::AttrsOwner for ImplItem {}\n+impl ast::NameOwner for AssocItem {}\n+impl ast::AttrsOwner for AssocItem {}\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n@@ -3167,16 +3167,16 @@ impl AstNode for ModuleItem {\n         }\n     }\n }\n-impl From<FnDef> for ImplItem {\n-    fn from(node: FnDef) -> ImplItem { ImplItem::FnDef(node) }\n+impl From<FnDef> for AssocItem {\n+    fn from(node: FnDef) -> AssocItem { AssocItem::FnDef(node) }\n }\n-impl From<TypeAliasDef> for ImplItem {\n-    fn from(node: TypeAliasDef) -> ImplItem { ImplItem::TypeAliasDef(node) }\n+impl From<TypeAliasDef> for AssocItem {\n+    fn from(node: TypeAliasDef) -> AssocItem { AssocItem::TypeAliasDef(node) }\n }\n-impl From<ConstDef> for ImplItem {\n-    fn from(node: ConstDef) -> ImplItem { ImplItem::ConstDef(node) }\n+impl From<ConstDef> for AssocItem {\n+    fn from(node: ConstDef) -> AssocItem { AssocItem::ConstDef(node) }\n }\n-impl AstNode for ImplItem {\n+impl AstNode for AssocItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             FN_DEF | TYPE_ALIAS_DEF | CONST_DEF => true,\n@@ -3185,18 +3185,18 @@ impl AstNode for ImplItem {\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            FN_DEF => ImplItem::FnDef(FnDef { syntax }),\n-            TYPE_ALIAS_DEF => ImplItem::TypeAliasDef(TypeAliasDef { syntax }),\n-            CONST_DEF => ImplItem::ConstDef(ConstDef { syntax }),\n+            FN_DEF => AssocItem::FnDef(FnDef { syntax }),\n+            TYPE_ALIAS_DEF => AssocItem::TypeAliasDef(TypeAliasDef { syntax }),\n+            CONST_DEF => AssocItem::ConstDef(ConstDef { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            ImplItem::FnDef(it) => &it.syntax,\n-            ImplItem::TypeAliasDef(it) => &it.syntax,\n-            ImplItem::ConstDef(it) => &it.syntax,\n+            AssocItem::FnDef(it) => &it.syntax,\n+            AssocItem::TypeAliasDef(it) => &it.syntax,\n+            AssocItem::ConstDef(it) => &it.syntax,\n         }\n     }\n }\n@@ -3641,7 +3641,7 @@ impl std::fmt::Display for ModuleItem {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ImplItem {\n+impl std::fmt::Display for AssocItem {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "fe3eb85de19ab3a64b971ff7e655b06b034efe38", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92665358cd98913e3fef8294e1889cc0bb919e3f/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92665358cd98913e3fef8294e1889cc0bb919e3f/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=92665358cd98913e3fef8294e1889cc0bb919e3f", "patch": "@@ -373,7 +373,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n \n         struct ItemList: ModuleItemOwner {\n             T!['{'],\n-            impl_items: [ImplItem],\n+            assoc_items: [AssocItem],\n             T!['}']\n         }\n \n@@ -685,7 +685,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         /* impl blocks can also contain MacroCall */\n-        enum ImplItem: NameOwner, AttrsOwner {\n+        enum AssocItem: NameOwner, AttrsOwner {\n             FnDef, TypeAliasDef, ConstDef\n         }\n "}]}