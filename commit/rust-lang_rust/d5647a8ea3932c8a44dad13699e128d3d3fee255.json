{"sha": "d5647a8ea3932c8a44dad13699e128d3d3fee255", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjQ3YThlYTM5MzJjOGE0NGRhZDEzNjk5ZTEyOGQzZDNmZWUyNTU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-29T05:31:50Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@palantir.com", "date": "2014-09-30T19:52:00Z"}, "message": "Fix libstd", "tree": {"sha": "d3dc48b0810c66407d1c620d741920d295f96743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3dc48b0810c66407d1c620d741920d295f96743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5647a8ea3932c8a44dad13699e128d3d3fee255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5647a8ea3932c8a44dad13699e128d3d3fee255", "html_url": "https://github.com/rust-lang/rust/commit/d5647a8ea3932c8a44dad13699e128d3d3fee255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5647a8ea3932c8a44dad13699e128d3d3fee255/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0c7b682f1675e39085f1f0f928a37364bab9c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0c7b682f1675e39085f1f0f928a37364bab9c7", "html_url": "https://github.com/rust-lang/rust/commit/1e0c7b682f1675e39085f1f0f928a37364bab9c7"}], "stats": {"total": 108, "additions": 52, "deletions": 56}, "files": [{"sha": "bd2bd1ad0904a161fc98a35d96a9416c98435a03", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -154,7 +154,7 @@ impl DynamicLibrary {\n     }\n }\n \n-#[cfg(test, not(target_os = \"ios\"))]\n+#[cfg(all(test, not(target_os = \"ios\")))]\n mod test {\n     use super::*;\n     use prelude::*;\n@@ -189,10 +189,10 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     fn test_errors_do_not_crash() {\n         // Open /dev/null as a library to get an error, and make sure\n         // that only causes an error, and not a crash.\n@@ -204,12 +204,12 @@ mod test {\n     }\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub mod dl {\n \n     use c_str::{CString, ToCStr};"}, {"sha": "ea1dd12f323a7f82a4ac2c1fef803b44e8d2524b", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -123,7 +123,7 @@ fn lookup(hostname: Option<&str>, servname: Option<&str>, hint: Option<Hint>)\n \n // Ignored on android since we cannot give tcp/ip\n // permission without help of apk\n-#[cfg(test, not(target_os = \"android\"))]\n+#[cfg(all(test, not(target_os = \"android\")))]\n mod test {\n     iotest!(fn dns_smoke_test() {\n         let ipaddrs = get_host_addresses(\"localhost\").unwrap();"}, {"sha": "f97e9f4647ba018321fc8f65e85dd9d5ae3fec4a", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -693,7 +693,7 @@ mod tests {\n         drop(p.wait().clone());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn signal_reported_right() {\n         let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -1 $$\").spawn();\n         assert!(p.is_ok());\n@@ -725,7 +725,7 @@ mod tests {\n         assert_eq!(run_output(cmd), \"foobar\\n\".to_string());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn set_cwd_works() {\n         let mut cmd = Command::new(\"/bin/sh\");\n         cmd.arg(\"-c\").arg(\"pwd\")\n@@ -734,7 +734,7 @@ mod tests {\n         assert_eq!(run_output(cmd), \"/\\n\".to_string());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn stdin_works() {\n         let mut p = Command::new(\"/bin/sh\")\n                             .arg(\"-c\").arg(\"read line; echo $line\")\n@@ -759,7 +759,7 @@ mod tests {\n         assert!(Command::new(\"test\").uid(10).spawn().is_err());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn uid_works() {\n         use libc;\n         let mut p = Command::new(\"/bin/sh\")\n@@ -770,7 +770,7 @@ mod tests {\n         assert!(p.wait().unwrap().success());\n     })\n \n-    #[cfg(unix, not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     iotest!(fn uid_to_root_fails() {\n         use libc;\n \n@@ -847,7 +847,7 @@ mod tests {\n         }\n     })\n \n-    #[cfg(unix,not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     pub fn pwd_cmd() -> Command {\n         Command::new(\"pwd\")\n     }\n@@ -897,7 +897,7 @@ mod tests {\n         assert_eq!(parent_stat.unstable.inode, child_stat.unstable.inode);\n     })\n \n-    #[cfg(unix,not(target_os=\"android\"))]\n+    #[cfg(all(unix, not(target_os=\"android\")))]\n     pub fn env_cmd() -> Command {\n         Command::new(\"env\")\n     }"}, {"sha": "79a00e90b40746d8fde0b6a3ce555bb3f17d8130", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -160,7 +160,7 @@ impl Listener {\n     }\n }\n \n-#[cfg(test, unix)]\n+#[cfg(all(test, unix))]\n mod test_unix {\n     use prelude::*;\n     use libc;\n@@ -218,7 +218,7 @@ mod test_unix {\n     }\n }\n \n-#[cfg(test, windows)]\n+#[cfg(all(test, windows))]\n mod test_windows {\n     use super::{User1, Listener};\n     use result::{Ok, Err};"}, {"sha": "d904e657e403b082e61110c71af92c7b60732ca6", "filename": "src/libstd/os.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -653,8 +653,7 @@ pub fn dll_filename(base: &str) -> String {\n /// ```\n pub fn self_exe_name() -> Option<Path> {\n \n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n             use libc::funcs::bsd44::*;\n@@ -680,8 +679,7 @@ pub fn self_exe_name() -> Option<Path> {\n         }\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn load_self() -> Option<Vec<u8>> {\n         use std::io;\n \n@@ -691,8 +689,7 @@ pub fn self_exe_name() -> Option<Path> {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n             use libc::funcs::extra::_NSGetExecutablePath;\n@@ -909,9 +906,9 @@ pub fn change_dir(p: &Path) -> bool {\n #[cfg(unix)]\n /// Returns the platform-specific value of errno\n pub fn errno() -> int {\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\"))]\n     fn errno_location() -> *const c_int {\n         extern {\n             fn __error() -> *const c_int;\n@@ -931,8 +928,7 @@ pub fn errno() -> int {\n         }\n     }\n \n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn errno_location() -> *const c_int {\n         extern {\n             fn __errno_location() -> *const c_int;\n@@ -975,11 +971,11 @@ pub fn error_string(errnum: uint) -> String {\n \n     #[cfg(unix)]\n     fn strerror(errnum: uint) -> String {\n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"ios\")]\n-        #[cfg(target_os = \"android\")]\n-        #[cfg(target_os = \"freebsd\")]\n-        #[cfg(target_os = \"dragonfly\")]\n+        #[cfg(any(target_os = \"macos\",\n+                  target_os = \"ios\",\n+                  target_os = \"android\",\n+                  target_os = \"freebsd\",\n+                  target_os = \"dragonfly\"))]\n         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t)\n                       -> c_int {\n             extern {\n@@ -1180,10 +1176,10 @@ fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     res\n }\n \n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"linux\",\n+          target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n fn real_args_as_bytes() -> Vec<Vec<u8>> {\n     use rt;\n "}, {"sha": "c5b7154ffdb57d00dd5d5eb6f03fb33fc31ccf1d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -13,7 +13,7 @@\n \n pub use self::imp::OsRng;\n \n-#[cfg(unix, not(target_os = \"ios\"))]\n+#[cfg(all(unix, not(target_os = \"ios\")))]\n mod imp {\n     use io::{IoResult, File};\n     use path::Path;"}, {"sha": "33f8713e1a13c9f61fa67856ec89997f4f268cd6", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5647a8ea3932c8a44dad13699e128d3d3fee255/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=d5647a8ea3932c8a44dad13699e128d3d3fee255", "patch": "@@ -253,7 +253,7 @@ mod imp {\n     /// play well with green threads, so while it is extremely nice\n     /// and simple to use it should be used only on iOS devices as the\n     /// only viable option.\n-    #[cfg(target_os = \"ios\", target_arch = \"arm\")]\n+    #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n     #[inline(never)]\n     pub fn write(w: &mut Writer) -> IoResult<()> {\n         use iter::{Iterator, range};\n@@ -284,7 +284,7 @@ mod imp {\n         result::fold(iter, (), |_, _| ())\n     }\n \n-    #[cfg(not(target_os = \"ios\", target_arch = \"arm\"))]\n+    #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     #[inline(never)] // if we know this is a function call, we can skip it when\n                      // tracing\n     pub fn write(w: &mut Writer) -> IoResult<()> {\n@@ -365,8 +365,7 @@ mod imp {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n         use intrinsics;\n         #[repr(C)]\n@@ -391,7 +390,7 @@ mod imp {\n         }\n     }\n \n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"))]\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n     fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n         use collections::Collection;\n         use iter::Iterator;\n@@ -571,25 +570,26 @@ mod imp {\n \n         extern {\n             // No native _Unwind_Backtrace on iOS\n-            #[cfg(not(target_os = \"ios\", target_arch = \"arm\"))]\n+            #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n             pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                                      trace_argument: *mut libc::c_void)\n                         -> _Unwind_Reason_Code;\n \n-            #[cfg(not(target_os = \"android\"),\n-                  not(target_os = \"linux\", target_arch = \"arm\"))]\n+            #[cfg(all(not(target_os = \"android\"),\n+                      not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n             pub fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t;\n-            #[cfg(not(target_os = \"android\"),\n-                  not(target_os = \"linux\", target_arch = \"arm\"))]\n+\n+            #[cfg(all(not(target_os = \"android\"),\n+                      not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n             pub fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n                 -> *mut libc::c_void;\n         }\n \n         // On android, the function _Unwind_GetIP is a macro, and this is the\n         // expansion of the macro. This is all copy/pasted directly from the\n         // header file with the definition of _Unwind_GetIP.\n-        #[cfg(target_os = \"android\")]\n-        #[cfg(target_os = \"linux\", target_arch = \"arm\")]\n+        #[cfg(any(target_os = \"android\",\n+                  all(target_os = \"linux\", target_arch = \"arm\")))]\n         pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n             #[repr(C)]\n             enum _Unwind_VRS_Result {\n@@ -634,8 +634,8 @@ mod imp {\n \n         // This function also doesn't exist on Android or ARM/Linux, so make it\n         // a no-op\n-        #[cfg(target_os = \"android\")]\n-        #[cfg(target_os = \"linux\", target_arch = \"arm\")]\n+        #[cfg(any(target_os = \"android\",\n+                  all(target_os = \"linux\", target_arch = \"arm\")))]\n         pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n             -> *mut libc::c_void\n         {"}]}