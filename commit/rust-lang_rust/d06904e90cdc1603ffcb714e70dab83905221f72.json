{"sha": "d06904e90cdc1603ffcb714e70dab83905221f72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjkwNGU5MGNkYzE2MDNmZmNiNzE0ZTcwZGFiODM5MDUyMjFmNzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T20:48:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T21:12:36Z"}, "message": "Switch to variant-granularity field type inference", "tree": {"sha": "edd220cc84f504072d7154994cdd56a787625b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd220cc84f504072d7154994cdd56a787625b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d06904e90cdc1603ffcb714e70dab83905221f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d06904e90cdc1603ffcb714e70dab83905221f72", "html_url": "https://github.com/rust-lang/rust/commit/d06904e90cdc1603ffcb714e70dab83905221f72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d06904e90cdc1603ffcb714e70dab83905221f72/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16cff3cad931d48a5516b2aec468cfddbed7dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16cff3cad931d48a5516b2aec468cfddbed7dd1", "html_url": "https://github.com/rust-lang/rust/commit/f16cff3cad931d48a5516b2aec468cfddbed7dd1"}], "stats": {"total": 110, "additions": 68, "deletions": 42}, "files": [{"sha": "fc0f7c12fa99191896e7e54199758756afccdc1c", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -85,7 +85,7 @@ impl<ID: ArenaId, T> Arena<ID, T> {\n         self.data.push(value);\n         ID::from_raw(id)\n     }\n-    pub fn iter(&self) -> impl Iterator<Item = (ID, &T)> + ExactSizeIterator {\n+    pub fn iter(&self) -> impl Iterator<Item = (ID, &T)> + ExactSizeIterator + DoubleEndedIterator {\n         self.data.iter().enumerate().map(|(idx, value)| (ID::from_raw(RawId(idx as u32)), value))\n     }\n }"}, {"sha": "3f44a50c4d1f4abc663c0f57ff31756a703ea384", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -305,7 +305,7 @@ impl StructField {\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n-        db.type_for_field(*self)\n+        db.field_types(self.parent.into())[self.id].clone()\n     }\n \n     pub fn parent_def(&self, _db: &impl HirDatabase) -> VariantDef {"}, {"sha": "5084bbacf5370822be3af4ee8011729c6ab92856", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use ra_arena::map::ArenaMap;\n use ra_db::salsa;\n \n use crate::{\n@@ -11,15 +12,19 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Namespace, Substs, Ty, TypableDef,\n         TypeCtor,\n     },\n-    Crate, DefWithBody, GenericDef, ImplBlock, StructField, Trait,\n+    Crate, DefWithBody, GenericDef, ImplBlock, Trait,\n };\n \n-pub use hir_def::db::{\n-    BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n-    DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n-    FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n-    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery,\n-    StaticDataQuery, StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n+pub use hir_def::{\n+    db::{\n+        BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n+        DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n+        FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase,\n+        InternDatabaseStorage, LangItemQuery, ModuleLangItemsQuery, RawItemsQuery,\n+        RawItemsWithSourceMapQuery, StaticDataQuery, StructDataQuery, TraitDataQuery,\n+        TypeAliasDataQuery,\n+    },\n+    LocalStructFieldId, VariantId,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -35,8 +40,8 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::type_for_def)]\n     fn type_for_def(&self, def: TypableDef, ns: Namespace) -> Ty;\n \n-    #[salsa::invoke(crate::ty::type_for_field)]\n-    fn type_for_field(&self, field: StructField) -> Ty;\n+    #[salsa::invoke(crate::ty::field_types_query)]\n+    fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalStructFieldId, Ty>>;\n \n     #[salsa::invoke(crate::ty::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDef) -> FnSig;"}, {"sha": "f62316c1fb4ab82f199a28a32cb18de3cbddbfbf", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -30,8 +30,9 @@ pub(crate) use autoderef::autoderef;\n pub(crate) use infer::{infer_query, InferTy, InferenceResult};\n pub use lower::CallableDef;\n pub(crate) use lower::{\n-    callable_item_sig, generic_defaults_query, generic_predicates_for_param_query,\n-    generic_predicates_query, type_for_def, type_for_field, Namespace, TypableDef,\n+    callable_item_sig, field_types_query, generic_defaults_query,\n+    generic_predicates_for_param_query, generic_predicates_query, type_for_def, Namespace,\n+    TypableDef,\n };\n pub(crate) use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n "}, {"sha": "54765da358e512232322a35029b8a46e12b9c927", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -245,14 +245,17 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 ty_app!(TypeCtor::Adt(Adt::Struct(struct1)), st1),\n                 ty_app!(TypeCtor::Adt(Adt::Struct(struct2)), st2),\n             ) if struct1 == struct2 => {\n-                let fields = struct1.fields(self.db);\n-                let (last_field, prev_fields) = fields.split_last()?;\n+                let field_tys = self.db.field_types(struct1.id.into());\n+                let struct_data = self.db.struct_data(struct1.id.0);\n+\n+                let mut fields = struct_data.variant_data.fields().iter();\n+                let (last_field_id, _data) = fields.next_back()?;\n \n                 // Get the generic parameter involved in the last field.\n                 let unsize_generic_index = {\n                     let mut index = None;\n                     let mut multiple_param = false;\n-                    last_field.ty(self.db).walk(&mut |ty| match ty {\n+                    field_tys[last_field_id].walk(&mut |ty| match ty {\n                         &Ty::Param { idx, .. } => {\n                             if index.is_none() {\n                                 index = Some(idx);\n@@ -271,8 +274,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 // Check other fields do not involve it.\n                 let mut multiple_used = false;\n-                prev_fields.iter().for_each(|field| {\n-                    field.ty(self.db).walk(&mut |ty| match ty {\n+                fields.for_each(|(field_id, _data)| {\n+                    field_tys[field_id].walk(&mut |ty| match ty {\n                         &Ty::Param { idx, .. } if idx == unsize_generic_index => {\n                             multiple_used = true\n                         }"}, {"sha": "663ff9435c8f76c3fb414eeb0ca49ca04056c0d1", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -214,6 +214,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.unify(&ty, &expected.ty);\n \n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n+                let field_types =\n+                    def_id.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n                 for (field_idx, field) in fields.iter().enumerate() {\n                     let field_def = def_id.and_then(|it| match it.field(self.db, &field.name) {\n                         Some(field) => Some(field),\n@@ -228,8 +230,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     if let Some(field_def) = field_def {\n                         self.result.record_field_resolutions.insert(field.expr, field_def);\n                     }\n-                    let field_ty =\n-                        field_def.map_or(Ty::Unknown, |field| field.ty(self.db)).subst(&substs);\n+                    let field_ty = field_def\n+                        .map_or(Ty::Unknown, |it| field_types[it.id].clone())\n+                        .subst(&substs);\n                     self.infer_expr_coerce(field.expr, &Expectation::has_type(field_ty));\n                 }\n                 if let Some(expr) = spread {\n@@ -252,7 +255,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             .and_then(|idx| a_ty.parameters.0.get(idx).cloned()),\n                         TypeCtor::Adt(Adt::Struct(s)) => s.field(self.db, name).map(|field| {\n                             self.write_field_resolution(tgt_expr, field);\n-                            field.ty(self.db).subst(&a_ty.parameters)\n+                            self.db.field_types(s.id.into())[field.id]\n+                                .clone()\n+                                .subst(&a_ty.parameters)\n                         }),\n                         _ => None,\n                     },"}, {"sha": "641d61e87b4ece4239a3887d852c61a9e5218f25", "filename": "crates/ra_hir/src/ty/infer/pat.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpat.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -27,10 +27,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n+        let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n         for (i, &subpat) in subpats.iter().enumerate() {\n             let expected_ty = def\n                 .and_then(|d| d.field(self.db, &Name::new_tuple_field(i)))\n-                .map_or(Ty::Unknown, |field| field.ty(self.db))\n+                .map_or(Ty::Unknown, |field| field_tys[field.id].clone())\n                 .subst(&substs);\n             let expected_ty = self.normalize_associated_types_in(expected_ty);\n             self.infer_pat(subpat, &expected_ty, default_bm);\n@@ -56,10 +57,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n+        let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n         for subpat in subpats {\n             let matching_field = def.and_then(|it| it.field(self.db, &subpat.name));\n-            let expected_ty =\n-                matching_field.map_or(Ty::Unknown, |field| field.ty(self.db)).subst(&substs);\n+            let expected_ty = matching_field\n+                .map_or(Ty::Unknown, |field| field_tys[field.id].clone())\n+                .subst(&substs);\n             let expected_ty = self.normalize_associated_types_in(expected_ty);\n             self.infer_pat(subpat.pat, &expected_ty, default_bm);\n         }"}, {"sha": "a39beb2a089b34fbb014a0a5bb897d2c00cc7dc0", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -14,8 +14,9 @@ use hir_def::{\n     path::{GenericArg, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, GenericDefId,\n+    AdtId, GenericDefId, LocalStructFieldId, VariantId,\n };\n+use ra_arena::map::ArenaMap;\n \n use super::{\n     FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n@@ -29,7 +30,7 @@ use crate::{\n     },\n     util::make_mut_slice,\n     Const, Enum, EnumVariant, Function, GenericDef, ImplBlock, ModuleDef, Path, Static, Struct,\n-    StructField, Trait, TypeAlias, Union, VariantDef,\n+    Trait, TypeAlias, Union,\n };\n \n // FIXME: this is only really used in `type_for_def`, which contains a bunch of\n@@ -549,16 +550,23 @@ pub(crate) fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSi\n     }\n }\n \n-/// Build the type of a specific field of a struct or enum variant.\n-pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n-    let parent_def = field.parent_def(db);\n-    let resolver = match parent_def {\n-        VariantDef::Struct(it) => it.id.resolver(db),\n-        VariantDef::EnumVariant(it) => it.parent.id.resolver(db),\n+/// Build the type of all specific fields of a struct or enum variant.\n+pub(crate) fn field_types_query(\n+    db: &impl HirDatabase,\n+    variant_id: VariantId,\n+) -> Arc<ArenaMap<LocalStructFieldId, Ty>> {\n+    let (resolver, var_data) = match variant_id {\n+        VariantId::StructId(it) => (it.resolver(db), db.struct_data(it.0).variant_data.clone()),\n+        VariantId::EnumVariantId(it) => (\n+            it.parent.resolver(db),\n+            db.enum_data(it.parent).variants[it.local_id].variant_data.clone(),\n+        ),\n     };\n-    let var_data = parent_def.variant_data(db);\n-    let type_ref = &var_data.fields()[field.id].type_ref;\n-    Ty::from_hir(db, &resolver, type_ref)\n+    let mut res = ArenaMap::default();\n+    for (field_id, field_data) in var_data.fields().iter() {\n+        res.insert(field_id, Ty::from_hir(db, &resolver, &field_data.type_ref))\n+    }\n+    Arc::new(res)\n }\n \n /// This query exists only to be used when resolving short-hand associated types"}, {"sha": "e9d56977873ec2e97854b363bc8b458cc264c1e2", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -191,12 +191,6 @@ pub struct EnumVariantId {\n pub struct LocalEnumVariantId(RawId);\n impl_arena_id!(LocalEnumVariantId);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum VariantId {\n-    EnumVariantId(EnumVariantId),\n-    StructId(StructId),\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructFieldId {\n     pub parent: VariantId,\n@@ -437,6 +431,13 @@ impl_froms!(\n     ImplId\n );\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum VariantId {\n+    EnumVariantId(EnumVariantId),\n+    StructId(StructId),\n+}\n+impl_froms!(VariantId: EnumVariantId, StructId);\n+\n trait Intern {\n     type ID;\n     fn intern(self, db: &impl db::DefDatabase) -> Self::ID;"}, {"sha": "0f692460dc7537c860c41c520ff9cad68ff0d1a2", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06904e90cdc1603ffcb714e70dab83905221f72/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=d06904e90cdc1603ffcb714e70dab83905221f72", "patch": "@@ -324,7 +324,7 @@ impl RootDatabase {\n             hir::db::ExprScopesQuery\n             hir::db::InferQuery\n             hir::db::TypeForDefQuery\n-            hir::db::TypeForFieldQuery\n+            hir::db::FieldTypesQuery\n             hir::db::CallableItemSignatureQuery\n             hir::db::GenericPredicatesQuery\n             hir::db::GenericDefaultsQuery"}]}