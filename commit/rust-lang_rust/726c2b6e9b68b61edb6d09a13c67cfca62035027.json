{"sha": "726c2b6e9b68b61edb6d09a13c67cfca62035027", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNmMyYjZlOWI2OGI2MWVkYjZkMDlhMTNjNjdjZmNhNjIwMzUwMjc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-20T16:05:00Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-09-20T16:25:00Z"}, "message": "Don't ICE when a float can't be parsed", "tree": {"sha": "d852bbf7168fc5be800a1f1d409a8afcbd4aaf40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d852bbf7168fc5be800a1f1d409a8afcbd4aaf40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726c2b6e9b68b61edb6d09a13c67cfca62035027", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJX4WMVAAoJEF5CfHlMukXodZEP/3RQwcst9O4xubgyg4iq5AV9\nV9/15yQqIdcY4+9eLz+Vmii/NxlB207x2WBISVB7AZbfJZW2dJU07YST4cn2/2TZ\nMAAtcy0U3M0nFj56v/OUo5XEuXV3qUJVBsLE8nf+rWvtDytT8yOsoNK8/yv/5q3G\nyMKfWHbmBbyLOeKjNYB+yOiRIEC/Me0nBx1qmg66qDDFykqvXAXFsObw4xrCjqs1\niS+AaDrYr0b86EjKQCn5Gwi2MM07N/PQKZjIT0luI/ImjlchOUvbjATdZ1O2R+ua\nHjvPS75ZBHBp/5eYIXpsdFnrcV2ZzpqWfpzKVWfbdhN+BAa5MrGm6d5WmrnT6knP\nPFz3mvIp4YvfceHbqJV+1xUHFPZW1mpfF5EHwt59lG5/t1InPfOK6jkVNpyb8+XZ\nkE/4XBuOsfUFdxSDDwrlPVyrKlBzyAv0kajwpSr5CHhEba8JxwfTTgn3TP1qf3Ni\n/uglFovXis1W9TIy19kQU+0wHlpIo5cBQFdvg+kiSsxcKz8rs7qNlvWL4uoTOIC8\ndl+wlBjRwR1F5aFgVwvGtZfMbruKWU+FP268u/T5WvDgMAHKty2pae3slPG4u5VZ\n728a53M5OFVLQZddKQjNd8IPsWk4o+x+To+m5z3NsoTqoTg+yOw7KrILis25pjd/\n4yC5r8/JMAQwKA+fuU3d\n=WaE1\n-----END PGP SIGNATURE-----", "payload": "tree d852bbf7168fc5be800a1f1d409a8afcbd4aaf40\nparent dd6e3863e5525cb83ad6c02328bd5800119cdd7a\nauthor mcarton <cartonmartin+git@gmail.com> 1474387500 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1474388700 +0200\n\nDon't ICE when a float can't be parsed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726c2b6e9b68b61edb6d09a13c67cfca62035027", "html_url": "https://github.com/rust-lang/rust/commit/726c2b6e9b68b61edb6d09a13c67cfca62035027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726c2b6e9b68b61edb6d09a13c67cfca62035027/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6e3863e5525cb83ad6c02328bd5800119cdd7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6e3863e5525cb83ad6c02328bd5800119cdd7a", "html_url": "https://github.com/rust-lang/rust/commit/dd6e3863e5525cb83ad6c02328bd5800119cdd7a"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "25fe8b8035ae04db880d5b1363c9b120cde25808", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/726c2b6e9b68b61edb6d09a13c67cfca62035027/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726c2b6e9b68b61edb6d09a13c67cfca62035027/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=726c2b6e9b68b61edb6d09a13c67cfca62035027", "patch": "@@ -872,7 +872,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n           debug!(\"const call({:?})\", call_args);\n           eval_const_expr_partial(tcx, &result, ty_hint, Some(&call_args))?\n       },\n-      hir::ExprLit(ref lit) => match lit_to_const(&lit.node, tcx, ety, lit.span) {\n+      hir::ExprLit(ref lit) => match lit_to_const(&lit.node, tcx, ety) {\n           Ok(val) => val,\n           Err(err) => signal!(e, err),\n       },\n@@ -1208,8 +1208,7 @@ fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstVal, ty: ty::Ty)\n \n fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          ty_hint: Option<Ty<'tcx>>,\n-                          span: Span)\n+                          ty_hint: Option<Ty<'tcx>>)\n                           -> Result<ConstVal, ErrKind> {\n     use syntax::ast::*;\n     use syntax::ast::LitIntType::*;\n@@ -1243,21 +1242,22 @@ fn lit_to_const<'a, 'tcx>(lit: &ast::LitKind,\n         },\n \n         LitKind::Float(ref n, fty) => {\n-            Ok(Float(parse_float(n, Some(fty), span)))\n+            parse_float(n, Some(fty)).map(Float)\n         }\n         LitKind::FloatUnsuffixed(ref n) => {\n             let fty_hint = match ty_hint.map(|t| &t.sty) {\n                 Some(&ty::TyFloat(fty)) => Some(fty),\n                 _ => None\n             };\n-            Ok(Float(parse_float(n, fty_hint, span)))\n+            parse_float(n, fty_hint).map(Float)\n         }\n         LitKind::Bool(b) => Ok(Bool(b)),\n         LitKind::Char(c) => Ok(Char(c)),\n     }\n }\n \n-fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>, span: Span) -> ConstFloat {\n+fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>)\n+               -> Result<ConstFloat, ErrKind> {\n     let val = match fty_hint {\n         Some(ast::FloatTy::F32) => num.parse::<f32>().map(F32),\n         Some(ast::FloatTy::F64) => num.parse::<f64>().map(F64),\n@@ -1269,9 +1269,9 @@ fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>, span: Span) -> ConstFl\n             })\n         }\n     };\n-    val.unwrap_or_else(|_| {\n+    val.map_err(|_| {\n         // FIXME(#31407) this is only necessary because float parsing is buggy\n-        span_bug!(span, \"could not evaluate float literal (see issue #31407)\");\n+        UnimplementedConstVal(\"could not evaluate float literal (see issue #31407)\")\n     })\n }\n "}, {"sha": "3304732912332f318ada665ee1f09e1cbd5935dc", "filename": "src/test/compile-fail/issue-31109.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/726c2b6e9b68b61edb6d09a13c67cfca62035027/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726c2b6e9b68b61edb6d09a13c67cfca62035027/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31109.rs?ref=726c2b6e9b68b61edb6d09a13c67cfca62035027", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     // FIXME(#31407) this error should go away, but in the meantime we test that it\n     // is accompanied by a somewhat useful error message.\n     let _: f64 = 1234567890123456789012345678901234567890e-340; //~ ERROR could not evaluate float\n+    //~ ERROR unimplemented constant expression: could not evaluate float literal\n }"}]}