{"sha": "df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjhlNWFjNzNmMjNlMTAwNmI4MTFiZGM1MGI4YzJlZGUwZTBiYmY=", "commit": {"author": {"name": "Erin Power", "email": "erin.power@embark-studios.com", "date": "2021-04-30T13:27:05Z"}, "committer": {"name": "Erin Power", "email": "erin.power@embark-studios.com", "date": "2021-04-30T13:37:19Z"}, "message": "[cg_clif] Fix run_jit from sync", "tree": {"sha": "729a80ad8a02b325e866847340ca6f35c819b017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/729a80ad8a02b325e866847340ca6f35c819b017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf", "html_url": "https://github.com/rust-lang/rust/commit/df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf/comments", "author": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee570b1302b7c30cbd43047384622922eafc6c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee570b1302b7c30cbd43047384622922eafc6c9c", "html_url": "https://github.com/rust-lang/rust/commit/ee570b1302b7c30cbd43047384622922eafc6c9c"}], "stats": {"total": 56, "additions": 5, "deletions": 51}, "files": [{"sha": "53c93f6a9ddca82bbc39e246f253759ca373539a", "filename": "src/driver/jit.rs", "status": "modified", "additions": 5, "deletions": 51, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=df68e5ac73f23e1006b811bdc50b8c2ede0e0bbf", "patch": "@@ -8,6 +8,7 @@ use std::os::raw::{c_char, c_int};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n+use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -138,57 +139,10 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         *lazy_jit_state = Some(JitState { backend_config, jit_module });\n     });\n \n-    let (main_def_id, entry_ty) = tcx.entry_fn(LOCAL_CRATE).unwrap();\n-    let instance = Instance::mono(tcx, main_def_id).polymorphize(tcx);\n-\n-    match entry_ty {\n-        EntryFnType::Main => {\n-            // FIXME set program arguments somehow\n-\n-            let main_sig = Signature {\n-                params: vec![],\n-                returns: vec![],\n-                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-            };\n-            let main_func_id = jit_module\n-                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &main_sig)\n-                .unwrap();\n-            let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n-            CURRENT_MODULE.with(|current_module| {\n-                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n-            });\n-\n-            let f: extern \"C\" fn() = unsafe { ::std::mem::transmute(finalized_main) };\n-            f();\n-            std::process::exit(0);\n-        }\n-        EntryFnType::Start => {\n-            let start_sig = Signature {\n-                params: vec![\n-                    AbiParam::new(jit_module.target_config().pointer_type()),\n-                    AbiParam::new(jit_module.target_config().pointer_type()),\n-                ],\n-                returns: vec![AbiParam::new(\n-                    jit_module.target_config().pointer_type(), /*isize*/\n-                )],\n-                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-            };\n-            let start_func_id = jit_module\n-                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &start_sig)\n-                .unwrap();\n-            let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n-\n-            CURRENT_MODULE.with(|current_module| {\n-                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n-            });\n-\n-            let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-                unsafe { ::std::mem::transmute(finalized_start) };\n-            let ret = f(args.len() as c_int, argv.as_ptr());\n-            std::process::exit(ret);\n-        }\n-    }\n+    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+        unsafe { ::std::mem::transmute(finalized_start) };\n+    let ret = f(args.len() as c_int, argv.as_ptr());\n+    std::process::exit(ret);\n }\n \n #[no_mangle]"}]}