{"sha": "3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZWM0YzgxOTNiYzZkNmQ4ZWE3OThiYWIwMWMzMGI0NmRjODE2M2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-10T21:22:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-10T21:22:14Z"}, "message": "Switch memcpy to memmove since we're willing to compile x = x and such.", "tree": {"sha": "5688d6abc38501179bf909352229107c6c6f15b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5688d6abc38501179bf909352229107c6c6f15b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "html_url": "https://github.com/rust-lang/rust/commit/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2849103f247f608333ca13d71349b4cacebf22dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2849103f247f608333ca13d71349b4cacebf22dc", "html_url": "https://github.com/rust-lang/rust/commit/2849103f247f608333ca13d71349b4cacebf22dc"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "033deed39367aa283421d489a5ed467973245aad", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec4c8193bc6d6d8ea798bab01c30b46dc8163c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3bec4c8193bc6d6d8ea798bab01c30b46dc8163c", "patch": "@@ -2902,15 +2902,15 @@ fn drop_ty(@block_ctxt cx,\n     ret res(cx, C_nil());\n }\n \n-fn call_memcpy(@block_ctxt cx,\n+fn call_memmove(@block_ctxt cx,\n                ValueRef dst,\n                ValueRef src,\n                ValueRef n_bytes,\n                ValueRef align_bytes) -> result {\n     // FIXME: switch to the 64-bit variant when on such a platform.\n     auto i = cx.fcx.lcx.ccx.intrinsics;\n-    assert (i.contains_key(\"llvm.memcpy.p0i8.p0i8.i32\"));\n-    auto memcpy = i.get(\"llvm.memcpy.p0i8.p0i8.i32\");\n+    assert (i.contains_key(\"llvm.memmove.p0i8.p0i8.i32\"));\n+    auto memmove = i.get(\"llvm.memmove.p0i8.p0i8.i32\");\n     auto src_ptr = cx.build.PointerCast(src, T_ptr(T_i8()));\n     auto dst_ptr = cx.build.PointerCast(dst, T_ptr(T_i8()));\n     auto size = cx.build.IntCast(n_bytes, T_i32());\n@@ -2921,7 +2921,7 @@ fn call_memcpy(@block_ctxt cx,\n             { cx.build.IntCast(C_int(0), T_i32()) };\n \n     auto volatile = C_bool(false);\n-    ret res(cx, cx.build.Call(memcpy,\n+    ret res(cx, cx.build.Call(memmove,\n                               vec(dst_ptr, src_ptr,\n                                   size, align, volatile)));\n }\n@@ -2949,14 +2949,14 @@ fn call_bzero(@block_ctxt cx,\n                                   size, align, volatile)));\n }\n \n-fn memcpy_ty(@block_ctxt cx,\n+fn memmove_ty(@block_ctxt cx,\n              ValueRef dst,\n              ValueRef src,\n              ty.t t) -> result {\n     if (ty.type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, t)) {\n         auto llsz = size_of(cx, t);\n         auto llalign = align_of(llsz.bcx, t);\n-        ret call_memcpy(llalign.bcx, dst, src, llsz.val, llalign.val);\n+        ret call_memmove(llalign.bcx, dst, src, llsz.val, llalign.val);\n \n     } else {\n         ret res(cx, cx.build.Store(cx.build.Load(src), dst));\n@@ -2993,7 +2993,7 @@ fn copy_ty(@block_ctxt cx,\n         if (action == DROP_EXISTING) {\n             r = drop_ty(r.bcx, dst, t);\n         }\n-        ret memcpy_ty(r.bcx, dst, src, t);\n+        ret memmove_ty(r.bcx, dst, src, t);\n     }\n \n     cx.fcx.lcx.ccx.sess.bug(\"unexpected type in trans.copy_ty: \" +\n@@ -7299,9 +7299,9 @@ fn trans_main_fn(@local_ctxt cx, ValueRef llcrate, ValueRef crate_map) {\n \n fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n \n-    let vec[TypeRef] T_memcpy32_args = vec(T_ptr(T_i8()), T_ptr(T_i8()),\n+    let vec[TypeRef] T_memmove32_args = vec(T_ptr(T_i8()), T_ptr(T_i8()),\n                                            T_i32(), T_i32(), T_i1());\n-    let vec[TypeRef] T_memcpy64_args = vec(T_ptr(T_i8()), T_ptr(T_i8()),\n+    let vec[TypeRef] T_memmove64_args = vec(T_ptr(T_i8()), T_ptr(T_i8()),\n                                            T_i64(), T_i32(), T_i1());\n \n     let vec[TypeRef] T_memset32_args = vec(T_ptr(T_i8()), T_i8(),\n@@ -7311,10 +7311,10 @@ fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n \n     let vec[TypeRef] T_trap_args = vec();\n \n-    auto memcpy32 = decl_cdecl_fn(llmod, \"llvm.memcpy.p0i8.p0i8.i32\",\n-                                  T_fn(T_memcpy32_args, T_void()));\n-    auto memcpy64 = decl_cdecl_fn(llmod, \"llvm.memcpy.p0i8.p0i8.i64\",\n-                                  T_fn(T_memcpy64_args, T_void()));\n+    auto memmove32 = decl_cdecl_fn(llmod, \"llvm.memmove.p0i8.p0i8.i32\",\n+                                  T_fn(T_memmove32_args, T_void()));\n+    auto memmove64 = decl_cdecl_fn(llmod, \"llvm.memmove.p0i8.p0i8.i64\",\n+                                  T_fn(T_memmove64_args, T_void()));\n \n     auto memset32 = decl_cdecl_fn(llmod, \"llvm.memset.p0i8.i32\",\n                                   T_fn(T_memset32_args, T_void()));\n@@ -7325,8 +7325,8 @@ fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n                               T_fn(T_trap_args, T_void()));\n \n     auto intrinsics = new_str_hash[ValueRef]();\n-    intrinsics.insert(\"llvm.memcpy.p0i8.p0i8.i32\", memcpy32);\n-    intrinsics.insert(\"llvm.memcpy.p0i8.p0i8.i64\", memcpy64);\n+    intrinsics.insert(\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n+    intrinsics.insert(\"llvm.memmove.p0i8.p0i8.i64\", memmove64);\n     intrinsics.insert(\"llvm.memset.p0i8.i32\", memset32);\n     intrinsics.insert(\"llvm.memset.p0i8.i64\", memset64);\n     intrinsics.insert(\"llvm.trap\", trap);\n@@ -7527,7 +7527,7 @@ fn trans_vec_append_glue(@local_ctxt cx) {\n                                      elt_llsz, bind take_one(elt_tydesc,\n                                                              _, _, _)).bcx;\n \n-        ret call_memcpy(bcx, dst, src, n_bytes, elt_llalign);\n+        ret call_memmove(bcx, dst, src, n_bytes, elt_llalign);\n     }\n \n     // Copy any dst elements in, omitting null if doing str.\n@@ -7597,8 +7597,7 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n \n fn make_common_glue(session.session sess, str output) {\n     // FIXME: part of this is repetitive and is probably a good idea\n-    // to autogen it, but things like the memcpy implementation are not\n-    // and it might be better to just check in a .ll file.\n+    // to autogen it.\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(Str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());"}]}