{"sha": "0a8fd43e2d8f0a659086babda97bc358fee31f58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOGZkNDNlMmQ4ZjBhNjU5MDg2YmFiZGE5N2JjMzU4ZmVlMzFmNTg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T21:44:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T21:44:58Z"}, "message": "Rollup merge of #73291 - marmeladema:hir-id-ification-fix, r=petrochenkov\n\nPre-compute `LocalDefId` <-> `HirId` mappings and remove `NodeId` <-> `HirId` conversion APIs\n\ncc #50928\n\nI don't know who is exactly the best person to review this.\n\nr? @petrochenkov", "tree": {"sha": "e439a5398145ffb3f3efc623aea21af7bdc5babe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e439a5398145ffb3f3efc623aea21af7bdc5babe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8fd43e2d8f0a659086babda97bc358fee31f58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7oNbCRBK7hj4Ov3rIwAAdHIIAB9JS+NofIkP4bJfmUI6p/U3\njE2GxtTVC7xYQUPnfpu6sO74WFnE1CSmXCdkLRdL+8j2YNWLoRDb5t7LDA+VTHn9\n5RmhiBfusEb4W782uy7vcqXzu6t0taPPAlY1RoLHxWMrO/urKBspH3SHP/ulf+BG\njnvOAYiVoFy4OaBKZ6QDvJpmOiFmKplMDb5OJvMdtZn9GOAch8mKIMHCoMLD6YeY\nXOfiCLFQ+7Ym8llVApDb7NmbzfVngD8MLpnaCz6GS2q2TdnXe5pDpAShN2mIZAWI\n30Nxl5Y/yDx2eNTvgnitT8Op6sfDB/unXD1gCZzPmE4mD7bWtS6Ji2ifIdX8QuE=\n=Tufg\n-----END PGP SIGNATURE-----\n", "payload": "tree e439a5398145ffb3f3efc623aea21af7bdc5babe\nparent 90030876558d9c9f8623210fd7861136d2bae4f7\nparent 13104ef1c5c7e8ebd973b07b33ac3794fc8fed59\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592689498 -0700\ncommitter GitHub <noreply@github.com> 1592689498 -0700\n\nRollup merge of #73291 - marmeladema:hir-id-ification-fix, r=petrochenkov\n\nPre-compute `LocalDefId` <-> `HirId` mappings and remove `NodeId` <-> `HirId` conversion APIs\n\ncc #50928\n\nI don't know who is exactly the best person to review this.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8fd43e2d8f0a659086babda97bc358fee31f58", "html_url": "https://github.com/rust-lang/rust/commit/0a8fd43e2d8f0a659086babda97bc358fee31f58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8fd43e2d8f0a659086babda97bc358fee31f58/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90030876558d9c9f8623210fd7861136d2bae4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/90030876558d9c9f8623210fd7861136d2bae4f7", "html_url": "https://github.com/rust-lang/rust/commit/90030876558d9c9f8623210fd7861136d2bae4f7"}, {"sha": "13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "url": "https://api.github.com/repos/rust-lang/rust/commits/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59", "html_url": "https://github.com/rust-lang/rust/commit/13104ef1c5c7e8ebd973b07b33ac3794fc8fed59"}], "stats": {"total": 113, "additions": 48, "deletions": 65}, "files": [{"sha": "6abf3dac76a210ac51fb39192078eaa519d18d13", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -205,6 +205,8 @@ pub trait Resolver {\n     fn lint_buffer(&mut self) -> &mut LintBuffer;\n \n     fn next_node_id(&mut self) -> NodeId;\n+\n+    fn trait_map(&self) -> &NodeMap<Vec<hir::TraitCandidate>>;\n }\n \n type NtToTokenstream = fn(&Nonterminal, &ParseSess, Span) -> TokenStream;\n@@ -557,6 +559,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n+        let trait_map = self\n+            .resolver\n+            .trait_map()\n+            .iter()\n+            .map(|(&k, v)| (self.node_id_to_hir_id[k].unwrap(), v.clone()))\n+            .collect();\n+\n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n         hir::Crate {\n@@ -571,6 +580,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             trait_impls: self.trait_impls,\n             modules: self.modules,\n             proc_macros,\n+            trait_map,\n         }\n     }\n "}, {"sha": "5755a3db92ac1400fb9210de30cccea8dfb8aacf", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -81,14 +81,13 @@ pub struct Definitions {\n \n     def_id_to_span: IndexVec<LocalDefId, Span>,\n \n-    // FIXME(eddyb) don't go through `ast::NodeId` to convert between `HirId`\n-    // and `LocalDefId` - ideally all `LocalDefId`s would be HIR owners.\n     node_id_to_def_id: FxHashMap<ast::NodeId, LocalDefId>,\n     def_id_to_node_id: IndexVec<LocalDefId, ast::NodeId>,\n \n-    pub(super) node_id_to_hir_id: IndexVec<ast::NodeId, Option<hir::HirId>>,\n-    /// The reverse mapping of `node_id_to_hir_id`.\n-    pub(super) hir_id_to_node_id: FxHashMap<hir::HirId, ast::NodeId>,\n+    // FIXME(eddyb) ideally all `LocalDefId`s would be HIR owners.\n+    pub(super) def_id_to_hir_id: IndexVec<LocalDefId, Option<hir::HirId>>,\n+    /// The reverse mapping of `def_id_to_hir_id`.\n+    pub(super) hir_id_to_def_id: FxHashMap<hir::HirId, LocalDefId>,\n \n     /// If `ExpnId` is an ID of some macro expansion,\n     /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n@@ -327,47 +326,27 @@ impl Definitions {\n \n     #[inline]\n     pub fn local_def_id(&self, node: ast::NodeId) -> LocalDefId {\n-        self.opt_local_def_id(node).unwrap_or_else(|| {\n-            panic!(\"no entry for node id: `{:?}` / `{:?}`\", node, self.opt_node_id_to_hir_id(node))\n-        })\n+        self.opt_local_def_id(node).unwrap_or_else(|| panic!(\"no entry for node id: `{:?}`\", node))\n     }\n \n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: LocalDefId) -> hir::HirId {\n         self.local_def_id_to_hir_id(def_id)\n     }\n \n-    #[inline]\n-    pub fn hir_id_to_node_id(&self, hir_id: hir::HirId) -> ast::NodeId {\n-        self.hir_id_to_node_id[&hir_id]\n-    }\n-\n-    #[inline]\n-    pub fn node_id_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n-        self.node_id_to_hir_id[node_id].unwrap()\n-    }\n-\n-    #[inline]\n-    pub fn opt_node_id_to_hir_id(&self, node_id: ast::NodeId) -> Option<hir::HirId> {\n-        self.node_id_to_hir_id[node_id]\n-    }\n-\n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, id: LocalDefId) -> hir::HirId {\n-        let node_id = self.def_id_to_node_id[id];\n-        self.node_id_to_hir_id[node_id].unwrap()\n+        self.def_id_to_hir_id[id].unwrap()\n     }\n \n     #[inline]\n     pub fn opt_local_def_id_to_hir_id(&self, id: LocalDefId) -> Option<hir::HirId> {\n-        let node_id = self.def_id_to_node_id[id];\n-        self.node_id_to_hir_id[node_id]\n+        self.def_id_to_hir_id[id]\n     }\n \n     #[inline]\n     pub fn opt_hir_id_to_local_def_id(&self, hir_id: hir::HirId) -> Option<LocalDefId> {\n-        let node_id = self.hir_id_to_node_id(hir_id);\n-        self.opt_local_def_id(node_id)\n+        self.hir_id_to_def_id.get(&hir_id).copied()\n     }\n \n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n@@ -477,16 +456,24 @@ impl Definitions {\n         mapping: IndexVec<ast::NodeId, Option<hir::HirId>>,\n     ) {\n         assert!(\n-            self.node_id_to_hir_id.is_empty(),\n-            \"trying to initialize `NodeId` -> `HirId` mapping twice\"\n+            self.def_id_to_hir_id.is_empty(),\n+            \"trying to initialize `LocalDefId` <-> `HirId` mappings twice\"\n         );\n-        self.node_id_to_hir_id = mapping;\n \n-        // Build the reverse mapping of `node_id_to_hir_id`.\n-        self.hir_id_to_node_id = self\n-            .node_id_to_hir_id\n-            .iter_enumerated()\n-            .filter_map(|(node_id, &hir_id)| hir_id.map(|hir_id| (hir_id, node_id)))\n+        self.def_id_to_hir_id = self\n+            .def_id_to_node_id\n+            .iter()\n+            .map(|&node_id| mapping.get(node_id).and_then(|&hir_id| hir_id))\n+            .collect();\n+\n+        // Build the reverse mapping of `def_id_to_hir_id`.\n+        self.hir_id_to_def_id = mapping\n+            .into_iter_enumerated()\n+            .filter_map(|(node_id, hir_id)| {\n+                hir_id.and_then(|hir_id| {\n+                    self.node_id_to_def_id.get(&node_id).map(|&def_id| (hir_id, def_id))\n+                })\n+            })\n             .collect();\n     }\n "}, {"sha": "7d1cb7738c35e71a8b31065b8933209fc5892311", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -639,6 +639,8 @@ pub struct Crate<'hir> {\n     /// A list of proc macro HirIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<HirId>,\n+\n+    pub trait_map: BTreeMap<HirId, Vec<TraitCandidate>>,\n }\n \n impl Crate<'hir> {\n@@ -2651,7 +2653,7 @@ pub type CaptureModeMap = NodeMap<CaptureBy>;\n // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n-#[derive(Clone, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n     pub import_ids: SmallVec<[LocalDefId; 1]>,"}, {"sha": "dce06a5f7eeecd12125045c78a4613a40b59c04d", "filename": "src/librustc_middle/hir/map/collector.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fcollector.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -117,6 +117,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 body_ids: _,\n                 modules: _,\n                 proc_macros: _,\n+                trait_map: _,\n             } = *krate;\n \n             hash_body(&mut hcx, root_mod_def_path_hash, item, &mut hir_body_nodes)\n@@ -241,11 +242,8 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         // Make sure that the DepNode of some node coincides with the HirId\n         // owner of that node.\n         if cfg!(debug_assertions) {\n-            let node_id = self.definitions.hir_id_to_node_id(hir_id);\n-            assert_eq!(self.definitions.node_id_to_hir_id(node_id), hir_id);\n-\n             if hir_id.owner != self.current_dep_node_owner {\n-                let node_str = match self.definitions.opt_local_def_id(node_id) {\n+                let node_str = match self.definitions.opt_hir_id_to_local_def_id(hir_id) {\n                     Some(def_id) => self.definitions.def_path(def_id).to_string_no_crate(),\n                     None => format!(\"{:?}\", node),\n                 };\n@@ -335,9 +333,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         debug!(\"visit_item: {:?}\", i);\n         debug_assert_eq!(\n             i.hir_id.owner,\n-            self.definitions\n-                .opt_local_def_id(self.definitions.hir_id_to_node_id(i.hir_id))\n-                .unwrap()\n+            self.definitions.opt_hir_id_to_local_def_id(i.hir_id).unwrap()\n         );\n         self.with_dep_node_owner(i.hir_id.owner, i, |this, hash| {\n             this.insert_with_hash(i.span, i.hir_id, Node::Item(i), hash);\n@@ -369,9 +365,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(\n             ti.hir_id.owner,\n-            self.definitions\n-                .opt_local_def_id(self.definitions.hir_id_to_node_id(ti.hir_id))\n-                .unwrap()\n+            self.definitions.opt_hir_id_to_local_def_id(ti.hir_id).unwrap()\n         );\n         self.with_dep_node_owner(ti.hir_id.owner, ti, |this, hash| {\n             this.insert_with_hash(ti.span, ti.hir_id, Node::TraitItem(ti), hash);\n@@ -385,9 +379,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(\n             ii.hir_id.owner,\n-            self.definitions\n-                .opt_local_def_id(self.definitions.hir_id_to_node_id(ii.hir_id))\n-                .unwrap()\n+            self.definitions.opt_hir_id_to_local_def_id(ii.hir_id).unwrap()\n         );\n         self.with_dep_node_owner(ii.hir_id.owner, ii, |this, hash| {\n             this.insert_with_hash(ii.span, ii.hir_id, Node::ImplItem(ii), hash);"}, {"sha": "5b44ffe8cafd73ade1e165e1acd660f194b7b69a", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -1101,9 +1101,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (hir_id, v) in resolutions.trait_map.into_iter() {\n+        for (hir_id, v) in krate.trait_map.iter() {\n             let map = trait_map.entry(hir_id.owner).or_default();\n-            map.insert(hir_id.local_id, StableVec::new(v));\n+            map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n         }\n \n         GlobalCtxt {"}, {"sha": "56fb3b58d3f6b52ee7c6b64ed658f633beab54b7", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -121,7 +121,6 @@ pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub export_map: ExportMap<LocalDefId>,"}, {"sha": "91bd155614178b67831ef649e6308133f2f74985", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8fd43e2d8f0a659086babda97bc358fee31f58/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0a8fd43e2d8f0a659086babda97bc358fee31f58", "patch": "@@ -1109,6 +1109,10 @@ impl rustc_ast_lowering::Resolver for Resolver<'_> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n     }\n+\n+    fn trait_map(&self) -> &NodeMap<Vec<TraitCandidate>> {\n+        &self.trait_map\n+    }\n }\n \n impl<'a> Resolver<'a> {\n@@ -1284,11 +1288,6 @@ impl<'a> Resolver<'a> {\n         let definitions = self.definitions;\n         let extern_crate_map = self.extern_crate_map;\n         let export_map = self.export_map;\n-        let trait_map = self\n-            .trait_map\n-            .into_iter()\n-            .map(|(k, v)| (definitions.node_id_to_hir_id(k), v))\n-            .collect();\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n@@ -1297,7 +1296,6 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             extern_crate_map,\n             export_map,\n-            trait_map,\n             glob_map,\n             maybe_unused_trait_imports,\n             maybe_unused_extern_crates,\n@@ -1315,11 +1313,6 @@ impl<'a> Resolver<'a> {\n             cstore: Box::new(self.cstore().clone()),\n             extern_crate_map: self.extern_crate_map.clone(),\n             export_map: self.export_map.clone(),\n-            trait_map: self\n-                .trait_map\n-                .iter()\n-                .map(|(&k, v)| (self.definitions.node_id_to_hir_id(k), v.clone()))\n-                .collect(),\n             glob_map: self.glob_map.clone(),\n             maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),"}]}