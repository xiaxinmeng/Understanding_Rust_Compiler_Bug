{"sha": "f7235a898a150ce77a214f51c30f9ac8bd8864a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MjM1YTg5OGExNTBjZTc3YTIxNGY1MWMzMGY5YWM4YmQ4ODY0YTU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-27T00:00:35Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-27T00:05:02Z"}, "message": "Normalize the test output of hygiene-related tests\n\nA raw SyntaxContext id is implicitly dependent on the target platform,\nsince libstd and libcore have platform-dependent #[cfg]s which affect\nwhich macros are invoked. As a result, we must strip out any\nSyntaxContext ids from test output to ensure that the captured stdout is\nnot platform-dependent.", "tree": {"sha": "1550b0577dcdaf7322d0b8357514b205cbd221a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1550b0577dcdaf7322d0b8357514b205cbd221a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7235a898a150ce77a214f51c30f9ac8bd8864a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8eGrYACgkQtAh+UQ6Y\nsWTUmQ//a2bNpBKXknFHdd8n3yVVwoKiva202Ut8Uqrg+/2kaU3VNHrHrZHKyw/K\ni1n6KqDbUvB9tUu5RzlAMmowgS1krt/2EphENyRCBv87gAIjnaSru7QIfSrQA269\nwE3ihl34CagrNpVJlnm1DFafg2z2jukhkJjIdP3oAwl4h+KV/APf4ewwmqM2XrFN\nOpwW5OdVgyH+p6shIcqiKtCBxWP+0jSTqVazg2SWZ6yguIp+ee+WXRSRkS34aCjh\nxSAKc4SVLyg/YFPxDSsPzmBXJdwcU35i6vWOpYd4KncWwuwIYXBAuOzF47U74U8i\nCezCEr/rSqPXcEd0wz4r8jzdD21UrbPGlFb4QpgaEsCTKf8kCKa1asahLrqu0TBs\n0CnOUjJeWK7wGKAgTibW2B7n5Qv9suiOzQgk4h7LnSF3r+ohQCV/UqzDtna3U7Ti\nYLzyKCGk1I/YheBE/Il97l4xftMK/tSgakYKyGUjb4cMwGPslQoAmocZkthnZnql\nAbtQwrV+Wt4NnoS5h7WXJ+BF/F3pYivt5oozvr4+KD7v/eJ8R9B+h68KMdAFyYkd\nPm2nAqK3gHyaeKyxusZmuRBTrBmT90GB6L4gxbNkR/ZSIDBiyjN4o5Z+SBVqhtSt\nJXsQyoT+Wg8uQy+fAAXaIJt8cK4bejX9edL139LB0pBrOUlN3zQ=\n=jY6C\n-----END PGP SIGNATURE-----", "payload": "tree 1550b0577dcdaf7322d0b8357514b205cbd221a9\nparent 768803cbb5450eba53641c9342c7b81b6b6aedf8\nauthor Aaron Hill <aa1ronham@gmail.com> 1595808035 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1595808302 -0400\n\nNormalize the test output of hygiene-related tests\n\nA raw SyntaxContext id is implicitly dependent on the target platform,\nsince libstd and libcore have platform-dependent #[cfg]s which affect\nwhich macros are invoked. As a result, we must strip out any\nSyntaxContext ids from test output to ensure that the captured stdout is\nnot platform-dependent.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7235a898a150ce77a214f51c30f9ac8bd8864a5", "html_url": "https://github.com/rust-lang/rust/commit/f7235a898a150ce77a214f51c30f9ac8bd8864a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7235a898a150ce77a214f51c30f9ac8bd8864a5/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "768803cbb5450eba53641c9342c7b81b6b6aedf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/768803cbb5450eba53641c9342c7b81b6b6aedf8", "html_url": "https://github.com/rust-lang/rust/commit/768803cbb5450eba53641c9342c7b81b6b6aedf8"}], "stats": {"total": 336, "additions": 142, "deletions": 194}, "files": [{"sha": "9ce90e42069fbd7820fd938fcb2733bbf79090ab", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -5,6 +5,7 @@\n // Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n // normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n // normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "c36c75603876ddeadb17244f2436ba04fac2ada1", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -2,79 +2,79 @@ PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]"}, {"sha": "2a9ff4c20cdec9530b4481aab0d1c9726a1fab01", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -6,6 +6,7 @@\n // Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n // normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n // normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "456940b89da2b04026afd0526e21748e00110bda", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -2,109 +2,109 @@ PRINT-ATTR INPUT (DISPLAY): struct A(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"$crate\",\n-                        span: #6 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #6 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #6 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #6 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                 ],\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct B(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #13 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"B\",\n-        span: #13 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #13 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #13 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"$crate\",\n-                        span: #13 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #13 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #13 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #13 bytes(LO..HI),\n+                        span: #CTXT bytes(LO..HI),\n                     },\n                 ],\n-                span: #13 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #13 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #13 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]"}, {"sha": "1a5223d3d4190c24ae1be664cd39b8ffba625e13", "filename": "src/test/ui/proc-macro/dollar-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -6,6 +6,7 @@\n // Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n // normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n // normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "deef102afb2d9faad8fc8623eb5e713f0645c1ff", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -2,239 +2,239 @@ PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #6 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #6 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #16 bytes(LO..HI),\n+                span: #CTXT bytes(LO..HI),\n             },\n         ],\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #16 bytes(LO..HI),\n+        span: #CTXT bytes(LO..HI),\n     },\n ]"}, {"sha": "41c829d9d889945bdef0227c3065ed767823b89a", "filename": "src/test/ui/proc-macro/input-interpolated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -1,6 +1,7 @@\n // Check what token streams proc macros see when interpolated tokens are passed to them as input.\n \n // check-pass\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // aux-build:test-macros.rs\n \n #[macro_use]"}, {"sha": "d98f52249a7812d837f077a7f25032d012fac089", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -5,61 +5,61 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"A\",\n-                span: #0 bytes(402..403),\n+                span: #CTXT bytes(445..446),\n             },\n         ],\n-        span: #6 bytes(269..271),\n+        span: #CTXT bytes(312..314),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): const A : u8 = 0 ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"const\",\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Punct {\n         ch: ':',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Ident {\n         ident: \"u8\",\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: None,\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct A { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: #0 bytes(0..0),\n+        span: #CTXT bytes(0..0),\n     },\n ]"}, {"sha": "4b1787453cb55c6609d675ab4651fc21dff8adba", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -1,8 +1,9 @@\n // aux-build:make-macro.rs\n // aux-build:meta-macro.rs\n // edition:2018\n-// compile-flags: -Z span-debug -Z unpretty=expanded,hygiene -Z macro-backtrace\n+// compile-flags: -Z span-debug -Z macro-backtrace\n // check-pass\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n //\n // We don't care about symbol ids, so we set them all to 0"}, {"sha": "e162bdd7fc090594f60006c972d7d37e80b517fc", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 63, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -1,63 +1,3 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7)\n-Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:19:37: 19:43 (#6) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:19:43: 19:45 (#6) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:19:43: 19:45 (#6) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:19:45: 19:50 (#6) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:19:50: 19:51 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:19:51: 19:53 (#6) }]\n-Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#7) }]\n-#![feature /* 0#0 */(prelude_import)]\n-#[prelude_import /* 0#1 */]\n-use std /* 0#1 */::prelude /* 0#1 */::v1 /* 0#1 */::*;\n-#[macro_use /* 0#1 */]\n-extern crate std /* 0#1 */;\n-// aux-build:make-macro.rs\n-// aux-build:meta-macro.rs\n-// edition:2018\n-// compile-flags: -Z span-debug -Z unpretty=expanded,hygiene -Z macro-backtrace\n-// check-pass\n-// normalize-stdout-test \"\\d+#\" -> \"0#\"\n-//\n-// We don't care about symbol ids, so we set them all to 0\n-// in the stdout\n-extern crate meta_macro /* 0#0 */;\n-\n-macro_rules! produce_it\n-    /*\n-    0#0\n-    */ {\n-    () =>\n-    {\n-        meta_macro :: print_def_site ! ($ crate :: dummy ! ()) ;\n-        // `print_def_site!` will respan the `$crate` identifier\n-        // with `Span::def_site()`. This should cause it to resolve\n-        // relative to `meta_macro`, *not* `make_macro` (despite\n-        // the fact that that `print_def_site` is produced by\n-        // a `macro_rules!` macro in `make_macro`).\n-    }\n-}\n-\n-fn main /* 0#0 */() { }\n-\n-/*\n-Expansions:\n-0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n-3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"cfg_if\")\n-4: parent: ExpnId(3), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::cfg_if\")\n-5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::cfg_if\")\n-6: parent: ExpnId(5), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"features\")\n-7: parent: ExpnId(2), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n-8: parent: ExpnId(7), call_site_ctxt: #7, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n-\n-SyntaxContexts:\n-#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n-#1: parent: #0, outer_mark: (ExpnId(1), Opaque)\n-#2: parent: #0, outer_mark: (ExpnId(1), Transparent)\n-#3: parent: #0, outer_mark: (ExpnId(6), SemiTransparent)\n-#4: parent: #0, outer_mark: (ExpnId(3), SemiTransparent)\n-#5: parent: #0, outer_mark: (ExpnId(4), SemiTransparent)\n-#6: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n-#7: parent: #0, outer_mark: (ExpnId(7), Opaque)\n-#8: parent: #6, outer_mark: (ExpnId(7), Transparent)\n-#9: parent: #0, outer_mark: (ExpnId(7), SemiTransparent)\n-#10: parent: #0, outer_mark: (ExpnId(8), Opaque)\n-#11: parent: #7, outer_mark: (ExpnId(8), Transparent)\n-#12: parent: #7, outer_mark: (ExpnId(8), SemiTransparent)\n-*/\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT)\n+Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:20:37: 20:43 (#CTXT) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:20:43: 20:45 (#CTXT) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:20:43: 20:45 (#CTXT) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:20:45: 20:50 (#CTXT) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:20:50: 20:51 (#CTXT) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:20:51: 20:53 (#CTXT) }]\n+Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }]"}, {"sha": "579e232c0d92beb64b22619cc16fbc1ed97cef04", "filename": "src/test/ui/proc-macro/meta-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -2,6 +2,7 @@\n // aux-build:meta-macro.rs\n // edition:2018\n // compile-flags: -Z span-debug\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // run-pass\n \n extern crate meta_macro;"}, {"sha": "a9847a25d9273df411e8f47b084d2834529ef07e", "filename": "src/test/ui/proc-macro/meta-macro.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -1,3 +1,3 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#6)\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT)\n Input: TokenStream []\n Respanned: TokenStream []"}, {"sha": "62c3dd84ce1a4b4172ef8df8a4e28178471344c1", "filename": "src/test/ui/proc-macro/nested-macro-rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -2,6 +2,7 @@\n // aux-build:nested-macro-rules.rs\n // aux-build:test-macros.rs\n // compile-flags: -Z span-debug\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // edition:2018\n \n extern crate nested_macro_rules;"}, {"sha": "337b9863def1b0c5b00e7fa7877aeb0bd699f58b", "filename": "src/test/ui/proc-macro/nested-macro-rules.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -5,10 +5,10 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"FirstStruct\",\n-                span: $DIR/auxiliary/nested-macro-rules.rs:15:14: 15:25 (#8),\n+                span: $DIR/auxiliary/nested-macro-rules.rs:15:14: 15:25 (#CTXT),\n             },\n         ],\n-        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#7),\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#CTXT),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): SecondStruct\n@@ -18,9 +18,9 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"SecondStruct\",\n-                span: $DIR/nested-macro-rules.rs:18:38: 18:50 (#14),\n+                span: $DIR/nested-macro-rules.rs:19:38: 19:50 (#CTXT),\n             },\n         ],\n-        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#13),\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#CTXT),\n     },\n ]"}, {"sha": "1dc8796de90f9df7ac62bda677f20df004923cfe", "filename": "src/test/ui/proc-macro/nodelim-groups.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:test-macros.rs\n // compile-flags: -Z span-debug\n+// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // edition:2018\n //\n // Tests the pretty-printing behavior of inserting `NoDelim` groups"}, {"sha": "79cdf2b53b52e8481cf28af9e5891bf61d0f89ab", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f7235a898a150ce77a214f51c30f9ac8bd8864a5/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=f7235a898a150ce77a214f51c30f9ac8bd8864a5", "patch": "@@ -4,7 +4,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         kind: Str,\n         symbol: \"hi\",\n         suffix: None,\n-        span: $DIR/nodelim-groups.rs:13:42: 13:46 (#6),\n+        span: $DIR/nodelim-groups.rs:14:42: 14:46 (#CTXT),\n     },\n     Group {\n         delimiter: None,\n@@ -13,12 +13,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:17:16: 17:17 (#0),\n+                span: $DIR/nodelim-groups.rs:18:16: 18:17 (#CTXT),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:17:18: 17:19 (#0),\n+                span: $DIR/nodelim-groups.rs:18:18: 18:19 (#CTXT),\n             },\n             Group {\n                 delimiter: Parenthesis,\n@@ -27,24 +27,24 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                         kind: Integer,\n                         symbol: \"25\",\n                         suffix: None,\n-                        span: $DIR/nodelim-groups.rs:17:21: 17:23 (#0),\n+                        span: $DIR/nodelim-groups.rs:18:21: 18:23 (#CTXT),\n                     },\n                 ],\n-                span: $DIR/nodelim-groups.rs:17:20: 17:24 (#0),\n+                span: $DIR/nodelim-groups.rs:18:20: 18:24 (#CTXT),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:17:25: 17:26 (#0),\n+                span: $DIR/nodelim-groups.rs:18:25: 18:26 (#CTXT),\n             },\n             Literal {\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:17:27: 17:28 (#0),\n+                span: $DIR/nodelim-groups.rs:18:27: 18:28 (#CTXT),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:13:47: 13:51 (#6),\n+        span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -53,21 +53,21 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:13:53: 13:54 (#6),\n+                span: $DIR/nodelim-groups.rs:14:53: 14:54 (#CTXT),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:13:55: 13:56 (#6),\n+                span: $DIR/nodelim-groups.rs:14:55: 14:56 (#CTXT),\n             },\n             Literal {\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:13:57: 13:58 (#6),\n+                span: $DIR/nodelim-groups.rs:14:57: 14:58 (#CTXT),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:13:52: 13:59 (#6),\n+        span: $DIR/nodelim-groups.rs:14:52: 14:59 (#CTXT),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n@@ -77,7 +77,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         kind: Str,\n         symbol: \"hi\",\n         suffix: None,\n-        span: $DIR/nodelim-groups.rs:13:42: 13:46 (#11),\n+        span: $DIR/nodelim-groups.rs:14:42: 14:46 (#CTXT),\n     },\n     Group {\n         delimiter: None,\n@@ -86,49 +86,49 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Str,\n                 symbol: \"hello\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Punct {\n                 ch: '.',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Ident {\n                 ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Literal {\n                 kind: Str,\n                 symbol: \"world\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Punct {\n                 ch: '.',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Ident {\n                 ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:13:47: 13:51 (#11),\n+        span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -137,20 +137,20 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:13:53: 13:54 (#11),\n+                span: $DIR/nodelim-groups.rs:14:53: 14:54 (#CTXT),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:13:55: 13:56 (#11),\n+                span: $DIR/nodelim-groups.rs:14:55: 14:56 (#CTXT),\n             },\n             Literal {\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:13:57: 13:58 (#11),\n+                span: $DIR/nodelim-groups.rs:14:57: 14:58 (#CTXT),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:13:52: 13:59 (#11),\n+        span: $DIR/nodelim-groups.rs:14:52: 14:59 (#CTXT),\n     },\n ]"}]}