{"sha": "1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMDhhY2U5NWM4MjViZDQ4YWQ5ZGZmZGIyN2ZkNjNiZTQ1YmIzYzI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-21T13:52:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T13:52:47Z"}, "message": "Rollup merge of #87273 - fee1-dead:impl-const-impl-bounds, r=oli-obk\n\nRecognize bounds on impls as const bounds\n\nr? ```@oli-obk```", "tree": {"sha": "5786084682e91ed2798eeec904ae056d429dfc91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5786084682e91ed2798eeec904ae056d429dfc91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+CawCRBK7hj4Ov3rIwAAL6oIAKBmjd64RKFiEcOhF40UkTpH\no/+76WFQAZsvq2GqsHev0APPiq8JWmTcZay+Nl8Sg+A1qjgASTbKgOITq/eWhW6K\nZehJGeiKp4tpAdN7FtdCXnvfl6yF2d1gXPhR63YExR/ObJSq0zeVz5Y24INV92w2\nGAvHADwKEEVTRK9pAKiD+JAP95VwI6xA3Hx/GEWvSObxkw2bvlKmx/z5tFke/xri\nUZADFOn1cwtaiDhbVLPGAqkka4nKoVxt1BXLcRJfQqMuV7YJNik0eJo6M6IObgIo\npdtw6CejBYpBMh6e+yo7OeLIALqEg7XckwWWqbgE5ajx23PRm9uWINa5OVZ+sa8=\n=n98K\n-----END PGP SIGNATURE-----\n", "payload": "tree 5786084682e91ed2798eeec904ae056d429dfc91\nparent e6380a699b150b88e4e0b43ed5e7c3eff438ec58\nparent 4b82bbeac009c09c55e4a5458ee7338bddb14a44\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626875567 +0200\ncommitter GitHub <noreply@github.com> 1626875567 +0200\n\nRollup merge of #87273 - fee1-dead:impl-const-impl-bounds, r=oli-obk\n\nRecognize bounds on impls as const bounds\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "html_url": "https://github.com/rust-lang/rust/commit/1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6380a699b150b88e4e0b43ed5e7c3eff438ec58", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6380a699b150b88e4e0b43ed5e7c3eff438ec58", "html_url": "https://github.com/rust-lang/rust/commit/e6380a699b150b88e4e0b43ed5e7c3eff438ec58"}, {"sha": "4b82bbeac009c09c55e4a5458ee7338bddb14a44", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b82bbeac009c09c55e4a5458ee7338bddb14a44", "html_url": "https://github.com/rust-lang/rust/commit/4b82bbeac009c09c55e4a5458ee7338bddb14a44"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "6aff2fdbd1f220e6964f2340cc371bfb5ff1bea2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "patch": "@@ -3060,6 +3060,27 @@ impl<'hir> Node<'hir> {\n             Node::Crate(_) | Node::Visibility(_) => None,\n         }\n     }\n+\n+    /// Returns `Constness::Const` when this node is a const fn/impl.\n+    pub fn constness(&self) -> Constness {\n+        match self {\n+            Node::Item(Item {\n+                kind: ItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::Item(Item { kind: ItemKind::Impl(Impl { constness, .. }), .. }) => *constness,\n+\n+            _ => Constness::NotConst,\n+        }\n+    }\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger."}, {"sha": "cfc538ef500a12d2e43d4846dc8d46ca23c037b7", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "patch": "@@ -897,16 +897,19 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                                 permitted = true;\n                             }\n                         }\n-                        let mut const_impls = true;\n-                        tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n-                            if const_impls {\n-                                if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n-                                    const_impls = false;\n+                        if !permitted {\n+                            // if trait's impls are all const, permit the call.\n+                            let mut const_impls = true;\n+                            tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n+                                if const_impls {\n+                                    if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n+                                        const_impls = false;\n+                                    }\n                                 }\n+                            });\n+                            if const_impls {\n+                                permitted = true;\n                             }\n-                        });\n-                        if const_impls {\n-                            permitted = true;\n                         }\n                     }\n "}, {"sha": "13686cfec809a8635e683129330341d1a222a62e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n@@ -175,13 +174,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        // FIXME: refactor this into a method\n-        let node = self.tcx.hir().get(self.body_id);\n-        if let Some(fn_like) = FnLikeNode::from_node(node) {\n-            fn_like.constness()\n-        } else {\n-            hir::Constness::NotConst\n-        }\n+        self.tcx.hir().get(self.body_id).constness()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "1a4c2eb5155849168bcb719b3763737abc840ea3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "patch": "@@ -35,7 +35,6 @@ use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n@@ -358,11 +357,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn default_constness_for_trait_bounds(&self) -> hir::Constness {\n-        if let Some(fn_like) = FnLikeNode::from_node(self.node()) {\n-            fn_like.constness()\n-        } else {\n-            hir::Constness::NotConst\n-        }\n+        self.node().constness()\n     }\n \n     fn get_type_parameter_bounds("}, {"sha": "536c1d737402346f87f5209e4bf0be7f11e5c01f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1008ace95c825bd48ad9dffdb27fd63be45bb3c2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+trait MyPartialEq {\n+    fn eq(&self, other: &Self) -> bool;\n+}\n+\n+impl<T: PartialEq> const MyPartialEq for T {\n+    fn eq(&self, other: &Self) -> bool {\n+        PartialEq::eq(self, other)\n+    }\n+}\n+\n+fn main() {}"}]}