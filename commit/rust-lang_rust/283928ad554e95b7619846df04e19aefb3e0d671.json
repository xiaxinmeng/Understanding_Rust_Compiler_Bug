{"sha": "283928ad554e95b7619846df04e19aefb3e0d671", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MzkyOGFkNTU0ZTk1Yjc2MTk4NDZkZjA0ZTE5YWVmYjNlMGQ2NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-27T15:59:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-27T15:59:32Z"}, "message": "Auto merge of #925 - christianpoveda:environ-shim, r=RalfJung\n\nWrite name and value for each env var\n\nIn order to res0lve https://github.com/rust-lang/miri/issues/756 is necessary to have the whole `\"NAME=VALUE\"` sequence of bytes written into memory instead of just the value.\n\nThis change does not affect the interface of the `shim::envs::EnvVars` type in any way.\n\nr? @RalfJung @oli-obk", "tree": {"sha": "850e94ad64e1328f19c42c93359b21fbd7e701a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850e94ad64e1328f19c42c93359b21fbd7e701a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/283928ad554e95b7619846df04e19aefb3e0d671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/283928ad554e95b7619846df04e19aefb3e0d671", "html_url": "https://github.com/rust-lang/rust/commit/283928ad554e95b7619846df04e19aefb3e0d671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/283928ad554e95b7619846df04e19aefb3e0d671/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69268fb75fdb452296caa9bc4aaeff1674279de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/69268fb75fdb452296caa9bc4aaeff1674279de2", "html_url": "https://github.com/rust-lang/rust/commit/69268fb75fdb452296caa9bc4aaeff1674279de2"}, {"sha": "7d93cc7b5efeeec001aa8071b1bc61b8cc111c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d93cc7b5efeeec001aa8071b1bc61b8cc111c95", "html_url": "https://github.com/rust-lang/rust/commit/7d93cc7b5efeeec001aa8071b1bc61b8cc111c95"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "8f946a2b5eb10a9538c193723de0c053af06c8d1", "filename": "src/shims/env.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/283928ad554e95b7619846df04e19aefb3e0d671/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283928ad554e95b7619846df04e19aefb3e0d671/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=283928ad554e95b7619846df04e19aefb3e0d671", "patch": "@@ -7,6 +7,8 @@ use crate::*;\n \n #[derive(Default)]\n pub struct EnvVars {\n+    /// Stores pointers to the environment variables. These variables must be stored as\n+    /// null-terminated C strings with the `\"{name}={value}\"` format.\n     map: HashMap<Vec<u8>, Pointer<Tag>>,\n }\n \n@@ -16,17 +18,19 @@ impl EnvVars {\n     ) {\n         if ecx.machine.communicate {\n             for (name, value) in std::env::vars() {\n-                let value = alloc_env_value(value.as_bytes(), ecx.memory_mut());\n-                ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n+                let var_ptr = alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n+                ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n             }\n         }\n     }\n }\n \n-fn alloc_env_value<'mir, 'tcx>(\n-    bytes: &[u8],\n+fn alloc_env_var<'mir, 'tcx>(\n+    name: &[u8],\n+    value: &[u8],\n     memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>,\n ) -> Pointer<Tag> {\n+    let bytes = [name, b\"=\", value].concat();\n     let tcx = {memory.tcx.tcx};\n     let length = bytes.len() as u64;\n     // `+1` for the null terminator.\n@@ -57,7 +61,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let name = this.memory().read_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n-            Some(&var) => Scalar::Ptr(var),\n+            // The offset is used to strip the \"{name}=\" part of the string.\n+            Some(var_ptr) => Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?),\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n     }\n@@ -80,8 +85,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n         if let Some((name, value)) = new {\n-            let value_copy = alloc_env_value(&value, this.memory_mut());\n-            if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), value_copy) {\n+            let var_ptr = alloc_env_var(&name, &value, this.memory_mut());\n+            if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n                 this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             Ok(0)"}]}