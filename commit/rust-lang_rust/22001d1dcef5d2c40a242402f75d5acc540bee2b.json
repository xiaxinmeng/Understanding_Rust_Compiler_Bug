{"sha": "22001d1dcef5d2c40a242402f75d5acc540bee2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMDAxZDFkY2VmNWQyYzQwYTI0MjQwMmY3NWQ1YWNjNTQwYmVlMmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-08T23:59:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-12T00:31:40Z"}, "message": "Remove hack_allow_leaks\n\nHappy to close the loop on this one.\n\nIssue #236", "tree": {"sha": "a55206e06b4cc3dabebb699d295c9b83704c0b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a55206e06b4cc3dabebb699d295c9b83704c0b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22001d1dcef5d2c40a242402f75d5acc540bee2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22001d1dcef5d2c40a242402f75d5acc540bee2b", "html_url": "https://github.com/rust-lang/rust/commit/22001d1dcef5d2c40a242402f75d5acc540bee2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22001d1dcef5d2c40a242402f75d5acc540bee2b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d267e7486e7158f8633424389f789d23149e1064", "url": "https://api.github.com/repos/rust-lang/rust/commits/d267e7486e7158f8633424389f789d23149e1064", "html_url": "https://github.com/rust-lang/rust/commit/d267e7486e7158f8633424389f789d23149e1064"}], "stats": {"total": 31, "additions": 3, "deletions": 28}, "files": [{"sha": "cbee1f1f4795bd53052bca1898f1207bb77f570f", "filename": "src/lib/test.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=22001d1dcef5d2c40a242402f75d5acc540bee2b", "patch": "@@ -26,7 +26,6 @@ export configure_test_task;\n export joinable;\n \n native \"rust\" mod rustrt {\n-    fn hack_allow_leaks();\n     fn sched_threads() -> uint;\n }\n \n@@ -325,12 +324,6 @@ fn configure_test_task() {\n     // If this task fails we don't want that failure to propagate to the\n     // test runner or else we couldn't keep running tests\n     task::unsupervise();\n-\n-    // FIXME (236): Hack supreme - unwinding doesn't work yet so if this\n-    // task fails memory will not be freed correctly. This turns off the\n-    // sanity checks in the runtime's memory region for the task, so that\n-    // the test runner can continue.\n-    rustrt::hack_allow_leaks();\n }\n \n // Local Variables:"}, {"sha": "a55d073543d7c611c95869424818e38d38fd6bd9", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=22001d1dcef5d2c40a242402f75d5acc540bee2b", "patch": "@@ -15,13 +15,13 @@ memory_region::alloc_header *memory_region::get_header(void *mem) {\n memory_region::memory_region(rust_srv *srv, bool synchronized) :\n     _srv(srv), _parent(NULL), _live_allocations(0),\n     _detailed_leaks(srv->env->detailed_leaks),\n-    _synchronized(synchronized), _hack_allow_leaks(false) {\n+    _synchronized(synchronized) {\n }\n \n memory_region::memory_region(memory_region *parent) :\n     _srv(parent->_srv), _parent(parent), _live_allocations(0),\n     _detailed_leaks(parent->_detailed_leaks),\n-    _synchronized(parent->_synchronized), _hack_allow_leaks(false) {\n+    _synchronized(parent->_synchronized) {\n }\n \n void memory_region::add_alloc() {\n@@ -127,18 +127,13 @@ memory_region::~memory_region() {\n         assert(leak_count == _live_allocations);\n     }\n #endif\n-    if (!_hack_allow_leaks && _live_allocations > 0) {\n+    if (_live_allocations > 0) {\n         _srv->fatal(msg, __FILE__, __LINE__,\n                     \"%d objects\", _live_allocations);\n     }\n     if (_synchronized) { _lock.unlock(); }\n }\n \n-void\n-memory_region::hack_allow_leaks() {\n-    _hack_allow_leaks = true;\n-}\n-\n void\n memory_region::release_alloc(void *mem) {\n     alloc_header *alloc = get_header(mem);"}, {"sha": "9d2106c1eafcd7785a07ba4fddf716d3e5369617", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=22001d1dcef5d2c40a242402f75d5acc540bee2b", "patch": "@@ -32,7 +32,6 @@ class memory_region {\n     const bool _detailed_leaks;\n     const bool _synchronized;\n     lock_and_signal _lock;\n-    bool _hack_allow_leaks;\n \n     void add_alloc();\n     void dec_alloc();\n@@ -46,10 +45,6 @@ class memory_region {\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n     virtual ~memory_region();\n-    // FIXME (236: This is a temporary hack to allow failing tasks that leak\n-    // to not kill the entire process, which the test runner needs. Please\n-    // kill with prejudice once unwinding works.\n-    void hack_allow_leaks();\n \n     void release_alloc(void *mem);\n     void claim_alloc(void *mem);"}, {"sha": "2499dea0328d4a5590abdcc8acaeebcdac6174fa", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=22001d1dcef5d2c40a242402f75d5acc540bee2b", "patch": "@@ -224,13 +224,6 @@ debug_opaque(rust_task *task, type_desc *t, uint8_t *front)\n     }\n }\n \n-extern \"C\" CDECL void\n-hack_allow_leaks(rust_task *task)\n-{\n-    LOG(task, stdlib, \"hack_allow_leaks\");\n-    task->local_region.hack_allow_leaks();\n-}\n-\n struct rust_box {\n     RUST_REFCOUNTED(rust_box)\n "}, {"sha": "bf8155b7998a2333cb514192b83d3ff75b7096b6", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/22001d1dcef5d2c40a242402f75d5acc540bee2b/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=22001d1dcef5d2c40a242402f75d5acc540bee2b", "patch": "@@ -28,7 +28,6 @@ get_task_id\n get_task_pointer\n get_task_trampoline\n get_time\n-hack_allow_leaks\n last_os_error\n leak\n migrate_alloc"}]}