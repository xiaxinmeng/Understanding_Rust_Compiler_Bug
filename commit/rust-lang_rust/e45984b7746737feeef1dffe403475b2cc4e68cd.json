{"sha": "e45984b7746737feeef1dffe403475b2cc4e68cd", "node_id": "C_kwDOAAsO6NoAKGU0NTk4NGI3NzQ2NzM3ZmVlZWYxZGZmZTQwMzQ3NWIyY2M0ZTY4Y2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-07T16:57:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-07T16:57:16Z"}, "message": "Rollup merge of #107706 - tgross35:atomic-as-mut-ptr, r=m-ou-se\n\nMark 'atomic_mut_ptr' methods const\n\nThere's nothing that would block these methods from being const (just an UnsafeCell get), and it would be helpful for FFI interfaces in static contexts\n\nRelated tracking issue: #66893", "tree": {"sha": "edc8432ff538f05ef758ea1df825fe653cb651a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc8432ff538f05ef758ea1df825fe653cb651a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e45984b7746737feeef1dffe403475b2cc4e68cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4oLsCRBK7hj4Ov3rIwAAd5MIAB4sD/A36RmNmrbLDGUH1e3e\n2lmuKe1QBDJB0uK7yV3bg384ngntzBsYjFPnL/UHsiDpuM36abFBSrOXYCwE2Ftq\nx02vBM3Ffl704DdeDyk4+xSzJeaXTFBi6Q5NuWmNw4eoKVZtrPPAWt2SMjTRP2bV\n+fHbEjNRy5sP574k/UeDSh9Ue8d3JkTDH6TBuxVvIau9gxogVBFS/4vhhdZS8gox\n7G0NSVAZTtyRTDhQVpfU2ytRzoh5WQJofDVTao1LHOBtXwsmjRjKsaM30bgYotPE\n+DLUbMTrkOwTQyLcnsLVj/nprW1Nck0orBmKidDFAb+peXtyZ8rx+0Xon3hisH0=\n=Q5fb\n-----END PGP SIGNATURE-----\n", "payload": "tree edc8432ff538f05ef758ea1df825fe653cb651a0\nparent b2284b9fd1c363b02d52cbd6e1a4d76a3190e7c6\nparent b51d3b9443e0da9246d9017d93da2a25d93bc89b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675789036 +0100\ncommitter GitHub <noreply@github.com> 1675789036 +0100\n\nRollup merge of #107706 - tgross35:atomic-as-mut-ptr, r=m-ou-se\n\nMark 'atomic_mut_ptr' methods const\n\nThere's nothing that would block these methods from being const (just an UnsafeCell get), and it would be helpful for FFI interfaces in static contexts\n\nRelated tracking issue: #66893\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e45984b7746737feeef1dffe403475b2cc4e68cd", "html_url": "https://github.com/rust-lang/rust/commit/e45984b7746737feeef1dffe403475b2cc4e68cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e45984b7746737feeef1dffe403475b2cc4e68cd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2284b9fd1c363b02d52cbd6e1a4d76a3190e7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2284b9fd1c363b02d52cbd6e1a4d76a3190e7c6", "html_url": "https://github.com/rust-lang/rust/commit/b2284b9fd1c363b02d52cbd6e1a4d76a3190e7c6"}, {"sha": "b51d3b9443e0da9246d9017d93da2a25d93bc89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51d3b9443e0da9246d9017d93da2a25d93bc89b", "html_url": "https://github.com/rust-lang/rust/commit/b51d3b9443e0da9246d9017d93da2a25d93bc89b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "1d14efc7523b42a9c86e4f23b555e45771df316a", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e45984b7746737feeef1dffe403475b2cc4e68cd/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e45984b7746737feeef1dffe403475b2cc4e68cd/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e45984b7746737feeef1dffe403475b2cc4e68cd", "patch": "@@ -928,8 +928,8 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub fn as_mut_ptr(&self) -> *mut bool {\n-        self.v.get() as *mut bool\n+    pub const fn as_mut_ptr(&self) -> *mut bool {\n+        self.v.get().cast()\n     }\n \n     /// Fetches the value, and applies a function to it that returns an optional\n@@ -1803,7 +1803,7 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// ```ignore (extern-declaration)\n     /// #![feature(atomic_mut_ptr)]\n-    //// use std::sync::atomic::AtomicPtr;\n+    /// use std::sync::atomic::AtomicPtr;\n     ///\n     /// extern \"C\" {\n     ///     fn my_atomic_op(arg: *mut *mut u32);\n@@ -1819,7 +1819,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub fn as_mut_ptr(&self) -> *mut *mut T {\n+    pub const fn as_mut_ptr(&self) -> *mut *mut T {\n         self.p.get()\n     }\n }\n@@ -2727,7 +2727,7 @@ macro_rules! atomic_int {\n             #[unstable(feature = \"atomic_mut_ptr\",\n                    reason = \"recently added\",\n                    issue = \"66893\")]\n-            pub fn as_mut_ptr(&self) -> *mut $int_type {\n+            pub const fn as_mut_ptr(&self) -> *mut $int_type {\n                 self.v.get()\n             }\n         }"}]}