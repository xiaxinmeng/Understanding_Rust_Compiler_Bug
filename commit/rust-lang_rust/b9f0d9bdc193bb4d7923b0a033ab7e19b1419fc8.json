{"sha": "b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZjBkOWJkYzE5M2JiNGQ3OTIzYjBhMDMzYWI3ZTE5YjE0MTlmYzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:49:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` `ImportResolution`", "tree": {"sha": "0a7bb3a3874cb27bf6dae6a98e8a699a9fb15776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a7bb3a3874cb27bf6dae6a98e8a699a9fb15776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8", "html_url": "https://github.com/rust-lang/rust/commit/b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b53a2cdd8e567a40d93e9879617989c89080e5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b53a2cdd8e567a40d93e9879617989c89080e5f", "html_url": "https://github.com/rust-lang/rust/commit/4b53a2cdd8e567a40d93e9879617989c89080e5f"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "73324f166fbb5c9ce9a92c2c25e8a5574dde187d", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b9f0d9bdc193bb4d7923b0a033ab7e19b1419fc8", "patch": "@@ -443,7 +443,7 @@ struct Module {\n     anonymous_children: RefCell<HashMap<NodeId,@Module>>,\n \n     // The status of resolving each import in this module.\n-    import_resolutions: RefCell<HashMap<Name, @mut ImportResolution>>,\n+    import_resolutions: RefCell<HashMap<Name, @ImportResolution>>,\n \n     // The number of unresolved globs that this module exports.\n     glob_count: Cell<uint>,\n@@ -1978,7 +1978,7 @@ impl Resolver {\n                     }\n                     None => {\n                         debug!(\"(building import directive) creating new\");\n-                        let resolution = @mut ImportResolution::new(id, is_public);\n+                        let resolution = @ImportResolution::new(id, is_public);\n                         resolution.outstanding_references.set(1);\n                         import_resolutions.get().insert(target.name,\n                                                         resolution);\n@@ -2334,8 +2334,7 @@ impl Resolver {\n                                 == 0 => {\n \n                         fn get_binding(this: &mut Resolver,\n-                                       import_resolution:\n-                                          @mut ImportResolution,\n+                                       import_resolution: @ImportResolution,\n                                        namespace: Namespace)\n                                     -> NamespaceResult {\n \n@@ -2534,7 +2533,7 @@ impl Resolver {\n                 None => {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n-                        @mut ImportResolution::new(id, is_public);\n+                        @ImportResolution::new(id, is_public);\n                     new_import_resolution.value_target.set(\n                         target_import_resolution.value_target.get());\n                     new_import_resolution.type_target.set(\n@@ -2577,8 +2576,8 @@ impl Resolver {\n             match import_resolutions.get().find(&name) {\n                 None => {\n                     // Create a new import resolution from this child.\n-                    dest_import_resolution = @mut ImportResolution::new(id,\n-                                                                        is_public);\n+                    dest_import_resolution =\n+                        @ImportResolution::new(id, is_public);\n                     import_resolutions.get().insert(name,\n                                                     dest_import_resolution);\n                 }"}]}