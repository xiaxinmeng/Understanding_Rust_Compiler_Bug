{"sha": "f194c9b26af5d280ab2d0e01fd85e23b3c303771", "node_id": "C_kwDOAAsO6NoAKGYxOTRjOWIyNmFmNWQyODBhYjJkMGUwMWZkODVlMjNiM2MzMDM3NzE", "commit": {"author": {"name": "r00ster91", "email": "r00ster91@protonmail.com", "date": "2021-12-06T17:55:58Z"}, "committer": {"name": "r00ster91", "email": "r00ster91@protonmail.com", "date": "2021-12-14T17:05:02Z"}, "message": "Recover on invalid operators <> and <=>", "tree": {"sha": "1224c7176918ea2f125aff03c633f0bcb6650c9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1224c7176918ea2f125aff03c633f0bcb6650c9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f194c9b26af5d280ab2d0e01fd85e23b3c303771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f194c9b26af5d280ab2d0e01fd85e23b3c303771", "html_url": "https://github.com/rust-lang/rust/commit/f194c9b26af5d280ab2d0e01fd85e23b3c303771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f194c9b26af5d280ab2d0e01fd85e23b3c303771/comments", "author": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c", "html_url": "https://github.com/rust-lang/rust/commit/0fb1c371d4a14f9ce7a721d8aea683a6e6774f6c"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "1c31c84b8bfec6161c3575328609bd8f318c1406", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f194c9b26af5d280ab2d0e01fd85e23b3c303771/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194c9b26af5d280ab2d0e01fd85e23b3c303771/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f194c9b26af5d280ab2d0e01fd85e23b3c303771", "patch": "@@ -213,11 +213,11 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n+            // Look for JS' `===` and `!==` and recover\n             if (op.node == AssocOp::Equal || op.node == AssocOp::NotEqual)\n                 && self.token.kind == token::Eq\n                 && self.prev_token.span.hi() == self.token.span.lo()\n             {\n-                // Look for JS' `===` and `!==` and recover \ud83d\ude07\n                 let sp = op.span.to(self.token.span);\n                 let sugg = match op.node {\n                     AssocOp::Equal => \"==\",\n@@ -235,6 +235,38 @@ impl<'a> Parser<'a> {\n                 self.bump();\n             }\n \n+            // Look for PHP's `<>` and recover\n+            if op.node == AssocOp::Less\n+                && self.token.kind == token::Gt\n+                && self.prev_token.span.hi() == self.token.span.lo()\n+            {\n+                let sp = op.span.to(self.token.span);\n+                self.struct_span_err(sp, \"invalid comparison operator `<>`\")\n+                    .span_suggestion_short(\n+                        sp,\n+                        \"`<>` is not a valid comparison operator, use `!=`\",\n+                        \"!=\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                self.bump();\n+            }\n+\n+            // Look for C++'s `<=>` and recover\n+            if op.node == AssocOp::LessEqual\n+                && self.token.kind == token::Gt\n+                && self.prev_token.span.hi() == self.token.span.lo()\n+            {\n+                let sp = op.span.to(self.token.span);\n+                self.struct_span_err(sp, \"invalid comparison operator `<=>`\")\n+                    .span_label(\n+                        sp,\n+                        \"`<=>` is not a valid comparison operator, use `std::cmp::Ordering`\",\n+                    )\n+                    .emit();\n+                self.bump();\n+            }\n+\n             let op = op.node;\n             // Special cases:\n             if op == AssocOp::As {"}, {"sha": "2beed528ff1c1949693fce536a57ec9e8c8e15c5", "filename": "src/test/ui/operator-recovery/less-than-greater-than.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fless-than-greater-than.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fless-than-greater-than.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foperator-recovery%2Fless-than-greater-than.rs?ref=f194c9b26af5d280ab2d0e01fd85e23b3c303771", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"{}\", 1 <> 2);\n+    //~^ERROR invalid comparison operator `<>`\n+}"}, {"sha": "80c921535bd08ee6cd736451dde85ab36f66fef4", "filename": "src/test/ui/operator-recovery/less-than-greater-than.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fless-than-greater-than.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fless-than-greater-than.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foperator-recovery%2Fless-than-greater-than.stderr?ref=f194c9b26af5d280ab2d0e01fd85e23b3c303771", "patch": "@@ -0,0 +1,8 @@\n+error: invalid comparison operator `<>`\n+  --> $DIR/less-than-greater-than.rs:2:22\n+   |\n+LL |     println!(\"{}\", 1 <> 2);\n+   |                      ^^ help: `<>` is not a valid comparison operator, use `!=`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a65f9389625fc74afd0dce74cc40dc32a52a612e", "filename": "src/test/ui/operator-recovery/spaceship.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fspaceship.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fspaceship.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foperator-recovery%2Fspaceship.rs?ref=f194c9b26af5d280ab2d0e01fd85e23b3c303771", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"{}\", 1 <=> 2);\n+    //~^ERROR invalid comparison operator `<=>`\n+}"}, {"sha": "ed6bd74c9b92edbeaf2797c9ec09c6da74a3ed74", "filename": "src/test/ui/operator-recovery/spaceship.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fspaceship.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f194c9b26af5d280ab2d0e01fd85e23b3c303771/src%2Ftest%2Fui%2Foperator-recovery%2Fspaceship.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foperator-recovery%2Fspaceship.stderr?ref=f194c9b26af5d280ab2d0e01fd85e23b3c303771", "patch": "@@ -0,0 +1,8 @@\n+error: invalid comparison operator `<=>`\n+  --> $DIR/spaceship.rs:2:22\n+   |\n+LL |     println!(\"{}\", 1 <=> 2);\n+   |                      ^^^ `<=>` is not a valid comparison operator, use `std::cmp::Ordering`\n+\n+error: aborting due to previous error\n+"}]}