{"sha": "6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGE5NGIwM2EwNGY5ZDRjZTFjNzJjNzdlOTUyNDhlZGFiYmJiZTc=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-11T18:04:05Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-11T18:04:05Z"}, "message": "finishing touches", "tree": {"sha": "cbc264980a9f67c5e1b02d2319377217e57dc3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc264980a9f67c5e1b02d2319377217e57dc3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7", "html_url": "https://github.com/rust-lang/rust/commit/6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8", "html_url": "https://github.com/rust-lang/rust/commit/c4e10c81b9d1ed5ab82f07ff467b175b0099a7e8"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "701e763bcea065996c95e073a2b877657a38941c", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=6c4a94b03a04f9d4ce1c72c77e95248edabbbbe7", "patch": "@@ -274,8 +274,7 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         let method = make::name_ref(\"hash\");\n         let arg = make::expr_path(make::ext::ident_path(\"state\"));\n         let expr = make::expr_method_call(target, method, make::arg_list(Some(arg)));\n-        let stmt = make::expr_stmt(expr);\n-        stmt.into()\n+        make::expr_stmt(expr).into()\n     }\n \n     let body = match adt {\n@@ -335,8 +334,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         let submodule = make::ext::ident_path(\"mem\");\n         let fn_name = make::ext::ident_path(\"discriminant\");\n         let fn_name = make::path_concat(submodule, fn_name);\n-        let fn_name = make::expr_path(make::path_concat(root, fn_name));\n-        fn_name\n+        make::expr_path(make::path_concat(root, fn_name))\n     }\n \n     fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n@@ -349,15 +347,11 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n         let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n         let name_ref = make::name_ref(field_name);\n-        let field = make::record_pat_field(name_ref, pat.into());\n-        field\n+        make::record_pat_field(name_ref, pat.into())\n     }\n \n-    fn gen_record_pat(\n-        record_name: ast::Path,\n-        r_fields: Vec<ast::RecordPatField>,\n-    ) -> ast::RecordPat {\n-        let list = make::record_pat_field_list(r_fields);\n+    fn gen_record_pat(record_name: ast::Path, fields: Vec<ast::RecordPatField>) -> ast::RecordPat {\n+        let list = make::record_pat_field_list(fields);\n         make::record_pat_with_fields(record_name, list)\n     }\n \n@@ -371,6 +365,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     fn gen_tuple_field(field_name: &String) -> ast::Pat {\n         ast::Pat::IdentPat(make::ident_pat(false, false, make::name(field_name)))\n     }\n+\n     // FIXME: return `None` if the trait carries a generic type; we can only\n     // generate this code `Self` for the time being.\n "}]}