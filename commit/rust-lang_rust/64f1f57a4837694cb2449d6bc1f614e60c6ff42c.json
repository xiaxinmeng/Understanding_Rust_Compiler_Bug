{"sha": "64f1f57a4837694cb2449d6bc1f614e60c6ff42c", "node_id": "C_kwDOAAsO6NoAKDY0ZjFmNTdhNDgzNzY5NGNiMjQ0OWQ2YmMxZjYxNGU2MGM2ZmY0MmM", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-06-04T15:08:33Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-06-04T20:12:29Z"}, "message": "fix: handle inner ignore attribute on stdin", "tree": {"sha": "6f6623dcd279c414969d889c570aece5d1f89301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6623dcd279c414969d889c570aece5d1f89301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f1f57a4837694cb2449d6bc1f614e60c6ff42c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f1f57a4837694cb2449d6bc1f614e60c6ff42c", "html_url": "https://github.com/rust-lang/rust/commit/64f1f57a4837694cb2449d6bc1f614e60c6ff42c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f1f57a4837694cb2449d6bc1f614e60c6ff42c/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79515f17ed4661da864347c90c76c51f9bf86069", "url": "https://api.github.com/repos/rust-lang/rust/commits/79515f17ed4661da864347c90c76c51f9bf86069", "html_url": "https://github.com/rust-lang/rust/commit/79515f17ed4661da864347c90c76c51f9bf86069"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "23d90d9e2e069a666052762ee03f832f22d234bd", "filename": "src/formatting.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/64f1f57a4837694cb2449d6bc1f614e60c6ff42c/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1f57a4837694cb2449d6bc1f614e60c6ff42c/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=64f1f57a4837694cb2449d6bc1f614e60c6ff42c", "patch": "@@ -40,12 +40,10 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n         rustc_span::create_session_if_not_set_then(self.config.edition().into(), |_| {\n             if self.config.disable_all_formatting() {\n                 // When the input is from stdin, echo back the input.\n-                if let Input::Text(ref buf) = input {\n-                    if let Err(e) = io::stdout().write_all(buf.as_bytes()) {\n-                        return Err(From::from(e));\n-                    }\n-                }\n-                return Ok(FormatReport::new());\n+                return match input {\n+                    Input::Text(ref buf) => echo_back_stdin(buf),\n+                    _ => Ok(FormatReport::new()),\n+                };\n             }\n \n             let config = &self.config.clone();\n@@ -94,6 +92,13 @@ fn should_skip_module<T: FormatHandler>(\n     false\n }\n \n+fn echo_back_stdin(input: &str) -> Result<FormatReport, ErrorKind> {\n+    if let Err(e) = io::stdout().write_all(input.as_bytes()) {\n+        return Err(From::from(e));\n+    }\n+    Ok(FormatReport::new())\n+}\n+\n // Format an entire crate (or subset of the module tree).\n fn format_project<T: FormatHandler>(\n     input: Input,\n@@ -136,7 +141,8 @@ fn format_project<T: FormatHandler>(\n     .visit_crate(&krate)?\n     .into_iter()\n     .filter(|(path, module)| {\n-        !should_skip_module(config, &context, input_is_stdin, &main_file, path, module)\n+        input_is_stdin\n+            || !should_skip_module(config, &context, input_is_stdin, &main_file, path, module)\n     })\n     .collect::<Vec<_>>();\n \n@@ -146,6 +152,14 @@ fn format_project<T: FormatHandler>(\n     context.parse_session.set_silent_emitter();\n \n     for (path, module) in files {\n+        if input_is_stdin && contains_skip(module.attrs()) {\n+            return echo_back_stdin(\n+                context\n+                    .parse_session\n+                    .snippet_provider(module.span)\n+                    .entire_snippet(),\n+            );\n+        }\n         should_emit_verbose(input_is_stdin, config, || println!(\"Formatting {}\", path));\n         context.format_file(path, &module, is_macro_def)?;\n     }"}, {"sha": "18ec8620facdfd9ebab43c32b53a6ba4deaef439", "filename": "src/test/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/64f1f57a4837694cb2449d6bc1f614e60c6ff42c/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1f57a4837694cb2449d6bc1f614e60c6ff42c/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=64f1f57a4837694cb2449d6bc1f614e60c6ff42c", "patch": "@@ -578,6 +578,30 @@ fn stdin_generated_files_issue_5172() {\n     );\n }\n \n+#[test]\n+fn stdin_handles_mod_inner_ignore_attr() {\n+    // see https://github.com/rust-lang/rustfmt/issues/5368\n+    init_log();\n+    let input = String::from(\"#![rustfmt::skip]\\n\\nfn    main() {  }\");\n+    let mut child = Command::new(rustfmt().to_str().unwrap())\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()\n+        .expect(\"failed to execute child\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n+        stdin\n+            .write_all(input.as_bytes())\n+            .expect(\"failed to write stdin\");\n+    }\n+\n+    let output = child.wait_with_output().expect(\"failed to wait on child\");\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(input, String::from_utf8(output.stdout).unwrap());\n+}\n+\n #[test]\n fn format_lines_errors_are_reported() {\n     init_log();"}]}