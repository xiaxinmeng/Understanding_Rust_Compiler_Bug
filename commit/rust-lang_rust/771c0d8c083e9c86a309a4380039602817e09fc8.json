{"sha": "771c0d8c083e9c86a309a4380039602817e09fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MWMwZDhjMDgzZTljODZhMzA5YTQzODAwMzk2MDI4MTdlMDlmYzg=", "commit": {"author": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-05T04:08:46Z"}, "committer": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-05T05:55:44Z"}, "message": "Add static semantic token modifier for associated functions with no &self\n\nrefactor logic into code_model.rs", "tree": {"sha": "59d966962cee08a8194706e3d20d8d19ddee6265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59d966962cee08a8194706e3d20d8d19ddee6265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/771c0d8c083e9c86a309a4380039602817e09fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/771c0d8c083e9c86a309a4380039602817e09fc8", "html_url": "https://github.com/rust-lang/rust/commit/771c0d8c083e9c86a309a4380039602817e09fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/771c0d8c083e9c86a309a4380039602817e09fc8/comments", "author": null, "committer": null, "parents": [{"sha": "3baa526fb07184ce9804a06c8e0251971eea3b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/3baa526fb07184ce9804a06c8e0251971eea3b49", "html_url": "https://github.com/rust-lang/rust/commit/3baa526fb07184ce9804a06c8e0251971eea3b49"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "d04de053f2861eedb337b0047d4d5b68d5e9e2b2", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/771c0d8c083e9c86a309a4380039602817e09fc8/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771c0d8c083e9c86a309a4380039602817e09fc8/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=771c0d8c083e9c86a309a4380039602817e09fc8", "patch": "@@ -41,7 +41,7 @@ use rustc_hash::FxHashSet;\n use stdx::impl_from;\n use syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, SmolStr,\n+    AstNode, SmolStr, SyntaxKind,\n };\n use tt::{Ident, Leaf, Literal, TokenTree};\n \n@@ -788,8 +788,25 @@ impl Function {\n         db.function_data(self.id).has_body\n     }\n \n-    pub fn source(self, db: &dyn HirDatabase) -> InFile<ast::Fn> {\n-        self.id.lookup(db.upcast()).source(db.upcast())\n+    /// whether this function is associated with some trait/impl\n+    pub fn is_associated(self, db: &dyn HirDatabase) -> bool {\n+        if let Some(_) = self.self_param(db) {\n+            return false;\n+        }\n+\n+        let fn_parent_kind = self\n+            .source(db)\n+            .value\n+            .syntax()\n+            .parent()\n+            .and_then(|s| s.parent())\n+            .and_then(|s| Some(s.kind()));\n+\n+        match fn_parent_kind {\n+            Some(SyntaxKind::IMPL) => true,\n+            Some(SyntaxKind::TRAIT) => true,\n+            _ => false,\n+        }\n     }\n }\n "}, {"sha": "3fcdb5e52f19e65bd1e35be1e635d25786926b87", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/771c0d8c083e9c86a309a4380039602817e09fc8/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771c0d8c083e9c86a309a4380039602817e09fc8/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=771c0d8c083e9c86a309a4380039602817e09fc8", "patch": "@@ -746,20 +746,8 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n                 }\n-                if let None = func.self_param(db) {\n-                    // if enclosing IMPL or TRAIT exists, this is a static method\n-                    let fn_parent_kind = func\n-                        .source(db)\n-                        .value\n-                        .syntax()\n-                        .parent()\n-                        .and_then(|s| s.parent())\n-                        .and_then(|s| Some(s.kind()));\n-                    if let Some(SyntaxKind::IMPL) = fn_parent_kind {\n-                        h |= HighlightModifier::Static;\n-                    } else if let Some(SyntaxKind::TRAIT) = fn_parent_kind {\n-                        h |= HighlightModifier::Static;\n-                    }\n+                if func.is_associated(db) {\n+                    h |= HighlightModifier::Static;\n                 }\n                 return h;\n             }"}]}