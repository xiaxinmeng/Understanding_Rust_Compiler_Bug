{"sha": "da2752e00f0139fb13282b2bd97aa0f8c665aee9", "node_id": "C_kwDOAAsO6NoAKGRhMjc1MmUwMGYwMTM5ZmIxMzI4MmIyYmQ5N2FhMGY4YzY2NWFlZTk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T21:16:25Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-18T21:16:25Z"}, "message": "check accessibility before suggesting wrapping expressions", "tree": {"sha": "1f43ad0c535a11270645ede3480ecbc224aab587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f43ad0c535a11270645ede3480ecbc224aab587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da2752e00f0139fb13282b2bd97aa0f8c665aee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da2752e00f0139fb13282b2bd97aa0f8c665aee9", "html_url": "https://github.com/rust-lang/rust/commit/da2752e00f0139fb13282b2bd97aa0f8c665aee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da2752e00f0139fb13282b2bd97aa0f8c665aee9/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7163e7ff6542b200971a783dc2a720a0ff676e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/7163e7ff6542b200971a783dc2a720a0ff676e70", "html_url": "https://github.com/rust-lang/rust/commit/7163e7ff6542b200971a783dc2a720a0ff676e70"}], "stats": {"total": 101, "additions": 93, "deletions": 8}, "files": [{"sha": "30d7cc2e5fc6a490df12bc916d28a86e90d2d982", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da2752e00f0139fb13282b2bd97aa0f8c665aee9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2752e00f0139fb13282b2bd97aa0f8c665aee9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=da2752e00f0139fb13282b2bd97aa0f8c665aee9", "patch": "@@ -19,7 +19,6 @@ use rustc_span::{BytePos, Span};\n use super::method::probe;\n \n use std::iter;\n-use std::ops::Bound;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn emit_coerce_suggestions(\n@@ -349,13 +348,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            // Avoid suggesting wrapping in `NonZeroU64` and alike\n-            if self.tcx.layout_scalar_valid_range(expected_adt.did())\n-                != (Bound::Unbounded, Bound::Unbounded)\n-            {\n-                return;\n-            }\n-\n             let compatible_variants: Vec<String> = expected_adt\n                 .variants()\n                 .iter()\n@@ -364,6 +356,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n                 .filter_map(|variant| {\n                     let sole_field = &variant.fields[0];\n+\n+                    if !sole_field.did.is_local()\n+                        && !sole_field.vis.is_accessible_from(\n+                            self.tcx.parent_module(expr.hir_id).to_def_id(),\n+                            self.tcx,\n+                        )\n+                    {\n+                        return None;\n+                    }\n+\n                     let sole_field_ty = sole_field.ty(self.tcx, substs);\n                     if self.can_coerce(expr_ty, sole_field_ty) {\n                         let variant_path ="}, {"sha": "63cb1a1299147d24a0ade82bc97567f6ffb22dc8", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da2752e00f0139fb13282b2bd97aa0f8c665aee9/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2752e00f0139fb13282b2bd97aa0f8c665aee9/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.rs?ref=da2752e00f0139fb13282b2bd97aa0f8c665aee9", "patch": "@@ -0,0 +1,24 @@\n+mod inner {\n+    pub struct Wrapper<T>(T);\n+}\n+\n+fn needs_wrapper(t: inner::Wrapper<i32>) {}\n+fn needs_wrapping(t: std::num::Wrapping<i32>) {}\n+fn needs_ready(t: std::future::Ready<i32>) {}\n+\n+fn main() {\n+    // Suggest wrapping expression because type is local\n+    // and its privacy can be easily changed\n+    needs_wrapper(0);\n+    //~^ ERROR mismatched types\n+    //~| HELP  try wrapping the expression in `inner::Wrapper`\n+\n+    // Suggest wrapping expression because field is accessible\n+    needs_wrapping(0);\n+    //~^ ERROR mismatched types\n+    //~| HELP  try wrapping the expression in `std::num::Wrapping`\n+\n+    // Do not suggest wrapping expression\n+    needs_ready(Some(0));\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "536638632dec255a209a9b4e0b30c7a43c1ce1b0", "filename": "src/test/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/da2752e00f0139fb13282b2bd97aa0f8c665aee9/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da2752e00f0139fb13282b2bd97aa0f8c665aee9/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=da2752e00f0139fb13282b2bd97aa0f8c665aee9", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:12:19\n+   |\n+LL |     needs_wrapper(0);\n+   |     ------------- ^ expected struct `Wrapper`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Wrapper<i32>`\n+                found type `{integer}`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:5:4\n+   |\n+LL | fn needs_wrapper(t: inner::Wrapper<i32>) {}\n+   |    ^^^^^^^^^^^^^ ----------------------\n+help: try wrapping the expression in `inner::Wrapper`\n+   |\n+LL |     needs_wrapper(inner::Wrapper(0));\n+   |                   +++++++++++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:17:20\n+   |\n+LL |     needs_wrapping(0);\n+   |     -------------- ^ expected struct `Wrapping`, found integer\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Wrapping<i32>`\n+                found type `{integer}`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:6:4\n+   |\n+LL | fn needs_wrapping(t: std::num::Wrapping<i32>) {}\n+   |    ^^^^^^^^^^^^^^ --------------------------\n+help: try wrapping the expression in `std::num::Wrapping`\n+   |\n+LL |     needs_wrapping(std::num::Wrapping(0));\n+   |                    +++++++++++++++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrap-suggestion-privacy.rs:22:17\n+   |\n+LL |     needs_ready(Some(0));\n+   |     ----------- ^^^^^^^ expected struct `std::future::Ready`, found enum `Option`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `std::future::Ready<i32>`\n+                found enum `Option<{integer}>`\n+note: function defined here\n+  --> $DIR/wrap-suggestion-privacy.rs:7:4\n+   |\n+LL | fn needs_ready(t: std::future::Ready<i32>) {}\n+   |    ^^^^^^^^^^^ --------------------------\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}