{"sha": "f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOTU3NmM0YTQxNzI3YThkMTBiYmZkOGZkM2ZiMmUxMGUxYmUzYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T08:37:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-08T08:37:48Z"}, "message": "Auto merge of #42443 - tommyip:better_closure_msg, r=nikomatsakis\n\nBetter closure error message\n\nUse tracked data introduced in #42196 to provide a better closure\nerror message by showing why a closure implements `FnOnce`.\n\n```\nerror[E0525]: expected a closure that implements the `Fn` trait, but\nthis closure only implements `FnOnce`\n --> $DIR/issue_26046.rs:4:19\n  |\n4 |       let closure = move || {\n  |  ___________________^\n5 | |         vec\n6 | |     };\n  | |_____^\n  |\nnote: closure is `FnOnce` because it moves the variable `vec` out of\nits environment\n --> $DIR/issue_26046.rs:5:9\n  |\n5 |         vec\n  |         ^^^\n\nerror: aborting due to previous error(s)\n```\n\nFixes #26046\n\nr? @nikomatsakis\ncc @doomrobo", "tree": {"sha": "26bbca63feb0c871ae82bf9876fb54d626ca5411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26bbca63feb0c871ae82bf9876fb54d626ca5411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "html_url": "https://github.com/rust-lang/rust/commit/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76eea743b4b7a1827d921d1dc685f1102c17a1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/76eea743b4b7a1827d921d1dc685f1102c17a1b3", "html_url": "https://github.com/rust-lang/rust/commit/76eea743b4b7a1827d921d1dc685f1102c17a1b3"}, {"sha": "345b8332bde78dca7664b1b1b4f4a7284bd70a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/345b8332bde78dca7664b1b1b4f4a7284bd70a6d", "html_url": "https://github.com/rust-lang/rust/commit/345b8332bde78dca7664b1b1b4f4a7284bd70a6d"}], "stats": {"total": 122, "additions": 116, "deletions": 6}, "files": [{"sha": "c8e99c0354ab64d52ceaaf6b94fbb7d2cf655657", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "patch": "@@ -29,7 +29,7 @@ use hir::{self, intravisit, Local, Pat, Body};\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::map::NodeExpr;\n use hir::def_id::DefId;\n-use infer::{self, InferCtxt};\n+use infer::{self, InferCtxt, InferTables, InferTablesRef};\n use infer::type_variable::TypeVariableOrigin;\n use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n@@ -640,16 +640,44 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::ClosureKind(closure_def_id, kind) => {\n                         let found_kind = self.closure_kind(closure_def_id).unwrap();\n                         let closure_span = self.tcx.hir.span_if_local(closure_def_id).unwrap();\n+                        let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();\n                         let mut err = struct_span_err!(\n                             self.tcx.sess, closure_span, E0525,\n                             \"expected a closure that implements the `{}` trait, \\\n                                 but this closure only implements `{}`\",\n                             kind,\n                             found_kind);\n-                        err.span_note(\n+\n+                        err.span_label(\n                             obligation.cause.span,\n-                            &format!(\"the requirement to implement \\\n-                                        `{}` derives from here\", kind));\n+                            format!(\"the requirement to implement `{}` derives from here\", kind));\n+\n+                        let infer_tables = match self.tables {\n+                            InferTables::Interned(tables) =>\n+                                Some(InferTablesRef::Interned(tables)),\n+                            InferTables::InProgress(tables) =>\n+                                Some(InferTablesRef::InProgress(tables.borrow())),\n+                            InferTables::Missing => None,\n+                        };\n+\n+                        // Additional context information explaining why the closure only implements\n+                        // a particular trait.\n+                        if let Some(tables) = infer_tables {\n+                            match tables.closure_kinds.get(&node_id) {\n+                                Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) => {\n+                                    err.span_note(span, &format!(\n+                                        \"closure is `FnOnce` because it moves the \\\n+                                         variable `{}` out of its environment\", name));\n+                                },\n+                                Some(&(ty::ClosureKind::FnMut, Some((span, name)))) => {\n+                                    err.span_note(span, &format!(\n+                                        \"closure is `FnMut` because it mutates the \\\n+                                         variable `{}` here\", name));\n+                                },\n+                                _ => {}\n+                            }\n+                        }\n+\n                         err.emit();\n                         return;\n                     }"}, {"sha": "5ed7ace5437d38bef8b9e55982620a3d23cc6543", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.rs?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() -> Box<Fn()> {\n+    let num = 5;\n+\n+    let closure = || {\n+        num += 1;\n+    };\n+\n+    Box::new(closure)\n+}\n+\n+fn main() {}"}, {"sha": "dbf702e45030901ab56212e99e62c9abff739825", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "patch": "@@ -0,0 +1,20 @@\n+error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n+  --> $DIR/issue-26046-fn-mut.rs:14:19\n+   |\n+14 |       let closure = || {\n+   |  ___________________^\n+15 | |         num += 1;\n+16 | |     };\n+   | |_____^\n+17 | \n+18 |       Box::new(closure)\n+   |       ----------------- the requirement to implement `Fn` derives from here\n+   |\n+note: closure is `FnMut` because it mutates the variable `num` here\n+  --> $DIR/issue-26046-fn-mut.rs:15:9\n+   |\n+15 |         num += 1;\n+   |         ^^^\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "de06de530c6c0012590c9ea071c580f6069fe946", "filename": "src/test/ui/closure_context/issue-26046-fn-once.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.rs?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn get_closure() -> Box<Fn() -> Vec<u8>> {\n+    let vec = vec![1u8, 2u8];\n+\n+    let closure = move || {\n+        vec\n+    };\n+\n+    Box::new(closure)\n+}\n+\n+fn main() {}"}, {"sha": "3ec3f0cc9aa598ec676ddc38b4e6e840b9ec6a5a", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "patch": "@@ -0,0 +1,20 @@\n+error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n+  --> $DIR/issue-26046-fn-once.rs:14:19\n+   |\n+14 |       let closure = move || {\n+   |  ___________________^\n+15 | |         vec\n+16 | |     };\n+   | |_____^\n+17 | \n+18 |       Box::new(closure)\n+   |       ----------------- the requirement to implement `Fn` derives from here\n+   |\n+note: closure is `FnOnce` because it moves the variable `vec` out of its environment\n+  --> $DIR/issue-26046-fn-once.rs:15:9\n+   |\n+15 |         vec\n+   |         ^^^\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "409964082f2b6582302fad782c72d9932e0936a6", "filename": "src/test/ui/closure_context/issue-42065.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.rs?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "previous_filename": "src/test/ui/fn_once-moved.rs"}, {"sha": "5bbd372adb6cef96554b001de25abd0b661d8fa9", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=f09576c4a41727a8d10bbfd8fd3fb2e10e1be3b3", "patch": "@@ -1,13 +1,13 @@\n error[E0382]: use of moved value: `debug_dump_dict`\n-  --> $DIR/fn_once-moved.rs:21:5\n+  --> $DIR/issue-42065.rs:21:5\n    |\n 20 |     debug_dump_dict();\n    |     --------------- value moved here\n 21 |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^ value used here after move\n    |\n note: closure cannot be invoked more than once because it moves the variable `dict` out of its environment\n-  --> $DIR/fn_once-moved.rs:16:29\n+  --> $DIR/issue-42065.rs:16:29\n    |\n 16 |         for (key, value) in dict {\n    |                             ^^^^", "previous_filename": "src/test/ui/fn_once-moved.stderr"}]}